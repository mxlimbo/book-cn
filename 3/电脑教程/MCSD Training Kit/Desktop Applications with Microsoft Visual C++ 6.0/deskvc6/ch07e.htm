<HTML>
<HEAD>
<TITLE>Lab 7: Querying a Database</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="304"><H1>Lab 7: Querying a Database</H1></A>

<p>In this lab, you will implement the <b>Query Database</b> option for the STUpload
application. This option allows the user to submit a simple ad hoc query to the central
database. The user specifies a fund name, a start date, and an end date in a <b>
Query</b> dialog box; and is returned price history data for the specified fund between
the two dates. The user browses the query results in the <b>Results</b> dialog box,
which contains a read-only DataGrid Control bound to an ADO Data Control.</p>

<p>The <b>Query Database</b> option is available only if the STUpload application is
currently displaying price history data for a fund. The <b>Query Database</b> option is
generally used to check that the records the user is about to upload do not already
exist on the server. Therefore, the <b>Query</b> dialog box appears displaying the
current fund and date range as default values.</p>

<p>This lab assumes that you have installed SQL Server and set up the Stocks database
as directed in the &quot;<A HREF="abouta.htm#8">Getting Started</A>&quot; section of <i>About This Book</i>.</p>


<A NAME="305"><H2>Implementing the Query Dialog Box</H2></A>

<p>Your first task is to create the dialog template and the dialog class for the <b>
Query</b> dialog box.</p>

<p><li> <b>To create the Query dialog template</b></li></p>

<ol>

<p><li> Using Figure 7.17 as a guide create the <b>Query Database</b> dialog box
template. The resource has the ID <b>IDD_QUERYDIALOG</b>, and contains a combo box
control and two <b>Date Time Picker</b> controls. (Use the ToolTip feature to locate
the buttons for these controls on the <b>Controls</b> toolbar.)</li></p>

<p>
<img src="images/F07DA17.JPG" width=285 height=254 border="0">
</p><p>
<!-- caption --><b>Figure 7.17</b> <i>The <b>Query Database</b> dialog box</i><!-- /caption -->
</p>

<p><li> Assign the combo box control the ID <b>IDC_QUERY_FUND</b>. On the <b>Styles</b>
page, ensure that the <b>Sort</b> check box is selected. In the <b>Type</b> box, select
<b>Drop List</b>.</li></p>

<p><li> Click the drop-down arrow of the combo box. The selection handles change to show
the extent of the drop-down list. Drag the handle of the drop-down list so that it
extends to just above the <b>OK</b> and <b>Cancel</b> buttons.</li></p>

<p><li> Name the first <b>Date Time Picker</b> control <b>IDC_FROMDATE</b>. On the <b>
Styles</b> page, set the <b>Format</b> option to <b>Short Date</b>. Select the <b>Use
Spin Control</b> check box.</li></p>

<p><li> Repeat the procedure for the second <b>Date Time Picker</b> control, naming it
<b>IDC_TODATE</b>.</li></p>

</ol>

<p><li> <b>To create the CQueryDialog dialog class</b></li></p>

<ol>

<p><li> Press CTRL+W to open ClassWizard. When prompted, create the <b>CQueryDialog</b>
dialog class.</li></p>

<p><li> On the <b>Member Variables</b> tab, add the member variables shown in Table
7.5.</li></p>

<p><b>Table 7.5</b> <i>CQueryDialog Member Variables</i></p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Resource ID</th>
			<th>Category</th>
			<th>Variable type</th>
			<th>Variable name</th>
		</tr>
		
		<tr>
			<td valign="top">IDC_FUND</td>
			<td valign="top">Value</td>
			<td valign="top">int</td>			
			<td valign="top">m_nFund</td>
		</tr>

		<tr>
			<td valign="top">IDC_FUND</td>
			<td valign="top">Control</td>
			<td valign="top">CComboBox</td>			
			<td valign="top">m_dtFund</td>
		</tr>

		<tr>
			<td valign="top">IDC_FROMDATE</td>
			<td valign="top">Value</td>
			<td valign="top">CTime</td>			
			<td valign="top">m_fromdate</td>
		</tr>
		
		<tr>
			<td valign="top">IDC_FROMDATE</td>
			<td valign="top">Control</td>			
			<td valign="top">CDateTimeCtrl</td>
			<td valign="top">m_dtFrom</td>
		</tr>

		<tr>
			<td valign="top">IDC_TODATE</td>
			<td valign="top">Value</td>
			<td valign="top">CTime</td>			
			<td valign="top">m_todate</td>
		</tr>

		<tr>
			<td valign="top">IDC_TODATE</td>
			<td valign="top">Control</td>
			<td valign="top">CDateTimeCtrl</td>			
			<td valign="top">m_dtTo</td>
		</tr>

	</table>
</p>

</ol>

<p>You will now implement the <b>CQueryDialog::OnInitDialog()</b> function to
initialize the <b>Query Dialog</b> box. This function will fill the combo box with the
funds currently on file, and set the current selection. It will also initialize the <b>
Date Time Picker</b> controls with the first and last dates on file.</p>

<p><li> <b>To initialize the Query Dialog box</b></li></p>

<ol>

<p><li> Your first task is to make the <b>Select Fund</b> dialog box available to the
<b>CQueryDialog::OnInitDialog()</b> function. Open the <b>Mainfrm.h</b> file. To
the public section of the <b>CMainFrame</b> class definition, add the following
inline function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
const CFundDialog * GetFundDialog()
{return &amp;m_wndFundDialog;}
</pre></td></tr></table>
</p>

<p><li> Add the following lines to the top of the QueryDialog.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
#include &quot;Mainfrm.h&quot;
#include &quot;STUploadDoc.h&quot;
#include &quot;FundDialog.h&quot;
</pre></td></tr></table>
</p>

<p><li> Use ClassWizard to create the <b>CQueryDialog::OnInitDialog()</b> function
(handle the <b>WM_INITDIALOG</b> message in the <b>CQueryDialog</b> class). Replace the
// TODO comment in the generated function with the following code:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH7_01.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
CMainFrame * pWnd =
dynamic_cast&lt;CMainFrame *&gt;
(AfxGetAPP()-&gt;m pMainWnd();

ASSERT_VALID(pWnd);

CSTUploadDoc * pDoc =
     dynamic_cast&lt;CSTUploadDoc *&gt;(pWnd-&gt;GetActiveDocument());

ASSERT_VALID(pDoc);

const CFundDialog * pFD = pWnd-&gt;GetFundDialog();

ASSERT_VALID(pFD);

// Fill combo box with current fund names
for(int n = 0; n &lt; pFD-&gt;m_listBox.GetCount(); n++)
{
     CString strBuf;
     pFD-&gt;m_listBox.GetText(n, strBuf);
     m_cbFund.AddString(strBuf);
}

// Set listbox selection to strCurrentFund parameter
int iPos =
     m_cbFund.FindStringExact(-1, pDoc-&gt;GetCurrentFund());
     m_cbFund.SetCurSel(iPos);

// Setup Date Time Pickers
m_dtFrom.SetFormat(&quot;d MMM yyy&quot;);
m_dtTo.SetFormat(&quot;d MMM yyy&quot;);
</pre></td></tr></table>
</p>

</ol>

<p>You will need to overload the <b>OnOK()</b> function for the <b>CQueryDialog</b>
class to retrieve the fund selected by the user:</p>

<p><li> <b>To implement the CQueryDialog::OnOK() function</b></li></p>

<ol>

<p><li> Open the QueryDialog.h file, and add the following variable to the <b>public</b>
section of the <b>CQueryDialog</b> class definition:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
CString m_strFund;
</pre></td></tr></table>
</p>

<p><li> Use ClassWizard to create the <b>OnOK()</b> function to handle the <b>
BN_CLICKED</b> message for the <b>IDOK</b> object ID. Replace the // TODO comment with
this code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
int nChoice = m_cbFund.GetCurSel();

if(nChoice &gt;= 0)
     m_cbFund.GetLBText(nChoice, m_strFund);
</pre></td></tr></table>
</p>

</ol>


<A NAME="306"><H2>Implementing the Query Results Dialog Box</H2></A>

<p>You will now create the dialog template and dialog class for the <b>Query
Results</b> dialog box.</p>

<p><li> <b>To create the Query Results dialog template</b></li></p>

<ol>

<p><li> Using the Components and Controls Gallery, insert the <b>Microsoft ADO
Data Control, version 6.0 (OLEDB)</b> and the <b>Microsoft DataGrid Control,
Version 6.0 (OLEDB)</b> into the project. Make sure that you create all the classes
associated with these controls.</li></p>

<p><li> Using Figure 7.18 as a guide, create the <b>Results</b> dialog box template. The
resource has the ID <b>IDD_RESULTSDIALOG</b>, and contains an ADO Data Control with the
default ID <b>IDC_ADODC1</b>, and a DataGrid Control with the default ID <b>
IDC_DATAGRID1</b>. The <b>OK</b> button has been given the caption <b>Close</b>. The
<b>Cancel</b> button has been removed.</li></p>

<p>
<img src="images/F07DA18.JPG" width=339 height=257 border="0">
</p><p>
<!-- caption --><b>Figure 7.18</b> <i>The <b>Query Results</b> dialog box</i><!-- /caption -->
</p>

<p><li> On the <b>Control</b> page of the <b>ADO Data Control Properties</b> dialog box,
build a connection string to connect to the <b>Microsoft OLE DB Provider for SQL
Server</b>. On the <b>Connection</b> page, specify the <b>(local)</b> SQL Server and
select the <b>Stocks</b> database.</li></p>

<p><li> Reopen the <b>ADO Data Control</b> <b>Properties</b> dialog box. On the <b>
RecordSource</b> page, select <b>1 - adCmdText</b> from the <b>Command Type</b>
drop-down list. In the <b>Command Text (SQL)</b> box, type the following command:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
SELECT * FROM pricehistory
</pre></td></tr></table>
</p>

<p><li> Edit the DataGrid Control properties. On the <b>Control</b> page, deselect the
<b>AllowUpdate</b> check box. On the <b>All</b> page, set the <b>DataSource</b>
property to the ID of the ADO Data Control <b>IDC_ADODC1</b>.</li></p>

</ol>

<p>Press CTRL+T to test the <b>Query Results</b> dialog box. Check that records from
the price history table of the Stocks database are displayed.</p>

<p><li> <b>To create the CResultsDialog dialog class</b></li></p>

<ol>

<p><li> Press CTRL+W to open ClassWizard. When prompted, create the <b>
CResultsDialog</b> dialog class.</li></p>

<p><li> On the <b>Member Variables</b> tab, add the member variables shown in Table
7.6.</li></p>

<p><b>Table 7.6</b> <i>CResultsDialog Member Variables</i></p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Resource ID</th>
			<th>Category</th>
			<th>Variable type</th>
			<th>Variable name</th>
		</tr>
		
		<tr>
			<td valign="top">IDC_ADODC1</td>
			<td valign="top">Control</td>
			<td valign="top">CAdodc</td>			
			<td valign="top">m_adodc</td>
		</tr>

		<tr>
			<td valign="top">IDC_DATAGRID1</td>
			<td valign="top">Control</td>
			<td valign="top">CDataGrid</td>			
			<td valign="top">m_datagrid</td>
		</tr>
		
	</table>
</p>

<p><li> Close ClassWizard. Open the ResultsDialog.h file, and add the following
variables to the <b>public</b> section of the <b>CResultsDialog</b> class
definition:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
CString m_strQuery;
CString m_strCaption;
</pre></td></tr></table>
</p>

</ol>

<p>You will now implement the <b>CResultsDialog::OnInitDialog()</b> function to
initialize the <b>Query Results</b> dialog box. This function will fill the combo box
with the funds currently on file, and set the current selection. It will also
initialize the <b>Date Time Picker</b> controls with the first and last dates on
file.</p>

<p><li> <b>To initialize the Query Results Dialog box</b></li></p>

<ol>

<p><li> Add the following line to the top of the ResultsDialog.cpp file, to include the
<b>C_Recordset</b> class, which was generated by inserting the ADO Data Control into
the project:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
#include &quot;_recordset.h&quot;
</pre></td></tr></table>
</p>

<p><li> Use ClassWizard to create the <b>CResultsDialog::OnInitDialog()</b> function.
Replace the // TODO comment in the generated function with the following code:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH7_02.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
m_adodc.SetRecordSource(m_strQuery);
m_adodc.Refresh();

C_Recordset cRS = m_adodc.GetRecordset();

long lRecs = cRS.GetRecordCount();

if(lRecs &lt; 1)
{
     AfxMessageBox(&quot;No records match this query&quot;);
     EndDialog(IDCANCEL);
}

m_datagrid.SetCaption(m_strCaption);
</pre></td></tr></table>
</p>

</ol>


<A NAME="307"><H2>Handling the Query Database Menu Command</H2></A>

<p>You will now add the command handler function and the user-interface update handler
function for the <b>Query Database</b> option on the <b>Data</b> menu.</p>

<p><li> <b>To add the OnDataQuerydatabase() command handler</b></li></p>

<ol>
<p><li> To the top of the STUploadDoc.cpp file, add the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
#include &quot;QueryDialog.h&quot;
#include &quot;StockDataList.h&quot;
#include &quot;ResultsDialog.h&quot;
</pre></td></tr></table>
</p>

<p><li> Use ClassWizard to add a command handler for the <b>ID_QUERY_DATABASE</b> 
ID to the <b>CSTUploadDoc</b> class. The function should be called
<b>OnDataQuerydatabase()</b>.</li></p>

<p><li> Replace the // TODO comment with the following code:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH7_03.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
CQueryDialog aQDlg;

// Set the default values for the Date Time Picker controls
// with first and last date on file (all funds)
CStockData sdFirst = m DocList.GetHead();
CStockData sdLast = m DocList.GetTail();

aQDlg.m fromdate = sdFirst.GetDate();
aQDlg.m todate = sdLast.GetDate();

if(aQDlg.DoModal() == IDOK)
{
     // Construct query
     CString strQuery = 
          &quot;select * from PriceHistory where ph_fund = '&quot;;
     strQuery += aQDlg.m strFund;
     strQuery += &quot;' and ph date between '&quot;;
     strQuery += aQDlg.m fromdate.Format(&quot;%Y/%m/%d&quot;);
     strQuery += &quot;' and '&quot;;
     strQuery += aQDlg.m todate.Format(&quot;%Y/%m/%d&quot;);
     strQuery += &quot;'&quot;;

     // Construct caption string
     CString strCaption = aQDlg.m strFund;
     strCaption += &quot; Prices &quot;;
     strCaption += aQDlg.m fromdate.Format(&quot;%d/%m/%Y&quot;);
     strCaption += &quot; - &quot;;
     strCaption += aQDlg.m todate.Format(&quot;%d/%m/%Y&quot;);

     CResultsDialog rd;
     rd.m strQuery = strQuery;
     rd.m strCaption = strCaption;

     rd.DoModal();
}
</pre></td></tr></table>
</p>

</ol>

<p>The user-interface update command handler will ensure that the <b>Query Database</b>
option is available only if the application is currently displaying price history data
for a fund.</p>

<p><li> <b>To add the user-interface update command handler</b></li></p>

<ol>

<p><li> Use ClassWizard to add an <b>UPDATE_COMMAND_UI</b> handler for the <b>
ID_QUERY_DATABASE</b> ID to the <b>CSTUploadDoc</b> class. The function should be
called <b>OnUpdateDataQuerydatabase()</b>.</li></p>

<p><li> Replace the // TODO comment with the following code:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH7_04.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
// Enable the Query Database command only if there is
// data on file and a fund currently selected for viewing

BOOL bEnable = FALSE;
bEnable = m strCurrentFund.IsEmpty() ? FALSE : TRUE;

pCmdUI-&gt;Enable(bEnable);
</pre></td></tr></table>
</p>

</ol>

<p>You can now build and run the STUpload application. Import the Ch7Test.dat file from
the \Chapter 7\Data folder. Select a fund to view and select the <b>Query Database</b>
command that is now enabled. The values in the Ch7Test.dat file correspond to records
that have already been uploaded to the Stocks database. Accept the default values in
the controls and click <b>OK</b> to browse the records on the database. You can
experiment by submitting queries that will retrieve some of the records or none of
them.</p>


</BODY>
</HTML>







