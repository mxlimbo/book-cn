<HTML>
<HEAD>
<TITLE>Lesson 3: Programming the Web Server</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12c.htm", "ch12e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="459"><H1>Lesson 3: Programming the Web Server</H1></A>

<p>In <a href="ch12c.htm#450">Lesson 2</a>, you were introduced to Microsoft's Web server applications: IIS 4.0
and PWS. You learned how to use these applications to organize and deploy content such
as HTML pages and ActiveX documents on a Web site.</p>

<p>In this lesson you will learn how to write programs that extend the functionality of
a Microsoft Web server using ISAPI. You will learn about two types of programs: ISAPI
<i>server extensions</i> and ISAPI <i>filters</i>, both of which are implemented as
DLLs. ISAPI server extensions are programs that run within the Internet server process.
ISAPI filters intercept data travelling to and from the server, and thus can perform
specialized logging, encryption and other tasks.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<ul>
<p><li>Describe how to create an ISAPI server extension using MFC.</li></p>

<p><li>Describe how to make an ISAPI server extension generate customized content based on parameters submitted from an HTML form.</li></p>

<p><li>Describe how to create an ISAPI filter using MFC.</li></p>

<p><li>Describe how to install an ISAPI filter.</li></p>
</ul>

<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>

<A NAME="460"><H2>ISAPI Server Extensions</H2></A>

<p>An ISAPI server extension is a server-side program that runs in response to requests
from a Web browser. A server extension is implemented as a DLL, which is loaded by IIS.
The browser can run the program by specifying the name of the .dll file in a URL like
this:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://myserver/apps/charts.dll</pre>
</td></tr>
</table>
</p>

<p>The ISAPI server extension implements functions that can be called by the browser.
To call a function, you append the function name to the URL as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://myserver/apps/charts.dll?GetChart</pre>
</td></tr>
</table>
</p>

<p>This example references the <i>charts.dll</i> server extension and calls the 
<b>GetChart()</b> function. All ISAPI server extensions must define a default function
that is called if the client does not specify a function. Server extension functions
can take parameters, which can be specified in the URL as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://myserver/apps/charts.dll?GetChart?Fund=ARSC</pre>
</td></tr>
</table>
</p>

<p>An ISAPI server extension can be linked to an HTML form by assigning the
extension's URL to the <i>action</i> attribute inside a &lt;FORM&gt; tag, as
follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM action=&quot;myextension.dll?GetColor&quot; method=POST&gt;
&lt;!&#8212; form controls go here &#8212;&gt;
&lt;/FORM&gt;</pre>
</td></tr>
</table>
</p>

<p>Values that the user enters into the form's controls are automatically passed as
parameters to the ISAPI server extension when the user submits the form. ISAPI server
extension functions typically send back customized HTML code based on these parameter
values.</p>

<p>ISAPI server extensions are based on the Common Gateway Interface (CGI) standard.
CGI is part of the HTTP, which was developed as a way to allow browser programs to
interact with scripts or separate executable programs running on a Web server. Without
altering the HTTP/CGI specifications, Microsoft developed IIS to allow any browser to
load and run a server extension DLL. Because DLLs run as part of the process that loads 
them, server extensions are faster than scripts that might need to load separate 
executable programs.</p>

<p>CGI shifts the programming burden to the server. Using CGI parameters, the browser
sends small amounts of information to the server. The server can do absolutely anything 
with this information, including access a database, generate images, and control 
peripheral devices. The server sends a file (HTML or otherwise) back to the browser, 
which can be read from the server's disk or generated by the program.</p>

<A NAME="461"><H2>Creating an ISAPI Server Extension Using MFC</H2></A>

<p>To see a basic ISAPI server extension in action, you will now use the MFC ISAPI
Extension Wizard to create one of your own.</p>

<p><li><b>To create the MyExtension ISAPI server extension DLL</b></li></p>

<ol>
<p><li>On the <b>File</b> menu in Visual C++, click <b>New</b>. On the <b>Projects</b>
page of the <b>New</b> dialog box, click <b>ISAPI Extension Wizard</b>. Enter <b>
MyExtension</b> as a project name and click <b>OK</b>.</li></p>

<p><li>The ISAPI Extension Wizard appears as shown in Figure 12.19.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA19x.htm')"> <img src="images/f12DA19.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.19</b> <i>The ISAPI Extension Wizard</i><!-- /caption -->
</p>

<p><li>Click <b>Finish</b> to accept the default settings, and then click <b>OK</b> to
create the project.</li></p>

<p><li>Build the project to create the MyExtension.dll ISAPI server extension.</li></p>

<p><li>Using Windows Explorer, create a new folder under the \InetPub\WWWRoot folder
named <b>MyISExtensions</b>. Place a copy of the MyExtension.dll file in this
folder.</li></p>

<p><li>Using your Web server management program, create a virtual directory 
beneath your Web site's home directory, and name it <b>apps</b>. Specify that
the content from this directory will be placed in the C:\INetPub\WWWRoot\MyISExtensions 
folder. Make sure that you allow <b>Execute</b> access to this directory.</li></p>

<p><li>Start Internet Explorer and enter the following URL into the <b>Address</b>
box:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://[<i>your computer name</i>]/apps/myextension.dll</pre>
</td></tr>
</table>
</p>

<p>This request will call the default function of MyExtension.dll. The output of this
should appear in the browser as shown in Figure 12.20.</p>

<p>
<A HREF="javascript:fullSize('f12DA20x.htm')"> <img src="images/f12DA20.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.20</b> <i>Internet Explorer 5 displaying output from MyExtension.dll</i><!-- /caption -->
</p>
</ol>

<A NAME="462"><H3>Examining the MyExtension Code</H3></A>

<p>If you look at the source code in the MyExtension project, you will see that
the ISAPI Extension Wizard has created a single class for you named 
<b>CMyExtensionExtension</b>. This class is derived from the MFC base class 
<b>CHttpServer</b>. You can add member functions to this class to implement the functions
exported by the DLL.</p>

<p>MFC provides a code construct called a <i>parse map</i> to define the DLL functions
and map them to member functions of your <b>CHttpServer</b>-derived class. The parse
map is declared in the header file with the <b>DECLARE_PARSE_MAP</b> macro, and
implemented with <b>BEGIN_PARSE_MAP</b> and <b>END_PARSE_MAP</b> macros, as shown in
the following example from your MyExtension.cpp file:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BEGIN_PARSE_MAP(CMyExtensionExtension, CHttpServer)
     // TODO: insert your ON_PARSE_COMMAND() and
     // ON_PARSE_COMMAND_PARAMS() here to hook up your commands.
     // For example:

     ON_PARSE_COMMAND(Default, CMyExtensionExtension, ITS_EMPTY)
     DEFAULT_PARSE_COMMAND(Default, CMyExtensionExtension)
END_PARSE_MAP(CMyExtensionExtension)</pre>
</td></tr>
</table>
</p>

<p>You can see that the ISAPI Extension Wizard has added the <b>DEFAULT_PARSE
COMMAND</b> macro to specify the name of the default function as <b>Default()</b>. The
Wizard provides a simple implementation of this function that can be found further down
the file:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyExtensionExtension::Default(CHttpServerContext* pCtxt)
{
     StartContent(pCtxt);
     WriteTitle(pCtxt);

     *pCtxt &lt;&lt; _T(&quot;This default message was produced by the Internet&quot;);
     *pCtxt &lt;&lt; _T(&quot; 
          Server DLL Wizard. Edit your CMyExtensionExtension::Default()&quot;);
     *pCtxt &lt;&lt; _T(&quot; implementation to change it.\r\n&quot;);

     EndContent(pCtxt);
}</pre>
</td></tr>
</table>
</p>

<p>The output from this function is shown in Figure 12.20.</p>

<p>The <b>Default()</b> function, like all ISAPI extension functions, takes a pointer
to a <b>CHttpServerContext</b> object. One <b>CHttpServerContext</b> object is created
by <b>CHttpServer</b> for each HTTP client/server transaction. As the server extension
DLL processes requests, it uses <b>CHttpServerContext</b> member functions to
perform tasks such as retrieving details contained in the header of the HTTP
client request (using <b>CHttpServerContext::GetServerVariable()</b>), or inserting
HTML text into the response file that is sent back to the client (using the overloaded
<b>&lt;&lt;</b> operator).</p>

<p>The server extension's <b>CHttpServer</b> object creates a <b>CHttpServerContext</b>
object for each client request. Each object is created on a separate thread to
allow multiple simultaneous calls to the <b>CHttpServer</b> object by different
client connections. You must be careful to perform synchronization for global
variables, or for any data members of your <b>CHttpServer</b> class.</p>

<A NAME="463"><H3>Adding a Function to Your Server Extension</H3></A>

<p>You will now add a simple function named <b>GetColor()</b> to your ISAPI server
extension. <b>GetColor()</b> takes any one of the HTML color names as a parameter and
generates a page with an appropriately colored background.</p>

<p><li><b>To add the GetColor() function</b></li></p>

<ol>
<p><li>Add the following lines to the Parse Map in the MyExtension.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>ON_PARSE_COMMAND(GetColor, CMyExtensionExtension, ITS_PSTR)
ON_PARSE_COMMAND_PARAMS(&quot;color&quot;)</pre>
</td></tr>
</table>
</p>

<p>The <b>ON_PARSE_COMMAND</b> macro specifies the name of the function&#8212;the class
name to map the function to. The parameters received by the
function are specified as the third (and subsequent) parameters of the 
<b>ON_PARSE_COMMAND</b> macro. The parameter types are specified by
the <b>ON_PARSE_COMMAND_PARAMS</b> macro. The lines in the example just shown specify
that the <b>GetColor()</b> function will have a single string
parameter named <i>color</i>.</p>

<p><li>Use the ClassView <b>Add Member Function</b> feature to add a function with the
following signature to the <b>CMyExtensionExtension</b> class:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void GetColor(CHttpServerContext *pCtxt, LPCTSTR pstrColor)</pre>
</td></tr>
</table>
</p>

<p><li>Implement the function as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyExtensionExtension::GetColor(CHttpServerContext *pCtxt, LPCTSTR pstrColor)
{
     StartContent(pCtxt);
     WriteTitle(pCtxt);

     *pCtxt &lt;&lt; _T(&quot;You have chosen the &quot;);
     *pCtxt &lt;&lt; pstrColor &lt;&lt; _T(&quot; page.\r\n&quot;);
     *pCtxt &lt;&lt; _T(&quot;&lt;SCRIPT language=\&quot;JavaScript\&quot;&gt; 
          document.bgColor = \&quot;&quot;);
     *pCtxt &lt;&lt; pstrColor &lt;&lt; _T(&quot;\&quot; &lt;/SCRIPT&gt;\r\n&quot;);

     EndContent(pCtxt);
}</pre>
</td></tr>
</table>
</p>

<p><li>Build and run the MyExtension project. You will need to copy the new DLL to the
\INetPub\WWWRoot\MyISExtensions folder so that it replaces the previous version. Before
you can do this, you will have to stop the Web (WWW) service on your computer. This is
because ISAPI server extension DLLs are loaded into the IIS process when a client first
requests them, and stay loaded until the WWW service is stopped. The easiest way to
stop the WWW service on a computer using IIS is to open a system command prompt and
type the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>net stop w3svc</pre>
</td></tr>
</table>
</p>

<p><li>After you have copied the DLL, restart the service by typing the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>net start w3svc</pre>
</td></tr>
</table>
</p>

<p>The revised DLL will be loaded at the first client request.</p>

<p>On a computer running Windows 95 or Windows 98, you can stop and start the Web
service from the <b>Properties</b> menu of the Personal Web Manager. To gain access to
the DLL, you might have to restart your computer after stopping the service.</p>

<p>The following HTML document called <i>Form.htm</i> allows you to test your
new extension function. This document implements a simple form that allows the user
to pick a color from a drop-down list box. The user clicks a <b>Submit</b> button to
retrieve a page of the chosen color from the server.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!-- Form.htm --&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
     &lt;TITLE&gt;
          Color Form
     &lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
     &lt;H3&gt; Choose a color from the list box and click SUBMIT&lt;/H3&gt;

     &lt;FORM action=&quot;myextension.dll?GetColor&quot; method=POST&gt;
     &lt;SELECT name=&quot;color&quot;&gt;
          &lt;option&gt; pink
          &lt;option&gt; green
          &lt;option&gt; yellow
          &lt;option&gt; blue
     &lt;/SELECT&gt;
     &lt;P&gt;
     &lt;input type=&quot;submit&quot;&gt;
     &lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>Form.htm can be found in the Chapter 12\Exercises folder. Place a copy
of Form.htm in the \INetPub\WWWRoot\MyISExtensions folder.</p>

<p><li>Start Internet Explorer and enter the following URL into the address box:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://[<i>your computer name</i>]/apps/form.htm</pre>
</td></tr>
</table>
</p>

<p>You will see the page appear as shown in Figure 12.21.</p>

<p>
<A HREF="javascript:fullSize('f12DA21x.htm')"> <img src="images/f12DA21.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.21</b> <i>Form.htm displayed in Internet Explorer 5</i><!-- /caption -->
</p>

<p><li>Select a color from the list box and click <b>Submit Query</b>. A page with the
background color you have chosen will be returned to your browser.</li></p>
</ol>

<A NAME="464"><H2>ISAPI Filters</H2></A>

<p>ISAPI filters sit between the network connection to the clients and the HTTP server.
They can be used to enhance Internet servers with custom features such as the enhanced
logging of HTTP requests or custom encryption and compression schemes, or to implement
alternative authentication methods. Filters are implemented as DLLs that are loaded
when the WWW service is started. You can use the Internet Service Manager to assign
filters to your IIS 4.0 Web sites. Personal Web Server does not support ISAPI
filters.</p>

<p>Filters can be set to receive notification when selected server events occur. For
example, the server might notify the filter that it is processing raw data from a
client request, or that it is sending data to the client, or that it has just written
to the log or closed a transaction. As the filter processes these notifications, it has
access to the server data related to the notification event. For example, a filter that
is notified that the server is sending raw data to the client has access to the data
being sent so that the filter can modify the data, perhaps applying a compression or
encryption algorithm.</p>

<p>The following exercises demonstrate a simple ISAPI filter that is built using the ISAPI
Extension Wizard.</p>

<p><li><b>To create the MyFilter ISAPI filter</b></li></p>

<ol>
<p><li>On the <b>Projects</b> tab of the <b>New</b> dialog box, click <b>ISAPI
Extension Wizard</b>. Enter <b>MyFilter</b> as a project name and click <b>OK</b>.</li></p>

<p><li>On the first screen of the ISAPI Extension Wizard, clear the <b>Generate a Sever
Extension object</b> option and select the <b>Generate a Filter object</b> option.</li></p>

<p><li>In Step 2 of the ISAPI Extension Wizard, select <b>Incoming raw data and
headers</b>. Leave <b>End of connection</b> selected so that the dialog box looks as
shown in Figure 12.22.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA22x.htm')"> <img src="images/f12DA22.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.22</b> <i>Creating an ISAPI filter</i><!-- /caption -->
</p>

<p><li>Click <b>Finish</b>, and then click <b>OK</b> to create the MyFilter
project.</li></p>
</ol>

<p>If you examine the generated code, you will see that the ISAPI Extension Wizard has
created a single class <b>CMyFilterFilter</b> that is derived from the MFC class 
<b>CHttpFilter</b>. A handler function has been added to this class for each notification
that you specified in Step 2 of the ISAPI Extension Wizard, as shown in this extract
from the <b>CMyFilterFilter</b> class definition:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>virtual DWORD OnReadRawData(CHttpFilterContext* pCtxt, 
     PHTTP_FILTER_RAW_DATA pRawData);
virtual DWORD OnEndOfNetSession(CHttpFilterContext* pCtxt);</pre>
</td></tr>
</table>
</p>

<p>These functions are overloaded versions of <b>CHttpFilter</b> member functions. The
Wizard provides stub functions in the .cpp file. You define your filter behavior by
implementing these functions.</p>

<p>Note that another overloaded function, <b>GetFilterVersion()</b>, is implemented for
your class. This function is called by the server to learn which notifications the
filter will handle. To make the filtering process more efficient, the server sends
notifications only for the events specified in this function. The following line from
the <b>MyFilter::GetFilterVersion()</b> function shows how to specify the events:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>pVer-&gt;dwFlags |= SF_NOTIFY_ORDER_LOW | SF_NOTIFY_SECURE_PORT | 
     SF_NOTIFY_NONSECURE_PORT | SF_NOTIFY_READ_RAW_DATA | 
     SF_NOTIFY_END_OF_NET_SESSION;</pre>
</td></tr>
</table>
</p>

<p>Be aware that if you add handler functions for additional notification events,
you must also add the corresponding flags to this line. Although you can use
ClassWizard to add notification event handler functions, ClassWizard does not update
the <b>GetFilterVersion()</b> function for you, so you must remember to do this
manually.</p>

<p>Notification handler functions receive data structures that contain information 
about the event they are handling. They also receive a pointer to a 
<b>CHttpFilterContext</b> object, which like the <b>CHttpServerContext</b> object,
contains information about the current client connection and provides methods to
retrieve information about the connection or to write data into the client response.</p>

<p>In the following exercises, you will provide a simple implementation of the 
<b>MyFilter::OnReadRawData()</b> function. This will use the <b>CHttpFilterContext::
GetServerData()</b> function to retrieve the IP address of the remote server that is
currently connected, and then write it to a log file.</p>

<p><li><b>To implement the MyFilter::OnReadRawData() function</b></li></p>

<ol>
<p><li>Locate the <b>MyFilter::OnReadRawData()</b> function and replace it with the
following implementation:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>DWORD CMyFilterFilter::OnReadRawData(CHttpFilterContext* pCtxt,
PHTTP_FILTER_RAW_DATA pRawData)
{
     char pchVar[64];
     DWORD dwSize = 64;

     CStdioFile logfile(&quot;C:\\iislog.txt&quot;,
          CFile::modeCreate | CFile::modeWrite);

     BOOL bRet = pCtxt-&gt;GetServerVariable(
          &quot;     REMOTE_HOST&quot;, pchVar, &amp;dwSize);

     if(bRet)
          logfile.Write(pchVar, dwSize);

     logfile.Close();

     return SF_STATUS_REQ_NEXT_NOTIFICATION;
}</pre>
</td></tr>
</table>
</p>

<p><li>Build the MyFilter project. Copy the MyFilter.dll file to the
c:\Winnt\System32\inetsrv folder.</li></p>
</ol>

<p><li><b>To install the filter on an IIS 4.0 Server</b></li></p>

<ol>
<p><li>Open the Internet Service Manager. Right-click your local server icon (the icon
is labeled with the name of your computer) and select <b>Properties</b>.</li></p>

<p><li>In the <b>Master Properties</b> box, make sure the <b>WWW Service</b> option
is selected and click <b>Edit</b>.</li></p>

<p><li>In the <b>WWW Service Master Properties</b> dialog box, click the 
<b>ISAPI Filters</b> tab. This tab is shown in Figure 12.23.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA23x.htm')"> <img src="images/f12DA23.jpg" width=404 height=397 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.23</b> <i>Installing ISAPI filters on a Web server</i><!-- /caption -->
</p>

<p><li>Click <b>Add</b>. Type <b>MyFilter</b> as the filter name. Use the <b>Browse</b>
button to locate the MyFilter.dll file in the c:\Winnt\System32\inetsrv folder and enter the
full path to the file into the <b>Executable</b> box.</li></p>

<p><li>Click <b>OK</b> to close the <b>WWW Service Master Properties</b> dialog box,
and then click <b>OK</b> again to close the Server Properties.</li></p>

<p><li>Open a system command prompt and type:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>net stop w3svc</pre>
</td></tr>
</table>
</p>

<p>followed by:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>net start w3svc</pre>
</td></tr>
</table>
</p>

<p><li>Open Internet Explorer and browse to a page on your local server Web
site&#8212;for example, the http://[<i>your computer name</i>]/apps/form.htm page from
the previous exercises.</li></p>

<p><li>Close Internet Explorer. If you look in the root directory of your c:\ drive you
will find the <i>iislog.txt</i> file has been created. Double-click this file to view
it in Notepad. You will see that the IP address of your computer has been added to the
log file.</li></p>
</ol>

<A NAME="465"><H2>Lesson Summary</H2></A>

<p>ISAPI allows you to write programs that extend the functionality of IIS 4.0 and its
desktop counterpart, PWS.</p>

<p>There are two types of ISAPI programs: server extensions and filters, both of which are
implemented as DLLs. ISAPI server extensions are compiled server-side programs that can
be launched by an Internet client request. ISAPI filters intercept data travelling to
and from the server and thus can perform specialized logging, encryption and other
tasks.</p>

<p>ISAPI server extensions are based on the CGI standard and can be invoked from a URL
by specifying the name of the DLL. Server extensions expose functions that can take
parameters. You can specify the function name and parameter values as part of a URL, or
you can connect the extension to an HTML form so
that it receives parameters from the form controls. You use the ISAPI Extension Wizard
to create a server extension project based around the <b>CHttpServer</b> and 
<b>CHttpServerContext</b> classes.</p>

<p>ISAPI filters sit between the network connection to the clients and the HTTP server,
and they add custom features such as enhanced logging or encryption
and compression to your Internet server. The filter is implemented as a DLL that is
loaded when the WWW service is started. You can use the Internet Service Manager to
assign filters to your IIS 4.0 Web sites. PWS does not support ISAPI filters.
Filters receive notification when selected server events occur. As the filter processes
these notifications, it has access to the server data related to the notification
event. You use the ISAPI Extension Wizard to create an ISAPI filter project based
around the <b>CHttpFilter</b> and <b>CHttpFilterContext</b> classes.</p>

</BODY>
</HTML>







