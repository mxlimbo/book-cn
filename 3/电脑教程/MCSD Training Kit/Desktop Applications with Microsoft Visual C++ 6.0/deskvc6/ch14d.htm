<HTML>
<HEAD>
<TITLE>Lesson 3: Registering COM Components on the Client Computer</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14c.htm", "ch14e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="553"><H1>Lesson 3: Registering COM Components on the Client Computer</H1></A>

<p>During installation, a Setup program must register on a user's computer any
ActiveX controls or other COM components that the application requires to run. The
registry entry for an ActiveX control includes:</p>

<ul>
<p><li> The control's class identifier GUID.</li></p>

<p><li> The location of the control's executable file.</li></p>

<p><li> Characteristics such as the component's threading model.</li></p>

<p><li> Various flags that specify how the component operates&#8212;for example, whether
the control is visible or invisible, whether it can be activated inside a
container's window, and so forth.</li></p>
</ul>


<p>ActiveX controls are <i>self-registering</i>, meaning they contain their own
registry information and can write it to the system registry. By taking on the task of
registering themselves, ActiveX controls remove most of the burden from the Setup
program. In this lesson, you will also learn how to configure an InstallShield pro-ject
to correctly install ActiveX controls on a user's system.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Describe the self-registration feature possessed by many COM components,
including ActiveX controls.</li></p>

<p><li> Describe how exported functions write and remove COM information from the
registry.</li></p>

<p><li> Add self-registering components to an InstallShield project.</li></p>
</ul>


<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>


<A NAME="554"><H2>Self-Registering Components</H2></A>

<p>To update the user's system registry for installed COM components, a Setup
program can use registry files as described in <a href="ch14b.htm#537">Lesson 1</a> of this chapter. However,
ActiveX controls do not require registry files because they are self-registering.</p>

<p><A HREF="ch10a.htm">Chapter 10</A> explained that an ActiveX control executes as either a stand-alone
program or, much more commonly, as a DLL. The latter is known as an <i>in-process</i>
(or <i>in-proc</i>) ActiveX control. An in-process ActiveX control exports a function
named <b>DllRegisterServer()</b> that, when called, writes to the registry all the
information the control requires. The only obstacle is that some other application must
load the control and specifically call the <b>DllRegisterServer()</b> function.</p>

<p>This task generally falls to either a Web browser (if the ActiveX control is
downloaded from a Web page) or to a Setup program. Because users generally acquire
ActiveX controls only over the Internet or by installing an application, registration
takes place invisibly&#8212;thus, most users never have to worry about registering an
ActiveX control.</p>

<p>Control files acquired through other means&#8212;e-mail, for example&#8212;require
manual registration to operate. Windows provides a utility named RegSvr32 that handles
this task. RegSvr32 loads a requested ActiveX control or any other self-registering COM
component and calls the component's <b>DllRegisterServer()</b> function: </p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>regsvr32 <i>path</i>\MyControl.ocx</pre>
</td></tr>
</table>
</p>

<p>where <i>path</i> represents where the component is stored. The command:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>regsvr32 /u <i>path</i>\MyControl.ocx</pre>
</td></tr>
</table>
</p>

<p>causes the program to call the component's <b>DllUnregisterServer()</b>
function, which removes from the registry everything that <b>DllRegisterServer()</b>
wrote. The <i>/u</i> switch included in the command stands for uninstall. </p>

<A NAME="555"><H2>Adding Self-Registering Components to an InstallShield Project</H2></A>

<p>If your application files include ActiveX controls or other self-registering
components, the Setup program you create must call the components' <b>
DllRegisterServer()</b> function during installation. Likewise, the uninstaller
program must call the <b>DllUnregisterServer()</b> function for each component if users
uninstall your application.</p>

<p>The Setup and Uninst programs created by InstallShield will register and unregister
your application's ActiveX components. To configure your installation project to
correctly handle self-registering controls, you must create a file group that contains
the component files, and then specify the <b>Self Registered</b> property for the
group.</p>

<p><li> <b>To create a group of self-registering components</b></li></p>

<ol>
<p><li> Open the installation project in InstallShield, as shown in Figure 14.5.</li></p>

<p>
<A HREF="javascript:fullSize('f14DA05x.htm')"> <img src="images/f14DA05.jpg" width=404 height=168 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.5</b> <i>Opening an existing project in InstallShield</i><!-- /caption -->
</p>

<p><li> Select the <b>File Groups</b> tab in the project workspace and right-click
anywhere inside the File Groups workspace.</li></p>

<p><li> On the shortcut menu, click the <b>New File Group</b> command, as shown in Figure 14.6.</li></p>



<p>
<A HREF="javascript:fullSize('f14DA06x.htm')"> <img src="images/f14DA06.jpg" width=404 height=205 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.6</b> <i>Creating a new file group in InstallShield</i><!-- /caption -->
</p>

<p><li> Type <b>Self-registering Components</b> for the group's name and press
ENTER.</li></p>

<p><li> With the <b>Self-registering Components</b> group selected in the workspace,
double-click the <b>Self-Registered</b> field in the display area to the right of the
workspace.</li></p>

<p><li> In the <b>Properties</b> dialog box, select <b>Yes, all files in this group are
self-registering</b>, as shown in Figure 14.7. This choice marks the group as
containing only self-registering components.</li></p>



<p>
<A HREF="javascript:fullSize('f14DA07x.htm')"> <img src="images/f14DA07.jpg" width=404 height=224 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.7</b> <i>Marking a file group for self-registering component files</i><!-- /caption -->
</p>

<p><li> Click <b>OK</b>. The value of the <b>Self-Registered</b> field changes to <b>
Yes</b>.</li></p>
</ol>

<p>When the Setup program runs on a user's system, it will load each file in the
group, call its <b>DllRegisterServer()</b> function to register the component, and
unload the file. The next step is to add the component files themselves to the new file
group.</p>

<p><li> <b>To add files to the new Self-registering Components group</b></li></p>

<ol>
<p><li> In the project workspace pane, click the <b>Links</b> sublevel beneath the entry
for <b>Self-registering Components</b>.</li></p>

<p><li> Right-click anywhere in the area to the right of the workspace pane. On the
shortcut menu shown in Figure 14.8, click the <b>Insert Files</b> command.</li></p>

<p>
<A HREF="javascript:fullSize('f14DA08x.htm')"> <img src="images/f14DA08.jpg" width=404 height=211 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.8</b> <i>Inserting a file into a group</i><!-- /caption -->
</p>

<p><li> In the <b>Insert file links</b> dialog box, browse to the first ActiveX control
or other self-registering component that you want to add to the installation project
and click <b>Open</b>.</li></p>

<p><li> Repeat the steps for all component files you want to add to the group.</li></p>
</ol>

<A NAME="556"><H2>Lesson Summary</H2></A>

<p>An ActiveX control contains its own registry information, including:</p>

<ul>
<p><li> The control's class identifier.</li></p>

<p><li> The path to the control's executable file.</li></p>

<p><li> Run-time characteristics and preferences.</li></p>

<p><li> Miscellaneous information for containers.</li></p>
</ul>


<p>Each ActiveX control exports a function named <b>DllRegisterServer()</b> that, when
called, writes the information to the system registry. An ActiveX control also
exports a counterpart function named <b>DllUnregisterServer()</b> that removes the same
information from the registry. These functions make ActiveX controls self-registering
and self-unregistering.</p>

<p>Users typically acquire ActiveX controls by viewing Web pages and by installing
container applications that use the controls. In either case, registration takes place
behind the scenes when the Web browser or Setup program calls the control's <b>
DllRegisterServer()</b> function. To allow users to manually add or remove an ActiveX
control, Windows provides the RegSvr32 utility.</p>

<p>An InstallShield project for a container application requires two extra steps.
First, a file group must be added to the project with its Self-Registering flag set to
<b>Yes</b>. Second, all ActiveX controls and other self-registering components that the
application uses must be manually added to the new file group. The second step is
necessary because ActiveX controls are not listed in the container's header the way
normal DLLs are, so InstallShield will not recognize them as
dependencies until specifically instructed to do so. When the resulting Setup program
executes, it calls the <b>DllRegisterServer()</b> function for each self-
registering component in the project.</p>

</BODY>
</HTML>







