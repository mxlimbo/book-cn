<HTML>
<HEAD>
<TITLE>Lab 5: Enhancing the STUpload Data Display</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05e.htm", "ch05g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="227"><H1>Lab 5: Enhancing the STUpload Data Display</H1></A>

<p>In Lab 3, you learned how to implement a very simple <b>OnDraw()</b> function for
the STUpload application, which outputs the data records held in the application
document object as lines of text. The application displays all the records that are
stored in the document&#8212;currently a hard-coded set of records representing data
from three different stock funds.</p>

<p>In Lab 5, you are going to enhance the application in two ways. First, you are going
to implement the <b>Select Fund</b> dialog box, a modeless dialog box that allows the user to select from a list of funds currently stored in the application
document object. Then you will create a new <b>CSTUploadView::OnDraw()</b> function to
display data for the currently selected fund in a graph format.</p>

<A NAME="228"><H2>Displaying the Select Fund Dialog Box</H2></A>

<p>To create the <b>Select Fund</b> dialog box, you will use the dialog template IDD_
FUNDDIALOG and the class <b>CFundDialog</b> that you created for Lab 4. At this point,
the dialog box design is not complete. The final version will not have <b>OK</b> and
<b>Cancel</b> buttons because you are going to allow the user to show and hide the
dialog box using only the <b>Select Fund</b> command option on the <b>View</b> menu (or
by using the toolbar button). However, you will need to overload the <b>OnOK()</b> and
<b>OnCancel()</b> handler functions. Because IDOK and IDCANCEL messages will be
generated when the user presses the ENTER or ESC keys, you will need to create versions
of the handler functions for the <b>Select Fund</b> dialog class that do nothing;
otherwise, the base class (<b>CDialog</b>) versions will be called. Remember that the
base class versions call the <b>EndDialog()</b> function to dismiss the dialog box.</p>

<p>It is much easier to add handlers for the <b>OK</b> and <b>Cancel</b> messages when
the buttons are still defined as part of the dialog box, so you will create <b>
OnOK()</b> and <b>OnCancel()</b> handlers at this point.</p>

<p><li> <b>To create the OnOk() handler</b></li></p>

<ol>
<p><li> Press CTRL+W to open ClassWizard. In the <b>Class name</b> box, click <b>
CFundDialog</b>.</li></p>

<p><li> In the <b>Object IDs</b> box, click <b>IDOK</b>.</li></p>

<p><li> In the <b>Messages</b> box, click <b>BN_CLICKED</b>.</li></p>

<p><li> Click <b>Add Function</b> and then click <b>OK</b> to accept the suggested
handler name <b>OnOK</b>.</li></p>

<p><li> Click <b>Edit Code</b> to jump to the <b>CFundDialog::OnOK()</b> implementation
code.</li></p>

<p><li> From the body of this function remove the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CDialog::OnOK();</pre>
</td></tr>
</table>
</p>

<p><li> Repeat the process to add an empty <b>OnCancel()</b> function to handle the
BN_CLICKED message for the IDCANCEL item. Now you can remove the <b>OK</b> and <b>
Cancel</b> buttons from the dialog template.</li></p>
</ol>

<p><li> <b>To complete the Select Fund dialog template</b></li></p>

<ol>
<p><li> Open the <b>IDD_FUNDDIALOG</b> resource with the dialog editor.</li></p>

<p><li> Click <b>OK</b>. Press the DELETE key to remove the button.</li></p>

<p><li> Click <b>Cancel</b>. Press DELETE.</li></p>

<p><li> Resize the dialog box so the list box fits just inside the dashed blue edit
guide. Your dialog box should look as shown in Figure 5.20.</li></p>

<p>
<img src="images/f05DA20.jpg" width=102 height=129>
</p><p>
<!-- caption --><b>Figure 5.20</b> <i>The <b>Select Fund</b> dialog box</i><!-- /caption -->
</p>
</ol>

<p>Now you will write code to control the behavior of the <b>Select Fund</b> dialog
box. You will create a single <b>CFundDialog</b> object early on in the application,
as the m_wndFundDialog member of the application main frame window object <b>
CMainFrame</b>. The dialog window will be a child window of the application main
window, and it will be shown or hidden according to the status of m_bFundsVisible, a
Boolean member variable of the <b>CMainFrame</b> class. The status of m_bFundsVisible will be set by menu and toolbar commands.</p>

<p><li> <b>To create the m_wndFundDialog member object</b></li></p>

<ol>
<p><li> In ClassView, right-click the <b>CMainFrame</b> class icon.</li></p>

<p><li> On the shortcut menu, click <b>Add Member Variable</b>.</li></p>

<p><li> In the <b>Add Member Variable</b> dialog box, type <b>CFundDialog</b> into the
<b>Variable Type</b> box.</li></p>

<p><li> Type <b>m_wndFundDialog</b> in the <b>Variable Name</b> box.</li></p>

<p><li> Set the access specifier to <b>Protected</b>. Click <b>OK</b> to add the
variable.</li></p>

<p><li> Repeat the process to add a protected BOOL member variable <b>
m_bFundsVisible</b> to the <b>CMainFrame</b> class.</li></p>

<p><li> Double-click the <b>CMainFrame</b> class icon in ClassView to open the header
file and jump to the top of the class declaration.</li></p>

<p><li> Check that ClassView has added the following line of code to the top of the
file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;FundDialog.h&quot;</pre>
</td></tr>
</table>
</p>
</ol>

<p><li> <b>To initialize the m_bFundsVisible member in the class constructor</b></li></p>

<ol>
<p><li> Double-click the icon that represents the <b>CMainFrame</b> class
constructor.</li></p>

<p><li> Add the following line of code to the body of the function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_bFundsVisible = FALSE;</pre>
</td></tr>
</table>
</p>
</ol>

<p><li> <b>To create accessor functions for the m_bFundsVisible member variable</b></li></p>

<ol>
<p><li> Return to the <b>CMainFrame</b> class declaration in <b>MainFrm.h</b>. Add the
following lines of code to the public section:</li></p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p>(This code can be found in CH5_01.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BOOL AreFundsVisible() {return m_bFundsVisible;}
void SetFundsVisible(BOOL bSet) 
{
     m_bFundsVisible = bSet;
     if(bSet) m_wndFundDialog.ShowWindow(SW_SHOW);
     else m_wndFundDialog.ShowWindow(SW_HIDE);
}</pre>
</td></tr>
</table>
</p>

<p><li> You will now need to initialize your dialog object by calling its <b>
Create()</b> function and passing the resource ID as a parameter. The <b>Create()</b>
function takes a second parameter with which you can specify the dialog box's
parent window. You will use the default setting <b>NULL</b>, which sets the parent
window to be the main application window.</li></p>
</ol>

<p><li> <b>To initialize the m_wndFundDialog object</b></li></p>

<ol>
<p><li> In ClassView, expand the <b>CMainFrame</b> class icon.</li></p>

<p><li> Double-click the <b>OnCreate()</b> member function icon to jump to the function
implementation.</li></p>

<p><li> At the end of the function, <i>before</i> the return statement, add the
following lines of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>// Create the fund dialog window
m_wndFundDialog.Create(IDD_FUNDDIALOG);</pre>
</td></tr>
</table>
</p>
</ol>

<p>Remember that the dialog box does not have the WS_VISIBLE style property, so it will
need to be displayed explicitly with a call to the <b>CWnd::ShowWindow()</b>
function.</p>

<p>Hiding and showing the dialog box is going to be controlled by the handler for the
<b>Selection</b> <b>Fund</b> command on the <b>View</b> menu. In the following
exercises, you will create a command handler and a user interface update command
handler for the <b>ID_VIEW_FUNDSELECTION</b> command ID.</p>

<p><li> <b>To add the CMainFrame::OnViewFundselection() function</b></li></p>

<ol>
<p><li> Press CTRL+W to invoke ClassWizard. Click the <b>Message Maps</b> tab.</li></p>

<p><li> In the <b>Class Name</b> box, click <b>CMainFrame</b>.</li></p>

<p><li> In the <b>Object IDs</b> box, click <b>ID_VIEW_FUNDSELECTION</b>.</li></p>

<p><li> In the <b>Messages</b> box, click <b>COMMAND</b>.</li></p>

<p><li> Click <b>Add Function</b>. Click <b>OK</b> to accept the suggested handler
function name <b>OnViewFundselection()</b>.</li></p>

<p><li> Click <b>Edit Code</b>. The MainFrm.cpp file is opened. and the insertion point
is positioned at the top of the function implementation.</li></p>

<p><li> Add the following line to the body of the <b>OnViewFundselection()</b>
function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>SetFundsVisible(m_bFundsVisible ? FALSE : TRUE);</pre>
</td></tr>
</table>
</p>
</ol>

<p><li> <b>To implement the CMainFrame::OnUpdateViewFundselection() function</b></li></p>

<ol>
<p><li> Using ClassWizard, create the <b>OnUpdateViewFundselection</b> function for the
<b>UPDATE_COMMAND_UI</b> message and the <b>ID_VIEW_ FUNDSELECTION</b> object ID.</li></p>

<p><li> Select <b>Settings</b> from the <b>Project</b> menu. On the <b>C/C++</b> page,
click <b>C++ Language</b> in the <b>Category</b> box. Ensure that <b>Enable Run-Time
Type Information (RTTI)</b> is selected. Click <b>OK</b> to close the <b>Project
Settings</b> dialog box.</li></p>

<p><li> Add the following lines of code to the body of the function <b>
OnUpdateViewFundselection()</b>:</li></p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>

<p>(This code can be found in CH5_02.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>// Enable the View Funds Selection dialog if 
// the document CStockDataList is not empty.
// If enabled, then toggle button state checked/unchecked
// according to whether the window is displayed or hidden
BOOL bEnable = FALSE;
CSTUploadDoc * pDoc = 
     dynamic_cast&lt;CSTUploadDoc *&gt;(GetActiveDocument());
if(pDoc)
     bEnable = pDoc-&gt;GetDocList().GetCount() ? TRUE : FALSE;
pCmdUI-&gt;Enable(bEnable);     
if(bEnable)
     pCmdUI-&gt;SetCheck(m_bFundsVisible ? 1 : 0);     </pre>
</td></tr>
</table>
</p>

<p><li> Add the following line of code to the top of the MainFrm.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;STUploadDoc.h&quot;</pre>
</td></tr>
</table>
</p>

<p><li> You can now build and run the STUpload application. Experiment with showing and
hiding the <b>Select Fund</b> dialog box by using the command and the toolbar
button.</li></p>
</ol>

<A NAME="229"><H2>Displaying Fund Names in the Funds List Box</H2></A>

<p>Now that you have displayed the <b>Select Fund</b> dialog box, you will write a
function to load the names of the funds into the list box control. Because the list of
fund records held in the <b>CSTUploadDoc::m_DocList</b> object will be created
in fund sort order, it is not a difficult matter to iterate across the list and
extract
a unique list of fund names.</p>

<p>Before you can write this function, you will have to create a variable with the MFC
type CListBox.</p>

<p><li> <b>To add the CFundDialog::m_listBox member variable</b></li></p>

<ol>
<p><li> Press CTRL+W to open ClassWizard and click the <b>Member Variables</b> tab.</li></p>

<p><li> In the <b>Class Name</b> list, click the <b>CFundDialog</b> class.</li></p>

<p><li> Click <b>Add Variable</b>. In the <b>Member variable name</b> box, type <b>
m_listBox</b>.</li></p>

<p><li> In the <b>Category</b> box, click <b>Control</b>. The <b>Variable Type</b> box
displays <b>CListBox</b>.</li></p>

<p><li> Click <b>OK</b> to create the variable, and then click <b>OK</b> again to close
ClassWizard.</li></p>
</ol>

<p>You are now going to add the <b>UpdateFundList()</b> member function to the <b>
CMainFrame</b> class to perform the task of loading the fund name items into the list
box. The function will take two parameters&#8212;a reference to a <i>CStockDataList</i>,
which will be the source of the fund names; and a string to specify the fund name that
should be selected initially. If the second parameter contains an empty string (the
default value), or the provided string is not found in the list box, no item is
selected.</p>

<p><li> <b>To implement the CMainFrame::UpdateFundList() function</b></li></p>

<ol>
<p><li> In FileView, expand the Header Files folder and double-click the <b>
CMainFrm.h</b> file icon to open the file.</li></p>

<p><li> At the top of the file, with the other #include statements, add the following
line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;StockDataList.h&quot;</pre>
</td></tr>
</table>
</p>

<p><li> Switch to ClassView and right-click the <b>CMainFrame</b> icon. Use the <b>Add
Member Function</b> option to add the function declaration to the <b>public</b> section
of the class declaration, and to add a function stub. The function should have the
following signature:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void UpdateFundList(const CStockDataList &amp; pList, 
     CString strCurrentFund = &quot;&quot;);</pre>
</td></tr>
</table>
</p>

<p><li> Add the following code to the body of the <b>UpdateFundList()</b> function:</li></p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p>(This code can be found in CH5_03.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>// Function to add one entry per fund to fund view list box.
// CStockDataLists are sorted by fund name so this is easy.
CListBox *pListBox = &amp;m_wndFundDialog.m_listBox;
// Empty current contents of list box
pListBox-&gt;ResetContent();
CString strLastFund;
POSITION pos = pList.GetHeadPosition();
while(pos)
{
     CStockData sd = pList.GetNext(pos);
     CString strFund = sd.GetFund();
     if(strFund != strLastFund)
          pListBox-&gt;AddString(strFund);
     strLastFund = strFund;
}
// Set list box selection to strCurrentFund parameter.
// No selection if parameter empty or not found.
int iPos = pListBox-&gt;FindStringExact(-1, strCurrentFund);
pListBox-&gt;SetCurSel(iPos);</pre>
</td></tr>
</table>
</p>
</ol>

<p>Look through the code and make sure that you understand how the function achieves
its objectives.</p>

<p>The <b>UpdateFundList()</b> function will be called from the <b>LoadData()</b>
function. Eventually the <b>LoadData()</b> function will handle the loading of data
records from a text file. For now, you will create a temporary version that simply adds
some hard-coded records.</p>

<p><li> <b>To implement the STUploadDoc::LoadData() function</b></li></p>

<ol>
<p><li> Right-click the <b>STUploadDoc</b> icon in ClassView and use the <b>Add Member
Function</b> dialog box to add the function declaration to the <b>protected</b> section
of the class declaration, and to add a function stub. The function should have the
following signature:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BOOL LoadData(CStdioFile &amp; infile)</pre>
</td></tr>
</table>
</p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p><li> To the body of the <b>LoadData()</b> function, add the code from CH5_04.cpp
(installed from the companion CD), part of which is shown below:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
COleDateTime(1999, 4, 1, 0, 0, 0), 22.33));
// ... more records added here
m_DocList.AddTail(CStockData(_T(&quot;COMP&quot;), 
COleDateTime(1999, 4, 5, 0, 0, 0), 19.77));

// Update main window

UpdateAllViews(NULL);

// Update Fund Selection dialog box
CMainFrame * pWnd = 
     dynamic_cast&lt;CMainFrame *&gt; (AfxGetMainWnd());
if(pWnd)
{
     pWnd-&gt;UpdateFundList(m_DocList);
     // Show fund window after loading new funds
     pWnd-&gt;SetFundsVisible(TRUE);
}

return TRUE;</pre>
</td></tr>
</table>
</p>

<p><li> Add the following to the top of the CSTUploadDoc.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;MainFrm.h&quot;</pre>
</td></tr>
</table>
</p>

<p><li> Locate the CSTUploadDoc constructor. Remove all the implementation code to leave
an empty function stub so that the constructor appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CSTUploadDoc::CSTUploadDoc()
{
}</pre>
</td></tr>
</table>
</p>

<p><li> Locate the <b>CSTUploadDoc::OnDataImport()</b> function. To the bottom of the
function, before the closing brace, add the following code to call the <b>
LoadData()</b> function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>if(nID == IDOK)
{
     CStdioFile aFile;
     LoadData(aFile);
}</pre>
</td></tr>
</table>
</p>
</ol>

<p>You can now build the STUpload application. Choose <b>Import</b> from the
<b>Data</b> menu. Using the <b>Open</b> dialog box, open the Ch5Test.dat file from
the
..\Chapter 5\Data folder. Records should be displayed for the ARSC, BBIC and COMP
funds, and the <b>Select Fund</b> dialog box should display these three funds.</p>

<A NAME="230"><H2>Handling Notification Messages from the Select Fund Dialog Box</H2></A>

<p>The purpose of the <b>Select Fund</b> dialog box is to allow the user to limit the
display of fund price data so that records for only the currently selected fund are
displayed. You have already filled the list box with options&#8212;you now have to act
upon the user's selection.</p>

<p>To start, you will add the m_strCurrentFund variable to record the fund name currently
selected by the user. In the next chapter, you will be making this variable persistent
so that you can save the current user selection as part of the document data. Thus the
m_strCurrentFund variable will be a member of the <b>CSTUploadDoc</b> class.</p>

<p>To ensure that this variable always represents the current selection of the
<b>Select Fund</b> dialog box, you will handle notification messages from the list box control. The list box sends a LBN_SELCHANGE message to its parent window (the <b>CFundDialog</b> object) every time the selection changes. You can use
ClassWizard to provide a handler for this message.</p>

<p>You will also change the <b>CSTUploadView::OnDraw()</b> function so that it refers
to the &quot;currently selected fund&quot; variable held by the document object to
ensure that it displays records that pertain to the currently selected fund only.</p>

<p><li> <b>To add the CDocument::m_strCurrentFund member</b></li></p>

<p>Right-click the <b>CDocument</b> icon in ClassView and add a protected member
variable of type CString named <b>m_strCurrentFund</b>.</p>

<p><li> <b>To initialize the m_strCurrentFund member in the class constructor</b></li></p>

<ol>
<p><li> Double-click the icon that represents the <b>CSTUploadDoc</b> class
constructor.</li></p>

<p><li> Add the following line of code to the body of the function:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_strCurrentFund = &quot;&quot;;</pre>
</td></tr>
</table>
</p>
</ol>
<p><li> <b>To create accessor functions for the m_strCurrentFund member variable</b></li></p>

<p>Add the following lines of code to the <b>public</b> section of the <b>CDocument</b>
class declaration:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CString GetCurrentFund () {return m_strCurrentFund;}
void SetCurrentFund (CString strSet){m_strCurrentFund= strSet;}</pre>
</td></tr>
</table>
</p>

<p><li> <b>To add a method to the CFundDialog class to handle the LBN_SELCHANGE message</b></li></p>

<ol>
<p><li> Press CTRL+W to open ClassWizard. Click the <b>Message Maps</b> tab.</li></p>

<p><li> In the <b>Class Name</b> box, click <b>CFundDialog</b>.</li></p>

<p><li> In the <b>Object IDs</b> box, click <b>IDC_FUNDLIST</b>.</li></p>

<p><li> In the <b>Messages</b> box, click <b>LBN_SELCHANGE</b>.</li></p>

<p><li> Click <b>Add Function</b>. Click <b>OK</b> to accept the suggested handler
function name <b>OnSelchangeFundlist()</b>.</li></p>

<p><li> Click <b>Edit Code</b>. The FundDialog.cpp file is opened and the insertion
point is positioned at the top of the function implementation.</li></p>
</ol>

<p><li> <b>To implement the CMainFrame::OnSelchangeFundlist() function</b></li></p>

<ol>
<p><li> Add the following lines of code to the body of the <b>OnSelchangeFundlist()</b>
function:</li></p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p>(This code can be found in CH5_05.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CMainFrame * pWnd = 
     dynamic_cast&lt;CMainFrame *&gt; (AfxGetMainWnd());
ASSERT_VALID(pWnd);

CSTUploadDoc * pDoc = 
     dynamic_cast&lt;CSTUploadDoc *&gt;(pWnd-&gt;GetActiveDocument());
ASSERT_VALID(pDoc);

CString strCurFund;

int sel = m_listBox.GetCurSel();

if(sel == LB_ERR) sel = 0;

m_listBox.GetText(sel, strCurFund);

pDoc-&gt;SetCurrentFund(strCurFund);

pDoc-&gt;UpdateAllViews(NULL);</pre>
</td></tr>
</table>
</p>

<p><li> Add the following lines of code to the top of the FundDialog.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;MainFrm.h&quot;
#include &quot;STUploadDoc.h&quot;</pre>
</td></tr>
</table>
</p>
</ol>
<p><li> <b>To alter the CSTUploadView::OnDraw() function</b></li></p>

<ol>
<p><li> Locate the display loop at the bottom of the <b>CSTUploadView::OnDraw()</b>
function. Just after the call to <b>CStockDataList::GetNext()</b>, add this code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>if(sd.GetFund() != pDoc-&gt;GetCurrentFund()) continue;</pre>
</td></tr>
</table>
</p>

<p>The entire loop section should now look as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>while(pos)
{
     CStockData sd = pData.GetNext(pos);

     if(sd.GetFund() != pDoc-&gt;GetCurrentFund())continue;

     pDC-&gt;TextOut(10, yPos, sd.GetAsString());
     yPos += nTextHeight;
}</pre>
</td></tr>
</table>
</p>

<p><li> Build and run the STUpload application. Test loading the data as before. You
will now see that no records appear initially, but as soon as you select a fund from
the <b>Select Fund</b> dialog box, the appropriate records will appear.</li></p>
</ol>

<A NAME="231"><H2>Making the Select Fund Dialog Box a Topmost Window</H2></A>

<p>The <b>Select Fund</b> dialog box is a key element of the STUpload application user
interface. It will be constantly in use to switch from fund to fund as the operator
checks through the data held on file. In its current implementation, however, it is
easily hidden if the user clicks on the main application window&#8212;to access the main
menu, for example. The <b>Select Fund</b> dialog box is so small that it is
inconvenient to retrieve once it is hidden behind the larger window.</p>

<p>The solution to this problem is to make the <b>Select Fund</b> dialog box a <i>
topmost</i> window&#8212;that is, a window that is always on top of other windows in the
application. A topmost window will appear even if it does not have input focus.</p>

<p>A topmost window has the style WS_EX_TOPMOST. In an MFC application, you can set this
by calling the <b>CWnd::SetWindowPos()</b> function with the address of the <b>
wndTopMost</b> constant as the first parameter.</p>

<p><li> <b>To set the Select Fund dialog box as a topmost window</b></li></p>

<ol>
<p><li> In ClassView, double-click the <b>CMainFrame::OnCreate()</b> function icon to
edit the code.</li></p>

<p><li> At the bottom of the function, directly after the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_wndFundDialog.Create(IDD_FUNDDIALOG);</pre>
</td></tr>
</table>
</p>

<p>and <i>before</i> the return statement, add the line shown below.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_wndFundDialog.SetWindowPos(&amp;wndTopMost, 0, 0, 0, 0, 
     SWP_NOMOVE | SWP_NOSIZE);</pre>
</td></tr>
</table>
</p>
</ol>

<p>This is all you need to do to make the <b>Select Fund</b> dialog box stay on top of
the application main window. Unfortunately, it has the undesirable side effect of
making the dialog box stay on top of <i>all other</i> application windows&#8212;even
when the STUpload application is not active. If you build and run the application and
test its behavior at this point, you will see that the <b>Select Fund</b> dialog box
remains visible even when the STUpload application is minimized.</p>

<p>To solve this problem, you need to hide the dialog box (if it is visible) at the
point where the application <i>as a whole</i> loses focus, and then re-display it when
the user switches focus back to the application. To do this, you need to provide a
handler for the WM_ACTIVATEAPP message, which is called when the user switches between
applications. You will use ClassWizard to create a handler that is an overload of the
<b>CWnd::OnActivateApp()</b> method. This function is called by the framework with a
Boolean parameter that indicates whether the application is being activated or
deactivated.</p>

<p><li> <b>To add a handler for the WM_ACTIVATEAPP message</b></li></p>

<ol>
<p><li> Press CTRL+W to open ClassWizard. Click the <b>Message Maps</b> tab.</li></p>

<p><li> In the <b>Class Name</b> box, click <b>CMainFrame</b>.</li></p>

<p><li> In the <b>Object IDs</b> box, click <b>CMainFrame</b>.</li></p>

<p><li> In the <b>Messages</b> box, click <b>WM_ACTIVATEAPP</b>.</li></p>

<p><li> Click <b>Add Function</b>.</li></p>

<p><li> Click <b>Edit Code</b>. The MainFrm.cpp file is opened, and the insertion point
is positioned at the top of the function implementation.</li></p>
</ol>

<p><li> <b>To implement the CMainFrame::OnActivateApp() function</b></li></p>

<ol>
<p><li> To the body of the <b>OnActivateApp()</b> function, after the call to the
base-class version, add the following code:</li></p>

<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p>(This code can be found in CH5_15.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>if(bActive)
{
     if(AreFundsVisible()) 
          m_wndFundDialog.ShowWindow(SW_SHOW);
}
else
{
     if(AreFundsVisible()) 
          m_wndFundDialog.ShowWindow(SW_HIDE);
}</pre>
</td></tr>
</table>
</p>

<p><li> Build the application and test to ensure that the <b>Select Fund</b> dialog box
remains on top of the STUpload application window, but that it is hidden when other
applications have focus.</li></p>
</ol>

<A NAME="232"><H2>Displaying STUpload Application Data</H2></A>

<p>You are now ready to implement the graphical display of price data for the currently
selected fund. The first task is to determine the document size so that the scroll bars
provided by <b>CScrollView</b> will appear correctly. In the STUpload application, although the size of the application data changes as text files are
loaded into the document, the size of the display output remains constant. Only one
graph is displayed at any time. You will fix the size of the graph to the size of a
standard laser printer page in landscape orientation&#8212;that is, 11 inches wide by
8.5 inches tall.</p>

<p><li> <b>To set up scroll sizes for the STUpload application</b></li></p>

<ol>
<p><li> In ClassView, expand the <b>CSTUploadView</b> class icon.</li></p>

<p><li> Double click the <b>OnInitialUpdate()</b> icon to edit the function.</li></p>

<p><li> Edit the following lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>sizeTotal.cx = sizeTotal.cy = 100;
SetScrollSizes(MM_TEXT, sizeTotal);</pre>
</td></tr>
</table>
</p>

<p>so that they appear as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>sizeTotal.cx = 1100;
sizeTotal.cy = 850;
SetScrollSizes(MM_LOENGLISH, sizeTotal);</pre>
</td></tr>
</table>
</p>
</ol>

<p>You will now replace the <b>CView::OnDraw()</b> function with a provided version.
This function collects the data currently held on file for a particular fund into a
temporary array. It uses the data to calculate a suitable scale for the dates
(<i>x</i>-axis) and the prices (<i>y</i>-axis). The data is presented as a line graph,
which should enable the operator to spot any erratic data easily, with the exact values
displayed at the graph points. Look through the code to see how the MFC drawing tool
classes and the GDI drawing functions are used to display output in a device
context.</p>

<p><li> <b>To implement the OnDraw() method</b></li></p>

<ol>
<p><li> In ClassView, expand the <b>CSTUploadView</b> class icon.</li></p>

<p><li> Double click the <b>OnDraw()</b> icon to edit the method.</li></p>

<p><li> Replace the <i>entire</i> method with the following code:</li></p>
<p><img src="images/cd.gif" width=45 height=45 border="0"></p>
<p>(This code can be found in CH5_07.cpp, installed from the companion CD.)</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
void CSTUploadView::OnDraw(CDC* pDC)
{
     CSTUploadDoc* pDoc = GetDocument();
     ASSERT_VALID(pDoc);

     // Save the current state of the device context
     int nDC = pDC-&gt;SaveDC();

     const CStockDataList &amp; pData = pDoc-&gt;GetDocList();

     // Make a small array containing the
     // records for the current fund.
     // We use an array to take advantage of indexed access.
     CArray&lt;CStockData, CStockData &amp;&gt; arrFundData;

     POSITION pos = pData.GetHeadPosition();

     while(pos)
     {
          CStockData sd = pData.GetNext(pos);

          if(sd.GetFund() == pDoc-&gt;GetCurrentFund())
               arrFundData.Add(sd);
     }

     int nPrices = arrFundData.GetSize();
     if(nPrices == 0) 
          return;

     // Some constant sizes (in device units)
     const int AXIS_DIVIDER_LENGTH = 6;
     const int AXIS_FONT_HEIGHT = 24;
     const int HEADING_FONT_HEIGHT = 36;

     // Create font for axis labels
     CFont AxisFont;
     if(AxisFont.CreateFont(AXIS_FONT_HEIGHT, 0, 0, 0, 0, 0, 0, 0, 0, 
          0, 0, 0, FF_ROMAN, 0))

          pDC-&gt;SelectObject(&amp;AxisFont);
     else
     {
          AfxMessageBox(&quot;Unable to create Axis font&quot;);
          return;
     }

     CPen AxisPen;
     if(AxisPen.CreatePen(PS_SOLID, 1, RGB(0,0,0)))
          pDC-&gt;SelectObject(&amp;AxisPen);
     else
     {
          AfxMessageBox(&quot;Unable to create Axis Pen&quot;);
          return;
     }

     // Array to graph coordinates as we go
     CArray&lt;CPoint, CPoint&amp;&gt; CoordArray;
     for(int i = 0; i &lt; nPrices; i++)
          CoordArray.Add(CPoint(0, 0));

     // Set viewport origin to bottom left corner of window
     CPoint ptBottomLeft(0, -850);
     pDC-&gt;LPtoDP(&amp;ptBottomLeft);
     pDC-&gt;SetViewportOrg(ptBottomLeft);

     // Base coordinates for axes
     const CPoint ORIGIN(100, 100);
     const CPoint Y_EXTENT(ORIGIN.x, ORIGIN.y + 650);
     const CPoint X_EXTENT(ORIGIN.x + 900, ORIGIN.y);

     // Draw axes
     pDC-&gt;MoveTo(Y_EXTENT);
     pDC-&gt;LineTo(ORIGIN);
     pDC-&gt;LineTo(X_EXTENT);

     int nLabelPos = Y_EXTENT.y + ((ORIGIN.y - Y_EXTENT.y) / 2);
     pDC-&gt;TextOut(ORIGIN.x - 50, nLabelPos, '$');

     // Divide x-axis into number of prices held in the file
     int nXIncrement = (X_EXTENT.x - ORIGIN.x) / nPrices;

     double nMaxPrice = 0;
     double nMinPrice = 0;

     for(i = 0; i &lt; nPrices; i++)
     {
          int xPoint = (ORIGIN.x + (i * nXIncrement));
          CoordArray[i].x = xPoint;

          pDC-&gt;MoveTo(xPoint, ORIGIN.y);
          pDC-&gt;LineTo(xPoint, ORIGIN.y + AXIS_DIVIDER_LENGTH);

          COleDateTime aDate = arrFundData[i].GetDate();
          double aPrice = arrFundData[i].GetPrice();

          nMaxPrice = max(nMaxPrice, aPrice);
          nMinPrice = nMinPrice == 0 ? 
               nMaxPrice :
               min(nMinPrice, aPrice);

          CString strDate = aDate.Format(&quot;%m/%d/%y&quot;);

          if(i == 0 || i == (nPrices-1))
               pDC-&gt;TextOut(xPoint-2, 
                    ORIGIN.y - AXIS_FONT_HEIGHT / 2, strDate);
          else
          {
               CString strDay = strDate.Mid(
                    strDate.Find('/') + 1);
               strDay = strDay.Left(strDay.Find('/'));
               pDC-&gt;TextOut(xPoint-6, 
                    ORIGIN.y - AXIS_FONT_HEIGHT / 2, strDay);
          }
     }

     // Divide y-axis into suitable scale based on 
     // the difference between max and min prices on file
     nMaxPrice += 2.0;
     nMinPrice -= 1.0;
     int iScale = int(nMaxPrice) - int(nMinPrice);

     int nYIncrement = (ORIGIN.y - Y_EXTENT.y) / iScale;

     for(i = 0; i &lt; iScale; i++)
     {
          int yPoint = (ORIGIN.y - (i * nYIncrement));
          pDC-&gt;MoveTo(ORIGIN.x, yPoint);
          pDC-&gt;LineTo(ORIGIN.x - AXIS_DIVIDER_LENGTH, yPoint);

          int iCurrentPrice = int(nMinPrice) + i;

          for(int j = 0; j &lt; nPrices; j++)
          {
               double aPrice = arrFundData[j].GetPrice();
               if(aPrice &gt;= double(iCurrentPrice) &amp;&amp; 
                    aPrice &lt; double(iCurrentPrice) + 1.0)
               {
                    double dFraction = aPrice - 
                         double(iCurrentPrice);
                    CoordArray[j].y =
                         yPoint - int(dFraction * 
                              double(nYIncrement));
               }
          }
          CString strPrice;
          strPrice.Format(&quot;%d&quot;, iCurrentPrice);

          int nTextSize = pDC-&gt;GetTextExtent(strPrice).cx;
          nTextSize += 10;

          pDC-&gt;TextOut(ORIGIN.x - nTextSize, yPoint+12, strPrice);
     }

     // Graph figures stored in CoordArray
     CPen GraphPen;
     if(GraphPen.CreatePen(PS_SOLID, 1, RGB(255,0,0)))  // Red pen  
     {
          pDC-&gt;SelectObject(&amp;GraphPen);
     }
     else
     {
          AfxMessageBox(&quot;Unable to create Graph Pen&quot;);
          return;
     }

     // Draw Graph
     // Label graph points with price value (in blue)
     COLORREF crOldText = pDC-&gt;SetTextColor(RGB(0,0,255));

     pDC-&gt;MoveTo(CoordArray[0]);

     for(i = 0; i &lt;nPrices; i++)
     {
          pDC-&gt;LineTo(CoordArray[i]);
          CPoint TextPoint;
          if((i+1) &lt;nPrices)
          {
               if(CoordArray[i + 1].y &gt;= CoordArray[i].y)
                    TextPoint = CoordArray[i] + CPoint(5, 0);
               else
                    TextPoint = CoordArray[i] + CPoint(5, 
                         AXIS_FONT_HEIGHT);
          }
          else
               TextPoint = CoordArray[i] + CPoint(5, 0);

          CString strPrice;
          strPrice.Format(&quot;%.2f&quot;, arrFundData[i].GetPrice());

          pDC-&gt;TextOut(TextPoint.x, TextPoint.y, strPrice);
     }

     pDC-&gt;SetTextColor(crOldText);

     // Create heading
     CFont HeadingFont;
     if(HeadingFont.
          CreateFont(HEADING_FONT_HEIGHT, 0, 0, 0, FW_BOLD, 1, 0, 0, 
          0, 0, 0, 0, FF_ROMAN, 0));

          pDC-&gt;SelectObject(&amp;HeadingFont);
     else
     {
          AfxMessageBox(&quot;Unable to create Heading Font&quot;);
          return;
     }

     CString strHeading = pDoc-&gt;GetCurrentFund();
     strHeading += &quot; - Closing Prices &quot;;

     COleDateTime aDate = arrFundData[0].GetDate();
     strHeading += aDate.Format(&quot;%m/%d/%y&quot;); 
     strHeading += &quot; to &quot;;
     aDate = arrFundData[nPrices - 1].GetDate();
     strHeading += aDate.Format(&quot;%m/%d/%y&quot;);

     CSize sizeText = pDC-&gt;GetTextExtent(strHeading);

     pDC-&gt;TextOut(X_EXTENT.x - sizeText.cx, 
          Y_EXTENT.y + sizeText.cy, strHeading);
     // Restore the original device context
     pDC-&gt;RestoreDC(nDC);
}
</pre></td></tr></table></p>

<p><li> Build and run the STUpload application. Test loading the data as before. The
application data should now appear as shown in Figure 5.21.</li></p>

<p>
<A HREF="javascript:fullSize('F05DA21x.htm')"> <img src="images/F05DA21.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.21</b> <i>The STUpload application</i><!-- /caption -->
</p>
</ol>

</BODY>
</HTML>







