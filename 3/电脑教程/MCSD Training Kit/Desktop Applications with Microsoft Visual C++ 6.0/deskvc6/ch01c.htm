<HTML>
<HEAD>
<TITLE>Lesson 2: Installing the Visual C++ Development Tools</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm", "ch01d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="41"><H1>Lesson 2: Installing the Visual C++ Development Tools</H1></A>

<p>In this lesson, you will learn about the options offered by Microsoft Visual
Studio 6.0 when installing the Enterprise Edition of Visual C++ 6.0 using a
custom installation. The installation setup program is a good place to gain an overview
of the features offered by the Visual C++ development environment,
as it groups together all the installable options that are available to you in one
logically organized, browsable location. If you already have Visual C++ installed, you
can still follow through this lesson to further your understanding
of the installation options.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>
<p><li> Understand the choices presented to users when installing Visual C++ 6.0.</li></p>
</ul>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>


<A NAME="42"><H2>Microsoft Visual C++ Installation</H2></A>

<p>Visual C++ comes as part of the Visual Studio development suite or as a stand-alone
product. In either case, you start the installation process by running the Setup.exe
file from the root directory of the CD.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If you are using Windows NT 4.0, you will need to install the
Windows NT Service Pack 3 before you can install Visual C++.</blockquote></div>
</p>

<p>First you will be presented with a dialog box providing you with the opportunity to
browse the Readme file. This file contains important information that will likely
impact your development effort, so you should at least scan its contents.</p>

<p>Next, you will be presented with the user license agreement. Once you have read and
accepted the user license agreement and entered your product number and user ID, you
will be taken to a dialog box that presents you with setup options. At this point,
choose a <b>Custom</b> setup and click <b>Next</b>.</p>

<p>On the screen that appears, accept the default installation location by clicking <b>
Next</b>. The setup process will begin. Read the information screens and click <b>
Next</b> until you arrive at the Custom Setup screen, shown in Figure 1.8. (This figure displays the Visual Studio version of this screen, which shows
options to install the other products in the Visual Studio suite.)</p>

<p>
<A HREF="javascript:fullSize('F01DA08x.htm')"> <img src="images/F01DA08.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 1.8</b> <i>The Visual Studio Custom Setup screen</i><!-- /caption -->
</p>

<p>If you already have Visual C++ installed, you'll want to get to the maintenance
dialog box that allows you to add or remove components for your current installation.
You access this dialog box by selecting the <b>Workstation</b> option. This maintenance
dialog box is identical to the setup screen, so you can use it to
explore the installation options.</p>

<p>The custom setup screen appears with a default set of installation options selected,
which you can change as required. A check mark next to an installation option means
that the option will be installed. Many of the options are arranged in a hierarchical
order. If one of the items in the <b>Options</b> list is selected and the <b>Change
Option</b> button is made available, you can click it to reveal further sub-options
beneath the currently selected option. <b>OK</b> and <b>Cancel</b> can be used to move
up the option hierarchy, saving or discarding the changes you have made to the option
selection on each screen.</p>

<p>If an option check box is selected but shaded, only some of its suboptions are
selected, meaning that only some of its options will be installed.</p>

<p>The following exercise shows you how to use the Custom Setup or Maintenance screen
to configure your installation options.</p>

<p><li> <b>To configure installation options</b></li></p>

<ol>
<p><li> In the <b>Options</b> list of the Custom Setup or Maintenance screen, select the
<b>Microsoft Visual C++ 6.0</b> option as shown in Figure 1.8.</li></p>

<p><li> Click the <b>Change Option</b> button.</li></p>

<p><li> In the <b>Options</b> list, select the <b>VC++ Runtime Libraries</b> option.
Click the <b>Change Option</b> button.</li></p>

<p>Note that the <b>CRT Source code</b> option is not selected. Note, too, that the
option requires 5805 KB of disk space. Having the C run-time source code available
means that you can use the debugger to step through the C source code of the standard C
libraries. If the CRT source code is unavailable, you will only see assembly language
instructions when you use the debugger to step into a C library function. Having this
source code available can also be instructional in that it demonstrates how
professional C programmers handle a particular programming situation.</p>


<p><li> If you would like to have the CRT library source code available, and you can
spare the half-megabyte of disk space that this option requires, select the check box
next to that option.</li></p>

<p><li> If you have changed any of the options that are currently displayed in the <b>
Options</b> list and you want to save the changes, click <b>OK</b> to revert to the
previous screen in the hierarchy. Otherwise, click <b>Cancel</b> to leave the options
as they were.</li></p>
</ol>


<p>
<div class="tip"><blockquote>
<b>TIP</b><hr>If you make changes at one level and click <b>OK</b>, and then click <b>
Cancel</b> at a higher level, the lower level changes are still reflected in your
setup. If you want to cancel the lower level changes, you must go to the dialog box on
which they were made and reverse them, and then click <b>OK</b> in that dialog
box.
</blockquote></div>
</p>



<ol start="6">
<p><li> When you have finished configuring the options, return to the main Custom Setup
or Maintenance screen, and proceed with the installation by clicking the <b>
Continue</b> button. To abandon the installation, click <b>Cancel</b>.</li></p>
</ol>

<A NAME="43"><H2>Installation Options</H2></A>

<p>The rest of this lesson consists of a brief explanation of most of the Visual C++
installation options. Using the Custom Setup or the Maintenance screen, locate each of
the options listed in the following sections and determine whether or not you require
them to be installed on your computer.</p>

<A NAME="44"><H3>Visual Studio</H3></A>

<p>You have an all or nothing choice of options with Visual Studio, and you should
hence select the default choice of <b>All</b>. The default choice installs the
development environment, wizards, and debugger.</p>

<p>The Visual C++ UI consists of an integrated set of windows, tools, menus, toolbars,
directories, and other elements that allow you to create, test, and refine your
application in one place. You can also work on other types of documents within Visual
C++, such as Microsoft Excel or Microsoft Word documents.</p>

<A NAME="45"><H3>Run-Time Libraries</H3></A>

<p>The <b>VC++ Runtime Libraries</b> selection, which you read about in the previous
exercise, offers four choices:</p>

<ul>
<p><li> <b>Static CRT Libraries</b> Multithread-capable libraries. These libraries are
linked to your application at link time, increasing the size of the executable file. An
advantage to static linking is that the executable (.exe) file contains the entire
application. A disadvantage is that a change in the program or a 
library requires a rebuild of the entire application.</li></p>

<p><li> <b>Shared CRT Libraries</b> Dynamically linked to your application at run time.
Accordingly, the application's .exe file is smaller than the same application when
statically linked to the libraries. Advantages to dynamic linking include builds that
take less time to create, and the ability to redistribute a smaller
executable program if you make changes in the application. A disadvantage to
dynamic linking is that you have to ensure that users of your program have the link
libraries installed on their computers.</li></p>

<p><li> <b>CRT Source Code</b> Installs the source code for the C++ run-time debug
libraries. Having the source code readily available makes programming and debugging
easier. You can refer to the code to see how other programmers handle a particular
programming situation.</li></p>

<p><li> <b>Single Threaded CRT Libraries</b> Used when you choose static linking and
single threading as build options.</li></p>
</ul>


<p>Each of the libraries has an optimized release version without debug symbols and a
debug version with no optimizations, but with debug symbols. When you choose to include
the source code, you can step into library functions during
debugging sessions.</p>

<p>Developers of desktop applications on the Win32 platform (that is, Windows 95,
Windows 98, and Windows NT) will often want to take advantage of multithreading
capabilities offered by these platforms. If you are developing programs that need to
run on older 16-bit platforms, you will need to link to the single-threaded CRT
libraries.</p>

<A NAME="46"><H3>MFC Library</H3></A>

<p>The MFC Library is a collection of C++ classes that provide a framework
for programming on the Windows platform. Building on the work of expert
Windows developers, you can quickly and easily generate applications, libraries, and
software components. MFC makes rapid development available for all
aspects of Windows programming, including the development of UIs, Internet development,
component technology, and database access&#8212;all without sacrificing programming
freedom and flexibility. MFC provides the <i>AppWizard</i>, a step-by-step visual tool
that allows the developer to quickly and easily generate frameworks to set up a basic
application structure; and to generate code to implement fundamental application
behaviors.</p>

<p>The <b>VC++ MFC and Template Libraries</b> option includes the following MFC
libraries:</p>

<ul>
<p><li> <b>Static Libraries</b> Installs the headers, libraries, and debug symbols for
static linkage to MFC.</li></p>

<p><li> <b>Shared Libraries</b> Installs the headers, libraries, and debug symbols
for dynamic linkage to shared MFC DLLs.</li></p>

<p><li> <b>Static Libraries for Unicode</b> Same as static libraries, except that the
linkage is to the <i>Unicode</i> version of MFC. Unicode is a 16-bit character set
supported by Windows NT that makes character sets of more than 65,000 characters
available. You would use Unicode to develop international versions of your application
that are required to support languages with large character sets such as Chinese. Note,
too, that all internal strings used by Windows NT, such as user account names and
device names, are Unicode strings, so you will need to install the Unicode libraries if
you are planning to write programs that retrieve and manipulate these strings
directly.</li></p>

<p><li> <b>Shared Libraries for Unicode</b> The dynamic linking, shared version of the MFC
Unicode library.</li></p>

<p><li> <b>Browser Database</b> Installs the browser database for the debug versions of
the MFC libraries. The browser allows you to view a graphical representation of the
inheritance hierarchy of your classes and of the relationships between them. Makes
jumping to MFC source code from within your code quick and easy. However, including
browser information in your project does increase the compilation time and the
executable program size.</li></p>

<p><li> <b>Source Code</b> One of the best ways to learn how to program with MFC is to
look at the code and step through it using the debugger.</li></p>
</ul>


<A NAME="47"><H3>ActiveX Template Library</H3></A>

<p>This option is in the same dialog box as the <b>MS Foundation Class Libraries</b>
option. Choose <b>MS ActiveX Template Library</b> (ATL) to install the headers,
libraries, and source files for ATL.</p>

<p>ATL is a set of template-based C++ classes with which you can easily create
Component Object Model (COM) objects. ATL simplifies the often-complicated process of
COM development, but with less overhead than MFC. ATL's ability to generate small,
fast components is especially useful if you are developing for an Internet environment.
ATL has special support for fundamental COM features including stock implementations of
key COM interfaces, and helper classes that simplify working with COM objects and data
types. COM and ATL are covered in depth later in this book.</p>

<A NAME="48"><H3>Build Tools</H3></A>

<p>The <b>Build Tools</b> option installs the compiler, linker, NMAKE, and other tools
used to build applications and components.</p>

<A NAME="49"><H3>Data Access</H3></A>

<p>The <b>Data Access</b> option is in the main selection dialog box, at the same level
as the C++ options. These options include:</p>

<ul>
<p><li> <b>ADO, RDS, and OLE DB Providers</b> OLE DB is a new low-level interface that
introduces a universal data access paradigm. That is, OLE DB is not restricted to the
Indexed Sequential Access Method (ISAM), the Microsoft Jet database, or even relational
data sources, but is capable of dealing with any type of data regardless of its format
or storage method. For practical purposes, this means that you can access data that
resides in an Excel spreadsheet, in text files, or even on a mail server such as
Exchange.</li></p>

<p>OLE DB is a set of interfaces that exposes data from a variety of sources using COM.
OLE DB interfaces provide applications with uniform access
to data stored in diverse information sources. These interfaces support the amount of
DBMS functionality appropriate to the data source, enabling it to share its data.</p>

<p>ADO enables you to write a client application to access and manipulate data in a
data source through a provider. ADO is designed as an easy-to-use application level
interface to OLE DB providers. ADO's primary benefits are ease of use, high speed,
low memory overhead, and a small disk footprint.</p>

<p>RDS client-side and server-side components work together to bring data over the
Internet or over an Intranet to a Web page. These RDS components also allow updated
information to be sent back across the network and merged into a database.</p>

<p><li> <b>Microsoft ODBC Drivers</b> Open Database Connectivity (ODBC) provides an API
that different database vendors implement via ODBC drivers specific to a particular
DBMS. Your program uses this API to call the ODBC Driver Manager, which passes the
calls to the appropriate driver. The driver, in turn, interacts with the DBMS using
Structured Query Language (SQL).</li></p>

<p><li> <b>Jet Installable ISAM Drivers</b> The Microsoft Jet database engine is a
database management system that retrieves data from and stores data in user and system
databases. The Microsoft Jet database engine can be thought of as a data manager
component with which other data access systems, such as Microsoft Access and Microsoft
Visual Basic, are built. The installable ISAM drivers allow you to access various ISAM
data sources, such as the DBase III file format, using the Jet engine.</li></p>

<p><li> <b>Remote Data Objects and Controls</b> Remote Data Objects (RDO) is a thin object
layer interface to the ODBC API. It is specifically designed to access remote ODBC
relational data sources.</li></p>

<p><li> <b>Data Environment</b> The data environment selection adds a grid control, and
supporting functionality, to permit design-time data manipulation.</li></p>
</ul>

<p>We suggest that you install the default Data Access options, but consider whether
you would ever need to write applications that connect to an ISAM data source using the
Jet engine, and look through the <b>Microsoft ODBC Drivers</b> options to see whether
the preselected set is likely to meet your needs.</p>

<A NAME="50"><H3>Enterprise Tools</H3></A>

<p>The tools included with the Enterprise Edition of Visual Studio are as follows:</p>

<ul>
<p><li> <b>Application Performance Explorer (APE)</b> Models your application design and
tests the expected performance and interactions of a distributed architecture. You can
save favorite design architectures and use them as the basis for new configurations and
performance tests.</li></p>

<p><li> <b>Repository</b> Provides a common place to keep information about objects and
relationships between objects. In doing so, it provides a standard way to describe
object-oriented information used by software tools: Software tools use information
composed of various classes of objects; objects expose interfaces; properties, methods,
and collections compose interfaces; collections contain relationships to other
interfaces; and therefore, collections relate objects to other objects. A software tool
is modeled in the Repository through an information model. Each information model is
stored in the Repository database as a Repository type library.</li></p>

<p><li> <b>Visual Component Manager</b> A tool with which to organize, find, and insert
components into a Visual Studio project, addressing three requirements for storing and
organizing components: publishing, finding, and reusing them. Using the Visual
Component Manager, you can identify existing objects available for reuse.</li></p>

<p><li> <b>Visual C++ Enterprise Tools</b> Adds enhanced data tools support and support
for SQL debugging.</li></p>

<p><li> <b>Visual Modeler</b> A tool for designing three-tier distributed applications
using class and component diagrams. With Visual Modeler, you can visually design models
of the classes and components your application needs, and then convert these models to
Visual C++ code.</li></p>

<p><li> <b>Visual Studio Analyzer</b> A tool for evaluating, analyzing, and debugging the
structure, performance, and interactions of a distributed application from an
application perspective, rather than a component or code perspective. Visual Studio
Analyzer uses an event-oriented model to record component interactions for
analysis.</li></p>
</ul>


<A NAME="51"><H2>General Tools</H2></A>

<p>General tools are included with all versions of Visual C++. We suggest that you
install all of the following:</p>

<ul>
<p><li> <b>MFC Trace Utility</b> Helps you debug windows programs. You can trace displays
to a debugging output window or console, to messages about the internal operation of
the MFC library, as well as to warnings and errors if something goes wrong in your
application. Trace only works in debug versions of applications. Trace sets the trace
flags in Afx.ini. These trace flags determine what message categories the application
sends to the debugging window or console.</li></p>

<p><li> <b>Spy++</b> A Win32-based utility that gives you a graphical view of the
system's processes, threads, windows, and window messages.</li></p>

<p><li> <b>Win32 SDK Tools</b> Adds a handful of tools that are useful while developing
and debugging applications. For instance, DDESpy allows you to monitor dynamic data
exchange (DDE) activity in the operating system. PView (process viewer), another SDK
tool, lets you examine and modify many characteristics of the processes and threads
running on your system.</li></p>

<p><li> <b>OLE/COM Object Viewer</b> Displays all registered controls. The object viewer
reads a control's type library and displays the control's interfaces, as well
as registry and other pertinent information.</li></p>

<p><li> <b>ActiveX Control Test Container</b> Helps the control developer test and 
debug ActiveX controls. Test Container allows you to test the control's
functionality by changing its properties, invoking its methods, and firing its
events.</li></p>

<p><li> <b>VC Error Lookup</b> A simple dialog box application that looks up system and
module error codes and displays the text of the error code.</li></p>
</ul>


<A NAME="52"><H3>Visual SourceSafe 6.0</H3></A>

<p>On the main installation screen, you will find an option to install Visual
SourceSafe 6.0 (VSS). VSS helps you manage your projects, regardless of the file type
(text files, graphics files, binary files, sound files, or video files), by saving them
to a database. If you need to share files between two or more projects, you can share
them quickly and efficiently. When you add a file to VSS, the file is backed up on the
database, made available to other people, and changes that have been made to the file
are saved so you can recover an old version at any time. Members of your team can see
the latest version of any file, make changes, and save a new version in the
database.</p>

<p><a href="ch02d.htm#79">Lesson 3</a> in Chapter 2 teaches you how to implement a source-code control
system using VSS, so you should ensure that it is installed. During installation, you
might be asked to choose between support for the old or new VSS database formats.
Generally you should select the newer format&#8212;you can upgrade existing VSS
databases using the VSS utility DDCONV.EXE</p>

<A NAME="53"><H2>Completing the Installation</H2></A>

<p>After you have configured your installation by selecting the appropriate op-
tions from the main and sub installation screens, you click the button labeled <b>
Continue</b> to start installing the software. You will be prompted to reboot your
computer to complete the installation. After the reboot, you will be prompted to
install the version of the Microsoft Developers' Network (MSDN) library that comes
with your copy of Visual C++. You should do this, as the MSDN library
is the means by which online Help and documentation are provided for Visual C++.</p>

<A NAME="54"><H2>Lesson Summary</H2></A>

<p>Visual C++ provides a rich environment for the developer. This environment contains
an essential set of tools and utilities to allow you to produce efficient, bug-free
code. The libraries and frameworks offered in the environment allow you to create code
and application structures for common programming situations, allowing you to
concentrate your time and skills on the creation of unique solutions.</p>

<p>The overview of the major installation options provided in this lesson serves as an
introduction to many aspects of the Visual C++ development suite that we will cover in
more depth throughout this training kit. These include:</p>

<ul>
<p><li> Visual Studio and debugging tools</li></p>

<p><li> Microsoft Foundation Classes (MFC)</li></p>

<p><li> ATL</li></p>

<p><li> Data Access Technologies</li></p>

<p><li> Visual SourceSafe (VSS)</li></p>
</ul>


</BODY>
</HTML>







