<html>
<head>
<title>Appendix -- Review Questiona and Answers</title>
<link rel="STYLESHEET" type="text/css" href="library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14n.htm", "glossa.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="694"><H1>Appendix -- Review Questions and Answers</H1></A>


<A NAME="695"><H2>Chapter 1 -- Enterprise Architecture</H2></A> 


<ol>
<p><li> <b>What common IT challenges can an
enterprise architecture address?</b></li></p>


<ul>
<p><li> <b>Deliver business value</b>  Tightly align IT to business
objectives.</li></p>

<p><li> <b>Control costs</b>  Squeeze every ounce of leverage from
existing IT investments and make careful and informed future
investments.</li></p>

<p><li> <b>Sense and respond</b>  Improve the cross-functional
capabilities within the organization and extend those capabilities
outside the organization to reach customers, suppliers, and
stakeholders more effectively.</li></p>
</ul>




<p><li><b>What are the primary goals of an
enterprise architecture?</b></li></p>


<ul>
<p><li> Be logically consistent.</li></p>

<p><li> Include both activities and coordinated projects.</li></p>

<p><li> Progress from the current state to the desired future state.</li></p>

<p><li> Address both current and projected business objectives and
processes.</li></p>
</ul>

<p><li><b> List the phases of enterprise
architecture adoption.</b></li></p>


<ul>
<p><li> Envisioning</li></p>

<p><li> Planning</li></p>

<p><li> Developing</li></p>

<p><li> Stabilizing</li></p>
</ul>




<p><li><b>Describe the four perspectives of the
MSF Enterprise Architecture Model.</b></li></p>


<ul>
<p><li> <b>Business Perspective</b>  Includes broad business strategies
and plans for moving the organization from its current state to its
desired future state. The Business Perspective describes how the
business works.</li></p>

<p><li> <b>Application Perspective</b>  Represents the services,
information, and functionality that cross organizational boundaries,
linking a variety of users to achieve common business objectives. The
Application Perspective defines the enterprise application
portfolio.</li></p>

<p><li> <b>Information Perspective</b>  Describes what the organization
needs to know to run its business processes and operations.</li></p>

<p><li> <b>Technology Perspective</b>  Lays out the hardware and software
supporting the organization. The Technology Perspective provides a
logical, vendor-independent description of infrastructure and system
components that is necessary to support the Application and Information
Perspectives, and defines the set of technology standards and services
needed to execute the business mission.</li></p>
</ul>




<p><li><b> How can applications be delivered
while an enterprise architecture is under development?</b></li></p>


<p>The enterprise architecture should not be defined in a vacuum, but
should 
reflect information discovered by actually building solutions. Using
versioned releases that incorporate feedback from teams and users
should result in progressive refinement of the architecture. Otherwise,
a rapidly changing business environment could quickly overtake an
organization's ability to both complete models at the enterprise
level and deploy projects before business changes make the models
invalid.</p>
</ol>


<A NAME="696"><H2> Chapter 2 -- Enterprise Applications</H2></A>

<ol>
<p><li><b> What is software architecture, and
what are the characteristics of a good architecture?</b></li></p>


<p>Software architecture is a set of significant decisions about the
organization of a software system. These decisions include:</p>

<ul>
<p><li> The selection of the structural elements and interfaces
comprising the system.</li></p>

<p><li> The system's behavior as determined by collaborations among
those elements.</li></p>

<p><li> The combining of structural and behavioral elements into larger
subsystems.</li></p>

<p><li> The architectural style that guides the system's
organization.</li></p>
</ul>



<p>A good software architecture has the following characteristics:</p>

<ul>
<p><li> Resilient</li></p>

<p><li> Simple</li></p>

<p><li> Approachable</li></p>

<p><li> Clear separation of concerns</li></p>

<p><li> Balanced distribution of responsibilities</li></p>

<p><li> Balanced economic and technical constraints</li></p>
</ul>




<p><li><b> What are three ways of documenting
software architecture?</b></li></p>


<ul>
<p><li> Unified Modeling Language</li></p>

<p><li> Design patterns</li></p>

<p><li> Design antipatterns</li></p>
</ul>




<p><li><b> What are the features of an enterprise
application?</b></li></p>


<ul>
<p><li> <b>Complex</b>  It is a multi-user, multi-developer,
multi-component application that can utilize substantial data, employ
extensive parallel processing, affect network-distributed resources, and require complex logic. It
can be deployed across multiple platforms and inter-operate with many
other applications, and it is long-lived.</li></p>

<p><li> <b>Business-oriented</b>  Its purpose is to meet specific business
requirements. It encodes business policies, processes, rules, and
entities; is developed in a business organization; and is deployed in a
manner responsive to business needs.</li></p>

<p><li> <b>Mission-critical</b>  It is robust enough to sustain continuous
operation. It must be extremely flexible for scalability and
deployment, and allow for efficient maintenance, monitoring, and
administration.</li></p>
</ul>

<p><li><b> What are design patterns and
antipatterns?</b></li></p>


<p>A design pattern is instructive information that captures the
essential structure and insight of a successful family of proven
solutions to a recurring problem that arises within a certain context
and system of forces. It identifies the key aspects of a common design
structure that make it useful for creating a reusable object-oriented
design. Design patterns can be either generative or non-generative.
Generative patterns can be used to solve engineering problems, whereas
non-generative patterns are merely observed. Generative design patterns
provide complete solutions to business and technical problems. They are
primarily geared toward &quot;green field&quot; designs, meaning they
are applied to new designs.</p>

<p>Design antipatterns are geared toward solving problems for which an
inadequate solution is already in place. The best way to differentiate
patterns and antipatterns is to say that patterns lead to an original
solution for a set of criteria and forces, while antipatterns lead to a
new solution when the current design is not working. Thus patterns are
used when starting from scratch, and antipatterns are used to fix
things that are broken.</p>


<p><li><b> Identify five guiding software
management principles.</b></li></p>


<ul>
<p><li> Alignment with business goals</li></p>

<p><li> Product mindset</li></p>

<p><li> Architecture-first</li></p>

<p><li> Design within context</li></p>

<p><li> Different languages for different project phases</li></p>
</ul>

<p><li><b> List the six submodels of the
Enterprise Application Model.</b></li></p>


<ul>
<p><li> Business Model</li></p>

<p><li> User Model</li></p>

<p><li> Logical Model</li></p>

<p><li> Technology Model</li></p>

<p><li> Physical Model</li></p>

<p><li> Development Model</li></p>
</ul>

<p><li><b> What is the MSF Application Model for
Development?</b></li></p>


<p>The MSF Application Model for Development (MSF Application Model)
provides a three-tier services-based approach to designing and
developing software applications. It views an application at a logical
level as a network of cooperative, distributed, and reusable services
that support a business solution. Application services are units of
application logic that include methods for implementing an operation,
function, or transformation. These services should be:</p>

<ul>
<p><li> Accessed through a published interface.</li></p>

<p><li> Driven by the interface specification.</li></p>

<p><li> Focusing value toward the customer, not the provider.</li></p>

<p><li> Mapped directly to actions.</li></p>
</ul>



<p>The MSF Application Model describes applications as using three
services: user, business, and data. These services allow for parallel
development, better use of technology, easier maintenance and support,
and flexibility in distributing the application's services. These
user, business, and data services can reside anywhere in the
environment, from a single desktop to servers and clients around the
world.</p>
</ol>



<A NAME="697"><H2>Chapter 3 -- Project Teams</H2></A>

<ol>
<p><li><b> What are the six roles of the MSF Team
Model for Application Development?</b></li></p>


<ul>
<p><li> Product Management</li></p>

<p><li> Program Management</li></p>

<p><li> Development</li></p>

<p><li> Testing</li></p>

<p><li> User Education</li></p>

<p><li> Logistics Management</li></p>
</ul>



<p><li><b> What are the focal points and
responsibilities of each role?</b></li></p>


<ul>
<p><li> <b>Product Management</b>  The job of this role is to respond to
the customer's need or problem. The key contribution of this role
is to drive the team to a shared vision of how to meet the need or
solve the problem. Product Management answers the business-driven
question, &quot;Why are we doing this?&quot; and ensures that all
members of the team know and understand the answer. The key external
goal of this role is customer satisfaction.</li></p>

<p><li> <b>Program Management</b>  The job of this role is to own and
drive the development process. The leader of this role must understand
the difference between being a leader and being a boss. The primary
responsibility of the leader of the Program Management role is to move
the project through the development process to ensure that the right
product is delivered at the right time. The key external goal of this
role is delivery within project constraints.</li></p>

<p><li> <b>Development</b>  The job of this role is to be technology
consultants and product builders. Development determines exactly how to
implement each feature, the actual architectural implementation, and
how long the coding portion of the project will take to implement.
Development does not determine which features to implement, but how to
write the code for the product. The key external goal of this role is
delivery to product specifications.</li></p>

<p><li> <b>Testing</b>  The job of this role is reality induction. Testing
must be able to clearly articulate both what is currently wrong with
the product, and what is currently right with it, so that the status of
the product's development is accurately portrayed. Testing develops
test strategies, plans, schedules, and scripts. The key external goal
of this role is to make sure that the team knows and addresses all
issues before releasing the product.</li></p>

<p><li> <b>User Education</b>  The job of this role is to enhance user
performance so that users are as productive as possible with the
product. To accomplish this goal, User Education acts as the advocate
for the users of the product, much like Product Management acts as the
customer advocate. However, this is a two-way street, because User
Education also acts as the team's advocate to the users of the
product. The key external goal of this role is enhanced user
performance.</li></p>

<p><li> <b>Logistics Management</b>  The job of this role is to serve as
the advocate for the operations, product support, help desk, and other
delivery channel organizations. The key external goal for this role is
smooth deployment and ongoing management of the product.</li></p>
</ul>


<p><li><b> How can the MSF Development Team Model
be scaled for large and small projects?</b></li></p>


<p>Large projects call for organizational practices that formalize and
streamline communication. All the ways to streamline communication rely
on creating some kind of hierarchy; that is, creating small groups,
which function as teams, and then appointing representatives from those
groups to interact with each other and with management. To scale large
projects, the project team can be divided into two kinds of
subteams:</p>

<ul>
<p><li> <b>Feature teams</b>  These are small subteams that organize one
or more members from each role into a matrix organization. These teams
are then assigned a particular feature set and are responsible for all
aspects of that feature set, including its design and schedule.</li></p>

<p><li> <b>Function teams</b>  These exist within a role. They arise when
a team or project is so large that it requires the people within a role
to be grouped into teams based upon their functionality.</li></p>
</ul>



<p>Although the MSF Development Team Model consists of six roles, a
team doesn't require a minimum of six people. In other words, it
doesn't require one person per role. The key point is that the six
goals have to be represented by the six roles on every team. Having at
least one person per role helps to ensure that someone looks after the
interests of each role, but not all projects can be approached in that
fashion.</p>

<p>On smaller teams, one team member might have more than one role. Two
principles guide this type of role sharing:</p>

<ul>
<p><li> <b>Single role for Development</b>  Development team members
should never be assigned to another role. The developers are the
builders, and they should not be distracted from their main task. To
give additional roles to the Development team only makes it more likely
that schedules will slip due to these other responsibilities.</li></p>

<p><li> <b>Conflict of interest</b>  Roles that have intrinsic conflicts
of interest should not be combined. For example, Product Management and
Program Management have conflicting interests. Product Management wants
to satisfy the customer whereas Program Management wants to deliver on
time and on budget. If these roles are combined and the customer
requests a change, the risk is that either the change will not get the
consideration it deserves to maintain customer satisfaction, or that it
will be accepted without understanding the impact on the project.
Having different team members represent these roles helps to ensure
that each perspective receives equal weight.</li></p>
</ul>


<p><li><b> What are the stages of development
through which a team can progress?</b></li></p>


<p>We view teams as progressing through the following stages:</p>

<ul>
<p><li> Awareness/concern</li></p>

<p><li> Hope/optimism, willingness</li></p>

<p><li> Identification of needs and solutions</li></p>

<p><li> Supportive/caring behaviors</li></p>

<p><li> Trusting/respectful relationships</li></p>

<p><li> Team cohesiveness</li></p>
</ul>



<p>The goal is to have all teams move to the last stage, team
cohesiveness, where productivity is the highest.</p>


<p><li><b> What two types of education improve a
team member's effectiveness?</b></li></p>


<ul>
<p><li> <b>Process education</b>  Training in the process of developing
software.</li></p>

<p><li> <b>Technical education</b>  Training in the actual languages and
tools being used.</li></p>
</ul>
</ol>




<A NAME="698"><H2> Chapter 4 -- Development Process</H2></A>

<ol>
<p><li><b>Briefly describe the Waterfall Model
and the Spiral Model.</b></li></p>


<ul>
<p><li> <b>Waterfall Model</b>  A project life cycle model that is
primarily linear. It is an orderly, highly structured process based on
the following well-defined development steps: system requirements,
software requirements, analysis, program design, coding, system test,
and operations.</li></p>

<p><li> <b>Spiral Model</b>  A project life cycle model that is primarily
iterative. The stages of application development that make up this
model are typically characterized as inception, elaboration,
construction, and transition. Within each stage are five activity
phases: requirements, design, implementation, deployment, and
management. The Spiral Model's process is a continuous circle
through the stages of development, with each stage requiring multiple
revolutions through the five phases.</li></p>
</ul>


<p><li><b> What are the workflows of the Unified
Process?</b></li></p>


<p>The workflows of the Unified Process are five core processes that
are continually executed during the four phases of the development
process until the application is completed. Each circuit of the five
workflow steps is called an iteration, and each iteration culminates in
an internal product release. The workflows are:</p>

<ul>
<p><li> Requirements</li></p>

<p><li> Analysis</li></p>

<p><li> Design</li></p>

<p><li> Implementation</li></p>

<p><li> Testing</li></p>
</ul>


<p><li><b> What are the phases and milestones of
the Unified Process?</b></li></p>


<p>Because the Unified Process is based primarily on the Spiral Model,
like that model, its four phases of development are Inception,
Elaboration, Construction, and Transition. Each phase strives to
achieve specific goals:</p>

<ul>
<p><li> <b>Inception Phase</b>  Iterations focus on producing the business
case. The Inception Phase's milestone is the Lifecycle Objective
Milestone.</li></p>

<p><li> <b>Elaboration Phase</b>  Iterations are responsible for
developing the baseline architecture. The Elaboration Phase's
milestone is the Lifecycle Architecture Milestone.</li></p>

<p><li> <b>Construction Phase</b>  Iterations focus on creating the
product with incremental releases of product builds and features. The
Construction Phase's milestone is the Initial Operation Capability
Milestone.</li></p>

<p><li> <b>Transition Phase</b>  Iterations ensure the product is ready
for release to the user community. The Transition Phase's milestone
is the Product Release Milestone.</li></p>
</ul>


<p><li><b> Discuss the objectives and purpose of
each MSF phase.</b></li></p>


<ul>
<p><li> <b>Envisioning Phase</b>  A shared vision of the project is built
among all the key stakeholders. This vision should include a mutual
understanding of the business needs being addressed, clearly identified
solutions that meet the customer's expectations, and a solid
estimation of the project constraints.</li></p>

<p><li> <b>Planning Phase</b>  The application's architecture is
defined. This application architecture is based on the Conceptual,
Logical, and Physical Design Models. In addition, the three variables
with which the team must work&#8212;schedule, resources, and
features&#8212;are more clearly defined during the Planning Phase. By
the end of this phase, the team has determined the schedule it will
meet, the resources it will use, and the features it will build.</li></p>

<p><li> <b>Developing Phase</b>  The most important task is to build the
application. Iterations, which have been used during the earlier
phases, become even more important during the Developing Phase. The
team can expect to do multiple iterations of the application during
this phase, typically named alpha, beta, and golden release candidate.
Additionally, all known bugs should be addressed by the end of this
phase. Addressing known bugs does not necessarily imply that all the
bugs have been fixed; merely that they have been investigated. The goal
of the Developing Phase is to deliver an application that meets all
stated expectations and is ready for external testing.</li></p>

<p><li> <b>Stabilizing Phase</b>  Significant performance and
environmental testing occurs. All known issues are resolved before
delivery, and any tasks needed for support and ongoing maintenance of
the product are completed. This phase seeks to tie up the loose ends.
Documentation, release notes, final &quot;bug stomping,&quot; product
hand-off, and product deployment are all part of this phase. The
Stabilizing Phase starts when the team shifts its focus from code
development to stabilizing the product and ends when the customer
accepts the product as complete. A significant aspect of this phase is
that the customer and users begin to pilot-test the product. This phase
is also the training ground for the organization's operations and
support teams. During this time, Logistics Management works to ensure a
smooth transfer of product support to the organization's internal
support groups, with the product release completing the transfer.</li></p>
</ul>


<p><li><b> List the deliverables for each phase
of the MSF Development Process model.</b></li></p>

<ul>
<p><li> <b>Envisioning Phase</b> The Vision Document, the Master Risk
Assessment Document, and the Project Structure Document. We also
recommend that a prototype system be included with the deliverables for
this milestone.</li></p>

<p><li> <b>Planning Phase</b> The Functional Specification, the Master
Project Plan, the Master Project Schedule, and an updated Master Risk
Assessment Document. For most projects, another deliverable of this
phase might be a proof-of-concept system that helps the team and
stakeholders understand the application's architecture.
Additionally, any significant design concerns can be tested with the
proof-of-concept system before the Project Plan Approved Milestone is
reached.</li></p>

<p><li> <b>Developing Phase</b> The revised and completed Functional
Specification, the updated Master Project Plan, Master Project
Schedule, and Master Risk Assessment Document, source code and
executables, initial performance support elements, and the Test
Specification and test cases.</li></p>

<p><li> <b>Stabilizing Phase</b> Golden release, release notes,
performance support elements, test results and testing tools, source
code and executables, project documents, milestone review.</li></p>
</ul>


<p><li><b> Discuss the benefits of versioned
releases.</b></li></p>


<ul>
<p><li> <b>Communication</b>  Promotes frequent and honest communication
between the team and the customer. Each release reflects the best ideas
of everyone involved.</li></p>

<p><li> <b>Earlier delivery</b>  Enables the project team to deliver
critical functionality earlier and to obtain feedback from the customer
for future releases. When the customer knows (or senses) that future
product releases will be delivered in a timely manner, the customer is
much more receptive to deferring features to later releases.</li></p>

<p><li> <b>Closure</b>  Forces closure on project issues. Using a
versioned release allows the team to deal with a manageable number of
issues during the Stabilizing Phase and to address all the issues
before release.</li></p>

<p><li> <b>Goals</b>  Sets clear, motivating goals for all team members.
The team can easily manage each version's scope and quickly achieve
results, so team members see rapid progress. Their role in determining
the schedule helps ensure that their tasks are manageable, specific,
and associated with a tangible result.</li></p>

<p><li> <b>Freedom and flexibility</b>  Allows freedom and flexibility in
the design process, enabling the team to be responsive to changes in
the business environment. This freedom and flexibility reduces
uncertainty and helps to manage the changes in project scope by
allowing the team to vary features and schedules in relation to the
overall plan. Features that become critical as a result of business
changes can be designated as high priority for the next release. The
early release becomes stable as the team starts work on the next
one.</li></p>

<p><li> <b>Continuous and incremental feature delivery</b>  Dictates a new
set of features immediately following the release of the completed set.
As a result, the team continues to add value for the project's
customer and users.</li></p>
</ul>




<p><li><b> Explain the concept of tradeoffs and
the tradeoff triangle of project variables.</b></li></p>


<p>Every project presents three variables with which the team must
work. These three variables&#8212;schedule, resources, and
features&#8212;are illustrated in the tradeoff triangle.</p>

<p>The relationship between these three variables tends to be hazy at
the beginning of the development process. At that point, the team has a
rough idea of what to build, an estimate of available resources, and an
approximate target delivery date. During the Planning Phase, the
project elements represented in the triangle become more distinct. By
the time the Planning Phase is complete, the team knows the nature of
available resources, the product features, and the fixed ship date.</p>

<p>It's important to keep in mind that the three variables are
interrelated. Changes on one side of the tradeoff triangle affect the
other two sides. If the team understands and utilizes this concept, it
has both the rationale and the motivation to take corrective action as
changes occur during development.</p>
</ol>

<A NAME="699"><H2>Chapter 5 -- Project Vision</H2></A>

<ol>
<p><li><b> What are the primary goals of the
Envisioning Phase?</b></li></p>


<ul>
<p><li> Serve as an early form of planning.</li></p>

<p><li> Establish clear communication and consensus from the beginning of
the project.</li></p>

<p><li> Help the team pull different perspectives into a common
understanding.</li></p>

<p><li> Provide the basis for future planning.</li></p>

<p><li> Identify what the customer and key stakeholders deem essential
for success.</li></p>
</ul>




<p><li><b> What team roles are responsible for
accomplishing envisioning goals?</b></li></p>


<ul>
<p><li> <b>Product Management</b>  The primary driver for the Envisioning
Phase. This role is responsible for delivering the Vision Document,
managing customer expectations, and involving the customer in prototype
development.</li></p>

<p><li> <b>Program Management</b>  Responsible for developing design
goals, describing the solution concept, and outlining the project
structure.</li></p>

<p><li> <b>Development</b>  Responsible for designing prototypes,
outlining development options, and identifying implications of the
vision.</li></p>

<p><li> <b>Testing</b>  Responsible for developing testing strategies,
specifying acceptance criteria, designing a bug-tracking system, and
designing a risk management system.</li></p>

<p><li> <b>User Education</b>  Responsible for identifying user
performance needs and implications, managing user expectations, and
involving users in prototype development.</li></p>

<p><li> <b>Logistics Management</b>  Responsible for identifying
deployment implications and support implications of the product
vision.</li></p>
</ul>

<p>All roles are responsible for managing project risks.</p>


<p><li><b> What are the primary components of a
Vision Document?</b></li></p>

<ul>
<p><li> A vision statement</li></p>

<p><li> User research</li></p>

<p><li> Competitive information</li></p>

<p><li> Features and feature buckets</li></p>

<p><li> A rough schedule</li></p>
</ul>


<p><li><b> What are the benefits of using
prototypes?</b></li></p>


<p>Clearly communicating the information learned from the customer and
users is difficult. Information about business requirements must be
communicated to team members with varying degrees of technical and
business background, and information about how the product will solve
the business problem must be communicated to the customer and users. To
more easily accomplish this communication, a prototype application that
demonstrates portions of the product's vision should be developed
during the envisioning process and included in the Vision Approved
Milestone deliverables. This prototype helps clarify existing ideas and
helps draw out additional ideas from the team, the customer, and the
product's users.</p>


<p><li><b> What are project risks?</b></li></p>

<p>Risk is the <i>possibility of suffering loss</i>. For a given
project, this loss could be in the form of:</p>

<ul>
<p><li> Diminished product quality</li></p>

<p><li> Increased costs</li></p>

<p><li> Missed deadlines</li></p>

<p><li> Complete failure to achieve the project's goals</li></p>
</ul>


<p><li><b> What is risk management?</b></li></p>


<p>The identification and proactive mitigation of the risks a project
might encounter, and the development of a system for managing those
risks should they materialize during the project's life cycle.</p>
</ol>

<A NAME="700"><H2>Chapter 6 -- Project Plan</H2></A>

<ol>
<p><li><b> Why do we need a Planning Phase?</b></li></p>


<p>The Envisioning Phase asks the question &quot;Can we use technology
to solve this business need, and if so, how?&quot; The result is a
common understanding 
of the problem and a common vision of the solution. The Planning Phase
asks the question &quot;Realistically, what will it take to reach the
vision developed in the Envisioning Phase?&quot; The result is a
detailed plan to which both the customer and the project team can
agree.</p>

<p>The Planning Phase is where the dreams of the Envisioning Phase are
tested against reality. It's here that the hard questions are
asked. The Planning Phase involves difficult, detailed work, and as a
result a project team may be tempted to avoid it or rush it. The truth
is that the work done in this phase will determine the success or
failure of the project. It is better to face the truth now, on paper,
than to face it later in a failed implementation. The common vision
established in the Envisioning Phase has to go through the refining
fire of the Planning Phase for the team to be sure that the vision is
strong enough to bear up during the Developing and Stabilizing
Phases.</p>


<p><li><b> Describe the three designs of the MSF
Design Process.</b></li></p>


<p>The MSF Design Process consists of three distinct types of design
work: conceptual, logical, and physical. Each of these generates a
model of the same name: the Conceptual Design Model, the Logical Design
Model, and the Physical Design Model. Each part of the process
approaches the design task from a different perspective and defines the
solution differently.</p>

<ul>
<p><li> <b>Conceptual Design Model</b>  Views the problem from the
perspective of the user and the business, and defines the problem in
terms of scenarios.</li></p>

<p><li> <b>Logical Design Model</b>  Views the solution from the
perspective of the project team, and defines the solution as a set of
cooperating services.</li></p>

<p><li> <b>Physical Design Model</b>  Views the solution from the
perspective of the developers, and defines the solution's services
and technologies.</li></p>
</ul>



<p>The goals of the three parts are:</p>

<ul>
<p><li> <b>Conceptual Design</b>  Identify business needs and understand
what users do and what they require. Conceptual Design generates
scenarios that reflect complete and accurate requirements, by involving
the customer, users, and other stakeholders.</li></p>

<p><li> <b>Logical Design</b>  Organize the solution and the communication
among its elements. Logical Design takes the business problem
identified in Conceptual Design scenarios and formulates an abstract
model of the solution. In other words, Logical Design takes the
scenarios from Conceptual Design and produces objects and services,
user interface prototypes, and logical database design.</li></p>

<p><li> <b>Physical Design</b>  Apply real-world technology constraints,
including implementation and performance considerations, to the outputs
of Logical Design by specifying the details of the solution. The
outputs of Logical Design are used to produce components, user
interface specifications, and physical database design.</li></p>
</ul>



<p><li><b> What information is presented in a
Functional Specification?</b></li></p>


<ul>
<p><li> <b>Vision summary</b>  What the team wants the product to be,
justification for the product, and key high-level constraints. Based on
the Vision Document from the Envisioning Phase.</li></p>

<p><li> <b>Design goals</b>  What the team wants to achieve with the
product. Development will use these goals to make decisions on such
issues as performance, reliability, timeliness, and possibly usability
and accessibility. These goals were originally developed during the
Envisioning Phase.</li></p>

<p><li> <b>Requirements</b>  What the customer, users, and stakeholders
think the product must do. The requirements should be prioritized.
Conflicting requirements should either be resolved or balanced in some
way.</li></p>

<p><li> <b>Usage summary</b>  When the product will be used and who will
use it. This is a high-level aggregation of the usage scenarios that
were defined during the design process.</li></p>

<p><li> <b>Features</b>  What exactly the product does. A prioritized list of product features, including such things as potential user interface,
application navigation, and detailed functionality.</li></p>

<p><li> <b>Dependencies</b>  What the product depends on. A description of
external entities upon which the product might depend, including both
high-level issues (such as interfacing to corporate systems) and
low-level issues (such as a shared component).</li></p>

<p><li> <b>Schedule summary</b>  What the schedule is. A summary of the
Master Project Schedule, identifying key interim milestones,
deliverables, and the product ship date.</li></p>

<p><li> <b>Risks</b>  What the risks are. A list of risks that require
external visibility or escalation.</li></p>

<p><li> <b>Appendixes</b>  What remains. A collection of the design
process output that the team used to develop the Functional
Specification.</li></p>
</ul>


<p><li><b> What is a Master Project Plan?</b></li></p>


<p>The Master Project Plan gathers detailed plans from members of the
project team to tell how the product will be built. The team then uses
this collection of more-detailed deliverables to synchronize its work
throughout the remainder of the project.</p>

<p>The purpose of a Master Project Plan is to:</p>

<ul>
<p><li> Consolidate feature team and role work plans.</li></p>

<p><li> Describe how feature teams and roles will execute their
tasks.</li></p>

<p><li> Synchronize the plans across the team.</li></p>
</ul>



<p>The overall owner of the Master Project Plan is Program Management,
because this role is the primary coordinator of planning and process
for the project. However, each role on the team is responsible for
developing and maintaining its own realistic project plan within the
overall plan.</p>
</ol>

<A NAME="701"><H2>Chapter 7 -- User Service Layer Technologies</H2></A>

<ol>
<p><li><b> What is UI composition?</b></li></p>


<p>The layout of each UI element. It not only influences its aesthetic
appeal, but also has a tremendous impact on the usability of the
application. Composition includes such factors as:</p>

<ul>
<p><li> Positioning of controls</li></p>

<p><li> Consistency of elements</li></p>

<p><li> Affordances</li></p>

<p><li> Use of white space</li></p>

<p><li> Simplicity of design</li></p>
</ul>


<p><li><b> What is usability?</b></li></p>


<p>How easily or effortlessly a particular application can be utilized
by its intended users. Usability includes such issues as menu design,
discoverability of features, navigation, and user assistance.</p>


<p><li><b> List some common issues encountered
when designing the user service layer.</b></li></p>


<ul>
<p><li> Do any application requirements specify the type of UI?</li></p>

<p><li> Do security issues, such as firewalls, impact communication
between user workstations and server-side computers?</li></p>

<p><li> What operating systems must be supported on user
workstations?</li></p>

<p><li> What Web browsers must be supported?</li></p>

<p><li> Can COM components install and run on user workstations?</li></p>

<p><li> Are remote COM components accessible from user workstations?</li></p>
</ul>


<p><li><b> How can COM objects be used in the
user service layer?</b></li></p>


<p>If the UI is a native application, installing and running COM
components on user workstations probably isn't an issue. A Win32
application needs to be installed, but the COM components are simply
treated as part of the application's installation routine. Things
are somewhat more complicated for Web-based applications. Providing
that a particular browser supports client-side COM components, the
components usually download and automatically install on users'
computers the first time the component is accessed.</p>

<p>ActiveX controls are COM objects that are sent from a Web server to
execute on users' desktops with their browser. Some users, or the
organizations for which they work, might worry about the security of
automatically downloading and installing executable code on client
computers. Some users might not allow any components to be downloaded
to their computers. If Web-based applications must support such users
or organizations, it is best not to use any client-side COM components
(including ActiveX controls) unless the components are installed
locally on the users' computers. Some users want to decide on a
case-by-case basis whether to download and install particular
components on their computers. In this case, developers might choose to
use client-side COM components.</p>


<p><li><b> How does ASP fit in the user,
business, and data access layers?</b></li></p>


<p>In an Internet application, a Web browser displays an
HTML-page-based user service layer. Requests from this layer transmit
via HTTP to a Web server. In response to these requests from the client
Web browser, ASP pages activate on the Web server. The ASP pages can
dynamically generate HTML pages to be returned to the requesting
browser. These ASP pages can be used to generate user interface code to
format and control the look and feel of the Web pages, thus ASP would
be considered part of the user service layer. Also, the ASP pages can
contain server-side script that implements business logic, thus ASP
pages could be part of the business service layer. However, the ASP
pages should contain server-side script that uses middle-tier business
objects to do much of the work. The business objects might in turn call
data access objects to access data sources in the data access service
layer. Alternatively, the HTML and client-side script used to generate
the user service layer might be located within the ASP pages. Either
way, ASP straddles the line between the user service layer and the
business service layer.</p>
</ol>

<A NAME="702"><H2>Chapter 8 -- Business Service Layer Technologies</H2></A>

<ol>
<p><li><b> What is the COM specification?</b></li></p>

<p>The specification document explaining COM and how it is implemented.
Even though other technologies have been added to COM over the years
(notably OLE and ActiveX), the fundamental component object model
specification, introduced in 1992, remains the basis for COM. The COM
specification is available on the Microsoft Web site
(<a href="http://www.microsoft.com/com/resources/specs.ASP" target="_window2">www.microsoft.com/com/resources/specs.ASP</a>), and only those items
defined in the specification are part of COM proper.</p>


<p><li><b> How can COM work across
computers?</b></li></p>


<p>By utilizing the services provided by DCOM (Distributed COM).
Technically, <i>DCOM</i> refers specifically to the wire protocol for
making COM calls between two computers. However, the term <i>DCOM</i>
is often used to refer to the entire concept of COM communication
across computers.</p>


<p><li><b> How does MTS handle security?</b></li></p>


<p>MTS server packages are units of trust for MTS. Calls into a package
can be secured. Calls within the package are trusted. Thus, application
security requirements have a big impact on package design. If calls
into a component must be authorized, clients and components must be
allocated into different packages. Only components that can safely call
each other without requiring an authorization check should be allocated
into one package.</p>


<p><li><b> What is COM+?</b></li></p>


<p>Basically speaking, COM+ is the evolution of COM, which has been
around for a long time, and also of MTS, which shipped with Windows NT
4 in the Option Pack. Microsoft combines COM and MTS into a single
programming model, COM+, which ships with Windows 2000.</p>


<p><li><b> What are the primary services in COM+
1.0?</b></li></p>


<ul>
<p><li> Servers</li></p>

<p><li> Transactions</li></p>

<p><li> Security</li></p>

<p><li> Administration</li></p>

<p><li> Load balancing</li></p>

<p><li> Queued components</li></p>

<p><li> Events</li></p>

<p><li> In-memory database</li></p>
</ul>

</ol>

<A NAME="703"><H2>Chapter 9 -- Data Service Layer Technologies</H2></A>

<ol>
<p><li><b> What is the UDA?</b></li></p>


<p>The Microsoft Universal Data Architecture (UDA) is designed to
provide high-performance access to any type of data&#8212;structured or
unstructured, relational or non-relational&#8212;stored anywhere in an
enterprise. UDA defines a set of COM interfaces that actualize the
concept of accessing data. UDA is based on OLE DB, a set of COM
interfaces for building database components. OLE DB allows data stores
to expose their native functionality without making nonrelational data
appear relational. OLE DB also provides a way for generic service
components, such as specialized query processors, to augment features
of simpler data providers. Because OLE DB is optimized for efficient
data access rather than ease of use, UDA also defines an
application-level programming interface, or Microsoft ActiveX Data
Objects (ADO). ADO exposes dual interfaces to easily be used with
scripting languages as well as with C++, Microsoft Visual Basic, and
other development tools.</p>

<p>UDA is a platform, application, and tools initiative that defines
and delivers both standards and technologies tailored to providing
enterprise data access. It is a key element in the Microsoft foundation
for application development. In addition, UDA provides high-performance
access to a variety of information resources, including relational and
non-relational data, and an easy-to-use programming interface that is
tool-independent and language-independent.</p>


<p><li><b> Which data access components are
available from Microsoft?</b></li></p>


<p>Microsoft Data Access Components (MDAC) provides a UDA
implementation that includes ADO as well as an OLE DB provider for
ODBC. This capability enables ADO to access any database that has an
ODBC driver&#8212;in effect, all major database platforms. OLE DB
providers are also available for other types of stores, such as the
Microsoft Exchange mail store, Windows NT Directory Services, and
Microsoft Windows file system using Microsoft Index Server.</p>


<p><li><b> What is the recommended Data Access
Component?</b></li></p>


<p>ADO is Microsoft's premier data access technology. The ADO data
access technology and its partner OLE DB comprise the recommended
solution for all data access. A development team working on a new
application should definitely use ADO.</p>


<p><li><b> How can applications access host-based
data with COM?</b></li></p>


<p>By using the Microsoft OLE DB Provider for AS/400 and VSAM. </p>


<p><li><b> What is COM+ IMDB?</b></li></p>

<p>A new feature in COM+, the In-Memory Database, a database that
maintains its tables in memory.</p>
</ol>

<A NAME="704"><H2>Chapter 10 -- Testing and the Production Channel</H2></A>

<ol>
<p><li><b> What are the stages of the production
channel?</b></li></p>


<ul>
<p><li> Development</li></p>

<p><li> Testing</li></p>

<p><li> Certification</li></p>

<p><li> Production</li></p>
</ul>


<p><li><b> What are some advantages of the
production channel?</b></li></p>


<ul>
<p><li> Any problems will be discovered in the testing or certification
stage, rather than in the production stage.</li></p>

<p><li> Formal testing is always done.</li></p>

<p><li> An organized process is used to introduce change.</li></p>
</ul>

<p><li><b> What are key areas to consider when
defining performance requirements?</b></li></p>


<ul>
<p><li> Project constraints must be identified.</li></p>

<p><li> Services to be performed by the application must be
determined.</li></p>

<p><li> The load on the application must be specified.</li></p>
</ul>


<p><li><b> What is a performance baseline?</b></li></p>


<p>The results of the initial performance tests.</p>


<p><li><b> What are the two categories of
testing?</b></li></p>


<p>During the Developing Phase, <i>coverage testing</i> attempts to
thoroughly test each feature of the product as well as the actual code
base of the product in a relatively closed environment. During the
Stabilizing Phase, testing shifts from coverage testing to <i>usage
testing</i>, which validates the application's fulfillment of the
use cases and usage scenarios developed during the Envisioning Phase.
This stage of testing usually includes involving actual users of the
product in beta tests, and preferably occurs in the application's
production environment. Tolerance for bugs decreases as testing
progresses through the Stabilizing Phase, and because the focus is on
shipping during this phase, being able to successfully manage bugs is
paramount.</p>


<p><li><b> What are the stages of bug
management?</b></li></p>


<ul>
<p><li> Reporting</li></p>

<p><li> Prioritization</li></p>

<p><li> Assignment</li></p>

<p><li> Resolution</li></p>

<p><li> Closure</li></p>
</ul>
</ol>

<A NAME="705"><H2>Chapter 11 -- Application Security</H2></A>

<ol>
<p><li><b> What is authentication?</b></li></p>


<p>Identifying and validating users, and potentially revalidating users
as an ongoing process.</p>


<p><li><b> What are several methods for Web-based
authentication?</b></li></p>


<ul>
<p><li> Windows NT Challenge/Response</li></p>

<p><li> Cookies</li></p>

<p><li> Digital certificates</li></p>
</ul>

<p><li><b> What is encryption?</b></li></p>


<p>A means of protecting sensitive information transmitted over a
network from all forms of interception and tampering by converting the
data to random nonsense data, usually involving agreed-upon algorithms
for transmission and reception.</p>

<p><li><b> What is access security?</b></li></p>


<p>In simple terms, access security is about who can use the
application and how they can use it. With a secure application, both
the user and the application are confident they are exchanging
information within authentic circumstances. Applications must ensure
the privacy of sensitive user information, and also protect the
architectural components and services that run the application from
unauthorized tampering or eavesdropping by the user. For an application
to be secure, each application service must be available only to
qualified users. At the same time, every component, service, and
supporting file must be protected from unauthorized viewing, tampering,
or modification.</p>


<p><li><b> Why should applications provide
auditing services?</b></li></p>


<p>Auditing provides a tracking mechanism to identify security
breaches. In addition to security auditing, simple auditing can operate
as application monitoring to help determine what an application is
doing and who did what with the application.</p>


<p><li><b> Which Windows NT services provide
mechanisms for auditing?</b></li></p>


<ul>
<p><li> <b>Windows NT system auditing</b>  System auditing includes user
logon and logoff, object access, file and object access, use of user
rights, user and group management, security policy changes, system
restart and shutdown, and Process Tracking.</li></p>

<p><li> <b>File and directory auditing</b>  This type of auditing can be
set to determine the success and/or failure of read, write, execute,
delete, change-permission, and take-ownership actions.</li></p>

<p><li> <b>Registry auditing</b>  Auditing within the registry can be set
to determine the success and/or failure of query values, set values,
create subkeys, enumerate subkeys, notify, create links, delete, write
DAC, and read control.</li></p>
</ul>
</ol>


<A NAME="706"><H2>Chapter 12 -- Development Deliverables</H2></A>

<ol>
<p><li><b> What are the seven deliverables of the
Developing Phase?</b></li></p>


<ul>
<p><li> Revised Functional Specification</li></p>

<p><li> Revised Master Project Plan</li></p>

<p><li> Revised Master Project Schedule</li></p>

<p><li> Revised Master Risk Assessment Document</li></p>

<p><li> Source code and executables</li></p>

<p><li> User performance materials</li></p>

<p><li> Testing elements</li></p>
</ul>


<p><li><b> What are interim product
releases?</b></li></p>


<p>Releases of the product prior to the Scope Complete Milestone,
typically called Internal, Alpha, and Beta.</p>


<p><li><b> What are the benefits of interim
product releases?</b></li></p>


<ul>
<p><li> Break the Developing Phase into manageable portions.</li></p>

<p><li> Encourage a product-shipping mindset.</li></p>

<p><li> Provide a way for the team to measure progress as a whole.</li></p>

<p><li> Force the product team to synchronize the code at a product
level.</li></p>

<p><li> Force the team to achieve user interface and database freeze
points, thus resulting in fewer changes to the dependant documentation
and code.</li></p>

<p><li> Address high-risk architectural areas to determine feasibility or
identify development changes required, thus minimizing the cost and
effect of design changes.</li></p>

<p><li> Help the team focus on more actionable subsets that can direct
daily progress.</li></p>

<p><li> Increase quality by providing a more stable base for new development.</li></p>

<p><li> Allow the team to fix bugs closer to the time at which they occur
rather than toward the end of the project.</li></p>
</ul>


<p><li><b> What are three ways a bug can be
resolved?</b></li></p>

<p>Any three of the following:</p>

<ul>
<p><li> <b>Fixed</b>  The developer has fixed the bug, tested the fix,
checked in the code, assigned the fix to a release number, and assigned
the bug back to the tester who reported it.</li></p>

<p><li> <b>Duplicate</b>  The bug reported is a duplicate of another bug
already recorded in the bug database. The duplicate bug should be
closed and linked to the original bug.</li></p>

<p><li> <b>Postponed</b>  The bug will not be fixed in the current
release, but might be fixed in a subsequent one. This designation
should be used when the team sees value in fixing the bug, but does not
have the time or resources to correct it during the current release
being tested.</li></p>

<p><li> <b>By design</b>  The behavior reported in a particular bug is
intentional and acknowledged in the Functional Specification.</li></p>

<p><li> <b>Can't reproduce</b>  The developer can't verify the
existence of the bug with any level of consistency.</li></p>

<p><li> <b>Won't fix</b>  The bug will not be fixed in the current
release, because the team does not think fixing the bug is worth any
effort.</li></p>
</ul>


<p><li><b> When is a team ready to move to the
Stabilizing Phase?</b></li></p>


<ul>
<p><li> All product features are implemented, even if not fully
optimized.</li></p>

<p><li> The product has passed basic testing and the current list of bugs
has been addressed, although not necessarily fixed.</li></p>

<p><li> Team members and key stakeholders agree that the included
features meet the product vision and design, and have been successfully
implemented.</li></p>

<p><li> User performance materials are baselined and ready for testing
and stabilization.</li></p>
</ul>
</ol>

<A NAME="707"><H2>Chapter 13 -- Product Stabilization</H2></A>

<ol>
<p><li><b> What is the primary goal of the
Stabilizing Phase?</b></li></p>


<p>To prepare the product for release to the customer.</p>


<p><li><b> How does the team incrementally reach
the Release Milestone?</b></li></p>


<p>During the Stabilizing Phase, the team may ship multiple external
product releases while driving toward the final product release. During
these interim releases, the team will primarily focus on testing to
identify bugs, and fixing the bugs that are identified. A significant
interim milestone that signifies the team is getting close to releasing
a product is generally referred to as the zero-bug release (ZBR). ZBR
is the first interim product release in which all active bugs have been
resolved in some manner, whether fixed, postponed, or deemed
unimportant. Once an interim release is shipped, extensive testing must
occur to determine whether the product is ready, at which point the
team can declare victory and classify the release as the Final
Product 
Release.</p>


<p><li><b> What are the primary steps of the
Stabilizing Phase?</b></li></p>


<p>Unlike the other phases of the development process, this phase is
not characterized by action steps; rather, it is characterized by
interim releases. The same steps are repeated within each interim
release:</p>

<ul>
<p><li> Fix the bugs</li></p>

<p><li> Synchronize all product deliverables</li></p>

<p><li> Ship the release</li></p>

<p><li> Extensively test the release</li></p>
</ul>


<p>Eventually, the team will determine that a release is ready for
prime time, and that will be the Final Product Release.</p>


<p><li><b> What are the primary interim releases
of the Stabilizing Phase?</b></li></p>


<ul>
<p><li> One or more interim releases with a decreasing number of
bugs</li></p>

<p><li> Zero-bug release (ZBR)</li></p>

<p><li> One or more release candidates</li></p>

<p><li> Final Product Release</li></p>
</ul>


<p><li><b> What are the deliverables of the
Stabilizing Phase?</b></li></p>


<ul>
<p><li> <b>Final product release</b>  Source code and executables.</li></p>

<p><li> <b>Product release notes</b>  Documents containing release
information and late changes.</li></p>

<p><li> <b>User and support performance artifacts</b>  The final release
of supporting information.</li></p>

<p><li> <b>Testing results</b>  The bug status and database for future
projects.</li></p>

<p><li> <b>Project archives</b>  All relevant product information created
during the development process, whether or not it shipped with the
product.</li></p>

<p><li> <b>Project documents</b>  All stages of the product documentation
including the major milestone releases.</li></p>
</ul>


<p><li><b> What are some of the deployment
methods that can be used within an organization?</b></li></p>


<ul>
<p><li> Microsoft Systems Management Server (SMS)</li></p>

<p><li> Logon scripts</li></p>

<p><li> E-mail distributions</li></p>

<p><li> Web-based advertisements</li></p>
</ul>
</ol>


<A NAME="708"><H2>Chapter 14 -- Project Review</H2></A>

<ol>
<p><li><b> List the benefits of a project
review.</b></li></p>


<ul>
<p><li> <b>Provide project closure</b>  Closure is important if team
members have spent time and energy on the completed project, and will
begin another project immediately. Project closure is particularly
important if the project team will soon dissolve. Official project
closure will also help the team members move on to something new.</li></p>

<p><li> <b>Provide a final outlet for team communication</b>  A project
review can be cathartic for team members who have strong feelings about
particular aspects of a project. If not expressed in a controlled
manner and setting, team members may express such feelings later in
less desirable circumstances, places, or means.</li></p>

<p><li> <b>Address the team's morale</b>  Project reviews may actually
enhance team morale by allowing teammates to share positive as well as
negative feelings, and also to offer praise throughout the team.</li></p>

<p><li> <b>Set best-practice baselines</b>  Future teams may also benefit
from project reviews by accessing the current team's perception of
the project's strengths and weaknesses. Such perceptions can
provide the basis for creating best-practice baselines for software development within an
organization.</li></p>

<p><li> <b>Establish feedback loops</b>  Ultimately, all the project
review output can be combined into a best practice baseline and should
be used as <i>input</i> for subsequent projects. Organizations should
be able to apply project review insights for the purpose of improving
future projects.</li></p>
</ul>



<p><li><b> Discuss the relationship between
project reviews and the CMM for Software.</b></li></p>


<p>Project reviews are important tools in evolving an organization to a
more efficient CMM maturity level. One characteristic of a CMM Level 1
organization is reinventing processes for each project. By conducting
project reviews and implementing the reviews' results as standard
practices, an organization can avoid this inefficient, but common,
problem.</p>

<p>Two key challenges for CMM Level 2 organizations are accurate
project planning and effective project tracking. Using project reviews
to compare plans with actual events and timelines enables an
organization to hone its estimating and tracking skills. Over time, an
organization at this level can create an increasingly realistic sense
of time and resources that project tasks require.</p>

<p>Project reviews are critical to reaching CMM Level 3. Although most
Level 2 organizational discipline is seen at a project level, members
of an individual project can usually find good practices that could be
useful in another project. Leveraging those best practices across the
organization and defining processes that can be tailored to each
project is the heart of Level 3. Project teams generally accumulate a
rich process history as they complete their project. They should keep
this data in a repository for use by other project teams on future
projects. The organization will develop an appreciation for common
processes and advisors who can help tailor those processes.</p>

<p>At CMM Levels 4 and 5, the fundamental purpose of the project review
is to facilitate the feedback loop. As the team identifies problems, it
can change its processes to eliminate or mitigate such problems in
future projects.</p>


<p><li><b> List some practical considerations
involved in project reviews.</b></li></p>


<ul>
<p><li> Timing</li></p>

<p><li> Formality</li></p>

<p><li> Length</li></p>

<p><li> Setting</li></p>

<p><li> Attendees</li></p>
</ul>


<p><li><b> Explain methods to conduct project
reviews for large projects.</b></li></p>


<p>Program Management may choose to organize a project review team when
planning a review for larger projects. The team approach works
especially well when several project teams are involved in a large
project.</p>

<p>Program Management may use a variety of tactics in organizing a
project review team. For instance, functional discipline groups can be
created: one for development, one for testing, one for user education,
and one for program management. Another example of a project review
team is a multifunctional group comprised of members from each
functional discipline, based on the particular development process
phases.</p>
</ol>

</body>
</html>




