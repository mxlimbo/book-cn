<HTML>
<HEAD>
<TITLE>Adapting Team Size to Project Size</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03d.htm", "ch03f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="143"><H1>Adapting Team Size to Project Size</H1></A>

<p>For project teams, at least one person is usually assigned to each
role to ensure that someone looks after that role's interests. The
greatest challenge with large-scale projects is setting up and
maintaining effective communication. For smaller projects or in smaller
organizations, the same person may be assigned to multiple roles. In
that case, the greatest challenge is to successfully wear multiple hats
and to ensure that all the issues are looked at with each hat.</p>

<A NAME="144"><H2>Large-Project Scaling</H2></A>

<p>In his book <i>Rapid Development</i> (Microsoft Press, 1996), former
Microsoft software developer Steve McConnell states:</p>

<blockquote><i>Large projects call for organizational practices that
formalize and streamline communication. &#8230; All the ways to
streamline communication rely on creating some kind of hierarchy; that
is, creating small groups, which function as teams, and then appointing
representatives from those groups to interact with each other and with
management.</i></blockquote>

<p>To scale large projects, the project team can be divided into two
kinds of subteams: feature teams and function teams.</p>

<A NAME="145"><H3>Feature Teams</H3></A>

<p>Feature teams are small subteams that organize one or more members
from each role into a matrix organization. These teams are then
assigned a particular feature set and are responsible for all aspects
of that feature set, including its design and schedule. For example, a
feature team might be dedicated to printing.</p>

<p>Steve McConnell writes in <i>Rapid Development</i>:</p>

<blockquote><i>Feature teams have the advantages of empowerment,
accountability, and balance. The team can sensibly be empowered because
it contains representatives &#8230; from each of the concerned parties.
The team will consider all necessary viewpoints in its decisions and
thus there will hardly ever be a basis for overriding its decisions. </i>

<p><i>For the same reason, the team becomes accountable. They have access
to all the people they need to make good decisions. If they don't
make good decisions, they have no one to blame but themselves. The team
is balanced. You wouldn't want development, marketing, or quality
assurance alone to have ultimate say over a product's
specification, but you can get balanced decisions from a group that
includes representatives from each of those categories.</i></p>
</blockquote>

<A NAME="146"><H3>Function Teams</H3></A>

<p>Function teams exist within a role. They arise when a team or
project is so large that it requires the people within a role to be
grouped into teams based upon their functionality. For example, it is
common at Microsoft for a Product Management team to have a Product
Planning team and a Product Marketing team. Both jobs form an aspect of
Product Management, but one focuses on getting the features the
customer really wants and the other focuses on communicating the
benefits of the product to potential customers.</p>

<p>As another example, the Development role might need to be grouped by
service layer: user, business, or data. It is also common for
developers to be grouped based on whether they are solution builders or
component builders. Solution builders build enterprise applications by
&quot;gluing&quot; together the separate parts of the product produced
by the component builders. Solution builders usually work with
higher-level languages such as Microsoft Visual Basic, whereas
component builders usually work with low-level C code to create
reusable components that can be leveraged by the enterprise for
multiple projects.</p>

<A NAME="147"><H2>Small-Project Scaling</H2></A>

<p>Although the MSF Development Team Model consists of six roles, a
team doesn't need a minimum of six people. In other words, it
doesn't require one person per role. The key point is that the six
goals have to be represented by the six roles on every team. Having at
least one person per role helps to ensure that someone looks after the
interests of each role, but not all projects can be approached in that
fashion.</p>

<p>On smaller teams, one team member might have more than one role. Two
principles guide this type of role sharing:</p>

<ul>
<p><li> <b>Single role for Development</b> Development team members should
never be assigned to another role. The developers are the builders, and
they should not be distracted from their main task. To give additional
roles to the Development team only makes it more likely that schedules
will slip due to these other responsibilities.</li></p>

<p><li> <b>Conflict of interest</b> Roles that have intrinsic conflicts of
interest should not be combined. For example, Product Management and
Program Management have conflicting interests. Product Management wants
to satisfy the customer whereas Program Management wants to deliver on
time and on budget. If these roles are combined and the customer
requests a change, the risk is that either the change will not get the
consideration it deserves to maintain customer satisfaction, or that it
will be accepted without understanding the impact on the project.
Having different team members represent these roles helps to ensure
that each perspective receives equal weight.</li></p>
</ul>



<p>Figure 3.2 illustrates risky and synergistic combinations of roles.
The role combinations marked N should not be combined because of
conflicting interests. The role combinations marked U are unlikely
combinations, as the skills required for each role differ. For example,
the skills and focus of Product Management vary greatly from those of
Logistics Management. The role combinations marked P are possible
combinations, because they represent compatible interests. For example,
Testing and User Education both focus on users and try to ensure that
the users' needs are met.</p>

<P><A HREF="javascript:fullSize('f03ar02x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f03ar02.jpg" WIDTH=404 HEIGHT=294 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 3.2</b> <i> Risky and synergistic role combinations</i><!-- /caption --></P>

<p>As with any teaming exercise, successful role sharing comes down to
the actual team members themselves and what experience and skills they
bring to the project. Some projects successfully share roles even
though the table indicates a risk. The point is that if a team needs to
share roles, the goals of the roles must be kept in mind so that the
amount of conflict that could arise because of the role sharing is
controlled. Otherwise, some aspect of the key goals might be
overlooked, or risks might be in some way mismanaged.</p>

</BODY>
</HTML>


