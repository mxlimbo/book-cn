<HTML>
<HEAD>
<TITLE>Choosing a Data Access Strategy</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09e.htm", "ch09g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="487"><H1>Choosing a Data Access Strategy</H1></A>

<p>A project team needs to consider the following questions before
choosing a data access technology:</p>

<ul>
<p><li> <b>Is the development team creating a new design, or modifying an
existing application that uses obsolete data access technology?</b> For
a modification, it's tempting to continue with the
application's former data access methods, which in the short term
seems like a reasonable and cost-effective decision. However, the
downside involves programming difficulty as the application stretches
toward new and different data sources. For a new design, developers
should use ADO.</li></p>

<p><li> <b>Where is the data? Is it on the Web, on a remote
server, or simply stored locally on user systems?</b> If the data is
simply stored on users' local systems, the need to build a separate
server to manage the data might be overkill. If the data is remote,
what about connection management? What happens when the application can
not connect? Should the application be using an asynchronous data
access technology such as ADO or RDO?</li></p>

<p><li> <b>What are the developers trained to use? Do they already have
experience with ADO, RDO, DAO, or ODBC? Is it worth the modest one-time
cost and effort to train the entire staff to use ADO?</b> If the team
begins using ADO, can developers reasonably anticipate a maintenance
cost reduction in the near future?</li></p>

<p><li> <b>Does an application require data access to both relational and
nonrelational data sources? Do developers have an OLE DB provider for
each?</b> If so, use ADO.</li></p>

<p><li> <b>Are developers planning to use MTS?</b> If this is the case,
developers need to choose one of the data access technologies that can
be executed on the server and act as a &quot;resource manager&quot; (an
MTS term for a component that implements its set of resource manager
interfaces). For example, ADO, RDO, and ODBC can act as MTS resource
managers. The DAO interface is not capable of being a resource manger.
The team should also consider if the component must be thread safe,
such as with ADO and RDO, since this is a requirement for most
MTS-managed components if developers expect reasonable resource use and
performance.</li></p>

<p><li> <b>Does every application already use the ODBC API?</b>  If
developers continue with ODBC, how will their applications access other
kinds of data sources in the future?</li></p>
</ul>



<p>Developers can use differing data access technologies to implement
useful data access and application communication strategies; such
strategies are listed in Table 9.7.</p>

<p><b>Table 9.7</b> <i>Key characteristics for data access technologies</i></p>

<p><table cellpadding=5 width="95%"><tr>
<th>Best choice is&#8230;</th><th>If the application requires&#8230;</th><th>Remarks</th>
</tr><tr>
<td valign="top"><b>ADO</b> </td> <td valign="top">Mainframe data or programcommunications</td>  <td valign="top">With Microsoft SNA Server,
developers can set up OLE DB data providers for
mainframe data sources such as VSAM, CICS, IMS, and AS/400 files.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">Reengineering</td> <td valign="top">For existing applications, developers should consider
reengineering with ADO. As an alternative, developers could continue
with previous data access methods.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">New development</td> <td valign="top">For all new development, use Microsoft's ADO data access technology.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">Uniform access to a variety data sources and data types</td> <td valign="top">ADO is a common interface for all data access of requirements.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">Fast development</td> <td valign="top">ADO helps minimize development cost because it is
uniform, consistent, and easy to use. The team can be trained once
and benefit continuously thereafter.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">High performance</td> <td valign="top">ADO provides rapid performance.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">Web: Internet Information Service's (IIS) Active Server Pages (ASP)</td> <td valign="top">If the application uses IIS with ASP to
generate browser-independent HTML from databases, use ADO. </td>
</tr><tr>
<td valign="top"><b>OLE DB</b></td>  <td valign="top">Custom File Access </td><td valign="top">The team can write custom OLE DB
data providers for virtually any data source. Once written, ADO can
then be used as the data access technology.</td>
</tr><tr>
<td valign="top"><b>RDO</b></td>  <td valign="top">Fast access to existing ODBC data</td><td valign="top">RDO is very fast. </td>
</tr><tr>
<td valign="top"><b>ODBCDirect</b></td>  <td valign="top">Access to ODBC data</td> <td valign="top">ODBCDirect provides a
performance improvement over the older DAO data access technology.</td>
</tr><tr>
<td valign="top"><b>DAO</b></td> <td valign="top"> Enhancements to existing data access</td> <td valign="top"> DAO provides a consistent
programming model for DAOsituations where some of the data
access services must be provided using Microsoft Jet. If developers
already have large amounts of DAO code and are willing to over- look
the design, coding, and performance benefits provided by ADO,
there's no reason to change it.</td>
</tr><tr>
<td valign="top"></td>
<td valign="top">Running within a 16-bit environment</td> <td valign="top"> DAO is the only choice.</td> 
</tr><tr>
<td valign="top"><b>ODBC API</b></td>  <td valign="top">Fast access to existing ODBC data</td> <td valign="top">If the team is willing to
develop and maintain complex code using the ODBC API, this is
a good choice.</td>
</tr></table></p>

</BODY>
</HTML>


