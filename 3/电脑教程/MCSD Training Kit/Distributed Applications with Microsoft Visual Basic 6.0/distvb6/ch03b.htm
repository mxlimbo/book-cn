<HTML>
<HEAD>
<TITLE>Lesson 1: Creating Class Modules</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03a.htm", "ch03c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="121"><H1>Lesson 1: Creating Class Modules</H1></A>

<P>Objects are essential when programming in Visual Basic. Just about everything you work with in Visual Basic is an object. For example, forms, controls, printers, and databases are objects. You create objects from classes, and an object is an instance of a class. You can think of a class as a blueprint from which you create objects. You create classes by adding class modules (.cls files) to your project. Class modules allow you to create custom objects that you can use in your applications.</P>

<P>To create a COM component in Visual Basic, you first define a class module within an ActiveX DLL or ActiveX EXE project. Other projects can then use the component as part of a larger application.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>

<ul>

<p><li> Create custom classes in your applications.</li></p>

<p><li> Add properties, methods, events, and enumerations to your classes.</li></p>

<p><li> Use the Class Builder to create class modules using a visual interface.</li></p>

</ul>

<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>


<A NAME="122"><H2>Creating Properties, Methods, and Events</H2></A>

<P>A class module is a type of Visual Basic code module. A class module (.cls file) is similar to a standard code module (.bas file) in that it contains functionality that other modules within the application can use. The difference is that a class module provides functionality in the form of an object. Each class module defines one type of object.</P>

<P>Visual Basic objects can have properties, methods, and events. Properties are data that describe an object. Methods are actions that you tell the object to perform. Events are actions the object performs; you can write code that is executed when events occur. You can think of an object as a thing, properties as attributes of the thing, methods as actions you can tell the thing to do, and events as notifications that the thing can express. For example, a file could be an object with a filename property, a save method, and a status event.</P>


<A NAME="123"><H3>Adding Property Procedures</H3></A>

<P>To implement properties in objects created from your custom classes, you create property procedures. Visual Basic provides three kinds of property procedures, as follows:</P>

<ul>

<p><li> Property Get</li></p>

<p>A Property Get procedure returns the value of a property. For example:</p>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Public Property Get FileName() As String
    FileName = &quot;C:\MyFile.txt&quot;
End Property
</PRE>
</TD></TR></TABLE>
</P>

<p><li> Property Let</li></p>

<p>A Property Let procedure sets the value of a property. For example:</p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
' General Declarations section
Private m_Filename As String

Public Property Let FileName(File As String)
    m_Filename = File
End Property
</PRE>
</TD></TR></TABLE>
</P>

<p><li> Property Set</li></p>

<p>A Property Set procedure sets the value of a property that contains a reference to an object. For example:</p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
' General Declarations section
Private m_BitMap As Object

Public Property Let ClipArt(EmbeddedBitmap As Object)
    m_BitMap = EmbeddedBitmap
End Property
</PRE>
</TD></TR></TABLE>
</P>
</ul>

<P>You might be asking yourself, &quot;Why not just use a public variable to store property values?&quot; In some cases that may work fine; however, if you want to make sure that the value assigned to the property is valid, you have to write validation code when the value is assigned. This is the benefit of using a property procedure. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Public Property Let FileDate(strFileDate As String)
    If Not IsDate(strFileDate) Then
        ' Raise an error
    ElseIf Year(strFileDate) &lt; 1990 Then
        ' Do not allow file dates
        ' earlier than 1990
    Else
        m_Filedate = strFileDate
    End If
End Property
</PRE>
</TD></TR></TABLE>
</P>

<P>Use property procedures when:</P>

<ul>

<p><li> The property is read-only, or cannot be changed once it has been set.</li></p>

<p><li> The property has a well-defined set of values that need to be validated.</li></p>

<p><li> Values outside a certain range are valid for the property's data type, but cause program errors if the property is allowed to assume such values.</li></p>

<p><li> Setting the property causes some perceptible change in the object's state, as for example a form's Visible property causes the form to be loaded (if it is not already) and then displayed to the user.</li></p>

<p><li> Setting the property causes changes to other internal variables or to the values of other properties.</li></p>

</ul>


<A NAME="124"><H3>Creating Methods</H3></A>

<P>Methods represent the functionality your class provides. To create a method for an object, you simply create Public Sub or Function procedures within a class module. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private m_Filename As String
Private m_textFileContents As String

Public Sub Save(Optional strFileName As String)
    Dim FileLocation As String
    Dim FileNumber As Integer

    ' If a file name is not specified
    ' as an argument, use the private variable
    ' m_FileName. Otherwise, use the argument
    FileLocation = IIf(IsMissing(strFileName), m_Filename, strFileName)
    ' Get a file handle
    FileNumber = FreeFile()
    ' Open the file for output
    Open FileLocation For Output As #FileNumber
    ' Write text to the file
    Write #FileNumber, m_textFileContents
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="125"><H3>Friend Properties and Methods</H3></A>

<P>In addition to declaring properties and methods Public and Private, you can declare them Friend. This is important when you are using multiple class modules within a COM component. Friend members look just like Public members to other objects in your project; however, programs that use the component's objects cannot access them. They are visible to all the other objects within the component, so they allow safe internal communication within the component.</P>


<A NAME="126"><H2>Events</H2></A>

<P>Through the use of events, a class provides notification that some action has occurred. Visual Basic provides two built-in events for class modules by default: the Initialize event and the Terminate event. You can also declare custom events for your class. You define the event and then write code to cause the event to occur. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Public Event Status(strStatus As String)

Public Sub Save(Optional strFileName As String)
    Dim FileLocation As String
    Dim FileNumber As Integer

    FileLocation = IIf(IsMissing(strFileName), m_Filename, strFileName)
    FileNumber = FreeFile()

    ' Raise an event
    RaiseEvent Status(&quot;Opening File&quot;)
    Open FileLocation For Output As #FileNumber
    Write #FileNumber, m_textFileContents
    ' Raise an event
    RaiseEvent Status(&quot;File Saved&quot;)
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P>When a developer works with an object that exposes an event, the developer can write code in an event handler to take action when the event  occurs. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private WithEvents MyFile As CFile
Private Sub cmdSave_Click()
    MyFile.Save
End Sub

Private Sub MyFile_Status(strStatus As String)
    ' Write the status information
    ' to a Label control
    lblStatus.Caption = strStatus
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="127"><H2>Call-Back Methods</H2></A>

<P>When a client makes a method call to a class, the client (or calling application) is blocked from performing other processes until the call returns. This is an example of synchronous processing. While synchronous processing may be appropriate for small tasks, it is not appropriate when the method performs a time consuming task because the client cannot execute any code while it is waiting.</P>

<P>By using asynchronous processing, your class allows the client to perform other tasks while your component runs a method. In asynchronous processing, the following actions take place:</P>

<ol>

<p><li> The method call that starts a task returns control to the client instantly, without supplying a result.</li></p>

<p><li> The client continues processing, while the component performs the task.</li></p>

<p><li> When the task is complete, the class notifies the client that the result is ready.</li></p>

</ol>

<P>For example, you could create a class that makes changes to the database. The client can continue processing until the class notifies the client that it is finished updating. Asynchronous processing is also useful when clients need to be notified of important occurrences such as the arrival of messages. In this situation, a client tells a class that it wants to be notified when a message arrives, and the class sends notifications for incoming messages.</P>

<P>Instead of using events to perform these asynchronous notifications, you can create call-back methods. Call-backs are more difficult to implement than events; however, call-backs can be necessary when a particular form of communication between a client and component is necessary. An event is like an anonymous broadcast in which a class that raises events knows nothing about its clients. Any client can create an event handler to handle notifications from a component. The class that raises events has no information about its clients. It is broadcasting to an unknown audience. In contrast, a call-back is like a handshake between the client and the class. A class that is making call-backs must have a reference to the client that it calls. When you use call-back methods and events, a client that has a reference to an object that raises events can handle those events by placing the reference into a variable. This means that the component holds the exact memory location of the client in order to provide notifications.</P>

<P>For more information about implementing call-backs in your components, search on &quot;Asynchronous Call-Backs and Events&quot; in the MSDN Help.</P>


<A NAME="128"><H2>Enumerations</H2></A>

<P>An enumeration allows you to define your own set of named constants. A named constant is an item that retains a constant value throughout the execution of a program and can be used in place of literal values. You can use named constants as property values and method arguments, and as return values. By using a named constant, you also make your code easier to read and maintain. For example, if you call MsgBox to create a message box that includes Yes and No buttons, you can use the named constant vbYesNo for the button argument instead of a literal value of 4.</P>

<P>The following example code shows how to define an enumeration named enum_FileType:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Public Enum enum_FileType
    ftTextFile = 1
    ftBitMap = 2
    ftUnicode = 3
End Enum
</PRE>
</TD></TR></TABLE>
</P>

<P>You can then use the enumeration as an argument for methods or property procedures. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Public Property Let FileType(ft As enum_FileType)
    m_FileType = ft
End Property
</PRE>
</TD></TR></TABLE>
</P>

<P>By using enumerations as arguments, Visual Basic context-sensitive help will list the values of the enumeration when you are setting a variable of that type, as illustrated in Figure 3.1.</P>

<P>
<img src="images/F03xx01.GIF" width=292 height=124 border="0">
</P><P>
<!--caption--><b>Figure 3.1</b> <i>Visual Basic including enumerations as an autocompletion feature</i><!--/caption-->
</P>


<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="129"><H2>Practice: Using the Class Builder Utility </H2></A>

<P>You can create a class module and add methods, properties, and events manually, or you can use the Class Builder utility. The Class Builder automates the process of adding properties, methods, and events to a class. Before you can use the Class Builder, you must load it into the Visual Basic development environment through the Add-In Manager.</P>

<P><LI><B> To create a new class with the Class Builder utility</B></LI></P>

<ol>

<p><li> Create a new Standard EXE project in Visual Basic.</li></p>

<p><li> Load the Class Builder utility (if it is not already) using the <B>Add-In Manager</B>.</li></p>

<p><li> On the <B>Class Builder</B> window, right-click the <B>Project1</B> icon, point to <B>New</B>, and then click <B>Class</B>.</li></p>

<p>The <B>Class Module Builder</B> dialog box appears.</p>

<p><li> On the <B>Properties</B> tab, set the <B>Name</B> property to <B>CFile</B>.</li></p>

<p><li> Click the <B>Attributes</B> tab, and type &quot;<B>This class will be used to create file objects.</B>&quot; for the description, as illustrated in Figure 3.2.</li></p>

<P>
<img src="images/F03xx02.GIF" width=355 height=386 border="0">
</P><P>
<!--caption--><b>Figure 3.2</b> <i>Typing a description of the class module</i><!--/caption-->
</P>


<p><li> Click <B>OK </B>to close the <B>Class Module Builder</B> dialog box.</li></p>

</ol>

<P><LI><B> To add a property to the CFile class</B></LI></P>

<ol>

<p><li> On the <B>Class Builder</B> window, right-click the <B>CFile</B> class icon, point to <B>New</B>, and then click <B>Property</B>.</li></p>

<p>The <B>Property Builder</B> dialog box appears.</p>

<p><li>Type <B>FileName</B> for the property name, select <B>String </B>for the data type, click <B>Public Property (Let, Get, Set)</B> for the declaration, and then set FileName to be the default property, as illustrated in Figure 3.3.</li></p>

<P>
<img src="images/F03xx03.GIF" width=345 height=391 border="0">
</P><P>
<!--caption--><b>Figure 3.3</b> <i>Setting values in the Properties tab of the Property Builder dialog box</i><!--/caption-->
</P>


<p><li> Click the <B>Attributes</B> tab on the <B>Property Builder</B> dialog box.</li></p>

<p><li> For the property description, type &quot;<B>The value of the path and filename combined. For example &quot;C:\Directory1\Filename.txt&quot;,</B>&quot; and then click <B>OK</B>.</li></p>

</ol>

<P><LI><B> To add a method to the CFile class</B></LI></P>

<ol>

<P><li>Right-click the <B>CFile</B> class icon, point to <B>New</B>, and then click <B>Method</B>.</li></p>

<p>The <B>Method Builder</B> dialog box appears.</p>

<p><li> For the method name, type <B>Save</B>.</li></p>

<p><li> Add an optional argument named <B>Filename </B>that will be passed by value, as illustrated in Figure 3.4.</li></p>

<P>
<A HREF="javascript:fullSize('F03xx04x.htm')"> <img src="images/F03xx04.JPG" width=404 height=347 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.4</b> <i>Adding the Filename optional argument to the Save method</i><!--/caption-->
</P>


<p><li> In the <B>Attributes</B> tab of the <B>Method Builder</B> dialog box, type &quot;<B>Saves the file to the specified location based on either the FileName property or the Filename argument of this method</B>.&quot; for the description.</li></p>

<p><li> Click <B>OK</B> to close the <B>Method Builder</B> dialog box.</li></p>

</ol>

<P><LI><B> To add an event to the CFile class</B></LI></P>

<ol>

<P><li>Right-click the <B>CFile</B> class icon, point to <B>New</B>, and then click <B>Event</B>.</li></p>

<p>The <B>Event Builder</B> dialog box appears.</p>

<p><li> Set the event name to <B>Status</B>.</li></p>

<p><li> Add a string argument named <B>Message</B> to be passed by value.</li></p>

<p><li> In the Attributes tab of the <B>Event Builder</B> dialog box, type &quot;<B>Passes a message to the client containing information about the file status.</B>&quot; for the description.</li></p>

<p><li> Click <B>OK</B> to close the <B>Event Builder</B> dialog box.</li></p>

</ol>

<P><LI><B> To add an enumeration</B></LI></P>

<ol>

<p><li> Right-click the <B>CFile</B> class icon, point to <B>New</B>, and then click <B>Enum</B>.</li></p>

<p>The <B>Enum Builder</B> dialog box appears.</p>

<p><li>Set the name to <B>enum_FileType</B>.</li></p>

<p><li> Uncheck the <B>Public</B> checkbox so the enumeration is private.</li></p>

<p><li> Add the following enum values:</li></p>

<ul>

<p><li>ftTextFile = 1</li></p>

<p><li>ftBitMap = 2</li></p>

<p><li>ftUnicode = 3</li></p>

</ul>

<p>The <B>Enum Builder</B> dialog box should look similar to the illustration in Figure 3.5.</p>

<P>
<img src="images/F03xx05.GIF" width=242 height=297 border="0">
</P><P>
<!--caption--><b>Figure 3.5</b> <i>Creating the enum_FileType enumeration</i><!--/caption-->
</P>


<p><li> Click <B>OK</B> to close the <B>Enum Builder</B> dialog box.</li></p>

<p><li> In the <B>Class Builder</B>, click <B>Update</B> <B>Project</B> on the <B>File</B> menu.</li></p>

<p><li> Close the <B>Class Builder</B>.</li></p>

<p><li> Browse the code created by the Class Builder in the <B>CFile Code</B> window.</li></p>

<p>Notice that all of the declarations for methods, events, enumerations, and property procedures were created for you, as illustrated in Figure 3.6.</p>

<P>
<A HREF="javascript:fullSize('F03xx06x.htm')"> <img src="images/F03xx06.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.6</b> <i>Code created by the Class Builder</i><!--/caption-->
</P>


<p><li> Save your project files.</li></p>

<p>You will use this project in the next practice.</p>

</ol>


<A NAME="130"><H2>Lesson Summary </H2></A>

<P>A class module (.cls file) is a type of Visual Basic code module that lets you create custom objects for your application. It provides functionality in the form of an object. Each class module defines one type of object. You can create class modules manually or with the Class Builder utility.</P>

<P>You create property procedures to implement properties in objects created from custom classes. Visual Basic provides three property procedures: Property Get, Property Let, and Property Set. You can then write validation code to ensure that input values are valid.</P>

<P>You can declare properties and methods Public, Private, or Friend. Private members cannot be used outside of the class. Friend members cannot be used outside of the component. Public members are available to use outside of the class and the component.</P>

<P>Visual Basic provides two built-in events for class modules, Initialize and Terminate. You can also create custom events.</P>

<P>An enumeration lets you define your own set of named constants, which you can then use as property values, method arguments, and return values. This makes your code easier to read and maintain.</P>


</BODY>
</HTML>



