<HTML>
<HEAD>
<TITLE>Appendix E -- Preparing a Distributed Application for Deployment</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chada.htm", "glossa.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="514"><H1>Appendix E -- Preparing a Distributed Application for Deployment</H1></A>

<P>This appendix will provide information on how to implement help, select compiler options, and use conditional compilation in your applications. You will also learn how to plan and implement the distribution of n-tier applications and COM components, which includes using the Packaging and Deployment Wizard.</P>

<A NAME="515"><H2>Implementing Online Help</H2></A>

<P>At some point, most users will have questions about how to use your application. The best way to handle users' questions is to provide a Help file for your application.</P>

<P>Microsoft Visual Basic 6.0 supports the traditional Microsoft Windows Help system (WinHelp) and the newer HTML Help. This appendix covers the steps necessary to call Help topics from either of these Help systems. However, it does not cover how to create a Help file. There are authoring tools that can assist you in creating Help files, including the new Microsoft HTML Help Workshop.</P>

<A NAME="516"><h3>Using a Help File</h3></A>

<P>You set certain properties to provide links to the topics in your Help file. First, set the HelpFile property for your project to point to the correct Help file. Second, set the HelpContextID property of controls in your application to provide contextual Help for your users. The process of linking Help to your application is the same for both WinHelp and HTML Help systems.</P>

<P>There are two ways to set the HelpFile property. Using the App object, you can programmatically set the HelpFile property to specify the Help file name and location for your application. You can also define a valid help file for your application using the Project Properties dialog box. Setting the HelpFile property requires a written and compiled WinHelp (.hlp) or HTML Help (.chm) file. </P>

<P><li><B> To set the HelpFile property using Project Properties</B></li></P>

<ol>
<p><li>On the <B>Project</B> menu, click <B>Project Properties</B>.</li></P>

<p><li>On <B>Project Properties </B>dialog box, click the <B>General</B> tab.</li></P>

<p><li>Type the path and file name for your application's Help file (.hlp or .chm) in the <B>Help File Name</B> field.</li></P>
</ol>

<P>To set the HelpFile property for your application during run time, use the App object in your program's code. The following example sets the location of the Help file as the application's directory, and states the name of the HTML Help file. </P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub Form_Load()
     App.HelpFile = App.Path &amp; &quot;\help.chm&quot;
End Sub
</pre></td></tr></table></p>

<P>You can point your error messages in your application to a different Help file by setting the HelpFile property of the Err object. This is useful because you can use one Help file for the error messages of several different applications. Rather than compiling a new Help file with the same error messages, you compile one error message's Help file and call it by using the Err.HelpFile property in each application. </P>

<p><b>Connecting a Help File to Your Application</b></p>


<P>To link your program's controls, forms, and menus to a topic in the Help file, you set the HelpContextID property of that component. The HelpContextID is a Long number that matches the Context ID of the topic in your WinHelp or HTML Help File.</P>

<P>For example, you set 103450 as the HelpContextID property of an OptionButton. When a user selects that OptionButton in your program and presses F1, Visual Basic searches for a topic with a Context ID of 103450 in the Help file specified in the application's HelpFile property. If the Context ID is not found in the Help file, an error occurs and the Help file's default topic is displayed.</P>

<P>If you leave a control's HelpContextID property at the default value (0), then Visual Basic searches for a valid HelpContextID for the control's container. If the container has a valid HelpContextID value and the user presses the F1 key, the topic for the container will be displayed. </P>

<P><li><B> To set the HelpContextID for a control </B></li></P>

<ol>
<p><li>Select the control for which you want to enter a HelpContextID.</li></P>

<p><li>On the <B>Properties</B> window, double-click <B>HelpContextID</B>.</li></P>

<p><li>Enter a valid Long integer.</li></P>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><hr>
For the CommonDialog control, the name of this property is HelpContext instead of HelpContextID.
</blockquote></div></p>

<P><li><B> To set the HelpContextID for a menu </B></li></P>

<ol>
<p><li>On the <B>Tools</B> menu, click <B>Menu Editor</B>.</li></P>

<p><li>Choose the menu item for which you want to enter a HelpContextID.</li></P>

<p><li>Enter a valid Long value in the <B>HelpContextID</B> box.</li></P>
</ol>

<P>You can also set the HelpContextID property within your program's code. The following example sets the Help topic for a control, form, and the Err object.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub Form_Load()
     Text1.HelpContextID = 13124
     Form1.HelpContextID = 34234
     Err.HelpContext = 78798
End Sub
</pre></td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
For the Err object, the name of this property is HelpContext instead of HelpContextID.
</blockquote></div></p>

<A NAME="517"><h3>Adding What's This Help to the Front-End</h3></A>

<P>What's This Help gives the user quick access to Help text in a popup window without opening the Help viewer. You typically use it to provide simple assistance for user interface elements, such as data entry fields. Both WinHelp and HTML Help file formats support What's This Help topics.</P>

<P>To enable What's This Help on a form, you set the WhatsThisHelp property of that form to True. Next, select each control for which you want to provide Help and assign a unique value to the WhatsThisHelpID property of the control.</P>

<P>Add the What's This button to your form to allow users to click on a control to get help. To add a What's This button to a form's title bar, set the WhatsThisButton property to True. The form cannot have the Minimize and Maximize buttons.</P>

<P><li><B> To display the What's This button in the title bar of a form</B></li></P>

<ol>
<p><li>Select the form to which you want to add a What's This button.</li></P>

<p><li>On the <B>Properties</B> window, double-click the <B>WhatsThisHelp</B> property and set it to <B>True</B>.</li></P>

<p><li>Set the following properties:</li></P>

<P>
<TABLE cellpadding=5 width="95%">
<tr>
<th>Property</th>
<th>Value</th>
</tr>
<tr>
<TD VALIGN="TOP">Border Style</TD>
<TD VALIGN="TOP">1 - Fixed or<br>2 - Sizable</TD>
</TR>
<TR>
<TD VALIGN="TOP">MaxButton</TD>
<TD VALIGN="TOP">False</TD>
</TR>
<TR>
<TD VALIGN="TOP">MinButton</TD>
<TD VALIGN="TOP">False</TD>
</TR>
<TR>
<TD VALIGN="TOP">Whats This Button</TD>
<TD VALIGN="TOP">True</TD>
</TR>
<TR>
<TD VALIGN="TOP" colspan="2">Or</TD>
</TR>
<TR>
<TD VALIGN="TOP">BorderStyle</TD>
<TD VALIGN="TOP">3 - Fixed Dialog</TD>
</TR>
<TR>
<TD VALIGN="TOP">Whats This Button</TD>
<TD VALIGN="TOP">True</TD>
</TR></TABLE></p>
</ol>

<P>Other methods you can use are the WhatsThisMode method of a form and the ShowWhatsThis method of a control. After you have set the form's WhatsThisHelp property to True and defined the value for a control's WhatsThisHelpID, you can invoke the WhatsThisMode method within your code.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub mnuWhatsThis_Click()
     Form1.WhatsThisMode
End Sub
</pre></td></tr></table></p>

<A NAME="518"><H2>Setting Compiler Options</H2></A>

<P>With Visual Basic, you can compile your code into one of two types of executable files: p-code (pseudo code) or native code. Both of these executable file types have advantages and disadvantages; you compile a project into p-code or native code depending on the tasks that your application performs. </P>

<P>P-code instructions are translated, or interpreted, by a run-time dynamic-link library (DLL) before executing on the processor chip. Compiling to native code means that the resulting executable file will contain instructions that are native to the processor chip. When you compile to native code, you can use compiler switches (or options) to optimize your application when it runs.</P>

<P>With the Professional or Enterprise edition of Visual Basic, you can compile your code either in standard Visual Basic pseudo code (p-code) or in native<I> </I>code. In the Standard edition of Visual Basic, you can compile programs only in p-code. Compiling your programs in native code provides several options for optimizing and debugging that are not available with p-code.</P>

<P>Visual Basic p-code is an intermediate step between the high-level instructions in your Basic program and the low-level native code that your computer's processor executes. Visual Basic translates p-code into native code during run time, and then executes the program. By compiling directly to native code format, you eliminate the intermediate p-code step because your code is compiled to the native instructions of the processor chip and not compiled in p-code. This speeds up the execution of loops and mathematical calculations, and also speeds up calls to external services. You can debug programs compiled in native code using standard debugging tools, such as the debugging environment provided by Visual C++. You can also use options for optimizing native code. For example, you can optimize code for speed or for size. Figure E.1 shows the Compile tab on the Project Properties dialog box. </P>

<P><li><B> To set the compile option to native code</B></li></P>

<ol>
<p><li>In the <B>Project</B> window, click the project you want to compile.</li></P>
<p><li>On the <B>Project</B> menu, click <B>Project</B> <B>Properties</B>.</li></P>
<P>The <B>Project Properties</B> dialog box appears.</P>
<p><li>Click the <B>Compile</B> tab.</li></P>
<p><li>Click <B>Compile to Native Code</B>.</li></P>
<p><li>For advanced options, click the <B>Advanced Optimizations</B> button.</li></P>
<p><li>Select the options you want, then click <B>OK</B>.</li></P>

<P>
<A HREF="javascript:fullSize('FExx01x.htm')"> <img src="images/FExx01.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure E.1</B> <i>The Compile tab in the Project Properties dialog box</i><!--/caption-->
</P>


</ol>

<P>When compiling in native code, Visual Basic enables several options for customizing and optimizing the executable file. Often, when the compiler translates Visual Basic statements into machine code, many different sequences of machine code can correctly represent a given statement or construct. Sometimes these differences offer trade-offs of size versus speed. </P>

<A NAME="519"><h3>Optimize for Fast Code</h3></A>

<P>Use the Optimize for Fast Code option to maximize the speed of compiled executable files. This option instructs the compiler to favor speed over size. Selecting the Optimize for Fast Code option ensures that when the compiler recognizes such alternatives, it will always generate the fastest code sequence possible, even when that might increase the size of the compiled program.</P>

<A NAME="520"><h3>Optimize for Small Code</h3></A>

<P>Use the Optimize for Small Code option to minimize the size of compiled executable files. This option instructs the compiler to favor size over speed. Selecting this option ensures that when the compiler recognizes such alternatives it will always generate the smallest code sequence possible, even when that might decrease the execution speed of the compiled program.</P>

<A NAME="521"><h3>No Optimizations</h3></A>

<P>Use the No Optimizations option to turn off all optimizations. With this option selected, the compiler generates code that is significantly slower and larger than when optimization for fast or small code is selected.</P>

<A NAME="522"><h3>Favor Pentium Pro</h3></A>

<P>Use the Favor Pentium Pro option to optimize code generation in favor of the Pentium Pro (P6) processor. Code generated with this option will still run on earlier processors, but less efficiently. The Pentium Pro microprocessor architecture allows certain code generation strategies that can substantially improve efficiency. However, code created using these Pentium Pro strategies does not perform as well on 80386-based and 80486-based computers or on Pentium computers. You should use this option only if all or most of the machines your program will run on use the Pentium Pro.</P>

<A NAME="523"><h3>Create Symbolic Debug Info</h3></A>

<P>Use the Create Symbolic Debug Info option to generate symbolic debug information in the compiled executable file. Programs compiled to native code using this option can be debugged using Visual C++ (5.0 or later) or another compatible debugger. Setting this option will generate a .pdb file with the required symbol information for use with compatible symbolic debuggers.</P>

<A NAME="524"><h3>Assume No Aliasing</h3></A>

<P>Use the Assume No Aliasing option to tell the compiler that your program does not use aliasing. An alias is a name that refers to a memory location that is already referred to by a different name. This occurs when you use ByRef arguments that refer to the same variable in two ways. For example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Sub MyProcedure(x as integer, y as integer)
     x = 5   'Code is referring to the same variable
     '(the local z in Main)
     y = 6   'via two different names, x and y.
End Sub

Sub Main
     Dim z as integer
     MyProcedure z,z
End Sub
</pre></td></tr></table></p>

<P>Using the Assume No Aliasing option allows the compiler to apply optimizations it couldn't otherwise use, such as storing variables in registers and performing loop optimizations. However, you should be careful not to check this option if your program passes ByRef arguments, because the optimizations could cause the program to execute incorrectly.</P>

<A NAME="525"><h3>Remove Array Bounds Checks</h3></A>

<P>Use the Remove Array Bounds Checks option to turn off error checking for valid array indexes and the correct number of dimensions of the array. By default, Visual Basic checks every access to an array to determine whether the index is within the range of the array. If the index is outside the bounds of the array, an error is returned. Selecting the Remove Array Bounds Checks option turns off this error checking, which can speed up array manipulation significantly. However, if your program accesses an array with an index that is out of bounds, the program might access invalid memory locations without warning. This can cause unexpected behavior or program crashes.</P>

<A NAME="526"><h3>Remove Integer-Overflow Checks</h3></A>

<P>Use the Remove Integer-Overflow Checks option to turn off error checking to ensure that numeric values assigned to integer variables are within the correct range for the data types. By default, Visual Basic checks every calculation of a variable with an integer-style data type (Byte, Integer, Long, and Currency) to be sure that the resulting value is within range of that data type. Selecting the Remove Integer-Overflow Checks option turns off this error checking, which can speed up integer calculations. If a value is out of range for the data type, however, no error is returned and incorrect results may occur.</P>

<A NAME="527"><h3>Remove Floating-Point Error Checks</h3></A>

<P>Use the Remove Floating-Point Error Checks option to turn off error checking to ensure that numeric values assigned to floating-point variables are within the correct range for the data types, and that division by zero or other invalid operations do not occur. By default, Visual Basic checks every calculation of a variable with a floating point data type (Single and Double) to be sure that the resulting value is within range of that data type. Error checking is also performed to determine if division by zero or other invalid operations are attempted. Selecting this option turns off this error checking, which can speed up floating point calculations. If data type capacities overflow, however, no error is returned and incorrect results may occur.</P>

<A NAME="528"><h3>Remove Safe Pentium FDIV Checks</h3></A>

<P>Use the Remove Safe Pentium FDIV Checks option to turn off the generation of special code to make floating point division safe on Pentium processors with the floating-point division (FDIV) bug.</P>

<P>The native code compiler automatically adds extra code for floating-point operations to make these operations safe when run on Pentium processors that have the FDIV bug. Selecting the Remove Safe Pentium FDIV Checks option produces code that is smaller and faster, but in rare cases, this option might produce slightly incorrect results on Pentium processors with the FDIV bug.</P>

<A NAME="529"><h3>Allow Unrounded Floating-Point Operations</h3></A>

<P>Use the Allow Unrounded Floating-Point Operations option to tell the compiler to compare the results of floating-point expressions without first rounding those results to the correct precision. Floating-point calculations are normally rounded off to the correct degree of precision (Single or Double) before comparisons are made. Selecting the Allow Unrounded Floating-Point Operations option lets the compiler perform floating-point comparisons before rounding. This is more efficient than comparing after rounding and it also improves the speed of some floating-point operations. A disadvantage of enabling this option is that calculations might be maintained to a higher precision than expected. In addition, two floating-point values that might be expected to compare as equal might not actually do so.</P>

<P>In general, this option should not be used if you perform equality comparisons directly on the results of floating-point computations. For example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim Q As Single
Q = &lt;floating-point computation&gt;
If Q = &lt;floating-point computation&gt; then
     ...
End If
</pre></td></tr></table></p>

<P>If the Allow Unrounded Floating-Point Operations option is set, the comparison of Q will be made with the result of the floating-point expression. It will likely have higher precision than that of a Single, so the comparison may fail. If the option is not set, the result of the floating-point expression will be rounded to the appropriate precision (Single) before the comparison, and then the comparison will succeed.</P>

<A NAME="530"><H2>Using Conditional Compilation</H2></A>

<P>Conditional compilation lets you compile only selected parts of the program. You can include specific features of your program in different versions. For example, you can design an application to run on different platforms or change the date and currency display filters for an application distributed in several different languages.</P>

<P>To conditionally compile a part of your code, enclose it between #If...Then and #EndIf statements, using a Boolean constant as the branching test. To include this code segment in compiled code, set the value of the constant to -1 (True). For example, to create French language and German language versions of the same application from the same source code, embed platform-specific code segments in #If...Then statements using the predefined constants conFrenchVersion and conGermanVersion:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
#If conFrenchVersion Then
     '&lt;code specific to the French language version&gt;.
#ElseIf conGermanVersion then   
     '&lt;code specific to the German language version&gt;.
#Else
     '&lt;code specific to other versions&gt;.
#End If
</pre></td></tr></table></p>

<P>If the value of the conFrenchVersion constant is set to True at compile time, the conditional code for the French language version will be compiled. If the value of the conGermanVersion constant is set to True, the compiler uses the German language version.</P>

<A NAME="531"><h3>Declaring Conditional Compilation Constants</h3></A>

<P>You can set the conditional compilation constants in your project in three ways: in the Project Properties dialog box, in a command line argument, or in your code. The way you set a conditional compilation constant depends on the scope you want the constant to have. Using the Project Properties dialog box or command line to set your conditional compilation constants makes the constants Public to all modules in the project. By using the #Const statement in your code, the constants are Private to the module in which they are declared. </P>

<P><li><B> To set the conditional compilation constants in the Project Properties dialog box </B></li></P>

<ol>
<p><li>On the <B>Project</B> menu, click <B>Project Properties</B>.</li></P>

<p><li>Click the <B>Make</B> tab.</li></P>

<p><li>Type an argument, such as <B>conFrenchVersion = -1</B>, in the <B>Conditional Compilation Arguments</B> field.</li></P>
</ol>

<P>If you have a complex #If...Then statement, containing one or more #ElseIf statements, you will need to set additional constants. You can set multiple constants by separating them with colons, as in the following code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
conFrenchVersion=-1:conANSI=0
</pre></td></tr></table></p>

<P>If you want to start compilation from a command line, use the /d switch to enter conditional compilation constants, as shown here:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
vb6.exe /make MyProj.vbp /d conFrenchVersion=-1:conANSI=0
</pre></td></tr></table></p>

<P>Command-line declarations override declarations entered on the Project Properties dialog box. Arguments set on the Project Properties dialog box remain in effect for subsequent compilations.</P>

<A NAME="532"><H2>Using the Package and Deployment Wizard</H2></A>

<P>When you have finished writing, debugging, and testing your application, you are ready to distribute it to your users. The Visual Basic Package and Deployment Wizard helps you determine which files need to be distributed; it also compresses the files into a Cabinet file (.cab file) and creates a Setup program. After creating your installation files, you can distribute your application on disk, on CDs, across networks, or over an Internet or intranet site. The Setup program created by the Package and Deployment wizard also adds the application to the Add/Remove Programs applet in the Windows Control Panel. This allows you to later uninstall the distributed application and components.</P>

<P>In most cases, you will package your applications using the Package and Deployment Wizard, which is provided with Visual Basic. It provides valuable shortcuts and automates some of the tasks you would otherwise have to perform yourself.</P>

<p><div class="note"><blockquote><b>NOTE</b><hr>
For more information, search on &quot;VB6 Readme: Part 6 Wizard Issues&quot; in the MSDN Online Help.
</blockquote></div></p>

<A NAME="533"><h3>Overview of Packages</h3></A>

<P>Application packaging means creating a package that installs your application onto the user's computer. A package consists of the .cab file or files that contain your compressed project files, and any other files that the user needs to install and run your application. These files may include setup programs, secondary .cab files, or other needed files. The additional files vary based on the type of package you create.</P>

<P>You can create two kinds of packages: standard packages or Internet packages. If you plan to distribute on CD, floppy disk, or via a network share, you should create a standard package for your application. If you plan to distribute via an Internet or intranet site, you should create an Internet package.</P>

<P>The Package and Deployment Wizard and the Setup Toolkit are the two Visual Basic tools that you can use to package and distribute your applications. The Package and Deployment Wizard automates many of the steps by presenting you with choices about how to configure your Cabinet files. The Setup Toolkit, on the other hand, lets you customize what happens during the main installation process.</P>

<A NAME="534"><h3>The Package and Deployment Options</h3></A>

<P>The Visual Basic Package and Deployment Wizard, shown in Figure E.2, helps you gather all the files needed for your installation by creating one or more Cabinet files. The Wizard automates the creation and deployment of these files. </P>

<P>
<A HREF="javascript:fullSize('FExx02x.htm')"> <img src="images/FExx02.JPG" width=404 height=340 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure E.2</B> <i>Package and Deployment Wizard</i><!--/caption-->
</P>


<P>The Package and Deployment Wizard opening window has three options: </P>

<ul>
<p><li>Package</li></p>

<P>The Package option packages your files into a Cabinet file that can be deployed, and creates a setup program that installs the Cabinet files. The wizard determines the files you need and walks you through choices to create the installation package for your project.</P>

<p><li>Deploy</li></p>

<P>The Deploy option helps you deliver your packaged applications to the appropriate distribution media, such as floppies, a network share, or a Web site.</P>

<p><li>Manage Scripts</li></p>

<P>The Manage Scripts option lets you view and manipulate the scripts you have saved from previous packaging and deployment sessions in the wizard. Each time you use the wizard, you save a script that contains all the choices you made. You can reuse these scripts again for a different application if you want to use similar settings and choices.</P>
</ul>

<P><li><B> To start the Package and Deployment Wizard </B></li></P>

<ol>
<p><li>Click the <B>Start</B> menu.</li></P>
<p><li>Click <B>Programs</B>.</li></P>
<p><li>Click <B>Microsoft Visual Basic 6.0</B>.</li></P>
<p><li>Click <B>Microsoft Visual Basic 6.0 Tools</B>.</li></P>
<p><li>Click <B>Package &amp; Deployment Wizard</B>.</li></P>
</ol>

<P>You can also add the wizard to the Add-Ins menu. If you start the Package and Deployment Wizard from the Add-Ins menu, it uses the active project.</P>

<P><li><B> To add the Package and Deployment Wizard to the Add-Ins menu</B></li></P>

<ol>
<p><li>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></P>
<p><li>In the list of available add-ins, click <B>Package and Deployment Wizard</B>.</li></P>
<p><li>Under <B>Load Behavior</B>, select the <B>Loaded/Unloaded</B> check box.</li></P>
<p><li>Click <B>OK</B>.</li></P>
</ol>

<P>When you distribute your application as part of an integrated solution, registration is done during setup. If you use the Visual Basic Package and Deployment Wizard, registration of your components will be included in the setup process automatically.</P>

<p><b>Registry Files</b></p>


<P>If your project references any .reg or .vbl files, you will see an additional screen in the wizard where you can specify how this registry information should be treated. You can choose to simply copy the registry files to the end user's computer, or you can have the system store the information in the registry and automatically register it on the end user's computer.</P>

<A NAME="535"><h3>Web Publishing</h3></A>

<P>You can deploy any installation package, whether it is a standard or Internet package, to the Web. When you choose Web Publishing as your deployment method, the wizard uses the project folder to determine how the files and directories should be copied to the Web site; files and directories that are within the project folder are deployed to the Web server with the same directory structure.</P>

<P><li><B> To deploy your installation package to a Web server.</B></li></P>

<ol>
<p><li>Start the <B>Package and Deployment Wizard</B>.</li></P>
<p><li>Select a project that you have packaged.</li></P>
<p><li>Click the <B>Deploy</B> button.</li></P>
<p><li>If you have previously saved deployment scripts, you can choose one, or you can choose <B>None</B> in the <B>Deployment script</B> drop-down list. Click <B>Next</B>.</li></P>
<p><li>Click the package that you want to deploy, then click <B>Next</B>.</li></P>
<p><li>Click <B>Web Publishing</B> in the <B>Deployment method</B> list box, then click <B>Next</B>.</li></P>
<p><li>Clear the check boxes next to the files and folders that you do not want to include with your deployment, then click <B>Next</B>.</li></P>
<p><li>Select the check boxes next to the files and folders that you want to include with your deployment, then click <B>Next</B>.</li></P>
<p><li>Type the destination URL and choose the appropriate protocol in the Web publishing protocol drop-down list, then click <B>Next</B>.</li></P>
<p><li>Type a name for this deployment script, then click <B>Finish</B>.</li></P>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><hr>
By default, the wizard does not deploy source files from within the project directory or the \Support subdirectory. The packaging portion of the wizard creates the \Support directory and places files in it that you can use to recreate your .cab files. For more information, search on &quot;HOWTO: Debug PDW Internet Deployment Issues&quot; in the MSDN Online Help.
</blockquote></div></p>

<A NAME="536"><H2>Distributing Components</H2></A>

<P>There are several ways to distribute a component. For all of the following distribution scenarios except the first, you can create a standalone Setup for your component:</P>

<ul>
<p><li>As part of a Visual Basic application.</li></p>

<p><li>As a stand-alone component other developers can include in their applications, or use with the Internet.</li></p>

<p><li>As part of an enterprise application, running on a remote computer.</li></p>
</ul>

<A NAME="537"><h3>Distributing a Component as Part of a Visual Basic Application</h3></A>

<P>To distribute your component as part of a Visual Basic application, you can use the Package and Deployment Wizard to create a setup program for the application. If your application has a reference to a component, the Package and Deployment Wizard will include it, along with its support files, in the list of files needed to create distribution media.</P>

<A NAME="538"><h3>Standalone Setup for a Component</h3></A>

<P>To distribute your component for use by other developers, by Internet providers, or as part of an Enterprise application, use Package and Deployment Wizard to create a standalone setup program. The Package and Deployment Wizard will automatically include necessary support files. Be sure to include your Help file.</P>

<A NAME="539"><h3>Including Type Libraries for Implemented Interfaces</h3></A>

<P>If you've used the Implements keyword to add additional interfaces to your classes, you might need to include the type libraries for those interfaces in Setup for your component. You need to include the type library that includes a particular interface if either of the following statements is true.</P>

<ul>
<p><li>A class using the interface belongs to an out-of-process component.</li></p>

<p><li>The application provides objects to other applications, and those objects implement the interface.</li></p>
</ul>

<P>The reason type libraries need to be included with your application in these two situations is that invoking an object's properties and methods cross-process requires marshaling their arguments. In order to marshal the arguments, type library information must be available.</P>


</BODY>
</HTML>



