<HTML>
<HEAD>
<TITLE>Lesson 1: Planning a Distributed Solution</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01a.htm", "ch01c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="36"><H1>Lesson 1: Planning a Distributed Solution</H1></A>

<P>The Microsoft Solutions Framework (MSF) is a development framework produced by Microsoft Consulting Services (MCS). It is based on Microsoft's internal development methodology but also includes the practices of hundreds of MCS corporate clients. Consider applying some or all of these concepts as you plan a multi-developer project.</P>

<P>This lesson explains the features of MSF and how they relate to planning the development of distributed applications in Visual Basic.</P>

<P><DIV CLASS="SIDEBAR"><BLOCKQUOTE>

<b>After this lesson you will be able to:</b>
<ul>

<p><li> Install and configure Visual Basic for developing distributed applications.</li></p>

<p><li> Establish the environment for source-code version control.</li></p>

<p><li> Given a conceptual design, apply the principles of modular design to derive the components and services of the logical design.</li></p>

<p><li> Create a COM component that implements business rules or logic. Components include DLLs, Microsoft ActiveX controls, and active documents.</li></p>

</ul>
<b>Estimated lesson time: 35 minutes</b>

</BLOCKQUOTE></DIV></P>

<A NAME="37"><H2>Overview of Microsoft Solutions Framework</H2></A>

<P>MSF is a suite of models, principles, and guides for building and deploying software-a collection of best practices used by the Microsoft product groups and Microsoft Consulting Services. MSF helps you successfully deploy technologies to streamline business processes. Specifically, MSF helps you:</P>

<ul>

<p><li> Identify critical risks.</li></p>

<p><li> Understand key interdependencies.</li></p>

<p><li> Speed up development cycles.</li></p>

<p><li> Lower the cost of owning technology.</li></p>

<p><li> Improve execution of planned events.</li></p>

<p><li> Improve reaction to unplanned events.</li></p>

<p><li> Create scalable, reliable technology solutions.</li></p>

<p><li> Improve core information technology competencies.</li></p>

</ul>

<P>The MSF consists of seven models. Each model, and its purpose, is listed in the following table: </P>

<P>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH>Model</TH>
			<TH>Description</TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Team Model</TD>
			<TD VALIGN="TOP">Defines a team of peers working in interdependent and cooperating roles.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Process Model</TD>
			<TD VALIGN="TOP">Helps your team establish guidelines for planning and controlling results-oriented projects based on project scope, the resources available, and the schedule.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Application Model</TD>
			<TD VALIGN="TOP">Helps your team design distributed applications that take optimum advantage of component reuse.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">Enterprise Architecture Model</TD>
			<TD VALIGN="TOP">Supports decisions relating to the information, applications, and technology needed to support a business. It is the key to successful long-term use of new technologies.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">Solutions Design Model</TD>
			<TD VALIGN="TOP">Shows how applications should be designed from a user and business perspective (as opposed to the ideal streamlined development proposed in the Application Model).</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">Infrastructure Model</TD>
			<TD VALIGN="TOP">Establishes MSF principles for managing the people, processes, and technology that support networks in a large enterprise.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Total Cost of Ownership Model</TD>
			<TD VALIGN="TOP">Supports the process of assessing, improving, and managing information technology costs and maximizing value.</TD>
		</TR>
		
	</TABLE>
</P>

<P>In this course, you will focus on key areas of the Solutions Design Model and its design phases.</P>


<A NAME="38"><H2>The Solutions Design Model</H2></A>

<P>The Solutions Design Model provides a step-by-step strategy for designing business-oriented solutions driven by specific business needs. Often, these solutions require the implementation of computing systems. Computing systems provide the ability to:</P>

<ul>

<p><li> Store raw market data and processed information.</li></p>

<p><li> Encapsulate the business rules into software.</li></p>

<p><li> Change the rules to respond to a changing market quickly and easily.</li></p>

<p><li> Automatically act upon the rules.</li></p>

</ul>

<P>The Solutions Design Model ties together the Application, Team, and Process Models, and lets the information system staff allocate resources where they can produce the most value.</P>

<P>The information-system design process is evolutionary. A good analogy of software design is the design of a building. A building design has three phases: the first is an architect's sketches, the second is architectural plans, and the third is the addition of detail to the plans to adjust for the physical environment of the building. This last phase also includes gathering the technology and materials available to construct the building.</P>


<A NAME="39"><H3>Phase 1: Conceptual Design</H3></A>

<P>The architect's initial sketches provide a view of the building that is aligned with the purpose of the building. This sketch may contain elements such as floor plans and cutaways. This phase of building design corresponds to the conceptual design for a software development project, which starts with understanding what the user really needs to do, and then expands to creating a clear set of objectives that capture this understanding.</P>

<P>Conceptual design facilitates complete and accurate requirements by involving business sponsors, users, managers, and constituencies. The goal of conceptual design is to determine the following:</P>

<ul>

<p><li> The problem</li></p>

<p><li> The needs and technological capabilities of the business and users</li></p>

<p><li> The desired, future state of the work</li></p>

<p><li> Whether upgrading an existing solution is viable</li></p>

</ul>

<P>Team members present scenarios to enhance understanding and express the problems and visions for the future state of the solution. The purpose of scenarios is to think of the solution in the business environment, and to answer the who, what, when, why, and how questions.</P>

<P>Much of conceptual design is an analysis activity that leads to determining which processes and activities will go into the new system, how the objectives of those processes and activities will be met, and what the user's experience of those activities will be.</P>


<A NAME="40"><H3>Phase 2: Logical Design</H3></A>

<P>The second phase in the architectural process combines the client's view with the architect's view and knowledge. The architect uses detailed drawings to communicate with contractors and other parties involved in the construction of the building. This phase corresponds to the logical design phase in a software development process, in which you lay out the structure of the solution and provide a basis for physical design.</P>

<P>Logical design activities are integrated directly with the resulting scenarios from conceptual design and provide the basis for physical design. Logical design describes the organization of the elements that make up the solution and how they interact. You assemble the elements for optimum efficiency, performance, and reuse.</P>


<A NAME="41"><H3>Phase 3: Physical Design</H3></A>

<P>The architect draws up the plans for the builder. These plans include details for construction activities, and even finer details for individual subcontractors. This phase corresponds to an application designer's physical design in the software development process. Physical design describes a solution in a way that allows developers to construct the solution. Physical design communicates the necessary details of the solution, including its organization, structure, technology, and the relationships between elements.</P>


<A NAME="42"><H2>Software Requirements</H2></A>

<P>In this course, you will be creating applications that deploy processes and data in a network environment. To communicate with Component Object Model (COM) servers (components), run stored procedures on a database server, manage your components, and develop and test your applications, you must install the software described in the following sections. </P>


<A NAME="43"><H3>Microsoft Visual Studio 6.0 Enterprise Edition</H3></A>

<P>Visual Basic 6.0 is a member of the Visual Studio 6.0 Enterprise Edition tools suite. (You can also purchase the stand-alone version of Visual Basic 6.0 Enterprise Edition.) The Visual Basic 6.0 Enterprise Edition is designed for teams of developers creating distributed, high-performance client/server or Internet and intranet applications.</P>

<P>Visual Studio 6.0 Enterprise Edition includes a number of features for enterprise developers, including:</P>

<ul>

<p><li> Enterprise database support</li></p>

<p>This includes the Enterprise Visual Database Tools for schema and stored procedure design on Oracle and SQL Server databases, a development version of SQL Server 6.5, and a development version of SNA Server 4.0 with connectivity to VSAM and DB/2 databases on AS400 and IBM mainframes. </p>

<p><li> Enhanced life cycle productivity</li></p>

<p>This includes Microsoft Visual Modeler 2.0 for designing multitier applications based on the Universal Modeling Language (UML), as well as Visual Studio Analyzer for performance profiling and analysis of multi-tier applications.</p>

<p><li> Team development support</li></p>

<p>This includes a distributed, team-based Web development system, Visual SourceSafe 6.0 source code control system, Microsoft Repository, and Visual Component Manager 2.0 for organizing and sharing reusable business components across teams. </p>

<p><li> Integrated application services</li></p>

<p>This includes a developer edition of Microsoft BackOffice 4.5, with integrated applications services including database, transactions, message queuing, messaging/collaboration, Web applications, security, and SNA connectivity.</p>

</ul>


<A NAME="44"><H3>Microsoft Windows NT Server 4.0 with Service Pack 4</H3></A>

<P>Windows NT Server is designed to be an application server. For example, the base services that application developers need, such as virtual memory and multi-tasking, are built in to the operating system. Because Windows NT Server makes building applications easy, many developers have chosen this platform.</P>

<P>Developing with Visual Basic 6.0 Enterprise Edition allows you to take advantage of the Windows NT platform. You can provide applications for systems that run on Microsoft Windows 95, Microsoft Windows 98, and Microsoft Windows NT operating systems, including Intel and DEC Alpha platforms. It allows you to use built-in application services such as Microsoft's Component Object Model (COM), the Microsoft Distributed Component Object Model (DCOM), the Microsoft Message Queue Server, and Microsoft Transaction Server. With these tools, you can create sophisticated, secure, multi-tier applications to address the most demanding business requirements.</P>

<P>Windows NT Service Pack 4 (SP4) is the latest and most comprehensive update for Windows NT Server 4.0. SP4 provides improved management, security, and availability capabilities and helps prepare IT professionals for the Year 2000 and euro currency changes. SP4 also provides Y2K updates to Microsoft Data Access Components. You can download SP4 from Microsoft's Web site at <a href="http://www.microsoft.com/ntserver/" target="_window2">http://www.microsoft.com/ntserver/</a>.</P>


<A NAME="45"><H3>Microsoft Transaction Server (MTS)</H3></A>

<P>Microsoft Transaction Server (MTS) is a component-based object server available in the Windows NT Option Pack. MTS supports transactional services and simplifies the development and deployment of server applications that are built using COM technologies. It defines a programming model, and provides a run-time environment and graphical administration tool for managing enterprise applications. You can use Visual Basic, Microsoft Visual C++, Microsoft Visual J++, Microsoft Visual FoxPro, COBOL, and other tools to easily build MTS server applications without implementing the complex communication mechanisms between the components themselves. Because of this feature, MTS can significantly reduce the time needed for multi-tier (distributed) application development.</P>

<P>Because MTS supports Windows NT Workstation and Windows 95, it enables companies to deploy stand-alone versions of their MTS applications.  For more information about Windows NT, SP4, and MTS, see Microsoft's Web site at <a href="http://www.microsoft.com/ntserver" target="_window2">http://www.microsoft.com/ntserver</a>.</P>


<A NAME="46"><H3>Microsoft SQL Server 7.0</H3></A>

<P>Microsoft SQL Server is a scaleable, high-performance relational database management system (DBMS) for Windows NT Server-based systems. It provides a flexible, powerful platform that scales up to terabyte-size databases and down to small business servers and laptop databases.  SQL Server supports the use of Structured Query Language (SQL), as well as proprietary tools for accessing data. Designed to meet the requirements of distributed computing, SQL Server is tightly integrated with the BackOffice family of servers to enable organizations to improve decision making and streamline business processes.</P>

<P>SQL Server 7.0 comes in two different packages:</P>

<ul>

<p><li> SQL Server Enterprise Edition</li></p>

<p>For customers who require the highest level of scalability and reliability, SQL Server 7.0 Enterprise Edition can utilize up to 32 processors and 64 GB of memory. SQL Server 7.0 Enterprise Edition is also capable of handling terabyte-sized databases with thousands of concurrent users.</p>

<p><li> SQL Server Desktop</li></p>

<p>SQL Server Desktop is a fully-featured relational database management system. It is targeted for personal and shared use, and runs on Windows 95, Windows 98, and Windows NT Workstation. SQL Server Desktop may be deployed with each per-seat SQL Server client access license. SQL Server 7.0 is ideal for mobile applications that take advantage of its new merge replication features with conflict resolution. For more information, see Microsoft's Web site at <a href="http://www.microsoft.com/sql" target="_window2">http://www.microsoft.com/sql</a>.</p>

</ul>


<A NAME="47"><H3>DCOM 98</H3></A>

<P>Distributed Component Object Model (DCOM) is a technology that integrates distributed applications in a network. A distributed application consists of multiple processes that work together to accomplish a single task. DCOM 98, the latest version, is installed as part of the normal setup of Visual Studio 6.0 Enterprise Edition. DCOM 98 extends support for DCOM for Microsoft Windows 98 and Microsoft Windows 95 as follows:</P>

<ul>

<p><li> DCOM transparently provides support for reliable, secure, and efficient communication between Component Object Model (COM) components such as ActiveX controls, scripts, and Java applets residing on different machines on a LAN, a WAN, or on the Internet. </li></p>

<p><li> DCOM lets you distribute your application across locations that are most appropriate for your customer and your application.</li></p>

</ul>

<P>DCOM 98 is installed automatically with Visual Basic 6.0; however, you can install it manually using the Dcom98.exe file.  Dcom98.exe is a self-extracting executable that installs the updated DCOM components for Windows 95 or Windows 98. It is located in the Dcom98 directory of the Visual Basic 6.0 CD. This file may be freely distributed with your Visual Basic application. In Windows NT 4.0, the updated DCOM components are automatically installed with Service Pack 4 (SP4).  For more in-depth information, see the DCOM Technical overview available on Microsoft's Web site at <a href="http://www.microsoft.com/com/" target="_window2">http://www.microsoft.com/com/</a>.</P>


<A NAME="48"><H3>The DCOM Configuration Tool </H3></A>

<P>The Distributed COM Configuration Tool (Dcomcnfg.exe) is a utility that configures 32-bit COM and DCOM applications. A distributed application consists of multiple processes that work together to accomplish a single task. DCOM allows you to integrate distributed applications over a network.</P>

<P>DCOM applications are either COM DLLs or COM EXEs. Before client applications can use a DCOM application, the application's properties, such as security and location, must be set on the server. On the computer running the client application, you must specify the location of the server application that will be accessed or started. For the server application, you must specify the user accounts that will have permission to access or start the application. You can configure DCOM to:</P>

<ul>

<p><li> Specify a location for a DCOM application.</li></p>

<p><li> Allow the server application to impersonate the client application.</li></p>

<p><li> Set permissions for a particular DCOM application.</li></p>

<p><li> Set default permissions for all DCOM applications.</li></p>

</ul>

<P><li><B>To set default permissions for all DCOM applications</B></li></P>

<ol>

<p><li> Run the Dcomcnfg.exe utility.</li></p>

<p><li> On the <B>Default</B> <B>Security</B> tab, click <B>Edit</B> <B>Default</B> to set default access permissions. </li></p>

<p><li> If necessary, click <B>Add</B> to add other user accounts to Name.</li></p>

<p><li> In <B>Name</B>, click the user or group whose default permissions you want to change, then click <B>Grant</B> <B>Access</B> or <B>Deny</B> <B>Access</B>.</li></p>

</ol>


<A NAME="49"><H2>Multiple Developer Tools</H2></A>

<P>Software development in a team environment introduces concerns about how to track and monitor file usage, as well as changes made to critical information such as code, documents, and data. Microsoft Visual Source Safe (VSS) is a version control system for team development of software applications and is useful for effectively managing project files. Version control systems track and store changes to a file so that developers can review a file's history, return to earlier versions of a file, and develop programs concurrently.</P>

<P>Component-based software development is a popular methodology used to build complex business applications. Instead of having to re-develop similar code routines for every application, developers of component-based applications can simply utilize existing components that contain the needed functionality. If a component does not already exist, it can be written once and then cataloged for future reuse in other applications. With Visual Component Manager, you can publish components to a repository-based catalog, where they can easily be located, inspected, retrieved, and reused.</P>


<A NAME="50"><H3>Using Visual SourceSafe with Visual Basic</H3></A>

<P>Visual Basic provides complete integration with VSS. This integration is already included with the Professional and Enterprise Editions of Visual Basic. Although you can use VSS to manage software projects, you can also use it as version control software for all types of files, including Microsoft Word documents, Microsoft Excel spreadsheets, text, graphics, and binary files.</P>

<P>
<img src="images/practice.gif" width=67 height=55 border="0">
</P>

<A NAME="51"><H2>Practice: Adding Visual SourceSafe to Visual Basic</H2></A>

<P>In this practice you will integrate Visual SourceSafe into a Visual Basic project.</P>

<P><li><B>To use Visual SourceSafe in Visual Basic</B></li></P>

<ol>

<p><li> Start Visual Basic.</li></p>

<p><li> On the <B>New Project</B> dialog box, click <B>Standard EXE,</B> then click <B>Open</B>.</li></p>

<p><li> On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></p>

<p>The <B>Add-In Manager</B> dialog box appears.</p>

<p><li> Click the <B>Source Code Control</B> add-in, then select the <B>Loaded/Unloaded</B> check box. </li></p>

<p>The word <B>Loaded</B> appears to the right of the add-in.</p>

<p><li> Click <B>OK</B> to close the <B>Add-In</B> <B>Manager</B> dialog box.</li></p>

</ol>


<A NAME="52"><H3>Using the Visual Component Manager</H3></A>

<P>Like Visual SourceSafe, Visual Component Manager can be used as a file repository. It provides a single location for anything that can be added to a project, and allows you to catalog components, find them easily using flexible search criteria, and insert them into your project with point-and-click ease.</P>

<P>For example, you might create a template for a standard form used in all the accounting applications at the company, or a standard tax-calculation object that can be used in many applications. Cataloging these components on a shared repository database provides an easy way for all of the organization's developers to find and use the components. It also provides a convenient method of documenting information about components, as illustrated in Figure 1.1. </P>

<P>
<A HREF="javascript:fullSize('F01xx01x.htm')"> <img src="images/F01xx01.JPG" width=404 height=330 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 1.1</b> <i>Providing information about a component in VCM</i><!--/caption-->
</P>


<P>In addition to single components, Visual Component Manager can store component libraries, templates, models, and complete application frameworks. For example, a tool developer might create a set of forms and basic modules that are the starting point for new forms and modules of the same type. By creating a template and storing it in Visual Component Manager, any developer can get a copy of the forms or modules based on that template, and then add to them or change them without affecting the original. </P>

<P>Programmers often create modules that contain frequently used functions. Storing such modules in Visual Component Manager provides an easy way to find and reuse such modules.</P>

<P>With Visual Component Manager, you can also associate multiple files with components. A particular component may require the presence of additional support files, such as .dll files, Help files, or documentation. The association becomes a part of the component item's properties in Visual Component Manager, and the associated files can be loaded along with the item.</P>

<P>When you use it in this way, Visual Component Manager can also be the central location for approved project programming conventions, functional specifications, architectural models, and diagrams.</P>

<P>Visual Component Manager is automatically installed when you install Visual Basic. However, you must first add Visual Component Manager to the toolbar by using the Visual Basic Add-In Manager. </P>


<A NAME="53"><H3>Publishing and Using Components</H3></A>

<P>Publishing a component means storing it in a Visual Component Manager repository database, along with attributes and search keywords that will make it easy for others to find. This can be a local database on your own workstation, or it can be a shared Microsoft SQL Server database on a network server. A shared database gives everyone who has access to that server the ability to find and reuse your component.</P>

<P>When you locate a component you need, reusing it in your current project is as simple as clicking Add to Project on the component's shortcut menu. When you select components that must be registered, Visual Component Manager automatically registers the component for you when adding it to your project.</P>

<P><li><B>To add a Visual Component Manager item to your Visual Basic project</B></li></P>

<ol>

<p><li> With Visual Basic running, locate and select the desired component item in the Visual Component Manager explorer or contents pane.</li></p>

<p><li> Right-click the component, then click <B>Add to Project</B>,<B> </B>as illustrated in Figure 1.2.</li></p>

</ol>

<P>
<A HREF="javascript:fullSize('F01xx02x.htm')"> <img src="images/F01xx02.JPG" width=404 height=270 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 1.2</b> <i>Adding a component to a project using the Visual Component Manager</i><!--/caption-->
</P>



<A NAME="54"><H2>Lesson Summary</H2></A>

<P>The Microsoft Solutions Framework (MSF) is a development framework produced by Microsoft Consulting Services (MCS). It is based on Microsoft's internal development methodology, but also includes the practices of hundreds of MCS corporate clients. The MSF includes seven models. This course will focus on the Solutions Design Model. The Solutions Design Model has three design phases: conceptual, logical, and physical design.</P>

<P>In this course, you will create applications that deploy processes and data in a network environment. These applications will conform to the Component Object Model (COM) that has been developed by Microsoft. In order to develop COM solutions, run stored procedures on a database server, and manage your components, certain software must be installed. Visual Basic 6.0 Enterprise Edition is designed for teams of developers creating distributed, high-performance client/server, Internet, or intranet applications. In addition, using tools such as Microsoft Visual Source Safe and the Microsoft Visual Component Manager, the administration of code development in a team environment is made easier.</P>


</BODY>
</HTML>



