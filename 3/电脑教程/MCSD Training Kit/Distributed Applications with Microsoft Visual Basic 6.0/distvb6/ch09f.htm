<HTML>
<HEAD>
<TITLE>Lab: Creating and Deploying MTS Components </TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09e.htm", "ch09g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="367"><H1>Lab: Creating and Deploying MTS Components </H1></A>

<P>In this lab, you will use concepts that you learned throughout this course to create a small, distributed application. This will include using SQL Server to import an Access database, creating stored procedures, and using MTS components.</P>

<p>
<img src="images/video.gif" width=78 height=54 border="0">
</p>

<P>To see a demonstration of this lab, run the Lab09.exe animation located in the Animations folder on the Supplemental Course Material CD-ROM that accompanies this book. </P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Before you can complete this lab, you must have completed the lab in Chapter 5, &quot;<A HREF="ch05a.htm#194">Introducing ActiveX Data Objects</A>&quot; to import the Rsvn database into SQL Server.
</blockquote></div>
</p>

<p><b>Estimated lesson time: 60 minutes</b></p>

<A NAME="368"><H2>Exercise 1: Setting up the Chateau Database</H2></A>

<P>In this exercise, you will set up the Chateau St. Mark hotel database. First, you will import a normalized version of the Rsvn database that you created in Lab 5-the Chateau.mdb file. You will use the SQL Server Enterprise manager to import the .mdb file into SQL Server. You will then create two stored procedures to be used in the remaining exercises in this lab.</P>

<P><li><B> Import the Chateau.mdb database</B></li></P>

<ol>
<p><li> Start SQL Server Enterprise Manager and select the Databases folder in your SQL Server.</li></p>

<p><li> From the <B>Tools</B> menu, point to <B>Data</B> <B>Transformation</B> <B>Services</B>, then click <B>Import</B> <B>Data</B>. </li></p>

<p>The Data Transformation Services Import Wizard opens.</p>

<p><li> Click <B>Next</B> to import the Chateau.mdb database.</li></p>

<p><li> In the Choose a Data Source dialog, select <B>Microsoft</B> <B>Access</B> from the Source drop-down list box.</li></p>

<p><li> To browse to the Chateau.mdb file, click the ellipses (<B>...</B>) button on the right side of the File name textbox.</li></p>

<p>The Select File dialog box appears.</p>

<p><li> Select the <B>Chateau.mdb</B> file from the \Labs\Lab09 folder on your Supplemental Course Material CD-ROM, then click <B>Open</B>.</li></p>

<p><li> Click <B>Next</B> to choose a destination for the database.</li></p>

<p>The Choose a Destination dialog box appears.</p>

<p><li> In the Destination drop-down list box, select <B>Microsoft OLE DB Provider for SQL Server</B>.</li></p>

<p><li> Select your SQL Server in the Server drop-down list box.</li></p>

<p><li> In the Database drop-down list box, select <B>New</B>.</li></p>

<p>The Create Database dialog appears.</p>

<p><li> For the database name, type <B>Chateau</B> in the Name textbox, then click <B>OK</B>.</li></p>

<p><li> Click <B>Next</B> to specify the tables to import into SQL Server.</li></p>

<p>The Specify Table Copy or Query dialog box appears.</p>

<p><li> Click the <B>Copy table(s) from the source database </B>option, then click <B>Next</B>.</li></p>

<p><li> In the Select Source Tables dialog box, click <B>Select</B> <B>All</B>, then click <B>Next</B>.</li></p>

<p>The Save, Schedule and Replicate Package dialog box appears.</p>

<p><li> Make sure <B>Run</B> <B>immediately</B> is checked, then click <B>Next</B>.</li></p>

<p>The Completing the DTS Wizard dialog box appears.</p>

<p><li> Click <B>Finish</B> to transfer the data.</li></p>

<p><li> A message box should be displayed indicating a successful transfer. Click <B>OK</B>, then <B>Done</B> to exit the DTS Import Wizard.</li></p>

<p>After clicking refresh, the Enterprise Manager should display the new Chateau database.</p>
</ol>

<P><li><B> To create stored procedures for the Chateau database</B></li></P>

<ol>
<p><li> Create a stored procedure for the Chateau database named SetRoomStatus using the following T-SQL statements.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CREATE PROCEDURE SetRoomStatus
(
    @RoomNumber varchar(20) = '0',
    @RetCode int OUTPUT
)
AS
If Exists (SELECT Available 
    FROM Rooms 
    WHERE RoomID = @RoomNumber
    AND Available = 1)
BEGIN
UPDATE Rooms
SET Available = 0
WHERE RoomID = @RoomNumber
RETURN 1
END
ELSE
RETURN 0
</pre>
</td></tr>
</table>
</p>

<p><li> Create a stored procedure for the Chateau database named GetIDsFromName using the following T-SQL statements.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CREATE PROCEDURE GetIDsFromName
(
    @paramLastName VARCHAR(50),
    @paramFirstName VARCHAR(50),
    @paramCheckInDate SMALLDATETIME
)
AS
SELECT Reservations.RoomID, Reservations.GuestID, Reservations.ReservationID
FROM Reservations, Guests
WHERE (Reservations.GuestID = Guests.GuestID)
    AND(Guests.LastName = @paramLastName)
    AND (Guests.FirstName = @paramFirstName)
    AND (Reservations.CheckInDate = @paramCheckInDate)
</pre>
</td></tr>
</table>
</p>

<p><li> Create a stored procedure for the Chateau database named ActivateReservation using the following T-SQL statements.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CREATE PROCEDURE ActivateReservation @ID INT
AS
UPDATE Reservations
SET Status = 'ACTIVE'
WHERE ReservationID = @ID
</pre>
</td></tr>
</table>
</p>
</ol>

<A NAME="369"><H2>Exercise 2: Creating the Client Application</H2></A>

<P>In this exercise, you will create a front-end application to allow users of the Chateau St. Mark Hotel reservation system to check in a guest.</P>

<P><li><B> To create a front-end application</B></li></P>

<ol>
<p><li> Create a new Standard EXE project and name it <B>lab09</B>.</li></p>

<p><li> Change the name of Form1 to <B>frmChkIn</B>.</li></p>

<p><li> On frmChkIn, add three text boxes, named <B>txtLastName</B>, <B>txtFirstName</B>, and <B>txtCheckInDate</B>, to allow the user to enter a last name, first name, and check-in date for the guest.</li></p>

<p><li> Add a command button, named <B>cmdCheckIn</B>, that will provide code to call the CheckInGuest method of a component that you will create in the next exercise.</li></p>

<p><li> Add the following code to create the guest check in form functionality.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private objChateauService As Chateau.CService

Private Sub cmdCheckIn_Click()
    Set objChateauService = New Chateau.CService
    If objChateauService.CheckInGuest(txtLastName, txtFirstName, _
        txtCheckInDate) Then
        MsgBox &quot;Check-in successful.&quot;
    Else
        MsgBox &quot;Check-in unsuccessful.&quot;
    End If
    Set objChateauService = Nothing
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Your form should look similar to the illustration in Figure 9.10.</p>

<P>
<A HREF="javascript:fullSize('F09xx10x.htm')"> <img src="images/F09xx10.JPG" width=404 height=242 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 9.10</b> <i>Guest check-in form containing input controls</i><!--/caption-->
</P>

</ol>

<A NAME="370"><H2>Exercise 3: Creating the Chateau COM DLL</H2></A>

<P>In this exercise, you will create a COM DLL that contains three classes: CService, CRoom, and CRsvn. Each of these classes will be implemented in an MTS package in the next exercise.</P>

<P><li><B> To create the Chateau.dll project</B></li></P>

<ol>
<p><li> Add a new ActiveX DLL project to the lab09 project.</li></p>

<p><li> Name the ActiveX DLL project <B>Chateau</B>.</li></p>

<p><li> Change the name of Class1 to <B>CService</B>.</li></p>

<p><li> Add two more MultiUse classes named <B>CRoom</B> and <B>CRsvn</B>.</li></p>
</ol>

<P><li><B> To create the CRoom component</B></li></P>

<ol>
<p><li> Set the MTSTransactionMode property to <B>UsesTransaction</B>.</li></p>

<p><li> In the References dialog box, check <B>Microsoft ActiveX Data Objects 2.0 Library</B> and <B>Microsoft Transaction Server Type Library</B>.</li></p>

<p><li> In the General Declarations section of CRoom, declare an ADO connection object, an MTS ObjectContext object, and implement the ObjectControl interface as follows.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private cnChateau As ADODB.Connection
Private ctxObject As MTxAS.ObjectContext
Implements ObjectControl
</pre>
</td></tr>
</table>
</p>

<p><li> In the ObjectControl_Activate event procedure, set the ObjectContext variable using the GetObjectContext, and use the cnChateau Connection object to connect to the Chateau database on your SQL Server.</li></p>

<p><li> Add procedures for the ObjectControl_Deactivate and ObjectControl_CanBePooled events.</li></p>

<p><li> Create a method called SetRoomAvailability using the following subroutine declaration. </li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Sub SetRoomAvailability(RoomNumber As String)</pre>
</td></tr>
</table>
</p>

<p><li> In the SetRoomAvailability method, create an ADO Command object to run the SetRoomStatus stored procedure.</li></p>

<p>You will have to create ADO parameter objects to run the SetRoomStatus stored procedure. For example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>With comRoom
    .ActiveConnection = cnChateau
    .CommandType = adCmdStoredProc
    .CommandText = &quot;SetRoomStatus&quot;
    .Parameters.Append .CreateParameter(&quot;RoomNumber&quot;, _
        adVarChar, adParamInput, 20, RoomNumber)
    .Parameters.Append .CreateParameter(&quot;Available&quot;, _
        adInteger, adParamOutput)
    .Execute
End With
</pre>
</td></tr>
</table>
</p>

<p><li> Use the ObjectContext variable's SetAbort method if any operation fails, and use the SetComplete method if all operations succeed in the method. For example:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>If comRoom.Parameters(&quot;Available&quot;).Value &lt;&gt; 1 Then
    ' Room not available
    ctxObject.SetAbort
Else
    ctxObject.SetComplete
    Set comRoom = Nothing
End If
</pre>
</td></tr>
</table>
</p>
</ol>

<P><li><B> To create the CRsvn component</B></li></P>

<ol>
<p><li> Set the MTSTransactionMode property to <B>UsesTransaction</B>.</li></p>

<p><li> Create an MTS ObjectContext, and an ADO connection object to connect to the Chateau database as you did in the CRoom class module.</li></p>

<p>Use the ObjectControl_Activate event procedure to connect to the database and call the GetObjectContext function. In addition, add procedures for the ObjectControl_Deactivate and ObjectControl_CanBePooled events.</p>

<p><li> Create a method called ValidateReservation using the following subroutine declaration.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Sub ValidateReservation(ByVal LastName As String, _
    ByVal FirstName As String, ByVal CheckInDate As Date, _
    RoomID As String, GuestID As Double, ReservationID As Double)
</pre>
</td></tr>
</table>
</p>

<p><li> In the ValidateReservation method, write code to execute the GetIDsFromName stored procedure.</li></p>

<p>The GetIDsFromName stored procedure requires three parameters and will return a Recordset containing the last name, first name, and check-in date for the guest's reservation. You must create ADO parameter objects and call the CreateParameter method of the Command object. In addition, you must use the Recordset that is returned from the stored procedure to retrieve the reservation data. For example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Create parameters
.Parameters.Append .CreateParameter(&quot;paramLastName&quot;, _
    adVarChar, adParamInput, 50, LastName)
.Parameters.Append .CreateParameter(&quot;paramFirstName&quot;, _
    adVarChar, adParamInput, 50, FirstName)
.Parameters.Append .CreateParameter(&quot;paramCheckInDate&quot;, _
    adDBTimeStamp, adParamInput, , CheckInDate)

' Execute the Command
Set rsIDsFromName = comIDsFromName.Execute

' Retrieve values from the Recordset 
GuestID = CStr(rsIDsFromName![GuestID])
RoomID = rsIDsFromName![RoomID]
ReservationID = CDbl(rsIDsFromName![ReservationID])
</pre>
</td></tr>
</table>
</p>

<p><li> If any operations fail, call the SetAbort method of the ObjectContext, and call SetComplete if all operations are successful.</li></p>

<p><li> Create a method named SetResStatus using the following subroutine declaration.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Sub SetResStatus(ReservationID As Double)</pre>
</td></tr>
</table>
</p>

<p><li> In the SetResStatus method, call the ActivateReservation stored procedure.</li></p>

<p>You will have to create an ADO parameter for the ReservationID parameter in the ActivateReservation stored procedure. This stored procedure will set the reservation status to active in the database.</p>

<p><li> If any operations fail, call the SetAbort method of the ObjectContext variable, and call the SetComplete method if all operations are successful.</li></p>
</ol>

<P><li><B> To create the CService component</B></li></P>

<ol>
<p><li> Set the MTSTransactionMode property to <B>RequiresNewTransaction</B>.</li></p>

<p><li> In the General Declarations section of CService, declare an ObjectContext MTS object.</li></p>

<p><li> Create a method called CheckInGuest using the following function declaration.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Function CheckInGuest(LastName As String, _
    FirstName As String, CheckInDate As Date) As Boolean
</pre>
</td></tr>
</table>
</p>

<p><li> This method will be used to call methods of other MTS components. If any of the MTS objects that the CheckInGuest method calls is not successful, the entire transaction will be aborted.</li></p>

<p><li>Call the GetObjectContext function to set the ctxObject variable, as shown in the following example.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Get the object's ObjectContext
Set ctxObject = GetObjectContext()
</pre>
</td></tr>
</table>
</p>

<p><li> Create an instance of the CRsvn component using the following code.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set objRsvn = ctxObject.CreateInstance(&quot;Chateau.CRsvn&quot;)</pre>
</td></tr>
</table>
</p>

<p><li> Call the ValidateReservation method of the CRsvn component using the following code.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Get the room number for the reservation
objRsvn.ValidateReservation LastName, FirstName, _
    CheckInDate, RoomNumber, GuestID, ReservationID
</pre>
</td></tr>
</table>
</p>

<p><li> Set the guest's room availability status to occupied by creating an instance of the CRoom component and calling the SetRoomAvailibility method, as shown in the following code.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Make the room not available in the database
Set objRoom = ctxObject.CreateInstance(&quot;Chateau.CRoom&quot;)
objRoom.SetRoomAvailability RoomNumber
</pre>
</td></tr>
</table>
</p>

<p><li> Set the guest's reservation status to ACTIVE in the database by calling the SetResStatus method, as shown in the following example.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Set reservation status to ACTIVE
objRsvn.SetResStatus ReservationID
' All operations were successful, call SetComplete
ctxobject.SetComplete
Exit Function
HandleError:
    ' There was an error, call SetAbort
    ctxObject.SetAbort
End Function
</pre>
</td></tr>
</table>
</p>
</ol>

<A NAME="371"><H2>Exercise 4: Deploying Your COM DLL with MTS</H2></A>

<P>In this exercise, you will compile your COM DLL and move it into MTS. You will then create an MTS package to install your components on a client computer to run your application.</P>

<P><li><B> To deploy your components</B></li></P>

<ol>
<p><li> Compile your ActiveX DLL project to create the Chateau.dll file.</li></p>

<p><li> Create an empty package in MTS named <B>Chateau</B>.</li></p>

<p><li> Add the components in the Chateau.dll file to the Chateau package in MTS.</li></p>

<p><li> Export the Chateau package to a folder on the client computer.</li></p>

<p>Save the new package file as <B>Chateau.pak</B>.</p>

<p><li> Run the <B>Chateau.exe</B> file located in the Clients subfolder where you exported the Chateau package.</li></p>

<p>The Chateau.exe program transfers type libraries and proxy-stub DLLs for the Chateau package to the Remote Applications folder in the Program Files folder.</p>

<p><li> Open the Lab09.vbp client front-end project that you created.</li></p>

<p><li> Set a reference to the <B>Chateau</B> component.</li></p>

<p><li> Run the guest check-in front end application.</li></p>

<p>The frmCheckIn form appears.</p>

<p><li> Type <B>Chai</B> for last name value, <B>Sean</B> for the first name value, <B>5/26/99</B> for the check-in date value, then click <B>Check</B> <B>In</B>.</li></p>

<p>Figure 9.11 illustrates this process.</p>

<P>
<A HREF="javascript:fullSize('F09xx11x.htm')"> <img src="images/F09xx11.JPG" width=404 height=132 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 9.11</b> <i>Entering data to check in a guest</i><!--/caption-->
</P>


<p><li> Open the Rooms and Reservations tables in SQL Server.</li></p>

<p>Notice that the Rooms and Reservations table have been updated for the guest that you checked-in.</p>
</ol>

</BODY>
</HTML>



