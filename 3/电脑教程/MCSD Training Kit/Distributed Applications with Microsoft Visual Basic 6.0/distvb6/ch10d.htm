<HTML>
<HEAD>
<TITLE>Lesson 3: Implementing Security in Microsoft Transaction Server</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10c.htm", "ch10e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="393"><H1>Lesson 3: Implementing Security in Microsoft Transaction Server</H1></A>

<p>This lesson explains how <I>roles</I> are used in building secured COM components that execute in the MTS run-time environment.</p>

<p>MTS utilizes the security capabilities of Windows NT. As you learned in Lesson 2, Windows NT provides platform logins based on a user ID and password. Access control to resources is given to users and groups. MTS extends access control to the individual interfaces of components. This kind of low-level access control can be administered within Windows NT users and groups, or implemented programmatically within application components.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>

<p><li>Identify the relationship between MTS roles and Windows NT accounts.</li></p>

<p><li>Add new roles to an MTS package.</li></p>

<p><li>Add users to MTS package roles.</li></p>

<p><li>Use declarative and programmatic security in MTS.</li></p>

</ul>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div>
</p>

<A NAME="394"><H2>Understanding Roles and Security</H2></A>

<P>MTS provides security by allowing you to define role<I>s</I>. As you learned in Lesson 2, a role is an administrative unit that defines a group of related users for the set of components in a package. However, MTS roles are different from SQL Server roles. In MTS, users of a role are based on Windows NT domain users and groups specified during the deployment of a package. You can use the MTS Explorer to map each role to specific classes or interfaces on those classes. MTS ensures that the Windows NT accounts (users and groups) defined in a role can only access the classes and interfaces to which their roles are mapped. Users who are not assigned to a role with access privileges to a package will not be able to use the package. MTS uses roles to determine who can use a component in a package whenever a call is made from outside the package, as illustrated in Figure 10.6. This includes method calls from an object in one package to an object in another package. As you learned in Chapter 9, &quot;<A HREF="ch09a.htm#329">Using Microsoft Transaction Server</A>,&quot; you don't have to write any special code in your components to handle this type of security, called <I>declarative</I> <I>security</I>; it is automatically provided by MTS.</P>

<P>
<A HREF="javascript:fullSize('F10xx06x.htm')"> <img src="images/F10xx06.JPG" width=404 height=183 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.6</b> <i>MTS checks roles when a call is made from outside a package</i><!--/caption-->
</P>


<P>MTS checks security on each method call to prevent an authorized client from passing an interface pointer to a client that is not authorized. If the unauthorized client calls a method on the interface pointer, it is denied access. Method calls from one component to another inside a package are not checked because components in the same package trust each other.</P>

<A NAME="395"><H2>Setting Package Properties</H2></A>

<P>The properties dialog box for a package contains a Security tab that displays security information about the selected package. In this property sheet, you can enable MTS to check the security credentials of any client that calls the package, thereby activating declarative security for the package. Figure 10.7 illustrates the Enable authorization checking option.</P>

<P>
<img src="images/F10xx07.GIF" width=404 height=448 border=0>
</P><P>
<!--caption--><b>Figure 10.7</b> <i>Enabling authorization checking on the Chateau package</i><!--/caption-->
</P>


<P>In addition to setting security properties, you can use the Identity tab to set the user identity for all components running in a given package. You can configure a package (which is a single server process) to run as one of the following package identities:</P>

<ul>
<p><li>Interactive User </li></p>

<p><li>A specified Windows NT user account</li></p>
</ul>

<P>By default, MTS packages run as Interactive User, as illustrated in Figure 10.8.</P>

<P>
<img src="images/F10xx08.GIF" width=404 height=448 border=0>
</P><P>
<!--caption--><b>Figure 10.8</b> <i>Setting a package to run as the interactive user</i><!--/caption-->
</P>


<P>However, it is sometimes preferable to run a package as a Windows NT user. In an n-tier application, you can use declarative security based on package identity between the server and data source. You can restrict access to a data source by assigning an identity to a package and configuring the database to accept updates according to package identity. If you use package identity to set up your database security, the database recognizes the package identity as a single user. If database access occurs under an identity set by the package, the database connection set up for the package identity name can be used by all the users mapped to role or roles for that package. This kind of resource sharing improves application performance and scalability. </P>

<P>For example, consider a Marketing package that updates a SQL Server database with customer and product information. You can use package identity to restrict access to the database by setting database access privileges for user accounts that are associated with the package role(s). In this case, SQL Server should be setup to allow mixed security. Then each package identity can be mapped to a SQL login. This login will then be given the proper access to databases and database objects. This approach to database security has a number of advantages:</P>

<ul>
<p><li>Since the user does not login directly to the database, all database access can be totally encapsulated by the business component. This ensures data integrity.</li></p>

<p><li>Since multiple concurrent users all connect to the database in the same way, MTS can use connection pooling to reduce the load on the database, thus improving scalability dramatically.</li></p>

<p><li>Because each user does not need a login to the server, it reduces administration when setting up application access.</li></p>

<p><li>Instead of thinking about end-user security in terms of databases and tables, MTS allows you to think about security in terms of the roles that an individual plays in the organization. This is a much more natural way of administering security.</li></p>
</ul>

<P>When setting package identity to run as a specific user, you must be logged on to the computer that maps to that user. MTS validates the password that is entered; however, if the password for the Windows NT user account is changed without updating the password in the MTS Explorer, the package cannot run. All components within a package will run under the identity established for the package. If two components must run under different identities then they should be separated into two different packages.</P>

<P><li><B> To set package identity to a specified user account</B></li></P>

<ol>
<p><li>In MTS, select the package whose identity you want to change. </li></p>

<p><li>On the <B>Action</B> menu, click <B>Properties</B> and select the <B>Identity</B> tab. </li></p>

<p><li>Select the <B>This</B> <B>user</B> option.</li></p>

<p><li>In the User text box, type the domain followed by a backslash (\) and then the user name.</li></p>

<p>You can also click <B>Browse</B> to search for a user name.</p>

<p><li>In the password text boxes type the password for the Windows NT user account and then click <B>OK</B>.</li></p>
</ol>

<A NAME="396"><H3>Adding a New MTS Role</H3></A>

<P>Although you usually add new roles during package development, you may have to add a new role to an existing package. Roles represent a set of system-level privileges that are required for a particular business function. Roles are set at the package level. You can use the MTS Explorer to map Windows NT users or groups of users to the roles that you create.</P>

<P><li><B> To create a new role</B></li></P>

<ol>
<p><li>In the left pane of the MTS Explorer, select the package that will include the role. </li></p>

<p><li>Open the <B>Roles</B> folder.</li></p>

<p>In the MTS explorer, the Roles folder contains the roles assigned for a selected package. MTS allows you to define roles that determine user access for a package, component, or interface.</p>

<p><li>Right-click the <B>Roles</B> folder, point to <B>New</B>, then click <B>Role,</B> as illustrated in Figure 10.9.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx09x.htm')"> <img src="images/F10xx09.JPG" width=404 height=279 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.9</b> <i>Adding a new role to an MTS package</i><!--/caption-->
</P>


<p><li>In the New Role dialog box that appears, type the name of the new role, as illustrated in Figure 10.10.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx10x.htm')"> <img src="images/F10xx10.JPG" width=404 height=279 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.10</b> <i>Assigning a name to the new role</i><!--/caption-->
</P>


<p><li>Click <B>OK</B>.</li></p>
</ol>

<P>After the role has been created, you can map Windows NT user and group accounts to the role by using the dialog box illustrated in Figure 10.11.</P>

<P>
<A HREF="javascript:fullSize('F10xx11x.htm')"> <img src="images/F10xx11.JPG" width=404 height=378 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.11</b> <i>Mapping Windows NT accounts to a role</i><!--/caption-->
</P>


<A NAME="397"><H2>Using Programmatic Security </H2></A>

<P>In addition to the default declarative security that MTS offers, you can also use another type of security called <I>programmatic</I> <I>security</I>. Programmatic security is provided by code that you write in your component to determine if a client is authorized to perform an operation. You can use MTS security methods after you set a reference to the Microsoft Transaction Server Type Library in Visual Basic to declare an ObjectContext object variable. The ObjectContext object provides two methods for basic programmatic security: </P>

<ul>
<p><li>IsCallerInRole</li></p>

<p><li>IsSecurityEnabled</li></p>
</ul>

<P>The IsCallerInRole method determines if a client that invokes a method of an object (caller) is assigned to a role. You can use roles to determine whether the caller has access to objects in the server process. The following example checks to see if the caller is in the Managers role if over $500 is to be spent.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
' Check for security in the Payment object
If (lngAmount &gt; 500 Or lngAmount &lt; -500) Then
    If Not ctxObject.IsCallerInRole(&quot;Managers&quot;) Then
        Err.Raise Number:=ERROR_NUMBER, _
            Description:=&quot;Need 'Managers' role &quot; + _
            &quot;for amounts over $500&quot;
    End If
End If
</pre></td></tr></table></p>

<P>The IsSecurityEnabled method determines if security checking is enabled on the component's package. IsSecurityEnabled can be a useful check to make before using IsCallerInRole to verify that the package supports authorization checking. The following example checks to see if security is enabled, and then checks to see if the caller is in the Managers role.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim objContext As ObjectContext
Set objContext = GetObjectContext()

If Not objContext Is Nothing Then
    ' Find out if Security is enabled
    If objContext.IsSecurityEnabled Then
        ' Find out if the caller is in the right role
        If Not objContext.IsCallerInRole(&quot;Managers&quot;) Then
            ' Error - must be a manager
        Else
            ' Process expenditure
        End If
    Else
    ' Security is not enabled
    End If
End If
</pre></td></tr></table></p>

<P>However, MTS security is enabled only if an object is running in a separate server process. If the object is running in the client's process, there is no security checking and IsSecurityEnabled will always return False. This could be either because the object's component was configured to run in a client's process, or because the component and the client are in the same package.</P>

<A NAME="398"><H2>Lesson Summary </H2></A>

<P>MTS utilizes the security capabilities of Windows NT and provides security by allowing you to define roles. A role is a name that defines a group of related users for the set of components in a package based on Windows NT domain users and groups during the deployment of a package. To enable security on an MTS package you must set the Enable authorization checking option on the package's property page. MTS then uses roles to determine who can use a component in a package whenever a call is made from outside the package. This type of security is called declarative security and is automatically provided by MTS. You can also set the user identity for all components running in a package. By default, MTS packages run as Interactive User.</P>

<P>To use more customized security in your components, you can implement programmatic security. Programmatic security is code that you write in your component to determine if a client is authorized to perform operations. The two basic programmatic security methods are IsCallerInRole and IsSecurityEnabled.</P>

</BODY>
</HTML>



