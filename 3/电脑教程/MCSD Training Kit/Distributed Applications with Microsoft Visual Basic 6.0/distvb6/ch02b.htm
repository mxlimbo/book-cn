<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of User Interface Elements</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02a.htm", "ch02c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="79"><H1>Lesson 1: Overview of User Interface Elements</H1></A>

<P>Forms provide a framework that you can use throughout your application to give a consistent look and feel to your user interface. Forms and controls are critical elements of a user interface. They are graphical tools with a variety of properties that you use to create and/or enhance the functionality of an application. Events are the actions that take place in a Visual Basic application.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>
<p><li>Discuss the two types of Visual Basic controls.</li></p>

<p><li>Add controls to a form.</li></p>

<p><li>Explain control arrays.</li></p>

<p><li>Set control and form properties.</li></p>

<p><li>Assign code to event properties.</li></p>

<p><li>Explain control and form collections. </li></p>

</ul>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>

<A NAME="80"><H2>Controls</H2></A>

<P>Controls are objects that you add to a form. Each has its own set of properties, methods, and events that provide a specific capability to your application. In designing an application, you add the appropriate controls to the form, but you can also create controls dynamically.</P>

<A NAME="81"><H3>ActiveX Controls</H3></A>

<P>There are two categories of ActiveX controls in Visual Basic: </P>

<ul>
<p><li>Standard controls </li></p>

<p>Also known as inherent or intrinisic controls, Visual Basic includes standard controls in the Toolbox by default. Some examples of these controls are the command button and text box. </p>

<p><li>Custom controls </li></p>

<p>Also called third-party controls, custom controls are controls that you can add to your project. Some are included with Visual Basic, and others are available from third-party vendors. Some examples of custom controls are the &quot;Microsoft Windows Common Controls 6.0&quot; and the &quot;Microsoft Masked Edit Contol 6.0.&quot; The Professional and Enterprise editions of Visual Basic let you build your own custom controls.</p>
</ul>

<P>ActiveX controls increase your capabilities as a Visual Basic programmer. They retain some familiar properties, events, and methods, such as the Name property,  which behave as you would expect. However, they also have additional methods and properties that allow you to incorporate almost any function imaginable into your application. For example, the Visual Basic Professional and Enterprise editions include the Windows Common controls that allow you to create applications with the look and feel of the Windows toolbars, status bars, and tree views of directory structures. Other ActiveX controls allow you to create applications that take full advantage of the Internet. Files that have an .ocx extension contain ActiveX controls.</P>

<P>The following are some of the ActiveX controls commonly used to display data:</P>

<ul>
<p><li>TreeView</li></p>

<p>Use the TreeView control to display data that is hierarchical in nature, such as organization trees, the entries in an index, or files and directories.</p>

<p><li>ListView</li></p>

<p>Use the ListView control to represent subsets of data, such as database objects. The ListView control displays data as ListItem objects. Each ListItem object can have an optional icon associated with the label of the object. In addition, data can be represented as discrete objects, such as document templates.</p>

<p><li>ImageList</li></p>

<p>Use the ImageList control to manage images. Insert pictures at design time or run time, and access them at run time.</p>

<p><li>ToolBar</li></p>

<p>Use the ToolBar control to give users quick access to frequently used operations. Add Button objects to the control, and associate images, text, and ToolTips with each button. Allow the user to reconfigure the ToolBar control by setting the AllowCustomize property.</p>

<p><li>StatusBar</li></p>

<p>Use the StatusBar control to provide a horizontal bar (a status bar), usually across the bottom of a parent form, in which you can display various kinds of application status data. You can divide the StatusBar control into a maximum of 16 Panel objects, which are contained in the Panels collection.</p>
</ul>

<p><b>Adding ActiveX Controls</b></p>

<P>You must add ActiveX controls that are not standard in Visual Basic to the Toolbox before you can use them. When you add an ActiveX control to a project, the control becomes part of the development and run-time environment and provides new functionality for your application.</P>

<P>To use an ActiveX control in a project, select it in the Controls tab of the Components dialog box (see Figure 2.1) to add it to the Visual Basic Toolbox.</P>

<P>
<A HREF="javascript:fullSize('F02xx01x.htm')"> <img src="images/F02xx01.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 2.1</b> <i>The Components dialog box</i><!--/caption-->
</P>


<P>If the control you want is not listed in the Components dialog box, the control is not registered on your computer. To register the control and have it appear in the Components dialog box, you must first install it using the vendor's installation program. Then you can add the control to a project. </P>

<P>After you add a control to a project, the control remains a part of the project's workspace. You cannot remove the control from the Toolbox if it is being used in your project. When you open a different project, the Toolbox appears as it was prior to adding the ActiveX control.</P>

<p><li><b>To add an ActiveX control to the Components dialog box</B></li></P>

<ol>
<p><li>In the <B>Components</B> dialog box, click <B>Browse</B>.</li></p>

<p>The <B>Add ActiveX Control</B> dialog box appears. </p>

<p><li>Locate the control you want by searching directories for files with an .ocx filename extension. </li></p>

<p><li>Select the appropriate .ocx file and click <B>Open</B> to load the control. </li></p>

<p>The new control appears in the <B>Components</B> dialog box.</p>
</ol>

<p><li><b>To add an ActiveX control to the Toolbox</B></li></P>

<ol>
<p><li>On the <B>Project</B> menu, click <B>Components</B>. (You can also right-click the <B>Toolbox</B> and click <B>Components</B>.)</li></p>

<p>The <B>Components</B> dialog box appears; the <B>Controls</B> tab is the default. </p>

<p><li>Select the check box to the left of the name of the appropriate control.</li></p>

<p><li>Click <B>OK</B> to close the <B>Components</B> dialog box.</li></p>

<p>The new control appears in the Toolbox.</p>
</ol>

<P>After you add the control to the Toolbox, you can add it to your form. You can then set properties for the control. </P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Set the Name property of a control to determine how you refer to the control in code. You should follow standard naming conventions when naming a control. For more information, search on &quot;Visual Basic Coding Conventions&quot; in the MSDN Online Help.
</blockquote></div>
</p>


<p><b>Removing ActiveX Controls</b></p>

<P>It is important to remove any unused controls from the project. When you package your application for distribution, Visual Basic does not verify that all controls selected in the Components dialog box are required by the application. If you do not remove unused controls, they are included in the setup files created by the Package and Deployment wizard. This makes the distribution size larger and adds unnecessary overhead to the application. You cannot remove a control from the Toolbox if an instance of that control is used on any form in the project.</P>

<p><li><b>To remove a control from a project</B></li></P>
<ol>

<p><li>On the <B>Project</B> menu, click <B>Components</B>.</li></p>

<p>You can also right-click the <B>Toolbox</B> and click <B>Components</B>.</p>

<p>The <B>Components</B> dialog box appears. </p>

<p><li>Clear the check box next to each control you want to remove.</li></p>

<p><li>Click <B>OK</B> to close the <B>Components</B> dialog box. </li></p>

<p>The control icons are removed from the <B>Toolbox</B>.</p>
</ol>

<A NAME="82"><H3>Using Control Arrays</H3></A>

<P>Visual Basic 6.0 provides several additional tools that help you create efficient and flexible applications. One of these is the control array, a group of controls that share the same name, type, and event procedures. However, elements of a control array retain their individual property settings. For example, you can use the Index, Caption, or Tag properties to distinguish one control from another. </P>

<P>A control array has at least one element and can have as many as 32,768; its size depends on the memory and Windows resources each element requires. You reference individual elements in the control array by an index. Common uses for control arrays include menu controls and option button groupings.</P>

<p><b>Coding a Control Array</b></p>

<P>You refer to a control in a control array with the following syntax: </P>

<p><I>controlname</I>(<I>index</I>).<I>property = expression</I></p>

<P>The index value determines which element in the control array is being referenced. You specify the index of an element when you create it. For example, when the control chkPreferences(2) recognizes the Click event, Visual Basic invokes the event procedure chkPreferences_Click and passes the index value 2 as an argument. The following code demonstrates using the Select Case statement to evaluate the index value passed to the chkPreferences_Click procedure. </P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub chkPreferences_Click(Index As Integer)
    If chkPreferences(Index).Value = vbChecked Then
        Select Case Index
            Case 0
                MsgBox &quot;You will be notified by mail&quot;
            Case 1
                MsgBox &quot;You will be notified by phone&quot;
            Case 2
                MsgBox &quot;You will not be notified&quot;
        End Select
    End If
End Sub
</pre></td></tr></table></p>

<A NAME="83"><H3>Creating Controls at Run Time</H3></A>

<P>Visual Basic lets you create controls at run time, giving you the flexibility to customize the interface according to the needs of the user. You use the Load statement or Add method to create controls dynamically. You use the Unload statement and Remove method to delete those controls. </P>
<ul>
<p><li>Load statement</li></p>

<p>After you establish a control array, the Load statement copies all property settings except Visible, Index, and TabIndex from the lowest existing element in the array.</p>

<p><li>Unload statement  </li></p>

<p>If you dynamically create controls, you can use the Unload statement to remove these controls. If you try to unload a control that was created at design time or that has already been unloaded, a run-time error occurs.</p>

<p><li>Add method</li></p>

<p>Visual Basic 6.0 has the capability to add controls dynamically without using a control array. The Add method lets you add controls to an application at run time.</p>

<p><li>Remove method</li></p>

<p>To remove any controls added dynamically, use the Remove method. </p>
</ul>
<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You can use the Remove method only with controls added using the Add method (in contrast to controls added using the Load statement).
</blockquote></div>
</p>

<P>The following code sample shows how to dynamically add a control named txtControlName to the frmName form using the Add method.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim ctlWName As Control
Set ctlWName = frmName.Controls.Add(&quot;VB.TextBox&quot;, _
     &quot;txtControlName&quot;, frmName)
With ctlName
     .Visible = True
     .Top = 200
     .Left = 200
     .Width = 2000
     .Height = 200
     .Font.Size = 10
End With
</pre></td></tr></table></p>

<P>The following code sample shows how to dynamically remove a control named txtControlName from the frmName form using the Remove method.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
frmName.Controls.Remove &quot;txtControlName&quot;
</pre></td></tr></table></p>

<P>For more information on dynamically adding controls, see <I>Desktop Applications for Microsoft Visual Basic 6.0 MCSD Training Kit </I>(Microsoft Press).</P>

<A NAME="84"><H2>Setting Properties</H2></A>

<P>You can set form and control properties at design time or at run time. Setting properties at design time lets you establish default values used in the application. Setting properties at run time lets you programmatically control objects as the application is running.</P>

<A NAME="85"><H3>Setting Properties at Design Time</H3></A>

<P>To set properties at design time, you use the Properties window, which is illustrated in Figure 2.2. You can set properties for a single control or for multiple controls.</P>

<P>
<img src="images/F02xx02.GIF" width=237 height=366 border=0>
</P><P>
<!--caption--><b>Figure 2.2</b> <i>The Properties window</i><!--/caption-->
</P>


<p><li><b>To set a control property at design time</B></li></P>

<ol>
<p><li>Right-click a control and click <B>Properties</B>, or left-click the control and click <B>F4</B>.</li></p>

<p><li>Type the value in the appropriate property box.</li></p>
</ol>

<p><li><b>To set a property for multiple controls at design time</B></li></P>

<ol>
<p><li>Click and drag the mouse over the controls you want to select, or press <B>CTRL</B> and click the controls.</li></p>

<p>The <B>Properties</B> window displays those properties that are common to the selected controls.</p>

<p><li>Type the value in the appropriate property box.</li></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
When you have selected multiple controls, the Properties window displays the properties that the selected controls have in common. When you make changes to those properties, the changes apply to all of the selected controls.
</blockquote></div>
</p>

<A NAME="86"><H3>Setting Properties at Run Time</H3></A>

<P>To set control properties at run time, use the following syntax:</P>

<p><I>objectname.property</I> = <I>expression</I></p>

<P>The following example sets the Font.Bold property to True for the txtData<B> </B>text box:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
'Set text to bold
txtData.Font.Bold = True
</pre></td></tr></table></p>

<P>The following example sets the Text property of the text box txtData:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
'Set value of text
txtData.Text = &quot;Hello World&quot;
</pre></td></tr></table></p>

<P>Some controls have default properties. This allows you to omit the property name when you set the control's default property. For example, the default property of a text box is the Text property. The default property of a label is the Caption property.</P>

<P>The following code sets the default Text and Caption properties for a text box and a label:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
txtData = &quot;Set the Text property of this text box&quot;
lblData = &quot;Set the Caption property of this label&quot;
</pre></td></tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
For consistency and readability, always include the object's property name.
</blockquote></div>
</p>

<A NAME="87"><H2>Managing Events</H2></A>

<P>After you add the necessary forms to your project and set the startup form, you must determine which events your application will respond to. An <I>event</I> is a signal to your application that some kind of system or user activity has taken place. Your application can respond to events by including event procedures in its Form modules. An <I>event procedure</I> is simply a procedure that is executed in response to a particular event. One example is the Form Click event procedure, which runs whenever the mouse is clicked on the form.</P>

<P>Visual Basic events are <I>triggered</I>, or <I>fired</I>, by the system or by user action. The Timer event in a Timer control is an example of a system event. When a user interacts with an object in any way - by tabbing to it, clicking it, or moving the mouse pointer over it, for example - the object responds by firing events. Event procedure code is executed automatically in response to some user action. For example, code written for the Click event is automatically executed by the system when the user clicks a control. </P>

<P>Often, a user action triggers multiple events. For example, when a user clicks a command button, the following events occur:</P>

<ul>
<p><li>GotFocus (if focus was on another control previously)</li></p>

<p><li>MouseDown</li></p>

<p><li>Click</li></p>

<p><li>MouseUp</li></p>
</ul>

<P>Not every event needs a programmatic response to the user interaction. The type of object used often determines the events you will respond to. For example, you could simply write code in a command button object's Click event procedure and not write any code to respond to the MouseDown or MouseUp events.</P>

<P>Each object's events are independent of other objects' events. For example, even though a command button is on a form, the form's Click event does not fire when a user clicks the command button; only the button's<I> </I>Click event procedure executes.</P>

<A NAME="88"><H2>Standard Form Events</H2></A>

<P>You can use many types of form events. Depending on how you use a form, some of these events may not fire, while others will always fire. Form events are generally triggered in this order:</P>

<ul>
<p><li>Initialize</li></p>

<p><li>Load</li></p>

<p><li>Activate</li></p>

<p><li>Deactivate</li></p>

<p><li>QueryUnload</li></p>

<p><li>Unload</li></p>

<p><li>Terminate</li></p>
</ul>

<A NAME="89"><H3>Initialize</H3></A>

<P>The Initialize event occurs when an application creates an instance of a form before the form is loaded or displayed. However, the Initialize event may only fire once during the life of the application. To have the Initialize event fire again, you must exit and restart the application or set the form equal to Nothing, as shown in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Set Form1 = Nothing
</pre></td></tr></table></p>

<A NAME="90"><H3>Load</H3></A>

<P>The Load event occurs each time that a form is loaded into memory. The first time a form is loaded, the Load event is fired after the Initialize event. A form's Load event can fire multiple times during an application's life. Load fires when a form starts as the result of the Load statement, Show statement, or when a reference is made to an unloaded form's properties, methods, or controls. Both lines in the following code trigger the Load event.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Form1.Show
Load Form1
</pre></td></tr></table></p>

<A NAME="91"><H3>Activate/Deactivate</H3></A>

<P>Both the Activate and Deactivate events fire only when focus is changing within the same application. If you click a different application and then return to the Visual Basic program, neither event fires.</P>

<A NAME="92"><H3>QueryUnload</H3></A>

<P>The QueryUnload event is useful when you need to know how the user is closing the form.</P>

<P>The QueryUnload event fires before the form's Unload event. Only the QueryUnload event provides the UnloadMode argument, which tells you how the form is being closed. The Cancel argument allows you to cancel unloading the form. The following code example closes the form only when the user clicks the Exit command button. The other methods of closing the form (Control menu, Task Manager window, and so on) are ignored if you set the Cancel argument to True.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub Form_QueryUnload(Cancel As Integer, UnloadMode As Integer)
    ' How was the form closed
    If UnloadMode &lt;&gt; vbFormCode Then
        MsgBox &quot;Use the Exit button to close the form&quot;
        Cancel = True ' The form remains open
    End If
End Sub
</pre></td></tr></table></p>

<A NAME="93"><H3>Unload</H3></A>

<P>The Unload event fires before the Terminate event. Use the Form_Unload event procedure to verify that the form should be unloaded or to specify actions that take place when unloading the form. You can also include form-level validation code needed for closing the form or saving data to a file. You can add the End statement to this event to verify that all forms were unloaded before ending the application.</P>

<A NAME="94"><H3>Terminate</H3></A>

<P>The Terminate event fires when all references to an instance of a form are removed from memory. To remove a reference to a form, set the variable that references the form to Nothing.</P>

<A NAME="95"><H2>Using Collections</H2></A>

<P>A collection is a grouping of related objects. There are many types of collections in Visual Basic. A project can have a collection of forms and a form can have a collection of controls. Visual Basic creates some collections automatically, such as when you load forms or controls into your application. You can also create collections of your own by using the Collection object. </P>

<P>A collection is either zero-based or one-based, depending on its starting index. The former means that the index of the first item in the collection is zero, and the latter means it's one. Examples of zero-based collections are the Forms and Controls collections. The Collection object is an example of a zero-based collection, as shown here:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
' Zero based collection
Forms(0).Name
</pre></td></tr></table></p>

<A NAME="96"><H3>Using the Forms Collection</H3></A>

<P>By using the Forms collection you can <I>enumerate, </I>or loop through, all of the forms in your application. You can use the For...Next or the For Each...Next statements to enumerate the items in a collection. You do not need to know the number of items in the collection to use these statements. The following example loops through the Forms collection using a For...Next statement:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim i As Integer
For i = 0 To Forms.Count - 1
    MsgBox &quot;Form '&quot; &amp; Forms(i).Name &amp; &quot;' is open.&quot;
Next i
</pre></td></tr></table></p>


<P>The For Each...Next statement has this syntax:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
For Each element In group
    element.property = expression
    '[statements]
Next element
</PRE>
</TD></TR></TABLE>
</P>

<P>The following example shows enumerating the Forms collection using a For Each...Next statement:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim frm As Form
' Loop through Forms collection.
For Each frm In Forms
    MsgBox &quot;Form '&quot; &amp; Frm.Name &amp; &quot;' is open.&quot;
Next frm
</pre></td></tr></table></p>

<A NAME="97"><H3>Using the Controls Collection</H3></A>

<P>Visual Basic provides an object that contains all of the controls on a form. This object is known as the Controls collection. The Controls collection has a Count property, which returns the number of controls on the form, and an Item method, which returns a member of the collection.</P>

<P>There are two ways to identify a control in the Controls collection: you can reference its index value or you can reference its name, as shown in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Controls(1).Top
Controls(&quot;cmdObject1&quot;).Top
</pre></td></tr></table></p>

<P>You can use the Controls collection to perform an action on a group of controls, such as changing a particular property value for several controls. To determine the type of a control in the Controls collection, you can use the TypeOf keyword with the If statement or the TypeName function. The following code scans the Controls collection, identifying each text box and setting its font size to 12:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Sub cmdChangeFont_Click()
    Dim i As Integer
    For i = 0 To Controls.Count - 1
        If TypeOf Controls(i) Is TextBox Then
            Controls(i).FontSize = 12
        End If
    Next i
End Sub
</pre></td></tr></table></p>

<P>You can also use the For Each statement to loop through collections:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim ctl As Control
For Each ctl In Controls
    If TypeName(ctl) = &quot;TextBox&quot; Then
        ctl.Text=&quot;&quot;
    End If
Next ctl
</pre></td></tr></table></p>

<A NAME="98"><H3>Creating a Collection</H3></A>

<P>A collection provides a way to connect a group of dependent objects with an object that contains them and is useful for keeping track of objects. Unlike arrays, Collection objects don't have to be redimensioned as you add and remove members. </P>

<P>In Visual Basic, you can create you own collection of objects. For example you can create a collection of controls on a form. An Invoice object might have a collection of LineItem objects. The following example creates a new collection named col. The Add method adds three values to the col collection. The new values are then printed to the debug window.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdCollection_Click()
    Dim col As New Collection
    Dim var As Variant
    ' Add item to the col collection
    col.Add &quot;First Value&quot;
    col.Add &quot;Second Value&quot;
    col.Add &quot;Third Value&quot;
    ' Loop through the collection
    ' Print each value to the debug window
    For Each var In col
        Debug.Print var
    Next var
End Sub
</pre></td></tr></table></p>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="99"><H2>Practice: Using the Collection Object's Add Method </H2></A>

<P>In this practice, you will keep track of every control that was dropped onto a list box and not allow any control to be dropped more than once. You can do this by maintaining a Collection that contains references to each control that has been dropped. Figure 2.3 illustrates the layout of the practice form.</P>

<P>
<A HREF="javascript:fullSize('F02xx03x.htm')"> <img src="images/F02xx03.JPG" width=404 height=230 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 2.3</b> <i>Practice form layout</i><!--/caption-->
</P>


<p><li><b>To create the user interface</B></li></P>

<ol>
<p><li>Open a new Visual Basic <B>Standard EXE</B> project.</li></p>

<p><li>Add a list box, five labels, and a command button to the form.</li></p>

<p><li>Set the five labels' <B>DragMode</B> properties to <B>1-Automatic</B>. Set the command button's <B>Name</B> property to <B>cmdListCollection </B>and<B> </B>its<B> Caption</B> property to <B>List Collection</B>. </li></p>

<p><li>Add the following statement to the top of the Form code module to create a form-level Collection object:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private colDroppedControls As New Collection
</pre></td></tr></table></p>

<p><li>Add the following code to the <B>List1_DragDrop</B> event procedure:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub List1_DragDrop(Source As VB.Control, _
        X As Single, Y As Single)
    Dim vnt As Variant
    For Each vnt In colDroppedControls
        ' If the dropped control is in the collection,
        ' it's already been dropped here once.
        If vnt Is Source Then
            Beep
            Exit Sub
        End If
    Next
    ' Save a reference to the control that was dropped
    colDroppedControls.Add Source
    ' Add the name of the control to the list box
    List1.AddItem Source.Name
End Sub
</pre></td></tr></table></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
This example uses the Is operator to compare the object references in the colDroppedControls collection with the Source argument containing the reference to the dropped control. You can use the Is operator can to test the identity of Visual Basic object references; if you compare two different references to the same object, the Is operator returns True. The example also uses the Add method of the Collection object to place a reference to the dropped control in the collection.
</blockquote></div>
</p>

<ol>
<p><li value="6"> Add the following code to the <B>cmdListCollection_Click</B> event procedure:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdListCollection_Click()
    Dim vnt As Variant
    ' Loop through the collection
    ' Print each value to the debug window
    For Each vnt In colDroppedControls
        Debug.Print vnt
    Next vnt
End Sub
</pre></td></tr></table></p>

<p><li>Save and run your application.</li></p>

<p><li>Test the application by dragging each of the labels into the list box. Then click the <B>cmdListCollection</B> command button.</li></p>
</ol>

<A NAME="100"><H2>Lesson Summary </H2></A>

<P>Control properties, methods, and events provide specific functionality to your application. The Visual Basic Toolbox includes standard controls (also called inherent or intrinsic controls). You must use the Components dialog box to add custom controls to the Toolbox. Some ActiveX controls may not be available in the Components dialog box and need to be registered on your computer. Using the Professional and Enterprise editions of Visual Basic, you can create your own ActiveX controls. You should remove any ActiveX controls that your application does not use before you package your application. Removing the unused controls reduces file size and overhead.</P>

<P>A control array is a group of controls that share the same name, type, and event procedures but retain individual property settings. Common uses for control arrays are menu controls and option button groupings.</P>

<P>You can create controls at run time with the Load statement and the Add method of the Controls collection. To delete controls, you use the Unload and Remove methods.</P>

<P>With the Properties window, you can set control properties at design time. You can also set control properties at run time programmatically.</P>

<P>Events are fired in response to system or user input and are handled in your application by event procedures. The timer event is an example of a system event. A single user action can trigger one or multiple events. The object type determines available events. Each object fires its events independently. Form events generally fire in this order: Initialize, Load, Activate/Deactivate, QueryUnload, Unload and Terminate.</P>

<P>A collection is a grouping of related objects. Visual Basic creates some automatically; you can create others using the Collection object. A collection is either zero-based or one-based.</P>

<P>The Forms collection lets you enumerate, or loop through, all forms in an application. The Controls collection lets you enumerate all controls on a form. You can refer to a particular element in a collection by its index or by its name.</P>



</BODY>
</HTML>



