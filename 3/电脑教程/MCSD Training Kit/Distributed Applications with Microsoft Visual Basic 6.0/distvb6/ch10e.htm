<HTML>
<HEAD>
<TITLE>Lesson 4: Implementing COM Security Using DCOMCNFG</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10d.htm", "ch10f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="399"><H1>Lesson 4: Implementing COM Security Using DCOMCNFG</H1></A>

<P>As you learned in Chapter 9, &quot;<A HREF="ch09a.htm#329">Using Microsoft Transaction Server</A>,&quot; MTS handles the configuration of client applications for server packages, while the distributor is responsible for delivering the client executable to users. When the user runs a client install (.exe) file created in the Client subfolder of the package directory, the client install file will configure the client computer to activate the component on a remote MTS server. The .exe file will also identify the remote server computer as the server that created the package. Alternatively, you can use the Distributed COM configuration tool (Dcomcnfg.exe) to modify the remote server to which the client connects. This is your best option when deploying a COM EXE because MTS components must be COM DLLs. This lesson will focus on administering a COM EXE using the Distributed COM Configuration tool (DCOMCNFG).</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li>Use DCOMCNFG to assign launch permissions for a component.</li></p>

<p><li>Use DCOMCNFG to specify the location for a remote server component to execute.</li></p>

<p><li>Create remote server files for a component.</li></p>

<p><li>Manually register a remote server component.</li></p>

</ul>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>

<A NAME="400"><H2>Overview of Distributed COM</H2></A>

<P>COM defines how components and their clients interact. DCOM extends the COM infrastructure transparently and naturally by adding support for reliable, secure, and efficient communication between components, scripts, and Java applets residing on different machines on a LAN, a wide area network (WAN), or the Internet. Because DCOM is a seamless evolution of COM, you can leverage your existing investment in all COM-enabled applications, components, tools, and knowledge to move into standards-based distributed computing. As you do so, DCOM handles the low-level details of network protocols. DCOM enables component applications to operate across a LAN, an intranet, or the Internet because it works with technologies such as TCP/IP and Java. It provides the &quot;object glue&quot; that allows business applications to work across the Web.</P>

<A NAME="401"><H3>Configuring a Computer to Use DCOM</H3></A>

<P>The DCOMCNFG utility is provided with Windows NT 4.0, and Microsoft Windows 98. You can download DCOMCNFG for Microsoft Windows 95 from <a href="http://www.microsoft.com/com/dcom/dcom1_2/dcom1_2.asp" target="_window2">http://www.microsoft.com/com/dcom/dcom1_2/dcom1_2.asp</a>. Using DCOMCNFG in Windows NT, you can configure your computer as a client, a server, or both. In addition, you can use the DCOMCNFG to view and edit properties for DCOM components as well as to:</P>

<ul>
<p><li>Enable DCOM on a computer.</li></p>

<p><li>Activate and specify where components run.</li></p>

<p><li>Identify which user account can launch, access, and configure components.</li></p>

<p><li>Configure the user account that will be used to execute the server application. </li></p>

<p>The client application uses this account to start processes and gain access to resources on the server computer.</p>

<p><li>Configure the level of security for connections between applications.</li></p>
</ul>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
In order to use DCOMCNFG on a Windows 95 or Windows 98 computer, you must enable user-level security in Control Panel.
</blockquote></div>
</p>

<A NAME="402"><H2>Deploying a COM EXE</H2></A>

<P>To deploy a COM EXE on a server, you need to secure it on the server, and then register it on remote workstations. In the context of remote component deployment, security means configuring each component's access and launch permissions and protecting the component from tampering. The location of the server application (COM EXE) is stored in the registry on the computer that runs the client application. When a COM client application is executed, the COM client application makes a request to a server application, which is running on a remote computer. You must specify the user accounts that will have permission to use or start the server application on the computer that will be running the server application. It is also necessary to specify the user accounts that will be used to run the server application. The permissions that you grant to user and group accounts using DCOMCNFG on the remote computer will determine whether or not the client application can create an object from the component on the remote computer. The default configuration of DCOM allows only administrators to access and launch objects from a remote client. After you have distributed, registered, and applied NTFS file permissions to your application's components on a Windows NT Server, you must configure the access and launch permissions.</P>

<P><li><B> To set launch permissions for an application: </B></li></P>

<ol>
<p><li>From the <B>Start</B> menu, click <B>Run</B>.</li></p>

<p>The Run dialog box appears.</p>

<p><li>Type <B>Dcomcnfg.exe</B>, then click <B>OK</B>.</li></p>

<p>The DCOMCNFG utility opens.</p>

<p><li>Select the application from the <B>Applications</B> page and click the <B>Properties</B> button. </li></p>

<p><li>On the <B>Security</B> property page, select the <B>Use</B> <B>custom</B> <B>launch</B> <B>permissions</B> option, then click the <B>Edit</B> button in the same area. </li></p>

<p>The Registry Value Permissions dialog box appears.</p>

<p><li>To remove users or groups, select the user or group you want to remove and click the <B>Remove</B> button.</li></p>

<p>The selected user or group will no longer appear in the list box.</p>

<p><li>If you want to add users or groups, click the <B>Add</B> button.</li></p>

<p><li>In the Add Users and Groups dialog box, select a user from the list box, or type the username in the <B>Add Names</B> text box.</li></p>

<p><li>To set the access type, select the type (either <B>Allow</B> <B>Launch</B> or <B>Deny</B> <B>Launch</B>) from the <B>Type of Access</B> list box. </li></p>

<p>To add other users that will have the selected type of access, repeat step 7. </p>

<p><li>When you have finished adding users for the selected access type, click the <B>OK</B> button. </li></p>

<p><li>To add users that will have a different type of access, repeat steps 6 through 9. Otherwise, click <B>OK</B> in the Registry Value Permissions dialog box to apply the changes.</li></p>
</ol>

<A NAME="403"><H3>Setting the Location for an Application</H3></A>

<P>The location you set for your application determines the computer on which the application will run. You can choose to run your application on the machine where the data is located, on the machine you use to set the location, or on a specified machine. </P>

<P><li><B> To set an application's location: </B></li></P>

<ol>
<p><li>With Dcomcnfg.exe running, select the application from the <B>Applications </B>page and click the <B>Properties</B> button. </li></p>

<p><li>On the <B>Location</B> page, select one or more check boxes that correspond to the locations where you want the application to run. </li></p>

<p>If you select more than one check box, COM uses the first one that applies. If Dcomcnfg.exe is being run on the server machine, always select <B>Run Application On This Computer</B>.</p>

<p><li>Click <B>OK</B>.</li></p>
</ol>

<A NAME="404"><H2>Creating Remote Server Files</H2></A>

<P>Before you use the Package and Deployment wizard to distribute your component to a server computer, you must make sure that you have created the necessary remote support files for the project and placed them in the same directory where the .vbp file for the project is located.</P>

<P><li><B> To create support for DCOM </B></li></P>

<ol>
<p><li>Open the project group in Visual Basic and select the component project.</li></p>

<p><li>Select <B>Project</B> <B>Properties</B> from the <B>Project</B> menu.</li></p>

<p><li>Select the <B>Component</B> tab of the Project Properties dialog box and check the <B>Remote</B> <B>Server</B> <B>Files</B> option.</li></p>

<p>When you compile the project with this option selected, the remote server files are created automatically.</p>
</ol>

<P>When the Remote Server Files option is selected, Visual Basic creates a file with a .vbr extension. The .vbr file will have the same filename as the .dll file. For example, if you compile MyServer.exe, a MyServer.vbr file will be created. This .vbr file contains information needed by the Windows Registry to run a COM server on a remote computer.</P>

<A NAME="405"><H2>Registering a Remote Component on a Client Computer</H2></A>

<P>In order to register a remote server component, the client must know the network name, protocol, and security access to communicate with it. After you have created the remote server files for the component, they can be distributed to clients to provide the information necessary for the client and the component to communicate.</P>

<P>Although the Package and Deployment wizard handles the maintenance of registering remote servers automatically, you can use the Clireg32.exe utility to register the component on the client computer manually. The Clireg32.exe utility allows you to register a COM server remotely; the component does not need to be located on the machine registering it. The Clireg32.exe utility accepts the following parameters:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Parameter
</Th>
<Th>Description
</Th></TR>
<TR>
<TD VALIGN="TOP">.vbr file
</TD>
<TD VALIGN="TOP">The name of the remote server's .vbr file, which contains the information to register the component's type library (.tlb file).
</TD></TR>
<TR>
<TD VALIGN="TOP">-s
</TD>
<TD VALIGN="TOP">The network address (server name) for the server computer.
</TD></TR>
<TR>
<TD VALIGN="TOP">-p
</TD>
<TD VALIGN="TOP">The network protocol used to communicate with the server machine.
</TD></TR>
<TR>
<TD VALIGN="TOP">-a
</TD>
<TD VALIGN="TOP">The authentication level used by the server computer.
</TD></TR>
<TR>
<TD VALIGN="TOP">-d
</TD>
<TD VALIGN="TOP">Use DCOM instead of Remote Automation.
</TD></TR>
<TR>
<TD VALIGN="TOP">-t
</TD>
<TD VALIGN="TOP">The type library file.
</TD></TR>
<TR>
<TD VALIGN="TOP">-u
</TD>
<TD VALIGN="TOP">Uninstall the registry entries from the .vbr file.
</TD></TR>
<TR>
<TD VALIGN="TOP">-q
</TD>
<TD VALIGN="TOP">Quiet mode (runs with no dialog boxes).
</TD></TR>
<TR>
<TD VALIGN="TOP">-l
</TD>
<TD VALIGN="TOP">Log error information to the Clireg.log file.
</TD></TR>
<TR>
<TD VALIGN="TOP">-nologo
</TD>
<TD VALIGN="TOP">Do not display copyright information.
</TD></TR></TABLE></p>

<P>Although the Clireg32.exe program will accept many different parameters, the only required one is the name of the .vbr file generated with the server when the component was compiled. For a list of all the parameters, execute Clireg32.exe by itself and a dialog box will appear, as illustrated in Figure 10.12.</P>

<P>
<img src="images/F10xx12.GIF" width=353 height=243 border=0>
</P><P>
<!--caption--><b>Figure 10.12</b> <i>Dialog box displayed when running Clireg32.exe without parameters</i><!--/caption-->
</P>


<P><li><B> To register a component with Clireg32.exe</B></li></P>

<ol>
<p><li>From the <B>Start</B> menu, click <B>Run</B>.</li></p>

<p>The Run dialog box appears.</p>

<p><li>Type <B>Clireg32.exe</B> followed by the name of the .vbr file, as shown in the following example.</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Clireg32.exe MyEXEsvr.vbr
</pre></td></tr></table></p>

<p>The Clireg32.exe utility is located in the folder \Program Files\ Microsoft Visual Studio\Common\Tools\Clireg, so you will have to browse to that location in the Run dialog box.</p>
</ol>


<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="406"><H2>Practice: Registering a Component with Clireg32.exe  </H2></A>

<P>In this practice, you will create a COM EXE and install it on a remote server. You will then use the Clireg32.exe utility to manually register the component on a client computer.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
To complete this practice, you must use Visual Basic 6.0 Enterprise Edition.
</blockquote></div>
</p>

<P><li><B> To create a COM EXE</B></li></P>

<ol>
<p><li>Create a new ActiveX EXE project in Visual Basic.</li></p>

<p><li>Name the project <B>DCOMSvr</B>.</li></p>

<p><li>Change the name of Class1 to <B>CDCOMSvr</B></li></p>

<p><li>In the <B>CDCOMSvr</B> class, type the following code:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Var As Variant

Public Sub SetValue(V As Variant)
    Var = V
End Sub

Public Function GetValue() As Variant
    GetValue = Var
End Function
</pre></td></tr></table></p>

<p><li>From the <B>Project</B> menu, click <B>DCOMSvr</B> <B>Properties</B>.</li></p>

<p><li>On the <B>Component</B> tab, check <B>Remote Server Files</B>, as illustrated in Figure 10.13.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx13x.htm')"> <img src="images/F10xx13.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.13</b> <i>The Remote Server Files option</i><!--/caption-->
</P>


<p><li>Click <B>OK</B> to close the <B>Project Properties</B> dialog box.</li></p>

<p><li>Save your project files.</li></p>

<p><li>Compile DCOMSvr.exe</li></p>
</ol>

<P><li><B> To create a package</B></li></P>

<ol>
<p><li>Start the <B>Package and Deployment Wizard</B>.</li></p>

<p><li>Select your DCOMSvr project and click <B>Package</B>, as illustrated in Figure 10.14.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx14x.htm')"> <img src="images/F10xx14.JPG" width=404 height=340 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.14</b> <i>The Package option for your project</i><!--/caption-->
</P>


<p><li>Click <B>Yes</B> when the dialog appears asking if you want to create remote automation files, as illustrated in Figure 10.15.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx15x.htm')"> <img src="images/F10xx15.JPG" width=404 height=93 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.15</b> <i>Opting to create remote automation files</i><!--/caption-->
</P>

</ol>

<P><li><B> To configure the server computer</B></li></P>

<ul>
<p><li>After the <B>Package and Deployment Wizard</B> has created the ActiveX EXE project Setup files, install the component on a Windows NT Server computer (separate from the client.)</li></p>
</ul>

<P><li><B> To configure the client computer</B></li></P>

<ol>
<p><li>Open a command prompt and run the <B>Clireg32.exe</B> utility and specify the path to the DCOMSvr.vbr file. Clireg32.exe is located in the <B>\Program Files\Microsoft Visual Studio\Common\Tools\Clireg</B> folder on your computer.</li></p>

<p>The syntax for registering the remote server is:</p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Clireg32.exe <I>Server.vbr</I>
</pre></td></tr></table></p>

<p><li>When the DCOMSvr.vbr dialog (shown in Figure 10.16) appears, select <B>Distributed</B> <B>COM</B> as the remote transport option, type the IP address of the remote computer where the component was installed, then click <B>OK</B>.</li></p>

<p>Use the Ipconfig.exe utility to get the IP address of a computer running Windows NT.</p>

<P>
<img src="images/F10xx16.GIF" width=286 height=241 border=0>
</P><P>
<!--caption--><b>Figure 10.16</b> <i>Configuring the DCOM Client</i><!--/caption-->
</P>

</ol>

<P><li><B> To create and run a client application for the COM EXE</B></li></P>

<ol>
<p><li>Create a new Standard EXE project in Visual Basic.</li></p>

<p><li>Name the project <B>DCOMClient</B>.</li></p>

<p><li>Change the name of Form1 to <B>frmDCOMTest</B>.</li></p>

<p><li>Add two CommandButtons (named <B>cmdSetValue</B> and <B>cmdClearValue</B>) and one Label control (named <B>lblValue</B>) to frmDCOMTest, as illustrated in Figure 10.17.</li></p>

<P>
<img src="images/F10xx17.GIF" width=323 height=244 border=0>
</P><P>
<!--caption--><b>Figure 10.17</b> <i>Setting up the client form</i><!--/caption-->
</P>


<p><li>Type the following code to call the methods of the COM server on the remote computer:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdSetValue_Click()
    Dim Svr As Object
    Dim Str As String

    Set Svr = CreateObject(&quot;DCOMSvr.CDCOMSvr&quot;)
    Str = InputBox(&quot;Enter value&quot;)

    Svr.setvalue Str
    lblValue = Svr.getvalue()
    Set Svr = Nothing
End Sub

Private Sub cmdClearValue_Click()
    lblValue.Caption = &quot;&quot;
End Sub
</pre></td></tr></table></p>

<p><li>Run your client application and click the <B>Set</B> <B>Value</B> button.</li></p>

<p><li>Enter a value of <B>9999</B> when prompted.</li></p>

<p>The Label will display 9999 after the GetValue method runs on the server.</p>

<p><li>Close the client application and save your work.</li></p>
</ol>

<A NAME="407"><H2>Lesson Summary </H2></A>

<P>DCOM enables component applications to operate across a LAN, an intranet, or the Internet. Using DCOMCNFG, you can configure your computer to act as a client, a server, or both. If your computer acts as a DCOM server, you can assign permissions to determine whether or not various clients can use components on your computer. Using DCOMCNFG, you can specify an execution location for components to determine the computer on which the component will execute. </P>

<P>By setting the Remote Server Files option in Visual Basic, a .vbr file is created when a component is compiled. The .vbr file contains information needed by a client's computer to run a COM server on a remote computer. Although the Package and Deployment wizard handles the maintenance of registering remote servers automatically, you can use the Clireg32.exe utility to register the component on the client computer manually.</P>

</BODY>
</HTML>



