<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Universal Data Access</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05a.htm", "ch05c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="197"><H1>Lesson 1: Overview of Universal Data Access</H1></A>

<P>Universal Data Access (UDA) is the Microsoft strategy for providing access to all types of information, from a variety of sources besides traditional relational databases. These data sources include mainframe ISAM/VSAM, hierarchical databases, e-mail, file systems, text, and graphical data. OLE DB is the underlying interface that enables UDA.</P>

<P>Microsoft ActiveX Data Objects (ADO) is a development interface for OLE DB. ADO replaces previous database programming interfaces, such as DAO and RDO. Because ADO is built on top of OLE DB, ADO benefits from the UDA infrastructure.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li> Describe the purpose of the universal data access strategy.</li></p>

<p><li> Identify the components of OLE DB.</li></p>

<p><li> List and define the three most common data access methods.</li></p>

<p><li> Describe the relationship between OLE DB and ADO.</li></p>

</ul>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>

<A NAME="198"><H2>Overview of Universal Data Access</H2></A>

<P>Modern data-intensive applications require the integration of information stored not only in traditional database management systems but also in file systems, spreadsheets, e-mail, and more. The strength of the Microsoft UDA strategy is that it is delivered through a common set of object-oriented interfaces. These interfaces are based on the Microsoft Component Object Model (COM). OLE DB, which is based on COM, is used to provide access to data across the organization, as illustrated in Figure 5.1.</P>

<P>
<A HREF="javascript:fullSize('F05xx01x.htm')"> <img src="images/F05xx01.JPG" width=404 height=421 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.1</b> <i>The universal data access architecture</i><!--/caption-->
</P>


<P>OLE DB is an open specification designed to build on the Open Database Connectivity (ODBC) application programming interface (API). It does this by providing an open standard for accessing all types of data. Whereas ODBC was created to access relational databases, OLE DB is designed for relational and non-relational information sources. OLE DB includes direct support for ODBC to enable backward compatibility for the broad range of ODBC relational database drivers available today.</P>

<P>OLE DB components consist of data providers, data consumers, and service components, as illustrated in Figure 5.2.</P>

<P>
<A HREF="javascript:fullSize('F05xx02x.htm')"> <img src="images/F05xx02.JPG" width=404 height=370 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.2</b> <i>OLE DB components</i><!--/caption-->
</P>


<P>The components of OLE DB provide the following components: </P>
<ul>
<p><li> Providers</li></p>

<P>An OLE DB provider is any software component that exposes an OLE DB interface. OLE DB interfaces may be directly exposed by a data store or exposed by a separate code component that communicates at a lower level with an interface on the data store. In both cases, the code that exposes the OLE DB interfaces is referred to as the data provider. For example, the Microsoft OLE DB provider for Microsoft Active Directory Service allows ADO to connect to heterogeneous directory services through the Active Directory Service Interfaces (ADSI).</P>

<p><li> Services</li></p>

<p>A service component is an OLE DB component that implements a common set of OLE DB functionality. Service components are automatically invoked when a consumer requests OLE DB functionality that is not supported by the data provider. An example of a service component is a cursor engine that can consume data from a sequential, forward-only data source to produce scrollable data.</p>

<p><li> Consumers</li></p>

<p>Consumers are components that consume OLE DB data. Examples of consumers include services such as query processors; high-level data access models such as ADO; business applications written in languages like Visual Basic, Microsoft Visual C++, or Java; and development tools.</p>
</ul>

<A NAME="199"><H2>ActiveX Data Objects</H2></A>

<P>The solution to accessing different kinds of data throughout the enterprise is to use OLE DB as a data provider and ADO as the data access technology. ADO provides an application-level interface to OLE DB, which provides developers access to the data. Data access based on OLE DB and ADO is suitable for a wide range of application design requirements, from small, single workstation processes to large-scale Web applications. ADO provides consistent, high-performance access to data and supports a variety of development needs, including the creation of front-end database clients and middle-tier business objects. ADO is designed to be the only data interface required regardless of the application type.</P>

<A NAME="200"><H3>ADO Compared to Other Data Access Methods</H3></A>

<P>Although applications can use Data Access Objects (DAO) and Remote Data Objects (RDO) in Visual Basic 6.0, ADO is the data-access method Microsoft recommends for new applications.</P>

<P>All of these data access methods are COM interfaces and can be used from a variety of tools, including Microsoft Visual Basic, Microsoft Access, and Microsoft Office. However, there are some major differences among them:</P>
<UL>
<p><li> ADO is an object model for accessing all types of data through OLE DB.</li></p>

<p>Languages such as Visual Basic, Java, C++, VBScript, and JScript can use ADO which can then access data from any OLE DB source. You can use ADO to access relational data as well as e-mail or data contained in a spreadsheet.</p>

<p><li> RDO is an object model for accessing relational data through ODBC.</li></p>

<p>RDO was designed to give Visual Basic developers the ability to access ODBC data without having to code to the ODBC API. RDO is a COM interface to the ODBC API and provides the functionality of ODBC in a programmable object model. It is designed to take advantage of database servers that use sophisticated query engines, such as SQL Server and Oracle.</p>

<p><li> DAO is an object model for accessing local or SQL data through Jet.</li></p>

<p>DAO is the oldest of the three data access methods. With DAO, you can access data in Microsoft Jet databases, Microsoft Jet-connected ODBC databases, and installable indexed sequential access method (ISAM) data sources, such as FoxPro, Paradox, or Lotus 1-2-3. Compared to the newer ADO and RDO technologies, DAO is a slower, less capable data access alternative. DAO, like its companion, the Microsoft Jet database engine, was originally designed to support ISAM data access.</p>
</ul>

<P>After reviewing each data access method, you might be wondering why you need ADO if you already use RDO/DAO. Here are a few basic answers to that question:</P>
<ul>
<p><li> ADO can access all types of data, whereas RDO and DAO access only relational data.</li></p>

<p><li> The ADO object model is not as complex as that of RDO or DAO and therefore is easier to use, with less coding required.</li></p>

<p><li> ADO combines the best features of RDO and ADO and will eventually replace them.</li></p>

<p><li> ADO is the standard data access object model across Microsoft tools, including Visual Basic, Access, Office, and Microsoft Internet Information Server.</li></p>
</ul>

<A NAME="201"><H2>Lesson Summary </H2></A>

<P>Universal Data Access is the Microsoft strategy for providing access to all types of information across the enterprise. It provides high-performance access to a variety of information sources including relational data and non-relational data. These data sources include mainframe ISAM/VSAM, hierarchical databases, e-mail, file systems, text, and graphical data.</P>

<P>OLE DB is the underlying interface that enables Universal Data Access. Microsoft ActiveX Data Objects is the development interface to the data sources supported by OLE DB. Because ADO is built on top of OLE DB, ADO benefits from the universal data access infrastructure.</P>

</BODY>
</HTML>



