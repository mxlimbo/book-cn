<HTML>
<HEAD>
<TITLE>Chapter 7 -- Summary</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="303"><H1>Summary </H1></A>

<P>A transaction is an &quot;all or nothing&quot; unit of work in which all of the statements are executed and completed, or none of them are. If any part of the transaction fails, you can undo all commands to restore data to its original state. If all commands are successful, you can commit the changes and make them permanent. To qualify as a transaction, four properties, called the ACID (Atomicity, Consistency, Isolation, and Durability) properties, must be exhibited.</P>

<P>The following transaction methods manage transaction processing within a Connection object:</P>

<ul>
<p><li>BeginTrans &#8211; begins a new transaction.</li></p>

<p><li>CommitTrans &#8211; saves any changes and ends the current transaction. It may also start a new transaction.</li></p>

<p><li>RollbackTrans &#8211; cancels any changes made during the current transaction and ends the transaction. It may also start a new transaction.</li></p>
</ul>

<P>A disconnected recordset is a recordset that resides in a client cache and no longer has a live connection to the server. While the recordset is disconnected from the datasource, you can use it to browse, add, change, or delete records. You can re-establish the connection to update the original data source at a later time.</P>

<P>Disconnected Recordsets can improve performance because they use client-side cursors. The cursor is called a client-side cursor when resources are used on the client computer. Cursors use resources to hold data. These resources can be memory, a disk paging file, temporary disk files, or even temporary storage in the database. Your applications are generally more scalable with client-side cursors because the cursor's resource requirements are placed on each separate client and not on the server. </P>

<P>ADO provides you with the ability to perform operations such as queries, data source connections, and retrieval of records asynchronously. Asynchronous operations allow you to perform other operations while a time-consuming task is being performed in the background.</P>

<P>When you use asynchronous operations in ADO, events are used to notify you when a task has been completed. In ADO, there are events that are called either after an ADO operation completes (complete events) or before an operation starts (will events). </P>

<P>With ADO, you can perform asynchronous operations such as connections, commands, and retrieval of records. With asynchronous Recordset operations, you can work with some of the records almost immediately while the rest are retrieved in the background.</P>

</BODY>
</HTML>



