<HTML>
<HEAD>
<TITLE>Lesson 1: Managing Connections to a Data Source</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06a.htm", "ch06c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="226"><H1>Lesson 1: Managing Connections to a Data Source</H1></A>

<P>In this lesson, you will learn how to connect to a data source using an ADO Connection object, which is an alternative to using the Data Environment discussed in the previous chapter. The Connection object provides you with complete programmatic control of a connection. Once you establish the connection, you can manipulate data in a variety of ways.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li>Describe how to create an ADO Connection object in Microsoft Visual Basic.</li></p>

<p><li>Connect to a data source using code.</li></p>

</ul>
<b>Estimated lesson time: 25 minutes</b>
</blockquote></div>
</p>

<A NAME="227"><H2>Defining the ADO Connection Object</H2></A>

<P>A Connection object represents a physical connection to a data source. The Connection object maintains information about the data provider. To create a Connection object, you supply the name of either an ODBC data source or an OLE DB provider. To support as many data sources as possible, you can use ADO and ODBC to access a database. However, when you use a data source that has an associated OLE DB provider-such as Microsoft Access, Microsoft SQL Server, or Oracle-it is recommended that you use the OLE DB provider instead of the older, ODBC driver.</P>

<P>A typical ADO-based application uses the following operations to access a data source:</P>

<ol>
<p><li>Declare a Connection object variable.</li></p>

<p><li>Attempt to establish a connection with the data source and have the user authenticated.</li></p>

<p>Once the connection is open, you can run a query that modifies records or returns groups of records called a <I>recordset</I>.</p>

<p><li>Execute a SQL statement.</li></p>

<p><li>Close the connection.</li></p>

<p>The connection to the data source is terminated and server resources are freed.</p>
</ol>

<A NAME="228"><H2>Establishing a Connection</H2></A>

<P>Use the Open method of the Connection object to establish a connection, and then,  when the connection is active, issue commands against it and process the results. The syntax of the Open method is this:</P>

<P><I>connection.</I>Open<I> ConnectionString, UserID, Password, Options</I></P>

<P>The arguments for the Open method contain the following information:</P>

<ul>
<p><li>ConnectionString</li></p>

<p>An optional String value containing connection information. This information is used to specify: </p>

<ul>
<p><li>The name of a provider to use for the connection.</li></p>

<p><li>The name of a provider-specific file.</li></p>
</ul>

<p><li>UserID</li></p>

<p>An optional String value containing a user name to use when establishing the connection.</p>

<p><li>Password</li></p>

<p>An optional String value containing a password to use when establishing the connection.</p>

<p><li>Options</li></p>

<p>An optional ConnectOptionEnum value that determines whether the Open method should return after (synchronously) or before (asynchronously) the connection is established. You can set the value to either adConnectUnspecified or adAsyncConnect.</p>
</ul>

<P>The following example establishes a connection object:</P>


<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdConnect_Click()
    ' Declare the object variable
    Dim cnPubs As ADODB.Connection

    ' This variable will contain the connection information
    Dim strConnect As String

    ' Instantiate the object variable
    Set cnPubs = New ADODB.Connection

    ' Define the OLE DB connection string
    strConnect = &quot;Provider=SQLOLEDB;&quot; &amp; _
            &quot;Data Source=VB6ENTSVR;&quot; &amp; _
            &quot;Initial Catalog=Pubs&quot;

    ' Open the database connection
    cnPubs.Open strConnect, &quot;sa&quot;, &quot;&quot;
End Sub
</pre></td></tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The &quot;Data Source=&quot; value in the connection string is the name of the remote server. The &quot;Initial Catalog=&quot; value is the database name in the external data source.
</blockquote></div>
</p>

<P>All of the arguments for the Open method are optional because you can specify the connection information using the Connection object's ConnectionString property, as shown in the following code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdConnect_Click()
    ' Declare the object variable
    Dim cnPubs As ADODB.Connection

    ' Instantiate the object variable
    Set cnPubs = New ADODB.Connection

    ' Set the ConnectionString property value
    cnPubs.ConnectionString = &quot;Provider=SQLOLEDB;&quot; &amp; _
                            &quot;UID=sa;pwd=;&quot; &amp; _
                            &quot;Data Source=VB6ENTSVR;&quot; &amp; _
                            &quot;Initial Catalog=Pubs&quot;
    ' Call the Open method without any arguments
    cnPubs.Open
End Sub
</pre></td></tr></table></p>

<A NAME="229"><H3>Updating Database Records with a Connection Object</H3></A>

<P>Once a connection has been established, you can begin updating records in a database. By using the Connection object's Execute method, you can send SQL commands to the database without having to return records to the client. For example, you may need to update all prices in the database by 10 percent. In this case, you could use an update query through the Execute method, such as in the example below:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Sub cmdUpdatePrices_Click()
    cnPubs.Execute &quot;UPDATE Titles Set Price = Price * 1.1&quot;
End Sub
</pre></td></tr></table></p>

<A NAME="230"><H3>Disconnecting from a Data Source</H3></A>

<P>Once you finish with the connection, you use the Close method to disconnect from a data source. In the case of a SQL Server, any server-side resources that were in use while this connection was active are released. It is proper coding technique to close all open connections before the application is terminated.</P>

<P>The following code closes an active connection to a data source and releases the Connection object variable:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Sub cmdClose_Click()
    cnPubs.Close

    ' Clear the object to free client resources
    Set cnPubs = Nothing
End Sub
</pre></td></tr></table></p>

<A NAME="231"><H3>Managing Database Connections</H3></A>

<P>Proper management of connections from both the server and the client applications is critical to optimal performance. Depending on the way that you implement connections in a client application, you might use more system resources than required. For each connection you create, both the client and the server allocate available memory. If you do not carefully manage these connections, performance can be degraded. Each time a connection is established, the database must be contacted and the user must be authenticated. This can lower the performance of a client application. However, since you can create multiple Command objects and Recordset objects from the same Connection object, you may not need more than one connection. You need to determine, based on the application requirements, whether one connection, opened when the application starts and closed when the application terminates, is enough. In addition, most client/server databases such as SQL Server are designed to limit the number of concurrent connections. If a poorly written application opens too many connections, the server may refuse other user requests.</P>


<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

 
<A NAME="232"><H2>Practice: Programmatically Creating a Connection </H2></A>

<P>In this practice, you connect to a database from within code using an OLE DB provider.</P>

<p><li><b>To connect to an OLE DB provider using code</B></li></P>

<ol>
<p><li>Start Visual Basic and create a new <B>Standard EXE</B> project.</li></p>

<p><li>On the <B>Project</B> Menu, click <B>References</B>.</li></p>

<p><li>Check <B>Microsoft ActiveX Data Objects 2.0 Library</B> and click <B>OK</B>.</li></p>

<p><li>Add a CommandButton to Form1, set the Name property to <B>cmdConnect</B>, and the Caption property to <B>&amp;Connect</B>.</li></p>

<p><li>In the <B>cmdConnect_Click</B> event procedure, type the following code:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdConnect_Click()
    Dim cnData As Connection

    ' Instanciate the connection
    Set cnData = New Connection
    With cnData
        .Provider = &quot;SQLOLEDB&quot;
        .ConnectionString = &quot;User ID=sa;&quot; &amp; _
            &quot;Data Source=VB6ENTSVR;&quot; &amp; _
            &quot;Initial Catalog=Pubs&quot;
        .Open
    End With

    If cnData.State = adStateOpen Then
        MsgBox &quot;Connection successful.&quot;
    End If
    ' Close the connection and release the cnData object
    cnData.Close
    Set cnData = Nothing
End Sub
</pre></td></tr></table></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Data Source parameter of the ConnectionString must point to a SQ Server. If the name of the SQL Server is different (than VB6ENTSVR) on your network, you have to change the value of the Data Source parameter.
</blockquote></div>
</p>

<ol>
<p>The ConnectionString has a parameter value that uses the SQL Server OLE DB provider. Each OLE DB provider requires a different value for the ConnectionString property.</p>

<p><li value="6">On the <B>Run</B> menu, click <B>Start</B>.</li></p>

<p><li>Click the <B>Connect</B> button on the displayed <B>Form1</B>.</li></p>

<p>If the connection was succesful, you receive a message box notifying you.</p>

<p><li>When finished, click <B>End</B> on the <B>Run</B> menu.</li></p>
</ol>

<A NAME="233"><H2>Using the ADO Command Object</H2></A>

<P>A Command object is a definition of a specific command that you intend to execute against a data source. It can be based on either a database object (such as a table, view, or stored procedure) or a SQL command. </P>

<P>A Command object either opens a new connection or uses an existing connection to perform queries, depending on what you specify in the ActiveConnection property. If you set the ActiveConnection property with a reference to a Connection object, the Command object uses the existing connection from the Connection object. If you specify the ActiveConnection property with a connection string, a new connection is established for the Command object. However, since more than one Command object can use the same Connection object, it is generally more efficient to use a single, existing connection. Once the Command object is created, you can use it to execute the specified command or build a recordset.</P>

<P>Query strings return records as a recordset, or to just change records in a database. For example, using a Select statement returns records, whereas the SQL Update or Delete statements only change records. In addition, if you submit more than one Select statement, you can return multiple recordsets with a single statement. Use the CommandText property to specify the SQL statement, or stored procedure, to run on the data source.</P>

<P>Due to the variety of possible commands you can place in the CommandText property, you must also use the CommandType property to specify the type of command used.</P>

<P>The following table lists the supported CommandType values:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Value
</Th>
<Th>Description
</Th></TR>
<TR>
<TD VALIGN="TOP">adCmdText
</TD>
<TD VALIGN="TOP">Use if the query string is a SQL command.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdTable
</TD>
<TD VALIGN="TOP">Use if the query string is the name of a table name.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdStoredProc
</TD>
<TD VALIGN="TOP">Use if the query string is the name of a stored procedure.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdFile
</TD>
<TD VALIGN="TOP">Use if the query string is the name of a file used to save the records in a previously created Recordset object.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdTableDirect
</TD>
<TD VALIGN="TOP">Use specifically for OLE DB providers that support both SQL statements and the ability to directly open tables by their name. This is a variation on adCmdTable.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdUnknown
</TD>
<TD VALIGN="TOP">Use when the command type is not explicitly known, and the provider attempts to execute the command text first as an SQL statement, then as a stored procedure, and finally as a base table name. An error occurs only if all three of these attempts fail. Because the Command object must perform these extra steps to determine the type of query string, performance is degraded. This is the default value.
</TD></TR></TABLE></p>

<P>The following code uses a Command object to increase the discount percentage for all records in the Discounts table by 10 percent:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdDoCommand_Click()
    Dim comDiscountUpdate As Command

    Set comDiscountUpdate = New Command
    With comDiscountUpdate
        .CommandType = adCmdText
        .ActiveConnection = &quot;Provider=SQLOLEDB;&quot; &amp; _
            &quot;User ID=sa;&quot; &amp; _
            &quot;Data Source=VB6ENTSVR;&quot; &amp; _
            &quot;Initial Catalog=Pubs&quot;
        .CommandText = &quot;UPDATE Discounts SET Discount = Discount * 1.1&quot;
        ' Call the Execute method to update the Discounts
        .Execute
    End With
End Sub
</pre></td></tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
A query string can also be the name of a stored procedure or table.
</blockquote></div>
</p>

<A NAME="234"><H2>Lesson Summary</H2></A>

<P>A Connection object represents a physical connection to a data source. Use the Open method of the Connection object to establish a connection. All of the arguments for the Open method are optional because you can specify the connection information using the Connection object's ConnectionString property. Once a connection has been established, you can begin updating records in a database. By using the Connection object's Execute method, you can send SQL commands to the database without having to return records to the client. A Command object is a definition of a specific command that you intend to execute against a data source. It can be based on either a database object (such as a table, view, or stored procedure) or a SQL command. Due to the variety of possible commands you can place in the CommandText property, you must also use the CommandType property to specify the type of command used.</P>

</BODY>
</HTML>



