<HTML>
<HEAD>
<TITLE>Lab: Creating and Calling a Stored Procedure </TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08d.htm", "ch08f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="325"><H1>Lab: Creating and Calling a Stored Procedure </H1></A>

<P>In this lab, you will create a COM DLL that calls a stored procedure that you will create in the Rsvn database. This COM DLL will be called from a client application used by employees of the Chateau St. Mark Hotel to browse guest status information. You will also create this front-end application.</P>

<p>
<img src="images/video.gif" width=78 height=54 border="0">
</p>

<P>To see a demonstration of this lab, run the Lab08.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Before you can complete this lab, you must import the Rsvn database into SQL Server by completing the lab in Chapter 5, &quot;<A HREF="ch05a.htm#194">Introducing ActiveX Data Objects</A>.&quot;
</blockquote></div>
</p>

<p><b>Estimated lesson time: 60 minutes</b></p>

<A NAME="326"><H2>Exercise 1: Creating a Data Access Component</H2></A>

<P>In this exercise, you will create a project group containing an ActiveX DLL project and a Standard EXE project. You will create a stored procedure with a single parameter to look up records in the Reservation table based on the Status field.</P>

<P><LI> <B> To create a project group</B></LI></P>

<ol>
<p><li> Start Visual Basic and create an ActiveX DLL project named <B>Chateau</B>.</li></p>
<p><li> Change the name of Class1 to <B>CRsvn</B>.</li></p>
<p><li> Make the <B>CRsvn</B> class a data source by setting the DataSourceBehavior property to <B>1 - vbDataSource</B>.</li></p>
<p>Controls on a client form will be used to bind to the CRsvn class.</p>
<p><li> Add a Standard EXE project named <B>ResStat</B> to create a project group.</li></p>
<p><li> Set the ResStat project to be the startup project.</li></p>
<p><li> Change the name of Form1 to <B>frmStPrc</B>.</li></p>
</ol>

<P><LI> <B> To create a data source component that calls a stored procedure</B></LI></P>
<ol>
<p><li> Switch to the Chateau project and open the <B>Data View</B> window.</li></p>
<p><li> Use the <B>Data View</B> window to add a <B>Data Environment</B> to the Chateau project.</li></p>
<p><li> Change the name of DataEnvironment1 to <B>deRSVN</B>.</li></p>
<p><li> In the <B>Data Environment</B> designer, change the name of Connection1 to <B>conRSVN</B>.</li></p>
<p><li> Set up the <B>conRSVN</B> object to connect to the <B>Rsvn</B> database in SQL Server.</li></p>
<p><li> Use the <B>Data View</B> window to create a new stored procedure using the following T-SQL statements.</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE CustomersWithStatus @pStatus varchar(20)
AS
SELECT LastName, FirstName, RoomNumber, CheckInDate
FROM Reservation
WHERE Status = @pStatus
</PRE>
</TD></TR></TABLE></P>

<p><li> In the <B>deRSVN Data Environment</B> designer, add a Command named <B>comRSVN</B>.</li></p>
<p><li> Set the <B>comRSVN</B> object to run the <B>CustomersWithStatus </B>stored procedure that you created in the <B>Rsvn</B> database. </li></p>
<p><li> Create a method in <B>CRsvn</B> named <B>GetStatus</B>. </li></p>

<p>The GetStatus method will have a Status argument used as a parameter when you call the CustomersWithStatus stored procedure. Your code should look similar to the following.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Public Sub GetStatus(Status As String)
    deRSVN.comRSVN Status
End Sub
</PRE>
</TD></TR></TABLE></P>

<p><li> Use the <B>Class_GetDataMember</B> event procedure of <B>CRsvn</B> to allow clients to bind to the Recordset returned from the <B>CustomersWithStatus</B> stored procedure.</li></p>
<p>Your code should look similar to the following:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Class_GetDataMember(DataMember As String, Data As Object)
    Set Data = deRSVN.rscomRSVN
End Sub
</PRE>
</TD></TR></TABLE></P>

<p><li> Add four Recordset navigation methods to the <B>CRsvn</B> class to move to the first, previous, next, and last record in the Recordset returned from the <B>CustomersWithStatus </B>stored procedure.</li></p>

<p><li> Save your work.</li></p>
</ol>

<A NAME="327"><H2>Exercise 2: Creating the Front-End Application</H2></A>

<P>In this exercise, you will create a status entry form to allow users of the Chateau St. Mark Hotel reservation system to search for guest records based an a status value that they provide. You will also create a results form to display guest records that have a status that match the value entered into the search form.</P>

<P><LI> <B> To create a guest status entry search form</B></LI></P>

<ol>
<p><li> Switch to the ResStat project in Visual Basic.</li></p>
<p><li> Add a command button named <B>cmdGetStatus</B>, and a text box named <B>txtStatus</B> to frmStPrc.</li></p>
<p>Your form should look similar to the illustration in Figure 8.10.</p>

<P>
<img src="images/F08xx10.GIF" width=370 height=168 border=0>
</P><P>
<!--caption--><b>Figure 8.10</b> <i>frmStPrc containing controls</i><!--/caption-->
</P>


<p><li> Set a reference to the Chateau component.</li></p>
<p><li> In the General Declarations section of <B>frmStPrc</B>, declare a Public variable named <B>objGuests</B> based on the <B>Chateau.CRsvn</B> component.</li></p>
<p><li> In the <B>cmdGetStatus</B> click event, type code to call the <B>GetStatus</B> method of the <B>objGuests</B> object.</li></p>
<p>Use the following code to call the GetStatus method and open the results form.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub cmdGetStatus_Click()
    objGuests.GetStatus txtStatus.Text
    frmReslt.Show
End Sub
</PRE>
</TD></TR></TABLE></P>
</ol>

<P><LI> <B> To create a results form to display guest status</B></LI></P>

<ol>
<p><li> Add a new form to the ResStat project named <B>frmReslt</B>.</li></p>
<p><li> Add Label controls to the <B>frmRslt</B> to represent each field in the Recordset returned from the <B>CustomersWithStatus</B> stored procedure.</li></p>
<p>Fields will include: LastName, FirstName, RoomNumber, and CheckInDate.</p>
<p><li> Add four command buttons to be used as Recordset navigation controls.</li></p>
<p>The command buttons should be named <B>cmdMoveFirst</B>, <B>cmdMovePrevious</B>, <B>cmdMoveNext</B>, and <B>cmdMoveLast</B> to represent their functionality. Your form should look similar to the illustration in Figure 8.11.</p>

<P>
<img src="images/F08xx11.GIF" width=400 height=258 border=0>
</P><P>
<!--caption--><b>Figure 8.11</b> <i>frmReslt with Label controls and Recordset navigation command buttons</i><!--/caption-->
</P>


<p><li> Add code to each command button to call the Recordset navigation methods that you created in the CRsvn class.</li></p>

<p><li> In the <B>Form_Load</B> event procedure for <B>frmReslt</B>, type the following code to bind the Label controls.</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set lblLastName.DataSource = frmStPrc.objGuests
Set lblFirstName.DataSource = frmStPrc.objGuests
Set lblRoomNumber.DataSource = frmStPrc.objGuests
Set lblCheckInDate.DataSource = frmStPrc.objGuests

lblLastName.DataField = &quot;LastName&quot;
lblFirstName.DataField = &quot;FirstName&quot;
lblRoomNumber.DataField = &quot;RoomNumber&quot;
lblCheckInDate.DataField = &quot;CheckInDate&quot;
</PRE>
</TD></TR></TABLE></P>
</ol>

<P><LI> <B> To test your application</B></LI></P>

<ol>
<p><li> From the <B>Run</B> menu in Visual Basic, click <B>Start</B>.</li></p>
<p><li> When the Guest Status form appears, type <B>PENDING</B>, as illustrated in Figure 8.12, then click <B>Get Status</B>.</li></p>

<P>
<img src="images/F08xx12.GIF" width=318 height=110 border="0">
</P><P>
<!--caption--><b>Figure 8.12</b> <i>Using PENDING as the parameter value for the stored procedure</i><!--/caption-->
</P>


<p>The Results form appears displaying a record, as illustrated in Figure 8.13.</p>

<P>
<img src="images/F08xx13.GIF" width=324 height=195 border=0>
</P><P>
<!--caption--><b>Figure 8.13</b> <i>The results from displays records returned from the stored procedure</i><!--/caption-->
</P>


<p><li> Use the Recordset navigation buttons on the results form to browse through the Recordset returned from the <B>CustomersWithStatus</B> stored procedure.</li></p>

<p><li> From the <B>Run</B> menu, click <B>End</B>.</li></p>
</ol>

</BODY>
</HTML>



