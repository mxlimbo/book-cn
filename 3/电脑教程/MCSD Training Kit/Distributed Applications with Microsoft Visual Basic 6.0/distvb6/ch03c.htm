<HTML>
<HEAD>
<TITLE>Lesson 2: Using Class Modules </TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03b.htm", "ch03d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="131"><H1>Lesson 2: Using Class Modules </H1></A>

<P>Just like forms and standard modules, you can use class modules in one or more Visual Basic applications. A class module can also be contained within a compiled COM DLL and used by other applications. In this case, the class module is not added to each project that uses the class. Instead, a reference is made to the type library of the COM DLL that contains the class. After the reference has been set, you can create objects from public creatable classes in the component and write code using the object's properties, methods, and events.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>
<p><li> Use the Object Browser to view class information.</li></p>

<p><li> Instantiate and invoke a COM component.</li></p>

<p><li> Create a Visual Basic client application that uses a COM component. </li></p>

<p><li> Create a Visual Basic application that handles events from a COM component.</li></p>

<p><li> Compile a project with class modules into a COM component.</li></p>

</ul>
<b>Estimated lesson time: 25 minutes</b>
</blockquote></div>
</p>


<A NAME="132"><H2>Using the Object Browser </H2></A>

<P>The Object Browser allows you to view <I>type</I> <I>libraries</I>. Type libraries are resources that contain detailed descriptions of classes, such as properties, methods, events, and named constants. Visual Basic creates type library information for the classes you create, provides type libraries for the objects intrinsic to Visual Basic, and lets you access the type libraries provided by other applications.</P>

<P>You can use the Object Browser to display the classes available in projects and components, including the classes you defined. The objects you create from those classes will have the same members (properties, methods, events, and so on) that you see in the Object Browser.</P>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="133"><H2>Practice: Viewing the CFile Class </H2></A>

<P><LI><B> To view class members in the Object Browser</B></LI></P>

<ol>

<p><li> Open the project you saved in the previous exercise.</li></p>

<p><li> In the Visual Basic IDE, press <B>F2</B> to open the <B>Object Browser</B>.</li></p>

<p><li> From the <B>Project/Library</B> list box, select <B>Project1</B>.</li></p>

<p><li> Click the <B>CFile</B> class icon.</li></p>

<p>The right window pane lists the members from the CFile class, with their descriptions.</p>

<p><li> Click the <B>Status</B> event member.</li></p>

<p>Notice that the declaration information for the Status event, as well as the description you wrote for the event in the Class Builder, are listed, as illustrated in Figure 3.7.</p>

<P>
<A HREF="javascript:fullSize('F03xx07x.htm')"> <img src="images/F03xx07.JPG" width=404 height=367 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.7</b> <i>Viewing information about CFile in the Object Browser</i><!--/caption-->
</P>


<p><li> Close the <B>Object Browser</B>.</li></p>

</ol>


<A NAME="134"><H2>Instantiating a Class </H2></A>

<P>You can have several class modules in an application. To use a class module in your application, you create an instance of the class. This gives you access to the properties, methods, and events of the object defined by the class. Because we ultimately want to put our class modules in a COM DLL, this course will focus on instantiating classes within COM DLLs.</P>

<P>To create objects from a class contained within a COM DLL, you should set a reference to the COM DLL's type library.</P>

<P><LI><B> To set a reference to an object library in Visual Basic</B></LI></P>

<ol>

<p><li> On the <B>Project</B> menu, click <B>References</B>.</li></p>

<p><li> Select the object library to reference, then click <B>OK</B>.</li></p>

</ol>

<P>From a client, you can create an instance of a class in two ways: by using the CreateObject function or by using the New operator. The New operator is the fastest way to create an object. In either case, you must assign the instance to an object variable.</P>

<P>If the COM component supplies a type library, you can use the New keyword in a variable declaration or Set statement to create a new object and assign an object reference to an object variable. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim XL As Excel.Application

Set XL = New Excel.Application
XL.Visible = True
</PRE>
</TD></TR></TABLE>
</P>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
If you use New when declaring the object variable, Visual Basic creates a new instance of the object when it is first referenced, so you don't have to use the Set statement to assign the object reference. However, you should avoid declaring variables using the New keyword because it can slow your application. Every time Visual Basic encounters a variable declared using the New keyword, Visual Basic must test whether or not an object reference has already been assigned to the variable.
</blockquote></div>
</p>

<P>Regardless of whether or not a COM component supplies a type library, you can use the CreateObject function in a Set statement to create a new object and assign an object reference to an object variable. You must specify the object's programmatic identifier as an argument to the function. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim XL As Object

Set XL = CreateObject(&quot;Excel.Application&quot;)
XL.Visible = True
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="135"><H3>Performance Considerations</H3></A>

<P>You can make your Visual Basic applications run faster by optimizing the way Visual Basic resolves object references. The speed with which Visual Basic handles an object reference is affected by whether it is early-bound or late-bound. Object references that use early-bound variables almost always run faster than those that use late-bound variables.</P>

<p><b>Early Binding</b></p>

<P>Object references are early-bound if they use object variables declared as variables of a specific class. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim XL As Excel.Application
</PRE>
</TD></TR></TABLE>
</P>

<P>Visual Basic can resolve the reference to an object at compile time if it can detect at compile time what object a property or method belongs to. This is called <I>early binding</I>. Early binding dramatically reduces the time required to set or retrieve a property value, because the call overhead can be a significant part of the total time. For method calls, the improvement depends on the amount of work the method does.</P>

<p><b>Late Binding</b></p>

<P>Object references are late-bound if they use object variables declared as variables of the generic Object class. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim XL As Object
</PRE>
</TD></TR></TABLE>
</P>

<P>When you declare a variable As Object, Visual Basic cannot determine at compile time what kind of object reference the variable will contain. In this situation, Visual Basic must use late binding and must determine at run time whether or not that object will actually have the properties and methods you used in your code.</P>

<P>For example, Visual Basic compiles the following code without generating errors, even though it refers to a method that doesn't exist, because it uses a late-bound object variable. Visual Basic doesn't check for the existence of the method until run time, so it produces a run-time error:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim XL As Object
Set XL = CreateObject(&quot;Excel.Application&quot;)
XL.TheNonexistingMethod   ' Method doesn't exist
</PRE>
</TD></TR></TABLE>
</P>

<P>This code runs slower than code that uses an early-bound object variable because Visual Basic must include code in the compiled executable that determines at run time whether the Microsoft Excel Application object has a TheNonexistingMethod method.</P>

<P>Although late binding is the slowest way to invoke the properties and methods of an object, there are times when it is necessary. For example, you may write a function that uses an object variable to act on any of several different classes of objects. Because you don't know in advance what class of object will be assigned to the variable at run time, you would declare it as a late-bound variable using As Object.</P>

<p><b>In-Process vs. Out-of-Process Components  </b></p>

<P>COM components interact with your application and with each other through a client/server relationship. The client is an application that uses the features of a component. The server is a COM component and that contains one or more class from which objects can be created.</P>

<P>Generally, if you create a COM component from an ActiveX EXE project, it is an out-of-process server and runs in its own process. On the other hand, if you create a COM component from an ActiveX DLL project, the component is an in-process server and runs in the same process as the client application.</P>

<P>Applications that use in-process servers almost always run faster than those that use out-of-process servers because the application doesn't have to cross process boundaries to use an object's properties, methods, and events.</P>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="136"><H2>Practice: Using a Component's Properties, Methods, and Events </H2></A>

<P>In this practice, you will use Microsoft Excel objects to create a simple application.</P>

<P><LI><B> To create a COM client application</B></LI></P>

<ol>

<p><li> Open a new Standard EXE project in Visual Basic.</li></p>

<p><li> Add a command button to Form1, set the button's Caption to <B>&amp;Close All</B>, and set the button's name to <B>cmdCloseAll</B>.</li></p>

<p><li> Set the Caption property of Form1 to <B>Using</B> <B>Excel</B> <B>Objects</B>.</li></p>

<p>Your form should look similar to the illustration in Figure 3.8.</p>



<P>
<img src="images/F03xx08.GIF" width=382 height=292 border="0">
</P><P>
<!--caption--><b>Figure 3.8</b> <i>Designing the client form</i><!--/caption-->
</P>

</ol>

<P><LI><B> To set a reference to the Excel component's type library</B></LI></P>

<ol>

<p><li> On the <B>Project</B> menu, click <B>References</B>.</li></p>

<p><li> Click the box next to <B>Microsoft Excel 8.0 Object Library</B>, and then click <B>OK</B>.</li></p>

</ol>

<P><LI><B> To use Excel object properties and methods</B></LI></P>

<ol>

<p><li> In the <B>General Declarations</B> section of <B>Form1</B>, type the following code:</li></p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private WithEvents XL As Excel.Application
Private WS As Excel.Worksheet
Private XLChart As Excel.Chart
</PRE>
</TD></TR></TABLE>
</P>

<p><li>In the <B>Form_Load</B> event procedure, type the following code:</li></p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Set XL = New Excel.Application
XL.Visible = True
</PRE>
</TD></TR></TABLE>
</P>

<p><li> In the <B>cmdCloseAll_Click</B> event procedure, type the following code:</li></p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
XL.ActiveWorkbook.Close 0
XL.Quit
Set WS = Nothing
Set XLChart = Nothing
Set XL = Nothing
Unload Me
</PRE>
</TD></TR></TABLE>
</P>
</ol>

<P><LI><B> To use Excel object events</B></LI></P>

<ol>

<p><li> In the Code window, select <B>XL</B> from the Object list box, as illustrated in Figure 3.9.</li></p>

<p>The XL object is available in the Object list box because it was declared using the WithEvents keyword.</p>

<P>
<A HREF="javascript:fullSize('F03xx09x.htm')"> <img src="images/F03xx09.JPG" width=404 height=196 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.9</b> <i>Selecting XL from the Object list box</i><!--/caption-->
</P>


<p><li> From the <B>Procedure</B> list box in the <B>Code</B> window, select the <B>NewWorkbook</B> event procedure.</li></p>

<p><li> In the <B>XL_NewWorkbook</B> event procedure, type the following code:</li></p>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim i As Integer

Set WS = Wb.Worksheets.Add
For i = 1 To 10
    WS.Range(&quot;A&quot; &amp; Trim(Str(i))).Value = i
Next
WS.Range(&quot;A1:A10&quot;).Select
Set XLChart = XL.Charts.Add()
XLChart.Type = xl3DColumn
Me.Show
</PRE>
</TD></TR></TABLE>
</P>
</ol>

<P><LI><B> To test the Excel client application</B></LI></P>

<ol>

<p><li> On the <B>Run</B> menu, click <B>Start</B>.</li></p>

<p>Microsoft Excel opens.</p>

<p><li> On the <B>File</B> menu in Microsoft Excel, click <B>New</B>.</li></p>

<p><li> In the <B>New</B> dialog box, click <B>Workbook</B>, and then click <B>OK</B>.</li></p>

<p>The XL_NewWorkbook event procedure runs in response to the addition of a new workbook in Excel. Excel creates a chart based on the range of values entered into the Worksheet object that your application created, and your form has focus.</p>

<p><li> Click <B>Close All</B> on your form to stop your application.</li></p>

</ol>


<A NAME="137"><H2>Lesson Summary </H2></A>

<P>You can use class modules in one or more Visual Basic applications, and also within a compiled COM DLL. In the latter case, you do not add the class module to your project; instead, reference it via its type library, which is a resource that contains detailed descriptions of classes. The Object Browser, which is designed to read type libraries, lets you display the classes that are available in projects and libraries.</P>

<P>To use a class module in an application, you must create an instance of the class (object). You should first set a reference to the appropriate type library, then create an instance with the CreateObject function or the New operator.</P>

<P>To make your application run quickly and efficiently, optimize the resolution of object references. Early-bound objects always run faster than late-bound objects. If you must use late-binding -for example, if you don't know in advance what class of object will be assigned to a variable - declare it As Object. Also, in-process components offer better performance than out-of-process components; the client does not have to cross process boundaries to use a server object's properties, methods, and events.</P>


</BODY>
</HTML>



