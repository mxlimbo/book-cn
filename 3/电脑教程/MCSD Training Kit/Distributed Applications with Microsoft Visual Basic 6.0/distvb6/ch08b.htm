<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Stored Procedures</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08a.htm", "ch08c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="309"><H1>Lesson 1: Overview of Stored Procedures</H1></A>

<P>A stored procedure is a set of one or more SQL statements that is precompiled and processed as a single task. Each application needing to perform that task can simply execute the stored procedure, which is similar to executing an SQL command, except that the stored procedure exists in the database as an object, even after execution has finished.</P>

<P>Stored procedures can contain program flow, logic, and queries against the database. They can accept parameters, generate parameters, return single or multiple recordsets, and return values. Stored procedures can also be written to validate, modify, insert, and/or delete data. Because SQL Server compiles and saves stored procedures as a single unit of work, stored procedures run much faster than SQL statements submitted as separate SQL queries.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>

<ul>
<p><li> Describe the purpose of stored procedures.</li></p>
<p><li> Explain the benefits of using stored procedures.</li></p>
<p><li> Use the ADO Command object to run stored procedures.</li></p>
<p><li> Describe the relationship between ADO parameter objects and stored procedures.</li></p>
</ul>

<b>Estimated lesson time: 45 minutes</b>
</blockquote></div>
</p>

<A NAME="310"><H2>Advantages of Using Stored Procedures</H2></A>

<P>In many applications, tasks are implemented as a series of SQL statements. Conditional logic is applied based on the results of one SQL statement to determine which subsequent SQL statements are executed. When the related SQL statements and conditional logic are packaged into a stored procedure, they become part of a single execution plan on the server. Therefore, in addition to encapsulating business rules, stored procedures hide complex SQL statements from applications.</P>

<P>Most stored procedures are created by database administrators (DBAs) and then used by application programmers. In addition to hiding complex SQL statements from applications, stored procedures can shield developers from needing to know the details of the tables in a database. If a set of stored procedures supports all of the business functions you need to perform, you never need to access the tables directly. Instead, you can just execute the stored procedures that model the business processes with which you are familiar.</P>

<P>By coding business logic into a single stored procedure, you provide a single point of control for ensuring that business rules are correctly enforced. This can be extremely useful when building a client/server application that accesses a SQL Server database. Because stored procedures can encapsulate business rules and integrity rules, the rules do not need to be addressed on the client or in a middle tier component.</P>

<P>Stored procedures can streamline the execution of a query because of their ability to:</P>
<ul>
<p><li> Accept parameters.</li></p>
<p><li> Return values of parameters to a calling procedure or client.</li></p>
<p><li> Return a status value that indicates success or failure, as well as the reason for the failure.</li></p>
<p><li> Call other stored procedures.</li></p>
<p><li> Encapsulate business functionality so that all applications can use and perform the procedures consistently.</li></p>
<p><li> Be faster and more efficient; once stored procedures are compiled, no syntax checking is required when they are executed.</li></p>
<p><li> Store the compiled version on the server and use it for subsequent calls, thus reducing network traffic.</li></p>
<p><li> Be called from different client applications.</li></p>
</ul>

<A NAME="311"><H2>Stored Procedures in a Two-Tier Model</H2></A>

<P>In a physical two-tier implementation using thin clients, data and business services are contained on the server database. In this implementation, business logic is generally written as stored procedures and <I>triggers</I> within the database. Triggers are a special type of stored procedure designed to execute automatically when data is modified-for example, when an Update, an Insert, or a Delete SQL statement is issued against a table.</P>

<P>The major advantage of this fat server (or thin client) implementation is performance. The business logic runs in the same process space as the data access code and is tightly integrated into the data search engine of SQL Server, as illustrated in Figure 8.1.</P>

<P>
<img src="images/F08xx01.GIF" width=399 height=226 border="0">
</P><P>
<!--caption--><b>Figure 8.1</b> <i>A two-tier fat server (or thin client) configuration</i><!--/caption-->
</P>


<P>With a fat server, data does not have to be moved or copied before it is operated on, which results in minimal network traffic and the fewest possible network roundtrips between client and server. For example, instead of calculating an average value by transferring the data across the network and generating the value on the client, a stored procedure can calculate it locally. Some other advantages include:</P>

<ul>
<p><li>Security</li></p>
<p>Security is improved by restricting access only to the stored procedure and denying access to the data structure itself. In addition, data is encapsulated to the extent that the structure can change without breaking client-side code.</p>

<p><li>Reusability</li></p>
<p>Processing logic is shared across multiple applications. Application reuse is improved by enabling multiple presentation components to call the same stored procedure. </p>

<p><li>Scalability</li></p>
<p>Stored procedures improve database scalability by allowing the database's own specialized code to efficiently process data. In addition, these procedures are compiled so they can be quick to start as well as efficient to run.</p>
</ul>

<P>A disadvantage of fat server implementation is that it limits your choice of development tools. Stored procedures are written in the language supported by the database. SQL Server supports calls from the server to code written in languages other than Transact-SQL, but this option adds complexity and is generally not as efficient as the same functionality written in Transact-SQL.</P>

<A NAME="312"><H2>Stored Procedures in an N-Tier Model</H2></A>

<P>As described in the previous section, the fat server implementation provides outstanding performance because both business and data services are performed on the data tier. However, using stored procedures is not restricted to a two-tier development model. Stored procedures that encapsulate predefined SQL statements provide performance benefits in any implementation, including the n-tier model.</P>

<P>In an n-tier implementation, business logic runs in a separate process that can be configured to run either on the database server, or a different server. The key distinction of the physical n-tier implementation is that there is a cross-process boundary, if not a cross-computer boundary, between data services and business services. There is also a cross-process or cross-computer boundary between business services and presentation services. Client applications that provide presentation services can call methods of COM DLLs that in turn call stored procedures on a database server. For example, a client application could call an UpdatePrices method on a COM DLL. The UpdatePrices method would then call a stored procedure that updates prices by ten percent on the database server as, illustrated in Figure 8.2.</P>

<P>
<A HREF="javascript:fullSize('F08xx02x.htm')"> <img src="images/F08xx02.JPG" width=404 height=485 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 8.2</b> <i>A COM DLL calling a stored procedure</i><!--/caption-->
</P>


<A NAME="313"><H2>Stored Procedures and the Command Object</H2></A>

<P>Using ADO, there are several ways to run a stored procedure, one of which is to use the ADO Command object. The Command object allows you to issue commands to the database including query strings, stored procedures, and associated parameters. The Command object can either open a new connection or use an existing one to run a stored procedure, depending on what is specified in the Command object's ActiveConnection property.</P>

<P><LI> <B> To execute a stored procedure using an ADO Command object</B></LI></P>

<ol>
<p><li> Create an ADO Command object and set the ActiveConnection property to use a connection to the database containing the stored procedure you want to call, as shown in the following example.</li></p>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim cn As ADODB.Connection
Dim com As ADODB.Command

Set cn = New ADODB.Connection
Set com = New ADODB.Command
' Open a connection
' ...
' Set the ActiveConnection property
com.ActiveConnection = cn
</PRE>
</TD></TR></TABLE></P>

<p>If the ActiveConnection property is set with a reference to a Connection object, the Command object uses the existing connection. If the ActiveConnection property is specified with a connection string, as shown in the following example, a new connection is established.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim com As ADODB.Command

Set com = New ADODB.Command
com.ActiveConnection = &quot;Provider=SQLOLEDB;User ID=sa;&quot; &amp; _
    &quot;Initial Catalog=pubs;Data Source=VB6ENTSVR&quot;
</PRE>
</TD></TR></TABLE></P>

<p><li> Specify that the command will call a stored procedure by setting its CommandType property to adCmdStoredProc.</li></p>

<p><li> Use the CommandText property to specify the name of the stored procedure to call.</li></p>

<p><li> Call the Command object's Execute method to run the stored procedure.</li></p>

<p>The Execute method runs the stored procedure specified in the CommandText property. If the stored procedure returns records, an ADO Recordset object is created and is returned from the Execute method. In this case, the Execute method is called, as shown in the following example.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set recordset = command.Execute(RecordsAffected, _
    Parameters, Options)
</PRE>
</TD></TR></TABLE></P>

<p>If the stored procedure does not return records, the Execute method is called, as shown in the following example.</p>

<P><TABLE CELLPADDING="5"><TR><td valign="top">
<PRE>
command.Execute RecordsAffected, Parameters, Options
</PRE>
</TD></TR></TABLE></P>
</ol>

<A NAME="314"><H3>Using Stored Procedure Parameters</H3></A>

<P>Your application can pass specific data to a stored procedure by using parameters. In ADO, a Parameter object represents a stored procedure parameter and is associated with the Command object used to run the stored procedure. To create a Parameter on the Command object, use the Append and CreateParameter methods. The CreateParameter method requires two arguments- the name of the parameter and its data type. You can also specify the optional Direction argument to indicate how the parameter is used by the stored procedure. The following code adds an input parameter called GuestID with a data type of integer to the Parameters collection for the Command object called comGetRoomNumber:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
comGetRoomNumber.Parameters.Append _
    comGetRoomNumber.CreateParameter(&quot;GuestID&quot;, _
    adInteger, adParamInput)
</PRE>
</TD></TR></TABLE></P>

<p>
<div class="note"><blockquote>
<b>NOTE</b><hr>
When creating a parameter, you can either assign it a name or reference it by its index. If you choose to assign it a name, the name does not have to match the stored procedure's parameter name in SQL Server.
</blockquote></div>
</p>

<P>Once an input parameter has been added to the Parameters collection of the Command object, set the Value property to specify the data that should be sent to the server. The following example sets the GuestID parameter equal to 5:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
comGetRoomNumber.Parameters(&quot;GuestID&quot;).Value = 5
</PRE>
</TD></TR></TABLE></P>

<P>
<img src="images/practice.gif" width=67 height=55 border="0">
</P>

<A NAME="315"><H2>Practice: Calling a Stored Procedure</H2></A>

<P>In this practice, you will create a COM DLL that contains a method that calls a stored procedure in the Pubs sample database. You will use the Recordset returned from the stored procedure for a client application to browse the list of author IDs returned from the stored procedure.</P>

<P><LI> <B> To create a COM DLL</B></LI></P>
<ol>
<p><li> Start Visual Basic 6.0 and create a new ActiveX DLL project.</li></p>
<p><li> Name the project <B>Royalties</B>.</li></p>
<p><li> Change the name of Class1 to <B>CRoyalties</B>.</li></p>
<p><li> In the <B>References</B> dialog box, set a reference to the Microsoft ActiveX Data Objects library.</li></p>
<p><li> In the <B>General Declarations</B> section, declare a Recordset object variable, as shown in the following example:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private cnPubs As ADODB.Connection
</PRE>
</TD></TR></TABLE></P>

<p><li> In the <B>Class_Initialize</B> event procedure, type the following code:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set cnPubs = New Connection
' Establish a connection
With cnPubs
    .Provider = &quot;SQLOLEDB&quot;
    .ConnectionString =  &quot;User ID=sa;&quot; &amp; _
                         &quot;Data Source=vb6entsvr;&quot; &amp; _
                         &quot;Initial Catalog=pubs&quot;
    .Open
End With
</PRE>
</TD></TR></TABLE></P>

<p><li> To execute the <B>byroyalty</B> stored procedure in the Pubs database, add the following public method to the <B>CRoyalties</B> class:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Public Function GetRoyalties(Percentage As Integer) _
    As ADODB.Recordset
    Dim comRoyalty As ADODB.Command

    Set comRoyalty = New ADODB.Command
    ' Set Command properties
    With comRoyalty
        .ActiveConnection = cnPubs
        .CommandType = adCmdStoredProc
        .CommandText = &quot;byroyalty&quot;
        .Parameters.Append comRoyalty.CreateParameter(&quot;percentage&quot;, _
          adInteger)
        .Parameters(&quot;percentage&quot;).Value = Percentage
    End With
    ' Return a Recordset
    Set GetRoyalties = comRoyalty.Execute()
End Function
</PRE>
</TD></TR></TABLE></P>
</ol>

<P><LI> <B> To create a front-end application</B></LI></P>
<ol>
<p><li> From the File menu in Visual Basic, click <B>Add  Project</B>. </li></p>
<p><li> Select <B>Standard EXE</B> and click <B>Open</B>. </li></p>
<p><li> Right click on the Standard EXE project icon in the Project Explorer, then click <B>Set as Start Up</B>.</li></p>
<p><li> With the Standard EXE project selected, open the References dialog box and set a reference to <B>Royalties</B>.</li></p>
<p><li> Change the name of Form1 to <B>frmRoyaltyList,</B> and set the Caption property to <B>Author IDs for Royalties</B>.</li></p>
<p><li> Add an ADO Data control to the frmRoyaltyList form.</li></p>
<p><li> Name the ADO Data control adcRoyaltyList.</li></p>
<p><li> Add a command button to frmRoyaltyList named <B>cmdRunProc</B>.</li></p>
<p><li> Set the cmdRunProc Caption property to <B>&amp;Run Proc</B>.</li></p>
<p><li> Add a Label control to frmRoyaltyList named <B>lblAuthorID</B>.</li></p>
<p>Your form should look similar to the illustration in Figure 8.3.</p>

<P>
<A HREF="javascript:fullSize('F08xx03x.htm')"> <img src="images/F08xx03.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 8.3</b> <i>The frmRoyaltyList form after adding controls</i><!--/caption-->
</P>


<p><li> In the <B>General Declarations</B> section of frmRoyaltyList, declare the following variables:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private objRoyalty As Royalties.CRoyalties
Private rs As ADODB.Recordset
</PRE>
</TD></TR></TABLE></P>

<p><li> In the <B>cmdRunProc_Click</B> event procedure, type the following code:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
' Call the GetRoyalties method
Set rs = objRoyalty.GetRoyalties(100)
' Set the Recordset property of the ADO Data control
Set adcRoyaltyList.Recordset = rs
' Bind the lblAuthorID control to the ADO Data control
Set lblAuthorID.DataSource = adcRoyaltyList
lblAuthorID.DataField = &quot;au_id&quot;
</PRE>
</TD></TR></TABLE></P>

<p><li> In the <B>Form_Load</B> event procedure, create an instance of the <B>Royalties.CRoyalties</B> class using the following statement:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set objRoyalty = New Royalties.CRoyalties
</PRE>
</TD></TR></TABLE></P>

<p><li> Save the project group and all associated files using the default file names.</li></p>
<p><li> From the <B>Run</B> menu, click <B>Start</B>.</li></p>
<p><li> Click <B>Run Proc</B>.</li></p>
<p>The Label control is now bound to the ADO Data control, and the ADO Data control contains a Recordset object.</p>
<p><li> Use the navigation controls on the ADO Data control to browse through the list of Author IDs.</li></p>
<p><li> From the <B>Run</B> menu, click <B>End</B>.</li></p>
</ol>

<A NAME="316"><H2>Lesson Summary </H2></A>

<P>A stored procedure is a precompiled database object that runs a task. These tasks may include validation, modification, insertion, and deletion of data. Stored procedures can contain program flow, logic, and queries against the database. All of these constructs are executed as a single task. </P>

<P>One benefit of using stored procedures is that they can encapsulate business rules and integrity rules in a way that prevents the rules from having to be addressed on the client or in a middle tier component. Stored procedures can also hide complex SQL statements from applications, and can shield developers from needing to know the details of the tables in a database.</P>

<P>Stored procedures benefit development in a two-tier model because data does not have to be moved or copied before it is operated on, which results in minimal network traffic and the fewest possible network roundtrips between client and server. Stored procedures that encapsulate predefined SQL statements can also provide improved performance in the n-tier model. In an n-tier model, client applications that provide presentation services can call methods of COM DLLs that in turn call stored procedures on a database server.</P>

<P>To execute stored procedures in ADO, you can use a Command object. The Command object's Execute method runs the stored procedure specified in the CommandText property. If the stored procedure returns records, an ADO Recordset object is created and is returned from the Execute method. Your application can also pass specific data to a stored procedure by using ADO Parameter objects, which represent stored procedure parameters.</P>

</BODY>
</HTML>



