<HTML>
<HEAD>
<TITLE>Lesson 1: Connecting to COM Components</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09a.htm", "ch09c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="452"><H1>Lesson 1: Connecting to COM Components</H1></A>

<P>In Chapter 6, &quot;<A HREF="ch06a.htm#287">Introduction to Class Modules</A>&quot; you learned how to create class modules that are compiled inside an application and are available only to that project. In this chapter, you'll learn how to connect to external COM components to extend the functionality of your application.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the benefits of using a COM component.</li></p>

<p><li>Explain how to register a COM component.</li></p>

<p><li>Explain the benefits of using a type library.</li></p>

<p><li>Describe how to set a reference to a type library.</li></p>

<p><li>Describe type libraries.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="453"><H2>Review of COM Components</H2></A>

<P>COM is a standard, or model, for the interaction of objects. An important feature of COM is that objects are precompiled, so that the language in which they were created does not affect the client application that is making the connection. COM provides the standard model for integrating objects.</P>

<P>COM components are units of code that provide specific functionality. COM components can be either internal components, which are compiled into a project and are available only to that project, or external components, which are compiled into an executable (.exe) or dynamic-link library (.dll). Although COM components are typically libraries of classes, entire applications such as Microsoft Excel or Internet Explorer are also COM components. Client applications use a technique called automation to take advantage of the services that such components provide. Any client application can use an external component. Client applications use components in the same way, whether the component was compiled in a .dll or an .exe. In this lesson, you will learn how to create a Visual Basic client application that uses an external COM component.</P>

<A NAME="454"><H2>Registering a Component</H2></A>

<P>In Chapter 6, &quot;<A HREF="ch06a.htm#287">Introduction to Class Modules</A>&quot; you added a COM component's class module, and its properties, methods, and events, to your project. You could then use the class module to create objects for use in a single application. However, you can also use external components in your application. External components, called servers, can be ActiveX DLLs or EXEs created in Visual Basic, or provided by third party developers. Before you can use an external server component, you must ensure that the actual component is available on your computer.</P>

<P>When you run the installation program for a component, it adds any required files and, typically, also registers the component. If you are using a component that does not have an installation program, use the Regsvr32 (Regsvr32.exe) utility to register the component yourself.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When you create your own ActiveX EXE program and run it from the Visual Basic IDE (Integrated Development Environment), it is automatically registered on your computer.
</blockquote></div></p>

<A NAME="455"><H3>Using the Regsvr32 Utility</H3></A>

<P>The Regsvr32 utility is located in the system directory (for example, C:\Windows\System). You can run Regsvr32 either from an MS-DOS prompt or from the Run command on the Windows Start menu. Because you cannot run a DLL by itself, you must use the Regsvr32 utility to register a DLL component. Regsvr32 has several options. For example, use the /u option to unregister a COM server; use the /s (silent) option to register a server without displaying subsequent dialog boxes. You can see a list of all Regsvr32 options by running Regsvr32.exe without specifying a DLL name, as shown in Figures 9.1 and 9.2.</P>

<P>
<img src="images/F09xx01.GIF" width=347 height=163 border="0">
</P><P>
<!--caption--><B>Figure 9.1</B> <i>Running Regsvr32 without specifying a DLL name</i>  <!--/caption-->
</P>


<P>
<A HREF="javascript:fullSize('F09xx02x.htm')"> <img src="images/F09xx02.JPG" width=404 height=178 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 9.2</B> <i>The RegSvr32 options dialog box</i>  <!--/caption-->
</P>


<P><LI><B>To register a DLL component</B></LI></P>

<OL>
<P><LI>Click the Windows <B>Start</B> button.</LI></P>

<P><LI>On the <B>Start</B> menu, click <B>Run</B>.</LI></P>

<P><LI>On the <B>Run</B> dialog box, type the following command:</LI></P>

 <p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Regsvr32.exe &lt;DLLPath&gt;\&lt;DLL name&gt;.dll</pre>
</td></tr>
</table>
</p>

<P>A dialog similar to that shown in Figure 9.3 appears.</P>

<P><LI>Click <B>OK</B>.</LI></P>

<P>
<img src="images/F09xx03.GIF" width=350 height=119 border="0">
</P><P>
<!--caption--><B>Figure 9.3</B> <i>RegSvr32 confirmation dialog box</i>  <!--/caption-->
</P>


<P>You can register an ActiveX EXE simply by running it, or double-clicking the file in Windows Explorer. In addition, if you use the command-line options /regserver and /unregserver, you can register or unregister any ActiveX EXE without invoking the program's user interface.</P>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><HR>
You unregister a component to manually remove component references from the system registry. You can then delete the component's EXE or DLL file.
</blockquote></div></p>

<P><LI><B>To register or unregister an EXE component</B></LI></P>

<ul>
<p><li>Type the filename of the component (including the path) followed by /regserver or /unregserver.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>C:\MyProject\MyComponent.exe /regserver</pre>
</td></tr>
</table>
</p>
</ul>

<A NAME="456"><H2>Using Type Libraries</H2></A>

<P>COM components, including Microsoft Excel and Microsoft Word, contain libraries of available properties, methods, and events. These libraries are called type libraries.</P>

<P>Type libraries also contain the specifications for one or more COM elements, such as the available properties and methods. A type library can be either an .olb or a .tlb file, or part of the .exe or .dll that the type library describes. These files are stored in a standard binary format. The type library viewers such as the Object Browser are used to review information about the COM elements in the library.</P>

<P>Viewing the type library provides you with the proper syntax for the classes, interfaces, methods, properties, and events of the COM object.</P>

<A NAME="457"><H2>Setting References</H2></A>

<P>There are many benefits to using type libraries. One benefit is that, at design time, you have immediate access to the component's Auto List Members. The Auto List Members is the drop-down list that appears as you enter code. This list contains the component's properties and methods. When a component does not have a type library, the properties, methods, and events are not validated until the application is run; in this case, you can not use the Auto List Members feature.</P>

<P>To make a library available to your application, you set a reference to the component's type library in Visual Basic.</P>

<p>
<img src="images/video.gif" width=78 height=54 border=0>
</p>

<P>To see a demonstration, run the Chap09.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To set a reference to a type library</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>References</B>.</LI></P>

<P>The <B>References</B> dialog box appears.</P>
<P><LI>Click the reference to the type library you want to use, then click <B>OK</B>.</LI></P>
</ol>

<P>If a component is selected in the referenced library, but you are not using it, you should clear the check box in the References dialog box. By minimizing the number of object references your application uses, you reduce the size of your application and the time it takes for your project to compile. You cannot remove a reference for a component that is used in your project. You also cannot remove the &quot;Visual Basic For Applications&quot; and &quot;Visual Basic objects and procedures&quot; references, because they are necessary for running Visual Basic.</P>

<A NAME="458"><H2>Lesson Summary</H2></A>

<P>Component Object Model (COM) components are units of code that provide specific functionality. COM components are either internal components, which are compiled into a project and are available only to that project, or external components, which are compiled into an executable (.exe) or dynamic-link library (.dll).</P>

<P>Before you use an external component, make sure that it is available and registered on your computer. Use Regsvr32 to register both ActiveX DLLs and Active EXEs. There are several options available with Regsvr32. For example, use the /u option to unregister a server and the /s (silent) option to register a server without displaying a success dialog box.</P>

<P>A type library is a description of all objects, methods, events, and properties for a COM component. Set a reference to the component's type library to make it available to your application. Remove any components and library references which your application does not need to ensure more efficient compiling.</P>

</BODY>
</HTML>






