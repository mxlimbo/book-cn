<HTML>
<HEAD>
<TITLE>Lesson 2: Testing Your Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="226"><H1>Lesson 2: Testing Your Application</H1></A>

<P>Visual Basic provides several tools to help diagnose problems. These tools help you examine your application's flow, as well as the variable and property changes.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Explain the use of the Immediate window.</li></p>

<p><li>Explain the Debug object and how you use its two methods.</li></p>

<p><li>Explain the use of the Locals window.</li></p>

<p><li>Explain how to use Watch expressions.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="227"><H2>The Immediate Window</H2></A>

<P>When you are debugging your application, there may be times when you want to evaluate expressions, change the value of variables, or execute different procedures. You can use the Immediate window (Figure 4.2) to accomplish all of these tasks.</P>

<P>
<img src="images/F04xx02.GIF" width=328 height=165 border="0">
</P><P>
<!--caption--><B>Figure 4.2</B> <i>The Immediate window</i>  <!--/caption-->
</P>


<A NAME="228"><H3>Evaluating Variables and Expressions</H3></A>

<P>The Immediate window can be used to evaluate any valid Visual Basic statement, but it does not accept data declarations. You can enter calls to Sub and Function procedures, which allows you to evaluate the effect of a procedure given a different set of arguments. While you are in break mode, enter a statement in the Immediate window as you would in the Code window. For example:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
NaturalLog=log(35)
</PRE></TD></TR></TABLE></P>

<P>When you press the ENTER key, Visual Basic switches to run time to execute the statement, and then returns to break mode. At that point, you can see the results and test any possible effects on variables or property values.</P>

<A NAME="229"><H3>Printing Information in the Immediate Window</H3></A>

<P>When your application is in break mode, you can examine data by printing values directly in the Immediate window. Once you have focus on the Immediate window, you can use the Print method. A question mark (?) is used as shorthand for the Print method. The question mark means the same as Print, and can be used in any context where Print is used. The following example prints the current value of a variable in the Immediate window:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Print strCustomerName
</PRE></TD></TR></TABLE></P>

<P>You can use the ? command to accomplish the same thing, as in the following example:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
? strCustomerName
</PRE></TD></TR></TABLE></P>

<A NAME="230"><H3>Printing Values of Properties</H3></A>

<P>Any valid expression that is within scope can be evaluated from the Immediate window. The currently active form or module determines the scope. If the code in which you entered break mode is attached to a form, you can view the properties of that form and the properties of any control on that form by using nonexplicit arguments, as in the following:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
? Caption
? Text1.Text
</PRE></TD></TR></TABLE></P>

<P>Assuming that Text1 is a control on the currently active form, the first statement prints to the Immediate window the string value of the current form's caption. The second statement prints the text in the Text1 control.</P>

<P>If execution is suspended in a module or another form, you must explicitly specify the form name as follows:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
? Form1.Caption
? Form1.Text1.Text
</PRE></TD></TR></TABLE></P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Referencing an unloaded form in the Immediate window loads that form.
</blockquote></div></p>

<A NAME="231"><H3>Viewing and Testing Multiple Instances of Procedures</H3></A>

<P>You can repeatedly run a procedure in the Immediate window to test the effect of different arguments. A separate instance of each call to a procedure is maintained in Visual Basic. This allows you to test variables and properties in each instance of a call to a procedure. To see an example of how this works, open a new project and enter the following code in the form module:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Form_Click()
     FirstProcedure
End Sub
Sub FirstProcedure()
  Dim intFirst As Integer
  intFirst = 10
  SecondProcedure
End Sub
Sub SecondProcedure()
  Stop
End Sub
</PRE></TD></TR></TABLE></P>


<P>Run the application and click the form. The Stop statement puts Visual Basic into break mode and the Immediate window is displayed. In the Code window, change the value of intFirst to 15 in the procedure FirstProcedure, switch to the Immediate window, and type the following:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
FirstProcedure
</PRE></TD></TR></TABLE></P>

<P>This calls the procedure and restarts the application. Open the Call Stack dialog box and you'll see a listing of each separate run of the program, separated by the [&lt;Debug Window&gt;] listing. You can use the Call Stack dialog box to select any instance of a procedure, and then print the values of variables from that procedure in the Immediate window.</P>

<P>For example, if you double-click the earliest instance of FirstProcedure (the one closest to the bottom) and use the Immediate window to print the value of intFirst, it will return 10. If you double-click the second instance of FirstProcedure, 15 will be returned as the value of intFirst.</P>

<A NAME="232"><H3>Changing Values of Variables</H3></A>

<P>Sometimes when testing your application, you need to evaluate the effects of particular data values. When in break mode, you can use statements in the Immediate window to set values:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
VScroll1.Value = 250
intDenominator = 0
</PRE></TD></TR></TABLE></P>

<P>Once the values of one or more properties or variables are changed, you can resume execution to see the results.</P>

<A NAME="233"><H3>Immediate Window Shortcuts</H3></A>

<P>Here are some shortcuts you can use in the Immediate window:</P>
<UL>
<p><li>Once you enter a statement, you can execute it again by moving the cursor back to that statement and pressing ENTER.</li></p>

<p><li>Before pressing ENTER, you can edit the current statement to alter its effects.</li></p>

<p><li>You can use the mouse or the arrow keys to move around in the Immediate window. Don't press ENTER unless you are at a statement you want to execute.</li></p>

<p><li>CTRL+HOME moves the cursor to the top of the Immediate window.</li></p>

<p><li>CTRL+END moves the cursor to the bottom of the Immediate window.</li></p>

<p><li>The HOME and END keys move to the beginning and end of the current line.</li></p>
</UL>

<A NAME="234"><H2>Using the Debug Object</H2></A>

<P>The Debug object gives developers the option of debugging their applications at full speed. The Debug object has two methods that help with debugging your code during run time. The first is the Print method, which allows output from your code to the Immediate window. The second is the Assert method, which conditionally suspends execution at the line on which the method appears. </P>

<A NAME="235"><H3>Debug.Print</H3></A>

<P>The Debug object's Print method allows you to send output from your program to the Immediate window without entering break mode. This gives you the ability to track variable values at full execution speed while creating a history list of the values in the Immediate window. For example, the following statement prints the value of intCount to the Immediate window every time the statement is executed:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Debug.Print &quot;Count = &quot; &amp; intCount
</PRE></TD></TR></TABLE></P>

<P>When your application is compiled into an executable file, all of the Debug.Print statements are removed. However, Visual Basic does not remove function calls that are arguments to the Debug.Print statement. Thus, any effects that those functions have on your program will continue to occur in a compiled executable, even though the function results are not printed. If your application uses only Debug.Print statements with strings or simple variable types as arguments, all the Debug.Print statements will be removed. </P>

<A NAME="236"><H3>Debug.Assert</H3></A>

<P>The Debug object's Assert method forces a run-time break when an expression evaluates to False. If the expression evaluates to True, the program operation continues. For example: </P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Function Division(x As Long, y As Long, z As Long) As Long
    Debug.Assert (y &lt;&gt; 0 And z &lt;&gt; 0)
    Division = x / y / z
End Function
</PRE></TD></TR></TABLE></P>

<P>If you call the Division function as: </P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
q = Division (240, 2, 3)
</PRE></TD></TR></TABLE></P>

<P>the program will continue as normal. However, if you pass a zero as a denominator, then the Assert method forces a break. The following example would force a break at the Debug.Assert statement: </P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
q = Division (240, 0, 3)
</PRE></TD></TR></TABLE></P>

<P>The preceding example allows you to debug your application for incorrect parameters that have been passed to the function. If a break occurs at the Debug.Assert statement, you can check the program variables to determine which value is inappropriate. This is especially useful when the argument values come from other functions, as in this example: </P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
q = Division(calcX(), calcY(), calcZ())
</PRE></TD></TR></TABLE></P>

<P>The Assert method is used only for debugging your programs within the design environment. When you compile your application into an executable program, Visual Basic removes all of the Assert statements from the final code. </P>

<A NAME="237"><H2>Using the Locals Window</H2></A>

<P>The Locals window shows the value of all variables that are within the scope of the current procedure. As the execution of your program goes from procedure to procedure, the information shown on the Locals window changes to only the variables that are used in the current procedure. For example, you would use the Locals window to monitor how all your values change as the code runs. To access the Locals window, select Locals Window from the View menu or from the Debug toolbar. Figure 4.3 shows the Locals window.</P>

<P>When the Locals window is visible, it is automatically updated every time your program changes from run mode to break mode or when you navigate in the Call Stack dialog box.</P>

<P>
<A HREF="javascript:fullSize('F04xx03x.htm')"> <img src="images/F04xx03.JPG" width=404 height=125 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 4.3</B> <i>Locals window</i>  <!--/caption-->
</P>


<A NAME="238"><H3>Call Stack Button</H3></A>

<P>The Call Stack button opens the Call Stack dialog box, which lists the procedures in the call stack.</P>

<A NAME="239"><H3>Expression Column</H3></A>

<P>The Expression column lists the name of the variables. </P>

<P>The first variable in the list &lt;Me&gt; is a special module variable and can be expanded to display all module level variables and properties of objects within the current scope. Global variables and variables in other projects are not accessible from the Locals window.</P>

<A NAME="240"><H3>Value Column</H3></A>

<P>The Value column lists the value of each of the variables and properties.</P>

<P>When you select an item and click on its value in the Value column, the cursor changes to an I-beam, allowing you to edit the value. Once you have changed a value, press the ENTER key or move to another field to validate the change. If you enter a value that is illegal, the Edit field remains active and the value you entered is highlighted. A message box describing the error also appears. You can cancel a change that you made by pressing the ESC key.</P>

<P>Within the Value column, all numeric variables must have a value listed. String variables can have an empty Value list.</P>

<A NAME="241"><H3>Type Column</H3></A>

<P>The Type column lists the variable type. You cannot edit the data in this column. </P>

<A NAME="242"><H2>Setting Watch Expressions</H2></A>

<P>As you work through debugging your application, a calculation may not produce the desired result, or problems may occur when a certain variable or property assumes a particular value. Not all debugging problems are immediately traceable to a statement, so sometimes you may need to observe the value of a variable or expression throughout a procedure. In this case, you define a watch expression, or expression whose value you want to monitor. Visual Basic can automatically monitor the watch expressions that you define. When your application enters break mode, these watch expressions appear in the Watches window, where you can observe their values.</P>

<P>You can also set watch expressions that put your application into break mode whenever the expression's value changes or equals a specified value. These are sometimes called break expressions. Break expressions are extremely helpful when you are debugging a section of your code that uses a large number of iterations. For example, instead of stepping through a loop in your program one statement at a time, you can set a watch expression to put your application into break mode when a counter variable reaches a certain value. </P>

<A NAME="243"><H3>Adding a Watch Expression</H3></A>

<P>Watch expressions can be added at design time or while your application is in break mode. In either case, the Add Watch dialog box, shown in Figure 4.4, is used to add watch expressions.</P>

<P>
<img src="images/F04xx04.GIF" width=384 height=277 border="0">
</P><P>
<!--caption--><B>Figure 4.4</B> <i>Add Watch dialog box</i>  <!--/caption-->
</P>


<P>The first component of the Add Watch dialog box is the Expression box. This is where you enter the expression to be evaluated. The expression can be a variable, a property, a function call, or any other valid expression. </P>

<P>The second component is the Context option group. These options allow you to set the scope of variables watched in the expression. You should use the Context option if you have variables of the same name with different scope. This will then allow you to restrict the scope of variables in watch expressions to a specific procedure or to a specific form or module. You can also have it apply to the entire application by selecting All Procedures and All Modules. </P>

<P>The third component is the Watch Type option group. This sets how Visual Basic responds to the watch expression. The Watch Expression option displays the expression's value in the Watches window when the application enters break mode. The other two options have the application enter break mode automatically when the expression evaluates to a True (nonzero) statement or each time the value of the expression changes. </P>

<P><LI><B>To add a watch expression</B></LI></P>

<OL>
<P><LI>On the <B>Debug</B> menu, click <B>Add Watch</B>.</LI></P>

<P><LI>Enter the expression that you want to evaluate in the <B>Expression</B> box.</LI></P>

<P><LI>Use the <B>Context</B> options if you need to set the scope of the variables to watch,.</LI></P>

<P><LI>Select an option in the <B>Watch Type</B> group to determine how you want Visual Basic to respond to the watch expression.</LI></P>

<P><LI>Click <B>OK</B>. </LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
You can add an expression to the Watches window by dragging and dropping from the Code window.
</blockquote></div></p>

<A NAME="244"><H3>Editing or Deleting a Watch Expression</H3></A>
<P>The Edit Watch dialog box lists all of your current watch expressions. You can use this dialog box to edit and delete any watch listed in the Watches window.</P>

<P><LI><B>To edit a watch expression </B></LI></P>

<OL>
<P><LI>In the <B>Watches</B> window, click the watch expression you want to edit.</LI></P>

<P><LI> Double-click the watch expression, or, on the <B>Debug</B> menu, click <B>Edit Watch</B>. </LI></P>

<P>The <B>Edit Watch</B> dialog box appears.</P>
<P><LI>Make any changes to the expression, the scope for evaluating variables, or the watch type.</LI></P>

<P><LI>Click <B>OK</B>.</LI></P>
</OL>

<A NAME="245"><H3>Identifying Watch Types</H3></A>

<P>The icons on the left edge of each expression in the Watches window identify the type of that watch expression. There are three types of watch expressions: </P>
<UL>
<p><li>Watch expression</li></p>

<p><li>Break when expression is true</li></p>

<p><li>Break when expression has changed</li></p>
</UL>

<A NAME="246"><H3>Using Quick Watch</H3></A>

<P>While in break mode, you can use Quick Watch to see the value of a property, variable, or expression. The Quick Watch dialog box shows the value of the expression you select in the Code window. You can then add this expression to the Watches window by clicking the Add button.</P>

<P><LI><B>To display the Quick Watch dialog box</B></LI></P>

<OL>
<P><LI>Select a property, variable, or expression in the <B>Code</B> window.</LI></P>

<P><LI>Press <B>SHIFT+F9</B>, or, on the <B>Debug</B> toolbar, click <B>Quick Watch</B>.</LI></P>

<P><LI>Click <B>Add</B> if you want to add the expression to the <B>Watches</B> window.</LI></P>
</OL>

<A NAME="247"><H2>The Call Stack Dialog Box</H2></A>

<P>The Call Stack dialog box shows a list of all the procedure calls that are active in your program. Procedure calls are considered active when the procedure has been started but not completed.</P>

<P>The Call Stack dialog box, shown in Figure 4.5, lets you trace the flow of your application as it executes through nested procedures. For example, suppose a procedure in your application calls a second procedure. The calling procedure will not complete until the second procedure finishes. While the second procedure executes, both procedures are active and displayed in the Call Stack dialog box. </P>

<P>
<A HREF="javascript:fullSize('F04xx05x.htm')"> <img src="images/F04xx05.JPG" width=404 height=151 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 4.5</B> <i>Call Stack dialog box</i>  <!--/caption-->
</P>


<P>The Call Stack dialog box can be displayed only when your application is in break mode.</P>

<P><LI><B>To display the Call Stack dialog box </B></LI></P>

<P>Select one of the following methods:</P>
<uL>
<P><LI> On the <B>View</B> menu, click <B>Call Stack</B>.</LI></P>

<P><LI> On the <B>Debug</B> toolbar click <B>Call Stack</B>.</LI></P>

<P><LI> Press <B>CTRL+L</B>.</LI></P>

<P><LI> In the <B>Locals</B> window, click the button next to the <B>Procedure</B> box.</LI></P>
</uL>


<A NAME="248"><H3>Tracing Nested Procedures</H3></A>

<P>The Call Stack dialog box lists all the active procedure calls in a series of nested calls. At the bottom of the Call Stack dialog box's list is the earliest active procedure. Each subsequent procedure call is placed on the top of the list. The information shown in the list begins with the module or form name, followed by the name of the called procedure. </P>

<P>The Call Stack dialog box can be used to display the call statement of that nested procedure. </P>

<P><LI><B>To display the call statement from the Calls Stack dialog box </B></LI></P>

<OL>
<P><LI>In the <B>Call Stack</B> dialog box, select the procedure that has the call statement you want to display.</LI></P>

<P><LI>Click <B>Show</B>.</LI></P>
</OL>

<P>The cursor location in the Code window indicates the statement that calls the next procedure in the Call Stack dialog box. If you choose the last procedure in the Call Stack<B> </B>dialog box (the procedure at the top of the list), the cursor appears at the statement where your program entered into break mode.</P>

<A NAME="249"><H2>Lesson Summary</H2></A>

<P>Visual Basic includes several tools to help you debug your application.</P>
<UL>
<p><li>The Immediate window is used to evaluate any valid Visual Basic expression. It does not accept data declarations.</li></p>

<p><li>The Debug object has two methods: </li></p>
<UL>
<P> <LI> Print sends output from your program to the Immediate window without entering break mode. It creates a history list of the values in the Immediate window.</LI></P>

<P><LI> Assert forces a run-time break when the specified expression evaluates to False.</LI></P>

</UL>
<p><li>The Locals window shows the value of all variables within the scope of the current procedure.</li></p>

<p><li>Watch expressions are those expressions whose value you wish to monitor. Use the Watch window when a problem is not immediately traceable to a statement.</li></p>
</UL>

</BODY>
</HTML>





