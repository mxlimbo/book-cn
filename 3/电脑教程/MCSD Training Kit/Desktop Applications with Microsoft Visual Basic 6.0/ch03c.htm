<HTML>
<HEAD>
<TITLE>Lesson 2: Implementing Form-Level Validation</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03b.htm", "ch03d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="170"><H1>Lesson 2: Implementing Form-Level Validation</H1></A>

<P>Form-level validation is the process of validating data in all fields on a form simultaneously. After the user has filled in all fields, you validate data in all fields through a central procedure such as a button or menu Click event. You can also implement a form-level keyboard handler. In this case, form events fire before the control events fire. Form events include KeyPress, KeyDown, and KeyUp. By setting a form's KeyPreview property to True, the control that has focus will have its keyboard event triggered instead of its form event. Form-level validation is used to:</P>

<UL>

<p><li>Establish a form-level keyboard handler.</li></p>

<p><li>Enable and disable controls based on user input.</li></p>

</UL>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Define the use of the KeyPreview property.</li></p>

<p><li>Create a form-level keyboard handler.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>


<A NAME="171"><H2>Overview of Form-Level Validation</H2></A>

<P>When you use form-level validation, you verify the data in each field on a form in a single procedure. For example, you might have a customer entry form with fields for name, address, phone number, city, state, and zip code. Each of these fields can be implemented as a TextBox control. The user types values in each field, then clicks a CommandButton. In the CommandButton's Click event, you can include code to validate the data in each field based, for example, on the following rules:</P>

<UL>

<p><li>The name field must be at least one character.</li></p>

<p><li>The address field must be from zero through 50 characters in length.</li></p>

<p><li>The phone number field must be numeric.</li></p>

<p><li>The city field must be greater than zero characters.</li></p>

<p><li>The state field must be two characters in length.</li></p>

<p><li>The zip code field must be numeric and five digits in length.</li></p>

</UL>

<P>Implementing code to validate data in this manner is a simple example of form-level validation.</P>


<A NAME="172"><H2>Form-Level Keyboard Handler</H2></A>

<P>A keyboard handler is a more advanced technique of form-level validation. With a centralized keyboard handler, you can manage data input for all fields on a form. For example, if you want all command buttons to remain disabled until the correct values have been entered into each field, you can use keyboard events to validate data in each field. Within these keyboard events, you can write code to perform specific actions when keys are pressed.</P>

<P>When you implement form-level validation using a keyboard handler, you use three main events: KeyPress, KeyUp, and KeyDown.</P>


<A NAME="173"><H3>Using the KeyPress Event</H3></A>

<P>When a user presses a key that has a corresponding ASCII value, the KeyPress event occurs. These keys include any alphabetic and numeric characters (alphanumeric a-z, A-Z, and 0-9). In addition, a few special keyboard characters, such as those produced by the ENTER and BACKSPACE keys, are also recognized by the KeyPress event because they have an ASCII value (ENTER is 13 and BACKSPACE is 8). The KeyPress event does not trap special keyboard characters such as the function keys.</P>

<P>A KeyPress event procedure is useful for intercepting keystrokes entered in a TextBox or ComboBox control. The KeyPress event has a KeyASCII argument that contains the value corresponding to the ASCII value of the key that was pressed. If you want to make sure that the key pressed by the user is a numeric value, for example, you can evaluate the KeyASCII argument in the KeyPress event.</P>


<A NAME="174"><H3>Using the KeyDown and KeyUp Events</H3></A>

<P>Special keys, such as the arrow, function, editing, and navigation keys, do not trigger the KeyPress event because they are not standard ASCII characters. To trigger responses to these keys, use the KeyDown and KeyUp events. You can also use these events to trap combinations of keystrokes, such as CTRL+DEL or SHIFT+CTRL+D.</P>


<A NAME="175"><H3>Using the KeyPreview property</H3></A>

<P>If a form has no visible and enabled controls, it automatically receives all keyboard events. However, if the form has controls, the form's keystroke events will not fire unless the form's KeyPreview property is set to True. The KeyPreview property determines whether the form's keyboard events fire before the controls' keyboard events. For example, assume that there is a KeyDown event procedure for a form and a KeyDown event procedure for a TextBox control on that form. If the KeyPreview property for the form is set to True, the Form_KeyDown event procedure will execute first. The following example sets the KeyPreview to True and uses the KeyDown event to execute a statement when the Function keys are pressed:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub Form_Load ()
    'The form events will be fired before the control events
     KeyPreview = True

End Sub

Private Sub Form_KeyDown (KeyCode As Integer, Shift As Integer)
    Select Case KeyCode ' Indicates the physical key pressed
        Case vbKeyF1 
             MsgBox &quot;F1 key was pressed.&quot;
             '<I>[statements]</I>
        Case vbKeyF2
             MsgBox &quot;F2 key was pressed.&quot;
             '<I>[statements]</I>
        Case vbKeyF3
             MsgBox &quot;F3 key was pressed.&quot;
             '<I>[statements]</I>
    End Select

End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="176"><H2>Enabling and Disabling Controls Based on Input</H2></A>

<P>When you implement form level validation, it is important to provide visual cues to your users to allow them to determine which tasks they need to perform. For example, a form may contain multiple fields, such as first name, last name, address, city, state, and zip code that need to be completely filled in before any further processing can take place. You can do this with a For Each statement in a keyboard event to loop through each control on a form and validate its data. </P>

<P>The following code loops through form controls each time a key is pressed. If the user does not enter the required values, the OK button remains disabled. When the user has typed all required information, you can set the command button's Enabled property to True. This lets the user know that the task is successfully completed. Figure 3.1 illustrates the appearance of the form.</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
     'The KeyUp event is used to also check the Backspace key.
     Dim ctl As Control
     'Loop through the Controls collection and validate each control.
     For Each ctl In Controls
          'Check the type of the current control.
          If TypeOf ctl Is TextBox Then
                'Does the current textbox have the required value?
                If ctl.Text = &quot;&quot; Then
                        cmdOK.Enabled = False
                        Exit Sub
                End If
          End If
     Next ctl
     'If all required values are entered,
     'give the user access to the OK button.
     cmdOK.Enabled = True
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P>
<img src="images/F03xx01.GIF" width=320 height=240 border="0">
</P><P>
<!--caption--><B>Figure 3.1</B> <i>Disabling command buttons</i>  <!--/caption-->
</P>


<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="177"><H2>Practice: Enabling and Disabling Controls</H2></A>

<P>In this practice you will keep the OK button disabled until all required fields are filled in. Figure 3.2 illustrates the form layout.</P>

<A NAME="178"><H3><LI>To add control arrays to a form</LI></H3></A>
<OL>

<P><LI>Open a new <B>Standard EXE</B> project.</LI></P>

<P><LI>Add three TextBox controls and one CommandButton control to <B>Form1</B>.</LI></P>

<P><LI>Set the properties for the CommandButton control as specified in the following table:</LI></P>

<P>
     <TABLE CELLPADDING=5 WIDTH="95%">
          
          <TR>
               <TH>Control</TH>
               <TH>Property</TH>
               <TH>Value</TH>
          </TR>
          
          <TR>
               <TD VALIGN="TOP">Command1</TD>
               <TD VALIGN="TOP">Name</TD>
               <TD VALIGN="TOP"><B>cmdOk</B></TD>
          </TR>
          
          <TR>
               <TD VALIGN="TOP">CmdOK</TD>
               <TD VALIGN="TOP">Caption</TD>
               <TD VALIGN="TOP">&amp;<B>Ok</B></TD>
          </TR>
          
     </TABLE>
</P>

<P><LI>Leave the default properties for the TextBox controls. Figure 3.2 illustrates the appearance of the form.</LI></P>

</OL>

<P>
<img src="images/F03xx02.GIF" width=323 height=166 border="0">
</P><P>
<!--caption--><B>Figure 3.2</B> <i>Practice form layout</i>  <!--/caption-->
</P>


<P><LI><B>To add code to the cmdOk_Click event</B></LI></P>

<OL>

<P><LI>Add the following code to the <B>cmdClick_Click</B> event.</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub cmdOk_Click()
      Dim ctl As Control
      For Each ctl In Controls
           If TypeOf ctl Is TextBox Then
                If ctl.Text = &quot;&quot; Then
                       Msgbox &quot;All fields require data.&quot;
                       Exit Sub
                End If
           End If
      Next ctl
      Unload Me
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P><LI>Run your application. Leave at least one of the textboxes blank. Click the <B>OK</B> button.</LI></P>

<P>The form will not unload until all of the textboxes have data entered.</P>

<P><LI>Save your project in the \Practice\Ch03 directory.</LI></P>

<P>Save the project files using the default names provided by Visual Basic.</P>

</OL>


<A NAME="179"><H2>Lesson Summary</H2></A>

<P>Form-level validation is used to:</P>

<UL>

<p><li>Establish a form-level keyboard handler.</li></p>

<p><li>Enable and disable controls based on user input.</li></p>

</UL>

<P>Form-level validation lets you manage data input on a form. You can monitor these control values by:</P>

<UL>

<p><li>Enabling a command button to loop through the Controls collection and validate each control after all fields have valid data.</li></p>

<p><li>Validating all the fields when the user tries to execute a command, such as an OK button's Click event.</li></p>

</UL>


</BODY>
</HTML>





