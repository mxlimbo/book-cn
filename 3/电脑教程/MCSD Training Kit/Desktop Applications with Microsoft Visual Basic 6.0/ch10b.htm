<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Creating COM Components</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="492"><H1>Lesson 1: Overview of Creating COM Components</H1></A>

<P>A COM component is a unit of executable code, such as an .exe, a .dll, or an .ocx file, which provides specific functionality. In <a href="ch09a.htm">Chapter 9</a>, you learned how to use a COM component to create objects in your applications; in this chapter, you will learn how to create custom COM components. Visual Basic lets you create three types of COM components: ActiveX controls, COM executable programs and DLLs, and ActiveX documents, and. ActiveX documents are most often used to create Internet applications; they are covered in Chapter 11, &quot;<A HREF="ch11a.htm#579">Creating Internet Applications</A>.&quot;</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>
<p><li>Describe the characteristics of a COM component.</li></p>
<p><li>Explain the types of COM components.</li></p>
</UL>
<b>Estimated lesson time: 10 minutes</b>
</blockquote></div></P>

<A NAME="493"><H2>Designing COM Components</H2></A>

<P>Visual Basic lets you create components ranging from code libraries to Automation-enabled applications. You can create and distribute ActiveX control packages, with full licensing capability, or Internet applications with ActiveX documents that can display themselves in Internet browsers. With the Enterprise Edition of Visual Basic, you can run code components&#8212;such as business rule servers&#8212;on remote computers.</P>

<P>A COM component is a library of code that has been compiled into either an executable program, a dynamic-link library (DLL), or an .ocx file for ActiveX controls. In Visual Basic, COM code components, such as ActiveX DLLs and ActiveX EXEs, are composed of one or more class modules in a Visual Basic project. ActiveX controls are COM components that provide a user interface. </P>

<P>COM components interact with application and other components through a client/server relationship. The client uses the features of a component, and the server is the component and its associated objects. There are two main types of servers: out-of-process and in-process. </P>

<P>To understand the significance of the two types of servers, you must understand the meaning of the word <I>process</I>. A process is a Windows application that is residing in an address space that the operating system has assigned to the application. A process has resources assigned to it, and one or more threads run in the context of the process. A process alone does not do anything; instead, threads are used to run an application. </P>

<P>A <I>thread</I> is the basic unit to which the operating system allocates processor time and is the smallest piece of code that can be scheduled for execution. It is the actual component of a process that is executing at one instant in time. A thread runs in the address space of the process and uses resources allocated to the process.</P>

<A NAME="494"><H2>In-Process vs. Out-of-Process Components</H2></A>

<P>Components can be run in any one of three places: in the same address space as the client (in-process), on the same computer (out-of-process), or on a remote computer (out-of-process). </P>

<A NAME="495"><H3>In-process</H3></A>

<P>An in-process component is implemented as a dynamic-link library (DLL) or as an ActiveX control. It runs in the same process space as its client application. This enables the most efficient communication between client and component, because you need call only the component function to obtain the required functionality. Each client application that uses the component starts a new instance of the component.</P>

<A NAME="496"><H3>Out-of-process</H3></A>

<P>An out-of-process component is implemented as an executable file, and runs in its own process space. Communication between the client and and an out-of-process component is slower than with an in-process component because parameters and return values must be marshaled across process boundaries from the client to the component, and back again. However, a single instance of an out-of-process component can service many clients, share global data, and insulate other client applications from problems that one client might encounter.</P>

<P>Components can also be stored on remote computers. Remote components are out-of-process components, but they are located on a separate computer from the client application. While communication time between a client and a remote component is much slower than with a local component, remote components allow processing to be done on a separate, and possibly more powerful, computer. The component can also be located closer to the work it is doing. For example, a component can be located close to a remote database with which it interacts.</P>

<P>When you work with out-of-process and remote components, you should ensure that the client minimizes the number of calls to objects created from the component. For example, a well-designed component should have a way to pass data in bulk with as few calls as possible.</P>

<P>The following table illustrates the server type of each component:</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<th>Component</th>
<th>Server Type</th>
</TR>
<tr>
<td>Application</td>
<td>Out-of-process</td>
</tr>
<tr>
<td>ActiveX EXE</td>
<td>Out-of-process</td>
</tr>
<tr>
<td>ActiveX DLL</td>
<td>In-process</td>
</tr>
<tr>
<td>ActiveX control</td>
<td>In-process</td>
</tr>
</TABLE></p>

<A NAME="497"><H2>Component Project Templates</H2></A>

<P>When you create a new project in Visual Basic, you choose from among a number of project templates. In the New Project dialog box, choose ActiveX EXE to create an out-of-process component or ActiveX DLL to create an in-process component. Selecting either type sets default values in your project that are important when creating components. You need to decide which type of component is best for a given situation. Each ActiveX component provides specific functionality:</P>

<ul>
<p><li>If you need an invisible component that provides a service, you'll want to build a code component: an ActiveX EXE or an ActiveX DLL. </li></p>

<p><li>If you need a component that can run in the same process with your application, you'll want an ActiveX DLL. An example of this would be a component that performs complex calculations.</li></p>

<p><li>If you need a component that can serve multiple applications and can run on a remote computer, you'll want an ActiveX EXE. For example, a business rules server that enforces tax rules would best be implemented as an ActiveX EXE. </li></p>

<p><li>If you need a visible component that can be dropped into an application at design time, you'll want to build an ActiveX control. An example of this might be a phone number control that properly formats and validates phone numbers; such a control would undoubtedly be useful in many applications.</li></p>

<p><li>If you need a visible component that can take over an application window at run time, choose an ActiveX document. ActiveX documents are covered in Chapter 11, &quot;<A HREF="ch11a.htm#579">Creating Internet Applications</A>.&quot;</li></p>
</ul>

<A NAME="498"><H2>Lesson Summary</H2></A>

<P>An out-of-process component is an .exe file that runs in its own process, with its own thread of execution. Out-of-process servers can run either on a local computer or on a remote computer on a network. Communication between a client and an out-of-process component is called cross-process or out-of-process communication.</P>

<P>An in-process component, such as an ActiveX DLL or ActiveX control (.ocx file), runs in the same process as the client. It provides the fastest way of accessing objects, because property and method calls don't have to send and receive data across process boundaries.</P>

<P>In general, if an ActiveX component has been implemented as part of an executable file (.exe file), it is an out-of-process server and runs in its own process. If it has been implemented as a dynamic-link library, it is an in-process server and runs in the same process as the client application. Applications that use in-process servers usually run faster than those that use out-of-process servers because the application doesn't have to cross process boundaries to use an object's properties, methods, and events.</P>

</BODY>
</HTML>






