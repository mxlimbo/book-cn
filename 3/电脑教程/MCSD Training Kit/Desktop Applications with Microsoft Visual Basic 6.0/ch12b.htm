<HTML>
<HEAD>
<TITLE>Lesson 1: Implementing Online Help</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm", "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="624"><H1>Lesson 1: Implementing Online Help</H1></A>

<P>At some point, most users are going to have questions about how to use your application. The best way to handle users' questions is to provide a Help file for your application.</P>

<P>Visual Basic 6.0 supports the traditional Windows Help system (WinHelp) and the newer HTML Help. This lesson covers the steps necessary to call Help topics from either of these Help systems. It does not cover is how to create a Help file. There are authoring tools that can help you create Help files, including the new Microsoft HTML Help Workshop.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe what you can do within Visual Basic to provide Help.</li></p>

<p><li>Explain the purpose of these properties:</li></p>
<UL>
<P><LI> HelpFile</LI></P>

<P><LI> HelpContextID</LI></P>

<P><LI> WhatsThisHelp</LI></P>

</UL></UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="625"><H2>Properties of Help Files</H2></A>

<P>You set certain properties to provide links to the topics in your Help file. First, set the HelpFile property for your project to point to the correct Help file. Second, set the HelpContextID property of controls in your application to provide contextual Help for your users. The process of linking Help to your application is the same for both WinHelp and HTML Help systems.</P>

<A NAME="626"><H3>HelpFile</H3></A>

<P>There are two ways to set the HelpFile property. Using the App object, you can programmatically set the HelpFile property to specify the Help file name and location for your application. You can also define a valid help file for your application using the Project Properties dialog box. Setting the HelpFile property requires a written and compiled WinHelp (.hlp) or HTML Help (.chm) file. </P>

<P><LI><B>To set the HelpFile property using Project Properties</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>Project Properties</B>.</LI></P>

<P><LI>On <B>Project Properties </B>dialog box, click the <B>General</B> tab.</LI></P>

<P><LI>Type the path and file name for your application's Help file (.hlp or .chm) in the <B>Help File Name</B> field.</LI></P>
</OL>

<P>To set the HelpFile property for your application during run time, use the App object in your program's code. The following example sets the location of the Help file as the application's directory, and states the name of the HTML Help file. </P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Form_Load()
      App.HelpFile = App.Path &amp; &quot;\help.chm&quot;
End Sub
</PRE></TD></TR></TABLE></P>

<P>You can specify a different Help file for the error messages in your application. By setting the HelpFile property of the ErrObject object, you can point your error messages to a different Help file. This is useful because you can use one Help file for the error messages of several different applications. Rather than compiling a new Help file with the same error messages, you compile one error message's Help file and call it by using the Err.HelpFile property in each application. </P>

<A NAME="627"><H3>HelpContextID</H3></A>

<P>To link your program's controls, forms, and menus to a topic in the Help file, you set the HelpContextID property of that component. The HelpContextID is a Long number that matches the Context ID of the topic in your WinHelp or HTML Help File.</P>

<P>For example, you set 103450 as the HelpContextID property of an OptionButton. When a user selects that OptionButton in your program and presses F1, Visual Basic searches for a topic with a Context ID of 103450 in the Help file specified in the application's HelpFile property. If the Context ID is not found in the Help file, an error occurs and the Help file's default topic is displayed.</P>

<P>If you leave a control's HelpContextID property at the default value (0), then Visual Basic searches for a valid HelpContextID for the control's container. If the container has a valid HelpContextID value and the user presses the F1 key, the topic for the container will be displayed. </P>

<P><LI><B>To set the HelpContextID for a control </B></LI></P>

<OL>
<P><LI>Select the control for which you want to enter a HelpContextID.</LI></P>

<P><LI>On the <B>Properties</B> window, double-click <B>HelpContextID</B>.</LI></P>

<P><LI>Enter a valid Long integer.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
For the CommonDialog control, the name of this property is HelpContext instead of HelpContextID.
</blockquote></div></p>

<P><LI><B>To set the HelpContextID for a menu </B></LI></P>

<OL>
<P><LI>On the <B>Tools</B> menu, click <B>Menu Editor</B>.</LI></P>

<P><LI>Choose the menu item for which you want to enter a HelpContextID.</LI></P>

<P><LI>Enter a valid Long value in the <B>HelpContextID</B> box.</LI></P>
</OL>

<P>You can also set the HelpContextID property within your program's code. The following example sets the Help topic for a control, form, and the Err object.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Form_Load()
     Text1.HelpContextID = 13124
     Form1.HelpContextID = 34234
     Err.HelpContext = 78798
End Sub
</PRE></TD></TR></TABLE></P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
For the Err object, the name of this property is HelpContext instead of HelpContextID.
</blockquote></div></p>

<A NAME="628"><H3>What's This Help</H3></A>

<P>What's This Help gives the user quick access to Help text in a popup window without opening the Help viewer. You typically use it to provide simple assistance for user interface elements, such as data entry fields. Both WinHelp and HTML Help file formats support What's This Help topics.</P>

<P>To enable What's This Help on a form, you set the WhatsThisHelp property of that form to True. Next, select each control for which you want to provide Help and assign a unique value to the WhatsThisHelpID property of the control.</P>

<P>Add the What's This button to your form to allow users to click on a control to get help. To add a What's This button to a form's title bar, set the WhatsThisButton property to True. The form cannot have the Minimize and Maximize buttons.</P>

<P><LI><B>To display the What's This button in the title bar of a form</B></LI></P>

<OL>
<P><LI>Select the form to which you want to add a What's This button.</LI></P>

<P><LI>On the <B>Properties</B> window, double-click the <B>WhatsThisHelp</B> property and set it to <B>True</B>.</LI></P>

<P><LI>Set the following properties:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%">
<TR>
<TH>Property
</TH>
<TH>Value
</TH></TR>
<TR>
<TD VALIGN="TOP"><P>Border Style</P>
</TD>
<TD VALIGN="TOP">1 &#8212; Fixed or <BR>2 - Sizable
</TD></TR>
<TR>
<TD VALIGN="TOP">MaxButton
</TD>
<TD VALIGN="TOP">False
</TD></TR>
<TR>
<TD VALIGN="TOP">MinButton
</TD>
<TD VALIGN="TOP">False
</TD></TR>
<TR>
<TD VALIGN="TOP">Whats This Button
</TD>
<TD VALIGN="TOP">True
</TD></TR>
<TR>
<TD VALIGN="TOP">Or
</TD>
<TD VALIGN="TOP"> 
</TD></TR>
<TR>
<TD VALIGN="TOP">BorderStyle
</TD>
<TD VALIGN="TOP">3 - Fixed Dialog
</TD></TR>
<TR>
<TD VALIGN="TOP">Whats This Button
</TD>
<TD VALIGN="TOP">True
</TD></TR></TABLE></P>
</OL>

<P>Other methods you can use are the WhatsThisMode method of a form and the ShowWhatsThis method of a control. After you have set the form's WhatsThisHelp property to True and defined the value for a control's WhatsThisHelpID, you can invoke the WhatsThisMode method within your code.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub mnuWhatsThis_Click()
     Form1.WhatsThisMode
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="629"><H2>Implementing ToolTips</H2></A>

<P>You use ToolTips to display information to users as they navigate your user interface. As shown in Figure 12.1, a ToolTip is a small label that is displayed when the mouse pointer is held over a control for a set length of time. The ToolTip should contain a description of the control's function. Normally, ToolTips are used with toolbars, but they also work well for most parts of an interface.</P>

<P>
<img src="images/F12xx01.GIF" width=313 height=82 border="0">
</P><P>
<!--caption--><B>Figure 12.1</B> <i>A ToolTip for the Visual Basic toolbar</i>  <!--/caption-->
</P>


<P>At design time, you can add ToolTips to any button on a toolbar using the control's Property Page. </P>

<P><LI><B>To add a ToolTip to a toolbar button</B></LI></P>

<OL>
<P><LI>Right-click on the toolbar control that contains the button for which you want to set the ToolTipText property.</LI></P>

<P><LI>Click <B>Properties</B>.</LI></P>

<P><LI>Click the <B>Buttons</B> tab.</LI></P>

<P><LI>Scroll the <B>Index</B> to the button for which you want to add the ToolTip.</LI></P>

<P><LI>Enter the help text in the <B>ToolTipText</B> property box.</LI></P>
</OL>

<P>At run time, you can change the ToolTip value by setting the ToolTipText property for the Button object. The following code sets the first button's ToolTipText property on Toolbar1 to Display Text:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Toolbar1.Buttons(1).ToolTipText = &quot;Display Text&quot;
</PRE></TD></TR></TABLE></P>

<P>Most of the controls in Visual Basic contain the property ToolTipText for displaying immediate help to the user. You can enter your ToolTip into the Properties window, or set the value from within your code. The following code implements a ToolTip for a TextBox: </P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
txtAmount.ToolTipText = &quot;Amount in dollars.&quot;
</PRE></TD></TR></TABLE></P>

<A NAME="630"><H2>Lesson Summary</H2></A>

<P>Visual Basic supports calling Help files, but it does not support creating Help files. Use a separate authoring tool such as Microsoft HTML Help Workshop to create Help files.</P>

<P>To set links, you must create the Help file separately, then use these properties:</P>
<ul>
<p><li>HelpFile specifies the Help file name and location.</li></p>

<p><li>HelpContextID links a program's forms, controls, and menus to a Help file.</li></p>
</ul>

<P>What's This Help provides Help in a popup window instead of a Help viewer. It is a form-level property. </P>

</BODY>
</HTML>





