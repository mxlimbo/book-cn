<HTML>
<HEAD>
<TITLE>Lab: Creating a Data-Aware Class</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10f.htm", "ch10h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="567"><H1>Lab: Creating a Data-Aware Class</H1></A>

<P>In this lab, you will convert the CReservation class to a data source that can be used to bind controls on frmReservation. You will write the code to add, check-in, check-out, and cancel guest reservations. In addition, you will create navigation buttons on frmReservation similar to those found on the ADO Data control. You can continue to work with the files you created in Lab 9, or you can use the files provided for you in the \Labs\Lab10\Partial folder. The solution code can be found in the \Labs\Lab10\Solution folder.</P>
<p><img src="images/video.gif" width=78 height=54 border="0"></P>
<P>To see a demonstration of the solution, run the Lab10.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<A NAME="568"><H3>Estimated lesson time: 20 minutes</H3></A>

<A NAME="569"><H2>Lesson 1: Making the CReservation Class a Data Source</H2></A>

<P>In this lesson, you will modify the CReservation class module that you created in Lab 6 to become a data source to which controls can be bound.</P>

<A NAME="570"><H3><li>To make CReservation a data source</li></H3></A>
<OL>
<P><LI>Open your application or the <B>Hotelres.vbp</B> project in \Labs\Lab10\Partial folder.</LI></P>

<P><LI>Set the DataSourceBehavior property of <B>CReservation</B> to <B>vbDataSource</B>.</LI></P>

<P><LI>Cut the following two lines of code from the General Declarations section of <B>frmReservation</B>, and paste them into the General Declarations section of <B>CReservation</B>. </LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private cnReservation As ADODB.Connection
Private rsReservation As ADODB.Recordset
</PRE>
</TD></TR></TABLE></P>

<p>From this point on, you will use the <B>CReservation</B> class module as the source of all guest and reservation data functionality.</P>

<P><LI>Modify the declaration of the <B>rsReservation</B> variable so that it is declared as Public. For example:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Public rsReservation As ADODB.Recordset
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>Class_GetDataMember</B> sub procedure, set the Data argument to the <B>rsReservation</B> object variable. Your code should look similar to the following:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Class_GetDataMember(DataMember As String, Data As Object)
   Set Data = rsReservation
End Sub
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>Class_Initialize</B> event, type the following code:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim SQL As String

SQL = &quot;SELECT * FROM Reservation;&quot;

'Create and open the connection
Set cnReservation = New ADODB.Connection
cnReservation.ConnectionString = _
   &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; &amp; _
   &quot;Data Source=C:\Labs\Rsvn.mdb&quot;
cnReservation.Open

Set rsReservation = New ADODB.Recordset
'Create and open the recordset
rsReservation.Open SQL, cnReservation, _
  adOpenDynamic, adLockPessimistic
</PRE>
</TD></TR></TABLE></P>

<P><LI>Because you will be using the <B>CReservation</B> class to perform search functionality, delete the code contained in the <B>mnuCustSearch_Click</B> event procedure. Your <B>mnuCustSearch_Click</B> event procedure code should look like the following:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub mnuCustSearch_Click()
End Sub
</PRE>
</TD></TR></TABLE></P>
</ol>

<A NAME="571"><H2>Exercise 2: Binding Controls to the CReservation Class</H2></A>

<P>In this exercise, you will bind controls on the frmReservation form to the CReservation class. Controls will be bound and updated programmatically at run time within the Form_Load event. In addition to binding controls to the CReservation class, you will also add recordset navigation buttons to frmReservation to browse the Reservation table.</P>

<A NAME="572"><H3><li>To bind controls to CReservation</li></H3></A>
<OL>
<P><LI>In the <B>Form_Load</B> event procedure for <B>frmReservation</B>, type the following code:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set txtFirstName.DataSource = Res
txtFirstName.DataField = &quot;FirstName&quot;
Set txtLastName.DataSource = Res
txtLastName.DataField = &quot;LastName&quot;
Set txtAddress.DataSource = Res
txtAddress.DataField = &quot;Address&quot;
Set txtPhone.DataSource = Res
txtPhone.DataField = &quot;Phone&quot;
Set txtNumPeople.DataSource = Res
txtNumPeople.DataField = &quot;NumberOfPeople&quot;
Set txtNumDays.DataSource = Res
txtNumDays.DataField = &quot;NumberOfDays&quot;
Set txtRoomNumber.DataSource = Res
txtRoomNumber.DataField = &quot;RoomNumber&quot;
Set txtRate.DataSource = Res

</PRE>
</TD></TR></TABLE></P>

<P><LI>Create a private sub procedure called FillControls in <B>frmReservation</B>.</LI></P>

<P><LI>In the FillControls sub procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub FillControls()
     'Use the Recordset object to fill the advanced fields with data
     mskCheckIn.Text = Format(Res.rsReservation![CheckInDate], _
	    &quot;mm-dd-yyyy&quot;)
     txtCheckOut.Text =Format(DateAdd(&quot;d&quot;,Val(txtNumDays.Text), _ 
            mskCheckIn.Text), &quot;mm-dd-yyyy&quot;)
     Select Case Res.rsReservation![PaymentType]
            Case &quot;CREDIT CARD&quot;
                grpPmtType(0).Value = True
            Case &quot;CHECK&quot;
                grpPmtType(1).Value = True
            Case &quot;CASH&quot;
                grpPmtType(2).Value = True
     End Select
End Sub
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>Form_Load</B> event of <B>frmReservation</B>, call the FillControls sub procedure.</LI></P>
</ol>

<A NAME="573"><H2>Exercise 3: Creating Recordset Navigation Controls</H2></A>

<P>In this exercise, you will use the rsReservation Recordset object variable to browse records in the Reservation table.</P>

<A NAME="574"><H3><li>To implement recordset navigation controls</li></H3></A>
<OL>
<P><LI>Add four CommandButtons to <B>frmReservation</B> and set the following properties.</LI></P>

<P>
<table width="95%" cellpadding="5">
<TR>
<th>Control</th>
<th>Property</th>
<th>Value</th>
</TR>
<TR>
<td>cmdMoveFirst</td>
<td>Caption</td>
<td>&lt;&lt;</td>
</TR>
<TR>
<td>cmdMovePrevious</td>
<td>Caption</td>
<td>&lt;</td>
</TR>
<TR>
<td>cmdMoveNext</td>
<td>Caption</td>
<td>&gt;</td>
</TR>
<TR>
<td>cmdMoveLast</td>
<td>Caption</td>
<td>&gt;&gt;</td>
</TR>
</TABLE></P>

<P>Your form should look similar to Figure 10.17.</P>

<P>
<A HREF="javascript:fullSize('F10xx17x.htm')"> <img src="images/F10xx17.JPG" width=404 height=320 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.17</B> <i>frmReservation after adding navigation buttons</i>  <!--/caption-->
</P>


<P><LI>In the <B>cmdMoveFirst_Click</B> event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Res.rsReservation.MoveFirst
FillControls
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>cmdMovePrevious_Click</B> event, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
With Res.rsReservation
   .MovePrevious
   'Avoid a run-time error in case of BOF status
   If .BOF Then
         .MoveLast
   End If
End With
FillControls
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>cmdMoveNext_Click</B> event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
With Res.rsReservation
   .MoveNext
   'avoid a run-time error in case of EOF status
   If .EOF Then
         .MoveFirst
   End If
End With
FillControls
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>cmdMoveLast_Click</B> event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Res.rsReservation.MoveLast
FillControls
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the DisableControls sub procedure, set the Enabled property to true for <B>cmdMoveFirst</B>, <B>cmdMovePrevious</B>, <B>cmdMoveNext</B>, and <B>cmdMoveLast</B>.</LI></P>

<P><LI>Save your work and run the hotel reservation application.</LI></P>

<P><LI>Test your navigation controls by clicking on each one.</LI></P>

<P>Notice that the controls on the form are updated with fields from each new record as you navigate.</P>
</ol>

<A NAME="575"><H2>Exercise 4: Implementing Reservation Processing Functionality</H2></A>

<P>In this exercise, you will write code that enables users of the hotel reservation system to add, check-in, check-out, and cancel reservations. You will also implement record editing and search features to the application.</P>

<A NAME="576"><H3><li>To implement reservation processing features</li></H3></A>
<OL>
<P><LI>In the General Declarations section of <B>frmReservation</B>, declare a private String variable named <B>strOperationStatus</B>.</LI></P>

<P><LI>In the <B>mnuGuestReservationAdd_Click</B> event procedure, type the following code to initialize controls on <B>frmReservation</B>:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim ctl As Control
Res.AddReservation
EnableControls
'Clear field values
For Each ctl In frmReservation.Controls
   If TypeOf ctl Is TextBox Then
        ctl.Text = &quot;&quot;
   ElseIf TypeOf ctl Is MaskEdBox Then
        ctl.Text = &quot;__-__-____&quot;
   ElseIf TypeOf ctl Is OptionButton Then
        ctl.Value = False
   End If
Next
txtFirstName.SetFocus
staAdditionalInfo.Panels(&quot;addinfo&quot;).Text = _
  &quot;Click Done to update the Reservation table.&quot;
</PRE>
</TD></TR></TABLE></P>

<P><LI>After the statement used to call DisableControls in the <B>cmdDone_Click</B> event, type the following code to update the recordset with the check-in date and payment type values:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
If grpPmtType(0).Value Then
      Res.rsReservation![PaymentType] = &quot;CREDIT CARD&quot;
ElseIf grpPmtType(1).Value Then
      Res.rsReservation![PaymentType] = &quot;CHECK&quot;
ElseIf grpPmtType(2).Value Then
      Res.rsReservation![PaymentType] = &quot;CASH&quot;
End If
Res.rsReservation![CheckInDate] = mskCheckIn.Text
Res.rsReservation.Update
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the AddReservation function procedure in the <B>CReservation</B> class, type the following code to add a new record to the <B>rsReservation</B> recordset:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
rsReservation.AddNew
rsReservation![Status] = &quot;PENDING&quot;
AddReservation = True
</PRE>
</TD></TR></TABLE></P>

<P><LI>Type the following code for the CheckIn method of <B>Creservation</B> to update the status and check-in date information:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Check the status to make sure it is pending
If rsReservation![Status] = &quot;PENDING&quot; Then
      rsReservation![Status] = &quot;ACTIVE&quot;
      rsReservation![CheckInDate] = Format(Date, &quot;mm-dd-yyyy&quot;)
      rsReservation.Update
      CheckIn = True
Else
      CheckIn = False
End If
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>mnuGuestReservationCheckIn_Click</B> event procedure, call the CheckIn method of the Res object and evaluate the return value. Your code should look like the following:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim blnCheckInResult As Boolean
  
blnCheckInResult = Res.CheckIn()
If blnCheckInResult Then
      MsgBox &quot;Guest checked-in successfully.&quot;
Else
      MsgBox &quot;Could not check-in guest. Status is &quot; &amp; _
         Res.rsReservation![Status] 
End If
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>CReservation</B> class, create a private function called MoveToArchive. This function will move the current record from the <B>rsReservation</B> recordset to the <B>ReservationArchive</B> table in the database. Your code should look like the following:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Function MoveToArchive() As Boolean
     Dim rsArchive As ADODB.Recordset
     Set rsArchive = New ADODB.Recordset
  
     On Error GoTo HandleError
     rsArchive.Open &quot;ReservationArchive&quot;, cnReservation, _
          adOpenDynamic, adLockPessimistic
     rsArchive.AddNew
     With rsArchive
          ![FirstName] = rsReservation![FirstName]
          ![Lastname] = rsReservation![Lastname]
          ![Address] = rsReservation![Address]
          ![Phone] = rsReservation![Phone]
          ![PaymentType] = rsReservation![PaymentType]
          ![NumberOfPeople] = rsReservation![NumberOfPeople]
          ![Status] = rsReservation![Status]
          ![RoomNumber] = rsReservation![RoomNumber]
          ![Rate] = rsReservation![Rate]
          ![NumberOfDays] = rsReservation![NumberOfDays]
          ![CheckInDate] = rsReservation![CheckInDate]
          .Update
     End With
     rsReservation.Delete adAffectCurrent
     MoveToArchive = True
     Exit Function
HandleError:
     MoveToArchive = False
End Function
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the CheckOut method of the <B>CReservation</B> class, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Check the status to make sure the guest is checked in
If rsReservation![Status] = &quot;ACTIVE&quot; Then
      rsReservation![Status] = &quot;INACTIVE&quot;
      If MoveToArchive Then 
           CheckOut = True
           rsReservation.MoveFirst
      End If
Else
      MsgBox &quot;Could not check-out INACTIVE guest.&quot;
      CheckOut = False
End If
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the CancelReservation method of the <B>CReservation</B> class, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
rsReservation![Status] = &quot;CANCELED&quot;
If MoveToArchive Then
     CancelReservation = True
     rsReservation.MoveFirst
Else
     CancelReservation = False
End If
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the <B>mnuCustSearch_Click</B> event procedure, type the following code:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim strCriteria As String

frmSearch.Show vbModal
'Search based on any of the three fields
If Trim(frmSearch!txtLastName.Text) &lt;&gt; &quot;&quot; Then
      strCriteria = &quot;[LastName] LIKE '&quot; &amp; _
            frmSearch!txtLastName.Text &amp; &quot;%'&quot;
ElseIf Trim(frmSearch!txtPhone.Text) &lt;&gt; &quot;&quot; Then
      strCriteria = &quot;[Phone] LIKE '&quot; &amp; frmSearch!txtPhone.Text &amp; &quot;%'&quot;
ElseIf Trim(frmSearch!txtFirstName.Text) &lt;&gt; &quot;&quot; Then
      strCriteria = &quot;[FirstName] LIKE '&quot; &amp; _
            frmSearch!txtFirstName.Text &amp; &quot;%'&quot;
End If
With Res.rsReservation
     'Search for last name
     .Find strCriteria
     'If last name not found
     If .EOF Then
           MsgBox &quot;Last name &quot; &amp; _
              frmSearch!txtLastName.Text &amp; &quot; not found.&quot;
     End If
End With
Unload frmSearch
</PRE>
</TD></TR></TABLE></P>

<P><LI>Use the menu editor to add a new menu item under the <B>Guest</B> menu. Set the Caption to <B>Edit Record</B>, and set the Name to <B>mnuGuestEdit</B>, as illustrated in Figure 10.18.</LI></P>

<P>
<img src="images/F10xx18.GIF" width=366 height=366 border="0">
</P><P>
<!--caption--><B>Figure 10.18</B> <i>Creating the mnuGuestEdit menu item</i>  <!--/caption-->
</P>


<P><LI>In the <B>mnuGuestEdit_Click</B> event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Enable controls for record editing
'and check-in, check-out, and cancel
EnableControls
</PRE>
</TD></TR></TABLE></P>

<P>Now the user can browse through the records using the navigation buttons you created, edit the current record and check-in, check-out, and cancel reservations by clicking Edit Record on the <B>Guest</B> menu.</P>

<P><LI>Save your application.</LI></P>
</ol>

<A NAME="577"><H3><li>To test your application</li></H3></A>
<OL>
<P><LI>Start the hotel reservation application.</LI></P>

<P><LI>Add a new reservation using the Guest menu. Be sure to click <B>Done </B>when finished entering all the required data.</LI></P>
<P>Notice that the user interaction has remained the same even though we've added code that now uses a data bound class.</P>

<P><LI>Search for this new reservation record using the code you have added to the <B>mnuCustSearch_click </B>event.</LI></P>

<P>As with the &quot;add guest&quot; functionality, searching for a guest has not changed the user experience. The same interactions are presented, but now our project is easier to manage and includes a class modeule that can be re-used in other applications.</P>
</ol>
</BODY>
</HTML>





