<HTML>
<HEAD>
<TITLE>Lesson 3: Creating Activex Code Components</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10c.htm", "ch10e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="527"><H1>Lesson 3: Creating ActiveX Code Components</H1></A>

<P>COM executable programs and DLLs are libraries of classes. Client applications use COM objects by creating instances of classes provided by the COM .exe or .dll file. Clients call the properties, methods, and events provided by each COM object. In Visual Basic, you refer to the project templates that you use to create a COM executable program or COM DLL as ActiveX EXE and ActiveX DLL, respectively. In this lesson, you will learn how to create ActiveX DLLs.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<UL>
<p><li>Describe the different types of code components.</li></p>
<p><li>Create an in-process code component.</li></p>
<p><li>Create an out-of-process component.</li></p>
<p><li>Test and debug code components.</li></p>
</UL>

<b>Estimated lesson time: 90 minutes</b>
</BLOCKQUOTE></DIV></P>

<A NAME="528"><H2>Understanding Code Components</H2></A>

<P>Unlike ActiveX controls, which support user interaction, code components typically have no user interface. Instead, code components are like libraries of objects. A client application uses a code component by creating an object from one of the classes the component provides, and invoking the object's properties, methods, and events. For example, you can create a code component that encapsulates business rules your organization uses, so that all applications process the same data consistently.</P>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
Although you do not typically use ActiveX code components to interact directly with a user, you can use code components to provide standard libraries of modal and modeless dialogs.
</blockquote></div></p>

<P>Code components provide reusable code in the form of objects. A client is an application that uses a component's code by creating objects and calling their properties and methods. With Visual Basic, you can build code components to run in-process, which allows faster access to the objects of the properties and methods, or out-of-process, which gives the objects separate threads of execution from their clients. Visual Basic provides project templates for each type of component: ActiveX DLLs and ActiveX EXEs.</P>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
In earlier documentation, code components were referred to as OLE Automation servers.
</blockquote></div></p>

<A NAME="529"><H2>Creating an ActiveX Code Component</H2></A>

<P>An in-process code component, or ActiveX DLL, runs in another application's process. The client may be the application itself or another in-process component that the application is using, as illustrated in Figure 10.11.</P>

<P>An out-of-process code component, or ActiveX EXE, runs in its own address space. The client is usually an application running in another process, as illustrated in Figure 10.12. Because an out-of-process component runs in its own process, a client can tell it to perform a task, then go about its business while the component does the work. The component can tell the client when the task is done using an asynchronous notification, as explained in &quot;<A HREF="ch09d.htm#475">Creating Callback Procedures</A>&quot; in Chapter 9, &quot;<A HREF="ch09a.htm#449">Connecting to COM Servers</A>.&quot;</P>

<P>
<A HREF="javascript:fullSize('F10xx11x.htm')"> <img src="images/F10xx11.JPG" width=404 height=332 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.11</B> <i>An ActiveX DLL running in the same process as a standard EXE</i>  <!--/caption-->
</P>


<P>
<A HREF="javascript:fullSize('F10xx12x.htm')"> <img src="images/F10xx12.JPG" width=404 height=283 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.12</B> <i>An ActiveX EXE running in its own process space</i>  <!--/caption-->
</P>


<A NAME="530"><H2>Practice: Creating an ActiveX DLL</H2></A>
<p><img src="images/practice.gif" width=67 height=55 border="0"></P>
<P>In this practice, you will create an ActiveX DLL that has a property and a method that can be used by a client application. You will add a Standard EXE project to your ActiveX DLL project, creating a project group, to test your ActiveX DLL.</P>

<A NAME="531"><H3><li>To create a DLL in Visual Basic</li></H3></A>
<OL>
<P><LI>Create a new <B>ActiveX DLL</B> project in Visual Basic.</LI></P>

<P><LI>Name the project <B>SampleDLL</B>.</LI></P>

<P><LI>In the General Declarations section of the <B>Class1</B> module, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private UserName As String
Private strMessage As String
Public Sub SayHello()
   MsgBox &quot;Hello &quot; &amp; UserName &amp; &quot;!&quot;
End Sub
Public Property Let Name(Name As String)
   UserName = Name
End Property
Public Property Get Message()
   strMessage = &quot;Hello from DLL.&quot;
   Message = strMessage
End Property
</PRE>
</TD></TR></TABLE></P>
</ol>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
Normally you would need to register the DLL before calling it. Leaving it running in Visual Basic allows us to test the DLL because it is currently loaded in memory.
</blockquote></div></p>

<A NAME="532"><H3><li>To create a test project</li></H3></A>
<OL>
<P><LI>On the <B>File</B> menu, click <B>Add Project</B>. </LI></P>

<P><LI>On the <B>Add Project</B> dialog box, double-click <B>Standard EXE</B>.</LI></P>

<P><LI>Click the <B>Standard EXE</B> project in the Project Explorer.</LI></P>

<P><LI>On the <B>Project</B> menu, click <B>References</B>. </LI></P>

<P><LI>Click the check box next to SampleDLL, then click <B>OK</B>.</LI></P>

<P><LI>Add a CommandButton to <B>Form1</B>.</LI></P>

<P><LI>In the Click event procedure for the CommandButton, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim obj As SampleDLL.Class1
Dim strMessage As String

Set obj = New Class1
obj.Name = &quot;John&quot;
obj.SayHello

strMessage = obj.Message
MsgBox strMessage, , &quot;Message from DLL&quot;
</PRE>
</TD></TR></TABLE></P>

<P><LI>Right-click on the <B>Standard EXE</B> project in the Project Explorer, then click <B>Set as Start Up</B> on the drop-down menu.</LI></P>

<P><LI>On the <B>File</B> menu, click <B>Save Project Group</B>. </LI></P>

<P>Save the files to the \Practice\Ch10 folder. </P>

<P><LI>On the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P>You will see two message boxes. The first message box is displayed from the ShowMessage method of your ActiveX DLL. The second message box displays the value of the Message property of the object you declared in the <B>Command1_Click</B> event.</P>

<P><LI>Click <B>OK</B> to close each message box that appears. </LI></P>

<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>
</ol>

<A NAME="533"><H2>The Instancing Property</H2></A>

<P>The Instancing property of a class determines whether or not the class is private. If it is not private, the class is available for other applications to use. Private means that other applications are not allowed access to type library information about the class and cannot create instances of it. Private objects are only for use within your component.</P>

<P>The Instancing property also determines how other applications create instances of the class. The property value can be set to one of the following:</P>

<ul>
<p><li>PublicNotCreatable</li></p>
<P>PublicNotCreatable lets other applications use objects of the class only if your component creates the objects first. Other applications cannot use the CreateObject function or the New operator to create objects from the class.</P>

<p><li>MultiUse</li></p>
<P>MultiUse lets other applications create objects from the class. One instance of your component can provide any number of objects created in this fashion. An out-of-process component can supply multiple objects to multiple clients; an in-process component can supply multiple objects to the client and to any other components in its process.</P>

<p><li>GlobalMultiUse</li></p>
<P>GlobalMultiUse is like MultiUse, with one addition: properties and methods of the class can be invoked as if they were simply global functions. When you choose the value GlobalMultiUse for the Instancing property of a class, and then make the project, you can subsequently use the properties and methods of the class without having to explicitly create an instance of the class. Properties and methods of a GlobalMultiUse object (or global object) are added to the global name space of any project that uses the object. That is, in another project, you can set a reference to the component, and the names of the global object's properties and methods are recognized globally, just as if they were part of Visual Basic.</P>

<p><li>SingleUse</li></p>
<P>SingleUse lets other applications create objects from the class, but every object of this class that a client creates starts a new instance of your component. You cannot set the Instancing property to SingleUse in ActiveX DLL projects because that requires another instance of the server to load, and DLLs can only be loaded once.</P>

<p><li>GlobalSingleUse</li></p>
<P>GlobalSingleUse is used for out-of-process components only. If you set the Instancing property to GlobalSingleUse for a component, a separate instance of your component will be loaded into memory for each client. This requires a lot more memory than providing GlobalMultiUse objects. GlobalSingleUse is not allowed in ActiveX DLL projects because multiple instances of a DLL cannot be loaded into a client's process space. </P>
</UL>

<P>The value of the Instancing property is restricted in certain project types. Possible values are shown in the following table:</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<th>Instancing Value</th>
<th>ActiveX EXE</th>
<th>ActiveX DLL</th>
</TR>
<TR>
<td>Private</td>
<td>Yes</td>
<td>Yes</td>
</TR>
<TR>
<td>PublicNotCreatable</td>
<td>Yes</td>
<td>Yes</td>
</TR>
<TR>
<td>MultiUse</td>
<td>Yes</td>
<td>Yes</td>
</TR>
<TR>
<td>SingleUse</td>
<td>Yes</td>
<td>No</td>
</TR>
<TR>
<td>GlobalSingleUse</td>
<td>Yes</td>
<td>No</td>
</TR></TABLE></p>

<A NAME="534"><H3>Dependent Objects (PublicNotCreatable)</H3></A>

<P>The value of the Instancing property determines the role than an object plays in your component's object model, as discussed in Chapter 6, &quot;<A HREF="ch06a.htm#287">Introduction to Class Modules</A>.&quot; If the Instancing property of a class is PublicNotCreatable, objects of that class are called dependent objects. Dependent objects are typically parts of more complex objects. For example, you might allow a client application to create multiple Wheel objects, but you might want Spoke objects to exist only as parts of a Wheel. You can make the Spoke class PublicNotCreatable; let the user add new spokes to a Wheel object by giving the Wheel class a Spokes collection with an Add method that creates new spokes only within the collection.</P>

<P>Your component can support as many dependent objects as necessary. You can write code in the Add method of a collection class to limit the number of objects in the collection, or you can allow the number to be limited by available memory.</P>

<P>For more information about creating an object model, search for &quot;Organizing Objects: The Object Model&quot; in MSDN Online Help.</P>

<A NAME="535"><H3>Externally Creatable Objects</H3></A>

<P>All values of the Instancing property besides PublicNotCreatable and Private define externally creatable objects. Externally creatable objects can be created by clients using the New operator or the CreateObject function, as discussed in Chapter 9, &quot;<A HREF="ch09a.htm#449">Connecting to COM Servers</A>.&quot;</P>

<A NAME="536"><H3>MultiUse vs. SingleUse</H3></A>

<P>In ActiveX DLLs, Instancing for an externally creatable class is commonly MultiUse. This setting allows an in-process component to supply any number of instances of the class to the client executable, and to any other in-process component.</P>

<P>For ActiveX EXEs, the Instancing values SingleUse and MultiUse define very different behaviors for a class. MultiUse makes the most efficient use of memory, because it allows one instance of your component to provide multiple objects to multiple client applications without duplication of resources or global data. For example, suppose your component provides a Widget class, and the Instancing property of the class is set to MultiUse. If one client application creates two Widget objects, or if two client applications each create a Widget object, all the Widgets will be supplied from one instance of your component. If the Instancing property of the Widget class is set to SingleUse, the result of both scenarios above is that a separate copy of your component will be loaded into memory for each Widget created.</P>

<A NAME="537"><H3>MultiUse and Multithreading</H3></A>

<P>You can mark your ActiveX EXE component for unattended execution, which allows you to create components that can run without operator intervention on network servers. Selecting the Unattended Execution option suppresses all forms of user interaction, including message boxes and system error dialogs.</P>

<A NAME="538"><H3><li>To mark your ActiveX DLL or EXE project for unattended execution </li></H3></A>
<OL>
<P><LI>On the <B>Project</B> menu, click <B>&lt;project&gt; Properties</B> to open the <B>Project Properties</B> dialog box.</LI></P>

<P><LI>On the <B>General</B> tab, check the <B>Unattended Execution</B> check box, then click <B>OK</B>. </LI></P>
</ol>

<P>If your component is an ActiveX EXE marked for unattended execution, and the Instancing property of the Widget class is set to MultiUse, both scenarios above result in two Widget objects created in the same copy of your component, each on its own thread of execution. Visual Basic uses Apartment Model threading, meaning that each thread is like an apartment, and objects in different apartments are unaware of each other's existence. This is accomplished by giving each Widget its own copy of your component's global data.</P>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
Designing multithreaded components is a very complex task and the concepts involved are outside the scope of this class. Because you will be creating components and object models in the labs, key points were discussed in this lesson. If you want to learn more about creating multithreaded components, search for &quot;Scalability and Multithreading&quot; in MSDN Online Help.
</blockquote></div></p>

<A NAME="539"><H2>Testing and Debugging</H2></A>

<P>Active X code components are often difficult to debug since they are used within client applications and do not run stand-alone. Visual Basic provides two different component debugging scenarios:</P>
<ul>
<p><li>For in-process components, you can load a test project (Standard EXE or ActiveX EXE) and one or more component projects into the development environment as a project group. You can run all the projects in the group together, and step directly from test project code into in-process component code.</li></p>

<p><li>For out-of-process components, you can use two instances of the development environment. One instance of Visual Basic runs the test project, while the second runs the component project. You can step directly from test project code into component code, and each instance of Visual Basic has its own set of breakpoints and watches.</li></p>
</ul>
<P>When an ActiveX EXE project is in run mode, the client application can create objects and access their properties and methods. Each out-of-process component that a client uses must be in its own instance of the development environment. The client application and all of its in-process components can run together in a single instance of the development environment.</P>

<A NAME="540"><H3>Creating a Test Application</H3></A>

<P>To test a component, you need to create a client application. Components exist to provide objects for clients, which makes it hard to test them by themselves. When you test your component, you should utilize all of its features. Be sure to:</P>
<ul>
<p><li>Invoke all the properties, methods, and events of each object provided by your component, testing both valid and invalid values of all arguments. For example, rather than simply making one call to a method of an object, make a series of calls that use valid and invalid values for all arguments.</li></p>

<p><li>Evaluate the highest and lowest valid values for arguments; these boundary conditions are a frequent source of problems for developers.</li></p>

<p><li>Test for both functionality and error cases. Make sure your component behaves well in case of errors, such as unexpected input. It's especially important to make sure you've covered all error conditions in event procedures of in-process components, because such errors can be fatal to client applications that use the component.</li></p>
</ul>

<A NAME="541"><H3>Using Break on Error in Components</H3></A>

<P>You can change the way Visual Basic enters break mode when an error occurs in your component by setting the Error Trapping option in your component project.</P>

<A NAME="542"><H3><li>To set the error trapping state</li></H3></A>
<OL>
<P><LI>In your component project, click <B>Options</B> on the <B>Tools</B> menu.</LI></P>

<P><LI>On the <B>Options</B> dialog box, click the <B>General</B> tab.</LI></P>
</ol>

<P>Suppose you have a component that provides a Rocket object that has a Launch method. There are three options in the Default Error Trapping State box, as described below. The following descriptions assume that the test application has called the Launch method of the Rocket object, and that an error has occurred in the Launch method's code.</P>
<ul>
<p><li>Break on All Errors</li></p>
<P>Visual Basic activates the component project, gives the Launch method's code window the focus, and highlights the line of code that caused the error. Visual Basic always enters break mode on such an error, even if error handling is enabled in the Launch method.</P>

<p><li>Break in Class Module</li></p>
<P>If error handling is not enabled in the Launch method, or if you are deliberately raising an error for the client by calling the Raise method of the Err object in the Launch method's error handler, Visual Basic activates the component project, gives the Launch method's code window the focus, and highlights the line of code that caused the error. If error handling is enabled in Launch, then the error handler is invoked. As long as you don't raise an error in the error handler, Visual Basic does not enter break mode.</P>
</ul>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
You can press ALT+F8 or ALT+F5 to step or run past the error when setting either Break on All Errors or Break in Class Module.
</blockquote></div></p>

<ul>
<p><li>Break on Unhandled Errors</li></p>
<p>Visual Basic never enters break mode in properties or methods of the component. If error handling is not enabled in the client procedure that called the Launch method, execution stops on the line of code that made the call.</p>

<P>To understand the behavior of Break on Unhandled Errors in a component project, remember that the component's properties and methods are always called from outside of the component. You can always handle an error in a property or a method by passing it up the calling chain into the client procedure that called the property or the method.</P>
</UL>

<A NAME="543"><H3>Using Start With Full Compile</H3></A>

<P>You may find it more convenient to start the project group by pressing CTRL+F5, or by clicking Start With Full Compile on the Run menu, so that all compilation errors are resolved before your component begins supplying objects to your test application.</P>

<P>The default in Visual Basic is to compile code on demand. This means that there may be code in your component that is not compiled until the client calls it. Some compile errors cannot be fixed without returning to design mode, which requires returning the whole project group to design mode.</P>

<A NAME="544"><H3><li>To disable demand compilation</li></H3></A>
<OL>
<P><LI>Click <B>Options</B> on the <B>Tools</B> menu.</LI></P>

<P><LI>Click the <B>General</B> tab of the <B>Options</B> dialog box, then clear the <B>Compile On Demand</B> check box.</LI></P>
</ol>

<A NAME="545"><H3>Shutting Down an In-Process Component</H3></A>

<P>In-process components will not unload while running in the development environment, even if all references to objects are released by the test project, and all other component shutdown conditions are met. The only way to test DLL unloading behavior is with the compiled component.</P>

<A NAME="546"><H3>Checking Your Component in the Object Browser</H3></A>

<P>With the test project (Standard EXE) selected in the Project window, you can use the Object Browser to verify that the public classes, methods, and properties of your component are available. You can also use the Object Browser to examine and add description strings, and to verify that Help topics are correctly linked.</P>

<P>The view you get in the Object Browser differs depending on which project is currently active, or selected, in the Project window. When your component project is active, the Object Browser shows both public members and Friend functions. When the test project is active, only the public members are visible.</P>

<A NAME="547"><H2>Lesson Summary</H2></A>

<P>COM executable programs and DLLs are libraries of classes. Client applications use COM objects by creating instances of classes provided by the COM .exe or .dll file. </P>

<P>With Visual Basic, you can build code components to run in-process, allowing faster access to their objects, or out-of-process, so that they have separate threads of execution from their clients. Visual Basic provides project templates for each type of these components: ActiveX DLLs and ActiveX EXEs.</P>

<P>An in-process component, or ActiveX DLL, runs in another application's process. The client may be the application itself, or another in-process component that the application is using. An out-of-process component, or ActiveX EXE, runs in its own address space. </P>

<P>The value of the Instancing property of a class determines whether it is private or available for other applications to use. The values can be:</P>
<ul>
<p><li>PublicNotCreatable</li></p>
<p><li>MultiUse</li></p>
<p><li>GlobalMultiUse</li></p>
<p><li>SingleUse</li></p>
<p><li>GlobalSingleUse</li></p>
</ul>
<P>To test a component, you need to create a client application. Components exist to provide objects for clients, which makes it hard to test them by themselves. When you are testing your component, you should utilize all of its features. </P>

<P>You can also use the Object Browser to examine and add description strings, and to verify that Help topics are correctly linked.</P>

</BODY>
</HTML>






