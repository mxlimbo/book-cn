<HTML>
<HEAD>
<TITLE>Lesson 2: Creating ActiveX Documents</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11b.htm", "ch11d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="591"><H1>Lesson 2: Creating ActiveX Documents</H1></A>

<P>With Visual Basic, you can use ActiveX technology to create ActiveX documents. These are components that you can use on HTML pages or as alternatives to HTML pages. You can use other ActiveX components to create Internet solutions, including code components (.exe and .dll files) that run on the client or controls (.ocx files). All of these components help you create Internet solutions that meet your business needs. ActiveX documents allow you to create solutions that are available to users through an Internet browser.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the purpose of ActiveX documents.</li></p>

<p><li>Identify the events used in ActiveX documents.</li></p>

<p><li>Create an ActiveX document.</li></p>

<p><li>List the files associated with ActiveX documents.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="592"><H2>Overview of ActiveX Documents</H2></A>

<P>ActiveX documents integrate tightly with the other elements of your Internet or intranet site. You can use ActiveX documents in conjunction with DHTML applications, IIS applications, or HTML pages that are not associated with a Visual Basic Internet application. You can deploy these components so that users can navigate transparently between ActiveX documents and other pages in your application or Web site.</P>

<P>Use ActiveX documents within your Internet applications when you want to: </P>

<ul>
<p><li>Use the Visual Basic programming model rather than the programming model used in DHTML or IIS applications.</li></p>

<p><li>Gain control over the whole frame of the browser window rather than just a part of it. </li></p>

<ul>
  <P><LI>When you display a Web page in the browser, HTML lets you specify the appearance of only the page itself. You cannot write HTML to control the menu, the scroll bar, or any other part of the browser window. </LI></p>

  <P><LI>When you use an ActiveX document, you can control additional pieces of the window, such as menus, toolbars, scroll bars, and other items. For example, if you want one page of your DHTML application to contain a custom menu, you might use an ActiveX document. </LI></P>
</ul>
</ul>


<P>Some objects in Visual Basic are <I>containers</I>; that is, they contain other Visual Basic objects. A form usually is a container; it contains one or more controls. Certain Visual Basic objects must be contained by another object. Still others can be either containers or contained, or both. ActiveX documents are not stand-alone applications&#8212;they can exist only in a container such as Internet Explorer. But they can also contain objects. Containers vary so you can't always predict the capabilities and limitations of your ActiveX document environment. Your application might work properly in Internet Explorer 4.<I>x </I>, but not in an earlier version.</P>

<P>Before you use an ActiveX document, you must place it within a container. Connecting an ActiveX document to its container is known as <I>siting</I>. Siting plays a key role in determining ActiveX document event behavior. It enables an ActiveX document to implement its functionality.</P>

<A NAME="593"><H3>Advantages of ActiveX Documents</H3></A>

<P>Several features help you provide installation, navigation, and persistence with your ActiveX documents. The advantages of ActiveX documents are:</P>

<ul>
<p><li>Automatic downloading of components over the Internet </li></p>

<P>You can create a link to your ActiveX document that causes the browser to automatically find and download all components that are needed to run the component. You can also make an ActiveX document upgrade automatically if the version on the server is more recent.</P>
<p><li>Hyperlinking of objects</li></p>

<P>In a hyperlink-aware container, you can use the properties and methods of Visual Basic's Hyperlink object to jump to a given URL or navigate through the history list.</P>
<p><li>Merging of menus</li></p>

<P>As with documents that are made available through Microsoft Word or Microsoft Excel, the menus of Visual Basic ActiveX documents can be merged with the browser's menus. As the document is loaded in Internet Explorer, for instance, the browser's menu items will be merged with those you created to accompany your ActiveX document.</P>
<p><li>Storing of data</li></p>

<P>When you deploy an ActiveX document in Internet Explorer, you can store data through the PropertyBag object.</P>
</ul>

<A NAME="594"><H2>The UserDocument Object</H2></A>

<P>When you create an ActiveX document, you are creating an ActiveX component that can be either in-process (ActiveX document DLL) or out-of-process (ActiveX document EXE). The base object of an ActiveX document&#8212;the UserDocument object&#8212;resembles a standard Visual Basic Form object, with some exceptions. </P>

<P>Several differences exist between a Visual Basic form object and the UserDocument object. The UserDocument object has most, but not all, of the events that are found on a Form object. The following lists show the events available exclusively for forms, and the events available only for UserControls.</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Form Events</th>
<Th>UserControl Events</th></TR>
<TR>
<TD VALIGN="TOP">Activate
</TD>
<TD VALIGN="TOP">AsyncReadComplete
</TD></TR>
<TR>
<TD VALIGN="TOP">Deactivate
</TD>
<TD VALIGN="TOP">EnterFocus
</TD></TR>
<TR>
<TD VALIGN="TOP">LinkClose
</TD>
<TD VALIGN="TOP">ExitFocus
</TD></TR>
<TR>
<TD VALIGN="TOP">LinkError
</TD>
<TD VALIGN="TOP">Hide
</TD></TR>
<TR>
<TD VALIGN="TOP">LinkExecute
</TD>
<TD VALIGN="TOP">InitProperties
</TD></TR>
<TR>
<TD VALIGN="TOP">LinkOpen
</TD>
<TD VALIGN="TOP">ReadProperties
</TD></TR>
<TR>
<TD VALIGN="TOP">Load
</TD>
<TD VALIGN="TOP">Scroll
</TD></TR>
<TR>
<TD VALIGN="TOP">QueryUnload
</TD>
<TD VALIGN="TOP">Show
</TD></TR>
<TR>
<TD VALIGN="TOP">Unload
</TD>
<TD VALIGN="TOP">WriteProperties
</TD></TR></TABLE></p>

<P>Another difference is that you cannot place embedded objects (such as an Excel or Word document) or an OLE Container control on a UserDocument, while you can place these on a Visual Basic form.</P>

<A NAME="595"><H3>UserDocument Events</H3></A>

<P>During the lifetime of a UserDocument object, the events that occur and the order in which they occur depend on a number of factors, including which container you use, whether the document has been sited, and what actions the user takes within the container. </P>

<P>The following are examples of events that can occur during the lifetime of an ActiveX document:</P>

<ul>
<p><li>Initialize</li></p>

<P>The Initialize event occurs each time you create or recreate an instance of an ActiveX document. It is always the first event that occurs during the lifetime of an ActiveX document.</P>
<p><li>InitProperties</li></p>

<P>The InitProperties event occurs when an ActiveX document is sited in the document's container, but none of the ActiveX document's property values have been saved. Once a property value is saved, the InitProperties event is replaced by the ReadProperties event.</P>
<p><li>ReadProperties</li></p>

<P>The ReadProperties event occurs when you save a property with the PropertyBag object.</P>
<p><li>Terminate</li></p>

<P>The Terminate event occurs just before you destroy the ActiveX document. To remove any object references, set all global object references to Nothing with the Terminate event.</P>
<p><li>Show</li></p>

<P>The Show event occurs in one of the following two situations: when a user opens an ActiveX document that has been sited in its container, and when a user clicks the Back or Forward button to return to an ActiveX document in the History list of Internet Explorer.</P>
<p><li>Hide</li></p>

 The Hide event occurs in one of the following two situations: when a user navigates away from a document (immediately before the Terminate event), or when a user closes Internet Explorer while the document is open.
</ul>

<p><div class="note"><blockquote><B>Note</B><HR>
The functionality of the Show and Hide events depends on the container.
</blockquote></div></P>

<A NAME="596"><H3>UserDocument Files</H3></A>

<P>UserDocuments have two types of files that define the appearance and interface of an ActiveX document, including its properties, events, and methods:</P>

<ul>
<p><li>.dob files</li></p>

<P>Visual Basic stores user documents in text files with a .dob extension. These files contain the source code, property values, and controls of the UserDocument object. A .dob file is analogous to a Standard EXE project's .frm file.</P>
<p><li>.dox files</li></p>

<P>Visual Basic stores any graphical elements in files with a .dox extension. These files are used for the controls of a UserDocument object, such as bitmaps. A .dox file is analogous to a Standard EXE project's .frx file.</P>
</ul>

<P>When you compile the ActiveX document project, an .exe or a .dll file is created in addition to a Visual Basic document (.vbd). To open the ActiveX document in a browser such as Internet Explorer, users must be able to navigate to the .vbd file.</P>


<A NAME="597"><H2>Creating an ActiveX Document</H2></A>

<P>As with any Visual Basic project, when you create an ActiveX document, first consider the principles of design that were discussed in Chapter 2, &quot;<A HREF="ch02a.htm#80">Creating the User Interface</A>.&quot; Design the features and appearance of your document, and determine the properties, methods, and events it will provide.</P>

<P><LI><B>To create an ActiveX document in Visual Basic</B></LI></P>

<OL>
<P><LI>Create a new Visual Basic project using either the <B>ActiveX Document DLL</B> or the <B>ActiveX Document EXE</B> project template.</LI></P>

<P>Create a .dll file if you want to create an in-process component.</p>
<p>Create an .exe file if you want to create an out-of-process component.</P>

<P><LI>Add controls and code to the UserDocument object to implement the user interface of your document, and write code to implement its properties, methods, and events.</LI></P>

<P><LI>Compile your document to create a .vbd file, then test it with all potential container applications.</LI></P>
</ol>

<A NAME="598"><H3>Converting an Existing Standard EXE Project</H3></A>

<P>You can convert existing Standard EXE projects to ActiveX document projects with Visual Basic's ActiveX Document Migration Wizard add-in. When you run the wizard, it converts the selected project forms to ActiveX documents, and changes the project type to either ActiveX EXE or ActiveX DLL. </P>

<P>You can use the ActiveX Document Migration Wizard to convert project forms other than Standard EXE projects to an ActiveX document project, but the option to convert the project type will be unavailable.</P>

<P><LI><B>To load the ActiveX Document Migration Wizard add-in</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager&#8230;</B></LI></P>

<P>The <B>Available Add-Ins</B> list appears.</P>
<P><LI>Double-click the <B>VB ActiveX Document Migration Wizard</B>. </LI></P>

<P>The word &quot;Loaded&quot; appears in the <B>Load Behavior</B> column, next to the VB ActiveX Document Migration Wizard.</P>
<P><LI>Click <B>OK</B> to close the <B>Add-In Manager</B>.</LI></P>
</ol>

<P><LI><B>To convert an existing project to an ActiveX project</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>ActiveX Document Migration Wizard</B>.</LI></P>

<P><LI>If you want to skip the introduction screen when you use this wizard in the future, click <B>Skip</B> <B>this</B> <B>screen</B> <B>in</B> <B>the</B> <B>future</B>, then click <B>Next</B>.</LI></P>

<P><LI>On the <B>Form Selection</B> screen, select the form that you want to convert, then click <B>Next</B>.</LI></P>

<P><LI>On the <B>Options</B> screen, select <B>Comment out invalid code, Remove original forms after conversion</B>, and <B>Convert to an ActiveX EXE or DLL</B>, then click <B>Next</B>.</LI></P>

<P><LI>On the <B>Finished</B> screen, click <B>Summary Report</B> to view the migration summary, then click <B>Finish</B>.</LI></P>
</ol>
 
<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="599"><H2>Practice: Creating an ActiveX Document</H2></A>

<P>In this practice, you will create an ActiveX document application in Visual Basic.</P>

<P><LI><B>To create an ActiveX document</B></LI></P>

<OL>
<P><LI>In Visual Basic, start a new <B>ActiveX Document EXE </B>project.</LI></P>

<P>Visual Basic automatically adds a <B>UserDocument</B> designer to the project. If the designer is not immediately visible, right-click its default name, <B>UserDocument1,</B> in the <B>Project Explorer</B> window, then click <B>View Object</B>. When the designer appears, its default name is visible in the title bar.</P>

<P><LI>Change the name of <B>Project1 </B>to <B>ActXDoc</B>.</LI></P>

<P><LI>Change the name of <B>UserDocument1 </B>to <B>FirstDoc</B>.</LI></P>

<P><LI>Open the <B>FirstDoc </B>designer, then add a command button and a text box.</LI></P>

<P><LI>Set the following properties:</LI></P>

<P>
<TABLE width=95% cellpadding=5>
<TR>
<Th>Object</th>
<Th>Property</th>
<th>Value</th></TR>
<TR>
<TD VALIGN="TOP">Command button
</TD>
<TD VALIGN="TOP">Name
</TD>
<TD VALIGN="TOP">CmdNavigateTo
</TD></TR>
<TR>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Caption
</TD>
<TD VALIGN="TOP">Navigate To
</TD></TR>
<TR>
<TD VALIGN="TOP">Text box
</TD>
<TD VALIGN="TOP">Name
</TD>
<TD VALIGN="TOP">TxtURL
</TD></TR>
<TR>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Text
</TD>
<TD VALIGN="TOP"><a href="http://www.microsoft.com" TARGET="_window2">http://www.microsoft.com</a>
</TD></TR></TABLE></p>


<P><LI>Add the following code to the <B>cmdNavigateTo_click </B>event:</LI></P>

<P><TABLE Cellpadding=5 width="95%"><TR><TD><PRE>
'Use the Hyperlink object method NavigateTo
'to go to the URL in txtURL.
Hyperlink.NavigateTo txtURL.Text
</pre></td></tr></table></p>


<P><li>Save the project to the \Practice\Ch11 folder. Name the user document <B>FirstDoc.dob </B>and name the Project <B>ActXDoc.vbp</B>. Do not add the project to Visual SourceSafe.</li></P>

<P><LI>Start the new application and leave it running in the background.</LI></P>

<P><LI>On the <B>Debugging</B> tab of the <B>Project Properties</B> dialog box, click <B>Wait for components to be created</B> and clear the <B>Use existing browser</B> check box, as illustrated in Figure 11.5.</LI></P>

<P>
<img src="images/F11xx05x.gif" width=418 height=354 border=0>
</P><P>
<!--caption--><B>Figure 11.5</B> <i>Selecting debug options for your ActiveX document</i>  <!--/caption-->
</P>


<P><LI>Start Internet Explorer, then browse to the following local file address:</LI></P>

<P><TABLE Cellpadding=5 width="95%"><TR><TD><PRE>
C:\Program Files\Microsoft Visual Studio\VB98\FirstDoc.vbd
</pre></td></tr></table></p>


<P><LI>If you are prompted to select which application to open the ActiveX document with, select <B>iexplore</B>, as illustrated in Figure 11.6.</LI></P>

<P>
<img src="images/F11xx06.GIF" width=324 height=365 border=0>
</P><P>
<!--caption--><B>Figure 11.6</B> <i>Selecting iexplore in the Open With dialog box</i>  <!--/caption-->
</P>


<P><LI>Your ActiveX document appears, as illustrated in Figure 11.7.</LI></P>

<P>
<img src="images/F11xx07x.gif" width=423 height=239 border=0>
</P><P>
<!--caption--><B>Figure 11.7</B> <i>Your ActiveX document running within Internet Explorer</i>  <!--/caption-->
</P>


<P><LI>Click <B>Navigate To</B> to navigate to the specified URL.</LI></P>
</ol>

<A NAME="600"><H2>Running and Debugging an ActiveX Document Project</H2></A>

<P>Debugging an ActiveX document is similar to debugging other ActiveX components. You can use all the tools available in Visual Basic: setting breakpoints, watching variables, using Debug statements, and so on.</P>

<P>It's also important to remember that the container hosting the ActiveX document is its client, and uses objects the ActiveX document provides. If you stop the project while the host container is accessing the ActiveX document, an error will occur in the host container. To avoid this, quit Internet Explorer at the end of each of these procedures to release the reference.</P>

<P>If you run a project and view it in Internet Explorer, you can put it into break mode by pressing CTRL+BREAK without causing any errors in the host application (Internet Explorer). However, you should avoid modifying any code that causes Visual Basic to reset the project.</P>

<A NAME="601"><H2>Lesson Summary</H2></A>

<P>ActiveX documents are components you use to create solutions through a browser. You can use them on Web pages or as alternatives to Web pages. Use them when you want to:</P>

<ul>
<p><li>Use the Visual Basic programming model rather than the programming model used in DHTML or IIS applications.</li></p>

<p><li>Gain control over the whole frame of the browser window, rather than just a part of it. </li></p>
</ul>

<P>An ActiveX document must be sited, or placed within a container such as Internet Explorer 4.<I>x</I> . </P>

<P>Important features of ActiveX documents include:</P>

<ul>
<p><li>Automatic downloading and/or upgrading of components over the Internet.</li></p>

<p><li>Hyperlinking of objects.</li></p>

<p><li>Merging of menus.</li></p>

<p><li>Storing of data.</li></p>
</ul>

<P>The UserDocument object, the base object of an ActiveX document, is similar to a Visual Basic form object. The two have some of the same events, but each also has unique events. You cannot place embedded objects or an OLE Contrainer control on a UserDocument. </P>

<P>A UserDocument has .dob files and .dox files that are analogous to .frm and.frx files, respectively.</P>

<P>With the ActiveX Document Migration Wizard add-in, you can convert an existing Standard EXE project to an ActiveX document project as either an ActiveX EXE or ActiveX DLL. While you can also convert other types of projects, you cannot choose the ActiveX type.</P>

<P>Debugging an ActiveX document project is similar to debugging other ActiveX components. Be careful, however, not to stop the project while its host container is accessing the ActiveX document.</P>



</BODY>
</HTML>






