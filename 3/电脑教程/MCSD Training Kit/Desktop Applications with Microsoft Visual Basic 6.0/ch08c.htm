<HTML>
<HEAD>
<TITLE>Lesson 2: Connecting to a Data Source</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08b.htm", "ch08d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="401"><H1>Lesson 2: Connecting to a Data Source</H1></A>

<P>In <a href="ch07a.htm">Chapter 7</a> you learned how to connect to a data source using the ConnectionString property of an ADO Data control. In this lesson, you will learn how to connect to a data source using an ADO Connection object. In Visual Basic, you can create a Connection object two ways: by declaring a Connection object in code or by using a Data Environment.</P>

<P>Like the ADO Data control's ConnectionString property, you can use the Connection object to establish a connection to a data source and pass client information, such as username and password, to the database for validation.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how to create an ADO Connection object in Visual Basic.</li></p>

<p><li>Explain how to connect to a data source using code.</li></p>

</UL>
<b>Estimated lesson time: 25 minutes</b>
</blockquote></div></P>

<A NAME="402"><H2>Using a Connection Object</H2></A>

<P>A Connection object represents a physical connection to a data source. To create a Connection object, you supply the name of either an ODBC data source or an OLE DB provider.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
To support as many data sources as possible, you can use ADO and ODBC to access a database. However, when using a data source that has an associated OLE DB provider&#8212;such as Microsoft Access, Microsoft SQL Server, or Oracle&#8212;it is recommended that you use this provider instead of the older, ODBC driver.
</blockquote></div></p>

<P>When you open the Connection object, you attempt to connect to the data source. A typical ADO-based application uses the following operations to access a data source:</P>

<OL>
<P><LI>Create the Connection object</LI></P>

<P>Specify the connection string with information such as data source name, user identification, and password.</P>

<P><LI>Open the connection</LI></P>

<P>Open the ADO connection to the data source. </P>

<P><LI>Execute an SQL statement </LI></P>

<P>Once the connection is open, you can run a query. You can run this query asynchronously, if you choose, which means that ADO will populate the recordset in the background; this lets your application perform other processes without waiting.</P>

<P><LI>Use the records returned from the query</LI></P>

<P>The records are now available to your application to browse or update. Whether you can add, update, or delete data in the recordset depends on the <I>cursor type</I>. A cursor is a temporary table in memory that contains the results of a query.</P>

<P><LI>Terminate the connection</LI></P>

<P>The connection to the data source is dropped.</P>
</OL>

<A NAME="403"><H2>Creating a Connection Object in Code</H2></A>

<P>A Connection object represents an open connection to a data source. Using the Connection object, you can establish a connection to a data source and pass client information, such as username and password, to the database for validation. Using the collections, methods, and properties of a Connection object, you can do the following:</P>

<UL>
<p><li>Configure the connection using the ConnectionString, ConnectionTimeout, and Mode properties.</li></p>

<p><li>Specify an OLE DB provider with the Provider property.</li></p>

<p><li>Establish, and later close, the physical connection to the data source with the Open and Close methods.</li></p>

<p><li>Execute a command, such as calling a stored procedure, with the Execute method.</li></p>

<p><li>Manage transactions on open connections. You can also use nested transactions if the provider supports them. You manage transactions using the BeginTrans, CommitTrans, and RollbackTrans methods, as well as the Attributes property.</li></p>
</UL>

<P><div class="note"><blockquote><B>NOTE</B><HR>
A transaction delimits the beginning and end of a series of data access operations that transpire across a connection. ADO ensures that changes to a data source using a transaction all occur successfully or not at all.</blockquote></div>
</P>

<UL>
<p><li>Examine errors returned from the data source with the Errors collection.</li></p>
</UL>

<A NAME="404"><H3>Creating the Connection Object</H3></A>

<P>Before you use ADO in your Visual Basic application, you must first set a reference to the Microsoft ActiveX Data Objects 2.0 Library.</P>

<P><LI><B>To create a reference to the ADO Object Library</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>References</B>.</LI></P>

<P><LI>Click <B>Microsoft ActiveX Data Objects 2.0 Library</B>, then click <B>OK</B>.</LI></P></OL>

<P>Once you have made a reference to the ADO object library, you can declare a Connection object in your application. Once you have created a Connection object, you must specify an OLE DB data source provider. You do this by setting the Provider property.</P>

<P>Depending on the type of data source you are connecting to, you need to either specify an OLE DB provider or use an ODBC driver. The following table displays the provider parameter values for different OLE DB providers.</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>OLE DB provider</TH>
<TH>ConnectionString</TH></TR>
<TR>
<TD VALIGN="TOP">Microsoft Jet</TD>
<TD VALIGN="TOP">&quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot;</TD></TR>
<TR>
<TD VALIGN="TOP">Oracle</TD>
<TD VALIGN="TOP">&quot;Provider=MSDAORA;Data Source=ServerName;User ID=John;Password=password&quot;</TD></TR>
<TR>
<TD VALIGN="TOP">Microsoft ODBC Driver provider</TD>
<TD VALIGN="TOP">Provider=MSDASQL.1;UID=admin;Extended Properties=&quot;DBQ=c:\Program Files\Microsoft Visual Studio\VB98\NWIND.MDB;FIL=MS Access;&quot;</TD></TR>
<TR>
<TD VALIGN="TOP">SQL Server</TD>
<TD VALIGN="TOP">&quot;Provider=SQLOLEDB;Data Source=sql65server;User ID=sa;Password='';Initial Catalog=pubs&quot;</TD></TR></TABLE></P>

<P>The final step before establishing a connection to a data source is to specify the connection information. You do this by setting the Connection object's ConnectionString property. Connection string arguments that are provider specific are passed directly to the provider, and are not processed by ADO.</P>

<P>When you are finished with the connection, use the Close method to disconnect from a data source. If you are connected to a remote database, any server-side resources that were in use under this active connection are released.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
While not required, it is proper coding technique to explicitly close all open connections before the application is terminated.
</blockquote></div></p>

<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="405"><H2>Practice: Creating a Connection with Code</H2></A>

<P>In this practice, you will write code to connect to a database using an OLE DB provider.</P>

<p>
<img src="images/video.gif" width=78 height=54 border=0>
</p>

<P>To see a demonstration, run the Chap08.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To connect to an OLE DB provider using code</B></LI></P>

<OL>
<P><LI>Start Visual Basic and create a new <B>Standard EXE</B> project.</LI></P>

<P><LI>On the <B>Project</B> Menu, click <B>References</B>.</LI></P>

<P><LI>Click <B>Microsoft ActiveX Data Objects 2.0 Library</B> and click <B>OK</B>.</LI></P>

<P><LI>Add a CommandButton to <B>Form1</B>, set the Name property to <B>cmdConnect</B>, and the Caption property to <B>&amp;Connect</B>.</LI></P>

<P><LI>In the <B>cmdConnect_Click</B> event procedure, type the following code:</LI></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> Dim cnData As Connection

'Instantiate the connection
Set cnData = New Connection
cnData.ConnectionString = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; &amp; _
  &quot;Data Source=C:\Program Files\Microsoft Visual Studio\&quot; &amp; _
  &quot;VB98\Nwind.mdb&quot;
cnData.Open

If cnData.State = adStateOpen Then MsgBox &quot;Connection successful.&quot;
'Close the connection and release the cnData object
cnData.Close
Set cnData = Nothing</PRE>
</TD></TR></TABLE>
</P>
</OL>

<P><div class="note"><blockquote><B>NOTE</B><HR>The Data Source parameter of the ConnectionString must point to the Nwind.mdb file on your hard drive. If the location of Nwind.mdb is different on your computer, you have to adjust the path to the appropriate location.</blockquote></div>
</P>

<OL>
<P>The ConnectionString has a parameter value that uses the Microsoft Jet OLE DB provider. Each OLE DB provider will require a different value for the ConnectionString property. </P>

<P><LI VALUE="6">On the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P><LI>Click the <B>Connection</B> button in your application.</LI></P>

<P>If the connection was succesful, you will receive a message box notifying you.</P>

<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>
</OL>

<A NAME="406"><H2>Connection Events</H2></A>

<P>One advantage of using ADO objects in your code, instead of using the ADO Data control, is that it gives you the ability to write code to respond to ADO events. An event is a notification issued by certain operations before the operation starts or after it completes. An event is actually a call to an event handler routine that you define in your application. The Connection object supports a number of events that allow your application to execute custom code. These events are associated with connecting to a data source, executing SQL commands, and managing transactions at the connection level.</P>

<P>The following table describes the events associated with the Connection object.</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Event</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">AbortTransaction</TD>
<TD VALIGN="TOP">Fires after the RollbackTrans method is called.</TD></TR>
<TR>
<TD VALIGN="TOP">BeginTransaction</TD>
<TD VALIGN="TOP">Fires after the BeginTrans method is called.</TD></TR>
<TR>
<TD VALIGN="TOP">CommitTransaction</TD>
<TD VALIGN="TOP">Fires after the CommitTrans method is called.
</TD></TR>
<TR>
<TD VALIGN="TOP">ConnectComplete</TD>
<TD VALIGN="TOP">Fires when a connection attempt has completed successfully, failed, or timed out.</TD></TR>
<TR>
<TD VALIGN="TOP">Disconnect
</TD>
<TD VALIGN="TOP">Fires when an active connection is closed.</TD></TR>
<TR>
<TD VALIGN="TOP">ExecuteComplete
</TD>
<TD VALIGN="TOP">Fires after the Execute method is called.</TD></TR>
<TR>
<TD VALIGN="TOP">InfoMessage</TD>
<TD VALIGN="TOP">Fires when a message is returned from OLE DB or the data source.</TD></TR>
<TR>
<TD VALIGN="TOP">WillConnect</TD>
<TD VALIGN="TOP">Fires after the Open method is called, but before the connection is established.</TD></TR>
<TR>
<TD VALIGN="TOP">WillExecute</TD>
<TD VALIGN="TOP">Fires after the Execute method is called, but before the command is completed.</TD></TR></TABLE></P>

<A NAME="407"><H3>Enabling ADO Events</H3></A>

<P>When you declare an ADO object, you must use the WithEvents keyword to expose the object's events to your application. If you declare a Connection object with its events exposed, the Connection object appears in the Visual Basic object box list, and all the available events for the object appear in the Procedures/Events box list. Figure 8.2 illustrates the cnCustomer connection object in the Visual Basic object list.</P>

<P>
<A HREF="javascript:fullSize('F08xx02x.htm')"> <img src="images/F08xx02.JPG" width=404 height=167 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 8.2</B> <i>Connection object with events exposed</i>  <!--/caption-->
</P>


<P>The following example code declares a Connection object and exposes its events:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public WithEvents cnCustomers As Connection</PRE>
</TD></TR></TABLE>
</P>

<P>After you declare the Connection object using the WithEvents keyword, use the connection as you normally would. The following example displays a message box to the user when a connection attempt has completed successfully:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub cnCustomers_ConnectComplete(ByVal pError As ADODB.Error, _
     adStatus As ADODB.EventStatusEnum, _
     ByVal pConnection As ADODB.Connection)

     If adStatus = adStatusOK Then
          MsgBox &quot;The connection has been established.&quot;
     End If
End Sub</PRE>
</TD></TR></TABLE>
</P>

<A NAME="408"><H2>Lesson Summary</H2></A>

<P>The first step in accessing data using ADO is to establish a connection to the data source. The ADO object model provides the Connection object for this purpose. Using the Connection object you can specify different data sources, such as Microsoft Access (using the Jet engine), Microsoft SQL Server, or an Oracle database.</P>

<P>When you declare the Connection object variable, you can optionally use the WithEvents keyword. When the Connection object's events are exposed, you can add code to respond to a variety of events, such as the completion of a connection request or transaction management. Once a connection has been established, your application can call stored queries or return records for processing.</P>

</BODY>
</HTML>





