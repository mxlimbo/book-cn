<HTML>
<HEAD>
<TITLE>Lesson 2: Designing a System Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm", "ch01d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="46"><H1>Lesson 2: Designing a System Architecture</H1></A>

<P>The system architecture is an important feature in application design since it defines how elements in the application interact and what functionality each element provides. The three types of system (or application) architecture are:</P>

<ul>
<p><li>Single-tier (or monolithic)</li></p>

<p><li>Two-tier</li></p>

<p><li>Multi-tier </li></p>
</ul>

<P>In this course, you will focus on creating single-tier and two-tier applications. Multi-tier applications can be implemented using multiple computers across a network. This type of application is referred to as a distributed application, or <I>n-tier application</I>. An n-tier application represents a special instance of a three-tier application, in which one or more of the tiers are separated into additional tiers, providing better scalability. What you learn about three-tier application design and implementation can be extended to an n-tier design.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the three main types of system architecture.</li></p>

<p><li>Explain the difference between single-tier, two-tier, and multi-tier applications.</li></p>

<p><li>Describe the three conceptual service types in an application.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="47"><H2>Understanding Application Structure</H2></A>

<P>A typical application that interacts with a user, from spreadsheets on personal computers to accounts payable systems on mainframes, consists of three elements: presentation, application logic, and data services. Each of these elements (or services) has its own attributes, as the following table shows:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Service Type</th>
<Th>Service Attribute</th></TR>
<TR>
<TD VALIGN="TOP">Presentation
</TD>
<TD VALIGN="TOP">Presentation of information and functionality, navigation, and protection of user interface consistency and integrity.
</TD></TR>
<TR>
<TD VALIGN="TOP">Application Logic
</TD>
<TD VALIGN="TOP">Shared business policies, generation of business information from data, and protection of business integrity.
</TD></TR>
<TR>
<TD VALIGN="TOP">Data Services
</TD>
<TD VALIGN="TOP">Definition of data, storage and retrieval of persistent data, and protection of data integrity.
</TD></TR></TABLE></p>

<P>Presentation, also known as the user interface (UI), focuses on interacting with the user. In Visual Basic, this would be the forms and controls that the user interacts with.</P>

<P>Application logic, or business rules, perform calculations and determine the flow of the application. Business rules encompass those practices and policies that define a corporation's behavior. Business rules are constraints, usually self-imposed, that companies use to help them operate in their particular business environment. Business rules often define a baseline for application requirements and provide guidance to the developer. In practical terms, these business rules are goals that developers strive to meet for their applications.</P>

<P>Data services manage information by storing data and providing data-related functionality. For example, a SQL Server running on a Windows NT Server computer would be a data service.</P>

<A NAME="48"><H2>Single-tier Applications</H2></A>

<P>In a single-tier application, only one layer supports the user interface, business rules, and data services. Only one application or application element processes all three of these services. The data itself can be physically stored in any location, such as on a server. However, the functionality for accessing the data is part of the application. </P>

<P>An example of a single-tier application is Microsoft Excel, where the user interface and business rules are combined in the application. The business rules include calculating totals, spell check, and other mathematical functions. In addition, the routines that access and save the Excel application files are part of the same application layer as the user interface and business rules. Traditional mainframe applications are also single-tier (monolithic) but are shared among multiple clients.</P>

<A NAME="49"><H2>Two-tier Applications</H2></A>

<P>Two-tier, or standard client/server applications, group presentation and application logic components on the client machine and access a shared data source using a network connection. In a two-tier application, the user interface and business rules are a single layer that runs on the client computer. Separate applications, such as SQL Server or Oracle database servers, provide the data services. This scenario is often used in client/server applications, such as in a Visual Basic application that calls a SQL Server stored procedure to provide data to the application. The Visual Basic application is one layer, and the SQL Server data services is another layer. The code for the user interface and business rules would not necessarily have to be within the same project; the Visual Basic application could call a dynamic-link library (DLL) that accesses data. In this scenario, the user interface and business rules are a single layer; however, the business rules are stored in the DLL This is the type of system architecture you will design in this course. </P>

<P>Two-tier applications work well in department-scale applications with modest numbers of users (under 100), a single database, and secure, fast networking. For example, a two-tier application would be a good solution for a workgroup whose function is to enter product orders. Another example is a design department that shares one set of designs within its group of engineers.</P>

<A NAME="50"><H2>Multi-tier Applications</H2></A>

<P>In multi-tier architectures, presentation, application logic, and data elements are conceptually separated. Presentation components manage user interaction and request application services by calling middle-tier components. Application components perform business logic and make requests to databases. </P>

<P>With multi-tier applications, the client only provides one layer: the user interface. The business rules are performed on a system in between the user interface and the data storage system. This allows the user interface, business rules, and database to reside separately, as illustrated in Figure 1.2. </P>

<P>
<A HREF="javascript:fullSize('F01xx02x.htm')"> <img src="images/F01xx02.JPG" width=404 height=198 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 1.2</B> <i>User interface, business rules, and database reside separately</i>  <!--/caption-->
</P>


<P>The benefit of this model is that business rules are centralized and can be updated and maintained easily. The presentation layer does practically no work beyond interacting with the user. In a multi-tier application, the client does not directly access a data storage system. The separation of presentation, business rules, and data services allows you to modify any layer of the system without having to change the other two (or more) layers. This significantly reduces the need to maintain clients. In a small, 10-person system, this is not too much of a problem. But when the number of clients reaches hundreds or thousands, the cost of updating business rules and application logic can be significant. Another advantage to using a multi-tier model is that you improve code reusability. Code that you write for business logic in one application can be reused on other servers within different applications.</P>

<A NAME="51"><H3>Developing a Multi-tier System</H3></A>

<P>When developing a multi-tier system, you can build intelligent clients with business rules that have been compiled into stand-alone DLLs. These DLLs can be written in Visual Basic and reside on a server. The client, DLL, and database constitute a service in a multi-tier system. If you view applications as being separated into presentation, business rules, and data services, you can build each application as a set of features or services that are used to fill consumer requests. When you model an application as a collection of discrete services, its features and functionality can be packaged for reuse, shared among multiple applications, and distributed across network boundaries.</P>

<A NAME="52"><H2>Lesson Summary</H2></A>

<P>A typical application consists of three elements: presentation, application logic, and data. Presentation, also known as the user interface (UI), focuses on interacting with the user. Business rules, or application logic, perform calculations and determine the flow of the application. Data elements manage information by storing data and providing data-related services.</P>

<P>Applications can be single-tier, two-tier, or multi-tier:</P>

<ul>
<p><li>Single-tier (monolithic)</li></p>

<P>In a single-tier application, only one application processes the presentation, application logic, and data service elements. </P>
<p><li>Two-tier</li></p>

<P>In a two-tier application, the user interface and business rules form a single layer that runs on the client computer. However, data services are performed by a separate application such as SQL Server or Oracle database servers. Two-tier applications work well in departmental-scale applications with modest numbers of users (under 100), a single database, and secure, fast networking.</P>
<p><li>Multi-tier</li></p>

<P>In multi-tier architectures, presentation, application logic, and data elements are conceptually separated. Presentation components manage user interaction and request application services by calling middle-tier components. Application components perform business logic and make requests to databases. In a multi-tier application, the client does not directly access a data storage system. The separation of presentation, business rules, and data services allows for any layer of the system to be modified without having to change the other layers; this significantly reduces the need to maintain clients. In Visual Basic, you can compile business rules into DLLs that reside on a server.</P>
</ul>

</BODY>
</HTML>





