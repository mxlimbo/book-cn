<HTML>
<HEAD>
<TITLE>Lesson 3: Overview of Structured Query Language</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm", "ch07e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="355"><H1>Lesson 3: Overview of Structured Query Language</H1></A>

<P>Structured Query Language (SQL) is a language used for querying, updating, and managing relational databases. SQL can be used to retrieve, sort, and filter specific data from the database. In addition, you can add, change, and delete data in a database using SQL statements.</P>

<P>It is important to have a fundamental understanding of the SQL language so your applications will communicate effectively with the database. By using SQL, an application can ask the database to perform tasks rather than requiring application code and processing cycles to achieve the same result. More importantly, effective use of SQL can minimize the amount of data that must be read from and written to a remote database server. Finally, effective use of SQL can minimize the amount of data sent across the network. Minimizing disk I/O and network I/O are the most important factors for improving application performance.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the purpose of SQL.</li></p>

<p><li>Define the syntax of a simple SQL statement. </li></p>

<p><li>Filter records in a query using a simple SQL statement.</li></p>

</UL>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div></P>

<A NAME="356"><H2>The SQL Select Statement</H2></A>

<P>The SQL <B>Select</B> statement returns information from the database as a set of records. The select statement is divided into three major sections:</P>

<ul>
<p><li>SELECT</li></p>

<P>The Select section allows you to specify which fields will be returned from the query.</P>

<p><li>FROM</li></p>

<P>The From section allows you to specify which tables will be used to get the fields specified in the SELECT section of the SQL statement.</P>

<p><li>WHERE (Optional)</li></p>

<P>The Where section allows you to specify a criteria used to limit the selection of records. You can filter queries based on multiple fields.</P>
</ul>

<P>The minimum syntax for a Select statement is:</P>

<P>SELECT <I>fields</I> FROM <I>tables</I>;</P>

<P>To perform this operation, the database engine searches the specified table or tables, extracts the chosen fields, selects rows that meet the criterion, and sorts or groups the resulting rows into the order specified. You can select all fields in a table by using the asterisk (*). For example, the following SQL statement will return all the fields of all the records from an Employees table:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT * 
FROM Employees;
</pre></td></tr></table></p>

<P>However, it is not very efficient to always return all the data from a table. By adding a Where clause to the end of the statement, you can specify only certain records to be returned. The following example retrieves all fields from all records in the Employees table that have a last name equal to Davolio:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT * 
FROM Employees
WHERE LastName = 'Davolio';
</pre></td></tr></table></p>

<P>Note the use of the apostrophes (') surrounding the word Davolio in the above example. Apostrophes are used when the value in a Where clause is a string. In this case, LastName is a string value in the database. When a numeric value is specified in a Where clause, apostrophes are not used, as shown in the following example.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT * 
FROM Employees
WHERE EmployeeID = 1;
</pre></td></tr></table></p>

<A NAME="357"><H3>The WHERE IN clause</H3></A>

<P>Using the Where clause with the In operator, you can determine whether the value of an expression is equal to any of several values in a specified list. For example, you can use the Where In clause to return the last names and residing countries of all employees, as illustrated in the following example and in Figure 7.4.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT LastName, Country
FROM Employees
WHERE Country IN ('UK', 'USA');
</pre></td></tr></table></p>

<P>
<img src="images/F07xx04.GIF" width=337 height=251 border=0>
</P><P>
<!--caption--><B>Figure 7.4</B> <i>Using the In operator with a Where clause to filter records</i>  <!--/caption-->
</P>


<A NAME="358"><H3>The Where Between Clause</H3></A>

<P>A selection of records between two criteria can also be returned. Note the use of the number signs (#) surrounding the dates in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT OrderID 
FROM Orders 
WHERE OrderDate
BETWEEN #01/01/93# AND #01/31/93#;
</pre></td></tr></table></p>

<A NAME="359"><H3>Using the LIKE Operator</H3></A>

<P>You can use the Like operator to find values in a field that match a pattern that you specify. You can specify the complete value, as in LIKE 'Smith', or you can use wildcard characters to find a range of values. For example, LIKE 'Sm%'. If you enter LIKE 'C%' in an SQL query, the query returns all field values beginning with the letter C. In the following example, all records where the last name starts with the letter D are returned. This is also illustrated in Figure 7.5.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Select LastName
FROM Employees
WHERE LastName LIKE 'D%';
</pre></td></tr></table></p>

<P>
<img src="images/F07xx05.GIF" width=318 height=276 border=0>
</P><P>
<!--caption--><B>Figure 7.5</B> <i>Syntax and results of a SQL statement using the Like operator</i>  <!--/caption-->
</P>


<A NAME="360"><H3>The ORDER BY Clause</H3></A>

<P>By default, records are returned in the order they were entered in the database. The optional Order By clause can be used to sort a query's resulting records on a specified field, or fields, in ascending or descending order. The ASC option indicates ascending order, DESC indicates descending order. The default sort order is ascending (A to Z, 0 to 9). The following example selects all fields from the Employees table sorted descending by last name:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT * 
FROM Employees
ORDER BY LastName DESC;
</pre></td></tr></table></p>

<A NAME="361"><H2>Lesson Summary</H2></A>

<P>Structured Query Language (SQL) is a language used in querying, updating, and managing relational databases. SQL can be used to retrieve, sort, and filter specific data to be extracted from the database. The SQL Select statement returns information from the database as a set of records. The Select statement is divided into three major sections: SELECT, FROM, and WHERE. In different environments, databases have different implementations of the same SQL functionality, both syntactically and semantically. You must be aware that each implementation of SQL has its own support for different data types, referential integrity, and compiled queries.</P>

</BODY>
</HTML>





