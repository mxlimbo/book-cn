<HTML>
<HEAD>
<TITLE>Appendix -- Questions and Answers</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">



</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12g.htm", "glossa.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<P><H1>Appendix</H1>

<A NAME="664"><H1>Questions and Answers</H1></A>

<A NAME="665"><H1>Chapter 1</H1></A>

<A NAME="666"><H2>Lab Questions</H2></A>
<OL>
<P><LI><A NAME="CH0101">What are the benefits of implementing MSF?</A></LI></P>

<A NAME="667"><H3>MSF helps organizations merge business and technology objectives, reduce the life cycle costs of using new technology, and successfully deploy Microsoft technologies to streamline business processes. MSF exposes critical risks, important planning assumptions, and key interdependencies that are required to successfully plan, build, and manage a technology infrastructure or a business solution.</H3></A>

<A NAME="668"><H3>MFS helps to speed up development cycles, lower the cost of owning technology, improve execution of planned events, improve reaction to unplanned events, create scalable, reliable technology solutions, and improve core information technology competencies.</H3></A>

<P><LI><A NAME="CH0102">What are the models implemented in MSF? What are their purposes?</A></LI></P>

<A NAME="669"><H3>Team Model&#8212;defines a team of peers working in interdependent and cooperating roles.</H3></A>

<A NAME="670"><H3>Process Model&#8212;helps your team establish guidelines for planning and controlling results-oriented projects based on project scope, the resources available, and the schedule.</H3></A>

<A NAME="671"><H3>Application Model&#8212;helps your team design distributed applications that take optimum advantage of component reuse.</H3></A>

<A NAME="672"><H3>Enterprise Architecture Model&#8212;supports decisions relating to the information, applications, and technology needed to support a business. It is the key to successful long-term use of new technologies.</H3></A>

<A NAME="673"><H3>Solutions Design Model&#8212;shows how applications must be designed from a user and business perspective (as opposed to the ideal streamlined development proposed in the Application Model).</H3></A>

<A NAME="674"><H3>Infrastructure Model&#8212;establishes MSF principles for managing the people, processes, and technology that support networks in a large enterprise.</H3></A>

<A NAME="675"><H3>Total Cost of Ownership Model&#8212;supports the process of assessing, improving, and managing information technology costs and maximizing value.</H3></A>

<P><LI><A NAME="CH0103">What are the three design phases of the solution design model? What tasks are accomplished in these phases?</A></LI></P>

<A NAME="676"><H3>Conceptual involves business sponsors, users, managers, and constituencies. The goal of conceptual design is to understand what the users do and to identify business needs. Much of conceptual design is an analysis activity that leads to determining which processes and activities will go into the new system, how the needs of those processes and activities will be met, and what the user's experience will be of those activities.</H3></A>

<A NAME="677"><H3>Logical design activities are integrated directly with the resulting scenarios from conceptual design, and provide the basis for Physical design. Logical design describes the organization of the elements that make up the solution and how they interact. You assemble the elements for optimum efficiency, performance, and reuse.</H3></A>

<A NAME="678"><H3>Physical design describes a solution in a way that allows developers to construct the solution. Physical design communicates the necessary details of the solution, including organization, structure, technology, and relationships between elements that you will use to create the solution.</H3></A>
</OL>

<A NAME="679"><H2>Review Questions</H2></A>
<OL>
<P><LI><A NAME="CHO101R">What is the Microsoft Solutions Framework?</A></LI></P>

<A NAME="680"><H3>Microsoft Solutions Framework (MSF) is a suite of models, principles, and guides for building and deploying software. MSF is a collection of best practices used by the Microsoft product groups and Microsoft Consulting Services.</H3></A>

<P><LI><A NAME="CH0102R">Which MSF Model directly focuses on software development?</A></LI></P>

<A NAME="681"><H3>The Solution Design Model provides a step-by-step strategy for designing business-oriented solutions driven by a specific business need. This model ties together the Application, Team, and Process Models, and makes it possible for the information system staff to focus resources where they can produce the most value. Because software development is a creative and complex process, you can apply MSF's Solution Design Model to software development.</H3></A>

<P><LI><A NAME="CH0103R">What is an example of a single-tier application?</A></LI></P>

<A NAME="682"><H3>An example of a single-tier application is Microsoft Excel, where the user interface and business rules are combined in the application. The business rules include calculating totals, spell check, and other mathematical functions. In addition, the routines that access and save the Excel application files (.xls) are part of the same application layer as the user interface and business rules.</H3></A>

<P><LI><A NAME="CH0104R">When is a two-tier application most effective?</A></LI></P>

<A NAME="683"><H3>Two-tier applications work well in departmental-scale applications with modest numbers of users (under 100); a single database; and secure, fast networking.</H3></A>

<P><LI><A NAME="CH0105R">What are three ways to install Visual SourceSafe?</A></LI></P>

<A NAME="684"><H3>Both the Visual SourceSafe Explorer and the Visual SourceSafe Database can be installed on the user's machine.</H3></A>

<A NAME="685"><H3>The Visual SourceSafe Explorer and the Visual SourceSafe Database can both be installed on the server.</H3></A>

<A NAME="686"><H3>The Visual SourceSafe Explorer will be installed on the user's machine and the Visual SourceSafe Database will be installed on a server.</H3></A>

<P><LI><A NAME="CH0106R">What are some of the commands used in Visual SourceSafe to reuse files and how are they used?</A></LI></P>

<A NAME="687"><H3>Sharing: To share a file, you create a shared link between two projects.</H3></A>

<A NAME="688"><H3>Branching: Branching a file breaks the shared link, while retaining a copy of the file.</H3></A>

<A NAME="689"><H3>Merging: The process of combining differences in two or more changed copies of a file into a new version of the file. </H3></A>
</OL>

<A NAME="690"><H1>Chapter 2</H1></A>

<A NAME="691"><H2>Review Questions</H2></A>
<OL>
<p><LI><A NAME="CH0201">Your boss told you to follow the "look" of Microsoft Word in designing the user interface of your new insurance form.</A></LI></p>  
  
<p>What specific elements will you look at?</p>  
  
<p>Why did he want you to do this?</p>

<A NAME="692"><H3>Look at the layout and colors. This includes: where various buttons, such as OK, are located; icons on toolbars; menu commands and their access keys; the order of the menus in Word (File is first, Edit is next, and so on.)</H3></A>

<A NAME="693"><H3>The people in our company use Microsoft Word regularly, and they will more easily learn a new application that has an interface that looks familiar. Reducing their learning curve saves training time and expense.</H3></A>

<p><LI><A NAME="CH0202">When would you have to set a startup form?</A></LI></p>

<A NAME="694"><H3>When the application has more than one form, you have to designate which will be the first one the user sees. By default, Visual Basic will use the first form in a project as the defaulkt startup form. As your applications become more complex, you will need to add additional forms. You may find that a form added later in the project should be used as the intial form.</H3></A>

<p><LI><A NAME="CH0203">What causes form events to fire?</A></LI></p>

<A NAME="695"><H3>A user action such as a mouse click or a key press fires a form event. The system can also cause form events to fire, such as Windows shutting down.</H3></A>

<p><LI><A NAME="CH0204">What is the difference between standard controls and custom controls, and where do you get them?</A></LI></p>

<A NAME="696"><H3>Standard controls are included in Visual Basic and are automatically available in the toolbox. Custom controls are additional controls that can be added to the toolbox if you want to use them in a project. Some come with Visual Basic. Additional controls come in the Professional and Enterprise editions of Visual Basic. Custom controls are also available from third-party developers.</H3></A>

<p><LI><A NAME="CH0205">Why would you set control properties at design time?</A></LI></p>  
  
<P>Why would you set them at run time?</P>

<A NAME="697"><H3>You set properties at design time when you want to set defaults for the application. You set properties at run time when you want to control actions as the application runs.</H3></A>


<P><LI><A NAME="CH0206">What is a control array?</A></LI></P> 
  
<P>When do you need a control array?</P>

<A NAME="698"><H3>A control array is a group of controls that share the same name, type, and event procedures. But each control has its own properties.</H3></A>

<A NAME="699"><H3>You use control arrays to save system resources and to add controls at run time.</H3></A>
</ol>

<A NAME="700"><H1>Chapter 3</H1></A>

<A NAME="701"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH0301">What are the two main types of validation?</A></LI></p>

<A NAME="702"><H3>Form-level validation is when you perform data validation after all fields on a form have been completely filled in by a user. For example, a customer entry form could require a user to fill in a name, an address, a phone number, a city, a state, and a zip code. After the user fills in these fields and clicks an OK button, validation takes place to verify the data in each field.</H3></A>

<A NAME="703"><H3>Field-level validation is when each field is validated as it is filled in&#8212;in other words, fields are validated one at a time. For example, a user could type in a value for a zip code field on a customer entry form, and validation of the zip code field would occur either as the user types in the value or before the user moves to another field on the form. In Visual Basic, you can use the Change event for a TextBox control to verify that the zip code value is numeric.</H3></A>

<p><LI><A NAME="CH0302">Why should you use the Validate event to validate data rather than using the LostFocus event?</A></LI></p>

<A NAME="704"><H3>It is possible to use the LostFocus event procedure to validate the data in a field, however this validation technique can result in an infinite loop where one or more controls are using the SetFocus method in the LostFocus event. The Validate event eliminates the problem and makes it easier to manage field-level validation.</H3></A>

<p><LI><A NAME="CH0303">There are two textboxes on a form, and the user types the letter "a" into one of the textboxes. If the form's KeyPreview property is set to True, will the TextBox control's KeyPress event fire?</A></LI></p>

<A NAME="705"><H3>Yes, the KeyPreview property value will cause the form's KeyPress event to fire first, and the TextBox control's KeyPress event will fire next. By default, the form's KeyPreview property is False, causing the TextBox's KeyPress event to fire first.</H3></A>

<A NAME="706"><H3>Using the form's KeyPreview property, you can implement form-level validation. This is particularly useful if you need to monitor user input regardless of which control on the form has focus.</H3></A>

<p><LI><A NAME="CH0304">What is the difference between the Text and ClipText properties of the Masked-Edit Control?</A></LI></p>

<A NAME="707"><H3>The Text property returns the data that the user has typed, along with the mask. For example, if the Mask property is set for a stanadrd US phone number, the Text property would return:</H3></A>

<A NAME="708"><H3>(111) 555-1234</H3></A>

<A NAME="709"><H3>The ClipText property returns only the data the user has typed. Using the same example, the ClipText would return:</H3></A>

<A NAME="710"><H3>1115551234</H3></A>
</ol>

<A NAME="711"><H1>Chapter 4</H1></A>

<A NAME="712"><H2>Review Questions</H2></A>
<OL>

<p><LI><A NAME="CH0401">What are the three types of errors that can occur in a Visual Basic program and when does each occur?</A></LI></p>

<A NAME="713"><H3>The types of errors include syntax, run-time, and logic errors.</H3></A>

<A NAME="714"><H3>Syntax errors occur when code in a statement is constructed incorrectly. </H3></A>

<A NAME="715"><H3>Run-time errors occur while the application is running and a statement attempts an operation that is impossible to carry out.</H3></A>

<A NAME="716"><H3>Logic errors occur when code does not perform as you intended.</H3></A>

<p><LI><A NAME="CH0402">What is the purpose of break mode in the debugging process?</A></LI></p>

<A NAME="717"><H3>Break mode stops the application and lets you check your code one statement at a time. In addition, usiong the various Visual Basic debugging tools, you can also wlak through your code in large blocks, such as by procedure or run to the point where you have placed the insertion point. This can be useful when you wish to "step over" many lines of code that you already know run correctly.</H3></A>

<p><LI><A NAME="CH0403">What is the difference between the Step Into, Step Over and Step Out debugging tools?</A></LI></p>

<A NAME="718"><H3>Step Into runs the code one statement at a time, advances to the next statement and enters break mode.</H3></A>

<A NAME="719"><H3>Step Over executes a called procedure while Step Into enters break mode after calling the procedure.</H3></A>

<A NAME="720"><H3>Step Out moves past the remainder of the code in the current procedure.</H3></A>

<p><LI><A NAME="CH0404">What tasks can you perform using the Immediate window?</A></LI></p>

<A NAME="721"><H3>The Immediate window lets you evaluate expressions, change the value of variables, and execute different procedures. You use the Immediate window when in break mode and manually interact with the application to test for logic errors.</H3></A>

<p><LI><A NAME="CH0405">Identify and explain the two methods of the Debug object.</A></LI></p>

<A NAME="722"><H3>The Debug object's Print method lets you send output from the program to the Immediate window without entering break mode. It lets you track variable values at full execution speed and creates a history list of the values in the Immediate window.</H3></A>

<A NAME="723"><H3>The Debug object's Assert method forces a run-time break when an expression evaluates to False. You only use this method in the Design environment.</H3></A>

<P><LI><A NAME="CH0406">Why do you use the Locals window?</A></LI></P>

<A NAME="724"><H3>You use the Locals window to monitor how your variables change as the code runs.</H3></A>

<p><LI><A NAME="CH0407">What is a watch expression and when do you use it?</A></LI></p>

<A NAME="725"><H3>A watch expression is an expression whose value you want to "watch" or monitor as the code runs. You define them and Visual Basic automatically monitors them. You use a watch expression when you can't trace a problem to a specific statement.</H3></A>
</OL>

<A NAME="726"><H1>Chapter 5</H1></A>

<A NAME="727"><H2>Review Questions</H2></A>
<OL>
<p><LI><A NAME="CH0501">If you do not implement an error handler and a run-time error occurs, what does Visual Basic do?</A></LI></p>

<A NAME="728"><H3>Provides the error number and description to the user and then terminates the application.</H3></A>

<p><LI><A NAME="CH0502">Why should you create your own error handlers instead of using the default Visual Basic handler?</A></LI></p>

<A NAME="729"><H3>The Visual Basic default error handler does not give the user an opportunity to correct the error. In addition, the default handler does not run code associated with cleaning up the application, such as allowing the user to save changes. Only a custom error handler provides this capability.</H3></A>

<p><LI><A NAME="CH0503">What is the last step in implementing an inline error handler?</A></LI></p>

<A NAME="730"><H3>Manually clear the Err object.</H3></A>

<p><LI><A NAME="CH0504">When should you consider using a centralized error handler instead of normal, procedure-based error handlers?</A></LI></p>

<A NAME="731"><H3>If your application performs the same task in a number of different procedures, a centralized function that includes specific error-handling code can be more efficient and easier to maintain.</H3></A>
</ol>

<A NAME="732"><H1>Chapter 6</H1></A>

<A NAME="733"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH0601">What is COM?</A></LI></p>

<A NAME="734"><H3>The Component Object Model (COM) allows you to create software components that can be reused by other Visual Basic applications. These software components provide "services" to client applications. In other words, your application (using Microsoft Word objects) acts as a client that requests services from a component (Microsoft Word). Any custom components that you create in Visual Basic can be used by applications written in other languages that support the COM standard, such as Visual C++.</H3></A>

<p><LI><A NAME="CH0602">What is the purpose of a class module in Visual Basic?</A></LI></p>

<A NAME="735"><H3>Class modules (.cls files) are the foundation of object-oriented programming in Visual Basic. They are analogous to a blueprint for a house. Just as a house is built from a blueprint, new objects are created from class modules. These new objects include your own customized properties and methods.</H3></A>

<p><LI><A NAME="CH0603">Why should you use specific object variables rather than generic object variables whenever possible?</A></LI></p>

<A NAME="736"><H3>In most cases, you know at design time the type of object you want to create and use in your application. It is much more efficient, in these cases, to use specific object variables to point to the objects you create. A specific object variable refers to a particular object type and can only hold pointers to that type. If you try to store a different object type in that variable, an error will result.</H3></A>

<p><LI><A NAME="CH0604">What are three ways to create an object to access an external component?</A></LI></p>

<A NAME="737"><H3>Dim ObjectVariable As New Class</H3></A>

<A NAME="738"><H3>Set ObjectVariable = New Class</H3></A>

<A NAME="739"><H3>Set ObjectVariable = CreateObject(&quot;Component.Class&quot;)</H3></A>

<p><LI><A NAME="CH0605">If you were to create an object model based on a bicycle, how would you implement it?</A></LI></p>

<A NAME="740"><H3>You could create a Bicycle class that contains FrontWheel and BackWheel properties (implemented as objects). The FrontWheel and BackWheel objects could contain a Spokes collection.</H3></A>
</OL>

<A NAME="741"><H1>Chapter 7</H1></A>

<A NAME="742"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH0701">What are the three data access interfaces available in Visual Basic?</A></LI></p>

<A NAME="743"><H3>In Visual Basic, three data access interfaces are available to you: ActiveX Data Objects (ADO), Remote Data Objects (RDO), and Data Access Objects (DAO).</H3></A>

<p><LI><A NAME="CH0702">Why should you use ADO as a data access interface?</A></LI></p>

<A NAME="744"><H3>ActiveX Data Objects (ADO) is Microsoft's newest data access technology and is an interface to OLE DB. OLE DB is Microsoft's strategic low-level interface to all types of data. This allows you to retrieve database and other data.</H3></A>

<p><LI><A NAME="CH0703">What is the difference between a primary key and a foreign key?</A></LI></p>

<A NAME="745"><H3>A primary key is a field, or combination of fields, whose value is unique for each row, or record, in the table. For example, the Employee ID field is the primary key for the Employees table. No two employees can have the same ID.</H3></A>

<A NAME="746"><H3>A foreign key "points to" a primary key field in a related table. For example, in the Northwind database, the Orders table contains a Customer ID field. Each Customer ID in the Orders table identifies which customer made the order.</H3></A>

<p><LI><A NAME="CH0704">What are the three components of OLE DB?</A></LI></p>

<A NAME="747"><H3>Conceptually, OLE DB has three types of components: data consumers, service components, and data providers. Data consumers are applications that use the data exposed by data providers. Service components are elements that process and transport data and extend the functionality of data providers. Data providers are applications, such as Microsoft SQL Server or Exchange.</H3></A>

<p><LI><A NAME="CH0705">What is Structured Query Language used for?</A></LI></p>

<A NAME="748"><H3>Structured Query Language (SQL) is a language used for querying, updating, and managing relational databases. SQL can be used to retrieve, sort, and filter specific data from the database. In addition, you can add, change, and delete data in a database using SQL statements.</H3></A>

<p><LI><A NAME="CH0706">What operator do you use in SQL to find values based on a pattern (or partial expression?</A></LI></p>

<A NAME="749"><H3>You can use the LIKE operator to find values in a field that match the pattern you specify.</H3></A>

<p><LI><A NAME="CH0707">What two properties do you set for an ADO Data control to connect to a database and source of data within the database?</A></LI></p>

<A NAME="750"><H3>You can create a connection to a data source by setting the ConnectionString property of the ADO Data control. Then, you can set the RecordSource property to a table (or SQL statement) from which to retrieve records. </H3></A>

<p><LI><A NAME="CH0708">What are two ways to update data in an ADO Data control's recordset?</A></LI></p>

<A NAME="751"><H3>The ADO Data control can automatically modify and update records without having to add any code. This is done when you modify a field or fields, then click on one of the navigational buttons on the ADO Data control. You can also use the Update method of the Recordset object to modify the data instead of using the arrows on the ADO Data control.</H3></A>
</OL>

<A NAME="752"><H1>Chapter 8</H1></A>

<A NAME="753"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH0801">Which ADO objects can be used to establish the connection?</A></LI></p>

<A NAME="754"><H3>The Connection object or Recordset object can be used to establish a connection to the data source. When used directly, a Recordset creates an implicit Connection object for you.</H3></A>

<p><LI><A NAME="CH0802">What is the ADO Parameters collection used for?</A></LI></p>

<A NAME="755"><H3>When passing arguments into a stored query, you must first create a parameter for each value.</H3></A>

<p><LI><A NAME="CH0803">When would you use the Command object?</A></LI></p>

<A NAME="756"><H3>The ADO Command object is used to reference stored queries in a Microsoft Access database. A recordset can then be created from this Command object if records are returned from the query.</H3></A>

<p><LI><A NAME="CH0804">What method can be used to locate a specific record in an existing recordset without re-querying the database?</A></LI></p>

<A NAME="757"><H3>The ADO Find method.</H3></A>

<p><LI><A NAME="CH0805">What new interface, other than the ADO Data control, is provided by Visual Basic 6 for graphically accessing a data source?</A></LI></p>

<A NAME="758"><H3>The Data Environment.</H3></A>
</OL>

<A NAME="759"><H1>Chapter 9</H1></A>

<A NAME="760"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH0901">If you are using a component that does not have an installation program, which utility will you use to register the component yourself?</A></LI></p>

<A NAME="761"><H3>Regsvr32 (Regsvr32.exe)</H3></A>

<P><li><A NAME="CH0902">What are the two most common additional options used with Regsvr32? When are these options used?</A></li></P>

<A NAME="762"><H3>The /u option is used to unregister a COM server.</H3></A>

<A NAME="763"><H3>The /s option is used to register a server without displaying subsequent dialog boxes.</H3></A>

<p><LI><A NAME="CH0903">What benefits does the components type library provide?</A></LI></p>

<A NAME="764"><H3>Viewing the type library provides you with the proper syntax for the classes, interfaces, methods, properties, and events of the COM object.</H3></A>

<p><LI><A NAME="CH0904">What actions are performed in the following code?</A></LI></p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim xl As Object
'Do not specify a class type
Set xl = GetObject("C:\MyFiles\Earnings.xls")
</PRE>
</td></tr></table></p>

<A NAME="765"><H3>When the code is executed, the application associated with the specified extension starts, and the object in the specified file is activated without being displayed.</H3></A>

<p><LI><A NAME="CH0905">What are the two steps to implementing a Windows API?</A></LI></p>

<A NAME="766"><H3>Declare the DLL function.</H3></A>

<A NAME="767"><H3>Call the DLL function.</H3></A>

<P><LI><A NAME="CH0906">What operator is used to pass a callback procedure to a DLL?</A></LI></P>

<A NAME="768"><H3>The AddressOf operator is used to pass a pointer to the Window API. The pointer directs the API to the address of the callback procedure.</H3></A>
</OL>

<A NAME="769"><H1>Chapter 10</H1></A>

<A NAME="770"><H2>Review Questions</H2></A>
<OL>
<p><LI><A NAME="CH1001">What is an out-of-process COM component?</A></LI></p> 
  
   <p>What are the advantages of implementing an out-of-process component?</p>  
  
   <p>What are the disadvantages?</p>

<A NAME="771"><H3>An out-of-process component is implemented as an executable file and runs in its own process space. The advantage of an out-of-process component is that a single instance of it can service many clients, share global data, and insulate other client applications from problems that one client might encounter. The disadvantage is that communication between the client and component is slower because data is sent across process boundaries from the client to the component and back again.</H3></A>

<p><LI><A NAME="CH1002">When creating an ActiveX control that will be used as a data source, what property of the UserControl must you set at design time?</A></LI></p>

<A NAME="772"><H3>Set the DataSourceBehavior property of your control to vbDataSource when you want your control to act as a source of data for other objects. The DataSourceBehavior property must be set at design time.</H3></A>

<p><LI><A NAME="CH1003">Which type of ActiveX code component can have its Instancing property set to SingleUse?</A></LI></p>

<A NAME="773"><H3>You can create multiple instances of ActiveX EXEs by setting the Instancing property to SingleUse. You cannot set the Instancing property to SingleUse in ActiveX DLL projects because that requires another instance of the server to load, and DLLs can be loaded only once.</H3></A>

<p><LI><A NAME="CH1004">What is the purpose of the Start With Full Compile option?</A></LI></p>

<A NAME="774"><H3>The Start With Full Compile on the Run menu resolves compilation errors before your component begins supplying objects to your test application. The default in Visual Basic is to compile code on demand. This means that there may be code in your component that is not compiled until the client calls it. Some compile errors cannot be fixed without returning to design mode, which means returning the whole project group to design mode.</H3></A>

<P><LI><A NAME="CH1005">What are the three ways to publish items to the Visual Component Manager repository database?</A></LI> </P>

<A NAME="775"><H3>Select a component in the Windows Explorer and drag it to a folder in the Visual Component Manager.</H3></A>

<A NAME="776"><H3>Select a project in your development environment and click Publish on the project's shortcut menu.</H3></A>

<A NAME="777"><H3>Click New on the Visual Component Manager shortcut menu.</H3></A>
</OL>

<A NAME="778"><H1>Chapter 11</H1></A>

<A NAME="779"><H2>Review Questions</H2></A>
<OL>
<p><LI><A NAME="CH1101">Explain some differences between working with an ActiveX document and a Standard EXE project.</A></LI></p>

<A NAME="780"><H3>When working with a Visual Basic form, you can use any type of control or object to create an interface. However, you cannot place embedded objects (such as an Excel or a Word document) or an OLE Container control on a UserDocument.</H3></A>

<A NAME="781"><H3>Before you can use an ActiveX document, you must place it within a container. A form does not require a container to be displayed.</H3></A>

<p><LI><A NAME="CH1102">Where does a DHTML application run?</A></LI></p>

<A NAME="782"><H3>A DHTML application resides on the browser (client) computer, where it interprets and responds to actions the user performs in the browser. Most of the processing associated with a DHTML application occurs on the client computer, but the application can make calls to the server.</H3></A>

<p><LI><A NAME="CH1103">What is a WebClass designer used for?</A></LI></p>

<A NAME="783"><H3>The WebClass designer is a design-time tool in Visual Basic that enables you to quickly create and modify the WebItems that represent the pages in your application. With the WebClass designer, you can define the contents of the WebClass, add events to the WebItems in the WebClass, and write code for each event in the WebClass.</H3></A>

<p><LI><A NAME="CH1104">How do .dob and .dox files relate to ActiveX documents?</A></LI></p>

<A NAME="784"><H3>The .dob and .dox files define the appearance and interface of an ActiveX document, including its properties, events, and methods. These two files are analogous to the Standard EXE project files .frm and .frx files, respectively.</H3></A>

<p><LI><A NAME="CH1105">What files are created when you compile an ActiveX document project?</A></LI></p>

<A NAME="785"><H3>When you compile an ActiveX document project, an .exe or a .dll file is created in addition to a Visual Basic document (.vbd). To open the ActiveX document in a browser such as Internet Explorer, users must be able to navigate to the .vbd file.</H3></A>
</OL>

<A NAME="786"><H1>Chapter 12</H1></A>

<A NAME="787"><H2>Review Questions</H2></A>
<ol>
<p><LI><A NAME="CH1201">What object and what property do you set to programmatically specify the Help file name and location for your application?</A></LI></p>

<A NAME="788"><H3>The HelpFile property of the App object.</H3></A>

<p><LI><A NAME="CH1202">What properties must be set on both the form and the controls to enable What'sThisHelp?</A></LI></p>

<A NAME="789"><H3>To enable What'sThisHelp on a form, you set the WhatsThisHelp property of that form to True. You then select each control for which you want to provide Help and assign a unique value to the WhatsThisHelpID property of the control.</H3></A>

<p><LI><A NAME="CH1203">Which compiler option would you set to allow your compiled application to be debugged using Visual C++?</A></LI></p>

<A NAME="790"><H3>Use the Create Symbolic Debug Info option to generate symbolic debug information in the compiled executable file. Programs compiled to native code using this option can be debugged using Visual C++ (5.0 or later) or another compatible debugger.</H3></A>

<p><LI><A NAME="CH1204">Which conditional statements do you code to use conditional compilation to selectively compile certain parts of the program?</A></LI></p>

<A NAME="791"><H3>To conditionally compile a part of your code, enclose it between #If...Then and #EndIf statements, using a Boolean constant as the branching test.</H3></A>

<p><LI><A NAME="CH1205">What can you do to modify the screens seen in the installation process that you create with the Package and Deployment Wizard?</A></LI></p>

<A NAME="792"><H3>You can use the Setup Toolkit to modify the screens seen in the installation process. The Setup Toolkit is a project called Setup1.vbp that is installed with Visual Basic. The Package and Deployment Wizard uses the Setup1 project when creating the setup programs.</H3></A>
</ol>

</BODY>
</HTML>







