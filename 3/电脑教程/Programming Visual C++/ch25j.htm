<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>An MFC Automation Client Program</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="535"><H1><B>An MFC Automation Client Program</B></H1></A>
<P>Let's move on to the client's end of the Automation conversation. How does an MFC Automation client program call <I>Invoke</I>? The MFC library provides a base class <I>COleDispatchDriver</I> for this purpose. This class has a data member, <I>m_lpDispatch</I>, which contains the corresponding component's <I>IDispatch</I> pointer. To shield you from the complexities of the <I>Invoke</I> parameter sequence, <I>COleDispatchDriver</I> has several member functions, including <I>InvokeHelper</I>, <I>GetProperty</I>, and <I>SetProperty</I>. These three functions call 
<I>Invoke</I> for an <I>IDispatch</I> pointer that links to the component. The <I>COleDispatchDriver</I> object incorporates the <I>IDispatch</I> pointer.

<P>Let's suppose our client program has a class <I>CClockDriver</I>, derived from <I>COleDispatchDriver</I>, that drives <I>CClock</I> objects in an Automation component. The functions that get and set the Time property are shown here.

<P><pre>
DATE CClockDriver::GetTime()
{
    DATE result;
    GetProperty(1, VT_DATE, (void*)&amp;result);
    return result;
}

void CClockDriver::SetTime(DATE propVal)
{
    SetProperty(1, VT_DATE, propVal);
}
</pre>

<P>Here are the functions for the indexed Figure property:

<P><pre>
VARIANT CClockDriver::GetFigure(short i)
{
    VARIANT result;
    static BYTE parms[] = VTS_I2;
    InvokeHelper(2, DISPATCH_PROPERTYGET, VT_VARIANT,
                (void*)&amp;result, parms, i);
    return result;
}

void CClockDriver::SetFigure(short i, const VARIANT&amp; propVal)
{
    static BYTE parms[] = VTS_I2 VTS_VARIANT;
    InvokeHelper(2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL,
                 parms, i, &amp;propVal);
}
</pre>

<P>And finally, here are the functions that access the component's methods:

<P><pre>
void CClockDriver::RefreshWin()
{
    InvokeHelper(3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CClockDriver::ShowWin(short i)
{
    BOOL result;
    static BYTE parms[] = VTS_I2;
    InvokeHelper(4, DISPATCH_METHOD, VT_BOOL, 
                (void*)&amp;result, parms, i);
    return result;
}
</pre>

<P>The function parameters identify the property or method, its return value, and its parameters. You'll learn about dispatch function parameters later, but for now take special note of the first parameter for the <I>InvokeHelper</I>, <I>GetProperty</I>, and <I>SetProperty</I> functions. This is the unique integer index, or dispatch ID (DISPID), for the property or method. Because you're using compiled C++, you can establish these IDs at compile time. If you're using an MFC Automation component with a dispatch map, the indexes are determined by the map sequence, beginning with 1. If you don't know a component's dispatch indexes, you can call the <I>IDispatch</I> member function <I>GetIDsOfNames</I> to convert the symbolic property or method names to integers.

<P>The following illustration shows the interactions between the client (or controller) and the component.

<P><A HREF="javascript:fullSize('g25og01x.htm')"> <img src="g25og01.jpg" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>

<P>The solid lines show the actual connections through the MFC base classes and the <I>Invoke </I>function. The dotted lines represent the resulting logical connections between client class members and component class members.

<P>Most Automation components have a binary type library file with a TLB extension. ClassWizard can access this type library file to generate a class derived from <I>COleDispatchDriver</I>. This generated controller class contains member functions for all the component's methods and properties with hard-coded dispatch IDs. Sometimes you need to do some surgery on this generated code, but that's better than writing the functions from scratch.

<P>After you have generated your driver class, you embed an object of this class in your client application's view class (or in another class) like this:

<P><pre>
CClockDriver m_clock;
</pre>

<P>Then you ask COM to create a clock component object with this statement:

<P><pre>
m_clock.CreateDispatch(&quot;Ex25c.Document&quot;);
</pre>

<P>Now you're ready to call the dispatch driver functions:

<P><pre>
m_clock.SetTime(COleDateTime::GetCurrentTime());
m_clock.RefreshWin();
</pre>

<P>When the <I>m_clock</I> object goes out of scope, its destructor releases the <I>IDispatch</I> pointer.

</BODY>
</HTML>



