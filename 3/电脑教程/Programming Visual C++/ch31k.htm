<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The MFC CRecordView Class</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="781"><H1>The MFC <I>CRecordView</I> Class</H1></A><P>The <I>CRecordView</I> class is a form view class that's attached to a recordset. 
Figure 31-4 illustrates an MFC record view application. The toolbar buttons 
enable the user to step forward and backward through a database table.
<P><IMG SRC="f31og04.gif" width=323 height=329 BORDER="0"><P>
<!-- caption -->
<B>Figure 31-4.</B> <I>An MFC application based on the </I>CRecordView<I> class.</I>
<!-- /caption -->
<P>Like the <I>CFormView</I> class, the 
<I>CRecordView</I> class depends on a dialog template resource. The 
<I>CFormView</I> class has data members that correspond 
to the controls in the dialog box, but the 
<I>CRecordView</I> class accesses data members in a 
<U>foreign</U> <U>object</U>, namely the attached 
<I>CRecordset</I> object. When the user enters data in the controls, the record view's DDX (Dialog Data Exchange) code moves the data into the recordset's data members, which are bound to 
database columns by the recordset's RFX (Record Field Exchange) code.
<P>When you specify a database view application, AppWizard generates a 
class derived from <I>CRecordView</I> together with an empty dialog template. 
AppWizard also generates a class derived from 
<I>CRecordset</I>, so it must ask you for a 
database table name. At runtime, the record view object and the recordset object 
are connected. Your job is to add controls to the dialog template and match 
the controls to recordset data members&#151;no C++ programming is required to 
create a working form-based database application.
<P>AppWizard generates a read-only, view-based database application. If 
you want to modify, add, and delete records, you must do some coding. The 
default behavior of the resulting application matches the behavior of Visual 
Basic and Access, which is a little weird. A record is added or modified only when 
the user moves out of it. If that's what you want, you can pattern your 
applications after the ENROLL sample program in 
the  \ \Samples\VC98\Mfc\Tutorial\Enroll directory on the Visual C++ MSDN CD-ROM.

</BODY>
</HTML>



