<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX08B Example -- The Web Browser ActiveX Control</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="187"><H1>The EX08B Example&#151;The Web Browser ActiveX Control</H1></A>
<P>Microsoft Internet Explorer 4.x has become a leading Web browser. I was 
surprised to find out that most of its functionality is contained in one big 
ActiveX control, Shdocvw.dll. When you run Internet Explorer, you launch a small shell program that loads this Web Browser control in its main window.
<P><DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
You can find complete documentation for the Web Browser control's properties, methods, and events in the Internet SDK, downloadable from <A HREF="http://www.microsoft.com" TARGET="_BLANK">http://www.microsoft.com</A>. This documentation is in HTML form, of course.
</BLOCKQUOTE></DIV>
<P>Because of this modular architecture, you can write your own custom browser program with very little effort. EX08B creates a two-window browser that displays a search engine page side-by-side with the target page, as shown here.
<P><A HREF="javascript:fullSize('G08OG08x.htm')"> <img src="G08OG08.JPG" width=404 height=294 border=0 ALT = "Click to view at full size."> </A>
<P>This view window contains two Web Browser controls that are sized to occupy the entire client area. When the user clicks an item in the search (right-hand) control, the program intercepts the command and routes it to the target (left-hand) control.
<P>Here are the steps for building the example:<P>
<OL>
<B><LI>Make sure the Web Browser control is registered.</B> You undoubtedly have Microsoft Internet Explorer 4.x installed, since Visual C++ 6.0 requires it, so the Web Browser control should be registered. You can download Internet Explorer from <A HREF="http://www.microsoft.com" TARGET="_BLANK">http://www.microsoft.com</A> if necessary.
<P><B><LI>Run AppWizard to produce \vcpp32\ex08b\ex08b.</B> Accept all the default settings but two: except select Single Document and deselect Printing And Print Preview. Make sure the ActiveX Controls option is checked as in EX08A.
<P><B><LI>Install the Web Browser control in the EX08B project.</B> Choose Add To Project from Visual C++'s Project menu, and choose Components And Controls from the submenu. Select Registered ActiveX Controls, and then choose Microsoft Web Browser. Visual C++ will generate the wrapper class <I>CWebBrowser</I> and add the files to your project.
<P><B><LI>Add two <I>CWebBrowser</I> data members to the <I>CEx08bView</I> class.</B> Click on the ClassView tab in the Workspace window, and then 
right-click the <I>CEx08bView</I> class. Choose Add Member Variable, and fill in the dialog as shown here.
<P><IMG SRC="G08OG09.GIF" width=366 height=175 BORDER=0>
<P>Repeat for <I>m_target</I>. ClassWizard adds an <I>#include</I> statement for the webbrowser.h file.
<P><B><LI>Add the child window ID constants for the two controls.</B> Select Resource Symbols from Visual C++'s View menu, and then add the symbols 
<I>ID_BROWSER_SEARCH</I> and <I>ID_BROWSER_TARGET</I>.
<P><B><LI>Add a static character array data member for the AltaVista URL.   
</B>Add the following static data member to the class declaration in ex08bView.h:
<P><PRE><B>private:
    static const char s_engineAltavista[];</B>
<P>Then add the following definition in ex08bView.cpp, outside any function:
<P><B>const char CEx08bView::s_engineAltavista[] =
    &quot;http://altavista.digital.com/&quot;;</B></PRE>
<P><B><LI>Use ClassWizard to map the view's WM_CREATE and 
WM_SIZE messages.</B> Edit the handler code in ex08bView.cpp as follows:
<P><PRE>int CEx08bView::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
    if (CView::OnCreate(lpCreateStruct) == -1)
        return -1;
    
<B>    DWORD dwStyle = WS_VISIBLE | WS_CHILD;    
    if (m_search.Create(NULL, dwStyle, CRect(0, 0, 100, 100),
                        this, ID_BROWSER_SEARCH) == 0) {
        AfxMessageBox(&quot;Unable to create search control!\n&quot;);
        return -1;
    }
    m_search.Navigate(s_engineAltavista, NULL, NULL, NULL, NULL);

    if (m_target.Create(NULL, dwStyle, CRect(0, 0, 100, 100),
                        this, ID_BROWSER_TARGET) == 0) {
        AfxMessageBox(&quot;Unable to create target control!\n&quot;);
        return -1;
    }
    m_target.GoHome(); // as defined in Internet Explorer 4 options</B>

    return 0;
}

void CEx08bView::OnSize(UINT nType, int cx, int cy) 
{
    CView::OnSize(nType, cx, cy);

<B>    CRect rectClient;
    GetClientRect(rectClient);
    CRect rectBrowse(rectClient);
    rectBrowse.right = rectClient.right / 2;
    CRect rectSearch(rectClient);
    rectSearch.left = rectClient.right / 2;

    m_target.SetWidth(rectBrowse.right - rectBrowse.left);
    m_target.SetHeight(rectBrowse.bottom - rectBrowse.top);
    m_target.UpdateWindow();

    m_search.SetLeft(rectSearch.left);
    m_search.SetWidth(rectSearch.right - rectSearch.left);
    m_search.SetHeight(rectSearch.bottom - rectSearch.top);
    m_search.UpdateWindow();</B>
}</PRE>
<P>The <I>OnCreate</I> function creates two browser windows inside the view 
window. The right-hand browser displays the top-level AltaVista page, and the left-hand browser displays the &quot;home&quot; page as defined through the Internet icon in the Control Panel. The <I>OnSize</I> function, called whenever the view window changes size, ensures that the browser windows completely cover the view window. The <I>CWebBrowser</I> member functions <I>SetWidth</I> and <I>SetHeight</I> set the browser's Width and Height properties.
<P><B><LI>Add the event sink macros in the <I>CEx08bView</I> files.</B> ClassWizard can't map events from a dynamic ActiveX control, so you must do it manually. Add the following lines inside the class declaration in the file ex08bView.h:
<P><PRE><B>protected:
    afx_msg void OnBeforeNavigateExplorer1(LPCTSTR URL, long Flags, LPCTSTR TargetFrameName, VARIANT FAR* PostData, LPCTSTR Headers, BOOL FAR* Cancel);
    afx_msg void OnTitleChangeExplorer2(LPCTSTR Text);
    DECLARE_EVENTSINK_MAP()</B></PRE>
<P>Then add the following code in ex08bView.cpp:
<P><PRE><B>BEGIN_EVENTSINK_MAP(CEx08bView, CView)
    ON_EVENT(CEx08bView, ID_BROWSER_SEARCH, 100, OnBeforeNavigateExplorer1, VTS_BSTR VTS_I4 VTS_BSTR VTS_PVARIANT VTS_BSTR VTS_PBOOL)
    ON_EVENT(CEx08bView, ID_BROWSER_TARGET, 113,  OnTitleChangeExplorer2, VTS_BSTR)
END_EVENTSINK_MAP()</B></PRE>
<P><LI><B>Add two event handler functions.</B> Add the following member 
functions in ex08bView.cpp:
<P><PRE><B>void CEx08bView::OnBeforeNavigateExplorer1(LPCTSTR URL,
    long Flags, LPCTSTR TargetFrameName,
    VARIANT FAR* PostData, LPCTSTR Headers, BOOL FAR* Cancel)
{
    TRACE(&quot;CEx08bView::OnBeforeNavigateExplorer1 -- URL = %s\n&quot;, URL);

    if (!strnicmp(URL, s_engineAltavista, strlen(s_engineAltavista))) {
        return;
    }
    m_target.Navigate(URL, NULL, NULL, PostData, NULL);
    *Cancel = TRUE;
}

void CEx08bView::OnTitleChangeExplorer2(LPCTSTR Text)
{
    // Careful!  Event could fire before we're ready.
    CWnd* pWnd = AfxGetApp()-&gt;m_pMainWnd;
    if (pWnd != NULL) {
        if (::IsWindow(pWnd-&gt;m_hWnd)) {
            pWnd-&gt;SetWindowText(Text);
        }
    }
}</B></PRE>
<P>The <I>OnBeforeNavigateExplorer1</I> handler is called when the user clicks on a link in the search page. The function compares the clicked URL (in the <I>URL</I> string parameter) with the search engine URL. If they match, the navigation proceeds in the search window; otherwise, the navigation is cancelled and the Navigate method is called for the target window. The <I>OnTitleChangeExplorer2</I> handler updates the EX08B window title to match the title on the target page.
<P><B><LI>Build and test the EX08B application.</B> Search for something on the AltaVista page, and then watch the information appear in the target page.
</OL>
</BODY>
</HTML>



