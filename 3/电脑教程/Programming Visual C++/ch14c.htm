<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Toolbar</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="279"><H1>The Toolbar</H1></A><P>A toolbar consists of a number of horizontally (or vertically) arranged graphical buttons that might be clustered in groups. The programming interface determines the grouping. The graphical images for the buttons are stored in a single bitmap that is attached to the application's resource file. When a button is clicked, it sends a command message, as do menus and keyboard accelerators. An update command UI message handler is used to update the button's state, which in turn is used by the application framework to modify the button's graphical image.
<A NAME="280"><H2>The Toolbar Bitmap</H2></A><P>Each button on a toolbar appears to have its own bitmap, but actually a single bitmap serves the entire toolbar. The toolbar bitmap has a tile, 15 pixels high and 16 pixels wide, for each button. The application framework supplies the button borders, and it modifies those borders, together with the button's bitmap tile color, to reflect the current button state. Figure 14-1 shows the relationship between the toolbar bitmap and the corresponding toolbar.
<P><IMG SRC="F14OG01.GIF" width=215 height=63 BORDER=0><P>
<!-- caption -->
<B>Figure 14-1.</B> <I>A toolbar bitmap and an actual toolbar.</I>
<!-- /caption -->
<P>The toolbar bitmap is stored in the file Toolbar.bmp in the application's \res subdirectory. The bitmap is identified in the resource script (RC) file as <I>IDR_MAINFRAME</I>. You don't edit the toolbar bitmap directly; instead you use Visual C++'s special toolbar-editing facility.
<A NAME="281"><H2>Button States</H2></A><P>Each button can assume the following states.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>State</B></TD><TD VALIGN="TOP"><B>Meaning</B></TD></TR>
<TR><TD VALIGN="TOP">0</TD><TD VALIGN="TOP">Normal, unpressed state.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_CHECKED</I></TD><TD VALIGN="TOP">Checked (down) state.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_ENABLED</I></TD><TD VALIGN="TOP">Available for use. Button is grayed
and unavailable if this state is not set.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_HIDDEN</I></TD><TD VALIGN="TOP">Not visible.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_INDETERMINATE</I></TD><TD VALIGN="TOP">Grayed.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_PRESSED</I></TD><TD VALIGN="TOP">Currently selected (pressed) with the mouse.</TD></TR>
<TR><TD VALIGN="TOP"><I>TBSTATE_WRAP</I></TD><TD VALIGN="TOP">Line break follows the button.</TD></TR>
</TABLE>
<P>A button can behave in either of two ways: it can be a pushbutton, which is down only when currently selected by the mouse, or it can be a check box button, which can be toggled up and down with mouse clicks. All buttons in the standard application framework toolbar are pushbuttons.
<A NAME="282"><H2>The Toolbar and Command Messages</H2></A><P>When the user clicks a toolbar button with the mouse, a command message is generated. This message is routed like the menu command messages you saw in <A HREF="ch13a.htm">Chapter 13</A>. Most of the time, a toolbar button matches a menu option. In the standard application framework toolbar, for example, the Disk button is equivalent to the File Save menu option because both generate the <I>ID_FILE_SAVE</I> command. The object receiving the command message doesn't need to know whether the message was produced by a click on the toolbar or by a selection from the menu.
<P>A toolbar button doesn't have to mirror a menu item. If you don't provide the equivalent menu item, however, you are advised to define a keyboard accelerator for the button so that the user can activate the command with the keyboard or with a keyboard macro product for Microsoft Windows. You can use ClassWizard to define command and update command UI message handlers for toolbar buttons, whether or not they have corresponding menu items.
<P>A toolbar has an associated bitmap resource and, in the RC file, a companion TOOLBAR resource that defines the menu commands associated with the buttons. Both the bitmap and the TOOLBAR resource have the same ID, typically <I>IDR_MAINFRAME</I>. The text of the AppWizard-generated TOOLBAR resource is shown below:
<P><PRE>IDR_MAINFRAME TOOLBAR DISCARDABLE  16, 15
BEGIN
    BUTTON      ID_FILE_NEW
    BUTTON      ID_FILE_OPEN
    BUTTON      ID_FILE_SAVE
        SEPARATOR
    BUTTON      ID_EDIT_CUT
    BUTTON      ID_EDIT_COPY
    BUTTON      ID_EDIT_PASTE
        SEPARATOR
    BUTTON      ID_FILE_PRINT
    BUTTON      ID_APP_ABOUT
END</PRE>
<P>The <I>SEPARATOR</I> constants serve to group the buttons by inserting corresponding spaces on the toolbar. If the number of toolbar bitmap panes exceeds the number of resource elements (excluding separators), the extra buttons are not displayed.
<P>When you edit the toolbar with the resource editor, you're editing both the bitmap resource and the TOOLBAR resource. You select a button image, and then you double-click on the left panel to edit the properties, including the button's ID.
<A NAME="283"><H2>Toolbar Update Command UI Message Handlers</H2></A>
<P>Remember from <A HREF="ch13a.htm">Chapter 13</A> that update command UI message handlers are used to disable or add check marks to menu items. These same message handlers apply to toolbar buttons. If your update command UI message handler calls the <I>CCmdUI::Enable</I> member function with a <I>FALSE</I> parameter, the corresponding button is set to the disabled (grayed) state and no longer responds to mouse clicks.
<P>On a menu item, the <I>CCmdUI::SetCheck</I> member function displays a check mark. For the toolbar, the <I>SetCheck</I> function implements check box buttons. If the update command UI message handler calls <I>SetCheck</I> with a parameter value of 1, the button is toggled to the down (checked) state; if the parameter is 0, the button is toggled up (unchecked).
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
If the <I>SetCheck</I> parameter value is 2, the button is set to the <U>indeterminate</U> state. This state looks like the disabled state, but the button is still active and its color is a bit brighter.
</BLOCKQUOTE></DIV>
<P>The update command UI message handlers for a pop-up menu are called only when the menu is painted. The toolbar is displayed all the time, so when are its update command UI message handlers called? They're called during the application's idle processing, so the buttons can be updated continuously. If 
the same handler covers a menu item and a toolbar button, it is called both 
during idle processing and when the pop-up menu is displayed.
</BODY>
</HTML>



