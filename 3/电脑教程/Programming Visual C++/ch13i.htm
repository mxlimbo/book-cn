<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Property Sheets</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="269"><H1>Property Sheets</H1></A>
<P>You've already seen property sheets in Visual C++ and in many other modern Windows-based programs. A property sheet is a nice UI element that allows you to cram lots of categorized information into a small dialog. The user selects pages by clicking on their tabs. Windows offers a tab control that you can insert in a dialog, but it's more likely that you'll want to put dialogs inside the tab control. The MFC library supports this, and the result is called a <U>property</U> <U>sheet</U>. The individual dialogs are called <U>property</U> <U>pages</U>.
<A NAME="270"><H2>Building a Property Sheet</H2></A><P>Follow these general steps to build a property sheet using the Visual C++ tools:
<OL>
<LI>Use the resource editor to create a series of dialog templates that are all approximately the same size. The captions are the strings that you want to display on the tabs.
<P><LI>Use ClassWizard to generate a class for each template. Select <I>CPropertyPage</I> as the base class. Add data members for the controls.
<P><LI>Use ClassWizard to generate a single class derived from <I>CPropertySheet</I>.
<P><LI>To the sheet class, add one data member for each page class.
<P><LI>In the sheet class constructor, call the <I>AddPage</I> member function for each page, specifying the address of the embedded page object.
<P><LI>In your application, construct an object of the derived <I>CPropertySheet</I> class, and then call <I>DoModal</I>. You must specify a caption in the constructor call, but you can change the caption later by calling <I>CPropertySheet::SetTitle</I>.
<P><LI>Take care of programming for the Apply button.<P>
</OL>

<A NAME="271"><H2>Property Sheet Data Exchange</H2></A>
<P>The framework puts three buttons on a property sheet. (See, for example, Figure 13-5.) Be aware that the framework calls the Dialog Data Exchange (DDX) code for a property page each time the user switches to and from that page. As you would expect, the framework calls the DDX code for a page when the user clicks OK, thus updating that page's data members. From these statements, you can conclude that all data members for all pages are updated when the user clicks OK to exit the sheet. All this with no C++ programming on your part!<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
With a normal modal dialog, if the user clicks the Cancel button, the changes are discarded and the dialog class data members remain unchanged. With a property sheet, however, the data members are updated if the user changes one page and then moves to another, even if the user exits by clicking the Cancel button.
</BLOCKQUOTE></DIV>
<P>What does the Apply button do? Nothing at all if you don't write some code. It won't even be enabled. To enable it for a given page, you must set the page's modified flag by calling <I>SetModified(TRUE)</I> when you detect that the user has made changes on the page.

<P>If you've enabled the Apply button, you can write a handler function for it in your page class by overriding the virtual <I>CPropertyPage::OnApply</I> function. Don't try to understand property page message processing in the context of normal modal dialogs; it's quite different. The framework gets a 
WM_NOTIFY message for all button clicks. It calls the DDX code for the page if the OK or Apply button was clicked. It then calls the virtual <I>OnApply</I> functions <U>for</U> <U>all</U> <U>the</U> <U>pages</U>, and it resets the modified flag, which disables the Apply button. Don't forget that the DDX code has already been called to update the data members in all pages, so you need to override <I>OnApply</I> in only one page class.
<P>What you put in your <I>OnApply</I> function is your business, but one option is to send a user-defined message to the object that created the property sheet. The message handler can get the property page data members and process them. Meanwhile, the property sheet stays on the screen.
</BODY>
</HTML>



