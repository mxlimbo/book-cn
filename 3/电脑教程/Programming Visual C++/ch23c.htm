<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX23B Example -- An SDI Application</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="499"><H1><B>The EX23B Example&#151;An SDI Application</B></H1></A>
<P>This SDI &quot;Hello, world!&quot; example builds on the code you saw way back in <A HREF="ch02a.htm">Chapter 2</A>. The application has only one window, an object of a class derived from <I>CFrameWnd</I>. All drawing occurs inside the frame window and all messages are handled there.

<ol>
<P><B><LI>Run AppWizard to produce \vcpp32\ex23b\ex23b.</B> Select the Single Document option in the AppWizard Step 1 dialog and uncheck the Document/View Architecture Support? option, as shown here.


<P><A HREF="javascript:fullSize('g23og02x.htm')"> <img src="g23og02.jpg" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>


<P><B><LI>Add code to paint in the dialog.</B> Add the following boldface code 
to the <I>CChildView::OnPaint</I> function in the ChildView.cpp source code file:

<P><pre>
void CChildView::OnPaint() 
{
    CPaintDC dc(this); // device context for painting

<B>    dc.TextOut(0, 0, &quot;Hello, world!&quot;);</B>

    // Do not call CWnd::OnPaint() for painting messages
}
</pre>

<P><B><LI>Compile and run.</B>  You now have a complete SDI application that has no dependencies on the document-view architecture.
</ol>
<P>AppWizard automatically takes out dependencies on the document-view architecture and generates an application for you with the following elements:

<UL>
<LI><B>A main menu</B>&#151;You can have a Windows-based application without a menu&#151;you don't even need a resource script. But EX23B has both. The application framework routes menu commands to message handlers in the frame class.



<LI><B>An icon</B>&#151;An icon is useful if the program is to be activated from Microsoft Windows Explorer. It's also useful when the application's main frame window is minimized. The icon is stored in the resource, along with the menu.

<LI><B>Window close message command handler</B>&#151;Many an application needs to do special processing when its main window is closed. If you were using documents, you could override the 
<I>CDocument::SaveModified</I> function. Here, to take control of the close process, AppWizard creates message handlers to process close messages sent as a result of user actions and by Windows itself when it shuts down.

<LI><B>Toolbar and status bar</B>&#151;AppWizard automatically generates a default toolbar and status bar for you and sets up the routing even though there are no document-view classes.
</ul>

<P>There are several interesting features in the SDI application that 

have no document-view support, including:

<UL>

<LI><I><B>CChildView</B></I><B> class</B>&#151;Contrary to its name, this class is actually a 
CWnd derivative that is declared in ChildView.h and implemented in ChildView.cpp. <I>CChildView</I> implements only a virtual <I>OnPaint</I> member function, which contains any code that you want to draw in the frame window (as illustrated in step 2 of the EX23B sample).

<P><LI><I><B>CMainFrame</B></I><B> class</B>&#151;This class contains a data member, <I>m_wndView</I>, that is created and initialized in the <I>CMainFrame::OnCreate</I> member function.

<P><LI><I><B>CMainFrame::OnSetFocus</B></I><B> function</B>&#151;This function makes sure the focus is translated to the <I>CChildView</I>:

<p><pre>void CMainFrame::OnSetFocus(CWnd* pOldWnd)
{
    // forward focus to the view window
    m_wndView.SetFocus();
}
</pre>

<P><LI><B><I>CMainFrame::OnCmdMsg</I> function</B>&#151;This function gives the view a chance to handle any command messages first:

<pre>
BOOL CMainFrame::OnCmdMsg(UINT nID, int nCode, void* pExtra,
                          AFX_CMDHANDLERINFO* pHandlerInfo)
{
    // let the view have first crack at the command
    if (m_wndView.OnCmdMsg(nID, nCode, pExtra, pHandlerInfo))
        return TRUE;<p>

    // otherwise, do default handling
    return CFrameWnd::OnCmdMsg(nID, nCode, pExtra, pHandlerInfo);
</pre>
</UL>

</BODY>
</HTML>



