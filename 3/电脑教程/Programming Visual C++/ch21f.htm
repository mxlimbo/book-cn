<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Help Command Processing</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="458"><H1><B>Help Command Processing</B></H1></A>
<P>You've seen the components of a help file, and you've seen the effects of F1 and Shift-F1. You know how the application element IDs are linked to help context IDs. What you haven't seen is the application framework's internal processing of the help requests. Why should you be concerned? Suppose you want to provide help on a specific view window instead of a frame window. What if you need help topics linked to specific graphics items in a view window? These and other needs can be met by mapping the appropriate help messages in the view class.

<P>Help command processing depends on whether the help request was 
an F1 request or a Shift-F1 request. The processing of each help request will be described separately.

<A NAME="459"><H2><B>F1 Processing</B></H2></A>
<P>The F1 key is normally handled by a keyboard accelerator entry that 
AppWizard inserts in the RC file. The accelerator associates the F1 key with an <I>ID_HELP</I> command that is sent to the <I>OnHelp</I> member function in the <I>CFrameWnd</I> class.

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
In an active modal dialog or a menu selection in progress, the F1 key is processed by a Windows <U>hook</U> that causes the same <I>OnHelp</I> function to be called. The F1 accelerator key would otherwise be disabled.</blockquote>
</div>

<P>The <I>CFrameWnd::OnHelp</I> function sends an MFC-defined 
WM_COMMANDHELP message to the innermost window, which is usually the view. If your view class does not map this message or if the handler returns <I>FALSE</I>, the framework routes the message to the next outer window, which is either the MDI child frame or the main frame. If you have not mapped WM_COMMANDHELP in your derived frame window classes, the message is processed in the MFC <I>CFrameWnd</I> class, which displays help for the symbol that AppWizard generates for your application or document type.

<P>If you map the WM_COMMANDHELP message in a derived class, your handler must call <I>CWinApp::WinHelp</I> with the proper context ID as a parameter.

<P>For any application, AppWizard adds the symbol <I>IDR_MAINFRAME</I> to your project and the HM file defines the help context ID <I>HIDR_MAINFRAME</I>, which is aliased to <I>main_index</I> in the HPJ file. The standard AfxCore.rtf file associates the main index with this context ID.

<P>For an MDI application named SAMPLE, for example, AppWizard also 
adds the symbol <I>IDR_SAMPLETYPE</I> to your project and the HM file defines the help context ID <I>HIDR_SAMPLETYPE</I>, which is aliased to 
<I>HIDR_DOC1TYPE</I> in the HPJ file. The standard AfxCore.rtf file associates the topic &quot;Modifying the Document&quot; with this context ID.

<A NAME="460"><H2><B>Shift-F1 Processing</B></H2></A>
<P>When the user presses Shift-F1 or clicks the Context Help toolbar button, a command message is sent to the <I>CFrameWnd</I> function <I>OnContextHelp</I>. When the user presses the mouse button again after positioning the mouse cursor, an MFC-defined WM_HELPHITTEST message is sent to the innermost window where the mouse click is detected. From that point on, the routing of this message is identical to that for the WM_COMMANDHELP message, described previously in &quot;<A HREF="ch21f.htm#459">F1 Processing</A>&quot;.

<P>The <I>lParam</I> parameter of <I>OnHelpHitTest</I> contains the mouse coordinates in device units, relative to the upper-left corner of the window's client area. The <I>y</I> value is in the high-order half; the <I>x</I> value is in the low-order half. You can use these coordinates to set the help context ID specifically for an item in 
the view. Your <I>OnHelpHitTest</I> handler should return the correct context ID; the framework will call <I>WinHelp</I>.

</BODY>
</HTML>



