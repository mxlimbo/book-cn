<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Chapter Thirty-Three -- The OLE DB Templates</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>

<font size="+3">Chapter Thirty-Three</font>
<A NAME="837"><H1>The OLE DB Templates</H1></A><P><A HREF="ch31a.htm">Chapter 31</A> and <A HREF="ch32a.htm">Chapter 32</A> covered two alternative ways to manage databases 
using the Microsoft Foundation Class Library version 6.0 and Microsoft Visual 
C++ 6.0&#151;using ODBC and using DAO. Microsoft has defined another way to 
access data&#151;through a technology called OLE DB. This chapter covers the 
new OLE DB templates&#151;Visual C++ 6.0's support for accessing data through 
OLE DB directly. While ODBC is designed to provide access primarily to 
Structured Query Language (SQL) data in a multiplatform environment, OLE DB is 
designed to provide access to all types of data within a system. OLE DB uses 
the Component Object Model (COM) to accomplish this. OLE DB is fairly 
flexible: it covers all the SQL functionality defined in ODBC as well as defining 
interfaces suitable for gaining access to other-than-SQL types of data.
<P>This chapter covers the highlights of the new OLE DB templates. 
OLE DB data access is divided into two major pieces: 
<U>consumers</U> and <U>providers</U>. We'll take a look at the basic OLE DB architecture and then examine how the consumer templates work. Then we'll look at how the provider side templates work.
</BODY>
</HTML>



