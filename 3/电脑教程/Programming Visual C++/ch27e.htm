<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The ILockBytes Interface</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="612"><H1><B>The <I>ILockBytes</I> Interface</B></H1></A>
<P>As already mentioned, the compound file system you've been looking at is implemented in the OLE32 DLL. The structured storage interfaces are flexible enough, however, to permit you to change the underlying implementation. The key to this flexibility is the <I>ILockBytes</I> interface. The 
<I>StgCreateDocfile </I>and<I> StgOpenStorage</I> global functions use the default Windows file system. You can write your own file access code that implements the <I>ILockBytes</I> interface and then call <I>StgCreateDocfileOnILockBytes</I> or <I>StgOpenStorageOnILockBytes</I> to create or open the file, instead of calling the other global functions.

<P>Rather than implement your own <I>ILockBytes</I> interface, you can call <I>CreateILockBytesOnHGlobal</I> to create a compound file in RAM. If you wanted to put compound files inside a database, you would implement an <I>ILockBytes</I> interface that used the database's 
<U>blobs</U> (binary large objects).

</BODY>
</HTML>



