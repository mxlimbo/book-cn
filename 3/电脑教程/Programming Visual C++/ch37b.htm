<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The DHTML Object Model</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="985"><H1>The DHTML Object Model</H1></A><P>If you've been heads down on a Visual C++ project and haven't yet had 
time to take a peek at HTML, the first thing you should know is that HTML is 
an ASCII markup language format. Here is the code for a very basic HTML page:
<P><PRE>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;
This is an example very basic HTML page!
&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;This is some text with H1!
&lt;/h1&gt;
&lt;h3&gt;
This is some text with H3!
&lt;/h3&gt;
&lt;/body&gt;
&lt;/html&gt;</PRE>
<P>This basic HTML &quot;document&quot; is composed of the following elements:
<UL>
<P><LI><B>A head (or header)</B> In this example, the header contains a 
title: &quot;This is an example very basic HTML page!&quot;
<P><LI><B>The body of the document</B> The body in this example contains two text elements. The first has the heading 1 (h1) style and 
reads, &quot;This is some text with H1!&quot; The second text element has the 
heading 3 (h3) style and reads, &quot;This is some text with H3!&quot;
</UL>
<P>The end result is an HTML page that&#151;when displayed in Internet 
Explorer 4&#151;looks like Figure 37-1.
<P>When Internet Explorer 4 loads this sample HTML page, it creates 
an internal representation that you can traverse, read, and manipulate through 
the DHTML object model. Figure 37-2 shows the basic 
hierarchy of the DHTML object model.
<P><A HREF="javascript:fullSize('f37og01x.htm')"> <img src="f37og01.jpg" width=404 height=314 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 37-1.</B> <I>A very basic HTML page, as seen in Internet Explorer 4.</I>
<!-- /caption -->
<P>At the root of the object model is the 
<I>window</I> object. This object can be used from a script to perform some action, such as popping up a dialog box. Here's an example of some JScript that accesses the window object:
<P><PRE>&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
function about()
{
    window.showModalDialog(&quot;about.htm&quot;,&quot;&quot;,
        &quot;dialogWidth:25em;dialogHeight13em&quot;)
}
&lt;/SCRIPT&gt;</PRE>
<P>When the <I>about</I> script function is called, it will call the 
<I>showModalDialog</I> function in the <I>window 
</I>DHTML object to display a dialog. This example 
also illustrates how scripts access the object model&#151;through globally 
accessible objects that map directly to the corresponding object in the DTHML object model.
<P>The window object has several &quot;subobjects&quot; that allow you to 
further manipulate portions of Internet Explorer 4. 
The <I>document</I> object is what we will spend most of our time on in this chapter because it gives us 
programmatic access to the various elements of the currently loaded HTML document. 
Below, some JScript shows how to create basic dynamic content that 
changes the document object.
<P><IMG SRC="f37og02.gif" width=240 height=903 BORDER="0"><P>
<!-- caption -->
<B>Figure 37-2.</B> <I>Basic hierarchy of the DHTML object model.</I>
<!-- /caption -->
<P><PRE>&lt;HTML&gt; 
&lt;HEAD&gt;
&lt;TITLE&gt;Welcome!&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
function changeMe() { 
    document.all.MyHeading.outerHTML = 
        &quot;&lt;H1 ID=MyHeading&gt;Dynamic HTML is magic!&lt;/H1&gt;&quot;;
    document.all.MyHeading.style.color = &quot;green&quot;; 
    document.all.MyText.innerText = &quot;Presto Change-o! &quot;; 
    document.all.MyText.align = &quot;center&quot;;
    document.body.insertAdjacentHTML(&quot;BeforeEnd&quot;, 
        &quot;&lt;P ALIGN=\&quot;center\&quot;&gt;Open Sesame!&lt;/P&gt;&quot;);
} 
&lt;/SCRIPT&gt;
&lt;BODY onclick=&quot;changeMe()&quot;&gt;
&lt;H3 ID=MyHeading&gt; Dynamic HTML demo!&lt;/H3&gt;
&lt;P ID=MyText&gt;Click anywhere to see the power of DHTML!&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>
<P>This script changes the <I>MyHeading</I> and 
<I>MyText</I> objects in the HTML documents on the fly. Not only does it change the text, it also changes 
attributes of the elements such as color and alignment. If you want to see this script 
in action, you can find it in the ex37_1.html file on the companion CD.
<P>Before we further deconstruct the DHTML object model, let's 
examine the DHTML concept of a <U>collection</U>. Collections in DHTML are logically 
equivalent to C++ data structures such as linked lists. In fact, access to the 
DHTML object model is performed largely by iterating through collections searching 
for a particular HTML element and then potentially iterating through 
another subcollection to get to yet another element. Elements contain several 
methods, such as <I>contains</I> and <I>length</I>, that you use to traverse the elements.
<P>For example, one of the subelements of the 
<I>document</I> object is a collection named 
<I>all</I> that contains all of the document's elements. In fact, most 
of the subobjects of the <I>document</I> object are collections. The following 
script (ex37_2.html) shows how to iterate through the 
<I>all</I> collection and list the various items of a document.
<P><PRE>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Iterating through the all collection.&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
function listAllElements() {
    var tag_names = &quot;&quot;;
    for (i=0; i&lt;document.all.length; i++)
        tag_names = tag_names + document.all(i).tagName + &quot; &quot;;
    alert(&quot;This document contains: &quot; + tag_names);
}
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY onload=&quot;listAllElements()&quot;&gt;
&lt;H1&gt;DHTML Rocks!&lt;/H1&gt;
&lt;P&gt;This document is &lt;B&gt;very&lt;/B&gt; short.
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>
<P>Notice how easy it is to retrieve items with script. (The syntax calls 
for parentheses, similar to accessing an array in 
C++.) Also notice that each element in an HTML document has properties such as 
tagName<B> </B>that allow you to programmatically &quot;search&quot; for various elements. For example, if you wanted 
to write a script that filtered out all bold items, you would scan the 
<I>all</I> collection for an element with tagName equal to 
<I>B</I>.
<P>Now you have the basics of the DHTML object model down and 
you understand how to access them through scripts from the Webmaster's 
perspective. Let's look at how Visual C++ lets us work with DHTML from an 
application developer's perspective.
</BODY>
</HTML>



