<html>
<head>
<title>看雪学苑</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<style type="text/css">
<!--
.p8 {  font-size: 8pt}
.p9 {  font-size: 9pt}
a:hover {  color: #00FF00}
a {  text-decoration: none}
.p12 {  font-size: 12pt; font-weight: bold; color: #FF3333}
-->
</style>
</head>

<body bgcolor="#FFFFFF">
<span class="p9"><span class="p9"><span class="p9"><span class="p9"><font color=blue>标 
题:</font>破解HomeWatcher v1.2 第一回合 (3千字)<br>
<font color=blue>发信人:</font>DDXia<br>
<font color=blue>时 间:</font>2000-3-4 11:39:44 <br>
<font color=blue>详细信息:</font><br>
</span> </span> </span> </span>
<blockquote><span class="p9"><span class="p9"><span class="p9"><span class="p9"> 
  最先最先得感谢TRW2000的作者朱楠灏和刘涛涛。 <br>
  破解HomeWatcher v1.2&nbsp; 第一回合（转载希望保持完整） <br>
  <br>
  级别：入门级-----前辈们请指点。 <br>
  作者：丁丁虾 又名：DDXia [CCG] <br>
  <br>
  软件名称：HomeWatcher <br>
  整理日期：2000.2.27 <br>
  最新版本：1.2 Beta 9 <br>
  文件大小：968KB <br>
  软件授权：共享软件 <br>
  使用平台：Win95/98/NT <br>
  发布公司：Home Page <br>
  软件简介： <br>
  　　能够定时拍照，能在景物发生变化时将照片保存下来，然后制作成网页，连接到internet，再通过FTP将照片上传 <br>
  http://www.newhua.com/down/hw12.exe <br>
  <br>
  第一回合较量。 <br>
  用TRW2000，这个软件比较COOL。用了它就让我有难舍难分的感觉。尤其是它的PMODULE，令 <br>
  我感慨无限，当然还有许多优点。 <br>
  <br>
  1、load HomeWatcher.exe <br>
  2、在Full Version 中填入注册码12345678(任意)。 <br>
  3、bpx hmemcpy－－－－中断读写内存 <br>
  4、按确定，就会被中断 <br>
  5、pmodule <br>
  6、按F10,一直到出现“invalid key" <br>
  7、瞧一瞧 <br>
  015F:004132B8&nbsp; CALL&nbsp; &nbsp; `USER32!MessageBoxA` <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^------------->出现错误窗口&nbsp; 
  <br>
  015F:004132BD&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+70],00 <br>
  015F:004132C2&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+00000084],00 <br>
  <br>
  8、再往上瞧一瞧，都说了看人先看个大慨，然后再仔细看个究竟。 <br>
  <br>
  <br>
  015F:00413284&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  015F:00413289&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041328A&nbsp; CMP&nbsp; &nbsp; EAX,00000011 <br>
  015F:0041328D&nbsp; JNZ&nbsp; &nbsp; 004132A2 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^-------------------->这是出现错误窗口的跳转 
  <br>
  &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
  &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; 试一试，改为JZ&nbsp; &nbsp;&nbsp; 结果可以自己试&nbsp; 
  <br>
  015F:0041328F&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+00000084] <br>
  015F:00413296&nbsp; PUSH&nbsp; &nbsp; EDX <br>
  015F:00413297&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  015F:0041329C&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041329D&nbsp; CMP&nbsp; &nbsp; EAX,00000010 <br>
  015F:004132A0&nbsp; JZ&nbsp; &nbsp; &nbsp; 004132CC <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^-------------------->看！还有一个跳转，对，对也要改为JNZ！ 
  <br>
  015F:004132A2&nbsp; PUSH&nbsp; &nbsp; 00000030 <br>
  015F:004132A4&nbsp; PUSH&nbsp; &nbsp; 004A1E35 <br>
  015F:004132A9&nbsp; PUSH&nbsp; &nbsp; 004A1E28 <br>
  015F:004132AE&nbsp; MOV&nbsp; &nbsp; EAX,[ESP+0C] <br>
  015F:004132B2&nbsp; CALL&nbsp; &nbsp; 0045F960 <br>
  015F:004132B7&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:004132B8&nbsp; CALL&nbsp; &nbsp; `USER32!MessageBoxA` <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^------------->出现错误窗口&nbsp; 
  <br>
  015F:004132BD&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+70],00 <br>
  015F:004132C2&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+00000084],00 <br>
  015F:004132CA&nbsp; JMP&nbsp; &nbsp; 00413304 <br>
  015F:004132CC&nbsp; PUSH&nbsp; &nbsp; 004A1E61 <br>
  015F:004132D1&nbsp; PUSH&nbsp; &nbsp; 004A1E41 <br>
  015F:004132D6&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+000000A0] <br>
  015F:004132DD&nbsp; PUSH&nbsp; &nbsp; EDX <br>
  015F:004132DE&nbsp; CALL&nbsp; &nbsp; 0047D430 <br>
  015F:004132E3&nbsp; ADD&nbsp; &nbsp; ESP,0000000C <br>
  015F:004132E6&nbsp; PUSH&nbsp; &nbsp; 00000030 <br>
  015F:004132E8&nbsp; PUSH&nbsp; &nbsp; 004A1E6D <br>
  015F:004132ED&nbsp; LEA&nbsp; &nbsp; ECX,[ESP+000000A0] <br>
  015F:004132F4&nbsp; PUSH&nbsp; &nbsp; ECX <br>
  015F:004132F5&nbsp; MOV&nbsp; &nbsp; EAX,[ESP+0C] <br>
  015F:004132F9&nbsp; CALL&nbsp; &nbsp; 0045F960 <br>
  015F:004132FE&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:004132FF&nbsp; CALL&nbsp; &nbsp; `USER32!MessageBoxA` <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------->这里也出现一个窗口，去瞧瞧。 
  <br>
  015F:00413304&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+70] <br>
  015F:00413308&nbsp; PUSH&nbsp; &nbsp; EDX <br>
  <br>
  （快、快，肯定是THANK YOU！）噢！MY GOD 当场晕倒。“restar HomeWatcher to apply the changes” <br>
  (中文：重新启动HomeWatcher再改变版权）天啊！看来程序虽小，还真的放手严密！ <br>
  想想还有什么招数！------反正我是饿了！是绝对的想不出来哦！ <br>
  <br>
  （待续） <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 完成时间 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2000.2.27中午 </span></span></span></span></blockquote>
<hr>
<p><span class="p9"><span class="p9"><span class="p9"><font color=blue>标 题:</font>破解HomeWatcher 
  v1.2 第二回合 (6千字)<br>
  <font color=blue>发信人:</font>DDXia<br>
  <font color=blue>时 间:</font>2000-3-4 11:41:08 <br>
  <font color=blue>详细信息:</font><br>
  </span></span></span></p>
<blockquote><span class="p9"><span class="p9"><span class="p9"> 最先最先得感谢TRW2000的作者朱楠灏和刘涛涛。 
  <br>
  破解HomeWatcher v1.2&nbsp; 第二回合（转载希望保持完整） <br>
  <br>
  级别：入门级-----前辈们请指点。 <br>
  作者：丁丁虾 又名：DDXia [CCG] <br>
  <br>
  软件名称：HomeWatcher <br>
  整理日期：2000.2.27 <br>
  最新版本：1.2 Beta 9 <br>
  文件大小：968KB <br>
  软件授权：共享软件 <br>
  使用平台：Win95/98/NT <br>
  发布公司：Home Page <br>
  软件简介： <br>
  　　能够定时拍照，能在景物发生变化时将照片保存下来，然后制作成网页，连接到internet，再通过FTP将照片上传 <br>
  http://www.newhua.com/down/hw12.exe <br>
  <br>
  第二回合较量。 <br>
  用TRW2000，看一看能否可以TRACE出它的注册码，当然我个人感觉有一点麻麻地（广东话）。Do my best！ <br>
  <br>
  再通看一遍程序（在出现错误窗口的时候） <br>
  <br>
  015F:00413250&nbsp; MOV&nbsp; &nbsp; CL,[EBX] <br>
  015F:00413252&nbsp; MOV&nbsp; &nbsp; [EDI],CL <br>
  015F:00413254&nbsp; INC&nbsp; &nbsp; DWord Ptr [ESP+08] <br>
  015F:00413258&nbsp; INC&nbsp; &nbsp; EDI <br>
  015F:00413259&nbsp; INC&nbsp; &nbsp; ESI <br>
  015F:0041325A&nbsp; INC&nbsp; &nbsp; EBX <br>
  015F:0041325B&nbsp; LEA&nbsp; &nbsp; EAX,[ESP+0C] <br>
  015F:0041325F&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:00413260&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^-------------------------->注意这个CALL号 
  <br>
  015F:00413265&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:00413266&nbsp; CMP&nbsp; &nbsp; EAX,ESI <br>
  015F:00413268&nbsp; JA&nbsp; &nbsp; &nbsp; 00413232 <br>
  015F:0041326A&nbsp; MOV&nbsp; &nbsp; EDX,[ESP+04] <br>
  015F:0041326E&nbsp; LEA&nbsp; &nbsp; EAX,[ESP+70] <br>
  015F:00413272&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+1*EDX+70],00 <br>
  015F:00413277&nbsp; MOV&nbsp; &nbsp; ECX,[ESP+08] <br>
  015F:0041327B&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+1*ECX+00000084],00 <br>
  015F:00413283&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:00413284&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^-------------------------->又注意这个CALL号 
  <br>
  015F:00413289&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041328A&nbsp; CMP&nbsp; &nbsp; EAX,00000011 <br>
  015F:0041328D&nbsp; JNZ&nbsp; &nbsp; 004132A2----------->不等，KEY就非法 <br>
  015F:0041328F&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+00000084] <br>
  015F:00413296&nbsp; PUSH&nbsp; &nbsp; EDX <br>
  015F:00413297&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^-------------------------->又再注意这个CALL号 
  <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; 看来这软件的作者的CALL号一定是47B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; 记得哦，去了美国，别忘了CALL他^_^ <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; 一定有鬼，去捉鬼好不好！可要带好武器喔！ <br>
  015F:0041329C&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041329D&nbsp; CMP&nbsp; &nbsp; EAX,00000010 <br>
  015F:004132A0&nbsp; JZ&nbsp; &nbsp; &nbsp; 004132CC <br>
  015F:004132A2&nbsp; PUSH&nbsp; &nbsp; 00000030 <br>
  015F:004132A4&nbsp; PUSH&nbsp; &nbsp; 004A1E35 <br>
  015F:004132A9&nbsp; PUSH&nbsp; &nbsp; 004A1E28 <br>
  015F:004132AE&nbsp; MOV&nbsp; &nbsp; EAX,[ESP+0C] <br>
  015F:004132B2&nbsp; CALL&nbsp; &nbsp; 0045F960 <br>
  015F:004132B7&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:004132B8&nbsp; CALL&nbsp; &nbsp; `USER32!MessageBoxA`------出错窗口 <br>
  <br>
  <br>
  想想清楚罗、（远处有一个鬼屋）开了门，就不要往回走罗！好！GO GO 按F8，进入 call 47b320 <br>
  好象都是黑乎乎的代码！ <br>
  <br>
  015F:0047B320&nbsp; MOV&nbsp; &nbsp; EAX,[ESP+04]------->EAX指向存KEY的地方 用D EAX 
  可以看到注册码 <br>
  <br>
  015F:0047B324&nbsp; TEST&nbsp; &nbsp; AL,03 <br>
  015F:0047B326&nbsp; JNZ&nbsp; &nbsp; 0047B355 <br>
  015F:0047B328&nbsp; MOV&nbsp; &nbsp; EDX,[EAX]---------->把前四位，付给EDX，我的是1234。不过你看到是HEX 
  <br>
  <br>
  015F:0047B32A&nbsp; ADD&nbsp; &nbsp; EAX,00000004------->移动KEY的指针，到下四位。 <br>
  <br>
  015F:0047B32D&nbsp; MOV&nbsp; &nbsp; ECX,EDX <br>
  015F:0047B32F&nbsp; SUB&nbsp; &nbsp; EDX,01010101------->为什么都减1呢??我也不明白. <br>
  <br>
  015F:0047B335&nbsp; AND&nbsp; &nbsp; EDX,80808080------->为什么都AND 80呢??? <br>
  <br>
  015F:0047B33B&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047B328 <br>
  015F:0047B33D&nbsp; NOT&nbsp; &nbsp; ECX&nbsp; &nbsp; &nbsp; &nbsp; -------> 
  为什么?? <br>
  <br>
  015F:0047B33F&nbsp; AND&nbsp; &nbsp; EDX,ECX&nbsp; &nbsp; --------> 为什么?? <br>
  <br>
  经过反复多次的输入KEY值，跟踪、跟踪、再跟踪。我先说这段程序作用-----计算EAX指向的字符串的长度 <br>
  这段的程序挺有趣的。可以分析一下。 <br>
  <br>
  几点TIPS： 1、HEX-01是判断当没有输入值的时候HEX为00 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2、AND 80 因为能输入的字符的HEX都是小于80的 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3、HEX是输入的键盘的16进制值，比如：'1'--->HEX为31。 <br>
  <br>
  015F:0047B341&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047B328 <br>
  015F:0047B343&nbsp; TEST&nbsp; &nbsp; DL,DL <br>
  015F:0047B345&nbsp; JNZ&nbsp; &nbsp; 0047B36F <br>
  015F:0047B347&nbsp; TEST&nbsp; &nbsp; DH,DH <br>
  015F:0047B349&nbsp; JNZ&nbsp; &nbsp; 0047B370 <br>
  015F:0047B34B&nbsp; TEST&nbsp; &nbsp; EDX,00FF0000 <br>
  015F:0047B351&nbsp; JNZ&nbsp; &nbsp; 0047B371 <br>
  015F:0047B353&nbsp; JMP&nbsp; &nbsp; 0047B372 <br>
  015F:0047B355&nbsp; ADD&nbsp; &nbsp; EAX,00000004 <br>
  015F:0047B358&nbsp; TEST&nbsp; &nbsp; Byte Ptr [EAX-04],FF <br>
  015F:0047B35C&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047B36F <br>
  015F:0047B35E&nbsp; TEST&nbsp; &nbsp; Byte Ptr [EAX-03],FF <br>
  015F:0047B362&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047B370 <br>
  015F:0047B364&nbsp; TEST&nbsp; &nbsp; Byte Ptr [EAX-02],FF <br>
  015F:0047B368&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047B371 <br>
  015F:0047B36A&nbsp; DEC&nbsp; &nbsp; EAX <br>
  015F:0047B36B&nbsp; AND&nbsp; &nbsp; AL,FC <br>
  015F:0047B36D&nbsp; JMP&nbsp; &nbsp; 0047B328 <br>
  015F:0047B36F&nbsp; DEC&nbsp; &nbsp; EAX <br>
  015F:0047B370&nbsp; DEC&nbsp; &nbsp; EAX <br>
  015F:0047B371&nbsp; DEC&nbsp; &nbsp; EAX <br>
  015F:0047B372&nbsp; MOV&nbsp; &nbsp; ECX,[ESP+04] <br>
  015F:0047B376&nbsp; DEC&nbsp; &nbsp; EAX <br>
  015F:0047B377&nbsp; SUB&nbsp; &nbsp; EAX,ECX&nbsp; ------->得出Key的长度,确切的说是EAX指向的字符串的长度 
  <br>
  015F:0047B379&nbsp; RET <br>
  <br>
  既然读懂了子程序，再跳回来看它的程序。 <br>
  015F:00413284&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^ <br>
  015F:00413289&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041328A&nbsp; CMP&nbsp; &nbsp; EAX,00000011 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; ^^^^^^^^------->看来是11位的，错应是0X11 <br>
  015F:0041328D&nbsp; JNZ&nbsp; &nbsp; 004132A2----------->不等，KEY就说是非法 <br>
  015F:0041328F&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+00000084] <br>
  <br>
  看来KEY是任意17位，YEAH!!! <br>
  试一试，噢，又是Invalid。 <br>
  <br>
  再看(眼睛好痛啊!!!) <br>
  015F:00413250&nbsp; MOV&nbsp; &nbsp; CL,[EBX] <br>
  015F:00413252&nbsp; MOV&nbsp; &nbsp; [EDI],CL <br>
  015F:00413254&nbsp; INC&nbsp; &nbsp; DWord Ptr [ESP+08] <br>
  015F:00413258&nbsp; INC&nbsp; &nbsp; EDI <br>
  015F:00413259&nbsp; INC&nbsp; &nbsp; ESI <br>
  015F:0041325A&nbsp; INC&nbsp; &nbsp; EBX <br>
  015F:0041325B&nbsp; LEA&nbsp; &nbsp; EAX,[ESP+0C] <br>
  015F:0041325F&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:00413260&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^ <br>
  015F:00413265&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:00413266&nbsp; CMP&nbsp; &nbsp; EAX,ESI <br>
  015F:00413268&nbsp; JA&nbsp; &nbsp; &nbsp; 00413232 <br>
  以上程序是取键入KEY值的奇数位，-----------很容易的，自己去折磨一下，我现在手好累。*_* <br>
  <br>
  015F:0041326A&nbsp; MOV&nbsp; &nbsp; EDX,[ESP+04] <br>
  015F:0041326E&nbsp; LEA&nbsp; &nbsp; EAX,[ESP+70] <br>
  015F:00413272&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+1*EDX+70],00 <br>
  015F:00413277&nbsp; MOV&nbsp; &nbsp; ECX,[ESP+08] <br>
  015F:0041327B&nbsp; MOV&nbsp; &nbsp; Byte Ptr [ESP+1*ECX+00000084],00 <br>
  015F:00413283&nbsp; PUSH&nbsp; &nbsp; EAX <br>
  015F:00413284&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^ <br>
  015F:00413289&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041328A&nbsp; CMP&nbsp; &nbsp; EAX,00000011 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; ^^^^^^^^^^^^---------->因此KEY值是OX11*2=0X22=34(位) <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; 计算真确，加10000分：） <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; 为了好计算我输入1234567891234567891234567891234567（根据个人爱好） <br>
  <br>
  015F:0041328D&nbsp; JNZ&nbsp; &nbsp; 004132A2----------->不等，KEY就非法 <br>
  015F:0041328F&nbsp; LEA&nbsp; &nbsp; EDX,[ESP+00000084] <br>
  015F:00413296&nbsp; PUSH&nbsp; &nbsp; EDX <br>
  015F:00413297&nbsp; CALL&nbsp; &nbsp; 0047B320 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^--------------- 
  <br>
  015F:0041329C&nbsp; POP&nbsp; &nbsp; ECX <br>
  015F:0041329D&nbsp; CMP&nbsp; &nbsp; EAX,00000010 <br>
  015F:004132A0&nbsp; JZ&nbsp; &nbsp; &nbsp; 004132CC <br>
  <br>
  填好后，按确定出现“restar HomeWatcher to apply the changes”，重新启动HomeWatcher，瞧一瞧 <br>
  好象还是不行。没有关系，CRACK的精神就是一追到底，誓不休。说的远一点，可以培养每个人的坚定不移的 <br>
  斗志。即使不作CRACKER，追女孩法则之一也是一追到底喔！：）） <br>
  <br>
  希望有些收获，我可不管这些，反正，我功力可是增加了3点!!!现在经验值是23点^_^ <br>
  <br>
  （待续） <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 完成时间 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2000.2.28 23:08 <br>
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 费时3个小时 
  </span></span></span></blockquote>
<hr>
<p><span class="p9"><span class="p9"><font color=blue>标 题:</font>破解HomeWatcher 
  v1.2 终结版 (17千字)<br>
  <font color=blue>发信人:</font>DDXia<br>
  <font color=blue>时 间:</font>2000-3-7 23:01:27 <br>
  <font color=blue>详细信息:</font><br>
  </span></span></p>
<blockquote> 
  <p><span class="p9"><span class="p9">最先最先得感谢TRW2000的作者朱楠灏和刘涛涛。 <br>
    <br>
    特别感谢：看雪、COOLFLY、八爪鱼、SUN BIRD、JOJO、洋白菜、JACK------给我极 <br>
    &nbsp; &nbsp; &nbsp; 大的精神支持和非常建议。（各家的经典经验，在文中都提到的哦！^_^) <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br>
    破解HomeWatcher v1.2&nbsp; 终结版（转载希望保持完整） <br>
    <br>
    级别：入门级-----前辈们请指点。 <br>
    作者：丁丁虾 又名：DDXia [CCG] <br>
    <br>
    软件名称：HomeWatcher <br>
    整理日期：2000.2.27 <br>
    最新版本：1.2 Beta 9 <br>
    文件大小：968KB <br>
    软件授权：共享软件 <br>
    使用平台：Win95/98/NT <br>
    发布公司：Home Page <br>
    软件简介： <br>
    　　能够定时拍照，能在景物发生变化时将照片保存下来，然后制作成网页，连接到internet，再通过FTP将照片上传 <br>
    http://www.newhua.com/down/hw12.exe <br>
    <br>
    大结局： <br>
    风萧萧兮易水寒，壮士一去。。。。。（夕阳下，荒芜的沙漠，留下一步一行代码的脚印，延伸到远方） <br>
    苦苦追寻三天三夜，不辞劳苦，苦中做乐。YEAH。。。。。 <br>
    <br>
    &nbsp; &nbsp; 此程序很小，但它的注册方式，正趋于流行，就是在填注册码时，有一个判断， <br>
    但不会判断它的对错，然后重新启动过程中，任意的一个地方，再进行判断，所以 <br>
    难就难在找到那个位置。 <br>
    &nbsp; &nbsp; [联想] <br>
    &nbsp; &nbsp; &nbsp; 不过古人很早就说过：不入虎穴焉得虎子。想一想，其实古人很早就有CRACK的思想指导了，只不过由于当时的条件限制，说不定有甲古文写的CRACK教学。 
    <br>
    <br>
    破解工具： <br>
    <br>
    &nbsp; &nbsp; &nbsp; REGMONITOR------注册表监视器 <br>
    &nbsp; &nbsp; &nbsp; TRW2000&nbsp; ------中国人的极品&nbsp; <br>
    &nbsp; &nbsp; &nbsp; W32DASM&nbsp; ------和TRW2000一样等级。 <br>
    &nbsp; &nbsp; [联想] <br>
    &nbsp; &nbsp; &nbsp; 准备进入战斗，变形。。。（卡）REGMONITOR变成我护目镜。唰、唰TRW2000 <br>
    和W32DASM变成我的左臂右膀。YEAH。变形完毕。 <br>
    &nbsp; &nbsp; &nbsp; &nbsp; <br>
    &nbsp; &nbsp; 填写完注册码后，运行REGMONITOR，单击“确定”，哈哈、千里眼报告前方有两 <br>
    碉堡： <br>
    &nbsp; &nbsp; HKCU\Software\HomeWatcher.Com\SecuCam\AltA <br>
    &nbsp; &nbsp; HKCU\Software\HomeWatcher.Com\SecuCam\DetA <br>
    <br>
    &nbsp; &nbsp; 这两个键值分别储存注册码的奇数位和偶数位，同时也加密了。 <br>
    &nbsp; &nbsp; 想一想，如果它要判断注册码是否正确，一定会再次读出来进行判断，这是必然的，如何拦截呢？？？ <br>
    &nbsp; &nbsp; TRW2000动态拦截读注册表BPX RegqueryValueEXA ,这个主意不错。唰、弹出TRW2000，pmodule 
    就到读DetA的地方。 <br>
    <br>
    为了便于理解，以下代码从W32DASM反编译中截取： <br>
    * Referenced by a (U)nconditional or (C)onditional Jump at Address: <br>
    |:00405542(C) <br>
    | <br>
    :0040554E 8D95B4FEFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebp+FFFFFEB4] <br>
    :00405554 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :00405555 8D8B0E120000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+0000120E] <br>
    :0040555B 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :0040555C 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :0040555E 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"DetA" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :00405560 682BDE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE2B---------》存放字符串的指向 <br>
    <br>
    :00405565 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :0040556B 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :0040556C E8436A0900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4---------》读注册表 <br>
    <br>
    :00405571 8D5588&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    lea edx, dword ptr [ebp-78] <br>
    :00405574 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :00405575 8D8BB8030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+000003B8] <br>
    :0040557B 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :0040557C 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :0040557E 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"Host" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :00405580 6830DE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE30 <br>
    :00405585 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :0040558B 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :0040558C E8236A0900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4 <br>
    :00405591 8D5584&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    lea edx, dword ptr [ebp-7C] <br>
    :00405594 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :00405595 8D8B80040000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+00000480] <br>
    :0040559B 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :0040559C 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :0040559E 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"Port" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055A0 6835DE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE35 <br>
    :004055A5 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :004055AB 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055AC E8036A0900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4 <br>
    :004055B1 8D5580&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    lea edx, dword ptr [ebp-80] <br>
    :004055B4 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :004055B5 8D8B8A040000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+0000048A] <br>
    :004055BB 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :004055BC 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :004055BE 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"User" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055C0 683ADE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE3A <br>
    :004055C5 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :004055CB 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055CC E8E3690900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4 <br>
    :004055D1 8D957CFFFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebp+FFFFFF7C] <br>
    :004055D7 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :004055D8 8D8BDA040000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+000004DA] <br>
    :004055DE 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :004055DF 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :004055E1 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"Password" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055E3 683FDE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE3F <br>
    :004055E8 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :004055EE 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :004055EF E8C0690900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4 <br>
    :004055F4 8D9578FFFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebp+FFFFFF78] <br>
    :004055FA 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :004055FB 8D8B2A050000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+0000052A] <br>
    :00405601 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :00405602 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :00405604 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    * Possible StringData Ref from Data Obj ->"Pasv" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :00405606 6848DE4900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049DE48 <br>
    :0040560B 8B83941D0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebx+00001D94] <br>
    :00405611 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    <br>
    * Reference To: ADVAPI32.RegQueryValueExA, Ord:0000h <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :00405612 E89D690900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Call 
    0049BFB4 <br>
    :00405617 8D9574FFFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebp+FFFFFF74] <br>
    :0040561D 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :0040561E 8D8B34050000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+00000534] <br>
    :00405624 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :00405625 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    :00405627 6A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000000 <br>
    <br>
    读出后，并不立刻进行比较及判断，只是存在堆栈中。而且还不停的读注册表（REGMONITOR在它启动的时候，可以看到）。这样做的好处就是你对它还不死心。 
    <br>
    一直按F10（本人有一点酱，所以不服它） <br>
    看到两段比较有趣的代码： <br>
    [第一段]重新组装带代码，我倒，它也会变形 <br>
    :00407ED6 8B93B0030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov edx, dword 
    ptr [ebx+000003B0] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 存放"AltA" key的指向 <br>
    <br>
    :00407EDC 8B85F4FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebp+FFFFFCF4] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
    存放重新组装的地址 <br>
    :00407EE2 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; inc edi <br>
    :00407EE3 47&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; inc edi <br>
    :00407EE4 8A4C32FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    mov cl, byte ptr [edx+esi-01] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 第一次 ESI=01 取"AltA"的第一位 <br>
    <br>
    :00407EE8 8808&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov byte ptr [eax], cl <br>
    :00407EEA FF85F4FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc dword 
    ptr [ebp+FFFFFCF4] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
    存放重新组装的地址下一位 <br>
    <br>
    :00407EF0 8B93B4030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov edx, dword 
    ptr [ebx+000003B4] <br>
    :00407EF6 8B85F4FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebp+FFFFFCF4] <br>
    :00407EFC 8A4C32FF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    mov cl, byte ptr [edx+esi-01] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 第一次 ESI=01 取"DetA"的第一位 <br>
    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
    <br>
    :00407F00 8808&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov byte ptr [eax], cl <br>
    :00407F02 FF85F4FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; inc dword 
    ptr [ebp+FFFFFCF4] <br>
    :00407F08 46&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; inc esi <br>
    <br>
    * Referenced by a (U)nconditional or (C)onditional Jump at Address: <br>
    |:00407ED4(U) <br>
    | <br>
    :00407F09 8B93B0030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov edx, dword 
    ptr [ebx+000003B0] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 存放"AltA" key的指向 <br>
    &nbsp; <br>
    :00407F0F 4A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; dec edx <br>
    :00407F10 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :00407F11 E80A340700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B320----->取字符串长度 <br>
    :00407F16 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop ecx <br>
    :00407F17 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    :00407F18 8B8BB4030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov ecx, dword 
    ptr [ebx+000003B4] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 
    <br>
    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
    存放"DetA" key的指向 <br>
    <br>
    :00407F1E 49&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; dec ecx <br>
    :00407F1F 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :00407F20 E8FB330700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B320 <br>
    :00407F25 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop ecx <br>
    :00407F26 5A&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop edx <br>
    :00407F27 03D0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; add edx, eax <br>
    :00407F29 3BD6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; cmp edx, esi <br>
    :00407F2B 77A9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; ja 00407ED6 <br>
    :00407F2D C6843DDCF9FFFF00&nbsp; &nbsp; &nbsp; &nbsp; mov byte ptr [ebp+edi-00000624], 
    00 <br>
    <br>
    <br>
    <br>
    [第二段]对照密码表转换。（具体的ESI、EDI的值实在是记不起来了，EVERYBODY <br>
    都可以DOWNLOAD它进行实习，我写的和破的软件都很新，终究一句话：修炼在个人 <br>
    <br>
    <br>
    015F:0047F0C8&nbsp; PUSH&nbsp; &nbsp; EBP <br>
    015F:0047F0C9&nbsp; MOV&nbsp; &nbsp; EBP,ESP <br>
    015F:0047F0CB&nbsp; PUSH&nbsp; &nbsp; EBX <br>
    015F:0047F0CC&nbsp; PUSH&nbsp; &nbsp; ESI <br>
    015F:0047F0CD&nbsp; PUSH&nbsp; &nbsp; EDI <br>
    015F:0047F0CE&nbsp; XOR&nbsp; &nbsp; EDI,EDI <br>
    015F:0047F0D0&nbsp; MOV&nbsp; &nbsp; ESI,[EBP+08] <br>
    015F:0047F0D3&nbsp; MOV&nbsp; &nbsp; BL,[ESI] <br>
    015F:0047F0D5&nbsp; INC&nbsp; &nbsp; ESI <br>
    015F:0047F0D6&nbsp; MOVSX&nbsp; EAX,BL <br>
    015F:0047F0D9&nbsp; PUSH&nbsp; &nbsp; EAX <br>
    015F:0047F0DA&nbsp; CALL&nbsp; &nbsp; 00480DAC------》进行转换（CALL的代码接着就是） <br>
    015F:0047F0DF&nbsp; POP&nbsp; &nbsp; ECX <br>
    015F:0047F0E0&nbsp; TEST&nbsp; &nbsp; EAX,EAX <br>
    015F:0047F0E2&nbsp; JNZ&nbsp; &nbsp; 0047F0D3 <br>
    015F:0047F0E4&nbsp; CMP&nbsp; &nbsp; BL,2B---------》为什么是比较2B、2D？？ <br>
    015F:0047F0E7&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047F0EE <br>
    015F:0047F0E9&nbsp; CMP&nbsp; &nbsp; BL,2D---------》是因为转换后的值都是小于等于30 <br>
    015F:0047F0EC&nbsp; JNZ&nbsp; &nbsp; 0047F0FC <br>
    015F:0047F0EE&nbsp; CMP&nbsp; &nbsp; BL,2D---------》至少我的是 <br>
    015F:0047F0F1&nbsp; SETZ&nbsp; &nbsp; AL <br>
    015F:0047F0F4&nbsp; AND&nbsp; &nbsp; EAX,00000001 <br>
    015F:0047F0F7&nbsp; MOV&nbsp; &nbsp; BL,[ESI] <br>
    015F:0047F0F9&nbsp; INC&nbsp; &nbsp; ESI <br>
    015F:0047F0FA&nbsp; JMP&nbsp; &nbsp; 0047F114 <br>
    015F:0047F0FC&nbsp; XOR&nbsp; &nbsp; EAX,EAX <br>
    015F:0047F0FE&nbsp; JMP&nbsp; &nbsp; 0047F114 <br>
    015F:0047F100&nbsp; MOVSX&nbsp; ECX,BL <br>
    015F:0047F103&nbsp; MOV&nbsp; &nbsp; EDX,EDI <br>
    015F:0047F105&nbsp; MOV&nbsp; &nbsp; BL,[ESI] <br>
    015F:0047F107&nbsp; ADD&nbsp; &nbsp; EDX,EDX <br>
    015F:0047F109&nbsp; LEA&nbsp; &nbsp; EDX,[EDX+4*EDX] <br>
    015F:0047F10C&nbsp; ADD&nbsp; &nbsp; EDX,ECX <br>
    015F:0047F10E&nbsp; ADD&nbsp; &nbsp; EDX,FFFFFFD0 <br>
    015F:0047F111&nbsp; INC&nbsp; &nbsp; ESI <br>
    015F:0047F112&nbsp; MOV&nbsp; &nbsp; EDI,EDX <br>
    015F:0047F114&nbsp; CMP&nbsp; &nbsp; BL,30 <br>
    015F:0047F117&nbsp; JL&nbsp; &nbsp; &nbsp; 0047F11E <br>
    015F:0047F119&nbsp; CMP&nbsp; &nbsp; BL,39 <br>
    015F:0047F11C&nbsp; JLE&nbsp; &nbsp; 0047F100 <br>
    015F:0047F11E&nbsp; TEST&nbsp; &nbsp; EAX,EAX <br>
    015F:0047F120&nbsp; JZ&nbsp; &nbsp; &nbsp; 0047F128 <br>
    015F:0047F122&nbsp; MOV&nbsp; &nbsp; EAX,EDI <br>
    015F:0047F124&nbsp; NEG&nbsp; &nbsp; EAX <br>
    015F:0047F126&nbsp; JMP&nbsp; &nbsp; 0047F12A <br>
    015F:0047F128&nbsp; MOV&nbsp; &nbsp; EAX,EDI <br>
    015F:0047F12A&nbsp; POP&nbsp; &nbsp; EDI <br>
    015F:0047F12B&nbsp; POP&nbsp; &nbsp; ESI <br>
    015F:0047F12C&nbsp; POP&nbsp; &nbsp; EBX <br>
    015F:0047F12D&nbsp; POP&nbsp; &nbsp; EBP <br>
    015F:0047F12E&nbsp; RET&nbsp; &nbsp; <br>
    <br>
    CALL&nbsp; &nbsp; 00480DAC的代码： <br>
    15F:00480DAC&nbsp; PUSH&nbsp; &nbsp; EBP <br>
    015F:00480DAD&nbsp; MOV&nbsp; &nbsp; EBP,ESP <br>
    015F:00480DAF&nbsp; MOV&nbsp; &nbsp; EAX,[EBP+08] <br>
    015F:00480DB2&nbsp; CMP&nbsp; &nbsp; EAX,000000FF <br>
    015F:00480DB7&nbsp; JNA&nbsp; &nbsp; 00480DBD <br>
    015F:00480DB9&nbsp; XOR&nbsp; &nbsp; EAX,EAX <br>
    015F:00480DBB&nbsp; POP&nbsp; &nbsp; EBP <br>
    015F:00480DBC&nbsp; RET&nbsp; &nbsp; <br>
    015F:00480DAB&nbsp; RET&nbsp; &nbsp; <br>
    015F:00480DAC&nbsp; PUSH&nbsp; &nbsp; EBP <br>
    015F:00480DAD&nbsp; MOV&nbsp; &nbsp; EBP,ESP <br>
    015F:00480DAF&nbsp; MOV&nbsp; &nbsp; EAX,[EBP+08] <br>
    015F:00480DB2&nbsp; CMP&nbsp; &nbsp; EAX,000000FF <br>
    015F:00480DB7&nbsp; JNA&nbsp; &nbsp; 00480DBD <br>
    015F:00480DB9&nbsp; XOR&nbsp; &nbsp; EAX,EAX <br>
    015F:00480DBB&nbsp; POP&nbsp; &nbsp; EBP <br>
    015F:00480DBC&nbsp; RET&nbsp; &nbsp; <br>
    015F:00480DBD&nbsp; MOVZX&nbsp; EDX,Word Ptr [004A883A+2*EAX] <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^^^^^^^^^^^^ <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; 这里就代码转换入口 <br>
    015F:00480DC5&nbsp; AND&nbsp; &nbsp; EDX,00000008 <br>
    015F:00480DC8&nbsp; MOV&nbsp; &nbsp; EAX,EDX <br>
    015F:00480DCA&nbsp; POP&nbsp; &nbsp; EBP <br>
    015F:00480DCB&nbsp; RET&nbsp; &nbsp; <br>
    <br>
    接着就被程序的CALL----RET-----CALL-----RET----JMP----CALL----RET 弄得迷迷糊糊了两天两夜，工作有点烦。 
    <br>
    <br>
    与此同时，开始和文章开头的各位大虾（看雪、COOLFLY、八爪鱼、SUN BIRD、JOJO、洋白菜、JACK）“大呼小叫”，无论谁都回应，提出好的建议和鼓励。一人有难， 
    <br>
    各路武林门派纷纷----几道寒光&nbsp; 刀出鞘 <br>
    <br>
    看雪兄：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 试用W32DASM静态分析 <br>
    COOLFLY兄：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 拦截后，用F12进行消短（SOFT ICE） 
    <br>
    八爪鱼兄：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 工作忙得浇头滥额，还答应帮俺看。 <br>
    SUN BIRD、JOJO兄：&nbsp; &nbsp; 同一武林门派，那还分谁和谁啊！ <br>
    洋白菜兄：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 多看一些外国的破文，更易提高功力级别。比如菠萝密经 <br>
    JACK兄：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 精神鼓励更重要----斗志比剑气更重要 
    </span></span></p>
  <blockquote><span class="p9"><span class="p9">于是采用[动、静结合，大处入手] <br>
    <br>
    用W32DASM反编译后，再全部过一遍程序，从读取AltA和DetA值后，往后看是否有可 <br>
    疑的地方。 <br>
    找阿找&nbsp; 找阿找&nbsp; 找阿找。。。。。。 <br>
    "Start of program"----程序开始，一定会有比较的： <br>
    <br>
    * Possible StringData Ref from Data Obj ->"Start of program" <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | <br>
    :00407FF4 6864E54900&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; push 
    0049E564 <br>
    :00407FF9 53&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ebx <br>
    :00407FFA E8D1A7FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    004027D0 <br>
    :00407FFF 83C408&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esp, 00000008 <br>
    :00408002 6A05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000005 <br>
    :00408004 8D8DEAF9FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebp+FFFFF9EA] <br>
    :0040800A 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :0040800B 8D83B5160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea eax, dword 
    ptr [ebx+000016B5] <br>
    :00408011 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    :00408012 E85D350700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B574 <br>
    :00408017 83C40C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esp, 0000000C <br>
    :0040801A C683BA16000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov byte ptr [ebx+000016BA], 
    00 <br>
    :00408021 6A06&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000006 <br>
    :00408023 8D95EFF9FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebp+FFFFF9EF] <br>
    :00408029 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :0040802A 8D8BBB160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebx+000016BB] <br>
    :00408030 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :00408031 E83E350700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B574 <br>
    :00408036 83C40C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esp, 0000000C <br>
    :00408039 C683C116000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov byte ptr [ebx+000016C1], 
    00 <br>
    :00408040 B101&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov cl, 01 <br>
    :00408042 B201&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov dl, 01 <br>
    :00408044 A12C5C4A00&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, 
    dword ptr [004A5C2C] <br>
    :00408049 E8BE760100&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0041F70C <br>
    :0040804E 8983001F0000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov dword 
    ptr [ebx+00001F00], eax <br>
    :00408054 6A05&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000005 <br>
    :00408056 8D85F5F9FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea eax, dword 
    ptr [ebp+FFFFF9F5] <br>
    :0040805C 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    :0040805D 8D93C2160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebx+000016C2] <br>
    :00408063 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :00408064 E80B350700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B574 <br>
    :00408069 83C40C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esp, 0000000C <br>
    :0040806C C683C716000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov byte ptr [ebx+000016C7], 
    00 <br>
    :00408073 6A03&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; push 00000003 <br>
    :00408075 8D8DFAF9FFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea ecx, dword 
    ptr [ebp+FFFFF9FA] <br>
    :0040807B 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :0040807C 8D83C8160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea eax, dword 
    ptr [ebx+000016C8] <br>
    :00408082 50&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push eax <br>
    :00408083 E8EC340700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047B574 <br>
    :00408088 C683CB16000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov byte ptr [ebx+000016CB], 
    00 <br>
    :0040808F 83C40C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esp, 0000000C <br>
    :00408092 8D93A6160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea edx, dword 
    ptr [ebx+000016A6] <br>
    :00408098 8995FCFCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov dword 
    ptr [ebp+FFFFFCFC], edx <br>
    :0040809E 8B8DFCFCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov ecx, dword 
    ptr [ebp+FFFFFCFC] <br>
    :004080A4 51&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push ecx <br>
    :004080A5 E81E700700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047F0C8 <br>
    :004080AA 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop ecx <br>
    :004080AB 8BF0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov esi, eax <br>
    :004080AD 8D83B5160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea eax, dword 
    ptr [ebx+000016B5] <br>
    :004080B3 8985F8FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov dword 
    ptr [ebp+FFFFFCF8], eax <br>
    :004080B9 8B95F8FCFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov edx, dword 
    ptr [ebp+FFFFFCF8] <br>
    :004080BF 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :004080C0 E803700700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047F0C8 <br>
    :004080C5 0FAFF0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    imul esi, eax <br>
    :004080C8 8BC6&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov eax, esi <br>
    :004080CA 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop ecx <br>
    :004080CB 99&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; cdq <br>
    :004080CC B968030000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov ecx, 
    00000368 <br>
    :004080D1 F7F9&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; idiv ecx <br>
    :004080D3 899500FDFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov dword 
    ptr [ebp+FFFFFD00], edx <br>
    :004080D9 8B8500FDFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov eax, dword 
    ptr [ebp+FFFFFD00] <br>
    :004080DF 99&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; cdq <br>
    :004080E0 33C2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; xor eax, edx <br>
    :004080E2 2BC2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; sub eax, edx <br>
    :004080E4 8BF0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; mov esi, eax <br>
    :004080E6 8D83C8160000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; lea eax, dword 
    ptr [ebx+000016C8] <br>
    :004080EC 898504FDFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov dword 
    ptr [ebp+FFFFFD04], eax <br>
    :004080F2 83C613&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    add esi, 00000013 <br>
    :004080F5 8B9504FDFFFF&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mov edx, dword 
    ptr [ebp+FFFFFD04] <br>
    :004080FB 52&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; push edx <br>
    :004080FC E8C76F0700&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; call 
    0047F0C8 <br>
    :00408101 59&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; pop ecx <br>
    :00408102 3BF0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; cmp esi, eax <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^^ <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 非常非常非常的可疑&nbsp; &nbsp;&nbsp; <br>
    &nbsp; <br>
    :00408104 750C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; jne 00408112 <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ^^^^^^^^^^^^^ <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 用TRW2000改为jn如何，希望没有见意。 <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; YEAH。。。YEAH。。。。。激动跳起来（老兄别人还在睡觉） 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 不管了，先来一段DISK何如？？武曲呢？谁的眼泪在飞。 
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 导演兼主角：丁丁虾 
    （现实中没有办法实现，但我们可以有梦嘛^_^)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    <br>
    <br>
    :00408106 C783E41D000001000000&nbsp; &nbsp; mov dword ptr [ebx+00001DE4], 
    00000001 <br>
    :00408110 EB08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; jmp 0040811A <br>
    <br>
    好想睡觉！啊！！！床&nbsp; 床在哪里？？？？？ <br>
    决定要好好休息一个星期再破再写了。3月17、18日再见吧！！！！ <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br>
    &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 感谢那些鼓励我的人！！！ <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 衷心希望每个人都有一个好梦&nbsp; 
    ！！：））） <br>
    <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 完成时间 <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; 2000.3.7 22:37 <br>
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; &nbsp; &nbsp; &nbsp; 费时3天3夜 </span></span></blockquote>
  <hr>
  <p><span class="p9"><font color=blue>标 题:</font>似乎只用改一个字节 (872字)<br>
    <font color=blue>发信人:</font>冰毒<br>
    <font color=blue>时 间:</font>2000-3-5 7:50:50 <br>
    <font color=blue>详细信息:</font><br>
    </span></p>
  <blockquote><span class="p9"> 我用的版本为HomeWatcher 1.2 beta 9 <br>
    <br>
    若[ebx+00001DE4]=1且[ebx+00001DE8]=1, 程序就是Full Version. <br>
    只须改动一个字节 <br>
    :00408102 3BF0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; cmp esi, eax <br>
    :00408104 750C&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; jne 00408112 &lt;- 改jne为je <br>
    :00408106 C783E41D000001000000&nbsp; &nbsp; mov dword ptr [ebx+00001DE4], 
    00000001 <br>
    :00408110 EB08&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; jmp 0040811A <br>
    此后,程序会找HomeWatcher.lic文件. 而无论是否找到,当[ebx+00001DE4]=1且[ebx+00001DE8]=1时则为Full; 
    仅[ebx+00001DE8]=1为Lite+; 否则为Lite. 而事实上我们根本不用.lic文件,因为程序总会走到 <br>
    :004081E5 83BBE41D000000&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cmp dword ptr [ebx+00001DE4], 
    00000000 <br>
    :004081EC 7424&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; je 00408212 &lt;- 因这里不会跳走,所以... <br>
    :004081EE C783E81D000001000000&nbsp; &nbsp; mov dword ptr [ebx+00001DE8], 
    00000001 <br>
    :004081F8 33D2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 
    &nbsp; xor edx, edx <br>
    不过我没法试程序是否真的100%破解了,只有试了才可肯定可以不用.lic文件. </span></blockquote>
  <hr>
</blockquote>
</body>
</html>
