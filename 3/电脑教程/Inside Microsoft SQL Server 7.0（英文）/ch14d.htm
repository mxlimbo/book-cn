<HTML>
<HEAD>
<link rel="STYLESHEET" type="text/css" href="squeal7.css">
<TITLE>Planning for Peak Usage</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch14c.htm">[Previous]</A> <A HREF="ch14e.htm">[Next]</A><P>

<A NAME="532"><H1>Planning for Peak Usage</H1></A>
<P>People often ask questions like, &quot;Can SQL Server handle our system? We do 
a million transactions a day.&quot; To answer this question, you have to know 
exactly what transactions they have in mind. You also need to know the system's 
peak usage. If a million transactions a day are nicely spread out over 24 hours, 
that's less than 12 transactions per second. In general, a 12-TPS 
(transactions-per-second) system would be adequate. But if 90 percent of the million 
transactions come between 2 p.m. and 3 p.m., it's a very different situation. You'll have 
rates of about 275 TPS during that hour and probably peaks of more than 350 
TPS. You can use benchmarks, such as Debit-Credit, in which SQL Server 
performs over 1500 TPS, but all transactions are different. It is meaningless to refer 
to transactions per second in SQL Server or any other system without also 
talking about the types of transactions. This is precisely the reason that 
standardized tests are available from the Transaction Processing Council for 
comparing database performance.
</P>

<P>Regardless of the specific transactions, though, you must design and 
build your system to handle peak usage. In the case above, the important 
consideration is peak usage, which determines whether you should target your 
system to a volume of 350 TPS for unevenly distributed usage or to only 12 TPS 
with usage spread out evenly. (Most systems experience peaks, and daily usage is 
not so nicely spread out.)
</P>

</BODY>
</HTML>



