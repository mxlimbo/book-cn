<HTML>
<HEAD>
<TITLE>Lesson 3: Understanding Active Directory Concepts</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmpro.css"><SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch09e.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>



<A NAME="332"><H1>Lesson 3: Understanding Active Directory Concepts</H1></A>

<p>Several new concepts are introduced with Active Directory directory services. You should understand their meaning as applied to Active Directory directory services.</p>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li>Explain concepts associated with Active Directory directory services.</li></p>
</ul>



<p><b>Estimated lesson time: 15 minutes</b></p>
</blockquote></div></p>

<A NAME="333"><H2>Schema</H2></A>

<p>The <i>schema</i> contains a formal definition of the contents and structure of Active Directory directory services, including all attributes, classes, and class properties, as shown in Figure 9.4. For each object class, the schema defines which 
attributes an instance of the class must have, which additional attributes it can have, and which object class can be a parent of the current object class.</p>

<p>
<A HREF="javascript:fullSize('F09tk04x.htm')"> <img src="images/F09tk04.JPG" width=404 height=295 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.4</b> <i>The schema defines the contents and structure of Active Directory directory services</i><!-- /caption -->
</p>

<p>Installing Active Directory directory services on the first computer in a network creates the domain and the schema. The default schema contains definitions of commonly used objects and properties (such as user accounts, computers, printers, groups, and so on). The default schema also contains definitions of objects and properties that Active Directory directory services use internally to function.</p>

<p>The Active Directory schema is extensible, which means that you can define new directory object types and attributes and new attributes for existing objects. You can extend the schema by using the Active Directory Schema snap-in or the 
Active Directory Services Interface (ADSI).</p>

<p>The schema is implemented and stored within Active Directory directory services itself (in the global catalog), and it can be updated dynamically. As a result, an application can extend the schema with new attributes and classes and then can use the extensions immediately.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Write access to the schema is limited to members of the Administrators group, by default.</blockquote></div></p>

<A NAME="334"><H2>Global Catalog</H2></A>

<p>The <i>global catalog</i> is the central repository of information about objects in a tree or forest, as shown in Figure 9.5. Active Directory directory services automatically generate the contents of the global catalog from the domains that make up the Directory through the normal replication process.</p>

<p>
<A HREF="javascript:fullSize('F09tk05x.htm')"> <img src="images/F09tk05.JPG" width=404 height=251 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.5</b> <i>The global catalog</i><!-- /caption -->
</p>

<p>The global catalog is a service and a physical storage location that contains a replica of selected attributes for every object in Active Directory directory services. By default, the attributes stored in the global catalog are those most frequently used in search operations (such as a user's first and last names, logon name, and so forth), and those necessary to locate a full replica of the object. As a result, you can use the global catalog to locate objects anywhere in the network without replication of all domain information between domain controllers.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>You use the Active Directory Schema snap-in to define which attributes are included in the global catalog replication process.</blockquote></div></p>

<p>When you install Active Directory directory services on the first domain controller in a new forest, that domain controller is, by default, a global catalog server. A <i>global catalog server</i> is a domain controller that stores a copy of the global catalog. The configuration of the initial global catalog server should have the 
capacity to support several hundred thousand to one million objects, with the 
potential for growth beyond those numbers.</p>

<p>You can designate additional domain controllers as global catalog servers by 
using the Active Directory Sites and Services snap-in. When considering which domain controllers to designate as global catalog servers, base your decision 
on the ability of your network structure to handle replication and query traffic. The more global catalog servers that you have, the greater the replication traffic. However, the availability of additional servers can provide quicker responses to user inquiries. Microsoft recommends that every major site in your enterprise have a global catalog server.</p>

<A NAME="335"><H2>Namespace</H2></A>

<p>Active Directory directory services, like all directory services, primarily comprise a namespace. A <i>namespace</i> is any bounded area in which a name can be resolved. <i>Name resolution</i> is the process of translating a name into some object or information that the name represents. The Active Directory namespace is based on the DNS naming scheme, which allows for interoperability with Internet technologies. An example namespace is shown in Figure 9.6.</p>

<p>
<A HREF="javascript:fullSize('F09tk06x.htm')"> <img src="images/F09tk06.JPG" width=404 height=219 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.6</b> <i>Namespace diagram</i><!-- /caption -->
</p>

<p>Using a common namespace allows you to unify and manage multiple hardware and software environments in your network. There are two types of namespaces:</p>

<ul>
<p><li><b>Contiguous namespace.</b> The name of the child object in an object hierarchy always contains the name of the parent domain. A tree is a contiguous namespace.</li></p>

<p><li><b>Disjointed namespace.</b> The names of a parent object and of a child of the same parent object are not directly related to one another. A forest is a disjointed namespace.</li></p>
</ul>



<A NAME="336"><H2>Naming Conventions</H2></A>

<p>Every object in Active Directory directory services is identified by a name. 
Active Directory directory services use a variety of naming conventions: distinguished names, relative distinguished names, globally unique identifiers, and user principal names.</p>

<A NAME="337"><H3>Distinguished Name</H3></A>

<p>Every object in Active Directory directory services has a <i>distinguished name (DN),</i> which uniquely identifies an object and contains sufficient information for a client to retrieve the object from the Directory. The DN includes the name of the domain that holds the object, as well as the complete path through the container hierarchy to the object.</p>

<p>For example, the following DN identifies the Firstname Lastname user object in the microsoft.com domain (where <i>Firstname</i> and <i>Lastname</i> represent the actual first and last names of a user account):</p>

<p>/DC=COM/DC=microsoft/OU=dev/CN=Users/CN=Firstname Lastname</p>

<p>Table 9.2 describes the attributes in the example.</p>

<p><b>Table 9.2</b> <i>Distinguished Name Attributes</i></p>

<p><table cellpadding=5 width="95%"><tr>
<th>Attribute</th><th>Description</th>
</tr><tr>
<td valign="top">DC</td> <td valign="top">DomainComponentName</td>
</tr><tr>
<td valign="top">OU</td> <td valign="top">OrganizationalUnitName</td>
</tr><tr>
<td valign="top">CN</td> <td valign="top">CommonName</td>
</tr></table></p>

<p>DNs must be unique. Active Directory directory services do not allow dupli- 
cate DNs.</p>

<A NAME="338"><H3>Relative Distinguished Name</H3></A>

<p>Active Directory directory services support querying by attributes, so you can locate an object even if the exact DN is unknown or has changed. The <i>relative distinguished name (RDN)</i> of an object is the part of the name that is an attribute of the object itself. In the preceding example, the RDN of the Firstname Lastname user object is <i>Firstname Lastname.</i> The RDN of the parent object is <i>Users</i>.</p>

<p>You can have duplicate RDNs for Active Directory objects, but you can't have two objects with the same RDN in the same OU. For example, if a user account is named Jane Doe, you can't have another user account called Jane Doe in the same OU. However, objects with duplicate RDN names can exist in separate OUs because they have different DNs (see Figure 9.7).</p>

<p>
<A HREF="javascript:fullSize('F09tk07x.htm')"> <img src="images/F09tk07.JPG" width=404 height=290 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.7</b> <i>Distinguished names and relative distinguished names</i><!-- /caption -->
</p>

<A NAME="339"><H3>Globally Unique Identifier</H3></A>

<p>A <i>globally unique identifier (GUID)</i> is a 128-bit number that is guaranteed to be unique. GUIDs are assigned to objects when the objects are created. The GUID never changes, even if you move or rename the object. Applications can store 
the GUID of an object and use the GUID to retrieve that object regardless of its current DN.</p>

<A NAME="340"><H3>User Principal Name</H3></A>

<p>User accounts have a &quot;friendly&quot; name, the <i>user principal name (UPN)</i>. The 
UPN is composed of a shorthand name for the user account and the DNS 
name of the tree where the user account object resides. For example, user <i>Firstname Lastname</i> (substitute the first and last names of an actual user) in 
the microsoft.com tree might have a UPN of FirstnameL@microsoft.com 
(using the full first name and the first letter of the last name).</p>

<A NAME="341"><H2>Lesson Summary</H2></A>

<p>In this lesson, you learned that the schema contains a formal definition of the contents and structure of Active Directory directory services, including all 
attributes, classes, and class properties. For each object class, the schema 
defines which attributes an instance of the class must have, which additional 
attributes it can have, and which object class can be a parent of the current object class. Installing Active Directory directory services on the first domain controller in a network creates a default schema. The Active Directory schema is extensible.</p>

<p>You also learned that the global catalog is a service and a physical storage 
location that contains a replica of selected attributes for every object in Active 
Directory directory services. Active Directory directory services automatically generate the contents of the global catalog from the domains that make up the Directory through the normal replication process. By default, the attributes stored in the global catalog are those most frequently used in search operations (such as a user's first and last names, logon name, and so forth) and those necessary to locate a full replica of the object. As a result, you can use the global catalog to locate objects anywhere in the network without replication of all domain information between domain controllers.</p>

<p>Finally, you learned about contiguous namespaces and disjointed namespaces. 
In a contiguous namespace, the name of the child object in an object hierarchy always contains the name of the parent domain. A tree is an example of a contiguous namespace. In a disjointed namespace, the names of a parent object and of a child of the same parent object aren't directly related to one another. A forest is an example of a disjointed namespace.</p>

</BODY>
</HTML>






