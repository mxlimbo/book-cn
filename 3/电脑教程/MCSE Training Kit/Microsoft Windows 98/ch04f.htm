<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>WDM Architecture</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>

<A NAME="185"><H2>WDM Architecture</H2></A><P>
Cross platform compatibility results from WDM's layered architecture. Each layer, or class, isolates portions of the services required of a device driver and allows hardware vendors to contain all of the hardware-specific functionality in a single file. Microsoft engineers write the class drivers, and device manufacturers write the minidrivers. Figure 4.1 illustrates the WDM layered architecture.
<P>
<A HREF="javascript:fullSize('F04XX01x.htm')"> <img src="F04XX01.JPG" width=360 height=266 border=0 ALT = "Click to view at full size."> </A>
<P>
<CAPTION><B>Figure 4.1</B> <I>Layers to the Win32 Driver Model</I></CAPTION>
<P>
<A NAME="186"><H3>Legacy Virtualization Drivers</H3></A><P>
Virtualization drivers (VxDs) allow legacy software to use WDM devices. Virtualization drivers do not directly control hardware; instead, they act as go-betweens so that legacy software and hardware can work correctly under the new architecture.
<P>
An example of a virtualization driver is Joyhid.vxd, which is a virtual joystick driver for MS-DOS games that run under Windows&#160;98. An MS-DOS game can use Joyhid.vxd to work with a USB-based joystick.
<P>
<A NAME="187"><H3>Device Class Drivers</H3></A><P>
Device class drivers provide interfaces between different layers of the WDM architecture. The lower layer of a device class driver communicates with the class-specific interface exposed by a device minidriver (see Figure 4.1). The upper edge of the device class driver is specific to the operating system. An example of a class driver is Hidclass.sys, a generic class driver for input devices such as joysticks, mouse devices, and keyboards.
<P>
Class drivers have the following attributes:
<P>
<UL>
<LI>They contain class-specific functions, such as enumeration, that are not specific to hardware or buses.
<P>
<LI>They are dynamically loaded and unloaded.
<P>
<LI>They expose a single class-specific interface to multiple-client layers.
</UL>
<P>
<A NAME="188"><H3>Device and Bus Class Minidrivers</H3></A><P>
Minidrivers are already implemented in Microsoft Windows&#160;95 in the classes of SCSI and network adapters. Windows&#160;98 has widened the concept of minidrivers to include support for Universal Serial Bus (USB), Digital Audio, DVD players, still imaging, video capture, and IEEE 1394. Minidrivers have the following attributes:
<P>
<UL>
<LI>They indirectly control hardware through a specific bus class driver.
<P>
<LI>They are source- and binary-compatible across the Microsoft Windows platforms, which allows the minidriver to be used in Windows&#160;NT as well as Windows&#160;98.
<P>
<LI>They are dynamically loaded and unloaded.
<P>
<LI>They contain only hardware-specific functionality.
<P>
<LI>They can expose multiple class interfaces. This functionality is very important in respect to multifunction (or composite) cards such as devices that provide audio and video.
</UL>
<P>
An example of a minidriver is Hidusb.sys. This is the minidriver Human Interface Device (HID) class device designed for the USB.
<P>
<A NAME="189"><H3>Bus Class Drivers</H3></A><P>
Bus class drivers perform the same function as device class drivers, but facilitate the communication between the hardware layer and bus minidrivers. Under Windows&#160;98, WDM supports bus class drivers for the USB and the IEEE 1394 bus. An example of a bus class driver for the USB is Usbd.sys.
<P>
<A NAME="190"><H3>Operating System Services (Ntkern.vxd)</H3></A><P>
The operating system services layer is always specific to the operating system. It is this layer that abstracts all of the operating system specific functionality from the minidriver layers beneath it. It handles the communications between the operating system specific class driver and the platform independent minidriver.
<P>
An example of an operating system driver is Ntkern.vxd, which allows the implementation of WDM in Windows&#160;98. Ntkern.vxd makes the Windows&#160;98 architecture appear to the minidriver as if Windows&#160;98 were the Windows&#160;NT architecture. This abstraction is what allows hardware manufacturers to develop one driver for both operating systems. This is analogous to the Hardware Abstraction Layer (HAL) component of the Windows&#160;NT operating system.
<P>
</BODY>
</HTML>





