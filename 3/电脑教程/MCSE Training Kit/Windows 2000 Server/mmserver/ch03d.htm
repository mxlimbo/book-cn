<HTML>
<HEAD>
<TITLE>Lesson 3: Automating the Installation of Server Applications</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmserver.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03c.htm", "ch03e.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="136"><h1>Lesson 3: Automating the Installation of Server Applications</h1></A>

<p>In addition to automating the installation of the Windows 2000 Server operating system, you can automate the installation of other applications that will reside on your target computers. You can use two methods to automate the installation of server applications: using the Cmdlines.txt file or using the answer file. The Cmdlines.txt file contains a list of commands that are executed during the GUI mode phase of the Windows 2000 installation. The answer file, which allows you to run an unattended installation of Windows 2000 Server, includes the <font face="courier new" size="-1">[GuiRunOnce]</font> section. You can add an application installation program or a batch file to this section to facilitate automated installation of server applications.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b> 

<ul>
<p><li>Use the Cmdlines.txt file to perform an automated installation of server applications</li></p>

<p><li>Use the <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file to perform an automated installation of server applications</li></p>
</ul>

<b>Estimated lesson time: 35 minutes</b> 
</blockquote></div>
</p>

<A NAME="137"><h2>Using the Cmdlines.txt File</h2></A>
<p>The Cmdlines.txt file contains the commands that are executed during the GUI mode phase of the installation process. Setup executes these commands when installing optional components, such as applications that need to be installed immediately after Windows 2000 Server is installed. If you plan to use Cmdlines.txt, you need to place the file in the \$OEM$ subfolder of the distribution folder. If you are using Sysprep, place Cmdlines.txt in the \$OEM$\$1\Sysprep subfolder.</p>

<p>You should use the Cmdlines.txt file in the following circumstances:</p>

<ul>
<p><li>When you are installing components from the \$OEM$ subfolder of the distribution folders</li></p>

<p><li>When the application you are installing does not configure itself for multiple users, such as Microsoft Office 95, or it is designed to be installed by one user and to replicate user-specific information</li></p>

<p><li>When you want to log on as a service and you want your changes replicated to all users</li></p>
</ul>

<p>The syntax for the Cmdlines.txt file is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td> 
<pre>[Commands]
&quot;&lt;<i>command_1</i>&gt;&quot;
&quot;&lt;<i>command_2</i>&gt;&quot;
     .
     .
&quot;&lt;<i>command_x</i>&gt;&quot;
</pre></td></tr></table></p>


<p>The &lt;<i>command_1</i>&gt;, &lt;<i>command_2</i>&gt;, and &lt;<i>command_x</i>&gt; parameters are placeholders for the commands you want to run and in the order you want them to run when Setup is in the GUI mode and calls Cmdlines.txt. Note that all commands must be in quotation marks.</p>

<p>The Cmdlines.txt file runs as a service rather than as a logged-on user with network capability. Therefore, user-specific information is written to the default user registry, and all subsequently created users also get that information. In addition, Cmdlines.txt requires that you place the files necessary to run an application or utility in the distribution folders.</p>

<A NAME="138"><h2>Using the Answer File</h2></A>
<p>The <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file contains a list of commands that are executed the first time a user logs on to the computer after Setup runs. For example, you would add the following command to the <font face="courier new" size="-1">[GuiRunOnce]</font> section to run Sysprep automatically and in quiet mode:</p>

<p><table cellpadding=5 width="95%"><tr><td> 
<pre>[GuiRunOnce]
Command()=&quot;%systemdrive%\Sysprep\Sysprep <b>_</b> quiet&quot;
</pre></td></tr></table></p>


<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
You need to run Sysprep from <font face="courier new" size="-1">[GuiRunOnce]</font> so that you replicate settings to all users.</blockquote></div>
</p>

<p>A new capability of <font face="courier new" size="-1">[GuiRunOnce]</font> is to use environment variables, as illustrated in the example above. Fully qualified paths still work as well.</p>

<p>When using <font face="courier new" size="-1">[GuiRunOnce]</font> to initiate an installation, be aware that, if the application forces a reboot, you need to suppress the reboot. This is important because any time the system reboots, all previous RunOnce entries are lost. If the system reboots before completing entries previously listed in the RunOnce section, the remaining items will not be run.</p>

<p>If there is no way within the application to suppress a reboot, you can try repackaging the application into an MSI package or an SMS Installer package. VERITAS WinINSTALL LE is included with Windows 2000 Server, and the SMS Installer is included with SMS 2.0.</p>

<p>Another alternative is to place a command for a tool or application that forces a reboot at the end of a set of RunOnce commands. This also requires that before rebooting you add additional RunOnce entries to the registry so that after the reboot, Windows 2000 processes the next set of commands. You can have the first command that RunOnce executes be a registry edit command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>regedit /s &lt;<i>filename</i>.reg&gt;
</pre></td></tr></table></p>

<p>The &lt;<i>filename</i>.reg&gt; placeholder is a registry file that is named or enumerated as needed to accomplish what is desired through multiple reboots. If multiple reboots are required, each &lt;<i>filename</i>.reg&gt; file should include as the first item a command to load the next set of RunOnce registry entries, until the final set of entries are made.</p>

<p>You can set the AutoAdminLogonCount parameter to log on automatically as administrator to the computer. An automatic logon supports the multiple reboots that might be required. (Up to 99 reboots are supported.) In addition, a local administrator password (AdminPassword) must be included in the answer file used to install Windows 2000.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
If you are installing an application to multiple localized language versions of Windows 2000, it is recommended that you test the repackaged application on the localized versions to ensure it copies files to the correct locations and writes the required registry entries appropriately.</blockquote></div>
</p>

<p>If an application requires a Microsoft Windows Explorer shell in order to be installed, you cannot use the <font face="courier new" size="-1">[GuiRunOnce]</font> section because the shell is not loaded when the Run and RunOnce commands are executed. Check with the application vendors to determine if they have an update or patch that can address this for the application setup. If not, you can repackage the application as an MSI package or use another means of distribution.</p>

<p>Applications that use the same type of installation mechanism might not run properly if a /wait command is not used. This happens when an application installation is running and starts another process. Although the setup routine is still running by initiating another process and closing an active one, the next routine listed in the RunOnce registry entries might start. Because more than one instance of the installation mechanism is running, the second application will usually fail.</p>

<A NAME="139"><h3>Installing Applications</h3></A>
<p>You can use two methods to install applications through the <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file: using application installation programs and using a batch file.</p>

<p><b>Using Application Installation Programs</b></p>

<p>The preferred method for preinstalling an application is to use the installation routine supplied with the application. You can do this if the application you are preinstalling is able to run in quiet mode (without user intervention). Quiet mode usually requires a /q or /s command line switch. See the application help file or documentation for a list of command-line parameters supported by the installation mechanism.</p>

<p>The following command is an example of a line that you can place in the <font face="courier new" size="-1">[GuiRunOnce]</font> section to initiate the unattended installation of an application. Note that this command uses its own installation program:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
<i>&lt;path to setup&gt;\</i>Setup.exe /q
</pre></td></tr></table></p>

<p>Setup parameters vary between applications. For example, the /l parameter included in some applications is useful when you want to create a log file to monitor the installation. Some applications have commands that can keep them from rebooting automatically. This is useful in helping to control application installations with a minimal number of reboots.</p>

<p>Be sure that you check with the application vendor for information, instructions, tools, and best practices before you preinstall any application.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
You must meet the licensing requirements for any application you install, regardless of how you install it.</blockquote></div>
</p>

<p><b>Using a Batch File to Control How Multiple Applications Are Installed</b></p>

<p>If you want to control how multiple applications are installed, you can create a batch file that contains the individual installation commands and uses the Windows 2000 Start command with the /wait command line switch. The batch file can be run from the <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file. Using a batch file ensures that your applications install sequentially and that each application is fully installed before the next application begins its installation routine.</p>

<p>The following information provides an overview of how to create the batch file, install the application, and then remove all references to the batch file after installation is complete:</p>

<ul>
<p><li><b>Creating the batch file</b> The batch file should contain command lines similar to the following example:</li></p>

<p><table cellpadding=5 width="95%"><tr><td> 
<pre>Start /wait <i>&lt;path&gt;</i>\&lt;<i>setup file&gt;</i> &lt;<i>command line parameters</i>&gt;
Start /wait <i>&lt;path&gt;</i>\&lt;<i>setup file&gt;</i> &lt;<i>command line parameters</i>&gt;
Exit
</pre></td></tr></table></p>

<p>where:</p>

<ul>
<p><li>The &lt;<i>path&gt;</i> placeholder is the path to the executable file that starts the installation. This path must be available during Setup.</li></p>

<p><li>The <i>&lt;setup file&gt;</i> placeholder is the name of the executable file that starts the installation.</li></p>

<p><li>The <i>&lt;command line parameters&gt;</i> placeholders are any available quiet-mode parameters appropriate for the application you want to install.</li></p>
</ul>

<p><li><b>Copying the batch file</b> The batch file should be copied to the distribution folder or to another location that can be accessed during installation. If you intend to run Sysprep on the computer to which you are installing Windows 2000, you can copy the batch file to the Sysprep folder of your distribution folders. This will make the batch file local to the computer being installed. When the computer is powered on after Sysprep has been run and the MiniSetup wizard has completed, the Sysprep folder and all its contents will be deleted. You do not have to delete the batch file through another process.</li></p>

<p><li><b>Adding the batch file to the answer file</b> An entry for the batch file should be added to the <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file.</li></p>

<p><li><b>Copying the .lnk file to the source computer</b> The .lnk file should be copied from the source computer to the $OEM$\$1\documents and settings\all users\start menu\programs\startup folder. When the computer is restarted and runs in GUI mode, the application is installed and the .lnk file is deleted from the Startup Group.</li></p>
</ul>

<A NAME="140"><h2>Lesson Summary</h2></A>
<p>You can use two methods to automate the installation of server applications. The first is to use the Cmdlines.txt file, which contains the commands that are executed during the GUI mode phase of the installation process. Setup executes these commands when installing optional components. The second is to modify the <font face="courier new" size="-1">[GuiRunOnce]</font> section of the answer file. This section contains a list of commands that are executed the first time a user logs on to the computer after Setup runs. If you plan to use the answer file to install applications, you can use the installation routine supplied with the application, or you can create a batch file that contains the individual installation commands.</p>

</BODY>
</HTML>



