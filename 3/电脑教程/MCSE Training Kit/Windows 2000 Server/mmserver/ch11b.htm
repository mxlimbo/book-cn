<HTML>
<HEAD>
<TITLE>Lesson 1: Public Key Infrastructure</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmserver.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11a.htm", "ch11c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="591"><h1>Lesson 1: Public Key Infrastructure</h1></A>
<p>Public key cryptography is a critical technology for e-commerce, intranets, extranets, and other Web-enabled applications. However, to take advantage of the benefits of public key cryptography, a supporting infrastructure is needed. The Windows 2000 operating system includes a native public key infrastructure (PKI) that is designed from the ground up to take full advantage of the Windows 2000 security architecture. This lesson provides an overview of the Windows 2000 PKI and includes discussions about security properties, cryptography, certificates, and Microsoft Certificate Services.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b> 

<ul>
<p><li>Describe the fundamental concepts of public key cryptography and the Windows 2000 implementation of PKI</li></p>

<p><li>Process certificate requests and add certificate authorities (CAs)</li></p>

<p><li>Install Microsoft Certificate Services</li></p>
</ul>

<b>Estimated lesson time: 35 minutes</b> 
</blockquote></div>
</p>

<A NAME="592"><h2>Security Properties</h2></A>
<p>Computer security includes everything from the physical computing environment to the software environment. In a software environment, security should provide four functions: authentication, integrity, confidentiality, and anti-replay.</p>

<A NAME="593"><h3>Authentication</h3></A>
<p><i>Authentication</i> is the process of reliably determining the genuine identity of the communicating computer (host) or user. Authentication is based on cryptography; it ensures that an attacker eavesdropping on the network cannot gain the information needed to impersonate a valid user or entity. It allows a communicating entity to prove its identity to another entity before unprotected data is sent across the network. Without strong authentication, any data and the host it is sent from is suspect.</p>

<A NAME="594"><h3>Integrity</h3></A>
<p><i>Integrity</i> is the correctness of data as it was originally sent. Integrity services protect data from unauthorized modification in transit. Without data integrity, any data and the host it is sent from is suspect.</p>

<A NAME="595"><h3>Confidentiality</h3></A>
<p><i>Confidentiality</i> ensures that data is disclosed only to intended recipients.</p>

<A NAME="596"><h3>Anti-Replay</h3></A>
<p><i>Anti-replay,</i> also called <i>replay prevention,</i> ensures that datagrams are not retransmitted. Each datagram sent is unique. This uniqueness prevents attacks in which a message is intercepted and stored, then re-used later to attempt illegal access to information.</p>

<A NAME="597"><h2>Cryptography</h2></A>
<p><i>Cryptography</i> is a set of mathematical techniques for encrypting and decrypting data so it can be transmitted securely and not be interpreted by unauthorized parties. Cryptography uses keys in conjunction with algorithms to secure data. A <i>key</i> is a value used to encrypt or decrypt information. Even if the algorithm is publicly known, security is not compromised because the data cannot be read without the key. For example, the algorithm of a combination lock is common knowledge: the dials are moved in a specific order to open the lock. However, the key to the lock&#8212;the numbers of the combination code&#8212;is secret and known only to the person with the combination. In other words, the key provides the security, not the algorithm. The algorithm provides the infrastructure in which the key is applied. Security systems can be based on public key or secret key cryptography, which are described later in this lesson.</p>

<p>There are a number of well-known cryptographic algorithms, each supporting different security operations. The following table describes several well-known cryptographic algorithms:</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Algorithm</th>
			<th>Description</th>
		</tr>

		<tr>
			<td valign="top">Rivest, Shamir, Adleman (RSA)</td>
			<td valign="top">A general purpose algorithm that can support digital signatures, distributed authentication, secret key agreement via public key, and bulk data encryption without prior shared secrets.</td>
		</tr>

		<tr>
			<td valign="top">Digital Signature Standard (DSA)</td>
			<td valign="top">A public key algorithm used for producing digital signatures.</td>
		</tr>

		<tr>
			<td valign="top">Diffie-Hellman</td>
			<td valign="top">A public key cryptography algorithm that allows two communicating entities to agree on a shared key without requiring encryption during the key generation.</td>
		</tr>

		<tr>
			<td valign="top">Hash Message Authentication Code (HMAC)</td>
			<td valign="top">A secret key algorithm that provides integrity, authentication, and anti-replay. HMAC uses hash functions combined with a secret key. A hash, also known as a message digest, is used to create and verify a digital signature.</td>
		</tr>

		<tr>
			<td valign="top">HMAC-Message Digest function 5 (MD5)</td>
			<td valign="top">A hash function that produces a 128-bit value known as a digital signature. This signature is used for authentication, integrity, and anti-replay.</td>
		</tr>
		
		<tr>
			<td valign="top">HMAC-Secure Hash Algorithm (SHA)</td>
			<td valign="top">A hash function that produces a 160-bit digital signature and that is used for authentication, integrity, and anti-replay.</td>
		</tr>

		<tr>
			<td valign="top">Data Encryption Standard-Cipher Chaining (DES-CBC)</td>
			<td valign="top">A secret key algorithm used for confidentiality. A random number is generated and used with the secret key to Block encrypt data.</td>
		</tr>
		
	</table>
</p>

<A NAME="598"><h3>Public Key Cryptography</h3></A>
<p><i>Public key cryptography</i> is an asymmetric scheme that uses a pair of keys for encryption. It is called asymmetric because it uses two encryption keys that are mathematically related. These related keys are called the public and private key pair. To use public key encryption, an object (such as a user) must generate a public and private key pair. The object will have only one private key (its own) but may obtain multiple public keys that pair to other private keys. Objects obtain public keys in one of two ways:</p>

<ul>
<p><li>The owner of the private key sends the receiver the matching public key.</li></p>

<p><li>The receiver obtains the key from a directory service such as the Active Directory service or Domain Name System (DNS).</li></p>
</ul>

<p>A public and private key pair are typically used for two purposes: data encryption and digital message signing.</p>

<p><b>Data Encryption</b></p>

<p>Data encryption provides confidentiality by ensuring that only the intended recipient is able to decrypt and view the original data. When secure data must be transmitted, the sender obtains the recipient's public key. The sender then uses the recipient's public key to encrypt data and then send it. When the recipient receives the data, the recipient uses his or her own private key to decrypt the data. Encryption is only secure if the sender uses the recipient's public key for encryption. If a sender uses his or her private key to encrypt data, anyone can capture the data and decrypt it by obtaining the sender's public key.</p>

<p><b>Digital Message Signing</b></p>

<p>Digital signing provides authentication and integrity but does not provide confidentiality. Digital signing allows a recipient to be certain of the identity of the sender and verifies the content has not been modified during transit. This is to prevent the originator of a message from attempting to send a message under the guise of another identity.</p>

<p>When a sender signs a message, a message digest is created. A message digest is a representation of the message and is similar to a cyclic redundancy check (CRC). The sender uses his or her private key to encrypt the message digest. When the recipient receives the message, the recipient obtains the sender's public key to decrypt the message digest. The recipient then creates a message digest from the message and compares the message digest to the decrypted message digest. If the message digests match, integrity is guaranteed (Figure 11.1).</p>

<p>
<A HREF="javascript:fullSize('f11xx01gx.htm')"> <img src="images/f11xx01g.JPG" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.1</b> <i>Using a signed message, message digest and the PKI to verify authenticity of sender</i><!--/caption-->
</p>

<p>Authentication is provided through the key pair. Since the message digest was encrypted by using the sender's private key (and only the sender's public key will decrypt the message digest), the recipient can be certain that the message came from the owner of the key pair. The recipient, however, must have a mechanism for ensuring that the key pair belongs to the intended sender and not someone impersonating the sender. This is done through a certificate issued by a trusted third party, which confirms the identity of the owner of the public key. The trusted third party is known as a Certificate Authority (CA), which will be discussed later in the lesson.</p>

<A NAME="599"><h3>Secret Keys</h3></A>
<p>A <i>secret key</i> (also known as <i>shared secret</i> or <i>shared secret key</i>) is used in much the same way as a public key; however, there is only one key that provides security. Secret keys are generally used only for a particular session or for a short period of time before being discarded. This process holds an advantage over public keys. For example, if an unauthorized person became aware of the key, that person may be able to gain access to a session. However, the unauthorized person would not be able to impersonate either the user or computer outside of the session, and would not have access to other resources with the secret key.</p>

<p>In order to get the shared secret key to both parties, there must exist a mechanism for doing so without compromising security. If the key was sent over the network, an eavesdropper would have easy access to the key.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
An <i>eavesdropper</i> is someone using a network-monitoring tool to capture packets on the network.
</blockquote></div>
</p>

<p><b>Secret Key Exchange</b></p>

<p>A common solution to providing the secret key to both parties is using public keys. Public keys make it possible to encrypt the secret key as it is sent across the network. Public keys ensure confidentiality, authentication, and integrity; therefore, security is not compromised when a secret key is sent.</p>

<p>For example, if Bruce wants to send data to Max by using a secret key, Bruce and Max will each generate half of the secret key. Bruce will obtain Max's public key to encrypt his half of the secret key and send it to Max. Likewise, Max will obtain Bruce's public key to encrypt his half of the secret key and send it to Bruce. Bruce and Max then combine the halves of the secret key to generate the shared secret key to be used for encrypting the data to be sent (Figure 11.2). This secret key negotiation and the use of the secret key to encrypt the data provide authenticity, integrity, and confidentiality.</p>

<p>
<A HREF="javascript:fullSize('f11xx02gx.htm')"> <img src="images/f11xx02g.JPG" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.2</b> <i>Secret key exchange where Bruce and Max each generate half of a secret key to create a shared secret key</i><!--/caption-->
</p>

<p><b>Data Encryption</b></p>

<p>In order to provide confidentiality, the data must be encrypted by using the shared secret key. Because there is only one key known to both the sender and the receiver, encryption is a straightforward process. The sender encrypts the data with the shared secret key and the receiver decrypts it with the shared secret key. Since no other entity on the network has knowledge of the secret key, the data is safe from attack. The sender and the receiver generally discard shared secret keys once the session has been terminated.</p>

<A NAME="600"><h2>Certificates</h2></A>
<p>Public key encryption assumes that the identity of the key pair owner is established beyond doubt. A <i>digital certificate</i>, also referred to simply as a <i>certificate</i>, is a set of data that completely identifies an entity. A trusted Certificate Authority (CA) issues certificates after the authority has verified the entity's identity. The CA provides a trusted third party for both communicating parties.</p>

<p>For example, if Tucker wants to send authenticated data to Max, Tucker sends his public key to Max. A trusted CA certifies Tucker's public key, thus certifying Tucker's identity. Because Max trusts the CA, he trusts Tucker.</p>

<p>This process is similar to that of a notary public. A person signs a document in front of a notary public and provides proof of identity. The notary public is a trusted entity so that anyone examining the document can be sure that the signature is authentic. Likewise, when the sender of a message signs the message with a private key, the recipient of the message can use the sender's public key, signed by a trusted CA, to verify that the sender is legitimate. Since the trusted CA certifies the public key, the recipient can be sure that the sender is the assumed sender. A trusted CA may be a third-party provider of certificates such as VeriSign or Microsoft Certificate Services.</p>

<p>A user, for example, can obtain a digital certificate for use with e-mail. The digital certificate includes the public key and information about the user. When the user sends e-mail, the e-mail includes a digital signature that uses the private key. The recipient obtains the public key and determines whether or not the sender of the mail message is the assumed sender. A private key is never sent to the recipient.</p>

<p><b>X.509</b></p>

<p>The term <i>X.509</i> refers to the International Telecommunication Union-Telecommunication (ITU-T) standard for certificate syntax and format. The Windows 2000 certificate-based processes use the X.509 standard. Because it is possible to use certificates for different applications (for example, secure e-mail, file system encryption), each certificate has different information contained within it. However, certificates should, at a minimum, contain the following attributes:</p>

<ul>
<p><li>Version</li></p>

<p><li>Serial number</li></p>

<p><li>Signature algorithm ID</li></p>

<p><li>Issuer name</li></p>

<p><li>Validity period</li></p>

<p><li>Subject (user) name</li></p>

<p><li>Subject public key information</li></p>

<p><li>Issuer unique identifier</li></p>

<p><li>Subject unique identifier</li></p>

<p><li>Extensions</li></p>

<p><li>Signature on the above fields</li></p>
</ul>

<p><b>Certificate Revocation Lists</b></p>

<p>Certificates, like most real-world forms of identification, can expire and become invalid. The CA can also revoke them for other reasons. In order to handle the existence of invalid certificates, the CA maintains a certificate revocation list (CRL). The CRL is available to network users to determine the validity of any given certificate.</p>

<A NAME="601"><h3>CA Hierarchy</h3></A>
<p>Rather than having one trusted CA provide authentication for the entire Internet or intranet, it is possible to have CAs certify other CAs. This hierarchical structure, called chaining, allows users to trust a single CA rather than having to trust all CAs. This chaining of CAs provides several benefits:</p>

<ul>
<p><li><b>Flexibility</b> It is easy to move, revoke, or chain CA's without affecting other parts of the organization.</li></p>

<p><li><b>Distributed Administration</b> Administrators can be responsible for their own sites.</li></p>


<p><li><b>Security Policies</b> Security policies can be different at each CA site.</li></p>
</ul>

<p>The CA at the top of the chain is referred to as the root CA. CAs below the root are referred to as intermediate, subordinate, or issuing CAs.</p>

<A NAME="602"><h2>Microsoft Certificate Services</h2></A>
<p>Microsoft Certificate Services enables an organization to manage the issuance, renewal, and revocation of digital certificates without having to rely on external certificate authorities. In addition, Certificate Services allows an organization to fully control the policies associated with issuing, managing, and revoking certificates, as well as the format and contents of the certificates themselves. In addition, Certificate Services logs all transactions, enabling the administrator to track, audit, and manage certificate requests.</p>

<p><b>Certificate Services Features</b></p>

<p>Microsoft Certificate Services has a number of features that make it valuable to organizations that do not choose to rely upon external certificate authorities and who require a flexible tool that can be adapted to the needs of their organization.</p>

<p><b>Policy Independence</b></p>

<p>In order to obtain a certificate, requesters must meet certain criteria. This criteria is defined in certificate policies. For example, one policy may grant commercial certificates only if applicants present their identification in person. Another policy may grant credentials based on e-mail requests.</p>

<p>Policies are implemented in policy components that can be written in Java, Visual Basic, or Microsoft C/C++. The default policy for Certificate Services allows users to request certificates through an HTML page.</p>

<p><b>Transport Independence</b></p>

<p>Certificate Services can request and distribute certificates through any transport mechanism. That is, it can accept certificate requests from an applicant and post certificates to the applicant through Hypertext Transfer Protocol (HTTP), remote procedure call (RPC), disk file, or custom transport.</p>

<p><b>Adherence to Standards</b></p>

<p>Microsoft Certificate Services can perform the following services:</p>

<ul>
<p><li>Accept standard Public Key Cryptography Standards (PKCS) #10 requests.</li></p>

<p><li>Support PKCS #7 cryptographically signed data.</li></p>

<p><li>Issue X.509 version 1.0 and 3.0 certificates.</li></p>
</ul>

<p>Support for additional certificate formats can be added to Certificate Services. Certificate Services includes an LDAP component so that Certificate Services can integrate with the Active Directory service.</p>

<p><b>Key Management</b></p>

<p>The security of a certification system depends on the protection of private keys. The design of Certificate Services ensures that individuals cannot access private key information without authorization. Certificate Services relies on Microsoft CryptoAPI to provide key management functionality and other cryptographic capabilities for building a secure store, with certificates kept in a certificate store.</p>

<A NAME="603"><h3>Certificate Services Architecture</h3></A>
<p>Certificate Services architectural elements include the server engine that handles certificate requests and other modules that perform tasks by communicating with the server engine. Figure 11.3 illustrates how the components communicate with the server engine.</p>

<p>
<A HREF="javascript:fullSize('f11xx03gx.htm')"> <img src="images/f11xx03g.JPG" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.3</b> <i>Server engine and other components of Certificate Services</i><!--/caption-->
</p>

<p><b>Server Engine</b></p>

<p>The server engine is the core component of Certificate Services. The engine acts as a broker for all requests it receives from the entry modules, driving the flow of information between components during the processing of a request and generation of a certificate. At each processing stage, the engine interacts with the various modules to ensure appropriate action is taken based on the state of the request.</p>

<p><b>Intermediary</b></p>

<p>The intermediary is the architectural component that receives new certificate requests from clients and submits them to the server engine. The intermediary is composed of two parts: the intermediary application that performs actions on behalf of clients and the Certificate Services Client Interface that handles communications between the intermediary application and the server engine.</p>

<p>Intermediary applications can be written to handle certificate requests from different types of clients, across multiple transports, or according to policy-specific criteria. Microsoft Internet Information Services (IIS) is an intermediary application that provides support for clients over HTTP. Intermediaries can also check on the status of a previously submitted request and obtain the Certificate Services' configuration information.</p>

<p><b>Server Database</b></p>

<p>Certificate Services includes a server database that maintains status information and a log of all issued certificates and certificate revocation lists (CRLs). The database is composed of two parts: the server log and the server queue.</p>

<p><b>Server Log</b></p>

<p>The server log stores all certificates and CRLs issued by the server so that administrators can track, audit, and archive server activity. In addition, the server log is used by the server engine to store pending revocations before publishing them in the CRL. The server log also stores recent certificate requests for a configurable period in case a problem is encountered when a certificate is issued.</p>

<p><b>Server Queue</b></p>

<p>The server queue maintains status information (receipt, parsing, authorization, signing, and dispatch) as the server processes a certificate request.</p>

<p><b>Policy Module</b></p>

<p>The policy module contains the set of rules governing issuance, renewal, and revocation of certificates. All requests received by the server engine are passed to the policy module for validation. Policy modules are also used to parse any supplemental information provided within a request and set properties on the certificate accordingly.</p>

<p><b>Extension Handlers</b></p>

<p>Extension handlers work in tandem with the policy module to set custom extensions on a certificate. Each extension handler acts as a template for the custom extensions that should appear in a certificate. The policy module must load the appropriate extension handler when it is needed.</p>

<p><b>Exit Modules</b></p>

<p>Exit modules publish completed certificates and CRLs through any number of transports or protocols. By default, the server notifies each exit module installed on the server whenever a certificate or CRL is published.</p>

<p>Certificate Services provides a Component Object Model (COM) interface for writing custom exit modules for different transports and protocols or for custom delivery options. For example, an LDAP exit module might be used to publish only client certificates in a directory service and not server certificates. In this case, the exit module can use the COM interface to determine the type of certificate that the server is issuing and filter out any that are not client certificates.</p>

<A NAME="604"><h3>Processing Certificate Requests</h3></A>
<p>Certificate Services provides services for processing certificate requests and issuing digital certificates (Figure 11.4).</p>

<p>
<A HREF="javascript:fullSize('f11xx04gx.htm')"> <img src="images/f11xx04g.JPG" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.4</b> <i>Processing certificate requests</i><!--/caption-->
</p>

<p>Certificate Services performs the following steps when processing a certificate request:</p>

<ol>
<p><li>The certificate request is sent by the client to an intermediary application. The intermediary application formats it into a PKCS #10 format request and submits it to the server engine.</li></p>

<p><li>The server engine calls the policy module, which queries request properties, decides whether or not the request is authorized, and sets optional certificate properties.</li></p>

<p><li>If the request is approved, the server engine takes the request and builds a complete certificate.</li></p>

<p><li>The server engine stores the completed certificate in the certificate store and notifies the intermediary application of the request status. If the exit module has so requested, the server engine notifies it of a certificate issuance event. This allows the exit module to perform further operations, such as publishing the certificate to a directory service.</li></p>

<p><li>The intermediary gets the published certificate from the certificate store and passes it back to the client.</li></p>
</ol>

<p><b>Enrolling Certificates</b></p>

<p>The process of obtaining a digital certificate is called <i>certificate enrollment</i>. This process begins with a client submitting a certificate request and ends with the installation of the issued certificate in the client application.</p>

<p>The enrollment control and its forms are accessed through the Certificate Services Enrollment Page. This page is available from the Certificate Services Web page at <i>http://server_name/certsrv/</i>.</p>

<p>
<A HREF="javascript:fullSize('f11xx05x.htm')"> <img src="images/f11xx05.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.5</b> <i>Enrollment control form for Server01 configured as an Enterprise CA</i><!--/caption-->
</p>

<A NAME="605"><h3>CA Certificates</h3></A>
<p>In the process of issuing a digital certificate, the CA validates the identity of the individual requesting the certificate and then signs the certificate with its own private key.</p>

<p>A client application, such as Microsoft Internet Explorer, checks the CA signature before accepting a certificate. If the CA signature is not valid or if it comes from an unknown source, Internet Explorer warns the user by displaying a security message and may prevent the user from accepting the certificate.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
If Internet Explorer is set to the low security level, it will not warn the user of invalid certificates. This setting is appropriate for highly trusted intranet environments and is inappropriate for Internet access.
</blockquote></div>
</p>

<p>In addition to the server and client authentication certificates issued by Certificate Services, there are certificates that identify CAs.</p>

<p>The CA certificate is a signature certificate that contains a public key used to verify digital signatures. It identifies the CA that issues authentication certificates to the servers and clients that request these certificates. Clients use the CA certificate of the CA issuing the server certificate to validate the server certificate. Servers use the CA certificate of the CA issuing the client certificate to validate the client certificate.</p>

<p>A self-signed CA certificate is also called a root certificate because it is the certificate for the root CA. The root CA must sign its own CA certificate because by definition there is no higher certifying authority to sign its CA certificate.</p>

<p><b>Distribution and Installation of CA Certificates</b></p>

<p>CA certificates are not requested and issued in the same manner as server and client authentication certificates. Server and client authentication certificates are unique for each requesting server and client, and are not shared&#8212;they must be generated and issued by a CA upon demand. In contrast, the CA certificate does not require issuance upon demand. Instead, it is created once and then made readily available to all servers or clients who request certificates from the CA.</p>

<p>A commonly used technique for distributing CA certificates is to place them in a location known and accessible to anyone who requests certificates from the CA.</p>

<A NAME="606"><h3>Installing Certificate Services</h3></A>
<p>You can install Certificate Services by using the Add/Remove Programs utility in Control Panel or optionally during the installation of Windows 2000 Server. Administrators familiar with creating CAs can choose a custom setup by using the advanced options available when installing Certificate Services. Those unfamiliar with creating CAs can select the default settings.</p>

<p><b>Certificate Authority Type</b></p>

<p>The CA type allows selection of how the CA will be utilized in a CA hierarchy and whether or not the CA will rely upon Active Directory services. The following certificate authority types are available:</p>

<ul>
<p><li><b>Enterprise Root CA</b> This CA becomes the root CA for the hierarchy and requires Active Directory services.</li></p>

<p><li><b>Enterprise Subordinate CA</b> This CA becomes a subordinate CA to an Enterprise Root CA. It requires Active Directory services. It will request a certificate from the Enterprise Root CA.</li></p>

<p><li><b>Stand-alone Root CA</b> This CA becomes the root CA for the hierarchy but does not require Active Directory services.</li></p>

<p><li><b>Stand-alone Subordinate CA</b> This CA becomes a subordinate CA to a Stand-alone Root CA. It does not require Active Directory services. It requests a certificate from the Stand-alone Root CA.</li></p>
</ul>

<p>When installing the Certificate Services as an Enterprise CA, Certificate Services copies the certificates into Active Directory services. Security support providers such as Kerberos can query Active Directory services to get the certificate, which contains the public key.</p>

<p><b>CA Information</b></p>

<p>You must supply information about the initial CA that is created when you install Certificate Services. This information includes the CA name and other necessary information. None of this information can be changed after the CA setup is complete.</p>

<p><b>Advanced Configuration</b></p>

<p>The advanced configuration contains options for the type of cryptography algorithms to be used for the CA that you are creating. The advanced configuration options include the name of the cryptographic provider, the hash algorithm, the option to use existing public keys and private keys, and the key length.</p>

<A NAME="607"><h3>Administering Certificate Services</h3></A>
<p>The main tool used to administer Certificate Services is the Certification Authority snap-in (Figure 11.6).</p>

<p>
<A HREF="javascript:fullSize('f11xx06x.htm')"> <img src="images/f11xx06.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 11.6</b> <i>Certification Authority snap-in for an Enterprise CA</i><!--/caption-->
</p>

<p>The snap-in allows you to perform a variety of administrative tasks:</p>

<ul>
<p><li>Start or stop the CA service</li></p>

<p><li>Set security permissions and delegate control of a CA</li></p>

<p><li>View a CA certificate</li></p>

<p><li>Back up a CA</li></p>

<p><li>Restore a CA from a backup copy</li></p>

<p><li>Renew a root CA</li></p>

<p><li>Renew a subordinate CA</li></p>

<p><li>Manage certificate revocation</li></p>

<p><li>Manage certificate requests</li></p>

<p><li>Manage certificate templates</li></p>

<p><li>Change policy settings</li></p>

<p><li>Map certificate to user accounts</li></p>

<p><li>Modify the Policy Module or Exit Module</li></p>
</ul>

<p>You can use the Certification Authority snap-in to administer a certification authority on the local computer or on a another computer. The snap-in is installed when Certificate Services are installed or when installing the Administration Pack (Adminpak.msi).</p>

<p>Certutil.exe is a command-line utility used for administering certificate services. Running certutil without any command-line switches displays summary information about the local certificate authority. Certutil is used to dump and display CA configuration information, configure Certificate Services, back up and restore CA components, and verify certificates, key pairs, and certificate chains.</p>

<p>If you need to set security for the CA Web pages, you should use the Internet Information Services snap-in. Expand the Default Web Site from the console tree and then select CertSrv. From the Action menu, select Properties. On the Directory Security tab, under Anonymous access and authentication control, click Edit. In the Authentication Methods dialog box, configure the security settings for the CA Web pages.</p>

<p>
<img src="images/practic.JPG" border="0">
</p>

<A NAME="608"><h3>Exercise 1: Installing and Configuring Certificate Services</h3></A>
<p>In this exercise you install an Enterprise Root CA and use this CA to issue, install, and revoke certificates. Note that the secure way to configure Certification Services is to create a root CA that only issues certificates to subordinate CA types. The subordinate CA types then issue certificates for specific purposes such as application services and authentication. Using a root CA for this purpose is not secure because if the root CA security is breached, all certificates issued are compromised. However, for the purpose of learning how to install and configure certificate services, a root CA can be used.</p>

<p><li><b>Procedure 1: Installing Certificate Services and configuring the Certificate Authority</b></li></p>

<p>In this procedure, you install Certificate Services on Server01. Server01 acts as an Enterprise Root CA.</p>

<ol>
<p><li>Log on to Server01 as Administrator with a password of &quot;password.&quot;</li></p>

<p><li>Click Start, point to Settings and then click Control Panel.</li></p>

<p>Control Panel appears.</p>

<p><li>Double-click the Add/Remove Programs application.</li></p>

<p>The Add/Remove Programs window appears.</p>

<p><li>In the left pane, click the Add/Remove Windows components icon.</li></p>

<p>The Windows Components wizard appears.</p>

<p><li>Click the Certificate Services check box.</li></p>

<p>A Microsoft Certificate Services message box appears stating that once Certificate Services is installed, the computer cannot be renamed and it cannot join or be removed from a domain.</p>

<p><li>Click Yes.</li></p>

<p><li>On the Windows Components screen, click Details.</li></p>

<p>The Certificate Services window appears.</p>

<p>Notice that Certificate Services subcomponents include both the service used to create a certificate authority and a Web enrollment form for submitting requests and retrieving certificates from the computer running as a CA.</p>

<p><li>Click OK.</li></p>

<p><li>On the Windows Components screen, click Next.</li></p>

<p>The Certification Authority Type screen appears.</p>

<p><li>Select each radio button and read the text appearing in the Description box.</li></p>

<p>Notice that the Enterprise CA types can only be used if Active Directory services is running. The stand-alone CA types run independently of Active Directory services. Thus, they can be used in the presence or absence of Active Directory services. If Active Directory services is present, the stand-alone CA types will use it. Subordinate CA types are dependent on the presence of a CA higher up in the CA hierarchy.</p>

<p><li>Click the Enterprise Root CA radio button and click the Advanced options check box.</li></p>

<p><li>Click Next.</li></p>

<p>The Public and Private Key Pair screen appears.</p>

<p>Notice that there are a number of Cryptographic Service Providers (CSPs), each having one or more associated hash algorithms used to generate key pairs. From this screen you can also specify the key length or use existing keys installed on the computer, import keys, and view certificates.</p>

<p><li>In the CSP list box, verify that Microsoft Base Cryptographic Provider v1.0 is selected. In the Hash Algorithm list box, verify that the SHA-1 hash algorithm is selected. In the Key Length drop-down list box, verify that Default is selected. Click Next.</li></p>

<p>The CA Identifying Information screen appears.</p>

<p><li>Type the information in the table into the text boxes on the CA Identifying Information screen.</li></p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Label</th>
			<th>Value to type</th>
		</tr>

		<tr>
			<td valign="top">CA name</td>
			<td valign="top">Enterprise CA</td>
		</tr>

		<tr>
			<td valign="top">Organization</td>
			<td valign="top">Microsoft Corporation</td>
		</tr>

		<tr>
			<td valign="top">Organizational unit</td>
			<td valign="top">Microsoft Press</td>
		</tr>

		<tr>
			<td valign="top">City</td>
			<td valign="top">Redmond</td>
		</tr>

		<tr>
			<td valign="top">State or province</td>
			<td valign="top">Washington</td>
		</tr>
		
		<tr>
			<td valign="top">E-mail</td>
			<td valign="top">ca-mp@microsoft.com</td>
		</tr>

		<tr>
			<td valign="top">CA description</td>
			<td valign="top">Root CA for self-study training only</td>
		</tr>
		
	</table>
</p>

<p>Notice that this certificate is configured to be valid for two years.</p>

<p><li>Click Next.</li></p>

<p>The Data Storage Location screen appears.</p>

<p>Notice that the certificate database and log file folder, CertLog, is stored on the boot partition. If disk capacity on the boot partition is limited, consider specifying another secure partition for the certificate database and log folder.</p>

<p>The Store configuration information in a shared folder is not necessary if Active Directory services is running and the computer operating as the certificate authority is a member of a domain. Configuration information about the CA is automatically published to the Active Directory store.</p>

<p><li>Click Next.</li></p>

<p>A Microsoft Certificate Services message box appears stating that Internet Information Services is running on the computer and warning you that it must be stopped in order for you to be able to continue.</p>

<p><li>Click OK.</li></p>

<p>The Configuring Components screen appears as the software is installed and configured, and then the Completing the Windows Components Wizard screen appears.</p>

<p><li>Click Finish and then on the Add/Remove Programs window, click Close.</li></p>

<p><li>Close Control Panel.</li></p>
</ol>

<p><li><b>Procedure 2: Running Certificate Services</b></li></p>

<p>In this procedure you will generate, install, and revoke a certificate on Server01. You will use the Certificate Enrollment URL and the Certificate Authority snap-in to complete this procedure.</p>

<ol>
<p><li>Open Certification Authority from the Administrative Tools program group.</li></p>

<p>The Certification Authority snap-in appears.</p>

<p><li>In the console tree, expand the Enterprise CA node.</li></p>

<p><li>In the console tree, select the Issued Certificates folder and then minimize the Certification Authority snap-in.</li></p>

<p><li>Click the Start menu and then choose run.</li></p>

<p>The Run dialog box appears.</p>

<p><li>In the Open text box, type <b>http://server01/certsrv</b> and then click OK.</li></p>

<p>The Internet Connection wizard appears.</p>

<p><li>Click the I Want To Setup My Internet Connection Manually, or I Want To Connect Through A Local Area Network (LAN) radio button.</li></p>

<p><li>Click Next.</li></p>

<p>The Setting Up Your Internet Connection screen appears.</p>

<p><li>Click the I Connect Through A Local Area Network (LAN) radio button.</li></p>

<p><li>Click Next.</li></p>

<p>The Local Area Network Internet Configuration screen appears.</p>

<p><li>Clear the Automatic Discovery Of Proxy Server (Recommended) check box.</li></p>

<p><li>Click Next.</li></p>

<p>The Set Up Your Internet Mail Account screen appears.</p>

<p><li>Click the No radio button and then click Next.</li></p>

<p>The Completing The Internet Connection wizard appears.</p>

<p><li>Click Finish.</li></p>

<p>Internet Explorer appears and displays the certificate services enrollment page.</p>

<p><li>Read the information on this page and then verify that the Request A Certificate radio button is selected.</li></p>

<p><li>Click Next.</li></p>

<p>The Choose Request Type page appears and the User Certificate Request radio button is selected.</p>

<p><li>Click Next.</li></p>

<p>The User Certificate&#8212;Identifying Information page appears.</p>

<p><li>Click More Options.</li></p>

<p>Notice that the CSP selected was the CSP type you specified during installation of Certificate Services.</p>

<p><li>Click Submit.</li></p>

<p>The Certificate Issued page appears.</p>

<p><li>Minimize Internet Explorer and restore the Certification Authority snap-in.</li></p>

<p>The Certification Authority snap-in appears and one certificate is listed in the details pane. If you don't see the certificate request, press F5 to refresh the details pane.</p>

<p><li>Double click the certificate appearing in the details pane.</li></p>

<p>The Certificate dialog box appears with three tabs.</p>

<p><li>Click the Details tab.</li></p>

<p><li>In the top box below the Show drop-down list box, click Issuer.</li></p>

<p>Notice that the information appearing in the bottom box is the information you typed into the CA Identifying Information screen.</p>

<p><li>Click OK.</li></p>

<p><li>Minimize the Certification Authority snap-in and restore Internet Explorer.</li></p>

<p><li>Click the Install This Certificate hyperlink.</li></p>

<p>The Certificate Installed page appears stating that you have successfully installed a certificate.</p>

<p><li>Close Internet Explorer.</li></p>

<p><li>Restore the Certification Authority snap-in and select the certificate in the details pane.</li></p>

<p><li>Click the Action Menu, point to All Tasks and then click Revoke certificate.</li></p>

<p>The Certificate Revocation dialog box appears.</p>

<p><li>In the Reason Code drop-down list box choose Key Compromise and then click Yes.</li></p>

<p><li>In the console tree, click the Revoked Certificates folder.</li></p>

<p>The revoked certificate appears in the details pane.</p>

<p><li>Click the Action menu, point to All Tasks and then click Publish.</li></p>

<p>The Certificate Revocation List dialog box appears stating that the previous list is still valid.</p>

<p><li>Click Yes.</li></p>

<p><li>Close the Certification Authority snap-in.</li></p>

<p><li>Click the Start menu, and then click Run.</li></p>

<p>The URL to the Certsrv directory appears.</p>

<p><li>Click OK.</li></p>

<p>Internet Explorer appears and displays the certificate services enrollment page.</p>

<p><li>Click the Retrieve The CA Certificate Or Certificate Revocation List radio button and then click next.</li></p>

<p><li>Click the Download Latest Certificate Revocation List hyperlink.</li></p>

<p>The File Download dialog box appears.</p>

<p><li>Click the Open This File From Its Current Location radio button and then click OK.</li></p>

<p>The Certificate Revocation List dialog box appears.</p>

<p><li>Click the Revocation List tab.</li></p>

<p><li>In the Revoked Certificates box, click the item that appears.</li></p>

<p>In the Revocation entry box, the Serial number of the revoked certificate, the date of revocation, and the reason for revocation appear.</p>

<p><li>Click OK.</li></p>

<p><li>Close Internet Explorer.</li></p>
</ol>

<A NAME="609"><h2>Lesson Summary</h2></A>
<p>Windows 2000 includes a native PKI that is designed to take full advantage of the Windows 2000 security architecture. Public key cryptography is an asymmetric scheme that uses a pair of keys for encryption. To use public key encryption, a user must generate a public and private key pair. Public key encryption uses digital certificates to completely identify the key pair owner. The Windows 2000 certificate-based processes use the X.509 standard. Certificate Services enables an organization to manage the issuance, renewal, and revocation of digital certificates without having to rely on external CAs. Certificate Services supports policy independence, transport independence, adherence to standards, and key management. Certificate Services architectural elements include the server engine that handles certificate requests and other modules that perform tasks by communicating with the server engine. Certificate Services provides services for processing certificate requests and issuing digital certificates. You can install Certificate Services by using the Add/Remove Programs utility in Control Panel or optionally during Windows 2000 Server installation. The tools used to administer Certificate Services once it is installed are the Certification Authority snap-in, the Certutil utility, and the Certificate Services enrollment Web page.</p>

</BODY>
</HTML>



