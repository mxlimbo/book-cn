<HTML>
<HEAD>
<TITLE>Lesson 3: Upgrading Software</TITLE>
<link rel="STYLESHEET" type="text/css" href="upwin2k.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm", "ch07e.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="359"><H1>Lesson 3: Upgrading Software</H1></A>

<p>You must be able to upgrade users' software to ensure that
users' computers have the most current version of an
organization's software. There are two types of upgrades: mandatory
and optional. Knowing how to deploy both mandatory and optional
upgrades helps you to keep existing software installations current. You
should also understand the requirements and implications of upgrading
software and know when to make an upgrade mandatory or optional.</p>

<p>
<div class="sidebar"><blockquote>
<p><b>After this lesson, you will be able to:</b></p>

<ul>
<p><li>Explain how to upgrade software using Software Installation
group policies.</li></p>

<p><li>Explain how to remove software using Software Installation
group policies.</li></p>
</ul>


<p><b>Estimated lesson time: 30 minutes</b></p>
</blockquote></div>
</p>

<A NAME="360"><H2>Deploying Mandatory Upgrades</H2></A>

<p>Mandatory upgrades automatically replace an older version of a
program with the upgraded version. For example, if users are currently
using version 3.0 of a program, this version will be removed, and
version 4.0 of the program will be installed.</p>

<p>To deploy a mandatory upgrade, in Software Installation, right-click
the new version and click Properties. In the package file's
Properties dialog box, select the Upgrades tab. In the Packages That
This Package Will Upgrade section, click Add, and then select the older
version of the program that you want to upgrade. If both versions of
the program are native Windows Installer packages, this step will be
done automatically because native Windows Installer packages detect the
native package files that they update. If the older version has been
installed, it will be replaced with the newer version the next time
that the user activates the program. You can use this same strategy to
change from one vendor's product to another.</p>

<A NAME="361"><H2>Deploying Optional Upgrades</H2></A>

<p>Optional upgrades allow users to use either the old or the new
version of a program. After an optional upgrade, users can also install
and use both versions of the application simultaneously. To deploy an optional upgrade,
right-click the new version in Software Installation and click Properties. Then
select the Upgrades tab in the package file's Properties dialog box.</p>

<p>In the Packages That This Package Will Upgrade section, click Add,
and then select the older version of the program. If both versions of the
program are native Windows Installer packages, this step will be done
automatically. Clear the Required Upgrade For Existing Packages check box, and then click
OK.</p>

<p>If the older version has been installed, existing shortcuts will
still launch the older version. The next time the user logs on, the
user can install either version from Add/Remove Programs. Document
invocation will only install the newer version if the GPO deploying the newer version has the highest order of
precedence.</p>

<p>If the older version has not yet been installed, the next time that
the user logs on, advertised shortcuts will start an installation of
the newer version. The user can install either version from Add/Remove
Programs, and document invocation will only install the later version
if the GPO deploying the later version has the highest order of
precedence.</p>

<p>If you want new users to install the newer version of the program
but don't want to uninstall the application for people who are
currently using the older version of the program, deploy the newer
version as an optional upgrade, and then disable the older version.
Disabling software is discussed later in this chapter.</p>

<A NAME="362"><H2>Redeploying Software</H2></A>

<p>Windows 2000 makes deploying service packs and software patches
remarkably easy. When you mark a package file for redeployment, the
application is readvertised to everyone who has been granted access to
the program, either through assigning or publishing. Then, depending on
how the original package was deployed, one of three things happen:</p>

<ul>
<p><li>If the application was published and installed, the Start
menu, desktop shortcuts, and registry settings relevant to that
application will be updated the next time that the user logs on. The
first time that the user starts the application, the service pack or
software patch will be automatically applied.</li></p>

<p><li>If the application was assigned to a user, the Start menu,
desktop shortcuts, and registry settings relevant to that application
will be updated the next time that the user logs on. The first time
that the user starts the application, the service pack or software
patch will be automatically applied.</li></p>

<p><li>If the application has been assigned to a computer, the
service pack or software patch will be automatically applied the next
time that the computer is turned on. The application does not need to
be activated for this to occur.</li></p>
</ul>


<p>To redeploy a software package, obtain the service pack or software
patch from the application vendor and place the files in the
appropriate installation folders. The service pack must include a new
Windows Installer package file (.MSI file). If it does not, you will be
unable to redeploy the software because the original package file will
contain instructions for deploying the new files added by the service
pack or software patch. Open the GPO that originally deployed the
application. In Software Installation, right-click the package
filename, point to All Tasks, and click Redeploy Application. In the
Redeployment dialog box, click Yes.</p>

<A NAME="363"><H2>Removing or Disabling Software</H2></A>

<p>Windows 2000 provides two options for dealing with software you no
longer want to deploy in your organization: you can either remove the
applications, or you can disable them.</p>

<A NAME="364"><H3>Removing Software</H3></A>

<p>To remove software, right-click the package file name in Software
Installation, point to All Tasks, and then click Remove. In the Remove
Software dialog box, select one of the options explained in Table 7.2,
and then click OK.</p>

<p><b>Table 7.2</b> <i>Remove Software Options</i></p>

<P>
<table cellpadding=5 width="95%">
<tr> 
<th>Option  </th>
<th>Description  </th></tr>
<tr>
<td valign="top">Immediately Uninstall The Software From Users And Computers (Forced Removal)</td>
<td valign="top">Software is automatically deleted from a computer, either the next time the computer is turned on (in the case of a computer group policy setting), or the next time a user logs on (in the case of a user group policy setting). Removal will take place before the desktop appears.  </td></tr>
<tr>
<td valign="top">Allow Users To Continue To Use The Software, But Prevent New Installations (Optional Removal) </td>
<td valign="top">Future installations of the software are not installed, but users can continue using existing installations.   </td></tr>
</table></p>


<A NAME="365"><H3>Removing Non-Windows Installer Software</H3></A>

<p>Only software that has been installed from a Windows Installer
package file can be removed using Group Policy. When software is
installed from a package file, an information cache is created on the
local hard disk. This cache contains information regarding the
applications that were installed, in addition to instructions on how to
uninstall them. When you issue a Group Policy command to remove
software, that command is directed to the local cache. If the steps for
removing the software can be found in the information cache, the
program will be removed. If those steps cannot be found, the order to remove the
software will be ignored. Any software that was installed without using Windows
Installer will have to be removed manually.</p>

<A NAME="366"><H2>Lesson Summary</H2></A>

<p>There are two types of upgrades: mandatory and optional. Mandatory
upgrades automatically replace an older version of a program with the
upgraded version. You can use this same strategy to change from one
vendor's product to another.</p>

<p>Optional upgrades allow users to use either the old or the new
version of a program. After an optional upgrade, users can install and
use both versions of the application simultaneously. The next time the
user logs on, the user can install either version from Add/Remove
Programs. If the older version has been installed, existing shortcuts will still launch the older version, but
document invocation will only install the newer version, if the GPO deploying
the newer version has the highest order of precedence.</p>

<p>Windows 2000 also makes deploying service packs and software patches
easy. When you mark a package file for redeployment, the application is
readvertised to everyone who has been granted access to the program,
either through assigning or publishing. In addition, Windows 2000
provides two options for dealing with software you no longer want to
deploy in your organization: you can either immediately remove the
applications, or you can allow users to continue to use them but
prevent new installations.</p>

</BODY>
</HTML>



