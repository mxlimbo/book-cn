<HTML>
<HEAD>
<TITLE>Lesson 5: Increasing Security with EFS</TITLE>
<link rel="STYLESHEET" type="text/css" href="upwin2k.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08e.htm", "ch08g.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="412"><H1>Lesson 5: Increasing Security with EFS</H1></A>

<p>The Microsoft Encrypting File System (EFS) provides encryption for
data in NTFS files stored on disk. EFS encryption is public key-based
and runs as an integrated-system service, making it easy to manage,
difficult to attack, and transparent to the file owner. If a user who
attempts to access an encrypted NTFS file has the private key to that
file, the file can be decrypted so that the user can open the file and
work with it transparently as a normal document. A user without the
private key is denied access.</p>

<p>Windows 2000 also includes the Cipher command-line utility, which
provides the ability to encrypt and decrypt files and folders from a command
prompt. Windows 2000 also provides a recovery agent. In the event that the
owner loses the private key, the recovery agent can still recover the
encrypted file.</p>

<p>
<div class="sidebar"><blockquote>
<p><b>After this lesson, you will be able to</b></p>

<ul>
<p><li>Encrypt folders and files.</li></p>

<p><li>Decrypt folders and files.</li></p>
</ul>

<p><b>Estimated lesson time: 40 minutes</b></p>
</blockquote></div>
</p>

<A NAME="413"><H2>Understanding EFS</H2></A>

<p>EFS allows users to encrypt NTFS files by using a strong public
key-based cryptographic scheme that encrypts all files in a folder.
Users with roaming profiles can use the same key with trusted remote
systems. No administrative effort is needed to begin, and most
operations are transparent. Backups and copies of encrypted files are also encrypted if they are in NTFS volumes. Files remain encrypted if you move or rename them, and encryption is not defeated by
temporary files created during editing and left unencrypted in the
paging file or in a temporary file.</p>

<p>Enterprises can set policies to recover EFS-encrypted data when
necessary. The recovery policy is integrated with overall Windows 2000
security policy. Control of this policy can be delegated to individuals
with recovery authority, and different recovery policies can be
configured for different parts of the enterprise. Data recovery
discloses only the recovered data, not the key that was used to encrypt
the file. Several protections are in place to ensure that data recovery
is possible and that no data is lost in the case of total system
failure.</p>

<p>EFS is implemented either from Windows Explorer or from the command
line. It can be enabled or disabled for a computer, domain, or
organizational unit (OU) by resetting recovery policy in the Group
Policy console in MMC.</p>

<p>You can use EFS to encrypt and decrypt files on remote file servers
but not to encrypt data that is transferred over the network.
Windows 2000 provides network protocols, such as Secure Sockets Layer
authentication, to encrypt data over the network.</p>

<p>Table 8.7 lists the key features provided by Windows 2000 EFS.</p>

<p><b>Table 8.7</b> <i>EFS Features</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Feature</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">Transparent encryption</td>
<td valign="top">In EFS, file encryption does not require the
file owner to  decrypt and re-encrypt the file on each use. Decryption  and encryption happen transparently on file reads and  writes to disk.</td>
</tr>
<tr>
<td valign="top">Strong protection of encryption keys</td>
<td valign="top">Public-key encryption resists all but the most
sophisticated methods of attack. Therefore, in EFS, the
file-encryption keys that are used to encrypt the file are encrypted by using a public key from the user's certificate. (Note Windows 2000 uses X.509 v3 certificates.)  The list of encrypted file-encryption keys is stored with the encrypted file and is unique to it. To decrypt the file-encryption keys, the file owner supplies a private  key, which only the file owner has.</td>
</tr>
<tr>
<td valign="top">Integral data-recovery system</td>
<td valign="top">If the owner's private key is
unavailable, the recovery agent can open the file using his or her own private key  There can be more than one recovery agent, each with a  different public key, but at least one public recovery key  must be present on the system to encrypt a file.</td>
</tr>
<tr>
<td valign="top">Secure temporary and paging files</td>
<td valign="top">Many applications create temporary files while
you edit a document, and these temporary files can be left unencrypted on the disk. On computers running  Windows 2000, EFS is implemented at the folder level, so any temporary copies of an encrypted file are also  encrypted, provided that all files are on NTFS volumes. EFS resides in the Windows operating system kernel and uses the nonpaged pool to store file encryption keys, ensuring that they are never copied to the paging file.</td>
</tr>
</table>
</p>

<A NAME="414"><H2>Encryption</H2></A>

<p>The recommended method to encrypt files is to create an NTFS folder
and then &quot;encrypt&quot; the folder. To &quot;encrypt&quot; a
folder, in the Properties dialog box for the folder, select the General
tab. On the General tab, click the Advanced button, and then click the
Encrypt Contents To Secure Data check box. All files placed in the
folder are encrypted. The folder is now marked for encryption. Folders
that are marked for encryption are not actually encrypted; only the
files within the folder are encrypted.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Compressed files cannot be encrypted, and encrypted files
cannot be compressed.
</blockquote></div>
</p>

<p>After you encrypt the folder, when you save a file in that folder,
the file is encrypted by using file encryption keys, which are fast symmetric keys
designed for bulk encryption. The file is encrypted in blocks, with a
different file encryption key for each block. All of the file
encryption keys are stored, encrypted, in the Data Decryption Field
(DDF) and the Data Recovery Field (DRF) in the file header.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
By default, encryption provided by EFS is standard 56-bit
encryption. For additional security, North American users can obtain
128-bit encryption by ordering the Enhanced CryptoPAK from Microsoft.
Files encrypted by the CryptoPAK cannot be decrypted, accessed, or
recovered on a system that supports the 56-bit encryption only.
</blockquote></div>
</p>

<p>You use a file that you encrypted just like you would use any other
file. Encryption is transparent. You do not need to decrypt a file you
encrypted before you can use it. When you open an encrypted file, your
private key is applied to the DDF to unlock the list of file-encryption
keys, allowing the file contents to appear in plain text. EFS automatically detects an encrypted file and
locates a user certificate and associated private key. You open the
file, make changes to it, and save it, like you would any other file.
However, if someone else tries to open your encrypted file, he or she
is unable to access the file and receives an access denied message.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Encrypted files cannot be shared.
</blockquote></div>
</p>

<A NAME="415"><H2>Decryption</H2></A>

<p>Decrypting a folder or file refers to unchecking the Encrypt
Contents To Secure Data check box in a folder's or file's
Advanced Attributes dialog box, which you access from the folder's
or file's Properties dialog box. Once decrypted, the file remains
decrypted until you check the Encrypt Contents To Secure Data check
box. The only reason you might want to decrypt a file would be if other
people needed access to the folder or file; for example, if you want to
share the folder or make the file available across the network.</p>

<A NAME="416"><H2>The Cipher Command</H2></A>

<p>Windows 2000 also includes command-line utilities for the richer
functionality that is required for some administrative operations. The
Cipher command-line utility provides the ability to encrypt and decrypt
files and folders from a command prompt.</p>

<p>The following example shows the available options for the Cipher
command. Table 8.8 describes these options.</p>

<p>cipher [/e | /d] [/s:<i>folder_name</i>] [/a] [/i] [/f] [/q] [/h]
[/k] [<i>file_name</i> [...]]</p>

<p><b>Table 8.8</b> <i>Cipher Command Options and Descriptions</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Option</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">/e</td>
<td valign="top">Encrypts the specified folders. Folders are marked so that files
that are  added later will be encrypted.</td>
</tr>
<tr>
<td valign="top">/d</td>
<td valign="top">Decrypts the specified folders. Folders are marked so that files
that are  added later will not be encrypted.</td>
</tr>
<tr>
<td valign="top">/s</td>
<td valign="top">Performs the specified operation on files in the given folder and
all  subfolders.</td>
</tr>
<tr>
<td valign="top">/a</td>
<td valign="top">Performs the operation for files as well as directories. If the
parent  directory is not encrypted, the encrypted file could become
decrypted  when it is modified. It is recommended you encrypt both the file
and  the parent directory.</td>
</tr>
<tr>
<td valign="top">/i</td>
<td valign="top">Continues performing the specified operation even after errors
have  occurred. By default, Cipher stops when an error is encountered.</td>
</tr>
<tr>
<td valign="top">/f</td>
<td valign="top">Forces the encryption operation on all specified files, even
those that are  already encrypted. Files that are already encrypted are skipped by
default.</td>
</tr>
<tr>
<td valign="top">/q</td>
<td valign="top">Reports only the most essential information.</td>
</tr>
<tr>
<td valign="top">/h</td>
<td valign="top">Displays files with the hidden or system attribute. These files
are  omitted by default.</td>
</tr>
<tr>
<td valign="top">/k</td>
<td valign="top">Creates a new file encryption key for the user running
Cipher.  If this option is chosen, all the other options will be ignored.</td>
</tr>
<tr>
<td valign="top"><i>file_name</i></td>
<td valign="top">Specifies a pattern, file, or folder.</td>
</tr>
</table>
</p>

<p>If you run the Cipher command without parameters, it displays the
encryption state of the current folder and any files that it contains.
You can specify multiple filenames and use wildcards. You must put
spaces between multiple parameters.</p>

<A NAME="417"><H2>Recovery Agent</H2></A>

<p>If the owner's private key is unavailable, a person designated
as the recovery agent can open the file using his or her own private
key, which is applied to the DRF to unlock the list of file-encryption
keys. If the recovery agent is on another computer in the network, send
the file to the recovery agent. The recovery agent can bring his or her
private key to the owner's computer, but it is never a good
security practice to copy a private key onto another computer.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The default recovery agent is the administrator of the
local computer unless the computer is part of a domain. In a domain,
the domain administrator is the default recovery agent.
</blockquote></div>
</p>

<p>It is a good security practice to rotate recovery agents. However,
if the agent designation changes, access to the file is denied. For
this reason, it is recommended that recovery certificates and private
keys be kept until all files that are encrypted with them have been
updated.</p>

<p>The person designated as the recovery agent has a special
certificate and associated private key that allow data recovery. To
recover an encrypted file, the recovery agent would do the
following:</p>

<ol>
<p><li>Use Backup or another backup tool to restore a user's backup
version of the encrypted file or folder to the computer where his or
her file recovery certificate is located.</li></p>

<p><li>In Windows Explorer open the Properties dialog box for the file
or folder, and on the General tab, click the Advanced button.</li></p>

<p><li>Clear the Encrypt Contents To Secure Data check box.</li></p>

<p><li>Make a backup version of the decrypted file or folder and return
the backup version to the user.</li></p>
</ol>

<p>
<img src="images/practic.JPG" width=68 height=54 border="0">
</p>

<A NAME="418"><H2>Practice: Encrypting Files</H2></A>

<p>In this practice, you will encrypt a folder and its files.</p>

<A NAME="419"><H3>Exercise 1: Encryption</H3></A>


<p><li><b>To encrypt a file</b></li></p>

<ol>
<p><li>In Windows Explorer, create C:\Secret\File1.txt, and then
right-click File1 and click Properties.</li></p>

<p>Windows 2000 displays the Properties dialog box with the General tab
active.</p>

<p><li>Click Advanced.</li></p>

<p>The Advance Attributes dialog box appears.</p>

<p><li>Click the Encrypt Contents To Secure Data check box and then
click OK.</li></p>

<p><li>Click OK to close the File1 Properties dialog box.</li></p>

<p>An Encryption Warning dialog box informs you that you are about to
encrypt a file that is not in an encrypted folder. The default is to
encrypt the folder and file, but you may also choose to encrypt only
the file.</p>

<p><li>Click Cancel, and then click Cancel again to close the Owner
Properties dialog box.</li></p>

<p><li>In Windows Explorer, right-click C:\Secret and then click
Properties.</li></p>

<p><li>Click Advanced.</li></p>

<p>The Advance Attributes dialog box appears.</p>

<p><li>Click the Encrypt Contents To Secure Data check box and then
click OK.</li></p>

<p><li>Click OK to close the Secret Properties dialog box.</li></p>

<p>The Confirm Attribute Changes dialog box informs you that you are
about to encrypt a folder. You have two choices: You can encrypt only
this folder, or you can encrypt the folder and all subfolders and files
in the folder.</p>

<p><li>Select the Apply Changes To This Folder, Subfolders And Files
option, and then click OK.</li></p>

<p><li>In the Secret folder, right-click File1 and then click
Properties.</li></p>

<p>The File1 Properties dialog box appears.</p>

<p><li>Click Advanced.</li></p>

<p>The Advanced Attributes dialog box appears. Notice the Encrypt
Contents To Secure Data check box is selected.</p>

<p><li>Close the Advanced Attributes dialog box.</li></p>

<p><li>Close the Properties dialog box.</li></p>

<p><li>Close all windows and log off.</li></p>
</ol>

<A NAME="420"><H3>Exercise 2: Testing the Encrypted Files</H3></A>

<p>In this exercise, you will log on using the User Three account and
then attempt to open an encrypted file. You will then try to disable
encryption on the encrypted files.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
This is the first time you are logging on as User3.
Recall that the password is User3, but you will have to change it.
Change the password to <i>user.</i>
</blockquote></div>
</p>

<p><li><b>To test encrypt files</b></li></p>

<ol>
<p><li>Log on as User3 with a password of User3.</li></p>

<p><li>When prompted, change User3's password to <b>user</b>.</li></p>

<p><li>Start Windows Explorer and open C:\Secret\File1.txt.</li></p>

<p>What happens?  </p>

<p><li>Close Notepad.</li></p>
</ol>

<p><a href="chaaa.htm#723">Answer</a></p>

<p><li><b>To attempt to disable the encryption</b></li></p>

<ol>
<p><li>Right-click C:\Secret\File1.txt and then click Properties.</li></p>

<p><li>Click Advanced.</li></p>

<p><li>Clear the Encrypt Contents To Secure Data check box and then
click OK.</li></p>

<p><li>Click OK to close the File1 Properties dialog box.</li></p>

<p>The Error Applying Attributes dialog box appears and informs you
that access to the file is denied.</p>

<p><li>Click Cancel.</li></p>

<p><li>Close all open windows and dialog boxes.</li></p>

<p><li>Log off as User3 and log on as Administrator.</li></p>
</ol>

<A NAME="421"><H3>Exercise 3: Decrypting Folders and Files</H3></A>

<p>In this exercise, you will decrypt the folder and file that you
previously encrypted.</p>

<p><li><b>To decrypt files</b></li></p>

<ol>
<p><li>Start Windows Explorer.</li></p>

<p><li>Right-click C:\Secret\File1.txt, and then click Properties.</li></p>

<p><li>Click Advanced.</li></p>

<p><li>Clear the Encrypt Contents To Secure Data check box and then
click OK.</li></p>

<p><li>Click OK to close the File1 Properties dialog box.</li></p>

<p><li>Close Windows Explorer and log off.</li></p>
</ol>

<A NAME="422"><H2>Lesson Summary</H2></A>

<p>EFS provides the core file-encryption technology for storage of NTFS
files on disk. EFS allows users to encrypt NTFS files by using a strong
public key-based cryptographic scheme that encrypts all files in a
folder. Users with roaming profiles can use the same key with trusted remote systems. Backups
and copies of encrypted files are also encrypted if they are in NTFS
volumes. Files remain encrypted if you move or rename them, and
encryption is not defeated by leakage to paging files. Windows 2000 also provides a recovery
agent. In the event an owner loses the private key, the recovery agent can still
recover the encrypted file.</p>

<p>EFS is implemented either from Windows Explorer or from the command
line, using commands such as Cipher. EFS can be enabled or disabled for
a computer, domain, or organizational unit (OU) by resetting recovery
policy in the Group Policy console in MMC.</p>

<p>You can use EFS to encrypt and decrypt files on remote file servers,
but not to encrypt data that is transferred over the network.
Windows 2000 provides network protocols, such as Secure Sockets Layer,
to encrypt data over the network.</p>

</BODY>
</HTML>



