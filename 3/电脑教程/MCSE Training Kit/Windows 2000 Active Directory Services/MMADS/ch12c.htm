<html>
<head>
<title>Lesson 2: Group Policy Implementation Planning</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="607"><h1>Lesson 2: Group Policy Implementation Planning</h1></A>
<p>Before implementing group policies, you should create a plan to manage them. You can plan your GPO settings and GPO implementation methods to provide the most efficient group policy management for your organization. This lesson examines GPO settings and GPO implementation strategies.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li> Recognize management options for group policies</li></p>
</ul>

<p><b>Estimated lesson time: 15 minutes</b></p>
</blockquote></div>
</p>

<A NAME="608"><h2>Designing GPOs by Setting Type</h2></A>
<p>You can create GPOs based on the type of settings they contain. There are three main GPO setting designs:</p>

<ul>
<p><li> <b>Single Policy Type</b> includes GPOs that deliver a single type of group policy setting&#8212;for example, a GPO that includes only security settings.</li></p>

<p><li> <b>Multiple Policy Type</b> includes GPOs that deliver multiple types of group policy settings&#8212;for example, a GPO that includes both software settings and application deployment, or a GPO that includes security and scripts settings.</li></p>

<p><li> <b>Dedicated Policy Type</b> includes GPOs dedicated to either computer configuration or user configuration group policies.</li></p>
</ul>

<p>Figure 12.6 illustrates these GPO setting types.</p>

<p>
<A HREF="javascript:fullSize('12wtk06x.htm')"> <img src="images/12wtk06.JPG" width=404 height=224 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.6</b> <i>GPO setting types</i><!-- /caption -->
</p>


<A NAME="609"><h3>Single Policy Type</h3></A>
<p>With this approach, the goal is to separate each type of group policy setting into a separate GPO. To do this, create a GPO for software management settings, a GPO for user documents and settings, a GPO for software policies, and so on. Give Read/Write access only to the user or users who need to administer a GPO.</p>

<p>This model is best suited for organizations in which administrative responsibilities are delegated among several individuals.</p>

<A NAME="610"><h3>Multiple Policy Type</h3></A>
<p>With this approach, the goal is to include multiple types of group policy settings in a single GPO.</p>

<p>This model is best suited for organizations in which administrative responsibilities are centralized and an administrator may need to perform many or all types of group policy administration.</p>

<A NAME="611"><h3>Dedicated Policy Type</h3></A>
<p>With this approach, the goal is to include all user configuration group policy 
settings in one GPO and all computer configuration group policy settings in a separate GPO. This model increases the number of GPOs that must be processed at logon, thereby lengthening logon time, but it can aid in troubleshooting. For example, if a problem with computer configuration policy is suspected, an 
administrator can log on as a user who has no user configuration policy assigned so user policy can be eliminated as a factor.</p>

<A NAME="612"><h2>GPO Implementation Strategies</h2></A>
<p>When planning an Active Directory structure, consider how group policy will 
be implemented for the organization. Delegation of authority, separation of 
administrative duties, central versus decentralized administration, and design flexibility are important factors to be considered when designing group policy and selecting which scenarios to adapt for an organization.</p>

<p>The group policy implementation strategies described in this section are samples that illustrate principles of design for group policy. Most organizations will combine several of these strategies to create custom solutions.</p>

<A NAME="613"><h2>Layered vs. Monolithic GPO Design</h2></A>
<p>These design strategies provide decentralized (layered) and centralized 
(monolithic) locations for policy settings within GPOs.</p>

<A NAME="614"><h3>Layered GPO Design</h3></A>
<p>With a layered GPO approach (see Figure 12.7), the goal is to include a specific policy setting in as few GPOs as possible. When a change is required, only one (or few) GPO(s) has to be changed to enforce the change. Administration is 
simplified at the expense of a somewhat longer logon time (due to multiple 
GPO processing).</p>

<p>To achieve this goal, create a base GPO to be applied to the domain that contains policy settings for as many users and computers in the domain as possible. For example, the base GPO could contain corporate- or group-wide security 
settings such as account and password restrictions.</p>

<p>Next, create additional GPOs tailored to the common requirements of each 
corporate group, such as engineering, sales, marketing, executives, and administrative assistants, and apply them to the appropriate OUs.</p>

<p>This model is best suited for environments in which different groups in the organization have common security concerns and changes to group policy are frequent.</p>

<A NAME="615"><h3>Monolithic GPO Design</h3></A>
<p>With a monolithic GPO approach (see Figure 12.7), the goal is to use very few GPOs (ideally only one) for any given user or computer. All of the policy settings required for a given site, domain, or OU should be implemented within a single GPO. If the site, domain, or OU has groups of users or computers with different policy requirements, consider subdividing the container into OUs and applying separate GPOs to each OU rather than to the parent.</p>

<p>A change in the monolithic design involves more administration than the layered approach because the settings may need to be changed in multiple GPOs, but logon time will be shorter.</p>

<p>This model is best suited for environments in which users and computers can be classified into a small number of groups for policy assignment.</p>

<p>
<A HREF="javascript:fullSize('12wtk07x.htm')"> <img src="images/12wtk07.JPG" width=404 height=285 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.7</b> <i>Layered vs. monolithic design</i><!-- /caption -->
</p>


<A NAME="616"><h2>Functional Roles vs. Team Design</h2></A>
<p>Active Directory's OU structure was designed to facilitate ease of administration and delegation of authority. The OU structure may represent the functional roles within the organization or it may not. When designing group policy for an organization with a functional role OU structure, design the group policy by delegating control to the OU levels. If the OU architecture does not represent group organization, then use OU delegation of control, but also choose to use groups as a filtering mechanism for applying group policy.</p>

<A NAME="617"><h3>Functional Roles Design</h3></A>
<p>With this approach (see Figure 12.8), the goal is to use an OU structure that 
reflects the functional roles within the organization for applying group policy. 
A minimum number of GPOs is used, with each tailored to a group's 
specific needs.</p>

<p>To do this, create a GPO for each OU. Network administrators can set access control list (ACL) permissions for GPO administration either at the domain 
administrator level or at each OU administrator level.</p>

<p>This model is best suited for organizations designed according to functional roles&#8212;groups of users organized according to users' occupations such as 
engineering, sales, marketing, and so on. Each functional role requires specific group policies. The OU architecture reflects the functional roles within the 
organization.</p>

<A NAME="618"><h3>Team Design</h3></A>
<p>With this approach (see Figure 12.8), the goal is to use groups as a filtering mechanism in applying group policy in an organization that uses the virtual team concept. Individuals within the organization form teams to perform a task or project and each individual is a member of multiple teams. Each team has 
specific group policy requirements.</p>

<p>To do this, create GPOs for each virtual team. As users can exist in only one OU at a time, it is best to create a single GPO at the top of the hierarchy that filters down to each OU. Then, create GPOs for each team as necessary. This approach eliminates complexity by strategically applying the GPOs at only one location, allowing administrators to centrally administer the GPOs and minimizing the GPO-to-OU assignments.</p>

<p>This model is best suited for organizations that need an efficient and flexible method of managing group policy in a dynamic environment with an OU 
architecture that does not reflect the team structure.</p>

<p>
<A HREF="javascript:fullSize('12wtk08x.htm')"> <img src="images/12wtk08.JPG" width=404 height=253 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.8</b> <i>Functional roles vs. team design</i><!-- /caption -->
</p>


<A NAME="619"><h2>OU Delegation with Central or Distributed Control</h2></A>
<p>The administration of OUs can be delegated and OU administrators may need to be allowed to block group policies that have been assigned to their OUs at higher organizational levels. However, certain policies may need to be enforced and OU administrators will not be allowed to block them. This can be accomplished using a central or distributed control design.</p>

<A NAME="620"><h3>Central Control Design</h3></A>
<p>With this approach (see Figure 12.9), administration is delegated to OU 
administrators, yet there is also centralized control.</p>

<p>To do this, use the No Override option on OUs. For example, create a GPO 
including only security settings for a domain, and then set the No Override 
option so that all child OUs are affected by the security options specified at the domain level. For all other types of policy, control of those GPOs could be 
delegated to the specific OU administrators.</p>

<p>This model is best suited for organizations that choose to delegate administration of OUs, but would like to enforce certain group policies throughout the domain (for example, specific security policies).</p>

<A NAME="621"><h3>Distributed Control Design</h3></A>
<p>With this approach (see Figure 12.9), administrators of OUs are allowed to block group policies from being applied to their OU. However, the administrator cannot block group policies that are marked as No Override.</p>

<p>To do this, create GPOs for each OU. Set ACL permission allowing OU administrators full control over GPOs. Then, set the Block Policy Inheritance option for each OU.</p>

<p>This model is best suited for organizations that choose to minimize the number of domains but do not want to sacrifice autonomous administration of OUs. It allows administrators to enforce certain group policies throughout the domain.</p>

<p>
<A HREF="javascript:fullSize('12wtk09x.htm')"> <img src="images/12wtk09.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.9</b> <i>Central vs. distributed control</i><!-- /caption -->
</p>


<A NAME="622"><h2>Lesson Summary</h2></A>
<p>In this lesson you learned that GPOs that deliver a single type or multiple types of group policy settings can be created. GPOs can also be dedicated to either computer configuration or user configuration group policies.</p>

<p>You also learned various strategies for implementing group policy. The layered GPO design model is best suited for environments in which different groups in the organization have common security concerns and changes to group policy are frequent. The monolithic GPO design model is best suited for environments in which users and computers can be classified into a small number of groups for policy assignment.</p>

<p>The functional role design model is best suited for organizations designed 
according to functional roles&#8212;groups of users organized according to users' 
occupations such as engineering, sales, marketing, and so on. The team design model is best suited for organizations that need an efficient and flexible method of managing group policy in a dynamic environment with an OU architecture that does not reflect the team structure.</p>

<p>The central control design model is best suited for organizations that choose to delegate administration of OUs, but would like to enforce certain group policies throughout the domain. The distributed control design model is best suited for organizations that choose to minimize the number of domains but do not want to sacrifice autonomous administration of OUs.</p>

</BODY>
</HTML>







