<html>
<head>
<title>Lesson 2: Windows 2000 Architecture Overview</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm", "ch01d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="30"><h1>Lesson 2: Windows 2000 Architecture Overview</h1></A>
<p>Windows 2000 is a modular operating system&#8212;a collection of small, self- 
contained software components that work together to perform operating system tasks. Each component provides a set of functions that act as an interface to the rest of the system.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li> Identify the layers and layer components in the Windows 2000 operating system architecture</li></p>
</ul>

<p><b>Estimated lesson time: 15 minutes</b></p>
</blockquote></div>
</p>

<A NAME="31"><h2>Windows 2000 Layers, Subsystems, and Managers</h2></A>
<p>The Windows 2000 architecture contains two major layers: user mode and kernel mode, as illustrated in Figure 1.3. This lesson provides an overview of the 
Windows 2000 architecture layers and their respective components.</p>

<p>
<A HREF="javascript:fullSize('01wtk03x.htm')"> <img src="images/01wtk03.JPG" width=404 height=335 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 1.3</b> <i>Windows 2000 architecture layers</i><!-- /caption -->
</p>


<A NAME="32"><h2>User Mode</h2></A>
<p>Windows 2000 has two different types of user mode components: <i>environment subsystems</i> and <i>integral subsystems</i>.</p>

<A NAME="33"><h2>Environment Subsystems</h2></A>
<p>One of the features of Windows 2000 is the ability to run applications written for different operating systems. Windows 2000 accomplishes this through the use of environment subsystems. <i>Environment subsystems</i> emulate different operating systems by presenting the application programming interfaces (APIs) that the applications expect to be available. The environment subsystems accept the API calls made by the application, convert the API calls into a format understood by Windows 2000, and then pass the converted API to the Executive Services for processing.</p>

<p>Table 1.2 lists the environment subsystems included with Windows 2000.</p>

<p><b>Table 1.2</b> <i>Environment Subsystems Included with Windows 2000</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Environment Subsystem  </th>
<th>Function  </th></tr>
<tr>
<td valign="top">Windows 2000 32-bit Windows-based subsystem (Win32)</td>
<td valign="top"> Responsible for controlling Win32-based applications, as  well as for providing an environment for Win16 and  Microsoft MS-DOS-based applications. Controls all screen-oriented input/output (I/O) between subsystems. This ensures a consistent user interface, regardless of the application a user runs.  </td></tr>
<tr>
<td valign="top">OS/2 subsystem  </td>
<td valign="top">Provides a set of APIs for 16-bit, character mode OS/2 applications. </td></tr>
<tr>
<td valign="top">Portable Operating System Interface for UNIX (POSIX) 
subsystem  </td>
<td valign="top">Provides APIs for POSIX-based applications.   </td></tr>
</table></p>


<p>The environment subsystems and the applications that run within them are 
subject to the following limitations and restrictions:</p>

<ul>
<p><li> They have no direct access to hardware.</li></p>

<p><li> They have no direct access to device drivers.</li></p>

<p><li> They have no access to the certain Clipboard API operations.</li></p>

<p><li> They have no access to certain Microsoft CD-ROM Extensions (MSCDEX).</li></p>

<p><li> They have no access to task-switching APIs.</li></p>

<p><li> They are limited to an assigned address space.</li></p>

<p><li> They are forced to use hard disk space as virtual random access memory (RAM) whenever the system needs memory.</li></p>

<p><li> They run at a lower priority level than kernel mode processes.</li></p>

<p><li> Because they run at a lower priority level than the kernel mode processes, they have less access to central processing unit (CPU) cycles than processes that run in kernel mode.</li></p>
</ul>

<A NAME="34"><h3>Integral Subsystems</h3></A>
<p>Many different integral subsystems perform essential operating system functions. In Figure 1.3, there is a generic subsystem on the far right of the figure labeled <i>integral subsystem.</i> This integral subsystem represents any of the various integral subsystems. To introduce you to some of the more important integral subsystems, Table 1.3 lists some examples.</p>

<p><b>Table 1.3</b> <i>Windows 2000 Integral Subsystems</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Integral Subsystem  </th>
<th>Function  </th></tr>
<tr>
<td valign="top">Security subsystem  </td>
<td valign="top">Tracks rights and permissions associated with user 
 accounts. Tracks which system resources are audited. 
 Accepts user logon requests. Initiates logon authentication.  </td></tr>
<tr>
<td valign="top">Workstation service   </td>
<td valign="top">Networking integral subsystem that provides an API to access the network redirector. Allows a user running 
 Windows 2000 to access the network.  </td></tr>
<tr>
<td valign="top">Server service   </td>
<td valign="top">Networking integral subsystem that provides an API to access the network server. Allows a computer running Windows 2000 to provide network resources.  </td></tr>
</table></p>

<A NAME="35"><h2>Kernel Mode</h2></A>
<p>The kernel mode layer has access to system data and hardware. Kernel mode provides direct access to memory and executes in an isolated memory area. Kernel mode consists of four components: Windows 2000 Executive, Device Drivers, the Microkernel, and the Hardware Abstraction Layer (HAL).</p>

<A NAME="36"><h3>Windows 2000 Executive</h3></A>
<p>This component performs most of the I/O and object management, including 
security. It does not perform screen and keyboard I/O; the Microsoft Win32 
subsystem performs these functions. The Windows 2000 Executive contains the Windows 2000 kernel mode components. Each of these components provides 
the following two distinct sets of services and routines:</p>

<ul>
<p><li> <b>System services</b> are available to both the user mode subsystems and to other Executive components.</li></p>

<p><li> <b>Internal routines</b> are available only to other components within the Executive.</li></p>
</ul>

<p>The Executive consists of the kernel mode components listed in Table 1.4.</p>

<p><b>Table 1.4</b> <i>Windows 2000 Executive Components</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Component  </th>
<th>Function  </th></tr>
<tr>
<td valign="top">I/O Manager   </td>
<td valign="top">Manages input from and the delivery of output to different 
 devices. The components that make up the I/O Manager include the following: <i>File systems</i> accept the oriented I/O requests and translate these requests into device-specific calls. The network redirector and the network server are both implemented as file system drivers. <i>Device drivers</i> are low-level drivers that directly manipulate hardware to accept input or to write output. <i>Cache Manager</i> improves disk I/O by storing disk reads in system memory. Cache Manager also improves write performance by caching write requests and writes to disk in the background.  </td></tr>
<tr>
<td valign="top">Security Reference Monitor  </td>
<td valign="top">Enforces security policies on the local computer.   </td></tr>
<tr>
<td valign="top">Interprocess Communication (IPC) Manager   </td>
<td valign="top">Manages communications between clients and servers, for 
example, between an environment subsystem (which would be acting like a client requesting information) and an Executive 
 Services component (which would be acting like a server and 
 satisfying the request for information). The IPC Manager consists 
 of the following two components: <i>Local procedure call (LPC) facility</i> manages communications when clients and servers exist on the same computer. <i>Remote procedure call (RPC) facility</i> manages communications when clients and servers exist on separate computers.  </td></tr>
<tr>
<td valign="top">Virtual Memory Manager (VMM)   </td>
<td valign="top">Implements and controls <i>virtual memory</i>, a memory management system that provides and protects the private address space for each process. The VMM also controls demand paging. <i>Demand paging</i> allows the use of disk space as a storage area to move code and data in and out of physical RAM.  </td></tr>
<tr>
<td valign="top">Process Manager   </td>
<td valign="top">Creates and terminates processes and threads. (A <i>process</i> is a 
 program or part of a program. A <i>thread</i> is a specific set of commands within a program.)  </td></tr>
<tr>
<td valign="top">Plug and Play   </td>
<td valign="top">Maintains central control of the Plug and Play process. Communicates with device drivers, directing the drivers to add and start devices.  </td></tr>
<tr>
<td valign="top">Power Manager   </td>
<td valign="top">Controls power management APIs, coordinates power events, and 
 generates power management requests.  </td></tr>
<tr>
<td valign="top">Window Manager and Graphical Device Interface (GDI)   </td>
<td valign="top">These two components, implemented as a single device driver named Win32k.sys, manage the display system. They perform the following functions: <i>Window Manager</i> controls window displays and  manages screen output. This component is also responsible for receiving input from devices such as the keyboard and the mouse and then passing the input messages to applications. <i>GDI</i> contains the 
 functions that are required for drawing and manipulating graphics.  </td></tr>
<tr>
<td valign="top">Object Manager   </td>
<td valign="top">Creates, manages, and deletes objects that represent operating system resources, such as processes, threads, and data structures.  </td></tr>
</table></p>

<A NAME="37"><h3>Device Drivers</h3></A>
<p>This component translates driver calls into hardware manipulation.</p>

<A NAME="38"><h3>Microkernel</h3></A>
<p>This component manages the microprocessor only. The kernel coordinates all I/O functions and synchronizes the activities of the Executive Services.</p>

<A NAME="39"><h3>Hardware Abstraction Layer (HAL)</h3></A>
<p>This component virtualizes, or hides, the hardware interface details, making Windows 2000 more portable across different hardware architectures. The HAL contains the hardware-specific code that handles I/O interfaces, interrupt controllers, and multiprocessor communication mechanisms. This layer allows Windows 2000 to run on both Intel-based and Alpha-based systems without having to maintain two separate versions of Windows 2000 Executive.</p>

<A NAME="40"><h2>Lesson Summary</h2></A>
<p>This lesson introduced you to the Windows 2000 architecture. The Windows 2000 architecture contains two major layers: user mode and kernel mode. User mode has two different types of components: environment subsystems, which allow Windows 2000 to run applications written for different operating systems, and integral subsystems, which perform essential operating system functions. The kernel mode layer has access to system data and hardware, provides direct access to memory, and executes in an isolated memory area.</p>

</BODY>
</HTML>







