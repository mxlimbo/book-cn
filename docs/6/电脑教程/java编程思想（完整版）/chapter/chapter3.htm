<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Thinking in Java | Chinese Version by Trans Bot</title>

<meta name="Microsoft Theme" content="inmotion 111, default"></head>

<body background="../_themes/inmotion/inmtextb.gif" bgcolor="#FFFFCC" text="#000000" link="#800000" vlink="#996633" alink="#FF3399">
<center>
-------------------------------------------------<br>
<br>
<font color=blue><b>本教程由<a href="../about/index.htm">yyc,spirit</a>整理</b></font><br>
<br>
-------------------------------------------------
</center><br><br>

<p>第3章 控制程序流程<br>
<br>
“就象任何有感知的生物一样，程序必须能操纵自己的世界，在执行过程中作出判断与选择。”<br>
<br>
在Java里，我们利用运算符操纵对象和数据，并用执行控制语句作出选择。Java是建立在C++基础上的，所以对C和C++程序员来说，对Java这方面的大多数语句和运算符都应是非常熟悉的。当然，Java也进行了自己的一些改进与简化工作。<br>
<br>
3.1 使用Java运算符<br>
运算符以一个或多个自变量为基础，可生成一个新值。自变量采用与原始方法调用不同的一种形式，但效果是相同的。根据以前写程序的经验，运算符的常规概念应该不难理解。<br>
加号（+）、减号和负号（-）、乘号（*）、除号（/）以及等号（=）的用法与其他所有编程语言都是类似的。<br>
所有运算符都能根据自己的运算对象生成一个值。除此以外，一个运算符可改变运算对象的值，这叫作“副作用”（Side 
Effect）。运算符最常见的用途就是修改自己的运算对象，从而产生副作用。但要注意生成的值亦可由没有副作用的运算符生成。<br>
几乎所有运算符都只能操作“主类型”（Primitives）。唯一的例外是“=”、“==”和“!=”，它们能操作所有对象（也是对象易令人混淆的一个地方）。除此以外，String类支持“+”和“+=”。<br>
<br>
3.1.1 优先级<br>
运算符的优先级决定了存在多个运算符时一个表达式各部分的计算顺序。Java对计算顺序作出了特别的规定。其中，最简单的规则就是乘法和除法在加法和减法之前完成。程序员经常都会忘记其他优先级规则，所以应该用括号明确规定计算顺序。例如：<br>
A = X + Y - 2/2 + Z;<br>
为上述表达式加上括号后，就有了一个不同的含义。<br>
A = X + (Y - 2)/(2 + Z);<br>
<br>
3.1.2 赋值<br>
赋值是用等号运算符（=）进行的。它的意思是“取得右边的值，把它复制到左边”。右边的值可以是任何常数、变量或者表达式，只要能产生一个值就行。但左边的值必须是一个明确的、已命名的变量。也就是说，它必须有一个物理性的空间来保存右边的值。举个例子来说，可将一个常数赋给一个变量（A=4;），但不可将任何东西赋给一个常数（比如不能4=A）。<br>
对主数据类型的赋值是非常直接的。由于主类型容纳了实际的值，而且并非指向一个对象的句柄，所以在为其赋值的时候，可将来自一个地方的内容复制到另一个地方。例如，假设为主类型使用“A=B”，那么B处的内容就复制到A。若接着又修改了A，那么B根本不会受这种修改的影响。作为一名程序员，这应成为自己的常识。<br>
但在为对象“赋值”的时候，情况却发生了变化。对一个对象进行操作时，我们真正操作的是它的句柄。所以倘若“从一个对象到另一个对象”赋值，实际就是将句柄从一个地方复制到另一个地方。这意味着假若为对象使用“C=D”，那么C和D最终都会指向最初只有D才指向的那个对象。下面这个例子将向大家阐示这一点。<br>
这里有一些题外话。在后面，大家在代码示例里看到的第一个语句将是“package 
03”使用的“package”语句，它代表本书第3章。本书每一章的第一个代码清单都会包含象这样的一个“package”（封装、打包、包裹）语句，它的作用是为那一章剩余的代码建立章节编号。在第17章，大家会看到第3章的所有代码清单（除那些有不同封装名称的以外）都会自动置入一个名为c03的子目录里；第4章的代码置入c04；以此类推。所有这些都是通过第17章展示的CodePackage.java程序实现的；“封装”的基本概念会在第5章进行详尽的解释。就目前来说，大家只需记住象“package 
03”这样的形式只是用于为某一章的代码清单建立相应的子目录。<br>
为运行程序，必须保证在classpath里包含了我们安装本书源码文件的根目录（那个目录里包含了c02，c03c，c04等等子目录）。<br>
对于Java后续的版本（1.1.4和更高版本），如果您的main()用package语句封装到一个文件里，那么必须在程序名前面指定完整的包裹名称，否则不能运行程序。在这种情况下，命令行是：<br>
java c03.Assignment<br>
运行位于一个“包裹”里的程序时，随时都要注意这方面的问题。<br>
下面是例子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Assignment.java</font>
<font color=#009900>// Assignment with objects is a bit tricky</font>
<font color=#0000ff>package</font> c03;

<font color=#0000ff>class</font> Number {
  <font color=#0000ff>int</font> i;
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Assignment {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Number n1 = <font color=#0000ff>new</font> Number();
    Number n2 = <font color=#0000ff>new</font> Number();
    n1.i = 9;
    n2.i = 47;
    System.out.println(<font color=#004488>"1: n1.i: "</font> + n1.i +
      <font color=#004488>", n2.i: "</font> + n2.i);
    n1 = n2;
    System.out.println(<font color=#004488>"2: n1.i: "</font> + n1.i +
      <font color=#004488>", n2.i: "</font> + n2.i);
    n1.i = 27;
    System.out.println(<font color=#004488>"3: n1.i: "</font> + n1.i +
      <font color=#004488>", n2.i: "</font> + n2.i);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><br>
Number类非常简单，它的两个实例（n1和n2）是在main()里创建的。每个Number中的i值都赋予了一个不同的值。随后，将n2赋给n1，而且n1发生改变。在许多程序设计语言中，我们都希望n1和n2任何时候都相互独立。但由于我们已赋予了一个句柄，所以下面才是真实的输出：<br>
1: n1.i: 9, n2.i: 47<br>
2: n1.i: 47, n2.i: 47<br>
3: n1.i: 27, n2.i: 27<br>
看来改变n1的同时也改变了n2！这是由于无论n1还是n2都包含了相同的句柄，它指向相同的对象（最初的句柄位于n1内部，指向容纳了值9的一个对象。在赋值过程中，那个句柄实际已经丢失；它的对象会由“垃圾收集器”自动清除）。<br>
这种特殊的现象通常也叫作“别名”，是Java操作对象的一种基本方式。但假若不愿意在这种情况下出现别名，又该怎么操作呢？可放弃赋值，并写入下述代码：<br>
n1.i = n2.i;<br>
这样便可保留两个独立的对象，而不是将n1和n2绑定到相同的对象。但您很快就会意识到，这样做会使对象内部的字段处理发生混乱，并与标准的面向对象设计准则相悖。由于这并非一个简单的话题，所以留待第12章详细论述，那一章是专门讨论别名的。其时，大家也会注意到对象的赋值会产生一些令人震惊的效果。<br>
<br>
1. 方法调用中的别名处理<br>
将一个对象传递到方法内部时，也会产生别名现象。<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: PassObject.java</font>
<font color=#009900>// Passing objects to methods can be a bit tricky</font>

<font color=#0000ff>class</font> Letter {
  <font color=#0000ff>char</font> c;
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PassObject {
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> f(Letter y) {
    y.c = 'z';
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Letter x = <font color=#0000ff>new</font> Letter();
    x.c = 'a';
    System.out.println(<font color=#004488>"1: x.c: "</font> + x.c);
    f(x);
    System.out.println(<font color=#004488>"2: x.c: "</font> + x.c);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE><br>
在许多程序设计语言中，f()方法表面上似乎要在方法的作用域内制作自己的自变量Letter 
y的一个副本。但同样地，实际传递的是一个句柄。所以下面这个程序行：<br>
y.c = 'z';<br>
实际改变的是f()之外的对象。输出结果如下：<br>
1: x.c: a<br>
2: x.c: z<br>
别名和它的对策是非常复杂的一个问题。尽管必须等至第12章才可获得所有答案，但从现在开始就应加以重视，以便提早发现它的缺点。<br>
<br>
3.1.3 算术运算符<br>
Java的基本算术运算符与其他大多数程序设计语言是相同的。其中包括加号（+）、减号（-）、除号（/）、乘号（*）以及模数（%，从整数除法中获得余数）。整数除法会直接砍掉小数，而不是进位。<br>
Java也用一种简写形式进行运算，并同时进行赋值操作。这是由等号前的一个运算符标记的，而且对于语言中的所有运算符都是固定的。例如，为了将4加到变量x，并将结果赋给x，可用：x+=4。<br>
下面这个例子展示了算术运算符的各种用法：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: MathOps.java</font>
<font color=#009900>// Demonstrates the mathematical operators</font>
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> MathOps {
  <font color=#009900>// Create a shorthand to save typing:</font>
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
  <font color=#009900>// shorthand to print a string and an int:</font>
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> pInt(String s, <font color=#0000ff>int</font> i) {
    prt(s + <font color=#004488>" = "</font> + i);
  }
  <font color=#009900>// shorthand to print a string and a float:</font>
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> pFlt(String s, <font color=#0000ff>float</font> f) {
    prt(s + <font color=#004488>" = "</font> + f);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#009900>// Create a random number generator,</font>
    <font color=#009900>// seeds with current time by default:</font>
    Random rand = <font color=#0000ff>new</font> Random();
    <font color=#0000ff>int</font> i, j, k;
    <font color=#009900>// '%' limits maximum value to 99:</font>
    j = rand.nextInt() % 100;
    k = rand.nextInt() % 100;
    pInt(<font color=#004488>"j"</font>,j);  pInt(<font color=#004488>"k"</font>,k);
    i = j + k; pInt(<font color=#004488>"j + k"</font>, i);
    i = j - k; pInt(<font color=#004488>"j - k"</font>, i);
    i = k / j; pInt(<font color=#004488>"k </font><font color=#004488>/ j"</font>, i);
    i = k * j; pInt(<font color=#004488>"k * j"</font>, i);
    i = k % j; pInt(<font color=#004488>"k % j"</font>, i);
    j %= k; pInt(<font color=#004488>"j %= k"</font>, j);
    <font color=#009900>// Floating-point number tests:</font>
    <font color=#0000ff>float</font> u,v,w;  <font color=#009900>// applies to doubles, too</font>
    v = rand.nextFloat();
    w = rand.nextFloat();
    pFlt(<font color=#004488>"v"</font>, v); pFlt(<font color=#004488>"w"</font>, w);
    u = v + w; pFlt(<font color=#004488>"v + w"</font>, u);
    u = v - w; pFlt(<font color=#004488>"v - w"</font>, u);
    u = v * w; pFlt(<font color=#004488>"v * w"</font>, u);
    u = v / w; pFlt(<font color=#004488>"v </font><font color=#004488>/ w"</font>, u);
    <font color=#009900>// the following also works for</font>
    <font color=#009900>// char, byte, short, int, long,</font>
    <font color=#009900>// and double:</font>
    u += v; pFlt(<font color=#004488>"u += v"</font>, u);
    u -= v; pFlt(<font color=#004488>"u -= v"</font>, u);
    u *= v; pFlt(<font color=#004488>"u *= v"</font>, u);
    u /= v; pFlt(<font color=#004488>"u </font><font color=#004488>/= v"</font>, u);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
我们注意到的第一件事情就是用于打印（显示）的一些快捷方法：prt()方法打印一个String；pInt()先打印一个String，再打印一个int；而pFlt()先打印一个String，再打印一个float。当然，它们最终都要用System.out.println()结尾。<br>
为生成数字，程序首先会创建一个Random（随机）对象。由于自变量是在创建过程中传递的，所以Java将当前时间作为一个“种子值”，由随机数生成器利用。通过Random对象，程序可生成许多不同类型的随机数字。做法很简单，只需调用不同的方法即可：nextInt()，nextLong()，nextFloat()或者nextDouble()。<br>
若随同随机数生成器的结果使用，模数运算符（%）可将结果限制到运算对象减1的上限（本例是99）之下。<br>
<br>
1. 一元加、减运算符<br>
一元减号（-）和一元加号（+）与二元加号和减号都是相同的运算符。根据表达式的书写形式，编译器会自动判断使用哪一种。例如下述语句：<br>
x = -a;<br>
它的含义是显然的。编译器能正确识别下述语句：<br>
x = a * -b;<br>
但读者会被搞糊涂，所以最好更明确地写成：<br>
x = a * (-b);<br>
一元减号得到的运算对象的负值。一元加号的含义与一元减号相反，虽然它实际并不做任何事情。<br>
<br>
3.1.4 自动递增和递减<br>
和C类似，Java提供了丰富的快捷运算方式。这些快捷运算可使代码更清爽，更易录入，也更易读者辨读。<br>
两种很不错的快捷运算方式是递增和递减运算符（常称作“自动递增”和“自动递减”运算符）。其中，递减运算符是“--”，意为“减少一个单位”；递增运算符是“++”，意为“增加一个单位”。举个例子来说，假设A是一个int（整数）值，则表达式++A就等价于（A 
= A + 1）。递增和递减运算符结果生成的是变量的值。<br>
对每种类型的运算符，都有两个版本可供选用；通常将其称为“前缀版”和“后缀版”。“前递增”表示++运算符位于变量或表达式的前面；而“后递增”表示++运算符位于变量或表达式的后面。类似地，“前递减”意味着--运算符位于变量或表达式的前面；而“后递减”意味着--运算符位于变量或表达式的后面。对于前递增和前递减（如++A或--A），会先执行运算，再生成值。而对于后递增和后递减（如A++或A--），会先生成值，再执行运算。下面是一个例子：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: AutoInc.java</font>
<font color=#009900>// Demonstrates the ++ and -- operators</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> AutoInc {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>int</font> i = 1;
    prt(<font color=#004488>"i : "</font> + i);
    prt(<font color=#004488>"++i : "</font> + ++i); <font color=#009900>// Pre-increment</font>
    prt(<font color=#004488>"i++ : "</font> + i++); <font color=#009900>// Post-increment</font>
    prt(<font color=#004488>"i : "</font> + i);
    prt(<font color=#004488>"--i : "</font> + --i); <font color=#009900>// Pre-decrement</font>
    prt(<font color=#004488>"i-- : "</font> + i--); <font color=#009900>// Post-decrement</font>
    prt(<font color=#004488>"i : "</font> + i);
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
该程序的输出如下：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>i : 1
++i : 2
i++ : 2
i : 3
--i : 2
i-- : 2
i : 1</PRE></FONT></BLOCKQUOTE>

<br>
从中可以看到，对于前缀形式，我们在执行完运算后才得到值。但对于后缀形式，则是在运算执行之前就得到值。它们是唯一具有“副作用”的运算符（除那些涉及赋值的以外）。也就是说，它们会改变运算对象，而不仅仅是使用自己的值。<br>
递增运算符正是对“C++”这个名字的一种解释，暗示着“超载C的一步”。在早期的一次Java演讲中，Bill 
Joy（始创人之一）声称“Java=C++--”（C加加减减），意味着Java已去除了C++一些没来由折磨人的地方，形成一种更精简的语言。正如大家会在这本书中学到的那样，Java的许多地方都得到了简化，所以Java的学习比C++更容易。<br>
<br>
3.1.5 关系运算符<br>
关系运算符生成的是一个“布尔”（Boolean）结果。它们评价的是运算对象值之间的关系。若关系是真实的，关系表达式会生成true（真）；若关系不真实，则生成false（假）。关系运算符包括小于（&lt;）、大于（&gt;）、小于或等于（&lt;=）、大于或等于（&gt;=）、等于（==）以及不等于（!=）。等于和不等于适用于所有内建的数据类型，但其他比较不适用于boolean类型。<br>
<br>
1. 检查对象是否相等<br>
关系运算符==和!=也适用于所有对象，但它们的含义通常会使初涉Java领域的人找不到北。下面是一个例子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Equivalence.java</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Equivalence {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Integer n1 = <font color=#0000ff>new</font> Integer(47);
    Integer n2 = <font color=#0000ff>new</font> Integer(47);
    System.out.println(n1 == n2);
    System.out.println(n1 != n2);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
其中，表达式System.out.println(n1 == n2)可打印出内部的布尔比较结果。一般人都会认为输出结果肯定先是true，再是false，因为两个Integer对象都是相同的。但尽管对象的内容相同，句柄却是不同的，而==和!=比较的正好就是对象句柄。所以输出结果实际上先是false，再是true。这自然会使第一次接触的人感到惊奇。<br>
若想对比两个对象的实际内容是否相同，又该如何操作呢？此时，必须使用所有对象都适用的特殊方法equals()。但这个方法不适用于“主类型”，那些类型直接使用==和!=即可。下面举例说明如何使用：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: EqualsMethod.java</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> EqualsMethod {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Integer n1 = <font color=#0000ff>new</font> Integer(47);
    Integer n2 = <font color=#0000ff>new</font> Integer(47);
    System.out.println(n1.equals(n2));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
正如我们预计的那样，此时得到的结果是true。但事情并未到此结束！假设您创建了自己的类，就象下面这样：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: EqualsMethod2.java</font>

<font color=#0000ff>class</font> Value {
  <font color=#0000ff>int</font> i;
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> EqualsMethod2 {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Value v1 = <font color=#0000ff>new</font> Value();
    Value v2 = <font color=#0000ff>new</font> Value();
    v1.i = v2.i = 100;
    System.out.println(v1.equals(v2));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
此时的结果又变回了false！这是由于equals()的默认行为是比较句柄。所以除非在自己的新类中改变了equals()，否则不可能表现出我们希望的行为。不幸的是，要到第7章才会学习如何改变行为。但要注意equals()的这种行为方式同时或许能够避免一些“灾难”性的事件。<br>
大多数Java类库都实现了equals()，所以它实际比较的是对象的内容，而非它们的句柄。<br>
<br>
3.1.6 逻辑运算符<br>
逻辑运算符AND（&amp;&amp;）、OR（||）以及NOT（!）能生成一个布尔值（true或false）——以自变量的逻辑关系为基础。下面这个例子向大家展示了如何使用关系和逻辑运算符。<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Bool.java</font>
<font color=#009900>// Relational and logical operators</font>
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Bool {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Random rand = <font color=#0000ff>new</font> Random();
    <font color=#0000ff>int</font> i = rand.nextInt() % 100;
    <font color=#0000ff>int</font> j = rand.nextInt() % 100;
    prt(<font color=#004488>"i = "</font> + i);
    prt(<font color=#004488>"j = "</font> + j);
    prt(<font color=#004488>"i &gt; j is "</font> + (i &gt; j));
    prt(<font color=#004488>"i &lt; j is "</font> + (i &lt; j));
    prt(<font color=#004488>"i &gt;= j is "</font> + (i &gt;= j));
    prt(<font color=#004488>"i &lt;= j is "</font> + (i &lt;= j));
    prt(<font color=#004488>"i == j is "</font> + (i == j));
    prt(<font color=#004488>"i != j is "</font> + (i != j));

    <font color=#009900>// Treating an int as a boolean is </font>
    <font color=#009900>// not legal Java</font>
<font color=#009900>//! prt("i &amp;&amp; j is " + (i &amp;&amp; j));</font>
<font color=#009900>//! prt("i || j is " + (i || j));</font>
<font color=#009900>//! prt("!i is " + !i);</font>

    prt(<font color=#004488>"(i &lt; 10) &amp;&amp; (j &lt; 10) is "</font>
       + ((i &lt; 10) &amp;&amp; (j &lt; 10)) );
    prt(<font color=#004488>"(i &lt; 10) || (j &lt; 10) is "</font>
       + ((i &lt; 10) || (j &lt; 10)) );
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
只可将AND，OR或NOT应用于布尔值。与在C及C++中不同，不可将一个非布尔值当作布尔值在逻辑表达式中使用。若这样做，就会发现尝试失败，并用一个“//!”标出。然而，后续的表达式利用关系比较生成布尔值，然后对结果进行逻辑运算。<br>
输出列表看起来象下面这个样子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>i = 85
j = 4
i &gt; j is <font color=#0000ff>true</font>
i &lt; j is <font color=#0000ff>false</font>
i &gt;= j is <font color=#0000ff>true</font>
i &lt;= j is <font color=#0000ff>false</font>
i == j is <font color=#0000ff>false</font>
i != j is <font color=#0000ff>true</font>
(i &lt; 10) &amp;&amp; (j &lt; 10) is <font color=#0000ff>false</font>
(i &lt; 10) || (j &lt; 10) is <font color=#0000ff>true</font></PRE></FONT></BLOCKQUOTE>
<br>
注意若在预计为String值的地方使用，布尔值会自动转换成适当的文本形式。<br>
在上述程序中，可将对int的定义替换成除boolean以外的其他任何主数据类型。但要注意，对浮点数字的比较是非常严格的。即使一个数字仅在小数部分与另一个数字存在极微小的差异，仍然认为它们是“不相等”的。即使一个数字只比零大一点点（例如2不停地开平方根），它仍然属于“非零”值。<br>
<br>
1. 短路<br>
操作逻辑运算符时，我们会遇到一种名为“短路”的情况。这意味着只有明确得出整个表达式真或假的结论，才会对表达式进行逻辑求值。因此，一个逻辑表达式的所有部分都有可能不进行求值：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: ShortCircuit.java</font>
<font color=#009900>// Demonstrates short-circuiting behavior</font>
<font color=#009900>// with logical operators.</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShortCircuit {
  <font color=#0000ff>static</font> <font color=#0000ff>boolean</font> test1(<font color=#0000ff>int</font> val) {
    System.out.println(<font color=#004488>"test1("</font> + val + <font color=#004488>")"</font>);
    System.out.println(<font color=#004488>"result: "</font> + (val &lt; 1));
    <font color=#0000ff>return</font> val &lt; 1;
  }
  <font color=#0000ff>static</font> <font color=#0000ff>boolean</font> test2(<font color=#0000ff>int</font> val) {
    System.out.println(<font color=#004488>"test2("</font> + val + <font color=#004488>")"</font>);
    System.out.println(<font color=#004488>"result: "</font> + (val &lt; 2));
    <font color=#0000ff>return</font> val &lt; 2;
  }
  <font color=#0000ff>static</font> <font color=#0000ff>boolean</font> test3(<font color=#0000ff>int</font> val) {
    System.out.println(<font color=#004488>"test3("</font> + val + <font color=#004488>")"</font>);
    System.out.println(<font color=#004488>"result: "</font> + (val &lt; 3));
    <font color=#0000ff>return</font> val &lt; 3;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(test1(0) &amp;&amp; test2(2) &amp;&amp; test3(2))
      System.out.println(<font color=#004488>"expression is true"</font>);
    <font color=#0000ff>else</font>
      System.out.println(<font color=#004488>"expression is false"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
每次测试都会比较自变量，并返回真或假。它不会显示与准备调用什么有关的资料。测试在下面这个表达式中进行：<br>
if(test1(0)) &amp;&amp; test2(2) &amp;&amp; test3(2))<br>
很自然地，你也许认为所有这三个测试都会得以执行。但希望输出结果不至于使你大吃一惊：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>if</font>(test1(0) &amp;&amp; test2(2) &amp;&amp; test3(2))</PRE></FONT></BLOCKQUOTE>

<br>
第一个测试生成一个true结果，所以表达式求值会继续下去。然而，第二个测试产生了一个false结果。由于这意味着整个表达式肯定为false，所以为什么还要继续剩余的表达式呢？这样做只会徒劳无益。事实上，“短路”一词的由来正种因于此。如果一个逻辑表达式的所有部分都不必执行下去，那么潜在的性能提升将是相当可观的。<br>
<br>
3.1.7 按位运算符<br>
按位运算符允许我们操作一个整数主数据类型中的单个“比特”，即二进制位。按位运算符会对两个自变量中对应的位执行布尔代数，并最终生成一个结果。<br>
按位运算来源于C语言的低级操作。我们经常都要直接操纵硬件，需要频繁设置硬件寄存器内的二进制位。Java的设计初衷是嵌入电视顶置盒内，所以这种低级操作仍被保留下来了。然而，由于操作系统的进步，现在也许不必过于频繁地进行按位运算。<br>
若两个输入位都是1，则按位AND运算符（&amp;）在输出位里生成一个1；否则生成0。若两个输入位里至少有一个是1，则按位OR运算符（|）在输出位里生成一个1；只有在两个输入位都是0的情况下，它才会生成一个0。若两个输入位的某一个是1，但不全都是1，那么按位XOR（^，异或）在输出位里生成一个1。按位NOT（~，也叫作“非”运算符）属于一元运算符；它只对一个自变量进行操作（其他所有运算符都是二元运算符）。按位NOT生成与输入位的相反的值——若输入0，则输出1；输入1，则输出0。<br>
按位运算符和逻辑运算符都使用了同样的字符，只是数量不同。因此，我们能方便地记忆各自的含义：由于“位”是非常“小”的，所以按位运算符仅使用了一个字符。<br>
按位运算符可与等号（=）联合使用，以便合并运算及赋值：&amp;=，|=和^=都是合法的（由于~是一元运算符，所以不可与=联合使用）。<br>
我们将boolean（布尔）类型当作一种“单位”或“单比特”值对待，所以它多少有些独特的地方。我们可执行按位AND，OR和XOR，但不能执行按位NOT（大概是为了避免与逻辑NOT混淆）。对于布尔值，按位运算符具有与逻辑运算符相同的效果，只是它们不会中途“短路”。此外，针对布尔值进行的按位运算为我们新增了一个XOR逻辑运算符，它并未包括在“逻辑”运算符的列表中。在移位表达式中，我们被禁止使用布尔运算，原因将在下面解释。<br>
<br>
3.1.8 移位运算符<br>
移位运算符面向的运算对象也是二进制的“位”。可单独用它们处理整数类型（主类型的一种）。左移位运算符（&lt;&lt;）能将运算符左边的运算对象向左移动运算符右侧指定的位数（在低位补0）。“有符号”右移位运算符（&gt;&gt;）则将运算符左边的运算对象向右移动运算符右侧指定的位数。“有符号”右移位运算符使用了“符号扩展”：若值为正，则在高位插入0；若值为负，则在高位插入1。Java也添加了一种“无符号”右移位运算符（&gt;&gt;&gt;），它使用了“零扩展”：无论正负，都在高位插入0。这一运算符是C或C++没有的。<br>
若对char，byte或者short进行移位处理，那么在移位进行之前，它们会自动转换成一个int。只有右侧的5个低位才会用到。这样可防止我们在一个int数里移动不切实际的位数。若对一个long值进行处理，最后得到的结果也是long。此时只会用到右侧的6个低位，防止移动超过long值里现成的位数。但在进行“无符号”右移位时，也可能遇到一个问题。若对byte或short值进行右移位运算，得到的可能不是正确的结果（Java 
1.0和Java 1.1特别突出）。它们会自动转换成int类型，并进行右移位。但“零扩展”不会发生，所以在那些情况下会得到-1的结果。可用下面这个例子检测自己的实现方案：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: URShift.java</font>
<font color=#009900>// Test of unsigned right shift</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> URShift {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>int</font> i = -1;
    i &gt;&gt;&gt;= 10;
    System.out.println(i);
    <font color=#0000ff>long</font> l = -1;
    l &gt;&gt;&gt;= 10;
    System.out.println(l);
    <font color=#0000ff>short</font> s = -1;
    s &gt;&gt;&gt;= 10;
    System.out.println(s);
    <font color=#0000ff>byte</font> b = -1;
    b &gt;&gt;&gt;= 10;
    System.out.println(b);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
移位可与等号（&lt;&lt;=或&gt;&gt;=或&gt;&gt;&gt;=）组合使用。此时，运算符左边的值会移动由右边的值指定的位数，再将得到的结果赋回左边的值。<br>
下面这个例子向大家阐示了如何应用涉及“按位”操作的所有运算符，以及它们的效果：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: BitManipulation.java</font>
<font color=#009900>// Using the bitwise operators</font>
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BitManipulation {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Random rand = <font color=#0000ff>new</font> Random();
    <font color=#0000ff>int</font> i = rand.nextInt();
    <font color=#0000ff>int</font> j = rand.nextInt();
    pBinInt(<font color=#004488>"-1"</font>, -1);
    pBinInt(<font color=#004488>"+1"</font>, +1);
    <font color=#0000ff>int</font> maxpos = 2147483647;
    pBinInt(<font color=#004488>"maxpos"</font>, maxpos);
    <font color=#0000ff>int</font> maxneg = -2147483648;
    pBinInt(<font color=#004488>"maxneg"</font>, maxneg);
    pBinInt(<font color=#004488>"i"</font>, i);
    pBinInt(<font color=#004488>"~i"</font>, ~i);
    pBinInt(<font color=#004488>"-i"</font>, -i);
    pBinInt(<font color=#004488>"j"</font>, j);
    pBinInt(<font color=#004488>"i &amp; j"</font>, i &amp; j);
    pBinInt(<font color=#004488>"i | j"</font>, i | j);
    pBinInt(<font color=#004488>"i ^ j"</font>, i ^ j);
    pBinInt(<font color=#004488>"i &lt;&lt; 5"</font>, i &lt;&lt; 5);
    pBinInt(<font color=#004488>"i &gt;&gt; 5"</font>, i &gt;&gt; 5);
    pBinInt(<font color=#004488>"(~i) &gt;&gt; 5"</font>, (~i) &gt;&gt; 5);
    pBinInt(<font color=#004488>"i &gt;&gt;&gt; 5"</font>, i &gt;&gt;&gt; 5);
    pBinInt(<font color=#004488>"(~i) &gt;&gt;&gt; 5"</font>, (~i) &gt;&gt;&gt; 5);

    <font color=#0000ff>long</font> l = rand.nextLong();
    <font color=#0000ff>long</font> m = rand.nextLong();
    pBinLong(<font color=#004488>"-1L"</font>, -1L);
    pBinLong(<font color=#004488>"+1L"</font>, +1L);
    <font color=#0000ff>long</font> ll = 9223372036854775807L;
    pBinLong(<font color=#004488>"maxpos"</font>, ll);
    <font color=#0000ff>long</font> lln = -9223372036854775808L;
    pBinLong(<font color=#004488>"maxneg"</font>, lln);
    pBinLong(<font color=#004488>"l"</font>, l);
    pBinLong(<font color=#004488>"~l"</font>, ~l);
    pBinLong(<font color=#004488>"-l"</font>, -l);
    pBinLong(<font color=#004488>"m"</font>, m);
    pBinLong(<font color=#004488>"l &amp; m"</font>, l &amp; m);
    pBinLong(<font color=#004488>"l | m"</font>, l | m);
    pBinLong(<font color=#004488>"l ^ m"</font>, l ^ m);
    pBinLong(<font color=#004488>"l &lt;&lt; 5"</font>, l &lt;&lt; 5);
    pBinLong(<font color=#004488>"l &gt;&gt; 5"</font>, l &gt;&gt; 5);
    pBinLong(<font color=#004488>"(~l) &gt;&gt; 5"</font>, (~l) &gt;&gt; 5);
    pBinLong(<font color=#004488>"l &gt;&gt;&gt; 5"</font>, l &gt;&gt;&gt; 5);
    pBinLong(<font color=#004488>"(~l) &gt;&gt;&gt; 5"</font>, (~l) &gt;&gt;&gt; 5);
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> pBinInt(String s, <font color=#0000ff>int</font> i) {
    System.out.println(
      s + <font color=#004488>", int: "</font> + i + <font color=#004488>", binary: "</font>);
    System.out.print(<font color=#004488>"   "</font>);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> j = 31; j &gt;=0; j--)
      <font color=#0000ff>if</font>(((1 &lt;&lt; j) &amp;  i) != 0)
        System.out.print(<font color=#004488>"1"</font>);
      <font color=#0000ff>else</font>
        System.out.print(<font color=#004488>"0"</font>);
    System.out.println();
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> pBinLong(String s, <font color=#0000ff>long</font> l) {
    System.out.println(
      s + <font color=#004488>", long: "</font> + l + <font color=#004488>", binary: "</font>);
    System.out.print(<font color=#004488>"   "</font>);
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 63; i &gt;=0; i--)
      <font color=#0000ff>if</font>(((1L &lt;&lt; i) &amp; l) != 0)
        System.out.print(<font color=#004488>"1"</font>);
      <font color=#0000ff>else</font>
        System.out.print(<font color=#004488>"0"</font>);
    System.out.println();
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
程序末尾调用了两个方法：pBinInt()和pBinLong()。它们分别操作一个int和long值，并用一种二进制格式输出，同时附有简要的说明文字。目前，可暂时忽略它们具体的实现方案。<br>
大家要注意的是System.out.print()的使用，而不是System.out.println()。print()方法不会产生一个新行，以便在同一行里罗列多种信息。<br>
除展示所有按位运算符针对int和long的效果之外，本例也展示了int和long的最小值、最大值、+1和-1值，使大家能体会它们的情况。注意高位代表正负号：0为正，1为负。下面列出int部分的输出：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>-1, <font color=#0000ff>int</font>: -1, binary: 
   11111111111111111111111111111111
+1, <font color=#0000ff>int</font>: 1, binary: 
   00000000000000000000000000000001
maxpos, <font color=#0000ff>int</font>: 2147483647, binary: 
   01111111111111111111111111111111
maxneg, <font color=#0000ff>int</font>: -2147483648, binary: 
   10000000000000000000000000000000
i, <font color=#0000ff>int</font>: 59081716, binary: 
   00000011100001011000001111110100
~i, <font color=#0000ff>int</font>: -59081717, binary: 
   11111100011110100111110000001011
-i, <font color=#0000ff>int</font>: -59081716, binary: 
   11111100011110100111110000001100
j, <font color=#0000ff>int</font>: 198850956, binary: 
   00001011110110100011100110001100
i &amp; j, <font color=#0000ff>int</font>: 58720644, binary: 
   00000011100000000000000110000100
i | j, <font color=#0000ff>int</font>: 199212028, binary: 
   00001011110111111011101111111100
i ^ j, <font color=#0000ff>int</font>: 140491384, binary: 
   00001000010111111011101001111000
i &lt;&lt; 5, <font color=#0000ff>int</font>: 1890614912, binary: 
   01110000101100000111111010000000
i &gt;&gt; 5, <font color=#0000ff>int</font>: 1846303, binary: 
   00000000000111000010110000011111
(~i) &gt;&gt; 5, <font color=#0000ff>int</font>: -1846304, binary: 
   11111111111000111101001111100000
i &gt;&gt;&gt; 5, <font color=#0000ff>int</font>: 1846303, binary: 
   00000000000111000010110000011111
(~i) &gt;&gt;&gt; 5, <font color=#0000ff>int</font>: 132371424, binary: 
   00000111111000111101001111100000</PRE></FONT></BLOCKQUOTE>

<br>
数字的二进制形式表现为“有符号2的补值”。<br>
<br>
3.1.9 三元if-else运算符<br>
这种运算符比较罕见，因为它有三个运算对象。但它确实属于运算符的一种，因为它最终也会生成一个值。这与本章后一节要讲述的普通if-else语句是不同的。表达式采取下述形式：<br>
<br>
布尔表达式 ? 值0:值1<br>
<br>
若“布尔表达式”的结果为true，就计算“值0”，而且它的结果成为最终由运算符产生的值。但若“布尔表达式”的结果为false，计算的就是“值1”，而且它的结果成为最终由运算符产生的值。<br>
当然，也可以换用普通的if-else语句（在后面介绍），但三元运算符更加简洁。尽管C引以为傲的就是它是一种简练的语言，而且三元运算符的引入多半就是为了体现这种高效率的编程，但假若您打算频繁用它，还是要先多作一些思量——它很容易就会产生可读性极差的代码。<br>
可将条件运算符用于自己的“副作用”，或用于它生成的值。但通常都应将其用于值，因为那样做可将运算符与if-else明确区别开。下面便是一个例子：<br>
<br>
static int ternary(int i) {<br>
return i &lt; 10 ? i * 100 : i * 10;<br>
}<br>
<br>
可以看出，假设用普通的if-else结构写上述代码，代码量会比上面多出许多。如下所示：<br>
<br>
static int alternative(int i) {<br>
if (i &lt; 10)<br>
return i * 100;<br>
return i * 10;<br>
}<br>
<br>
但第二种形式更易理解，而且不要求更多的录入。所以在挑选三元运算符时，请务必权衡一下利弊。<br>
<br>
3.1.10 逗号运算符<br>
在C和C++里，逗号不仅作为函数自变量列表的分隔符使用，也作为进行后续计算的一个运算符使用。在Java里需要用到逗号的唯一场所就是for循环，本章稍后会对此详加解释。<br>
<br>
3.1.11 字串运算符+<br>
这个运算符在Java里有一项特殊用途：连接不同的字串。这一点已在前面的例子中展示过了。尽管与+的传统意义不符，但用+来做这件事情仍然是非常自然的。在C++里，这一功能看起来非常不错，所以引入了一项“运算符过载”机制，以便C++程序员为几乎所有运算符增加特殊的含义。但非常不幸，与C++的另外一些限制结合，运算符过载成为一种非常复杂的特性，程序员在设计自己的类时必须对此有周到的考虑。与C++相比，尽管运算符过载在Java里更易实现，但迄今为止仍然认为这一特性过于复杂。所以Java程序员不能象C++程序员那样设计自己的过载运算符。<br>
我们注意到运用“String +”时一些有趣的现象。若表达式以一个String起头，那么后续所有运算对象都必须是字串。如下所示：<br>
<br>
int x = 0, y = 1, z = 2;<br>
String sString = &quot;x, y, z &quot;;<br>
System.out.println(sString + x + y + z);<br>
<br>
在这里，Java编译程序会将x，y和z转换成它们的字串形式，而不是先把它们加到一起。然而，如果使用下述语句：<br>
<br>
System.out.println(x + sString);<br>
<br>
那么早期版本的Java就会提示出错（以后的版本能将x转换成一个字串）。因此，如果想通过“加号”连接字串（使用Java的早期版本），请务必保证第一个元素是字串（或加上引号的一系列字符，编译能将其识别成一个字串）。<br>
<br>
3.1.12 运算符常规操作规则<br>
使用运算符的一个缺点是括号的运用经常容易搞错。即使对一个表达式如何计算有丝毫不确定的因素，都容易混淆括号的用法。这个问题在Java里仍然存在。<br>
在C和C++中，一个特别常见的错误如下：<br>
<br>
while(x = y) {<br>
//...<br>
}<br>
<br>
程序的意图是测试是否“相等”（==），而不是进行赋值操作。在C和C++中，若y是一个非零值，那么这种赋值的结果肯定是true。这样使可能得到一个无限循环。在Java里，这个表达式的结果并不是布尔值，而编译器期望的是一个布尔值，而且不会从一个int数值中转换得来。所以在编译时，系统就会提示出现错误，有效地阻止我们进一步运行程序。所以这个缺点在Java里永远不会造成更严重的后果。唯一不会得到编译错误的时候是x和y都为布尔值。在这种情况下，x 
= y属于合法表达式。而在上述情况下，则可能是一个错误。<br>
在C和C++里，类似的一个问题是使用按位AND和OR，而不是逻辑AND和OR。按位AND和OR使用两个字符之一（&amp;或|），而逻辑AND和OR使用两个相同的字符（&amp;&amp;或||）。就象“=”和“==”一样，键入一个字符当然要比键入两个简单。在Java里，编译器同样可防止这一点，因为它不允许我们强行使用一种并不属于的类型。<br>
<br>
3.1.13 造型运算符<br>
“造型”（Cast）的作用是“与一个模型匹配”。在适当的时候，Java会将一种数据类型自动转换成另一种。例如，假设我们为浮点变量分配一个整数值，计算机会将int自动转换成float。通过造型，我们可明确设置这种类型的转换，或者在一般没有可能进行的时候强迫它进行。<br>
为进行一次造型，要将括号中希望的数据类型（包括所有修改符）置于其他任何值的左侧。下面是一个例子：<br>
<br>
void casts() {<br>
int i = 200;<br>
long l = (long)i;<br>
long l2 = (long)200;<br>
}<br>
<br>
正如您看到的那样，既可对一个数值进行造型处理，亦可对一个变量进行造型处理。但在这儿展示的两种情况下，造型均是多余的，因为编译器在必要的时候会自动进行int值到long值的转换。当然，仍然可以设置一个造型，提醒自己留意，也使程序更清楚。在其他情况下，造型只有在代码编译时才显出重要性。<br>
在C和C++中，造型有时会让人头痛。在Java里，造型则是一种比较安全的操作。但是，若进行一种名为“缩小转换”（Narrowing 
Conversion）的操作（也就是说，脚本是能容纳更多信息的数据类型，将其转换成容量较小的类型），此时就可能面临信息丢失的危险。此时，编译器会强迫我们进行造型，就好象说：“这可能是一件危险的事情——如果您想让我不顾一切地做，那么对不起，请明确造型。”而对于“放大转换”（Widening 
conversion），则不必进行明确造型，因为新类型肯定能容纳原来类型的信息，不会造成任何信息的丢失。<br>
Java允许我们将任何主类型“造型”为其他任何一种主类型，但布尔值（bollean）要除外，后者根本不允许进行任何造型处理。“类”不允许进行造型。为了将一种类转换成另一种，必须采用特殊的方法（字串是一种特殊的情况，本书后面会讲到将对象造型到一个类型“家族”里；例如，“橡树”可造型为“树”；反之亦然。但对于其他外来类型，如“岩石”，则不能造型为“树”）。<br>
<br>
1. 字面值<br>
最开始的时候，若在一个程序里插入“字面值”（Literal），编译器通常能准确知道要生成什么样的类型。但在有些时候，对于类型却是暧昧不清的。若发生这种情况，必须对编译器加以适当的“指导”。方法是用与字面值关联的字符形式加入一些额外的信息。下面这段代码向大家展示了这些字符。<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Literals.java</font>

<font color=#0000ff>class</font> Literals {
  <font color=#0000ff>char</font> c = 0xffff; <font color=#009900>// max char hex value</font>
  <font color=#0000ff>byte</font> b = 0x7f; <font color=#009900>// max byte hex value</font>
  <font color=#0000ff>short</font> s = 0x7fff; <font color=#009900>// max short hex value</font>
  <font color=#0000ff>int</font> i1 = 0x2f; <font color=#009900>// Hexadecimal (lowercase)</font>
  <font color=#0000ff>int</font> i2 = 0X2F; <font color=#009900>// Hexadecimal (uppercase)</font>
  <font color=#0000ff>int</font> i3 = 0177; <font color=#009900>// Octal (leading zero)</font>
  <font color=#009900>// Hex and Oct also work with long.</font>
  <font color=#0000ff>long</font> n1 = 200L; <font color=#009900>// long suffix</font>
  <font color=#0000ff>long</font> n2 = 200l; <font color=#009900>// long suffix</font>
  <font color=#0000ff>long</font> n3 = 200;
  <font color=#009900>//! long l6(200); // not allowed</font>
  <font color=#0000ff>float</font> f1 = 1;
  <font color=#0000ff>float</font> f2 = 1F; <font color=#009900>// float suffix</font>
  <font color=#0000ff>float</font> f3 = 1f; <font color=#009900>// float suffix</font>
  <font color=#0000ff>float</font> f4 = 1e-45f; <font color=#009900>// 10 to the power</font>
  <font color=#0000ff>float</font> f5 = 1e+9f; <font color=#009900>// float suffix</font>
  <font color=#0000ff>double</font> d1 = 1d; <font color=#009900>// double suffix</font>
  <font color=#0000ff>double</font> d2 = 1D; <font color=#009900>// double suffix</font>
  <font color=#0000ff>double</font> d3 = 47e47d; <font color=#009900>// 10 to the power</font>
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
十六进制（Base 16）——它适用于所有整数数据类型——用一个前置的0x或0X指示。并在后面跟随采用大写或小写形式的0-9以及a-f。若试图将一个变量初始化成超出自身能力的一个值（无论这个值的数值形式如何），编译器就会向我们报告一条出错消息。注意在上述代码中，最大的十六进制值只会在char，byte以及short身上出现。若超出这一限制，编译器会将值自动变成一个int，并告诉我们需要对这一次赋值进行“缩小造型”。这样一来，我们就可清楚获知自己已超载了边界。<br>
八进制（Base 8）是用数字中的一个前置0以及0-7的数位指示的。在C，C++或者Java中，对二进制数字没有相应的“字面”表示方法。<br>
字面值后的尾随字符标志着它的类型。若为大写或小写的L，代表long；大写或小写的F，代表float；大写或小写的D，则代表double。<br>
指数总是采用一种我们认为很不直观的记号方法：1.39e-47f。在科学与工程学领域，“e”代表自然对数的基数，约等于2.718（Java一种更精确的double值采用Math.E的形式）。它在象“1.39×e的-47次方”这样的指数表达式中使用，意味着“1.39×2.718的-47次方”。然而，自FORTRAN语言发明后，人们自然而然地觉得e代表“10多少次幂”。这种做法显得颇为古怪，因为FORTRAN最初面向的是科学与工程设计领域。理所当然，它的设计者应对这样的混淆概念持谨慎态度（注释①）。但不管怎样，这种特别的表达方法在C，C++以及现在的Java中顽固地保留下来了。所以倘若您习惯将e作为自然对数的基数使用，那么在Java中看到象“1.39e-47f”这样的表达式时，请转换您的思维，从程序设计的角度思考它；它真正的含义是“1.39×10的-47次方”。<br>
<br>
①：John Kirkham这样写道：“我最早于1962年在一部IBM 1620机器上使用FORTRAN 
II。那时——包括60年代以及70年代的早期，FORTRAN一直都是使用大写字母。之所以会出现这一情况，可能是由于早期的输入设备大多是老式电传打字机，使用5位Baudot码，那种码并不具备小写能力。乘幂表达式中的‘E’也肯定是大写的，所以不会与自然对数的基数‘e’发生冲突，后者必然是小写的。‘E’这个字母的含义其实很简单，就是‘Exponential’的意思，即‘指数’或‘幂数’，代表计算系统的基数——一般都是10。当时，八进制也在程序员中广泛使用。尽管我自己未看到它的使用，但假若我在乘幂表达式中看到一个八进制数字，就会把它认作Base 
8。我记得第一次看到用小写‘e’表示指数是在70年代末期。我当时也觉得它极易产生混淆。所以说，这个问题完全是自己‘潜入’FORTRAN里去的，并非一开始就有。如果你真的想使用自然对数的基数，实际有现成的函数可供利用，但它们都是大写的。”<br>
<br>
注意如果编译器能够正确地识别类型，就不必使用尾随字符。对于下述语句：<br>
long n3 = 200;<br>
它并不存在含混不清的地方，所以200后面的一个L大可省去。然而，对于下述语句：<br>
float f4 = 1e-47f; //10的幂数<br>
编译器通常会将指数作为双精度数（double）处理，所以假如没有这个尾随的f，就会收到一条出错提示，告诉我们须用一个“造型”将double转换成float。<br>
<br>
2. 转型<br>
大家会发现假若对主数据类型执行任何算术或按位运算，只要它们“比int小”（即char，byte或者short），那么在正式执行运算之前，那些值会自动转换成int。这样一来，最终生成的值就是int类型。所以只要把一个值赋回较小的类型，就必须使用“造型”。此外，由于是将值赋回给较小的类型，所以可能出现信息丢失的情况）。通常，表达式中最大的数据类型是决定了表达式最终结果大小的那个类型。若将一个float值与一个double值相乘，结果就是double；如将一个int和一个long值相加，则结果为long。<br>
<br>
3.1.14 Java没有“sizeof”<br>
在C和C++中，sizeof()运算符能满足我们的一项特殊需要：获知为数据项目分配的字符数量。在C和C++中，size()最常见的一种应用就是“移植”。不同的数据在不同的机器上可能有不同的大小，所以在进行一些对大小敏感的运算时，程序员必须对那些类型有多大做到心中有数。例如，一台计算机可用32位来保存整数，而另一台只用16位保存。显然，在第一台机器中，程序可保存更大的值。正如您可能已经想到的那样，移植是令C和C++程序员颇为头痛的一个问题。<br>
Java不需要sizeof()运算符来满足这方面的需要，因为所有数据类型在所有机器的大小都是相同的。我们不必考虑移植问题——Java本身就是一种“与平台无关”的语言。<br>
<br>
3.1.15 复习计算顺序<br>
在我举办的一次培训班中，有人抱怨运算符的优先顺序太难记了。一名学生推荐用一句话来帮助记忆：“Ulcer 
Addicts Really Like C A lot”，即“溃疡患者特别喜欢（维生素）C”。<br>
<br>

<TABLE BORDER>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">助记词 </FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">运算符类型 </FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">运算符</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Ulcer</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Unary</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">+ - ++ &#8211;  [[
rest...]]</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Addicts</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Arithmetic (and
shift)</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">* / % + -  &lt;&lt;
&gt;&gt;</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Really</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Relational</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">&gt; &lt; &gt;= &lt;= ==
!=</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Like</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Logical (and
bitwise)</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">&amp;&amp; ||  &amp;  |  ^
</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">C</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Conditional
(ternary)</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A &gt; B ? X : Y</FONT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">A Lot</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">Assignment</FONT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><FONT FACE="Georgia">= (and compound assignment like
*=)</FONT><BR></P></DIV>
</TD>
</TR>
</TABLE><br>
当然，对于移位和按位运算符，上表并不是完美的助记方法；但对于其他运算来说，它确实很管用。<br>
<br>
3.1.16 运算符总结<br>
下面这个例子向大家展示了如何随同特定的运算符使用主数据类型。从根本上说，它是同一个例子反反复复地执行，只是使用了不同的主数据类型。文件编译时不会报错，因为那些会导致错误的行已用//!变成了注释内容。<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: AllOps.java</font>
<font color=#009900>// Tests all the operators on all the</font>
<font color=#009900>// primitive data types to show which</font>
<font color=#009900>// ones are accepted by the Java compiler.</font>

<font color=#0000ff>class</font> AllOps {
  <font color=#009900>// To accept the results of a boolean test:</font>
  <font color=#0000ff>void</font> f(<font color=#0000ff>boolean</font> b) {}
  <font color=#0000ff>void</font> boolTest(<font color=#0000ff>boolean</font> x, <font color=#0000ff>boolean</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    <font color=#009900>//! x = x * y;</font>
    <font color=#009900>//! x = x / y;</font>
    <font color=#009900>//! x = x % y;</font>
    <font color=#009900>//! x = x + y;</font>
    <font color=#009900>//! x = x - y;</font>
    <font color=#009900>//! x++;</font>
    <font color=#009900>//! x--;</font>
    <font color=#009900>//! x = +y;</font>
    <font color=#009900>//! x = -y;</font>
    <font color=#009900>// Relational and logical:</font>
    <font color=#009900>//! f(x &gt; y);</font>
    <font color=#009900>//! f(x &gt;= y);</font>
    <font color=#009900>//! f(x &lt; y);</font>
    <font color=#009900>//! f(x &lt;= y);</font>
    f(x == y);
    f(x != y);
    f(!y);
    x = x &amp;&amp; y;
    x = x || y;
    <font color=#009900>// Bitwise operators:</font>
    <font color=#009900>//! x = ~y;</font>
    x = x &amp; y;
    x = x | y;
    x = x ^ y;
    <font color=#009900>//! x = x &lt;&lt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt;&gt; 1;</font>
    <font color=#009900>// Compound assignment:</font>
    <font color=#009900>//! x += y;</font>
    <font color=#009900>//! x -= y;</font>
    <font color=#009900>//! x *= y;</font>
    <font color=#009900>//! x /= y;</font>
    <font color=#009900>//! x %= y;</font>
    <font color=#009900>//! x &lt;&lt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;&gt;= 1;</font>
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! char c = (char)x;</font>
    <font color=#009900>//! byte B = (byte)x;</font>
    <font color=#009900>//! short s = (short)x;</font>
    <font color=#009900>//! int i = (int)x;</font>
    <font color=#009900>//! long l = (long)x;</font>
    <font color=#009900>//! float f = (float)x;</font>
    <font color=#009900>//! double d = (double)x;</font>
  }
  <font color=#0000ff>void</font> charTest(<font color=#0000ff>char</font> x, <font color=#0000ff>char</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = (<font color=#0000ff>char</font>)(x * y);
    x = (<font color=#0000ff>char</font>)(x / y);
    x = (<font color=#0000ff>char</font>)(x % y);
    x = (<font color=#0000ff>char</font>)(x + y);
    x = (<font color=#0000ff>char</font>)(x - y);
    x++;
    x--;
    x = (<font color=#0000ff>char</font>)+y;
    x = (<font color=#0000ff>char</font>)-y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    x= (<font color=#0000ff>char</font>)~y;
    x = (<font color=#0000ff>char</font>)(x &amp; y);
    x  = (<font color=#0000ff>char</font>)(x | y);
    x = (<font color=#0000ff>char</font>)(x ^ y);
    x = (<font color=#0000ff>char</font>)(x &lt;&lt; 1);
    x = (<font color=#0000ff>char</font>)(x &gt;&gt; 1);
    x = (<font color=#0000ff>char</font>)(x &gt;&gt;&gt; 1);
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x &lt;&lt;= 1;
    x &gt;&gt;= 1;
    x &gt;&gt;&gt;= 1;
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> byteTest(<font color=#0000ff>byte</font> x, <font color=#0000ff>byte</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = (<font color=#0000ff>byte</font>)(x* y);
    x = (<font color=#0000ff>byte</font>)(x / y);
    x = (<font color=#0000ff>byte</font>)(x % y);
    x = (<font color=#0000ff>byte</font>)(x + y);
    x = (<font color=#0000ff>byte</font>)(x - y);
    x++;
    x--;
    x = (<font color=#0000ff>byte</font>)+ y;
    x = (<font color=#0000ff>byte</font>)- y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    x = (<font color=#0000ff>byte</font>)~y;
    x = (<font color=#0000ff>byte</font>)(x &amp; y);
    x = (<font color=#0000ff>byte</font>)(x | y);
    x = (<font color=#0000ff>byte</font>)(x ^ y);
    x = (<font color=#0000ff>byte</font>)(x &lt;&lt; 1);
    x = (<font color=#0000ff>byte</font>)(x &gt;&gt; 1);
    x = (<font color=#0000ff>byte</font>)(x &gt;&gt;&gt; 1);
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x &lt;&lt;= 1;
    x &gt;&gt;= 1;
    x &gt;&gt;&gt;= 1;
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> shortTest(<font color=#0000ff>short</font> x, <font color=#0000ff>short</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = (<font color=#0000ff>short</font>)(x * y);
    x = (<font color=#0000ff>short</font>)(x / y);
    x = (<font color=#0000ff>short</font>)(x % y);
    x = (<font color=#0000ff>short</font>)(x + y);
    x = (<font color=#0000ff>short</font>)(x - y);
    x++;
    x--;
    x = (<font color=#0000ff>short</font>)+y;
    x = (<font color=#0000ff>short</font>)-y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    x = (<font color=#0000ff>short</font>)~y;
    x = (<font color=#0000ff>short</font>)(x &amp; y);
    x = (<font color=#0000ff>short</font>)(x | y);
    x = (<font color=#0000ff>short</font>)(x ^ y);
    x = (<font color=#0000ff>short</font>)(x &lt;&lt; 1);
    x = (<font color=#0000ff>short</font>)(x &gt;&gt; 1);
    x = (<font color=#0000ff>short</font>)(x &gt;&gt;&gt; 1);
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x &lt;&lt;= 1;
    x &gt;&gt;= 1;
    x &gt;&gt;&gt;= 1;
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> intTest(<font color=#0000ff>int</font> x, <font color=#0000ff>int</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    x = ~y;
    x = x &amp; y;
    x = x | y;
    x = x ^ y;
    x = x &lt;&lt; 1;
    x = x &gt;&gt; 1;
    x = x &gt;&gt;&gt; 1;
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x &lt;&lt;= 1;
    x &gt;&gt;= 1;
    x &gt;&gt;&gt;= 1;
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> longTest(<font color=#0000ff>long</font> x, <font color=#0000ff>long</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    x = ~y;
    x = x &amp; y;
    x = x | y;
    x = x ^ y;
    x = x &lt;&lt; 1;
    x = x &gt;&gt; 1;
    x = x &gt;&gt;&gt; 1;
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    x &lt;&lt;= 1;
    x &gt;&gt;= 1;
    x &gt;&gt;&gt;= 1;
    x &amp;= y;
    x ^= y;
    x |= y;
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> floatTest(<font color=#0000ff>float</font> x, <font color=#0000ff>float</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    <font color=#009900>//! x = ~y;</font>
    <font color=#009900>//! x = x &amp; y;</font>
    <font color=#009900>//! x = x | y;</font>
    <font color=#009900>//! x = x ^ y;</font>
    <font color=#009900>//! x = x &lt;&lt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt;&gt; 1;</font>
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    <font color=#009900>//! x &lt;&lt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;&gt;= 1;</font>
    <font color=#009900>//! x &amp;= y;</font>
    <font color=#009900>//! x ^= y;</font>
    <font color=#009900>//! x |= y;</font>
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>double</font> d = (<font color=#0000ff>double</font>)x;
  }
  <font color=#0000ff>void</font> doubleTest(<font color=#0000ff>double</font> x, <font color=#0000ff>double</font> y) {
    <font color=#009900>// Arithmetic operators:</font>
    x = x * y;
    x = x / y;
    x = x % y;
    x = x + y;
    x = x - y;
    x++;
    x--;
    x = +y;
    x = -y;
    <font color=#009900>// Relational and logical:</font>
    f(x &gt; y);
    f(x &gt;= y);
    f(x &lt; y);
    f(x &lt;= y);
    f(x == y);
    f(x != y);
    <font color=#009900>//! f(!x);</font>
    <font color=#009900>//! f(x &amp;&amp; y);</font>
    <font color=#009900>//! f(x || y);</font>
    <font color=#009900>// Bitwise operators:</font>
    <font color=#009900>//! x = ~y;</font>
    <font color=#009900>//! x = x &amp; y;</font>
    <font color=#009900>//! x = x | y;</font>
    <font color=#009900>//! x = x ^ y;</font>
    <font color=#009900>//! x = x &lt;&lt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt; 1;</font>
    <font color=#009900>//! x = x &gt;&gt;&gt; 1;</font>
    <font color=#009900>// Compound assignment:</font>
    x += y;
    x -= y;
    x *= y;
    x /= y;
    x %= y;
    <font color=#009900>//! x &lt;&lt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;= 1;</font>
    <font color=#009900>//! x &gt;&gt;&gt;= 1;</font>
    <font color=#009900>//! x &amp;= y;</font>
    <font color=#009900>//! x ^= y;</font>
    <font color=#009900>//! x |= y;</font>
    <font color=#009900>// Casting:</font>
    <font color=#009900>//! boolean b = (boolean)x;</font>
    <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)x;
    <font color=#0000ff>byte</font> B = (<font color=#0000ff>byte</font>)x;
    <font color=#0000ff>short</font> s = (<font color=#0000ff>short</font>)x;
    <font color=#0000ff>int</font> i = (<font color=#0000ff>int</font>)x;
    <font color=#0000ff>long</font> l = (<font color=#0000ff>long</font>)x;
    <font color=#0000ff>float</font> f = (<font color=#0000ff>float</font>)x;
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
注意布尔值（boolean）的能力非常有限。我们只能为其赋予true和false值。而且可测试它为真还是为假，但不可为它们再添加布尔值，或进行其他其他任何类型运算。<br>
在char，byte和short中，我们可看到算术运算符的“转型”效果。对这些类型的任何一个进行算术运算，都会获得一个int结果。必须将其明确“造型”回原来的类型（缩小转换会造成信息的丢失），以便将值赋回那个类型。但对于int值，却不必进行造型处理，因为所有数据都已经属于int类型。然而，不要放松警惕，认为一切事情都是安全的。如果对两个足够大的int值执行乘法运算，结果值就会溢出。下面这个例子向大家展示了这一点：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Overflow.java</font>
<font color=#009900>// Surprise! Java lets you overflow.</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Overflow {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>int</font> big = 0x7fffffff; <font color=#009900>// max int value</font>
    prt(<font color=#004488>"big = "</font> + big);
    <font color=#0000ff>int</font> bigger = big * 4;
    prt(<font color=#004488>"bigger = "</font> + bigger);
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
输出结果如下：<br>
big = 2147483647<br>
bigger = -4<br>
<br>
而且不会从编译器那里收到出错提示，运行时也不会出现异常反应。爪哇咖啡（Java）确实是很好的东西，但却没有“那么”好！<br>
对于char，byte或者short，混合赋值并不需要造型。即使它们执行转型操作，也会获得与直接算术运算相同的结果。而在另一方面，将造型略去可使代码显得更加简练。<br>
大家可以看到，除boolean以外，任何一种主类型都可通过造型变为其他主类型。同样地，当造型成一种较小的类型时，必须留意“缩小转换”的后果。否则会在造型过程中不知不觉地丢失信息。<br>
<br>
3.2 执行控制<br>
Java使用了C的全部控制语句，所以假期您以前用C或C++编程，其中大多数都应是非常熟悉的。大多数程序化的编程语言都提供了某种形式的控制语句，这在语言间通常是共通的。在Java里，涉及的关键字包括if-else、while、do-while、for以及一个名为switch的选择语句。然而，Java并不支持非常有害的goto（它仍是解决某些特殊问题的权宜之计）。仍然可以进行象goto那样的跳转，但比典型的goto要局限多了。<br>
<br>
3.2.1 真和假<br>
所有条件语句都利用条件表达式的真或假来决定执行流程。条件表达式的一个例子是A==B。它用条件运算符“==”来判断A值是否等于B值。该表达式返回true或false。本章早些时候接触到的所有关系运算符都可拿来构造一个条件语句。注意Java不允许我们将一个数字作为布尔值使用，即使它在C和C++里是允许的（真是非零，而假是零）。若想在一次布尔测试中使用一个非布尔值——比如在if(a)里，那么首先必须用一个条件表达式将其转换成一个布尔值，例如if(a!=0)。<br>
<br>
3.2.2 if-else<br>
if-else语句或许是控制程序流程最基本的形式。其中的else是可选的，所以可按下述两种形式来使用if：<br>
<br>
if(布尔表达式)<br>
语句<br>
<br>
或者<br>
<br>
if(布尔表达式)<br>
语句<br>
else<br>
语句<br>
<br>
条件必须产生一个布尔结果。“语句”要么是用分号结尾的一个简单语句，要么是一个复合语句——封闭在括号内的一组简单语句。在本书任何地方，只要提及“语句”这个词，就有可能包括简单或复合语句。<br>
作为if-else的一个例子，下面这个test()方法可告诉我们猜测的一个数字位于目标数字之上、之下还是相等：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>static</font> <font color=#0000ff>int</font> test(<font color=#0000ff>int</font> testval) {
  <font color=#0000ff>int</font> result = 0;
  <font color=#0000ff>if</font>(testval &gt; target)
    result = -1;
  <font color=#0000ff>else</font> <font color=#0000ff>if</font>(testval &lt; target)
    result = +1;
  <font color=#0000ff>else</font>
    result = 0; <font color=#009900>// match</font>
  <font color=#0000ff>return</font> result;
}</PRE></FONT></BLOCKQUOTE>

<br>
最好将流程控制语句缩进排列，使读者能方便地看出起点与终点。<br>
<br>
1. return<br>
return关键字有两方面的用途：指定一个方法返回什么值（假设它没有void返回值），并立即返回那个值。可据此改写上面的test()方法，使其利用这些特点：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>static</font> <font color=#0000ff>int</font> test2(<font color=#0000ff>int</font> testval) {
  <font color=#0000ff>if</font>(testval &gt; target)
    <font color=#0000ff>return</font> -1;
  <font color=#0000ff>if</font>(testval &lt; target)
    <font color=#0000ff>return</font> +1;
  <font color=#0000ff>return</font> 0; <font color=#009900>// match</font>
}</PRE></FONT></BLOCKQUOTE>

<br>
不必加上else，因为方法在遇到return后便不再继续。<br>
<br>
3.2.3 反复<br>
while，do-while和for控制着循环，有时将其划分为“反复语句”。除非用于控制反复的布尔表达式得到“假”的结果，否则语句会重复执行下去。while循环的格式如下：<br>
<br>
while(布尔表达式)<br>
语句<br>
<br>
在循环刚开始时，会计算一次“布尔表达式”的值。而对于后来每一次额外的循环，都会在开始前重新计算一次。<br>
下面这个简单的例子可产生随机数，直到符合特定的条件为止：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: WhileTest.java</font>
<font color=#009900>// Demonstrates the while loop</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> WhileTest {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>double</font> r = 0;
    <font color=#0000ff>while</font>(r &lt; 0.99d) {
      r = Math.random();
      System.out.println(r);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
它用到了Math库里的static（静态）方法random()。该方法的作用是产生0和1之间（包括0，但不包括1）的一个double值。while的条件表达式意思是说：“一直循环下去，直到数字等于或大于0.99”。由于它的随机性，每运行一次这个程序，都会获得大小不同的数字列表。<br>
<br>
3.2.4 do-while<br>
do-while的格式如下：<br>
<br>
do<br>
语句<br>
while(布尔表达式)<br>
<br>
while和do-while唯一的区别就是do-while肯定会至少执行一次；也就是说，至少会将其中的语句“过一遍”——即便表达式第一次便计算为false。而在while循环结构中，若条件第一次就为false，那么其中的语句根本不会执行。在实际应用中，while比do-while更常用一些。<br>
<br>
3.2.5 for<br>
for循环在第一次反复之前要进行初始化。随后，它会进行条件测试，而且在每一次反复的时候，进行某种形式的“步进”（Stepping）。for循环的形式如下：<br>
<br>
for(初始表达式; 布尔表达式; 步进)<br>
语句<br>
<br>
无论初始表达式，布尔表达式，还是步进，都可以置空。每次反复前，都要测试一下布尔表达式。若获得的结果是false，就会继续执行紧跟在for语句后面的那行代码。在每次循环的末尾，会计算一次步进。<br>
for循环通常用于执行“计数”任务：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: ListCharacters.java</font>
<font color=#009900>// Demonstrates "for" loop by listing</font>
<font color=#009900>// all the ASCII characters.</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ListCharacters {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
  <font color=#0000ff>for</font>( <font color=#0000ff>char</font> c = 0; c &lt; 128; c++)
    <font color=#0000ff>if</font> (c != 26 )  <font color=#009900>// ANSI Clear screen</font>
      System.out.println(
        <font color=#004488>"value: "</font> + (<font color=#0000ff>int</font>)c +
        <font color=#004488>" character: "</font> + c);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
注意变量c是在需要用到它的时候定义的——在for循环的控制表达式内部，而非在由起始花括号标记的代码块的最开头。c的作用域是由for控制的表达式。<br>
以于象C这样传统的程序化语言，要求所有变量都在一个块的开头定义。所以在编译器创建一个块的时候，它可以为那些变量分配空间。而在Java和C++中，则可在整个块的范围内分散变量声明，在真正需要的地方才加以定义。这样便可形成更自然的编码风格，也更易理解。<br>
可在for语句里定义多个变量，但它们必须具有同样的类型：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0, j = 1;
    i &lt; 10 &amp;&amp; j != 11;
    i++, j++)
 <font color=#009900>/* body of for loop */</font>;</PRE></FONT></BLOCKQUOTE>
<br>
其中，for语句内的int定义同时覆盖了i和j。只有for循环才具备在控制表达式里定义变量的能力。对于其他任何条件或循环语句，都不可采用这种方法。<br>
<br>
1. 逗号运算符<br>
早在第1章，我们已提到了逗号运算符——注意不是逗号分隔符；后者用于分隔函数的不同自变量。Java里唯一用到逗号运算符的地方就是for循环的控制表达式。在控制表达式的初始化和步进控制部分，我们可使用一系列由逗号分隔的语句。而且那些语句均会独立执行。前面的例子已运用了这种能力，下面则是另一个例子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: CommaOperator.java</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CommaOperator {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 1, j = i + 10; i &lt; 5;
        i++, j = i * 2) {
      System.out.println(<font color=#004488>"i= "</font> + i + <font color=#004488>" j= "</font> + j);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
输出如下：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>i= 1 j= 11
i= 2 j= 4
i= 3 j= 6
i= 4 j= 8</PRE></FONT></BLOCKQUOTE>
<br>
大家可以看到，无论在初始化还是在步进部分，语句都是顺序执行的。此外，尽管初始化部分可设置任意数量的定义，但都属于同一类型。<br>
<br>
3.2.6 中断和继续<br>
在任何循环语句的主体部分，亦可用break和continue控制循环的流程。其中，break用于强行退出循环，不执行循环中剩余的语句。而continue则停止执行当前的反复，然后退回循环起始和，开始新的反复。<br>
下面这个程序向大家展示了break和continue在for和while循环中的例子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: BreakAndContinue.java</font>
<font color=#009900>// Demonstrates break and continue keywords</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> BreakAndContinue {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 100; i++) {
      <font color=#0000ff>if</font>(i == 74) <font color=#0000ff>break</font>; <font color=#009900>// Out of for loop</font>
      <font color=#0000ff>if</font>(i % 9 != 0) <font color=#0000ff>continue</font>; <font color=#009900>// Next iteration</font>
      System.out.println(i);
    }
    <font color=#0000ff>int</font> i = 0;
    <font color=#009900>// An "infinite loop":</font>
    <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
      i++;
      <font color=#0000ff>int</font> j = i * 27;
      <font color=#0000ff>if</font>(j == 1269) <font color=#0000ff>break</font>; <font color=#009900>// Out of loop</font>
      <font color=#0000ff>if</font>(i % 10 != 0) <font color=#0000ff>continue</font>; <font color=#009900>// Top of loop</font>
      System.out.println(i);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
在这个for循环中，i的值永远不会到达100。因为一旦i到达74，break语句就会中断循环。通常，只有在不知道中断条件何时满足时，才需象这样使用break。只要i不能被9整除，continue语句会使程序流程返回循环的最开头执行（所以使i值递增）。如果能够整除，则将值显示出来。<br>
第二部分向大家揭示了一个“无限循环”的情况。然而，循环内部有一个break语句，可中止循环。除此以外，大家还会看到continue移回循环顶部，同时不完成剩余的内容（所以只有在i值能被9整除时才打印出值）。输出结果如下：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>0
9
18
27
36
45
54
63
72
10
20
30
40</PRE></FONT></BLOCKQUOTE>
<br>
之所以显示0，是由于0%9等于0。<br>
无限循环的第二种形式是for(;;)。编译器将while(true)与for(;;)看作同一回事。所以具体选用哪个取决于自己的编程习惯。<br>
<br>
1. 臭名昭著的“goto”<br>
goto关键字很早就在程序设计语言中出现。事实上，goto是汇编语言的程序控制结构的始祖：“若条件A，则跳到这里；否则跳到那里”。若阅读由几乎所有编译器生成的汇编代码，就会发现程序控制里包含了许多跳转。然而，goto是在源码的级别跳转的，所以招致了不好的声誉。若程序总是从一个地方跳到另一个地方，还有什么办法能识别代码的流程呢？随着Edsger 
Dijkstra著名的“Goto有害”论的问世，goto便从此失宠。<br>
事实上，真正的问题并不在于使用goto，而在于goto的滥用。而且在一些少见的情况下，goto是组织控制流程的最佳手段。<br>
尽管goto仍是Java的一个保留字，但并未在语言中得到正式使用；Java没有goto。然而，在break和continue这两个关键字的身上，我们仍然能看出一些goto的影子。它并不属于一次跳转，而是中断循环语句的一种方法。之所以把它们纳入goto问题中一起讨论，是由于它们使用了相同的机制：标签。<br>
“标签”是后面跟一个冒号的标识符，就象下面这样：<br>
label1:<br>
对Java来说，唯一用到标签的地方是在循环语句之前。进一步说，它实际需要紧靠在循环语句的前方——在标签和循环之间置入任何语句都是不明智的。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环或者一个开关。这是由于break和continue关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。如下所示：<br>
<br>
label1:<br>
外部循环{<br>
内部循环{<br>
//...<br>
break; //1<br>
//...<br>
continue; //2<br>
//...<br>
continue label1; //3<br>
//...<br>
break label1; //4<br>
}<br>
}<br>
<br>
在条件1中，break中断内部循环，并在外部循环结束。在条件2中，continue移回内部循环的起始处。但在条件3中，continue 
label1却同时中断内部循环以及外部循环，并移至label1处。随后，它实际是继续循环，但却从外部循环开始。在条件4中，break 
label1也会中断所有循环，并回到label1处，但并不重新进入循环。也就是说，它实际是完全中止了两个循环。<br>
下面是for循环的一个例子：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: LabeledFor.java</font>
<font color=#009900>// Java&#8217;s "labeled for loop"</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> LabeledFor {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>int</font> i = 0;
    outer: <font color=#009900>// Can't have statements here</font>
    <font color=#0000ff>for</font>(; <font color=#0000ff>true</font> ;) { <font color=#009900>// infinite loop</font>
      inner: <font color=#009900>// Can't have statements here</font>
      <font color=#0000ff>for</font>(; i &lt; 10; i++) {
        prt(<font color=#004488>"i = "</font> + i);
        <font color=#0000ff>if</font>(i == 2) {
          prt(<font color=#004488>"continue"</font>);
          <font color=#0000ff>continue</font>;
        }
        <font color=#0000ff>if</font>(i == 3) {
          prt(<font color=#004488>"break"</font>);
          i++; <font color=#009900>// Otherwise i never</font>
               <font color=#009900>// gets incremented.</font>
          <font color=#0000ff>break</font>;
        }
        <font color=#0000ff>if</font>(i == 7) {
          prt(<font color=#004488>"continue outer"</font>);
          i++; <font color=#009900>// Otherwise i never</font>
               <font color=#009900>// gets incremented.</font>
          <font color=#0000ff>continue</font> outer;
        }
        <font color=#0000ff>if</font>(i == 8) {
          prt(<font color=#004488>"break outer"</font>);
          <font color=#0000ff>break</font> outer;
        }
        <font color=#0000ff>for</font>(<font color=#0000ff>int</font> k = 0; k &lt; 5; k++) {
          <font color=#0000ff>if</font>(k == 3) {
            prt(<font color=#004488>"continue inner"</font>);
            <font color=#0000ff>continue</font> inner;
          }
        }
      }
    }
    <font color=#009900>// Can't break or continue</font>
    <font color=#009900>// to labels here</font>
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
这里用到了在其他例子中已经定义的prt()方法。<br>
注意break会中断for循环，而且在抵达for循环的末尾之前，递增表达式不会执行。由于break跳过了递增表达式，所以递增会在i==3的情况下直接执行。在i==7的情况下，continue 
outer语句也会到达循环顶部，而且也会跳过递增，所以它也是直接递增的。<br>
下面是输出结果：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>i = 0
<font color=#0000ff>continue</font> inner
i = 1
<font color=#0000ff>continue</font> inner
i = 2
<font color=#0000ff>continue</font>
i = 3
<font color=#0000ff>break</font>
i = 4
<font color=#0000ff>continue</font> inner
i = 5
<font color=#0000ff>continue</font> inner
i = 6
<font color=#0000ff>continue</font> inner
i = 7
<font color=#0000ff>continue</font> outer
i = 8
<font color=#0000ff>break</font> outer</PRE></FONT></BLOCKQUOTE>

<br>
如果没有break outer语句，就没有办法在一个内部循环里找到出外部循环的路径。这是由于break本身只能中断最内层的循环（对于continue同样如此）。<br>
当然，若想在中断循环的同时退出方法，简单地用一个return即可。<br>
下面这个例子向大家展示了带标签的break以及continue语句在while循环中的用法：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: LabeledWhile.java</font>
<font color=#009900>// Java's "labeled while" loop</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> LabeledWhile {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>int</font> i = 0;
    outer:
    <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
      prt(<font color=#004488>"Outer while loop"</font>);
      <font color=#0000ff>while</font>(<font color=#0000ff>true</font>) {
        i++;
        prt(<font color=#004488>"i = "</font> + i);
        <font color=#0000ff>if</font>(i == 1) {
          prt(<font color=#004488>"continue"</font>);
          <font color=#0000ff>continue</font>;
        }
        <font color=#0000ff>if</font>(i == 3) {
          prt(<font color=#004488>"continue outer"</font>);
          <font color=#0000ff>continue</font> outer;
        }
        <font color=#0000ff>if</font>(i == 5) {
          prt(<font color=#004488>"break"</font>);
          <font color=#0000ff>break</font>;
        }
        <font color=#0000ff>if</font>(i == 7) {
          prt(<font color=#004488>"break outer"</font>);
          <font color=#0000ff>break</font> outer;
        }
      }
    }
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> prt(String s) {
    System.out.println(s);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>

<br>
同样的规则亦适用于while：<br>
(1) 简单的一个continue会退回最内层循环的开头（顶部），并继续执行。<br>
(2) 带有标签的continue会到达标签的位置，并重新进入紧接在那个标签后面的循环。<br>
(3) break会中断当前循环，并移离当前标签的末尾。<br>
(4) 带标签的break会中断当前循环，并移离由那个标签指示的循环的末尾。<br>
这个方法的输出结果是一目了然的：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Outer <font color=#0000ff>while</font> loop
i = 1
<font color=#0000ff>continue</font>
i = 2
i = 3
<font color=#0000ff>continue</font> outer
Outer <font color=#0000ff>while</font> loop
i = 4
i = 5
<font color=#0000ff>break</font>
Outer <font color=#0000ff>while</font> loop
i = 6
i = 7
<font color=#0000ff>break</font> outer</PRE></FONT></BLOCKQUOTE>
<br>
大家要记住的重点是：在Java里唯一需要用到标签的地方就是拥有嵌套循环，而且想中断或继续多个嵌套级别的时候。<br>
在Dijkstra的“Goto有害”论中，他最反对的就是标签，而非goto。随着标签在一个程序里数量的增多，他发现产生错误的机会也越来越多。标签和goto使我们难于对程序作静态分析。这是由于它们在程序的执行流程中引入了许多“怪圈”。但幸运的是，Java标签不会造成这方面的问题，因为它们的活动场所已被限死，不可通过特别的方式到处传递程序的控制权。由此也引出了一个有趣的问题：通过限制语句的能力，反而能使一项语言特性更加有用。<br>
<br>
3.2.7 开关<br>
“开关”（Switch）有时也被划分为一种“选择语句”。根据一个整数表达式的值，switch语句可从一系列代码选出一段执行。它的格式如下：<br>
<br>
switch(整数选择因子) {<br>
case 整数值1 : 语句; break;<br>
case 整数值2 : 语句; break;<br>
case 整数值3 : 语句; break;<br>
case 整数值4 : 语句; break;<br>
case 整数值5 : 语句; break;<br>
//..<br>
default:语句;<br>
}<br>
<br>
其中，“整数选择因子”是一个特殊的表达式，能产生整数值。switch能将整数选择因子的结果与每个整数值比较。若发现相符的，就执行对应的语句（简单或复合语句）。若没有发现相符的，就执行default语句。<br>
在上面的定义中，大家会注意到每个case均以一个break结尾。这样可使执行流程跳转至switch主体的末尾。这是构建switch语句的一种传统方式，但break是可选的。若省略break，会继续执行后面的case语句的代码，直到遇到一个break为止。尽管通常不想出现这种情况，但对有经验的程序员来说，也许能够善加利用。注意最后的default语句没有break，因为执行流程已到了break的跳转目的地。当然，如果考虑到编程风格方面的原因，完全可以在default语句的末尾放置一个break，尽管它并没有任何实际的用处。<br>
switch语句是实现多路选择的一种易行方式（比如从一系列执行路径中挑选一个）。但它要求使用一个选择因子，并且必须是int或char那样的整数值。例如，假若将一个字串或者浮点数作为选择因子使用，那么它们在switch语句里是不会工作的。对于非整数类型，则必须使用一系列if语句。<br>
下面这个例子可随机生成字母，并判断它们是元音还是辅音字母：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: VowelsAndConsonants.java</font>
<font color=#009900>// Demonstrates the switch statement</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> VowelsAndConsonants {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 100; i++) {
      <font color=#0000ff>char</font> c = (<font color=#0000ff>char</font>)(Math.random() * 26 + 'a');
      System.out.print(c + <font color=#004488>": "</font>);
      <font color=#0000ff>switch</font>(c) {
      <font color=#0000ff>case</font> 'a':
      <font color=#0000ff>case</font> 'e':
      <font color=#0000ff>case</font> 'i':
      <font color=#0000ff>case</font> 'o':
      <font color=#0000ff>case</font> 'u':
                System.out.println(<font color=#004488>"vowel"</font>);
                <font color=#0000ff>break</font>;
      <font color=#0000ff>case</font> 'y':
      <font color=#0000ff>case</font> 'w':
                System.out.println(
                  <font color=#004488>"Sometimes a vowel"</font>);
                <font color=#0000ff>break</font>;
      <font color=#0000ff>default</font>:
                System.out.println(<font color=#004488>"consonant"</font>);
      }
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
由于Math.random()会产生0到1之间的一个值，所以只需将其乘以想获得的最大随机数（对于英语字母，这个数字是26），再加上一个偏移量，得到最小的随机数。<br>
尽管我们在这儿表面上要处理的是字符，但switch语句实际使用的字符的整数值。在case语句中，用单引号封闭起来的字符也会产生整数值，以便我们进行比较。<br>
请注意case语句相互间是如何聚合在一起的，它们依次排列，为一部分特定的代码提供了多种匹配模式。也应注意将break语句置于一个特定case的末尾，否则控制流程会简单地下移，并继续判断下一个条件是否相符。<br>
<br>
1. 具体的计算<br>
应特别留意下面这个语句：<br>
char c = (char)(Math.random() * 26 + 'a');<br>
Math.random()会产生一个double值，所以26会转换成double类型，以便执行乘法运算。这个运算也会产生一个double值。这意味着为了执行加法，必须无将'a'转换成一个double。利用一个“造型”，double结果会转换回char。<br>
我们的第一个问题是，造型会对char作什么样的处理呢？换言之，假设一个值是29.7，我们把它造型成一个char，那么结果值到底是30还是29呢？答案可从下面这个例子中得到：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: CastingNumbers.java</font>
<font color=#009900>// What happens when you cast a float or double</font>
<font color=#009900>// to an integral value?</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> CastingNumbers {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>double</font>
      above = 0.7,
      below = 0.4;
    System.out.println(<font color=#004488>"above: "</font> + above);
    System.out.println(<font color=#004488>"below: "</font> + below);
    System.out.println(
      <font color=#004488>"(int)above: "</font> + (<font color=#0000ff>int</font>)above);
    System.out.println(
      <font color=#004488>"(int)below: "</font> + (<font color=#0000ff>int</font>)below);
    System.out.println(
      <font color=#004488>"(char)('a' + above): "</font> +
      (<font color=#0000ff>char</font>)('a' + above));
    System.out.println(
      <font color=#004488>"(char)('a' + below): "</font> +
      (<font color=#0000ff>char</font>)('a' + below));
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
输出结果如下：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>above: 0.7
below: 0.4
(<font color=#0000ff>int</font>)above: 0
(<font color=#0000ff>int</font>)below: 0
(<font color=#0000ff>char</font>)('a' + above): a
(<font color=#0000ff>char</font>)('a' + below): a</PRE></FONT></BLOCKQUOTE>

<br>
所以答案就是：将一个float或double值造型成整数值后，总是将小数部分“砍掉”，不作任何进位处理。<br>
第二个问题与Math.random()有关。它会产生0和1之间的值，但是否包括值'1'呢？用正统的数学语言表达，它到底是(0,1)，[0,1]，(0,1]，还是[0,1)呢（方括号表示“包括”，圆括号表示“不包括”）？同样地，一个示范程序向我们揭示了答案：<br>
<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: RandomBounds.java</font>
<font color=#009900>// Does Math.random() produce 0.0 and 1.0?</font>

<font color=#0000ff>public</font> <font color=#0000ff>class</font> RandomBounds {
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> usage() {
    System.err.println(<font color=#004488>"Usage: \n\t"</font> +
      <font color=#004488>"RandomBounds lower\n\t"</font> +
      <font color=#004488>"RandomBounds upper"</font>);
    System.exit(1);
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(args.length != 1) usage();
    <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"lower"</font>)) {
      <font color=#0000ff>while</font>(Math.random() != 0.0)
        ; <font color=#009900>// Keep trying</font>
      System.out.println(<font color=#004488>"Produced 0.0!"</font>);
    } 
    <font color=#0000ff>else</font> <font color=#0000ff>if</font>(args[0].equals(<font color=#004488>"upper"</font>)) {
      <font color=#0000ff>while</font>(Math.random() != 1.0)
        ; <font color=#009900>// Keep trying</font>
      System.out.println(<font color=#004488>"Produced 1.0!"</font>);
    } 
    <font color=#0000ff>else</font> 
      usage();
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
为运行这个程序，只需在命令行键入下述命令即可：<br>
java RandomBounds lower<br>
或<br>
java RandomBounds upper<br>
<br>
在这两种情况下，我们都必须人工中断程序，所以会发现Math.random()“似乎”永远都不会产生0.0或1.0。但这只是一项实验而已。若想到0和1之间有2的128次方不同的双精度小数，所以如果全部产生这些数字，花费的时间会远远超过一个人的生命。当然，最后的结果是在Math.random()的输出中包括了0.0。或者用数字语言表达，输出值范围是[0,1)。<br>
<br>
3.3 总结<br>
本章总结了大多数程序设计语言都具有的基本特性：计算、运算符优先顺序、类型转换以及选择和循环等等。现在，我们作好了相应的准备，可继续向面向对象的程序设计领域迈进。在下一章里，我们将讨论对象的初始化与清除问题，再后面则讲述隐藏的基本实现方法。<br>
<br>
3.4 练习<br>
(1) 写一个程序，打印出1到100间的整数。<br>
(2) 修改练习(1)，在值为47时用一个break退出程序。亦可换成return试试。<br>
(3) 创建一个switch语句，为每一种case都显示一条消息。并将switch置入一个for循环里，令其尝试每一种case。在每个case后面都放置一个break，并对其进行测试。然后，删除break，看看会有什么情况出现。<br>
</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/inmotion/inmhorsa.gif" width="300" height="10"></p>

<p align="center"><a href="http://www.bruceeckel.com">英文版主页</a> | <a href="../index.htm">中文版主页</a> |  <a href="../index.htm">详细目录</a> 
| <a href="../about/index.htm">关于译者</a></p>
</body>
</html>
