<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>The Shapes Application</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="110"><H1>The Shapes Application</H1></A>

<P>Let's put what we've learned so far to work by building an application that uses 
menus and accelerators and also uses MFC's UI update mechanism to keep menu items 
in sync with data members whose values reflect internal application states. For the 
first time, we'll use AppWizard to generate the initial source code for the application 
and ClassWizard to write message handlers. We'll also use ClassWizard to write 
command handlers and update handlers for the application's menu items. AppWizard 
and ClassWizard are MFC code generators that conserve development time by 
reducing the amount of code you have to write.
</P>

<P>The application, which is named Shapes, is shown in Figure 4-2. Shapes 
displays a polygon in the center of a frame window. You can change the polygon's shape 
by selecting a command from the Shape menu (Circle, Triangle, or Square) or 
pressing the corresponding keyboard accelerator key (F7, F8, or F9).
</P>

<P>
<A HREF="javascript:fullSize('F04mg02x.htm')"> <img src="images/F04mg02.JPG" width=404 height=304 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 4-2.</B> <I>The Shapes window.</I><!-- /CAPTION -->
</p>

<P>The program's source code is reproduced in Figure 4-3. When you write 
an application using the wizards, however, the source code doesn't tell the whole 
story; it's just as important to understand 
<I> how</I> the source code was created, and by 
whom. Therefore, I'll begin with a step-by-step description of how to create the initial 
source code for Shapes with the MFC AppWizard. Then we'll pause to examine what 
AppWizard has wrought.
</P>

<P>
<B>Figure 4-3.</B><I>  The Shapes program.</I>
</p>

<P>
<TABLE cellpadding=5 width="95%"><TR><TD>
<A NAME="111"><H3>Shapes.h</H3></A>
<PRE>// Shapes.h : main header file for the SHAPES application
//

#if !defined(AFX_SHAPES_H__437C8B37_5C45_11D2_8E53_006008A82731__INCLUDED_)
#define AFX_SHAPES_H__437C8B37_5C45_11D2_8E53_006008A82731__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

#ifndef __AFXWIN_H__
        #error include `stdafx.h' before including this file for PCH
#endif

#include &quot;resource.h&quot;       // main symbols


///////////////////////////////////////////////////////////////////////////
// CShapesApp:
// See Shapes.cpp for the implementation of this class
//

class CShapesApp : public CWinApp
{
public:
        CShapesApp();

// Overrides
        // ClassWizard generated virtual function overrides
        //{{AFX_VIRTUAL(CShapesApp)
        public:
        virtual BOOL InitInstance();
        //}}AFX_VIRTUAL

// Implementation

public:
        //{{AFX_MSG(CShapesApp)
        afx_msg void OnAppAbout();
        //}}AFX_MSG
        DECLARE_MESSAGE_MAP()
};


///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately 
// before the previous line.

#endif 
// !defined(AFX_SHAPES_H__437C8B37_5C45_11D2_8E53_006008A82731__INCLUDED_)
</PRE></TD></TR></TABLE>
</P>

<p>
<TABLE cellpadding=5 width="95%"><TR><TD>
<A NAME="112"><H3>Shapes.cpp</H3></A>
<PRE>// Shapes.cpp : Defines the class behaviors for the application.
//
#include &quot;stdafx.h&quot;
&quot;#include &quot;Shapes.h&quot;

#include &quot;MainFrm.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CShapesApp

BEGIN_MESSAGE_MAP(CShapesApp, CWinApp)
        //{{AFX_MSG_MAP(CShapesApp)
        ON_COMMAND(ID_APP_ABOUT, OnAppAbout)
        //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CShapesApp construction

CShapesApp::CShapesApp()
{
}

///////////////////////////////////////////////////////////////////////////
// The one and only CShapesApp object

CShapesApp theApp;

///////////////////////////////////////////////////////////////////////////
// CShapesApp initialization

BOOL CShapesApp::InitInstance()
{
        // Standard initialization

        // Change the registry key under which our settings are stored.
        SetRegistryKey(_T(&quot;Local AppWizard-Generated Applications&quot;));

        CMainFrame* pFrame = new CMainFrame;
        m_pMainWnd = pFrame;

        // create and load the frame with its resources

        pFrame-&gt;LoadFrame(IDR_MAINFRAME,
                WS_OVERLAPPEDWINDOW &#166; FWS_ADDTOTITLE, NULL,
                NULL);

        pFrame-&gt;ShowWindow(SW_SHOW);
        pFrame-&gt;UpdateWindow();

        return TRUE;
}

///////////////////////////////////////////////////////////////////////////
// CShapesApp message handlers



///////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
        CAboutDlg();

// Dialog Data
        //{{AFX_DATA(CAboutDlg)
        enum { IDD = IDD_ABOUTBOX };
        //}}AFX_DATA

        // ClassWizard generated virtual function overrides
        //{{AFX_VIRTUAL(CAboutDlg)
        protected:
        virtual void DoDataExchange(CDataExchange* pDX);  // DDX/DDV support
        //}}AFX_VIRTUAL

// Implementation
protected:
        //{{AFX_MSG(CAboutDlg)
                // No message handlers
        //}}AFX_MSG
        DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
        //{{AFX_DATA_INIT(CAboutDlg)
        //}}AFX_DATA_INIT
}


void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
        CDialog::DoDataExchange(pDX);
        //{{AFX_DATA_MAP(CAboutDlg)
        //}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
        //{{AFX_MSG_MAP(CAboutDlg)
                // No message handlers
        //}}AFX_MSG_MAP
END_MESSAGE_MAP()

// App command to run the dialog
void CShapesApp::OnAppAbout()
{
        CAboutDlg aboutDlg;
        aboutDlg.DoModal();
}

///////////////////////////////////////////////////////////////////////////
// CShapesApp message handlers
</pre></TD></TR></TABLE>
</P>




<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<A NAME="113"><H3>MainFrm.h</H3></A>
<pre>// MainFrm.h : interface of the CMainFrame class
//
////////////////////////////////////////////////////////////////////////////

#if !defined(AFX_MAINFRM_H__437C8B3B_5C45_11D2_8E53_006008A82731__INCLUDED_)
#define AFX_MAINFRM_H__437C8B3B_5C45_11D2_8E53_006008A82731__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

#include &quot;ChildView.h&quot;

class CMainFrame : public CFrameWnd
{
    
public:
    CMainFrame();
protected: 
    DECLARE_DYNAMIC(CMainFrame)

// Attributes
public:

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CMainFrame)
    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    virtual BOOL OnCmdMsg(UINT nID, int nCode, void* pExtra, 
        AFX_CMDHANDLERINFO* pHandlerInfo);
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CMainFrame();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif
    CChildView    m_wndView;

// Generated message map functions
protected:
    //{{AFX_MSG(CMainFrame)
    afx_msg void OnSetFocus(CWnd *pOldWnd);
    afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};
///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately 
// before the previous line.

#endif
// !defined(AFX_MAINFRM_H__437C8B3B_5C45_11D2_8E53_006008A82731__INCLUDED_)
</pre>
</td>
</tr>
</table>
</p>




<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<A NAME="114"><H3>MainFrm.cpp</H3></A>
<pre>// MainFrm.cpp : implementation of the CMainFrame class
//

#include &quot;stdafx.h&quot;
#include &quot;Shapes.h&quot;

#include &quot;MainFrm.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CMainFrame

IMPLEMENT_DYNAMIC(CMainFrame, CFrameWnd)

BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
    //{{AFX_MSG_MAP(CMainFrame)
    ON_WM_SETFOCUS()
    ON_WM_CREATE()
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CMainFrame construction/destruction

CMainFrame::CMainFrame()
{
}

CMainFrame::~CMainFrame()
{
}

BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)
{
    if( !CFrameWnd::PreCreateWindow(cs) )
        return FALSE;
    cs.dwExStyle &amp;= ~WS_EX_CLIENTEDGE;

    cs.lpszClass = AfxRegisterWndClass(0);
    return TRUE;
}
///////////////////////////////////////////////////////////////////////////
// CMainFrame diagnostics

#ifdef _DEBUG
void CMainFrame::AssertValid() const
{
    CFrameWnd::AssertValid();
}

void CMainFrame::Dump(CDumpContext&amp; dc) const
{
    CFrameWnd::Dump(dc);
}

#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CMainFrame message handlers
void CMainFrame::OnSetFocus(CWnd* pOldWnd)
{
    // forward focus to the view window
    m_wndView.SetFocus();
}

BOOL CMainFrame::OnCmdMsg(UINT nID, int nCode, void* pExtra, 
    AFX_CMDHANDLERINFO* pHandlerInfo)
{
    // let the view have first crack at the command
    if (m_wndView.OnCmdMsg(nID, nCode, pExtra, pHandlerInfo))
        return TRUE;

    // otherwise, do default handling
    return CFrameWnd::OnCmdMsg(nID, nCode, pExtra, pHandlerInfo);
}


int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
    if (CFrameWnd::OnCreate(lpCreateStruct) == -1)
        return -1;

    if (!m_wndView.Create(NULL, NULL, AFX_WS_DEFAULT_VIEW,
        CRect(0, 0, 0, 0), this, AFX_IDW_PANE_FIRST, NULL))
    {
        TRACE0(&quot;Failed to create view window\n&quot;);
        return -1;
    }
    return 0;
}
</pre>
</td>
</tr>
</table>
</p>




<p>
<TABLE cellpadding=5 width="95%"><TR><TD>
<A NAME="115"><H3>ChildView.h</H3></A>
<PRE>// ChildView.h : interface of the CChildView class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(AFX_CHILDVIEW_H__437C8B3D_5C45_11D2_8E53_006008A82731__INCLUDED_)
#define AFX_CHILDVIEW_H__437C8B3D_5C45_11D2_8E53_006008A82731__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

///////////////////////////////////////////////////////////////////////////
// CChildView window

class CChildView : public CWnd
{
// Construction
public:
    CChildView();

// Attributes
public:

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CChildView)
    protected:
    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CChildView();

    // Generated message map functions
protected:
    int m_nShape;
    //{{AFX_MSG(CChildView)
    afx_msg void OnPaint();
    afx_msg void OnShapeCircle();
    afx_msg void OnShapeTriangle();
    afx_msg void OnShapeSquare();
    afx_msg void OnUpdateShapeCircle(CCmdUI* pCmdUI);
    afx_msg void OnUpdateShapeTriangle(CCmdUI* pCmdUI);
    afx_msg void OnUpdateShapeSquare(CCmdUI* pCmdUI);
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately 
// before the previous line.

#endif
// !defined(AFX_CHILDVIEW_H__437C8B3D_5C45_11D2_8E53_006008A82731__INCLUDED_)
</pre></TD></TR></TABLE>
</P>



<P>
<TABLE cellpadding=5 width="95%"><TR><TD>

<A NAME="116"><H3>ChildView.cpp</H3></A>
<PRE>// ChildView.cpp : implementation of the CChildView class
//

#include &quot;stdafx.h&quot;
#include &quot;Shapes.h&quot;
#include &quot;ChildView.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CChildView

CChildView::CChildView()

{
    m_nShape = 1; // Triangle
}

CChildView::~CChildView()
{
}

BEGIN_MESSAGE_MAP(CChildView,CWnd )
    //{{AFX_MSG_MAP(CChildView)
    ON_WM_PAINT()
    ON_COMMAND(ID_SHAPE_CIRCLE, OnShapeCircle)
    ON_COMMAND(ID_SHAPE_TRIANGLE, OnShapeTriangle)
    ON_COMMAND(ID_SHAPE_SQUARE, OnShapeSquare)
    ON_UPDATE_COMMAND_UI(ID_SHAPE_CIRCLE, OnUpdateShapeCircle)
    ON_UPDATE_COMMAND_UI(ID_SHAPE_TRIANGLE, OnUpdateShapeTriangle)
    ON_UPDATE_COMMAND_UI(ID_SHAPE_SQUARE, OnUpdateShapeSquare)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CChildView message handlers

BOOL CChildView::PreCreateWindow(CREATESTRUCT&amp; cs) 
{
    if (!CWnd::PreCreateWindow(cs))
        return FALSE;

    cs.dwExStyle &#166;= WS_EX_CLIENTEDGE;
    cs.style &amp;= ~WS_BORDER;
    cs.lpszClass = AfxRegisterWndClass(CS_HREDRAW&#166;CS_VREDRAW&#166;CS_DBLCLKS, 
        ::LoadCursor(NULL, IDC_ARROW), HBRUSH(COLOR_WINDOW+1), NULL);

    return TRUE;
}

void CChildView::OnPaint() 
{
    CPoint points[3];
    CPaintDC dc(this);
    
    CRect rcClient;
    GetClientRect (&amp;rcClient);

    int cx = rcClient.Width () / 2;
    int cy = rcClient.Height () / 2;
    CRect rcShape (cx - 45, cy - 45, cx + 45, cy + 45);

    CBrush brush (RGB (255, 0, 0));
    CBrush* pOldBrush = dc.SelectObject (&amp;brush);

    switch (m_nShape) {    

    case 0: // Circle
        dc.Ellipse (rcShape);
        break;

    case 1: // Triangle
        points[0].x = cx - 45;
        points[0].y = cy + 45;
        points[1].x = cx;
        points[1].y = cy - 45;
        points[2].x = cx + 45;
        points[2].y = cy + 45;
        dc.Polygon (points, 3);
        break;

    case 2: // Square
        dc.Rectangle (rcShape);
        break;
    }
    dc.SelectObject (pOldBrush);
}

void CChildView::OnShapeCircle() 
{
    m_nShape = 0;
    Invalidate ();    
}

void CChildView::OnShapeTriangle() 
{
    m_nShape = 1;
    Invalidate ();    
}

void CChildView::OnShapeSquare() 
{
    m_nShape = 2;
    Invalidate ();    
}

void CChildView::OnUpdateShapeCircle(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 0);    
}

void CChildView::OnUpdateShapeTriangle(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 1);    
}

void CChildView::OnUpdateShapeSquare(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 2);    
}
</pre></TD></TR></TABLE></P>




<P>
<TABLE cellpadding=5 width="95%"><TR><TD>
<A NAME="117"><H3>Resource.h</H3></A>
<PRE>//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by Shapes.rc
//
#define IDD_ABOUTBOX                    100
#define IDR_MAINFRAME                   128
#define IDR_SHAPESTYPE                  129
#define ID_SHAPE_CIRCLE                 32771
#define ID_SHAPE_TRIANGLE               32772
#define ID_SHAPE_SQUARE                 32773

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        130
#define _APS_NEXT_COMMAND_VALUE         32774
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
</pre></TD></TR></TABLE>
</P>



<P>
<TABLE cellpadding=5 width="95%"><TR><TD>
<A NAME="118"><H3>Shapes.rc</H3></A>
<PRE>//Microsoft Developer Studio generated resource script.
//
#include &quot;resource.h&quot;

#define APSTUDIO_READONLY_SYMBOLS
///////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include &quot;afxres.h&quot;

///////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

///////////////////////////////////////////////////////////////////////////
// English (U.S.) resources

#if !defined(AFX_RESOURCE_DLL) &#166;&#166; defined(AFX_TARG_ENU)
#ifdef _WIN32
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
#pragma code_page(1252)
#endif //_WIN32

#ifdef APSTUDIO_INVOKED
///////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;resource.h\0&quot;
END

2 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;#include &quot;&quot;afxres.h&quot;&quot;\r\n&quot;
    &quot;\0&quot;
END

3 TEXTINCLUDE DISCARDABLE 
BEGIN
    &quot;#define _AFX_NO_SPLITTER_RESOURCES\r\n&quot;
    &quot;#define _AFX_NO_OLE_RESOURCES\r\n&quot;
    &quot;#define _AFX_NO_TRACKER_RESOURCES\r\n&quot;
    &quot;#define _AFX_NO_PROPERTY_RESOURCES\r\n&quot;
    &quot;\r\n&quot;
    &quot;#if !defined(AFX_RESOURCE_DLL) &#166;&#166; defined(AFX_TARG_ENU)\r\n&quot;
    &quot;#ifdef _WIN32\r\n&quot;
    &quot;LANGUAGE 9, 1\r\n&quot;
    &quot;#pragma code_page(1252)\r\n&quot;
    &quot;#endif //_WIN32\r\n&quot;
    &quot;#include &quot;&quot;res\\Shapes.rc2&quot;
        &quot;  // non-Microsoft Visual C++ edited resources\r\n&quot;
    &quot;#include &quot;&quot;afxres.rc&quot;&quot;        // Standard components\r\n&quot;
    &quot;#endif\r\n&quot;
    &quot;\0&quot;
END

#endif    // APSTUDIO_INVOKED


///////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDR_MAINFRAME           ICON    DISCARDABLE     &quot;res\\Shapes.ico&quot;

///////////////////////////////////////////////////////////////////////////
//
// Menu
//

IDR_MAINFRAME MENU PRELOAD DISCARDABLE 
BEGIN
    POPUP &quot;&amp;File&quot;
    BEGIN
        MENUITEM &quot;E&amp;xit&quot;,                       ID_APP_EXIT
    END
    POPUP &quot;&amp;Shape&quot;
    BEGIN
        MENUITEM &quot;&amp;Circle\tF7&quot;,                 ID_SHAPE_CIRCLE
        MENUITEM &quot;&amp;Triangle\tF8&quot;,               ID_SHAPE_TRIANGLE
        MENUITEM &quot;&amp;Square\tF9&quot;,                 ID_SHAPE_SQUARE
    END
END


///////////////////////////////////////////////////////////////////////////
//
// Accelerator
//

IDR_MAINFRAME ACCELERATORS PRELOAD MOVEABLE PURE 
BEGIN
    VK_F7,          ID_SHAPE_CIRCLE,        VIRTKEY, NOINVERT
    VK_F8,          ID_SHAPE_TRIANGLE,      VIRTKEY, NOINVERT
    VK_F9,          ID_SHAPE_SQUARE,        VIRTKEY, NOINVERT
END


///////////////////////////////////////////////////////////////////////////
//
// Dialog
//

IDD_ABOUTBOX DIALOG DISCARDABLE  0, 0, 235, 55
STYLE DS_MODALFRAME &#166; WS_POPUP &#166; WS_CAPTION &#166; WS_SYSMENU
CAPTION &quot;About Shapes&quot;
FONT 8, &quot;MS Sans Serif&quot;
BEGIN
    ICON            IDR_MAINFRAME,IDC_STATIC,11,17,20,20
    LTEXT           &quot;Shapes Version 1.0&quot;,IDC_STATIC,40,10,119,8,SS_NOPREFIX
    LTEXT           &quot;Copyright (C) 1998&quot;,IDC_STATIC,40,25,119,8
    DEFPUSHBUTTON   &quot;OK&quot;,IDOK,178,7,50,14,WS_GROUP
END


#ifndef _MAC
///////////////////////////////////////////////////////////////////////////
//
// Version
//

VS_VERSION_INFO VERSIONINFO
    FILEVERSION 1,0,0,1
    PRODUCTVERSION 1,0,0,1
    FILEFLAGSMASK 0x3fL
#ifdef _DEBUG
    FILEFLAGS 0x1L
#else
    FILEFLAGS 0x0L
#endif
    FILEOS 0x4L
    FILETYPE 0x1L
    FILESUBTYPE 0x0L
BEGIN
    BLOCK &quot;StringFileInfo&quot;
    BEGIN
        BLOCK &quot;040904B0&quot;
        BEGIN
            VALUE &quot;CompanyName&quot;, &quot;\0&quot;
            VALUE &quot;FileDescription&quot;, &quot;Shapes MFC Application\0&quot;
            VALUE &quot;FileVersion&quot;, &quot;1, 0, 0, 1\0&quot;
            VALUE &quot;InternalName&quot;, &quot;Shapes\0&quot;
            VALUE &quot;LegalCopyright&quot;, &quot;Copyright (C) 1998\0&quot;
            VALUE &quot;LegalTrademarks&quot;, &quot;\0&quot;
            VALUE &quot;OriginalFilename&quot;, &quot;Shapes.EXE\0&quot;
            VALUE &quot;ProductName&quot;, &quot;Shapes Application\0&quot;
            VALUE &quot;ProductVersion&quot;, &quot;1, 0, 0, 1\0&quot;
        END
    END
    BLOCK &quot;VarFileInfo&quot;
    BEGIN
        VALUE &quot;Translation&quot;, 0x409, 1200
    END
END

#endif    // !_MAC


///////////////////////////////////////////////////////////////////////////
//
// DESIGNINFO
//

#ifdef APSTUDIO_INVOKED
GUIDELINES DESIGNINFO DISCARDABLE 
BEGIN
    IDD_ABOUTBOX, DIALOG
    BEGIN
        LEFTMARGIN, 7
        RIGHTMARGIN, 228
        TOPMARGIN, 7
        BOTTOMMARGIN, 48
    END
END
#endif    // APSTUDIO_INVOKED


/////////////////////////////////////////////////////////////////////////////
//
// String Table
//

STRINGTABLE PRELOAD DISCARDABLE 
BEGIN
    IDR_MAINFRAME           &quot;Shapes&quot;
END

STRINGTABLE PRELOAD DISCARDABLE 
BEGIN
    AFX_IDS_APP_TITLE       &quot;Shapes&quot;
    AFX_IDS_IDLEMESSAGE     &quot;Ready&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    ID_INDICATOR_EXT        &quot;EXT&quot;
    ID_INDICATOR_CAPS       &quot;CAP&quot;
    ID_INDICATOR_NUM        &quot;NUM&quot;
    ID_INDICATOR_SCRL       &quot;SCRL&quot;
    ID_INDICATOR_OVR        &quot;OVR&quot;
    ID_INDICATOR_REC        &quot;REC&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    ID_APP_ABOUT         &quot;Display program information, version number and copyright\nAbout&quot;
    ID_APP_EXIT           &quot;Quit the application; prompts to save documents\nExit&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    ID_NEXT_PANE             &quot;Switch to the next window pane\nNext Pane&quot;
    ID_PREV_PANE            &quot;Switch back to the previous window pane\nPrevious Pane&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    ID_WINDOW_SPLIT         &quot;Split the active window into panes\nSplit&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    ID_EDIT_CLEAR           &quot;Erase the selection\nErase&quot;
    ID_EDIT_CLEAR_ALL       &quot;Erase everything\nErase All&quot;
    ID_EDIT_COPY            &quot;Copy the selection and put it on the Clipboard\nCopy&quot;
    ID_EDIT_CUT             &quot;Cut the selection and put it on the Clipboard\nCut&quot;
    ID_EDIT_FIND            &quot;Find the specified text\nFind&quot;
    ID_EDIT_PASTE           &quot;Insert Clipboard contents\nPaste&quot;
    ID_EDIT_REPEAT          &quot;Repeat the last action\nRepeat&quot;
    ID_EDIT_REPLACE         &quot;Replace specific text with different text\nReplace&quot;
    ID_EDIT_SELECT_ALL      &quot;Select the entire document\nSelect All&quot;
    ID_EDIT_UNDO            &quot;Undo the last action\nUndo&quot;
    ID_EDIT_REDO            &quot;Redo the previously undone action\nRedo&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    AFX_IDS_SCSIZE          &quot;Change the window size&quot;
    AFX_IDS_SCMOVE          &quot;Change the window position&quot;
    AFX_IDS_SCMINIMIZE      &quot;Reduce the window to an icon&quot;
    AFX_IDS_SCMAXIMIZE      &quot;Enlarge the window to full size&quot;
    AFX_IDS_SCNEXTWINDOW    &quot;Switch to the next document window&quot;
    AFX_IDS_SCPREVWINDOW    &quot;Switch to the previous document window&quot;
    AFX_IDS_SCCLOSE         &quot;Close the active window and prompts to save the documents&quot;
END

STRINGTABLE DISCARDABLE 
BEGIN
    AFX_IDS_SCRESTORE       &quot;Restore the window to normal size&quot;
    AFX_IDS_SCTASKLIST      &quot;Activate Task List&quot;
END

#endif    // English (U.S.) resources
/////////////////////////////////////////////////////////////////////////////



#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//
#define _AFX_NO_SPLITTER_RESOURCES
#define _AFX_NO_OLE_RESOURCES
#define _AFX_NO_TRACKER_RESOURCES
#define _AFX_NO_PROPERTY_RESOURCES

#if !defined(AFX_RESOURCE_DLL) &#166;&#166; defined(AFX_TARG_ENU)
#ifdef _WIN32
LANGUAGE 9, 1
#pragma code_page(1252)
#endif //_WIN32
#include &quot;res\Shapes.rc2&quot;  // non-Microsoft Visual C++ edited resources
#include &quot;afxres.rc&quot;         // Standard components
#endif

///////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</pre></TD></TR></TABLE></P>

<A NAME="119"><H2>Running the MFC AppWizard</H2></A>

<P>Shapes' source code is a combination of wizard-generated code and handwritten 
code. The first step in creating it is to run the MFC AppWizard. Here's how to get started:
</p>

<ol>
<p>
<li>Create a new Visual C++ project named Shapes. Select MFC 
AppWizard (Exe) as the application type, as shown in Figure 4-4. This will start 
AppWizard, which will ask you a series of questions before generating 
the project.
</li>
</p>

<p>
<A HREF="javascript:fullSize('F04mg04x.htm')"> <img src="images/F04mg04.JPG" width=404 height=288 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 4-4.</B> <I>Creating the Shapes project.</I><!-- /CAPTION -->
</p>

<p>
<li>In AppWizard's Step 1 dialog box, select Single Document as the 
application type and uncheck the box labeled Document/View Architecture 
Support, as shown in Figure 4-5. The latter is a new option in Visual C++ 6; 
it prevents AppWizard from generating an MFC document/view 
application. The meaning of Single Document is discussed in <a href="ch08a.htm">Chapter 8</a>.
</li>
</p>

<p>
<A HREF="javascript:fullSize('F04mg05x.htm')"> <img src="images/F04mg05.JPG" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 4-5.</B> <I>AppWizard's Step 1 dialog box.</I><!-- /CAPTION -->
</p>

<p>
<li>In AppWizard's Step 2 dialog box, accept the defaults.</li>
</p>

<p>
<li>
In AppWizard's Step 3 dialog box, uncheck the ActiveX Controls box. 
When checked, this option adds infrastructure that allows MFC windows to 
host ActiveX controls&#8212;a subject that we'll cover in <a href="ch21a.htm">Chapter 21</a>.
</li>
</P>

<p>
<li>
In AppWizard's Step 4 dialog box, uncheck the Docking Toolbar, 
Initial Status Bar, and 3D Controls check boxes, as shown in Figure 4-6. 
Accept the defaults elsewhere in this dialog box.
</li>
</P>

<P>
<li>
Accept the defaults in the remaining AppWizard dialog boxes, and 
allow AppWizard to create the project. You don't even have to see the Step 
5 and Step 6 dialog boxes to accept the defaults in them; just click the 
Finish button in the Step 4 dialog box.
</li>
</P>
</ol>

<P>After you click Finish, AppWizard will display a summary of the code it is 
about to create. Click OK to affirm or click Cancel and then use the Back and Next 
buttons to move backward and forward through the dialog boxes, making changes as needed.
</p>

<p>
<A HREF="javascript:fullSize('F04mg06x.htm')"> <img src="images/F04mg06.JPG" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 4-6.</B> <I>AppWizard's Step 4 dialog box.</I><!-- /CAPTION -->
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Because of a bug in Visual C++ 6.0, the most important part of 
<I>CMainFrame</I> might not appear in your source code if you follow the steps 
prescribed above. One of the frame window's most important tasks is to create the 
view window. It's supposed to do so with the following WM_CREATE handler:
</blockquote></div>
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
    if (CFrameWnd::OnCreate(lpCreateStruct) == -1)
        return -1;
    
    if (!m_wndView.Create(NULL, NULL, AFX_WS_DEFAULT_VIEW,
        CRect(0, 0, 0, 0), this, AFX_IDW_PANE_FIRST, NULL))
    {
        TRACE0(&quot;Failed to create view window\n&quot;);
        return -1;
    }
    return 0;
}
</pre>
</td>
</tr>
</table>
</p>

<p>
Unfortunately, the Visual C++ 6.0 AppWizard erroneously omits this 
handler when the toolbar and status bar options are turned off in the Step 4 dialog 
box. Therefore, you must add it yourself. Don't forget to add an 
ON_WM_CREATE statement to the message map, too.
</P>

<A NAME="120"><H2>Analyzing AppWizard's Output</H2></A>

<P>So what exactly did AppWizard do? First, it created a new project that includes all 
the build settings required for an MFC application. Second, it derived several classes 
from MFC base classes and inserted them into the project. Third, it created a set of 
resources for the application to use and inserted them into the project, too. A good way to 
familiarize yourself with AppWizard's output is to look at the files that it generated. 
Note that this output can vary widely depending on what options you selected in 
the AppWizard dialog boxes. The following sections provide a quick tour of the 
source code files that AppWizard generated for the Shapes application and a brief look 
at some of the important program elements found inside them.
</p>

<A NAME="121"><H3>StdAfx.h and StdAfx.cpp</H3></A>

<P>AppWizard-generated projects speed program builds by taking advantage of a 
feature of Visual C++ known as <I>  precompiled 
headers</I>. As a result of build settings 
implemented by AppWizard, all header files that are #included in StdAfx.h are precompiled 
into files named <I>  projectname</I>.pch and StdAfx.obj so that once compiled, they don't 
have to be compiled again. AppWizard #includes StdAfx.h in the CPP files that it 
generates, and inside StdAfx.h, it adds #includes for core MFC header files such as 
Afxwin.h. You can add #includes of your own for other MFC header files, for C run-time 
header files, and for static header files of other types. Do not #include header files that 
are subject to change as the application is being developed, or you'll lose the benefits 
of using precompiled headers.
<p>

</p>
An interesting aside to a discussion of precompiled headers is the fact that 
Visual C++ effectively ignores statements that appear in a source code file 
<I>  before</I> the statement that #includes StdAfx.h. That means code like this will compile just fine:
</p>

<P>
<TABLE cellpadding=5 width="95%"><TR><TD><PRE>
kjasdfj;oai4efj
#include &quot;Stdafx.h&quot;
</PRE></TD></TR></TABLE></P>


<P>Why is this fact important? Because more than one MFC programmer has been 
bitten by code like this:
</p>

<P>
<TABLE cellpadding=5 width="95%"><TR><TD><PRE>
#include &lt;math.h&gt;
#include &quot;Stdafx.h&quot;
</PRE></TD></TR></TABLE></P>


<P>Put the #include for Math.h <I>  after</I> the #include for StdAfx.h (or better yet, put it 
inside StdAfx.h) to avoid this kind of error.
</p>

<A NAME="122"><H3>Resource.h and Shapes.rc</H3></A>

<P>Among the source code files that AppWizard generates are an RC file 
containing definitions for all the application's resources and a header file (Resource.h) 
containing #defines for the command IDs and other symbols the RC file uses. Look 
inside the RC file and you'll find, among other things, a menu template and an 
accelerator table. Rather than edit these resources by hand, you can use Visual C++'s 
resource editor, which allows you to edit menus, accelerators, icons, and other resources 
visually and then applies your changes to the RC file. To see the menu editor 
firsthand, click the ResourceView tab in Visual C++'s workspace window and then 
double-click the menu resource IDR_MAINFRAME. This will open the menu in the menu 
editor, where making changes is as simple as pointing and clicking and typing 
information into dialog boxes. You can also edit the RC file directly, but if you decide to do 
this, be sure to use the Open dialog box's Open As Text option to open the file as if 
it were an ordinary text file.
</p>

<A NAME="123"><H3>Shapes.h and Shapes.cpp</H3></A>

<P>You already know that every MFC application contains a global instance of a 
<I>  CWinApp</I>-derived class representing the application itself. AppWizard has already derived an 
application class named <I>  CShapesApp</I> and placed the source code in Shapes.h and 
Shapes.cpp. It has also declared a global instance of the class by including the statement
</p>

<P>
<TABLE cellpadding=5 width="95%"><TR><TD><PRE>
CShapesApp theApp;
</PRE></TD></TR></TABLE></P>


<P>in Shapes.cpp.</p>

<p>
<I>  CShapesApp::InitInstance</I> looks a little different than the 
<I>  InitInstance</I> functions in Chapters <A HREF="ch01a.htm">1</A>, <A HREF="ch02a.htm">2</A>, and <A HREF="ch02a.htm">3</A>. It creates a frame window by instantiating a class 
named <I>  CMainFrame</I> and calling 
<I>  LoadFrame</I> on the resulting object:
</p>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>CMainFrame* pFrame = new CMainFrame;
m_pMainWnd = pFrame;

  <img src="images/grayvellip.JPG" width=3 height=13 border="0">
pFrame-&gt;LoadFrame(IDR_MAINFRAME,
    WS_OVERLAPPEDWINDOW &#166; FWS_ADDTOTITLE, NULL,
    NULL);
</pre>
</td>
</tr>
</table>
</p>

<P><I>  CMainFrame</I> is another AppWizard-generated class, one that represents the 
application's top-level window. Like the 
<I>  CMainWindow</I> class featured in previous 
chapters, <I>  CMainFrame</I>'s base class is 
<I>  CFrameWnd</I>. Unlike <I>  CMainWindow</I>, 
<I>  CMainFrame</I>'s constructor doesn't call 
<I>  Create</I>. Therefore, it's up to 
<I>  InitInstance</I> to create the frame window object and the frame window that goes with it.
</p>

<p>
AppWizard's <I>  CShapesApp</I> class also includes a command handler 
named <I>  OnAppAbout</I>:
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>// In the message map
ON_COMMAND(ID_APP_ABOUT, OnAppAbout)
  
  <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CShapesApp::OnAppAbout()
{
    CAboutDlg aboutDlg;
    aboutDlg.DoModal();
}
</pre>
</td>
</tr>
</table>
</p>

<P>This code will make more sense to you after you read about dialog boxes in <A HREF="ch08a.htm">Chapter 8</A>. Its purpose is to display an &quot;About box&quot;&#8212;a dialog box containing information 
about the program, such as its author and copyright. 
<I>  CAboutDlg</I> is the class that represents the About box; its source code is also found in Shapes.h and Shapes.cpp. 
AppWizard inserts an About Shapes command (ID=ID_APP_ABOUT) into the application's 
Help menu in support of this feature. Selecting the Help-About Shapes command 
executes <I>  CShapesApp::OnAppAbout</I> and displays a simple About box.
</p>

<A NAME="124"><H3>ChildView.h and ChildView.cpp</H3></A>

<P>The greatest difference between the AppWizard-generated Shapes application 
and the applications we built by hand in earlier chapters is the addition of a new 
class named <I>  CChildView</I>. <I>  CChildView</I> is a 
<I>  CWnd</I> derivative that represents the 
application's &quot;view&quot;&#8212;a special window that is sized to fit the client area of the application's 
frame window and then placed neatly over the top of it. What appears to be the frame 
window's client area is actually the view window, which means that we'll write our 
WM_PAINT handler in <I>  CChildView</I>, not 
<I>  CMainFrame</I>. In fact, AppWizard has already included 
a do-nothing <I>  OnPaint</I> function in 
<I>  CChildView</I>. It has also overridden 
<I>  CWnd::PreCreateWindow</I> and, in the override, included code that registers a special 
WNDCLASS for the view and adds WS_EX_CLIENTEDGE to the view's window 
style. WS_EX_CLIENTEDGE gives the window a three-dimensional look by making the 
view appear to be recessed inside the frame window. MFC's 
<I>  CFrameWnd</I> class includes code that keeps the view glued to the frame window by automatically resizing 
the view window whenever the frame window is resized.
</p>

<p>
In effect, AppWizard has created an application that uses a view in much 
the same way that a document/view application uses a view. The question is, Why? 
Is this an inherently better way to architect an application? The primary reason 
AppWizard inserts a view is that a view-based architecture simplifies the task of managing 
space inside a frame window that hosts toolbars and other UI objects. If you were to 
draw directly to the client area of a frame window that contains a toolbar, you'd have 
to subtract the toolbar rectangle from the frame window's client-area rectangle to 
compute an &quot;effective&quot; client area every time you called 
<I>  GetClientRect</I>. Such shenanigans aren't necessary in view-based applications because MFC resizes the view to fit 
the frame window's effective client area whenever the frame window's size changes or 
a change occurs in the size, position, or visibility of a toolbar or status bar. Call 
<I>  GetClientRect</I> in a view class and you get a precise measure of the space available to you.
</p>

<p>
The effect that a view-based application architecture will have on the code 
that you write can be summarized as follows:
</p>

<UL>
<P><LI>WM_PAINT messages should be processed in the view, not in the 
frame window.
</li>
</p>

<P><LI>Client-area mouse messages should be processed in the view, not in 
the frame window. Because the view completely obscures the frame 
window's client area, the frame window won't receive any client-area mouse messages.
</li>
</p>

<p>
<li>Keyboard message handlers, too, should be processed in the view, not in the frame window.
</li>
</p>
</ul>

<p>
Writing view-based applications now will help prepare you to write full-blown document/view MFC applications beginning in <A HREF="ch09a.htm">Chapter 9</A>.
</p>

<A NAME="125"><H3>MainFrm.h and MainFrm.cpp</H3></A>

<P>These files contain the source code for the AppWizard-generated frame 
window class named <I>  CMainFrame</I>. This frame window class differs from the 
<I>  CMainWindow</I> class we've been using in several respects:
</p>

<UL>
<P>
<LI>It overrides <I>  CFrameWnd::PreCreateWindow</I>. Because 
<I>  CMainFrame</I> doesn't create a window in 
its class constructor, overriding 
<I>  PreCreateWindow</I> is the only way it can exercise control over the window style and other 
window characteristics.
</li>
</p>

<P>
<LI>It overrides <I>  AssertValid</I> and 
<I>  Dump</I>, two <I>  CObject</I> functions used for 
diagnostic testing.
</li>
</p>

<p>
<li>It includes a <I>  CChildView</I> member variable named 
<I>  m_wndView</I> that represents the view window.
</li>
</p>

<p>
<li>
It includes a WM_SETFOCUS handler that shifts the input focus to the view anytime the frame window receives the input focus. This transfer is important because it is the view, not the frame window, that is the primary source of mouse and keyboard input. If the input focus were given to the frame window and not transferred to the view, keyboard message handlers in the view class wouldn't work.
</li>
</p>

<p>
<li>It overrides <I>  CFrameWnd::OnCmdMsg</I> and routes commands to the view and (indirectly) to the application object using a simplified form of the command routing architecture used in document/view applications. The practical effect is that command handlers and update handlers for 
the program's menu items can be placed in the frame window class, the view class, or the application class. Without 
<I>  OnCmdMsg</I>, command and update handlers would be restricted to the frame window. Command routing 
is discussed in Chapters <A HREF="ch09a.htm">9</a> and <A HREF="ch11a.htm">11</A>.
</li>
</P>
</ul>

<A NAME="126"><H2>Beyond AppWizard</H2></A>

<P>AppWizard generates a generic application skeleton. Once AppWizard has run 
its course, it's up to you to write the code that makes your application different from 
all the rest. You don't have to write all that code by hand; you can use ClassWizard 
to perform basic tasks such as adding message handlers, command handlers, and 
update handlers. In effect, ClassWizard writes the mundane code, so you can 
concentrate on the application-specific code. With that thought in mind, here are the steps 
required to duplicate the source code presented in Figure 4-3:
</p>

<ol>
<p>
<li>With the Shapes project open in Visual C++, add a protected int 
member variable named <I>  m_nShape</I> to the 
<I>  CChildView</I> class. You can add this member variable manually, or you can add it visually. To add it 
visually, click the ClassView tab in the workspace window, right-click 
<I>  CChildView</I> in ClassView, select Add Member Variable from the context menu, and 
fill in the Add Member Variable dialog box as shown in Figure 4-7.
</li>
</p>

<p>
<IMG SRC="images/F04mg07.GIF" width=366 height=175 BORDER="0">
</p><p>
<!-- CAPTION --><B>Figure 4-7.</B> <I>The Add Member Variable dialog box.</I><!-- /CAPTION -->
</p>

<p>
<li>Initialize <I>  m_nShape</I> to 1 by adding the following statement to <I>  CChildView</I>'s constructor:</li></p>

<p><table width="95%" cellpadding="5" valign="TOP"><tr><td>
<PRE>
m_nShape = 1; // Triangle
</PRE>
</td></tr></table>
</p>

<p><I>m_nShape</I> will hold 0, 1, or 2, indicating that the shape drawn in the view is a circle, a triangle, or a square, respectively. Initializing 
<I>  m_nShape</I> to 1 makes a triangle the default.

</p>

<p>
<li>
Modify the view's <I>  OnPaint</I> handler so that it looks like the one in Figure 4-3. AppWizard has already added an empty <I>  OnPaint</I> handler to the view class; all you have to do is edit it.
</li>
</p>

<p>
<li>
Click the ResourceView tab at the bottom of the workspace window to see a list of the resources that AppWizard created. Double-click the IDR_MAINFRAME menu resource to open it for editing, and delete the Edit and Help menus. Then add a Shape menu to the right of the File menu, and add these three items to the Shape menu:
</li>
</p>


<p><table cellpadding="5" width="95%">
<TR><TH valign="top">Menu Item Text</TH>     <TH valign="top">Command ID</TH></TR>
  
<TR><TD valign="top">&amp;Circle\tF7 </TD>   <TD valign="top"> ID_SHAPE_CIRCLE</TD></TR>

<TR><TD valign="top">&amp;Triangle\tF8  </TD>
<TD valign="top">ID_SHAPE_TRIANGLE</TD></TR>

<TR valign="top"><TD>&amp;Square\tF9</TD>    <TD valign="top"> ID_SHAPE_SQUARE</TD></TR>
</table>
</p>

<p>
To delete an item from a menu, click the item once to select it and then press the Delete key. To add an item, double-click the empty rectangle that appears in the menu and type the menu item text and command ID into the Menu Item Properties dialog box. (See Figure 4-8.) Top-level 
menu items don't need command IDs, so for them the ID box is disabled. 
For other menu items, you can type in the command ID or let Visual C++ 
choose one for you. If you dismiss the Menu Item Properties dialog box and the 
ID box is blank, Visual C++ will generate a command ID of the form 
ID_<I>  top</I>_<I>  item</I>, where <I>  top</I> is the top-level menu item name and 
<I>  item</I> is the text assigned to the menu item. Regardless of how the command ID is 
generated, Visual C++ adds a #define statement to Resource.h assigning the 
ID a numeric value. The completed Shape menu is shown in Figure 4-9.
</p>

<p>
<IMG SRC="images/F04mg08.GIF" width=403 height=162 BORDER="0">
</p><p>
<!-- CAPTION --><B>Figure 4-8.</B> <I>The Menu Item Properties dialog box.</i><!-- /CAPTION -->
</p>

<p>
<IMG SRC="images/F04mg09.GIF" width=274 height=91 BORDER="0">
</p><p>
<!-- CAPTION --><B>Figure 4-9.</B> <I>The Shape menu.</I><!-- /CAPTION -->
</p>

<p>
<li>Add command handlers to the view class for the Circle, Triangle, and 
Square commands. Here's the finished code:
</li>
</P>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
// In CChildView's message map
ON_COMMAND(ID_SHAPE_CIRCLE, OnShapeCircle)
ON_COMMAND(ID_SHAPE_TRIANGLE, OnShapeTriangle)
ON_COMMAND(ID_SHAPE_SQUARE, OnShapeSquare)

  <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CChildView::OnShapeCircle() 
{
    m_nShape = 0;
    Invalidate ();        
}

void CChildView::OnShapeTriangle() 
{
    m_nShape = 1;
    Invalidate ();        
}

void CChildView::OnShapeSquare() 
{
    m_nShape = 2;
    Invalidate ();        
}
</pre>
</td>
</tr>
</table>
</p>

<p>
You can add these command handlers by hand, or you can let 
ClassWizard add them for you. To use ClassWizard to add a command handler 
for the Circle command, click the ClassView tab at the bottom of the 
workspace window, right-click <I>  CChildView</I> in ClassView, and select 
Add Windows Message Handler from the context menu to display the 
New Windows Message And Event Handlers dialog box. 
(See Figure 4-10.) Find ID_SHAPE_CIRCLE in the Class Or Object To Handle list box, and click 
it. Then double-click COMMAND in the New Windows Messages/Events 
list box. When ClassWizard asks you for a function name, accept the 
default&#8212;<I>  OnShapeCircle</I>. COMMAND will move to the Existing 
Message/Event Handlers list box, indicating that a command handler now exists for 
the ID_SHAPE_CIRCLE menu item. Finish up by clicking the Edit 
Existing button to go to the empty command handler and adding the statements
</p>

<p><table width="95%" cellpadding="5" valign="TOP"><tr><td>
<PRE>
m_nShape = 0;
Invalidate ();
</PRE>
</td></tr></table>
</p>

<p>
to the function body. Repeat this process to write command handlers 
for the Triangle and Square commands, but set 
<I>  m_nShape</I> to 1 and 2, respectively, in their function bodies.
</p>

<p>
<A HREF="javascript:fullSize('F04MG10x.htm')"> <img src="images/F04MG10.JPG" width=404 height=355 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 4-10.</B> <I>The New Windows Message And Event Handlers dialog box.</I><!-- /CAPTION -->
</p>

<p>
<li>Add update handlers to the view class for the Circle, Triangle, and 
Square commands. Here's the completed code:
</li>
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>ON_UPDATE_COMMAND_UI(ID_SHAPE_CIRCLE, OnUpdateShapeCircle)
ON_UPDATE_COMMAND_UI(ID_SHAPE_TRIANGLE, OnUpdateShapeTriangle)
ON_UPDATE_COMMAND_UI(ID_SHAPE_SQUARE, OnUpdateShapeSquare)

  <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CChildView::OnUpdateShapeCircle(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 0);        
}

void CChildView::OnUpdateShapeTriangle(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 1);        
}

void CChildView::OnUpdateShapeSquare(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetCheck (m_nShape == 2);        
}
</pre>
</td>
</tr>
</table>
</p>


<p>
Once more, you can add these handlers by hand or you can add 
them with ClassWizard. To write an update handler with ClassWizard, 
follow the same procedure used to write a command handler, but 
double-click UPDATE_COMMAND_UI rather than COMMAND in the New 
Windows Messages/Events list box.
</p>

<p>
<li>
Click the ResourceView tab in the workspace window, and open the 
accelerator resource IDR_MAINFRAME for editing. Add the following 
accelerators to serve as shortcuts for the items in the Shape menu:
</li>
</p>


<p><table cellpadding="5" width="95%">
<TR><TH valign="top">Shortcut Key</TH>     <TH valign="top">Command ID</TH></TR>
<TR><TD valign="top">F7 </TD>   <TD valign="top"> ID_SHAPE_CIRCLE</TD></TR>

<TR><TD valign="top">F8 </TD>   <TD valign="top"> ID_SHAPE_TRIANGLE</TD></TR>

<TR><TD valign="top">F9 </TD>    <TD valign="top">ID_SHAPE_SQUARE</TD></TR>
</table></p>


<p>
To add an accelerator, double-click the empty rectangle at the bottom 
of the edit window and define the accelerator in the Accel Properties 
dialog box. (See Figure 4-11.) If you don't carry virtual key codes around in 
your head, you can click the Next Key Typed button and press the 
shortcut key rather than type the key code into the Key combo box. While you're at 
it, delete the other accelerators (the ones that AppWizard created) 
since Shapes doesn't use them. To delete an accelerator, simply click it once 
to select it and press the Delete key.
</p>

<p>
<IMG SRC="images/F04mg11.GIF" width=403 height=162 BORDER="0">
</p><p>
<!-- CAPTION --><B>Figure 4-11.</B> <I>The Accel Properties dialog box.</I><!-- /CAPTION -->
</p>

<P>
<li>If <I>  CMainFrame</I> doesn't include the 
<I>  OnCreate</I> handler discussed in the previous note, add it now. Rather than add the message handler by 
hand, you can add it with ClassWizard. How? Right-click 
<I>  CMainFrame</I> in the ClassView window, select Add Windows Message Handler, 
double-click WM_CREATE, and click Edit Existing. You'll find yourself in the 
empty message handler body, poised to type in the finished code. 
ClassWizard has already done everything else, including adding an 
ON_WM_CREATE entry to the message map.
</li>
</P>
</ol>

<P>With that, you've successfully built the Shapes application depicted in Figure 
4-2. It's a simple application whose 
<I>  OnPaint</I> handler examines a member variable 
(<I>  m_nShape</I>) and draws a circle, a triangle, or a square. Command handlers for 
the items in the Shape menu set <I>  m_nShape</I> to 0, 1, or 2 and force a repaint by 
calling <I>  CWnd::Invalidate</I>. Update handlers place a check mark by the shape that is 
currently selected. All painting and processing of menu commands is done in the view 
class, which serves as a proxy of sorts for the frame window's client area. The function 
keys F7, F8, and F9 provide shortcuts for the Circle, Triangle, and Square commands 
by virtue of the accelerators that you added. Given this basis to work from, you 
should be able to add menu items to any application and write command and update 
handlers for them.
</P>

<P>An interesting point to ponder regarding Shapes is that the File-Exit 
command closes the application, yet nowhere in the program's source code will you find 
a command handler for File-Exit. The secret is the following statement in 
<I>  CWinApp</I>'s message map, which is found in the MFC source code file Appcore.cpp:
</p>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>ON_COMMAND(ID_APP_EXIT, OnAppExit)</pre>
</td>
</tr>
</table>
</p>


<P>Remember that message maps are passed to derived classes by inheritance just 
like function and data members. Even though this entry doesn't appear in 
<I>  CShapesApp</I>'s message map, it's there implicitly because 
<I>  CShapesApp</I> derives from <I>  CWinApp</I>. Because 
AppWizard assigned the Exit command the ID ID_APP_EXIT, selecting 
the command invokes <I>  OnAppExit</I>, which also comes to 
<I>  CShapesApp</I> via inheritance. 
<I>  OnAppExit</I> sends a WM_CLOSE message to the application's main window. You 
can view its source code in Appui.cpp.
</P>

<A NAME="127"><H2>The Process in Review</H2></A>

<P>Building an application with AppWizard and ClassWizard is altogether different 
than building an application by hand. It's important to realize that the wizards do 
nothing you can't do yourself; they're simply code-generating tools that make the 
development process more efficient. It makes sense to use the wizards if you understand 
the code that they generate. That's why the first three chapters of this book didn't 
use the wizards&#8212;to help build your fundamental knowledge of MFC. As the 
applications that you build become more complex, the code that the wizards generate will 
become more complex, too. You'll see what I mean in the last few chapters of this 
book, when we use MFC to build COM-enabled applications and a few button clicks 
with the wizards will touch not just one or two source code files, but several. The 
wizards <I>  never</I> do anything you can't do yourself, but they can save you a lot of time and 
effort that you'd otherwise spend re-creating the basic plumbing common to all 
Windows applications.
</P>

</BODY>
</HTML>




