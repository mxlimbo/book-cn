<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Status Bars</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="379"><H1>Status Bars</H1></A>

<P>It has become common, even expected, for Windows applications to include status bars that display context-sensitive help for toolbar buttons and menu items. SDK-style Windows applications customarily display descriptive help text for menu items by trapping WM_MENUSELECT messages and updating the status bar. MFC provides an easier way. When a <I>CStatusBar </I>is connected to a frame window, it automatically 
displays a string of help text when a menu item is highlighted. If the application includes a toolbar, and if the toolbar style includes a CBRS_FLYBY flag, the status bar also displays flyby text for toolbar buttons. The best part is that all you're responsible for besides creating and initializing the status bar (something that requires just a few lines of code) is providing the help text in the form of string resources in your application's RC file. The framework does the rest.
</P>

<P>Status bars can do much more than just display help text, of course. A 
status bar can be divided into one or more areas that are variously referred to as panes, panels, or indicators. The text of each pane can be set individually, so one pane can display the current line number or page number in a document while another displays menu and toolbar help and still others display the current Caps Lock and Num Lock states. Some status bars even contain progress controls that report percentage-complete figures for potentially lengthy operations such as document saving and loading.
</P>


<A NAME="380"><H2>Creating and Initializing a Status Bar</H2></A>

<P>In MFC, a status bar is an instance of 
<I>CStatusBar</I>. An application that uses a status bar typically declares a 
<I>CStatusBar</I> object as a member of the frame window class. Then the frame window's 
<I>OnCreate</I> handler creates the status bar with a statement like this one:
</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
m_wndStatusBar.Create (this);
</PRE>
</td></tr></table></p>

<P>The lone argument passed to 
<I>Create</I> identifies the status bar's parent window. Passing a 
<I>this</I> pointer referring to a frame window makes the status bar a child of the frame window. A status bar created in this way doesn't need to be destroyed before the application terminates because it's destroyed automatically when its parent is destroyed. 
<I>CStatusBar::Create</I> also accepts parameters specifying the status bar's style and child window ID, but the default values MFC provides for these parameters do quite nicely for most applications.
</P>

<P>After it's created, a status bar is initialized by calling 
<I>CStatusBar::SetIndicators</I>. 
<I>SetIndicators</I> specifies the number of panes the status bar will contain and optionally assigns string resources to individual panes. The statements
</P>

<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
UINT nIndicator = ID_SEPARATOR;
m_wndStatusBar.Create (this);
m_wndStatusBar.SetIndicators (&amp;nIndicator, 1);
</PRE>
</td></tr></table></p>

<P>create a simple status bar containing just one pane. ID_SEPARATOR is a generic ID that says no string resource is associated with this pane. You can create a simple &quot;binary&quot; pane that indicates whether a particular feature of your application is on or off by specifying a string resource ID instead of ID_SEPARATOR and connecting the pane to an update handler that uses 
<I>CCmdUI::Enable</I> to enable and disable the pane. 
An enabled pane displays the string resource assigned to it, but a disabled pane is blank. The status bar created by the following code sample includes a pane that displays the text string &quot;INS&quot; when the application is in insert mode and nothing when it's in overstrike mode. This example assumes that insert mode is on when 
<I>m_bInsert</I> is nonzero and off when 
<I>m_bInsert</I> is 0:
</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
// In the RC file
STRINGTABLE
BEGIN
    ID_INDICATOR_INS &quot;INS&quot;
END

// In CMainFrame's message map
ON_UPDATE_COMMAND_UI (ID_INDICATOR_INS, OnUpdateIndicator)

// In CMainFrame::OnCreate
static UINT nIndicators[] = {
    ID_SEPARATOR,
    ID_INDICATOR_INS
};

m_wndStatusBar.Create (this);
m_wndStatusBar.SetIndicators (nIndicators, 2);

// Elsewhere in CMainFrame
void CMainFrame::OnUpdateIndicator (CCmdUI* pCmdUI)
{
    pCmdUI-&gt;Enable (m_bInsert);
}
</PRE>
</td></tr></table></p>

<P>In this example, the frame window handles the UI update commands. In a real application, it might be more appropriate to make 
<I>OnUpdateIndicator</I> a member of the document or the view class. ID_INDICATOR_INS is a symbolic constant defined elsewhere in the application; MFC doesn't define it for you.
</P>

<P>MFC defines four special indicator IDs for status bar panes that display keyboard states and maps them to a common update handler in the 
<I>CFrameWnd</I> class:
</p>

<UL>

<P><LI>ID_INDICATOR_CAPS, which corresponds to the Caps Lock key</li></P>

<P><li>ID_INDICATOR_NUM, which corresponds to the Num Lock key</li></P>

<P><li>ID_INDICATOR_SCRL, which corresponds to the Scroll Lock key</li></P>

<P><li>ID_INDICATOR_KANA, which corresponds to the Kana key on Japanese keyboards</li></P>

</UL>

<P>A status bar pane assigned the ID value ID_INDICATOR_CAPS displays the word &quot;CAP&quot; when Caps Lock is on. Similarly, an ID_INDICATOR_NUM pane displays &quot;NUM&quot; when Num Lock is on, an ID_INDICATOR_SCRL pane displays &quot;SCRL&quot; when Scroll Lock is on, and an ID_INDICATOR_KANA pane displays &quot;KANA&quot; when Kana mode is enabled on Japanese keyboards. The framework (in reality, <I>CFrameWnd::OnUpdateKeyIndicator</I>) keeps these indicators in sync with the keyboard. Consequently, you can create a status bar with Caps Lock, Num Lock, and Scroll Lock indicators simply by adding the magic ID values to the array passed to 
<I>SetIndicators</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
static UINT nIndicators[] = {
    ID_SEPARATOR,
    ID_INDICATOR_CAPS,
    ID_INDICATOR_NUM,
    ID_INDICATOR_SCRL
};

m_wndStatusBar.Create (this);
m_wndStatusBar.SetIndicators (nIndicators, 4);
</PRE>
</td></tr></table></p>

<P>The resulting status bar is shown in Figure 12-6. The blank pane indicates that Scroll Lock is inactive. <I>CStatusBar</I> automatically positions all panes after the first at the far right end of the status bar and stretches the leftmost pane to fill the remaining space. It sizes the other panes so that they're just wide enough to display the text strings assigned to them. Panes other than the first are also drawn &quot;indented&quot; so that they're visible even when they're blank.
</P>

<P>
<img src="images/F12MG06x.GIF" width=408 height=20 border=0>
</p><p>
<!-- CAPTION --><B>Figure 12-6.</B> <I>Status bar with Caps Lock, Num Lock, and Scroll Lock indicators.</I><!-- /CAPTION -->
</p>


<A NAME="381"><H2>Providing Context-Sensitive Help for Menu Items</H2></A>

<P>When you assign the first (leftmost) pane in a status bar the value 
ID_SEPARATOR, you enable a special feature of MFC that is elegant in both design and simplicity. When the user highlights a menu item, the framework checks to see whether the application's EXE file contains a string resource whose ID equals the menu item ID. If the search turns up a match, the string resource is loaded and displayed in the status bar pane. As a result, you can provide context-sensitive help for your application's menus by providing string resources whose IDs match the menu item IDs. If a menu item and a toolbar button share the same ID, the same string resource doubles as help text for the menu item and as flyby text for the toolbar.
</P>

<P>As it does for toolbar buttons, the framework provides default help strings for ID_FILE_NEW, ID_FILE_OPEN, and other common command IDs. It also provides default help strings for commands found in the system menu. (For a complete list of predefined IDs and the help text and ToolTip text associated with them, look in the MFC source code file Prompts.rc.) Simply include the header file Afxres.h in your application's RC file, and the framework's predefined string resources will be included, too. If you use AppWizard to create the application, Afxres.h is included for you. Rather than add string resources for other menu items by hand, you can double-click a menu item in the menu editor and enter a string in the Menu Item Properties window's Prompt box.
</P>

<P>You can override the help text for predefined menu item IDs by defining 
your own string resources with identical ID values. For a nice touch, include an
</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
AFX_IDS_IDLEMESSAGE &quot;Ready&quot;
</PRE>
</td></tr></table></p>

<P>statement in your application's string table, and the framework will display the word &quot;Ready&quot; in the status bar when no menu is pulled down or no item is selected. As usual, this is done for you if you use AppWizard to add a status bar to your application.
</P>


<A NAME="382"><H2>Creating Custom Status Bar Panes</H2></A>

<P>Now you know how to display help text in a status bar, add Caps Lock, Num Lock, and Scroll Lock indicators, and create simple on/off indicators by combining string resources and update handlers. But what about more complex status bars like the ones featured in Microsoft Word, Microsoft Excel, Microsoft PowerPoint, and other Windows applications? How, for example, would you create a status bar pane that displays the time of day or the current page number?
</P>

<P>For starters, you can add panes to a status bar and size them any way you want using 
<I>CStatusBar</I>'s 
<I>SetPaneInfo</I> function. 
<I>SetPaneInfo</I> accepts four parameters: the 0-based index of the pane whose attributes you want to modify and the pane's ID, style, and width, in that order. The pane style specifies whether the pane will be 
drawn indented, protruding, or flush with the face of the status bar. It also determines whether the pane is currently enabled or disabled and identifies variable-width panes that expand and contract with the status bar. The style is a combination of one or more of the following values:
</P>

<p><table cellpadding=5 width="95%">
<tr>
<th valign="top"><i>Style</i></th>
<th valign="top"><i>Description</i></th>
</TR>
<TR>
<td valign="top">SBPS_NOBORDERS</td>    
<td valign="top">Draws the pane flush with the surface of the status bar.</td>
</tr>
<TR>
<td valign="top">SBPS_POPOUT</td>     
<td valign="top">Draws the pane so that it protrudes from the status bar.</td>
</tr>
<TR>
<td valign="top">SBPS_NORMAL</td>   
<td valign="top">Draws the pane so that it is indented into the status bar.</td>
</tr>
<TR>
<td valign="top">SBPS_DISABLED</td>    
<td valign="top">Disables the pane. Disabled panes don't display text.</td>
</tr>
<TR>
<td valign="top">SBPS_STRETCH </td>
<td valign="top">Stretches the pane to fill unused space when the status bar is resized. Only one pane per status bar can have this style.</td>
</tr>
<TR>
<td valign="top">SBPS_OWNERDRAW </td>
<td valign="top">Creates an owner-draw pane.</td>
</tr>
</table></p>

<P>The following code creates a status bar with three custom panes. The first pane is 64 pixels wide and is drawn flush with the surface of the status bar. The second is also 64 pixels wide, but it protrudes from the status bar. The third is a variable-width pane whose right edge follows the right edge of the status bar. It's drawn with an indented border.
</P>

<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
static UINT nIndicators[] = {
    ID_SEPARATOR,
    ID_SEPARATOR,
    ID_SEPARATOR
};

m_wndStatusBar.Create (this);
m_wndStatusBar.SetIndicators (nIndicators, 3);

m_wndStatusBar.SetPaneInfo (0, ID_SEPARATOR, SBPS_NOBORDERS, 64);
m_wndStatusBar.SetPaneInfo (1, ID_SEPARATOR, SBPS_POPOUT, 64);
m_wndStatusBar.SetPaneInfo (2, ID_SEPARATOR, SBPS_NORMAL &#166;
    SBPS_STRETCH, 0);
</PRE>
</td></tr></table></p>

<P>In a real application, you'll probably want to avoid hard pixel counts and, instead, base pane widths on a scalable screen metric such as the average width of a character in the status bar font. You can get a 
<I>CFont</I> pointer for the default status bar font by calling the 
<I>GetFont</I> function a 
<I>CStatusBar</I> inherits from 
<I>CWnd</I>.
</P>

<P>Once a custom pane is created, it's your job to tell the status bar what to display inside the pane. You can add text to a pane in two ways. You can call 
<I>CStatusBar::SetPaneText</I> to set the text directly, or you can assign the pane an update handler and let the update handler set the text with 
<I>CCmdUI::SetText</I>. Which method you use depends on how you want the pane to be updated. The following code fragment sets a timer to fire every 200 milliseconds and uses 
<I>SetPaneText</I> to update an hours:minutes:seconds display in pane 2. (Windows timers are discussed in <a href="ch14a.htm">Chapter 14</a>.) In this case, the ID assigned to the pane in the call to 
<I>SetIndicators</I> or 
<I>SetPaneInfo</I> is irrelevant because 
<I>SetPaneText</I> identifies panes by index.
</P>

<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
// In CMainFrame::OnCreate
SetTimer (ID_TIMER, 200, NULL);
    <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CMainFrame::OnTimer (UINT nTimerID)
{
    CTime time = CTime::GetCurrentTime ();
    int nSecond = time.GetSecond ();
    int nMinute = time.GetMinute ();
    int nHour = time.GetHour () % 12;

    CString string;
    string.Format (_T (&quot;%0.2d:%0.2d:%0.2d&quot;), nHour, nMinute, nSecond);
    m_wndStatusBar.SetPaneText (2, string);
}
</PRE>
</td></tr></table></p>

<P>An alternative approach is to assign the pane a unique ID such as 
ID_INDICATOR_TIME and connect it to an update handler with a message-map 
entry. Now the time-of-day display in the status bar will be continually updated by the framework.
</P>


<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
// In the message map
ON_UPDATE_COMMAND_UI (ID_INDICATOR_TIME, OnUpdateTime)
    <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CMainFrame::OnUpdateTime (CCmdUI* pCmdUI)
{
    CTime time = CTime::GetCurrentTime ();
    int nSecond = time.GetSecond ();
    int nMinute = time.GetMinute ();
    int nHour = time.GetHour () % 12;

    CString string;
    string.Format (_T (&quot;%0.2d:%0.2d:%0.2d&quot;), nHour, nMinute, nSecond);
    pCmdUI-&gt;SetText (string);
}
</PRE>
</td></tr></table></p>

<P>The best way to define ID_INDICATOR_TIME is to add a string resource with that ID to your application. Assign the string a dummy value such as &quot;MMMMM,&quot; and MFC will use the width of the string to size the status bar pane. Incidentally, you can include a leading tab character (&quot;\t&quot;) in text written to a status bar to center the text in the pane or two leading tab characters (&quot;\t\t&quot;) to right-align the text.
</P>


<A NAME="383"><H2>Status Bar Support in AppWizard</H2></A>

<P>You can use AppWizard to add a status bar to an MFC application by checking the Initial Status Bar box in AppWizard's Step 4 dialog box, as shown in Figure 12-7. AppWizard responds by adding a 
<I>CStatusBar</I> member variable to the main frame window class and hooking it up with an 
<I>OnCreate</I> handler that creates a four-pane status bar: an ID_SEPARATOR pane in which help text appears and indicator panes for the Caps Lock, Num Lock, and Scroll Lock keys.
</P>

<P>
<A HREF="javascript:fullSize('F12mg07x.htm')"> <img src="images/F12mg07.JPG" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><P>
<!-- CAPTION --><B>Figure 12-7.</B> <I>Using AppWizard to add a status bar.</I><!-- /CAPTION -->
</p>

<P>One of the first questions new MFC programmers ask about 
AppWizard-generated status bars is, &quot;How do I get rid of the keyboard indicator panes?&quot; The answer is simple. Begin by finding the following statements in the CPP file for the AppWizard-generated main frame window class:
</P>


<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
static UINT indicators[] =
{
    ID_SEPARATOR,           // status line indicator
    ID_INDICATOR_CAPS,
    ID_INDICATOR_NUM,
    ID_INDICATOR_SCRL,
};
</PRE>
</td></tr></table></p>

<P>Then remove the final three entries so that the array looks like this:
</P>

<p><table cellpadding=5 width="95%"><tr><td>	
<PRE>
static UINT indicators[] =
{
    ID_SEPARATOR            // status line indicator
};
</PRE>
</td></tr></table></p>

<P>That's all there is to it. Rebuild the application and the indicator panes will be no more. 
</P>


</BODY>
</HTML>




