<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Do-It-Yourself Control Views</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10e.htm", "ch11a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="325"><H1>Do-It-Yourself Control Views</H1></A>

<p>
<I>CTreeView</I> and <I>CListView</I> are examples of 
<I>control views</I>&#8212;views whose 
functionality comes from a Windows control. Both are derived from <I>CCtrlView</I>, which is also the base class for 
<I>CEditView</I> and <I>CRichEditView</I>. <I>CCtrlView</I> provides the basic functionality common to all control views. By using it as a base class, you can create control views of your own that wrap other types of Windows controls.</p>
<p>To demonstrate, the following <I>CCtrlView</I>-derived class defines a tabbed 
view, which is simply a view wrapped around a Win32 tab control. When displayed, it looks like a normal view except that it has property sheet_like tabs at the top:
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>class CTabView : public CCtrlView
{
    DECLARE_DYNCREATE (CTabView)
public:
    CTabView () :
        CCtrlView (_T (&quot;SysTabControl32&quot;), AFX_WS_DEFAULT_VIEW) {}
    CTabCtrl&amp; GetTabCtrl () const { return *(CTabCtrl*) this; }
    virtual BOOL PreCreateWindow (CREATESTRUCT&amp; cs);
    virtual void OnInitialUpdate ();
};

IMPLEMENT_DYNCREATE (CTabView, CCtrlView)

BOOL CTabView::PreCreateWindow (CREATESTRUCT&amp; cs)
{
    ::InitCommonControls ();
    if (!CCtrlView::PreCreateWindow (cs))
        return FALSE;
    cs.style &#166;= TCS_FIXEDWIDTH; // Fixed-width tabs.
    return TRUE;
}

void CTabView::OnInitialUpdate ()
{
    static CString strLabel[] = {
        _T (&quot;Tab No. 1&quot;),
        _T (&quot;Tab No. 2&quot;),
        _T (&quot;Tab No. 3&quot;)
    };

    // Set the tab width to 96 pixels.
    GetTabCtrl ().SetItemSize (CSize (96, 0));

    // Add three tabs.
    TC_ITEM item;
    item.mask = TCIF_TEXT;
    for (int i=0; i&lt;3; i++) {
        item.pszText = (LPTSTR) (LPCTSTR) strLabel[i];
        item.cchTextMax = strLabel[i].GetLength ();
        GetTabCtrl ().InsertItem (i, &amp;item);
    }
}
</pre>
</td>
</tr>
</table>
</p>


<p>The key features of this class are the default constructor, which passes the base class's constructor the name of the tab control's WNDCLASS (&quot;SysTabControl32&quot;); 
the <I>GetTabCtrl</I> function, which returns a reference to the underlying tab control; and <I>OnInitialUpdate</I>, which adds three tabs to the control. <I>PreCreateWindow</I> also plays an important role by initializing the common controls library and applying default styles to the control.</p>
</BODY>
</HTML>




