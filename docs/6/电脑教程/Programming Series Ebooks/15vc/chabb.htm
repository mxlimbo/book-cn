<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Getting an Object's Class Name at Runtime</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="1001"><H1>Getting an Object's Class Name at Runtime</H1></A><P>If you wanted only an object's class name, you'd have an easy time, 
assuming that all your classes were derived from a common base class, 
<I>CObject</I>. Here's how you'd get the class name:<P>
<PRE>class CObject
{
public:
    virtual char* GetClassName() const { return NULL; }
};

class CMyClass : public CObject
{
public:
    static char s_lpszClassName[];
    virtual char* GetClassName() const { return s_lpszClassName; }
};
char CMyClass::s_szClassName[] = &quot;CMyClass&quot;;</PRE>
<P>Each derived class would override the virtual 
<I>GetClassName</I> function, which would return a static string. You would get an object's actual class 
name even if you used a <I>CObject</I> pointer to call 
<I>GetClassName</I>. If you needed the class name feature in many classes, you could save yourself some work by 
writing macros. A <I>DECLARE_CLASSNAME</I> macro might insert the static data 
member and the <I>GetClassName</I> function in the class declaration, and 
an <I>IMPLEMENT_CLASSNAME</I> macro might define the class name string in 
the implementation file.
</BODY>
</HTML>



