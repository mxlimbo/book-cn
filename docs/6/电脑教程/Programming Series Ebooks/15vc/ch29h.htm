<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Conclusion</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="744"><H1>Conclusion</H1></A><P>There are a couple of key points in this chapter to remember. COM is a 
<U>binary</U> object model. Clients and objects agree on a binary layout (the interface). 
Once both parties agree on the layout, they talk together via the interface. The 
client is not at all concerned about how that interface is actually wired up. As long 
as the functions work as advertised, the client is happy. There are a number of 
ways to hook up COM interfaces, including multiply inheriting a single 
C++ class from several interfaces, using nested classes, or using a framework such as ATL.
<P>ATL is Microsoft's framework for assembling small COM classes. ATL 
has two sides&#151;some smart pointers to help with client-side coding and a 
complete framework for implementing COM classes. ATL implements 
<I>IUnknown</I>, <I>IDispatch</I>, and 
<I>IClassFactory</I> in templates provided through the library. In 
addition, ATL includes a wizard for helping you get started with a COM server and 
a wizard for inserting COM classes into your project.
<P>While ATL does a lot for you, it doesn't completely excuse you from 
learning the basics of how COM works. In fact, you'll be able to use ATL a lot 
more efficiently once you understand COM. In the <A HREF="ch30a.htm">next chapter</A>, we'll take a look 
at how to use ATL to write ActiveX controls effectively.
</BODY>
</HTML>



