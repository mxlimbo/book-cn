<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX13A Example Revisited</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="272"><H1>The EX13A Example Revisited</H1></A>
<P>Now we'll add a property sheet to EX13A that allows the user to change the rich edit control's font characteristics. Of course, we could have used the standard MFC <I>CFontDialog</I> function, but then you wouldn't have learned how to create property sheets. Figure 13-5 shows the property sheet that you'll build as you continue with EX13A.
<P><IMG SRC="F13OG05.GIF" width=344 height=208 BORDER=0><P>
<!-- caption -->
<B>Figure 13-5.</B> <I>The property sheet from EX13A.</I>
<!-- /caption -->
<P>If you haven't built EX13A, follow the instructions that begin under the EX13A Example to build it. If you already have EX13A working with the Transfer menu commands, just continue on with these steps:<P>
<OL>
<B><LI>Use the resource editor to edit the application's main menu.</B> Click on the ResourceView tab in the Workspace window. Edit the <I>IDR_MAINFRAME</I> menu resource to add a Format menu that looks like this.
<BR>
<P><IMG SRC="G13OG04.GIF" width=278 height=77 BORDER=0><P>
<P>Use the following command IDs for the new Format menu items.
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Caption</B></TD><TD VALIGN="TOP"><B>Command ID</B></TD></TR>
<TR><TD VALIGN="TOP">&amp;Default</TD><TD VALIGN="TOP"><I>ID_FORMAT_DEFAULT</I></TD></TR>
<TR><TD VALIGN="TOP">&amp;Selection</TD><TD VALIGN="TOP"><I>ID_FORMAT_SELECTION</I></TD></TR>
</TABLE>
<P>

<P>Add appropriate prompt strings for the two menu items.</OL>
<OL START="2"><P><B><LI>Use ClassWizard to add the view class command and update command UI message handlers.</B> Select the <I>CEx13aView</I> class, and then add the following member functions.
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Object ID</B></TD><TD VALIGN="TOP"><B>Message</B></TD><TD VALIGN="TOP"><B>Member Function</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_FORMAT_DEFAULT</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnFormatDefault</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_FORMAT_SELECTION</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnFormatSelection</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_FORMAT_SELECTION</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP">
<I>OnUpdateFormatSelection</I></TD></TR>
</TABLE></OL>
<P>
<OL START="3"><P><B>
<LI>Use the resource editor to add four property page dialog templates.</B> The templates are shown here with their associated IDs.<BR>

<P><A HREF="javascript:fullSize('G13OG05x.htm')"> <img src="G13OG05.JPG" width=404 height=345 border=0 ALT = "Click to view at full size."> </A><P>

<P>Use the IDs in the table below for the controls in the dialogs. Set the Auto Buddy and the Set Buddy Integer properties for the spin button control, and set the Group property for the <I>IDC_FONT</I> and <I>IDC_COLOR</I> radio buttons. Set the minimum value of <I>IDC_FONTSIZE</I> to <I>8</I> and its maximum value to <I>24</I>.
<P>Use ClassWizard to create the classes <I>CPage1</I>, <I>CPage2</I>, <I>CPage3</I>, and <I>CPage4</I>. In each case, select <I>CPropertyPage</I> as the base class. Click the Change button in ClassWizard's New Class dialog to generate the code for all these classes in the files Property.h and Property.cpp. Then add the data members shown here.<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Dialog</B></TD><TD VALIGN="TOP"><B>Control</B></TD><TD VALIGN="TOP"><B>ID</B></TD><TD VALIGN="TOP"><B>Type</B></TD><TD VALIGN="TOP"><B>Data Member</B></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE1</I></TD><TD VALIGN="TOP">First radio button</TD><TD VALIGN="TOP">
<I>IDC_FONT</I></TD><TD VALIGN="TOP"><I>int</I></TD><TD VALIGN="TOP"><I>m_nFont</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE2</I></TD><TD VALIGN="TOP">Bold check box</TD><TD VALIGN="TOP">
<I>IDC_BOLD</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD><TD VALIGN="TOP"><I>m_bBold</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE2</I></TD><TD VALIGN="TOP">Italic check box</TD><TD VALIGN="TOP">
<I>IDC_ITALIC</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD><TD VALIGN="TOP"><I>m_bItalic</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE2</I></TD><TD VALIGN="TOP">Underline check box</TD><TD VALIGN="TOP">
<I>IDC_UNDERLINE</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD><TD VALIGN="TOP"><I>m_bUnderline</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE3</I></TD><TD VALIGN="TOP">First radio button</TD><TD VALIGN="TOP">
<I>IDC_COLOR</I></TD><TD VALIGN="TOP"><I>int</I></TD><TD VALIGN="TOP"><I>m_nColor</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE4</I></TD><TD VALIGN="TOP">Edit control</TD><TD VALIGN="TOP">
<I>IDC_FONTSIZE</I></TD><TD VALIGN="TOP"><I>int</I></TD><TD VALIGN="TOP"><I>m_nFontSize</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDD_PAGE4</I></TD><TD VALIGN="TOP">Spin button control</TD><TD VALIGN="TOP"><I>IDC_SPIN1</I></TD><TD VALIGN="TOP">&nbsp;</TD><TD VALIGN="TOP">&nbsp;</TD></TR>
</TABLE>
<P>

<P>Finally, use ClassWizard to add an <I>OnInitDialog</I> message handler function for <I>CPage4</I>.</OL>
<OL START="4"><P><B><LI>Use ClassWizard to create a class derived from <I>CPropertySheet</I>.</B> Choose the name <I>CFontSheet</I>. Generate the code in the files Property.h and Property.cpp, the same files you used for the property page classes. Figure 13-6 shows these files with the added code in boldface.

<P>

<TABLE cellpadding=5 width="95%"><TR><TD>
<P><B>PROPERTY.H</B>
<P><PRE>#if !defined(AFX_PROPERTY_H__CD702F99_7495_11D0_8FDC_00C04FC2A0C2__INCLUDED_)
#define AFX_PROPERTY_H_ _CD702F99_7495_11D0_8FDC_00C04FC2A0C2__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000
// Property.h : header file
//

<B>#define WM_USERAPPLY WM_USER + 5
extern CView* g_pView;</B>

////////////////////////////////////////////////////////////////////
// CPage1 dialog

class CPage1 : public CPropertyPage
{
    DECLARE_DYNCREATE(CPage1)

// Construction
public:
    CPage1();
    ~CPage1();

// Dialog Data
    //{{AFX_DATA(CPage1)
    enum { IDD = IDD_PAGE1 };
    int     m_nFont;
    //}}AFX_DATA


// Overrides
    // ClassWizard generate virtual function overrides
    //{{AFX_VIRTUAL(CPage1)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV
                                                      // support
    //}}AFX_VIRTUAL
<B>    virtual BOOL OnApply();
    virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);</B>

// Implementation
protected:
    // Generated message map functions
    //{{AFX_MSG(CPage1)
        // NOTE: the ClassWizard will add member functions here
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()

};

////////////////////////////////////////////////////////////////////
// CPage2 dialog

class CPage2 : public CPropertyPage
{
    DECLARE_DYNCREATE(CPage2)

// Construction
public:
    CPage2();
    ~CPage2();

// Dialog Data
    //{{AFX_DATA(CPage2)
    enum { IDD = IDD_PAGE2 };
    BOOL    m_bBold;
    BOOL    m_bItalic;
    BOOL    m_bUnderline;
    //}}AFX_DATA


// Overrides
    // ClassWizard generate virtual function overrides
    //{{AFX_VIRTUAL(CPage2)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV
                                                      // support
    //}}AFX_VIRTUAL
<B>    virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);</B>

// Implementation
protected:
    // Generated message map functions
    //{{AFX_MSG(CPage2)
        // NOTE: the ClassWizard will add member functions here
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()

};

////////////////////////////////////////////////////////////////////
// CPage3 dialog

class CPage3 : public CPropertyPage
{
    DECLARE_DYNCREATE(CPage3)

// Construction
public:
    CPage3();
    ~CPage3();

// Dialog Data
    //{{AFX_DATA(CPage3)
    enum { IDD = IDD_PAGE3 };
    int     m_nColor;
    //}}AFX_DATA


// Overrides
    // ClassWizard generate virtual function overrides
    //{{AFX_VIRTUAL(CPage3)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV
                                                      // support
    //}}AFX_VIRTUAL
<B>    virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);</B>

// Implementation
protected:
    // Generated message map functions
    //{{AFX_MSG(CPage3)
        // NOTE: the ClassWizard will add member functions here
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()

};

////////////////////////////////////////////////////////////////////
// CPage4 dialog

class CPage4 : public CPropertyPage
{
    DECLARE_DYNCREATE(CPage4)

// Construction
public:
    CPage4();
    ~CPage4();

// Dialog Data
    //{{AFX_DATA(CPage4)
    enum { IDD = IDD_PAGE4 };
    int     m_nFontSize;
    //}}AFX_DATA

// Overrides
    // ClassWizard generate virtual function overrides
    //{{AFX_VIRTUAL(CPage4)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV
                                                     // support
    //}}AFX_VIRTUAL
<B>    virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);</B>

// Implementation
protected:
    // Generated message map functions
    //{{AFX_MSG(CPage4)
    virtual BOOL OnInitDialog();
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()

};

////////////////////////////////////////////////////////////////////
// CFontSheet

class CFontSheet : public CPropertySheet
{
    DECLARE_DYNAMIC(CFontSheet)

<B>public:
    CPage1 m_page1;
    CPage2 m_page2;
    CPage3 m_page3;
    CPage4 m_page4;</B>

// Construction
public:
    CFontSheet(UINT nIDCaption, CWnd* pParentWnd = NULL,
               UINT iSelectPage = 0);
    CFontSheet(LPCTSTR pszCaption, CWnd* pParentWnd = NULL,
               UINT iSelectPage = 0);

// Attributes
public:

// Operations
public:
// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CFontSheet)
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CFontSheet();

    // Generated message map functions
protected:
    //{{AFX_MSG(CFontSheet)
        // NOTE - the ClassWizard will add and remove member functions here.
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

////////////////////////////////////////////////////////////////////
//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations
//  immediately before the previous line.

#endif // !defined(AFX_PROPERTY_H_ _CD702F99_7495_11D0_8FDC_00C04FC2A0C2__INCLUDED_)
</PRE>
<P><B>PROPERTY.CPP</B>
<P><PRE>// Property.cpp : implementation file
//

#include &quot;stdafx.h&quot;
#include &quot;ex13a.h&quot;
#include &quot;Property.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

<B>CView* g_pView;</B>

////////////////////////////////////////////////////////////////////
// CPage1 property page

IMPLEMENT_DYNCREATE(CPage1, CPropertyPage)

CPage1::CPage1() : CPropertyPage(CPage1::IDD)
{
    //{{AFX_DATA_INIT(CPage1)
    m_nFont = -1;
    //}}AFX_DATA_INIT
}

CPage1::~CPage1()
{
}

<B>BOOL CPage1::OnApply()
{
    TRACE(&quot;CPage1::OnApply\n&quot;);
    g_pView-&gt;SendMessage(WM_USERAPPLY);
    return TRUE;
}

BOOL CPage1::OnCommand(WPARAM wParam, LPARAM lParam)
{
    SetModified(TRUE);
    return CPropertyPage::OnCommand(wParam, lParam);
}</B>

void CPage1::DoDataExchange(CDataExchange* pDX)
{
<B>    TRACE(&quot;Entering CPage1::DoDataExchange -- %d\n&quot;,
          pDX-&gt;m_bSaveAndValidate);</B>
    CPropertyPage::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CPage1)
    DDX_Radio(pDX, IDC_FONT, m_nFont);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPage1, CPropertyPage)
    //{{AFX_MSG_MAP(CPage1)
        // NOTE: the ClassWizard will add message map macros here
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////
// CPage1 message handlers

////////////////////////////////////////////////////////////////////
// CPage2 property page

IMPLEMENT_DYNCREATE(CPage2, CPropertyPage)

CPage2::CPage2() : CPropertyPage(CPage2::IDD)
{
    //{{AFX_DATA_INIT(CPage2)
    m_bBold = FALSE;
    m_bItalic = FALSE;
    m_bUnderline = FALSE;
    //}}AFX_DATA_INIT
}

CPage2::~CPage2()
{
}

<B>BOOL CPage2::OnCommand(WPARAM wParam, LPARAM lParam)
{
    SetModified(TRUE);
    return CPropertyPage::OnCommand(wParam, lParam);
}</B>

void CPage2::DoDataExchange(CDataExchange* pDX)
{
<B>    TRACE(&quot;Entering CPage2::DoDataExchange -- %d\n&quot;,
          pDX-&gt;m_bSaveAndValidate);</B>
    CPropertyPage::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CPage2)
    DDX_Check(pDX, IDC_BOLD, m_bBold);
    DDX_Check(pDX, IDC_ITALIC, m_bItalic);
    DDX_Check(pDX, IDC_UNDERLINE, m_bUnderline);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPage2, CPropertyPage)
    //{{AFX_MSG_MAP(CPage2)
        // NOTE: the ClassWizard will add message map macros here
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////
// CPage2 message handlers

////////////////////////////////////////////////////////////////////
// CPage3 property page

IMPLEMENT_DYNCREATE(CPage3, CPropertyPage)

CPage3::CPage3() : CPropertyPage(CPage3::IDD)
{
    //{{AFX_DATA_INIT(CPage3)
    m_nColor = -1;
    //}}AFX_DATA_INIT
}

CPage3::~CPage3()
{
}

<B>BOOL CPage3::OnCommand(WPARAM wParam, LPARAM lParam)
{
    SetModified(TRUE);
    return CPropertyPage::OnCommand(wParam, lParam);
}</B>

void CPage3::DoDataExchange(CDataExchange* pDX)
{
<B>    TRACE(&quot;Entering CPage3::DoDataExchange -- %d\n&quot;,
          pDX-&gt;m_bSaveAndValidate);</B>
    CPropertyPage::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CPage3)
    DDX_Radio(pDX, IDC_COLOR, m_nColor);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPage3, CPropertyPage)
    //{{AFX_MSG_MAP(CPage3)
        // NOTE: the ClassWizard will add message map macros here
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////
// CPage3 message handlers

////////////////////////////////////////////////////////////////////
// CPage4 property page

IMPLEMENT_DYNCREATE(CPage4, CPropertyPage)

CPage4::CPage4() : CPropertyPage(CPage4::IDD)
{
    //{{AFX_DATA_INIT(CPage4)
    m_nFontSize = 0;
    //}}AFX_DATA_INIT
}

CPage4::~CPage4()
{
}

<B>BOOL CPage4::OnCommand(WPARAM wParam, LPARAM lParam)
{
    SetModified(TRUE);
    return CPropertyPage::OnCommand(wParam, lParam);
}</B>

void CPage4::DoDataExchange(CDataExchange* pDX)
{
<B>    TRACE(&quot;Entering CPage4::DoDataExchange -- %d\n&quot;,
          pDX-&gt;m_bSaveAndValidate);</B>
    CPropertyPage::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CPage4)
    DDX_Text(pDX, IDC_FONTSIZE, m_nFontSize);
    DDV_MinMaxInt(pDX, m_nFontSize, 8, 24);
    //}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CPage4, CPropertyPage)
    //{{AFX_MSG_MAP(CPage4)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////
// CPage4 message handlers

BOOL CPage4::OnInitDialog() 
{
    CPropertyPage::OnInitDialog();
<B>    ((CSpinButtonCtrl*) GetDlgItem(IDC_SPIN1))-&gt;SetRange(8, 24);</B>
    return TRUE;  // return TRUE unless you set the focus to a control
                  //  EXCEPTION: OCX Property Pages should return FALSE
}

////////////////////////////////////////////////////////////////////
// CFontSheet

IMPLEMENT_DYNAMIC(CFontSheet, CPropertySheet)

CFontSheet::CFontSheet(UINT nIDCaption, CWnd* pParentWnd,
                       UINT iSelectPage)
    :CPropertySheet(nIDCaption, pParentWnd, iSelectPage)
{
}

CFontSheet::CFontSheet(LPCTSTR pszCaption, CWnd* pParentWnd,
                       UINT iSelectPage)
    :CPropertySheet(pszCaption, pParentWnd, iSelectPage)
{
<B>    AddPage(&amp;m_page1);
    AddPage(&amp;m_page2);
    AddPage(&amp;m_page3);
    AddPage(&amp;m_page4);</B>
}

CFontSheet::~CFontSheet()
{
}


BEGIN_MESSAGE_MAP(CFontSheet, CPropertySheet)
    //{{AFX_MSG_MAP(CFontSheet)
        // NOTE - the ClassWizard will add and remove mapping macros here.
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

////////////////////////////////////////////////////////////////////
// CFontSheet message handlers
</PRE>
</TD></TR></TABLE>

<B>Figure 13-6.</B> <I>The EX13A Header and implementation file listings for the property page and property sheet classes.</I>



<P><B><LI>Add two data members and two prototypes to the <I>CEx13aView </I>class.</B> If you use ClassView for the data members, the <I>#include</I> for Property.h will be added automatically.
<P><PRE><B>private:
    CFontSheet m_sh;
    BOOL m_bDefault; // TRUE default format, FALSE selection</B></PRE>
<P>Now add the prototype for the private function <I>Format</I>:
<P><PRE><B>void Format(CHARFORMAT &amp;cf);</B></PRE>
<P>Insert the prototype for the protected function <I>OnUserApply</I> before the <I>DECLARE_MESSAGE_MAP</I> macro.
<P><pre><B>afx_msg LRESULT OnUserApply(WPARAM wParam, LPARAM lParam);</b></pre>
<P><b><LI>Edit and add code in the file ex13aView.cpp.</B> Map the user-defined WM_USERAPPLY message, as shown here:
<P><pre><B>ON_MESSAGE(WM_USERAPPLY, OnUserApply)</B></pre>
<P>Add the following lines to the <I>OnCreate</I> function, just before the 
<I>return 0</I> statement:
<P><PRE><B>CHARFORMAT cf;
Format(cf);
m_rich.SetDefaultCharFormat(cf);</B>
</PRE><P>Edit the view constructor to set default values for the property sheet 
data members, as follows:
<P><PRE>CEx13aView::CEx13aView() <B>: m_sh(&quot;&quot;)</B>
{
<B>    m_sh.m_page1.m_nFont = 0;
    m_sh.m_page2.m_bBold = FALSE;
    m_sh.m_page2.m_bItalic = FALSE;
    m_sh.m_page2.m_bUnderline = FALSE;
    m_sh.m_page3.m_nColor = 0;
    m_sh.m_page4.m_nFontSize = 12;
    g_pView = this;
    m_bDefault = TRUE;</B>
}</PRE>
<P>Edit the format command handlers, as shown here:
<P><PRE>void CEx13aView::OnFormatDefault()
{
<B>    m_sh.SetTitle(&quot;Default Format&quot;);
    m_bDefault = TRUE;
    m_sh.DoModal();</B>
}

void CEx13aView::OnFormatSelection()
{
<B>    m_sh.SetTitle(&quot;Selection Format&quot;);
    m_bDefault = FALSE;
    m_sh.DoModal();</B>
}

void CEx13aView::OnUpdateFormatSelection(CCmdUI* pCmdUI)
{
<B>    long nStart, nEnd;
    m_rich.GetSel(nStart, nEnd);
    pCmdUI-&gt;Enable(nStart != nEnd);</B>
}
</PRE>
<P>Add the following handler for the user-defined WM_USERAPPLY message:
<P><PRE><B>LRESULT CEx13aView::OnUserApply(WPARAM wParam, LPARAM lParam)
{
    TRACE(&quot;CEx13aView::OnUserApply -- wParam = %x\n&quot;, wParam);
    CHARFORMAT cf;
    Format(cf);
    if (m_bDefault) {
        m_rich.SetDefaultCharFormat(cf);
    }
    else {
        m_rich.SetSelectionCharFormat(cf);
    }
    return 0;
}</B></PRE>
<P>Add the <I>Format</I> helper function, as shown below, to set a 
<I>CHARFORMAT</I> structure based on the values of the property sheet data members.
<P><PRE><B>void CEx13aView::Format(CHARFORMAT&amp; cf)
{
    cf.cbSize = sizeof(CHARFORMAT);
    cf.dwMask = CFM_BOLD | CFM_COLOR | CFM_FACE |
                CFM_ITALIC | CFM_SIZE | CFM_UNDERLINE;
    cf.dwEffects = (m_sh.m_page2.m_bBold ? CFE_BOLD : 0) |
                   (m_sh.m_page2.m_bItalic ? CFE_ITALIC : 0) |
                   (m_sh.m_page2.m_bUnderline ? CFE_UNDERLINE : 0);
    cf.yHeight = m_sh.m_page4.m_nFontSize * 20;
    switch(m_sh.m_page3.m_nColor) {
    case -1:
    case 0:
        cf.crTextColor = RGB(0, 0, 0);
        break;
    case 1:
        cf.crTextColor = RGB(255, 0, 0);
        break;
    case 2:
        cf.crTextColor = RGB(0, 255, 0);
        break;
    }
    switch(m_sh.m_page1.m_nFont) {
    case -1:
    case 0:
        strcpy(cf.szFaceName, &quot;Times New Roman&quot;);
        break;
    case 1:
        strcpy(cf.szFaceName, &quot;Arial&quot;);
        break;
    case 2:
        strcpy(cf.szFaceName, &quot;Courier New&quot;);
        break;
    }
    cf.bCharSet = 0;
    cf.bPitchAndFamily = 0;
}</B></PRE>
<P><LI><B>Build and test the enhanced EX13A application.</B> Type some text, and then choose Default from the Format menu. Observe the <I>TRACE</I> messages in the Debug window as you click on property sheet tabs and click the Apply button. Try highlighting some text and then formatting the selection.
<A NAME="273"><H2>Apply Button Processing</H2></A>
<P>You might be curious about the way the property sheet classes process the Apply button. In all the page classes, the overridden <I>OnCommand</I> functions enable the Apply button whenever a control sends a message to the page. This works fine for pages 1 through 3 in EX13A, but for page 4, <I>OnCommand</I> is called during the initial conversation between the spin button control and its buddy.
<P>The <I>OnApply</I> virtual override in the <I>CPage1</I> class sends a user-defined message to the view. The function finds the view in an expedient way&#151;by using a global variable set by the view class. A better approach would be to pass the view pointer to the sheet constructor and then to the page constructor.
<P>The view class calls the property sheet's <I>DoModal</I> function for both default formatting and selection formatting. It sets the <I>m_bDefault</I> flag to indicate the mode. We don't need to check the return from <I>DoModal</I> because the user-defined message is sent for both the OK button and the Apply button. If the user clicks Cancel, no message is sent.
</BODY>
</HTML>



