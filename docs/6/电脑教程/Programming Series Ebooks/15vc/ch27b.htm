<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Compound Files</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="581"><H1><B>Compound Files</B></H1></A>
<P>This book discusses four options for file I/O. You can read and write whole sequential files (like the MFC archive files you saw first in <A HREF="ch17a.htm">Chapter 17</A>). You can use a database management system (as described in <A HREF="ch31a.htm">Chapter 31</A> and <A HREF="ch32a.htm">Chapter 32</A>). You can write your own code for random file access. Finally, you can use <U>compound</U> <U>files</U>.

<P>Think of a compound file as a whole file system within a file. Figure 27-1 shows a traditional disk directory as supported by early MS-DOS systems and by Microsoft Windows. This directory is composed of files and subdirectories, with a root directory at the top. Now imagine the same structure inside a 
single disk file. The files are called <U>streams</U>, and the directories are called <U>storages</U>. Each is identified by a name of up to 32 wide characters in length. A stream is a logically sequential array of bytes, and a storage is a collection of streams and substorages. 

<P><A HREF="javascript:fullSize('f27og01x.htm')"> <img src="f27og01.jpg" width=404 height=146 border=0 ALT = "Click to view at full size."> </A>

<P><!-- caption --><B>Figure 27-1.</B> <I>A disk directory with files and subdirectories.</I><!-- /caption -->

<P>(A storage can contain other storages, just as a directory can contain subdirectories.) In a disk file, the bytes aren't necessarily stored in contiguous clusters. Similarly, the bytes in a stream aren't necessarily contiguous in their compound file. They just appear that way.

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
Storage and stream names cannot contain the characters /, \, :, or !. If the first character has an ASCII value of less than 32, the element is marked as managed by some agent other than the owner.</blockquote></div>

<P>You can probably think of many applications for a compound file. The classic example is a large document composed of chapters and paragraphs within chapters. The document is so large that you don't want to read the whole thing into memory when your program starts, and you want to be able to insert 
and delete portions of the document. You could design a compound file with a root storage that contains substorages for chapters. The chapter substorages would contain streams for the paragraphs. Other streams could be for index information.

<P>One useful feature of compound files is <U>transactioning</U>. When you start a transaction for a compound file, all changes are written to a temporary file. The changes are made to your file only when you commit the transaction.

</BODY>
</HTML>



