<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The CFormView Class</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="317"><H1>The <I>CFormView</I> Class</H1></A><P>The <I>CFormView</I> class is a useful view class that has many of the characteristics of a modeless dialog window. Like a class derived from <I>CDialog</I>, a derived <I>CFormView</I> class is associated with a dialog resource that defines the frame characteristics and enumerates the controls. The <I>CFormView</I> class supports the same dialog data exchange and validation (DDX and DDV) functions that you saw in the <I>CDialog</I> examples in <A HREF="ch06a.htm">Chapter 6</A>.<P>
<DIV CLASS=warning>
<BLOCKQUOTE>
<IMG SRC="warning.jpg" width=123 height=18 BORDER=0><P>
If AppWizard generates a Form View dialog, the properties are set correctly, but if you use the dialog editor to make a dialog for a form view, you <U>must</U> specify the following items in the Dialog Properties dialog:<P>
<BLOCKQUOTE>Style = Child
<P>Border = None
<P>Visible = unchecked</BLOCKQUOTE>
</BLOCKQUOTE></DIV>
<P>A <I>CFormView</I> object receives notification messages directly from its 
controls, and it receives command messages from the application framework. This 
application framework command-processing ability clearly separates 
<I>CFormView</I> from <I>CDialog</I>, and it makes controlling the view from the frame's main menu or toolbar easy.
<P>The <I>CFormView</I> class is derived from <I>CView</I> (actually, from <I>CScrollView</I>) and not from <I>CDialog</I>. You can't, therefore, assume that <I>CDialog</I> member functions are supported. <I>CFormView</I> does <U>not</U> have virtual <I>OnInitDialog</I>, <I>OnOK</I>, and <I>OnCancel</I> functions. <I>CFormView</I> member functions do not call <I>UpdateData</I> and the DDX functions. You have to call <I>UpdateData</I> yourself at the appropriate times, usually in response to control notification messages 
or command messages.
<P>Even though the <I>CFormView</I> class is not derived from the <I>CDialog</I> class, it is built around the Microsoft Windows dialog. For this reason, you can use many of the <I>CDialog</I> class member functions such as 
<I>GotoDlgCtrl</I> and <I>NextDlgCtrl</I>. All you have to do is cast your 
<I>CFormView</I> pointer to a <I>CDialog</I> pointer. The following statement, extracted from a member function of a class derived from <I>CFormView</I>, sets the focus to a specified control. <I>GetDlgItem</I> is a <I>CWnd </I>function and is thus inherited by the derived <I>CFormView</I> class.
<P><PRE>((CDialog*) this)-&gt;GotoDlgCtrl(GetDlgItem(IDC_NAME));</PRE>
<P>AppWizard gives you the option of using <I>CFormView</I> as the base class for your view. When you select <I>CFormView</I>, AppWizard generates an empty 
dialog with the correct style properties set. The next step is to use ClassWizard to add control notification message handlers, command message handlers, and update command UI handlers. (The example steps starting after Figure 16-2 show you what to do.) You can also define data members and validation criteria.
</BODY>
</HTML>



