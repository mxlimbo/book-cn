<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Why Use the Application Framework?</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="28"><H1>Why Use the Application Framework?</H1></A><P>If you're going to develop applications for Windows, you've got to choose a development environment. Assuming that you've already rejected non-C options such as Microsoft Visual Basic and Borland Delphi, here are some of your remaining options:
<UL>
<P><LI>Program in C with the Win32 API<P>
<P><LI>Write your own C++ Windows class library that uses Win32<P>
<P><LI>Use the MFC application framework<P>
<P><LI>Use another Windows-based application framework such 
as Borland's Object Windows Library (OWL)<P>
</UL>
<P>If you're starting from scratch, any option involves a big learning 
curve. If you're already a Win16 or Win32 programmer, you'll still have a learning curve with the MFC library. Since its release, MFC has become the dominant Windows class library. But even if you're familiar with it, it's still a good idea to step through the features of this programming choice.
<P><B>The MFC library is the C++ Microsoft Windows API.</B> If you accept the premise that the C++ language is now the standard for serious application 
development, you'd have to say that it's natural for Windows to have a C++ programming interface. What better interface is there than the one produced 
by Microsoft, creator of Windows? That interface is the MFC library.
<P><B>Application framework applications use a standard 
structure.</B> Any programmer starting on a large project develops some kind of structure for the code. The problem is that each programmer's structure is different, and it's difficult for a new team member to learn the structure and conform to it. The MFC library application framework includes its own application structure&#151;one that's been proven in many software environments and in many projects. If you write a program for Windows that uses the MFC library, you can safely retire to a Caribbean island, knowing that your minions can easily maintain and enhance your code back home.
<P>Don't think that the MFC library's structure makes your programs 
inflexible. With the MFC library, your program can call Win32 functions at any 
time, so you can take maximum advantage of Windows.
<P><B>Application framework applications are small and 
fast.</B> Back in the 16-bit days, you could build a self-contained Windows EXE file that was less than 
20 kilobytes (KB) in size. Today, Windows programs are larger. One reason is 
that 32-bit code is fatter. Even with the large memory model, a Win16 program 
used 16-bit addresses for stack variables and many globals. Win32 programs 
use 32-bit addresses for everything and often use 32-bit integers because 
they're more efficient than 16-bit integers. In addition, the new 
C++ exception-handling code consumes a lot of memory.
<P>That old 20-KB program didn't have a docking toolbar, splitter 
windows, print preview capabilities, or control container support&#151;features that 
users expect in modern programs. MFC programs are bigger because they do 
more and look better. Fortunately, it's now easy to build applications that 
dynamically link to the MFC code (and to C runtime code), so the size goes back 
down again&#151;from 192 KB to about 20 KB! Of course, you'll need some big 
support DLLs in the background, but those are a fact of life these days.
<P>As far as speed is concerned, you're working with machine code 
produced by an optimizing compiler. Execution is fast, but you might notice a startup 
delay while the support DLLs are loaded.
<P><B>The Visual C++ tools reduce coding drudgery.</B> 
The Visual C++ resource editors, AppWizard, and ClassWizard significantly reduce the time needed 
to write code that is specific to your application. For example, the resource 
editor creates a header file that contains assigned values for 
<I>#define</I> constants. App-Wizard generates skeleton code for your entire application, and 
ClassWizard generates prototypes and function bodies for message handlers.
<P><B>The MFC library application framework is feature 
rich.</B> The MFC library version 1.0 classes, introduced with Microsoft 
C/C++ version 7.0, included the following features: 
<UL>
<LI>A C++ interface to the Windows API
<P><LI>General-purpose (non-Windows-specific) classes, including:
<ul>
<p><li>Collection classes for lists, arrays, and maps
<P><LI>A useful and efficient string class
<P><LI>Time, time span, and date classes
<P><LI>File access classes for operating system independence
<P><LI>Support for systematic object storage and retrieval to and from disk
</ul>
<P><LI>A &quot;common root object&quot; class hierarchy
<P><LI>Streamlined Multiple Document Interface (MDI) application support
<P><LI>Some support for OLE version 1.0
<P></UL>
<P>The MFC library version 2.0 classes (in Visual C++ version 1.0) picked up where the version 1.0 classes left off by supporting many user interface 
features that are found in current Windows-based applications, plus they introduced the application framework architecture. Here's a summary of the important new features:
<UL>
<p><LI>Full support for File Open, Save, and Save As menu items and the most recently used file list
<P><LI>Print preview and printer support
<P><LI>Support for scrolling windows and splitter windows
<P><LI>Support for toolbars and status bars
<P><LI>Access to Visual Basic controls
<P><LI>Support for context-sensitive help
<P><LI>Support for automatic processing of data entered in a dialog box
<P><LI>An improved interface to OLE version 1.0
<P><LI>DLL support
</UL>
<P>The MFC library version 2.5 classes (in Visual C++ version 1.5) contributed the following:
<UL>
<p><LI>Open Database Connectivity (ODBC) support that allows your application to access and update data stored in many popular databases such as Microsoft Access, FoxPro, and Microsoft SQL Server
<P><LI>An interface to OLE version 2.01, with support for in-place editing, linking, drag and drop, and OLE Automation
</UL>
<P>Visual C++ version 2.0 was the first 32-bit version of the product. It 
included support for Microsoft Windows NT version 3.5. It also contained 
MFC version 3.0, which had the following new features:
<UL>
<p><LI>Tab dialog (property sheet) support (which was also added to Visual C++ version 1.51, included on the same CD-ROM)
<P><LI>Docking control bars that were implemented within MFC
<P><LI>Support for thin-frame windows
<P><LI>A separate Control Development Kit (CDK) for building 16-bit and 32-bit OLE controls, although no OLE control container support was provided
</UL>
<P>A subscription release, Visual C++ 2.1 with MFC 3.1, added the following:
<UL>
<p><LI>Support for the new Microsoft Windows 95 (beta) common controls
<P><LI>A new ODBC Level 2 driver integrated with the Access Jet database engine
<P><LI>Winsock classes for TCP/IP data communication
</UL>
<P>Microsoft decided to skip Visual C++ version 3.0 and proceeded directly to 4.0 in order to synchronize the product version with the MFC version. MFC 4.0 contains these additional features:
<UL>
<p><LI>New OLE-based Data Access Objects (DAO) classes for use with the Jet engine
<P><LI>Use of the Windows 95 docking control bars instead of the MFC control bars
<P><LI>Full support for the common controls in the released version of Windows 95, with new tree view and rich-edit view classes
<P><LI>New classes for thread synchronization
<P><LI>OLE control container support
</UL>
<P>Visual C++ 4.2 was an important subscription release that included MFC version 4.2. The following new features were included:
<UL>
<p><LI>WinInet classes
<P><LI>ActiveX Documents server classes
<P><LI>ActiveX synchronous and asynchronous moniker classes
<P><LI>Enhanced MFC ActiveX Control classes, with features such as windowless activation, optimized drawing code, and so forth
<P><LI>Improved MFC ODBC support, including recordset bulk fetches and data transfer without binding
</UL>
<P>Visual C++ 5.0 included MFC version 4.21, which fixed some 4.2 
bugs. Visual C++ 5.0 introduced some worthwhile features of its own as well:
<UL>
<p><LI>A redesigned IDE, Developer Studio 97, which included an HTML-based online help system and integration with other languages, including Java
<P><LI>The Active Template Library (ATL) for efficient ActiveX control construction for the Internet
<P><LI>C++ language support for COM (Component Object Model) client programs with the new <I>#import</I> statement for type libraries, as described in <A HREF="ch25a.htm">Chapter 25</A>
</UL>
<P>The latest edition of Visual C++, 6.0, includes MFC 6.0. (Notice that the versions are now synchronized again.) Many of the features in MFC 6.0 enable the developer to support the new Microsoft Active Platform, including the following:
<UL>
<p><LI>MFC classes that encapsulate the new Windows common controls introduced as part of Internet Explorer 4.0
<P><LI>Support for Dynamic HTML, which allows the MFC programmer to create applications that can dynamically manipulate and generate HTML pages
<P><LI>Active Document Containment, which allows MFC-based applications to contain Active Documents
<P><LI>OLE DB Consumers and Providers Template support and Active Data Objects (ADO) data binding, which help database developers who use MFC or ATL
<P></UL>

<A NAME="29"><H2>The Learning Curve</H2></A><P>All the listed benefits sound great, don't they? You're probably thinking, &quot;You don't get something for nothing.&quot; Yes, that's true. To use the application framework effectively, you have to learn it thoroughly, and that takes time. If you have to learn C++, Windows, and the MFC library (without OLE) all at the same time, it will take at least six months before you're really productive. Interestingly, that's close to the learning time for the Win32 API alone.
<P>How can that be if the MFC library offers so much more? For one thing, you can avoid many programming details that C-language Win32 programmers are forced to learn. From our own experience, we can say that an object-oriented application framework makes programming for Windows easier to learn&#151;that is, once you understand object-oriented programming.
<P>The MFC library won't bring real Windows programming down to the masses. Programmers of applications for Windows have usually commanded higher salaries than other programmers, and that situation will continue. The MFC library's learning curve, together with the application framework's power, should ensure that MFC library programmers will continue to be in strong demand.

</BODY>
</HTML>



