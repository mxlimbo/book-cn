<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Putting Bitmaps on Pushbuttons</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="233"><H1>Putting Bitmaps on Pushbuttons</H1></A>
<P>The MFC library makes it easy to display a bitmap (instead of text) on a pushbutton. If you were to program this from scratch, you would set the Owner Draw property for your button and then write a message handler in your dialog class that would paint a bitmap on the button control's window. If you use the MFC <I>CBitmapButton</I> class instead, you end up doing a lot less work, but you have to follow a kind of &quot;cookbook&quot; procedure. Don't worry too much about how it all works (but be glad that you don't have to write much code!).
<P><DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
There's also another way to put bitmaps on buttons. See <A HREF="ch36a.htm">Chapter 36</A>, for a description of the <I>CButton::SetBitmap</I> function, which associates a single bitmap with a button.
</BLOCKQUOTE></DIV>
<P>To make a long story short, you lay out your dialog resource as usual with unique text captions for the buttons you designate for bitmaps. Next you add some bitmap resources to your project, and you identify those resources by <U>name</U> rather than by numeric ID. Finally you add some <I>CBitmapButton</I> data members to your dialog class, and you call the 
<I>AutoLoad</I> member function for each one, which matches a bitmap name to a button caption. If the button caption is &quot;Copy&quot;, you add two bitmaps: &quot;COPYU&quot; for the up state and &quot;COPYD&quot; for the down state. By the way, you must still set the button's Owner Draw property. (This will all make more sense when you write a program).
<P><DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
If you look at the MFC source code for the <I>CBitmapButton</I> class, you'll see that the bitmap is an ordinary GDI bitmap painted with a <I>BitBlt</I> call. Thus, you can't expect any palette support. That's not often a problem because bitmaps for buttons are usually 16-color bitmaps that depend on standard VGA colors.
</BLOCKQUOTE></DIV>
<A NAME="234"><H2>The EX11D Example</H2></A><P>Here are the steps for building EX11D:
<OL>
<P><B><LI>Run AppWizard to produce \vcpp32\ex11d\ex11d.</B> Accept all the defaults but three: select Single Document, deselect Printing And Print Preview, and select Context-Sensitive Help. The options and the default class names are shown in the illustration below.
<P>The Context-Sensitive Help option was selected for one reason only: it causes AppWizard to copy some bitmap files into your project's \hlp subdirectory. These bitmaps are supposed to be bound into your project's help file, but we won't study help files until <A HREF="ch21a.htm">Chapter 21</A>.

<P><img src="G11OG07x.gif" width=414 height=423 border=0 >

<P><B><LI>Modify the project's <I>IDD_ABOUTBOX </I>dialog resource.</B> It's too much hassle to create a new dialog resource for a few buttons, so we'll use the About dialog that AppWizard generates for every project. Add three pushbuttons with captions, as shown below, accepting the default IDs <I>IDC_BUTTON1</I>, <I>IDC_BUTTON2</I>, and <I>IDC_BUTTON3</I>. The size of the buttons isn't important because the framework adjusts the button size at runtime to match the bitmap size.

<P><IMG SRC="G11OG08.GIF" width=332 height=165 BORDER=0><P>

<P>Select the Owner Draw property for all three buttons.
<P><B><LI>Import three bitmaps from the project's \hlp subdirectory.</B> Choose Resource from Visual C++'s Insert menu, and then click the Import button. Start with EditCopy.bmp, as shown below.

<P><IMG SRC="g11og09.gif" width=314 height=209 BORDER="0"><P>

<P>Assign the name &quot;COPYU&quot; as shown.
<P><IMG SRC="G11OG10.GIF" width=403 height=162 BORDER=0><P>

<U>Be</U> <U>sure</U> <U>to</U> <U>use</U> 
<U>quotes</U> <U>around</U> <U>the</U> <U>name</U> in order to identify the 
resource by name rather than by ID. This is now the bitmap for the button's 
up state. Close the bitmap window and, from the ResourceView window, use the clipboard (or drag and drop) to make a copy of the bitmap. Rename the copy &quot;COPYD&quot; (down state), and then edit this bitmap. Choose Invert Colors from the Image menu. There are other ways of making a variation of the up image, but inversion is the quickest.
<P>Repeat the steps listed above for the EditCut and EditPast bitmaps. When you're finished, you should have the following bitmap resources in your project.


<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Resource Name</B></TD><TD VALIGN="TOP"><B>Original File</B></TD><TD VALIGN="TOP"><B>Invert Colors</B></TD></TR>
<TR><TD VALIGN="TOP">&quot;COPYU&quot;</TD><TD VALIGN="TOP">EditCopy.bmp</TD><TD VALIGN="TOP">no</TD></TR>
<TR><TD VALIGN="TOP">&quot;COPYD&quot;</TD><TD VALIGN="TOP">EditCopy.bmp</TD><TD VALIGN="TOP">yes</TD></TR>
<TR><TD VALIGN="TOP">&quot;CUTU&quot;</TD><TD VALIGN="TOP">EditCut.bmp</TD><TD VALIGN="TOP">no</TD></TR>
<TR><TD VALIGN="TOP">&quot;CUTD&quot;</TD><TD VALIGN="TOP">EditCut.bmp</TD><TD VALIGN="TOP">yes</TD></TR>
<TR><TD VALIGN="TOP">&quot;PASTEU&quot;</TD><TD VALIGN="TOP">EditPast.bmp</TD><TD VALIGN="TOP">no</TD></TR>
<TR><TD VALIGN="TOP">&quot;PASTED&quot;</TD><TD VALIGN="TOP">EditPast.bmp</TD><TD VALIGN="TOP">yes</TD></TR>
</TABLE>


<P><B><LI>Edit the code for the <I>CAboutDlg </I>class.</B> Both the declaration and the implementation for this class are contained in the ex11d.cpp file. First add the three private data members shown here in the class declaration:
<P><PRE><B>CBitmapButton m_editCopy;
CBitmapButton m_editCut;
CBitmapButton m_editPaste;</B></PRE>
<P>Then you use ClassWizard to map the WM_INITDIALOG message in the dialog class. (Be sure that the <I>CAboutDlg</I> class is selected.) The message handler (actually a virtual function) is coded as follows:
<P><PRE>BOOL CAboutDlg::OnInitDialog()
{
    CDialog::OnInitDialog();
<B>    VERIFY(m_editCopy.AutoLoad(IDC_BUTTON1, this));
    VERIFY(m_editCut.AutoLoad(IDC_BUTTON2, this));
    VERIFY(m_editPaste.AutoLoad(IDC_BUTTON3, this));</B>
    return TRUE;  // return TRUE unless you set the focus to a control
                  // EXCEPTION: OCX Property Pages should return FALSE
}</PRE>
<P>The <I>AutoLoad</I> function connects each button with the two matching resources. The <I>VERIFY</I> macro is an MFC diagnostic aid that displays a message box if you didn't code the bitmap names correctly.
<P><B><LI>Edit the <I>OnDraw </I>function in ex11dView.cpp.</B> Replace the AppWizard-generated code with the following line:
<P><PRE><B>pDC-&gt;TextOut(0, 0, &quot;Choose About from the Help menu.&quot;);</B></PRE>
<P><LI><B>Build and test the application.</B> When the program starts, choose About from the Help menu and observe the button behavior. The image below shows the CUT button in the down state.

<P><IMG SRC="G11OG11.GIF" width=332 height=139 BORDER=0><P>
<P>Note that bitmap buttons send BN_CLICKED notification messages just as ordinary buttons do. ClassWizard can, of course, map those messages in your dialog class.
</OL>
<A NAME="235"><H2>Going Further with Bitmap Buttons</H2></A>
<P>You've seen bitmaps for the buttons' up and down states. The <I>CBitmapButton</I> class also supports bitmaps for the focused and disabled states. For the Copy button, the focused bitmap name would be &quot;COPYF&quot;, and the disabled bitmap name would be &quot;COPYX&quot;. If you want to test the disabled option, make a &quot;COPYX&quot; bitmap, possibly with a red line through it, and then add the following line to your program:
<P><PRE>m_editCopy.EnableWindow(FALSE);</PRE>
<P>
</BODY>
</HTML>



