<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Processes and Memory Space</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="200"><H1>Processes and Memory Space</H1></A>
<P>Before you learn how Microsoft Windows manages memory, you must first understand what a process is. If you already know what a <U>program</U> is, you're on your way. A program is an EXE file that you can launch in various ways in Windows. Once a program is running, it's called a <U>process</U>. A process owns its memory, file handles, and other system resources. If you launch the same program twice in a row, you have two separate processes running simultaneously. Both the Microsoft Windows NT Task Manager (right-click the taskbar) and the Microsoft Windows 95 PVIEW95 program give you a detailed list of processes that are currently running, and they allow you to kill processes that are not responding. The SPYXX program shows the relationships among processes, tasks, and windows.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The Windows taskbar shows main windows, not processes. A single process (such as Windows Explorer) might have several main windows, each supported by its own thread, and some processes don't have windows at all. (See <A HREF="ch12a.htm">Chapter 12</A> for a discussion of threads.)
</BLOCKQUOTE></DIV>
<P>The important thing to know about a process is that it has its own 
&quot;private&quot; 4-gigabyte (GB) virtual address space (which I'll describe in detail in the next section). For now, pretend that your computer has hundreds of gigabytes of RAM and that each process gets 4 GB. Your program can access any byte of this space with a single 32-bit linear address. Each process's memory space contains a variety of items, including the following:
<UL>
<P><LI>Your program's EXE image
<P><LI>Any nonsystem DLLs that your program loads, including the MFC DLLs
<P><LI>Your program's global data (read-only as well as read/write)
<P><LI>Your program's stack
<P><LI>Dynamically allocated memory, including Windows and C runtime library (CRT) heaps
<P><LI>Memory-mapped files
<P><LI>Interprocess shared memory blocks
<P><LI>Memory local to specific executing threads
<P><LI>All sorts of special system memory blocks, including virtual memory tables
<P><LI>The Windows kernel and executive, plus DLLs that are part of Windows
</UL>
<A NAME="201"><H2>The Windows 95 Process Address Space</H2></A>
<P>In Windows 95, only the bottom 2 GB (0 to 0x7FFFFFFF) of address space is truly private, and the bottom 4 MB of that is off-limits. The stack, heaps, and 
read/write global memory are mapped in the bottom 2 GB along with application EXE and DLL files.
<P>The top 2 GB of space is the same for all processes and is shared by all 
processes. The Windows 95 kernel, executive, virtual device drivers (VxDs), and 
file system code, along with important tables such as page tables, are mapped to the top 1 GB (0xC0000000 to 0xFFFFFFFF) of address space. Windows DLLs and memory-mapped files are located in the range 0x80000000 to 0xBFFFFFFF. Figure 10-1 shows a memory map of two processes using the same program.
<P><A HREF="javascript:fullSize('F10OG01x.htm')"> <img src="F10OG01.JPG" width=404 height=513 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 10-1.</B> <I>A typical Windows 95 virtual memory map for two processes linked to the same EXE file.</I>
<!-- /caption -->
<P>How safe is all this? It's next to impossible for one process to overwrite 
another process's stack, global, or heap memory because this memory, located in 
the bottom 2 GB of virtual address space, is assigned only to that specific 
process. All EXE and DLL code is flagged as read-only, so there's no problem if the code is mapped in several processes.
<P>However, because important Windows read/write data is mapped there, the top 1 GB of address space is vulnerable. An errant program could wipe out important system tables located in this region. In addition, one process could mess up another process's memory-mapped files in the range 0x80000000 through 0xBFFFFFFF because this region is shared by all processes.
<A NAME="202"><H2>The Windows NT Process Address Space</H2></A>
<P>A process in Windows NT can access only the bottom 2 GB of its address space, and the lowest and highest 64 KB of that is inaccessible. The EXE, the 
application's DLLs and Windows DLLs, and memory-mapped files all reside in this 
space between 0x00010000 and 0x7FFEFFFF. The Windows NT kernel, executive, and device drivers all reside in the upper 2 GB, where they are completely protected from any tampering by an errant program. Memory-mapped files are safer, too. One process cannot access another's memory-mapped file without 
knowing the file's name and explicitly mapping a view.
</BODY>
</HTML>



