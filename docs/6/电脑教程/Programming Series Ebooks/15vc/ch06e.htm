<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Dialog That Ate Cincinnati -- The EX06A Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="134"><H1>The Dialog That Ate Cincinnati&#151;The EX06A Example</H1></A>
<P>Let's not mess around with wimpy little dialogs. We'll build a monster 
dialog that contains almost every kind of control. The job will be easy because 
Visual C++'s dialog editor is there to help us. The finished product is shown in Figure 6-1.
<P><A HREF="javascript:fullSize('F06OG01x.htm')"> <img src="F06OG01.JPG" width=404 height=314 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 6-1.</B> <I>The finished dialog in action.</I>
<!-- /caption -->
<P>As you can see, the dialog supports a human resources application. These kinds of business programs are fairly boring, so the challenge is to produce something that could not have been done with 80-column punched cards. The program is brightened a little by the use of scroll bar controls for &quot;Loyalty&quot; and &quot;Reliability.&quot; Here is a classic example of direct action and visual representation of data! ActiveX controls could add more interest, but you'll have to wait until <A HREF="ch08a.htm">Chapter 8</A> for details on ActiveX.
<A NAME="135"><H2>Building the Dialog Resource</H2></A><P>Here are the steps for building the dialog resource:
<P>
<OL>
<B><LI>Run AppWizard to generate a project called EX06A.</B> Choose New from Visual C++'s File menu, and then click the Projects tab and select MFC AppWizard (exe). Accept all the defaults but two: select Single Document and deselect Printing And Print Preview. The options and the default class names are shown here.<P>

<P> <img src="G06OG01x.gif" width=413 height=418 border=0> <P>
<P>As usual, AppWizard sets the new project as the current project.

<P><B><LI>Create a new dialog resource with ID <I>IDD_DIALOG1</I>.</B>  Choose Resource from Visual C++'s Insert menu. The Insert Resource dialog appears. Click on Dialog, and then click New. Visual C++ creates a new dialog resource, as shown here.<P>
<P><IMG SRC="G06OG02.GIF" width=402 height=315 BORDER=0><P>
<P>The dialog editor assigns the resource ID 
<I>IDD<B>_</B>DIALOG1</I> to the new dialog. Notice that the dialog editor inserts OK and Cancel buttons for the new dialog.

<P><B><LI>Size the dialog and assign a caption.</B> Enlarge the dialog box to about 5-by-7 inches.
<P>When you right-click on the new dialog and choose Properties from the pop-up menu, the Dialog Properties dialog appears. Type in the caption for the new dialog as shown in the screen below. The state of the pushpin button in the upper-left corner determines whether the Dialog Properties dialog stays on top of other windows. (When the pushpin is &quot;pushed,&quot; the dialog stays on top of other windows.) Click the Toggle Grid button (on the Dialog toolbar) to reveal the grid and to help align controls.<P>

<P><A HREF="javascript:fullSize('G06OG03x.htm')"> <img src="G06OG03.JPG" width=404 height=243 border=0 ALT = "Click to view at full size."> </A><P>

<B><LI>Set the dialog style.</B> Click on the Styles tab at the top of the 
Dialog Properties dialog, and then set the style properties as shown in the 
following illustration.<P>

<P><IMG SRC="G06OG04.GIF" width=403 height=162 BORDER=0><P>

<B><LI>Set additional dialog styles.</B> Click on the More Styles tab at the top of the Dialog Properties dialog, and then set the style properties as 
shown here.

<P><IMG SRC="G06OG05.GIF" width=403 height=162 BORDER=0><P>

<B><LI>Add the dialog's controls.</B> Use the control palette to add each control. (If the control palette is not visible, right-click any toolbar and 
choose Controls from the list.) Drag controls from the control palette to the 
new dialog, and then position and size the controls, as shown in Figure 
6-1. Here are the control palette's controls.<P>
<P><IMG SRC="G06OG06.GIF" width=404 height=357 BORDER=0><P>


<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
The dialog editor displays the position and size of each control in the status bar. The position units are special &quot;dialog units,&quot; or DLUs, <U>not</U> device units. A horizontal DLU is the average width of the dialog font divided by 4. A vertical DLU is the average height of the font divided by 8. The dialog font is normally 8-point MS Sans Serif.
</BLOCKQUOTE></DIV>

<P>Here's a brief description of the dialog's controls:
<UL>
<P><LI><B>The static text control for the Name field.</B> A static text control simply paints characters on the screen. No user interaction occurs at runtime. You can type the text after you position the bounding rectangle, and you can resize the rectangle as needed. This is the only static text control you'll see listed in text, but you should also create the other static text controls as shown earlier in Figure 6-1. Follow the same procedure for the other static text controls in the dialog. All static text controls have the same ID, but that doesn't matter because the program doesn't need to access any of them.

<P><LI><B>The Name edit control.</B> An edit control is the primary means of 
entering text in a dialog. Right-click the control, and then choose Properties. Change this control's ID from <I>IDC<B>_</B>EDIT1</I> to <I>IDC<B>_</B>NAME</I>. Accept the defaults for the rest of the properties. Notice that the default sets Auto HScroll, which means that the text scrolls horizontally when the box is filled.

<P><LI><B>The SS Nbr (social security number) edit control.</B> As far as 
the dialog editor is concerned, the SS Nbr control is exactly the same as the Name edit control. Simply change its ID to <I>IDC<B>_</B>SSN</I>. Later you will use ClassWizard to make this a numeric field.

<P><LI><B>The Bio (biography) edit control.</B> This is a multiline edit control. Change its ID to <I>IDC<B>_</B>BIO</I>, and then set its properties as shown here.

<P><IMG SRC="G06OG07.GIF" width=403 height=162 BORDER=0><P>

<LI><B>The Category group box.</B> This control serves only to group two radio buttons visually. Type in the caption <I>Category</I>. The default ID is sufficient.<P>

<LI><B>The Hourly and Salary radio buttons.</B> Position these radio buttons inside the Category group box. Set the Hourly button's ID to <I>IDC<B>_</B>CAT</I> and set the other properties as shown here.<P>

<P><IMG SRC="G06OG08.GIF" width=403 height=162 BORDER=0>

<P><IMG SRC="G06OG09.GIF" width=403 height=162 BORDER=0><P>

<P>Be sure that both buttons have the Auto property (the default) on the Styles tab set and that only the Hourly button has the Group property set. When these properties are set correctly, Windows ensures that only one of the two buttons can be selected at a time. The Category group box has no effect on the buttons' operation.
<P><LI><B>The Insurance group box.</B> This control holds three check boxes. Type in the caption <I>Insurance</I>.<P>

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
Later, when you set the dialog's tab order, you'll ensure that the Insurance group box follows the last radio button of the Category group. Set the Insurance control's Group property now in order to &quot;terminate&quot; the 
previous group. If you fail to do this, it isn't a serious problem, but you'll get several warning messages when you run the program through the debugger.
</BLOCKQUOTE></DIV>

<LI><B>The Life, Disability, and Medical check boxes.</B> Place these controls inside the Insurance group box. Accept the default properties, but change the IDs to <I>IDC<B>_</B>LIFE</I>, <I>IDC<B>_</B>DIS</I>, and <I>IDC<B>_</B>MED</I>. Unlike radio buttons, check boxes are independent; the user can set any combination.<P>

<LI><B>The Skill combo box.</B> This is the first of three types of combo boxes. Change the ID to <I>IDC<B>_</B>SKILL</I>, and then click on the Styles tab and set the Type option to Simple. Click on the Data tab, and add three skills (terminating each line with Ctrl-Enter) in the Enter Listbox Items box.

<P><IMG SRC="G06OG10.GIF" width=403 height=162 BORDER=0><P>

<P>This is a combo box of type Simple. The user can type anything in the top edit control, use the mouse to select an item from the attached list box, or use the Up or Down direction key to select an item from the attached list box.

<P><LI><B>The Educ (education) combo box.</B> Change the ID to <I>IDC<B>_</B>EDUC</I>; otherwise, accept the defaults. Add the three education 
levels in the Data page, as shown in Figure 6-1. In this Dropdown combo box, the user can type anything in the edit box, click on the arrow, and then select an item from the drop-down list box or use the Up or Down direction key to select an item from the attached list box.<P>

<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<B>Aligning Controls</B>
<P>To align two or more controls, select the controls by clicking on the first control and then Shift-clicking on the other controls you want to align. Next choose one of the alignment commands (Left, Horiz.Center, Right, Top, Vert.Center, or Bottom) from the Align submenu on the dialog editor's Layout menu.
</BLOCKQUOTE></DIV>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
To set the size for the drop-down portion of a combo box, click on the box's arrow and drag down from the center of the bottom of the rectangle.
</BLOCKQUOTE></DIV>
<P>

<LI><B>The Dept (department) list box.</B> Change the ID to <I>IDC<B>_</B>DEPT</I>; otherwise, accept all the defaults. In this list box, the user can select only a single item by using the mouse, by using the Up or Down direction key, or by typing the first character of a selection. Note that you can't enter the initial choices in the dialog editor. You'll see how to set these choices later.

<P><LI><B>The Lang (language) combo box.</B> Change the ID to <I>IDC<B>_</B>LANG</I>, and then click on the Styles tab and set the Type option to Drop List. Add three languages (English, French, and Spanish) 
in the Data page. With this Drop List combo box, the user can select only from the attached list box. To select, the user can click on the arrow and then select an entry from the drop-down list, or the user can type in the first letter of the selection and then refine the selection using the Up or Down direction key.

<P><LI><B>The Loyalty and Reliability scroll bars.</B> Do not confuse scroll bar controls with a window's built-in scroll bars as seen in scrolling views. A scroll bar control behaves in the same manner as do other controls and can be resized at design time. Position and size the horizontal scroll bar controls as shown previously in Figure 6-1, and then assign the IDs <I>IDC<B>_</B>LOYAL</I> and <I>IDC<B>_</B>RELY</I>.<P>

<DIV CLASS=note>
<BLOCKQUOTE>
<P><B>Selecting a Group of Controls</B>
<P>To quickly select a group of controls, position the mouse cursor above and to the left of the group. Hold down the left mouse button and drag to a point below and to the right of the group, as shown here.
<P><A HREF="javascript:fullSize('G06OG11x.htm')"> <img src="G06OG11.JPG" width=404 height=178 border=0 ALT = "Click to view at full size."> </A><P>
</BLOCKQUOTE></DIV>

<P><LI><B>The OK, Cancel, and Special pushbuttons.</B> Be sure the button captions are <I>OK</I>, <I>Cancel</I>, and <I>Special</I>, and then assign the 
ID <I>IDC<B>_</B>SPECIAL</I> to the Special button. Later you'll learn about 
special meanings that are associated with the default IDs <I>IDOK</I> and <I>IDCANCEL</I>.

<P><LI><B>Any icon. (The MFC icon is shown as an example.)</B> You can use the Picture control to display any icon or bitmap in a dialog, as long as the icon or bitmap is defined in the resource script. We'll use the program's MFC icon, identified as <I>IDR<B>_</B>MAINFRAME</I>. Set the Type option to Icon, and set the Image option to <I>IDR<B>_</B>MAINFRAME</I>. Leave the ID as <I>IDC<B>_</B>STATIC</I>.<P>

</UL></OL>

<OL start="7">
<P><B><LI>Check the dialog's tabbing order.</B> Choose Tab Order from the dialog editor's Layout menu. Use the mouse to set the tabbing order shown below. Click on each control in the order shown, and then press Enter.<P>

<P><A HREF="javascript:fullSize('G06OG12x.htm')"> <img src="G06OG12.JPG" width=404 height=314 border=0 ALT = "Click to view at full size."> </A><P>
<DIV CLASS=tip>
<BLOCKQUOTE>
<IMG SRC="tip.jpg" width=123 height=18 BORDER=0><P>
If you mess up the tab sequence partway through, you can recover with a Ctrl-left mouse click on the <U>last</U> <U>correctly</U> <U>sequenced</U> control. Subsequent mouse clicks will start with the next sequence number.
</BLOCKQUOTE></DIV>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
A static text control (such as Name or Skill) has an ampersand (&amp;) embedded in the text for its caption. At runtime, the ampersand will appear as an underscore under the character that follows. (See Figure 6-1.) This enables the user to jump to selected controls by holding down the Alt key and pressing the key corresponding to the underlined character. (The related control must immediately follow the static text in the tabbing order.) Thus, 
Alt-N jumps to the Name edit control and Alt-K jumps to the Skill combo box. Needless to say, designated jump characters should be unique within the dialog. The Skill control uses Alt-K because the SS Nbr control uses Alt-S.
</BLOCKQUOTE></DIV>

<B><LI>Save the resource file on disk.</B> For safety, choose Save from the 
File menu or click the Save button on the toolbar to save ex06a.rc. Keep 
the dialog editor running, and keep the newly built dialog on the screen.
</OL>

<A NAME="136"><H2>ClassWizard and the Dialog Class</H2></A><P>You have now built a dialog resource, but you can't use it without a corresponding dialog class. (The section titled &quot;<A HREF="ch06e.htm#138">Understanding the EX06A Application</A>&quot; explains the relationship between the dialog window 
and the underlying classes.) ClassWizard works in conjunction with the dialog 
editor to create that class as follows:

<OL>
<P><B><LI>Choose ClassWizard from Visual C++'s View menu (or press Ctrl-W).</B> Be sure that you still have the newly built dialog, <I>IDD_DIALOG1</I>, selected in the dialog editor and that EX06A is the current Visual C++ project.

<P><B><LI>Add the <I>CEx06aDialog</I> class.</B> ClassWizard detects the fact that you've just created a dialog resource without an associated C++ class. It politely asks whether you want to create a class, as shown below.

<P><IMG SRC="G06OG13.GIF" width=353 height=192 BORDER=0><P>

<P>Accept the default selection of Create A New Class, and click OK. Fill in the top field of the New Class dialog, as shown here.<P>

<P><IMG SRC="G06OG14.GIF" width=404 height=366 BORDER=0>

<P><B><LI>Add the <I>CEx06aDialog</I> variables.</B> After ClassWizard creates the <I>CEx06aDialog</I> class, the MFC ClassWizard dialog appears. Click on the Member Variables tab, and the Member Variables page appears, as shown here.

<P><A HREF="javascript:fullSize('G06OG15x.htm')"> <img src="G06OG15.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>


<P>You need to associate data members with each of the dialog's controls. To do this, click on a control ID and then click the Add Variable button. The Add Member Variable dialog appears, as shown in the following illustration.<P>

<P><IMG SRC="G06OG16.GIF" width=320 height=288 BORDER=0><P>

<P>Type in the member variable name, and choose the variable type according to the following table. Be sure to type in the member variable name exactly as shown; the case of each letter is important. When you're done, click OK to return to the MFC ClassWizard dialog. Repeat this process for each of the listed controls.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Control ID</B></TD><TD VALIGN="TOP"><B>Data Member</B></TD><TD VALIGN="TOP"><B>Type</B></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_BIO</I></TD><TD VALIGN="TOP"><I>m_strBio</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_CAT</I></TD><TD VALIGN="TOP"><I>m_nCat</I></TD><TD VALIGN="TOP"><I>int</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_DEPT</I></TD><TD VALIGN="TOP"><I>m_strDept</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_DIS</I></TD><TD VALIGN="TOP"><I>m_bInsDis</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_EDUC</I></TD><TD VALIGN="TOP"><I>m_strEduc</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_LANG</I></TD><TD VALIGN="TOP"><I>m_nLang</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_LIFE</I></TD><TD VALIGN="TOP"><I>m_bInsLife</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_LOYAL</I></TD><TD VALIGN="TOP"><I>m_nLoyal</I></TD><TD VALIGN="TOP"><I>int</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_MED</I></TD><TD VALIGN="TOP"><I>m_bInsMed</I></TD><TD VALIGN="TOP"><I>BOOL</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_NAME</I></TD><TD VALIGN="TOP"><I>m_strName</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_RELY</I></TD><TD VALIGN="TOP"><I>m_nRely</I></TD><TD VALIGN="TOP"><I>int</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_SKILL</I></TD><TD VALIGN="TOP"><I>m_strSkill</I></TD><TD VALIGN="TOP"><I>CString</I></TD></TR>
<TR><TD VALIGN="TOP"><I>IDC_SSN</I></TD><TD VALIGN="TOP"><I>m_nSsn</I></TD><TD VALIGN="TOP"><I>int</I></TD></TR>
</TABLE>

<P>As you select controls in the MFC ClassWizard dialog, various edit boxes appear at the bottom of the dialog. If you select a <I>CString</I> variable, you can set its maximum number of characters; if you select a numeric variable, you can set its high and low limits. Set the minimum value for <I>IDC<B>_</B>SSN</I> to 0 and the maximum value to 999999999.

<P>Most relationships between control types and variable types are obvious. The way in which radio buttons correspond to variables is not so intuitive, however. The <I>CDialog</I> class associates an integer variable with each radio button <I>group,</I> with the first button corresponding to value 
0, the second to 1, and so forth.

<P><B><LI>Add the message-handling function for the Special button.</B> <I>CEx06aDialog</I> doesn't need many message-handling functions because the <I>CDialog</I> base class, with the help of Windows, does most of the dialog management. When you specify the ID <I>IDOK</I> for the OK button (ClassWizard's default), for example, the virtual <I>CDialog</I> function <I>OnOK</I> gets called when the user clicks the button. For other buttons, 
however, you need message handlers.

<P>Click on the Message Maps tab. The ClassWizard dialog should contain an entry for <I>IDC<B>_</B>SPECIAL</I> in the Object IDs list box. Click on this entry, and double-click on the BN<B>_</B>CLICKED message that appears in the Messages list box. ClassWizard invents a member function name, <I>OnSpecial</I>, and opens the Add Member Function dialog, as shown here.<P>

<P><IMG SRC="G06OG17.GIF" width=291 height=126 BORDER=0><P>

<P>You could type in your own function name here, but this time accept the default and click OK. Click the Edit Code button in the MFC ClassWizard dialog. This opens the file ex06aDialog.cpp and moves to the <I>OnSpecial</I> function. Insert a <I>TRACE</I> statement in the <I>OnSpecial</I> function by typing in the boldface code, shown below, which replaces the existing code:<P>

<PRE>void CEx06aDialog::OnSpecial()
{
    <B>TRACE(&quot;CEx06aDialog::OnSpecial\n&quot;);</B>
}
</PRE>

<P><B><LI>Use ClassWizard to add an <I>OnInitDialog</I> message-handling function.</B> As you'll see in a moment, ClassWizard generates code that initializes a dialog's controls. This DDX (Dialog Data Exchange) code won't initialize the list-box choices, however, so you must override the <I>CDialog::OnInit-Dialog</I> function. Although <I>OnInitDialog</I> is a virtual member function, ClassWizard generates the prototype and skeleton if you map the WM<I>_</I>INITDIALOG message in the derived dialog class. To do so, click on <I>CEx06aDialog</I> in the Object IDs list box and then double-click on the WM<I>_</I>INITDIALOG message in the Messages list box. Click the Edit Code button in the MFC ClassWizard dialog to edit the <I>OnInitDialog</I> function. Type in the boldface code, which replaces the existing code:<P>
<PRE>BOOL CEx06aDialog::OnInitDialog()
{
    <B>// Be careful to call CDialog::OnInitDialog
    //  only once in this function
    CListBox* pLB = (CListBox*) GetDlgItem(IDC_DEPT);
    pLB-&gt;InsertString(-1, &quot;Documentation&quot;);
    pLB-&gt;InsertString(-1, &quot;Accounting&quot;);
    pLB-&gt;InsertString(-1, &quot;Human Relations&quot;);
    pLB-&gt;InsertString(-1, &quot;Security&quot;);

    // Call after initialization
    return CDialog::OnInitDialog();</B>
}
</PRE>

<P>You could also use the same initialization technique for the combo boxes, in place of the initialization in the resource.<P>
</OL>

<A NAME="137"><H2>Connecting the Dialog to the View</H2></A><P>Now we've got the resource and the code for a dialog, but it's not connected to the view. In most applications, you would probably use a menu choice to activate a dialog, but we haven't studied menus yet. Here we'll use the familiar mouse-click message WM<B><I>_</I></B>LBUTTONDOWN to start the dialog. The steps are as follows:

<OL>
<P><B><LI>In ClassWizard, select the <I>CEx06aView</I> class.</B> At this point, be sure that EX06A is Visual C++'s current project.

<P><B><LI>Use ClassWizard to add the <I>OnLButtonDown</I> member function.</B> You've done this in the examples in earlier chapters. Simply select the <I>CEx06aView</I> class name, click on the <I>CEx06aView</I> object ID, and then double-click on WM<I>_</I>LBUTTONDOWN.

<P><B><LI>Write the code for <I>OnLButtonDown</I> in file ex06aView.cpp.</B> Add the boldface code below. Most of the code consists of <I>TRACE</I> statements to print the dialog data members after the user exits the dialog. The <I>CEx06aDialog</I> constructor call and the <I>DoModal</I> call are the critical statements, however:<P>
<PRE>void CEx06aView::OnLButtonDown(UINT nFlags, CPoint point)
{
    <B>CEx06aDialog dlg;
    dlg.m_strName  = &quot;Shakespeare, Will&quot;;
    dlg.m_nSsn     = 307806636;
    dlg.m_nCat     = 1;  // 0 = hourly, 1 = salary
    dlg.m_strBio   = &quot;This person is not a well-motivated tech writer&quot;;
    dlg.m_bInsLife = TRUE;
    dlg.m_bInsDis  = FALSE;
    dlg.m_bInsMed  = TRUE;
    dlg.m_strDept  = &quot;Documentation&quot;;
    dlg.m_strSkill = &quot;Writer&quot;;
    dlg.m_nLang    = 0;
    dlg.m_strEduc  = &quot;College&quot;;
    dlg.m_nLoyal   = dlg.m_nRely = 50;
    int ret = dlg.DoModal();
    TRACE(&quot;DoModal return = %d\n&quot;, ret);
    TRACE(&quot;name = %s, ssn = %d, cat = %d\n&quot;,
          dlg.m_strName, dlg.m_nSsn, dlg.m_nCat);
    TRACE(&quot;dept = %s, skill = %s, lang = %d, educ = %s\n&quot;,
          dlg.m_strDept, dlg.m_strSkill, dlg.m_nLang, dlg.m_strEduc);
    TRACE(&quot;life = %d, dis = %d, med = %d, bio = %s\n&quot;,
          dlg.m_bInsLife, dlg.m_bInsDis, dlg.m_bInsMed, dlg.m_strBio);
    TRACE(&quot;loyalty = %d, reliability = %d\n&quot;,
          dlg.m_nLoyal, dlg.m_nRely);</B>
}
</PRE>

<P><B><LI>Add code to the virtual <I>OnDraw</I> function in file ex06aView.cpp.</B> To prompt the user to press the left mouse button, code the 
<I>CEx06aView::OnDraw</I> function. (The skeleton was generated by AppWizard.) The following boldface code (which you type in) replaces the existing code:<P>
<PRE>void CEx06aView::OnDraw(CDC* pDC)
{
    <B>pDC-&gt;TextOut(0, 0, &quot;Press the left mouse button here.&quot;);</B>
}
</PRE>

<P><B><LI>To ex06aView.cpp, add the dialog class include statement.</B> The 
<I>OnLButtonDown</I> function above depends on the declaration of class 
<I>CEx06aDialog</I>. You must insert the include statement
<P>
<PRE><B>#include &quot;ex06aDialog.h&quot;</B></PRE>
<P>at the top of the <I>CEx06aView</I> class source code file (ex06aView.cpp), 
after the statement<P>
<PRE>#include &quot;ex06aView.h&quot;</PRE>

<P><B><LI>Build and test the application.</B> If you have done everything correctly, you should be able to build and run the EX06A application through 
Visual C++. Try entering data in each control, and then click the OK button and observe the <I>TRACE</I> results in the Debug window. Notice that the scroll bar controls don't do much yet; we'll attend to them later. Notice what happens when you press Enter while typing in text data in a control: the dialog closes immediately.<P>
</OL>
<P>
<A NAME="138"><H2>Understanding the EX06A Application</H2></A><P>When your program calls <I>DoModal</I>, control is returned to your program only when the user closes the dialog. If you understand that, you understand modal dialogs. When you start creating modeless dialogs, you'll begin to appreciate the programming simplicity of modal dialogs. A lot happens &quot;out of sight&quot; as a result of that <I>DoModal</I> call, however. Here's a &quot;what calls what&quot; summary:<P>
<BLOCKQUOTE>
CDialog::DoModal<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CEx06aDialog::OnInitDialog<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#133;additional initialization&#133;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDialog::OnInitDialog<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CWnd::UpdateData(FALSE)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CEx06aDialog::DoDataExchange<BR>
&nbsp;&nbsp;&nbsp;&nbsp;user enters data&#133;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;user clicks the OK button<BR>
&nbsp;&nbsp;&nbsp;&nbsp;CEx06aDialog::OnOK<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#133;additional validation&#133;<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDialog::OnOK<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CWnd::UpdateData(TRUE)<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CEx06aDialog::DoDataExchange<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CDialog::EndDialog(IDOK)<BR>
</BLOCKQUOTE>
<P><I>OnInitDialog</I> and <I>DoDataExchange</I> are virtual functions overridden in the <I>CEx06aDialog</I> class. Windows calls <I>OnInitDialog</I> as part of the dialog initialization process, and that results in a call to 
<I>DoDataExchange</I>, a <I>CWnd</I> virtual function that was overridden by ClassWizard. Here is a listing of that function:<P>
<PRE>void CEx06aDialog::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CEx06aDialog)
    DDX_Text(pDX, IDC_BIO, m_strBio);
    DDX_Radio(pDX, IDC_CAT, m_nCat);
    DDX_LBString(pDX, IDC_DEPT, m_strDept);
    DDX_Check(pDX, IDC_DIS, m_bInsDis);
    DDX_CBString(pDX, IDC_EDUC, m_strEduc);
    DDX_CBIndex(pDX, IDC_LANG, m_nLang);
    DDX_Check(pDX, IDC_LIFE, m_bInsLife);
    DDX_Scroll(pDX, IDC_LOYAL, m_nLoyal);
    DDX_Check(pDX, IDC_MED, m_bInsMed);
    DDX_Text(pDX, IDC_NAME, m_strName);
    DDX_Scroll(pDX, IDC_RELY, m_nRely);
    DDX_CBString(pDX, IDC_SKILL, m_strSkill);
    DDX_Text(pDX, IDC_SSN, m_nSsn);
    DDV_MinMaxInt(pDX, m_nSsn, 0, 999999999);
    //}}AFX_DATA_MAP 
}
</PRE>
<P>The <I>DoDataExchange</I> function and the <I>DDX<B>_</B></I> (exchange) and 
<I>DDV<B>_</B></I> (validation) functions are &quot;bidirectional.&quot; If 
<I>UpdateData</I> is called with a <I>FALSE</I> parameter, the functions transfer data from the data members to the dialog controls. If the parameter is <I>TRUE</I>, the functions transfer data from the dialog controls to the data members. <I>DDX<B>_</B>Text</I> is overloaded to accommodate a variety of data types.
<P>The <I>EndDialog</I> function is critical to the dialog exit procedure. <I>DoModal</I> returns the parameter passed to 
<I>EndDialog</I>. <I>IDOK</I> accepts the dialog's data, 
and <I>IDCANCEL</I> cancels the dialog.
<P>
<DIV CLASS=tip>
<BLOCKQUOTE>
<IMG SRC="tip.jpg" width=123 height=18 BORDER=0><P>
You can write your own &quot;custom&quot; DDX function and wire it into Visual C++. This feature is useful if you're using a unique data type throughout your application. See MFC Technical Note #26 in the online documentation.
</BLOCKQUOTE></DIV>
<P>
</BODY>
</HTML>



