<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>ActiveX Document Theory</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="964"><H1>ActiveX Document Theory</H1></A><P>It's helpful to put ActiveX documents within the context of COM and 
OLE, which you already understand if you've read the other chapters in this book. 
You can, however, get started with ActiveX document servers without fully 
understanding all the COM concepts covered in Part VI.
<A NAME="965"><H2>ActiveX Document Servers vs. OLE Embedded Servers</H2></A><P>As you saw in <A HREF="ch28a.htm">Chapter 28</A>, an OLE embedded server program runs in a 
child window of an OLE container application and occupies a rectangular area in 
a page of the container's document (see Figure 28-1). Unless an embedded 
server program is classified as a mini-server, it can run stand-alone also. In 
embedded mode, the server program's data is held in a storage inside the container 
application's file. The embedded server program takes over the container 
program's menu and toolbar when the user activates it by double-clicking on its rectangle.
<P>In contrast to an embedded server, an ActiveX document server takes 
over a whole frame window in its container application, and the document is 
always active. An ActiveX server application, running inside a container's frame 
window, runs pretty much the same way it would in stand-alone mode. You can 
see this for yourself if you have Microsoft Office 97. Office includes an 
ActiveX container program called Binder (accessible from the Office shortcut bar), 
and the Office applications (Microsoft Word, Microsoft Excel, and so on) have 
ActiveX server capability. Figure 36-1 shows a Word document and an Excel chart 
inside the same binder.
<P><A HREF="javascript:fullSize('f36og01x.htm')"> <img src="f36og01.jpg" width=404 height=266 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 36-1.</B> <I>A Word document and an Excel chart inside a Microsoft Office Binder window.</I>
<!-- /caption -->
<P>Like an embedded server, the ActiveX document server saves its data in 
a storage inside the ActiveX container's file. When the Office user saves the 
Binder program from the File menu, Binder writes a single OBD file to disk; the 
file contains one storage for the Word document and another for the Excel 
spreadsheet. You can see this file structure yourself with the DFVIEW utility, as 
shown in Figure 36-2.
<P><IMG SRC="F36OG02.GIF" width=338 height=346 BORDER=0><P>
<!-- caption -->
<B>Figure 36-2.</B> <I>A file structure displayed by the DocFile Viewer.</I>
<!-- /caption -->
<A NAME="966"><H2>Running an ActiveX Document Server from Internet Explorer</H2></A><P>Running an ActiveX document server from Internet Explorer is more fun 
than running one from Microsoft Office Binder (Internet Explorer refers to 
Internet Explorer 3.0 or greater). Rather than load a storage only from an OBD file, 
the server program can load its storage from the other side of the world. You 
just type in a URL, such as 
<I>http://www.DaliLama.in/SecretsOfTheUniverse.doc</I>, 
and a Microsoft Word document opens inside your Browse window, taking 
over the browser's menu and toolbar. That's assuming, of course, that you have 
installed the Microsoft Word program. If not, a Word document viewer is 
available, but it must be on your hard disk before you download the file.
<P>An ActiveX document server won't let you save your changes back to 
the Internet host, but it will let you save them on your own hard disk. In 
other words, File Save is disabled but File Save As is enabled.
<P>If you have Microsoft Office, try running Word or Excel in Internet 
Explorer now. The EX34A server is quite capable of delivering documents 
or worksheets to your browser, assuming that they are accessible from its 
home directory. Note that Internet Explorer recognizes documents and 
worksheets not by their file extensions but by the CLSID inside the files. You can prove 
this for yourself by renaming a file prior to accessing it.
<A NAME="967"><H2>ActiveX Document Servers vs. ActiveX Controls</H2></A><P>Both ActiveX document servers and ActiveX controls can run with and 
without the Internet. Both are compiled programs that can run inside a browser. 
The following table lists some of the differences between the two.
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP">&nbsp;</TD><TD VALIGN="TOP"><B>ActiveX Document Server</B></TD><TD VALIGN="TOP"><B>ActiveX Control</B></TD></TR>
<TR><TD VALIGN="TOP">Module type</TD><TD VALIGN="TOP">EXE</TD><TD VALIGN="TOP">Most often a DLL</TD></TR>
<TR><TD VALIGN="TOP">Can run stand-alone</TD><TD VALIGN="TOP">Yes</TD><TD VALIGN="TOP">No</TD></TR>
<TR><TD VALIGN="TOP">Code automatically downloaded and registered by a WWW browser</TD><TD VALIGN="TOP"> No</TD><TD VALIGN="TOP">Yes</TD></TR>
<TR><TD VALIGN="TOP">Can be embedded in an HTML file</TD><TD VALIGN="TOP">No</TD><TD VALIGN="TOP">Yes</TD></TR>
<TR><TD VALIGN="TOP">Occupies the entire browser window</TD><TD VALIGN="TOP">Yes</TD><TD VALIGN="TOP">Sometimes</TD></TR>
<TR><TD VALIGN="TOP">Can be several pages</TD><TD VALIGN="TOP">Yes</TD><TD VALIGN="TOP">Not usually</TD></TR>
<TR><TD VALIGN="TOP">Can read/write disk files</TD><TD VALIGN="TOP">Yes</TD><TD VALIGN="TOP">Not usually</TD></TR>
</TABLE>
<A NAME="968"><H2>OLE Interfaces for ActiveX Document Servers and Containers</H2></A><P>ActiveX document servers implement the same interfaces as OLE 
embedded servers, including <I>IOleObject</I>, 
<I>IOleInPlaceObject</I>, and 
<I>IOleInPlaceActiveObject</I>. ActiveX document containers implement 
<I>IOleClientSite</I>, <I>IOleInPlaceFrame</I>, 
and <I>IOleInPlaceSite</I>. The menu negotiation works the same as it does for 
Visual Editing.
<P>Some additional interfaces are implemented, however. ActiveX 
document servers implement <I>IOleDocument</I>, 
<I>IOleDocumentView</I>, <I>IOleCommandTarget</I>, and 
<I>IPrint.</I> ActiveX document containers implement 
<I>IOleDocumentSite</I>. 
The architecture allows for multiple views of the same document&#151;sort of 
like the MFC document-view architecture&#151;but most ActiveX document 
servers implement only one view per document.
<P>The critical function in an OLE embedded server is 
<I>IOleObject::DoVerb</I>, which is called by the container when the user double-clicks on an 
embedded object or activates it through the menu. For an ActiveX document server, 
however, the critical function is 

<I>IOleDocumentView::UIActivate</I>. (Before calling 
this function, the container calls 
<I>IOleDocument::CreateView</I>, but generally the 
server just returns an interface pointer to the single document-view object.) 
<I>UIActivate</I> finds the container site and frame window, sets that window as the server's 
parent, sets the server's window to cover the container's frame window, and then 
activates the server's window.
<P>

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
It's important to realize that the COM interaction 
takes place between the container program (Internet Explorer or 
Binder) and the ActiveX document server (your program), which are 
both running on the client computer. We know of no cases in which 
remote procedure calls (RPCs) are made over the Internet. That 
means that the remote host (the server computer) does not use COM 
interfaces to communicate with clients, but it can deliver data in 
the form of storages.
</BLOCKQUOTE></DIV>
<A NAME="969"><H2>MFC Support for ActiveX Document Servers</H2></A><P>MFC allows you to create your own ActiveX document server programs. 
In addition, Visual C++ 6.0 now allows you to write ActiveX document 
containers. To get a server program, create a new MFC AppWizard EXE project 
and then check the Active Document Server check box, as shown in Figure 
36-3. To create a container program, just make sure the Active Document 
Container check box is marked.
<P><A HREF="javascript:fullSize('f36og03x.htm')"> <img src="f36og03.jpg" width=404 height=325 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 36-3.</B> <I>Step 3 of the MFC AppWizard.</I>
<!-- /caption -->
<P>Here's a rundown of the classes involved in MFC's ActiveX Document 
Server Architecture.
<A NAME="970"><H3><I>COleServerDoc</I></H3></A><P>As it is for any COM component, your ActiveX document server's 
document class is derived from 
<I>COleServerDoc</I>, which implements 
<I>IPersistStorage</I>, <I>IOleObject</I>, 
<I>IDataObject</I>, <I>IOleInPlaceObject</I>, and 
<I>IOleInPlaceActiveObject</I>.
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The COM interfaces and MFC classes discussed here 
were named before Microsoft introduced ActiveX technology. An 
ActiveX document server was formerly known as a document object server 
or a doc object server, so those are the names you'll see in the 
source code and in some online documentation.
</BLOCKQUOTE></DIV>
<A NAME="971"><H3><I>CDocObjectServerItem</I></H3></A><P>This class is derived from the 
<I>COleServerItem</I> class used in embedded 
servers. Your ActiveX document server program has a class derived from 
<I>CDocObjectServerItem</I>, but that class isn't used when the program is running in 
ActiveX document mode.
<A NAME="972"><H3><I>CDocObjectServer</I></H3></A><P>This class implements the new ActiveX server interfaces. Your application 
creates an object of class <I>CDocObjectServer</I> and attaches it to the 
<I>COleServerDoc</I> object. If you look at 
<I>COleServerDoc::GetDocObjectServer</I> in your derived 
document class, you'll see the construction code. Thereafter, the document 
object and attached <I>CDocObjectServer</I> object work together to provide ActiveX 
document server functionality. This class implements both 
<I>IOleDocument</I> and <I>IOleDocumentView</I>, which means that you can have only one view per document 
in an MFC ActiveX document server. You generally don't derive classes from 
<I>CDocObjectServer</I>.
<A NAME="973"><H3><I>COleDocIPFrameWnd</I></H3></A><P>This class is derived from 
<I>COleIPFrameWnd</I>. Your application has a frame 
window class derived from <I>COleDocIPFrameWnd</I>. The framework constructs 
an object of that class when the application starts in embedded server mode or 
in ActiveX document server mode. In ActiveX document server mode, the 
server's window completely covers the container's frame window and has its own 
menu resource attached, with the identifier<I> 
IDR_SRVR_INPLACE</I> (for an SDI application).
</BODY>
</HTML>



