<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX16A Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="324"><H1>The EX16A Example</H1></A><P>The first of this chapter's two examples shows a very simple document-view interaction. The <I>CEx16aDoc</I> document class, derived from <I>CDocument</I>, allows for a single embedded 
<I>CStudent</I> object. The <I>CStudent</I> class represents a student record composed of a <I>CString</I> name and an integer grade. The <I>CEx16aView</I> view class is derived from <I>CFormView</I>. It is a visual representation of a student record that has edit controls for the name and grade. The default Enter 
pushbutton updates the document with data from the edit controls. Figure 16-1 shows the EX16A program window.
<P><A HREF="javascript:fullSize('F16og01x.htm')"> <img src="F16og01.JPG" width=404 height=299 border=0 ALT = "Click to view at full size."> </A>
<P>
<!-- caption -->
<B>Figure 16-1.</B> <I>The EX16A program in action.</I>

<P>Figure 16-2 shows the code for the <I>CStudent</I> class. Most of the class's features serve EX16A, but a few items carry forward to EX16B and the programs discussed in <A HREF="ch17a.htm">Chapter 17</A>. For now, take note of the two data members, the default constructor, the operators, and the <I>Dump</I> function declaration. The <I>DECLARE_DYNAMIC </I>and<I> IMPLEMENT_DYNAMIC </I>macros ensure that the class name is available for the diagnostic dump.<P>
<P>&nbsp;
<P><B>STUDENT.H</B>
<TABLE>
<TR><TD><PRE>// student.h

#ifndef _INSIDE_VISUAL_CPP_STUDENT
#define _INSIDE_VISUAL_CPP_STUDENT
class CStudent : public CObject
{
    DECLARE_DYNAMIC(CStudent)
public:
    CString m_strName;
    int m_nGrade;
    
    CStudent()
    {
        m_nGrade = 0;
    }
    
    CStudent(const char* szName, int nGrade) : m_strName(szName)
    {
        m_nGrade = nGrade;
    }

    CStudent(const CStudent&amp; s) : m_strName(s.m_strName)
    {
        // copy constructor
        m_nGrade = s.m_nGrade;
    }

    const CStudent&amp; operator =(const CStudent&amp; s)
    {
        m_strName = s.m_strName;
        m_nGrade = s.m_nGrade;
        return *this;
    }

    BOOL operator ==(const CStudent&amp; s) const
    {
        if ((m_strName == s.m_strName) &amp;&amp; (m_nGrade == s.m_nGrade)) {
            return TRUE;
        }
        else {
            return FALSE;
        }
    }

    BOOL operator !=(const CStudent&amp; s) const
    {
        // Let's make use of the operator we just defined!
        return !(*this == s);
    }
#ifdef _DEBUG
    void Dump(CDumpContext&amp; dc) const;
#endif // _DEBUG
};

#endif // _INSIDE_VISUAL_CPP_STUDENT</PRE>
</TD></TR></TABLE>
<!-- caption -->
<B>Figure 16-2.</B> <I> The </I>CPersistentView<I> class listing.</I>

<P>&nbsp;
<P><B>STUDENT.CPP</B>
<TABLE><TR><TD>
<PRE>#include &quot;stdafx.h&quot;
#include &quot;student.h&quot;

IMPLEMENT_DYNAMIC(CStudent, CObject)

#ifdef _DEBUG
void CStudent::Dump(CDumpContext&amp; dc) const
{
    CObject::Dump(dc);
    dc &lt;&lt; &quot;m_strName = &quot; &lt;&lt; m_strName &lt;&lt; &quot;\nm_nGrade = &quot; &lt;&lt;m_nGrade;
}
#endif // _DEBUG</PRE>
</TD></TR></TABLE>
<P>Follow these steps to build the EX16A example:
<OL>
<P><B><LI>Run AppWizard to generate \vcpp32\ex16a\ex16a.</B> In the Step 6 page, change the view's base class to <I>CFormView</I>, as shown here.

<P><A HREF="javascript:fullSize('G16og01x.htm')"> <img src="G16og01.JPG" width=404 height=361 border=0 ALT = "Click to view at full size."> </A>

<P>The options and the default class names are shown here.

<P><img src="G16og02x.GIF" width=414 height=423 border=0><P>

<P><B><LI>Use the menu editor to replace the Edit menu options.</B> Delete the current Edit menu items and replace them with a Clear All option, as shown here.

<P><IMG SRC="G16og03.gif" width=236 height=57 ALIGN="BOTTOM" BORDER=0>

<P>Use the default constant <I>ID_EDIT_CLEAR_ALL</I>, which is assigned by the application framework. A menu prompt automatically appears.

<P><B><LI>Use the dialog editor to modify the <I>IDD_EX16A_FORM </I>dialog.</B> Open the AppWizard-generated dialog <I>IDD_EX16A_FORM</I>, and add controls as shown below.

<P>Be sure that the Styles properties are set <U>exactly</U> as shown in the Dialog Properties dialog (Style = Child; Border = None) and that Visible is unchecked.

<P><img src="G16og04x.GIF" width=430 height=334 border=0> 

<P>Use the following IDs for the controls.

<TABLE WIDTH="95%" BORDER="0" CELLPADDING="5"><TR><TD><b>Control     </b></TD><TD><b>ID</b></TD></TR>
<TR><TD>Name edit control  </TD><TD>   <I>IDC_NAME</I></TD></TR>
<TR><TD>Grade edit control </TD><TD>    <I>IDC_GRADE</I></TD></TR>
<TR><TD>Enter pushbutton   </TD><TD>  <I>IDC_ENTER</I></TD></TR></TABLE>


<P><B><LI>Use ClassWizard to add message handlers for <I>CEx16aView</I>.</B> Select the <I>CEx16aView</I> class, and then add handlers for the following 
messages. Accept the default function names.

<TABLE WIDTH="95%" BORDER="0" CELLPADDING="5"><TR><TD><b>Object ID</b></TD><TD>    <b>Message</b></TD><TD><b>Member Function</b></TD></TR>
<TR><TD><I>IDC_ENTER</I>   </TD><TD>  BN_CLICKED   </TD><TD>  <I>OnEnter</I></TD></TR>
<TR><TD><I>ID_EDIT_CLEAR_ALL</I></TD><TD>     COMMAND   </TD><TD>  <I>OnEditClearAll</I></TD></TR>
<TR><TD><I>ID_EDIT_CLEAR_ALL</I>   </TD><TD>  UPDATE_COMMAND_UI   </TD><TD>  <I>OnUpdateEditClearAll</I></TD></TR></TABLE>

<P><B><LI>Use ClassWizard to add variables for <I>CEx16aView</I>.</B> Click on the Member Variables tab in the MFC ClassWizard dialog, and then add the following variables.

<TABLE WIDTH="95%" BORDER="0" CELLPADDING="5"><TR><TD><b>Control ID</b></TD><TD><b>Member Variable</b></TD><TD><b>Category</b></TD><TD><b>Variable Type</b></TD></TR>
<TR><TD><I>IDC_GRADE</I>  </TD><TD>   <I>m_nGrade</I>  </TD><TD>   Value  </TD><TD>   
<I>int</I></TD></TR>
<TR><TD><I>IDC_NAME    </I></TD><TD><I>m_strName</I>  </TD><TD>   Value   </TD><TD>  <I>CString</I></TD></TR></TABLE>

<P>For <I>m_nGrade</I>, enter a minimum value of 0 and a maximum value of 100. Notice that ClassWizard generates the code necessary to validate data entered by the user.

<P><B><LI>Add a prototype for the helper function <I>UpdateControlsFromDoc</I>.</B>In the ClassView window, right-click on 
<I>CEx16aView</I> and choose Add Member Function. Fill out the dialog box to add the following function:

<P><PRE><B>private:
    void UpdateControlsFromDoc();</B></PRE>

<P><B><LI>Edit the file Ex16aView.cpp.</B> AppWizard generated the skeleton 
<I>OnInitialUpdate</I> function, and ClassView generated the skeleton 
<I>UpdateControlsFromDoc</I> function. <I>UpdateControlsFromDoc</I> is a private <U>helper</U> member function that transfers data from the document to the <I>CEx16aView</I> data members and then to the dialog edit controls. Edit the code as shown here:

<P><PRE>void CEx16aView::OnInitialUpdate()
{<B>   // called on startup
    UpdateControlsFromDoc();</B>
}
void CEx16aView::UpdateControlsFromDoc()
{<B>   // called from OnInitialUpdate and OnEditClearAll
    CEx16aDoc* pDoc = GetDocument();
    m_nGrade = pDoc-&gt;m_student.m_nGrade;
    m_strName = pDoc-&gt;m_student.m_strName;<BR>
    UpdateData(FALSE); // calls DDX</B>
}</PRE>

<P>The<I> OnEnter</I> function replaces the <I>OnOK</I> function you'd expect to see in a dialog class. The function transfers data from the edit controls to 
the view's data members and then to the document. Add the boldface code shown here:

<P><PRE>void CEx16aView::OnEnter()
{
<B>    CEx16aDoc* pDoc = GetDocument();
    UpdateData(TRUE);
    pDoc-&gt;m_student.m_nGrade = m_nGrade;
    pDoc-&gt;m_student.m_strName = m_strName;</B>
}</PRE>
<P>In a complex multiview application, the Edit Clear All command would be routed directly to the document. In this simple example, it's routed to the view. The update command UI handler disables the menu item if the document's student object is already blank. Add the following boldface code:

<P><PRE>void CEx16aView::OnEditClearAll()
{
    GetDocument()-&gt;m_student = CStudent(); // &quot;blank&quot; student object
    UpdateControlsFromDoc();
}
void CEx16aView::OnUpdateEditClearAll(CCmdUI* pCmdUI)
{
    pCmdUI-&gt;Enable(GetDocument()-&gt;m_student != CStudent()); // blank?
}</PRE>
<P><B><LI>Edit the EX16A project to add the files for <I>CStudent</I>.</B> Choose Add To Project from the Project menu, choose Files from the submenu, and select the Student.h header and the Student.cpp source code files. Visual C++ will add the files' names to the project's DSP file so that they will be compiled when you build the project.
<P><B><LI>Add a <I>CStudent</I> data member to the <I>CEx16aDoc</I> class.</B> Use ClassView to add the following data member, and the<I> #include</I> will be added automatically.
<P><PRE><B>public:
    CStudent m_student;</B></PRE>
<P>The <I>CStudent</I> constructor is called when the document object is 
constructed, and the <I>CStudent</I> destructor is called when the document 
object is destroyed.
<P><B><LI>Edit the Ex16aDoc.cpp file.</B> Use the <I>CEx16aDoc</I> constructor to initialize the student object, as shown here:
<P>
<PRE>CEx16aDoc::CEx16aDoc() : m_student(&quot;default value&quot;, 0)
{
    TRACE(&quot;Document object constructed\n&quot;);
}</PRE>
<P>We can't tell whether the EX16A program works properly unless we dump the document when the program exits. We'll use the destructor to call the document's <I>Dump</I> function, which calls the <I>CStudent::Dump</I> function shown here:
<P>

<PRE>CEx16aDoc::~CEx16aDoc()
{
#ifdef _DEBUG
    Dump(afxDump);
#endif // _DEBUG
}

void CEx16aDoc::Dump(CDumpContext&amp; dc) const
{
    CDocument::Dump(dc);
    dc &lt;&lt; &quot;\n&quot; &lt;&lt; m_student &lt;&lt; &quot;\n&quot;;
}</PRE>
<P><B><LI>Build and test the EX16A application.</B> Type a name and a grade, and then click Enter. Now exit the application. Does the Debug window show messages similar to those shown here?
<P>
<PRE>a CEx16aDoc at $411580
m_strTitle = Untitled
m_strPathName = 
m_bModified = 0
m_pDocTemplate = $4113A0

a CStudent at $4115D4 
m_strName = Sullivan, Walter
m_nGrade = 78</PRE>
<P>
</OL>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
To see these messages, you must compile the application with the Win32 Debug target selected and you must run the program from the debugger.
</BLOCKQUOTE></DIV>
<P>
</BODY>
</HTML>



