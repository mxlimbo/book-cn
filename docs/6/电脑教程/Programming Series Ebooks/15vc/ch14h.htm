<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX14B Status Bar Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="292"><H1>The EX14B Status Bar Example</H1></A>
<P>The EX14B example replaces the standard application framework status bar with a new status bar that has the following text panes.
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Pane Index</B></TD><TD VALIGN="TOP"><B>String ID</B></TD><TD VALIGN="TOP"><B>Type</B></TD><TD VALIGN="TOP"><B>Description</B></TD></TR>
<TR><TD VALIGN="TOP">0</TD><TD VALIGN="TOP"><I>ID_SEPARATOR </I>(0)</TD><TD VALIGN="TOP">Message line</TD><TD VALIGN="TOP">
<I>x</I> cursor coordinate</TD></TR>
<TR><TD VALIGN="TOP">1</TD><TD VALIGN="TOP"><I>ID_SEPARATOR </I>(0)</TD><TD VALIGN="TOP">Message line</TD><TD VALIGN="TOP">
<I>y</I> cursor coordinate</TD></TR>
<TR><TD VALIGN="TOP">2</TD><TD VALIGN="TOP"><I>ID_INDICATOR_LEFT</I></TD><TD VALIGN="TOP">Status indicator</TD><TD VALIGN="TOP">Left mouse button status</TD></TR>
<TR><TD VALIGN="TOP">3</TD><TD VALIGN="TOP"><I>ID_INDICATOR_RIGHT</I></TD><TD VALIGN="TOP">Status indicator</TD><TD VALIGN="TOP">Right mouse button status</TD></TR>
</TABLE>
<P>The resulting status bar is shown in Figure 14-4. Notice that the leftmost pane stretches past its normal 1/20-screen length as the displayed frame window expands.
<P><A HREF="javascript:fullSize('F14OG04x.htm')"> <img src="F14OG04.JPG" width=404 height=277 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-4.</B> <I>The status bar of the EX14B example.</I>
<!-- /caption -->
<P>Follow these steps to produce the EX14B example:<P>
<OL>
<B><LI>Run AppWizard to generate \vcpp32\ex14b\ex14b.</B> Accept all default settings but two: select Single Document and deselect Printing and Print Preview. The options and the default class names are shown here.<P>

<P><img src="G14OG04x.gif" width=414 height=423 border=0 ><P>

<B><LI>Use the string editor to edit the application's string table resource.</B> The application has a single string table resource with artificial &quot;segment&quot; divisions left over from the 16-bit era. Double-click on the String Table icon in the String Table folder on the ResourceView page to bring up the string editor. Then double-click on the empty entry at the end of the list. A dialog allows you to assign the ID and the string value as shown below.<P>

<P><A HREF="javascript:fullSize('G14OG05x.htm')"> <img src="G14OG05.JPG" width=404 height=267 border=0 ALT = "Click to view at full size."> </A><P>
<P>Add two strings as follows.<P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>String ID</B></TD><TD VALIGN="TOP"><B>String Caption</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_INDICATOR_LEFT</I></TD><TD VALIGN="TOP">LEFT</TD></TR>
<TR><TD VALIGN="TOP"><I>ID_INDICATOR_RIGHT</I></TD><TD VALIGN="TOP">RIGHT</TD></TR>
</TABLE>
<P>

<B><LI>Use Visual C++ to edit the application's symbols.</B> Choose Resource Symbols from the View menu. Add the new status bar identifier, <I>ID_MY_STATUS_BAR</I>, and accept the default value.
<P><B><LI>Use ClassWizard to add View menu command handlers in the class <I>CMainFrame.</I></B> Add the following command message handlers.<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Object ID</B></TD><TD VALIGN="TOP"><B>Message</B></TD><TD VALIGN="TOP"><B>Member Function</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_VIEW_STATUS_BAR</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnViewStatusBar</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_VIEW_STATUS_BAR</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP"><I>OnUpdateViewStatusBar</I></TD></TR>
</TABLE>
<P>

<B><LI>Add the following function prototypes to MainFrm.h.</B> You must add these <I>CMainFrame</I> message handler prototypes manually because ClassWizard doesn't recognize the associated command message IDs.
<P>
<PRE><B>afx_msg void OnUpdateLeft(CCmdUI* pCmdUI);
afx_msg void OnUpdateRight(CCmdUI* pCmdUI);</B>
</PRE>
<P>Add the message handler statements <U>inside</U> the <I>AFX_MSG</I> brackets so that ClassWizard will let you access and edit the code later. While MainFrm.h is open, make <I>m_wndStatusBar</I> public rather than protected.
<P><B><LI>Edit the MainFrm.cpp file.</B> Replace the original <I>indicators</I> array with the following boldface code:<P>
<PRE>static UINT indicators[] =
{
    ID_SEPARATOR,  <B>// first message line pane
    ID_SEPARATOR,  // second message line pane
    ID_INDICATOR_LEFT,
    ID_INDICATOR_RIGHT,</B>
};
</PRE><P>Next edit the <I>OnCreate</I> member function. Replace the following statement
<P><PRE>if (!m_wndStatusBar.Create(this) ||
    !m_wndStatusBar.SetIndicators(indicators,
      sizeof(indicators)/sizeof(UINT)))
{
    TRACE0(&quot;Failed to create status bar\n&quot;);
    return -1;      // fail to create
}
</PRE><P>with the statement shown here:
<P><PRE>if (!m_wndStatusBar.Create(this<B>,
        WS_CHILD | WS_VISIBLE | CBRS_BOTTOM, ID_MY_STATUS_BAR</B>) ||
    !m_wndStatusBar.SetIndicators(indicators,
      sizeof(indicators)/sizeof(UINT)))
{
    TRACE0(&quot;Failed to create status bar\n&quot;);
    return -1;      // fail to create
}
</PRE>
<P>The modified call to <I>Create</I> uses our own status bar ID, <I>ID_MY_STATUS_BAR</I>, instead of <I>AFX_IDW_STATUS_BAR</I> (the application framework's status bar object).
<P>Now add the following message map entries for the class <I>CMainFrame</I>. ClassWizard can't add these for you because it doesn't recognize the string table IDs as object IDs.
<P><PRE><B>ON_UPDATE_COMMAND_UI(ID_INDICATOR_LEFT, OnUpdateLeft)
ON_UPDATE_COMMAND_UI(ID_INDICATOR_RIGHT, OnUpdateRight)</B></PRE>
<P>Next add the following <I>CMainFrame</I> member functions that update 
the two status indicators:
<P><PRE><B>void CMainFrame::OnUpdateLeft(CCmdUI* pCmdUI)
{
    pCmdUI-&gt;Enable(::GetKeyState(VK_LBUTTON) &lt; 0);
}

void CMainFrame::OnUpdateRight(CCmdUI* pCmdUI)
{
    pCmdUI-&gt;Enable(::GetKeyState(VK_RBUTTON) &lt; 0);
}</B>
</PRE><P>Note that the left and right mouse buttons have virtual key codes like 
keys on the keyboard have. You don't have to depend on mouse-click messages to determine the button status.
<P>Finally, edit the following View menu functions that ClassWizard originally generated in MainFrm.cpp:
<P><PRE>void CMainFrame::OnViewStatusBar()
{
    <B>m_wndStatusBar.ShowWindow((m_wndStatusBar.GetStyle() &amp;
                               WS_VISIBLE) == 0);
    RecalcLayout();</B>
}
void CMainFrame::OnUpdateViewStatusBar(CCmdUI* pCmdUI)
{
    <B>pCmdUI-
&gt;SetCheck((m_wndStatusBar.GetStyle() &amp; WS_VISIBLE) != 0);</B>
}
</PRE><P>These functions ensure that the View menu Status Bar command is properly linked to the new status bar.
<P><B><LI>Edit the <I>OnDraw</I> function in Ex14bView.cpp.</B> The <I>OnDraw</I> function displays a message in the view window. Add the following boldface code:
<P><PRE>void CEx14bView::OnDraw(CDC* pDC)
{
    <B>pDC-&gt;TextOut(0, 0,
        &quot;Watch the status bar while you move and click the mouse.&quot;);</B>
}
</PRE>
<P><B><LI>Add a WM_MOUSEMOVE handler in the <I>CEx14bView</I> class.</B> Use ClassWizard to map the message to <I>OnMouseMove</I>, and then edit the function as shown below. This function gets a pointer to the status bar object and then calls the <I>SetPaneText</I> function to update the first and second message line panes.
<P><PRE>void CEx14bView::OnMouseMove(UINT nFlags, CPoint point)
{
    <B>CString str;
    CMainFrame* pFrame = (CMainFrame*) AfxGetApp()-&gt;m_pMainWnd;
    CStatusBar* pStatus = &amp;pFrame-&gt;m_wndStatusBar;
    if (pStatus) {
        str.Format(&quot;x = %d&quot;, point.x);
        pStatus-&gt;SetPaneText(0, str);
        str.Format(&quot;y = %d&quot;, point.y);
        pStatus-&gt;SetPaneText(1, str);
    }</B>
}</PRE>
<P>Finally, add the statement
<P><PRE><B>#include &quot;MainFrm.h&quot;</B></PRE>
<P>near the top of the file ex14bView.cpp.
<P><B><LI>Build and test the EX14B application.</B> Move the mouse, and observe that the left two status bar panes accurately reflect the mouse cursor's position. Try the left and right mouse buttons. Can you toggle the status bar on and off from the View menu?
</OL>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
If you want the first (index 0) status bar pane to have a beveled border like the other panes and you want the status bar to grow and resize to fit their contents, include the following two lines in the <I>CMainFrame::OnCreate</I> function, following the call to the status bar <I>Create</I> function.
<P><PRE>m_wndStatusBar.SetPaneInfo(0, 0, 0, 50);
m_wndStatusBar.SetPaneInfo(1, 0, SBPS_STRETCH, 50);</PRE>
<P>These statements change the width of the first two panes (from their default of one-fourth the display size) and make the second pane (index 1) the stretchy one.
</BLOCKQUOTE></DIV>

</BODY>
</HTML>



