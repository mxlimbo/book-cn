<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The SDI Application</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="364"><H1>The SDI Application</H1></A><P>You've seen many SDI applications that have one document class and one 
view class. We'll stick to a single view class in this chapter, but we'll explore the 
interrelationships among the application object, the main frame window, 
the document, the view, the document template object, and the associated 
string and menu resources.
<A NAME="365"><H2>The Windows Application Object</H2></A><P>For each of your applications, AppWizard has been quietly generating a 
class derived from <I>CWinApp</I>. It has also been generating a statement such as this:
<P><PRE>CMyApp theApp;</PRE>
<P>What you're seeing here is the mechanism that starts an MFC 
application. The class <I>CMyApp</I> is derived from the class 
<I>CWinApp</I>, and <I>theApp</I> is a globally declared instance of the class. This global object is called the Windows 
application object.
<P>Here's a summary of the startup steps in a Microsoft Windows MFC 
library application:
<OL>
<LI>Windows loads your program into memory.
<P><LI>The global object <I>theApp</I> is constructed. (All globally declared 
objects are constructed immediately when the program is loaded.)
<P><LI>Windows calls the global function 
<I>WinMain</I>, which is part of the MFC library. 
(<I>WinMain</I> is equivalent to the non-Windows 
<I>main</I> function&#151;each is a main program entry point.)
<P><LI><I>WinMain</I> searches for the one and only instance of a class 
derived from <I>CWinApp</I>.
<P><LI><I>WinMain</I> calls the 
<I>InitInstance</I> member function for 
<I>theApp</I>, which is overridden in your derived application class.
<P><LI>Your overridden <I>InitInstance</I> function starts the process of loading 
a document and displaying the main frame and view windows.
<P><LI><I>WinMain</I> calls the <I>Run</I> member function for 
<I>theApp</I>, which starts the processes of dispatching window messages and command 
messages.
</OL>
<P>You can override another important 
<I>CWinApp</I> member function. The 
<I>ExitInstance</I> function is called when the application terminates, after all 
its windows are closed.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
Windows allows multiple instances of programs to 
run. The <I>InitInstance</I> function is called each time a program instance 
starts up. In Win32, each instance runs as an independent process. It's 
only incidental that the same code is mapped to the virtual memory 
address space of each process. If you want to locate other running 
instances of your program, you must either call the Win32 
<I>FindWindow</I> function or set up a shared data section or memory-mapped file 
for communication.
</BLOCKQUOTE></DIV>
<A NAME="366"><H2>The Document Template Class</H2></A><P>If you look at the <I>InitInstance</I> function that AppWizard generates for 
your derived application class, you'll see that the following statements are featured:
<P><PRE>CSingleDocTemplate* pDocTemplate;
pDocTemplate = new CSingleDocTemplate(
    IDR_MAINFRAME,
    RUNTIME_CLASS(CStudentDoc),
    RUNTIME_CLASS(CMainFrame),       // main SDI frame window
    RUNTIME_CLASS(CStudentView));
AddDocTemplate(pDocTemplate);</PRE>
<P>Unless you start doing fancy things with splitter windows and multiple 
views, this is the only time you'll actually see a document template object. In this 
case, it's an object of class 
<I>CSingleDocTemplate</I>, which is derived from 
<I>CDocTemplate</I>. The <I>CSingleDocTemplate</I>
 class applies only to SDI applications because 
SDI applications are limited to one document object. 
<I>AddDocTemplate</I> is a member function of class 
<I>CWinApp</I>.
<P>The <I>AddDocTemplate</I> call, together with the document template 
constructor call, establishes the relationships among 
<U>classes</U>&#151;the application class, the document class, the view window class, and the main frame window class. 
The application object exists, of course, before template construction, but the 
document, view, and frame objects are <U>not</U> constructed at this time. The 
application framework later dynamically constructs these objects when they are needed.
<P>This dynamic construction is a sophisticated use of the 
C++ language. The <I>DECLARE_DYNCREATE</I> and 
<I>IMPLEMENT_DYNCREATE</I> macros in a class declaration and implementation enable the MFC library to construct objects of the specified class dynamically. If this dynamic construction 
capability weren't present, more relationships among your application's classes would 
have to be hard-coded. Your derived application class, for example, would need 
code for constructing document, view, and frame objects of your specific 
derived classes. This would compromise the object-oriented nature of your program.
<P>With the template system, all that's required in your application class is 
use of the <I>RUNTIME_CLASS</I> macro. Notice that the target class's declaration 
must be included for this macro to work.
<P>Figure 17-2 illustrates the relationships among the various classes, 
and Figure 17-3 illustrates the object relationships. An SDI application can have 
only one template (and associated class groups), and when the SDI program is 
running, there can be only one document object and only one main frame 
window object.
<P><IMG SRC="F17FG02.GIF" width=304 height=413 BORDER=0><P>
<!-- caption -->
<B>Figure 17-2.</B> <I>Class relationships.</I>
<!-- /caption -->
<P><A HREF="javascript:fullSize('F17FG03x.htm')"> <img src="F17FG03.JPG" width=404 height=256 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 17-3.</B> <I>Object relationships.</I>
<!-- /caption -->
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The MFC library dynamic construction capability was 
designed before the runtime type identification 
(RTTI) feature was added to the C++ language. The original MFC implementation 
goes beyond RTTI, and the MFC library continues to use it for 
dynamic object construction. See <A HREF="chaba.htm">Appendix B</A> for a description of MFC 
library dynamic construction.
</BLOCKQUOTE></DIV>
<P>
<A NAME="367"><H2>The Document Template Resource</H2></A><P>The first <I>AddDocTemplate</I> parameter is 
<I>IDR_MAINFRAME</I>, the identifier for a string table resource. Here is the corresponding string that AppWizard generates for EX17A in the application's RC file:
<P><PRE>IDR_MAINFRAME
    &quot;ex17a\n&quot;                // application window caption
    &quot;\n&quot;                     // root for default document name
                             //  (&quot;Untitled&quot; used if none provided)
    &quot;Ex17a\n&quot;                // document type name
    &quot;Ex17a Files (*.17a)\n&quot;  // document type description and filter
    &quot;.17a\n&quot;                 // extension for documents of this type
    &quot;Ex17a.Document\n&quot;       // Registry file type ID
    &quot;Ex17a Document&quot;         // Registry file type description
</PRE>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The resource compiler won't accept the string concatenations as shown above. If you examine the ex17a.rc file, you'll see the substrings combined in one long string.
</BLOCKQUOTE></DIV>
<P><I>IDR_MAINFRAME</I> specifies one string that is separated into 
substrings by newline characters (\n). The substrings show up in various places when 
the application executes. The string <I>17A</I> is the default document file 
extension specified to AppWizard.
<P>The <I>IDR_MAINFRAME</I> ID, in addition to specifying the 
application's strings, identifies the application's icon, toolbar resources, and menu. 
AppWizard generates these resources, and you can maintain them with the resource editors.
<P>So now you've seen how the 
<I>AddDocTemplate</I> call ties all the 
application elements together. Be aware, though, that no windows have been created 
yet and therefore nothing appears on the screen.
<A NAME="368"><H2>Multiple Views of an SDI Document</H2></A><P>Providing multiple views of an SDI document is a little more complicated. 
You could provide a menu item that allows the user to choose a view, or you 
could allow multiple views in a splitter window. <A HREF="ch20a.htm">Chapter 20</A> shows you how to 
implement both techniques.
<H2>Creating an Empty Document&#151;The <I>CWinApp::OnFileNew</I> Function</H2>
<P>After your application class's 
<I>InitInstance</I> function calls the 
<I>AddDocTemplate </I>member function, it calls 
<I>OnFileNew</I> (indirectly through 
<I>CWinApp::ProcessShellCommand</I>), another important 
<I>CWinApp</I> member function. <I>OnFileNew</I> sorts through the web of interconnected class names and does the following:
<OL>
<LI>Constructs the document object but does not attempt to read 
data from disk.
<P><LI>Constructs the main frame object (of class 
<I>CMainFrame</I>); also creates the main frame window but does not show it. The main 
frame window includes the <I>IDR_MAINFRAME</I> menu, the toolbar, 
and the status bar.
<P><LI>Constructs the view object; also creates the view window but 
doesn't show it.
<P><LI>Establishes connections among the document, main frame, and 
view <U>objects</U>. Do not confuse these object connections with the 
<U>class</U> connections established by the call to 
<I>AddDocTemplate</I>.
<P><LI>Calls the virtual 
<I>CDocument::OnNewDocument</I> member function 
for the document object, which calls the virtual 
<I>DeleteContents</I> function.
<P><LI>Calls the virtual 
<I>CView::OnInitialUpdate</I> member function for 
the view object.
<P><LI>Calls the virtual 
<I>CFrameWnd::ActivateFrame</I> for the frame object 
to show the main frame window together with the menus, view 
window, and control bars.
</OL>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
Some of the functions listed above are not called 
directly by <I>OnFileNew</I> but are called indirectly through the 
application framework.
</BLOCKQUOTE></DIV>
<P>In an SDI application, the document, main frame, and view objects 
are created only once, and they last for the life of the program. The 
<I>CWinApp::OnFileNew</I> function is called by 
<I>InitInstance</I>. It's also called in response to 
the user choosing the File New menu item. In this case, 
<I>OnFileNew</I> must behave a little differently. It can't construct the document, frame, and view objects because they're already constructed. Instead, it reuses the existing document 
object and performs steps 5, 6, and 7 above. Notice that 
<I>OnFileNew</I> always calls 
<I>DeleteContents</I> (indirectly) to empty the document.
<A NAME="369"><H2>The Document Class's <I>OnNewDocument</I> Function</H2></A><P>You've seen the view class 
<I>OnInitialUpdate</I> member function and the 
document class <I>OnNewDocument</I> member function in <A HREF="ch16a.htm">Chapter 16</A>. If an SDI 
application didn't reuse the same document object, you wouldn't need 
<I>OnNewDocument</I> because you could perform all document initialization in your document 
class constructor. Now you must override 
<I>OnNewDocument</I> to initialize your document object each time the user chooses File New or File Open. AppWizard 
helps you by providing a skeleton function in the derived document class it generates.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
It's a good idea to minimize the work you do in 
constructor functions. The fewer things you do, the less chance there is 
for the constructor to fail&#151;and constructor failures are messy. 
Functions such as <I>CDocument::OnNewDocument</I> and 
<I>CView::OnInitialUpdate</I> are excellent places to do initial housekeeping. If anything fails 
at creation time, you can pop up a message box, and in the case of 
<I>OnNewDocument</I>, you can return <I>FALSE</I>. Be advised that both 
functions can be called more than once for the same object. If you need 
certain instructions executed only once, declare a &quot;first time&quot; flag 
data member and then test/set it appropriately.
</BLOCKQUOTE></DIV>
<A NAME="370"><H2>Connecting File Open to Your Serialization Code&#151;The <I>OnFileOpen </I>Function</H2></A><P>When AppWizard generates an application, it maps the File Open menu 
item to the <I>CWinApp::OnFileOpen</I> member function. When called, this 
function invokes a sequence of functions to accomplish these steps:
<OL>
<LI>Prompts the user to select a file.
<P><LI>Calls the virtual function <I>CDocument::OnOpenDocument</I> for the 
already existing document object. This function opens the file, 
calls <I>CDocument::DeleteContents</I>, and constructs a 
<I>CArchive</I> object set for loading. It then calls the document's 
<I>Serialize</I> function, which loads data from the archive.
<P><LI>Calls the view's <I>OnInitialUpdate</I> function.
</OL>
<P>The Most Recently Used (MRU) file list is a handy alternative to the 
File Open menu item. The application framework tracks the four most recently 
used files and displays their names on the File menu. These filenames are stored 
in the Windows Registry between program executions.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
You can change the number of recent files tracked by 
supplying a parameter to the 
<I>LoadStdProfileSetting</I> function in the 
application class <I>InitInstance</I> function.
</BLOCKQUOTE></DIV>
<A NAME="371"><H2>The Document Class's <I>DeleteContents</I> Function</H2></A><P>When you load an existing SDI document object from a disk file, you 
must somehow erase the existing contents of the document object. The best way 
to do this is to override the <I>CDocument::DeleteContents</I> virtual function in 
your derived document class. The overridden function, as you've seen in <A HREF="ch16a.htm">Chapter
16
</A>, does whatever is necessary to clean up your document class's data members. 
In response to both the File New and File Open menu items, the 
<I>CDocument </I>functions <I>OnNewDocument</I> and 
<I>OnOpenDocument</I> both call the 
<I>DeleteContents</I> function, which means 
<I>DeleteContents</I> is called immediately after the 
document object is first constructed. It's called again when you close a document.
<P>If you want your document classes to work in SDI applications, plan 
on emptying the document's contents in the 
<I>DeleteContents</I> member function rather than in the destructor. Use the destructor only to clean up items that last for the life of the object.
<A NAME="372"><H2>Connecting File Save and File Save As to Your Serialization Code</H2></A><P>When AppWizard generates an application, it maps the File Save menu item 
to the <I>OnFileSave</I> member function of the 
<I>CDocument</I> class. <I>OnFileSave</I> calls 
the <I>CDocument</I> function 
<I>OnSaveDocument</I>, which in turn calls your 
document's <I>Serialize</I> function with an archive object set for storing. The File Save As 
menu item is handled in a similar manner: it is mapped to the 
<I>CDocument</I> function <I>OnFileSaveAs</I>, which calls 
<I>OnSaveDocument</I>. Here the application 
framework does all the file management necessary to save a document on disk.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
Yes, it is true that the File New and File Open menu 
options are mapped to <U>application</U> class member functions, but File 
Save and File Save As are mapped to 
<U>document</U> class member functions. File New is mapped to 
<I>OnFileNew.</I> The SDI version of 
<I>InitInstance</I> also calls <I>OnFileNew </I>(indirectly). No document object exists 
when the application framework calls 
<I>InitInstance</I>, so <I>OnFileNew</I> can't 
possibly be a member function of <I>CDocument.</I> When a document 
is saved, however, a document object certainly exists.
</BLOCKQUOTE></DIV>
<A NAME="373"><H2>The Document's &quot;Dirty&quot; Flag</H2></A><P>Many document-oriented applications for Windows track the user's 
modifications of a document. If the user tries to close a document or exit the 
program, a message box asks whether the user wants to save the document. The 
MFC application framework directly supports this behavior with the 
<I>CDocument</I> data member <I>m_bModified</I>. This Boolean variable is 
<I>TRUE</I> if the document has been modified (has become &quot;dirty&quot;); otherwise, it is 
<I>FALSE</I>.
<P>The protected <I>m_bModified</I> flag is accessed through the 
<I>CDocument</I> member functions 
<I>SetModifiedFlag</I> and <I>IsModified</I>. The framework sets the 
document object's flag to <I>FALSE</I> when the document is created or read from 
disk and when it is saved on disk. You, the programmer, must use the 
<I>SetModifiedFlag</I> function to set the flag to 
<I>TRUE</I> when the document data changes. The 
virtual function <I>CDocument::SaveModified</I>, which the framework calls when 
the user closes the document, displays a message box if the 
<I>m_bModified</I> flag is set to <I>TRUE</I>. You can override this function if you need to do something else.
<P>In the EX17A example, you'll see how a one-line update command 
UI function can use <I>IsModified</I> to control the state of the disk button and 
the corresponding menu item. When the user modifies the file, the disk button 
is enabled; when the user saves the file, the button changes to gray.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
In one respect, MFC SDI applications behave a little 
differently from other Windows SDI applications such as 
Notepad. Here's a typical sequence of events:
<OL>
<LI>The user creates a document and saves it on disk under the 
name (for example) test.dat.
<P><LI>The user modifies the document.
<P><LI>The user chooses File Open and then specifies test.dat.
</OL>
<P>When the user chooses File Open, Notepad asks whether 
the user wants to save the changes made to the document (in Step 
2 above). If the user answers no, the program rereads the 
document from disk. An MFC application, on the other hand, assumes that 
the changes are permanent and does not reread the file.
</BLOCKQUOTE></DIV>
</BODY>
</HTML>



