<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Containment and Aggregation vs. Inheritance</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="524"><H1><B>Containment and Aggregation vs. Inheritance</B></H1></A>
<P>In normal C++ programming, you frequently use inheritance to factor out common behavior into a reusable base class. The <I>CPersistentFrame</I> class (discussed in <A HREF="ch15a.htm">Chapter 15</A>) is an example of reusability through inheritance.

<P>COM uses containment and aggregation instead of inheritance. Let's start with containment. Suppose you extended the spaceship simulation to include planets in addition to spaceships. Using 
C++ by itself, you would probably write a <I>COrbiter</I> base class that encapsulated the laws of planetary motion. With COM, you would have &quot;outer&quot; <I>CSpaceship</I> and <I>CPlanet</I> classes plus an &quot;inner&quot; <I>COrbiter</I> class. The outer classes would implement the 
<I>IVisual</I> interface directly, but those outer classes would <U>delegate</U> their <I>IMotion</I> interfaces to the inner class. The result would look something like this.

<P><A HREF="javascript:fullSize('g24og05x.htm')"> <img src="g24og05.jpg" width=404 height=80 border=0 ALT = "Click to view at full size."> </A>

<P>Note that the <I>COrbiter</I> object doesn't know that it's inside a <I>CSpaceship</I> or <I>CPlanet</I> object, but the outer object certainly knows that it has a <I>COrbiter</I> object embedded inside. The outer class needs to implement all its interface functions, but the <I>IMotion</I> functions, including <I>QueryInterface</I>, simply call the same <I>IMotion</I> functions of the inner class.

<P>A more complex alternative to containment is aggregation. With aggregation, the client can have direct access to the inner object's interfaces. Shown here is the aggregation version of the space simulation.

<P><A HREF="javascript:fullSize('g24og06x.htm')"> <img src="g24og06.jpg" width=404 height=95 border=0 ALT = "Click to view at full size."> </A>

<P>The orbiter is embedded in the spaceship and planet, just as it was in the containment case. Suppose the client obtains an <I>IVisual</I> pointer for a spaceship and then calls <I>QueryInterface</I> for an <I>IMotion</I> pointer. Using the outer <I>IUnknown</I> pointer will draw a blank because the <I>CSpaceship</I> class doesn't support <I>IMotion</I>. The <I>CSpaceship</I> class keeps track of the inner <I>IUnknown </I>pointer (of its embedded <I>COrbiter</I> object), so the class uses that pointer to obtain the <I>IMotion</I> pointer for the <I>COrbiter</I> object.
<P>Now suppose the client obtains an <I>IMotion</I> pointer and then calls <I>QueryInterface</I> for <I>IVisual.</I> The inner object must be able to navigate to the outer object, but how? Take a close look at the <I>CreateInstance</I> call back in Figure 24-10. The first parameter is set to 
<I>NULL</I> in that case. If you are creating an aggregated (inner) object, you use that parameter to pass an <I>IUnknown</I> pointer for the outer object that you have already created. This pointer is called the <U>controlling</U> <U>unknown</U>. The <I>COrbiter</I> class saves this pointer in a data member and then uses it to call <I>QueryInterface</I> for interfaces that the class itself doesn't support.

<P>The MFC library supports aggregation. The <I>CCmdTarget</I> class has a public data member 
<I>m_pOuterUnknown</I> that holds the outer object's <I>IUnknown</I> pointer (if the object is aggregated). The <I>CCmdTarget</I> member functions <I>ExternalQueryInterface</I>, 
<I>ExternalAddRef</I>, and <I>ExternalRelease</I> delegate to the outer <I>IUnknown</I> if it exists. Member functions <I>InternalQueryInterface</I>, <I>InternalAddRef</I>, and <I>InternalRelease</I> do not delegate. See Technical Note #38 in the online documentation for a description of the MFC macros that support aggregation.


</BODY>
</HTML>



