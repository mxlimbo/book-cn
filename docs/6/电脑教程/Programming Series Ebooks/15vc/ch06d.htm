<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Programming a Modal Dialog</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="133"><H1>Programming a Modal Dialog</H1></A><P>Modal dialogs are the most frequently used dialogs. A user action (a menu choice, for example) brings up a dialog on the screen, the user enters data in the dialog, and then the user closes the dialog. Here's a summary of the steps to add a modal dialog to an existing project:
<OL>
<P><LI>Use the dialog editor to create a dialog resource that contains various controls. The dialog editor updates the project's resource script (RC) file to include your new dialog resource, and it updates the project's resource.h file with corresponding <I>#define</I> constants.<P>
<LI>Use ClassWizard to create a dialog class that is derived from <I>CDialog</I> and attached to the resource created in step 1. ClassWizard adds 
the associated code and header file to the Microsoft Visual C++ project.<P>
</OL>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
When ClassWizard generates your derived dialog class, it generates a constructor that invokes a <I>CDialog</I> modal constructor, which takes a resource ID as a parameter. Your generated dialog header file contains a class enumerator constant<I> IDD</I> that is set to the dialog resource ID. In the 
CPP file, the constructor implementation looks like this:<P>
<PRE>CMyDialog::CMyDialog(CWnd* pParent /*=NULL*/)
    : CDialog(CMyDialog::IDD, pParent)
{
    // initialization code here
}
</PRE><P>
The use of <I>enum</I> <I>IDD </I>decouples the CPP file from the resource IDs that are defined in the project's resource.h file.
</BLOCKQUOTE></DIV>
<P>
<OL START="3">
<LI>Use ClassWizard to add data members, exchange functions, and validation functions to the dialog class.
<P>
<LI>Use ClassWizard to add message handlers for the dialog's buttons and other event-generating controls.
<P>
<LI>Write the code for special control initialization (in <I>OnInitDialog</I>) and for the message handlers. Be sure the <I>CDialog</I> virtual member function <I>OnOK</I> is called when the user closes the dialog (unless the user cancels the dialog). (Note: <I>OnOK</I> is called by default.)<P>
<LI>Write the code in your view class to activate the dialog. This code consists of a call to your dialog class's constructor followed by a call to the <I>DoModal</I> dialog class member function. <I>DoModal</I> returns only when the user exits the dialog window.<P>
</OL>
<P>Now we'll proceed with a real example, one step at a time.
</BODY>
</HTML>



