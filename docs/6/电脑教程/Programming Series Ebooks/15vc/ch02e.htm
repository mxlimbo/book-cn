<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Documents and Views</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="34"><H1>Documents and Views</H1></A><P>The previous example used an application object and a frame window 
object. Most of your MFC library applications will be more complex. Typically, 
they'll contain application and frame classes plus two other classes that represent 
the &quot;document&quot; and the &quot;view.&quot; This 
<U>document-view</U> <U>architecture</U> is the core of 
the application framework and is loosely based on the 
Model/View/Controller classes from the Smalltalk world.
<P>In simple terms, the document-view architecture separates data from 
the user's view of the data. One obvious benefit is multiple views of the same 
data. Consider a document that consists of a month's worth of stock quotes 
stored on disk. Suppose a table view and a chart view of the data are both 
available. The user updates values through the table view window, and the chart 
view window changes because both windows display the same information (but 
in different views).
<P>In an MFC library application, documents and views are represented 
by instances of C++ classes. Figure 2-1 shows three objects of 
class <I>CStockDoc</I> corresponding to three companies: AT&amp;T, IBM, and GM. All 
three documents have a table view attached, and one document also has a chart 
view. As you can see, there are four view objects&#151;three objects of class 
<I>CStockTableView</I> and one of class 
<I>CStockChartView</I>.
<P><A HREF="javascript:fullSize('F02OG01x.htm')"> <img src="F02OG01.JPG" width=404 height=261 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 2-1.</B> <I>The document-view relationship.</I>
<!-- /caption -->
<P>The document base class code interacts with the File Open and File 
Save menu items; the derived document class does the actual reading and writing 
of the document object's data. (The application framework does most of the 
work of displaying the File Open and File Save dialog boxes and opening, 
closing, reading, and writing files.) The view base class represents a window 
contained inside a frame window; the derived view class interacts with its associated 
document class and does the application's display and printer 
I/O. The derived view class and its base classes handle Windows messages. The MFC library 
orchestrates all interactions among documents, views, frame windows, and 
the application object, mostly through virtual functions.
<P>Don't think that a document object must be associated with a disk file 
that is read entirely into memory. If a &quot;document&quot; were really a database, for 
example, you could override selected document class member functions and the File 
Open menu item would bring up a list of databases instead of a list of files.
</BODY>
</HTML>



