<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Using the OLE DB Consumer Code</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="848"><H1>Using the OLE DB Consumer Code</H1></A><P>Using the database consumer class is just about as easy as creating it. Here's 
how to take advantage of the database consumer class:
<OL>
<LI>Declare an instance of 
<I>CAuthors</I> wherever you need to use it:
<P><PRE>class CUseAuthors : public CDialog {
    CAuthors m_authors;
    .
    .
    .
};</PRE>
<P><LI>Open the Authors database by calling 
<I>Open</I> on the database 
consumer object:
<P><PRE>CUseAuthors::OnInitDialog() {
    m_authors.Open();
}</PRE>
<P><LI>Use member functions to navigate through and manipulate the 
database. Here's a short sampling of some of the things you can do:
<P><PRE>CUseAuthors::OnNext() {
    m_authors.MoveNext();
}
CUseAuthors::OnFirst() {
    m_authors.MoveFirst();
}
CUseAuthors::OnLast() {
    m_authors.MoveLast();
}
CUseAuthors::OnInsert() {
    m_authors.Insert();
}</PRE>
<P><LI>As you navigate through the database, the data ends up in the 
member variables. For example, if you want to find out the name of 
the next author in the database, the code would look like this:
<P><PRE>m_authors.MoveNext();
m_strAuthorName = m_authors.m_Author;</PRE>
</OL>
<P>As you can see, using the templates greatly simplifies getting the data 
out of the database. All you need to do is find the database, point the ATL 
Object Wizard there, and get the Wizard to generate your code. Then the accessor 
class has functions useful for moving around the database and fetching the data. 
The other half of the OLE DB Template equation is the data provider. Here's 
a rundown of how to work with providers.
</BODY>
</HTML>



