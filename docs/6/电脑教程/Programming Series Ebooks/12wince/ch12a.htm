<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Chapter 12 -- Shell Programming -- Part 1</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">

<font size="+3">Chapter 12</font>

<A NAME="444"><H1>Shell Programming -- Part 1</H1></A>

<P>One of the unique aspects of Windows CE is that different Windows CE platforms have different shells. The shell for the Handheld PC is significantly different from the shell for the Palm-size PC. Despite differences, the parts of the shell that are the same (and there are plenty of common shell components), share the underlying API.

<P>The shells used by the H/PC and H/PC Pro derive from the Windows 95 and 98 shells. To the user, the look is almost pure Windows 95. That is, of course, by design. The folks at Microsoft figured that having the Windows CE shell resemble the Windows 95 shell would flatten the user's learning curve and enhance the acceptability of Windows CE devices.

<P>The shell used by the Palm-size PC keeps some of the more basic aspects of the Windows 95 shell. Gone is the Explorer and the familiar desktop icons. In place of the Explorer is the Active Desktop, which displays data from applications directly on the desktop. But while the Explorer is gone, the taskbar, with its familiar Start button, remains. The interface for the taskbar, common to both desktops, is the same. Both systems also use special directories and the shell <I>namespace,</I> which I'll talk about shortly.

<P>So although the Windows CE shell resembles the Windows 95 shell, it's not as flexible. Most of the powerful interfaces available under Windows 95, such as the ability to drag and drop objects between programs, are either only partially implemented or not implemented at all. The goal of the programmers of the Windows CE 2.0 shell seemed to be to implement as few of the native COM interfaces as possible while still retaining the ability to contain the Internet viewing capabilities of an embedded Internet Explorer in the shell. That said, the current Windows CE shell does use some COM interfaces. It's just that those interfaces aren't the ones available on the desktop.

<P>This chapter covers the concept of the shell namespace and the shell's use of special directories. This chapter also explains how to work with the taskbar as well as how to create shortcuts. And although the Notification API and the console aren't strictly part of the shell, this chapter covers them, too. Windows CE provides a powerful notification interface that allows applications to schedule themselves to run at a certain time or when some system event occurs. The code that implements the notification API was moved from the shell to the base operating system in Windows CE 2.1. This allows the notification functions to be used in the embedded versions of Windows CE where only a minimal shell is provided. The Windows CE console, on the other hand, was introduced in Windows CE 2.1. Windows CE doesn't support the full character mode API found in Windows NT, but you can write fairly complete console applications.

<P>For those of you who are working with the embedded version of Windows CE 2.1 and later, most of what's covered in this chapter (with the exception of the Notification API and console applications) won't help you. The embedded version of Windows CE 2.1 includes only a bare minimum shell that has neither a taskbar nor an Explorer, and doesn't include many of the DLLs that support the shell. This means that you'll have to employ third-party developers or write your own shell to perform any shell-like functions.

</BODY>
</HTML>




