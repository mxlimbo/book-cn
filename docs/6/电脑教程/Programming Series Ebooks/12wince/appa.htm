<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Appendix -- COM Basics</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">

<font size="+3">Appendix</font>

<A NAME="3"><H1>COM Basics</H1></A>

<P>To qualify as COM compliant, all an object has to have is an implicit <I>IUnknown</I> interface. In C++ talk, a COM-compliant interface must be derived from, directly or indirectly, an <I>IUnknown</I> interface. The <I>IUnknown</I> interface has three methods: <I>QueryInterface</I>, <I>AddRef</I>, and <I>Release</I>.

<P>The methods <I>AddRef </I>and <I>Release</I> are called to increment and decrement the reference count of the COM interface. When an object is created and a pointer is returned by the object to an interface, an implicit call is made to <I>AddRef</I>. When a program no longer needs an interface, it calls <I>Release</I>, which decrements the use count for that interface. When the use count for all interfaces exposed by the object is 0, <I>Release</I> deletes the object.

<P>The third method, <I>QueryInterface</I>, provides a way for the caller to receive a pointer to a specific interface the COM-compliant object supports. <I>QueryInterface</I> is prototyped as

<P><pre>
HRESULT QueryInterface (REFIID iid, void ** ppvObject);
</PRE>

<P>The first parameter to <I>QueryInterface</I> is an identifier to an interface that the caller is requesting. Because there are countless interfaces and new ones generated every day, this identifier needs to be unique&#8212;globally and universally unique&#8212;for all COM interfaces ever programmed. Thus, the globally unique interface identifier is abbreviated as a <I>GUID</I>, pronounced <I>goo-id</I> or <I>gwid</I> (rhymes with <I>squid</I>). If you create your own unique interface, you too will need a <I>GUID</I>. You can create your own <I>GUID</I> using the GUIDGEN utility provided with Visual C++.

<P>The second parameter is a pointer that receives a pointer to the requested interface. So, to use an interface, the <I>QueryInterface</I> method, which must be included in any COM-compliant interface, is called to return a pointer to a specific interface exposed by the object. If the object makes a requested interface available, a pointer to that interface is returned.


</BODY>
</HTML>




