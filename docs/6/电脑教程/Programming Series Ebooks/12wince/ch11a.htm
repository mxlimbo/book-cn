<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Chapter 11 -- Connecting to the Desktop</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">

<font size="+3">Chapter 11</font>

<A NAME="397"><H1>Connecting to the Desktop</H1></A>

<P>One of the major market segments that Windows CE is designed for is desktop companions. In answer to the requirements of this market, the first two product categories created using Windows CE are desktop companions: the Handheld PC and the Palm-size PC. Both these products require a strong and highly functional link between the Windows CE device and the desktop PC running Windows 98 or Windows NT.

<P>Given this absolute necessity for good desktop connectivity, it's not surprising that Windows CE has a vast array of functions that enable applications on the desktop and the remote Windows CE device to communicate with one another. In general, most of this desktop-to-device processing takes place on the desktop. This is logical because the desktop PC has much greater processing power and more storage space than the less powerful and much smaller Windows CE system.

<P>The total of helper DLLs, communications support, and viewer programs is collected in a package named Windows CE Services. When a user buys any of the horizontal platforms, such as the Palm-size PC or the Handheld PC, a CD loaded with Windows CE Services comes with the device. The user becomes accustomed to seeing the Mobile Devices folder that, once Windows CE Services is installed, appears on his desktop. But there's much more to Windows CE Services than Mobile Devices. A number of DLLs are included, for example, to help the Windows CE application developer write PC-based applications that can work with the remote Windows CE device.

<P>In this chapter, I'll cover the various APIs that provide the desktop-to-Windows CE link. These include the Remote API, or RAPI, that allows applications running on the desktop to directly invoke functions on the remote Windows CE system. I'll tell you how to write a file filter that converts files as they're transferred from the PC to the Windows CE device and back. I'll also look at methods a PC application can use to notified itself when a connection exists between a PC and a Windows CE device.

<P>In a departure from the other chapters in this book, almost all the examples in this chapter are PC-based Windows programs. They're written to work both for Windows 95/98 and Windows NT. I take the same approach with the PC-based examples as I do for the CE-based examples, writing to the API instead of using a class library such as MFC. The principles shown here could easily be used by MFC-based applications.

</BODY>
</HTML>




