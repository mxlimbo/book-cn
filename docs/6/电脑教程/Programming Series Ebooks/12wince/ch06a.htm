<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">

<TITLE>Chapter 6 -- Memory Management</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<font size="+3">Chapter 6</font>

<A NAME="213"><H1>Memory Management</H1></A>

<P>If you have an overriding concern when you're writing a Microsoft Windows CE program, it should be dealing with memory. A Windows CE machine might have only 1 or 2 MB of RAM. This is a tiny amount compared to that of a standard personal computer, which can range somewhere between 16 and 64 MB of RAM. In fact, memory on a Windows CE machine is so scarce that it's often necessary to write programs that conserve memory even to the point of sacrificing the overall performance of the application.

<P>Fortunately, although the amount of memory is small in a Windows CE system, the functions available for managing that memory are fairly complete. Windows CE implements almost the full Win32 memory management API available under Microsoft Windows NT and Microsoft Windows 98. Windows CE supports virtual memory allocations, local and separate heaps, and even memory-mapped files.

<P>Like Windows NT, Windows CE supports a 32-bit flat address space with memory protection between applications. But because Windows CE was designed for different environments, its underlying memory architecture is different from that for Windows NT. These differences can affect how you design a Windows CE application. In this chapter, I'll cover the basic memory architecture of Windows CE. I'll also cover the different types of memory allocation available to Windows CE programs and how to use each memory type to minimize your application's memory footprint.

</BODY>
</HTML>




