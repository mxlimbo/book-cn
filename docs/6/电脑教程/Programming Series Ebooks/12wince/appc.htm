<HTML>
 <HEAD>
	<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>COM Clients</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">
<A NAME="5"><H1>COM Clients</H1></A>

<P>However, sometimes you need to directly create and use a COM interface. In this case, the application becomes a COM client. Before an application can use the COM library, it must initialize the COM handler library by calling this function:

<P><pre>
HRESULT CoInitialize (LPVOID pvReserved);
</PRE>

<P>The only parameter is reserved and must be set to NULL. <I>CoInitialize</I> returns S_OK if the COM library was successfully initialized. You can also call <I>CoInitializeEx</I> instead of <I>CoInitialize</I> if you need to more precisely specify how the library is initialized.

<P>To get a pointer to an interface, you then call the function



<P><pre>
STDAPI CoCreateInstance (REFCLSID rclsid, LPUNKNOWN pUnkOuter,
                         DWORD dwClsContext, REFIID riid,
                         LPVOID * ppv);
</PRE>



<P>The first parameter for this function is the class identifier of the interface or object you're trying to load. The second parameter specifies a pointer to an <I>IUnknown</I> interface if you're trying to extend an existing COM object with the new interface. In all our uses of this function, this parameter will be NULL. The third parameter is the context in which you're opening the object. For our purposes, we'll use CLSCTX_SERVER, indicating that we're loading a server object and we don't care whether that server runs in our process or in another process. The <I>riid </I>parameter specifies the interface ID of the interface to be loaded. Finally, the last parameter, <I>ppv</I>, is a pointer to a value that will receive the pointer for the interface being requested. <I>CoCreateInstance</I> returns S_OK if the function was successful.

<P>At this point, the client has a pointer to the interface for the object and can call the methods provided by that interface. When you're finished with the object, a call should be made to the <I>Release</I> method of the object to free it.

</BODY>
</HTML>




