<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">

<TITLE>Chapter 7 -- Files, Databases, and the Registry</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<font size="+3">Chapter 7</font>

<A NAME="246"><H1>Files, Databases, and the Registry</H1></A>

<P>One of the areas where Windows CE diverges the farthest from its larger cousins, Windows NT and Windows 98, is in the area of file storage. Instead of relying on ferromagnetic storage media such as floppy disks or hard disk drives, Windows CE implements a unique, RAM-based file system known as the <I>object store</I>. In implementation, the object store more closely resembles a database than it does a file allocation system for a disk. In the object store resides the files as well as the registry for the system and any Windows CE databases. Fortunately for the programmer, most of the unique implementation of the object store is hidden behind standard Win32 functions.

<P>The Windows CE file API is taken directly from Win32. Aside from the lack of functions that directly reference volumes, the API is fairly complete. Windows CE implements the standard registry API, albeit without the vast levels of security found in Windows NT. The database API, however, is unique to Windows CE. The database functions provide a simple tool for managing and organizing data. They aren't to be confused with the powerful, multilevel SQL databases found on other computers. Even with its modest functionality, the database API is convenient for storing and organizing simple groups of data, such as address lists or mail folders.

<P>Some differences in the object store do expose themselves to the programmer. Execute-in-place files, stored in ROM, appear as files in the object store but these functions can't be opened and read as standard files. Some of the ROM-based applications are also statically linked to other ROM-based dynamic-link libraries (DLLs). This means that some ROM-based DLLs can't be replaced by copying an identically named file into the object store.

<P>The concept of the <I>current directory</I>, so important in other versions of Windows, isn't present in Windows CE. Files are specified by their complete path. DLLs must be in the Windows directory, the root directory of the object store, or in the root directory of an attached file storage device, such as a PC Card.

<P>As a general rule, Windows CE doesn't support the deep application-level security available under Windows NT. However, because the generic Win32 API was originally based on Windows NT, a number of the functions for file and registry operations have one or more parameters that deal with security rights. Under Windows CE, these values should be set to their default, not security state. This means you should almost always pass NULL in the security parameters for functions that request security information.

<P>In this rather long chapter, I'll first explain the file system and the file API. Then I'll give you an overview of the database API. Finally, we'll do a tour of the registry API. The database API is one of the areas that has experienced a fair amount of change as Windows CE has evolved. Essentially, functionality has been added to later versions of Windows CE. Where appropriate, I'll cover the differences between the different versions and present workarounds, where possible, for maintaining a common code base.

</BODY>
</HTML>




