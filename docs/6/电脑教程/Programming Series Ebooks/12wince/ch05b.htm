<HTML>
 <HEAD>
	<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Programming Common Controls</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">
<A NAME="162"><H1>Programming Common Controls</H1></A>

<P>Since the common controls are separate from the core operating system, the DLL that contains them must be initialized before any of the common controls can be used. Under all versions of Windows, including Windows CE, you can call the function

<P><pre>
void InitCommonControls (void);
</pre>

<P>to load the library and register all the common control classes.

<P>Another function added recently to the common control library and supported by Windows CE is this one:

<P><pre>
BOOL InitCommonControlsEx (LPINITCOMMONCONTROLSEX lpInitCtrls);
</pre>

<P>This function allows an application to load and initialize only selected common controls. This function is handy under Windows CE because loading only the necessary controls can reduce the memory impact. The only parameter to this function is a two-field structure that contains a size field and a field that contains a set of flags indicating which common controls should be registered. Figure 5-1 shows the available 

<P><B>Figure 5-1.</B> <I>Flags for selected common controls.</I>

<P>
<TABLE cellpadding=5 width="95%">
<tr><td valign="top"><b><i>Flag</i></b></td>
<td valign="top"><b><i>Control Classes Initialized</i></b></td></tr>

<tr><td valign="top">ICC_BAR_CLASSES</td>
<td valign="top">Toolbar</td></tr>

<tr><td valign="top"></td>
<td valign="top">Status bar</td></tr>

<tr><td valign="top"></td>
<td valign="top">Trackbar</td></tr>

<tr><td valign="top"></td>
<td valign="top">Command bar</td></tr>

<tr><td valign="top">ICC_COOL_CLASSES</td>
<td valign="top">Rebar</td></tr>

<tr><td valign="top">ICC_DATE_CLASSES</td>
<td valign="top">Date and time picker</td></tr>

<tr><td valign="top"></td>
<td valign="top">Month calendar control</td></tr>

<tr><td valign="top">ICC_LISTVIEW_CLASSES</td>
<td valign="top">List view</td></tr>

<tr><td valign="top"></td>
<td valign="top">Header control</td></tr>

<tr><td valign="top">ICC_PROGRESS_CLASS</td>
<td valign="top">Progress bar control</td></tr>

<tr><td valign="top">ICC_TAB_CLASSES</td>
<td valign="top">Tab control</td></tr>

<tr><td valign="top">ICC_TREEVIEW_CLASSES</td>
<td valign="top">Tree view control</td></tr>

<tr><td valign="top">ICC_UPDOWN_CLASS</td>
<td valign="top">Up-down control</td></tr>
</table>

<P>Once the common control DLL has been initialized, these controls can be treated as any other control. But since the common controls aren't formally part of the Windows core functionality, an additional include file, commctrl.h, must be included.

<P>The programming interface for the common controls is similar to standard Windows controls. Each of the controls has a set of custom style flags that configure the look and behavior of the control. Messages specific to each control are sent to configure, manipulate, and cause the control to perform actions. One major difference between the standard windows controls and common controls is that notifications of events or requests for service are sent via WM_NOTIFY messages instead of WM_COMMAND messages as in the standard controls. This technique allows the notifications to contain much more information than would be allowed using WM_COMMAND message notifications.

<P>One additional difference when programming common controls is that most of the control-specific messages that can be sent to the common controls have predefined macros that make sending the message look as if your application is calling a function. So, instead of using an LVM_INSERTITEM message to a list view control to insert an item, as in

<P><pre>
nIndex = (int) SendMessage (hwndLV, LVM_INSERTITEM, 0, (LPARAM)&amp;lvi);
</pre>

<P>an application could just as easily have used the line:

<P><pre>
nIndex = ListView_InsertItem (hwndLV, &amp;lvi);
</pre>

<P>There's no functional difference between the two lines; the advantage of these macros is clarity. The macros themselves are defined in commctrl.h along with the other definitions required for programming the common controls. One problem with the macros is that the compiler doesn't perform the type checking on the parameters that would normally occur if the macro were an actual function. This is also true of the <I>SendMessage</I> technique, in which the parameters must be typed as WPARAM and LPARAM types, but at least with messages the lack of type checking is obvious. All in all though, the macro route provides better readability. One exception to this system of macros are the calls made to the command bar control and the command bands control. Those controls actually have a number of true functions in addition to a large set of macro-wrapped messages. As a rule, I'll talk about messages as messages, not as their macro equivalents. That should help differentiate what is a message or macro and what is a true function.

</BODY>
</HTML>




