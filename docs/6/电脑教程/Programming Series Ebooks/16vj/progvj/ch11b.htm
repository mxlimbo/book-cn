<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Using the J/Direct Call Builder</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11a.htm", "ch11c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="341"><H1>Using the J/Direct Call Builder</H1></A>

<p>J/Direct works through a set of what I'll call J/Direct 
<I>directives</I>. These directives are built into the comments that immediately precede each function definition or 
structure definition, in the same way that the Javadoc comments (described in 
Chapter 1) work. (Perhaps this is so that Microsoft's J/Direct directives won't conflict with 
any new Java keywords that might be introduced in the future by Sun Microsystems 
or by some future Java standards committee.)

<p>It's possible, and not all that difficult, to write J/Direct directives 
manually; however, in most cases, the J/Direct Call Builder makes this unnecessary.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The J/Direct Call Builder is currently limited to Win32 API functions. 
This limitation isn't based on any technical grounds, but is based on the fact that 
only Win32 API calls are documented in the text file that the J/Direct Call Builder 
uses to identify the functions and structures a program can access. Presumably, 
in the future, Microsoft will make text files available for more APIs in order to 
expand the number of functions accessible from the J/Direct Call Builder.
</blockquote></div>

<A NAME="342"><H2>Using J/Direct: The Beep Application</H2></A>

<p>In this section, I'll demonstrate J/Direct and the J/Direct Call Builder with an 
extremely simple example. From there, we'll graduate to a slightly more complicated 
example involving the passing of an object reference from the Win32 API to Visual J++.

<A NAME="343"><H3>The problem</H3></A>

<p>In the Beep application, our needs are simple. All we'll do is write an application 
with a single button that, when pressed, causes the computer to generate a beep and 
send the beep to the speaker.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The standard Java library contains a function that causes the 
computer speaker to sound a beep, so we don't really need to resort to J/Direct for 
this application. However, we can use a Win32 API function in order to learn how 
to use J/Direct.
</blockquote></div>

<A NAME="344"><H3>Finding the right function</H3></A>

<p>Before you can call a function, you have to know that it exists and what 
arguments it expects. Microsoft Visual Studio's online help system provides this information 
for Win32 API functions.

<p>To find the function you need, open the MSDN Library for Visual Studio 6, 
which comes with Visual J++. You can do this by using the Visual J++ Help menu, or 
by using the Programs item on the Windows Start menu. Select the Index tab in the 
left pane of the help window, and type the word 
<I>beep</I>. Choose the keyword Beep (not beep), and you should get results similar to those shown in Figure 11-1.

<p><A HREF="javascript:fullSize('f11gh01x.htm')"> <img src="images/f11gh01.jpg" width=404 height=304 border=0 ALT="Click to view at full size."> </A>

<p>
<!-- caption --><b>Figure 11-1.</b> <i>The Visual J++ documentation describes the Windows API 
function </I>Beep()<I>.</i><!-- /caption -->

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
When I'm writing Visual 
J++ code, I normally have the MSDN Library Active Subset option set to Visual 
J++ so that my searches don't end up finding functions belonging to other languages. When using J/Direct, make sure 
to change the Active Subset setting to (Entire Collection) or at least to some 
subset that includes the Win32 API help topics.
</blockquote></div>

<p>By looking at the Beep help topic, we can see that the function 
<I>Beep()</I> appears to be exactly what we want: a Windows API function that generates a beep 
through the sound card (assuming a sound card is available). Under Microsoft Windows 
NT, <I>Beep()</I> can even determine the frequency and duration of the beep. However, in 
the Remarks section of the <I>Beep()</I> help topic, we learn that the frequency and 
duration arguments are ignored under Microsoft Windows 95 and Microsoft Windows 98. 
It would be nice to be able to control the frequency and duration of 
the beep in all versions of Windows, but we'll have to live without these extra features in all systems but 
Windows NT.

<p>The arguments to <I>Beep()</I> are all intrinsic data types, like integers, which 
are easier to handle than class objects. You'll see how to pass class objects in the 
next example.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
You'll notice that there are several options displayed when you 
enter the keyword <I>beep</I> in the help index. The options other than Beep are 
actually Microsoft Visual Basic and script functions that are merely providing access 
to the Windows API <I>Beep()</I> function. One distinction between help topic options 
is that Win32 API functions always begin with an initial capital letter, whereas 
Java methods and many C++ functions start with a lowercase letter (although 
Visual Basic statements and methods also begin with an initial capital letter).
</blockquote></div>

<A NAME="345"><h3>Accessing <I>Beep()</I> through the J/Direct Call Builder</h3></A>
<p>Using the Visual J++ Windows Application option, create an application called 
Beep<I>.</I> Now open the J/Direct Call Builder by choosing Other Windows from the View 
menu and selecting J/Direct Call Builder.

<P><DIV CLASS="caution"><BLOCKQUOTE>
<B>CAUTION</B>
<HR>Don't confuse the J/Direct Call Builder Options command on 
the Tools menu with the J/Direct Call Builder command. The J/Direct Call 
Builder Options command enables you to specify the options for the code that the 
J/Direct Call Builder generates; it doesn't provide access to the J/Direct Call Builder.
</blockquote></div>

<p>Since the <I>Beep()</I> function takes two integers as arguments, and since it 
returns a simple <I>boolean </I>value, we aren't interested in the Win32 structures or Win32 
constants. In the J/Direct Call Builder, clear the Structs and Constants check boxes 
to reduce the number of items you must search through. Scroll down until the 
function <I>Beep()</I> becomes visible. Figure 11-2 shows the J/Direct Call Builder window with 
the <I>Beep()</I> function selected.

<p><IMG SRC="images/f11gh02.jpg" width=381 height=386 BORDER="0">

<p>
<!-- caption --><b>Figure 11-2.</b> <i>The J/Direct Call Builder showing the Windows 
</I>Beep()<I> function.</i><!-- /caption -->

<p>When you examine the window at the bottom of Figure 11-2, you can see 
the Javadoc-style comments that are the essence of J/Direct. The 
<I>dll.import()</I> directive indicates the name of the DLL that contains the selected function. This 
<I>dll.import()</I> directive indicates that <I>Beep()</I> resides in Kernel32.dll. As the name implies, 
Kernel32 is one of the core DLLs that Windows loads at startup and keeps resident at all times.

<p>You can also see from Figure 11-2 that the Target edit window contains the 
name and path of the .java file J/Direct is about to create. The default is 
&#8230;\Win32.java. You can change this file name by entering a new .java file name or by selecting an 
existing .java file name by means of the browser. Since you probably don't 
particularly care about the name of the file, leave the default file name.

<p>Now choose the Copy To Target button. Since the Win32.java file doesn't 
yet exist, a dialog box appears asking whether you want Visual J++ to create the file. 
Select Yes to create the following Win32.java file, which is automatically added to the project.

<p><pre>
public class Win32
{
    /**
     * @dll.import(&quot;KERNEL32&quot;,auto) 
     */
    public static native boolean Beep(int dwFreq, int dwDuration);
}
</PRE>

<p>You can see that the J/Direct Call Builder has created a declaration for a 
<I>public</I> <I>static</I> <I>Beep()</I> function that matches the Win32 API 
<I>Beep()</I> function with respect to arguments and return type. Declaring the function 
<I>public</I> gives all calling methods access to it. The function is 
<I>static</I> because there is no object involved. Since the Win32 API is C-based, it's not object-oriented.

<p>The only part of the declaration that is unique to Visual J++ is the 
<I>native</I> keyword. This keyword indicates that the <I>Beep()</I> function is written in machine code. (It was actually written in C, but the C code is compiled into machine code 
rather than into Java Virtual Machine byte code. How the function ended up being 
compiled into machine code is irrelevant to our discussion.) The methods that are 
declared <I>native</I> contain no code, because the code resides in the DLL.

<p>You'll also notice the <I>dll.import()</I> directive described earlier, which tells 
Visual J++ where to find the <I>Beep()</I> function.

<A NAME="346"><H3>The Forms Designer work</H3></A>

<p>The Forms Designer work for the Beep application is particularly simple. 
Open Form1.java in the Forms Designer. Shrink the form to make it only slightly larger 
than an average-sized button. Now change the form's 
<I>text</I> field to <I>J/Direct Beep Test</I> to match the purpose of the application.

<p>Add a button to the middle of the form. Label the button <I>Beep</I>, and anchor it to the top, bottom, left, and right edges of the form. Finally, double-click the 
button to create the <I>button1_click()</I> event handler.

<A NAME="347"><H3>The code</H3></A>

<p>The code for this application is as follows:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * This method demonstrates the J/Direct Call Builder.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();        
    }

    .
    .
    .

    private void button1_click(Object source, Event e)
    {
        // invoke the Win32 Beep() function
        Win32.Beep(400, 1000);
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Button button1 = new Button();

    private void initForm()
    {
        // &#8230;created by Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>The <I>button1_click()</I> method simply calls the <I>Beep()</I> method that was created by the J/Direct Call Builder. The 
<I>Win32.Beep()</I> syntax is consistent with the fact that <I>Beep()</I> is a static method of the class 
<I>Win32</I>. The arguments indicate a 400-Hz tone (equivalent to the middle C note, I believe) of 1-second duration.

<A NAME="348"><H3>The results</H3></A>

<p>When the user chooses the Beep button, the computer generates a 1-second, 
400-Hz tone under Windows NT, or a standard system beep under Windows 95 
and Windows 98. (This is not very exciting, I admit, but it's what we asked for.)

<P>As an aside, I'll mention that the Win32 <I>Beep()</I> function is already available in the WFC package 
<I>com.ms.win32</I>. This package organizes subpackages by DLL, so you would refer to <I>Beep()</I> as 
<I>com.ms.win32.Kernel32.Beep()</I>.

<A NAME="349"><H2>Passing Objects Using J/Direct: the SetSystemTime Application</H2></A>

<p>The Beep application is impressive&#8212;to me, anyway&#8212;not in what it does, but 
because it demonstrates how easy it is to create an application that accesses the Win32 
API. The Forms Designer did all the work in creating the form, and the J/Direct Call 
Builder, together with J/Direct, did the work of creating a bridge between Visual J++ and 
the C-based Win32 API.

<p>The Beep application is simple for another reason: the arguments passed to 
and from the <I>Beep()</I> function are all intrinsic data types. The application passes two 
short integers to the function, and the function returns a 
<I>boolean </I>value. But what happens when the arguments being passed are class objects?

<P>The SetSystemTime example demonstrates how to invoke object-passing 
Win32 functions by means of J/Direct. You'll see that accessing such functions with the J/Direct Call Builder is only slightly more difficult than accessing Win32 functions 
that pass intrinsic data types.

<A NAME="350"><H3>The problem</H3></A>

<p>In the SetSystemTime application, we'll want to be able to read and modify 
the computer's clock. Imagine a small form with an edit box across the top, and a 
Get Time button and Set Time button at the bottom. The time the edit box displays 
should be in an easy-to-read format similar to the format generated by the 
<I>Time</I> class we discussed in <A HREF="ch10a.htm">Chapter 10</A>.

<A NAME="351"><H3>Finding the right function</H3></A>

<p>An index search of the MSDN Library Visual Studio 6 topics for the keyword 
settime reveals two possible candidates in the list: setTime and SetTime. Names that 
begin with lowercase letters&#8212;such as setTime&#8212;are generally methods of a class and 
are therefore not useful for our purposes.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Since the Win32 API is a C interface, Win32 API functions are never methods of a class.
</blockquote></div>

<p>Very often, methods whose names begin with a lowercase letter are Java 
functions. Further examination of the 
<I>setTime()</I> method reveals that, in fact, 
<I>Date.setTime()</I> and <I>Time.setTime()</I> are Java methods. The 
<I>SetTime()</I> function is more likely to be 
what we are looking for.

<p>Selecting SetTime in the help topic list and choosing Display opens a dialog box that offers two topic options: CDateTimeCtrl::SetTime and COleDateTime::SetTime. Neither function looks right; however, I'm certain that the second function is incorrect. Any function with the word &quot;Ole&quot; embedded in it is an OLE function, and 
our application has nothing to do with OLE.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The name in front of the double colon (::) is the name of the class in C++ and the name after the double colon is the name of the method. The Java equivalent to the double colon is the dot (.) after a Java class name.
</blockquote></div>

<p>The <I>CDateTimeCtrl</I> class in the first help topic option indicates that this <I>SetTime() </I>function is a method of a Microsoft Foundation Class library (MFC) class. MFC classes begin with a capital &quot;C&quot; followed by a capital letter. MFC classes are the C++ analog to WFC classes. The fact that this function is part of MFC doesn't sound very good, since we can't access MFC from the J/Direct Call Builder; however, it's still worth looking into, because some of the MFC functions are a thin shell over the 
corresponding Win32 API function.

<p>Selecting the CDateTimeCtrl::SetTime help topic and choosing Display reveals the topic shown in Figure 11-3.

<p>You can see in the right pane that MFC provides three different <I>CDateTimeCtrl::SetTime()</I> methods. We can reject the first method immediately, because it refers to OLE. The second method, <I>SetTime(CTime*)</I>, is not a likely candidate either,  

<P><A HREF="javascript:fullSize('f11gh03x.htm')"> <img src="images/f11gh03.JPG" width=404 height=304 border=0 ALT="Click to view at full size."> </A>
<p>
<!-- caption --><b>Figure 11-3.</b> <i>The MSDN Library documentation for the available 
</I>SetTime()<I> methods.</i><!-- /caption -->

<p>because <I>CTime</I> appears to be an MFC class. The third method, <I>SetTime(SYSTEMTIME*)</I>, is a definite possibility, because SYSTEMTIME is obviously not part of MFC&#8212;its name is all capitals letters and it doesn't start with &quot;C&quot;. Choosing the SYSTEMTIME hot 
link reveals that SYSTEMTIME is a simple C structure. Things are looking up.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The Win32 API uses C structures to pass information.
</blockquote></div>

<p>Now you can refer back to the J/Direct Call Builder window and enable 
the Methods and Structs options. A quick search of the J/Direct Call Builder 
options confirms the existence of a <I>SetSystemTime()</I> method and a SYSTEMTIME 
structure. Another quick check shows the <I>GetSystemTime() </I>method is also represented. Bingo!

<A NAME="352"><H3>The J/Direct Call Builder work</H3></A>

<p>To begin writing SetSystemTime, create the Windows application SetSystemTime in the conventional manner. To create the J/Direct declarations for the <I>SetSystemTime() </I>function, follow the same steps you used in the previous example for creating the J/Direct declaration for <I>Beep()</I>: select SetSystemTime from the list of methods, and then choose Copy To Target. Repeat this process to create the J/Direct declaration for the <I>GetSystemTime() </I>function.

<p>Neither of these functions is much use without the SYSTEMTIME structure. Fortunately, creating the J/Direct declaration for a class is the same process as creating a J/Direct declaration for a method: select SYSTEMTIME from the list of Structs, and choose Copy To Target.

<p>The final Win32<I>.</I>java file is as follows:

<p><pre>
public class Win32
{
    /**
     * Set the system time.
     * 
     * @param lpSystemTime - a reference to object containing the time
     * @dll.import(&quot;KERNEL32&quot;,auto) 
     */
    public static native boolean SetSystemTime(
                           com.ms.win32.SYSTEMTIME lpSystemTime);

    /**
     * Get the system time.
     * 
     * @param lpSystemTIme - object to receive the system time
     * @dll.import(&quot;KERNEL32&quot;,auto) 
     */
    public static native void GetSystemTime(
                           com.ms.win32.SYSTEMTIME lpSystemTime);
}

    /**
     * The system time in Win32 API format.
     * @dll.struct() 
     */
    public static class SYSTEMTIME
    {
        public short wYear;
        public short wMonth;
        public short wDayOfWeek;
        public short wDay;
        public short wHour;
        public short wMinute;
        public short wSecond;
        public short wMilliseconds;
    }
</PRE>

<p>The <I>SetSystemTime()</I> and <I>GetSystemTime()</I> definitions resemble the definition of the earlier <I>Beep()</I> function, except that they reference an object rather than an intrinsic. The J/Direct Call Builder also created a definition for the class <I>SYSTEMTIME,</I> which contains the members described in the MSDN Library for Visual Studio 6. The J/Direct <I>dll.struct()</I> directive indicates that the following class is the description of 
a C structure. I added the comments and <I>param</I> statements manually.

<A NAME="353"><H3>The Forms Designer work</H3></A>

<p>The Forms Designer work for this application is similar to the work for other Windows applications you've seen. Change the <I>text</I> property of the form to <I>J/Direct 
Time Structure Test</I>.

<P>Next add an Edit control to the upper half of the form. Enlarge the Edit control to make it long enough to hold the date and time in long format. (See <A HREF="ch10a.htm">Chapter 10</A> for an example of long format.) Delete the contents of the <I>text</I> field, and change the <I>name</I> property setting to <I>timeEdit</I>. Anchor the Edit control to the top, left, and right edges of the form.

<P>Below the Edit control, add two buttons. Label the button on the left <I>Get Time,</I> and set its <I>name</I> property to <I>getTime</I>. Label the other button <I>Set Time,</I> and set its <I>name</I> property to <I>setTime</I>. Anchor the left button to the left and bottom edges of the form and anchor the right button to the right and bottom edges of the form. Finally, double-click each button to create its click event.

<A NAME="354"><H3>The code</H3></A>

<p>The code for SetSystemTime is shown here:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * Demonstrate the use of J/Direct calls that pass objects
 * by accessing the GetSystemTime() and SetSystemTime() 
 * functions of the Win32 API.
 */
public class Form1 extends Form
{
    // retain the SYSTEMTIME in a data member
    com.ms.win32.SYSTEMTIME time = 
                          new com.ms.win32.SYSTEMTIME();
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();
        
        // start with the current time
        getTime_click(null, null);
    }
    .
    .
    .

    private void getTime_click(Object source, Event e)
    {
        // get the UTC time using J/Direct
        Win32.GetSystemTime(time);
        
        // convert into a Time object
        Time t = new Time(time);
        
        // convert the Time object into local time
        Time lt = t.toLocalTime();
 
        // use the local Time object to generate a text format
        timeEdit.setText(lt.formatLongDate() +
                         &quot; &quot; +
                         lt.formatLongTime());
    }

    private void setTime_click(Object source, Event e)
    {
        try
        {
            // get the contents of the time field
            String s = timeEdit.getText();
        
            // now convert this into a Time object
            Time lt = new Time(s);
        
            // convert the Time object into a UTC time
            Time t = lt.toUniversalTime();
        
            // from there generate a SYSTEMTIME object
            time = t.toSystemTime();
        
            // now use the J/Direct call to set the system time
            Win32.SetSystemTime(time);
        }
        // in the event of an error&#8230;
        catch(Exception ex)
        {
            // restore the existing time
            getTime_click(null, null);
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit timeEdit = new Edit();
    Button getTime = new Button();
    Button setTime = new Button();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>The <I>getTime_click()</I> method begins by reading the system time using the newly created <I>Win32.GetSystemTime()</I> native method. Fortunately, one of the constructors of the <I>Time</I> class accepts an object of class <I>SYSTEMTIME</I>. This will allow the program to use the substantial formatting capability of the <I>Time</I> class for output.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Were there no way to create a <I>Time</I> object from the <I>SYSTEMTIME </I>class, the program would have to convert each field within <I>SYSTEMTIME</I> into a <I>String</I> for output. You'll get a taste of such a situation in the example of a user-defined DLL at the end of this chapter.
</blockquote></div>

<p>Since the time returned by <I>GetSystemTime()</I> is in Universal Time Coordinate (UTC)&#8212;previously known as Greenwich Mean Time (GMT)&#8212;it is necessary to convert the returned time to the local time zone by calling <I>Time.toLocalTime()</I>. The resulting time is then output to the <I>timeEdit</I> object using the <I>Time</I> class's 
<I>formatLongDate()</I> method and <I>formatLongTime()</I> method.

<P>The <I>setTime_click()</I> method works almost in reverse of the <I>getTime_click()</I> method but has one additional behavior: the <I>Time(String)</I> constructor throws an exception if it can't parse the string that it receives into a valid time&#8212;for example, if the value in the month field is misspelled or if the value in the day field is 
greater than the number of days in the specified month. If the method throws an exception, the program catches the exception and restores the <I>timeEdit</I> value to the current time to indicate to the user that he or she entered an incorrect value.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
If the user enters in the edit box a long date that includes the day of the week, such as Tuesday, October 06, 1998, an exception will be thrown. The user must remove the day of the week for <I>SetTime()</I> to accept the date.
</blockquote></div>

</BODY>
</HTML>




