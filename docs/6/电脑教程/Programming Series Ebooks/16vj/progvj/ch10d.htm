<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Registry</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10c.htm", "ch10e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="334"><H1>The Registry</H1></A>

<p>There is another pair of classes in the WFC <I>app 
</I>package that can be very useful to the application programmer. The classes 
<I>Registry</I> and <I>RegistryKey</I> allow the 
application to save values from one execution to another. For example, your 
application might store the current directory before it exits so that the next time it's executed 
it can start in that directory.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The Windows registry is a hierarchical database within Windows, 
which is saved to disk when Windows exits and restored when Windows starts 
back up.
</blockquote></div>

<p>The RegistryDemo application below 
demonstrates how an application can access the registry from Visual J++.

<A NAME="335"><H2>The RegistryDemo Application</H2></A>

<p>The RegistryDemo application attempts to read the time of last execution from the registry. If 
no time is found stored there, the application displays the appropriate 
message. If a time is found, it's displayed in text format. RegistryDemo then stores the current time into the registry so that it 
can be read the next time the application runs.

<P>To further enhance the demonstration, I have added a Clear Registry button 
to remove the time from the registry and a ReRead Registry button to read and store 
the time as if the application were just starting.

<A NAME="336"><H3>The Forms Designer work</H3></A>

<p>After creating the RegistryDemo application as a Windows Application, 
open Form1.java in the Forms Designer. Change the form's 
<I>text</I> property to <I>Registry</I> 
<I>Demo</I>. Now add an Edit control. Rename the control to 
<I>outputEdit</I>, and anchor it to the top, left, and right edges of the form. Now add a Label control with the text 
<I>Application last executed on:</I> above the Edit control.

<P>Add two buttons immediately below 
<I>outputEdit</I>. Label the left button 
<I>Clear</I> <I>Registry</I> and the right button 
<I>ReRead Registry</I>. Anchor the left button to the left 
and bottom edges and the right button to the right and bottom edges of the form. 
Finally, double-click each button to create the 
<I>button_click()</I> methods.

<A NAME="337"><H3>The code</H3></A>

<p>The code for the RegistryDemo application is contained in the following 
Form1.java file:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * Demonstrate the storing of information in the registry.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();

        // read time from registry, and then update registry
        readAndUpdateRegistry(outputEdit);
    }

    /**
     * Read the time of last execution from the registry,
     * and write it to the output control; then update the
     * registry with the current time.
     */
    public void readAndUpdateRegistry(Control output)
    {
        // get the time of last execution from the registry
        Time time = getRegistryTime();
        
        // if it's null&#8230;
        if (time == null)
        {
            // then application hasn't executed before
            output.setText(&quot;Application never run before&quot;);
        }
        else
        {
            // otherwise, convert the time into long format
            // and display it
            String sTime = toString(time);
            output.setText(sTime);
        }
    
        // now store the current date and time into the
        // registry for next time
        setRegistryTime(new Time());
    }
    
    /**
     * Display the specified time in the output control.
     */
    String toString(Time time)
    {
        String sDate = time.formatLongDate();
        String sTime = time.formatLongTime();
        return sDate + &quot; &quot; + sTime;
    }
    
    /**
     * Get the Time object stored in the registery; if there
     * is none, return a null.
     */
    public Time getRegistryTime()
    {
        try
        {
            // get the string representation of the time
            // last executed out of the registry
            RegistryKey appKey = getAppKey();
            String sTime = (String)appKey.getValue(&quot;Time&quot;);
            
            // now convert this into a Time object
            Time time = new Time(sTime);
            return time;
        }
        catch(Exception e)
        {
        }
        
        // in the event of an error (e.g., if there is no
        // time stored), return null
        return null;
    }
    
    /**
     * Store the specified time into the registry.
     */
    public void setRegistryTime(Time time)
    {
        // store the string representation of time into
        // the &quot;Time&quot; subkey of our application's registry entry
        RegistryKey appKey = getAppKey();
        appKey.setValue(&quot;Time&quot;, time.toString());
    }
    
    /**
     * Delete the registry time.
     */
    public void deleteRegistryTime()
    {
        try
        {
            RegistryKey appKey = getAppKey();
            appKey.deleteValue(&quot;Time&quot;);
        }
        catch(Exception e)
        {
        }
    }
 
    /**
     * Return the registry key for this application.
     */
    private RegistryKey getAppKey()
    {
        return Registry.CURRENT_USER.createSubKey(
                    &quot;Software\\ProgrammingJava\\RegistryDemo&quot;);
    }

    private void button1_click(Object source, Event e)
    {
        deleteRegistryTime();
    }

    private void button2_click(Object source, Event e)
    {
        readAndUpdateRegistry(outputEdit);
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit outputEdit = new Edit();
    Label label1 = new Label();
    Button button1 = new Button();
    Button button2 = new Button();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>After calling <I>initForm()</I>, the 
<I>Form1()</I> constructor calls 
<I>readAndUpdateRegistry()</I>.

<P>The<I> readAndUpdateRegistry() </I>method starts by invoking 
<I>Form1.getRegistryTime()</I> to fetch a 
<I>Time</I> object containing the time of last execution from the 
registry. If <I>getRegistryTime()</I> returns 
<I>null</I>, the program outputs the message &quot;Application 
never run before&quot;. If a <I>Time</I> object is returned, the 
<I>Time</I> object is converted 
in long format into a <I>String</I> object by invoking the local 
<I>toString()</I> method. Next the <I>String</I> is written to the output control. Finally, the current time is passed to 
the <I>Form1.setRegistryTime()</I> method to be stored into the registry.

<P>The <I>setRegistryTime(time)</I> method starts by fetching a 
<I>RegistryKey</I> object for the current application by calling 
<I>Form1.getAppKey()</I>. The <I>getAppKey()</I> method 
returns the registry key 
&quot;CURRENT_USER\Software\ProgrammingJava\RegistryDemo&quot;. 
The <I>setRegistryTime()</I> method converts 
<I>time</I> into a <I>String</I> and stores that string 
under the subkey &quot;Time&quot; using the 
<I>setValue()</I> method.

<P>The <I>getRegistryTime()</I> method calls 
<I>getAppKey()</I> to retrieve the 
<I>RegistryKey</I> for this application. Then 
<I>getRegistryTime()</I> calls 
<I>RegistryKey.getValue()</I> to return the time string stored earlier under the subkey &quot;Time&quot;. This string, 
<I>sTime</I>, is then converted into a <I>Time</I> object that is returned to the caller. If an exception is thrown at any 
point (for example, if there is no &quot;Time&quot; subkey), 
<I>getRegistryTime()</I> returns <I>null</I>.

<P>Finally, <I>Form1.deleteRegistryTime()</I> calls 
<I>RegistryKey.deleteValue()</I> to delete the &quot;Time&quot; subkey in the application's registry entry.

<P>The Clear Registry button handler 
(<I>button1_click()</I>) invokes the method 
<I>delete-</I> <I>RegistryTime(),</I> and the ReRead Time button handler 
(<I>button2_click()</I>) simply calls 
<I>readAndUpdateRegistry()</I>.

<A NAME="338"><H3>The result</H3></A>

<p>Figure 10-6 shows the output from RegistryDemo the first time it runs (or the first 
time that it's run after pressing the Clear Registry button). Figure 10-7 shows the 
previous execution time when I ran RegistryDemo a subsequent time.

<P><img src="images/F10gh06.JPG" width=230 height=113 border="0">
<P><!-- caption --><B>Figure 10-6.</b> <i>The output from RegistryDemo the first time
the program runs.</I><!-- /caption -->

<P><img src="images/F10gh07.JPG" width=284 height=113 border="0">
<P><!-- caption --><B>Figure 10-7.</b> <i>The output from the RegistryDemo application the second time 
I ran the program.</I><!-- /caption -->

</BODY>
</HTML>




