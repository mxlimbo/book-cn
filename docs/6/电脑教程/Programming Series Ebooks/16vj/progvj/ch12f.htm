<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Using the Data Toolbox Controls</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12e.htm", "ch12g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="417"><H1>Using the Data Toolbox Controls</H1></A>

<p>While the Application Wizard was easy to use, the output was less than 
spectacular in appearance and difficult to customize. Another approach is to use the 
<I>DataSource</I> and <I>DataBinder</I> objects contained in the WFC Controls section of the Toolbox.

<p>The manual approach presented at the beginning of this chapter allowed 
you to completely control output, but it was difficult to program. The completely 
automated Application Wizard approach was easy to use, but inflexible in its output. 
The Toolbox method shown here is a compromise. While slightly more complicated 
than the fully automated approach, it's much simpler than the totally manual method 
and still allows you almost total control of the output.

<A NAME="418"><H2>The Problem</H2></A>

<p>The problem this demonstration application solves is similar to the problem 
solved by the ManualADO application: allow the user to navigate back and forth 
through the Customers table using two buttons. Because of the way that the 
<I>DataBinder</I> object works, however, this time the ContactFirstName, ContactLastName, and 
PhoneNumber fields must appear in separate edit boxes as they did in the AutoADO example.

<A NAME="419"><H2>The Forms Designer Work</H2></A>

<p>The Forms Designer work for this application consists of two different types of 
tasks. The first type of forms work involves the manipulation of conventional controls; 
the second type involves the DataSource and DataBinder controls.

<A NAME="420"><H3>Conventional controls</H3></A>

<p>Create a normal Windows Application project (don't use the Application Wizard 
this time). Name the project ToolboxADO. Open the Form1.java file in the Forms Designer.

<p>Rename the form by changing the <I>text</I> property to 
<I>Toolbox</I> <I>ADO</I>. Now add three Label controls containing the text 
<I>Customer First Name</I>, <I>Customer Last 
Name</I>, and <I>Telephone Number</I>. Place the labels so they are equally spaced vertically and 
aligned horizontally on the left side of the form.

<p>Add an Edit control to the right of each label. Align the three Edit 
controls horizontally. Name them <I>firstNameEdit, 
lastNameEdit</I>,<I> </I>and<I> 
phoneNumberEdit.</I> Set the <I>readOnly</I> property to 
<I>true</I> for each.

<p>Add two buttons below the Label and Edit controls. Label the left 
button 
<I>Previous</I> and change its <I>name</I> property to 
<I>previousButton</I>; label the right button 
<I>Next</I> and change its <I>name</I> property to 
<I>nextButton</I>. Double-click each button to create 
the event handlers that we'll need later.

<p>Resize the form until it accommodates the controls without excessive space 
on either side. This time, as a change, rather than anchor the controls to the 
different edges of the form, set the form's 
<I>borderStyle</I> property to <I>Fixed 
Toolwindow</I>. This will retain the appearance of the form by rendering it nonresizeable.

<A NAME="421"><H3>Creating a file DSN</H3></A>

<p>It's easier to define a DSN to which the 
<I>DataSource</I> object can refer before you 
start creating the <I>DataSource</I> object. To create a DSN, start by opening the 
Windows Control Panel.

<p>Double-click the ODBC (32bit) icon to bring up the ODBC Data Source 
Administrator. Select the User DSN tab, and select MS Access 97 Database as the type of 
DSN to create.

<p>Now select the File DSN tab. Select the Add button to create a new DSN for 
our database. The first window to appear is the Create New Data Source window, 
which lists all of the ODBC Data Drivers that are installed on your system. Select 
Microsoft Access Driver (*.mdb); this is the ODBC driver for .mdb files like ours. (If this 
driver isn't available, it's because you didn't select it when you installed Visual J++.) 
Choose Next and enter <I>MyCompany.dsn</I> as the name of the DSN to create. Now choose 
Next to see a summary of your choices, and then choose Finish to complete the 
creation of the DSN.

<p>An Access DSN must be attached to an Access database. After you've 
created the DSN, the ODBC Microsoft Access 97 Setup window appears. Choose Select 
to specify the database file to attach to this DSN. Use the Select Database window 
to navigate to MyCompany.mdb, as shown in Figure 12-7. Choose MyCompany.mdb 
and then choose OK to attach the database to the DSN.

<p><img src="images/f12gh07.jpg" width=402 height=243 border="0">
<p><!-- caption --><b>Figure 12-7.</b> <i>The Select Database window of the ODBC Microsoft Access 97 
Setup editor.</i><!-- /caption -->

<p>Finally, choose OK to close the ODBC Microsoft Access 97 Setup window.

<p>You can now see on the File DSN tab of the ODBC Data Source 
Administrator that MyCompany.dsn has been defined. Choose OK to close the ODBC Data 
Source Administrator. You can now close the Control Panel.

<A NAME="422"><H3>The DataSource control</H3></A>

<p>Drag a DataSource control from the Toolbox and drop it onto the form. (The 
data controls are at the bottom of the WFC Controls list of Toolbox controls.) Rename 
the object to <I>dataSource</I>.

<p>Click the three dots to the right of the 
<I>connectionString</I> property to display 
the Data Link Properties window. Now choose the Provider tab. From the OLE 
DB Provider(s) list, select Microsoft OLE DB Provider For ODBC Drivers. On the 
Connection tab, choose the Use Connection String option. Now choose the Build 
button to reveal a list of DSNs, includin<I>g </I>MyCompany.dsn, in the Select Data 
Source window. Select MyCompany.dsn and choose OK. The ODBC Microsoft Access 
97 Setup window is displayed again, giving you a second chance to select a 
database. Since you've already attached a database to the DSN, choose OK to close the window.

<p>Before exiting the Data Link Properties window, you should choose the 
Test Connection button on the Connection tab to test the connection to the 
MyCompany.mdb database. If the connection is good, a message box appears indicating 
that the test connection succeeded. With the 
<I>connectionString</I> property setting 
established, select OK to exit the Data Link Properties window.

<p>Now choose the <I>commandText</I> property and enter the following SQL command:

<p><I>SELECT ContactFirstName, ContactLastName, PhoneNumber FROM Customers</I>

<A NAME="423"><H3>The DataBinder control</H3></A>

<p>Drag a DataBinder control from the Toolbox and drop it onto the form. Rename 
the object to <I>dataBinder</I>. Change the 
<I>dataSource</I> property to <I>dataSource</I>.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
You can use the drop-down list for the 
<I>dataSource</I> property and select from a list (of one) of data sources defined in the form.
</blockquote></div>

<p>To set up the data bindings, click the value box for the 
<I>bindings</I> property. Click the three dots to the right of the box to open up the DataBinding Editor. Choose the Add button three times to add three data bindings, and then choose OK. 
(The DataBinding Editor is really not much of an editor&#8212;it's more of a creator. The 
editing is done back in the Properties<I> </I>window of the 
<I>DataBinding</I> object.)

<p>You'll notice that the <I>bindings</I> property has a plus sign to its left. Choose 
the plus sign to reveal the three binding objects. Click the plus sign for each binding 
object (not the plus sign in front of the 
<I>All</I> property) to reveal its properties. Under 
the <I>binding0</I> property, click the 
<I>fieldName</I> property. Notice that a small arrow 
appears in the value field immediately to the right. Click the arrow to reveal the field 
names within the Customers table. Select 
<I>ContactFirstName</I>. Now click the 
<I>target</I> property. From the drop-down list, select 
<I>firstNameEdit</I>. Finally, select <I>text</I> as the 
<I>propertyName</I>. Repeat the process for 
<I>binding1</I>, this time selecting 
<I>ContactLastName</I>, <I>lastNameEdit</I>, and 
<I>text</I>. Repeat the process one last time for 
<I>binding2</I> by selecting <I>PhoneNumber</I>, 
<I>phoneNumberEdit</I>, and <I>text</I>.

<p>When you're finished, your <I>dataBinder</I> Properties window should look 
like Figure 12-8.

<p><img src="images/f12gh08.jpg" width=299 height=512 border="0">
<p><!-- caption --><b>Figure 12-8.</b> <i>The completed properties for the 
</I>DataBinder<I> object for the ToolboxADO application.</i><!-- /caption -->

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
As you create each binding, the corresponding value for the first 
record in the database appears in the form's Edit control. For example, as soon as 
you tie the ContactFirstName field to the 
<I>firstNameEdit</I> object and set the 
<I>text</I> property, the name <I>Stephen</I> appears in the top Edit control.
</blockquote></div>

<A NAME="424"><H3>Test the controls</H3></A>

<p>Before continuing any further, test the data controls you have established by 
saving, compiling, and executing the ToolboxADO application. The program should 
display the first record in the database, as shown in Figure 12-9.

<p><img src="images/f12gh09.jpg" width=276 height=183 border="0">
<p><!-- caption --><b>Figure 12-9.</b> <i>The ToolboxADO application with the Toolbox data controls established.</i><!-- /caption -->

<A NAME="425"><H3>Building the event handler methods</H3></A>

<p>Open the form in the Forms Designer again. Open the active properties of the 
Properties window. Now select the 
<I>phoneNumberEdit</I> object and double-click the 
<I>textChanged</I> property. The resulting method will read the contents of the 
<I>phoneNumberEdit</I> object whenever the contents change, and update the value to the 
standard U.S. (xxx) xxx-xxxx format.

<A NAME="426"><H2>The Code</H2></A>

<p>With the Toolbox data controls doing most of the work, all that is left is to write 
the button event handlers to call 
<I>Recordset.moveNext()</I> and 
<I>Recordset.movePrevious()</I>,<I> </I>and the phone number display code, much like we did back in ManualADO:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

import com.ms.wfc.data.*;
import com.ms.wfc.data.ui.*;

/**
 * This class can take a variable number of parameters on the command
 * line. Program execution begins with the main() method. The class
 * constructor is not invoked unless an object of type 'Form1' is
 * created in the main() method.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();        

        // make sure that the first field is updated
        phoneNumberEdit_textChanged(null, null);
    }

    /**
     * Form1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose()
    {
        super.dispose();
        components.dispose();
    }
    
    /**
     * Update the phone number passed in as a string to appear
     * in the standard U.S. format of (xxx) xxx-xxxx.
     */
    private String updatePhone(String s)
    {
        // if it's not the right number of digits
        // (including if it's already been updated)&#8230;
        if (s.length() != 10)
        {
            // then don't update
            return s;
        }

        // break the phone number up into parts
        String s1 = s.substring(0, 3);
        String s2 = s.substring(3, 6);
        String s3 = s.substring(6, 10);
        
        // now put it back together again with punctuation
        s = &quot;(&quot; + s1 + &quot;) &quot; + s2 + &quot;-&quot; + s3;
        
        // and return to caller
        return s;
    }

    /**
     * Navigate backward in the Customers table.
     */
    private void previousButton_click(Object source, Event e)
    {
        // get the recordset
        Recordset rs = dataSource.getRecordset();
        
        // if the database is empty&#8230;
        if (rs.getDataMemberCount() == 0)
        {
            // return without action
            return;
        }
        
        // move to the next record
        rs.movePrevious();
        
        // if at end-of-file&#8230;
        if (rs.getBOF())
        {
            // move back to the first record
            rs.moveFirst();
        }
    }

    /**
     * Navigate forward in the Customers table.
     */
    private void nextButton_click(Object source, Event e)
    {
        // get the recordset
        Recordset rs = dataSource.getRecordset();
        
        // if the database is empty&#8230;
        if (rs.getDataMemberCount() == 0)
        {
            // return without action
            return;
        }
        
        // move to the next record
        rs.moveNext();
        
        // if at end-of-file&#8230;
        if (rs.getEOF())
        {
            // move back to the last record
            rs.moveLast();
        }
    }

    /**
     * Invoked when the phone number edit box is updated by the
     * DataBinder; update the phone number to the (xxx) xxx-xxxx format.
     */
    private void phoneNumberEdit_textChanged(Object source, Event e)
    {
        // get the contents of the phone number edit box
        String s = phoneNumberEdit.getText();
        
        // update the phone number 
        s = updatePhone(s);

        // and put it back into the edit box
        phoneNumberEdit.setText(s);
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Label label1 = new Label();
    Label label2 = new Label();
    Label label3 = new Label();
    Edit firstNameEdit = new Edit();
    Edit lastNameEdit = new Edit();
    Edit phoneNumberEdit = new Edit();
    Button previousButton = new Button();
    Button nextButton = new Button();
    com.ms.wfc.data.ui.DataSource dataSource = 
                  new com.ms.wfc.data.ui.DataSource(components);
    com.ms.wfc.data.ui.DataBinder dataBinder = 
                  new com.ms.wfc.data.ui.DataBinder(components);

    private void initForm()
    {
        // &#8230;create by Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     *
     * @param args Array of parameters passed to the application
     * via the command line.
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>ToolboxADO.java must import the <I>wfc.data</I> and 
<I>wfc.data.ui</I> packages&#8212;in addition to those packages already imported by the Windows Application 
Wizard&#8212;in order to gain access to the 
<I>DataBinder</I> and <I>DataSource</I> classes. The 
program accesses the Customers database table through the 
<I>DataSource</I> class. The connection between the 
<I>DataSource</I> class and the database was established when we 
added the DataSource control to the application form in the Forms Designer and 
initialized the control. The connection between the DataSource control and the individual 
fields was created by the DataBinding control, which also came from the Toolbox.

<p>The <I>updatePhone()</I> method here is identical to the 
<I>updatePhone()</I> method in the ManualADO program. This routine takes a phone number written as a string 
of numbers and converts it into the U.S. standard (xxx) xxx-xxxx format.

<p>The <I>previousButton_click()</I> method is invoked when the user chooses the 
Previous button. This method begins by retrieving the 
<I>Recordset</I> object from the <I>DataSource</I>. If the recordset isn't empty, then 
<I>previousButton_click()</I> calls 
<I>movePrevious()</I> to move the current record pointer back one record. If a 
beginning-of-file condition is encountered, then the function moves the current record pointer 
back to the beginning of the recordset. The process is similar for the 
<I>nextButton_click()</I> method, only the method calls 
<I>moveNext()</I> rather than 
<I>movePrevious()</I> and checks for an end-of-file condition.

<p>When the user chooses the Previous or Next button, the 
<I>DataBinder</I> object attached to the 
<I>Recordset</I> object automatically detects that the current record 
pointer has moved. The <I>DataBinder </I>object automatically updates the edit boxes that 
are bound to the <I>Recordset</I> by means of the 
<I>DataBinding</I> objects.

<A NAME="427"><H3>Customizing edit box output</H3></A>

<p>The <I>updatePhone()</I> method isn't really necessary to the execution of the 
program; however, it demonstrates how you can insert your program into the data 
binding update process to customize output to the edit boxes. Without 
<I>updatePhone(),</I> a phone number is displayed as a 10-digit integer: 1234567890.

<p>The <I>phoneNumberEdit_textChanged()</I> method is invoked whenever the 
contents of the <I>phoneNumberEdit</I> control object change. Since 
<I>phoneNumberEdit</I> is 
read-only, the contents change only when the 
<I>previousButton_click()</I> or the <I>nextButton_click() 
</I>methods update the customer data. The 
<I>phoneNumberEdit_textChanged()</I> method retrieves the string contents of the 
<I>phoneNumberEdit</I> object, calls 
<I>updatePhone()</I> to convert the string into the proper format, and then saves the 
resulting string back into the object. The 
<I>Form1()</I> constructor calls 
<I>phoneNumberEdit_textChanged()</I> to convert the phone number of the first record displayed.

<A NAME="428"><H2>The Results</H2></A>

<p>Figure 12-10 shows the results of executing ToolboxADO. The output doesn't 
differ significantly from the results of the ManualADO program, even though the 
ToolboxADO program is much easier to generate (once you get used to the Forms 
Designer steps). ToolboxADO isn't quite as easy to create as the wizard-generated 
AutoADO program, but the output from ToolboxADO is considerably more attractive and 
flexible than the output generated by the wizard.

<p><img src="images/f12gh10.jpg" width=276 height=183 border="0">
<p><!-- caption --><B>Figure 12-10.</b> <i>The output of ToolboxADO is much like that of ManualADO 
with less work.</I><!-- /caption -->

</BODY>
</HTML>




