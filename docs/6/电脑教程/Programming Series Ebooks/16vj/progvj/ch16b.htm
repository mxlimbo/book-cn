<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Dynamic HTML Standard</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16a.htm", "ch16c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="546"><H1>The Dynamic HTML Standard</H1></A>

<p>The World Wide Web has grown and flourished through the use of the HTML standard, as is evidenced by the large number of attractive HTML pages accessible from your browser. However, as the Web has become more sophisticated, limitations in the HTML standard have become increasingly apparent.

<p>The major problem with HTML is that it isn't dynamic. The conventional HTML page can't truly interact with the Web user. Once a browser has interpreted and displayed an HTML page, the page can't change.

<p>Wait a minute, you say. What about search engines that search the Web for keywords entered into an HTML page by the Web user? How is that done? There are a number of ways that user interaction can be simulated in an HTML page.

<A NAME="547"><H2>Adding User Interaction to Conventional HTML Pages</H2></A>

<p>Web-based search engines, such as Yahoo <A HREF="http://www.yahoo.com/" target="_window2"><I>www.yahoo.com</I></A>, make it clear that HTML includes features that make an HTML page appear to be dynamic. What are the techniques that HTML page developers use to animate their Web sites? This section focuses on the answer to this question.

<A NAME="548"><H3>The applet</H3></A>

<p>Java applets can of course implement user interaction, as was demonstrated in Chapter 14, <A HREF="ch14a.htm">Applets</A>, and Chapter 15, <A HREF="ch15a.htm">Applet Animation</A>. A Java applet is started by an HTML page and the applet runs within the browser. Because a Java applet is an application, it can interact with the user in a number of ways. In addition, a Java applet can change its appearance after the HTML page has been displayed.

<p>The major limitation of any applet is that its window is carved out of the HTML page. A Java applet doesn't look like it's part of the HTML page that surrounds it, because a Java applet doesn't play by the same rules as an HTML page does. For example, when the user changes the size of the browser window the Java applet isn't resized like the other HTML objects on the page. In addition, a Java applet can't access the surrounding HTML page. Unless an applet uses scripts, it can do nothing to change the appearance of an image or a field on the HTML page display.

<A NAME="549"><H3>CGI applications</H3></A>


<p>CGI (Common Gateway Interface) is an extension to the browser-to-server interface that defines an interactive&#8212;although not dynamic&#8212;interface. The HTML standard supports CGI by a feature known as <I>forms</I>, identified with the &lt;FORM&gt; tags.

<p>A form defines a span within the HTML page, and also defines an attached URL link. Any number of standard HTML elements can be placed between the &lt;FORM&gt; tags, and the browser renders these elements within the form, just as it would render elements outside the form.

<p>A form can also include user input fields. Each input field carries a name and can be one of various types. Input field types include buttons, check boxes, drop-down list boxes, and text entry fields, to name a few. Each input field also has a value. The possible values for a given input field are determined by the type of field it is. For example, the value of a button is either on or off, and the value of a text field is the text entered by the user.

<p>One and only one of the input fields in a form must be a Submit button. (The label on this button doesn't have to be Submit, but it normally is.) When the user chooses the Submit button, the browser links to the URL address indicated in the form, and sends the URL to the server. Unlike conventional hyperlinks, however, the browser adds to the end of the URL the name and value of each of the input fields defined for the form. This tells the server what values the user entered into each input field.

<p>The URL listed in the form doesn't refer to an HTML page on the server. Instead, the form's URL refers to an application on the server. When the server receives this application link, it passes the data the user entered to the application referenced by the URL. (The details of how this 
data is passed to the application aren't relevant to this discussion.) The application creates a new HTML page based on the user's input, and sends it back to the server. The server then passes the new HTML page to the browser for display. The browser is unaware that the displayed HTML page was generated by an application rather than by an HTML file.

<p>The CGI concept is extremely powerful. As a CGI programmer, you can create any type of browser output you want in real-time, based on user input. However, the limitations of the CGI interface are numerous. For example, CGI applications are difficult to write, and CGI applications can't save their state from one query to the next.

<p>The most serious problem with CGI, however, is that CGI applications put a significant load on the server. Every CGI request causes the server to begin running an application to process the query. Once the request has been processed, the 
server must pass the results back to the HTML page and terminate the application. When a large number of concurrent CGI requests occur, the constant starting and stopping of server applications can cause unacceptable delays for the user.

<A NAME="550"><H3>Scripting languages</H3></A>

<p>Netscape addressed some of the difficulties inherent in CGI by defining an HTML scripting language called LiveScript, which was later renamed JavaScript. (The name change to JavaScript was driven more by commercial factors than by any similarity between JavaScript and the Java language.) Microsoft responded with its own version of JavaScript, which it named JScript. (JavaScript and JScript are almost completely compatible.) In addition, Microsoft implemented a completely different scripting language called VBScript, which is based on Microsoft's application macro language.

<p>Script languages enable you to preprocess form data before sending it to the Web server for CGI processing. This preprocessing allows the scripting language to catch obviously incorrect user input, such as no text in a required text input field.

<p>Catching invalid data before sending it over the Web for processing improves the response time to the user and reduces the load on the server. Preprocessing data ensures that the user doesn't wait for a CGI request to make the round trip to the server and back, only to find out that an entry was incorrect. In addition, with preprocessing the server isn't loaded down with erroneous CGI requests.

<p>Although scripting languages can read and process user input before passing it to the server, they have a serious disadvantage. Once the browser has rendered the HTML page, scripting languages are powerless to change the page without 
server assistance.

<A NAME="551"><H2>DHTML Capabilities</H2></A>

<p>DHTML extends HTML by allowing an HTML page to be modified after the browser has rendered the page. For example, with DHTML, a text field that says &quot;Stopped&quot; when the page is first displayed can be changed to say &quot;Started&quot; when the user clicks a &quot;Go&quot; button. You can make a clock in an HTML page tick automatically, whether the underlying HTML includes a clock directive or not. (DHTML also extends features such as style sheets; however, the focus of this chapter is active changes in the HTML page display.)

<p>DHTML increases the capability of scripting languages immensely. With DHTML, you can use script to implement many programming features that previously required CGI, while at 
the same time reducing the HTML page response time. In the previous example of changing the contents of a text field from &quot;Stopped&quot; to &quot;Started,&quot; the HTML page spends no time requesting a new HTML page from the server and displaying it. The display change is instead made 
directly by the HTML page. Avoiding CGI requests reduces the time a page takes to respond to user input, and lessens the load on the server.

<p>DHTML also enables you, as a script programmer, to implement features that are impossible to implement with CGI. The CGI application doesn't receive input until the user clicks the Submit button. By comparison, DHTML-based scripts can receive and process an event when the user clicks any button or even when the mouse pointer passes over a button.

<p>While DHTML increases the capability of scripting languages, it does nothing to address other problems inherent in scripts. Because script languages lack the clear structure of Java (or other languages such as C++), scripts of more than a few dozen lines become difficult to write and 
debug. (Some programmers claim that 100 lines represent a practical upper boundary for a script application.) In addition, script languages have a long learning curve that the Java programmer must surmount.

<A NAME="552"><H2>Visual J++ 6 Access to DHTML</H2></A>

<p>Visual J++ 6 introduces the ability to access the capabilities of DHTML from a Java application. Your control of DHTML features no longer requires you to learn a new scripting language. Your control of DHTML features can also be more sophisticated than before, because Java applications can be larger and more involved than applications written in a script language. In addition, Java access to DHTML introduces capabilities that aren't supported by scripting languages, such as access to database information on the client (the browser) or the server.

<p>DHTML access in Visual J++ 6 is contained in the Windows Foundation Classes for Java (WFC) <I>wfc.html</I> package. Visual J++ source code that accesses the <I>html</I> package looks amazingly like the code that accesses other WFC objects. The same Visual J++ application can use the 
<I>html</I> package on the client or the server with only minor changes.

</BODY>
</HTML>




