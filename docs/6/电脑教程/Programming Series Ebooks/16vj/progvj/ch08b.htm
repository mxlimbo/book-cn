<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The ListView Control</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08a.htm", "ch08c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="235"><H1>The ListView Control</H1></A>

<p>The ListView control is for viewing lists of objects, much like viewing objects in 
a simple ListBox control. Unlike the ListBox control, however, a list view is capable 
of displaying the items it contains as icons or in a multicolumn list that contains the 
item's associated data. 

<p>If you want to know what a list view looks like, open Microsoft Windows 
Explorer. The control that Windows Explorer uses to display the file names and 
optional detailed information is a ListView control.

<p>The following ListViewDemo application mimics much of the functionality 
of Windows Explorer. ListViewDemo populates a ListView control with the names 
of the files in a directory; the directory is specified in the argument list to the 
program when the program is started. If no arguments are provided, the program lists 
names of files in the current directory. Subdirectories are listed before files and both are 
listed in independent alphabetic order. ListViewDemo supports different viewing 
modes, including several icon-based modes and a fully detailed report mode that 
includes the size and modification date of the files. Before starting to work 
on ListViewDemo, you might want to look ahead to Figures 8-4 and 8-5 to get an idea of what 
the application looks like in action. All the sample programs in this chapter are in 
the Windows Applications subfolder on the companion CD.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The 
<I>ListView</I> class can be used to display other objects besides 
files; however, it seems to be almost uniquely suitable for that type of display.
</blockquote></div>

<A NAME="236"><H2>The Forms Designer Work</H2></A>

<p>Figure 8-1 shows the Forms Designer with the application that we are trying to 
build. ListViewDemo consists of a large ListView control in the middle of the form. 
Along the bottom are four buttons that are used to switch the list view display from 
one mode to another. The ImageList controls are used to assign images to the 
different file types.

<p><img src="images/F08gh01x.JPG" width=420 height=381 border=0> 

<p><!-- caption --><b>Figure 8-1.</b> <i>The ListViewDemo application contains only a few
controls.</i><!-- /caption -->

<p>Begin by creating the Windows application ListViewDemo using the 
Windows Application builder. Open the form in the Forms Designer. Now position a 
ListView control in the middle of the form, leaving enough room along the bottom of the 
form for four buttons.

<A NAME="237"><H3>The ImageList control</H3></A>

<p>Before adjusting the properties of the ListView control, add two ImageList 
controls to the form. Use the Properties window to name the first ImageList 
<I>smallIconImageList</I> and the second 
<I>largeIconImageList</I>. Add four images to the 
<I>smallIconImageList</I> object as shown in Figure 8-2. (See <A HREF="ch07a.htm">Chapter 7</A> for details on how to use the Image 
Editor to add images to the image lists.) Create whatever images you like; however, the 
first image needs to be reminiscent of a disk, since this image will be used to flag 
directories. Choose the other three images to represent HTML files, executable files, 
and miscellaneous (&quot;don't know&quot;) 
files<I>.</I> Each of these images should be the size of 
the icon, 16-by-16 pixels.

<p>The <I>largeIconImageList</I> object contains the same type of images as 
<I>smallIconImageList</I> except that you will need to increase the 
<I>x</I> and <I>y</I> <I>imageSize</I> properties to 32. You must do this before adding the images in the Image Editor.

<p><img src="images/F08gh02.JPG" width=281 height=436 border="0">

<p><!-- caption --><b>Figure 8-2.</b> <i>The icon image lists for ListViewDemo should have an image for 
directories, HTML files, executables, and miscellaneous files.</i><!-- /caption -->

<A NAME="238"><H3>Editing the ListView properties</H3></A>

<p>You are now ready to edit the properties of the ListView control using the 
Properties window. First change the name of the control to 
<I>listView</I>. Next anchor the ListView control to all four walls (this will ensure that the list view automatically resizes 
itself if the form in which it resides is resized). Set the 
<I>smallImageList</I> and <I>stateImageList</I> properties to point to the 
<I>smallIconImageList </I>object. Set the 
<I>largeImageList</I> property to reference the 
<I>largeIconImageList</I> object.

<p>In addition, you will need to create three columns. Click the ellipses button 
on the value box for the <I>columns</I> property to access the ColumnHeader Editor. Add 
three objects, and then return to the Properties window to edit the 
<I>text</I> property of the column headers to be File Name, Size, and Last Modified. These headers will 
appear when the list view is switched to Detailed report mode.

<p>Now make sure that the <I>sorting</I> property is set to 
<I>None</I>. This is critical since we will be sorting the displayed list manually. (We have to do this manually because 
the directories are sorted before the files.) Set the 
<I>gridLines</I> property to <I>true</I> if you 
would like spreadsheet-style gridlines when the list view is in detailed report mode. 
Set <I>fullRowSelect</I> to <I>true</I>. In addition, leave the 
<I>multiSelect</I> property set to <I>true.</I>

<p>Set the<I> activation</I> property to 
<I>Twoclick&#8212;Oneclick</I> is also acceptable, if 
you prefer&#8212;and set the <I>headerStyle</I> property to 
<I>Nonclickable </I>for reasons I will explain 
shortly.<I> </I>Set the <I>View</I> property to 
<I>List</I> to make list view the default view. Set 
the <I>autoArrange</I> property to <I>true</I>. Once you have finished, the Properties window 
should look like that shown in Figure 8-3.

<p><img src="images/F08gh03.JPG" width=281 height=476 border="0">

<p><!-- caption --><b>Figure 8-3.</b> <i>The data properties of the edited ListView demonstrating some 
of the proper settings for the ListViewDemo application.</i><!-- /caption -->

<A NAME="239"><H3>Completing the forms designer work</H3></A>

<p>Add four buttons equally spaced along the bottom of the application. Label them 
Big Icon, Small Icon, List, and Details, corresponding to the four display modes of 
the list view. Anchor the left two buttons to the left and bottom of the form and the 
right two buttons to the right and bottom of the form. Double-click each button to 
create the <I>clickEvent()</I> method for each.

<A NAME="240"><H2>The Code</H2></A>

<p>The source code for ListViewDemo consists of two .java files: the automatically 
created Form1.java file and a manually created ImageEnum.java class file (select 
Add Class from the Project menu). The second file is smaller, so let's start there.

<A NAME="241"><h3>The <I>ImageEnum</I> class</h3></A>
<p>It is the job of the <I>ImageEnum</I> class to define a 
<I>final</I> <I>static</I> <I>int</I> index for each 
image in the two icon image lists. The source code for this class is as follows:

<p><pre>
import com.ms.wfc.core.Enum;
import com.ms.wfc.io.*;

/**
 * Controls the indices of the smallIconImageList and
 * largeIconImageList objects.
 */
public class ImageEnum extends Enum
{
    public final static int DATA       = 0;
    public final static int HTML       = 1;
    public final static int EXECUTABLE = 2;
    public final static int DONTKNOW   = 3;

    /**
     * Return true if value is a valid index.
     */
    public static boolean valid(int value)
    {
        return (value &gt;= DATA) &amp;&amp; (value &lt;= DONTKNOW);
    }

    /**
     * Given a file name, return the index of the
     * associated image base.
     */
    public static int getImageIndex(String fileName)
    {
        // if any problems arise, just return DONTKNOW
        try
        {
            // if this is a directory&#8230;
            if (File.isDirectory(fileName))
            {
                // then always return DATA
                return DATA;
            }
 
            // otherwise, base the image on the file extension
            String ext = File.getExtension(fileName);
        
            if (ext.equalsIgnoreCase(&quot;.EXE&quot;) ||
                ext.equalsIgnoreCase(&quot;.BAT&quot;))
            {
                return EXECUTABLE;
            }
        
            if (ext.equalsIgnoreCase(&quot;.HTM&quot;) ||
                ext.equalsIgnoreCase(&quot;.HTML&quot;)||
                ext.equalsIgnoreCase(&quot;.ASP&quot;))
            {
                return HTML;
            }
        }
        catch(Exception e)
        {
        }
  
        // either we didn't find a recognizable extension,
        // or a problem cropped up; either way, DONTKNOW
        return DONTKNOW;
    }
}
</PRE>

<p>First you can see the four <I>final</I> 
<I>static</I> <I>int</I> members as mentioned. Each 
must match the index of the corresponding image. If you added more image types than 
I did, you will need to add the corresponding data members here. Extending the 
class <I>Enum </I>and overriding the 
<I>valid()</I> method complete the role of this class as an 
enumeration class.
<P>One further method, <I>getImageIndex(), </I>has been added. This method takes 
as its argument the name of a file and returns one of the class's four constant data 
members. If the file name refers to a directory, the method returns the constant 
<I>DATA</I>. If the file name extension is 
<I>.</I>EXE or <I>.</I>BAT, the class returns 
<I>EXECUTABLE</I>. If the file name extension is 
<I>.</I>HTM, <I>.</I>HTML, or <I>.</I>ASP, the function returns 
<I>HTML</I>. If the file name extension is none of these or if any type of exception is thrown, the function 
returns <I>DONTKNOW</I>, indicating that it was not able to type the file.

<A NAME="242"><H3>The main application code</H3></A>

<p>The source code for Form1.java represents the vast majority of the source code 
for ListViewDemo.

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

import com.ms.wfc.io.*;
import com.ms.wfc.util.*;

/**
 * Demonstrate the ListView class by adding a listing of the current
 * directory, subdirectories first, into the ListView object.
 */
public class Form1 extends Form
{
    // the currently listed directory
    String directory = File.getCurrentDirectory();
    
    public Form1(String[] args)
    {
        // Required for Visual J++ Form Designer support
        initForm();

        // store the contents of the directory passed
        // to the list view; if no directory passed, use
        // the current directory as the default
        if (args.length == 1)
        {
            directory = args[0];
        }
        createListView();
    }
    
    .
    .
    .
	
    /**
     * Fill the list view with the name, size, and date
     * of the files in the specified or current directory.
     */
    void createListView()
    {
        // first, clear out the list view
        listView.setItems(new ListItem[0]);
        
        // let's add the directories&#8230;
        addFilesToListView(listView, true);
        
        // then add the files
        addFilesToListView(listView, false);
    }

    /**
     * Add files to a list view.
     * 
     * @param listView - the list view target
     * @param isDirectory - true-&gt;load directories, false-&gt;load files
     */
    void addFilesToListView(ListView listView,
                            boolean isDirectory)
    {
        // create a list of file names using the FileEnumerator
        // class; this class let's you enumerate through all
        // the files that pass a given filter
        List list = new List();
        int index = 0;

        String filter = File.combine(directory, &quot;*.*&quot;);
        FileEnumerator fe = new FileEnumerator(filter);
        while(fe.hasMoreFiles())
        {
            // check if this is a directory&#8230;
            String fileName = fe.getName();
            String fullPath = File.combine(directory, fileName);
            if (File.isDirectory(fullPath) == isDirectory)
            {
                // whatever it is, it matches what we're looking
                // for; now add the &quot;extra&quot; information
                String[] subItems = new String[2];
                subItems[0] = Long.toString(fe.getSize());
                Time dateTime = fe.getLastWriteTime();
                subItems[1] = dateTime.toString();

                // create an item for the ListView out of this data
                // (convert the file extension into an image index)
                ListItem item =
                    new ListItem(fileName,
                                 ImageEnum.getImageIndex(fullPath),
                                 subItems);
 
                // add the item to the list
                list.addItem(item);
            }
   
            // move over to the next file
            fe.getNextFile();
        }
        
        // now sort the list
        list.sort(new FileNameComparer());
        
        // and add the sorted list to the list view
        IEnumerator itemEnumerator = list.getItemEnumerator();
        while (itemEnumerator.hasMoreItems())
        {
            ListItem li = (ListItem)itemEnumerator.nextItem();
            listView.addItem(li);
        }
    }
 
    /**
     * Implement the IComparer interface to support List.sort().
     */
    class FileNameComparer implements IComparer
    {
        /**
         * Compare o1 to o2; return -1, 0, or 1.
         */
        public int compare(Object o1, Object o2)
        {
            ListItem l1 = (ListItem)o1;
            ListItem l2 = (ListItem)o2;
            
            String f1 = l1.getText();
            String f2 = l2.getText();

            return StringSorter.compare(f1, f2, 
                StringSorter.STRINGSORT | StringSorter.IGNORECASE);
        }
    }

    private void button1_click(Object source, Event e)
    {
        listView.setView(ViewEnum.LARGEICON);
    }

    private void button2_click(Object source, Event e)
    {
        listView.setView(ViewEnum.SMALLICON);
    }

    private void button3_click(Object source, Event e)
    {
        listView.setView(ViewEnum.LIST);
    }

    private void button4_click(Object source, Event e)
    {
        listView.setView(ViewEnum.REPORT);
    }

    /**
     * Handle item activation events.
     */
    private void dbl_click(Object source, Event e)
    {
        // get the first ListItem selected (in single select mode,
        // there will only ever be one)
        ListItem li = listView.getSelectedItems()[0];
        String dirName = li.getText();
        
        // if this item is the &quot;.&quot;&#8230;
        if (dirName.equals(&quot;.&quot;))
        {
            // then ignore it (there's no change)
            return;
        }
        
        // if this is the &quot;..&quot;&#8230;
        if (dirName.equals(&quot;..&quot;))
        {
            // then remove the last directory in the path
            // including the &quot;\\&quot;
            int offset = directory.lastIndexOf(&quot;\\&quot;);
            directory = directory.substring(0, offset);
            
            // if there's nothing left&#8230;
            if (directory.lastIndexOf(&quot;\\&quot;) == -1)
            {
                // change the directory to the root
                directory += &quot;\\&quot;;
            }
        }
        
        // otherwise (this isn't &quot;..&quot;)
        else
        {
            // make sure this is a directory
            dirName = File.combine(directory, dirName);
            if (!File.isDirectory(dirName))
            {
                return;
            }
            
            // it is - save it as the new directory
            directory = dirName;
               
        }
        
        // recreate the list view using this new directory
        createListView();
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    ListView listView = new ListView();
    ColumnHeader columnHeader1 = new ColumnHeader();
    ColumnHeader columnHeader2 = new ColumnHeader();
    ColumnHeader columnHeader3 = new ColumnHeader();
    ImageList smallIconImageList = new ImageList();
    Button button1 = new Button();
    Button button2 = new Button();
    Button button3 = new Button();
    ImageList largeIconImageList = new ImageList();
    Button button4 = new Button();

    private void initForm()
    {
        // &#8230;created by Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     *
     * @param args Array of parameters passed to the application
     * via the command line.
     */
    public static void main(String args[])
    {
        Application.run(new Form1(args));
    }
}
</PRE>

<p>FileViewDemo defines one data member, 
<I>directory</I>, which refers to the full path of the directory being listed. The constructor for 
<I>Form1</I> initializes <I>directory</I> to the current directory, but if the user provides an argument when FileViewDemo is 
started, this argument is copied into 
<I>directory</I> instead. Once <I>directory</I> has been 
initialized, the <I>Form1()</I> constructor calls 
<I>createListView()</I> to populate the list view with 
the contents of that directory.

<A NAME="243"><h3>The <I>createListView() </I>method</h3></A>
<p>Two of the methods provided by the class 
<I>ListView</I> are <I>addItem()</I> and <I>setItems(). 
</I>The <I>addItem()</I> method adds a new item to those already present and 
<I>setItems()</I> replaces the current list of items with a new list of items. Both of these methods accept 
an object of class <I>ListItem</I>. Thus, a 
<I>ListItem</I> object describes a row in a list view. 

<P>The <I>createListView()</I> method begins with clearing out the list view by 
calling <I>setItems()</I> and passing it a zero-length array of 
<I>ListItem</I> objects. Then 
<I>createListView()</I> begins adding files to the now empty list view by calling the 
<I>addFilesToListView()</I> method twice, once for the subdirectory values contained in the 
<I>directory</I> variable and once for the file name values in 
<I>directory</I>.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Iterating through the directory once for subdirectories and a second 
time for files might not be the most efficient algorithm, but it decreases the 
code complexity.
</blockquote></div>

<p>The <I>addFilesToListView()</I> method contains three distinct sections. In the 
first section, <I>addFilesToListView()</I> creates a 
<I>List</I> object and adds <I>ListItem</I> objects to it 
using the <I>FileEnumerator</I> class.

<P>The <I>FileEnumerator</I> class provides a convenient means of iterating through 
a list of files. The constructor for 
<I>FileEnumerator</I> takes as its argument a file filter. 
For example, the file filter &quot;C:\temp\*.txt&quot; would find all of the 
<I>.</I>txt files in the \temp<I> </I>directory. The program navigates 
<I>FileEnumerator</I> using three methods: 
<I>getName()</I> returns the name of the file to which the 
<I>FileEnumerator</I> is currently pointing, 
<I>getNextFile()</I> moves the pointer to the next file, and 
<I>hasMoreFiles()</I> returns <I>true</I> as long as there are more files in the
enumerator.

<P>Before <I>addFilesToListView()</I> processes a file name from the enumerator, it 
must first check to see if the file name refers to a directory or a file. If the
return from <I>File.isDirectory()</I> is the value the calling method
specified in the 
<I>isDirectory</I> parameter <I>(true</I> for directories and 
<I>false</I> for files), then 
<I>addFilesToListView()</I> retrieves some extra information about the
file that, together with the file name, is converted into a 
<I>ListItem </I>object.

<P>The constructor for a <I>ListItem</I> object takes three arguments. The first 
argument is the name of the file. The second argument is the index of the image to display 
for this file. This index refers to the icon image list associated with the list view, and 
it is returned from 
<I>ImageEnum.getImageIndex()</I> as described earlier. The final 
argument to the constructor is an array of 
<I>String</I> objects. In our case, this array refers to 
the second and third columns in report view mode&#8212;the file size and the time of 
last modification (the &quot;extra&quot; information). Both of these pieces of information come 
from the <I>FileEnumerator </I>class. The constructed 
<I>ListItem</I> object is then added to the 
<I>list </I>object of class <I>List</I>.

<P>In the second portion of 
<I>addFilesToListView()</I>, the method sorts the 
<I>list</I> object containing the individual list items. It does this by calling the 
<I>List.sort() </I>method. The only argument to 
<I>List.sort()</I> is an object of a class that implements the 
<I>IComparer</I> interface. The class 
<I>FileNameComparer</I> implements this interface by 
implementing the method <I>compare(),</I> which compares two items of a list and returns a 
-1, 0, or 1 depending on the relationship between the two list items.

<P>Since we're using the file names to determine the sort order, my 
implementation of <I>compare()</I> first calls 
<I>ListItem.getText()</I> to pull the file names from the two 
list items that are being compared. Then 
<I>compare()</I> calls 
<I>StringSorter.compare()</I> 
to perform the actual comparison. This 
<I>public</I> <I>static</I> method is similar to 
the method   <I>String.compareTo()</I> except that it allows for the 
<I>IGNORECASE</I> option. In addition, the 
<I>STRINGSORT</I> option causes the 
<I>compare()</I> method to ignore nonalphanumeric 
characters when performing its comparison.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
If you're already familiar with Java, you probably already know 
about the <I>String.compareTo()</I> method. If you don't know how this method works, 
refer to the MSDN Library Visual Studio.
</blockquote></div>

<p>Once the <I>list</I> object has been sorted, 
<I>addFilesToListView() </I>iterates through the list using an item enumerator. The item enumerator works with the 
<I>List</I> class in the same way that the 
<I>FileEnumerator</I> class worked on the files in a directory. The 
call to <I>list.getItemEnumerator()</I> returns the list enumerator. The call to 
<I>nextItem()</I> returns the current item and moves the pointer to the next item. The method 
<I>hasMoreItems()</I> returns <I>false</I> when there are no more objects left in the list. As each object is 
removed from the list, it is added to the 
<I>listView</I> object by means of a call to 
<I>addItem()</I>.

<A NAME="244"><H3>The event handlers</H3></A>

<p>The first four event handlers in ListViewDemo are the 
<I>button_click()</I> methods for the four buttons on the form. Each of these simply sets the viewing mode of the 
<I>listView</I> object by calling the 
<I>setView()</I> method and passing it one of the four 
<I>ViewEnum</I> constants.

<P>I created the method <I>dbl_click()</I> in the Forms Designer by typing this name 
into the value box for the <I>itemActivate</I> property, which is listed among the active 
properties of the ListView control. This event is triggered when the user chooses one 
of the objects in the list. (Whether this requires a single click or a double click 
depends on the <I>activation</I> property of the ListView 
control<I> </I>that we set in the Properties window 
earlier.)

<p>The <I>dbl_click()</I> method begins by loading the first item in the list the user 
selected. (More than one item can be chosen if the list view is in multiselect mode, 
but only the first item in the list is ever loaded.) The method 
<I>ListItem.getText()</I> returns the file name for the selected list item. There are two special cases to be 
considered. If the user chooses the current directory &quot;.&quot;, the application does nothing. If the 
user selects &quot;..&quot;, the application strips off the last directory name in the 
path and assigns the result to the data member directory. With any other 
choice, the application tacks the selected file name onto the current directory. If the result 
is a directory, this result is assigned to the directory variable.

<p>Finally, the method calls 
<I>createListView()</I> to repopulate the list view with 
the contents of the files contained in directory.

<A NAME="245"><H2>The Result</H2></A>

<p>The result of executing the ListViewDemo application on the current directory 
is shown in Figures 8-4 and 8-5. Figure 8-4 shows ListViewDemo in list mode and 
Figure 8-5 shows the same directory in Details report mode.

<p><img src="images/F08gh04.JPG" width=393 height=279 border="0">
<P><!-- caption --><B>Figure 8-4.</b> <i>The current directory in list mode showing the images
subdirectory, the ListViewDemo executable file, and a series of ListViewDemo
support files.</i><!-- /caption -->

<p><A HREF="javascript:fullSize('F08gh05x.htm')"> <img src="images/F08gh05.JPG" width=404 height=339 border=0 ALT="Click to view at full size."> </A>

<p><!-- caption --><b>Figure 8-5.</b> <i>Details report mode shows a lot more
information about each file, but doesn't display as many files in the same
amount of space.</i><!-- /caption -->

<p>Although impossible to demonstrate in a figure, ListViewDemo allows the 
user to navigate up in the directory structure by double-clicking the &quot;..&quot; entry and 
down in the directory structure by double-clicking a subdirectory.

</BODY>
</HTML>




