<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Multithreaded Applets</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15a.htm", "ch15c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="522"><H1>Multithreaded Applets</H1></A>

<p>Multithreading in applets is no different than 
multithreading in applications. (Chapter 10, <A HREF="ch10a.htm">The WFC Application Package</A>, discussed multithreading in 
applications.)

<A NAME="523"><H2>A Quick Review of Java Multithreading</H2></A>

<p>Without access to the Windows Foundation Classes for 
Java (WFC), an applet can start a new thread in two ways. The first technique is 
for you to create a new class that extends the class <I>Thread</I>. The new class must provide a method named
<I>run()</I>, which executes in a new thread when the parent class invokes 
the 
<I>start() </I>method.

<p><pre>
class MyApplet extends Applet
{
    public void init()
    {
        // include initForm() and other applet methods
    }

    /**
     * Start a new thread.
     */
    public void startThread()
    {
        // create an object of class MyThread
        Thread myThread = new MyThread();

     // now start the thread
     // the new thread begins execution with run()
        myThread.start();
    }
}

class MyThread extends Thread
{ 
    /**
     * Execution of the new thread begins here.
     */
       public void run()
       {
           .
           .
           .
       } 
}
</pre>

<p>The second approach to multithreading is to create a 
<I>Thread</I> object from an object that implements the <I>Runnable</I> interface. The object that implements the <I>Runnable</I> interface can be the applet object itself, as 
shown in the following example, MyApplet. The only requirement of the 
<I>Runnable</I> interface is the existence of the 
<I>run()</I> method.

<p><pre>
// MyApplet implements Runnable by providing a run() method
class MyApplet extends Applet implements Runnable
{
    public void init()
    {
        // include initForm() and other applet methods
    }

    /**
     * Start a new thread.
     */
    public void startThread()
    {
        // create an object of class Thread using this, an object
        // of class MyApplet that implements Runnable
        Thread myThread = new Thread(this);

        // now start the thread.
           myThread.start();
    }

    /**
     * Execution of the new thread begins here.
     */
    public void run()
    { 
        .
        .
        .
    } 
}
</pre>

<p>Here we see that since MyApplet implements the 
<I>Runnable </I>interface, its <I>run()</I> method can become the starting point for a new thread.

<A NAME="524"><H2>The MultiThread Prime Number Applet</H2></A>

<p><A HREF="ch10a.htm">Chapter 10</A> 
used the example of a prime number generator to demonstrate multithreading in 
Microsoft Visual J++ 6 applications. Let's rewrite the same program here as an 
applet named MultiThreadApplet to highlight the similarities and the differences 
between multithreading in applications and multithreading in applets.

<A NAME="525"><H3>The problem</H3></A>

<p>The problem is to create an applet that will spawn two 
independent threads, each of which will calculate prime numbers. The output of 
these prime numbers will be displayed in different panels within a single frame.

<A NAME="526"><H3>The setup work</H3></A>

<p>Create an empty project by choosing New Project from the 
File menu. Select the Visual J++ Projects folder, and then select Empty Project. 
Name the applet MultiThreadApplet, and choose Open.

<p>Add the applet .java file to your empty project by 
choosing Add Item<I> </I>from the Project menu and adding a 
class file named MultiThreadApplet.java. We'll also need a class that implements 
our prime number calculating thread. Repeat the process to add a class file 
named PrimeThread.java to our project.

<p>Finally, add the HTML file. Select the Add Item command 
again. This time, select the Page option from the Web Page folder. Before 
choosing Open, enter the file name MultiThreadApplet.htm.

<p></p><div class="sidebar"><blockquote>
<p><b>Applet Frames</b><hr>
    The use of frames in an applet is a technique that we have not seen before. 
    In the applet examples we've seen so far&#8212;those in Chapter 14, <A HREF="ch14a.htm">Applets</A>&#8212;all output has been 
    to the applet window. In these cases, the 
<I>Applet</I> 
    object appears (as much as possible) to be a part of the HTML page. To 
    accomplish this functionality, however, the <I>Applet</I> class has to give up some important capabilities. For 
    example, the applet window can't be resized, minimized, or closed.


<p>The <I>Frame</I> class provides 
    the same capabilities as the application 
<I>Form</I> 
    class does. In contrast to an 
<I>Applet</I> object, a <I>Frame</I> object has a title bar that supports 
    minimizing, maximizing, and closing. In addition, the frame boundary 
    supports resizing. The downside of frames is that they are not part of the 
    HTML page. Instead, frames hover over the HTML page. In fact, the user can 
    grab the frame and drag it completely outside the browser window. The only 
    connection between a frame and the HTML page that spawns it is that when the 
    HTML page is closed, the frame closes.

<p>A frame can be used in any applet, and is most 
    commonly used to create a dialog box. There is no connection between a frame 
    and multithreading. However, using a frame enables the applet to look more 
    like the multithreaded application it's mimicking.</p>
</blockquote></div>

<A NAME="527"><h3>The <I>PrimeThread</I> 
code</h3></A>
<p>The key to this applet lies in the 
<I>PrimeThread</I> class code, which extends a 
<I>Thread</I> class and is designed to calculate and display prime numbers:

<p><pre>
import java.awt.*;
/**
 * Thread that calculates primes and reports
 * them to output control.
 */
public class PrimeThread extends Thread
{
    // number of primes
    int numberOfPrimes = 0;
        
    // display controls
    TextField output = new TextField();
    Panel     panel = new Panel();
        
    /**
     * Initialize the prime number thread.
     */
    public PrimeThread(String name, int priority)
    {
        // create a label object with the name
        Label label = new Label(name);
            
        // make the output control read only
        output.setEditable(false);
            
        // set the current thread's priority
        this.setPriority(priority);

        // -----format the thread's display panel-------
        // put space around the outside
        panel.setLayout(new BorderLayout());
        panel.add(&quot;West&quot;, new Label(&quot; &quot;));
        panel.add(&quot;East&quot;, new Label(&quot; &quot;));
        panel.add(&quot;North&quot;,new Label(&quot; &quot;));
        panel.add(&quot;South&quot;,new Label(&quot; &quot;));
        
        // create an inner panel with the label and 
        // the output text field and put it in the center
        // of the panel
        Panel innerPanel = new Panel();
        innerPanel.setLayout(new BorderLayout());
        innerPanel.add(&quot;North&quot;, label);
        innerPanel.add(&quot;South&quot;, output);
        panel.add(&quot;Center&quot;, innerPanel);
    }

    /**
     * Return the panel that contains the prime number
     * thread's output.
     */
    Panel getPanel()
    {
        return panel;
    }

    /**
     * Return true if number is prime.
     * 
     * @param number - the number to test
     */
    boolean isPrime(long number)
    {
        // test all the multiples from 2 to the
        // square root of the number (increment
        // to handle potential round-off problems)
        long max = (long)Math.sqrt(number) + 1;
        for (long test = 2; test &lt;= max; test++)
        {
            // if number is evenly divisible by test&#8230;
            long remainder = number % test;
            if (remainder == 0)
            {
                // it can't be prime
                return false;
            }
        }
            
        // made it through, it must be prime
        return true;
    }
        
    /**
     * Start the background PrimeThread class executing.
     */
    public void run()
    {
        // keep calculating prime numbers
        // until we wrap around
        for (long i = 0; i &gt;= 0; i++)
        {
            try
            {
                // give up control
                Thread.yield();
                    
                // now calculate a new prime
                if (isPrime(i))
                {
                    // count it
                    numberOfPrimes++;
                        
                    // output prime number to the control
                    // specified
                    output.setText(&quot;#&quot; +
                                   toString(numberOfPrimes) +
                                   &quot;- &quot; +
                                   toString(i));
                }
            }
            // ignore any exceptions that might occur
            catch(Exception e)
            {
            }
        }
    }

    /**
     * Convert a number into a string with commas.
     */
    private String toString(long value)
    {
        // convert the long into a string
        String s = Long.toString(value);
            
        // now add commas to that string
        StringBuffer sb = new StringBuffer(20);
        int offset = 0;
        for(int length = s.length();
            length &gt; 0;
            length--)
        {
            // every 3 digits from the right side&#8230;
            if ((length % 3) == 0)
            {
                // but not at the beginning&#8230;
                if (offset != 0)
                {
                    // put a comma
                    sb.append(',');
                }
            }
                
            // now add another digit
            sb.append(s.charAt(offset++));
        }
        return sb.toString();
    }
}
</pre>

<p>The constructor for the <I>PrimeThread</I> class takes two arguments. The first argument is the name 
to be displayed in the thread's output panel. The second argument is the 
priority of the thread.<I> 
</I>The<I> 
PrimeThread() </I>constructor begins by creating a <I>Label</I> object out of the name passed to it. The constructor continues 
by setting the properties of the newly created output text field. This text 
field will be used to display the prime numbers as they are calculated. Next the 
constructor sets the priority for the current thread. The remainder of the 
<I>PrimeThread()</I> constructor is spent laying out the label 
and text field objects within a newly constructed panel.

<p>The <I>getPanel()</I> method 
returns a reference to the panel that is created by the constructor. The 
remainder of the methods, 
<I>isPrime()</I>, <I>run()</I>, and 
<I>toString()</I>, are identical to 
the methods of the same name in the MultiThreadApplet application in <A HREF="ch10a.htm">Chapter 10</A>.

<A NAME="528"><h3>The <I>MultiThreadApplet</I> 
code</h3></A>
<p>The code for the <I>MultiThreadApplet</I> class appears as follows:

<p><pre>
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

/**
 * This class implements the MultiThreadApplet (prime number)
 * application example from <A HREF="ch10a.htm">Chapter 10</A> as an applet.
 */
public class MultiThreadApplet extends Applet
{
    // frame will be used to house the prime number threads' output
    Frame     frame;

    // the two prime number threads (PrimeThread extends Thread)
    PrimeThread pt1;
    PrimeThread pt2;

    /**
     * Create and lay out the display objects.
     */
    public void start()
    {
        // create two thread objects (one with a lower priority
        // than the other); the class PrimeThread also creates the
        // output panels, including display objects
        pt1 = new PrimeThread(&quot;Prime #1&quot;, Thread.NORM_PRIORITY);
        pt2 = new PrimeThread(&quot;Prime #2&quot;, Thread.NORM_PRIORITY - 1);
        
        // display both panels created by PrimeThead in a frame
        frame = new Frame(&quot;Applet Prime Number&quot;);
        frame.setLayout(new BorderLayout());
        frame.add(&quot;North&quot;, pt1.getPanel());
        frame.add(&quot;South&quot;, pt2.getPanel());
        
        // now display the frame
        frame.setSize(300, 200);
        frame.setResizable(false);
        frame.setVisible(true);

        // the following listener is invoked when the user clicks
        // the frame's close button
        frame.addWindowListener(new FrameCloseAdapter());

        // start the two threads executing
        pt1.start();
        pt2.start();
    }

    // the following adapter is invoked when the user clicks 
    // any of the window dressings
    class FrameCloseAdapter extends WindowAdapter
    {
        /**
         * Handle the window close event.
         */
        public void windowClosing(WindowEvent e)
        {
            // kill the threads
            stop();
        }
    }
        
    /**
     * Kill the two threads, and return their memory to the heap.
     */
    public void stop()
    {
        // if the frame hasn't already been closed&#8230;
        if (frame != null)
        {
            // close the frame, dispose of its
            // resources (returns memory to the heap)&#8230;
            frame.setVisible(false);
            frame.dispose();

            // and terminate the two threads
            pt1.stop();
            pt2.stop();
        }
        
        frame = null;
        pt1   = null;
        pt2   = null;
    }
}
</pre>

<p>The class <I>MultiThreadApplet</I> 
extends the 
<I>Applet</I> class, just like in all other 
applets. Unlike other applets, however, this applet uses the 
<I>start()</I> method to create the display objects rather than the 
<I>init()</I> method. This is a result of the fact that 
<I>MultiThreadApplet </I>must have a <I>stop()</I> method.

<p>The <I>MultiThreadApplet</I> class 
needs a 
<I>stop()</I> method because when the browser 
continues to other HTML pages, the 
<I>PrimeThread</I>-based 
threads should be terminated and the frame closed. To accomplish this, we need a 
<I>stop()</I> method to call <I>Thread.stop()</I> for each of the threads. In addition, 
<I>stop()</I> closes the frame by calling 
<I>Frame.setVisible(false)</I> and disposes of the frame's memory by calling 
<I>Frame.dispose()</I>.
<p>If the user returns to the MultiThreadApplet HTML page, 
the 
<I>start()</I> method must rebuild the frame and 
<I>PrimeThread </I>objects. This replaces the objects disposed 
of by <I>stop()</I>.

<p>After creating the two threads of class 
<I>PrimeThread</I>, the <I>start()</I> method creates 
a frame with the title &quot;Applet Prime Number&quot; in the title bar. The 
<I>start()</I> method then creates two panels associated with 
these two threads and positions them in the top and bottom of the frame. The 
frame is then resized and displayed.

<p>Finally, <I>start()</I> associates 
the method 
<I>windowClosing()</I> with the window close 
event through the listener 
<I>FrameCloseAdapter</I>. The <I>windowClosing() 
</I>method is invoked when the user clicks 
the close button in the frame's title bar. This method calls <I>stop()</I>, which stops the threads and disposes of the frame. Setting 
<I>frame</I> to <I>null</I> in the <I>stop()</I> method keeps the applet from attempting to 
dispose of the frame twice, which it would try to do were the user to close the 
applet window and then link to another HTML page. This precaution allows the 
user to click the close button to close the frame rather than forcing him or her 
to link to another HTML page to close the frame.

<A NAME="529"><H3>Window adapters</H3></A>

<p>Notice that the object passed to 
<I>addWindowListener()</I> is an object of class 
<I>FrameCloseAdapter</I>. Based on our previous experience, you would expect 
that 
<I>FrameCloseAdapter</I> would implement the 
<I>WindowListener</I> interface. Instead, 
<I>FrameCloseAdapter</I> extends the 
<I>WindowAdapter</I> class. What's going on?

<p>The <I>WindowAdapter</I> class 
implements the 
<I>WindowListener</I> interface. By 
extending this class, 
<I>FrameCloseAdapter</I> also 
implements 
<I>WindowListener</I>. However, the 
<I>WindowListener</I> interface includes six other methods 
besides 
<I>windowClosing()</I>. These methods handle other 
window-related events such as window minimizing (iconifying) and restoring 
(deiconifying).

<p>With so many methods in the interface, the programmer is 
able to handle a number of different events; however, it also makes implementing 
the 
<I>WindowListener</I> interface monotonous. Because we 
don't care about the other six methods, we would need to create six empty 
&quot;do nothing&quot; methods along with 
<I>windowClosing()</I> to fully implement <I>WindowListener</I>. To avoid this unnecessary work, Java provides the 
class <I>WindowAdapter</I>. This class implements the 
<I>WindowListener</I> interface by providing all seven 
methods, each of which does nothing. 
<I>FrameCloseAdapter</I> extends 
<I>WindowAdapter</I> 
and overrides the single method 
<I>windowClosing()</I> with 
a method that actually does something. 
<I>FrameCloseAdapter</I> inherits the remaining methods necessary to 
implement 
<I>WindowListener</I>.

<A NAME="530"><H3>The HTML file</H3></A>

<p>The HTML for MultiThreadApplet is conventional, with the 
exception of the size of the applet window. The &lt;OBJECT&gt; tag sets the size 
to 1 by 1 pixel, which essentially makes the applet invisible. (Setting the size 
to 0 by 0 pixels makes some browsers do strange things.)

<p><pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;HR&gt;
The prime number applet opens a new form for
display.
&lt;P&gt;
&lt;OBJECT CODE=&quot;MultiThreadApplet.class&quot;
        HEIGHT=1
        WIDTH=1 VIEWASTEXT&gt;
&lt;/OBJECT&gt;
&lt;HR&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>

<A NAME="531"><H3>The result</H3></A>

<p>The MultiThreadApplet program, when run from Microsoft 
Internet Explorer, results in the output shown in Figure 15-1. The upper output 
text field of the frame updates rapidly with newly calculated prime numbers, 
while the lower text field updates much more slowly. What isn't obvious from 
Figure 15-1 is that the user can drag the prime number frame around in the 
screen. In addition, the applet frame has its own button on the Microsoft 
Windows taskbar.

<p>When the user links to a new HTML page, the prime number 
output frame and the frame's button on the taskbar both disappear immediately. 
When the user returns to the page, the frame reappears and the threads begin 
running again. Similar results are obtained when the HTML page is displayed with 
the HTML editor.

<p></p><div class="note"><blockquote>
<b>NOTE</b><hr>
     I defined the frame so that it's not resizeable by calling the method <I>Frame.isResizable(false)</I>. I did this because Visual 
    J++ 6 has a bug in the <I>Frame</I> code. Resizing the 
    frame while the 
<I>PrimeThread</I> methods are running 
    causes the MultiThreadApplet applet to hang. 
</blockquote></div>

<p><A HREF="javascript:fullSize('f15gh01x.htm')"> <img src="images/f15gh01.jpg" width=404 height=335 border=0 ALT="Click to view at full size."></A>
<p><!-- caption --><B>Figure 15-1.</B> <i>The output from 
MultiThreadApplet resembles that of the earlier multithreaded applications.</i><!-- /caption --></p>

</BODY>
</HTML>




