<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Designing WindowedApp</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05a.htm", "ch05c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="157"><H1>Designing WindowedApp</H1></A>

<p>To create this application, we'll use the Windows Application builder. Close any projects that you might have open in Visual J++ by choosing Close All from the File menu. Now choose New Project from the File menu. Select Applications from the Visual J++ Projects as we did when creating console applications. This time, however, select Windows Application instead of Console Application. (Don't confuse this choice with the Application Wizard option.) For a project name, enter WindowedApp, as shown in Figure 5-1.

<p><A HREF="javascript:fullSize('f05gh01x.htm')"> <img src="images/f05gh01.jpg" width=404 height=249 border=0 ALT="Click to view at full size."> </A>

<p><!-- caption --><b>Figure 5-1.</b> <i>The New Project window immediately prior to building the Microsoft Windows version of WindowedApp.</I><!-- /caption -->

<p>Once your display looks like that shown in Figure 5-1, choose Open. This creates a project with a single .java file. Rather than carrying the default name Class1.java, as with console applications, this project has the default source file name Form1.java. (The reason for this name difference will become obvious shortly.) For now let's leave the name as it is; you'll see how to change it later.

<A NAME="158"><H2>Using the Forms Designer</H2></A>

<p>To open the file for editing, double-click Form1.java in the Project Explorer window. A window similar to that shown in Figure 5-2 will appear. This is the Forms Designer. (You can also open the Forms Designer by selecting Form1.java and choosing Designer from the View menu.)

<p><IMG SRC="images/f05gh02.jpg" width=354 height=368 BORDER="0">

<p><!-- caption --><b>Figure 5-2.</b> <i>The Forms Designer provides a different view of a Visual J++ application.</I><!-- /caption -->

<p>To use the Forms Designer, you'll need two additional windows: the Toolbox and the Properties window. Let's deal with each in turn.

<A NAME="159"><H3>The Toolbox </H3></A>

<p>To open the Toolbox, select Toolbox from the View menu. (There is also a Toolbox button on the standard toolbar that you can use.) The Toolbox (in List View) is shown in Figure 5-3. To view the WFC controls, click the WFC tab. Perhaps you're more clever than I am, but it took me a few minutes to figure out that clicking the arrows next to the tabs scrolls the current list of available tools up and down. You can get a more condensed, albeit cryptic, view of the available tools by right-clicking the mouse within the WFC Controls panel and clicking List View to turn it off. This displays the tool icons without their labels.

<p><IMG SRC="images/f05gh03.jpg" width=251 height=373 BORDER="0">

<p><!-- caption --><b>Figure 5-3.</b> <i>The Toolbox showing some of the available WFC tools.</I><!-- /caption -->

<p>We'll first use the Toolbox tools to build the file name input area of our windowed application. (If you've forgotten the application we're trying to build or if you skipped over <A HREF="ch04a.htm">Chapter 4</A>, refer to Figure 4-1.) Click the Label control in the Toolbox. Now click a spot within the Forms Designer. A label is displayed bearing the text &quot;label1&quot;, as shown in Figure 5-4.

<p><IMG SRC="images/f05gh04.jpg" width=354 height=368 BORDER="0">

<p><!-- caption --><b>Figure 5-4.</b> <i>Clicking Label in the Toolbox and then clicking within the Forms Designer creates a </I>Label<I> object.</I><!-- /caption -->

<A NAME="160"><H3>The Properties window</H3></A>

<p>With the label still selected in the Forms Designer window, enter <I>File</I> <I>Name</I>. As soon as you begin to type, the Properties window appears. (If you do like I do and group the various Visual J++ windows in a tabbed window, the Properties window will immediately cover the Toolbox.) The text you type is displayed within the label in the Forms Designer and the <I>text</I> property value box in the Properties window. See Figure 5-5.

<p><IMG SRC="images/f05gh05.jpg" width=296 height=424 BORDER="0">

<p><!-- caption --><b>Figure 5-5.</b> <i>The Properties window for the </I>Label<I> object in Categorized order.</I><!-- /caption -->

<p>Shown in Figure 5-5 along with the <I>text</I> property are the other properties of a Label control. By default, these properties are arranged alphabetically. In Figure 5-5, they have been grouped by clicking the Categorized button at the top of the Properties window. You can show or hide the properties within a group by clicking the plus or minus sign next to the group title. The values of most properties can 
be changed by clicking the value box and typing. For example, change the <I>name</I> property of the <I>Label</I> object by entering <I>fileNameLabel</I>.

<p>Let's try changing one of the compound properties such as the <I>font</I> property. Click the plus sign to expand the font subproperties. Now select the desired font from the drop-down list under the <I>name</I> property, and then select the font size and weight. I left the font name the same, but changed the size and weight to 14-point boldface to make the label stand out a little better than it would using the default font.

<A NAME="161"><H3>Position properties</H3></A>

<p>There are two more points about the Properties window worth noting. First, if you scroll down to near the bottom of the properties list, you'll see a group of properties collectively known as Position. Under Position, you'll see an <I>anchor</I> property whose default value is <I>Top, 
Left</I>. The <I>anchor</I> property specifies what side of the form the object is attached to, which in turn determines how the label reacts when the form is resized. Below the <I>anchor</I> property is the <I>dock </I>property. Selecting the arrow in the <I>dock</I> property's value box opens a window much like the one in Figure 4-5, which describes the <I>BorderLayout</I> layout manager. This isn't an accident. The <I>dock</I> property places the object within the form using an approach much like a border layout.

<p>Second, at the bottom of the Position property group under the <I>location</I> and <I>size</I> properties are the x and y coordinates of the <I>Label</I> object within the form and the object's width and height, respectively. Unlike AWT, WFC allows the programmer to place objects absolutely.

<P><DIV CLASS="note"><BLOCKQUOTE>
<B>NOTE</B>
<HR>The ability to place objects using x and y offsets will be familiar to programmers of Microsoft Visual Basic and Microsoft Visual C++.
</blockquote></div>

<p>Although you can set the location and size of a control from the Properties window, it's generally easier to set location and size properties graphically. To set the location, point at the control, press down the mouse button, and drag the control to position it. To set the size, individually drag the sizing handles on the perimeter of the selected control. Make the Label control as small as you can while still being able to see the label text.

<A NAME="162"><H2>Finishing the WindowedApp Interface</H2></A>

<p>Once you finish editing the properties of the  <I>fileNameLabel</I> label, you'll need to add an Edit control to contain the file name. Drag an Edit control from the Toolbox and place it beside the <I>fileNameLabel </I>object. Drag the right side of the Edit control until it just about meets the right side of the form.

<p>Now right-click the Edit control and select 
Properties<I> </I>from the shortcut menu. This is another way to select the Properties window. Since we don't want the 
<I>Edit</I> object to contain the default phrase 
<I>edit1 </I>as the initial value, delete this text in 
the object's <I>text</I> property. Notice that the text also disappears from the control in the Forms Designer. Set the <I>anchor</I> property of the <I>Edit</I> object to <I>Top, Left, Right</I>. This will ensure that the Edit control resizes horizontally to match the size of the window.

<p>Create another label, and position it below the 
<I>fileNameLabel </I>object. Change this new label's <I>text</I> property value to <I>Text</I>. Set its font, font size, and font weight to match the font properties of the <I>fileNameLabel</I> object.

<p>Add another Edit control immediately below the text label. Before attempting to resize this control object, you must set its <I>multiline</I> property to <I>true</I>. Only 
then will you be allowed to resize the control vertically as well as horizontally. Resize this second Edit control so that it takes up most of the remaining room within the 
form, but leave enough space for two buttons at the bottom. (Don't worry, you can always resize the form after the buttons are in place.) Set this <I>Edit</I> object's <I>anchor</I> property to <I>Top, Left, Bottom, Right</I>. Clear the default value from the <I>text</I> property.

<p>Finally, add the two buttons. Drag a Button control to below the second Edit control, and set the <I>Button </I>object's <I>text</I> property to <I>Submit</I>. Set the 
<I>anchor</I> property to <I>Left, Bottom</I>. Repeat the process for the Cancel button, except set its <I>anchor</I> property to <I>Bottom, Right</I>.

<p>When you finish, your Forms Designer window should look as shown in Figure 5-6. Continue to adjust the fields until they look right to you, and then click the Save All toolbar button.

<p><IMG SRC="images/f05gh06.jpg" width=354 height=368 BORDER="0">

<p><!-- caption --><b>Figure 5-6.</b> <i>The completed WindowedApp interface, shown in the Forms Designer.</I><!-- /caption -->

<A NAME="163"><H2>What Did This Do (and What Did This Not Do)?</H2></A>

<p>To those readers accustomed to earlier versions of Visual C++, the Forms Designer isn't a great surprise. Even Visual J++ 1.0 had some limited form design capability. The main difference between those tools and the Visual J++ 6 Forms Designer lies in the way the Forms Designer works. The output from Visual J++ form design tools went into a file called a Resource file, which had to be compiled by the 
resource compiler and included in the project. The output from the Forms Designer is instead contained in the Form1.java file.

<p>To see the code you've generated by creating the form for the WindowedApp project, you'll first need to make sure that your design handiwork has been saved to disk. To do so, choose Save All from the File menu (or click the Save All 
toolbar button). Now choose Code from the View menu, or click the View Code toolbar button on the Project Explorer window.

<p>The first thing you'll notice is that Form1.java already contains a fair amount of code. Much of this code was generated by the Windows Application builder when it first created the file. As you scroll through the code, however, you'll notice that the method <I>initForm()</I> is shaded and carries the admonition not to edit it directly. This is the code generated by the Forms Designer as a result of your design work.

<p>To prove that this code was generated by the Forms Designer, you might want to conduct the following experiment. Scroll the Text editor display down until 
you reach the section of Java code that sets up the multiline <I>Edit</I> object. The name of this object is 
<I>edit2,</I> unless you changed it during the design process. In any case, this is the only object that calls the <I>setMultiline() </I>method. Within this section of code, find the call to the <I>edit2.setSize() </I>method. Now position the Text editor so that the call to <I>setSize()</I> is still visible even when the Forms Designer window has the focus. Resize the <I>edit2</I> object in the Forms Designer. The source code won't change 
immediately. However, as soon as you save the form, the size specified in the <I>setSize()</I> call in the Text editor changes to match the new size in the Forms Designer.

<A NAME="164"><H2>Building the Application</H2></A>

<p>There is one last property to set: the form's title. To do this, select the form and change its <I>text</I> property in the Properties window.

<p>Now you are ready to build the WindowedApp application. Choose Save All from the File menu again, and then build the project. The program should compile into a Windows <I>.</I>EXE file without complaint. Executing WindowedApp.exe generates the output shown in Figure 5-7.

<p>Compare the output of your project with the planned output shown in Figure 4-1. If your output doesn't match, you still have some editing to do 
in the Forms Designer.

<p><IMG SRC="images/f05gh07.jpg" width=300 height=300 BORDER="0">

<p><!-- caption --><b>Figure 5-7.</b> <i>The appearance of our initial WindowedApp application.</I><!-- /caption -->

</BODY>
</HTML>




