<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Time and Timer Classes</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="302"><h1>The <I>Time</I> and <I>Timer</I> Classes</h1></A>
<p>There are two time-related classes in the Application package: the class 
<I>Time</I> and the class <I>Timer</I>. Microsoft Visual J++ provides the 
<I>Time</I> class to find out the current time in terms of fractions of seconds since a fixed time in the past. The 
<I>Timer</I> class is used to generate an event periodically. The purpose of these two classes is analogous 
to a watch that beeps every hour: the <I>Time</I> class is the watch, and the 
<I>Timer</I> class is the trigger for the beep.

<p>In this section, we'll use the <I>Time</I> class to create a simple clock, and then 
add a <I>Timer</I> object to make the clock reflect real time.

<A NAME="303"><h2>The <I>Time</I> Class</h2></A>
<p>The following TimeDemo application will demonstrate the 
<I>Time</I> class. This simple application contains a button and an output edit box. When the user clicks the button, the application 
displays the current date, time, and day of the week.

<A NAME="304"><H3>The Forms Designer work</H3></A>

<p>To create the TimeDemo application, you start by creating a Windows 
Application. After setting the form's <I>text</I> property to 
<I>Time Demo</I>, add an Edit control from the Toolbox. Clear the 
<I>text</I> property of the Edit control, and set the 
<I>name</I> property to <I>outputEdit</I>. Set the 
<I>readOnly</I> property to <I>true</I> to keep the user from changing text 
in the Edit control, which the application uses for output only. This control will 
display the time.

<p>Now add a Button control to the form. Set the 
<I>text</I> property to <I>Display</I> 
<I>Time</I>. Then double-click the button to establish a button click event handler.

<p>To account for changes the user might make to the size of the form, anchor 
the Edit control to the top, left, and right edges of the form and anchor the Button 
control to the bottom, left, and right edges.

<A NAME="305"><H3>The code</H3></A>

<p>The code for the TimeDemo application appears as follows:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * This class demonstrates the Time class.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();
    }

    .
    .
    .

    /**
     * Define the days of the week.
     */
    private final static String[] daysOfWeek = new String[]
                                                  {
                                                  &quot;illegal&quot;,
                                                  &quot;Mon&quot;,
                                                  &quot;Tues&quot;,
                                                  &quot;Wed&quot;,
                                                  &quot;Thur&quot;,
                                                  &quot;Fri&quot;,
                                                  &quot;Sat&quot;,
                                                  &quot;Sun&quot;
                                                  };
    
    /**
     * Display the time in the output control.
     */
    void displayTime(Time time, Control output)
    {
        // fetch the date with the month spelled out
        String dateString = time.formatLongDate();
        
        // now fetch the time
        String timeString = time.formatLongTime();
        
        // get the day of the week (use the daysOfWeek
        // array to convert the number into a string)
        String wdString   = daysOfWeek[time.getDayOfWeek()];
        
        // display the results
        output.setText(dateString + &quot; &quot; +
                       timeString + &quot;(&quot; +
                       wdString   + &quot;)&quot;);
    }
    
    private void button1_click(Object source, Event e)
    {
        displayTime(new Time(), outputEdit);
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit outputEdit = new Edit();
    Button button1 = new Button();

    private void initForm()
    {
        // &#8230;created by Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>Since TimeDemo doesn't do anything until the user clicks the Display 
Time button, the <I>Form1()</I> constructor doesn't do anything other than call 
<I>initForm()</I>. 
The <I>button1_click()</I> method, which is attached to the Display Time button, 
calls <I>displayTime()</I> to display the current date and time in the 
<I>outputEdit</I> Edit control.

<P>The <I>displayTime()</I> method begins by creating a 
<I>Time</I> object. This object records the time it was created. Oddly enough, this time is recorded in the number of 
units of 100 nanoseconds since midnight, A.D. 100. The unit 100 nanoseconds equals 
one-tenth of a microsecond or 10<SUP>-7</SUP> seconds.

<P>The <I>Time</I> class provides a number of methods for converting the 
<I>Time</I> object's value into meaningful text. The TimeDemo program uses one of these 
methods, <I>formatLongDate(),</I> to create a date string. The LongDate part of the method 
name refers to the fact that the month in the returned date is spelled out as characters. 
(A short date format would use only numbers.) Next the 
<I>formatLongTime()</I> method returns a string representation of the time of day in the 
<I>Time</I> object's value.

<P>There is no method to generate a text representation of the day of the 
week; the <I>Time.getDayOfWeek()</I> method returns a value from 1 to 7, with 1 
representing Monday. TimeDemo uses the value returned by 
<I>getDayOfWeek()</I> as an index into the string array 
<I>daysOfWeek</I>. The <I>daysOfWeek</I> array returns the string that 
corresponds to the index value and stores it in the 
<I>wdString </I>variable.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The first value in the 
<I>daysOfWeek</I> array is the string &quot;illegal&quot;. This 
is just a placeholder because the smallest value 
that <I>getDayOfWeek()</I> returns is 1 rather than 0, and arrays in Visual 
J++ are zero-based. Thus, <I>daysOfWeek[0]</I> isn't used.
</blockquote></div>

<p>The three strings <I>dateString</I>, 
<I>timeString</I>, and <I>wdString</I> are then 
concatenated and displayed in the 
<I>outputEdit</I> object. The result is shown in Figure 10-1.

<P><img src="images/f10gh01.jpg" width=245 height=102 border="0">

<p><!-- caption --><b>Figure 10-1.</b> <i>The output from TimeDemo shows the format
generated by the </I>formatLongDate()<I> and </I>formatLongTime()<I> methods,
with the day of the week added to the end.</i><!-- /caption -->

<A NAME="306"><h2>The <I>Timer</I> Class</h2></A>
<p>An inconvenient feature of the TimeDemo application is that the user must choose the 
Display Time button to see the current time. It would be much more convenient if the time 
display updated periodically on its own.

<p>To do this, the program could sit in a 
<I>for</I> loop repeatedly creating the current time string and displaying it in the 
<I>outputEdit</I> Edit control. However, not only 
would this be a bad idea&#8212;it would consume a considerable amount of CPU 
processing power for such a simple task&#8212;it also wouldn't work. The problem is that 
the <I>outputEdit</I> Edit control would never get a chance to display the output results. A 
much better approach would be to update the display once per second. To do this, we 
need a timer, and this is exactly what the 
<I>Timer</I> class is for.

<p>The following TimerDemo application demonstrates the use of the 
<I>Timer</I> class. This demo displays the time and date in the same format as TimeDemo, and it 
automatically updates the time display once per second. In addition, TimerDemo adds 
a stopwatch feature.

<A NAME="307"><H3>The Forms Designer work</H3></A>

<p>The TimerDemo application requires two Edit controls: one to display the date 
and time, and the other to display the stopwatch value. The application also requires 
two Button controls: one to start the stopwatch and one to stop it. Take a second to 
look ahead to Figure 10-2 to see how these objects are laid out on the form.

<p>Use the Properties window to change the 
<I>name</I> property of the upper Edit control to 
<I>dateOutputEdit</I>. Set this Edit control's 
<I>readOnly</I> property to <I>true</I>, and set its 
<I>text</I> property to empty. Since this control is uppermost in the form, set its 
<I>anchor</I> property to top, left, and right.

<p>Now set the <I>name</I> property of the lower Edit control to 
<I>secsOutputEdit</I>. As we did with 
<I>dateOutputEdit</I>, set the <I>readOnly</I> property to 
<I>true</I> and the <I>text</I> property to empty. Anchor this control to the left, right, and bottom sides of the form, and set 
its <I>textAlign</I> property to <I>Right</I>. Create a Label control just to the right of this Edit 
control, set the label's <I>text</I> property to 
<I>secs</I>, and anchor the label to the bottom and 
right sides of the form to match the 
<I>secsOutputEdit</I> object.

<p>Now name the leftmost button <I>startClock</I> and label it 
<I>Start Clock</I>. You will need to anchor it to the bottom and left of the form. Name the rightmost button 
<I>stopClock</I>, and label it <I>Stop Clock</I>. Anchor this button to the bottom and right of the form. 
Finally, use the active properties window to create a click event handler for 
each button.

<A NAME="308"><H3>The code</H3></A>

<p>The code for the TimerDemo application is shown below.

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * This class demonstrates the Timer class by
 * creating a clock with a built-in stopwatch.
 */
public class Form1 extends Form
{
    // the following Timer object clicks every second
    // to update the display
    Timer timer;

    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();
        
        // create a timer to be used to update the
        // clock periodically
        timer = new Timer(this.components);
        timer.addOnTimer(new EventHandler(this.handleClockTick));
        
        // start the clock to click every 100th of a second
        timer.setInterval(10);
        timer.setEnabled(true);
    }

    /**
     * Form1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose()
    {
        super.dispose();
        
        // turn the timer off to make sure that it can be
        // disposed of with the rest of the form's container
        timer.setEnabled(false);
        
        // now dispose of the contents of the container
        components.dispose();
    }

    /**
      * Define the days of the week.
     **/
        // array unchanged from TimeDemo application&#8230;

    /**
     * Display the current time in the outputEdit window.
     */
    private void displayTime(Time time, Control output)
    {
        // unchanged from TimeDemo application&#8230;
    }

    /**
     * Display the elapsed time from startTime in
     * the output control.
     */
    public void displayElapsedTime(Time startTime,
                                   Time currentTime,
                                   Control output)
    {
        // now get the difference between the
        // current time and the start time
        long deltaTime = currentTime.toLong() -
                         startTime.toLong();
                
        int deltaMilliSeconds = 
             (int)(deltaTime / Time.UNITS_PER_MILLISECOND);
        float deltaSeconds = 
                       ((float)deltaMilliSeconds) / 1000.0F;
                
        // display the delta time
        output.setText(Float.toString(deltaSeconds));
    }

    // save the start time for the stopwatch
    Time startTime = null;
    
    // only update the time display when the second
    // changes
    long lastSecond = 0;
    
    /**
     * Handle the 1-millisecond clock tick.
     */
    private void handleClockTick(Object source, Event e)
    {
        // capture the current time
        Time currentTime = new Time();

        // if the second has changed&#8230;
        long second = 
            currentTime.toLong() / Time.UNITS_PER_SECOND;
        if (second != lastSecond)
        {
            lastSecond = second;
            
            // update the date and time display
            displayTime(currentTime, dateOutputEdit);
        }
        
        // if the stopwatch is enabled&#8230;
        if (startTime != null)
        {
            // then display the elapsed time
            displayElapsedTime(startTime, currentTime,
                               secsOutputEdit);
        }
    }
    
    private void startClock_click(Object source, Event e)
    {
        // start the stopwatch by noting the current time
        // as the start time
        startTime = new Time();
    }

    private void stopClock_click(Object source, Event e)
    {
        // stop the stopwatch by erasing the start time
        startTime = null;
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit dateOutputEdit = new Edit();
    Edit secsOutputEdit = new Edit();
    Label label1 = new Label();
    Button startClock = new Button();
    Button stopClock = new Button();

    private void initForm()
    {
        // &#8230;this code created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>Once the <I>TimerDemo()</I> constructor has called 
<I>initForm()</I> to set up the WFC controls, it creates a 
<I>Timer</I> object. This object is attached to the same 
<I>components</I> container that holds the controls we built with the Forms Designer, such as the 
output <I>Edit</I> objects and the buttons.

<div class="tip"><blockquote>
<b>TIP</b><hr>
You are not required to attach your 
<I>Timer</I> objects to a <I>Container 
</I>object<I>.</I> It's a good idea, however, because if you do the resources associated with 
the <I>Timer</I> object are automatically disposed of when the 
<I>Container</I> object's <I>dispose()</I> method is invoked.
</blockquote></div>

<p>TimerDemo then creates an <I>EventHandler</I> object to handle the timer event. 
In this case, <I>EventHandler</I> points at the method 
<I>handleClockTick()</I>. Once the timer event handler has been established by a call to 
<I>addOnTimer()</I>, the constructor sets the tick interval to 10. This causes the 
<I>Timer</I> object to create a timer event every 10 
milliseconds. Finally, calling <I>setEnabled(true) 
</I>enables the timer.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Timers are created in a stopped state. The program should not start 
the timer until it has established the timer interval and event handler.
</blockquote></div>

<p>The <I>dispose()</I> method, which I normally haven't been showing in the 
program listings in this book (although it is in the code on the companion CD), is 
automatically created by the Forms Designer. This code shows 
<I>dispose()</I> edited so that it turns off the timer by calling the 
<I>setEnabled(false) </I>method. Once the timer is disabled, 
the <I>dispose()</I> method calls 
<I>components.dispose()</I> to release the resources of the 
objects&#8212;including the timer&#8212;that are attached to the 
<I>components</I> container.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The resources associated with a timer can't be disposed of as long 
as the timer is active.
</blockquote></div>

<p>The date and time are updated by the timer event handler, so 
the methods <I>startClock_click()</I> and 
<I>stopClock_click()</I> are very short. The 
<I>startClock_click()</I> method simply sets the stopwatch's 
<I>startTime</I> variable to the current time, and 
<I>stopClock_click()</I> sets the variable to 
<I>null</I>. This signals to the timer event handler that the stopwatch 
is active or inactive, respectively.

<P>The <I>handleClockTick()</I> method that handles the 
timer<I> </I>event is the heart of this application. This method begins by noting the current time in tenths of a 
millisecond. It then converts this time into seconds. If the resulting 
<I>second</I> variable value is different from the 
<I>lastSecond </I>variable value, the application updates the date and 
time display in the <I>dateOutputEdit</I> Edit control by calling 
<I>displayTime()</I>. The trick of comparing 
<I>second</I> to <I>lastSecond</I> keeps the 
<I>handleClockTick()</I> method from needlessly updating the date and time 
every 10 milliseconds when the control displays the time only to the nearest second.

<P>The<I> handleClockTick()</I> method continues by checking the 
<I>startTime</I> object. If it contains a 
<I>null</I> value, the stopwatch is stopped. Otherwise, it contains the start time of the stopwatch. In 
this case, <I>handleClockTick()</I> invokes 
<I>displayElapsedTime()</I> to display the stopwatch value in 
the <I>secsOutputEdit</I> Edit control.

<P>The <I>displayTime()</I> method and the 
<I>daysOfWeek</I> array are identical to those of the same name in the TimeDemo application.

<P>The <I>displayElapsedTime()</I> method sends to the output Edit control the 
difference in seconds between <I>currentTime</I> and 
<I>startTime</I>. It begins by calculating the difference between the two timer values and converting the resulting long delta 
value into an integer variable <I>deltaMilliSeconds. 
</I>The value of <I>deltaMilliSeconds</I> is 
divided by 1000, converting milliseconds to seconds, and assigned to 
<I>deltaSeconds</I>. The <I>deltaSeconds</I> variable is of float type so that it can retain the fractional part of the 
computation results&#8212;that is, the 10ths and 100ths of a second. Finally, the 
<I>deltaSeconds</I> value is converted into a string and displayed in the output Edit control.

<P>The result is shown in Figure 10-2.
 
<P><img src="images/F10gh02.JPG" width=244 height=138 border="0">
<P><!-- caption --><B>Figure 10-2.</b> <i>The TimerDemo application automatically updates the date and 
time display every second, plus it creates a user-controlled stopwatch accurate to one 
100<SUP>th</SUP> of a second.</I><!-- /caption -->

</BODY>
</HTML>




