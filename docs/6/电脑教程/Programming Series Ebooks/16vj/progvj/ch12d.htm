<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Manual ADO</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12c.htm", "ch12e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="401"><H1>Manual ADO</H1></A>

<p>This first example ADO application is built manually without the aid of the 
Visual J++ tools. The purpose of this application is to demonstrate the principles of 
this manual approach, rather than to perform a serious function.

<A NAME="402"><H2>The Problem</H2></A>

<p>This example program, ManualADO, accesses the Customers table of the 
Access database MyCompany.mdb described previously. Although this database was 
created with Microsoft Access, the database format doesn't matter as long as there is 
an ODBC32 driver for the type of database you want to use.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
ODBC32 drivers for Access, SQL Server, Microsoft FoxPro, 
Microsoft Visual FoxPro, Oracle, formatted text files, and several other storage 
formats are built into Windows. Other vendors provide their own ODBC32 drivers for 
their products.
</blockquote></div>

<p>ManualADO reads the first name, last name, and phone number from a row 
in the Customers table and combines them into one string that is displayed in an 
edit box along the top of a form. In addition, ManualADO provides a Next and a 
Previous button so the user can navigate through the database records.

<A NAME="403"><H2>The Setup Work</H2></A>

<p>Start by creating a new directory named Windows Database Applications, to hold 
all the data applications we'll create in this chapter. In addition, you'll need to 
create an Access database named MyCompany. Add to the database a table called 
Customers that contains columns named 
CustomerID<I>, </I>CustomerFirstName<I>, 
</I>CustomerLastName, and PhoneNumber, and add some data to the table. Place the database in 
a Databases subdirectory of the Windows Database Applications directory.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
It would be simpler and less error prone for you to use the 
database MyCompany.mdb from the companion CD instead of creating it yourself 
from scratch. This is true even if you want to add new records using Microsoft 
Access. The database and all the examples in this chapter are in the Windows 
Database Applications subfolder on the companion CD.
</blockquote></div>

<p>Create a conventional Visual J++ Windows application project in the 
directory Windows Database Applications. Name the project ManualADO. 

<A NAME="404"><H2>The Forms Designer Work</H2></A>

<p>From Project Explorer, open Form1.java in the Forms Designer. Using the 
Properties window, change the form's <I>text</I> property from 
<I>Form1</I> to <I>Manual ADO</I>. Resize the default form to roughly half its original height and two-thirds its original width 
(the exact size isn't critical).

<p>Place an Edit control along the top of the form. Size the Edit control to be 
almost as wide as the form. Rename the Edit control 
<I>nameEdit</I> and anchor it to the left, right, and top sides of the form. Since this simple application has no writing 
capability, set the Edit control's <I>readOnly</I> property to 
<I>true</I>. Finally, erase the initial value in the 
<I>text</I> property.

<p>Now add two Button controls side by side and immediately below the 
Edit control. Name the left button 
<I>previousButton</I> and set its <I>text</I> property to 
<I>Previous</I>. Anchor <I>previousButton</I> to the left and bottom sides of the form. Name the right 
button <I>nextButton</I> and set its <I>text</I> property to 
<I>Next</I>. Anchor <I>nextButton</I> to the right and 
bottom sides of the form. Finally, double-click both buttons in order to create an event 
handler for each.

<A NAME="405"><H2>The Code</H2></A>

<p>For simplicity's sake, I have broken the code into two public classes, 
ManualADO.java and Form1.java. The 
<I>ManualADO</I> class contains all of the ADO-related functions, 
and the <I>Form1</I> class concentrates solely on the mundane output functions.

<A NAME="406"><h3>The <I>ManualADO</I> class</h3></A>
<p>The following code is the source code for the 
<I>ManualADO</I> class:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

import com.ms.wfc.data.*;

/**
 * This class gives the user convenient access to a database
 * via the ActiveX Data Objects API.
 */
public class ManualADO
{
    // an ADO connection to the database
    Connection con = new Connection();
    
    // a recordset returned from a query
    Recordset rs   = new Recordset();
    
    // the name of the fields within the recordset to access
    String[] fields;

    /**
     * Create the ManualADO object that will
     * be used to perform the actual ADO calls.
     */ 
    public ManualADO(String   dbType,   // database information
                     String   dbPath,
                     String   dbName,
                     String   userID,
                     String   password,
                     String   table,    // table information
                     String[] fields,
                     String   sortField)
    {
        // save the table information
        this.fields  = fields;
    
        // combine the database fields into one string;
        // this string will be used to make the connection
        String sDB = createDatabaseString(dbType,
                                          userID,
                                          password,
                                          dbPath + dbName);

        // now build a SQL query from the fields
        String SQL = buildSQL(table, sortField, fields);
        
        // open the database
        dbQuery(sDB, SQL);
    }
                                     
    /**
     * Create a complete database string from the parts.
     * @param type of database (DSN)
     * @param user id
     * @param user password
     * @param path to database file
     */
    public static String createDatabaseString(String dsn,
                                              String userID,
                                              String psswd,
                                              String db)
    {
        String s = &quot;PROVIDER=MSDASQL;&quot;;
        
        // add the DSN
        s += &quot;dsn=&quot; + dsn + &quot;;&quot;;
        
        // now the user id and password
        s += &quot;uid=&quot; + userID + &quot;;&quot;;
        s += &quot;pwd=&quot; + psswd + &quot;;&quot;;
        
        // now the path to the database itself
        s += &quot;DBQ=&quot; + db;
        
        // return the result
        return s;
    }
    
    /**
     * Build a SQL query.
     * @param the table name to query
     * @param the order field (null-&gt;don't sort)
     * @param the fields to extract
     */
    public static String buildSQL(String sTable,
                                  String sOrder, 
                                  String[] fields)
    {
        // always start with SELECT
        String queryString = &quot;SELECT &quot;;
        
        // now add in the field names separated by commas
        int index = 0;
        while(true)
        {
            queryString += fields[index];
            
            if (++index &gt;= fields.length)
            {
                break;
            }
            
            queryString += &quot;, &quot;;
        }
 
        // add the table name
        queryString += &quot; FROM &quot; + sTable;
        
        // if there is a sort order, add that too
        if (sOrder != null)
        {
            queryString += &quot; ORDER BY &quot; + sOrder;
        }
        
        return queryString;
    }
    
    /**
     * Perform a query on specified database.
     * @param fully qualified database name (use createDatabaseString)
     * @param the SQL query to execute
     */
    public void dbQuery(String s, String queryString)
        throws AdoException 
    {
        // first create a Connection on specified database
        con.setConnectionString(s);
        con.setCursorLocation(AdoEnums.CursorLocation.CLIENT);
        con.open();
        
        // now open a Recordset with the SQL query
        rs.setActiveConnection(con);
        rs.setSource(queryString);
        rs.setCursorType(AdoEnums.CursorType.STATIC);
        rs.setCursorLocation(AdoEnums.CursorLocation.CLIENT);
        rs.setLockType(AdoEnums.LockType.OPTIMISTIC);
        rs.open();
    }

    /**
     * Return the contents of an individual field from a recordset.
     */
    public String getField(String fieldName)
        throws AdoException
    {
        Field f = rs.getField(fieldName);
        return f.getString();
    }

    /**
     * Update the fields within the current recordset.
     * @param commit true-&gt;update the database table
     */
    public void setField(String field, String value, boolean commit)
    {
        Field fld = rs.getField(field);
        fld.setString(value);
        
        if (commit)
        {
           rs.update();
        }
    }
    
    /**
     * Move to the previous record; return false if at
     * beginning of table.
     */
    public boolean movePrevious()
    {
        // if already at beginning of file (the table), 
        // don't go any further
        if (rs.getBOF())
        {
            return false;
        }
        
        // move to the previous entry
        rs.movePrevious();
        
        // BOF now?
        return !rs.getBOF();
    }
    
    /**
     * Move to the next record; return false if at end of table.
     */
    public boolean moveNext()
    {
        // if already at the end of the table, don't go any further
        if (rs.getEOF())
        {
            return false;
        }
        
        // OK, move to the next entry
        rs.moveNext();
        
        // end of table now?
        return !rs.getEOF();
    }
    
    /**
     * Close the current database connection.
     */
    public void close()
    {
        rs.close();
        con.close();
    }
}
</PRE>

<p>The <I>ManualADO</I> class begins with the constructor. This constructor 
appears more complicated than it really is, because it accepts each part of the connection 
string (explained below) as a separate argument. In fact, the first four arguments 
merely describe the database.

<p>In our case, the <I>dbType</I> is <I>MS Access 97 
Database</I>, the <I>dbPath</I> is the path to the database directory, and the 
<I>dbName</I> is <I>MyCompany.mdb</I>. Normally, the 
<I>userID</I> and <I>password</I> arguments are 
<I>null</I>&#8212;unless the database is secured. 

<p>The remaining arguments to the constructor are 
<I>table</I>, which in our case has the value of 
<I>Customers</I>; <I>fields</I>, which is an array of strings that contain the names 
of the fields in which we are interested; and 
<I>sortField</I>, which is the name of the field (column) in 
<I>Customers</I> by which the data is to be sorted. The sort field might or 
might not be one of the members of <I>fields.</I>

<p>The <I>ManualADO()</I> constructor begins by calling 
<I>createDatabaseString()</I> to combine the database name information into an ADO connection string. A 
typical ADO connection string might look like the following:

<p><I>PROVIDER=MSDASQL; dsn= MS Access 97 Database; uid=; pwd=; 
DBQ=\databases\MyCompany.mdb</I>

<p>From there, <I>ManualADO()</I> calls <I>buildSQL() 
</I>to build the SQL <I>SELECT</I> statement. Again, a typical 
<I>SELECT</I> statement might be something like this:

<p><pre>
SELECT CONTACTLASTNAME, CONTACTFIRSTNAME FROM CUSTOMERS 
    ORDER BY PHONENUMBER
</PRE>

<p>Finally, <I>ManualADO()</I> invokes 
<I>dbQuery()</I> to open a connection to the 
database and read its contents.

<p>The<I> dbQuery()</I> method starts by opening a 
<I>Connection</I> object using the connection string built by 
<I>createDatabaseString()</I>. As the name implies, a 
<I>Connection</I> object is a connection to the database. Once the connection has been 
established, the program initializes the 
<I>Recordset</I> object <I>rs</I>.

<p>First, <I>rs</I> is attached to the open 
<I>Connection</I> object. The SQL query string 
built earlier is then passed to 
<I>rs.setSource()</I>. The final call to 
<I>rs.open()</I> performs the query of the database and populates the recordset with information from the database. 
If anything goes wrong with the query, 
<I>dbQuery()</I> throws an <I>ADOException</I>.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The cursor to which the 
<I>Connection</I> and the <I>Recordset</I> objects refer 
is the index of the current row in the SQL database.
</blockquote></div>

<p>The remaining methods are relatively simple. The 
<I>getField()</I> method queries the recordset for the value of the specified field in the current record by getting a 
<I>Field</I> object and then fetching the 
<I>String</I> contents.

<p>The <I>setField()</I> method is almost the reverse of 
<I>getField()</I>. The only difference is that it isn't until the argument 
<I>commit</I> is <I>true</I> that the updated data in the 
recordset is written back to the current row of the database. In this way, a program can 
update all of the fields that have changed within a single row before committing 
the result to the database. This is much faster than writing to the database every time 
each field is updated.

<p>The <I>movePrevious()</I> and <I>moveNext()</I> methods move the cursor to the 
previous and next row of the table, respectively. Both return 
<I>true</I> if the operation was successful and 
<I>false</I> if the beginning of the table or end of the table was 
encountered. Both methods guard against moving past the beginning-of-file and the 
end-of-file, because these would throw an exception.

<p>Finally, <I>close()</I> closes the recordset and the connection to the database. 
This operation is similar to writing the database to disk and exiting Access.

<A NAME="407"><h3>The <I>Form1</I> class</h3></A>
<p>With the bulk of the work done by the 
<I>ManualADO</I> class, the <I>Form1</I> class is 
relatively simple:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

public class Form1 extends Form
{
    // the ManualADO class makes the actual
    // ADO connections
    ManualADO ado;
    
    // define the fields to extract from the database table
    String[] fields = new String[]
                               {&quot;ContactFirstName&quot;,
                                &quot;ContactLastName&quot;,
                                &quot;PhoneNumber&quot;};

    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();    
        
        // create an ADO connection
        String db = &quot;C:\\ProgramVJ\\&quot; +
                    &quot;Windows Database Applications\\Databases\\&quot;;
        ado = new ManualADO(
                        &quot;MS Access 97 Database&quot;, // type of database 
                        db,           // path to database file
                        &quot;MyCompany.mdb&quot;,        // name of database file
                        &quot;&quot;,           // user id (normally &quot;&quot;)
                        &quot;&quot;,           // password (normally &quot;&quot;)
                        &quot;Customers&quot;,  // name of table
                        fields,       // array of fields to extract
                        null);        // sort field (null -&gt; don't sort)
        
        // now update the edit field with the first entry
        updateField(nameEdit);
    }
 
    /**
     * Update the outputEdit field with the current row.
     */
    void updateField(Edit outputEdit)
    {
        // fetch the field contents for the current row
        String[] outFields = getStrings(fields);
            
        // convert the phone number into xxx-xxx-xxxx format
        outFields[2] = phoneToString(outFields[2]);
            
        // generate output string
        String s = outFields[1] + &quot;, &quot; +
                   outFields[0] + &quot; (&quot; +
                   outFields[2] + &quot;)&quot;;
            
        // now output it
        outputEdit.setText(s);
    }
    
    /**
     * Return the database fields from the current recordset 
     * as strings.
     * @return array of strings
     */
    String[] getStrings(String[] fields)
    {
        // allocate enough strings to hold all the fields
        String[] s = new String[fields.length];
        
        // now loop through the fields, fetching their values
        for (int i = 0; i &lt; fields.length; i++)
        {
            // get the string version of each column
            // of the current row
            s[i] = ado.getField(fields[i]);
        }
        return s;
    }

    /**
     * Update the current database entry.
     */
    void setStrings(String[] fields, String[] values)
    {
        // the last field in the list is at this offset
        int last = fields.length - 1;
        
        // update all of the fields except the last w/o commit
        for (int i = 0; i &lt; last; i++)
        {
            ado.setField(fields[i], values[i], false);
        }
        
        // now update the last field and commit it
        ado.setField(fields[last], values[last], true);
    }
    
    /** 
     * Convert a phone number into a string in the format xxx-xxx-xxxx.
     */
    static String phoneToString(String phoneNumber)
    {
        String sAC = phoneNumber.substring(0, 3);
        String sEx = phoneNumber.substring(3, 6);
        String sPh = phoneNumber.substring(6);
        return sAC + &quot;-&quot; + sEx + &quot;-&quot; + sPh;
    }
    
    /**
     * Form1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose()
    {
        super.dispose();
        components.dispose();

        ado.close();
        ado = null;
    }

    private void previousButton_click(Object source, Event e)
    {
        if (!ado.movePrevious())
        {
            nameEdit.setText(&quot;Beginning of database&quot;);
        }
        else
        {
            updateField(nameEdit);        
        }
    }

    private void nextButton_click(Object source, Event e)
    {
        if (!ado.moveNext())
        {
            nameEdit.setText(&quot;End of database&quot;);
        }
        else
        {
            updateField(nameEdit);        
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit nameEdit = new Edit();
    Button previousButton = new Button();
    Button nextButton = new Button();

    private void initForm()
    {
        // &#8230;built by Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>The data member <I>fields</I> contains an array of strings that represent the 
fields within the Customers table that 
<I>Form1</I> is to read and display. After the 
<I>Form1()</I> constructor has initialized the form, 
<I>Form1()</I> creates a <I>ManualADO</I> object to 
access the data within the Customers table of the Access database MyCompany.mdb. 
(Note that the only reason that the path <I>db</I> is broken in two is to allow each part to fit 
on a single line on the page. Also, if the path to MyCompany.mdb on your machine 
isn't the path shown here, you'll need to change this path before this program will work.)

<p>The final call, to <I>updateField()</I>, causes the current record of the table (the 
first record) to be displayed in the <I>Edit</I> object 
<I>nameEdit.</I>

<p>The <I>updateField()</I> method works by first fetching the desired fields from 
the current record, using the local method 
<I>getStrings()</I>. The phone number field is converted from its stored format into that of a U.S. telephone number 
(xxx-xxx-xxxx) using the local method 
<I>phoneToString()</I>. Finally, 
<I>updateField()</I> concatenates the fields into a single string and displays the string in the 
<I>Edit</I> object specified in the argument to 
<I>updateField()</I>.

<p>The <I>getStrings()</I> method accepts an array of field names and returns the 
field values in an array of <I>String</I> objects. The 
<I>getStrings()</I> method begins by allocating 
the output <I>String</I> array to be the same size as the input 
<I>fields</I> array. The method then enters a 
<I>for</I> loop, in which it calls <I>ado.getField() 
</I>on the current record for each field passed in the 
<I>fields</I> array, and saves the result in the output array. The 
<I>setStrings()</I> method is the analogous output method, which isn't used in this example but 
is included as a demonstration.

<p>The <I>dispose()</I> method has been updated from the system-generated code to 
also close the <I>ado</I> object. Closing the 
<I>ado</I> object closes the database.

<p>The <I>previousButton_click()</I> and 
<I>nextButton_click()</I> methods move the current record pointer to the previous record or next record, respectively. If the current 
record pointer is already before the first record in the recordset or after the last record 
in the recordset, then the associated method displays an appropriate message. If 
the current record pointer is at a record, then the local 
<I>updateField()</I> method displays the new record values in the 
<I>nameEdit</I> field.

<A NAME="408"><H2>The Result</H2></A>

<p>The result of your hard work should look something like Figure 12-1. The output 
form is simple, but it does allow you to navigate back and forth within the Customers 
table of the MyCompany.mdb database. 

<P><img src="images/f12gh01.jpg" width=258 height=114 border="0">
<p><!-- caption --><B>Figure 12-1.</b> <i>The appearance of the ManualADO demonstration application 
when used on the simple Customers table of the MyCompany.mdb Access database.</I><!-- /caption -->

<p>Adding more capability&#8212;for example, adding new Insert, 
Delete<I>,</I> and Update buttons&#8212;is just a matter of your adding methods to the 
<I>ManualADO </I>class. Each new method would invoke the proper 
<I>Recordset</I> method for the corresponding button 
and tie it back to the event handler of the button. The code for an Update button is 
already present in ManualADO<I>.</I>

<p>If you decide to add an Insert button, you'll need to add data to all of the 
fields within a row or else the new entry won't be complete. In addition, it's much 
easier to parse user input if you provide a separate edit box for each entry, but it's not 
as attractive.

<p>It's surprisingly simple to access different data from ManualADO. For 
example, you can add records to the Customers table by opening the MyCompany 
database from Access and selecting the Customers table.

<p>To access a new table within MyCompany.mdb, create a table with 
Access, define the fields you want, and add data to the table. Within the ManualADO 
code, update the fields array and change the table name, which is the sixth argument, 
in the call to the <I>ManualADO()</I> constructor within Form1.java.

<p>To access a different database, create a new database with Access and 
then follow the same steps as for accessing a new table. In addition, update the 
third argument to the <I>ManualADO()</I> constructor call to the new database name.

<p>To access a different type of database, such as a Microsoft Visual FoxPro 
database, you'll need to change the data source name (DSN) specification in addition 
to changing the database, table, and field names. It's easy to figure out what this 
new DSN specification should be by looking at the DSN for an Access database: MS 
Access Database. If you have any questions about changing the DSN, create a simple 
application using the Visual J++ Application Wizard as described in the next section, 
and look to see what DSN the wizard came up with.

</BODY>
</HTML>




