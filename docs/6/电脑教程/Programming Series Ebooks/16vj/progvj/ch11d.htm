<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Accessing Your Own DLLs</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11c.htm", "ch11e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="373"><H1>Accessing Your Own DLLs</H1></A>

<p>Up to this point, our J/Direct examples have accessed only functions from the Win32 API. It is also possible to access DLLs of your own making. In this section, we'll 
build a DLL in C and then access this DLL from Visual J++.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
You'll need Visual C++ in order to create the C DLL in this example. Although the steps provided are specific to Visual 
C++ 6, you can use earlier versions of Visual C++ to create this DLL (keeping in mind the options might differ slightly). If you don't have Visual C++, you can use the CPP_DLL.dll file from the Windows Applications\CPP_DLL subdirectory on the companion CD to perform the rest of the example.
</blockquote></div>

<A NAME="374"><H2>The Problem</H2></A>

<p>In this section, we'll solve a problem by using a user-defined DLL. Although this problem could easily be handled in Java alone, it's a good vehicle for learning about user-defined DLLs. We'll create a Visual J++ 6 application that displays a form with a button and an edit box. When the user chooses the button, the application causes the computer to beep and then displays in the output edit box the hours, 
minutes, and seconds in UTC.

<P>What makes this application instructive is that both the function that sends a beep to the speaker and the function that retrieves the current system time will be contained in a user-defined DLL.

<A NAME="375"><H2>The CPP_DLL Dynamic-Link Library</H2></A>

<p>Before we can access a user-defined DLL from Visual J++ 6, we must build our own DLL. In this section, we'll build the DLL named CPP_DLL.

<A NAME="376"><H3>The Forms Designer work</H3></A>

<p>To create a DLL in Visual C++, choose New from the File menu and then select the Win32 Dynamic-Link Library option from the New dialog box. Do not select the MFC AppWizard (dll) option&#8212;this will create a DLL that incorporates MFC.

<P>Enter CPP_DLL as the Project Name, and choose OK. Select An Empty DLL Project from the AppWizard window that appears, and choose Finish. This will create a project with the proper options set but won't create any source files. Choose New from the File menu again. This time, select the Files tab and select Text File. Make sure the Add To Project check box is checked, and insert the file name CPP_DLL.c. Choose OK. Visual C++ 6 will add the CPP_DLL.c file to the project. (Under earlier versions of Visual C++, you had to add the file manually.)

<A NAME="377"><H3>The code</H3></A>

<p>Open the CPP_DLL.c file and enter the following:

<p><pre>
// CPP_DLL - user-defined DLL

// windows.h contains the prototype declarations for the Win32
// API functions including Beep() and GetSystemTime()
#include &lt;windows.h&gt;

// the following prototype declaration declares beepSpeaker
// to be an entry point for the DLL
__declspec(dllexport) void beepSpeaker(int freq, int duration);

// the following structure and prototype declares
// a function that returns the time of day in Universal
// Time Coordinate
struct UTCTime
{
    WORD hour;
    WORD minute;
    WORD second;
};
__declspec(dllexport) void getUTCTime(struct UTCTime*);

// beepSpeaker - invoke the Beep() Win32 API function
void beepSpeaker(int freq, int duration)
{
    Beep(freq, duration);
}

// getUTCTime - use the GetSystemTime Win32 API function 
//              to fetch the current UTC time of day
//              and return it in the argument provided
void getUTCTime(struct UTCTime* pUTCTime)
{
    // get the SYSTEMTIME using the Win32 API call
    SYSTEMTIME systemTime;
    GetSystemTime(&amp;systemTime);

    // now get the time of day from the SYSTEMTIME
    // structure and save it in the UTCTime structure
    // passed to the function
    pUTCTime-&gt;hour   = systemTime.wHour;
    pUTCTime-&gt;minute = systemTime.wMinute;
    pUTCTime-&gt;second = systemTime.wSecond;
}
</PRE>

<p>CPP_DLL.c begins by including windows.h. This gives CPP_DLL.c access to the Win32 API calls.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The C <I>#include</I> directive is roughly equivalent to the Java <I>import</I> directive.
</blockquote></div>

<p>A prototype declaration for <I>beepSpeaker()</I> follows the <I>#include</I> directive. This declaration specifies the arguments <I>freq</I> and <I>duration</I> to be of type integer. The <I>__declspec(dllexport)</I> part of the declaration exports the <I>beepSpeaker()</I> method. Exporting the method makes it accessible from outside the DLL (similar to the Java <I>public</I> directive).

<P>The second method, <I>getUTCTime()</I>, communicates with the calling function by means of a locally defined structure called <I>UTCTime</I>. This method is also exported by means of a <I>__declspec(dllexport) </I>modifier.

<P>The code for the <I>beepSpeaker()</I> method is trivial; it calls the Win32 API <I>Beep()</I> method and passes the two arguments <I>freq</I> and <I>duration</I>. (The fact that <I>beepSpeaker()</I> calls a Win32 API is irrelevant. The point is that <I>beepSpeaker()</I> is a user-defined method.)

<P>The code for <I>getUTCTime()</I> is only slightly more complicated. It begins by reading the system time by means of <I>GetSystemTime()</I>. It then populates the locally 
defined <I>UTCTime</I> structure with the hour, minute, and second fields of the returned system time.

<A NAME="378"><H3>The result</H3></A>

<p>Choose Set Active Configuration from the Build menu and choose the option CPP_DLL - Win32 Release. Now select Build CPP_DLL.dll from the Build menu. Building this project file generates a Release subdirectory containing a DLL with the 
name CPP_DLL.dll. Once you have built the DLL, close Visual C++.

<P><DIV CLASS="caution"><BLOCKQUOTE>
<B>CAUTION</B>
<HR>It's important that this file be compiled as a C program and not as a CPP program. (The name of the DLL reflects the fact that it originated from the Visual C++ module of Visual Studio.) The default option is for all .C files to be compiled as C programs. If you have changed that option, you'll need to set it back for this test.
</blockquote></div>

<A NAME="379"><H2>The CustomDLL Application</H2></A>

<p>Now that we have a DLL to access, let's create an application named CustomDLL to access it.

<A NAME="380"><H3>The Forms Designer work</H3></A>

<p>First, create a Visual J++ Windows application named CustomDLL. Open the Form1.java file in the Forms Designer. Resize the form to hold a single button below a 
standard-sized Edit control. Set the form's <I>text</I> property to <I>CustomDLL</I> <I>Application</I> to change the program's name in the form's title bar.

<P>Add an Edit control to the form. Set its name to <I>timeEdit</I>. Use the property window to clear the control's <I>text</I> property so that <I>timeEdit</I> initially appears blank. Now add a Button control immediately below the Edit control, and label it 
<I>Get UTC Time</I>. Anchor the Edit control to the top, left, and right edges of the form, and anchor the Button control to the bottom, left, and right edges of the form.

<P>Double-click the Button control to create its click event handler.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Now is a good time to copy the CPP_DLL.dll file into your 
CustomDLL directory. Alternatively, you can copy the DLL into the Windows\System directory. You must do this before you can execute the application; otherwise, CustomDLL won't be able to find CPP_DLL.dll.
</blockquote></div>

<A NAME="381"><H3>The MyDLL code</H3></A>

<p>First we'll need to add a <I>MyDll</I> class to provide the interface to the C functions included in the CPP_DLL dynamic-link library.

<P>Choose Add Item from the Project menu. Now select Class and give it the name MyDLL. This will create the file MyDLL.java and add it to the project. Update the blank Java file as follows:

<p><pre>
/**
 * Define access methods for CPP_DLL.dll.
 */
public class MyDLL
{
    /**
     * The beepSpeaker() method beeps the speaker.
     * @dll.import(&quot;CPP_DLL&quot;)
     */
    public static native void beepSpeaker(int freq, int duration);
    
    /**
     * The UTC time structure.
     * @dll.struct() 
     */
    public static class UTCTime
    {
        public short hour;
        public short minute;
        public short second;
    }
    
    /**
     * The getUTCTime() method retrieves the UTC time of day.
     * @dll.import(&quot;CPP_DLL&quot;)
     */
    public static native void getUTCTime(UTCTime utcTime);
}
</PRE>

<p>The class <I>MyDLL</I> defines two static native functions. Both follow the pattern 
for J/Direct declarations we have seen earlier.

<P>The first <I>dll.import() </I>directive declares <I>beepSpeaker()</I> to be a member of the CPP_DLL dynamic-link library. Following this is the prototype declaration for 
the <I>beepSpeaker()</I> function. It's important that the declaration match the C declaration 
in CPP_DLL.c exactly.

<p>The <I>dll.struct()</I> directive defines a relatively straightforward C structure 
called <I>UTCTime</I>. The declaration for 
<I>getUTCTime()</I> declares the function's argument to 
be a reference to <I>UTCTime</I>.

<P><DIV CLASS="note"><BLOCKQUOTE>
<B>NOTE</B>
<HR>Compare the Visual J++ 6 prototype declaration <I>static void getUTCTime(UTCTime utcTime)</I> to the C declaration 
<I>void getUTCTime(struct UTCTime* pUTCTime)</I>. J/Direct can't pass a structure to a C function by value.
</blockquote></div>

<A NAME="382"><H3>The Form1.java code</H3></A>

<p>The Form1.java code is straightforward.

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * Demonstrate the use of the user-defined DLL.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();        
    }

    /**
     * Make sure that the time string is 2 digits.
     */
    String padTime(String time)
    {
        // if time is already 2 digits&#8230;
        if (time.length() == 2)
        {
            // just return it; otherwise&#8230;
            return time;
        }

        // tack a 0 onto the front
        return &quot;0&quot; + time;
    }

    private void button1_click(Object source, Event e)
    {
        // get the time of day
        MyDLL.UTCTime time = new MyDLL.UTCTime();
        MyDLL.getUTCTime(time);
 
        // now display it, making sure each
        // field is 2 digits wide
        String hour = Integer.toString(time.hour);
        hour = padTime(hour);
        
        String minute = Integer.toString(time.minute);
        minute = padTime(minute);
        
        String second = Integer.toString(time.second);
        second = padTime(second);
        
        // display the result in the Edit control
        timeEdit.setText(&quot;UTC time:&quot; +
                         hour   + &quot;:&quot; +
                         minute + &quot;:&quot; +
                         second);
        
        // now send a beep to the speaker
        MyDLL.beepSpeaker(400, 1000);
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit timeEdit = new Edit();
    Button button1 = new Button();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>The <I>button1_click()</I> method begins by creating an object <I>time</I> of class <I>MyDLL.UTCTime</I>. The method then invokes 
<I>getUTCTime()</I> to populate the <I>time</I> object with the current UTC time.

<P>Each of the data members of <I>time</I> is converted into a string and then passed 
to <I>padTime(),</I> to make sure that the value in each field is two characters long. (In 
other words, &quot;1&quot; should be displayed as &quot;01&quot;.) Once all the data members have been 
converted into two-character strings, the strings are concatenated with a colon in 
between. The result is displayed in the <I>timeEdit</I> object using <I>Edit.setText()</I>. Before 
returning, <I>button1_click()</I> calls <I>MyDLL.beepSpeaker()</I> to send a beep to the speaker.

<A NAME="383"><H3>Results</H3></A>

<p>The results of executing CustomDLL are shown in Figure 11-4.

<P><IMG SRC="images/f11gh04.jpg" width=248 height=153 BORDER="0">
<P>
<!-- caption --><B>Figure 11-4.</b> <i>The UTC time of day displayed by CustomDLL.</I><!-- /caption -->

<P>It's interesting to see which system DLLs are loaded when CustomDLL 
executes. Choose About from the Visual J++ Help menu. Now choose System Info to bring 
up the Microsoft System Information window. Under the Software Environment 
folder, select 32-bit Modules Loaded. This window enables you to look at a list of the 
DLLs that are currently in memory. After scrolling through a long list of names, you'll 
come upon our own CPP_DLL<I> </I>as shown in Figure 11-5.

<P><A HREF="javascript:fullSize('f11gh05x.htm')"> <img src="images/f11gh05.jpg" width=404 height=225 border=0 ALT="Click to view at full size."> </A>
<P>
<!-- caption --><B>Figure 11-5.</b> <i>The System Information display showing our CPP_DLL among the list of 32-bit DLLs currently loaded.</I><!-- /caption -->

<P>Now exit CustomDLL. Scroll through the 32-bit Modules Loaded list again 
and you'll notice that the CPP_DLL dynamic-link library is gone.

<A NAME="384"><H3>An aside</H3></A>

<p>You might be tempted to think that the CustomDLL program is no different than 
the earlier applications that invoked the Win32 API functions directly. From the 
calling program's standpoint, it isn't. After all, the user-defined DLL doesn't do anything 
more than call the necessary Win32 API. However, the CPP_DLL.dll functions could 
have done a lot more than simply call a single Win32 API. By following the pattern 
demonstrated in CustomDLL, you can create your own dynamic link libraries to do 
anything you like.

</BODY>
</HTML>




