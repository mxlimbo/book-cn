<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The File Menu</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07a.htm", "ch07c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="212"><H1>The File Menu</H1></A>

<p>The left-most menu for any editor is the File menu. Since this menu is as good a 
place to start as any, we'll build our initial Editor1 application around the File menu. 
Once we've mastered the File menu, adding further menu items will be a breeze.

<A NAME="213"><H2>The Forms Designer Work</H2></A>

<p>As always, create the Editor1 project using the Windows Application builder. In 
Project Explorer, double-click Form1.java to open the Forms Designer. The majority of 
the work on Editor1 can be completed from within the Forms Designer.

<A NAME="214"><H3>Building the menus</H3></A>

<p>To create the Editor1 application, begin by dragging a MainMenu control from 
the Toolbox to the Forms Designer. Unlike most controls, it doesn't really matter 
where you drop the MainMenu control&#8212;the menu will always appear along the top of 
the form. As soon as you drop the MainMenu control, a small box appears with the 
prompt &quot;Type Here&quot;.

<p>Start by typing <I>&amp;File</I>. The ampersand tells the Forms Designer that the 
access key for this menu option is F&#8212;that is, the user can enter Alt+F rather than click 
the File menu. Instead of displaying the ampersand, the Forms Designer underscores the F.

<p>As soon as you begin typing in the first Type Here box, two more Type 
Here boxes open up: one below for the first submenu item and one to the right for 
the next menu item. The Edit menu will go to the right of the File menu, but for the 
Editor1 application let's stick with the File menu. Add the File menu items for New, 
Open&#8230;, Save, Save As&#8230;,<I> </I>and Exit. Figure 7-1 shows the
Editor1 menu items being edited.

<p><img src="images/F07gh01.JPG" width=352 height=374 border="0">

<p><!-- caption --><b>Figure 7-1.</b> <i>The Forms Designer showing the menu editor
for creating menu items.</i><!-- /caption -->

<p>Once the File menu is complete, return to the Properties window to give 
each submenu item a name related to the menu item's function, such as 
<I>openFileMI</I> for the Open menu item on the File menu. At the same time, edit the 
<I>shortcut</I> property to define shortcut keys for the two most common file commands: Ctrl+S for Save 
and Ctrl+X for Exit. Figure 7-2 shows the Ctrl+S key combination being assigned to 
the Save command.

<p><A HREF="javascript:fullSize('F07gh02x.htm')"> <img src="images/F07gh02.JPG" width=404 height=299 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 7-2.</b> <i>Setting a shortcut key enables the user to access the menu item from 
the keyboard with two keystrokes.</i><!-- /caption -->

<A NAME="215"><H3>Building the dialog boxes</H3></A>

<p>Thinking ahead, it is clear that the Open menu item on the File menu will need 
to open a dialog box from which the user can select the file to open. Fortunately, 
the Toolbox includes an OpenFileDialog control that creates just such a
dialog box.

<p>To add an Open file dialog box to the application, simply drag an 
OpenFileDialog control to the form. Like the MainMenu control, it doesn't matter where 
you put the object. This is because the dialog box is opened as a separate window. 
I named my OpenFileDialog control <I>openFD</I>. In addition, I set the default 
extension to .<I>rtf</I>; if the user enters a file name without an extension, the Open file dialog 
box will assign this extension. Finally I set the 
<I>filter</I> property to <I>*.rtf</I>, as shown in 
Figure 7-3. This sets the initial file filter to search for the RTF files that the editor 
specializes in. The Open file dialog box is created hidden. I will eventually have to add the 
code to unhide the Open file dialog box when it is needed.

<p>Repeat this process for adding the dialog box to display when the user 
chooses Save As (or Save, if the file has never been saved). This time you'll use the 
SaveFileDialog control. You can use the same property settings as for the 
OpenFileDialog control, except the name of this object is 
<I>saveFD</I>.

<p><A HREF="javascript:fullSize('F07gh03x.htm')"> <img src="images/F07gh03.JPG" width=404 height=299 border=0 ALT="Click to view at full size."> </A>

<p><!-- caption --><b>Figure 7-3.</b> <i>When setting up the OpenFileDialog control, remember to set the 
filter and the default extension to match the functionality of the application.</i><!-- /caption -->

<A NAME="216"><H3>Finishing the design</H3></A>

<p>Only a few final touches remain to the design of the form. First there is the 
addition of the all-important RichEdit control. Add this control as shown in <A HREF="ch06a.htm">Chapter 6</A> 
and anchor it to all four walls of the form so that it will resize with the form.

<p>Second, add a StatusBar control along the bottom of the form. We'll use 
this status bar to display the name and path of the file being edited, along with an 
indication of when the file has changed and therefore should be saved before 
exiting the application. It is possible to write text directly to the 
<I>StatusBar</I> object, but the output has a flat appearance. To get the 3-D effect of modern applications, it's 
better to add a <I>StatusBarPanel </I>object to the StatusBar control and write to that 
object. Select the <I>panels</I> property of the StatusBar control, and then click the ellipses 
button in the property setting box. This opens the Panel Editor dialog box, which 
enables the programmer to add panels. Add a single panel, and then close the 
dialog box. Set the StatusBar's <I>showPanels</I> property to 
<I>true</I>.

<p>Then change the name of the status bar panel to 
<I>outputPanel</I> to reflect its function. I cleared out the default text within the panel; this will be filled in with the 
name of the file being edited. Setting the panel's 
<I>autoSize</I> property to <I>Spring</I> enables 
the panel to take up all available space within the status bar. Finally, setting the 
<I>borderStyle</I> to <I>Sunken</I> (the default) gives the toolbar the desired 3-D effect. Figure 
7-4 shows the properties for the status bar panel as we've edited them.

<p><img src="images/F07gh04.JPG" width=297 height=431 border="0">

<p><!-- caption --><b>Figure 7-4.</b> <i>To give the status bar a 3-D effect, first add a panel and then set 
its </I>autoSize<I> property to </I>Spring<I> and its 
</I>borderStyle<I> property to </I>Sunken<I>.</i><!-- /caption -->

<A NAME="217"><H2>The Code for Editor1</H2></A>

<p>Even though the Forms Designer has done most of the work in building 
Editor1, there's still a sizable amount of code to be written. To keep Form1.java as simple 
as possible, I decided to create a separate class to maintain the rich edit and status 
bar controls. Let's examine this helper class before we get into the 
<I>Form1</I> class.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Don't be afraid to divide your project into separate classes as long 
as each new class has a clear purpose. Two small classes are easier to 
maintain than one large class.
</blockquote></div>

<A NAME="218"><h3>The <I>RichEditController</I> class</h3></A>
<p>The primary job of the 
<I>RichEditController</I> class is to provide the 
<I>load()</I> and <I>save()</I> methods to load data from disk into the rich edit control and save the contents 
of the rich edit control back to disk. Along the way, 
<I>RichEditController</I> also keeps the status bar updated with the name of the file currently being edited and an 
indicator of whether the rich edit control is dirty or not. A rich edit control is 
<I>dirty</I> when its contents have been updated by the user since the last time the contents were 
saved to disk. Finally, <I>RichEditController</I> ensures that the edits are not inadvertently lost 
if the user forgets to save.

<p>To create a new source file, choose New<I> </I>File from the Microsoft Visual J++ 
File menu and then select Java File from the Visual 
J<I>++</I> folder. This creates a .java file with a default name and adds the file
to the project.

<p>You should rename the file to match the name of the class it is to hold. This 
is a requirement if the class is <I>public</I>. You do this by choosing Save As from the 
File menu and supplying a new name for the file. I named my 
<I>.</I>java file and class 
<I>RichEditController</I>. The code listing for this module is as follows:

<p><pre>
/**
 * This class provides the file load
 * and store operations we want for the
 * rich edit control.
 */
import com.ms.wfc.ui.*;
import com.ms.wfc.core.*;
import com.ms.wfc.io.*;
import com.ms.wfc.app.*;

public class RichEditController
{
    // form to which this controller is attached
    Form form;
    EventHandler saveHandler;
    
    // the rich edit control
    RichEdit re;
    
    // status bar panels
    StatusBarPanel fileNamePanel;
    
    // file name
    String    fileName = &quot;&quot;;
    
    /**
     * Create a controller to handle rich edit I/O.
     * 
     * @param form - Parent Form
     * @param saveHandler - the File|Save event handler
     * @param re - RichEdit control
     * @param fileNamePanel - file name goes here
     */
    RichEditController(Form           form,
                       EventHandler   saveHandler,
                       RichEdit       re,
                       StatusBarPanel fileNamePanel)
    {
        this.form = form;
        this.saveHandler = saveHandler;
        this.re = re;
        this.fileNamePanel = fileNamePanel;
  
        // add event handlers:
        // record whenever text changes
        re.addOnTextChanged(
               new EventHandler(this.re_OnTextChanged));
        
        // intercept exit - if text changes, give user
        // the chance to save the text
        Application.addOnApplicationExit(
               new EventHandler(this.saveOnChange));
    }
    
    /**
     * Note that the rich edit control has changed.
     */
    void re_OnTextChanged(Object o, Event e)
    {
        if (!textChanged)
        {
            updateStatusBar(true);
        }
    }
    
    /**
     * Give the user a chance to save changes.
     */
    void saveOnChange(Object s, Event e)
    {
        // if the rich edit control hasn't changed&#8230;
        if (!textChanged)
        {
            // no worries
            return;
        }
        
        // otherwise, pop up a message box
        int yn = MessageBox.show(&quot;Save file?&quot;,
                                 &quot;Text changed&quot;,
                                 MessageBox.ICONWARNING |
                                 MessageBox.OKCANCEL);
        
        // if the user selected OK&#8230;
        if (yn == DialogResult.OK)
        {
            // act like she selected File|Save
            saveHandler.invoke(form, e);
        }
    }

    /**
     * Set the name of the file.
     */
    void setFileName(String fileName)
    {
        this.fileName = fileName;
        updateStatusBar(false);
    }
 
    /**
     * Get the name of the current file.
     */
    String getFileName()
    {
        return fileName;
    }
    
    /**
     * Update the status bar with the name of the file
     * plus an indication of whether the file has changed
     * or not. Update the textChanged flag as well.
     * 
     * @param textChanged - the new textChanged value
     */
    boolean textChanged = false;
    void updateStatusBar(boolean textChanged)
    {
        if (this.textChanged != textChanged)
        {
            this.textChanged = textChanged;
            
            fileNamePanel.setText(fileName
                    + (textChanged ? &quot; changed&quot; : &quot;&quot;));
        }
    }
        
    /**
     * Open the default file name into the
     * rich edit control.
     */
    void load()
    {
        // first make sure it's okay to trash current contents
        saveOnChange(null, null);
        
        // open the specified file
        try
        {
            re.loadFile(fileName);
            updateStatusBar(false);
        }
        
        // first catch invalid file type
        catch(WFCInvalidArgumentException e)
        {
            re.setText(&quot;Invalid (non-RTF) file&quot;);
        }
        
        // handle all others the same way
        catch(Exception e)
        {
            re.setText(e.getMessage());
        }
    }
    
    /**
     * Save the contents of the current rich edit control to
     * the current file.
     */
    void save()
    {
        re.saveFile(fileName);
        updateStatusBar(false);
    }
}
</PRE>

<p>The <I>RichEditController</I> class maintains a number of data members:
<UL>
<P><li> <I>form</I> refers to the parent <I>Form1</I> object.
<P><li> <I>saveHandler </I>refers to the <I>EventHandler</I> for the Save menu item on the File menu.
<P><li> <I>re </I>refers to the <I>RichEdit</I> object that the current class is to keep track of.
<P><li> <I>fileNamePanel </I>contains a reference to the panel where the name of 
the file currently being edited is stored.
<P><li> <I>fileName </I>contains the name of the file being edited.
<P><li> <I>textChanged </I>is set to <I>true</I> whenever the 
<I>RichEdit</I> object is dirty.
</UL>

<p>The <I>RichEditController</I> class constructor accepts a reference to the form, 
event handler, rich edit control, and file name status bar panel that the object is to 
control. After saving these locally the <I>RichEditController() 
</I>constructor establishes two event handlers.

<p>The first event handler 
<I>re_OnTextChanged()</I> is invoked whenever the 
contents of the <I>RichEdit</I> object change. This method simply records the fact that the 
<I>RichEdit</I> object is dirty by setting 
<I>textChanged</I> to <I>true</I>. The 
<I>updateStatusBar()</I> method updates the status bar panel to inform the user that the file is now dirty. (If the 
<I>textChanged</I> flag is already set, the function returns without doing anything.)

<p>The <I>RichEditController</I> constructor finishes by establishing 
<I>saveOnChange()</I> as the 
<I>OnApplicationExit</I> event handler, meaning that WFC calls 
<I>saveOnChange()</I> before terminating the 
application<I>.</I> The purpose of 
<I>saveOnChange()</I> is to make sure that the user does not lose any edited data by exiting without saving. To do 
this,<I> saveOnChange()</I> first checks the 
<I>textChanged</I> flag. If its value is 
<I>false</I>, the <I>RichEdit</I> 
object isn't dirty and the function returns without taking any action.
If the flag's value is <I>true</I>, the function pops up a message box.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The message box is also known in some circles as an alert.
</blockquote></div>

<p>Unlike other control types, you do not create a 
<I>MessageBox</I> object yourself. Instead, you invoke the static method 
<I>MessageBox.show()</I> to create and immediately show the message box. The first two arguments to 
<I>show()</I> are the message and the title. The title appears in the title bar
of the message box.

<p>The last argument to the <I>show()</I> method is the style. This argument is a 
combination of the icon and the button styles (combined using the OR operator).
The different icon styles display different graphical symbols in the message box;
the <I>ICONWARNING</I> style displays a yield sign. The button styles each display
a different set of buttons; the <I>OKCANCEL</I> button style creates an OK 
button and a Cancel button in the message box.

<P>Since message boxes are always modal, the call to 
<I>show()</I> does not return until the user has selected one of the buttons on the
message box. The <I>show()</I> method returns the value <I>OK</I> if the user
selects OK.

<P>If <I>show()</I> returns <I>OK</I>, <I>saveOnChange() 
</I>calls <I>saveHandler.invoke().</I> This 
invokes the <I>EventHandler</I> passed to the class constructor as the Save menu
item handler. Calling <I>invoke()</I> this way simulates the event actually
occurring, exactly as if the user had clicked the Save menu item.

<p>The <I>getFileName()</I> and <I>setFileName()</I>
 methods return the current file name and update the current file name,
 respectively. The <I>setFileName()</I> method also updates the status bar to
 reflect the new name.

<p>The <I>updateStatusBar()</I> method uses the 
<I>textChanged</I> flag. Whenever the value of this flag changes, 
<I>updateStatusBar()</I> updates the name of the current default 
file on the status bar. If the <I>RichEdit</I> object is dirty, 
<I>updateStatusBar()</I> tacks the string 
&quot;changed&quot; onto the end of the file name before writing it to the 
<I>fileNamePanel </I>object.

<P>The <I>load()</I> and <I>save()</I> methods are similar to like-named methods in
the rich edit control example in <A HREF="ch06a.htm">Chapter 6</A>.

<A NAME="219"><h3>The <I>Form1</I> class</h3></A>
<p>Armed with the <I>RichEditController </I>class, the code for 
<I>Form1</I> is almost anticlimactic:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

import com.ms.wfc.io.*;

/**
 * This class represents the File section of our
 * RTF editor.
 */
public class Form1 extends Form
{
    // rec controls the RichEdit object and the status bar
    RichEditController rec;
                           
    public Form1(String[] args)
    {
        // Required for Visual J++ Form Designer support
        initForm();

        // build a controller for the rich edit control; this
        // will handle all of the I/O duties
        rec = new RichEditController(this,
                  new EventHandler(this.saveFileMI_click),
                  richEdit, outputPanel);
 
        // if there is a file name present&#8230;
        String defaultDirectory;
        if (args.length == 1)
        {
            // &#8230;then load it&#8230;
            rec.setFileName(args[0]);
            rec.load();
 
            // and record the file's directory;
            defaultDirectory = File.getDirectory(args[0]);
        }

        // otherwise, start in the current directory
        else
        {
            defaultDirectory = File.getCurrentDirectory();
        }
 
        // now set the default directory as the initial
        // directory for both the open and save dialog boxes
        openFD.setInitialDir(defaultDirectory);
        saveFD.setInitialDir(defaultDirectory);
    }

    /**
     * Form1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose()
    {
        super.dispose();
        components.dispose();
    }

    private void newFileMI_click(Object source, Event e)
    {
        // make sure it's okay to trash current contents
        rec.saveOnChange(null, null);
        
        // wipe out the contents of the rich edit
        richEdit.setText(&quot;&quot;);
        
        // wipe out the old file name
        rec.setFileName(&quot;&quot;);
    }

    private void openFileMI_click(Object source, Event e)
    {
        // make sure it's okay to trash current contents
        rec.saveOnChange(null, null);
        
        // open the Open dialog; if user selects OK&#8230;
        if (openFD.showDialog() == DialogResult.OK)
        {
            // open the file
            rec.setFileName(openFD.getFileName());
            rec.load();
        }        
    }

    private void saveFileMI_click(Object source, Event e)
    {
        // if there is no current file&#8230;
        if (rec.getFileName().equals(&quot;&quot;))
        {
            // treat this as a Save As
            saveAsFileMI_click(source, e);
            return;
        }
        
        // save contents into current file name
        rec.save();       
    }

    private void saveAsFileMI_click(Object source, Event e)
    {
        if (saveFD.showDialog() == DialogResult.OK)
        {
            rec.setFileName(saveFD.getFileName());
            rec.save();
        }
    }

    private void exitFileMI_click(Object source, Event e)
    {
        Application.exit();       
    }
    
    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor. Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    MainMenu mainMenu = new MainMenu();
    MenuItem fileMI = new MenuItem();
    MenuItem newFileMI = new MenuItem();
    MenuItem openFileMI = new MenuItem();
    MenuItem saveFileMI = new MenuItem();
    MenuItem saveAsFileMI = new MenuItem();
    MenuItem exitFileMI = new MenuItem();
    OpenFileDialog openFD = new OpenFileDialog();
    SaveFileDialog saveFD = new SaveFileDialog();
    RichEdit richEdit = new RichEdit();
    StatusBar statusBar = new StatusBar();
    StatusBarPanel outputPanel = new StatusBarPanel();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1(args));
    }
}
</PRE>

<p>I added the variable <I>args</I> containing the program arguments to the 
constructor for <I>Form1</I> so that if a file name is passed as the first argument
to the program, 
<I>Form1()</I> can load the file immediately. This addition is primarily to support
initial drag-and-drop capability as explained in <A HREF="ch06a.htm">Chapter 6</A>.

<P>Upon startup, the <I>Form1()</I> constructor invokes 
<I>initForm() </I>to allow the Forms Designer_generated code to create the form.
Upon return from <I>initForm()</I>, <I>Form1()</I> creates the 
<I>RichEditController</I> object described earlier. The 
<I>EventHandler</I> object passed to <I>RichEditController 
</I>points to the method <I>saveFileMI_click()</I>.

<P>Once the <I>RichEditController</I> object has been created, it can be used to
load the file name contained in <I>args[0]</I>, if one is present. If there is a
file name contained 
in <I>args[0]</I>, the string variable 
<I>defaultDirectory</I> is set to the path to that file; 
otherwise, <I>defaultDirectory</I> is set to the current directory. This 
<I>defaultDirectory</I> value is then used as the initial directory for both the Open file dialog box, 
<I>openFD</I>, and the Save As file dialog box, 
<I>saveFD</I>. (If we don't set the directory, the Windows default 
directory will be used in both dialog boxes, which I find inconvenient.)

<P>The next five methods (following the 
<I>dispose()</I> method) are each attached to their respective File menu items.
For example, double-clicking the New menu 
item in the Forms Designer created the method 
<I>newFileMI_click()</I>. We added code to this method so that it first calls 
<I>saveOnChange() </I>to make sure that the user isn't 
mistakenly wiping out any new text that might already be in the rich edit control. If 
the <I>RichEdit</I> object is empty, this call has no effect. The 
<I>newFileMI_click()</I> method then clears out the text within the 
<I>RichEdit</I> object and clears out the current file name.

<P>The <I>openFileMI_click()</I> method, which is invoked from the Open menu 
item, first calls <I>saveOnChange() </I>and then opens the Open file dialog box 
<I>openFD</I>. Calling <I>showDialog() </I>makes the 
<I>openFD</I> dialog box visible. Since this dialog box is 
modal, control does not return from 
<I>showDialog()</I> until the user chooses the OK or 
Cancel button. If <I>openFD.showDialog()</I> returns the value 
<I>OK</I>, then <I>openFileMI_click()</I> sets the current file name and then loads
that file into the 
<I>RichEdit </I>object<I>.</I>

<P>The <I>saveFileMI_click()</I> method first checks to see if there is a current
file name. If there is, <I>saveFileMI_click()</I> invokes 
<I>rec.save() </I>to save the contents of 
the <I>RichEdit</I> object to the file. If there is no current file, 
<I>saveFileMI_click()</I> calls 
<I>saveAsFileMI_click()</I>. Thus, when there is no file name, clicking Save is
identical to choosing Save As.

<P>The <I>saveAsFileMI_click()</I> method opens the 
<I>saveFD</I> Save As file dialog box. The Save As file dialog box is
very similar to the Open file dialog box 
<I>openFD</I>. If the dialog box object returns an 
<I>OK</I> indication, <I>saveAsFileMI_click()</I> retrieves from 
<I>saveFD</I> the file name chosen by the user and stores it as the default current file name before 
calling <I>rec.save()</I>.

<P>The <I>exitFileMI_click()</I> method simply calls 
<I>Application.exit() </I>to terminate the program. (Remember that before the application exits, 
<I>RichEditController.saveOnChange() </I>will be invoked if the 
<I>RichEdit</I> object is dirty, to allow the user to save 
any modifications.)

<A NAME="220"><H3>How well does it work?</H3></A>

<p>Figure 7-5 shows Editor1 with the File menu open. From the status bar, you can 
see the path to the file currently being edited and that the contents of the rich edit 
window are dirty.

<P><img src="images/F07gh05.JPG" width=374 height=263 border="0">
<P><!-- caption --><B>Figure 7-5.</b> <i>The Editor1 application with a complete set of File menu items.</I><!-- /caption -->

<p>Figure 7-6 shows the warning message that appears when you try to open 
a new file without saving the modified file.

<p>If you click the OK button, Editor1 saves the file and then opens the Open 
file dialog box as shown in Figure 7-7. (If the file is new and has never been saved, 
clicking OK will first open the Save As dialog box, allowing you to specify a name 
and location to save the new file to before opening the Open dialog box.)

<p>What is needed now to turn this initial version into a more full featured 
editor<I> </I>are a couple of additions, such as an Edit menu, a toolbar, and a
context menu.

<p><img src="images/F07gh06.JPG" width=374 height=263 border="0">

<p><!-- caption --><b>Figure 7-6.</b> <i>The Text Changed message box warns the user
that the edited contents of the rich edit window are potentially about to be
lost.</i><!-- /caption -->

<P><A HREF="javascript:fullSize('F07gh07x.htm')"> <img src="images/F07gh07.JPG" width=404 height=283 border=0 ALT="Click to view at full size."> </A>
<P><B>Figure 7-7.</b> <i>Editor1 uses the standard Open dialog box to allow
you to select a file to open.</I>

<p><div class="sidebar"><blockquote>
<p><b>WHY PASS AN <i>EVENTHANDLER</i> OBJECT?</b><hr>
<p>You may wonder why I bothered passing an 
<I>EventHandler</I> object to the constructor for the 
<I>RichEditController </I>class. <I>Form1</I> created an 
<I>EventHandler</I> object from <I>saveFileMI_click() </I>and then passed it to the 
<I>RichEditController()</I> constructor. The 
<I>EventHandler</I> object was used in only one place and that was 
to call <I>saveFileMI_click() </I>to save the current file before loading a new one. 
Why not just call <I>saveFileMI_click()</I> directly?

<p><div class="note"><blockquote>
<b>NOTE</b><hr>Using the <I>EventHandler</I> class in this way is very much like 
registering a callback function in C or C++.</blockquote></div>

<p>A service class, such as 
<I>RichEditController</I>, should make as few 
assumptions about other user classes as possible. However, 
<I>RichEditController</I> must make assumptions about library classes such as those that make up WFC. 
For example, when I wrote 
<I>RichEditController</I> I knew that the method 
<I>StatusBarPanel.setText()</I> exists and I knew what its arguments are.

<p>Because <I>Form1</I> isn't part of the Java class libraries, you shouldn't 
assume that any <I>Form1</I> object passed will have a 
<I>saveFileMI_click()</I> method or that the method's purpose is to process a Save command. It is much better for the 
author of <I>RichEditController</I> to ask the outside world for a method that 
performs the Save function.

<p>In effect, that's exactly what the constructor of 
<I>RichEditController</I> is doing. It is saying, &quot;I need a reference to your 
<I>Form</I> object and a reference to your Save handler.&quot; Its presence in the constructor's argument list alerts you that such a routine is required. This approach makes no assumptions about what 
Save routine might be called.
</blockquote></div>

</BODY>
</HTML>




