<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Adding Extras</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm", "ch07e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="224"><H1>Adding Extras</H1></A>

<p>Our editor is almost complete&#8212;only two additions remain. The first addition is 
a toolbar to provide quick access to the menu item commands. The second 
addition is the context menu, the type of menu that pops up when the user clicks the 
right mouse button. This kind of menu is called a context menu because you can 
assign a different menu to different controls in the form. The Forms Designer can 
handle both of these additions almost completely.

<A NAME="225"><H2>The Toolbar</H2></A>

<p>There are several steps involved in creating a toolbar. Let's take each of these in turn.

<A NAME="226"><H3>Creating toolbar images</H3></A>

<p>The first step in creating a toolbar is to create a set of images to be displayed on 
the toolbar buttons. There are several ways to go about this. One approach is to 
draw your own bitmap image using a paint program. Another approach is to use one 
of the built-in images that comes with Visual J++. To have these available, you 
specify that you want to install BITMAPS during Visual J++ installation.

<p>If the bitmap you want is not present in the Visual J++ 6 image library, you 
can copy one from your favorite application. Simply open the application that has 
the button image you want to use. Now press the Print Screen key to copy the 
current screen to the Clipboard. Run the Paint application that comes with Microsoft 
Windows. Now paste the image into Paint by choosing Paste from the Edit menu. 
Enlarge the image, and then place a selection box around the button image as 
shown in Figure 7-8.

<p>Copy the button image to its own file by selecting Copy To from the Edit 
menu. In the Copy To dialog box, select the name and location for the image file and 
choose Save. (You could Copy and then Paste the image into a new file, but Copy To 
ensures the size of the image will be the size of your selection, with no extra white 
space around the edges and no need for resizing.) When you save the image, select a 
name indicative of its contents. I used the same naming convention for buttons that I 
used for the menu items. Thus, I named the image I cut out for the New toolbar 
button newFile.bmp.

<P><A HREF="javascript:fullSize('F07gh08x.htm')"> <img src="images/F07gh08.JPG" width=404 height=223 border=0 ALT="Click to view at full size."> </A>
<P><!-- caption --><B>Figure 7-8.</b> <i>Button images can be copied easily by enlarging the image first.</I><!-- /caption -->

<p>You'll repeat this process for each toolbar button you plan to create. For 
Editor2, I created images for New, Open, Save, Cut, Copy, Paste, and Font 
toolbar buttons.

<p>Whether you create your own images or use one of those offered by 
the Visual J++ bitmap library, you'll need to copy the images to an 
<I>images</I> subdirectory of the Editor2 project folder.

<A NAME="227"><H3>Creating a toolbar</H3></A>

<p>Creating the <I>ToolBar</I> object is simply a matter of dragging a ToolBar control from 
the Toolbox to the form. Position the ToolBar control immediately under the menu 
bar. You might need to resize the RichEdit control to leave room for the toolbar.

<A NAME="228"><H3>Associating the images with the toolbar</H3></A>

<p>Before you can use the images you've just created in your form design, you 
must create an <I>ImageList</I> object and associate this 
<I>ImageList</I> object with the toolbar. Select the ImageList control from the Toolbox, and drop it onto the form. Much 
like the file dialog boxes and the main menu, it doesn't much matter where on the 
form you place the ImageList control. The Forms Designer assigns the default name 
of <I>imageList1,</I> which is good enough for me.

<p>Now select the Properties window and click the ImageList control to edit 
its properties. Double-click the <I>images</I> property to open the Image Editor.
From here, you can add each of the bitmapped images you created to the ImageList
by using the Add button. Figure 7-9 shows the Image Editor after I had added each
of the seven images to the ImageList control.

<p><img src="images/F07gh09.JPG" width=335 height=364 border="0">

<p><!-- caption --><b>Figure 7-9.</b> <i>Use the Image Editor to add .BMP files to the ImageList control.</i><!-- /caption -->

<p>To add the ImageList control to the toolbar, click the 
<I>imageList</I> toolbar property. Click the arrow in the property value box to drop-down a menu listing the 
only ImageList control in the application, 
<I>imageList1</I>, as a possible candidate. Select 
<I>imageList1</I>.

<A NAME="229"><H3>Creating the toolbar buttons</H3></A>

<p>You are now ready to create the toolbar buttons. Double-click the 
<I>buttons</I> property of the ToolBar in the Properties window to reveal the
ToolBarButton Editor. Use 
the <I>Add</I> button to add buttons to your toolbar. I added seven buttons.

<p>Once the buttons have been added, you can change their properties using 
the Properties window. At a minimum, you will want to change their labels by 
editing the <I>text</I> property. I also renamed the buttons to indicate their function. For 
example, I applied the name <I>openFileTBB</I> for the Open toolbar button. You can also edit 
the <I>toolTipText</I> property from here. (The ToolTip is the string that appears when you 
point at the button with the mouse pointer.)

<p>You will also need to update the 
<I>imageIndex</I> property to select the appropriate image from the image list. For example, I assigned image 0 to the 
<I>fileNewTBB</I> button.

<p>The completed toolbar's Properties window is shown in Figure 7-10.

<p><img src="images/F07gh10.JPG" width=297 height=478 border="0">
<p><!-- caption --><b>Figure 7-10.</b> <i>Each toolbar button must be edited to have the proper label, 
name, ToolTip, and image.</i><!-- /caption -->

<A NAME="230"><H3>Fixing property problems</H3></A>

<p>A bug in early releases of Visual J++ kept the programmer from setting the 
<I>imageIndex</I> property from the Properties window. These types of problems are not always 
fatal. For example, to avoid this problem I simply set the 
<I>imageIndex</I> property manually by adding the following code to the constructor:

<p><pre>
    public Form1(String[] args)
    {
        // &#8230;same as before&#8230;
    
        // set the image index for each toolbar button
        newFileTBB.setImageIndex(0);
        openFileTBB.setImageIndex(1);
        saveFileTBB.setImageIndex(2);
        copyEditTBB.setImageIndex(3);
        cutEditTBB.setImageIndex(4);
        pasteEditTBB.setImageIndex(5);
        fontFormatTBB.setImageIndex(6);
    }
</PRE>

<p>Similar problems can be fixed in the constructor if the 
<I>initForm()</I> code generated by the Properties window doesn't appear to be correct.

<A NAME="231"><H3>Associating an action to each button</H3></A>

<p>Unfortunately, toolbar buttons have no active properties in the Properties 
window, but the toolbar does. So you must create a 
<I>toolBar1_buttonClick()</I> function (double-click the toolbar to create the
function skeleton) to handle each of the buttons, as follows:

<p><pre>
    private void toolBar1_buttonClick(Object source,
                                      ToolbarButtonClickEvent e)
    {
        // handle each button in turn
        if (e.button == newFileTBB)
        {
            newFileMI_click(source, e);
        }
        if (e.button == openFileTBB)
        {
            openFileMI_click(source, e);
        }
        if (e.button == saveFileTBB)
        {
            saveFileMI_click(source, e);
        }
        if (e.button == copyEditTBB)
        {
            copyEditMI_click(source, e);
        }
        if (e.button == cutEditTBB)
        {
            cutEditMI_click(source, e);
        }
        if (e.button == pasteEditTBB)
        {
            pasteEditMI_click(source, e);
        }
        if (e.button == fontFormatTBB)
        {
            fontFormatMI_click(source, e);
        }
    }
</PRE>

<p>The <I>ToolbarButtonClickEvent</I> parameter contains a reference to the 
toolbar button that was just clicked. By comparing the reference to the buttons by name, 
the program can determine which button was selected. Once 
<I>toolBar1_buttonClick() </I>has determined which button was selected, it simply calls the associated menu item 
click method to perform the actual function.

<A NAME="232"><H2>The Context Menu</H2></A>

<p>To add a context menu to the Editor2 application, first select the ContextMenu 
control from the Toolbox and drag it to the RichEdit control in the Forms 
Designer. Double-click the <I>ContextMenu</I> object in the Forms Designer to begin adding 
menu items. The context menu editor works the same as the main menu editor. Figure 
7-11 shows the context menu with my menu choices added.

<P><img src="images/F07gh11.JPG" width=346 height=331 border="0">
<P><!-- caption --><B>Figure 7-11.</b> <i>Adding menu items to a context menu is similar to adding items to 
a regular menu.</I><!-- /caption -->

<P>Before the context menu can become functional event handlers must be 
associated with each menu item. Fortunately, the context menu items are the same as 
those we created to service the main menu. With the Properties window visible, click 
the Open File context menu item. From the active properties, edit the 
<I>click</I> property. From the available event handlers, select 
<I>openFileMI_click()</I>. This process is shown in 
Figure 7-12. Repeat this process for each context menu item.

<p>Finally, edit the <I>contextMenu</I> property of the form to associate the context 
menu with the application. Save the file, and rebuild the project to complete the process.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Apparently the rich edit control and the toolbar control use the 
right mouse click for their own purposes and do not propagate it up to the form. In 
the resulting Editor2 application, clicking the right mouse button pops up the 
context menu everywhere except the rich edit control and the toolbar control.
</blockquote></div>

<p><A HREF="javascript:fullSize('F07gh12x.htm')"> <img src="images/F07gh12.JPG" width=404 height=272 border=0 ALT="Click to view at full size."> </A>
<P><!-- caption --><B>Figure 7-12.</b> <i>Edit the </I>click<I> property to associate an action with each context 
menu item.</I><!-- /caption -->

</BODY>
</HTML>




