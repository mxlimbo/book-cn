<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Server-Side DHTML</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16c.htm", "ch16e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="565"><H1>Server-Side DHTML</H1></A>

<p>The &quot;<A HREF="ch16c.htm#553">Client-Side DHTML</A>&quot; section of this chapter demonstrated how the <I>html</I> package allows applications on the client side to perform dynamic functions like 
responding to user input and reading client-side database information. DHTML gives applications many of the same capabilities of an applet while remaining in the 
HTML domain. On the other hand, client-side applications that use the <I>html</I> package are only accessible from Internet Explorer.

<P>Applications based on the <I>html</I> package can also run on the server. Server-side applications that use DHTML have both advantages and disadvantages as compared to client-side applications that use DHTML.

<P>Server-side DHTML applications have access to the same display features as do client-side DHTML applications. In fact, you can use practically identical source code for a server-side application as for a client-side application. However, since server-side DHTML applications don't run within a browser, server-side applications can't respond to user input. Server-side DHTML-generated HTML pages aren't dynamic.

<P>Server-side DHTML applications can only run on the Microsoft Internet Information Services (IIS) and Personal Web Server (PWS) Web servers, which are the only servers that have access to the <I>html</I> package of classes. On the other hand, server-side DHTML-generated HTML pages aren't Internet Explorer-specific. Server-side DHTML pages look like HTML pages that any other Web application might generate. The server-side server restriction is less severe than the client-side browser restriction, because it's much easier to control the type of server than the type of browser.

<P>The net effect of these considerations is that using server-side DHTML is useful under these conditions:

<UL>
<P><LI>The programmer wants to create sophisticated HTML pages that aren't interactive with dynamic server-side data.

<P><LI>The programmer can control the choice of server.

<P><LI>The programmer can't control the choice of browser.
</UL>

<p>For normal business applications, you can usually control the choices of server and browser. Thus, server-side DHTML is applicable in situations when the second and third conditions are true, and is acceptable when the first condition is true.

<A NAME="566"><H2>Static Server-Side Applications</H2></A>

<p>Two types of server-side DHTML applications exist: dynamic applications and static applications. In one sense, as I said previously, no server-side DHTML applications are dynamic. No application of this type can respond directly to user input. However, dynamic server-side DHTML applications are able to generate HTML instructions when the user references the application. This is similar to, but more 
sophisticated than, the CGI applications mentioned earlier in this chapter.

<p>Static server-side DHTML applications run repeatedly at some time interval. These applications write output to HTML files, and these HTML files can be accessed from browsers. The distinction here is that static server-side applications aren't run at the request of the browser.

<p>It might seem at first that static server-side DHTML applications are less useful than dynamic server-side applications, however, static server-side applications 
are generally more useful. Consider the example of a company with a number of travelling salespeople. A dynamic server-side application might allow the salespeople to access up-to-the-minute information concerning customers and their telephone numbers. It does this at considerable cost to the server, however. Every time a salesperson calls up the telephone directory, the server must run the dynamic server-side application that queries the database. This is wasteful, given that the customer telephone directory doesn't change from day to day, much less change from minute 
to minute.

<p>By comparison, the static server-side DHTML application might run every day at midnight, when Web traffic is at a minimum. The static application queries the customer database in order to generate the necessary telephone information in the form of HTML pages. The next day, the salespeople access the updated information with static HTML pages. While the data might be up to one day old, accessing the HTML pages generated by static server-side applications doesn't place any more of a load on the server than conventional HTML pages do.

<p>The following DataServerStatic application demonstrates how such an application might work.

<A NAME="567"><H3>The design work</H3></A>

<p>Create the DataServerStatic project in the same DHTML directory you used before, using the Code-behind HTML wizard. Remove the Page1.htm file from the project, because static server-side applications aren't run from a browser at all.

<p>We can use the same <I>TableDatabaseConnection</I> class we used in the DataClientSide application. Open your DataClientSide folder and copy the TableDatabaseConnection.java file to the DataServerStatic folder. (Be sure to copy the file, not to move it.) Visual J++ 6 adds the file to the DataServerStatic project as soon as the file appears in the DataServerStatic folder.

<A NAME="568"><H3>The code</H3></A>

<p>Amazingly, the <I>Class1</I> class for this application is virtually identical to the client-side version of the class. Copy the Class1.java file from the DataClientSide folder to the DataServerStatic folder, and edit the code so it looks as follows:

<p><pre>
import com.ms.wfc.html.*;
import com.ms.wfc.core.*;
import com.ms.wfc.data.*;
import com.ms.wfc.data.ui.*;

/**
 * Demonstrate accessing a local database by using the WFC html package.
 */
public class Class1 extends DhDocument 
{
    // --------------define the database information------------------
    // &#8230;identical to the client-side DHTML version&#8230;
    // ---------------end of database info----------------------------
    
    
    /**
     * Class constructor.
     */
    public Class1() 
    {
        // Required for Visual J++ Form Designer support
        initForm();    
    }
    
    /**
     * Class1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose() 
    {
        super.dispose();
    }

    /**
     * Create the same DHTML objects created by the
     * client-side application.
     */
    private void initForm() 
    {
        // &#8230;identical to the client-side DHTML version&#8230;
    }

    /**
     * Run as a Windows console application. Create a Class1
     * object identical to the client-side Class1 object.
     * Rather than display the results, write the corresponding
     * DHTML to standard output.
     */
    public static void main(String[] args)
    {
        // create the Class1 object
        DhDocument doc = new Class1();

        // wrap the Class1 object in head and body section
        // HTML tags (on the client side this is handled 
        // by the DHTML file that invokes the program) 
        doc.setGenerateTags(true);
        doc.setTitle(&quot;Statically Generated Table&quot;);

        // now convert the html package commands into
        // conventional HTML, and write the HTML to standard output
        String s = doc.getHTML();
        System.out.println(s);
    }
}
</PRE>

<p>The only difference between this application and the DataClientSide application is the addition of a <I>main()</I> method. As with all Windows applications, 
execution begins with <I>main()</I>. This method begins by creating a <I>Class1</I> object. The <I>Class1</I> constructor invokes the same <I>initForm()</I> method called by the DataClientSide class constructor. Just as before, 
<I>initForm()</I> queries the database to generate the 
internal structures necessary to create the HTML instructions displayed by the browser. However, this time the HTML is captured in a conventional <I>String</I> object by calling the <I>DhDocument.getHTML() </I>method. The resulting string is then written to standard output.

<P>One last step is required before you can run the application. Since DataServerStatic will run as a Windows console application, we need to change the deployment format. Save the project, then click the project name with the right mouse button in Project Explorer and choose DataServerStatic Properties from the context menu. In the DataServerStatic Properties dialog box, choose the Launch tab. Select Class1 from the When Project Runs, Load drop-down list, and then select the Launch As A Console Application check box. Now choose the Output Format tab, 
and change the Packaging Type to Windows EXE.

<A NAME="569"><H3>The result</H3></A>

<p>Running DataServerStatic.exe from the prompt of an MS-DOS window generates the output shown in Figure 16-5.

<P><A HREF="javascript:fullSize('f16gh05x.htm')"> <img src="images/f16gh05.jpg" width=404 height=234 border=0 ALT="Click to view at full size."> </A>

<P><!-- caption --><B>Figure 16-5.</b> <i>Running the DataServerStatic application generates this HTML code.</I><!-- /caption -->

<P>While this result isn't very pretty, careful examination of the HTML output reveals the &lt;TR&gt; and &lt;TD&gt; tags that one would expect to see when defining a table.

<P>Now capture the console output and copy it to an HTML file by entering the following DOS command:

<p><pre>
DataServerStatic &gt; DSS.htm
</PRE>

<p>Using Microsoft Windows Explorer, navigate to the DataServerStatic folder and run the DSS.htm file. You'll see the same browser display as that shown in Figure 16-6. The browser window output appears identical to the output from the DataClientSide application, but notice that the URL that appears in the Address window is that of the DSS.html file.

<P><A HREF="javascript:fullSize('f16gh06x.htm')"> <img src="images/f16gh06.jpg" width=404 height=382 border=0 ALT="Click to view at full size."> </A>

<P><!-- caption --><B>Figure 16-6.</b> <i>The Internet Explorer browser generates a table from the HTML code that is shown in Figure 16-5.</I><!-- /caption -->

<P>The same table is generated when you display DSS.htm with the Netscape Navigator browser.

<A NAME="570"><H2>Dynamic Server-Side Applications</H2></A>

<p>In principle, a dynamic server-side DHTML application is the same as the static version. However, there is one significant difference between the two. With the static version, the application must run when the user's browser selects a certain HTML page, and the output must be sent directly to the client's browser. Without resorting to CGI, it isn't possible to send the output to a file using conventional HTML. This is possible, however, from Active Server Pages (ASP).

<P>Active Server Pages are HTML pages that contain commands run by the server prior to sending the page to the client's browser. The browser sees no difference in the resulting HTML from any other HTML page.

<P>Often, the purpose of these ASP applications is as simple as inserting the current time and date into the HTML page as the page is sent from the server. However, the capabilities of ASP code extend to Component Object Model (COM) components that have been registered on the server. We'll use this ability of ASP to use COM objects in the DataServerDynamic application.

<P>(Note the following example borrows heavily from an example appearing in one of Microsoft's tutorials.)

<A NAME="571"><H3>The design work</H3></A>

<p>Create the DataServerDynamic Code-behind HTML project in the DHTML directory. Just as in the DataServerStatic example, remove the Page1.htm file from the project&#8212;we won't need it.

<P>The code for this application and the client-based DataClientSide are virtually identical. Copy the Class1.java and TableDatabaseConnection.java source files from the DataClientSide folder to the DataServerDynamic folder.

<P>ASP can only run registered COM objects, so choose DataServerDynamic Properties from the project name's context menu in Project Explorer. Choose the COM Classes tab and select the Class1 check box. Choose OK. If you now open the Class1.java file, you'll notice the addition of a <I>@com.register</I> directive to the comment appearing immediately above the <I>Class1</I> declaration. This will register as a COM object the CAB file generated by <I>Class1</I>.

<A NAME="572"><H3>The code</H3></A>

<p>Edit the Class1.java file copied from DataClientSide so it looks as follows:

<p><pre>
import com.ms.wfc.html.*;
import com.ms.wfc.core.*;
import com.ms.wfc.data.*;
import com.ms.wfc.data.ui.*;

/**
 * Demonstrates accessing a local database using the WFC html package.
 * @com.register ( clsid=&lt;GUID&gt;, typelib=&lt;GUID&gt; )
 */
public class Class1 extends DhDocument 
{
    // --------------define the database information------------------
    // &#8230;identical to the client-side DHTML version&#8230;
    // ---------------end of database info----------------------------
    
    
    /**
     * Class constructor.
     */
    public Class1() 
    {
    }
    

    /**
     * Class1 overrides dispose so it can clean up the
     * component list.
     */
    public void dispose() 
    {
        super.dispose();
    }

    /**
     * Create the same DHTML objects created by the
     * client-side application.
     */
    private void initForm() 
    {
        // &#8230;identical to the client-side DHTML version&#8230;
    }

    /**
     * Return a string representation of the Class1 HTML code. This
     * method is invoked from the ASP page.
     */
    public String generateHTMLRepresentation()
    {
        this.initForm();
        return this.generateHTML();
    }
}
</PRE>

<p>The only differences between the DataServerDynamic and 
DataServerStatic applications are:

<UL>
<P><LI>Visual J++ 6 has added the <I>@com.register</I> directive. (I have replaced an impossibly long globally unique identifier (GUID) with the phrase &lt;GUID&gt; in this listing.)

<P><LI>The call to <I>initForm()</I> has been removed from the <I>Class1()</I> constructor.

<P><LI>The method <I>generateHTMLRepresentation()</I> has been added.
</UL>

<P>The <I>generateHTMLRepresentation()</I> method first calls <I>initForm()</I> to create the DHTML internal representation of the table output. The method then calls 
<I>generateHTML()</I>, which generates the HTML representation of the internal structures created by <I>initForm()</I> that is to be sent to the browser.

<A NAME="573"><H3>The ASP page</H3></A>

<p>Choose Add Item from the Project menu to add an ASP page to the project. Since ASP isn't one of the options listed in the Add Item dialog box, choose Other, and enter the name <I>Web.asp.</I> (The name of the page is unimportant, as long as it carries the .asp extension.) Notice that in Project Explorer, the Web.asp file has an icon unique to .asp files. 

<P>In Source mode, add the following code to Web.asp:

<p><pre>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;%@ LANGUAGE=VBScript %&gt;

&lt;%

dim svr
set svr = Server.CreateObject(&quot;DataServerDynamic.Class1&quot;)

Response.Write &quot;&quot; &amp; svr.generateHTMLRepresentation()

%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

<p>The <I>CreateObject()</I> method creates an object from the <I>Class1 </I>class of the DataServerDynamic.CAB file. The <I>Response.Write</I> command instructs the server to 
write the output of the <I>generateHTMLRepresentation()</I> method of <I>Class1</I> to the HTML file containing the ASP commands. This is the page being sent to the client browser.

<A NAME="574"><H3>The result</H3></A>

<p>Build the DataServerDynamic project. Notice the creation of a .tlb type library similar to that generated by the ActiveX projects in <A HREF="ch13a.htm">Chapter 13</A>. This type library is 
bundled into DataServerDynamic.CAB and registered as a COM object.

<P>For the next step, you'll need access to an IIS or PWS Web server. (You can install the PWS server from the Microsoft Windows 95 or Microsoft Windows 98 installation disk.) Copy the Web.asp and DataServerStatic.tlb files to a folder accessible from the server. (For the PWS server, this folder is probably C:\Inetpub\wwwroot.) Start the Web server. Now bring up Internet Explorer or another browser and enter <I>http://&lt;local path&gt;/Web.asp</I> as your URL, where 
<I>&lt;local path&gt;</I> is the root directory for your PWS or IIS installation. (Remember that the COM object must be registered on the same computer that is acting as the Web server.)

<P>The resulting display appears identical to that created by both the DataClientSide and DataServerStatic applications.

</BODY>
</HTML>





