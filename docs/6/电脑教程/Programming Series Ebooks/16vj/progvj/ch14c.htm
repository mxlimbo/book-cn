<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Applet Wizard</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14b.htm", "ch14d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="499"><H1>The Applet Wizard</H1></A>

<p>Visual J++ 6 provides an applet wizard named Applet On HTML that simplifies the job of creating applets. Rather than go through the steps of creating an empty project and adding the applet and HTML files manually, the Applet On HTML wizard builds a complete applet framework from which you can begin coding.

<A NAME="500"><H2>An Example Applet On HTML Applet</H2></A>

<p>To demonstrate the strengths and weaknesses of the Applet On HTML wizard compared with the purely manual approach to creating applets we've been using so far in this chapter, let's create AWTApplet3. This applet transfers data from an input text field to an output text field. This problem is the same one we solved in the previous versions of AWTApplet earlier in the chapter.

<A NAME="501"><H3>Creating the project</H3></A>

<p>From the File menu, choose New Project. From the New Project window, select Web Pages under the Visual J++ Projects folder. In the right-hand pane, choose Applet On HTML; type in the project name, AWTApplet3; and choose Open. This process creates a project with two members: Applet1.java and Page1.htm.

<A NAME="502"><H3>The design work</H3></A>

<p>The design work for this applet consists of the following steps:
<OL>

<P><li> Open the HTML editor by double-clicking the Page1.htm file in Project Explorer.

<P><li> Select the Design tab.

<P><li> Open the Properties window.

<P><li> Select the applet in the Design window. (The applet initially isn't visible. Move the mouse pointer around within the Design window until the mouse pointer turns into a &quot;move&quot; icon, and then click the mouse button.)

<P><li> Resize the applet window to be about two-thirds of its original size.
</OL>

<p>If you examine the Properties window, you'll notice numerous applet properties that you can modify.

<A NAME="503"><H3>The code</H3></A>

<p>The Applet1.java code appears as follows. (I've left out sections of repetitive wizard-generated code.)

<p><pre>
import java.awt.*;
import java.applet.*;

import java.awt.event.*;

/**
 * This class reads PARAM tags from its HTML host page and sets
 * the color and label properties of the applet. Program execution
 * begins with the init() method. 
 */
public class Applet1 extends Applet
{
    /**
     * The entry point for the applet. 
     */
    public void init()
    {
        initForm();

        usePageParams();

        // create the user panel and add it in the 
        // middle of the applet window
        this.add(&quot;West&quot;,  new Label(&quot;  &quot;));
        this.add(&quot;East&quot;,  new Label(&quot;  &quot;));
        this.add(&quot;South&quot;, new Label(&quot;  &quot;));
        this.add(&quot;Center&quot;, userPanel());
    }

    private    final String labelParam = &quot;label&quot;;
    private    final String backgroundParam = &quot;background&quot;;
    private    final String foregroundParam = &quot;foreground&quot;;

    /**
     * Reads parameters from the applet's HTML host and sets applet
     * properties.
     */
    private void usePageParams()
    {
        final String defaultLabel = &quot;Default label&quot;;
        final String defaultBackground = &quot;C0C0C0&quot;;
        final String defaultForeground = &quot;000000&quot;;
        String labelValue;
        String backgroundValue;
        String foregroundValue;

        /** 
         * Read the &lt;PARAM NAME=&quot;label&quot; VALUE=&quot;some string&quot;&gt;,
         * &lt;PARAM NAME=&quot;background&quot; VALUE=&quot;rrggbb&quot;&gt;,
         * and &lt;PARAM NAME=&quot;foreground&quot; VALUE=&quot;rrggbb&quot;&gt; tags from
         * the applet's HTML host.
         */
        labelValue = getParameter(labelParam);
        backgroundValue = getParameter(backgroundParam);
        foregroundValue = getParameter(foregroundParam);

        if ((labelValue == null) || (backgroundValue == null) ||
            (foregroundValue == null))
        {
            /**
             * There was something wrong with the HTML host tags.
             * Generate default values.
             */
            labelValue = defaultLabel;
            backgroundValue = defaultBackground;
            foregroundValue = defaultForeground;
        }

        /**
         * Set the applet's string label, background color, and
         * foreground colors.
         */
        label1.setText(labelValue);
        label1.setBackground(stringToColor(backgroundValue));
        label1.setForeground(stringToColor(foregroundValue));
        this.setBackground(stringToColor(backgroundValue));
        this.setForeground(stringToColor(foregroundValue));
    }

    /**
     * Converts a string formatted as &quot;rrggbb&quot; to an awt.Color object
     */
    private Color stringToColor(String paramValue)
    {
        // &#8230;created by wizard&#8230;
    }

	.
	.
	.

    Label label1 = new Label();

    /**
     * Initializes values for the applet and its components
     */
    void initForm()
    {
        this.setBackground(Color.lightGray);
        this.setForeground(Color.black);
        label1.setText(&quot;label1&quot;);
        this.setLayout(new BorderLayout());
        this.add(&quot;North&quot;,label1);
    }
    
    //-------locally defined code-----------
    TextField sourceTF;
    TextField targetTF;
    Button    button;

    /**
     * Create the user panel to go below the applet label.
     */
    Panel userPanel()
    {
        // create a vertical layout with the source text field,
        // target text field, and button
        Panel panel = new Panel();
        panel.setLayout(new GridLayout(0, 1, 50, 10));
        panel.add(sourceTF = new TextField());
        panel.add(targetTF = new TextField());
        
        // put the button in the middle of a horizontal layout
        Panel subPanel = new Panel();
        subPanel.setLayout(new GridLayout(1, 0));
        subPanel.add(new Label(&quot; &quot;));
        subPanel.add(button = new Button(&quot;Transfer&quot;));
        subPanel.add(new Label(&quot; &quot;));
        
        panel.add(subPanel);

        // add an action listener to the button to
        // perform the transfer
        button.addActionListener(new TransferActionListener());
        
        return panel;
    }
    
    /**
     * Implement a transfer listener class that transfers
     * text from the source to the target text fields.
     */
    class TransferActionListener implements ActionListener
    {
        public void actionPerformed(ActionEvent ae)
        {
            targetTF.setText(sourceTF.getText());
        }
    }
}
</PRE>

<p>The Applet On HTML<I> </I>wizard generated most of the code prior to the comment &quot;locally defined code&quot;, except for the import of the <I>java.awt.event</I> package. The applet needs this package to gain access to the <I>ActionListener</I> class that is used to perform the text transfer operation.

<P>The <I>init()</I> method begins with the wizard-generated calls to the <I>initForm()</I> and <I>usePageParams()</I> methods. I added the series of calls to <I>add()</I> at the bottom of the <I>init()</I> method.

<P>The <I>initForm()</I> code performs the function of the similarly named method the Forms Designer creates for applications in that it sets up some of the basic applet properties. In Visual J++ 6, however, the applet <I>initForm()</I> has limited capability.

<P>The <I>usePageParams()</I> method reads and implements the parameters defined in the HTML file. These parameters reflect the applet properties set in the Properties window.

<P>The majority of the added code appears at the bottom of the Applet1 file, after the comment &quot;locally defined code.&quot; This code is similar to that defined in AWTApplet2, using a vertical grid layout for the source text field, target text field, and button subpanel. The button subpanel uses a horizontal grid layout.

<P>The <I>TransferActionListener()</I> method is invoked when the user chooses the Transfer button. This method reads the contents of the source text field and writes it into the target text field.

<A NAME="504"><H3>The result</H3></A>

<p>The output from executing AWTApplet3 is shown in Figure 14-9. (I edited the wizard-generated HTML file to change the title text.)

<P><IMG SRC="images/f14gh09.jpg" width=380 height=380 BORDER="0">

<P><!-- caption --><B>Figure 14-9.</b> <i>The appearance of the AWTApplet3 applet after transferring a line of text.</I><!-- /caption -->

<P>In my opinion, the Applet On HTML wizard doesn't save that much effort. In earlier chapters, we used the Forms Designer to lay out the appearance of Visual J++ 6 applications. The code it generated was both concise and powerful. All that was left to the programmer was to write the code to make the program actually do something. The net result was similar in feeling but more powerful than the advanced design capability of Microsoft Visual Basic.

<P>By comparison, the applet Properties window offers limited capability. The code the Applet On HTML wizard generates is both lengthy and of questionable value. In addition, many of the settings within the Properties window appear to have little effect on the selected applet.

<P>The Applet On HTML wizard shows a lot of promise, but this tool appears to be in need of improvement in future versions.

</BODY>
</HTML>




