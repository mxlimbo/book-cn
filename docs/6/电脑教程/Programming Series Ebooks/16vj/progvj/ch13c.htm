<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Custom ActiveX Controls</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13b.htm", "ch13d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="462"><H1>Custom ActiveX Controls</H1></A>

<p>The WeightEdit WFC-style control is available to other Visual J++ 6 
applications. (Remember to copy the .class files to the 
Windows\Java\Classes directory so that the .EXE files generated using the WeightEdit control can find them.) However, only 
Visual J++ can use WFC controls. Is there any way to make the WeightEdit control 
more universally available?

<p>Turning the WeightEdit control into an ActiveX control makes it available to 
other Visual Studio 6 languages, not to mention any other ActiveX-capable application. 
(It's doubtful that any application other than a programming language would know 
what to do with the WeightEdit ActiveX control.)

<A NAME="463"><H2>Turning WeightEdit into an ActiveX Control</H2></A>

<p>Once you've created a WFC-style control, the remaining steps needed to create 
an ActiveX control are straightforward:

<OL>
<p><li> Uncomment the <I>@com.dll</I> directive.
<p><li> Repackage the .class files and type library (.tlb) file into a COM package.
<p><li> Rebuild the project.
<p><li> Register the COM package as an ActiveX component.
<p><li> Add the ActiveX control to the Toolbox.
</OL>

<A NAME="464"><H3>Preparing the WFC-style control</H3></A>

<p>There's no reason to retain the WeightEditTest project in the solution, because it 
won't be made part of the ActiveX control. Right-click the WeightEditTest project in 
Project Explorer, and select Remove Project. Removing the project doesn't delete the files 
or the directory that make up the project.

<p>You might also want to change from the Debug configuration to the 
Release configuration, which will reduce the size of the eventual .class files by removing 
the debug information. Right-click the project, and select WeightEdit Properties. 
Select Release from the Configuration drop-down list.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
We could have done this at any point during the creation of the 
WFC-style control.
</blockquote></div>

<A NAME="465"><H3>Uncommenting the DLL directive</H3></A>

<p>Edit the WeightEdit.java file, and remove the // comment bars that precede 
the <I>@com.register</I> directive. This assigns the control a GUID, which uniquely 
identifies our WeightEdit control.

<A NAME="466"><H3>Repackaging the project</H3></A>

<p>The control will need all of the .class files that are part of the WeightEdit project. 
To make sure that all the .class files are included, open the WeightEdit Properties 
dialog box again. In the COM Classes tab, check each of the classes present. Figure 
13-9 shows the resulting display.

<p>Now click the Output Format tab. Check Enable Packaging. From the 
Packaging Type dropdown list, select COM DLL. Figure 13-10 shows the WeightEdit 
Properties dialog box with these settings selected.

<p><A HREF="javascript:fullSize('f13gh09x.htm')"> <img src="images/f13gh09.jpg" width=404 height=376 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><B>Figure 13-9.</b> <i>The COM Classes tab allows you to select which classes you 
want to include in the ActiveX control.</i><!-- /caption -->

<p><A HREF="javascript:fullSize('f13gh10x.htm')"> <img src="images/f13gh10.jpg" width=404 height=376 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-10.</b> <i>The Output Format tab allows you to bundle the necessary files into a single COM DLL.</i><!-- /caption -->

<p>Now close the Properties window and rebuild the project. The 
<I>@com.dll</I> directive tells Visual J++ 6 to register the 
WeightEdit<I> </I>COM DLL as an ActiveX component.

<A NAME="467"><H3>Adding the ActiveX control to the Toolbox</H3></A>

<p>To add the new control to the Toolbox, right-click within the General section of 
the Toolbox. From the context menu, select Customize Toolbox. The steps so far are 
the same as those for creating a WFC-style control.

<p>Click the ActiveX Controls tab rather than the WFC 
Controls<I> </I>tab we used in the previous section. Scroll down to the bottom of the list of available ActiveX 
controls to find our WeightEdit control, as shown in Figure 13-11. Check the box to create 
the new Toolbox control. A new icon will appear on the Toolbox immediately below 
the WFC control icon (assuming you haven't already removed the WFC-style control 
icon from the Toolbox). The ActiveX control appears disabled because there is no 
application in which to use the control.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The ActiveX control icon is slightly different than the WFC-style
control icon. This difference distinguishes the two types of controls for the user.
</blockquote></div>

<p>You can now close the WeightEdit solution.

<p><A HREF="javascript:fullSize('f13gh11x.htm')"> <img src="images/f13gh11.jpg" width=404 height=280 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-11.</b> <i>The Customize Toolbox dialog box shows the available ActiveX controls.</i><!-- /caption -->

<A NAME="468"><H2>Using the new ActiveX control</H2></A>

<p>We can use the new WeightEdit ActiveX control in much the same way as we 
used the WFC-style control we created earlier in the chapter. The main difference 
between the WFC-style control and the ActiveX control is that Visual J++ 6 creates a set 
of interface classes with which to access the ActiveX control.

<p>To demonstrate this difference, create a new Windows application 
named WeightEditTest. Double-click Form1.java<I> 
</I>in Project Explorer to open the class in the Forms Designer (if it isn't open already). Open the Toolbox. Now that an 
application is open, the WeightEdit ActiveX control is enabled. Drag the control and drop 
it in the middle of the WeightEditTest form.

<p>You should notice the large amount of disk activity as soon as you drop 
the WeightEdit ActiveX control onto the form. (By comparison, adding the 
WFC-style control was much quicker.) This activity is due to the creation of the interface 
classes mentioned previously.

<p>Look at the project with Project Explorer. Figure 13-12 shows just a subset 
of new files added to the project. Each of these small .java files represents an 
active property in the WeightEdit ActiveX control.

<p>Open the Properties window, and select the WeightEdit control within 
Form1. As before, both the <I>weight</I> and 
<I>weightEvent</I> properties are present. Build and run 
the WeightEditTest application. The WeightEditTest application runs in the same way 
it did before, although it takes somewhat longer to begin running because of the 
increased access to the operating system ActiveX components require. If you 
examine the WeightEditTest.exe file, you'll notice that it weighs in at over 100 KB&#8212;large 
for a Java application, but still much smaller than a C or C++ program.

<p>There is one difference between the WFC-style control and the ActiveX 
control. Select the WeightEdit control in the Forms Designer. Now begin typing. 
Rather than update the control, the Properties window immediately appears in the 
foreground. Whatever text you enter appears in the 
<I>text</I> property. The text that appears in the ActiveX control doesn't update until you finish updating the 
<I>text</I> property.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
You'll find this version of the WeightEdit control on the companion 
CD in the subdirectory Custom Controls\ActiveX WeightEdit.
</blockquote></div>

<p><A HREF="javascript:fullSize('f13gh12x.htm')"> <img src="images/f13gh12.jpg" width=404 height=473 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-12.</b> <i>Visual J++ 6 generates a separate interface class for each event handler in the WeightEdit ActiveX control.</i><!-- /caption -->

<A NAME="469"><H2>Using the ActiveX control in Visual Basic 6</H2></A>

<p>As mentioned earlier, an ActiveX control written in Visual J++ 6 is available to all 
other Visual Studio 6 languages. To demonstrate this versatility, I created the default 
Windows EXE program under Visual Basic 6 using the following steps. (If you own 
Visual Basic 6, you can follow along; if not, you'll just have to trust me.)

<p>Open Visual Basic 6. Create a new Standard EXE. Open Form1 within 
Project1 in the Forms Designer.

<p>You'll need to add the WeightEdit control to the Visual Basic 6 Toolbox 
before you can use it. Right-click within the Visual Basic Toolbox. From the context 
menu, choose Components to bring up the Components dialog box. The 
WeightEvent ActiveX component is at the bottom of the list, as shown in Figure 13-13. Check 
the WeightEdit component, and choose OK to close the window. A new control 
appears in the Visual Basic Toolbox.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The display on my computer reflects the fact that I had already 
created a different WeightEdit component. Your display might list only a single 
WeightEdit component. In any case, you want to use the component that 
references MSJAVA.DLL, as shown in Figure 13-13.
</blockquote></div>

<p>Select the newly added WeightEdit control. Now click somewhere within 
the form. While holding down the left mouse button, drag the mouse to specify the 
size of the WeightEdit control. Type within the object to add text and update the 
<I>text</I> property in the Properties window, as shown in Figure 13-14.

<p><A HREF="javascript:fullSize('f13gh13x.htm')"> <img src="images/f13gh13.jpg" width=404 height=359 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><B>Figure 13-13.</b> <i>Visual Basic allows you to add Visual 
J++ controls to the Toolbox.</i><!-- /caption -->

<p><A HREF="javascript:fullSize('f13gh14x.htm')"> <img src="images/f13gh14.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-14.</b> <i>Typing within the WeightEdit control updates the 
</I>text<I> property, just as within Visual J++ 6.</i><!-- /caption -->

<p>Scroll down within the Properties window to the weight property. Change 
the weight to Bold. As you can see in Figure 13-15, the text display immediately 
updates to reflect the change.

<p><A HREF="javascript:fullSize('f13gh15x.htm')"> <img src="images/f13gh15.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-15.</b> <i>Updating the weight 
property updates the text display within the Form1 window.</i><!-- /caption -->

<p>To access the <I>weightEvent</I> property, double-click the WeightEdit control. A 
code window displaying the 
<I>WeightEdit1_click()</I> subroutine appears. Open the 
drop-down list on the upper right-hand side of the code window. Scroll down the list to find 
the <I>weightEvent</I> property. Selecting that list item creates the 
<I>WeightEdit1_weightEvent()</I> subroutine shown in Figure 13-16.

<p>Finally, from the Run menu, select Start With Full Compile to run the Visual 
Basic 6 program. As the program runs, a form containing the WeightEdit control 
appears. Click the control, and begin typing to verify that it functions as designed.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
You'll find this version of using the WeightEdit control on the 
companion CD in the subdirectory Custom Controls\Visual Basic Program.
</blockquote></div>

<p><A HREF="javascript:fullSize('f13gh16x.htm')"> <img src="images/f13gh16.jpg" width=404 height=257 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 13-16.</b> <i>The </I>weightEvent<I> property is available in the code editor.</i><!-- /caption -->

</BODY>
</HTML>




