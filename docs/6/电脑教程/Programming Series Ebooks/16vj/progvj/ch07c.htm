<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Edit Menu</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07b.htm", "ch07d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="221"><H1>The Edit Menu</H1></A>

<p>With the File menu completed, the next major menu item is the Edit menu. In 
the Editor2 application, I created this menu with the three common commands: Cut, 
Copy, and Paste. Just for good measure, I added one further menu item, Format, which 
has the single submenu Font.

<A NAME="222"><H2>The Forms Designer Work</H2></A>

<p>To add the Edit menu, in the Forms Designer click in the Type Here box next to 
the File menu. From there, add the Cut, Copy, and Paste menu items below the Edit 
menu. In the Properties window, change the 
<I>name</I> property of these menu items to 
<I>cutEditMI,</I> <I>copyEditMI, </I>and 
<I>pasteEditMI</I> to match the naming convention we used 
with the File menu items. While changing the names, you can also set the 
<I>shortcut</I> property for these properties to the standard Ctrl+X, Ctrl+C,
and Ctrl+V, respectively.

<p>You can add the Format menu with the Font menu item in a similar 
fashion; however, the Font menu item requires the addition of a FontDialog control.
Drag a FontDialog control from the Toolbox and place it next to the OpenFileDialog 
and SaveFileDialog controls. Rename the FontDialog control to 
<I>fontDialog</I>. Also add a status bar panel named 
<I>fontPanel </I>to the right of the existing panel to provide a 
place to display the current font selection.

<A NAME="223"><H2>The Code for Editor2</H2></A>

<p>The extra code to handle the edit and font menu items turns out to be a little 
trickier than you might think. (I have removed the File and RichEditControl sections 
from the following listing to save space, since they are the same as in the previous example.)

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

import com.ms.wfc.io.*;

/**
 * This class represents a more complete RTF editor.
 */
public class Form1 extends Form
{
    // &#8230;the File menu section is identical to Editor1&#8230;

    private void cutEditMI_click(Object source, Event e)
    {
        // perform a copy
        copyEditMI_click(source, e);
 
        // now delete the selection by 
        // replacing the selected RTF with nothing
        richEdit.setSelRTF(&quot;&quot;);
    }

    private void copyEditMI_click(Object source, Event e)
    {
        // get the selected text
        String rtf = richEdit.getSelRTF();
      
        // now put this in the Clipboard
        Clipboard.setDataObject(rtf, true);
    }

    private void pasteEditMI_click(Object source, Event e)
    {
        // get an object off the Clipboard that represents
        // its contents
        IDataObject dobj = Clipboard.getDataObject();

        // first check for RTF
        if (dobj.getDataPresent(&quot;Rich Text Format&quot;))
        {
            // the getDataPresent() method can return true
            // even when the content is not RTF; if it's not
            // RTF, just catch the illegal format event and
            // keep going
            try
            {
                // get the RTF data as a string, and paste
                // it into the rich edit control
                String s = (String)dobj.getData(&quot;Rich Text Format&quot;);
                
                // the string that gets extracted from
                // the Clipboard is null terminated - trim()
                // sets the length to match the text up to
                // the null
                s = trim(s);
                
                // the resulting text is pasted into the rich edit box
                richEdit.setSelRTF(s);
                return;
            }
            catch(Exception ex)
            {
            }
        }

        // we can handle plain text (although it screws up
        // the format of the RTF data)
        if (dobj.getDataPresent(&quot;Text&quot;))
        {
            // first get the text off of the Clipboard and
            // trim it to the terminating null
            String insert = (String)dobj.getData(&quot;Text&quot;);
            insert = trim(insert);
            
            // the resulting text is pasted into the rich edit box
            richEdit.setSelText(insert);
            return;
        }
    }

    /**
     * Trim a String off at the first null.
     */
    static String trim(String s)
    {
        for (int i = 0; i &lt; s.length(); i++)
        {
            if (s.charAt(i) == '\0')
            {
                s = s.substring(0, i);
                break;
            }
        }
        return s;
    }
    

    private void fontFormatMI_click(Object source, Event e)
    {
        // display the font dialog box; if user selects OK&#8230;
        if (fontDialog.showDialog() == DialogResult.OK)
        {
            // get the font selected
            Font f = fontDialog.getFont();
 
            // set the selected area to that font
            richEdit.setSelFont(f);

            // store the name of the font on the status bar
            fontPanel.setText(f.getName());
        }
    }

    private void richEdit_selChange(Object source, Event e)
    {
        // every time the cursor position moves, get
        // the current font and store it in the status bar
        try
        {
            Font f = richEdit.getSelFont();
            fontPanel.setText(f.getName() 
                              + &quot;:&quot; 
                              + f.getSize());
        }
        catch(Exception ex)
        {
            fontPanel.setText(&quot;&lt;mixed&gt;&quot;);
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    MainMenu mainMenu = new MainMenu();
    MenuItem fileMI = new MenuItem();
    MenuItem newFileMI = new MenuItem();
    MenuItem openFileMI = new MenuItem();
    MenuItem saveFileMI = new MenuItem();
    MenuItem saveAsFileMI = new MenuItem();
    MenuItem exitFileMI = new MenuItem();
    OpenFileDialog openFD = new OpenFileDialog();
    SaveFileDialog saveFD = new SaveFileDialog();
    RichEdit richEdit = new RichEdit();
    StatusBar statusBar = new StatusBar();
    StatusBarPanel outputPanel = new StatusBarPanel();
    MenuItem menuItem1 = new MenuItem();
    MenuItem copyEditMI = new MenuItem();
    MenuItem cutEditMI = new MenuItem();
    MenuItem pasteEditMI = new MenuItem();
    MenuItem menuItem5 = new MenuItem();
    MenuItem fontFormatMI = new MenuItem();
    FontDialog fontDialog = new FontDialog();
    StatusBarPanel fontPanel = new StatusBarPanel();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1(args));
    }
}
</PRE>

<p>The new code starts out simple enough. I created the Copy handler by 
double-clicking the Copy menu item in the Forms Designer and then adding the 
necessary code. The new <I>copyEditMI_click()</I> method first calls 
<I>richEdit.getSelRTF()</I>, which returns the currently selected text in RTF format. If no text is selected, this call 
returns an empty string. The second call, to 
<I>Clipboard.setDataObject()</I>, pastes this text to 
the Clipboard. The method's second argument, 
<I>true</I>, tells the method to copy the text rather than to simply retain a reference to it. This makes the Clipboard data 
persistent even if the Editor2 application exits.

<p>The <I>cutEditMI_click()</I> handler is even easier. First it performs a copy
action by calling <I>copyEditMI_click()</I>. Then it uses 
<I>setSelRTF() </I>to delete the selected text by replacing the selected text with an empty string.

<p>The <I>pasteEditMI_click()</I> method begins by calling 
<I>Clipboard.getDataObject()</I>. Like the data object contained within the in-progress drag-and-drop 
<I>DragEvent</I>, the <I>Clipboard</I> object represents the contents of the Clipboard. The Editor2 
application is prepared to accept two types of Clipboard contents: RTF or ANSI text.

<p>Since RTF is preferred, <I>pasteEditMI_click()</I> checks for the presence of RTF 
text by calling <I>getDataPresent(&quot;Rich Text 
Format&quot;)</I> first. This call is supposed to 
return <I>true</I> if RTF text is present on the Clipboard; however, it returns 
<I>true</I> when any text is on the Clipboard, whether it's in RTF format or not.

<p>The call <I>getData(&quot;Rich Text 
Format&quot;)</I> returns the RTF text as a Java string. 
The string returned by <I>getData() </I>is actually a 
<I>null</I> terminated string. A <I>null</I> 
terminated string makes a lot of sense in a language like C++, but the 
<I>null</I> has no particular significance to Java. The length of the 
<I>String</I> object is the size of the buffer and 
extends beyond the <I>null</I>. The method <I>RichEdit.setSelRTF() 
</I>seems to be able to handle this problem without any ill effects, but to be safe I wrote the function 
<I>trim()</I> to set the length of the 
<I>String</I> object to include the text up to but not including the 
terminating <I>null</I>.

<p>Once the string has been trimmed, it is pasted into the 
<I>RichEdit</I> object using the <I>setSelRTF() 
</I>call. If the string returned from the Clipboard isn't actually RTF 
data, <I>setSelRTF() </I>throws an exception. Since this data might be plain text, 
<I>pasteEditMI_click() </I>catches the exception and continues on without complaint. If 
<I>setSelRTF()</I> runs successfully, the function returns with no further processing.

<p>As a second step, the <I>pasteEditMI_click()</I> method checks the Clipboard for 
the presence of <I>&quot;Text&quot;</I>, that is, raw ANSI data. If this data is present, it is read from 
the Clipboard by calling <I>getData(&quot;Text&quot;) 
</I>and stored into the variable <I>insert</I>. (This 
allows the user to cut text out of a text editor such as Notepad and paste the text into 
our RTFEditor.) Once the <I>insert</I> variable has been trimmed, we paste it into the 
<I>RichEdit</I> object by calling the method 
<I>RichEdit.setSelText()</I>.

<p>The method <I>fontFormatMI_click()</I> handles the Font menu item by opening 
the <I>FontDialog</I> object. If the user exits the dialog box by choosing the OK 
button, <I>fontFormatMI_click()</I> reads the selected font from the dialog box by calling 
<I>getFont()</I>. The currently selected area within the rich edit control is set to this font by 
calling <I>setSelFont()</I>. The name of the font is then stored into the status bar panel 
<I>fontPanel</I>.

<p>The current Editor2 has one final addition to Editor1: it sets 
<I>richEdit_selChange() </I>to handle selection changes in the 
<I>RichEdit</I> object. A <I>selChange</I> event occurs 
whenever the user selects a new section of code or whenever the user moves the 
insertion point. The method 
<I>richEdit_selChange()</I> first calls 
<I>getSelFont()</I> to find out the font of the current selection. If there is no selection, this call returns the font of 
the text to the immediate right of the insertion point. Finally, 
<I>richEdit_selChange()</I> displays the name and size of the font in the 
<I>fontPanel</I> object.

<p>If the current selection contains more than one font, the call to 
<I>getSelFont()</I> throws an exception. This exception is captured by 
<I>richEdit_selChange(),</I> which then displays the string 
&quot;<I>&lt;mixed&gt;&quot; </I>in the 
<I>fontPanel</I> object to let the user know that 
more than one font is currently selected.

</BODY>
</HTML>




