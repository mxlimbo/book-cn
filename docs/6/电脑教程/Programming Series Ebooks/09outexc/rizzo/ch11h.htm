<HTML>
<HEAD>
<TITLE>CDO Visual Basic Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11g.htm", "ch11i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="393"><H1>CDO Visual Basic Application</H1></A>

<P>The last application we will look at is a CDO application built using 
Microsoft Visual Basic. This application allows users to log on to their Exchange 
Server using CDO, query the server for other users, and retrieve information 
about those users. This application shows you how to program CDO with Visual 
Basic, which is different from programming CDO with VBScript and ASP. This 
application also shows you how to use the AddressEntryFilter object. Figure 
11-35 shows the application in action.</p>

<p>
<A HREF="javascript:fullSize('f11oh35x.htm')"> <img src="images/f11oh35.JPG" width=404 height=181 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-35</B> <I>The Visual Basic CDO application.</I><!-- /CAPTION -->
</p>

<A NAME="394"><H2>Setting Up the Application</H2></A>

<P>Before you can install the application, you must have a Windows NT 4.0 
Server and a client with certain software installed. Table 11-5 describes the 
installation requirements.</p>

<P><B>Table 11-5</B> <i>Installation Requirements for the CDO Visual Basic Application</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Software Requirements</th>
<th>Installation Notes</th>
</tr>
<tr>
<td valign="top">Exchange Server 5.5 SP1</td>
<td valign="top"></td>
</tr>
<tr>
<td valign="top">CDO library (cdo.dll)</td>
<td valign="top">Exchange Server 5.5 SP1 installs CDO library 1.21. Outlook 98 installs CDO library 1.21.</td>
</tr>
<tr>
<td valign="top"><B><I>For the client:</I></B><br>Outlook 98</td>
<td valign="top"></td>
</tr>
</table></p>


<p>To install the Visual Basic CDO application, run the Setup.exe file in the CDO VB folder on the companion CD and follow the instructions.</p>

<A NAME="395"><H2>Programming CDO with Visual Basic</H2></A>

<P>The main differences between programming CDO with VBScript and ASP 
and programming CDO with Visual Basic is that Visual Basic allows you to use 
early binding of objects in the CDO library. By declaring your variables as a 
specific type of object, the variables will be bound early. For example, in Visual 
Basic, you can use the Dim statement to declare a variable as a CDO Session 
object by using the following statement:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oSession as MAPI.Session
</PRE></TD></TR></TABLE></P>

<P>Once you declare a variable, you can take advantage of some of the 
powerful features of the Visual Basic development environment, such as Auto 
List Members, which lists the available properties and methods for an object, 
and Auto Quick Info, which displays the syntax for a statement. For example, if 
in the code window you start typing the name of the 
<I>oSession</I> variable and then the dot operator (.), Visual Basic will automatically display the properties and 
methods for the CDO Session object. Also, using early binding allows your 
application to execute faster. This is because the binding takes place at compile 
time rather than at run time. VBScript and ASP cannot use early binding and 
therefore always default to late binding when creating objects.</p>

<P>To use CDO in Visual Basic, add a reference to the CDO library. By 
adding this reference, you can declare variables of a specific CDO type in your 
code, and you make the CDO objects appear in the Visual Basic object browser. 
You use the object browser to view information about libraries, such as 
properties, methods, events, constants, classes, and other information.</p>

<P>To add the reference to the CDO library, in Visual Basic select 
References from the Project menu. Scroll down until you find Microsoft CDO 1.21 
library, and add a check mark next to it. If you want to add a reference to the 
CDO Rendering library, add a check mark next to Collaborative Data Objects 
Rendering library 1.2, and click OK. Now you can take advantage of early 
binding with your CDO objects, and the CDO library will be available in the Visual 
Basic object browser. Most of the time, you will not use the CDO Rendering 
library in your client-based applications. Instead, you will use this library in your 
web-based applications.</p>

<A NAME="396"><H2>Logging On the User</H2></A>

<P>As we have discussed throughout this chapter, you cannot create any 
other objects in the CDO library without first creating a CDO Session object 
and successfully logging on with that Session object. Because we are developing 
a Visual Basic application, we do not have to worry about a Global.asa file 
or authenticating the user&#8212;CDO will leverage the Windows NT credentials of 
the user currently logged on. This makes logging on as a user much easier, as 
you can see in the following authenticated logon code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oRecipients As MAPI.Recipients
Dim oRecipient As MAPI.Recipient
Dim oInfoStores As MAPI.InfoStores
Dim oInfoStore As MAPI.InfoStore
Dim oInbox As MAPI.Folder
Dim boolUseCurrentSession, boolLogonDialog
Private Sub cmdLogon_Click()
    On Error Resume Next
    Err.Clear
    'Check to see if user wants to use a current session.
    'If so, piggyback on that session.
    If boolUseCurrentSession = 0 Then
        If (txtServerName.Text &lt;&gt; &quot;&quot;) And _
        (txtAliasName.Text &lt;&gt; &quot;&quot;) Then
            strProfileInfo = txtServerName &amp; vbLf &amp; txtAliasName
            oSession.Logon NewSession:=True, NoMail:=False, _
            showDialog:=boolLogonDialog, ProfileInfo:=strProfileInfo
            strConnectedServer = &quot; to &quot; &amp; txtServerName.Text
        Else
            MsgBox &quot;You need to enter a value in the &quot; &amp; _
                &quot;Server or Alias name.&quot;, _
                vbOKOnly + vbExclamation, &quot;CDO Logon&quot;
            Exit Sub
        End If
    Else
        oSession.Logon NewSession:=False, showDialog:=boolLogonDialog
        strConnectedServer = &quot;&quot;
    End If
    If (Err.Number &lt;&gt; 0) Or _
    (oSession.CurrentUser.Name = &quot;Unknown&quot;) Then
        'Not a good logon; log off and exit
        oSession.Logoff
        MsgBox &quot;Logon error!&quot;, vbOKOnly + vbExclamation, &quot;CDO Logon&quot;
        Exit Sub
    End If
            
    'Check store state to see if online or offline
    Set oInbox = oSession.Inbox
    strStoreID = oInbox.StoreID
    Set oInfoStore = oSession.GetInfoStore(strStoreID)
    If oInfoStore.Fields(&amp;H6632000B).Value = True Then
        strConnectedServer = &quot; Offline&quot;
    End If
    
    'Enable other buttons on the form
    cmdLogoff.Enabled = True
    cmdLogon.Enabled = False
    txtUserName.Enabled = True
    cmdSearch.Enabled = True
    cmdViewAB.Enabled = True
    lblUserName.Enabled = True
    'Change the label to indicate status
    lblConnected.Caption = &quot;Connected&quot; &amp; strConnectedServer _
        &amp; &quot; as &quot; &amp; oSession.CurrentUser.Name
End Sub
</PRE></TD></TR></TABLE></P>

<P>To support early binding, a number of variables are declared as 
specific CDO object types. The code tries to log on to the Exchange Server by 
using the CDO <I>Logon</I> method. Unlike the ASP code we saw earlier, in this code 
we can leverage existing sessions between the client and the Exchange Server 
rather than always create new sessions. The user can enable this functionality by 
checking the Use Existing Exchange Session check box. (See Figure 11-35.) 
The existing session, typically an Outlook client session, is used by CDO to 
connect to the Exchange Server.</p>

<p>After the user logs on, the code finds the InfoStore object associated 
with the user's mailbox. The Fields collection on InfoStore is used to look up a 
specific property, PR_STORE_OFFLINE (&amp;H 6632000B), which contains 
either True or False; True indicates that the current InfoStore is an offline replica. 
This value for this property is used in the status text, which indicates the 
connection state of the user, as shown in Figure 11-36.</p>

<p>
<img src="images/f11oh36.GIF" width=295 height=106 border=0>
</P><P>
<!-- CAPTION --><B>Figure 11-36</B> <I>If the user is working offline, the connection status message displays this information.</I><!-- /CAPTION -->
</p>

<A NAME="397"><H2>Finding the Details of the Specific User</H2></A>

<P>After logging on, the user can type in a name in the User Name text box. 
The name entered is used by the application to search the directory or 
distribution list. The search is implemented by using the AddressEntryFilter object in 
the CDO library. The AddressEntryFilter object is very similar to the 
MessageFilter object, which we examined in the Calendar of Events application. The only 
difference between them is that the AddressEntryFilter object is used with 
objects in the directory, and the MessageFilter object is used with messages in a 
folder. Following is the code that searches for the user using the 
AddressEntryFilter object and displays the results:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub cmdSearch_Click()
    On Error Resume Next
    'The On Error is to handle the user canceling the
    'details dialog box
    Err.Clear
    If txtUserName.Text = &quot;&quot; Then
        MsgBox &quot;No User Specified&quot;, vbOKOnly + vbExclamation, _
            &quot;User Search&quot;
        Exit Sub
    Else
        Set oAddressList = oSession.GetAddressList(CdoAddressListGAL)
        Set oAddressEntries = oAddressList.AddressEntries
        Set oAddEntryFilter = oAddressEntries.Filter
        oAddEntryFilter.Name = txtUserName.Text
        If oAddressEntries.Count &lt; 1 Then
            MsgBox &quot;No entries found&quot;, vbOKOnly, &quot;Search&quot;
        ElseIf oAddressEntries.Count &gt; 1 Then
            MsgBox &quot;Ambiguous entries found&quot;, vbOKOnly, &quot;Search&quot;
        Else
            Set oAddressEntry = oAddressEntries.GetFirst
            oAddressEntry.Details
        End If
    End If
End Sub
</PRE></TD></TR></TABLE></P>

<P>This code gets the Global Address List, either offline or online, by 
using the <I>GetAddressList</I> method on the Session object. It then instantiates 
an AddressEntryFilter object by using the Filter property on the 
AddressEntries collection. To specify the condition for the filter, the Name property on 
the AddressEntryFilter object is set to the name typed in by the user. This name 
can either be the user's display name, such as <I>Thomas Rizzo 
(Exchange)</I>, or the alias of the user, such as 
<I>thomriz</I>. CDO also supports direct matches when you 
place the equals (=) sign before your text, as in 
<I>=Thomas Rizzo</I>.</p>

<p>Once the filter is set, the code retrieves the count of the newly 
restricted AddressEntries collection to determine how many AddressEntry objects 
were returned. If more than one AddressEntry object was returned, the code 
displays an ambiguous name error to notify the user that more specific criteria is 
needed. If less than one AddressEntry object is returned, the code displays that no 
entries meet the criteria of the user. If exactly one AddressEntry object is 
returned, the code uses the <I>Details</I> method of the AddressEntry object to display 
the information about the directory object, as shown in Figure 11-37.</p>

<p>
<A HREF="javascript:fullSize('f11oh37x.htm')"> <img src="images/f11oh37.JPG" width=404 height=308 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-37</B> <I>The details page of an AddressEntry object. You can see not only the name and alias of the user but also organizational information such as the manager of the user.</I><!-- /CAPTION -->
</p>

<p>Finally, a subroutine is included to handle the run-time error thrown 
by CDO when the user clicks Cancel in the Properties dialog box displayed by 
the <I>Details</I> method.</p>

</BODY>
</HTML>





