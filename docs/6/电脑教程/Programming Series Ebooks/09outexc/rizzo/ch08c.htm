<HTML>
<HEAD>
<TITLE>Active Server Pages</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08b.htm", "ch08d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="244"><H1>Active Server Pages</H1></A>

<P>In this section, we'll explore Microsoft Active Server Pages (ASP) 
technology. You should know about ASP for several reasons. First, the Outlook HTML 
Form Converter, a conversion tool that migrates Outlook forms to HTML 
forms, utilizes this technology. We'll examine the converter later in this chapter. 
Second, ASP is used in other areas, including Collaborative Data Objects (CDO) 
and Active Directory Services Interfaces (ADSI). We look more closely at CDO 
in <A HREF="ch11a.htm">Chapter 11</A> and ADSI in <A HREF="ch14a.htm">Chapter 14</A>.</P>

<A NAME="245"><H2>ASP Fundamentals</H2></A>

<P>Active Server Pages are standard text files that contain HTML and script. 
The script can be written using any ActiveX scripting language, such as VBScript 
or JScript. The HTML files that most web developers write differ from ASP 
files in two significant ways. First, instead of having an .htm or .html file 
extension, ASP files have an .asp file extension. When you install IIS, an Internet 
Server Application Programming Interface (ISAPI) component is installed that 
processes all files with an .asp extension. This ISAPI component parses the ASP 
file and executes the appropriate script. Second, the actual script is processed on 
the web server. The processed results can include client-side scripting code but 
for the most part is just simple HMTL. Returning only HTML has two 
benefits: any modern web browser can view the results of an ASP application and 
the additional capabilities of the browser is less of an issue.</P>
<P>Since Active Server Pages supports VBScript, you can easily move 
from developing Outlook forms to developing Active Server Pages. The only 
difference in the development process is that you should use the CDO library to 
write your Active Server Pages application rather than the Outlook object 
library, because CDO was designed to be multiuser and server-based.</P>
<P>The following code is an example of an Active Server Pages 
application. This example uses the VBScript function 
<I>Now</I> to print out the date and time that the Active Server Pages application ran on the web server.</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%@ LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML//EN&quot;&gt;

&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;ASP Example&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt;I was created on &lt;%=Now()%&gt;&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE></TD></TR></TABLE></P>

<P>As you can see, the syntax of the ASP script is a little bit different from 
the syntax for Outlook code. To tell the web server that you want to run a 
script on the server, you must enclose it in special characters: 
<I>&lt;%</I> and <I>%&gt;</I>. Active Server Pages supports placing your script directly in your HTML code&#8212;the script 
does not have to be in a separate section of the HTML file.</P>
<P>Take a look at the first line of the code:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%@ LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
</PRE></TD></TR></TABLE></P>

<P>ASP assumes that the default language for server-side script is VBScript. If 
you replace VBSCRIPT with JSCRIPT, you can write server-side JScript code.</P>
<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>You can specify the default ASP language for an 
application in the Management Console for IIS. Open the Properties window 
for an application, and in the Applications Settings area, click the 
Configuration button. On the App Options tab, type the desired 
default language in the Default ASP Language text box.
</BLOCKQUOTE></DIV></P>

<P>You might be wondering what the 
<I>&lt;%=Now()%&gt;</I> code does in this example. The equal sign 
(<I>=</I>) indicates that the code should evaluate the expression, 
which in this case returns the current date and time. As you will see, the equal sign 
in ASP is a shortcut for calling the <I>Write</I> method of the Response object.</P>

<A NAME="246"><H2>Global.asa</H2></A>

<P>If you've viewed the actual directories that contain .asp files, you might 
have noticed a certain file with the .asa extension: Global.asa. This is a special file 
in ASP applications that allows you to include global code that executes when 
an application starts and ends and also when a session starts and ends. One 
thing to remember is that the Global.asa is an optional file for your web 
applications. A skeleton Global.asa file is shown here:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;VBSCRIPT&quot; RUNAT=&quot;Server&quot;&gt;
    Sub Session_OnStart
        'Put your session startup code here
    End Sub
    Sub Session_OnEnd
        'Put your session termination code here
    End Sub
    Sub Application_OnStart
        'Put your application startup code here
    End Sub
    Sub Application_OnEnd
        'Put your application termination code here
    End Sub
&lt;/SCRIPT&gt;
</PRE></TD></TR></TABLE></P>

<P>The Global.asa file contain stubs for your session and application start 
and end subroutines. To understand when these subroutines are called, you 
must understand what exactly constitutes a session and an application inside ASP.</P>
<P>Normally when you browse web pages, the web server does not 
remember who you are, where you have been, or any variables associated with you. 
One of the great things about ASP is that it transforms the applications you can 
build on the HTTP protocol from being stateless to being able to track the state 
of users. This ultimately lets you create global variables that are maintained for 
users throughout an application.</P>
<P>An ASP application consists of a virtual directory and associated files. 
But to understand when an ASP application starts and ends, you'll need a little bit 
more explanation of how ASP works. For your 
<I>Application_OnStart</I> subroutine to be called, the first user must request an .asp file from the virtual directory of 
your ASP application. The user can request an HTML file or other types of files 
from that directory. However, these requests will not cause the 
<I>Application_OnStart</I> subroutine to be called. The user must explicitly request an ASP file. This is 
the only time this subroutine will be called, unless you restart the application. 
Restarting the application usually consists of restarting the Web service.</P>
<P>You should use the <I>Application_OnStart</I> subroutine to initialize 
global variables across the lifetime of the web application. For example, a good 
example of a variable to initialize or set in your 
<I>Application_OnStart</I> subroutine is one that counts the number of users who have used your application. To 
improve performance, for every user in your ASP application, you should initialize in 
the <I>Application_OnStart</I> subroutine any server components that you will use. 
Figure 8-2 illustrates a web browser sending a request to an ASP application for 
the first time.</P>

<P>
<A HREF="javascript:fullSize('F08oh02x.htm')"> <img src="images/F08oh02.JPG" width=404 height=93 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 8-2</B> <I>When the first user of an application requests an .asp file, the </I>Application_OnStart<I> event is fired and then the </I>Session_OnStart<I> event fires.</I><!-- /CAPTION -->
</P>

<P>When the user who first requested the ASP page also browses an .asp 
file in your application, the 
<I>Session_OnStart</I> subroutine is called. Unlike 
the <I>Application_OnStart</I> subroutine, the 
<I>Session_OnStart</I> subroutine is called for any user who makes an application file request. With ASP, each user of 
your application is considered to have a distinct session with the web server. As a 
user browses web pages in your ASP application, ASP implements and maintains 
state in a session by using cookies&#8212;whenever a user connects to your application, 
a file containing information (a cookie) is saved on the user's machine. When 
his session ends and he closes his web browser, the cookie is removed and the 
session is invalidated. If he reconnected to your application, his machine 
would receive a new cookie and a new session would be started. For this reason, 
the users of your application must support and accept cookies; otherwise, your 
ASP applications will not fully function. You can still use the server-side script 
of ASP, but you cannot maintain state information for any of your users.</P>
<P>The <I>Session_OnStart</I> subroutine is best used to initialize session 
variables for individual users. Session scope variables include a connection to 
Exchange Server for an individual user and personalized information that a user has 
set in your application&#8212;for example, a user could specify a background color 
for web pages that is stored in a session variable. Then, each page the user 
accesses from your site during a session could be displayed in his personalized 
background color. Figure 8-3 shows each web browser starting a new session when 
accessing an ASP application.</P>

<P>
<A HREF="javascript:fullSize('F08oh03x.htm')"> <img src="images/F08oh03.JPG" width=404 height=308 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 8-3</B> <I>Whenever a new user accesses your ASP application, the </I>Session_OnStart<I> event fires. </I>Application_OnStart<I> fires only when the first user accesses your application.</I><!-- /CAPTION -->
</P>

<P>The <I>Session_OnEnd</I> subroutine is called when the session with the 
web server ends. This end state can be reached in two ways:</P>

<UL>
<P><LI>When the user has not requested or refreshed a web page in the 
application for a specified amount of time</LI></P>
<P><LI>By explicitly calling the 
<I>Abandon</I> method on the Session object</LI></P>
</UL>

 <P>By default, IIS sets the timeout interval at 20 minutes. You can change 
this interval either through the administration program for IIS or by setting 
the TimeOut property on the intrinsic Session object in ASP. For example, to set 
a particular script timeout to 10 minutes, you would write the following code 
in your ASP application:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;% Session.TimeOut = 10 %&gt;
</PRE></TD></TR></TABLE></P>

<P>The second way to reach the end state&#8212;by explicitly calling the 
<I>Abandon</I> method on the Session object&#8212;immediately ends the session and calls 
the <I>Session_OnEnd</I> subroutine.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
Applications discussed in later chapters (CDO Help 
Desk, Event Scripting Expense Report, Routing Objects Expense 
Report) provide a logout menu option. This option calls another ASP file, 
which calls the <I>Abandon</I> method on the Session object to end the session.
</BLOCKQUOTE></DIV></P>

<P>One final note about sessions: you have to be careful when you 
redirect people to other virtual directories in your application. Developers, including 
me, commonly make the mistake of redirecting users to another virtual root 
and forget that this is considered by ASP to be an application. When you do 
this, the session variables you establish in one application will not transfer to the 
other application. If you want to share session variables between the two 
applications, you should place the second application under the same virtual directory in 
IIS as the first application.</P>
<P>When a web application ends, the 
<I>Application_OnEnd</I> subroutine is called. You end a web application in one of two ways: by shutting down the web 
server, or by stopping your application by using the Unload button in the IIS 
administrator. To use the Unload button, you must be running your web 
application in a separate memory space. So make sure you save any application scope 
variables to a persistent medium, such as to your Exchange Server or to a 
database, so that when your application restarts, the 
<I>Application_OnStart</I> subroutine can reload the values. For example, you don't want a user-counter variable to 
restart at zero every time your application restarts. You should also destroy 
any server objects that you have created with an application scope. This will 
eliminate potential memory leaks on your server.</P>

<A NAME="247"><H2>Built-In ASP Objects</H2></A>

<P>The real power of ASP applications is that you can write server-side scripts 
and use their intrinsic objects. ASP and its built-in objects enable you to 
generate custom responses and maintain state information. The following section 
describes, in detail, five built-in objects in ASP: Application, Session, 
Request, Response, and Server.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>The only object not covered here is the 
ObjectContext object, available in IIS version 4.0. This object can be used for 
creating ASP applications with transaction capabilities. For more 
information on the ObjectContext object and transactions, consult the 
IIS product documentation.
</BLOCKQUOTE></DIV></P>

<A NAME="248"><H3>Application Object</H3></A>

<P>The Application object is used to store global data related to an application 
that can be shared among all users. By using the methods and properties of this 
object in your application, you can create and set variables that have an 
application scope. To make sure that you do not run into concurrency issues when 
setting your application-level variables, since multiple users can be using the same 
application simultaneously, the Application object provides two methods named 
<I>Lock</I> and <I>Unlock</I>. These methods serialize the access to application-level variables 
so that only one client at a time can read or modify the values. The following 
example shows how to use the <I>Lock</I> and 
<I>Unlock</I> methods to increment a user-counter variable whenever a user accesses the application. The example 
also shows you how to set and retrieve application-level variables by using 
the <I>Application(&quot;VariableName&quot;)</I> syntax:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Example: Application Object&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;% 
    Application.Lock
    Application(&quot;NumVisitors&quot;) = Application(&quot;NumVisitors&quot;) + 1
    Application.UnLock
%&gt;
Welcome! You are visitor #&lt;%=Application(&quot;NumVisitors&quot;)%&gt;.
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE></TD></TR></TABLE></P>

<P>The Application object also contains two other collections beyond 
the variables collection&#8212;Contents and StaticObjects&#8212;which allow you to 
browse through the application-level objects and variables you have created. You 
probably won't use either of these collections in your final applications, but both 
of them provide great debugging functionality. For example, the Contents 
collection enables you to list all the items that have been added to your 
application through a script command, and the StaticObjects collection enables you to 
list all the items with an application scope that have been added using the 
&lt;OBJECT&gt; tag. By adding debug code to your application at design time, when you run 
into application object problems, you can make ASP list all the objects you have 
created with an application scope. The following code illustrates creating 
debug code for both the Contents and StaticObjects collections. You can see the 
code output in Figure 8-4.</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Debugging Application Objects&lt;/TITLE&gt;
&lt;%
    'Create some application variables
    Application.Lock
    Set Application(&quot;oCDOSession&quot;) = _
        Server.CreateObject(&quot;MAPI.Session&quot;)
    Application(&quot;counter&quot;) = 10
    Application.UnLock
%&gt;
&lt;P&gt;Objects from the Contents Collection&lt;BR&gt;
&lt;%
    for each tempObj in Application.Contents
        response.write tempObj &amp; &quot;&lt;BR&gt;&quot;
    next
%&gt;
&lt;P&gt;Objects from the StaticObjects Collection&lt;BR&gt;
&lt;%
    for each tempObj in Application.StaticObjects
        response.write tempObj &amp; &quot;&lt;BR&gt;&quot;
    next
%&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE></TD></TR></TABLE></P>


<P>
<A HREF="javascript:fullSize('f08oh04x.htm')"> <img src="images/f08oh04.JPG" width=404 height=243 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 8-4</B> <I>The debug output for the Contents and StaticObjects collections. As you can see, objects and variables both can have an application scope.</I><!-- /CAPTION -->
</P>

<A NAME="249"><H3>Session Object</H3></A>

<P>The Session object is one you'll use a lot in your web applications. It holds 
the variables for individual users across the web pages in your application. When 
you place a variable in the Session object, that variable is valid only for the 
current user and cannot be shared across users in the same way that an 
Application variable can.</P>
<P>Like the Application object, the Session object contains the Contents 
and StaticObjects collections. You can also create session variables in the same 
way you create <I>Application</I> variables, by using the syntax 
<I>Session(&quot;VariableName&quot;)</I>.</P>
<P>The properties for the Session object include CodePage, LCID, 
SessionID, and TimeOut. The CodePage property represents the language code page 
that will be used to display the content for the HTML page. The Outlook 
HTML Form Converter, which you'll learn about later in this chapter, uses this 
property in its converted forms, as shown here:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;% @LANGUAGE=VBSCRIPT CODEPAGE = 1252 %&gt;
</PRE></TD></TR></TABLE></P>

<P>You can use the LCID, or locale identifier, property in conjunction 
with the CodePage property. The LCID property stores a standard 
international abbreviation that uniquely identifies a system-defined locale.</P>
<P>The SessionID property returns to you the unique session identifier 
for the current user. You should remember, however, that this ID is unique 
only during the lifetime of the ASP application. If you restart your web server 
and therefore restart your web applications, the web server might generate the 
same IDs it already generated for the users before the web application was 
restarted. For this reason, you should avoid storing these IDs and attempting to use 
them to uniquely identify a user of your application. If you always need to 
uniquely identify your users whenever they access your application, you should use 
globally unique identifiers (GUIDs) in cookies, which are saved on the users' computers.</P>
<P>The fourth property of the Session object is the Timeout property. 
This property enables you to change the timeout period associated with a 
particular ASP session. Remember that by default, the timeout is set to 20 minutes. If 
you know that your application will be used for less than 20 minutes, you might 
want to decrease the duration of the timeout so that sessions end more quickly 
and resources are returned to the web server at a faster rate.</P>
<P>The only method of the Session object is the 
<I>Abandon</I> method. As mentioned earlier, by calling this method, the user's session with the web server as 
well as any associated objects and variables for that session are destroyed. If the 
user attempts to reconnect to the web application, a new session starts on the server.</P>

<A NAME="250"><H3>Request Object</H3></A>

<P>The Request object allows you to access the information that was passed 
from the web browser to your web application. The Request object is crucial in 
ASP applications since it enables you to access user input for your server-side 
scripts. For example, suppose a user fills out an HTML form that you created. Once 
the user clicks the Submit button on the form, the Request object contains the 
form information that was passed to the server. By using the collections of the 
Request object, you can retrieve that information and design your application to 
respond based on the user's input.</P>

<P><B>Request object collections</B> The Request object collections are created 
when the user submits a request to the web server either by requesting an ASP file 
or by submitting an HTML form via clicking the Submit button. The three 
collections of the Request object that you'll primarily work with in your ASP 
applications are the Form, QueryString, and ServerVariables collections.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>For information on the other two collections, 
ClientCertificate and Cookies, refer to the IIS documentation.
</BLOCKQUOTE></DIV></P>

<P>To understand when to use these collections, you first need to know 
about the different ways information can be passed from the web browser to the 
web server. Normally in your web applications, you use HTML forms to gather 
input from the user so that you can use it in your calculations or store it in a data 
source. There are two main ways input can get passed to the web server from the 
client browser: via the <I>GET</I> method and via the 
<I>POST</I><B> </B>method. The following example shows an HTML page that contains both methods on the same page:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Forms Galore&lt;/title&gt;
&lt;meta name=&quot;GENERATOR&quot; content=&quot;Microsoft FrontPage 3.0&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form method=&quot;GET&quot; action=&quot;getinfo.asp&quot; name=&quot;GetForm&quot;&gt;
    &lt;p&gt;What is your email address?&lt;/p&gt;
    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;email&quot; size=&quot;20&quot;&gt;&lt;/p&gt;
    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;GetSubmit&quot;&gt; &lt;/p&gt;
&lt;/form&gt;

&lt;form method=&quot;POST&quot; action=&quot;getinfo.asp&quot; name=&quot;PostForm&quot;&gt;
    &lt;p&gt;What is your First Name?&lt;/p&gt;
    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;firstname&quot; size=&quot;20&quot;&gt;&lt;/p&gt;
    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;PostSubmit&quot;&gt; &lt;/p&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</PRE></TD></TR></TABLE></P>

<P>The Action attribute for each of the HTML forms specifies the same 
ASP file, getinfo.asp. The getinfo.asp file is shown here:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Post and Get Methods Example&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;%txtRequestMethod = Request.ServerVariables(&quot;REQUEST_METHOD&quot;)%&gt;
You selected to use the &lt;B&gt;&lt;%=txtRequestMethod%&gt;&lt;/B&gt; Method.
&lt;P&gt;&lt;% if txtRequestMethod=&quot;GET&quot; then %&gt;
You entered your e-mail address as:
&lt;B&gt;&lt;%=Request.QueryString(&quot;email&quot;)%&gt;&lt;/B&gt;
&lt;% else %&gt;
You entered your first name as:&amp;nbsp
&lt;B&gt;&lt;%=Request.Form(&quot;firstname&quot;)%&gt;&lt;/B&gt;
&lt;% end if %&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE></TD></TR></TABLE></P>

<P>This ASP code uses the ServerVariables collection of the Request 
object to check whether the form's <I>Request</I> method was a 
<I>POST</I> or a <I>GET</I> method. Once the file determines which method was used, it displays the correct 
information for that particular type of form. Figure 8-5 shows a sample of the 
<I>GET</I> method.</P>

<P>
<A HREF="javascript:fullSize('f08oh05x.htm')"> <img src="images/f08oh05.JPG" width=404 height=213 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 8-5</B> <I>When a user types an e-mail address and submits the form, the </I>GET<I> method is used to pass the information to the </I>Request<I> object.</I><!-- /CAPTION -->
</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>You can also retrieve other server variables such 
as HTTP_USER_AGENT, which returns information about 
which browser the client is using; and 
LOGON_USER<I>,</I> which represents the Microsoft Windows NT account the user is currently logged on to. 
For a complete list of server variables, please see the IIS documentation.
</BLOCKQUOTE></DIV></P>

<P>As you can see in Figure 8-5 with the 
<I>GET</I> method, the information from the form is actually appended to the URL&#8212;for 
example:<I> http://exserver/examples/getinfo.asp?email=thomriz@microsoft.com
&amp;GetSubmit=Submit.</I> When data is appended to the URL using the 
<I>GET</I> method of a form, you use the QueryString collection of the Request object to retrieve the data. When using 
the QueryString collection, follow this format to retrieve the information:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Request.QueryString(&quot;<I>VariableName</I>&quot;)
</PRE></TD></TR></TABLE></P>

<P>Because the information that is passed to your application appears in the 
address of the user's browser, the user can see it, so you might want to limit when 
you use the <I>GET</I> method. Instead, consider using the 
<I>POST</I> method.</P>
<P>The <I>POST</I> method places the form information inside the HTTP 
header, hiding the information from the client. However, when the 
<I>POST</I> method is used to submit form variables, you cannot use the QueryString collection. 
Instead, you need to use the Forms collection of the Request object. In the 
preceding example, the line</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Request.Form(&quot;firstname&quot;)
</PRE></TD></TR></TABLE></P>

<P>retrieves the information the user typed into the First Name text box on 
the form. You can use this same syntax in your applications to retrieve 
information from an HTML form.</P>

<A NAME="251"><H3>Response Object</H3></A>

<P>The Response object is used to control the content that is returned to the 
client. For example, when you calculate a value on the server, you need a way 
to tell the ASP engine that you want to send the information back to the 
client. You do this by using the <I>Write</I> method of the Response object.</P>
<P>The <I>Write</I> method of the Response object will be the most 
commonly used method in your ASP applications. Even though you have not seen 
any explicit Response.Write statements in the examples, they are there. The 
syntax <I>&lt;%=Variant%&gt;</I> is equivalent to 
<I>&lt;% Response.Write Variant %&gt;</I>. The 
shorthand version makes it easier for you to put these statements in your code quickly.</P>
<P>The Response object has a number of other collections, properties, 
and methods that you can use, such as the Expires property, which tells the web 
browser how long to cache a particular page before it expires. If you do not want 
your clients to cache your web pages, you would add the following line to your 
ASP files to cause your web page to expire immediately on the user's local machine:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;% Response.Expires = 0<B> </B>%&gt;
</PRE></TD></TR></TABLE></P>

<P>The Response object allows you to buffer the output of your ASP 
page. This is useful if you want to hold back the output of your ASP code until 
the script completes its processing. The best example for using buffering is to 
capture errors in your code. For example, by turning buffering on using the 
command <I>Response.Buffer = True</I>, you can check throughout your ASP code 
whether an error has occurred. If one has, you can clear the buffer without sending 
it by using the <I>Response.Clear</I> method, and then you can replace the output 
with new output such as <I>Response.Write &quot;An error has occurred. Please contact 
the administrator.&quot; </I>Finally, you can call the 
<I>Response.End</I> method, which sends the new buffer to the client and stops processing any further scripts in the ASP.</P>

<A NAME="252"><H3>Server Object</H3></A>

<P>The Server object provides you with utility methods and properties to 
modify the information on your web server. This object is used extensively in ASP 
applications because it contains both the 
<I>CreateObject</I> method and the ScriptTimeout property.</P>

<P>The <I>CreateObject</I> method allows you to create an object on the web 
server by passing in the ProgID for the object. Let's look at an example. To create 
a CDO object, you would type this in your ASP file:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oSession = Server.CreateObject(&quot;MAPI.Session&quot;)
</PRE></TD></TR></TABLE></P>

<P>ASP creates an object and passes that object to you in the 
<I>oSession</I> variable. By default, when you do this on an ASP page, the object has page-level 
scope. This means that when ASP is done processing the current page, the object 
is destroyed. Therefore, you might want to create objects on a page and then 
store them by assigning them to either session variables or application variables, 
as shown in this code snippet:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
    Set oSession = Server.CreateObject(&quot;MAPI.Session&quot;)
    Set Session(&quot;oSession&quot;) = oSession
%&gt;
</PRE></TD></TR></TABLE></P>

<P>As you learned earlier, an object that is assigned either a session or 
an application scope will be destroyed when either the session or the 
application ends, respectively. The one issue to watch out for with the 
<I>CreateObject</I> method and some objects is potential performance loss. You can instantiate almost 
every object on your web server as an ASP object, but some objects are 
specifically designed to run in a server-based, multiuser environment such as CDO. 
When you instantiate an object that was not designed for an ASP environment, 
the application performance might suffer if many people hit the page containing 
that object at the same time.</P>
<P>The ScriptTimeout property of the Server object allows you to specify 
how long a script should run before it is terminated. By default, an ASP script 
can run for 90 seconds before it is terminated, but this might not be enough 
time to retrieve data from a data source. By using the following syntax for this 
property, you can increase or decrease the amount of time the script will run 
before termination:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Server.ScriptTimeout = numseconds
</PRE></TD></TR></TABLE></P>

<P>Avoid increasing this number much beyond 90 seconds, because users 
who are waiting for long periods of time might assume the page did not load 
correctly, and they might hit their Stop and then Refresh buttons 
continuously, flooding your web server with requests.</P>

<A NAME="253"><H2>Server-Side Include Files</H2></A>

<P>One other powerful feature beyond the intrinsic objects of ASP is the ability 
to use Server-Side Include files in your ASP files. Include files are just text 
files containing script or HTML that you want to add to your ASP page. 
Microsoft Outlook Web Access, which you will learn about later in this chapter, 
relies heavily on Server-Side Includes for common code libraries in its ASP files. 
The following lines are examples of Server-Side Includes:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;!-- #include file=&quot;library/vbsfunctions.inc&quot; --&gt; 

&lt;!-- #include virtual=&quot;/library/vbsfunctions.inc&quot; --&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="254"><H2>Server Components</H2></A>

<P>ASP can take advantage of built-in objects and also use server components 
to add functionality to ASP. An example of two such components are 
Microsoft ActiveX Data Objects (ADO) and CDO. ADO allows you to connect to 
many types of databases; CDO allows you to connect to Exchange Server and 
other messaging servers. You can also write your own components using any 
COM-based development tool.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>There are a number of other components packaged 
with ASP that you can use in your applications, including Ad 
Rotator, Browser Capability, Content Linking, Content Rotator, File 
Access, Page Counter, and Permission Checker. If you want to learn 
more about these components, you should refer to the documentation 
that ships with IIS version 4.0.
</BLOCKQUOTE></DIV></P>

</BODY>
</HTML>





