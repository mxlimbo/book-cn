<HTML>
<HEAD>
<TITLE>Outlook Events</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06e.htm", "ch06g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="205"><H1>Outlook Events</H1></A>

<P>Outlook supports 11 events that are called when users of your Outlook 
applications try to use some of the built-in capabilities of Outlook. You can write 
code to handle these events as well as to disable these events. Let's look at how to 
add event-handling code to your application and review the sequence of the events.</p>


<A NAME="206"><H2>Writing Event Handlers</H2></A>

<P>The Outlook Script Editor makes it easy to add event handlers to your 
VBScript code. In the Script Editor, select Event Handler from the Script menu. 
Select the event you want to write a handler for, and click Add. Outlook will 
automatically add a skeleton function with the correct parameters for you. All you 
need to do is fill in your specific code to handle the event. The Script Editor does 
not, however, provide the option to add skeleton code to handle the events 
your controls support. In this case, you will need to write your event handlers 
from scratch. In Outlook, the event names are preceded with the word 
<I>Item</I>. For example, the open event handler is named Item_Open.</p>


<A NAME="207"><H2>Disabling Events</H2></A>

<P>You can prevent events and their default behavior from occurring by setting 
the function value, or the name of the event, to 
<I>False</I>. You can then place your own code inside the event handler to replace the standard behavior. For 
example, if you write a custom Contact form that synchronizes the information with 
a database, you can disable the Write event when the database is not available. 
This will prevent Outlook from saving the item and also prevent the two data 
sources, Outlook and the database, from becoming out of sync. The following 
code sample shows an example of this:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Function Item_Write()
    'Call the CheckDatabase function
    boolIsOnline = CheckDatabase()
    if boolIsOnline = False then
        'No database. Do not save the item.
        Item_Write = False
        msgbox &quot;The database is offline&quot;
    end if
End Function

Function CheckDatabase
    'You would put your database connection code here
    CheckDatabase = False
End Function
</PRE></TD></TR></TABLE></P>


<A NAME="208"><H2>Sequence of Events</H2></A>

<P>Here is a list of the built-in Outlook events, which are discussed in more 
detail in the &quot;Programming Outlook and Exchange Supplement&quot; on the 
companion CD:</p>

<UL>

<P><LI>Item_Close</li></p>

<P><LI>Item_CustomAction</li></p>

<P><LI>Item_CustomPropertyChange</li></p>

<P><LI>Item_Forward</li></p>

<P><LI>Item_Open</li></p>

<P><LI>Item_PropertyChange</li></p>

<P><LI>Item_Read</li></p>

<P><LI>Item_Reply</li></p>

<P><LI>Item_ReplyAll</li></p>

<P><LI>Item_Send</li></p>

<P><LI>Item_Write</li></p>

</UL>

<P>Outlook also includes another event, named Click, that can be used with 
your custom controls. The Click event is the only control event supported in 
Outlook. The following list describes the sequence of some of these events 
when you perform common Outlook functions:</p>

<UL>

<P><LI><i>Creating a new item using a form or in-cell 
editing.</I>When a user attempts to create a new item in Outlook either by clicking the 
new mail icon to open a form or by starting to type information into 
a new item row in a view with in-cell editing enabled, Outlook 
will fire the Item_Open event.</li></p>

<P><LI><i>Sending an item.</I>When a user attempts to send an item in 
Outlook, the Item_Send event is fired first followed by the Item_Write 
event and then the Item_Close event. If you disable any event in the 
sequence, the other events will not fire.</li></p>

<P><LI><i>Posting an item.</I>When a user attempts to post an item, the 
Item_Write event is fired and then the Item_Close event is fired. If you 
disable any event in the sequence, the subsequent events will not fire.</li></p>

<P><LI><i>Saving an item.</I>When a user tries to save an item, the 
Item_Write event is fired.</li></p>

<P><LI><i>Opening an 
item</I>.When a user opens an item, the Item_Read 
event is fired followed by the Item_Open event.</li></p>

<P><LI><i>Closing an item</I>.When a user attempts to close an item, 
the Item_Close event is fired.</li></p>

</UL>

<P>
<div class="sidebar"><BLOCKQUOTE>
<B>Working with Items That Contain VBScript</B>
<P>Sometimes you'll want to open your Outlook form without 
executing the VBScript code contained in the form. To do this, hold down 
the Shift key while opening the form. This method of opening forms 
is useful while designing your applications because it prevents 
VBScript functions from adding undesirable data into the form.</p>
</BLOCKQUOTE></DIV></P>


</BODY>
</HTML>





