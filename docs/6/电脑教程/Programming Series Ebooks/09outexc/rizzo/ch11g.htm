<HTML>
<HEAD>
<TITLE>Intranet News Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11f.htm", "ch11h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="387"><H1>Intranet News Application</H1></A>

<P>The default pages of many intranets today contain corporate news and 
information. Most of the time, however, the news and information is either 
manually entered by a web designer or pulled from some type of database that 
might not easily support the rendering of attachments for news and general 
information items. Furthermore, frequently a user must e-mail the web designer to 
add new content to the news and information page.</p>

<p>Using Microsoft Exchange Server Public Folders facilitates the 
e-mailing of new content for posting to a web page. By using Public Folders, users 
can e-mail news items with attachments as well as text using any standard mail 
client. Because Exchange Server supports auto-expiring of items in Public Folders, 
users can set how long the item should remain on the news site, which saves the 
web designer time and effort. If the user e-mails the news item using 
Microsoft Outlook, the user can set the message category type and thus control how 
the news item will be identified, or categorized, in the Intranet News 
application. This solution doesn't require any user training because everyone knows how 
to send an e-mail message!</p>

<p>Using Exchange Server Public Folders also simplifies administrative 
tasks for the web designer. The designer can easily set up a group of moderators 
for the content by using the moderation features built into Exchange Server 
Public Folders. This allows items to be screened and approved before they are 
published. (See <A HREF="ch04a.htm">Chapter 4</A> for more information about moderating Public 
Folders.) Figure 11-32 shows the Intranet News application in Microsoft Internet 
Explorer 4.0. Note that this application is written specifically for the 
Internet Explorer 4.0 browser and the marquee feature it contains. You can, 
however, add code to detect the browser you use in your organization and employ 
the correct display mechanisms for that browser type.</p>

<p>
<A HREF="javascript:fullSize('f11oh32x.htm')"> <img src="images/f11oh32.JPG" width=404 height=314 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-32</B> <I>The Intranet News application in Internet Explorer 4.0. The application scrolls news and information on a corporation's intranet site and pulls the information dynamically from an Exchange Server Public Folder.</I><!-- /CAPTION -->
</p>

<A NAME="388"><H2>Setting Up the Application</H2></A>

<P>Before you can install the application, you must have a Windows NT 4.0 
Server and a client with certain software installed. Table 11-4 describes the 
installation requirements.</p>

<P><B>Table 11-4</B> <i>Installation Requirements for the Intranet News Application</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Required Software</th>
<th>Installation Notes</th>
</tr>
<tr>
<td valign="top">Exchange Server 5.5 SP1 with Outlook Web Access</td>
<td valign="top"></td>
</tr>
<tr>
<td valign="top">IIS 3.0 or higher with Active Server Pages</td>
<td valign="top">IIS 4.0 is recommended.</td>
</tr>
<tr>
<td valign="top">CDO library (cdo.dll)<br>CDO Rendering library (cdohtml.dll)</td>
<td valign="top">Exchange Server 5.5 SP1 installs CDO library 1.21 and CDO Rendering library 1.21. Outlook 98 installs CDO library 1.21.</td>
</tr>
<tr>
<td valign="top"><B><I>For the client:</I></B><br>A web browser<br>Outlook 98</td>
<td valign="top">You can run the client software on the same machine or on a separate machine.</td>
</tr>
</table></p>

<P>To set up the Intranet News application, you first need to install the 
application. Copy the Intranet News folder from the companion CD to your 
web server location where you want to run the application.</p>

<P>Start the IIS administration program. Create a virtual directory that 
points to the location where you copied the Intranet News files, and name the 
virtual directory <I>exchnews</I>. Enable Execute permissions for the virtual directory. 
This allows you to use the following URL to access your intranet news site: 
<I>http://</I>yourservername<I>/exchnews.</I></p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
If you use a different virtual directory name, you will 
have to edit the file virtroot.inc accordingly.
</BLOCKQUOTE></DIV></P>

<P>Included with the Intranet News files is a file named Exchnews.pst. 
Make sure the Read-Only flag for this file is unchecked. Launch Outlook and, 
from the File menu, point to Open and then choose Personal Folders File (.pst). In 
the Open Personal Folders dialog box, select the Exchnews.pst file, and click 
OK. In the Outlook Folder List, expand the Exchange Intranet News file 
folder. While holding the Ctrl key, copy the Exchnews folder to All Public Folders.</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
You must install the Exchnews folder to All Public 
Folders or the application will not work. If you cannot install the 
application there, you can modify the code contained in the Intranet 
News application so that it looks for the folder in another location, or 
you can retrieve the folder by using its EntryID.
</BLOCKQUOTE></DIV></P>

<P>Right-click on the Exchnews public folder and select Properties. Click 
on the Permissions tab, and give the Anonymous user Read Items permissions. 
If you want the folder to be moderated, click on the Administration tab and 
then click the Moderated Folder button. Fill out the information in the 
Moderated Folder dialog box. Any new items sent to the folder will first be sent to the 
moderators you select.</p>

<P>To make it easier for you and your users to e-mail information into 
the Exchnews public folder, you can enable displaying the folder in the 
Global Address List. To do this, launch the Exchange Administrator program. 
Expand the Folders tree and then the Public Folders tree. Select the Exchnews 
public folder. Choose Properties from the File menu, click on the Advanced tab, 
and uncheck the check box named Hide From Address Book. Click OK.</p>

<P>To enable the Intranet News application to anonymously access 
the Exchnews folder, expand the Configuration tree for your Exchange Server 
site while still in the Exchange Administrator program. Select the Protocols 
icon, and then double-click HTTP (Web) Site Settings in the right pane. Make 
sure that the check box named Allow Anonymous Users To Access The 
Anonymous Public Folders is checked. Then click on the Folder Shortcuts tab. Click 
New, and select the Exchnews Public Folder in the tree. Click OK twice.</p>

<p>You're finished. You can now add news to the Exchnews public folder. 
Test it from the URL <I>http://</I>yourservername<I>/exchnews.</I></p>

<A NAME="389"><H2>Anonymous Logon</H2></A>

<P>The Intranet News application uses the anonymous logon capabilities of 
the CDO library because the application does not require people to 
authenticate before being able to read the news ticker on the site. The way anonymous 
access works in the CDO library is that Exchange Server supports a new 
anonymous user permission feature, which allows you to set the permissions for 
all users who access the server anonymously. By using this feature, you can 
set whether anonymous users can create, delete, read, or modify items in folders.</p>

<p>Developers typically forget that when they set up the application, they 
need to actually publish the folder as an anonymous folder using the Exchange 
Administrator program. Even though you might give users anonymous access to 
the folder, the folder will not appear in the anonymous Public Folder 
hierarchy through CDO. Exchange Server has a very good reason for making you 
take this explicit step to publish the folder anonymously: you probably do not 
want anonymous users browsing through your Public Folder hierarchy. 
Exchange Server keeps a list of the published anonymous folders in the Exchange 
Server directory so that you can retrieve them by using the CDO Rendering 
library, as you'll see in the next section.</p>

<P>The Intranet News application logon is different from the previous 
two logon methods we've seen because it uses anonymous logons. Instead of 
storing the CDO session in an ASP session variable, as in the Calendar of 
Events application, the Intranet News application stores the CDO session in the 
Application object so that you can keep sessions for different users distinct. 
You want to keep the sessions separate because your users are operating in 
different security and configuration contexts.</p>

<p>With anonymous access, all users are treated in the same way. They 
have the same security context and are not identified individually by CDO. 
Anonymous access assumes you do not care when an anonymous user logs on or 
logs off, because these processes are not unique to the individual user. 
Therefore, to increase performance, the application stores a valid anonymous CDO 
session in the ASP application scope and shares this session across all the users who 
access the application.</p>

<P>One more issue to consider for anonymous users is that they cannot 
access folders other than Public Folders. This means that a user cannot access 
a mailbox when logging in using the anonymous method. Instead, the user 
is allowed to access only the published list of Public Folders that you set up in 
the Exchange Server Administrator program.</p>

<p>When a user logs on anonymously, you call the 
<I>Logon</I> method of the CDO Session object, which is the same method you call to authenticate a user. 
However, instead of passing in the server name and the mailbox as the profile 
information, you must pass in the Exchange Server enterprise name, the site 
name, and the configuration container; the server's container; and the server name. 
For example, if your Exchange Server organization was CompanyABC, your site 
was New York, and your server name in that site was Exchange1, the profile 
information would look like this:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
/o=CompanyABC/ou=New York/cn=Configuration/cn=Servers/cn=Exchange1
</PRE></TD></TR></TABLE></P>

<P>You do not have to hard-code the Exchange Server organization and 
site information into your applications. Instead the CDO Rendering library allows 
you to query this information dynamically from the Registry or from the 
Exchange Server directory service in your application. This query is accomplished by 
using the <I>LoadConfiguration</I> method on the RenderingApplication object and 
then calling the <I>ConfigParameter</I> method.</p>

<p>The first thing you must do when logging a user on anonymously is 
retrieve the enterprise, site, and server name from the Microsoft Windows Registry. 
You cannot call the <I>LoadConfiguration</I> method with the Exchange Server 
directory as the source without first retrieving the necessary information from the 
Registry because CDO must know which directory server to read the 
requested information from. This step is accomplished in the following code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim objRenderApp
Set objRenderApp= Application( &quot;RenderApplication&quot;)
' 1 means load configuration from the Registry
objRenderApp.LoadConfiguration 1, _
    &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\&quot; &amp; _
    MSExchangeWeb\Parameters&quot;
If Not ReportError( _
&quot;RenderingApplication.LoadConfiguration from registry&quot;) Then
    bstrEnterprise= objRenderApp.ConfigParameter(&quot;Enterprise&quot;)
    bstrSite      = objRenderApp.ConfigParameter(&quot;Site&quot;)
    bstrServer    = objRenderApp.ConfigParameter(&quot;Server&quot;)
End If
</PRE></TD></TR></TABLE></P>

<P>Next you create the profile string, which specifies the anonymous 
account you the user want to log on as, and create a valid CDO object. Then, you 
must call the <I>Logon</I> method to actually create an anonymous session with the 
Exchange Server. The following code implements these steps:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
bstrProfileInfo = &quot;/o=&quot; + bstrEnterprise + &quot;/ou=&quot; + bstrSite + _
    &quot;/cn=Configuration/cn=Servers/cn=&quot; + bstrServer +_
    vbLF + &quot;anon&quot; + vbLF + &quot;anon&quot;
Err.Clear
    Set objAMSession1 = Server.CreateObject(&quot;MAPI.Session&quot;)
If Not ReportError( &quot;create MAPI.Session&quot;) Then
    Set objRenderApp= Application( &quot;RenderApplication&quot;)
    Err.Clear
    objAMSession1.Logon &quot;&quot;, &quot;&quot;, False, True, 0, True, bstrProfileInfo
</PRE></TD></TR></TABLE></P>

<P>Now you have an anonymous session with the Exchange Server. 
However, you must remember to not only store the anonymous session object so that 
you can share it throughout your ASP application, but also to store the security 
context handle for the anonymous user session so that when your ASP 
application ends, CDO can kill the current anonymous sessions cleanly. The following 
code implements storing the security context handle in an 
<I>Application</I> scope variable:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
    If Not ReportError( &quot;Anonymous Logon&quot;) Then
        Set Application(&quot;AMAnonSession&quot;) = objAMSession1
        Application(&quot;hImp&quot;) = objRenderApp.ImpID
</PRE></TD></TR></TABLE></P>

<P>IIS will call the following code, taken from Global.asa, when ending 
the ASP application to impersonate the correct security context for the 
anonymous session, and then it will set the 
<I>Application</I> variable for the anonymous 
session to Nothing:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub Application_OnEnd
    Set objRenderApp = Application(&quot;RenderApplication&quot;)
    hImp = Application(&quot;hImp&quot;)
    If Not IsEmpty(hImp) Then
        objRenderApp.Impersonate(hImp)
    End If
    Set Application(&quot;AMAnonFolders&quot;)= Nothing
    Set Application(&quot;AMAnonSession&quot;)= Nothing
    Set Application(&quot;RenderApplication&quot;) = Nothing
End Sub
</PRE></TD></TR></TABLE></P>

<P>After logging on, your application should attempt to open the Public 
Folder store to make sure that the anonymous logon was successful. The easiest 
way to find the Public Folder store with an anonymous logon is to scroll 
through the Infostores collection and use the property 
PR_STORE_SUPPORT_MASK (&amp;H340D0003). This property contains a bitmask of flags that describe 
the characteristics of an Infostore object. One of these flags, STORE_
PUBLIC_FOLDERS (&amp;H00004000), identifies a Public Folder store. 
The following code shows you how to use these properties to find the Public 
Folder store in your anonymous logon:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
        For i = 1 To objStores.Count
            Set objStore = objStores.Item(i)
            ' PR_STORE_SUPPORT_MASK
            lMask = objStore.Fields.Item(&amp;H340D0003) 
            'Err.Clear
            ' STORE_PUBLIC_FOLDERS
            If lMask And &amp;H00004000 Then
                Exit For
            End If
        Next
    End If
End If
</PRE></TD></TR></TABLE></P>

<A NAME="390"><H2>Retrieving the Folder and Messages</H2></A>

<P>The next step in the application is to find the Exchnews Public Folder in 
the published Public Folder list, access the messages the folder contains, and 
render the messages to the Internet Explorer 4.0 marquee control. To access 
the Exchnews folder, you first need to retrieve the list of published Public 
Folders for anonymous users. To do this, you use the same method that we used to 
access the enterprise and site information, the 
<I>LoadConfiguration</I> method. This time, however, we pass as a parameter the number 
<I>2</I>, which indicates that we want to load the information from the Exchange Server Directory rather than 
from the Registry. Once CDO loads the information from the directory, we can 
use the <I>ConfigParameter</I> method to retrieve specific parameters from the 
Exchange Server directory. One of these parameters is the list of anonymously 
published Public Folders. This list is returned as a string array of entryIDs for the 
anonymous Public Folders. The following code implements this process:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
' 2 means load configuration from the DS
objRenderApp.LoadConfiguration 2, &quot;&quot;
If Not ReportError( _
&quot;RenderingApplication.LoadConfiguration from DS&quot;) Then
    amFolders = objRenderApp.ConfigParameter( _
        &quot;Published Public Folders&quot;)
</PRE></TD></TR></TABLE></P>

<P>We then must add two items to the list of anonymous folders: a 
dummy folder, which represents the root of all the public folders; and an Infostore 
object, which represents the Public Folder store. Even though we will not use 
either of these items in this application, you should do this whenever you are 
accessing anonymous folders using an anonymous logon. These two items allow 
the CDO Rendering library to correctly render the anonymous Public Folder 
information store. If you do not add these items, you might receive an error, 
or your folder hierarchy might look incorrect when rendered. The code for 
adding these items takes advantage of dynamic arrays in VBScript, as you can see in 
this snippet of code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
    iFolderCount = UBound(amFolders)
    ReDim Preserve amFolders(iFolderCount + 2)
    ' To the list of folders, add two things:
    ' ...a name for the pseudofolder we're making up
    amFolders(iFolderCount + 1) = &quot;Public Folders&quot;
    ' ...and a store interface so that the renderer can get 
    ' stuff from the folders
    Set objStores = objAMAnonSession.InfoStores
    For idx = 1 To objStores.Count
        Set objStore = objStores.Item(idx)
        ' PR_STORE_SUPPORT_MASK
        lMask = objStore.Fields.Item(&amp;H340D0003)
        ' STORE_PUBLIC_FOLDERS
        If lMask And &amp;H00004000 Then
            Set amFolders(iFolderCount + 2) = objStore
            Exit For
        End If
    Next
    Application( &quot;AMAnonFolders&quot;)= amFolders
End If  'LoadConfiguration
</PRE></TD></TR></TABLE></P>

<P>Now that we have the correct list of items in the array for all the 
anonymous Public Folders, we need to find the Exchnews Public Folder. Scroll 
through the array of folder entryIDs, retrieve each folder, and then check the name of 
the folder against the literal &quot;Exchnews&quot;. When we find the Exchnews folder, 
we should break out of the loop because hundreds or thousands of 
anonymous Public Folders could be available. As you can see in the following code, 
when the Exchnews folder is found, the folder is set to an object variable, its 
Messages collection is retrieved, and, using the 
<I>Sort</I> method on the Messages collection, the items are sorted in descending order so that the most recent messages 
are moved to the top of the Internet Explorer marquee control.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
If CheckAMAnonSession Then
    Set objAMAnonSession= Application( &quot;AMAnonSession&quot;)
End If
If CheckAMAnonFolders Then
    amFolders= Application( &quot;AMAnonFolders&quot;)
End If
For iFolder = LBound( amFolders) to (UBound( amFolders) - 2)
    ' amFolders is an array of folder IDs.
    ' Get the FolderID of the exchnews public folder.
    Set objFolder= objAMAnonSession.GetFolder( amFolders( iFolder), _
        NULL)
    if objFolder.Name = &quot;Exchnews&quot; then
        exchnewsid = amFolders(iFolder)
        exit for
    end if
Next
set objFolder = objAMAnonSession.GetFolder(exchnewsid,NULL)
set objMessages = objFolder.Messages
'Sort the messages descending so that newer messages are at the top
objMessages.Sort 2
</PRE></TD></TR></TABLE></P>

<A NAME="391"><H2>Displaying the News Items</H2></A>

<P>Once we have retrieved and sorted the items in the folder, we need to put 
the items into the marquee control. Suppose some users want to categorize 
their news items so that the items can be read in context. For example, the 
human resources department might want to submit items to the folder that 
represent different human resources offerings, which can be broken down into 
categories such as benefits, work and life balance, and training. Human resources 
might also want to include a banner on the screen before these messages appear to 
tell users which category the news corresponds to. To implement this sorting, 
the application uses the Categories property on Outlook messages. A user can 
assign a single category to a news item, and the application will display the 
selected category in the marquee control. If the user does not enter a category for 
the item, the application automatically displays the item as a general news item.</p>

<p>The application automatically detects as newer items any items entered 
into the news system within seven days of the current date. To highlight all new 
items in the Public Folder, these items receive a new graphic next to their text.</p>

<p>The next chunk of code implements all of this. To scroll through all 
news items in the folder, the application uses a For...Each loop on the Messages 
collection for the folder. The application then checks the Categories property 
on the item to see whether any categories exist. (Remember that the 
Categories property is an array of strings, and to access an individual member, you 
must specify the index using the following syntax: 
objMessage.Categories()(Index).) The application then checks the date of the message, and if the message 
was received within the last seven days, the application adds the new graphic to 
the item. The marquee control also has hyperlinks to the messages. When the 
user holds the mouse pointer over a hyperlink or holds the mouse button down 
while the mouse pointer is over the marquee, the control will stop scrolling so that 
the user does not have to chase the hyperlinks and can read the text.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;TD WIDTH=&quot;20%&quot; VALIGN=&quot;Top&quot;&gt;
&lt;MARQUEE DIRECTION=UP ID=&quot;Marquee&quot; BEHAVIOR=SCROLL SCROLLAMOUNT=10 
SCROLLDELAY=500 TITLE=
&quot;Hold the mouse down or over an item to stop the News Ticker.&quot;  
ONMOUSEDOWN=&quot;this.stop();&quot;
ONMOUSEUP=&quot;this.start();&quot;&gt;
&lt;% for each objMessage in objMessages %&gt;
    &lt;DIV CLASS=big&gt;
    &lt;% 
    on error resume next
    strCatName = objMessage.Categories(0)(0)
    if strCatName = &quot;&quot; then
        strCatName = &quot;General&quot;
    end if
    %&gt;
    &lt;%=strCatName%&gt; News&lt;/DIV&gt;
    &lt;hr&gt;
    &lt;a href=&quot;details.asp?id=&lt;%=objMessage.ID%&gt;&quot; 
    ONMOUSEOVER =&quot;this.style.textDecorationUnderline=true; 
    document.all['Marquee'].stop()&quot;
    ONMOUSEOUT=&quot;this.style.textDecorationUnderline=false; 
    document.all['Marquee'].start()&quot;&gt;
    &lt;% if (datediff(&quot;d&quot;, objMessage.TimeReceived, Date()) &lt;= 7) then %&gt;
        &lt;img src=&quot;newicon.gif&quot; border=0 align=&quot;center&quot;&gt;
    &lt;% end if %&gt;
    &lt;FONT FACE=&quot;VERDANA, ARIAL, HELVETICA&quot; SIZE=&quot;2&quot;&gt;
    &lt;%=objMessage.Subject%&gt;
    &lt;/FONT&gt;
    &lt;/a&gt;
    &lt;P&gt;
    &lt;% strCatName = &quot;&quot;
next %&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="392"><H2>Reading the Details of a Specific News Item</H2></A>

<P>Every news item scrolled through the marquee has a hyperlink to the 
file details.asp. The details.asp file allows the user to drill into the specifics of 
a news item and to see any rich text, attachments, or hyperlinks that the 
author of a news item entered into the Outlook message sent to the Exchnews 
Public Folder. This information is rendered to the browser by using the CDO 
Rendering library. An example of a details page for an item is shown in Figure 
11-33. Compare it to the same details page presented as an Outlook message, shown 
in Figure 11-34.</p>

<p>
<A HREF="javascript:fullSize('f11oh33x.htm')"> <img src="images/f11oh33.JPG" width=404 height=283 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-33</B> <I>The details of the intranet news item include rich text, hyperlinks, and attachments.</I><!-- /CAPTION -->
</p>

<p>
<A HREF="javascript:fullSize('f11oh34x.htm')"> <img src="images/f11oh34.JPG" width=404 height=329 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-34</B> <I>The item in Figure 11-33, shown as an Outlook message. Notice how the web and Outlook versions look almost identical. This is due to the CDO Rendering library's automatic conversion of rich text to HTML.</I><!-- /CAPTION -->
</p>

<p>The Events Calendar and Intranet News applications use similar code 
to render information to the web user, but the Intranet News application uses 
the CDO Rendering library in a slightly different way. In the Events Calendar 
application, the HTML generated by the CDO Rendering library is added to 
the Response object of the ASP object model. In the Intranet News 
application, the HTML produced is not added to the Response object but rather is 
placed into a string so that the application can modify the HTML before it is 
presented to the user. This modification replaces the generic paper-clip icon that 
CDO automatically renders for all attachments with the specific application icons 
for Microsoft Office products. You will see how this functionality is achieved 
a little later.</p>

<p>Before attempting to render the details of the news item to the 
browser, we first need to change the virtual root of the Rendering application. If we 
do not change this root, all virtual roots in the rendered hyperlinks will point 
to the /Exchange virtual root. Then we have to create an object renderer, 
because we will be rendering two specific properties on the item: the subject and 
the message body. The following code shows you how to accomplish these tasks:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Change the virtual root for the rendering application
Set objRenderApp = Application(&quot;RenderApplication&quot;)
objRenderApp.VirtualRoot = virtroot
'Create an Object Renderer
set objObjRenderer = objRenderApp.CreateRenderer(2)
objObjRenderer.DataSource = objMessage
</PRE></TD></TR></TABLE></P>

<P>To create the page, we have to render the rich-text message body into 
a string. To do this, instead of passing a Response object to the 
<I>RenderProperty</I> method, we set a string variable equal to the 
<I>RenderProperty</I> method, as shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Render the HTML into a string
strHTML = objObjRenderer.RenderProperty(ActMsgPR_RTF_COMPRESSED, 0)
</PRE></TD></TR></TABLE></P>

<P>Now that we have the HTML that the CDO Rendering library 
would normally display in the browser, we need to check to see whether the 
message has any attachments. If it does, then we need to scroll through the HTML 
and change the image source to point to the Microsoft Word, the Microsoft 
Excel, or the Microsoft PowerPoint icons instead of the generic paper-clip icons. 
The following code shows how to check for attachments in the message by using 
the Attachments collection and Count property:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
set oAttachments = objMessage.Attachments
intAttachCount = oAttachments.Count
if intAttachCount &gt; 0 then
'Need to find any Office documents by using the extensions
</PRE></TD></TR></TABLE></P>

<P>If there are attachments, we need to scroll through the attachments 
to determine what type of document they are. This is where the code gets 
into manipulating strings, and the degree to which it's confusing depends on 
how well you know the string functions in VBScript! I built this code so that you 
can add your custom extension and image types to it, which enables documents 
to be displayed with their specific icons rather than with generic icons. If the 
code does not find the text for the application in the document, it leaves the 
generic icon. Following is the code for replacing the images in the message text of 
an item for Word documents. The code for PowerPoint and Excel attachments 
is very similar and can be found in the code on the companion CD:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Find all the Word docs
found = 1
Do while (found &lt;&gt; 0 or found &lt;&gt; Null)
    found = instr(found, strHTML, &quot;.doc&lt;/A&gt;&quot;)
    if found &lt;&gt; 0 then
        strIcon = &quot;Iword.gif&quot;
        revfound = instrrev(strHTML, &quot;generic.gif&quot;, found)
        newstrHTML = Replace(strHTML, &quot;generic.gif&quot;, strIcon, _
            revfound,1)
        origstrHTML = Left(strHTML, revfound-1)
        strHTML = origstrHTML &amp; newstrHTML
        found = found + 1
    end if
Loop
</PRE></TD></TR></TABLE></P>

<P>This code sets a variable named <I>found </I>equal to 
<I>1</I>. The variable is used as the starting point for the string and also as a Boolean for the Do&#8230;While 
loop, which parses the string. The Do&#8230;While loop searches through the string 
until no .doc extensions representing Word documents are found or until the 
<I>InStr</I> function returns a Null value, which would indicate that the source or 
string being searched for is Null&#8212;in other words, some weird condition has 
occurred in string processing. When searching through the string, the application 
knows that the CDO Rendering library always follows the .doc extension with an 
ending hyperlink tag. Adding <I>&lt;/A&gt;</I> to the search string almost guarantees that 
the search will not return random .doc strings in the text of the message.</p>

<p>If the application finds a location where the .doc&lt;/A&gt; string occurs, it 
uses the <I>InStrRev</I> VBScript function to perform a reverse lookup from the 
location of .doc&lt;/A&gt; back through the string to the Word documents 
corresponding to the generic paper-clip icon. (The CDO Rendering library will always use 
the generic.gif image for attachments, because this image is hard-coded for use 
in the CDO code.) The code then uses the 
<I>Replace</I> function of VBScript and replaces generic.gif with the Word icon. The final parameter for the 
<I>Replace</I> function, <I>1</I>, tells the code to replace only one instance of generic.gif in the string. 
This stops VBScript from going through the entire string and replacing all 
references to generic.gif.</p>

<p>You might be wondering why the code then takes the leftmost portion 
of the string up to the point where the new image string was replaced. The 
reason is that the <I>Replace</I> function does not return the entire string after 
making the replacements. Rather, this function returns from the point where the 
replacement started to the end of the string. This means that our HTML string is 
now missing its entire left-hand portion up to the point where we replaced the 
image. For this reason, the code combines the return value from the 
<I>Replace</I> function with the return value from the 
<I>Left</I> function to re-create the original string 
with our new replacement. Then the code increments the 
<I>found</I> variable so that we do not enter into an infinite loop, finding the same .doc extension at the 
same point in the string.</p>

<p>To render the final HTML string that we create, the application calls 
the <I>Write</I> method on the Response ASP object to send the string as HTML to 
the browser. The code also uses the 
<I>RenderProperty</I> method of the CDO Rendering library to display the subject of the news item from the message, as shown 
in the following code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;td width=&quot;980&quot; height=&quot;422&quot; valign=&quot;top&quot; rowspan=&quot;3&quot; align=&quot;center&quot;&gt;
&lt;p&gt;&lt;h1&gt;&lt;B&gt;From &lt;%=Request.QueryString(&quot;cat&quot;)%&gt; News:&amp;nbsp;&lt;/B&gt; 
&lt;!--
Render the Subject
--&gt;
&lt;I&gt;&lt;%objObjRenderer.RenderProperty ActMsgPR_SUBJECT, 0, Response%&gt;
&lt;/I&gt;&lt;/h1&gt;&lt;/p&gt;
&lt;B&gt;&lt;U&gt;Details:&lt;P&gt;&lt;/U&gt;&lt;/B&gt;
&lt;!--
Render the body with our replacements
--&gt;
&lt;%response.write strHTML%&gt;
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





