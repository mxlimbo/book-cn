<HTML>
<HEAD>
<TITLE>How Forms Work</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05b.htm", "ch05d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="142"><H1>How Forms Work</H1></A>

<P>Before we dive into building forms, let's step back and take a look at how forms work inside the Outlook and Microsoft Exchange Server environments. When you double-click on an Outlook item to open it, Outlook queries a property on the item named the message class. The message class uniquely identifies the form that the item is based on. For example, when you create a new e-mail message, you are creating a form with the message class IPM.Note. (The IPM stands for interpersonal message.) When you send the message to another user, the message class travels with the item as a property. You can see all the different message types simply by adding the message class property to your views. These message classes are extensible, so you can create your own types of forms with unique message classes.</p>

<P>When working with forms in the Outlook development environment, you have to base them on built-in forms. You cannot start with a blank slate as you can with Visual Basic forms. After you customize your form, you can publish it. This is where you can customize the message class. For example, if you modify the standard Outlook Appointment form to make it a class registration system, you can publish the form with its own unique message class, such as IPM.Appointment.Class Registration Form. Although there are multiple message classes, the following list shows the message classes for the built-in Outlook forms:</p>

<p><table width="95%" cellpadding="5">
<tr>
<th>Form</th>
<th>Message Class</th>
</tr>
<tr>
<td valign="TOP">Appointment</td>
<td valign="TOP">IPM.Appointment</td>
</tr>
<tr>
<td valign="TOP">Contact</td>
<td valign="TOP">IPM.Contact</td>
</tr>
<tr>
<td valign="TOP">Journal</td>
<td valign="TOP">IPM.Activity</td>
</tr>
<tr>
<td valign="TOP">Message</td>
<td valign="TOP">IPM.Note</td>
</tr>
<tr>
<td valign="TOP">Post</td>
<td valign="TOP">IPM.Post</td>
</tr>
<tr>
<td valign="TOP">Task</td>
<td valign="TOP">IPM.Task</td>
</tr>
</table></p>

<P>These message classes work in conjunction with the different forms libraries in Outlook. For example, if a user tries to launch one of your custom forms, Outlook searches the different forms libraries to find it. First Outlook checks to see whether the item is a standard form such as the Note form or a Post form. If the item is not a standard form, Outlook checks its forms cache on the local machine. The forms cache is a folder located on the user's local machine, and by default, Outlook caches all custom forms into this folder to improve performance. When a user launches a form for the first time, Outlook downloads the forms definition into the cache. If you change the form, the version of the form in the forms cache will be updated automatically the next time the user tries to launch that particular form type. This automatic update feature ensures that your users always use the most recent version of the application even after you've modified your forms. The user can change the size of the cache in Outlook by selecting Options from the Tools menu, clicking the Other tab, clicking the Advanced Options button, and then clicking the Custom Forms button.</P>

<P>If the form is not in the cache, Outlook searches the forms library of the current folder. If the form is not in the current folder, Outlook searches the user's Personal Forms Library and the Organizational Forms Library. If the user has Web Services enabled in Outlook, Outlook searches the web forms library.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B><HR>
Web Services, a recent addition to Outlook, is especially useful if you plan to convert your Outlook forms to HTML forms by using the Outlook HTML Forms Converter. To learn more about Web Services, refer to <A HREF="ch08a.htm">Chapter 8</A>.
</BLOCKQUOTE></DIV></P>

<P>If Outlook cannot find the form in any of the forms libraries, the standard Outlook form on which the custom application is based is used. For example, if a user receives an appointment item with a message class of IPM.Appointment.Job Interview, and the form does not exist in any of the forms libraries, Outlook will use the standard Appointment form to open the message.</P>

<P>Outlook enables you to save the form definition directly with an item, so when a user does not have a copy of your custom form installed in any of her forms libraries or the user is in a different organization, she can still receive your item and view it. Since the form definition is being saved with the message, the size of the message you send to the user will increase slightly.  You'll learn how to save the form definition with an item later in this chapter in the section &quot;<A HREF="ch05h.htm#182">Publishing Forms</A>.&quot;</P>

<A NAME="143"><H2>Data Binding</H2></A>

<P>To retrieve and set the underlying properties of the form, Outlook uses data binding. If you are new to developing with Outlook, it is important to understand data binding because misunderstanding it is often the cause of early design problems.</P>

<P>The layout of the form, or form definition, is separate from the data of the form. Form definitions, then, do not store any application data. Instead, they store data bindings. At run time, Outlook finds the field that the control on the form is bound to, and retrieves and sets the value of the control. The most common mistake new developers make is to add a new control on a form 
without setting its data binding. If the control is not bound to any field, Outlook does not maintain the data in the Exchange Server database. You will learn how to implement data binding later in this chapter.</P>

</BODY>
</HTML>






