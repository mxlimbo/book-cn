<HTML>
<HEAD>
<TITLE>Exchange Server Schema</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14e.htm", "ch14g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="495"><H1>Exchange Server Schema</H1></A>

<P>To write applications using ADSI for the Exchange Server directory, you 
must first understand the Exchange Server directory schema. This schema 
defines the available object classes as well as the relationship between these objects 
in the directory. This schema also contains the attributes for each object class.</p>

<P>To access the Exchange Server directory schema, you need to run 
the Exchange Administrator program in raw mode. To do this, run the file 
admin.exe with the /r switch. After the Exchange Administrator program starts, select 
Raw Directory from the View menu. You should see a container named 
Schema appear in the left pane. When you select the Schema container, you will see 
all the attributes and classes defined by the Exchange Server schema in the 
right pane, as shown in Figure 14-1. In the Exchange Administrator program, 
attributes have a folder icon marked with an 
<I>A</I>, and classes have a folder icon marked with a 
<I>C</I>. To view and edit information about attributes and classes, 
select the object and choose Raw Properties from the File menu.</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
Be careful when modifying the Exchange Server 
schema, because you could cause unwanted behavior in your Exchange Server.
</BLOCKQUOTE></DIV></P>

<P>
<A HREF="javascript:fullSize('f14oh01x.htm')"> <img src="images/f14oh01.JPG" width=404 height=250 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-1</B> <I>The Schema container in the Exchange Administrator program. You can search for attributes and classes defined by the Exchange Server schema using this view.</I><!-- /CAPTION -->
</p>

<P>Three specific properties on the items contained in the schema are 
important when writing ADSI applications: the Access-Category property, the 
Description property, and the Heuristics property.</p>

<A NAME="496"><H2>Access-Category Property</H2></A>

<P>The Access-Category property specifies the rights needed by a user to 
modify an item on the Exchange Server. This property contains an integer value:</p>

<UL>
<P><LI>The value <I>0 </I>specifies that only the system can modify an item.</li></p>

<P><LI>The value <I>1</I> allows users with the Exchange Modify Admin 
Attributes right to modify an item.</li></p>

<P><LI>The value <I>2 </I>allows users who have the Exchange Modify User 
Attributes right to modify an item.</li></p>

<P><LI>The value <I>3 </I>specifies that users who have the Exchange 
Modify Permissions right can change an item.</li></p>
</UL>

 <P>By default, users assigned as owners of a mailbox automatically have 
the Modify User Attributes right on their mailbox. When working with ADSI, 
however, check the Access-Category property for any attributes you want to 
modify before attempting to call your code. Exchange Server sets administrator 
access on some of the common properties that you might want to allow users to 
modify in your programs. The best example is the office attribute on a mailbox. 
By default, the office attribute has an Access-Category value of 
<I>1</I>, which specifies that only users with the Modify Admin Attributes permission on the 
mailbox can change it. Users by default do not have this right, so your ADSI code 
cannot modify the office attribute if it is running in the security context of 
the current user. You can modify the Access-Category property in the schema 
so that users can modify certain properties without having the Modify 
Admin Attributes right.</p>

<A NAME="497"><H2>Description Property</H2></A>

<P>The Description property specifies the LDAP name of the item. Sometimes 
in the Exchange Server directory, the LDAP name for an attribute or class is 
different from the Exchange Server directory name for that attribute or class. 
Because ADSI uses the LDAP provider when accessing the Exchange Server 
directory, you should always use the LDAP name of an attribute or class when 
working with ADSI.</p>

<A NAME="498"><H2>Heuristics Property</H2></A>

<P>The Heuristics property contains configuration information about the item. 
The value for this property is an integer, which represents a total of 5 bits. For 
example, a value of <I>3</I> stored in this property represents setting bit 
0 to the value <I>1</I>, and setting bit 
1 to the value <I>1</I>. Figure 14-2 shows how setting the bits 
for this property works.</p>

<P>
<A HREF="javascript:fullSize('F14oh02x.htm')"> <img src="images/F14oh02.JPG" width=404 height=110 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-2</B> <I>Bits used with the Heuristics property.</I><!-- /CAPTION -->
</p>

<P>The following describes the effects of changing bit values for the 
Heuristics property:</p>

<UL>
<P><LI>Bit 0 in this property specifies whether to replicate the property between Exchange Server sites. Setting the property to <I>0</I> makes Exchange Server replicate the property. A setting of <I>1</I> prevents the property from being replicated.</li></p>

<P><LI>Bit 1 controls the visibility of an item to LDAP clients. Setting 
this bit to <I>0</I> prevents LDAP clients from seeing the item. Setting this 
bit to <I>1 </I>allows both anonymous and authenticated LDAP clients to 
find and query the item.</li></p>

<P><LI>Bit 2 provides control over visibility of the item based on 
authentication of the client. If you set this bit to 
<I>0</I>, only anonymous clients can view the item; authenticated clients will not be able to view it. If 
you set this bit to <I>1</I>, only authenticated clients will be able to see the item.</li></p>

<P><LI>Bit 3 sets whether the item is an operational item. Setting this bit 
to <I>0</I> tells Exchange Server to not make the item an operational item. 
A setting of <I>1 </I>specifies that the item is an operational item. If this bit 
is set to <I>1</I>, the item will not be visible through ADSI, even though 
you can set the properties on the item. To access the values in an 
operational item, you must use the OLE DB provider provided by 
ADSI and an ActiveX Data Objects (ADO) query, which is described 
later in the chapter for the sample ADSI application.</li></p>

<P><LI>Bit 4 sets whether the item should be visible in the Exchange 
Administrator program user interface. A setting of 
<I>0 </I>makes the item invisible, and a setting of 
<I>1 </I>makes the item visible.</li></p>
</UL>

 <P><div class="sidebar">
<BLOCKQUOTE>
<B>Looking for Other ADSI Properties</B>
<P>If you prefer not to browse the attributes and classes of the 
Exchange Server schema using the raw mode option in the Exchange 
Administrator program, the MSDN Library includes a section that describes 
the layout of the Exchange Server schema. This section can be found 
under the Platform SDK\Database and Messaging Services\Microsoft 
Exchange Server\Microsoft Exchange Server Programmer's 
Reference\Reference\
Directory Schema portion of the MSDN Library.</p>
</BLOCKQUOTE></DIV></P>

</BODY>
</HTML>





