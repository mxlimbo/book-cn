<HTML>
<HEAD>
<TITLE>ADSI Object Library Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14d.htm", "ch14f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="491"><H1>ADSI Object Library Architecture</H1></A>

<P>The ADSI object library is a very approachable object library. Although it 
does not contain many objects, you can perform many functions with them. The 
only potentially difficult aspect of using the ADSI object library is understanding 
how to access the objects in your applications using distinguished path names. At 
first, these path names can be a little intimidating, but after you experiment with 
ADSI and its objects, you will understand how to exploit the power of these 
paths. Creating paths is discussed later in this chapter in the section, &quot;<A HREF="ch14g.htm#499">Creating Paths to Exchange Server Objects and Attributes</A>.&quot;</p>

<P>In the ADSI architecture, every element in a directory service, such as 
the Exchange Server directory service, is represented by an ADSI object. The 
interfaces supported by the ADSI object are determined by the underlying 
functionality of the directory object. For example, a mailbox in Exchange Server, 
which does not contain directory objects under it, supports the IADs interface. 
In contrast, a Recipients container in the Exchange Server directory, which can 
hold objects such as mailboxes, distribution lists, and other Recipients 
Containers under it, implements the IADsContainer interface. Since the requirements 
for a directory object that contains other directory objects are different from 
those for a single directory object, ADSI provides more methods and properties 
through extra interfaces for them.</p>

<A NAME="492"><H2>IADs and IADsContainer Interfaces</H2></A>

<P>The primary interfaces you will use when working with ADSI objects are 
the IADs interface and the IADsContainer interface. The 
IADs interface is required for all ADSI objects. It provides properties that describe the object&#8212;in 
essence, the metadata of the object&#8212;and methods that allow you to manage the 
actual directory information the object contains. ADSI stores this directory 
information in a property cache, which gives you a mechanism to batch changes 
or additions to a specific object in a temporary location, and then burst this 
information to the directory service in one call. This property cache is useful 
because some programming languages such as Visual Basic do not provide native 
batching mechanisms, and without a property cache, every change you make to an 
ADSI object is put over the wire, decreasing performance of your application.</p>

<P>The property cache is useful, but only if you remember to use it! The 
most common mistake new ADSI developers make is not calling the specific 
ADSI method <I>SetInfo</I> to flush the cache and submit to the directory service 
the modifications to the object. If you do not call this method and then exit 
your application, the changes you make will not be persisted in the directory. 
The second most common mistake new ADSI developers make is not calling 
the <I>GetInfo</I> method to refresh the cache after making changes. The 
<I>SetInfo </I>method does not automatically refresh the cache for you.</p>

<P>In addition to supporting the <I>GetInfo </I>and 
<I>SetInfo </I>methods, the IADs interface supports the 
<I>Get</I>, <I>GetEx</I>, <I>GetInfoEx</I>, 
<I>Put</I>,<I> </I>and <I>PutEx</I> methods. As you 
would expect, <I>Get </I>and <I>Put </I>do exactly what their names imply: 
<I>Get </I>retrieves a specific property from the directory, and 
<I>Put </I>saves the value for a specific 
property. The versions of these methods with the 
<I>Ex</I> suffix allows you to get or put a multivalued property. A multivalued property can contain multiple values of 
the same type. The best example of a multivalued property in the Exchange 
Server directory is the Reports property. Since one person can have many direct 
reports, the reports property in the directory is a multivalued property&#8212;multiple 
direct report names can be stored in a single property for the directory object 
named reports. To access this property from ADSI, you must use the 
<I>GetEx </I>method. <I>GetInfoEx </I>is provided so that you can specify which properties to refresh 
in the property cache, preventing you from having to reload the entire cache 
from the underlying directory service.</p>

<P>The properties that the IADs interface implements are Name, 
ADsPath, Class, Schema, and Parent. (For our purposes, the Schema and Parent 
properties are not as important as the other three, so this discussion will focus on 
Name, ADsPath, and Class.) The Name property returns the relative name of the 
object. The ADsPath property returns the path to the object. In Exchange Server, 
this would be the LDAP query string that is used to access the object. The Class 
property is important because it returns the schema class name of the object. 
This property and its return value deserve a bit more attention in the next section.</p>

<A NAME="493"><H2>Exchange Server Object Classes</H2></A>

<P>In Exchange Server are some important class names you should be aware 
of when developing your applications, the most common of which are 
container, groupOfNames, organizationalPerson, person, and remote-address:</p>

<UL>
<P><LI>The container class identifies the object as a container for other 
objects in the directory.</li></p>

<P><LI>The groupOfNames class corresponds to distribution lists in 
the Exchange Server directory.</li></p>

<P><LI>The organizationalPerson class is used to represent recipients in 
the directory.</li></p>

<P><LI>The person class is an abstract class. It is used to represent any 
object that can receive mail, so other objects such as a distribution list 
inherit some attributes from the person class. Because the person class is 
an abstract class, you can never create an explicit object from it.</li></p>

<P><LI>The remote-address class corresponds to a custom recipient in 
the directory.</li></p>
</UL>

<A NAME="494"> <H2>IADsContainer Interface</H2></A>

<P>As mentioned earlier in this chapter, if a directory object contains other 
objects, the directory object is considered a container. In ADSI, a container 
implements not only the IADs interface but also the IADsContainer interface. The 
IADsContainer interface provides you with more methods than those provided 
by the IADs interface so that you can traverse the child objects in the container 
as well as modify the container's properties. As you will see in the sample 
application in this chapter, you can use the For&#8230;Each construct in Visual Basic 
or VBScript to easily loop through all the child objects below a container 
object and retrieve individual properties from each child object. By traversing the 
individual objects under the container, you can easily build a hierarchical view of 
the information stored in the Exchange Server directory.</p>

<P><div class="sidebar">
<BLOCKQUOTE>
<B>Other ADSI Interfaces</B>
<P>Covering the other ADSI interfaces is beyond the scope of this 
book, but you should know that ADSI does provide a powerful feature 
set so that you can build not only directory applications that work 
with Exchange Server but also applications that work with other 
directory services. For example, ADSI defines an IADsComputer interface 
that lets you store information about a computer in a directory service. 
ADSI also defines interfaces such as IADsPrintQueue and 
IADsPrintJob, which enable you to list printers available in the directory service 
and store specifics about the actual print jobs taking place on those 
print queues. For more information on the other types of ADSI 
interfaces that you can use, refer to the &quot;<A HREF="ch14i.htm#511">Getting Help with ADSI</A>&quot; section at 
the end of this chapter.</p>
</BLOCKQUOTE></DIV></P>

</BODY>
</HTML>






