<HTML>
<HEAD>
<TITLE>Calendar of Events Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11e.htm", "ch11g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="378"><H1>Calendar of Events Application</H1></A>

<P>While the Helpdesk application showed you a little bit about the 
calendaring functionality in the CDO library, the Calendar of Events application 
demonstrates the full power of CDO calendaring. The idea behind the Calendar 
of Events application is to allow a corporation to publish, either internally or 
externally, a calendar of corporate events. Since the application is based on 
Exchange Server and Outlook, it is rich enough to support permissions for the creator 
or modifier of the calendar content and easy enough for users to add new 
content by employing familiar tools.</p>

<P>The Calendar of Events application shows how to create publicly 
accessible calendars, use message filters in the CDO library, and use more objects 
in the CDO Rendering library. You will also see some of the current 
limitations in the CDO library and learn about ways to work around these limitations, 
particularly the limitations of not supporting public folder calendars and not 
being able to filter by category when using appointment items.</p>

<P>The monthly results page for the application is shown in Figure 11-23. 
As you can see, the application is web-based, but users can take advantage 
of Outlook's calendaring features to create the contents for the web-based 
calendar. The application dynamically connects and retrieves the information 
that Outlook users create in the Exchange Server database and exposes it to 
web clients. Outlook users can also use their Outlook client to retrieve 
calendar information, as shown in Figure 11-24.</p>

<P>
<A HREF="javascript:fullSize('f11oh23x.htm')"> <img src="images/f11oh23.JPG" width=404 height=302 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-23</B> <I>The monthly view of the Events Calendar in HTML.</I><!-- /CAPTION -->
</p>

<P>
<A HREF="javascript:fullSize('f11oh24x.htm')"> <img src="images/f11oh24.JPG" width=404 height=298 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-24</B> <I>A monthly view in Outlook of the source calendar for the Calendar of Events application.</I><!-- /CAPTION -->
</p>

<A NAME="379"><H2>Setting Up the Calendar of Events Application</H2></A>

<P>Before you can install the Calendar of Events application, you must have 
a Windows NT 4.0 Server and a client with certain software installed. Table 
11-3 outlines installation requirements.</p>

<P><B>Table 11-3</B> <i>Installation Requirements for the Calendar of Events Application</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Required Software</th>
<th>Installation Notes</th>
</tr>
<tr>
<td valign="top">Exchange Server 5.5 SP1 with Outlook Web Access</td>
<td valign="top"></td>
</tr>
<tr>
<td valign="top">IIS 3.0 or higher with Active Server Pages</td>
<td valign="top">IIS 4.0 is recommended.</td>
</tr>
<tr>
<td valign="top">CDO library (cdo.dll)<br>CDO Rendering library (cdohtml.dll)</td>
<td valign="top">Exchange Server 5.5 SP1 installs CDO library 1.21 and CDO Rendering library 1.21. Outlook 98 installs CDO library 1.21.</td>
</tr>
<tr>
<td valign="top"><B><I>For the client:</I></B><br>A web browser<br>Outlook 98</td>
<td valign="top">You can run the client software on the same machine or on a separate machine.</td>
</tr>
</table></p>

<p>To install the application, copy the Calendar Of Events folder from 
the companion CD to the location on your web server where you want to run 
the application.</p>

<P>Start the IIS administration program. Create a virtual directory 
that points to the location where you copied the Calendar 
Of Events files, and name the virtual directory 
<I>events</I>. Enable Execute permissions on the virtual 
directory. This step allows you to use the following URL to access your 
Events Calendar: <I>http://</I>yourservername<I>/events.</I></p>

<p>Launch the Exchange Administrator program. Select Options from 
the Tools menu and click the Permissions tab. Make sure that the Show 
Permissions Page For All Objects check box is checked and the Display Rights For Roles 
On Permissions Page check box is checked. Create a new mailbox that will 
contain the Events Calendar by selecting New Mailbox from the File menu. In the 
Properties dialog box, fill in the information for the mailbox, such as 
<I>Events Calendar</I> for Display and 
<I>events</I> for Alias. Set the Primary Windows NT Account to 
the IIS anonymous user account 
(IUSR_<I>servername</I>). Click on the Permissions 
tab, and add yourself as a user account with permissions to this mailbox.</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
Your anonymous IIS user account should be a domain 
account or at least assigned as the owner of a mailbox in 
Exchange Server. Normally, the account IIS uses to log users on to your 
web pages anonymously is named 
IUSR_<I>servername</I>. The Calendar of Events application uses this account when starting an ASP session 
to automatically log on to the Exchange Server without prompting 
for credentials. You will see how this is used when we step through 
the application. If the IIS anonymous user account is not a domain 
account or cannot be assigned as an owner of a mailbox in Exchange 
Server, change the account so that it can be assigned owner permissions.
</BLOCKQUOTE></DIV></P>

<P>If you use a different alias name for the Events Calendar mailbox, you 
will need to modify the Global.asa file. Open the Global.asa file in the Calendar 
Of Events folder on your IIS server. Find the line</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Application(&quot;MailboxName&quot;) = &quot;events&quot;
</PRE></TD></TR></TABLE></P>

<P>and change the name to the alias name of the Events Calendar mailbox 
you created.</p>

<P>The application includes a file named cats.inc. Since the application 
allows you to filter events based on Outlook categories, you might want to 
change cats.inc to reflect the categories that are important to your application. If 
you do change the categories, you will need to specify the total number of 
categories you want to filter on. The following code is the sample file from the 
companion CD:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;% NumberofCats = 5
Dim strCategories(5)
strCategories(1) = &quot;Business&quot;
strCategories(2) = &quot;Competitive&quot;
strCategories(3) = &quot;Presentations&quot;
strCategories(4) = &quot;Hands-On Training&quot;
strCategories(5) = &quot;Social&quot;
%&gt;
</PRE></TD></TR></TABLE></P>

<P>To change the values for your categories, modify the 
<I>NumberofCats</I> integer to be the total number of categories. Then change the 
<I>Dim strCategories(5)</I> statement to reflect the number of categories, which enables VBScript to 
create an array of the category names. Now type the name of the category as a 
string argument in one of the cells of the array.</p>

<p>If you specified a name for the virtual root that is different from 
<I>/events</I>, find the file named virtroot.inc, open it, and change the virtual root you 
created for the application.</p>

<p>Create a profile for Microsoft Outlook that connects to the Events 
Calendar mailbox you created. You can create a new profile by opening the 
Mail control panel applet and clicking Show Profiles on the Services tab. On 
the General tab of the displayed Mail dialog box, you can add a new profile. 
You can also create a new profile by clicking the New button on the Choose 
Profile dialog box when you start Outlook. If the Choose 
Profile dialog box does not automatically display when you start Outlook, choose 
Options from the Tools menu in Outlook and click on the Mail Services tab. In the Startup Settings 
area, select the Prompt For A Profile To Be Used option.</p>

<p>With Outlook opened to the Events Calendar mailbox, right-click on 
the Calendar folder, select Properties, and click on the Permissions tab. Set 
permissions for the users in your organization who need to create and edit 
appointments in the calendar. You do not have to set the Default permissions on 
the folder, so you can restrict the access permissions for each user in the 
organization and enable permissions for creating and deleting items without 
giving permissions to everyone with access to the calendar. This step will allow 
Outlook users with the proper permissions to view and possibly edit the calendar 
for the Events Calendar mailbox. To open the Calendar folder for the Events 
Calendar mailbox, other users would choose Open from the File menu in 
Outlook and then select Other User's Folder. From the displayed Open Other User's 
Folder dialog box, users can select and open the Calendar folder. You're finished. 
You can now add events to the Outlook calendar for the Events Calendar mailbox, 
and then test viewing those events from the URL 
<I>http://</I>yourservername<I>/events.</I></p>

<A NAME="380"><H2>CDO Sessions</H2></A>

<P>The Calendar of Events application uses the Global.asa file of the 
Helpdesk application with a few changes. The file is modified primarily because 
CDO does not support accessing calendars in public folders or delegated 
calendars (at the time this book went to press). You can access calendars only when you 
are the primary Windows NT account owner of the mailbox. With 
ASP, you can get around this limitation by assigning the anonymous IIS user account as 
the primary owner of a mailbox, thereby making all users who browse your 
web page automatically log on to CDO using this mailbox as their default.</p>

<P>Because IIS uses the security context of this anonymous user account 
to browse web pages anonymously, you do not have to prompt the user for 
security credentials to enable them to log on to the mailbox, as we had to in 
the Helpdesk application. Instead, all you need to do is add a CDO logon to 
the <I>Session_OnStart</I> subroutine in your Global.asa. This logon method will 
force every new web user to log on to the Exchange Server using the mailbox 
you created as well as the security credentials of the anonymous user account in 
IIS. The Global.asa code for the Calendar of Events application is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot; RUNAT=&quot;Server&quot;&gt;

Sub Application_OnStart
    On Error Resume Next
    Set objRenderApp = Server.CreateObject(&quot;AMHTML.Application&quot;)
    If Err = 0 Then
       Set Application(&quot;RenderApplication&quot;) = objRenderApp
    Else
        Application(&quot;startupFatal&quot;) = Err.Number
        Application(&quot;startupFatalDescription&quot;) = _
            &quot;Failed to create application object&lt;br&gt;&quot; &amp; _
            Err.Description
    End If

    Application(&quot;hImp&quot;) = Empty
    'Load the configuration information from the Registry
    objRenderApp.LoadConfiguration 1, _
        &quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\&quot; &amp; _
        &quot;MSExchangeWeb\Parameters&quot;
    Application(&quot;ServerName&quot;) = objRenderApp.ConfigParameter(&quot;Server&quot;)
    Application(&quot;MailboxName&quot;) = &quot;testacct&quot;
    Err.Clear
End Sub 

Sub Application_OnEnd
    Set Application(&quot;RenderApplication&quot;) = Nothing
End Sub

Sub Session_OnStart
'On Error Resume Next
    Set objRenderApp = Application(&quot;RenderApplication&quot;)
    hOldImp = objRenderApp.ImpID
    Set Session(&quot;AMSession&quot;) = Nothing
    set objOMSession = Server.CreateObject(&quot;MAPI.Session&quot;)
    bstrProfileInfo = Application(&quot;ServerName&quot;) + vbLF + _
        Application(&quot;MailboxName&quot;)
    objOMSession.Logon &quot;&quot;, &quot;&quot;, False, True, 0, True, bstrProfileInfo 
    set Session(&quot;AMSession&quot;) = objOMSession
    'This is a handle to the security context. 
    'It will be set to the correct value when CDO session is created.
    Session(&quot;hImp&quot;) = objRenderApp.ImpID
End Sub 
'While calling the Session_onEnd event, IIS doesn't call us in 
'the right security context. 
'Workaround: current security context is stored in Session
'(look at logon.asp) and then gets restored in Session_onEnd 
'event handler.
'
'All CDO and CDOHTML objects stored in the Session object
'need to be explicitly set to Nothing between the two 
'objRenderApp.Impersonate calls below.
Sub Session_OnEnd
    On Error Resume Next
    set objRenderApp = Application(&quot;RenderApplication&quot;)
    hImp = Session(&quot;hImp&quot;)
    If Not IsEmpty(hImp) Then
        objRenderApp.Impersonate(hImp)
    End If
    'Do our cleanup. Set all CDO and CDOHTML objects inside 
    'the session to Nothing.
    'The CDO session is a little special because we need to do 
    'the Logoff on it.
    Set objOMSession = Session(&quot;AMSession&quot;)
    If Not objOMSession Is Nothing Then
        Set Session(&quot;AMSession&quot;) = Nothing
        objOMSession.Logoff
        Set objOMSession = Nothing
    End If
End Sub
&lt;/SCRIPT&gt;
</PRE></TD></TR></TABLE></P>

<P>Since all users of the application will be accessing the same mailbox, 
you might be wondering why the code for logging on to the Exchange Server is 
in the <I>Session_OnStart</I> subroutine and not in the 
<I>Application_OnStart</I> subroutine. The main reason for creating a new session for each user to the same mailbox 
is to improve the performance of the application. If the application did not do 
this, all users would use the same CDO session to connect to the Exchange Server.</p>

<A NAME="381"><H2>Prompting the User for Input</H2></A>

<P>After a CDO session has been created for the user but before the user can 
start viewing the calendar, the application must ask which appointment types 
and month the user wants to view in the calendar. To do this, the application 
presents a search page with options to select the month, year, and event 
categories, as shown in Figure 11-25.</p>

<p>The next section of code is for the search page in Figure 11-25. 
Notice how the code figures out the current month on the web server machine 
and uses it as the default value in the Select Month drop-down list box. Using 
the current year as the point of reference, the code dynamically generates the 
previous year and next year in the Year drop-down list box. This page also uses 
a hidden control on the HTML form that will indicate to the next ASP 
page, Events.asp, that the user originated from the current page.</p>

<p>
<A HREF="javascript:fullSize('f11oh25x.htm')"> <img src="images/f11oh25.JPG" width=404 height=300 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-25</B> <I>From the search page of the Events Calendar, the user can select the month, year, and event categories they want to search for.</I><!-- /CAPTION -->
</p>

<p>The HTML page does not have to check whether a valid ASP session 
exists for the current user because the page does not use any CDO code. 
The CDO logon code is handled in the Session_OnStart procedure, so when 
the user's session has timed out, the user is automatically logged on again 
when the user refreshes the screen or moves to a different page. Here is the 
code for the search page:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;!--#include file=&quot;cats.inc&quot;--&gt;
&lt;Title&gt;Microsoft Exchange Events Calendar&lt;/Title&gt;
&lt;center&gt;
&lt;p&gt;&lt;b&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=5&gt; 
Microsoft Exchange Events Calendar&lt;/font&gt;&lt;/b&gt;&lt;/P&gt;
&lt;BR&gt;
&lt;HR&gt;
&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt; 
&lt;b&gt;Search our events calendar to find a specific event. &lt;BR&gt;
This application is powered
by Microsoft Exchange Server/CDO and Outlook.&lt;/b&gt;
&lt;FORM METHOD=POST ACTION=&quot;events.asp&quot;&gt;
&lt;TABLE BORDER=2 Width=60% Bordercolor=&quot;008000&quot; cellpadding=&quot;2&quot; 
cellspacing=&quot;0&quot; borderdarkercolor=&quot;008000&quot; bgcolor=&quot;#FFCC00&quot; 
borderlightcolor=&quot;008000&quot;&gt;

&lt;%
'***********************************
'Figure out the month
'***********************************
%&gt;
    &lt;TR&gt;
    &lt;TD&gt;Select Month:&lt;/TD&gt;
    &lt;TD&gt;
    &lt;SELECT NAME=&quot;month&quot; SIZE=1&gt;
    &lt;% 
    Dim MonthArray(12)
    MonthArray(1)=&quot;January&quot;
    MonthArray(2)=&quot;February&quot;
    MonthArray(3)=&quot;March&quot;
    MonthArray(4)=&quot;April&quot;
    MonthArray(5)=&quot;May&quot;
    MonthArray(6)=&quot;June&quot;
    MonthArray(7)=&quot;July&quot;
    MonthArray(8)=&quot;August&quot;
    MonthArray(9)=&quot;September&quot;
    MonthArray(10)=&quot;October&quot;
    MonthArray(11)=&quot;November&quot;
    MonthArray(12)=&quot;December&quot; %&gt;        

    &lt;% for i = 1 to 12 %&gt;
        &lt;% if month(now) = i then %&gt;
            &lt;OPTION Selected Value = &lt;%=i%&gt;&gt; &lt;%= MonthArray(i) %&gt;
        &lt;% Else %&gt;
            &lt;OPTION Value = &lt;%=i%&gt;&gt; &lt;%= MonthArray(i) %&gt;
        &lt;% End if %&gt;
    &lt;% Next %&gt;
    &lt;/SELECT&gt;
        
&lt;%
'************************************
'Figure out the year
'************************************
%&gt;
    &lt;SELECT NAME=&quot;year&quot; SIZE=1&gt;
        
&lt;% 'Figure out the current year and go back and ahead 1 year %&gt;
&lt;% yearprevious = dateadd(&quot;yyyy&quot;,-1,date) %&gt;
    &lt;OPTION&gt; &lt;% response.write year(yearprevious) %&gt;
    &lt;OPTION SELECTED&gt; &lt;% response.write year(date) %&gt;
&lt;% yearnext = dateadd(&quot;yyyy&quot;,1,date) %&gt;
&lt;OPTION&gt; &lt;% response.write year(yearnext) %&gt;
    &lt;/SELECT&gt;
    &lt;/TD&gt;&lt;/TR&gt;
        
&lt;%
'**************************************
'Figure out the categories
'**************************************
%&gt;
        
    &lt;TR&gt;
    &lt;TD&gt;Category of Event:&lt;/TD&gt;
    &lt;TD&gt;&lt;SELECT NAME=&quot;Type&quot; SIZE=1&gt;
        &lt;OPTION SELECTED&gt;All
        &lt;% for c = 1 to NumberofCats
            response.write &quot;&lt;OPTION&gt;&quot; &amp; strCategories(c)
        next
        %&gt;
    &lt;/SELECT&gt;
    &lt;/TD&gt;&lt;/TR&gt;
&lt;/TABLE&gt;
    
&lt;%
'**************************************
'Create a hidden field so that we know the
'request came from calendar.asp
'**************************************
%&gt;
&lt;INPUT TYPE=HIDDEN NAME=&quot;fromcalendar&quot; VALUE=&quot;fromcalendar&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=SUBMIT VALUE=&quot;Submit Form&quot;&gt;&lt;INPUT TYPE=RESET 
VALUE=&quot;Reset Form&quot;&gt;
&lt;/FORM&gt;
&lt;br&gt;
&lt;HR&gt;
&lt;/center&gt;
&lt;/font&gt;
&lt;BR&gt;
&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt; 
&lt;P&gt;&lt;b&gt;Note:&lt;/b&gt;  This calendar is powered by Microsoft's 
&lt;b&gt;Exchange Server&lt;/b&gt;.
When you submit a search request, the web server dynamically 
searches an Exchange Server Calendar and generates the
result page according to your input. The appointments are
actually created by using the Microsoft Outlook Client.
&lt;/font&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="382"><H2>Displaying Views of the Calendar</H2></A>

<P>When the user clicks the Submit Form button on the HTML form, the 
application passes the entered information to the next ASP page in the 
application, Events.asp. This page creates a monthly view of the information stored in 
the events calendar, as shown in Figure 11-26.</p>

<p>
<A HREF="javascript:fullSize('f11oh26x.htm')"> <img src="images/f11oh26.JPG" width=404 height=302 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-26</B> <I>The code for this page is Events.asp. The code creates a monthly view of the appointments in the calendar by using HTML.</I><!-- /CAPTION -->
</p>

<p>Since the CDO Rendering library does not natively support monthly 
calendar views, the page in Figure 11-26 creates a monthly view using only 
HTML tables and data from the events calendar. However, the CDO Rendering 
library does support daily and weekly views on calendars. Therefore, when the 
user selects to view all events in the calendar, the application renders the calendar 
day numbers as hyperlinks from which the user can drill into either daily views 
of the calendar day or weekly views of the events for the entire calendar 
week. Weekly views are available only when the user clicks on the hyperlink for 
the Sunday hyperlink. Daily views are available on all other calendar days. Both 
view types are generated by the CDO Rendering library.</p>

<p>This page also stores values for the month, day, and year in 
ASP-session scope variables so that the application can remember the values in other 
pages. Storing these values also enables the application to create filters on the 
appointments contained in the calendar folder so that only the appointments for 
the specified month appear in the calendar. Let's take a look at the application 
and associated CDO objects in more detail.</p>

<A NAME="383"><H3>Filtering Events from the Calendar</H3></A>

<P>So that only certain events appear in the calendar, the application uses 
the MessageFilter object in the CDO library. The MessageFilter object is 
available in any Messages collection and allows you to specify the criteria that 
messages must meet before they are added to the collection. When you instantiate a 
new Messages collection, by default a MessageFilter object is created without 
filters on the content.</p>

<p>The MessageFilter object allows you to filter on built-in and custom 
properties for message objects in the Messages collection. There is one caveat, 
however, with the MessageFilter object: if the collection contains 
AppointmentItem objects (and a calendar folder does), the MessageFilter object offers only a 
limited subset of its functionality. This subset is the ability to filter only on the start 
and end times for the items in the collection. For this reason, in the source code 
for the Events.asp file, you'll notice a MessageFilter object that uses the 
month selected by the user as the input for the filter's start and end times. You will 
also notice that custom VBScript code searches through the filtered set of 
appointments to figure out which appointments actually have the category the 
user selected. This functionality is implemented as custom VBScript because 
the MessageFilter object lacks this functionality for appointments. The 
following code creates and sets the MessageFilter object for the events calendar:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
'******************************************************************
'Filter all appointments except the requested month's appointments
'******************************************************************
'Get the Calendar Folder
Set Session(&quot;objFolder&quot;) = objOMSession.GetDefaultFolder(0)
set objFolder = Session(&quot;objFolder&quot;)
set objAppointment = objFolder.messages.getfirst()
set objAppointments = objFolder.Messages
set objMsgFilt = objAppointments.Filter

'Calculate the start and end dates based on the month the 
'user selected
StartDate = EventMonth &amp; &quot;/&quot; &amp; &quot;1&quot; &amp; &quot;/&quot; &amp; EventYear
EndDate = EventMonth &amp; &quot;/&quot; &amp; &quot;1&quot; &amp; &quot;/&quot; &amp; EventYear
EndDate = DateAdd(&quot;m&quot;,1,EndDate)

objMsgFilt.Fields(ActMsgPR_START_DATE) = EndDate
objMsgFilt.Fields(ActMsgPR_END_DATE) = StartDate

set Session(&quot;objAppointments&quot;) = objAppointments
Session(&quot;LastDayofMonth&quot;) = iLastDay
%&gt;
</PRE></TD></TR></TABLE></P>

<P>As the preceding code illustrates, the first step in creating a filter is 
retrieving the Messages collection you want to apply the filter to. Since the 
MessageFilter object is a child of the Messages collection, you need to retrieve it by using 
the Filter property on the Messages collection. If the collection you were 
filtering did not contain appointments, you could create your filter by setting the 
properties on the MessageFilter object.</p>

<p>Because we are retrieving the calendar folder for the events calendar 
mailbox, we need to specify properties for the start and end times by using the 
Fields collection of the MessageFilter object. The specific identifiers for these 
two properties are &amp;H00600040 for the start date and &amp;H00610040 for the 
end date. (These identifiers are defined in the file Amprops.inc, which is 
included with the Calendar of Events files on the companion CD.) To create the 
filter, all you need to do is set these identifiers, in the Fields collection, to your 
values. Be careful when setting these properties&#8212;they don't work in the way 
you think they should.</p>

<p>For example, you would think that when you specified a value for the 
start date, you would enter in the first day for the filter, which would make 
CDO return every appointment starting from the day you entered and moving 
forward in time. However, the way the code is implemented in the library, 
the MessageFilter object actually returns any appointments that start on that 
day or occurred <I>before</I> that date. For the end date, the filter returns any 
appointments that end on the date or occur <I>after 
</I>that date. Therefore, in the Calendar of Events application, the first day of the month selected by the user is 
specified as the start date value for the filter, and the first day of the next month 
after the month selected by the user is specified for the end date value. These 
values return all appointments in the specified month.</p>

<p>Now that we have all the appointments in the month, we need to 
manually filter them by the category the user specified. For example, if the user 
specified only hands-on training events, we must provide a subroutine to filter 
and print only hands-on training events. The next snippet of code does this for 
you. It uses the For...Each statement in VBScript to scroll through the 
filtered Messages collection we created. While the code loops through the 
collection, it checks to see whether the current appointment starts on the current day. 
If the appointment does start on the current day, the code checks to see 
whether the user selected a specific category. If the user did select a category, the 
code loops through the categories on the AppointmentItem object, checking to 
see whether the object contains the specified category. If the category is 
found, the application prints out the appointment. If the category is not found, 
the code moves to the next appointment in the collection.</p>

<P>You might have noticed a variable in the code named 
<I>AlreadyPrinted.</I> I added this variable to help you enable the application to support users 
who specify multiple categories to search on. Imagine that you have an event that 
is marked for the Business and Hands-On Training categories. If you allow 
users to specify both search categories such that any event categorized as either 
Hands-On Training or Business is identified, you will run into problems with 
duplicate printing of events because the values for appointment categories added 
in Outlook are not guaranteed to be in a particular order. The Categories field 
for one appointment could have the values <I>Business, Hands-On Training, 
Competitive</I> while another could contain the same values but in a different order: 
<I>Hands-On Training, Competitive, Business.</I> When this is the case, both events print.</p>

<P>The code uses a For...Each loop to scroll through the categories 
collection. After it finds the targeted category value and prints the item on the 
calendar, the code changes the 
<I>AlreadyPrinted</I> variable to True. Therefore, if 
this item meets other subsequent categories the user selected, it won't be 
duplicated on the calendar. Why does the code use a variable rather than contain an 
Exit For statement? I used a variable because it gives you more flexibility if you 
want to change the code to perform other functionality. However, an Exit For 
statement would work in this case just as well. Here's the code that filters the 
appointment categories:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
'*******************************************************
'Check to see whether event should be written
'*******************************************************
%&gt;
&lt;%

AlreadyPrinted = FALSE
    for each objappointment in objAppointments
        StartTime = objappointment.StartTime
        'Check the day of the message
        oDay = DAY(StartTime)
        'Figure out friendly start time
        if Hour(StartTime) = 12 then  '12:00 PM
            if Minute(StartTime) = 0 then '0 minutes
                dStartTime = &quot;12:00 PM&quot;
            else
                dStartTime = &quot;12:&quot; &amp; Minute(StartTime) &amp; &quot; PM&quot;
            end if
        elseif Hour(StartTime) &gt; 12 then
            if Hour(StartTime) &gt; 11 then  'PM
                if Minute(StartTime) = 0 then '0 minutes
                    dStartTime = (Hour(StartTime)-12) &amp; &quot;:00 PM&quot;
                else
                    dStartTime = (Hour(StartTime)-12) &amp; &quot;:&quot; &amp; _
                        Minute(StartTime) &amp; &quot; PM&quot;
                end if
            end if
        else
            if Hour(StartTime) = 0 then '12 AM
                if Minute(StartTime) = 0 then '0 minutes
                    dStartTime = &quot;12:00 AM&quot;
                else
                    dStartTime = &quot;12:&quot; &amp; Minute(StartTime) &amp; _
                        &quot; AM&quot;
                end if
            else
                if Minute(StartTime) = 0 then '0 minutes
                    dStartTime = Hour(StartTime) &amp; &quot;:00 AM&quot;
                else
                    dStartTime = Hour(StartTime) &amp; &quot;:&quot; &amp; _
                        Minute(StartTime) &amp; &quot; AM&quot;
                end if
            end if
        end if 'friendly start time
        
        if oDay = (i-iDayMarker) then
            'Check the categories if AllBit = 0
            if AllBit = 1 then
                'Check to see if all-day event
                if objappointment.AllDayEvent = True then
                    response.write &quot;&lt;B&gt;All Day Event&quot; &amp; _
                    &quot;&amp;nbsp&amp;nbsp&amp;nbsp&lt;/B&gt;&lt;A HREF='details.asp?id=&quot; &amp; _
                    objappointment.id &amp; _
                    &quot;' style='color: rgb(255,0,0)'&gt;&quot; &amp; _
                    objappointment.Subject &amp; &quot;&lt;/a&gt;&lt;BR&gt;&quot;
                else
                    response.write &quot;&lt;B&gt;&quot; &amp; dStartTime &amp; _
                    &quot;&lt;/B&gt; &amp;nbsp&lt;A HREF='details.asp?id=&quot; &amp; _
                    objappointment.id &amp; _
                    &quot;' style='color: rgb(0,0,255)'&gt;&quot; &amp; _
                    objappointment.Subject &amp; &quot;&lt;/a&gt;&lt;BR&gt;&quot;
                end if
            else 
                'Check categories!
                   
                if IsEmpty(objappointment.Categories) then
                'No cats
                else
                    for each category in objappointment.Categories
                        if InStr(category,EventType) then
                            if Not(AlreadyPrinted) then
                                if objAppointment.AllDayEvent = True then
                                    response.write _
                                    &quot;&lt;B&gt;All Day Event&quot; &amp; _
                                    &quot;&amp;nbsp&amp;nbsp&amp;nbsp&quot; &amp; _
                                    dStartTime &amp; &quot;&lt;/B&gt; &amp;nbsp&quot; &amp; _
                                    &lt;A HREF='details.asp?id=&quot; &amp; _
                                    objappointment.id &amp; &quot;' style&quot; &amp; _
                                    &quot;='color: rgb(255,0,0)'&gt;&quot; &amp; _
                                    objappointment.Subject &amp; _
                                    &quot;&lt;/a&gt;&lt;BR&gt;&quot;
                                else
                                    response.write &quot;&lt;B&gt;&quot; &amp; _
                                    dStartTime &amp; &quot;&lt;/B&gt; &amp;nbsp&lt;A &quot; &amp; _
                                    HREF='details.asp?id=&quot; &amp; _
                                    objappointment.id &amp; &quot;' style&quot; &amp; _
                                    &quot;='color: rgb(0,0,255)'&gt;&quot; &amp; _
                                    objappointment.Subject &amp; _
                                    &quot;&lt;/a&gt;&lt;BR&gt;&quot;
                                end if
                                AlreadyPrinted = TRUE
                            end if 'Not Already Printed
                        end if 'Categories Match
                    next
                end if 'Check categories
            end if 'All Bit
        end if 'oDay
    AlreadyPrinted = FALSE 'Reset Already Printed
    Next

set objappointment = nothing
n=1
%&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="384"><H3>Displaying a Weekly View</H3></A>

<P>When the user is not filtering by category and clicks on the hyperlink for 
any Sunday in the calendar, a weekly view appears showing events for the 
current week, as illustrated in Figure 11-27 .</p>

<p>
<A HREF="javascript:fullSize('f11oh27x.htm')"> <img src="images/f11oh27.JPG" width=404 height=239 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-27</B> <I>The Weekly view in the Events Calendar. This view is reached by clicking on the hyperlink for any Sunday in the calendar.</I><!-- /CAPTION -->
</p>

<p>The weekly view is implemented in the events calendar by using the 
CDO Rendering library. While you could create your own weekly view, it is much 
easier to leverage the CDO Rendering library and customize the way it renders 
the view using the library's objects. The CDO Rendering library offers rich 
object support for customizing what is rendered by the library.</p>

<p>As illustrated in the Helpdesk application, the way to get started with 
the CDO Rendering library in an application is to create either a container or an 
object renderer by using the <I>CreateRenderer</I> method on the 
RenderingApplication object. The Events Calendar application creates a container renderer 
because the items rendered by the application are contained in a calendar folder. 
However, unlike the Helpdesk application, which used TableView objects to 
render its data, the Events Calendar application uses CalendarView objects. The 
Events Calendar application also customizes the patterns and formats of the 
CalendarView object to specify the graphics to be used when rendering information. 
The placement of the CalendarView object in the CDO Rendering library is 
shown in Figure 11-28. Most of the properties of the CalendarView object are 
filled in by default when you instantiate a CalendarView object, so you don't have 
to set these properties unless you want to customize the way CDO renders 
the information into HTML.</p>

<p>
<A HREF="javascript:fullSize('F11oh28x.htm')"> <img src="images/F11oh28.JPG" width=404 height=283 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-28</B> <I>The CDO CalendarView object is a child object of the Views collection in the CDO Rendering library.</I><!-- /CAPTION -->
</p>

<p>As with the Helpdesk application, we need to set a data source to be 
rendered. In this case, the data source is the filtered set of appointments we 
created for the calendar. To instantiate a CalendarView object, we retrieve 
from our data source a view from the Views collection. Since the daily view 
always has an index of 1 in the Views collection, the code grabs the daily view for 
the calendar using this index, instead of scrolling through all the views in the 
collection. As you will see later, the daily view is morphed into a weekly view 
by using the Mode property for the CalendarView object.</p>

<p>Once we have a CalendarView object, we can manipulate the Format 
and Pattern objects of the ContainerRenderer object to add custom HTML 
rendering. The Format object controls how a particular property is rendered by 
the CDO Rendering library. For example, you can pass to the Formats 
collection either the ID of a built-in property or the name of a custom property to 
create a custom HTML format for that property when the property is rendered by 
the library. This code shows an example from the weeklyview.asp file:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'sensitivity
Set objFormat = oCalContRenderer.Formats.Add( _
    ActMsgPR_SENSITIVITY, Null)
</PRE></TD></TR></TABLE></P>

<P>After adding the format, you can retrieve the Patterns collection on 
the Format object to specify how a particular value for a property should be 
formatted. In the previous example, if the sensitivity of the appointment in 
the calendar is set to Private, an image of a key is placed before the text of the 
appointment. You can make the patterns more complex because the values for 
the patterns will accept any legal HTML tags.</p>

<P>You can specify a default pattern for the Pattern objects if a 
particular property does not contain one of your values. To the Patterns collection, 
just add a Pattern object that takes the asterisk character (*) as its value. You 
then specify the HTML tags CDO should use to render the unspecified value 
types. The code for both specified and unspecified values is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set objPatterns = objFormat.Patterns
bstrHTML = bstrImgSrc + _
    &quot;/images/private.gif WIDTH=13 HEIGHT=13 BORDER=0&gt;&quot;
objPatterns.Add 1, bstrHTML   ' personal
objPatterns.Add 2, bstrHTML   ' private
objPatterns.Add 3, bstrHTML   ' confidential
objPatterns.Add &quot;*&quot;, &quot;&quot;       ' normal
</PRE></TD></TR></TABLE></P>

<P>The following code shows you the other Format and Pattern object 
settings for the weekly view in the Events Calendar application:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Recurring
Set objFormat = oCalContRenderer.Formats.Add( _
    AmPidTag_IsRecurring, Null)
Set objPatterns = objFormat.Patterns
objPatterns.Add 0, &quot;&quot;
bstrHTML = bstrImgSrc + _
    &quot;/images/recur.gif WIDTH=13 HEIGHT=13 BORDER=0&gt;&quot;
objPatterns.Add &quot;*&quot;, bstrHTML

'Meeting status
Set objFormat = oCalContRenderer.Formats.Add( _
    AmPidTag_ApptStateFlags, Null)
Set objPatterns = objFormat.Patterns
objPatterns.Add 0, &quot;&quot;
bstrHTML = bstrImgSrc + _
    &quot;/images/meeting.gif WIDTH=12 HEIGHT=13 BORDER=0&gt;&quot;
objPatterns.Add &quot;*&quot;, bstrHTML

'Location
Set objFormat = oCalContRenderer.Formats.Add( )
    AmPidTag_Location, Null)
Set objPatterns = objFormat.Patterns
objPatterns.Add &quot;&quot;,  &quot;&quot;
objPatterns.Add &quot;*&quot;, &quot;(%value%)&quot;
</PRE></TD></TR></TABLE></P>

<P>After you set your Format and Pattern objects, you can customize the 
way CDO renders the HTML tables it creates. The properties you need to 
manipulate the ContainerRenderer object are TablePrefix, TableSuffix, 
RowPrefix, RowSuffix, CellPattern, and LinkPattern. The following code is taken 
from weeklyview.asp, which sets these properties:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
oCalContRenderer.TablePrefix = _
    &quot;&lt;table columns=%columns% border=0 cellpadding=0 cellspacing=1 &quot; _
    &amp; &quot;WIDTH=100% HEIGHT=10% bgcolor='#000000'&gt;&quot; &amp; Chr(10)
oCalContRenderer.TableSuffix = &quot;&lt;/table&gt;&quot; &amp; Chr(10)
oCalContRenderer.RowPrefix = &quot;&lt;tr&gt;&quot; &amp; Chr(10)
oCalContRenderer.RowSuffix = &quot;&lt;/tr&gt;&quot; &amp; Chr(10)
oCalContRenderer.CellPattern = &quot;&lt;font size=2&gt;%value%&lt;/font&gt;&quot;
oCalContRenderer.LinkPattern = &quot;&lt;a href='details.asp?id=%obj%' &quot; _
    &amp; &quot;target='_top'&gt;%value%&lt;/a&gt;&quot;
</PRE></TD></TR></TABLE></P>

<P>The TablePrefix property allows you to customize the HTML table 
that CDO renders before CDO creates a separate table for the actual item 
content in the data source. By customizing TablePrefix, you can add custom HTML 
tags before CDO renders any content to the browser. This property works in 
conjunction with the TableSuffix property, which specifies what to render at the 
end of the HTML table created by the TablePrefix property.</p>

<p>The RowPrefix property allows you to customize the HTML that 
appears at the beginning of each HTML table row. You can use this property to 
change the way the row is rendered&#8212;for example, modifying the height, width, 
or alignment of the items in the row. RowSuffix specifies the HTML that 
should appear after the row and is used in conjunction with RowPrefix.</p>

<p>The CellPattern property specifies the HTML for every cell in each 
table row that you render. In the code for the Events Calendar application, 
the CellPattern property is set to a font size of 2 and is set to display the value 
contained in the appointment. This property does not affect any hyperlinked 
values in your cell, and CDO always generates a link for exactly one cell in 
each row. So use the CellPattern in conjunction with the LinkPattern to create 
fully functional table rows, because the LinkPattern property affects only the 
hyperlink cell in your table. As you can see in the code, the application sets the 
LinkPattern for the hyperlinked cells so that the hyperlink points at the details.asp file, 
and it passes the entryID that corresponds to the current appointment clicked 
on by the user to this ASP using the %obj% token. It also dynamically prints 
out the subject of the appointment by using the %value% token.</p>

<p>The final section of the code sets some options on the 
ContainerRenderer object, such as the start and end times for the business day, and the time 
zone for the appointment dates and times. This section also morphs the daily 
view into a weekly view by setting the Mode property for the CalendarView 
object to be CdoModeCalendarWeekly(1) rather than 
CdoModeCalendarDaily(0). The code then calls the 
<I>RenderAppointments</I> method on the 
CalendarView object, which takes as its arguments the starting date for rendering 
information and the output stream used to send the generated HTML. Normally for 
the output stream parameter, you would type 
<I>Response</I>, which tells CDO to render the HTML to the Response object of the ASP object library. The following 
code implements this functionality for the Events Calendar application:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
oCalContRenderer.TimeZone = objOMSession.GetOption(&quot;TimeZone&quot;)
'Set Sunday as first day of week
oCalContRenderer.FirstDayOfWeek = 7
oCalContRenderer.Is24HourClock = _
    objOMSession.GetOption(&quot;Is24HourClock&quot;)
oCalContRenderer.BusinessDayStartTime = _
    objOMSession.GetOption(&quot;BusinessDayStartTime&quot;)
oCalContRenderer.BusinessDayEndTime = _
    objOMSession.GetOption(&quot;BusinessDayEndTime&quot;)
oCalContRenderer.BusinessDays = _
    objOMSession.GetOption(&quot;WorkingDays&quot;)
oCalView.NumberOfUnits = 1
curDay = CDate(curDay)
oCalView.Mode = 1
oCalView.RenderAppointments curDate,Response
</PRE></TD></TR></TABLE></P>

<A NAME="385"><H3>Displaying a Daily View</H3></A>

<P>When the user is not filtering by category and clicks on the hyperlink for 
any day in the calendar week except Sunday, a daily view appears, as shown in 
Figure 11-29.</p>

<p>The code for rendering the daily view in the file dailyview.asp is similar 
to the code for rendering a weekly view except for two differences. First, we 
keep the daily view as the view in the Mode property for the CalendarView 
object rather than change it, as we did in the weekly view rendering code. Second, 
we must explicitly render all-day events separately from appointments in the 
view. In the weekly view mode, CDO automatically renders all-day events.</p>

<p>
<A HREF="javascript:fullSize('f11oh29x.htm')"> <img src="images/f11oh29.JPG" width=404 height=259 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-29</B> <I>The Daily view for the Events Calendar application allows users to see more details about the events on a specific day.</I><!-- /CAPTION -->
</p>

<p>The way to render events separately from appointments in a daily view 
is to explicitly call the <I>RenderEvents</I> method on the CalendarView object 
before calling the <I>RenderAppointments</I> method. The 
<I>RenderEvents</I> method takes the same parameters as the 
<I>RenderAppointments</I> method, which includes the 
date for which you want to render the events and the output stream that will place 
the HTML code created by the method. The following code shows you how to 
render both events and appointments using <I>RenderEvents 
</I>and <I>RenderAppointments</I>:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
oCalView.RenderEvents curDate,Response
oCalView.RenderAppointments curDate,Response
</PRE></TD></TR></TABLE></P>

<A NAME="386"><H2>Displaying the Details of an Event</H2></A>

<P>When a user clicks on any hyperlink (from monthly, weekly, or daily view) 
to get the details for an event, details.asp is called. This ASP page displays 
details about the event so that a user can find the event location and obtain any 
supporting materials. The ASP page also automatically supports rendering and 
viewing attachments, because it uses the CDO Rendering library to display the text 
describing the event. The user interface for this page is shown in Figure 
11-30.</p>

<p>
<A HREF="javascript:fullSize('f11oh30x.htm')"> <img src="images/f11oh30.JPG" width=404 height=306 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-30</B> <I>The Details page for an event in the Events Calendar application can render rich text as well as hyperlinks because it uses the CDO Rendering library.</I><!-- /CAPTION -->
</p>

<p>The code in the details.asp page is pretty straightforward, but it shows 
you how to use other objects in the CDO Rendering library, such as the 
ObjectRenderer object. The ObjectRenderer object (as opposed to the 
ContainerRenderer object) is used because you are displaying properties from an individual 
CDO object, such as an appointment. You should use the ContainerRenderer 
object only if you are rendering a collection of items, such as all the messages in 
your Inbox. Figure 11-31 shows the ObjectRenderer object hierarchy.</p>

<P>To create an ObjectRenderer object, all we need to do is pass the 
constant CdoClassObjectRenderer(2) to the 
<I>CreaterRenderer</I> method of the RenderingApplication object. (There are a lot of &quot;renders&quot; in that last sentence!) Here 
is the code from details.asp:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Create an ObjectRenderer
set objObjRenderer = objRenderApp.CreateRenderer(2)
</PRE></TD></TR></TABLE></P>

<P>After creating the ObjectRenderer, we need to set the DataSource 
property for it. This property is the same as the DataSource property for a 
ContainerRenderer object except for one fundamental difference: the 
ObjectRenderer object can take only individual items as its data source, such as an 
AddressEntry, an AppointmentItem, or a Message object.</p>

<P>
<A HREF="javascript:fullSize('F11oh31x.htm')"> <img src="images/F11oh31.JPG" width=404 height=219 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 11-31</B> <I>The ObjectRenderer object in the CDO Rendering library is used to display properties of individual items rather than of collections.</I><!-- /CAPTION -->
</p>

<P>Now that the data source is set, we can start using some of the 
methods on the ObjectRenderer object. To render the details of the event, we need 
to render individual properties off the AppointmentItem object, such as 
name, location, and details. The ObjectRenderer object gives us a method, 
<I>RenderProperty</I>, that allows us to render individual properties off the object. 
The <I>RenderProperty</I> method takes three arguments:</p>

<UL>
<P><LI>The property ID for built-in properties, or the name of the 
property if it is a custom property that we want to render</li></p>

<P><LI>A reserved argument for which you should always pass 
<I>0</I> as the value</li></p>

<P><LI>The output stream, to pass the HTML that the CDO 
Rendering library generates</li></p>
</UL>

 <P>Normally, you would type <I>Response</I> for this argument to return the 
HTML to the browser. The following code is taken from details.asp. It shows how 
<I>RenderProperty</I> renders the different properties on an AppointmentItem object.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;table border=&quot;1&quot; width=&quot;100%&quot;&gt;
&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;&lt;strong&gt;
    Event Name:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% objObjRenderer.RenderProperty ActMsgPR_SUBJECT, 0, Response %&gt;
    &lt;/font&gt;&lt;/strong&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;&lt;strong&gt;
    Event Location:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% 
    if objEvent.Location = &quot;&quot; then
        response.write &quot;None specified&quot;
    else
        objObjRenderer.RenderProperty AmPidTag_Location, 0, _
        Response 
    end if
    %&gt;
    &lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;&lt;strong&gt;
    Start Date:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% objObjRenderer.RenderProperty AmPidTag_ApptStartWhole, 0, _
    Response %&gt;
    &lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;&lt;strong&gt;
    End Date:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% objObjRenderer.RenderProperty AmPidTag_ApptEndWhole, 0, _
    Response %&gt;
    &lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;
    &lt;strong&gt;Duration:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% objObjRenderer.RenderProperty AmPidTag_ApptDuration, 0, _
    Response %&gt;
    minutes&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
    &lt;td width=&quot;24%&quot; bgcolor=&quot;#FFFF80&quot;&gt;&lt;big&gt;&lt;em&gt;&lt;strong&gt;
    Event Details:&lt;/strong&gt;&lt;/em&gt;&lt;/big&gt;&lt;/td&gt;
    &lt;td width=&quot;76%&quot; bgcolor=&quot;#8000FF&quot;&gt;&lt;strong&gt;&lt;font face=&quot;Tahoma&quot;&gt;
    &lt;% 
    if objEvent.Text = &quot;&quot; then
        response.write &quot;None specified&quot;
    else
        objObjRenderer.RenderProperty ActMsgPR_RTF_COMPRESSED, _
        0, Response
    end if
    %&gt;
    &lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</PRE></TD></TR></TABLE></P>

<P>Most of the properties are pretty straightforward, but one of them 
requires careful handling when rendering because it is quite powerful and can easily 
cause problems if you do not handle the output correctly. This property is the last 
one rendered by the application, ActMsgPR_RTF_COMPRESSED. It is the 
message body for the item. When you use the 
<I>RenderProperty</I> method with this property, the Rendering library will automatically convert the rich-text 
formatting in the message to HTML. This is a powerful feature and one of the 
primary reasons you should use the Rendering library to display the body of an item.</p>

<p>However, one aspect of this method to watch out for is that in 
addition to converting the body of an item, the method also converts the 
attachments in the item to hyperlinks. While this is useful and makes your application 
very powerful, CDO defaults the hyperlinks it creates to retrieve a file named 
read.asp in the Exchange virtual root on the IIS server. Remember how IIS defines 
ASP applications&#8212;by virtual root. Now can you see the inherent problem in 
this? When the user clicks on this default hyperlink, IIS starts a new ASP 
application under the <I>Exchange</I> virtual root. This causes the Outlook Web Access 
logon screen to appear, since ASP applications cannot share session and 
application states, and OWA has no idea that the user has already authenticated with 
the Calendar of Events application. Further, if the user enters her security 
credentials, the attachment will not appear in the browser; instead, OWA will open 
the Inbox of the user&#8212;not the desired functionality.</p>

<p>To fix this problem, we must first change the default virtual root of 
RenderingApplication, which is the Exchange virtual root. To do this, we use 
the VirtualRoot property on the RenderingApplication. The VirtualRoot 
property takes a string argument that sets the beginning of the URL when you 
render items. In this case, we need to change the VirtualRoot property to point to 
the virtual root we set in our virtroot.inc file. The following code does this:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Change the virtual root for the rendering application
Set objRenderApp = Application(&quot;RenderApplication&quot;)
objRenderApp.VirtualRoot = virtroot
</PRE></TD></TR></TABLE></P>

<P>The next problem we have to resolve is what file to use for the 
Read.asp file that RenderingApplication is creating a hyperlink to. Well, Outlook 
Web Access (OWA) happens to provide a read.asp that renders attachments you 
click on in its browser window. The OWA read.asp will automatically download 
and open the attachment on the machine of the user. In addition, the read.asp 
file will launch the application in place in the browser if the user's browser 
supports this option. Otherwise, the read.asp file will prompt the user to download 
and view the file.</p>

<p>To add the OWA read.asp to the Calendar of Events application, some 
code has to be modified. The main code modification has to be done to session 
and local variable names, because the default read.asp for OWA uses variable 
names different from those in the Events Calendar application. The code that 
checks for a valid session also has to be modified since the two applications use 
different types of session-checking code.</p>

<p>The way attachments are rendered to the browser is the same for 
both applications. First, the application parses the query string, which contains an 
<I>att</I> variable. This variable contains the attachment record key, which is a 
unique identifier used to retrieve, from the Attachments collection of the Message 
object, the particular attachment the user clicked on. Once this attachment is 
retrieved, the application figures out the attachment's filename so that when 
the user chooses to save the file after bringing it up, the browser uses the 
same filename as the filename of the original item. Finally, the application adds a 
header to the Response object, which tells the browser that it is going to send 
down data to the browser. Then the application uses the 
<I>RenderProperty</I> method of ObjectRenderer to stream the binary data of the attachment to the 
browser. Once the data is streamed down, the attachment opens. The following 
code implements this functionality:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
szAttach = Request.QueryString(&quot;att&quot;)
nPos = InStr(1, szAttach, &quot;-&quot;, 0)
nPos = InStr(nPos+1, szAttach, &quot;-&quot;, 0)
nPos2 = InStr(nPos+1, szAttach, &quot;-&quot;, 0)
If nPos2 = 0 Then
    nPos2 = Len(szAttach)+1
End If

szRecordKey = Mid(szAttach, nPos+1, nPos2-(nPos+1))
szAttachName = Mid(szAttach, nPos2+1)
szObj = Request.QueryString(&quot;obj&quot;)
Set objOneMsg = Session(&quot;szObj&quot;)
If objOneMsg Is Nothing then
    Set objOneMsg = OpenMessage(szObj)
    If objOneMsg is Nothing then
        ReportError1 L_errCannotGetMessageObj_ErrorMessage 
    ElseIf objOneMsg.ID = &quot;&quot; then
        ReportError1 L_errMessageDeleted_ErrorMessage
    End If
End If

Set objAttach = objOneMsg.Attachments.Item(szRecordKey)
if objAttach is Nothing then
    ReportError1 L_errFailGettingAttachment_ErrorMessage
End If
bstrFileName = &quot;&quot;
bstrFileName=  objAttach.Fields(ActMsgPR_ATTACH_LONG_FILENAME)
If bstrFileName = &quot;&quot; then
    bstrFileName =  objAttach.Fields(ActMsgPR_ATTACH_FILENAME)
End If 
'For short file name compatibility, add these lines
'    If bstrFileName = &quot;&quot; then
'        bstrFileName = objAttach.Name
'    End If

Response.Addheader &quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + _
    bstrFileName
Set objRenderAtt = GetMessageRenderer
objRenderAtt.DataSource = objAttach
objRenderAtt.RenderProperty ActMsgPR_ATTACH_DATA_BIN, 0,Response
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





