<HTML>
<HEAD>
<TITLE>Folder Home Pages</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="339"><H1>Folder Home Pages</H1></A>

<P>Folder home pages are a new feature in Outlook 2000 that enable you to link an HTML page to any folder in the Outlook environment. (You saw this capability in the Outlook Today feature discussed in <A HREF="ch08a.htm">Chapter 8</A>.) Folder home pages support offline viewing capabilities, so you can request Outlook to synchronize an HTML file associated with a folder offline when a user synchronizes the folder. This ensures that your HTML page is available whether the user is working offline or online. We will look at two folder home pages in this chapter. One will use the Outlook View control.</p>

<P>The process of associating a Folder home page with a folder is easy. Outlook 2000 provides a user interface for this connection, as shown in Figure 10-1. You can access this Properties dialog box in Outlook 2000 by right-clicking on a folder and choosing Properties.</p>

<P>Since Outlook 2000 hosts Microsoft Internet Explorer in-frame, when users click on the folder, your folder home page can appear directly inside the Outlook client. Furthermore, you can make the folder home page the default view for a particular folder. In the web pages for your folder home pages, you might want to include instructions for using the folder, a way to mail the folder owner, or a listing of links related to that folder or to other folders.</p>

<P>
<A HREF="javascript:fullSize('f10oh01x.htm')"> <img src="images/f10oh01.JPG" width=404 height=416 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 10-1</B> <I>Configuring a folder home page for a folder.</I><!-- /CAPTION -->
</p>

<P>You can also add script to the folder home page to access the Outlook object model. Figure 10-2 shows the first example of a custom folder home page (Contacts.htm) for the Account Tracking application.</p>

<P>
<A HREF="javascript:fullSize('f10oh02x.htm')"> <img src="images/f10oh02.JPG" width=404 height=253 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 10-2</B> <I>The folder home page (Contacts.htm) for the Account Tracking application.</I><!-- /CAPTION -->
</p>

<A NAME="340"><H2>Setting Up the First Folder Home Page</H2></A>

<P>To test the folder home pages, you'll need a machine that has Outlook 2000 with the Visual Basic Scripting Support and Collaboration Data Objects components installed. Follow the steps below to set up the first folder home page:</p>

<OL>
<P><LI>If you haven't already set up the Account Tracking application, do so now as explained in the section titled &quot;<A HREF="ch07c.htm#219">Setting Up the Application</A>&quot; in <A HREF="ch07a.htm">Chapter 7</A>. If you want to use the Sales.mdb database, you will need to make an additional change to the code for the Account Tracking form. Since Office 2000 includes Data Access Objects (DAO) 3.6, you will need to change the line</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oDatabaseEngine = _
    item.application.CreateObject(&quot;DAO.DBEngine.35&quot;)
</PRE></TD></TR></TABLE></P>

<P>to</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oDatabaseEngine = _
    item.application.CreateObject(&quot;DAO.DBEngine.36&quot;)
</PRE></TD></TR></TABLE></P>

<P>If you want the application to create sales charts and print account summaries, install Microsoft Excel.</p>

<P><LI>Copy the Webview folder from the companion CD to your local hard drive, and clear the read-only flag for the files contained in this folder.</li></p>

<P><LI>Open the Webview\Contacts.htm file in Notepad.</li></p>

<P><LI>Find the first occurrence of <I>oAccountFolder</I>, and modify the path to the location of your Account Tracking folder.</li></p>

<P><LI>Save Contacts.htm, and close Notepad.</li></p>

<P><LI>In Outlook, right-click on the Account Tracking folder, and choose Properties.</li></p>

<P><LI>In the Address text box of the Home Page tab, specify the location of the Contacts.htm file&#8212;for example, <I>file://C:\Webview\Contacts.htm</I>.</li></p>

<P><LI>Check the Show Home Page By Default For This Folder check box, and click OK.</li></p>

<P><LI>Click the Account Tracking folder in Outlook to display the folder home page.</li></p>
</OL>

<A NAME="341"><H2>Example Script for the Folder Home Page </H2></A>

<P>The following shows the script for the folder home page (Contacts.htm) displayed in Figure 10-2:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;SCRIPT ID=clientEventHandlersVBS LANGUAGE=vbscript&gt;
'******************************************************
'In-line code
'
'These lines of code are run when the browser reaches
'them while parsing the document.  They set up the global
'variables that are needed throughout the application.
'******************************************************
Set oApplication = window.external.OutlookApplication
Set oNS = oApplication.GetNameSpace(&quot;MAPI&quot;)

'Change this to your location for the Account Tracking folder
set oAccountFolder = oNS.Folders(&quot;Public Folders&quot;).Folders( _
    &quot;All Public Folders&quot;).Folders(&quot;Account Tracking&quot;)

'Set some global vars for the EntryIDs
Dim arrTaskEntryIDs()
Dim oTasks     'Restricted collection of Tasks
Dim arrAccountEntryIDs()
Dim oAccounts     'Restricted collection of Accounts

'******************************************************
'Sub CreateAccount
'
'This subroutine creates a new account info form and
'displays it for the user to fill in
'******************************************************
Sub CreateAccount()
    set oAccount = oAccountFolder.Items.Add(&quot;IPM.Post.Account info&quot;)
    oAccount.Display()
End Sub

'******************************************************
'Sub GetTask(lEntryID)
'
'This subroutine gets the task that the user clicked on
'in the HTML page and displays it.  An index into an
'array of EntryIDs is passed to this subroutine.
'******************************************************
sub GetTask(lEntryID)
    lTaskEntryID = arrTaskEntryIDs(lEntryID-1)
    for each oItem in oTasks
        if oItem.EntryID = lTaskEntryID then
            set otmpTask = oItem
        end if
    next
    otmpTask.Display()
end sub

'******************************************************
'Sub GetAccount(lEntryID)
'
'This subroutine gets the account that the user clicked on
'in the HTML page and displays it.  An index into an
'array of EntryIDs is passed to this subroutine.
'******************************************************
sub GetAccount(lEntryID)
    lAccountEntryID = arrAccountEntryIDs(lEntryID-1)
    for each oItem in oAccounts
        if oItem.EntryID = lAccountEntryID then
            set otmpAccount = oItem
        end if
    next
    otmpAccount.Display()
end sub

sub Window_onLoad()
'****************************************************************
'All of the following lines are run when the HTML page is
'loaded
'****************************************************************
    'Put the name of the folder in the bar
    txtFolder.innerHTML = oAccountFolder.Name &amp; &quot; Folder&quot;

'****************************************************************
'Figure out the account tasks for the current user
'****************************************************************
    RestrictString = &quot;&quot;
    RestrictString = &quot;[Message Class] = &quot;&quot;IPM.Task&quot;&quot;&quot; &amp; _
    &quot; AND [Owner] = &quot;&quot;&quot; &amp; oNS.CurrentUser.Name &amp; &quot;&quot;&quot; AND _
    [Complete] = FALSE&quot;
    Set oTasks = oAccountFolder.Items.Restrict(RestrictString)
    oTasksCount = oTasks.Count

    'Redim the EntryID array
    ReDim arrTaskEntryIDs(oTasksCount-1)
    strTaskList = &quot;&lt;TABLE Border=0 cellpadding=2 cellspacing=2 &quot; &amp; _
    &quot;class='calendarinfo'&gt;&lt;TR&gt;&lt;TD&gt;&lt;strong&gt;&lt;Font Size=2&gt;&lt;U&gt;&quot; &amp; _
    &quot;Account Name&lt;/u&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
    &quot;&lt;STRONG&gt;&lt;Font size=2&gt;&lt;U&gt;Task Name&lt;/U&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&quot; &amp; _
    &quot;&lt;/TD&gt;&lt;TD&gt;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&lt;TD&gt;&lt;STRONG&gt;&lt;Font size=2&gt;&lt;U&gt;&quot; &amp; _
    &quot;(Due Date)&lt;/U&gt;&lt;/FONT&gt;&lt;/strong&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;
    'Count the tasks using counter
    counter = 1
    oTasks.Sort &quot;[ConversationTopic]&quot;, False
    For each oTask in oTasks
        boolOverDue = 0
        if oTask.DueDate = &quot;1/1/4501&quot; then 
            strDueDate = &quot;None&quot;
        else
            strDueDate = oTask.DueDate
            'Check to see whether the task is overdue
            if DateDiff(&quot;d&quot;,CDate(strDueDate),Now) &gt; 0 then
                boolOverDue = 1
            end if
        end if
        if boolOverDue then
            'Turn red
            strTaskList = strTaskList &amp; &quot;&lt;TR&gt;&lt;TD&gt;&lt;FONT &quot; &amp; _
            &quot;COLOR='#FF0000'&gt;&lt;STRONG&gt;&quot; &amp; oTask.ConversationTopic &amp; _
            &quot;&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/TD&gt;&lt;TD&gt;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            &quot;&lt;A HREF='' onclick=GetTask(&quot; &amp; counter &amp; _
            &quot;);window.event.returnValue=false&gt;&quot; &amp; oTask.Subject &amp; _
            &quot;&lt;/a&gt;&lt;/TD&gt;&lt;TD&gt;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&lt;TD&gt;&lt;FONT &quot; &amp; _
            &quot;COLOR='#FF0000'&gt;(&lt;Strong&gt;&quot; &amp; strDueDate &amp; _
            &quot;&lt;/Strong&gt;)&lt;/FONT&gt;&lt;BR&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;
        else
            strTaskList = strTaskList &amp; &quot;&lt;TR&gt;&lt;TD&gt;&lt;STRONG&gt;&quot; &amp; _
            oTask.ConversationTopic &amp; &quot;&lt;/STRONG&gt;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            &quot;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&lt;TD&gt;&lt;A HREF='' onclick=GetTask(&quot; &amp; _
            &quot;counter &amp; &quot;);window.event.returnValue=false&gt;&quot; &amp; _
            oTask.Subject &amp; &quot;&lt;/a&gt;&lt;/TD&gt;&lt;TD&gt;&amp;nbsp;&amp;nbsp;&lt;/TD&gt;&quot; &amp; _
            &quot;&lt;TD&gt;(&lt;Strong&gt;&quot; &amp; strDueDate &amp; &quot;&lt;/Strong&gt;)&lt;BR&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;
        end if
        arrTaskEntryIDs(counter-1) = oTask.EntryID
        counter = counter + 1
    next
    TaskList.innerHTML = strTaskList &amp; &quot;&lt;/TABLE&gt;&quot;

'****************************************************************
'Figure out which accounts the current user is a team member of
'****************************************************************

    'Find accounts where this person is a team member.
    'First restrict to only account items.
    RestrictString = &quot;&quot;
    RestrictString = &quot;[Message Class] = &quot;&quot;IPM.Post.Account info&quot;&quot;&quot;
    Set oAccounts = oAccountFolder.Items.Restrict(RestrictString)

    'Now find accounts where this person is a team member
    numFound = 0
    strCurrentUser = oNS.CurrentUser.Name
    numTotalRevenue = 0
    strAccountHTML = &quot;&lt;table border=0 width=100% cellpadding=3 &quot; &amp; _
    &quot;cellspacing=0 ID='Home' style='DISPLAY: inline; &quot; &amp; _
    &quot;MARGIN-TOP: 12px'&gt;&quot;
    strAccountHTML = strAccountHTML &amp; &quot;&lt;TR&gt;&lt;TD &quot; &amp; _
    &quot;class='calendarinfo'&gt;&lt;STRONG&gt;&lt;FONT SIZE=2&gt;&lt;U&gt;Account Name&quot; &amp; _
    &quot;&lt;/U&gt;&lt;/FONT&gt;&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;

    RestrictString = &quot;&quot;
    RestrictString = &quot;[Message Class] = &quot;&quot;IPM.Post.Account info&quot;&quot;&quot; &amp; _
    &quot; AND [txtAccountConsultant] = &quot;&quot;&quot; &amp; strCurrentUser &amp; _
    &quot;&quot;&quot; OR [txtAccountExecutive] = &quot;&quot;&quot; &amp; strCurrentUser &amp; _
    &quot;&quot;&quot; OR [txtAccountSalesRep] = &quot;&quot;&quot; &amp; strCurrentUser &amp; _
    &quot;&quot;&quot; OR [txtAccountSE] = &quot;&quot;&quot; &amp; strCurrentUser &amp; _
    &quot;&quot;&quot; OR [txtAccountSupportEngineer] = &quot;&quot;&quot; &amp; strCurrentUser &amp; &quot;&quot;&quot;&quot;

    Set oAccounts = oAccountFolder.Items.Restrict(RestrictString)
    numFound = oAccounts.Count
    ReDim arrAccountEntryIDs(numFound)
    counter = 1
    For Each oAccount in oAccounts
        set oUserProps = oAccount.UserProperties
        arrAccountEntryIDs(counter-1) = oAccount.EntryID
        'Get the total revenue for the account for 1998 and 1999.
        'Get the revenue and add it to the total.
        num1998Total = oUserProps.Find(&quot;form1998ActualTotal&quot;)
        num1999Total = oUserProps.Find(&quot;form1999ActualTotal&quot;)
        if num1998Total &lt;&gt; &quot;Zero&quot; then
            numTotalRevenue = numTotalRevenue + num1998Total 
        end if
        if num1999Total &lt;&gt; &quot;Zero&quot; then
            numTotalRevenue = numTotalRevenue + num1999Total
        end if
        strAccountHTML = strAccountHTML &amp; &quot;&lt;TR&gt;&lt;TD &quot; &amp; _
        &quot;class='calendarinfo'&gt;&lt;A Href='' onclick=GetAccount(&quot; &amp; _
        &quot;counter &amp; &quot;);window.event.returnValue=false&gt;&quot; &amp; _
        oAccount.Subject &amp; &quot;&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&quot;
        counter = counter + 1
    next
    numTotalRevenue = CCur(numTotalRevenue)
    numTotalRevenue = FormatCurrency(numTotalRevenue)
    TotalRevenue.innerHTML = &quot;&lt;STRONG&gt;&quot; &amp; numTotalRevenue &amp; _
        &quot;&lt;/STRONG&gt;&quot;
    strAccountHTML = strAccountHTML &amp; &quot;&lt;/TABLE&gt;&quot;
    Accounts.innerHTML = strAccountHTML
    YourTasks.innerHTML = &quot;&lt;Strong&gt;&quot; &amp; oTasksCount &amp; &quot;&lt;/Strong&gt;&quot;
    YourAccounts.innerHTML = &quot;&lt;STRONG&gt;&quot; &amp; numFound &amp; &quot;&lt;/STRONG&gt;&quot;
end sub     'Window_OnLoad
--&gt;
&lt;/SCRIPT&gt;
</PRE></TD></TR></TABLE></P>

<P>Looking at the code, you can see that you need to follow a few critical steps to access the Outlook object model. The first step is to retrieve the Outlook Application object. To do this, you use the <I>Window.External.OutlookApplication</I> syntax. Once you have the Application object, you can retrieve the rest of the Outlook objects. For example, by calling the <I>ActiveExplorer</I> method on the returned Application object, you can retrieve the Explorer object that is hosting the folder home page.</p>

<p>The folder home page is a dynamic environment for the viewing of a folder, as illustrated by the Account Tracking folder home page. In it, the user is presented with a summary of her accounts, account revenue, and tasks. The home page allows you to restrict account tasks to the person currently viewing the folder. (While you could create a similar view in Outlook, you wouldn't be able to specify a filter based on who is viewing the folder.) These account summaries are created by using the <I>Restrict</I> method on the Outlook Items collection for the folder. For the Tasks restriction, the code restricts only those messages in the folder that are tasks, where the current user is the owner and the task status is incomplete. After receiving the restricted set, the code sorts the tasks by their conversation topics, which are the names of the accounts the tasks are for. The code loops through each task to see whether it has a due date. If it does, the code checks to see whether the task is past due. Then the code generates the HTML, which will be placed in the Open Account Tasks list.</p>

<p>For the revenue summary, the code first finds all account items to tally a total. The code restricts the collection to all accounts for which the current user is a team member. Then the code loops through each account and retrieves the revenue, which is stored in the UserProperties collection as custom properties. Since the revenue properties are formula properties, they can contain text that indicates zero revenue from the account. To compensate for this, the code checks whether the value of the property is the string Zero. The code then builds a string for the restricted list of account names and prints out the account revenue. The string of account names is hyperlinked, as are the tasks, so that a user can quickly go to a specific account or task.</p>

<p>From the code sample, you can see how you can include all the features of the Outlook object model, or any object model for that matter, inside the HTML page you create for your folders.</p>

</BODY>
</HTML>






