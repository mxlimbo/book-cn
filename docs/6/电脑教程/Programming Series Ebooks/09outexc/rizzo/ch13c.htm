<HTML>
<HEAD>
<TITLE>Expense Routing Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13b.htm", "ch13d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="457"><H1>Expense Routing Application</H1></A>

<p>To convert the Expense Report application from <A HREF="ch12a.htm">Chapter 12</A> to a routing application, a few major changes were made to create a routing map, update the ASP pages so that they send e-mail messages to the expense routing folder rather than update the status of the expense items directly, and implement some 
custom script actions. Before looking at the changes to the ASP pages and script, you need to set up the Expense Routing application.</p>

<A NAME="458"><H2>Setting Up the Expense Routing Application</H2></A>

<p>Before you can install the application, you must have a Windows NT 4.0 Server and a client with certain software installed. Table 13-7 describes the installation requirements.</p>

<p><B>Table 13-7</B> <i>Installation Requirements for the Expense Routing Application</i></p>

<p><table width="95%" cellpadding="5">
<tr>
<th>Required Software</th>
<th>Installation Notes</th>
</tr>
<tr>
<td valign="TOP">Exchange Server 5.5 SP1 with Outlook Web Access</td>
<td valign="TOP">Exchange Server 5.5 SP1 installs the routing engine and routing objects.</td>
</tr>
<tr>
<td valign="TOP">IIS 3.0 or higher with Active Server Pages</td>
<td valign="TOP">IIS 4.0 is recommended.</td>
</tr>
<tr>
<td valign="TOP">CDO library (cdo.dll) <br>
CDO Rendering library&nbsp;(cdohtml.dll)</td>
<td valign="TOP">Exchange Server 5.5 SP1 installs CDO library 1.21 and CDO Rendering library 1.21. Outlook 98 installs CDO library 1.21.</td>
</tr>
<tr>
<td valign="TOP"><B><I>For the client:</I></B><br> A web browser<br> Outlook 98<br> Visual Basic 6.0</td>
<td valign="TOP">For the web browser, Internet Explorer 4.0 recommended. You can run the client software on the same machine or on a separate machine.</td>
</tr>
</table></p>

<p>To install the Expense Routing application, copy the Expense Routing folder from the companion CD to your web server where you want to run the application. Start the IIS administration program. Create a virtual directory that points to the location where you copied the expense routing files, and name the virtual directory <I>expenserouting</I>. Make sure you enable the Execute 
permissions option for the virtual directory. You will be able to use the following URL to access your Expense Routing application: 
<I>http://</I>yourservername<I>/expenserouting.</I></p>

<p>Open the Exchange Administrator program. Open the Properties dialog box for the Folders\System Folders\Events Root\EventConfig_<I>servername </I>folder. Click the Client Permissions button, add a user who will administer the Expense Routing folder, and grant the user Author permissions. Click OK twice.</p>

<p>Launch Outlook using the  user you selected to administer the folder Expense Routing. Create a new public folder named <I>Expense Routing</I> under All Public Folders. Next, verify that the Server Scripting add-in is installed. By default, Outlook 98 does not install the Server Scripting add-in. To install the Server Scripting add-in, select Options from the Tools menu, click on the Other tab, click Advanced Options, and then click Add-In Manager. Check the Server Scripting check box in the Add-In Manager dialog box. In the Exchange Administrator program, open the Properties dialog box for the Expense Routing public folder. Click on the Advanced tab, uncheck the Hide From Address Book check box, and click OK.</p>

<p>Start the Registry Editor on your server, and open this key:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\MSExchangeES\
Parameters 
</PRE></TD></TR></TABLE></P>

<P>Set Logging Level DWORD to 5, to log the maximum amount of information.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>Be sure to set Logging Level to 0 when you are 
finished testing the Expense Routing application. If you do not, your 
Application log will be quickly filled up with MSExchangeES logging entries.
</BLOCKQUOTE></DIV></P>

<P>Next, you will create a default map using the Exchange Routing 
Wizard. To install the Routing Wizard on your client machine, run Rwsetup.exe from 
the Exchange Server 5.5 Service Pack 1 CD. For Windows 95 and Windows 98, 
the location for Rwsetup.exe is 
\Eng\Server\Support\Collab\Sampler\Routing\Win95. For Windows NT, the location is \Eng\Server\Support\Collab\Sampler\
Routing\Winnt\i386. You must have Outlook 98 installed on the machine 
where you are installing the Routing Wizard.</P>
<P>After you have installed the Routing Wizard, run it by selecting it 
from the Programs menu. The Routing Wizard requires you to log on to 
Exchange Server. Use the account that you used to create the Expense Routing 
public folder. In the Step 1 screen, choose the Expense Routing public folder as 
shown in Figure 13-5. Step through the remaining screens of the wizard. Add 
recipients when necessary. Since the Routing Wizard is being used only to create 
a default map, which we will modify later, the remaining settings in the 
wizard are not important. </P>
<P>Locate the RoutingAgentScript.txt file included with the expense 
routing files. Be sure the read-only flag for the 
file is unchecked and open it in Notepad. Perform a search in the code and replace all instances of the text 
<I>localhost</I> with the name of your web server. Save and close Notepad.</P>
<P>Run the updated Agent Install program in the Agent Install Updated 
folder on the companion CD. Log into your Exchange Server using the account 
you used to create the Expense Routing public folder. Select the Expense 
Routing public folder, as shown in Figure 13-6. </P>

<P>
<A HREF="javascript:fullSize('f13oh05x.htm')"> <img src="images/f13oh05.JPG" width=404 height=415 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 13-5</B> <I>Selecting the Expense Routing public folder to install a default routing map.</I><!-- /CAPTION -->
</P>

<P>
<A HREF="javascript:fullSize('f13oh06x.htm')"> <img src="images/f13oh06.JPG" width=404 height=328 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 13-6</B> <I>Selecting the Expense Routing public folder in the updated Agent Install program. The agent and map contained in the Expense Routing folder were added using the Routing Wizard.</I><!-- /CAPTION -->
</P>

<P>Click the Delete This Agent button, and then click OK to delete the 
agent in the Expense Routing public folder generated by the Routing Wizard. 
Click No when asked to delete the routing map. Click the Add New Agent 
button, click Yes when asked to create a routing agent, and then click OK to select 
a script. In the Select Script dialog box, shown in Figure 13-7, select the 
RoutingAgentScript.txt file that you modified earlier, and click OK.</P> 

<P>
<img src="images/f13oh07.GIF" width=401 height=262 border="0">
</P><P>
<!-- CAPTION --><B>Figure 13-7</B> <I>Selecting the script for the Expense Routing agent.</I><!-- /CAPTION -->
</P>

<P>In the main interface for the updated Agent Install program, click the 
View Default Map button. Click the Delete All Rows button to clear the map. 
Use the Delete Column button to delete all parameter columns except 
Parameter1. Click the Select Script button. When asked if you want to use the default 
script in the folder, click Yes. Check the Parse Script For Functions check box, 
and click OK after the program tells you how many new functions were added 
from the script. Enter the map instructions shown in Figure 13-8. Double-click 
or press the Enter key to edit a cell, and use the Add Row button to add rows. 
You will be able to select intrinsic and custom actions from a combo box that 
displays in the Action column. When finished, click Save, and then click Exit.</P>
<P>To test the Expense Routing application, use the following URL to 
submit expense reports: 
<I>http://</I>yourservername<I>/expenserouting</I>. The application 
is used in the same way as the Expense Report application in <A HREF="ch12a.htm">Chapter 12</A>. 
Figure 13-9 shows the Expense Report Status Page with some sample expense 
reports in different routing states. To see sample expense reports, open the 
Expense Routing.pst file included with the expense routing files in Outlook.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>If the application does not work as expected, check that 
you have Service Pack 1 of Exchange Server installed. Also, check 
the Application log of the Event Viewer for any logged errors.
</BLOCKQUOTE></DIV></P>

<P>
<A HREF="javascript:fullSize('f13oh08x.htm')"> <img src="images/f13oh08.JPG" width=404 height=293 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 13-8</B> <I>The routing map for the Expense Routing agent.</I><!-- /CAPTION -->
</P>

<P>
<A HREF="javascript:fullSize('f13oh09x.htm')"> <img src="images/f13oh09.JPG" width=404 height=290 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 13-9</B> <I>The status page for the Expense Routing application, where expense reports are in different routing states.</I><!-- /CAPTION -->
</P>

<A NAME="459"><H2>Changes to the ASP Section of the Application</H2></A>

<P>The biggest changes to the ASP section of the application occurred in the 
approval and rejection code for an expense report. The expense approval and rejection 
code had to be changed so that it did not update the item directly with the 
approval or the rejection of the expense report. Instead, the code was modified so that 
it sent e-mail to the requesting user with the response of the expense 
approver, regardless of whether this response was an approval or rejection. To 
implement this functionality, the code creates an e-mail message, and it adds a subject 
containing the string APPWF for approval and REJWF for rejection, as well as 
the RUI number for the process instance that this approval or rejection is for. 
The application appends RUI=number to the end of the subject.</P>
<P>To retrieve the RUI number on an approval or rejection in the ASP 
application, the custom script action that sends the message to the manager 
for approval has to pass the RUI number to the ASP application. To do this, as 
you will see, the custom script action calls into the Routing Object library and 
uses a specific property contained on the ProcInstance object, named RUI. </P>
<P>Once the ASP application has all the necessary information, it can 
create a fully formed approval or rejection message with the RUI number 
and mail this to the Expense Routing public folder. The next code segment, 
from finalapprove.asp, shows creating the approval or rejection message and 
sending it to the folder. The code used to implement the Expense Report 
application in <A HREF="ch12a.htm">Chapter 12</A> is commented out in the listing so that you can compare 
the two implementations.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;!--#include file=&quot;logon.inc&quot;--&gt;
&lt;%
Dim oMessage
Dim AMSession

CheckAMSession
BAuthenticateUser
Set AMSession= Session( &quot;AMSession&quot;)
if AMSession Is Nothing Then
    ' CheckSession was unable to retrieve or create a session
    Response.Write( &quot;GetAMSession returned nothing!&lt;br&gt;&quot;)
End If
Mailbox = Session(&quot;Mailbox&quot;)
set objFolder = Session(&quot;objFolder&quot;)
if objFolder is Nothing then
    Response.Write( _
        &quot;Cannot access the Expense Report folder!&lt;br&gt;&quot;)
end if
objInfoStoreID = Session(&quot;objInfoStoreID&quot;)
'Get the entry ID for the message from the query string
    objMessageID = Session(&quot;Entryid&quot;)
'Get the message by its ID
    set oMessage = AMSession.GetMessage(objMessageID, objInfoStoreID)
'Get the Fields of the report
    set Total = oMessage.Fields(&quot;Total&quot;)
'Get the user who posted the message
    set addentry = oMessage.Sender
    set UsersManager = addentry.Manager
    Approver = Session(&quot;Approver&quot;)

set newExpenseReport = AMSession.outbox.messages.add
set mynewrecipient = newExpenseReport.recipients.add
'Need to change this to a different folder if it is different
mynewrecipient.Name = &quot;Expense Routing&quot;
mynewrecipient.resolve
lRUI = Session(&quot;RUI&quot;)
if Request.Form(&quot;Approve&quot;) = &quot;Approve&quot; then
    newExpenseReport.subject = &quot;APPWF:,RUI=&quot; &amp; Cstr(lRUI)
    'newExpenseReport.text = Approver &amp; _
    '&quot; has approved the expense report.  &quot; &amp; _
    '&quot;The total value of this report was &quot; &amp; Total
    newExpenseReport.send
    'oMessage.Fields(&quot;StatusInt&quot;) = 3 'Approved
    'oMessage.Fields(&quot;Status&quot;) = &quot;Approved by &quot; &amp; Approver
    'oMessage.Fields(&quot;Approver&quot;) = Approver
    currentstatus = 3
else 
    newExpenseReport.subject = &quot;REJWF:,RUI=&quot; &amp; Cstr(lRUI)
    'newExpenseReport.text = Approver &amp; _
    '&quot; has rejected the expense report.  &quot; &amp; _
    '&quot;The total value of this report was &quot; &amp; Total
    newExpenseReport.send
    'oMessage.Fields(&quot;StatusInt&quot;) = 4 'Rejected
    'oMessage.Fields(&quot;Status&quot;) = &quot;Rejected by &quot; &amp; Approver
    'oMessage.Fields(&quot;Approver&quot;) = Approver
    currentstatus = 4
end if
'oMessage.Update TRUE, TRUE 
%&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot;
content=&quot;text/html; charset=iso-8859-1&quot;&gt;
&lt;% if currentstatus = 3 then %&gt;
&lt;title&gt;Expense Report Approved Page&lt;/title&gt;
&lt;% else %&gt;
&lt;title&gt;Expense Report Rejected Page&lt;/title&gt;
&lt;% end if %&gt;
&lt;/head&gt;

&lt;body bgcolor=&quot;#FFFFFF&quot;&gt;
&lt;p&gt;&lt;font size=&quot;2&quot; face=&quot;Arial Black&quot;&gt;
&lt;% if currentstatus = 3 then %&gt;
Routing Final Approval to &lt;%=addentry.Name%&gt;&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;font size=&quot;2&quot; face=&quot;Arial Black&quot;&gt;
The following funds have been successfully transferred:
&lt;p align=&quot;center&quot;&gt;$&lt;%=oMessage.Fields(&quot;Total&quot;)%&gt;&lt;/Font&gt;&lt;/p&gt;
&lt;% else %&gt;
Routing Rejection message to &lt;%=addentry.Name%&gt;&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;% end if %&gt;
&lt;/body&gt;
&lt;/html&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="460"><H2>Changes to the Server Script</H2></A>

<P>Whereas the changes to the ASP application were very minor, the changes 
to the server-side script that runs on the Exchange Server were somewhat 
more extensive. The first change was to turn the scripting agent script into a 
routing agent script. We did this by modifying the primary subroutine names so that 
they had the Route_ naming convention rather than the scripting agent 
convention. The script also had to be updated so that Boolean values were returned by 
some of the subroutines. This was necessary to implement branching using 
OrSplits in the routing map. </P>
<P>The script also needed functionality to update the status of the 
expense report when an approval or rejection message is received in the 
folder&#8212;functionality originally implemented in the ASP application. The status is 
defined as custom properties on the message.</P>
<P>The following is the updated script code, RoutingAgentScript.txt, 
that turns the Expense Report application into a routing application:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;SCRIPT RunAt=Server Language=VBScript&gt;

'--------------------------------------------------------------------
'FILE DESCRIPTION: Expense Report Sample Script for routing objects
' 
'--------------------------------------------------------------------

'------------------------------------------------------------------
' Localized strings
'--------------------------------------------------------------------
' Put all localizable strings and constants here

'--------------------------------------------------------------------
' Global Variables
'--------------------------------------------------------------------
Dim AMSession
Dim fldrOutbox
Dim msgTarget
Dim fldrTarget
Dim ExpRentalCar
Dim ExpAirfare
Dim ExpHotel
Dim ExpMeals
Dim ExpTotal
Dim g_oMsgIn          'Incoming Message Object
Dim g_oProcInstance   'Process Instance
Dim g_oPIMsg          'Process Instance Message Object
Dim g_oSession        'Session Object
Dim g_oFolder         'Routing Folder Object
Dim g_oAgentAddEntry  'Address Entry Object used for Inbox mailings

'--------------------------------------------------------------------
' Route Subs
'--------------------------------------------------------------------

' DESCRIPTION: Check the total of the expense report, and if it 
'is under a specific amount, automatically approve the expense report
Sub Route_CheckTotal(boolSuccess)
    Dim msgResponse
    Dim iMsgCount
    Dim msgManager
    Dim UsersManager
    Dim currentuser    
    Dim currentapprover

    On Error Resume Next
    If InitializeObjects Then
        WriteToLog 1,&quot;Message Count Succeeded&quot;
        set ExpTotal = msgTarget.Fields.Item(&quot;Total&quot;)
        Set msgResponse = fldrOutbox.Messages.Add

        'Get the RUI
        lRUI = g_oProcInstance.RUI
        'Modify this line to change Expense Amount
        If ExpTotal &gt; 5000 then
            WriteToLog 1,&quot;Greater than max expense amount&quot;
            msgResponse.Subject = &quot;The Total was &quot; &amp; ExpTotal
            'Message to manager
            set msgManager = fldrOutbox.Messages.Add 
            set currentuser = msgTarget.Sender
            set UsersManager = currentuser.Manager
            currentapprover = UsersManager.Name
            msgResponse.Text = &quot;This Expense Report has &quot; &amp; _
                &quot;been routed to your Manager: &quot; &amp; currentapprover
            'Get the spaces out
            currentapprover = Replace(currentapprover,&quot; &quot;,&quot;+&quot;)
            msgManager.Subject = _
                &quot;Approval Required for Expense Report!&quot;
            'Need to change this for your server and directory
            msgManager.Text = currentuser.name &amp; _
            &quot; has submitted an expense report for &quot; &amp; _
            ExpTotal &amp; &quot;.  Please review it at http://&quot; &amp; _
            localhost/expenserouting/approve.asp?entryid=&quot; &amp; _
            msgTarget.ID &amp; &quot;&amp;Approver=&quot; &amp; CurrentApprover &amp; _
            &quot;&amp;RUI=&quot; &amp; Cstr(lRUI)
            msgManager.Recipients.Add &quot;&quot;,&quot;&quot;,1,UsersManager.ID
            msgManager.Recipients.Resolve(False)
            msgManager.Send
            msgTarget.Fields(&quot;strStatus&quot;) = &quot;Awaiting &quot; &amp; _
                &quot;Approval from &quot; &amp; UsersManager.Name
            msgTarget.Fields(&quot;StatusInt&quot;) = 2
            msgTarget.Fields.Add &quot;Approver&quot;,8,UsersManager.Name
            msgTarget.Update

        Else 'Expense Report &lt;= Max Amount
            WriteToLog 0,&quot;Less than max expense amount&quot;
            msgResponse.Subject = _
                &quot;This Expense Report has been Approved&quot;
            msgResponse.Text = &quot;Your expense report for &quot; &amp; _
                ExpTotal &amp; &quot; has been automatically approved.&quot; &amp; _
                &quot;Funds are being transferred!&quot;
            msgTarget.Fields(&quot;strStatus&quot;) = &quot;Approved &quot; &amp; _
                &quot;automatically and routed for payment&quot;
            msgTarget.Fields(&quot;StatusInt&quot;) = 3
            msgTarget.Update
            boolSuccess = True
        End If
        If Err.Number = 0 Then
            msgResponse.Recipients.Add &quot;&quot;, &quot;&quot;, 1, _
                msgTarget.Sender.ID
            If Err.Number = 0 Then
                msgResponse.Recipients.Resolve(False)
                If msgResponse.Recipients.Resolved = True Then
                    msgResponse.Send
                    If Not Err.Number = 0 Then
                        WriteToLog 0, _
                            &quot;Message.Send Failed: &quot; &amp; _
                            Err.Description
                    End If
                Else
                    WriteToLog 0, _
                        &quot;Recipients.Resolve Failed: &quot; &amp; _
                        Err.Description
                End If
            Else
                WriteToLog 0,&quot;Recipients.Add Failed: &quot; &amp; _
                    Err.Description
            End If
        Else
            WriteToLog 0,&quot;Messages.Add Failed: &quot; &amp; _
                Err.Description
        End If
    Else
        WriteToLog 0,&quot;InitializeObjects Failed: &quot; &amp; _
            Err.Description
    End If
    ReleaseGlobalObjects
End Sub

Sub Route_IsTimeout(boolSuccess)
    On Error Resume Next
    Dim boolRes           'Boolean Result
    
    WriteToLog 0, &quot;Starting IsTimeout&quot;
    boolRes = InitializeObjects
    If Not boolRes Then
        WriteToLog 0, &quot;InitializeObjects Failed&quot;
    Else
        boolSuccess = g_oProcInstance.Timeout
        Set g_oProcInstance = Nothing
    End If
    WriteToLog &quot;IsTimeout returns &quot; &amp; boolSuccess
    ReleaseGlobalObjects  
End Sub

Sub Route_RouteToNextManager()
   On Error Resume Next
    Dim boolRes           'Boolean Result

    WriteToLog 0, &quot;Starting RouteToNextManager&quot;
    boolRes = InitializeObjects
    If Not boolRes Then
        WriteToLog 0, &quot;InitializeObjects Failed&quot;
    Else
        'Get the RUI
        lRUI = g_oProcInstance.RUI
        'Clear errors
        Err.Clear
        WriteToLog 0,&quot;Rerouting beginning&quot;
        set ExpTotal = msgTarget.Fields(&quot;Total&quot;)
        WriteToLog 0,&quot;The Total is: &quot; &amp; ExpTotal
        'Reroute the message
        set CurrentApprover = msgTarget.Fields(&quot;Approver&quot;)
        WriteToLog 0,&quot;The current approver is: &quot; &amp; CurrentApprover
        set msgResponse = AMSession.Outbox.Messages.Add        
        'Create the recipient
        Set objonerecip = msgResponse.Recipients.Add
        objonerecip.Name = CurrentApprover
        'Resolve the name against the Exchange Server 
        'directory
        objonerecip.Resolve
        'Get the address entry so that we can pull out template 
        'info
        Set myaddentry = objonerecip.AddressEntry
        'Get the manager from the addentry
        set NextApprover = myaddentry.Manager
        if NextApprover = Empty then 'We dont have a manager!
            'Send a message to the current user
            set currentuser = msgTarget.Sender
            msgResponse.Subject = &quot;No more manager to route to&quot;
            msgResponse.Text = currentuser.name &amp; _
                &quot; has submitted an expense report for &quot; &amp; 
                ExpTotal &amp; &quot;.  There are no other managers &quot; &amp; _
                &quot;to route to!&quot;
            msgResponse.Recipients.Add &quot;&quot;, &quot;&quot;, 1, _
                msgTarget.Sender.ID
            msgResponse.Send
            'Resend a message to the current approver
            Set msgResendtoApprover = _
                AMSession.Outbox.Messages.Add
            CurrentApproverName = _
                Replace(CurrentApprover,&quot; &quot;,&quot;+&quot;)
            msgResendtoApprover.Subject = _
                &quot;Repeat notice for Approval of an Expense Report!&quot;
            msgResendtoApprover.Text = currentuser.name &amp; _
            &quot; has submitted an expense report for &quot; &amp; ExpTotal &amp; _
            &quot;.  Please review it at http://localhost/&quot; &amp; _
            &quot;expenserouting/approve.asp?entryid=&quot; &amp; _
            msgTarget.ID &amp; &quot;&amp;Approver=&quot; &amp; CurrentApproverName &amp; _
            &quot;&amp;RUI=&quot; &amp; Cstr(lRUI)
            'Create the recipient
            set oRecip = msgResendtoApprover.Recipients.Add
            oRecip.Name = CurrentApprover
            oRecip.Resolve
            msgResendtoApprover.Send
            WriteToLog 0,&quot;No More Managers beyond &quot; &amp; _
                CurrentApprover &amp; &quot; for this user.&quot;
        else    
            NextApproverName = NextApprover.Name
            tmpNextApproverName = NextApprover.Name
            'Got the next approver. Send a message to previous 
            'approver and user and reroute.
            set currentuser = msgTarget.Sender
            msgResponse.Subject = _
                &quot;An Expense Report has been rerouted&quot;
            msgResponse.Text = currentuser.name &amp; _
            &quot; has submitted an expense report for &quot; &amp; ExpTotal &amp; _
            &quot;.  It was rerouted because the 1 hour approval &quot; &amp; _
            &quot;time limit has expired.  It is now routed to &quot; &amp; _
            NextApproverName
            msgResponse.Recipients.Add &quot;&quot;, &quot;&quot;, 1, _
                msgTarget.Sender.ID
            msgResponse.Send
            if err.number = 0 then
                WriteToLog 0,&quot;Successfully rerouted&quot;
            end if
            'Now change the status and reroute to new person
            WriteToLog 0, &quot;Updating fields on Message&quot;
            msgTarget.Fields(&quot;strStatus&quot;) = &quot;Rerouted and &quot; &amp; _
                &quot;awaiting Approval from &quot; &amp; NextApproverName
            msgTarget.Fields(&quot;Approver&quot;) = NextApproverName
            msgTarget.Update
            'Now send a message
            WriteToLog 0, &quot;Creating message to next &quot; &amp; _
                &quot;approver: &quot; &amp; NextApproverName
            Set msgNewApprover = AMSession.Outbox.Messages.Add
            WriteToLog 0, &quot;Added message to outbox&quot;
            'Create the recipient
            'Get the spaces out
            NextApproverName = Replace(NextApproverName,&quot; &quot;,&quot;+&quot;)
            WriteToLog 0, &quot;Got the spaces out of the name&quot;
            msgNewApprover.Subject = _
                &quot;Approval Required for Rerouted Expense Report!&quot;
            WriteToLog 0, &quot;Added Subject&quot;
            msgNewApprover.Text = currentuser.name &amp; _
            &quot; has submitted an expense report for &quot; &amp; ExpTotal &amp; _
            &quot;.  Please review it at http://localhost/&quot; &amp; _
            &quot;expenserouting/approve.asp?entryid=&quot; &amp; _
            msgTarget.ID &amp; &quot;&amp;Approver=&quot; &amp; NextApproverName &amp; _
            &quot;&amp;RUI=&quot; &amp; Cstr(lRUI)
            WriteToLog 0, &quot;Added Text&quot;
            Set tmpRecip = msgNewApprover.Recipients.Add
            tmpRecip.Name = tmpNextApproverName
            WriteToLog 0, &quot;Added Recipient&quot;
            msgNewApprover.Recipients.Resolve
            WriteToLog 0, &quot;Resolved Address&quot;
            msgNewApprover.Send
        end if 'Manager!   
    end if
    WriteToLog 0,&quot;RouteToNextManager is done.&quot;
    ReleaseGlobalObjects  
End Sub

Sub Route_UpdateStatus(boolApproved)
    On Error Resume Next
    
    WriteToLog 0, &quot;Starting UpdateStatus with value: &quot; &amp; _
        boolApproved
    boolRes = InitializeObjects
    If Not boolRes Then
        WriteToLog 0, &quot;InitializeObjects Failed&quot;
    Else
        'Check to see if approved or rejected, update the 
        'status of the message, and send an e-mail
        Approver = g_oMsgIn.Sender
        WriteToLog 0, &quot;Approver: &quot; &amp; Approver
        set newExpenseReport = AMSession.outbox.messages.add
        set mynewrecipient = newExpenseReport.recipients.add
        mynewrecipient.Name = msgTarget.Sender    'Original Sender
        mynewrecipient.resolve
        Total = msgTarget.Fields(&quot;Total&quot;)
        if boolApproved then    'Approved
            WriteToLog 0, &quot;Sending approve message because &quot; &amp; _
                &quot;boolApproved is &quot; &amp; boolApproved
            msgTarget.Fields(&quot;strStatus&quot;) = &quot;Approved by &quot; &amp; _
                Approver
            msgTarget.Fields(&quot;StatusInt&quot;) = 3
            msgTarget.Fields(&quot;Approver&quot;) = Approver
            newExpenseReport.subject = &quot;Your expense &quot; &amp; _
                &quot;report has been Approved!&quot;
            newExpenseReport.text = Approver &amp; _
                &quot; has approved the expense report.  The total &quot; &amp; _
                &quot;value of this report was &quot; &amp; Total
            newExpenseReport.send
            WriteToLog 0, &quot;Sent Approval Message&quot;
        else    'Rejected
            WriteToLog 0, &quot;Sending reject message because &quot; &amp; _
                &quot;boolApproved is &quot; &amp; boolApproved
            msgTarget.Fields(&quot;strStatus&quot;) = &quot;Rejected by &quot; &amp; _
                Approver
            msgTarget.Fields(&quot;StatusInt&quot;) = 4
            msgTarget.Fields(&quot;Approver&quot;) = Approver
            newExpenseReport.subject = &quot;Your expense &quot; &amp; _
                &quot;report has been Rejected!&quot;
            newExpenseReport.text = Approver &amp; &quot; has &quot; &amp; _
                &quot;rejected the expense report.  The total &quot; &amp; _
                &quot;value of this report was &quot; &amp; Total
            newExpenseReport.send    
            WriteToLog 0, &quot;Sent Rejection Message&quot;
        end if
        msgTarget.Update TRUE, TRUE
        WriteToLog 0, &quot;Updated Message Status&quot;
    end if
    ReleaseGlobalObjects
end sub

Sub Route_ReceivedApprovalMsg(boolSuccess)
    On Error Resume Next
    Dim varRet              'Variant return value
    Dim boolRes             'Boolean result
    Dim oRecipientEntry     'VoteTable recipient entry object
    Dim bstrUSubject        'Uppercased subject from incoming msg
     
    WriteToLog 0, &quot;Starting ReceivedApprovalMsg&quot;
    boolRes = InitializeObjects
    If Not boolRes Then
        WriteToLog 0, &quot;InitializeObjects Failed&quot;
     Else
        'Notes: Outlook approval/reject buttons place the string
        '       Approve:&quot; on the subject line, the URL version
        '       places APPWF: on the subject line.
        '       Check the subject line to find out if
        '       it's an Outlook message or a non-Outlook message.
        'In expense routing sample, assume it will always be 
        'a non-Outlook message
        bstrUSubject = UCase(g_oMsgIn.subject)
        'Look for APPROVE in subject
        If InStr(1, UCase(g_oMsgIn.subject), &quot;APPWF&quot;) Then
            WriteToLog 0, &quot;Message Approval Found.&quot;
            boolSuccess = True
        'Otherwise look for REJECT in subject
        ElseIf InStr(1, UCase(g_oMsgIn.subject), &quot;REJWF&quot;) Then
          WriteToLog 0,&quot;Message Reject Found.&quot;
          boolSuccess = False
        End If
    end if
    ReleaseGlobalObjects
    WriteToLog 0, &quot;ReceivedApprovalMsg Exit returned &quot; &amp; _
        boolSuccess
end sub

'--------------------------------------------------------------------
' Support Functions
'--------------------------------------------------------------------

'Description: WriteToLog
Private Sub WriteToLog(boolRecordName,strMessage)
    Dim strResponse
    strResponse = Now &amp; vbTab &amp; strMessage &amp; &quot;:&quot;
    if boolRecordName = 1 then
        strResponse = strResponse &amp; &quot; &quot; &amp; msgTarget.Subject
    else
        strResponse = strResponse &amp; &quot; &quot;
    end if
    Script.Response = Script.Response &amp; vbNewLine &amp; strResponse
end Sub 

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'   Name: InitializeObjects
'   Area: Utility
'   Desc: Set Message, Folder, and other globals. 
'         Check store that agent is operating in.
'   Parm: None
'   Retn: Boolean Success
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Private Function InitializeObjects()
    On Error Resume Next
    Dim bstrTemp
    Dim oStores             'InfoStores Object
    Dim oStore              'Store Object
    Dim bstrPStoreName      'Public Store Name
    Dim lmask               'Mask.

    'Get important session, folder, msg info
    Set g_oProcInstance = RouteDetails.ProcInstance
    Set msgTarget = g_oProcInstance.Message
    idTargetFolder = EventDetails.FolderID
    idTargetMessage = EventDetails.MessageID
    Set g_oPIMsg = g_oProcInstance.Message
    WriteToLog 0, &quot;Subject: &quot; &amp; msgTarget.Subject
    Set AMSession = EventDetails.Session
    Set fldrOutbox = AMSession.Outbox
    Set g_oSession = EventDetails.session
    Set g_oMsgIn = RouteDetails.Msg
    WriteToLog 0,g_oMsgIn.Subject
    Set g_oFolder = RouteDetails.Folder
    WriteToLog 0,g_oFolder.Name
    Set g_oAgentAddEntry = g_oSession.currentuser
    'Get sender name. If it does not exist (draft msg), 
    'get originator name.
    g_bstrMsgSender = g_oMsgIn.sender.Name
    If Err Then
        Err.Clear
        g_bstrMsgSender = g_oMsgIn.Fields.Item(g_PR_CREATOR_NAME)
    End If
    WriteToLog 0,g_bstrMsgSender
    'Save message Subject for Trace reasons
    g_bstrInMsgSubject = g_oPIMsg.subject
    'Trap any untrapped failure
    If Err Then
         WriteToLog 0,&quot;InitializeObjects returned False&quot;
         InitializeObjects = False
    Else
         WriteToLog 0,&quot;InitializeObjects returned True&quot;
         InitializeObjects = True
    End If
    'Release objects
    Set oStore = Nothing
    Set oStores = Nothing
    
End Function

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'   Name: ReleaseGlobalObjects
'   Area: Utility
'   Desc: Release global objects
'   Parm: None
'   Retn: None
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Private Sub ReleaseGlobalObjects()
    on error resume next
    Set g_oMsgIn = Nothing          'Release in reverse order
    Set g_oFolder = Nothing
    Set g_oAgentAddEntry = Nothing
    Set msgTarget = Nothing
    Set fldrOutbox = Nothing
    Set g_oPIMsg = Nothing
    Set Item = Nothing
    Set g_oSession = Nothing
    Set AMSession = Nothing
    Set g_oProcInstance = Nothing
End Sub
&lt;/SCRIPT&gt;
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





