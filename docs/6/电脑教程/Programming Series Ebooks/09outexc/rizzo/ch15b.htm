<HTML>
<HEAD>
<TITLE>AcctCrt Component</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15a.htm", "ch15c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="513"><H1>AcctCrt Component</H1></A>

<P>The AcctCrt component provides services for creating mailboxes in 
Exchange Server version 5.5 using ADSI. ADSI does not provide a mechanism to 
associate Windows NT accounts with Exchange Server mailboxes, but the 
AcctCrt COM component does. It also allows you to programmatically create and 
delete Windows NT accounts in your Windows NT domain. The AcctCrt 
component is very straightforward&#8212;it supports only six methods: 
<I>ChangeOwnerofSec
Descriptor</I>, <I>NTAccountCreate</I>, 
<I>NTAccountDelete</I>, <I>GetSidFromName</I>, 
<I>GetNameFromSid</I>, and 
<I>GenerateSecDescriptor</I>. Let's take a look at how to create an 
instance of the AcctCrt component and use the methods it supports.</p>

<A NAME="514"><H2>Creating an Instance of the AcctCrt Component</H2></A>

<P>Creating an instance of the AcctCrt component is actually very easy. The 
ProgID for the component is MSExchange.AcctMgmt. The following line of code 
shows how to create an instance of the component and store it in a variable 
named <I>mntAcct</I>:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set mntAcct = CreateObject(&quot;MSExchange.AcctMgmt&quot;)
</PRE></TD></TR></TABLE></P>

<P>Once you have an instance of the component, you can call its available methods.</p>

<A NAME="515"><H2>Creating a Windows NT Account by Using the AcctCrt Component</H2></A>

<P>The AcctCrt component contains a method named 
<I>NTAccountCreate</I> that allows you to programmatically add a new account to your Windows NT 
domain as long as you have the proper permissions in that domain. This method 
takes five arguments: Domain, Login, Password, UserComment, and 
LocalGroup. If you don't specify the domain name, AcctCrt defaults to using the local 
machine domain. If you don't specify the local group, the component automatically 
adds the user to the domain user group. The following code example shows you 
how to create a Windows NT account using 
<I>NTAccountCreate</I>:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set mntAcct = CreateObject(&quot;MSExchange.AcctMgmt&quot;)
'NTAccountCreate takes Domain,Login,Password,UserComment,LocalGroup
MntAcct.NTAccountCreate &quot;&quot;, &quot;Test User&quot;, &quot;password&quot;, &quot;&quot;, &quot;&quot;
</PRE></TD></TR></TABLE></P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
You need the proper permissions to create the 
Windows NT account using <I>NTAccountCreate</I>. If you want to use the 
AcctCrt component from an ASP page, you must authenticate the user 
by challenging the user's credentials in the browser; otherwise, ASP 
will use the anonymous Microsoft Internet Information Server (IIS) 
account to attempt creating the Windows NT user account. This 
attempt will most likely fail.
</BLOCKQUOTE></DIV></P>

<A NAME="516"><H2>Deleting a Windows NT Account by Using the AcctCrt Component</H2></A>

<P>Deleting a Windows NT Account using the AcctCrt component is as easy 
as creating a Windows NT account. To delete a Windows NT account, you use 
the <I>NTAccountDelete </I>method, which takes two arguments: Domain and 
UserLogin. If you don't specify the domain parameter, the component will use the 
local machine domain. Here's how you delete the account we added in the 
previous example code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
MntAcct.NTAccountDelete &quot;&quot;,&quot;Test User&quot;
</PRE></TD></TR></TABLE></P>

<A NAME="517"><H2>Associating Windows NT Accounts with Exchange Server Mailboxes</H2></A>

<P>Now that you've seen how to create and delete a Windows NT account, 
you need to learn how to associate a new Windows NT account with a mailbox 
and change a Windows NT account associated with a mailbox (in cases where 
you delete the Windows NT account). The AcctCrt component provides these 
capabilities through its remaining four methods. The following subroutine 
shows you all four of these methods:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Public Sub ManageSids(oldSid, oldDescriptor, NTDomain, _
NTAccountName, NewSid, NewDescriptor)
'Check to see if modifying existing SID
If IsEmpty(oldSid) then
    'Generate new SID
    mntAcct.GenerateSecDescriptor NTDomain, NTAccountName, _
        NewSecDescriptor
    'NewSecDescriptor now contains the new Security Descriptor.
    'We can then use the new Security Descriptor for our 
    'mailbox in ADSI. 
else
    mntAcct.GetNameFromSid NTDomain, (oldSid), oldNTDomain, _
        oldNTAccountName
    mntAcct.ChangeOwnerofSecDescriptor oldNTDomain, _
        oldNTAccountName, NewNTDomain, NewNTAccountName, _
        (oldSid), newSecDescriptor
    'Just to show how to use it
    mntAcct.GetSidFromName NewNTDomain, NewNTAccountName, testSid
end if
</PRE></TD></TR></TABLE></P>

<P>The <I>ManageSids</I> subroutine takes a number of parameters. If you pass 
in a security descriptor for the <I>oldSid </I>variable, the subroutine expects you to 
also pass in a domain name and an account name representing the new account 
you want to assign the security identifier (SID) to. The subroutine then 
modifies the security descriptor to reflect the new account and domain. It does this 
by retrieving the name of the old Windows NT domain and account for the 
security descriptor using the <I>GetNameFromSid 
</I>method. This method takes the domain name and a current SID as its parameters. (Be sure to enclose the 
variable for your SID in parentheses so that the value is passed by reference to the 
method. If you don't do this, you will receive an error.) The final two parameters 
are variables that the method fills in for you. They contain the Windows NT 
domain and the user name that the SID corresponds to.</p>

<P><div class="sidebar">
<BLOCKQUOTE>
<B>Security Descriptors and Security Identifiers</B>
<P>Understanding the difference between a security descriptor and a 
security identifier (SID) might be a little confusing. A security 
descriptor is a structure that contains the security information about an 
object, such as the owner and primary group, and users who have 
permissions to access the object. A SID is a structure that uniquely identifies a 
user or a group in Windows NT. Exchange Server requires the security 
descriptor to be placed in the NT-Security-Descriptor attribute and 
the SID to be placed in the Assoc-NT-Account attribute.</p>
</BLOCKQUOTE></DIV></P>

<P>The <I>ManageSids</I> subroutine needs to change the ownership of the 
security descriptor to the new Windows NT domain and account passed in by 
the user by using the <I>ChangeOwnerOfSecDescriptor 
</I>method. This method takes six parameters. The first five are values that you pass in, such as the Windows 
NT domain and account, which is the current account for the security 
descriptor; the new Windows NT domain and account you want to change the 
descriptor to; and the descriptor you want to modify, enclosed in parentheses. The 
sixth parameter is a variable where the new security descriptor is returned. You 
can then take the new security descriptor and use it to update permissions on 
the Exchange Server mailbox to reflect a new user using ADSI.</p>

<P>I included the <I>GetSidFromName</I> method in the subroutine to show 
you how to use it. It retrieves the SID for a Windows NT account if you know 
only the name and domain of the account. Use 
<I>GetSidFromName</I> when you want to quickly find an account and retrieve its SID so that you can place it into 
an Exchange Server mailbox to assign ownership for the mailbox. 
<I>GetSidFromName</I> takes three parameters, the first two being the Windows NT domain and 
the account name that you want to find the SID for. Assuming the method 
could find the account, the third parameter is a variable that the method fills in 
with the value of the SID.</p>

<P>If you do not pass in the SID to the 
<I>ManageSids</I> subroutine, the subroutine assumes that you want to generate a new security descriptor for the 
Windows NT domain and account name that you passed to the parameter. The 
subroutine generates this new security descriptor by using the method 
<I>GenerateSecDescriptor</I>. The 
<I>GenerateSecDescriptor</I> method takes the Windows NT domain, the 
user name that you want to generate a security descriptor for, and a return 
variable for the new security descriptor. You can use this new security descriptor in 
your ADSI code for mailboxes you create.</p>

</BODY>
</HTML>





