<HTML>
<HEAD>
<TITLE>Routing Object Library</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13c.htm", "ch13e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="461"><H1>Routing Object Library</H1></A>

<P>The Exchange Server Routing Object library is provided by Microsoft so 
that you can create process instances, create and edit routing maps, and track 
the progress of your process instances. The Routing Object library, which is 
provided in the file exrtobj.dll, is a hierarchical object library like CDO. In fact, 
the Routing Object library was built with the expressed intention to be used 
with the CDO object library. Figure 13-10 shows the objects contained in the 
Routing Object library.</P>
<P>With this object library, you can create some interesting applications. 
To help demonstrate how useful and powerful this object library is, we will take 
a look at an update to the Agent Install program from <A HREF="ch12a.htm">Chapter 12</A>. This 
program has been updated to allow you to edit routing maps and track the state or 
process instances in a folder. Before looking at the updated Agent Install 
program, however, you first must take a look at the objects in the library so that you 
have a firm understanding of their functionality. I'll provide the most important 
properties and methods you will likely use in your applications. Refer to the 
Agents.hlp file on the Exchange Server 5.5 Service Pack 1 CD for the full listing of 
properties and methods for the objects. Also, check out the Exchserv.chm file on 
the companion CD and the Microsoft TechNet site 
<I><A HREF="http://www.microsoft.com/technet/download/exchange/" TARGET="_window2">http://www.microsoft.com/technet/download/exchange/</A>.</I></P>

<P>
<A HREF="javascript:fullSize('F13oh10x.htm')"> <img src="images/F13oh10.JPG" width=404 height=699 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 13-10</B> <I>The objects in the Routing Object library.</I><!-- /CAPTION -->
</P>

<A NAME="462"><H2>RouteDetails Object</H2></A>

<P>The RouteDetails object is a top-level object in the library. You should 
never explicitly create a RouteDetails object; it is passed to the VBScript 
subroutines that you write for the folder in the same way that the EventDetails object 
is passed to your VBScript event scripts. Since the routing objects are built on 
the Event Scripting technology, both the RouteDetails object and the 
EventDetails object are passed to your VBScript functions.</P>
<P>The RouteDetails object contains a number of properties that you will 
want to use in your VBScript functions, including the following:</P>

<UL>
<P><LI><I>ProcInstance property.</I> This property, when set to an object 
variable, returns the process instance object currently being executed. 
You can use this object to retrieve process-specific information, such 
as the row in the routing map that the process instance is 
currently executing.</LI></P>
<P><LI><I>Msg property.</I> This property, when set to an object variable, returns 
a CDO Message object that corresponds to the message received 
by the folder for the process instance. In your scripts, this message 
would be an approval or a rejection, or some other type of status 
message sent to the folder. This message would have an RUI number 
representing a currently executing process instance.</LI></P>
<P><LI><I>Folder property.</I> This property, when set to an object variable, 
returns a CDO Folder object that represents the current folder where the 
process instance is running. You can use this Folder object in your 
script to perform actions on the folder or on messages inside the folder.</LI></P>
<P><LI><I>WorkItem property.</I> This property returns the WorkItem object 
for the current process instance.</LI></P>
</UL>

<P>As you can see, the RouteDetails properties return full CDO objects, 
unlike the EventDetails object, which returns only EntryID properties for the 
message and the folder. Using the RouteDetails properties avoids the need to bind to 
a message or a folder in the Exchange Server store each time a script is run, 
so your scripts will achieve greater performance.</P>
<P>That said, there is one important object that is not available through 
the RouteDetails object and available only through the EventDetails 
object&#8212;the CDO Session object, which is the pre-logged-on CDO Session that the 
script is running under. To retrieve all the objects you want to use in your scripts, 
you must use both the RouteDetails and the EventDetails objects together. 
The following code shows how to initialize your VBScript objects with all 
the RouteDetails properties:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set g_oSession = EventDetails.session
Set g_oMsgIn = RouteDetails.Msg
Set g_oFolder = RouteDetails.Folder
Set g_oProcInstance = RouteDetails.ProcInstance
</PRE></TD></TR></TABLE></P>

<A NAME="463"><H2>ProcInstance Object</H2></A>

<P>The ProcInstance object is a top-level object that can be created 
independently of any other objects in the Routing Object library, or that can be obtained 
by using the ProcInstance property of the RouteDetails object. The 
ProcInstance object represents a process instance that is a work item and some additional 
properties for state and map information. When tracking processes in your 
routing object applications, you will use the ProcInstance object extensively. Some of 
the important properties and methods for this object include the following:</P>

<UL>
<P><LI><I>CurrentRow property.</I> This property returns a long value that 
represents the current row that the engine is executing. The value is not 
the same as the ActivityID of the current row that the engine is 
processing. To find the ActivityID, you must first scroll through the 
routing map and then retrieve the specific row the property corresponds 
to. You can then use the ActivityID property of the Row object, 
which you will see later in this chapter.</LI></P>
<P><LI><I>Log property</I>. When set to an object variable, this property 
returns the routing objects Log object. The Log object represents the 
custom log for a particular process instance. Don't confuse this Log 
object with the agent log which you saw in the <a href="ch12a.htm">previous chapter.</a> 
These two logs are stored differently. The Log object in the routing 
objects should be used to store execution history and auditing 
information for the process. The Agent log should be used for debugging 
information about agents as well as general agent information, such 
as the time the agent completed execution. Note that if you want 
to write debugging information to the Agent log from a routing 
objects VBScript subroutine, you can use the 
<I>Script.Response</I> method in exactly the same way you use it in an Event Agent script.</LI></P>
<P><LI><I>Map property.</I> This property, when set to an object variable, 
returns a Map object that represents the map for the current process 
instance. Since you can have maps for individual items that are different 
from the default folder map, you should not assume that the default 
folder map and the process instance map are the same.</LI></P>
<P><LI><I>Message property.</I> Set this property to an object variable to 
retrieve the corresponding CDO message for the process instance. You 
can also set this property to a CDO Message object to tell the 
Routing Object library which process instance you want to work with&#8212;this 
is the most common use for the Message property. You will see how 
to use this property in the sample application later in this chapter.</LI></P>
<P><LI><I>Participant property</I>. This property returns the Participant 
object. The role of the Participant object is to let you quickly resolve 
custom roles stored in the Exchange Server directory.</LI></P>
<P><LI><I>RUI Property</I>. This property returns a long value that represents 
the unique RUI number for this process instance.</LI></P>
<P><LI><I>Terminated property</I>. This property returns a long value that 
represents whether the process instance is 
terminated&#8212;<I>0</I> if the process instance is not terminated and is still executing, or 
<I>1</I> if the process instance has hit a Terminate command in the map.</LI></P>
<P><LI><I>Timeout property</I>. This property returns a Boolean that 
represents whether the process instance has timed out during a Wait action in 
a map. Timeout returns True if the process instance has timed out, 
and False if it has not timed out. You should use this property and 
the Wait action together to implement timeouts in your applications. 
You can then call automatic functions when the timeout occurs to 
either automatically move the item to the next participant or remind 
the current participant of the time limit for a response.</LI></P>
<P><LI><I>VoteTable property</I>. This property returns a VoteTable object 
that allows you to create and consolidate Outlook voting 
button-style messages.</LI></P>
<P><LI><I>Wait property</I>. This property returns a long value that 
represents the time when the process instance will expire. The Wait 
property is used by the engine at run time to determine whether the 
process instance has timed out. You probably will never use this 
property directly in your applications but instead will use the Timeout 
property just discussed.</LI></P>
<P><LI><I>Open method.</I> This method, when it has the Message property 
set and is called on a ProcInstance object, opens the process instance 
on the specific CDO Message object. You must set the Message 
property and use the <I>Open</I> method before attempting to use any of 
the other routing object properties.</LI></P>
<P><LI><I>Save method</I>. This method saves any changes you make to the 
process instance. You must also call the CDO 
<I>Update</I> method on the process instance message to save your changes permanently.</LI></P>
</UL>

 <P>The following code snippet, written in Visual Basic, shows you how to 
use some of these properties and methods. It assumes you already have a valid 
CDO Message object, named oMessage, that corresponds to the process instance 
you are interested in.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oRTProcInstance = CreateObject(&quot;exrt.ProcInstance&quot;)
oRTProcInstance.Message = oMessage
oRTProcInstance.Open
msgbox &quot;The current executing row is &quot; &amp; oProcInstance.CurrentRow
if oProcInstance.Terminated = 0 then
    msgbox &quot;The process is not terminated.&quot;
Else
    Msgbox &quot;The process is terminated.&quot;
End if
Msgbox &quot;The RUI for this process instance is &quot; &amp; oProcInstance.RUI
'This shows how to retrieve the properties that require object 
'variables
set oMap = oProcInstance.Map
set oLog = oProcInstance.Log
</PRE></TD></TR></TABLE></P>

<A NAME="464"><H2>Map Object</H2></A>

<P>The Map object represents the routing map that is evaluated and used by 
the engine when executing process instances. There must be a default map in 
every routing folder. This map is copied onto incoming messages when the 
messages do not already contain maps.</P>
<P>The Map object is a top-level object that can be created independently 
of other objects in the library, so you can create maps and edit maps without 
creating a ProcInstance object. The following are the major properties and 
methods for this object:</P>

<UL>
<P><LI><I>ActivityCount property.</I> This property returns a long value that 
represents the number of activities in a particular map. You can use 
this property to scroll through all the activities in a map to search for 
a specific activity or parameter.</LI></P>
<P><LI><I>Message property.</I> This property gets or sets the CDO Message 
object corresponding to the object you want to retrieve or save a 
map onto. You must set this property before you call the methods on 
the Map object. You can set this property to an individual message in 
a folder to retrieve the map stored in the message, or to the event 
binding message in the folder to retrieve the default map for the folder.</LI></P>
<P><LI><I>CopyTo method</I>. The <I>CopyTo</I> method copies the map from one 
message to another message. This method takes as its argument the 
CDO Message object, which corresponds to the process instance you 
want to copy the current Map object to.</LI></P>
<P><LI><I>DeleteActivity method.</I> This method takes an ActivityID as its 
argument and will delete the activity from the map. You must call 
the <I>SaveMap</I> method and the CDO Message object 
<I>Update</I> method to save your changes permanently.</LI></P>
<P><LI><I>DeleteMap method.</I> This method deletes the entire map from 
the current CDO Message object.</LI></P>
<P><LI><I>GetRow method</I>. This method retrieves a specific row from the 
map. It takes the row number as a long argument and returns a Row 
object that corresponds to that row.</LI></P>
<P><LI><I>InsertActivity method</I>. This method inserts a Row object into 
the current map. It takes a long value that indicates the row 
number preceding the row you will insert. This method also takes a 
Row object as an argument to indicate the source of the row to insert. 
The value <I>_1 </I>tells the library to insert your new row after the last row 
in the map.</LI></P>
<P><LI><I>OpenMap method</I>. This method opens the map on the CDO 
Message object you specify for the Message property. You can pass in 
a long argument, which takes the value <I>0</I> if you want to open the 
map as read-only, and nonzero if you want to open the map as read/write.</LI></P>
<P><LI><I>SaveMap method.</I> This method saves the current map on the 
CDO Message object specified in the Message property. Note that 
you must also change a property on the item and call the CDO 
Message <I>Update</I> method to permanently save the item. If you do 
not call the CDO <I>Update</I> method after calling the 
<I>SaveMap </I>method, your changes will be lost when you destroy the Map object.</LI></P>
</UL>

<P>The following code snippet shows you how to use some of these 
methods and properties in your own programs. It assumes you have a valid 
CDO Message object, named oMessage.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oRTMap = CreateObject(&quot;exrt.map&quot;)
oRTMap.Message = oMessage
oRTMap.OpenMap 1    'Read/Write
msgbox &quot;Activity Count is &quot; &amp; oRTMap.ActivityCount
'Retrieve a row by using the GetRow method.
'First, create the Row object.
set oRTRow = CreateObject(&quot;exrt.row&quot;)
oRTMap.GetRow 1, oRTRow    'Get the first row
'Change the Flags property on the row
oRTRow.Flags = 2
'Need to save the map now
oRTMap.SaveMap
'Need to change a property on the message to have the 
'Update method work correctly
oMessage.Subject = oMessage.Subject &amp; &quot; &quot;
'Need to call the CDO Message Update method to persist changes on 
'the message
oMessage.Update
</PRE></TD></TR></TABLE></P>

<A NAME="465"><H2>Row Object</H2></A>

<P>The Row object represents a single row in your map. You can create a Row 
object independent of the other objects in the library. After creating a Row object, 
you should set its properties and add it to your map. If you are retrieving a row 
from an existing map, to store the row, you must pass in a variable that 
corresponds to your Row object. The following are the most important properties and 
methods for this object:</P>

<UL>
<P><LI><I>Action property.</I> This property takes a string value and can either 
set or retrieve the action for the current Row object. This action can 
be the name of an intrinsic action or of a script subroutine you create 
in VBScript.</LI></P>
<P><LI><I>ActivityID property.</I> This property is a Long value that contains 
the unique number that identifies the row in the map. Usually, you 
start ActivityIDs in a new map at 100 and increment according to 
your preference for numbering the subsequent rows.</LI></P>
<P><LI><I>Flags property.</I> This property is a Long value that contains a 
flag indicating whether the Action property is an intrinsic action or 
a VBScript-implemented action. The possible values for this 
property are <I>0</I> for an intrinsic action and 
<I>2 </I>for a VBScript action.</LI></P>
<P><LI><I>CopyTo method.</I> This method takes a Row object as its 
argument, then copies the current row to the new Row object.</LI></P>
<P><LI><I>GetArgs method.</I> This method returns the parameters for a Row 
object. The parameters are returned in a string array along with a 
Long variable that indicates the number of parameters for an action. 
See the next code snippet to learn how to use this method.</LI></P>
<P><LI><I>SetArgs method. SetArgs</I> is the opposite of 
<I>GetArgs</I>. Instead of retrieving the parameters for the Row object, 
<I>the</I> <I>SetArgs</I> method sets the parameters for the Row object. You must pass in a Long 
value that is the number of parameters for the Row object as well as a 
string array of those parameters.</LI></P>
</UL>

<P>The following code snippet shows you how to use the Row object. 
Note that you must convert to the correct format any arguments you pass to 
the methods and properties. If a method is expecting a Long value, pass a 
Long value. This example assumes you already have a valid Map object set to oRTMap.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'This example creates a row, fills it in, and adds it to a map
Set oRTRow = CreateObject(&quot;exrt.row&quot;)
Dim arrParameters(2)        'Two parameters
arrParameters(1) = &quot;Test&quot;
arrParameters(2) = &quot;Test2&quot;
'If the parameters are numbers, use CLng. 
'See the AgentInstall update later in this chapter for more 
'information.
oRTRow.SetArgs 2, arrParameters

'Use CLng if not already a long
oRTRow.ActivityID = 100
'Use CStr if not a string
oRTRow.Action = &quot;My Custom Action&quot;
'Use CLng if not already a long
oRTRow.Flags = 2
'Inser the Row into the Map
oRTMap.InsertActivity _1, oRTRow
oRTMap.SaveMap
'Then update the message, as shown in the previous code snippet
</PRE></TD></TR></TABLE></P>

<A NAME="466"><H2>Log Object</H2></A>

<P>The Log object allows you to log activities that execute in your map. This 
object stores its log differently from the way logs are stored in the Event Agent 
log. The only way you can retrieve the Log object is by using the Log property 
on the ProcInstance object. You cannot create a separate instance of this 
object. The following are the methods of the Log object:</P>

<UL>
<P><LI><I>AddLogEntry method.</I> This method adds a new log entry to the 
current log of the selected process instance. This method takes the 
application name as a string (referred to as the name 
ID), which you can use to identify custom activities or functions as a string, the 
date/time as a Long value, and the description you want to store as a 
string. You probably will use this method to store route-specific 
information for a particular process instance. This log is useful for 
storing audit trails and failures in a particular process.</LI></P>
<P><LI><I>GetLogEntry method.</I> This method retrieves a log entry from the 
current log of the process instance. It shares the same properties as 
the <I>AddLogEntry</I> method, but it returns them instead of adding 
them. The parameters for these two methods differ as well: the 
<I>GetLogEntry</I> method has an extra parameter, which is for the LogIndex.</LI></P> 
<P><LI><I>OpenLog method.</I> This method opens the log so that you can 
retrieve or add items to it.</LI></P>
<P><LI><I>SaveLog method.</I> This method saves your changes to the current log.</LI></P>
</UL>

<P>The following code snippet shows you how to insert an item into the log. 
The code assumes that you have a valid ProcInstance object named oRTProcInstance.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oRTLog = oRTProcInstance.Log
oRTLog.AddLogEntry &quot;MyApp&quot;, &quot;MyNameID&quot;, CLng(10/1/1998), &quot;MyDescrip&quot;
'Save the log
oRTLog.SaveLog
</PRE></TD></TR></TABLE></P>

<A NAME="467"><H2>Participant Object</H2></A>

<P>The Participant object provides a way to refer to and manipulate addresses 
(which can be actual e-mail addresses or roles) in your routes and resolve roles to 
actual addresses. For example, you would use the Participant object to find 
out who the manager or expense approver for a certain user is by passing in 
the address of that user. This object would then return to you the address of the 
person who performs the role you specified. The three important methods of this 
object include the following:</P>

<UL>
<P><LI><I>RoleName method.</I> You pass the role name you want to resolve as 
a string to this method. For example, to resolve the Expense 
Approver role for a user, you would pass Expense Approver.</LI></P>
<P><LI><I>MemberName method.</I> You pass this method a string 
containing either the unique address or unique name of a person. This 
string should contain the information of the person for whom you 
want to find the role performer associated with the role name you 
specified in the <I>RoleName</I> method. For example, if you wanted to 
find the expense approver for Frank Lee, you would pass, as a string 
to this method, either the name Frank Lee or the e-mail address 
of Frank Lee.</LI></P>
<P><LI><I>ResolveRole method.</I> This method returns to you the address of 
the person who performs the role for the member you specified. You 
must set a variable to this method to retrieve the address. For example, 
if Tom Rizzo was the expense approver role performer for Frank 
Lee, the e-mail address of Tom Rizzo would be returned by 
<I>ResolveRole</I>.</LI></P>
</UL>

<P>The following sample code shows you how to use this object in the 
VBScript subroutines for your routes. It assumes that you already have a valid 
ProcInstance object named oRTProcInstance.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oParticipant = oRTProcInstance.Participant
'This can be also Manager or another custom RoleName you make
oParticipant.RoleName = &quot;Expense Approver&quot;
'Or you could pass the address
oParticipant.MemberName = &quot;Thomas Rizzo&quot;
'Get the address of the expense approver 
ExApproverAddress = oParticipant.ResolveRole
</PRE></TD></TR></TABLE></P>

<A NAME="468"><H2>VoteTable Object</H2></A>

<P>The VoteTable object allows server-based applications to create Outlook 
voting-button messages. The Exchange Server Routing Objects do not need to rely 
on the Outlook object model to do this; they include the functionality to 
create them. Being able to create voting buttons makes it easy for your Outlook 
users to select custom responses, such as Approve or Reject, for your routed 
items. The VoteTable object can also be used to consolidate voting button 
response messages in the original process instance. This consolidation saves time since 
you do not have to write this code yourself to consolidate the responses. 
Furthermore, this object updates the Tracking tab in Outlook without needing 
code from you. </P>
<P>The VoteTable object can be created as a separate object or retrieved 
by using the VoteTable property of a ProcInstance object. The VoteTable 
object is used in conjunction with the RecipientEntry object, which is discussed 
later in this chapter. The following list describes the properties and methods for 
the VoteTable object:</P>

<UL>
<P><LI><I>Count property.</I> This property returns the number of recipient 
entries in the VoteTable object.</LI></P>
<P><LI><I>Item property.</I> By passing in a number specifying an index, this 
property will return the corresponding, existing RecipientEntry object 
in the VoteTable.</LI></P>
<P><LI><I>PIMessage property.</I> When creating a stand-alone VoteTable 
object, this property must be set to the CDO Message object, which 
corresponds to the process instance for which you want to check 
recipients' votes.</LI></P>
<P><LI><I>AddButtons method.</I> This method adds voting buttons to your 
message. The two parameters you must pass to this method are the 
CDO Message object, which is the message you want to add the 
voting buttons to, and a string of the voting options, separated by 
commas, as in &quot;approve, reject&quot;.</LI></P>
<P><LI><I>ConsolidateResponse method.</I> This method consolidates the responses for a voting button message received by the folder. This method 
takes two parameters, the first being a CDO Message object, which is 
the voting button response message. The second parameter is a 
Boolean specifying whether to automatically add a RecipientEntry object 
to the VoteTable for the user who responded to the voting button 
message, if one doesn't already exist for the user.</LI></P>
<P><LI><I>Save method.</I> This method saves your changes to the VoteTable object.</LI></P>
</UL>

<P>The following code example shows you how to create a voting button 
message. It assumes you already have a valid CDO Message object called oMessage.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oRTVoteTable = CreateObject(&quot;exrt.VoteTable&quot;)
'You could also use the VoteTable property on the ProcInstance 
'object to get a VoteTable object.
'Create the buttons.
oRTVoteTable.AddButtons oMessage, &quot;approve,reject,undecided&quot;
'Send the message
oMessage.Send
</PRE></TD></TR></TABLE></P>

<P>The next code snippet shows you how to consolidate voting button 
responses received in a folder. This example assumes you have a valid CDO 
Message object in oMessage.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Use the ProcInstance VoteTable
set oRTVoteTable = oRTProcInstance.VoteTable
'oMessage is the voting response message, True means to autoadd
oRTVoteTable.ConsolidateResponse oMessage, True
oRTVoteTable.Save
</PRE></TD></TR></TABLE></P>

<A NAME="469"><H2>RecipientEntry Object</H2></A>

<P>The RecipientEntry object is always used to track the response of a recipient 
in the route and the date that recipient responded. The RecipientEntry object 
is typically used in conjunction with the VoteTable object. The following 
properties are available for the RecipientEntry object:</P>

<UL>
<P><LI><I>Date property</I>. This property is the date the recipient sent a response for the process instance.</LI></P>
<P><LI><I>Recipient property.</I> This property is the name of the recipient who responded.</LI></P>
<P><LI><I>Status property.</I> This property contains the recipient's response, such as Approve or Reject.</LI></P>
</UL>

<P>The following code shows you how to create and fill in a 
RecipientEntry object. The code will also show you how to add this RecipientEntry object to 
the VoteTable object. This code assumes you have a valid oRTProcInstance 
object.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oRTVoteTable = oRTProcInstance.VoteTable
Set oRecipientEntry = CreateObject(&quot;exrt.RecipientEntry&quot;)
oRecipientEntry.Recipient = &quot;My Name&quot;
oRecipientEntry.Date = &quot;11/1/1998 10:00 AM&quot;
oRecipientEntry.Status = &quot;Approve&quot;
oRTVoteTable.ConsolidateResponse oRecipientEntry, False
oRTVoteTable.Save
</PRE></TD></TR></TABLE></P>

<A NAME="470"><H2>WorkItem Object</H2></A>

<P>The WorkItem object can be retrieved only as a property of the 
RouteDetails object. The WorkItem object can represent a new item in the folder before 
a related process instance for the item is found, or a new item in the folder 
until that item is turned into a process instance. Most of the time, your 
applications will not call the methods and properties of the WorkItem object directly. 
Rather, the routing engine will call the methods. The only exceptions to this are 
the following:</P>

<UL>
<P><LI><I>Item property.</I> This property specifies the CDO Message object 
you want to assign to the WorkItem object. After assigning the CDO 
Message object, you can use the methods of the WorkItem object 
with that CDO Message object.</LI></P>
<P><LI><I>ItemConsolidate method</I>. This method merges the message content of one CDO Message object with another CDO Message object. 
To specify the target message, set the Item property for the 
WorkItem object to it. The <I>ItemConsolidate</I> method takes three parameters, 
the first being an array of MAPI property tags that you want to 
merge with the target message. These properties can be attachments, 
the message body, or your own custom properties. The second 
parameter is the CDO Message object, which is the source message 
you want to consolidate your specified properties with. The third 
argument, or parameter, is a Boolean value; you specify True if you 
want to append the content to the target message, or False if you want 
to overwrite any existing content in the target message's properties. 
The next code snippet shows you how to use the 
<I>ItemConsolidate</I> method.</LI></P>
<P><LI><I>EmbedMsg method</I>. This method makes it easier for you to 
embed the CDO Message object into the CDO Message object you 
specify in the Item property for the WorkItem object. The only 
parameter this message takes is the source CDO Message object that you use 
to embed in the WorkItem CDO Message object.</LI></P>
</UL>

<P>To illustrate how these methods and properties work, the following 
sample code sets a WorkItem object to a CDO Message object. It then embeds 
another message in the existing CDO Message. The code also consolidates all 
attachments from another message into the WorkItem CDO Message object. 
This sample assumes you have a RouteDetails object.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Get the WorkItem object
Set oWorkItem = RouteDetails.WorkItem
'Set the Item property to the current process instance
oWorkItem.Item = oProcInstanceMessage
'Embed another message into the oProcInstanceMessage
oWorkItem.EmbedMsg oAnotherMessage
'Consolidate all the attachments from another message into 
'the WorkItem message.
'Create an array of propIDs.
PropArray = Array(&amp;HE13000D)    'For msg attachments
'Append items by selecting True
oWorkItem.ItemConsolidate PropArray, omsgSource, True
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





