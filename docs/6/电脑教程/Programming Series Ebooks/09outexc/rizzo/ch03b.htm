<HTML>
<HEAD>
<TITLE>Robust Messaging Infrastructure</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03a.htm", "ch03c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="60"><H1>Robust Messaging Infrastructure</H1></A>

<P>Exchange Server provides an infrastructure with certain core services that 
enable you to focus on building value-added services rather than on re-creating 
existing services. This infrastructure complements current network topologies 
and protocols and, as you will see, guarantees that every message gets through 
to its destination. The following sections discuss some of the advantages of 
the Exchange Server messaging infrastructure.</p>

<A NAME="61"><H2>Least-Cost Routing, Load Balancing, and Failover</H2></A>

<P>Exchange Server provides technologies in its messaging engine that allow 
organizations to define different routes of communications between 
Exchange Servers. Costs can be assigned to these different routes, and the least costly 
route is always attempted first by the Exchange Server. If this route is unavailable, 
the Exchange Server will failover to the next least costly route. If you assign the 
same cost to two different routes, the Exchange Server will distribute the 
communications traffic evenly over both routes, thereby load balancing the connections.</p>

<P>Let's look at an example. Imagine there are three routes between an 
Exchange Server in New York and an Exchange Server in California, and the 
routes consist of one route over the Wide Area Network, another over a dial-up 
28.8 modem, and the third over a satellite link. The administrator of the 
Exchange Server system can assign costs to each of these routes: the WAN route is 
assigned a cost of 20, the modem route is assigned a cost of 50, and the satellite route 
is assigned a cost of 70. Based on the cost of the routes, for communications, 
the Exchange Server would always attempt the WAN route first. If this route 
was down, the Exchange Server would failover to the next least costly route 
(the modem), and if that route was unavailable, it would attempt to connect 
over the satellite.</p>

<P>Now this is a simple example, but Exchange Server supports the 
building of very complex routing tables with associated costs that it automatically 
calculates. For example, consider a message that has to be routed through 
seven different Exchange Servers until it reaches its final destination. Each 
Exchange Server has three unique routes to the next server. Exchange Server would 
automatically find the least costly route of all of the supplied routes.</p>

<A NAME="62"><H2>Delivery and Read Receipts</H2></A>

<P>Exchange Server supports both delivery and read receipts when 
delivering information through the Exchange Server system. Delivery receipts are 
returned to an individual user or an application when an item has been delivered to 
its final destination. This destination can be another Exchange Server or 
messaging server over the Internet. Delivery receipts also report the time and date 
that an item was received by a particular system. You can take advantage of 
delivery receipts in your application by using them to trigger events when they are 
returned. For example, a workflow application can consolidate delivery receipts to 
track the status of message delivery to workflow participants. Figure 3-1 shows 
an example of a delivery receipt.</p>

<P>Read receipts are similar to delivery receipts, except that read receipts 
are sent to a user or application when the recipient actually opens the item, 
and delivery receipts are sent as soon as the item is delivered to the destination 
server. You might want to use read receipts in your application for time-sensitive 
items sent through the Exchange Server system. The application could track when 
the item is read, and if no action is taken after a certain amount of time, it 
could reroute the item to a different user or application. Figure 3-2 shows an 
example of a read receipt.</p>

<P>
<A HREF="javascript:fullSize('F03oh01x.htm')"> <img src="images/F03oh01.JPG" width=404 height=284 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 3-1</B> <I>A delivery receipt sent back to a user looks like this. Applications can also send back delivery receipts.</I><!-- /CAPTION -->
</p>

<P>
<A HREF="javascript:fullSize('F03oh02x.htm')"> <img src="images/F03oh02.JPG" width=404 height=284 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 3-2</B> <I>Applications can use read receipts like this to track when users open items sent by the application.</I><!-- /CAPTION -->
</p>

<A NAME="63"><H2>Message Tracking</H2></A>

<P>Exchange Server supports more than delivery and read receipts. When 
message tracking is enabled, Exchange Server keeps logs of the items that have 
entered the Exchange Server system from other systems. Exchange Server also logs 
where items were routed to, which Exchange Server components routed them, and 
when the items were delivered to their final destinations. Message tracking 
enables you to find an item's route based on specific criteria such as the sender of 
the item, the intended recipient, or even the component of Exchange Server 
that handled the message. This powerful tool allows you to trace any item in 
your application and determine whether or not it reached its destination. Figure 
3-3 shows an example of tracing an item in the Exchange Server system.</p>

<P>
<A HREF="javascript:fullSize('F03oh03x.htm')"> <img src="images/F03oh03.JPG" width=404 height=373 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 3-3</B> <I>Tracking items from Thomas Rizzo across the Exchange Server system.</I><!-- /CAPTION -->
</p>

</BODY>
</HTML>





