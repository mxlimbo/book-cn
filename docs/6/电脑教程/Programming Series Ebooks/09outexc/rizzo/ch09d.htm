<HTML>
<HEAD>
<TITLE>VBA Support in Outlook 2000</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch10a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="334"><H1>VBA Support in Outlook 2000</H1></A>

<P>Outlook 2000 supports VBA. Now some of you reading this book might 
be thinking that your Outlook forms already support VBA, but this is not the 
case. In fact, you still need to write VBScript behind your Outlook forms. The 
VBA support in Outlook provides a way to customize the Outlook environment 
using the Outlook object model and all the new events just discussed without 
using a separate development tool such as Visual Basic.</p>

<A NAME="335"><H2>VBA Architecture</H2></A>

<P>When writing your VBA applications in Outlook, all your code is contained 
in a VBA project. Each project is associated with a particular user. This means 
that different users on the same machine can customize Outlook differently 
using VBA. These projects can contain code modules or user forms. (User forms 
are different from Outlook forms.) To share information among these VBA 
projects, you must export your file and have the receiving user import your file into 
her VBA project.</p>

<A NAME="336"><H2>Creating a VBA Application</H2></A>

<P>The first step in creating your VBA application is to launch the Visual 
Basic Editor in Outlook. You can find the Visual Basic Editor on the Tools 
menu, via the Macro option. The Visual Basic Editor is shown in Figure 
9-10. Once you are in the editor, you can add class modules, code 
modules, and user forms, depending on the needs of your application. You can 
even write code that responds to Outlook events by declaring your variables 
using the WithEvents keyword.</p>

<p>The Outlook object model is automatically available to your VBA 
application. After you finish writing your macro in the editor, you can explicitly 
run it or create a button on your Outlook toolbar that runs the macro when 
clicked. Figure 9-11 shows a sample application that converts 
incoming mail to a specific message class using a VBA macro and the 
Outlook object model.</p>

<p>
<A HREF="javascript:fullSize('f09oh10x.htm')"> <img src="images/f09oh10.JPG" width=404 height=317 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 9-10</B> <I>The Visual Basic Editor in Outlook 2000. From here, you have the full power of VBA for your application.</I><!-- /CAPTION -->
</p>

<p>
<A HREF="javascript:fullSize('f09oh11x.htm')"> <img src="images/f09oh11.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 9-11</B> <I>The sample mail conversion code in the Visual Basic Editor.</I><!-- /CAPTION -->
</p>

<A NAME="337"><H2>Choosing What to Write: COM Add-In or VBA Program?</H2></A>

<P>By now you must be wondering whether you should write VBA programs or COM add-ins to customize your Outlook environment. While both technologies have their merits, I believe that if more than one user is going to run your program in an Outlook client, you should write a COM add-in. COM add-ins are easily distributed, and you can control a user's ability to run them.</p>

<p>If you want to customize the Outlook client, writing a quick VBA program is easier than writing a full-blown COM add-in. To deploy your application in VBA, however, users must import the VBA file into their Outlook client, which is not the best deployment method. I recommend that you use COM add-ins many users will be installing your application.</p>
</BODY>
</HTML>





