<HTML>
<HEAD>
<TITLE>Other Common Tasks in Outlook Development</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06f.htm", "ch07a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="209"><H1>Other Common Tasks in Outlook Development</H1></A>

<P>After you start to create applications with Outlook, you might think of 
development tasks you want to accomplish that are beyond the standard 
Outlook object library. This section highlights three common development tasks 
in Outlook: automating Office documents, automating Outlook from other 
applications, and using CDO in Outlook applications.</p>


<A NAME="210"><H2>Automating Outlook Office Documents</H2></A>

<P>In Outlook, you can use Office documents as the basis for your 
collaborative applications. For example, you can create an expense report application that 
uses the calculation features of Excel while giving users the ability to e-mail 
and categorize expense reports using the features of Outlook.</p>

<P>When using Office documents as forms, you can customize your 
application in two ways: through VBA in the Office document, or through 
VBScript in Outlook. Let's examine both of the ways you can automate an Office 
document application.</p>


<A NAME="211"><H3>Using VBA with an Outlook Office Document</H3></A>

<P>The following example shows you how to add VBA code to an Outlook 
Office document based on Excel 97.</p>

<OL>
<P><LI>In Outlook, on the File menu, point to New and then select 
Office Document. In the New Office Document dialog box, select 
Microsoft Excel Worksheet and click OK.</li></p>

<P><LI>In the displayed Microsoft Outlook dialog box, select either the 
post or the send option and click OK.</li></p>

<P><LI>From the Tools menu on the Excel form, point to Forms and 
then select Design This Form.</li></p>

<P><LI>From the Tools menu, point to Macro and then select Visual 
Basic Editor.</li></p>

<P><LI>Expand the project explorer, which 
is on the left, until you find the ThisWorkbook object. Double-click on the object to display 
the code window.</li></p>

<P><LI>From the Object drop-down list, select Workbook. Excel should 
automatically place a <I>Workbook_Open</I> subroutine in the code window.</li></p>

<P><LI>In the procedure, use the 
<I>MsgBox</I> function to display some text. For example, you could add this:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Workbook_Open()
Msgbox &quot;This is from Excel&quot;
End Sub
</PRE></TD></TR></TABLE></P>

<P><LI>Close the Visual Basic Editor.</li></p>

<P><LI>On the Excel form, select Run This Form from the Form menu.</li></p>

<P><LI>In the displayed message box, click Yes to indicate that you trust 
the macros in the workbook. After you click Yes, the message box 
that you added earlier will be displayed.</li></p>

</OL>


<A NAME="212"><H3>Using VBScript with an Outlook Office Document</H3></A>

<P>There might be times when you would rather automate the Office 
application embedded in the Outlook Office document than create VBA code in the 
Office document. The most common example of this automation strategy is to 
write VBScript code that retrieves information from Outlook sources and places it 
in the Office document. You would use the 
<I>GetObject</I> method to get the currently running instance of the Office application. The next set of steps show you 
how to create an Outlook Office document based on Word 97 and automatically 
take the name of a contact and place it into the Word document.</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>For this functionality to work properly, you must have 
the latest version of VBScript installed on your machine. The version 
that ships with Outlook 98 is VBScript version 3.1. This version has a 
bug that causes the <I>GetObject</I> function to start a new instance of the 
Office application rather than use the existing instance in the 
Outlook Office document form. To download the latest version of 
VBScript, refer to <I><A HREF="http://msdn.microsoft.com/scripting" TARGET="_window2">http://msdn.microsoft.com/scripting</A>.</I>
</BLOCKQUOTE></DIV></P>

<OL>

<P><LI>In Outlook, from the File menu, point to New and then select 
Office Document. Select Microsoft Word Document, and click OK.</li></p>

<P><LI>In the displayed Microsoft Outlook dialog box, select either the 
post or the send option and click OK.</li></p>

<P><LI>From the Tools menu on the Word form, point to Forms and 
then select Design This Form.</li></p>

<P><LI>Select View Code from the Form menu.</li></p>

<P><LI> Type the following lines of code into the Script Editor:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub Item_Open()
    set oWord = GetObject(,&quot;Word.Application&quot;)
    set oNS = Application.GetNameSpace(&quot;MAPI&quot;)
    set oContact = oNS.GetDefaultFolder(10).Items.GetFirst
    oWord.Selection.TypeText &quot;Dear &quot; &amp; oContact.Subject
End Sub
</PRE></TD></TR></TABLE></P>

<P><LI>On the Word form, from the Form menu, select Run This 
Form. A Word document will be displayed with the contact name 
already entered.</li></p>

</OL>


<A NAME="213"><H2>Automating Outlook from Other Applications</H2></A>

<P>Since Outlook supports Automation, you can access the Outlook objects 
from other applications. To access the Outlook objects, you typically set a 
reference to the Outlook object library. For example, to add a reference to the 
Outlook object library in Visual Basic, select References from the Project menu. In 
the References dialog box, check the Microsoft Outlook 98 Object Model 
option and click OK. The next code sample shows you how to use Visual Basic to 
automate Outlook to return the first Calendar appointment and display it. 
Notice that the Outlook constant olFolderCalendar can be used, and it is not 
necessary to replace it with the actual value as is required in VBScript.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Command1_Click()
    Set oOutlook = CreateObject(&quot;Outlook.Application&quot;)
    Set oNS = oOutlook.GetNameSpace(&quot;MAPI&quot;)
    Set oCalendar = oNS.GetDefaultFolder(olFolderCalendar)
    Set oItems = oCalendar.Items
    Set oFirst = oItems.GetFirst()
    oFirst.Display
End Sub
</PRE></TD></TR></TABLE></P>


<A NAME="214"><H2>Using CDO in Outlook</H2></A>

<P>As you have seen, Outlook provides an extensive object library with which 
you can develop custom applications. However, at times you'll need to extend 
this environment by using other object libraries. The object library most 
commonly used to extend Outlook applications is CDO. CDO provides some 
functionality for dealing with data stored in Exchange Server beyond that provided by 
the Outlook object library.</p>

<p>You'll need this additional functionality in the Account Tracking 
application, which is discussed in <A HREF="ch07a.htm">Chapter 7</A>. One requirement for the application 
is that it keep track of the internal team assigned to work with a particular 
account. Keeping track of the team includes capturing the team's directory and 
e-mail information so that other internal users who have questions about the 
account can send team members e-mail. The easiest way for users to pick account 
team members is to display the address book. Outlook does not support 
displaying the address book and returning the individual that the user selected, but 
CDO does. To take advantage of the CDO functionality, the Account Tracking 
application is extended to call the specific CDO functions, as shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub FindAddress(FieldName, Caption, ButtonText)
    On Error Resume Next
    Set oCDOSession = application.CreateObject(&quot;MAPI.Session&quot;)
    oCDOSession.Logon &quot;&quot;, &quot;&quot;, False, False, 0
    txtCaption = Caption
    if not err then 
        Set orecip = oCDOSession.addressbook (Nothing, txtCaption, _
            True, True, 1, ButtonText, &quot;&quot;, &quot;&quot;, 0)
    end if
    if not err then
        item.userproperties.find(FieldName).value = orecip(1).Name
    end if
      oCDOSession.logoff
      oCDOSession = Nothing
End Sub
</PRE></TD></TR></TABLE></P>

<P>As you can see from the preceding code, to take advantage of CDO, 
you use the <I>CreateObject</I> method of the Application object. You then pass to 
this method the ProgID of CDO, which is MAPI.Session. Next CDO requires 
that you log on to a session. Because Outlook already has an active session, 
the parameters passed to the CDO <I>Logon</I> method force CDO to use the already 
established Outlook session. From there, the application uses the CDO 
<I>AddressBook</I> method to bring up the address book with a specific caption and 
buttons, which enables the user of the application to select a person from the 
address book. The application then uses the Outlook object library to place the 
selection of the user in a custom Outlook property. The final task the 
application performs is to call the <I>Logoff</I> method of CDO and set the object reference 
to CDO to Nothing. These two steps are important because you do not want 
stray objects left around after your application ends.</p>

<p>As you have seen, you can leverage CDO in your Outlook 
applications. However, the integration does not stop there&#8212;you can also leverage the 
Outlook library in your CDO applications using a similar technique. For more 
information on the features of CDO and how you can use them in your Outlook 
application, see <A HREF="ch11a.htm">Chapter 11</A>.</p>


</BODY>

</HTML>





