<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>The FileSearch Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08b.htm", "ch08d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="274"><H1>The <I>FileSearch</I> Object</H1></A>
<P>You use the <I>FileSearch</I> object model (shown in Figure 8-1) to integrate 
file searches into your applications. You can search the hard drives of a 
computer and any drives on LAN-linked computers. This object exposes the 
functionality of the Open and the Find dialog boxes. As Figure 8-1 shows, the 
<I>FoundFiles </I>object and <I>PropertyTests </I>collection are hierarchically dependent on <I>FileSearch</I>.</P>

<P><img src="Images/F08qh01.JPG" width=395 height=121 border=0 alt="">
</P><P><!-- CAPTION --><B>Figure 8-1.</B> <I>The </I>FileSearch<I> object is one of the shared Office objects.</I><!-- /CAPTION -->
</P>

<P>There are two basic ways to specify a file search, and each 
approach corresponds to options in the Open dialog box:</P>
 
<UL>
<P><LI>You can designate a single criterion (a filename or pattern, a file 
type, or a path).</LI></P>
<P><LI>You can designate multiple search criteria programmatically 
using the <I>PropertyTests </I>collection.</LI></P>
</UL>

<P>With the second approach, you specify arguments that serve as input 
to the Open dialog box. You can use this dialog box to specify multiple 
search criteria and rules for concatenating them, such as And and Or operators. 
Use <I>FoundFiles</I> to enumerate the return set from either approach. 
</P>
<P>The <I>FileSearch</I> object has two methods: 
<I>NewSearch</I> and <I>Execute</I>. The <I>NewSearch 
</I>method resets all <I>FileSearch </I>properties to their default values. 
You can then edit the properties that require special values for a particular file 
search. If you do not invoke <I>NewSearch </I>at the beginning of a search specification, 
your new search inherits its property settings from the previous search. 
</P>
<P>You invoke the <I>Execute</I> method to launch a file search after you 
specify it. This method can take several arguments that control the arrangement 
of filenames in the <I>FoundFiles </I>object and that control whether to update the 
file index before conducting a new search. The return value from this method 
is the number of filenames that match the search specification.</P>

<A NAME="275"><H2>Conducting a Basic File Search</H2></A>

<P>Many <I>FileSearch</I> properties permit flexible search specifications. The 
simple code sample below specifies a search and retrieves its return set. 
It creates an instance of the <I>FileSearch</I> object by using the 
<I>FileSearch</I> property of the <I>Application 
</I>object. Then it restores all <I>FileSearch</I> property settings to 
their default values by invoking the 
<I>NewSearch</I> method. Next, it assigns the 
<I>LookIn</I> and <I>FileName</I> properties, which specify where to look and what to look 
for. The test machine for this search includes a series of .mdb files with names 
such as Chapter1 and Chapter2. The <I>SearchSubFolders 
</I>property accepts a Boolean value that indicates whether to restrict the search to the current folder or 
extend it to subfolders of the <I>LookIn </I>property setting.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub FileSearch1()
'Search in My Documents folder and its subfolders
'for Chapter*.mdb.
With Application.FileSearch
'Start a new search.
    .NewSearch
'Set search criteria.
    .LookIn = &quot;C:\My Documents&quot;
    .FileName = &quot;Chapter*.mdb&quot;
    .SearchSubFolders = True
End With

With Application.FileSearch
'Execute the Search.
    If .Execute() &gt; 0 Then
        MsgBox &quot;There were &quot; &amp; .FoundFiles.Count &amp; _
            &quot; file(s) found.&quot;
'Display names of all found files.
        For i = 1 To .FoundFiles.Count
            MsgBox .FoundFiles(i)
        Next i
   Else
'If no files found, say so.
        MsgBox &quot;There were no files found.&quot;
   End If
End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>After creating the specification for the search, the procedure invokes 
the <I>Execute </I>method for the <I>FileSearch 
</I>object. This method has a return value that indicates the number of files that meet the search criteria. If the value is 
<I>0</I>, the criteria yield no matching filenames and the procedure issues a message 
indicating that no files were found. If the criteria yield one or more matching 
files, the procedure displays the <I>Count </I>property of the 
<I>FoundFiles </I>object before presenting each name in 
<I>FoundFiles</I>.</P>

<A NAME="276"><H2>Sorting the Return Set</H2></A>

<P>The following sample sorts the return set from a search by file size. The 
first two parameters for the <I>Execute </I>method designate the sort criterion and 
order, respectively. The constant names for the first parameter indicate the 
variable on which to sort the returned filenames. These constants are: 
<I>msoSortByFileName</I>, <I>msoSortByFileType</I>, 
<I>msoSortByLastModified</I>, and 
<I>msoSortBySize</I>. The <I>Execute </I>method's second parameter specifies either ascending or descending order. 
The sample designates a search sorted by file size in descending order. This 
differs from the previous sample, which returned results in the default ascending 
order based on filename.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub FileSearch2()
Dim sngMB As Single

'Search in My Documents folder and its subfolders
'for Chapter*.mdb.
With Application.FileSearch
'Start a new search.
    .NewSearch
'Set search criteria.
    .LookIn = &quot;C:\My Documents&quot;
    .FileName = &quot;Chapter*.mdb&quot;
    .SearchSubFolders = True
End With

With Application.FileSearch
'Return found files in descending order by file size.
    If .Execute(msoSortBySize, msoSortOrderDescending) &gt; 0 Then
        MsgBox &quot;There were &quot; &amp; .FoundFiles.Count &amp; _
            &quot; file(s) found.&quot;
        For i = 1 To .FoundFiles.Count
'Compute file size in MB and display with filename.
            sngMB = FileLen(.FoundFiles(i)) / (1024 ^ 2)
            MsgBox .FoundFiles(i) &amp; vbCrLf &amp; vbTab &amp; _
                &quot;Filesize (MB): &quot; &amp; Round(CDec(sngMB), 3)
        Next i
    Else
'If no files found, say so.
        MsgBox &quot;There were no files found.&quot;
    End If
End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>The message box that displays the return set shows the file sizes 
and filenames. You pass the <I>FoundFiles </I>object to the 
<I>FileLen </I>function to determine the size of a file. The file sizes are rounded to the nearest 1/1000 of a MB.
</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><b>NOTE</b><HR>
The Visual Basic for Applications (VBA) 
<I>Round </I>function is new in VBA 6. To derive consistent results with this function, you should 
first pass its argument to the <I>CDec </I>function. The sample above uses this 
syntax. (See <a href="ch01a.htm">Chapter 1</a> for information on the <I>CDec 
</I>function.)
</BLOCKQUOTE></DIV></P>

<A NAME="277"><H2>Searching Based on File Contents </H2></A>

<P>Even with a simple search, such as the two previous samples, you can 
selectively search for specific text in the document or its 
<I>DocumentProperty</I> object. The sample below does this. You use the 
<I>FileSearch </I>object's <I>TextOrProperty </I>property to target a text string in the file's body or its 
<I>Properties </I>collection. Notice that you can specify folders on remote computers using the Uniform Naming 
 Convention (UNC). (<I>\\cab233\c\cab </I>points to the cab folder in the 
share named c of a computer named cab233.)</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub FileSearch3()
Dim sngStart As Double, sngEnd As Double
Dim i As Integer
'Search in cab folder on linked computer
'for files containing CAB.
With Application.FileSearch
'Start a new search.
    .NewSearch
'Set search criteria.
    .LookIn = &quot;\\cab233\d\cab\&quot;
    .SearchSubFolders = False
'When searching for text consider
'restricting the files you search.
'*.* takes 300 seconds, but
'msoFileTypeWordDocuments takes 22 seconds.
'    .FileName = &quot;*.*&quot;
    .FileType = msoFileTypeWordDocuments
    .TextOrProperty = &quot;CAB&quot;
End With

With Application.FileSearch
'Execute the search.
    sngStart = Now
    If .Execute() &gt; 0 Then
        sngEnd = Now
        Debug.Print DateDiff(&quot;s&quot;, sngStart, sngEnd)
        MsgBox &quot;There were &quot; &amp; .FoundFiles.Count &amp; _
            &quot; file(s) found.&quot;
'Display names of all found files.
        For i = 1 To .FoundFiles.Count
            MsgBox .FoundFiles(i)
        Next i
    Else
'If no files found, say so.
        MsgBox &quot;There were no files found.&quot;
    End If
End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>Some file searches can be lengthy. By specifying a restrictive 
<I>FileSearch </I>property, you can dramatically improve the performance of the 
<I>Execute </I>method. For example, the sample above finds all Word documents in a folder that 
contain a specific string. By using the <I>msoFileTypeWordDocuments 
</I>constant for the <I>FileType </I>property, the sample restricts the search to just Word document 
files. You might be tempted to specify <I>*.* </I>for the 
<I>FileName </I>property and then filter the returned results, but this would seriously impair performance. For the 
sample files in the cab folder on the cab233 computer, the difference is 22 seconds 
for the <I>msoFileType </I>constant vs. 300 seconds for the 
<I>*.* FileName </I>specification. (Notice that it takes just three lines to time the operation&#8212;one line before 
the <I>Execute </I>and two more immediately after it.)</P>

<A NAME="278"><H2>Specifying Multiple Search Criteria</H2></A>

<P>The advanced search format lets you specify multiple search criteria for 
your return set in the <I>FoundFiles </I>object. You use the 
<I>Add </I>method two or more times to specify multiple criteria for the 
<I>PropertyTests </I>collection. Your individual 
criterion specifications must include <I>Name </I>and 
<I>Condition </I>settings. 
</P>
<P>The <I>Add</I> method can specify a <I>Connector 
</I>setting as well as one or two <I>Value </I>settings. The 
<I>Add</I> method's <I>Condition </I>setting determines whether a 
criterion requires <I>Value </I>settings. You view the members of the 
<I>MsoCondition </I>class to see all the available options. (Figure 8-2 shows an 
excerpt.) Your <I>Connector </I>settings can take one of two values to specify how to 
combine a criterion with other criteria. This setting enables And or Or operators for 
merging a criterion with other search criteria. You use Or to treat the criterion 
separately, and you use And to combine the designated criterion with others. 
And is the default setting. The <I>Condition</I>, 
<I>Value</I>, and <I>Connector </I>settings together 
offer the same functionality as the Find dialog box.
</P>
<P>You can enumerate <I>PropertyTests </I>members using a 
<I>For&#8230;Each </I>loop. Each member constitutes a unique search criterion. The 
<I>Name </I>property identifies the criterion as you enumerate them.</P>

<P><A HREF="javascript:fullSize('F08qh02x.htm')"> <img src="Images/F08qh02.JPG" width=404 height=414 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-2.</B> <I>You use the members of the </I>msoCondition <I>enumeration group to specify conditions for advanced criteria in the </I>PropertyTests <I>collection of the </I>FileSearch <I>object.</I><!-- /CAPTION -->
</P>

<P>The last <I>FileSearch </I>sample, shown below, has three segments. The 
first segment specifies the criteria after setting a reference to a 
<I>FileSearch </I>object. The sample targets all database files between two dates. It shows the correct 
syntax for invoking the <I>Add </I>method for the 
<I>PropertyTests </I>collection. The first criterion designates a database type. The second criterion denotes files 
last modified between January 1, 1996, and June 30, 1999. The 
<I>msoConnectorOr </I>setting indicates that files must meet both criteria separately to be in the 
return set. You need not specify a <I>Connector 
</I>property for the second criterion because it adopts the default 
<I>msoConnectorAnd </I>value. Before displaying the return 
set, the procedure enumerates the <I>PropertyTests 
</I>members in its second segment. The final segment displays the return set.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub Search4()
Dim fs As FileSearch, mystring As String
Dim i As Integer

    Set fs = Application.FileSearch
    
'Set lookin and subfolder properties.
    With fs
        .NewSearch
        .LookIn = &quot;c:\My Documents&quot;
        .SearchSubFolders = False
    End With
   
'Set a pair of property conditions.
    With fs.PropertyTests
        .Add name:=&quot;Files of Type&quot;, _
            Condition:=msoConditionFileTypeDatabases, _
            Connector:=msoConnectorOr
        .Add name:=&quot;Last Modified&quot;, _
            Condition:=msoConditionAnytimeBetween, _
            Value:=&quot;1/1/1996&quot;, SecondValue:=&quot;6/30/1999&quot;
    End With
   
'Display property tests.
    For i = 1 To fs.PropertyTests.Count
        With Application.FileSearch.PropertyTests(i)
        mystring = &quot;This is the search criteria: &quot; _
            &amp; &quot; The name is: &quot; &amp; .name &amp; &quot;. The condition is: &quot; _
            &amp; .Condition
        If .Value &lt;&gt; &quot;&quot; Then
            mystring = mystring &amp; &quot;. The value is: &quot; &amp; .Value
            If .SecondValue &lt;&gt; &quot;&quot; Then
                mystring = mystring _
                    &amp; &quot;. The second value is: &quot; _
                    &amp; .SecondValue &amp; &quot;, and the connector is&quot; _
                    &amp; .Connector
            End If
        End If
        MsgBox mystring

        End With
    Next i

'Display return set from property tests.
    With fs
'Execute the search.
        If .Execute() &gt; 0 Then
            MsgBox &quot;There were &quot; &amp; .FoundFiles.Count &amp; _
                &quot; file(s) found.&quot;
'Display names of all found files.
            For i = 1 To .FoundFiles.Count
                MsgBox .FoundFiles(i)
            Next i
        Else
'If no files found, say so.
            MsgBox &quot;There were no files found.&quot;
        End If
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

</BODY>
</HTML>




