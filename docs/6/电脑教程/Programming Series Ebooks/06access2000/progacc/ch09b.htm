<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Linking Access to Other Office Applications</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09a.htm", "ch09c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="306"><H1>Linking Access to Other Office Applications</H1></A>

<P>This section introduces three techniques (using installable ISAM drivers, the 
<I>OpenDataSource </I>method of the 
<I>MailMerge </I>object, and automation) for making Access work with other Office applications. Subsequent sections will apply these techniques in practical contexts.</P>


<A NAME="307"><H2>Installable ISAM Drivers</H2></A>

<P>You use the familiar Microsoft ActiveX Data Objects (ADO) 
<I>Connection </I>object to link to other data sources through installable ISAM drivers. These data sources can include non-Jet, non-open database connectivity (ODBC) data sources 
such as Excel, dBASE, and Paradox. In this section, we'll use the Excel ISAM driver for linking to Excel workbooks from Access. Similar techniques apply to 
ISAM drivers for dBASE, Paradox, Lotus 1-2-3, text, and HTML files, but each driver has its unique features and restrictions. You can learn more by examining the 
<I>Connect </I>property summary in the online help.</P>


<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>Installable ISAM support continues to change with user 
requirements and technology developments. ISAM support for Microsoft 
FoxPro databases was discontinued with Access 2000 in favor of the 
Microsoft ODBC FoxPro driver. The traditional ISAM drivers still work for dBASE 
and Paradox data in version 5 and earlier. If you need read/write access to 
other versions, you must independently acquire the Borland Database 
Engine through Inprise.
</BLOCKQUOTE>
</DIV></P>


<P>
When you use an ISAM driver, your connection string has three 
arguments, each of which must terminate with a semicolon. First, you designate a 
provider. When you use an installable ISAM driver, start your connection string with 
a reference to the Jet 4 provider. Follow this with a specification that points 
at the file for the data source. In the case of Excel, this includes the drive, 
path, and filename. In certain other cases, you can designate just the drive and 
the path. You designate this final parameter by setting the extended 
properties parameter equal to the name of the ISAM driver. There are specific drivers 
for different versions of Excel and for the other types of data sources you can 
link to. You reference an Excel 2000 workbook using the string &quot;
<I>Excel 8.0&quot; </I>followed by a semicolon.</P>


<P>The following simple sample uses an ISAM driver to link to an Excel 
2000 workbook in an Access 2000 application. The 
<I>Dim </I>statement declares and creates a new 
<I>Connection </I>object. The next statement opens the connection 
by pointing it at an Excel workbook through the Excel 8 ISAM driver. After 
creating the connection to the data source, your application must specify a range 
of cells in the workbook. This sample assigns the 
<I>customers </I>range within the file to a recordset named 
<I>rst1</I>. Access uses this link to work with the data in 
the workbook. The sample concludes by printing the first two columns of the 
first row from the range in the Excel workbook to the Immediate window in Access.</P>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub connect2XLPrintFromFirst()
Dim cnn1 As New ADODB.Connection, rst1 As ADODB.Recordset

'Make connection to Excel source.
    cnn1.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
        &quot;Data Source=C:\Programming Access\Chap09\customers.xls;&quot; &amp; _
        &quot;Extended Properties=Excel 8.0;&quot;

'Open read-only recordset based on Excel source.
    Set rst1 = New ADODB.Recordset
    rst1.CursorType = adOpenForwardOnly
    rst1.LockType = adLockReadOnly
    rst1.Open &quot;customers&quot;, cnn1, , , adCmdTable

'Print selected fields from first record.
    Debug.Print rst1.Fields(0).Value, rst1.Fields(1).Value
    
'Close connection to source.
    cnn1.Close

End Sub
</pre>
</td>
</tr>
</table></P>


<P>When you work with an ISAM driver, the Excel data source (or even 
Excel itself) need not be open. Your application also doesn't require a reference to the Excel object model. Despite the Excel ISAM driver's minimal requirements, you can use it to both read and update Excel data sources.</P>


<A NAME="467"><H2>The <I>OpenDataSource </I>Method</H2></A>

<P>You can use the 
<I>OpenDataSource </I>method of the 
<I>MailMerge </I>object to link to an Access data source from within a Word application. You use Access&#8212;or more specifically, Jet&#8212;as a data store for mail merge applications that create mailing labels, form letters, product catalogs, and so on. While Access can do some of this through its 
<I>Report </I>object, Word is a more natural environment for composing content. It also has excellent text formatting tools and WYSIWYG features that the Access 
<I>Report </I>object does not have. You can tap these resources with Word-based VBA procedures as well as through automation from within Access.</p>

<p>When you reference an Access data source using the 
<I>OpenDataSource </I>method, you must first reference a Word document file and the Word 
<I>MailMerge </I>object. You specify two parameters for the method with Access: the 
<I>Name </I>parameter, which indicates the drive, path, and filename for the Access data source; and the <I>Connection </I>parameter, which designates either a Table or Query data source type and the name of the Access database object. Your Word document must have either bookmarks or mail merge fields that point to the fields in the Jet database. You invoke the 
<I>Execute </I>method for the 
<I>MailMerge </I>object to launch a merge that pulls data from a designated data source, such as 
an Access table, into a Word document.</P>


<P>You can filter values that appear in a Word mail merge document in several ways. For example, you can use the 
<I>OpenDataSource </I>method's 
<I>SQLStatement </I>parameter to specify which records to extract from a data source. When 
you do this with a Jet data source, you reference Access through an ODBC driver and specify 
<I>constr </I>as the 
<I>Connection </I>setting. You use SQL statement syntax to filter records from an Access table or query.</P>

<P>A second approach to filtering is with a special query within Access. The 
<I>OpenDataSource</I> method's 
<I>Connect </I>parameter merely references that query. You use the 
<I>FirstRecord </I>and 
<I>LastRecord </I>properties of the 
<I>DataSource </I>object to specify the first and last records to appear in a merged Word document. The 
<I>DataSource </I>object points to a target specified by the 
<I>OpenDataSource</I> method.</P>


<A NAME="308"><H2>Automation</H2></A>

<P>Using automation, you can enable one application to control another. The Microsoft Component Object Model (COM) defines the protocol for this 
capability. The controlling application interacts with the controlled application by manipulating its exposed properties and methods and responding to 
its events. To do this, it must have a reference to the other application's object library and must create an instance of the application. (See Chapters 7 and 8 for information on how to create and manage references programmatically.) 
The controlling application invokes methods and assigns property values 
through that instance of the controlled application.</P>


<P>Figure 9-1 shows a References dialog box from an Access application with references to Excel, Outlook, and Word as well as the Office library with the shared object models. In a sense, automation makes all the Office component object models shared. Access can expose its object model as an automation server, and it can tap the object models of other applications by acting as 
an automation client.</P>


<P><A HREF="javascript:fullSize('F09qh01x.htm')"> <img src="Images/F09qh01.JPG" width=404 height=321 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 9-1.</B> <I> A References dialog box in Access showing references to Excel, Outlook, and Word.</I><!-- /CAPTION -->
</P>

<A NAME="468"><h3><I>CreateObject </I> vs. <I>GetObject</I></h3></A>

<P>You use the <I>CreateObject </I>and 
<I>GetObject </I>functions to generate instances of other applications. You use 
<I>GetObject </I>to determine whether an instance of an 
application is already open. If it is, you can create a reference to it. If a user is not actively working with the instance, this might be acceptable. If the automation server application is not already open or if you prefer not to use an open instance, you can use the 
<I>CreateObject </I>function to create a new instance of an application. You can also use 
<I>GetObject </I>to open an instance of an application with 
a particular file open in it.</P>

<P>
The following two procedures create an instance of Excel from an Access application. The second procedure, <I>isAppThere</I>, uses late binding to test for an instance of any Office application. An 
<I>objApp </I>variable with a generic object specification can represent any Office application (or even another COM object). The first procedure, 
<I>xlThere</I>, uses early binding. The 
<I>xlApp </I>variable can represent only an Excel 
<I>Application </I>object. You cannot replace 
<I>Excel.Application </I>in either the 
<I>CreateObject </I>or 
<I>GetObject </I>functions with another Office 
<I>Application </I>object, such as 
<I>Word.Application</I>. However, you can create another entire procedure&#8212;for example, one named <I>wordThere</I>&#8212;that includes a variable declared as a 
<I>Word.Application </I>object type. This new procedure can reference the generic 
<I>isAppThere </I>procedure in the same way that 
<I>xlThere </I>does.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub xlThere()
Dim xlApp As Excel.Application

    If isAppThere(&quot;Excel.Application&quot;) = False Then
'If no, create a new instance.
        Set xlApp = CreateObject(&quot;Excel.Application&quot;)
        xlApp.Visible = True
    Else
'Otherwise, reference the existing instance.
        Set xlApp = GetObject(, &quot;Excel.Application&quot;)
    End If

'If user wants instance closed, close app
'and set reference to Nothing.
    If MsgBox(&quot;Close XL ?&quot;, vbYesNo, _
        &quot;Programming Microsoft Access 2000&quot;) = vbYes Then
        xlApp.Quit
        Set xlApp = Nothing
    End If
    
End Sub


Function isAppThere(appName) As Boolean
On Error Resume Next
Dim objApp As Object

isAppThere = True

Set objApp = GetObject(, appName)
    If Err.Number &lt;&gt; 0 Then isAppThere = False

End Function
</pre>
</td>
</tr>
</table></P>


<P>Automation does not normally make an Office application visible 
when it opens it. If you want an application to show, you must normally set its 
<I>Visible </I>property to 
<I>True</I>. Different applications expose different objects for you 
to automate. Excel exposes objects such as 
<I>Application</I>, 
<I>Workbook</I>, and 
<I>Worksheet</I>. The latter two, of course, are not available with other Office applications.</P>


<A NAME="469"><h3>Closing an automation reference</h3></A>

<P>The 
<I>xlThere </I>procedure conditionally disposes of a reference to another Office application. First, you close or quit the application. (Excel supports a 
<I>Quit </I>method.) Then you set the reference to 
<I>Nothing</I>. Both steps are required to retrieve the resources consumed by the automation reference.</p>


</BODY>
</HTML>




