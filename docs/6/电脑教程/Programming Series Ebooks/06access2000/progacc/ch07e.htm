<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Case Study: Coding a Login Interface</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="241"><H1>Case Study: Coding a Login Interface</H1></A>

<P>This case study shows one approach to coding a login interface with Access. 
It uses both standalone class modules and form class modules. The login 
process and the class module contents use coding techniques that are applicable to 
any task requiring the use of data with unbound forms.</P>

<P>
To highlight the role of class modules and to keep the process 
transparent, the sample does not use built-in Access security. Instead, it relies on a 
pair of tables and three forms. The 
<I>Passwords</I> table has just two fields: 
<I>EmployeeID </I>and <I>Password</I>. The 
<I>Employees</I> table, which is imported directly from 
the Northwind database, contains <I>EmployeeID 
</I>as a primary key along with other business, personal, and contact information about employees. The three 
forms refer to the contents of these tables to manage the login process.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>The case study excludes error trapping, which any 
operational system should have. Error trapping is especially important if the 
system is dependent on user input. After you learn the basics of class 
modules from this chapter, you might want to review the information in Chapter 
1 about error-trapping logic.
</BLOCKQUOTE></DIV></P>


<A NAME="242"><H2>The First Login Form</H2></A>

<P>Figure 7-1 shows the first form, along with two message boxes that it can 
generate. A user enters values into both text boxes on the form and clicks Let Me 
In. If the password matches the saved one for the 
<I>EmployeeID </I>field, the application presents a welcome message box. If it does not match the stored password 
for an employee ID, the user can try again or change the password.</P>


<P><A HREF="javascript:fullSize('F07QH01x.htm')"> <img src="Images/F07QH01.JPG" width=404 height=394 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 7-1.</B> <I>The first login form with two possible reply messages.</I><!-- /CAPTION -->
</P>


<A NAME="243"><H3>The password mask</H3></A>

<P>In addition to the code behind the form and the class module invoked by 
the form, you should closely examine the Password text box. It has a password 
mask that displays an asterisk for each character entered in the box. You assign 
this mask to a text box from the Data page of its Properties dialog box. Click 
the Build button next to the <I>Input Mask </I>property to open a dialog box that lets 
you select it.</p>

<A NAME="244"><H3>The code behind the form</H3></A>

<P>The module behind the form, shown below, contains three event 
procedures&#8212;one for each button. The Exit button merely closes the form. The Change 
Password button opens a second form and copies the value of a field from 
the current form into it. The procedure that opens the 
<I>frmWhoAmI </I>form also moves the focus to an empty text box. Then it closes the current form.</P>

<P>The Let Me In button invokes a standalone class module 
(<I>MyTestClass3</I>). Notice that the procedure passes the contents of its two text boxes to the 
<I>cpw </I>method procedure in the class module. This module looks up the password 
for the employee ID and determines whether it matches the password on the 
form. The class replies with one of the two possible messages. (See Figure 7-1.) 
The class module simplifies the code in the event procedure. This points to 
another benefit of class modules&#8212;they facilitate team development. Advanced 
developers can write more involved procedures in class modules, and 
beginning developers can perform basic development tasks and simply reference 
class modules to incorporate advanced ones.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Private Sub cmdExit_Click()
    DoCmd.Close
End Sub


Private Sub cmdNewPassword_Click()

    DoCmd.openform &quot;frmWhoAmI&quot;
    Forms(&quot;frmWhoAmI&quot;).txtEmpID = Me.txtEmpID
    Forms(&quot;frmWhoAmI&quot;).txtHireDate.SetFocus
    DoCmd.Close acForm, &quot;frmInputPassword&quot;

End Sub


Private Sub cmdLetMeIn_Click()
Dim PWT As New MyTestClass3

    PWT.cpw Me.txtEmpID, Me.txtPassword
    
End Sub
</pre>
</TD></TR></table></p>

<A NAME="245"><H3>Invoking the class module</H3></A>

<P>The <I>cpw </I>procedure in <I>MyTestClass3</I>, shown below, uses a 
parameter query to look up the password for an employee ID in the 
<I>Passwords</I> table. One of the two arguments passed to the procedure is the employee ID. The 
procedure sets its parameter equal to the value of this argument. After 
executing the <I>Command </I>object with a select query, the procedure assigns the return 
set to a <I>Recordset </I>object. Since the <I>EmployeeID 
</I>field in the <I>Passwords</I> table is a 
primary key, the select query always returns a single record.</P>

<P>The <I>cpw </I>procedure closes by comparing the password returned by 
the query with password typed on the form as the condition of an 
<I>If...Then </I>statement. If there is a match, the procedure welcomes the user into the 
application. In practice, you open another form or some other database object to which 
you are restricting access with password security. If there is no match, the 
procedure asks the user to resubmit the password or change the password.</P>


<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub cpw(empid As Long, pw As String)
Dim cmd1 As Command
Dim strSQL As String
Dim prm1 As ADODB.Parameter
Dim rst1 As ADODB.Recordset

'Assign the command reference and connection.
    Set cmd1 = New ADODB.Command
    cmd1.ActiveConnection = CurrentProject.Connection

'Write out SQL statement with parameters &amp; assign to cmd1.
    strSQL = &quot;Parameters Secret Long;&quot; &amp; _
        &quot;Select EmployeeID, Password from Passwords &quot; &amp; _
        &quot;Where EmployeeID=Secret&quot;
    cmd1.CommandText = strSQL
    cmd1.CommandType = adCmdText
    
    Set prm1 = cmd1.CreateParameter(&quot;Secret&quot;, adInteger, adParamInput)
    prm1.Value = empid
    cmd1.Parameters.Append prm1

'A handy line for catching SQL syntax errors
'    Debug.Print cmd1.CommandText
    
    cmd1.Execute
    
    Set rst1 = New ADODB.Recordset
    rst1.Open cmd1
    If rst1.Fields(&quot;Password&quot;) = pw Then
        MsgBox &quot;Welcome on in.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    Else
        MsgBox &quot;Invalid password.  Try again or &quot; &amp; _
            &quot;change password.&quot;, vbCritical, _
            &quot;Programming Microsoft Access 2000&quot;
    End If
    
End Sub
</pre>
</TD></TR></table></p>

<A NAME="246"><H2>The Second Login Form</H2></A>

<P>Figure 7-2 shows the form that appears when a user opts to change the 
password for the employee ID. This form merely asks users to confirm their 
identity. The system requires this confirmation before it permits users to change a 
password. The form has two text boxes. Under normal circumstances, the first 
text box is always filled by the form that loads it. (See the 
<I>cmdNewPassword_Click </I>procedure above.) All users do is enter their hire date and click Submit. The 
main point here is to use a field whose value is known only by the employee. 
Use one or more other fields if you have better alternatives available.</P>


<P><A HREF="javascript:fullSize('F07QH02x.htm')"> <img src="Images/F07QH02.JPG" width=404 height=182 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 7-2.</B> <I>The second login form, which asks users to confirm their identity.</I><!-- /CAPTION -->
</P>

<A NAME="247"><H3>The code behind the form</H3></A>

<P>The form launches a query when a user clicks the Submit button. A form class module processes the query and matches the return set result to the user input. The event procedure behind the Submit button has a <I>Dim </I>statement that instantiates a copy of the 
<I>MyTestClass3 </I>module with a reference to <I>ProcessMe</I>. A second line invokes the <I>WhoAmI </I>method for the class, as shown below.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Private Sub cmdSubmit_Click()
Dim ProcessMe As New MyTestClass3

    ProcessMe.WhoAmI CLng(txtEmpID), _
        CDate(txtHireDate)

End Sub
</pre>
</TD></TR></table></p>


<A NAME="248"><H3>Invoking the form class module</H3></A>

<P>The lookup procedure for the second form appears below. It uses a 
parameter query to perform the lookup of a hire date for an employee ID. By 
strongly typing the variables (notice the <I>CLng 
</I>and <I>CDate </I>functions in 
<I>cmdSubmit_Click</I>) before going into the class module, you can take advantage of the data 
typing option in a <I>Parameters </I>declaration as well as the data typing in the table. 
Without this data typing, Access must do internal transformations to the variant data 
type. The basic design for the lookup and return messages follows that for the 
password lookup. If the hire date on the form matches the one in the 
<I>Employees</I> table, the procedure opens the third form.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub WhoAmI(empid As Long, hd As Date)
Dim cmd1 As Command
Dim strSQL As String
Dim prm1 As ADODB.Parameter
Dim rst1 As ADODB.Recordset

'Assign the command reference and connection.
    Set cmd1 = New ADODB.Command
    cmd1.ActiveConnection = CurrentProject.Connection

'Write out SQL statement with parameters &amp; assign to cmd1.
    strSQL = &quot;Parameters InEID Long;&quot; &amp; _
        &quot;Select EmployeeID, HireDate From Employees &quot; &amp; _
        &quot;Where EmployeeID=InEID&quot;
    cmd1.CommandText = strSQL
    cmd1.CommandType = adCmdText
    
    Set prm1 = cmd1.CreateParameter(&quot;InEID&quot;, adInteger, adParamInput)
    prm1.Value = empid
    cmd1.Parameters.Append prm1

'A handy line for catching SQL syntax errors
    Debug.Print cmd1.CommandText

'Execute command.
    cmd1.Execute

'Check Input vs. Table HireDate.
    Set rst1 = New ADODB.Recordset
    rst1.Open cmd1
    If rst1(&quot;HireDate&quot;) = hd Then
        DoCmd.openform &quot;frmChangePassword&quot;
        Forms(&quot;frmChangePassword&quot;).txtEmpID = Forms(&quot;frmWhoAmI&quot;).txtEmpID
        DoCmd.Close acForm, &quot;frmWhoAmI&quot;
    Else
        MsgBox &quot;HireDate not valid for EmployeeID.  Try &quot; &amp; _
            &quot;again or Quit.&quot;, vbCritical, _
            &quot;Programming Microsoft Access 2000&quot;
    End If

End Sub
</pre>
</TD></TR></table></p>


<A NAME="249"><H2>The Third Login Form</H2></A>

<P>Figure 7-3 shows the final form, which appears when a user clicks the Submit button on the second form after entering the correct hire date. The form has three text boxes. One is for the employee 
ID. (This box fills in automatically under normal circumstances.) The second text box is for a new password 
and a third text box is for confirming the password. If those text boxes do not match, the system alerts the user. If the user clicks the Submit button without entries in all three boxes, another reminder message appears. Finally, if the form satisfies these two requirements, the class module referenced by the form 
updates the password for an employee ID in the <I>Passwords</I> table.</P>

<P><A HREF="javascript:fullSize('F07QH03x.htm')"> <img src="Images/F07QH03.JPG" width=404 height=472 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 7-3.</B> <I>The third form, which lets users update their password.</I><!-- /CAPTION -->
</P>


<A NAME="250"><H3>The code behind the form</H3></A>

<P>The module behind this form is the most interesting one in the case study. 
The module does data validation instead of passing the data off to a class 
module. The procedure still invokes a class module for the SQL statement that 
updates the password for an employee.</P>

<P>
This split of data validation from database updates shows another way 
to apply class modules&#8212;by performing sensitive tasks using a class module. 
This standardizes the tasks and ensures proper performance. Other application 
elements that do not require standardization are candidates for customization 
by end-user departments.</P>

<P>
<b>Using <I>Property Get </I>and <I>Property Let 
</I>functions</b>&#8212;This particular data validation logic relies on a pair of 
<I>Property Let </I>and <I>Property Get </I>functions. 
The <I>AfterUpdate </I>event for each of the three text boxes invokes the 
<I>Property Let </I>function, which updates the value of the 
<I>AllFilled </I>variable to <I>True</I> or 
<I>False</I>. (It's <I>True </I>if all the boxes are filled with legitimate values; it's 
<I>False</I> otherwise.)</P>

<P>
A <I>Property Get </I>function reflects the status of all three text boxes with 
the form's <I>filledCheck </I>property. The <I>cmdSubmit_Click 
</I>procedure checks this single value to determine whether all three boxes are checked. If the value is 
<I>False</I>, the procedure displays a message reminding the user to complete all boxes. 
Otherwise, the click event procedure tests whether the password and confirm 
password text boxes match. If they do not, another message reminds the user to 
make them match. Finally, when a user clears these two obstacles, the 
procedure invokes the <I>NewPS </I>method of the local instance of the 
<I>MyTestClass3 </I>module.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Private AllFilled As Boolean
Private Sub txtConfirm_AfterUpdate()
    Me.filledCheck = txtConfirm

End Sub


Private Sub txtEmpID_AfterUpdate()
    Me.filledCheck = txtEmpID

End Sub


Private Sub txtPassword_AfterUpdate()
    Me.filledCheck = txtPassword
    
End Sub


Public Property Let filledCheck(vntNewValu)
    If (IsNull(txtEmpID) Or txtEmpID = &quot;&quot;) Or _
        (IsNull(txtPassword) Or txtPassword = &quot;&quot;) Or _
        (IsNull(txtConfirm) Or txtConfirm = &quot;&quot;) Then
        AllFilled = False
    Else
        AllFilled = True
    End If

End Property


Public Property Get filledCheck()
    filledCheck = AllFilled

End Property


Private Sub cmdSubmit_Click()
Dim UpdatePW As New MyTestClass3

    If Me.filledCheck = False Then
        MsgBox &quot;Please complete all entries before &quot; &amp; _
            &quot;submitting your new password.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    ElseIf txtPassword &lt;&gt; txtConfirm Then
        MsgBox &quot;Password and Confirm Password do not &quot; &amp; _
            &quot;match.  Re-enter one or both.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    Else
        UpdatePW.NewPW txtEmpID, txtPassword
    End If
        
End Sub


Private Sub cmdLogin_Click()
    DoCmd.openform &quot;frmInputPassword&quot;
    Forms(&quot;frmInputPassword&quot;).txtEmpID = txtEmpID
    Forms(&quot;frmInputPassword&quot;).txtPassword = txtPassword
    DoCmd.Close acForm, &quot;frmChangePassword&quot;
End Sub


Private Sub cmdExit_Click()
    DoCmd.Close

End Sub
</pre>
</TD></TR></table></p>

<P><b>Transferring values to another form</b></P><p> Two remaining procedures 
complete the functionality of the module behind the third form. A click event procedure behind the Employee Authentication button takes a user back to the first form and fills in the employee ID and password text boxes with their values from the third form. This feature relieves the user from having to reenter this data just after confirming it, but going back to the first form offers a single point of entry into the application. This simplifies maintenance in the long run. The form's Exit button simply closes the form.</P>


<A NAME="251"><H3>Invoking the class module</H3></A>

<P>The class module invoked by the module behind the third form uses a 
string expression to compute the SQL statement that a 
<I>Command </I>object uses to update an employee's password. This is one way to represent a string (such 
as the password value) inside another string (the overall SQL statement). 
Notice the multiple double apostrophes both before and after the new password 
value. These are escape codes for representing a double apostrophe inside 
another pair of double apostrophes. Aside from this VBA requirement for nesting 
one string inside another string, the code is easy to read. A message block 
statement at the procedure's close confirms the password change and advises the user 
how to proceed.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub NewPW(eid As Long, NuPassword As String)
Dim cmd1 As Command
Dim strSQL As String

'Assign the command reference and connection.
    Set cmd1 = New ADODB.Command
    cmd1.ActiveConnection = CurrentProject.Connection
    
'Define the SQL string; notice
'the insertion of passed arguments.
    strSQL = &quot;UPDATE Passwords &quot; &amp; _
        &quot;SET Passwords.Password = &quot;&quot;&quot; &amp; NuPassword &amp; &quot;&quot;&quot; &quot; &amp; _
        &quot;WHERE EmployeeID=&quot; &amp; eid &amp; &quot;;&quot;
    Debug.Print strSQL
    
'Assign the SQL string to the command and run it.
    cmd1.CommandText = strSQL
    cmd1.CommandType = adCmdText
    cmd1.Execute
    
'Confirmation message
    MsgBox &quot;Your new password is accepted.  &quot; &amp; _
        &quot;Return to Employee Authentication or &quot; &amp; _
        &quot;Exit this form.&quot;, vbInformation, _
        &quot;Programming Microsoft Access&quot;

End Sub
</pre>
</TD></TR></table></p>

</BODY>
</HTML>




