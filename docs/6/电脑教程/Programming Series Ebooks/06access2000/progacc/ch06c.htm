<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Case Study: A FrontPage Guestbook</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06b.htm", "ch06d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="207"><H1>Case Study: A FrontPage Guestbook</H1></A>

<P>Using FrontPage, you can easily create a guestbook that collects visitor information (such as name and contact information) in an HTML-formatted web 
page. This approach requires no knowledge of databases or open database connectivity (ODBC) connections. Site visitors see a professional-looking form in 
which they can enter contact information, and FrontPage users have a simple way 
to create and view the guestbook. This approach works well as long as the site does not attract a high volume of visitors.</P>


<P>If visitor volume swells, you can transfer the complete set of contact information to a database file. Even if a site switches to depositing the data 
directly into a database, you still have the problem of recovering the initial HTML-formatted information. This case study illustrates one approach to 
recovering legacy text data and demonstrates how to generate mailing labels and form letters with the converted information.</P>


<A NAME="208"><H2>Importing Data</H2></A>

<P>You can use the Text Import wizard to copy the raw guestbook file into an Access table. Figure 6-3 shows excerpts displaying two records from the 
raw HTML-formatted file (for Karl Doe1 and Boban Doe2). Notice the huge number of HTML tags. The internal FrontPage browser uses these tags to format 
the guestbook display, but the tags make it impossible to directly import the 
data into an Access table for the preparation of mailing labels. All the contact information appears in one long column. Some rows contain contact data, but 
other rows hold descriptive labels or serve general formatting purposes. Relational database processing conventions dictate a separate row for each 
guestbook registrant. This requires spreading the information that appears for one 
registrant in a single column across several columns.</P>


<P><A HREF="javascript:fullSize('F06QH03x.htm')"> <img src="Images/F06QH03.JPG" width=404 height=259 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-3.</B> <I>Excerpts from a FrontPage guestbook file imported into an Access table.</I><!-- /CAPTION -->
</P>


<P>Whether or not you encounter this precise data conversion 
requirement, Access development typically requires the processing of a text stream. 
Large businesses often must convert legacy departmental data to a relational 
database format using a similar process. The rich array of string processing functions 
and Microsoft Visual Basic for Applications (VBA) in Access help you automate 
this kind of task.</P>


<A NAME="209"><H2>Converting the Data Structure</H2></A>

<P>The goal of this string processing effort is to transform the data in a table similar to the <I>Temp1</I> table in Figure 6-3 into a more traditional contact table 
layout, such as that of the table shown in Figure 6-4. The strategy defines two recordsets&#8212;one for the source table and one for the destination table. 
The procedure moves down the rows of the source table to extract the contact information and store the parsed data in variables. After parsing all the 
essential data for a contact, it adds the parsed data as a new row to the destination 
table. Because different contact fields have unique requirements, the parsing 
rules sometimes vary between fields. Rules can also vary because the raw data for a field represents unique problems not present for other fields.</P>


<P>The following excerpt from the procedure transforms the data 
from the format of the data in the table in Figure 6-3 to the format of the data in 
the table in Figure 64 (on the next page). The complete version is on the 
book's companion CD. This abbreviated version shows the conversion code for the 
first three fields represented by the variables 
<I>strFname</I>, <I>strLname</I>, and 
<I>strCname</I>. While the listing is lengthy and the complete version is even longer, 
converting data is a critical first step for Access database projects. If you don't 
successfully address this critical issue, your Access project might not start.</P>


<P><A HREF="javascript:fullSize('F06QH04x.htm')"> <img src="Images/F06QH04.JPG" width=404 height=131 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-4.</B> <I>Converted contact data from a FrontPage guestbook file in HTML format. The conversion removes HTML tags and places each contact record on a separate row.</I><!-- /CAPTION -->
</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub getfp()
Dim cnn1 As New ADODB.Connection
Dim rst1 As ADODB.Recordset
Dim strFname As String, strLname As String
Dim strCname As String, strSt1 As String
Dim strSt2 As String, strCity As String
Dim strSt As String, strPostal As String
Dim strCountry As String, blSkip As Boolean
Dim rst2 As New Recordset

'Open two recordsets and set references to them.
    cnn1 = CurrentProject.Connection
    Set rst1 = New Recordset
    rst1.ActiveConnection = CurrentProject.Connection
    rst1.CursorType = adOpenKeyset
    rst1.LockType = adLockOptimistic
'Raw contact information is in table temp1.
    rst1.Open &quot;temp1&quot;
    rst2.ActiveConnection = CurrentProject.Connection
    rst2.CursorType = adOpenKeyset
    rst2.LockType = adLockOptimistic
'The application stores parsed contact info in the WebBasedList table.
    rst2.Open &quot;WebBasedList&quot;
    
'Start a loop through the recordset of raw contact information.
    Do Until rst1.EOF
        blSkip = False

'Start a new contact record when you find
'a label named &quot;SiteEvaluation_FirstName:&quot;.
        If InStr(1, rst1.Fields(1), _
            &quot;SiteEvaluation_FirstName:&quot;) &lt;&gt; 0 Then
            rst1.MoveNext
            If rst1.Fields(1) &lt;&gt; &quot;  &lt;dd&gt;&amp;nbsp;&lt;/dd&gt;&quot; Then
'The length of the first name field is the number of
'characters between &quot;&gt;&quot; and &quot;&lt;&quot; delimiters.
                intFirst = InStr(1, rst1.Fields(1), &quot;&gt;&quot;) + 1
                intLen = InStr(6, rst1.Fields(1), &quot;&lt;&quot;) - intFirst
                strFname = Mid(rst1.Fields(1), intFirst, intLen)

'Move two records to process last name field.
                rst1.Move 2
            Else
'If the first name is blank, set a Boolean flag
'to skip the whole record.
                blSkip = True
            End If

'Process last name field.
            intFirst = InStr(1, rst1.Fields(1), &quot;&gt;&quot;) + 1
            intLen = InStr(6, rst1.Fields(1), &quot;&lt;&quot;) - intFirst
            strLname = Mid(rst1.Fields(1), intFirst, intLen)

'Process company name field.
            rst1.Move 2
            If rst1.Fields(1) &lt;&gt; &quot;  &lt;dd&gt;&amp;nbsp;&lt;/dd&gt;&quot; Then
                intFirst = InStr(1, rst1.Fields(1), &quot;&gt;&quot;) + 1
                intLen = InStr(6, rst1.Fields(1), &quot;&lt;&quot;) - intFirst
'If there is a leading blank in the company name field,
'see if you can find the name after the blank.
                    If InStr(2, rst1.Fields(1), &quot;&amp;nbsp;&quot;) &lt;&gt; 0 Then
                        intLen = InStr(6, rst1.Fields(1), &quot;&amp;nbsp;&quot;) _
                            - intFirst
                    End If
'The parsing rule for the company name field converts with the new
'VBA Replace function html's &amp;quot; into a single apostrophy.
                strCname = Replace(Mid(rst1.Fields(1), _
                    intFirst, intLen), &quot;&amp;quot;&quot;, &quot;'&quot;)
            Else
'Set company name to zero-length string if there is no
'entry for the field.
                strCname = &quot;&quot;
            End If

<img src="Images/grayvellip.JPG" width=3 height=13 border="0">
'If Boolean skip flag is False, copy converted contact information
'to rst2, which is reference for WebBasedList table.
            If blSkip = False Then
                With rst2
                    .AddNew
                        .Fields(&quot;FirstName&quot;) = strFname
                        .Fields(&quot;LastName&quot;) = strLname
                        .Fields(&quot;CompanyName&quot;) = strCname
                        .Fields(&quot;Address1&quot;) = strSt1
                        .Fields(&quot;Address2&quot;) = strSt2
                        .Fields(&quot;City&quot;) = strCity
                        .Fields(&quot;StateOrProvince&quot;) = strSt
                        .Fields(&quot;PostalCode&quot;) = strPostal
                        .Fields(&quot;Country&quot;) = strCountry
                    .Update
                End With
            End If
        End If

'Move to next record in temp1 table and start search
'for a record including label for first name.
        rst1.MoveNext
    Loop
End Sub
</pre>
</td>
</tr>
</table></P>



<P>Each of the three converted fields relies on slightly different parsing 
logic. There is more consistency in the remaining fields. Nevertheless, several 
significant distinctions in parsing rules between alternative fields remain. You can 
read the comments and study the code to gain insights about VBA functions 
useful for string processing. After conversion, the code checks to make sure that 
any field conversion did not set the skip flag to 
<I>True</I>. A <I>False </I>value for the skip 
flag enables the procedure to add a new record to the relational contact table 
in the format shown in Figure 6-4. The procedure then moves on to a new 
record in the source table (the copy of the FrontPage guestbook). When the 
original source table returns its end of file (EOF) as 
<I>True</I>, the outer <I>Do </I>loop ends and the procedure halts.</P>


<A NAME="210"><H2>Creating Mailing Labels</H2></A>

<P>Figure 6-5 shows the Design view of a mailing label report and an excerpt from the Preview display of the mailing labels. These draw on the contact information shown in Figure 6-4.</P>
<P>Access ships with a graphical mailing label wizard that can 
accommodate multiple label sizes for laser and tractor-feed printers from many manufacturers, including Avery, EXPE, Herma, and Zweckform. The wizard also lets 
you define new form sizes. It removes the need to write string-processing expressions for the construction of labels. The top window in Figure 6-5 shows 
the label fields expanded longer than they would otherwise appear so you can see the complete expressions within them. The wizard automatically sizes the 
text boxes containing its string expressions so that the labels fit on the form.</P>


<P><A HREF="javascript:fullSize('F06QH05x.htm')"> <img src="Images/F06QH05.JPG" width=404 height=253 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-5.</B> <I>The top window shows a mailing label report in Design view. The bottom window shows an excerpt of the labels in Preview mode.</I><!-- /CAPTION -->
</P>

<A NAME="211"><H2>Creating a Form Letter</H2></A>

<P>Another typical use for a table of contacts is for use in a form letter. Using a mix of controls, string constants and variables, and custom VBA functions, you can create a form letter such as the one depicted in Figure 6-6 on the following page, which features several noteworthy Access report features:</P>


<UL>
<P><LI>A logo heads the letter.
</li></P>


<P><LI>The return address information appears in a different font than the body of the letter.
</LI></P>


<P><LI>The letter's date spells the month's name.
</LI></P>


<P><LI>The outgoing address and salutation change for each record.
</LI></P>


<P><LI>The letter's final paragraph also changes for each record.
</LI></P>


<P><LI>The letter's closing appears with a signature.
</li></P>

</ul>

<P><A HREF="javascript:fullSize('F06qh06x.htm')"> <img src="Images/F06qh06.JPG" width=404 height=461 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-6.</B> <I>Excerpts from a form letter.</I><!-- /CAPTION -->
</P>


<P>While it was never a programmatic challenge to convert a month number to a month name (such as converting 1 to January), Microsoft has simplified this task further with Access 2000 and VBA 6. The text box showing the date reveals the innovation and one way to use it. It contains the following 
string expression:</P>


<p>
<table cellpadding=5>
<tr>
<td>
<pre>
=ThisMonthName() &amp; &quot; &quot; &amp; Day(Date()) &amp;  &quot;, &quot; &amp; Year(Date())
</pre>
</td>
</tr>
</table></P>


<P>The expression contains a pair of nested built-in functions for the day 
and the year, but a custom function 
(<I>ThisMonthName</I>) returns the month's name. Below is a custom VBA 6 function, 
<I>MonthName</I>, that convert's a month's number to its matching name. This function relieves you from having to code a 
<I>Select Case </I>statement in a function procedure or invoke a 
<I>Choose </I>function to make a month name appear in a report.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Public Function ThisMonthName()
    ThisMonthName = MonthName(Month(Date))
End Function</pre>
</td>
</tr>
</table></P>


<P>You might wonder why you couldn't apply the <I>MonthName 
</I>function directly to the text box within the report. Doing so would generate an error because <I>MonthName </I>is not an Access function. You have to call it in a procedure and then return the result to an Access object such as a text box on a form.</P>


<P>Figure 6-7 presents the Design view of the form letter report showing a mix of label and text box controls. If the body of the letter includes no customization for each record, a simple label can display all the text. However, since the last paragraph starts with the contact's first name, the report needs 
a way to recover the <I>FirstName</I> field value. A string expression inside a text box is an easy way to accomplish this. The bottom portion mixes the field value with the string constant. You can tell that you have to experiment with the 
placement of the text box relative to the preceding label control. To have the text flow nicely in Preview mode, you must overlap the controls in Design view. Proper alignment can require some trial and error.</P>


<P><A HREF="javascript:fullSize('F06qh07x.htm')"> <img src="Images/F06qh07.JPG" width=404 height=314 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-7.</B> <I>The bottom portion of the letter in Figure 6-6 in Design view.</I><!-- /CAPTION -->
</P>



<p>
Note the use of a script font with a label control to simulate a 
signature. This is a viable option when you don't need an actual signature&#8212;for example, for large mailings such as form letters.
</P>


</BODY>
</HTML>




