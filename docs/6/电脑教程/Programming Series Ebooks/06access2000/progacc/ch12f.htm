<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Reports and Forms</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12e.htm", "ch12g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="391"><H1>Reports and Forms</H1></A>

<P>After connecting to one or more remote data sources and filtering, 
aggregating, or combining them with other sources, you can present your results 
with Access 2000. Because tables, views, and stored procedures are tightly 
integrated with forms, reports, and modules, you can easily deliver client/server data in the same way that Access has been serving up file-server data sources since its initial release. While prior Access releases made client/server data available, they never made true client/server processing so easy. Can .adp files do for client/server data sources what .mdb files did for file-server data sources? It depends on your interest and imagination. The upcoming samples might spark your creativity.</P>

<A NAME="392"><H2>Sorting, Formatting, and More with Reports</H2></A>

<P>The Query Designer makes it relatively easy to filter, combine, and 
aggregate data, but it does not offer much in the way of presentation capabilities. Recall that you cannot even sort the records in a view. Reports, on the other hand, have relatively limited processing capabilities but are great at sorting and formatting data for printers (and even the World Wide Web, if you consider snapshots-see Chapter 6).</P>

<P>Figure 12-12 shows how to use Access Project views with Access reports so that they complement each other. The report sorts records by <I>FamID</I>. It also conditionally formats the color for displaying a row based on the value 
of <I>FamID</I>: Values of less than <I>6</I> appear in black, but values of 
<I>6</I> or greater are in red. In addition, the display shows the normal report flourishes, including a title, a bar separating the title column headings from the column entries, and formatting for column headings and the report title that contrasts with the formatting of the body of the report.</P>

<P><A HREF="javascript:fullSize('F12qh12x.htm')"> <img src="Images/F12qh12.JPG" width=404 height=304 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 12-12.</B> <I>A report based on the</I> MyUnionQuery <I>view shown in Figure 12-11.</I><!-- /CAPTION -->
</P>


<P>Aside from the union query coding for the view, this report requires 
no programming. After you build your view, you simply set the report's 
<I>Record Source </I>property to the name of the view. Except for the different colors based on <I>FamID</I>, all of the report features are default tabular report settings. The new Conditional Formatting command on the Format menu dramatically simplifies the task of conditionally applying colors to the contents of text boxes. (See <a href="ch05a.htm">Chapter 5</a> for details.) Such capabilities used to require <I>Format </I>event procedures. By bringing the view and report together, you can use each to do the task that it performs best. Since reporting is a major Access strength, the.adp file's ability to process client/server data sources can dramatically lower the cost of delivering informative, easy-to-read reports throughout an organization.</P>

<A NAME="393"><H2>Adding Hyperlinks</H2></A>

<P>There is no Hyperlink data type in SQL Server databases. (Recall that Jet 
supports this data type as an extension of the Memo data type-see Chapter 1.) However, you can still insert and follow hyperlinks in forms within Access 
Projects. There are four steps to doing this:</P>

<OL>
<P><LI>
Assign a table column one of these data types: <I>char</I>, <I>nchar</I>, <I>nvarchar</I>, or <I>varchar</I>. These are fixed and variable-length string data types in Unicode or non-Unicode format.
</LI></P>

<P><LI>
Open a form in Design view and make the table the record source for the form.
</LI></P>

<P><LI>
Assign the field with the string data type to one of the form fields.
</LI></P>

<P><LI>
Set the field's <I>IsHyperlink </I>property to <I>Yes</I>. This is a new property in Access 2000 that is explicitly for hyperlinks on forms in Access 
Projects.
</LI></P>
</OL>

<P>After setting up the table and form, you can add hyperlinks to the 
table through the form using the Insert-Hyperlink command, which opens a 
dialog box for setting or editing the hyperlink's URL and its display text. Once the hyperlinks are formatted, users can follow them to designated Web 
locations by simply clicking the entry in a hyperlink field. Their default browser takes them there. Then they can return to Access by clicking the back arrow. Access 97 introduced this functionality; it is now available for SQL Server and MSDE databases through Access 2000.</P>

<P>Figure 12-13 shows the MyLinks Access form in the process of having 
its hyperlink entry edited. You can browse to the desired Web location so that 
you do not have to type the URL. In addition, you can use the Text To Display 
text box to enter text that appears instead of the URL. Notice also that you can use this dialog box to set hyperlinks for files on a local file server or even link to e-mail addresses. The latter option starts a browser workstation's default e-mail package with the name and e-mail address that you specify in the link.</P>

<P><A HREF="javascript:fullSize('F12qh13x.htm')"> <img src="Images/F12qh13.JPG" width=404 height=331 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 12-13.</B> <I>You can use the Edit Hyperlink dialog box to enter and edit hyperlinks into a shared client/server database of hyperlinks.</I><!-- /CAPTION -->
</P>


<A NAME="394"><H2>Viewing and Editing Data Using Forms</H2></A>

<P>Access Projects offer two <I>Recordset Type </I>property settings for working with forms and traditional data sources, such as tables of employees or customers. These settings are unique to .adp files. The traditional .mdb files have different <I>Recordset Type </I>property settings.</P>

<P>When you design an application that uses forms with data from a 
SQL Server or MSDE database, your client application always works with a 
snapshot of the original data on the server. Although the locally available data is a snapshot of the data on the server, you can update it on the server. To accommodate this functionality, Access 2000 offers <I>Updatable Snapshot </I>and <I>Snapshot Recordset Type </I>settings for Access Projects. You can set these properties on the Data tab of the form's Property dialog box. You can also manipulate the <I>Recordset Type </I>setting using VBA or an Access macro.</P>

<P>When you set a form's <I>Recordset Type </I>property to <I>Updatable Snapshot</I>, users can change the form's underlying data source as if the file were on a local file server. Using the <I>Lock </I>property for individual controls, you can selectively enable editing on a subset of a form's controls. In addition, you can control the type of changes permitted at client workstations. There are separate <I>Yes/No</I> settings for <I>Allow Edits</I>, <I>Allow Deletions</I>, and <I>Allow Additions </I>properties. Changes you make from the Access Project file propagate to the server. Each user of an Access Project should have a separate copy of the .adp file even though each user relates to a common client/server database. While data changes propagate from the client workstations to the server database, users must choose Records-Refresh to view changes made by others.</P>

<P>Figure 12-14 below shows a sample form in an Access Project based on data in a remote server. Below the form is an excerpt from the form's property sheet. It exposes the two possible settings for the <I>Recordset Type </I>property. Since <I>Updatable Snapshot </I>is in effect, users can change the form's underlying record source. In fact, because of the 
<I>Yes </I>settings for <I>Allow Edits</I>, <I>Allow Deletions</I>, and <I>Allow Additions</I>, they can perform all three standard types of database revisions. You can turn off all three capabilities by setting the <I>Recordset Type </I>property to <I>Snapshot</I>.</P>

<P><A HREF="javascript:fullSize('F12QH14x.htm')"> <img src="Images/F12QH14.JPG" width=404 height=448 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 12-14.</B> <I>You can use forms in Access Projects to modify data on a database server.</I><!-- /CAPTION -->
</P>


<P>The form was prepared using the AutoForm wizard (with a minor amount of editing). Moving to the next record passes any edits that a user makes to fields back to the server. If the <I>Recordset Type </I>setting is <I>Snapshot</I>, Access responds that the recordset is not updateable. The button marked with an X<I> </I>lets users abort a lengthy download of many records to a local workstation.</P>

<A NAME="395"><H2>Resynchronizing a Form with its One-To-Many Data</H2></A>

<P>When the source for a form in an Access Project is based on a recordset 
with a one-to-many relationship between two tables, you can automatically 
populate all the fields on the one side by setting the foreign key on the many side. This feature is especially convenient when you add new records. For example, if you are designing a form that presents employee and sales data, the 
one-to-many relation follows from the fact that each employee can have multiple sales. You simply enter the employee ID for the sales table and commit the record. This action automatically populates all the employee fields on the one side of the underlying record source. Then you enter the sales data on the many side of the record source. You can update the employee information for a 
previously existing record just as easily.</P>

<P>To enable this feature, your form must use <I>Updatable Snapshot 
</I>as the <I>Recordset Type </I>setting. You assign to the <I>Unique Table </I>property the table on the many side of the relationship. You must also set the <I>Resync Command </I>property to a string representing a SQL statement that enables the resynchronization. You'll learn a trick for quickly constructing this statement below.</P>

<P>Figure 12-15 shows the one-to-many Design view for the <I>vwForResynch </I>view. The top panel shows the one-to-many relationship in the line 
connecting the <I>Employees</I> and <I>Orders </I>tables. Notice that the view links the tables using the primary key in the <I>Employees </I>table and the corresponding foreign key (<I>EmployeeID</I>) in the <I>Orders </I>table. The bottom panel shows the SQL for the view. The form's <I>Resync Command </I>property requires a simple modification of this statement.</P>

<P><A HREF="javascript:fullSize('F12qh15x.htm')"> <img src="Images/F12qh15.JPG" width=404 height=360 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 12-15.</B> <I>This view represents a one-to-many relationship like that used for resynchronization on a form. The SQL statement forms the basis of the </I>Resync Command <I>property setting.</I><!-- /CAPTION -->
</P>


<P>Figure 12-16 below shows a form just after the entry of <I>9</I> into the EmployeeID text box. The form is a standard AutoForm with some minor editing. Clicking the record selector brings up data automatically to all the 
other employee fields on the form. Entering a new value into the EmployeeID 
text box and clicking the record selector automatically brings up employee 
data corresponding to the new ID value. That is the benefit of the 
resynchronization function.</P>

<P><img src="Images/F12QH16.GIF" width=376 height=277 border="0">
</P><P><!-- CAPTION --><B>Figure 12-16.</B> <I>A form that demonstrates resynchronization against a remote database.</I><!-- /CAPTION -->
</P>


<P>Figure 12-17 shows the form settings that enable this automatic 
resynchronization. The <I>Recordset Type </I>is <I>Updatable Snapshot</I>, and the form's <I>Unique Table </I>property points at the many side of the underlying recordset-namely, the <I>Orders </I>table. The zoomed <I>Resync Command </I>setting is exactly the same as the SQL for the underlying form with one extra line: <I>WHERE Orders.OrderID = ?</I>. This final step completes the tasks for enabling a form by using the resynchronization function.</P>

<P><A HREF="javascript:fullSize('F12qh17x.htm')"> <img src="Images/F12qh17.JPG" width=404 height=462 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 12-17.</B> <I>The Data tab of the form's property sheet. The </I>Updatable Snapshot <I>and </I>Resync Command<I> settings are necessary for resynchronization.</I><!-- /CAPTION -->
</P>


</BODY>
</HTML>




