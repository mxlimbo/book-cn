<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Using the All Collections</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07f.htm", "ch07h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="260"><H1>Using the All Collections</H1></A>

<P>If you are the type of developer who likes to track your objects in a 
database project (most of us find this essential), you'll be happy to know that there 
is an <I>AllModules </I>collection, which is a counterpart to the 
<I>AllForms </I>and <I>AllReports </I>collections you learned about in <A HREF="ch05a.htm#173">Chapters 5</a> and <A HREF="ch06a.htm#200">6.</a> The members of the 
All collections are not database objects, such as forms, reports, and modules, 
but <I>AccessObject </I>objects that contain a minimal amount of detail about most 
types of saved objects in a database.</P>


<A NAME="261"><H2><I>AccessObject </I>Properties</H2></A>
<P>You can quickly enumerate the <I>AccessObject 
</I>objects in any All collection. Since 
<I>AccessObject </I>objects point at saved objects, you cannot add or delete 
members. You perform these tasks through the open collections they point to.</P>

<P>
When you encounter an <I>AccessObject </I>object that your application 
needs more detail on, you can use the <I>IsLoaded 
</I>and <I>Name </I>properties to examine the properties of the object the 
<I>AccessObject </I>object points to. These open 
object collections have a fuller set of properties and methods that are not available 
with the All collections.</P>

<P>
<I>AccessObject </I>objects have a <I>Type </I>property that describes the type 
of <I>AccessObject </I>rather than the type of database object. The 
<I>Type </I>property value of any <I>AllModules 
</I>member is <I>5</I>. This distinguishes an <I>AccessObject 
</I>member in the <I>AllModules </I>collection from one in the 
<I>AllForms </I>collection with a <I>Type </I>property value of 
<I>2</I>. In either case, you cannot determine whether you are 
dealing with a class module or a form class module by simply examining 
the <I>AccessObject </I>member of the All collection. You must examine the 
<I>Type </I>property of a <I>Module </I>object and the 
<I>HasModule </I>property of a <I>Form </I>object.</p>

<A NAME="262"><H2>The All Collections</H2></A>

<P>There are seven All collections besides the 
<I>AllModules</I>, <I>AllForms</I>, and 
<I>AllReports </I>collections. This set of ten collections (see Figure 7-5) 
divides naturally into two sets of five each. The 
<I>AllForms</I>, <I>AllReports</I>, 
<I>AllMacros</I>, <I>AllModules</I>, and <I>AllDataAccessPages 
</I>collections are members of the <I>CurrentProject 
</I>and <I>CodeProject </I>objects in the Access 
<I>Application</I> object. The <I>AllTables</I>, 
<I>AllQueries</I>, <I>AllViews</I>, 
<I>AllStoredProcedures</I>, and 
<I>AllDatabaseDiagrams </I>collections are members of the 
<I>CurrentData </I>and <I>CodeData </I>objects in the 
Access Application object. When you designate <I>AccessObject 
</I>objects in any of the ten All collections, you must set a reference that points at the appropriate 
antecedent object. Failing to do so will generate an error.</P>


<P><A HREF="javascript:fullSize('F07QH05x.htm')"> <img src="Images/F07qh05.JPG" width=404 height=331 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 7-5.</B> <I>The ten All</I> <I>collections and their hierarchical relationship to </I>Project <I>and </I>Data <I>objects.</I><!-- /CAPTION -->
</P>


<P>
The <I>AllQueries</I>, <I>AllViews</I>, 
<I>AllStoredProcedures</I>, and 
<I>AllDatabaseDiagrams </I>collections have restricted availability by Access file type. Recall that 
Access projects can be in a traditional .mdb file or in the new Access 2000 .adp 
file. (<a href="ch04a.htm">Chapter 4</a> touched on the .adp file type, and <a href="ch12a.htm">Chapter 12</a> will discuss it 
further.) The <I>AllQueries </I>collection is available in .mdb files but not .adp files. In 
contrast, you can tap the <I>AllViews</I>, 
<I>AllStoredProcedures</I>, and <I>AllDatabaseDiagrams 
</I>collections from .adp files but not from .mdb files. Your applications can still 
reference views and stored procedures in .mdb files by using the ADOX object library.</P>


<P>
<DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>You might wonder why Access 2000 permits <I>Views </I>and <I>Procedures </I>collections in .mdb files but does not offer <I>AllViews </I>and <I>AllStoredProcedures </I>in .mdb files. These two All collections were not exposed in .mdb files because of the need to satisfy higher priority requirements. Look for <I>AllViews </I>and <I>AllStoredProcedures </I>collections with .mdb files in future releases of, or updates to, Access.
</BLOCKQUOTE></DIV></P>


<A NAME="263"><H2>Enumerating the All Collection Members</H2></A>

<P>The following three procedures show the high degree of similarity in programming different All collections. The first procedure performs a simple enumeration of all the modules in the current project. Notice that it initially declares <I>obj1 </I>as an <I>AccessObject </I>type because it accepts the identity of elements in the <I>AllModules </I>collection, which contains <I>AccessObject </I>objects. Also note that the enumeration loop passes through the <I>AllModules </I>collection but the code reaches this collection through the <I>Application </I>and <I>CurrentProject </I>objects.</P>


<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllModules()
Dim obj1 As AccessObject
    For Each obj1 In Application.CurrentProject.AllModules
        Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
            vbTab &amp; obj1.IsLoaded
    Next obj1

End Sub


Sub EnumerateAllForms()
Dim obj1 As AccessObject
    For Each obj1 In Application.CurrentProject.AllForms
        Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
            vbTab &amp; obj1.IsLoaded
    Next obj1

End Sub


Sub EnumerateAllTables()
Dim obj1 As AccessObject
    For Each obj1 In Application.CurrentData.AllTables
        Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
            vbTab &amp; obj1.IsLoaded
    Next obj1

End Sub
</pre>
</TD></TR></table></p>


<P>The <I>EnumerateAllForms </I>and <I>EnumerateAllTables 
</I>procedures have the same structure as the <I>EnumerateAllModules 
</I>procedure. You should note some significant differences in content, however. First, the specific 
<I>AccessObject </I>collection changes from <I>AllModules 
</I>to <I>AllForms </I>in one procedure and 
<I>AllTables </I>in the other procedure. Second, the path to the 
<I>AllTables </I>collection passes through the <I>CurrentData 
</I>object rather than the <I>CurrentProject </I>object. If we 
were to switch the <I>AllTables </I>collection to either an 
<I>AllViews </I>or an <I>AllStoredProcedures </I>collection, the code would work in an .adp file but not in an .mdb file.</P>


<A NAME="264"><H2>Adapting to .mdb and .adp File Types</H2></A>

<P>Using the <I>ProjectType </I>property of the 
<I>CurrentProject </I>object, you can detect whether you are working with an .adp or an .mdb file. This lets you write 
single procedures that adapt to their environment. The following sample prints 
the names of all the views and stored procedures in an .adp file, but it switches 
to printing all the queries in an .mdb file. As you can see, the only trick 
required is to test for the value of the <I>ProjectType 
</I>property. The <I>AccessObject Type </I>property adds values by distinctly differentiating objects for views with a type 
value of <I>7 </I>from objects pointing at stored procedures, whose type value is 
<I>9</I>.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllViews2()
Dim obj1 As AccessObject, dbs1 As Object
    Set dbs1 = Application.CurrentData
    If Application.CurrentProject.ProjectType = acADP Then
        For Each obj1 In dbs1.AllViews
            Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
                vbTab &amp; obj1.IsLoaded
        Next obj1
        For Each obj1 In dbs1.AllStoredProcedures
            Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
                vbTab &amp; obj1.IsLoaded
        Next obj1
    Else
        For Each obj1 In dbs1.AllQueries
            Debug.Print obj1.Name &amp; vbTab &amp; obj1.Type &amp; _
                vbTab &amp; obj1.IsLoaded
        Next obj1
    End If

End Sub
</pre>
</TD></TR></table></p>

<A NAME="265"><H2>Using <I>AllForms </I>and <I>AllModules</I></H2></A>
<P>The sample below uses the All collections and the 
corresponding collections of open modules and forms to develop a list of all the modules 
(by type) and the class modules for forms in a project. Since the property for 
denoting standard class modules is different from the one for class modules for 
forms, the code requires different expressions to test for standard class modules 
vs. class modules for forms.</P>

<P>
Recall that modules have a <I>Type </I>property but forms have a 
<I>HasModule </I>property. The code must iterate through the members of the 
<I>AllModules </I>and <I>AllForms </I>collections because some, or even all, modules and forms can 
be closed. You check the <I>IsLoaded </I>status of the 
<I>AccessObject </I>objects in <I>AllModules </I>and 
<I>AllForms </I>to determine whether you need to open a module or form 
before assessing its module type, or to determine whether a form has a class 
module. The procedure recloses forms and modules after it examines them.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub ListAllModulesByTypeAndClassForms()
Dim obj1 As AccessObject, dbs1 As Object
Dim mod1 As Module, frm1 As Form
    
    Set dbs1 = Application.CurrentProject

'Search for open AccessObject objects in AllModules collection.
'Open and reclose those that are not open.
    
    For Each obj1 In dbs1.AllModules
        If obj1.IsLoaded = True Then
            ListTypeOfModule obj1.Name
        Else
            DoCmd.OpenModule obj1.Name
            ListTypeOfModule obj1.Name
            DoCmd.Close acModule, obj1.Name
        End If
    Next obj1

'Search for open AccessObject objects in AllForms collection.
'Open and reclose those that are not open.

    For Each obj1 In dbs1.AllForms
        If obj1.IsLoaded Then
            DoesFormHaveModule obj1.Name
        Else
            DoCmd.openform obj1.Name
            DoesFormHaveModule obj1.Name
            DoCmd.Close acForm, obj1.Name
        End If
    Next obj1

End Sub


Sub ListTypeOfModule(modname)
Dim strType As String

'Decode module Type value.
    If Modules(modname).Type = 0 Then
        strType = &quot;Standard Module&quot;
    Else
        strType = &quot;Class Module&quot;
    End If
    
'Print module name and type.
    Debug.Print Modules(modname).Name &amp; vbTab &amp; strType

End Sub


Sub DoesFormHaveModule(frmname)

'Only print form name if it has a module.
    If Forms(frmname).HasModule = True Then
        Debug.Print frmname &amp; vbTab &amp; &quot;Form Class Module&quot;
    End If

End Sub
</pre>
</TD></TR></table></p>

</BODY>
</HTML>




