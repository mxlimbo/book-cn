<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Collections, Objects, Properties, Methods, and Events</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01a.htm", "ch01c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="4"><H1>Collections, Objects, Properties, Methods, and Events</H1></A>


<P>Access 2000 supports VBA, which facilitates object-oriented development. 
The following sections will introduce object-oriented development in the context 
of VBA and Access 2000. The information is targeted at power users migrating 
to programmatic application development and at mid-level developers who 
want to review object-oriented programming with VBA.</P>

<A NAME="5"><H2>Collections and Objects</H2></A>

<P>Access 2000 is an object-oriented development environment. Its Database 
window facilitates user access to tables, queries, forms, reports, modules, 
and macros. VBA makes these available along with a broad array of 
programmatic constructs, such as recordsets and 
<I>TableDef</I> objects. To get the most out of 
VBA in Access, you have to understand objects and a number of related concepts.</P>

<P>An object is a thing. Things can be as diverse as cars, phones, and 
videos. All objects have properties. Cars, for example, are defined by color, door, 
and engine properties, among others. Properties can define instances of 
generic objects. This object-oriented behavior allows you to specify unique 
instances of objects based on their properties. For example, a red car and a black car 
define two unique instances of the car object.</P>

<P>Object properties vary according to the object class to which they 
refer. A car has a different set of properties than a phone. Both have a color 
property, but a phone can also have a speaker property. Cars, on the other 
hand, have engines of different sizes. Some objects are containers for other 
ones. Contained objects can also have properties. Engines come in various sizes 
and configurations, for example, while speakers come with volume controls and 
fidelity ratings. Properties can also define unique instances of contained 
object classes. A speakerphone has a different set of properties than a standard phone.</P>

<P>In addition to properties, objects also have methods. An object's 
methods are the behaviors that it can perform. A phone makes connections. A car 
moves. Many objects have multiple methods. Phones let you make local calls and 
long-distance calls, for example.</P>

<P>Access developers do not manipulate physical objects. We 
manipulate programming constructs such as forms, tables, and queries that can 
represent objects and their behaviors. The Access 2000 Database window shows some 
of its database object classes on its Microsoft Outlook-style toolbar. (See 
Figure 11.) Clicking the Forms button on the toolbar opens a view of form 
objects and displays two options for creating new forms. Form objects can 
contain other objects called controls. Contained objects define an object just as 
controls on a form define its look and behavior.</P>

<P><A HREF="javascript:fullSize('F01QH01x.htm')"> <img src="Images/F01QH01.JPG" width=404 height=293 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 1-1.</B> <I>The Database window with a selection of form objects and two options for creating new forms.</I><!-- /CAPTION -->
</P>


<P>Figure 1-1 shows several form objects. These objects comprise a 
<I>collection</I>. Access applications typically have collections of forms, tables, queries, 
and other objects. The Database window automatically sorts selected objects 
into classes. Clicking the toolbar on the left reveals the objects in each collection.</P>

<P>Collections are like objects. All Access collections have a 
<I>Count </I>property, which specifies the number of instances in the collection. Collections can 
also have an <I>Item </I>property. You can use the read-only 
<I>Item </I>property to return an individual form from the 
<I>AllForms </I>collection. Since a collection's members 
are individual objects, they do not have a <I>Count 
</I>property. The objects of a collection serve different purposes. A convertible car can serve different purposes 
than a family sedan, but they can both belong to the car collection in a household.</P>

<A NAME="6"><H2>Properties and Methods</H2></A>

<P>Properties and methods characterize the appearance and behavior of 
objects. The syntax for referencing these is 
<I>object.property</I> or <I>object.method</I>. The 
term <I>object </I>can refer to either an individual object or a collection of objects. 
For example, <I>txtInput1.BackColor </I>specifies the background color property of a 
text box on a form, and <I>AllForms.Item(0) </I>refers to the first form in the forms 
collection. If this form has the name 
<I>frmSample1</I>, you can refer to the form as 
<I>AllForms.Item(&quot;frmSample1&quot;)</I>.</P>

<P>You can see the properties of a database object by selecting it in 
Design view and clicking the Properties button on the toolbar. Figure 1-2 shows a 
form in Design view along with the form's property sheet. The property sheet 
shows a custom entry, <I>My Default Caption</I>, in the Caption property box. The 
<I>Close Button </I>property is selected. You can click the Close Button box and select 
No. The new <I>Close Button</I> property grays out the Close button when a form 
appears in Form view. Notice that the property sheet has multiple pages. Figure 
1-2 shows the Format tab selected. These pages organize the properties into 
groups for fast retrieval.</P>

<P><A HREF="javascript:fullSize('F01QH02x.htm')"> <img src="Images/F01QH02.JPG" width=404 height=142 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 1-2.</B> <I>A simple form in Design view with its property sheet.</I><!-- /CAPTION -->
</P>


<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
In Access 2000, the property sheet is available in both 
Design view and Form view instead of only in Design view. This means that 
you can quickly modify and refine a form's appearance as you work with 
its design in Form view.
</BLOCKQUOTE></DIV></P>


<P>The <I>DoCmd </I>object is a rich source of methods for all levels of 
Access developers, but beginners find it especially helpful for getting started 
with methods. The <I>DoCmd </I>object has many methods, including 
<I>Close</I>, <I>OpenForm</I>, <I>GoToControl</I>, 
<I>FindRecord</I>, and <I>RunCommand</I>. Many 
<I>DoCmd </I>methods require arguments that specify how the method performs. Other methods have 
required and optional arguments. If you do not specify values for an optional 
argument, the method uses the default settings. 
<I>RunCommand </I>is particularly attractive to power users who are upgrading to programmer status; you can use it to 
execute the commands that are available on the Access menus and toolbars.</P>

<P>You can close a form in Access using the <I>Close 
</I>method of the <I>DoCmd </I>object. This method has two required arguments and one optional one. The 
first required argument specifies the type of object to close. When you close a 
form, use <I>acForm</I>. (<I>acForm</I> is a built-in Access constant whose value tells the 
<I>Close</I> method that you want to close a form. See the section titled &quot;<A HREF="ch01d.htm#16">The Object Browser</A>&quot; for more information about built-in Access constants.) 
The second argument is the form's name. This entry appears in the 
<I>Name </I>property of the form's property sheet. Enclose the name in quotes. The optional 
argument tells Access whether to save any changes to the form. The default 
setting is to prompt for whether to save. Use either 
<I>acSaveYes </I>or <I>acSaveNo </I>to close the form with or without saving any changes. You can invoke the 
<I>Close </I>method for a form using the following syntax:</P>


<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
DoCmd.Close acForm, &quot;formname&quot;, acSaveNo
</pre>
</TD></TR></TABLE></P>


<P>Many <I>DoCmd </I>methods apply directly to individual objects. For 
example, the <I>GoToControl </I>method assigns the focus to a specific control on a form. 
You can achieve the same result using the <I>SetFocus 
</I>method, which selects a control. Either method is convenient when your application needs to move the 
focus for entering new information or correcting faulty information.</P>

<A NAME="7"><H2>Events</H2></A>

<P>Events are very important in VBA programming. You can use events to 
make applications dynamic and interactive. Objects and collections have events, 
which serve as launching points for a developer's custom code. When you work 
with forms, you can use events for such tasks as data validation, enabling or 
disabling controls, changing the control that has the focus, opening a form, and closing a form.</P>
<P>You must understand when each event fires as well as the order in 
which the events fire. When a form opens, it triggers a sequence of events: 
<I>Open</I>, <I>Load</I>, <I>Resize</I>, and 
<I>Current</I>. The <I>Open </I>event occurs when a form starts to open 
but before it displays any records. The <I>Load 
</I>event occurs after the <I>Open </I>event. When the 
<I>Load </I>event fires, a form shows its records. Any code that causes a form 
to change its size or location by means of the 
<I>MoveSize</I>, <I>Minimize</I>, <I>Maximize</I>, 
or <I>Restore DoCmd </I>methods fires the <I>Resize 
</I>event. The <I>Current </I>event is the last 
one that normally occurs as a form opens. It marks the moment at which a 
particular record is current or available. It also fires when a user navigates to a 
new record or requeries or refreshes a form.</P>

<P>You access the events for forms and their controls by selecting the 
form or control in Design view and then clicking the Event tab of the property 
sheet. Clicking the Build button next to an event opens a dialog box that you can 
use to open the code module behind a form. Choosing Code Builder opens an 
event procedure in VBE. The event procedure is named 
<I>Objectname_Eventname</I>, where 
<I>Objectname</I> is the name of the object and 
<I>Eventname</I> is the name of the event. If you select a form and click the Build button for the 
<I>Close</I> event, for example, your event procedure will have the name 
<I>Form_Close</I>. If you create an event procedure for the 
<I>On Click </I>event of a label named 
<I>lblTitle</I>, VBA automatically names it 
<I>lblTitle_Click</I>.</P>

<P>The following are three event procedures for the form shown in 
Figure 1-2: <I>Form_Open</I>, <I>Form_Load</I>, and 
<I>lblTtitle_Click</I>. When you first open the form 
in Form view, a message box opens that reads, &quot;The form opened.&quot; When 
you click OK, you see a second message that says, &quot;The form loaded.&quot; After the 
form completes its loading cycle, clicking the label opens a third message box 
that says, &quot;Hello from the label.&quot;</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>
Private Sub Form_Open(Cancel As Integer)
    MsgBox &quot;The form opened.&quot;, vbInformation, 
        &quot;Programming Microsoft Access 2000&quot;
End Sub

Private Sub Form_Load()
'This is s simple statement.
    MsgBox &quot;The form loaded.&quot;, vbInformation, _
        &quot;Programming Microsoft Access 2000&quot;
'This sets a property.
    Me.Caption = &quot;New Caption&quot;
'Here are two methods for giving a control focus.
'    DoCmd.GoToControl &quot;txtMyTextBox&quot;
    Me.txtMyTextBox.SetFocus
'Now that the method worked, VBA sets a property.
    Me.txtMyTextBox.Text = &quot;Hi, there!&quot;
End Sub

Private Sub lblTitle_Click()
    MsgBox &quot;Hello from the label.&quot;, vbInformation, _
        &quot;Programming Microsoft Access 2000&quot;
End Sub
</pre>
</TD></TR></TABLE></P>


<P>The event procedures cause the message boxes to appear. Clicking 
the label invokes the <I>lblTitle_Click </I>event procedure. This procedure has a 
single statement that presents a message box. (The underscore at the end 
of procedure's first line is a continuation character.) The 
<I>Form_Open </I>event procedure also has a single statement. The 
<I>Form_Load </I>event procedure has several statements besides the one for its message box. This event 
procedure dynamically sets the caption for the form, which is particularly helpful 
when you have a form that has two or more roles in an application. It also sets 
the focus to the text box named 
<I>txtMyTextBox</I> and then assigns &quot;Hi, there!&quot; to 
the control's <I>Text</I> property. This event procedure demonstrates two different 
techniques for setting the focus. One relies on the 
<I>SetFocus </I>method, and the other uses the <I>GoToControl 
</I>method for the same purpose. The apostrophes at 
the beginning of some lines of code mark them as comments. Notice that one 
of the two techniques is a comment line.</P>

</BODY>
</HTML>





