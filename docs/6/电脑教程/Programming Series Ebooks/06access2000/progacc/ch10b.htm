<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Sharing Files</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="324"><H1>Sharing Files</H1></A>

<P>The first step in sharing an Access application is to make the default open mode shared. You can accomplish this using the Advanced tab of the Options dialog box. This tab also offers other options that facilitate sharing. The <I>SetOption </I>and <I>GetOptions </I>methods of the Access 
<I>Application </I>object enable your applications to set and read these settings</P>


<P>You place Access multi-user files in shared file directory folders. 
Since Access with the Jet engine is a file server as opposed to a client/server database, you should minimize the file size that travels over the physical network connection. One way to do this is to split an application into two files. You save the data tables in an Access file on the shared directory folder and distribute another Access file to individual users for use on their local workstations. The distributed file links back to the data tables in the shared folders. This design speeds performance and reduces network traffic. You can generally improve performance by including more content in the distributed file, such as data 
that changes infrequently. You can use automated procedures to update 
locally stored data at specific times, such as when an application opens or a user clicks a button.</P>


<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>You can use the Database Splitter wizard to divide one Access file into two. (Choose Database Utilities from the Tools menu.) One file contains tables, and the other file holds queries, forms, reports, macros, modules, and shortcuts to data access pages (data access pages are new with Access 2000). You place the first file in a shared folder on the network and link the other file to it. You distribute the second file to individual users for use on their workstations.
</BLOCKQUOTE></DIV></P>



<P>You can set user-level security settings that let a user open a file 
exclusively (so others cannot use it). A user needs exclusive use of a database to 
make database modifications, such as adding new modules or revising existing 
ones. The <I>Connection Control</I> property and the User List feature are used to 
obtain exclusive access to a database in a multi-user environment.</P>


<A NAME="325"><H2>The <I>Connection Control</I> Property</H2></A>

<P>The new <I>Connection Control</I> property facilitates programmatic control of 
database accessibility. You can set the <I>Connection 
Control</I> property for an ActiveX Data Objects (ADO) 
<I>Connection </I>object to make it impossible for new users 
to open a database and to prohibit existing users from reconnecting to it after 
they close the file. The <I>Connection Control</I> property allows you to obtain 
exclusive access to the database in order to store new modules and make other 
application design changes once the last current user disconnects from the database.</P>


<P>The following two procedures change the setting of the 
<I>Connection Control</I> property. You use the 
<I>Properties </I>collection of the <I>Connection 
</I>object to set the property. A property setting of 
<I>1</I> sets the feature so that it closes down passively when users disconnect from the application file. A value of 
<I>2</I> enables other users to resume connecting to the database file. This feature is handy 
for developers who need to evaluate their changes after saving them in the file.</P>


<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>

<PRE>Sub closeDBConnection()
Dim cnn1 As ADODB.Connection

	Set cnn1 = CurrentProject.Connection
    cnn1.Properties(&quot;Jet OLEDB:Connection Control&quot;) = 1
    
End Sub


Sub openDBConnection()
Dim cnn1 As ADODB.Connection

	Set cnn1 = CurrentProject.Connection
    cnn1.Properties(&quot;Jet OLEDB:Connection Control&quot;) = 2

	
End Sub
</PRE>
</TD></TR></TABLE></P>

<A NAME="326"><H2>The User List</H2></A>


<P>The User List, introduced with Jet 4, is a set of user data stored in the lock 
file for an .mdb file. This information is available exclusively through the Jet 
provider, but you can only gain access to the information through ADO. (If 
your database resides on a read-only file share, this feature is not available 
because Jet does not create lock files for read-only shares.) You invoke the 
<I>OpenSchema </I>method for a <I>Connection </I>object to return a recordset with four fields of 
information for each recent user. The method extracts data from the lock file for 
an .mbd file. The four fields in the recordset are</P>


<UL>

<P><LI><I>computer_name</I> The name of the computer the user connects from.</LI></P>

<P><LI><I>login_name</I> The login user-level security name.</LI></P>

<P><LI><I>connected</I> Indicates that a user is currently connected. (User IDs sometimes remain in the lock database after a user disconnects from a Jet database.)</LI></P>


<P><LI><I>suspected_state</I> Indicates that a connection to the database has terminated abnormally.</LI></P>

</UL>

<P>The following procedure invokes the User List. You reference the User 
List using a Globally Unique ID (GUID) that points at the control for returning 
the recordset of active users. The sample returns 
<I>computer_name </I>and <I>login_name </I>for all active users. When this list has a count of 1, a developer can save 
changes to modules in a database. In addition, a developer can use the list to 
determine who to contact to gain exclusive control of a database.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>

<PRE>Sub listActiveUsers()
Dim cnn1 As ADODB.Connection, rst1 As New ADODB.Recordset

'Set the connection for the current project and invoke the
'OpenSchema method to return the current list of users.
    Set cnn1 = CurrentProject.Connection
    Set rst1 = cnn1.OpenSchema(adSchemaProviderSpecific, , _
        &quot;{947bb102-5d43-11d1-bdbf-00c04fb92675}&quot;)
)
        
'Print a heading for the User List recordset
'and enumerate list members.
    Debug.Print &quot;Machine Name    &quot; &amp; &quot;User Name&quot;
    Debug.Print &quot;============&quot; &amp; &quot;    =========&quot;
    Do Until rst1.EOF
        Debug.Print rst1.Fields(&quot;computer_name&quot;) &amp; _
            rst1.Fields(&quot;login_name&quot;)
        rst1.MoveNext
    Loop
    
End Sub
</PRE>
</TD></TR></TABLE></P>

</BODY>
</HTML>




