<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Programming Events into Custom Classes</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07e.htm", "ch07g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="252"><H1>Programming Events into Custom Classes</H1></A>

<P>You can use VBA in Access to create classes for instantiating objects, but 
VBA objects cannot initiate their own events. However, you can build classes 
around type libraries and ActiveX controls that propagate their events to a host 
environment. For objects that propagate events, your VBA application can wrap 
code around events that occur within the class. When a host procedure for an 
instance of a class launches a method that causes the firing of a propagating event 
from inside the class, the event procedure works its way to the host for the 
class module. (See Figure 7-4.)</P>

<P>
The <I>References </I>collection relates hierarchically to the 
<I>Application </I>object. You invoke the <I>AddFromFile 
</I>and <I>Remove </I>methods to enable an application 
to programmatically add and delete references to type libraries. These library 
files contain standard descriptions of exposed objects, methods, properties, 
and events. Recall that the ADODB object model is dependent on a library. You 
can add references to it and other libraries manually or programmatically.</P>


<P><A HREF="javascript:fullSize('F07QH04x.htm')"> <img src="Images/F07qh04.JPG" width=404 height=404 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 7-4.</B> <I>The </I>WithEvents <I>keyword propagates an object's event procedures to the object's host when an event fires.</I><!-- /CAPTION -->
</P>


<P>
<A HREF="ch02a.htm#37">Chapter 2</a> explains how to add references manually to the three 
ADO libraries. The following section will explain how to add references 
programmatically to any library or ActiveX control. You can issue a confirmation 
message when your application finishes adding or removing a reference.</P>


<A NAME="253"><H2>Two Built-In Class Events</H2></A>

<P>Class modules have two built-in events: <I>Initialize 
</I>and <I>Terminate</I>. The <I>Initialize </I>event occurs when you create a new instance of a class module. You create 
a shell for the <I>Initialize </I>event procedure by selecting Class from the class's 
Object box and Initialize from the Procedure box. You can do anything necessary 
in an <I>Initialize </I>event procedure to prepare your class instance for use.</P>

<P>
In the <I>Terminate </I>event procedure, you should clean up after your current application. This can be as simple as setting an object reference to <I>Nothing</I>. The <I>Initialize </I>and <I>Terminate </I>events occur just once at the beginning and end of the life of a class instance. Therefore, they are not particularly handy for generating interactive or dynamic behavior at any times other than the birth and death of the instance of a class.</P>


<A NAME="254"><H2>Using the <I>WithEvents </I>Keyword to Trap Propagated Events</H2></A>
<P>The following class module uses the <I>WithEvents 
</I>keyword to trap events propagated by the <I>References 
</I>collection. The <I>References </I>collection has a separate 
item for each checked item in the References dialog box. The 
<I>ItemAdded </I>and <I>ItemRemoved </I>events occur only when your code adds or removes 
references. If a user manually modifies the <I>References 
</I>collection, these events do not fire.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Option Compare Database
'Declare object variable to represent References collection.
Public WithEvents evtReferences As References

'When instance of class is created, initialize evtReferences
'variable.
Private Sub Class_Initialize()
    Set evtReferences = Application.References

End Sub


'When instance is removed, set evtReferences to Nothing.
Private Sub Class_Terminate()
    Set evtReferences = Nothing

End Sub


'Display message when reference is added.
Private Sub evtReferences_ItemAdded(ByVal Reference As _
        Access.Reference)
    MsgBox &quot;Reference to &quot; &amp; Reference.Name &amp; &quot; added.&quot;, _
        vbInformation, &quot;Programming Microsoft Access 2000&quot;

End Sub


'Display message when reference is removed.
Private Sub evtReferences_ItemRemoved(ByVal Reference As _
        Access.Reference)
    MsgBox &quot;Reference to &quot; &amp; Reference.Name &amp; &quot; removed.&quot;, _
        vbInformation, &quot;Programming Microsoft Access 2000&quot;

End Sub
</pre>
</TD></TR></table></p>

<A NAME="255"><H3>Starting and ending a <I>WithEvents</I> reference</H3></A>
<P>You use the <I>WithEvents </I>keyword in combination with a class that 
propagates events. The <I>Public </I>statement in the class module above declares a 
reference (<I>evtReferences</I>) to the <I>References 
</I>collection in the Access application object. 
The <I>WithEvents </I>keyword within the statement enables the class module to trap 
events propagated by the <I>References </I>collection. The 
<I>Class_Initialize </I>event procedure sets a reference. Recall that you cannot use the <I>New </I>keyword for a reference that you declare with <I>WithEvents</I>.</P>


<A NAME="256"><H3>Wrapping code around captured events</H3></A>

<P>Two event procedures in the class module, <I>ItemAdded 
</I>and <I>ItemRemoved</I>, invoke message block statements. These show messages naming the reference that 
a method adds or removes. The event procedures show the syntax for 
wrapping custom code around objects that propagate events. In this case, the object 
is the <I>References </I>collection. The event procedures merely write out the name 
of the library being added to or removed from the 
<I>References </I>collection.</P>


<A NAME="257"><H2>Standard Modules Cause Events</H2></A>

<P>As with any class module, you need one or more procedures in a 
standard module to instantiate the class (see the sample below) and to invoke 
methods, assign property values, or read property values. In the declarations area of 
the module hosting the class, you include a <I>Dim 
</I>or <I>Public </I>statement with the <I>New 
</I>keyword and the class name. This instantiates the class and sets an object 
reference (<I>objRefEvents </I>in the sample).</p>

<A NAME="258"><H3>Standard module syntax for events</H3></A>

<P>If the instance of the class propagates events from an embedded object, 
you should use a <I>Public </I>statement with the 
<I>WithEvents </I>keyword. This statement exposes the events to other modules referencing the class. When you 
invoke the methods from the underlying class, you must traverse the local object 
reference (<I>objRefEvents</I>), the reference within the class module exposing the 
events (<I>evtReferences</I>), and then a specific method name, such as 
<I>AddFromFile </I>or <I>Remove</I>. Unlike a normal reference to a class module, this one points to 
a method for the source object in the <I>WithEvents 
</I>declaration.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>'Create new instance of RefEvents class.
Dim objRefEvents As New RefEvents

Sub InvokeAddReference()

'Pass file name and path of type library to AddReference procedure.
    AddReference _
        &quot;C:\Program Files\Common Files\System\ado\msjro.dll&quot;

End Sub


Sub InvokeRemoveReference()

'Pass name of existing reference. (Use internal name from File
'Properties list; same name appears when adding reference.)
    RemoveReference &quot;JRO&quot;

End Sub


Sub AddReference(strFileName As String)

    objRefEvents.evtReferences.AddFromFile (strFileName)

End Sub


Sub RemoveReference(strRefName As String)
    
    objRefEvents.evtReferences.Remove _
        objRefEvents.evtReferences(strRefName)

End Sub
</pre>
</TD></TR></table></p>

<P>The sample above adds a reference to the library holding the JRO 
model. (This model enables Jet replication via ADO.) You run the 
<I>InvokeAddReference </I>procedure to create the reference. The procedure calls a procedure, 
<I>AddReference</I>, with the syntax for adding an item to the 
<I>References </I>collection via the <I>RefEvents 
</I>class module. The library holding the JRO model is a dynamic link library 
(DLL) that typically resides in the ADO folder of the System folder in the Common 
Files directory of the Program Files directory. Launching the 
<I>InvokeRemoveReference </I>procedure eliminates the JRO item from the 
<I>References </I>collection. The JRO designation is the 
<I>Name </I>property for the item in the <I>References 
</I>collection.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>To discover the arguments for the 
<I>AddFromFile </I>and <I>Remove </I>methods, you add references manually. Then you enumerate the items 
in the <I>References </I>collection with a <I>For...Each 
</I>statement while listing their <I>Name </I>and 
<I>FullPath </I>properties. You use these property values to 
uniquely identify arguments for the <I>AddFromFile 
</I>and <I>Remove </I>methods.
</BLOCKQUOTE></DIV></P>


<A NAME="259"><H3>Extending the application</H3></A>

<P>You can easily adapt the <I>RefEvents </I>class by using the 
<I>AddReference </I>and <I>RemoveReference </I>procedures to accommodate a broader and more 
flexible selection process. For example, your application can derive the input to 
the <I>AddReference </I>procedure from a collection of type libraries, executables, 
ActiveX controls, and even database files. A combo box can offer users a list of 
references to add or remove. Alternatively, your procedure can make a selection 
from a list based on other factors, such as what a user is trying to accomplish.</P>


</BODY>
</HTML>




