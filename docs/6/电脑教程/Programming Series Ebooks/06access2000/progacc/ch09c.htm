<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Working with Excel from Access</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm", "ch09d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="309"><H1>Working with Excel from Access</H1></A>

<P>The first two samples below demonstrate some capabilities that the Excel installable ISAM can add to an application. The third sample shows a simple but powerful way to use automation. Instead of directly manipulating detailed elements of the object model of an automation server, the procedure launches a procedure within the automation server. The procedure, in turn, updates the spreadsheet file, but at the time and in the manner that an Access application determines.</P>


<A NAME="310"><H2>Working with Values from Excel Worksheets</H2></A>

<P>All three samples work with the Excel workbook depicted in Figure 9-2. The file is MyGas.xls. The first four columns of Sheet1 contain manually entered data, and the next four columns contain expressions based on the first four. The formula bar shows the expression for entries in the MPG column. The data resides in a range named 
<I>gas</I>. The Define Name dialog box shows the extent of the range in Sheet1.</P>

<P><A HREF="javascript:fullSize('F09qh02x.htm')"> <img src="Images/F09qh02.JPG" width=404 height=358 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 9-2.</B> <I>An Excel spreadsheet with a named range, </I>gas<I>, extending over cells A1 through H45.</I><!-- /CAPTION -->
</P>


<p>
The first sample reads the entries from Excel, performs some 
calculations in Access, and prints the results to the Immediate window. After establishing a connection to the Excel data source, your application can programmatically treat the data source just like an internal Access table. For example, you can enumerate records in the table or compute values based on the entries in the record source. The sample prints to the Immediate window the existing entries in 
the Excel worksheet alongside the results of expressions computed in Excel. 
This, incidentally, confirms that Access computations can generate results 
identical to those in Excel. This capability can reduce the amount of data that your 
application must read from a computationally intensive spreadsheet.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub openXLComputePrint()
Dim cnn1 As New ADODB.Connection
Dim rst1 As ADODB.Recordset
Dim computedMPG As Double, computedTotal As Currency

'Make connection to Excel source.
    cnn1.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
        &quot;Data Source=C:\Programming Access\Chap09\mygas.xls;&quot; &amp; _
        &quot;Extended Properties=Excel 8.0;&quot;
       
'Open read-only recordset based on Excel source.
'Recall default is read-only.
    Set rst1 = New ADODB.Recordset
    rst1.Open &quot;gas&quot;, cnn1, , , adCmdTable
    
'Enumerate records and compute with field values.
    Do Until rst1.EOF
        computedMPG = rst1.Fields(&quot;Miles&quot;) / _
            rst1.Fields(&quot;Gallons&quot;)
        computedTotal = rst1.Fields(&quot;Gallons&quot;) * _
            rst1.Fields(&quot;Price per Gallon&quot;)
        Debug.Print rst1.Fields(&quot;Date&quot;), _
            rst1.Fields(&quot;Miles&quot;), _
            rst1.Fields(&quot;Gallons&quot;), _
            rst1.Fields(&quot;Price per Gallon&quot;), _
            rst1.Fields(&quot;MPG&quot;), computedMPG, _
            rst1.Fields(&quot;Total&quot;), computedTotal
        rst1.MoveNext
    Loop

'Close connection to source.
    cnn1.Close

End Sub
</pre>
</td>
</tr>
</table></P>


<P>The subprocedure declares and creates a new 
<I>Connection </I>object, and then it opens the 
<I>Connection </I>object. This is critical when you work with an 
ISAM driver because this is how you manage your link to the data source outside of Access. The connection string points the object at the Excel file MyGas.xls. 
(Its data is excerpted in Figure 9-2.) You must conclude the connection string with an 
<I>Extended Properties </I>specification that points at the ISAM driver that 
your application uses. The sample uses one (
<I>Excel 8.0</I>) that works with Excel 2000 and Excel 97 workbook files.</P>

<p>
The 
<I>Recordset </I>reference that follows is another critical and relatively standard component of ISAM applications. By defining a recordset on the connection, your application gains the ability to read from and write to the remote data source. If your Access Application links to the Excel data source, you use the 
<I>Recordset </I>object's 
<I>AddNew </I>and 
<I>Update </I>methods to add new rows to a worksheet from Access. The recordset specification must also designate which portion of the workbook to link. If you reference the gas range, the recordset can use 
the built-in range for the worksheet. The syntax for referencing an external Excel table is identical to that for referencing an internal Access table.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>If your application must write to or revise an Excel data 
source from Access, be sure to define a cursor that supports this functionality (for example, pass the <I>adOpenKeyset </I>constant for the cursor type and the 
<I>adLockOptimistic </I>constant for the lock type). Unlike DAO, the default ADO cursor does not support updating.
</BLOCKQUOTE></DIV></P>


<P>The next major element of the procedure is a 
<I>Do </I>loop that enumerates all the records in the gas range. The first two lines in the loop evaluate 
expressions for two computed values. The 
<I>computedMPG </I>and 
<I>computedTotal </I>variables compare Access to Excel arithmetic as they confirm your ability to 
manipulate data read from an Excel data source. The next seven lines within the 
<I>Do </I>loop print to the Immediate window Excel table field values along with the 
two computed variables for each row. You navigate through an Excel table exactly as you do an internal table. Of course, you must invoke a 
<I>MoveNext </I>method within the loop to progress through the spreadsheet rows.</p>

<p>Figure 9-3 shows the five rightmost columns of the output from the preceding sample. The first two columns show identical results for MPG from Excel (the first column) and Access (the second column). 
The same is true for the total gas bill for each gas fill-up. This confirms that the double and currency data types from Access can duplicate results from Excel.</P>

<P><A HREF="javascript:fullSize('F09qh03x.htm')"> <img src="Images/F09qh03.JPG" width=404 height=194 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 9-3.</B> <I>An excerpt from the output of the </I>openXLComputePrint <I>procedure. Notice the identical computational results from Access and Excel.</I><!-- /CAPTION -->
</P>


<A NAME="311"><H2>Dynamically Creating Access Tables Based on Excel Worksheets</H2></A>

<P>The preceding sample exposes the values in a spreadsheet through a 
recordset. If your application must regularly work with the data in a spreadsheet, you 
can improve performance by copying the spreadsheet values to a local table 
within Access. In addition, an application can reduce its demand for connection 
resources by copying spreadsheet values to local tables when it requires 
simultaneous access to several different spreadsheet ranges. The following sample 
programmatically creates a table that has an index for a spreadsheet range and 
then populates the table with values from the range. Incidentally, the sample 
uses the new Identity data type to specify the start and step values for the table's 
index field (
<I>MyID</I>).</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub createTableFromXL()
On Error GoTo createTableTrap
Dim cnn1 As ADODB.Connection
Dim cnn2 As New ADODB.Connection
Dim rst1 As ADODB.Recordset
Dim rst2 As ADODB.Recordset
Dim cat1 As ADOX.Catalog
Dim tbl1 As ADOX.Table
Dim pk1 As ADOX.Index

'Set catalog and table objects.
    set cnn1 = CurrentProject.Connection
    Set cat1 = New ADOX.Catalog
    cat1.ActiveConnection = cnn1
    Set tbl1 = New ADOX.Table

'Define table named gas and append it
'to the Tables collection.
    With tbl1
        .Name = &quot;gas&quot;
        .Columns.Append &quot;Date&quot;, adDate
        .Columns.Append &quot;Miles&quot;, adDouble
        .Columns.Append &quot;Gallons&quot;, adDouble
        .Columns.Append &quot;PricePerGallon&quot;, adCurrency
    End With
    cat1.Tables.Append tbl1

    strSQL = &quot;ALTER TABLE Gas ADD COLUMN MyID Identity(2,2)&quot;
    cnn1.Execute strSQL
    
    Set pk1 = New ADOX.Index
    With pk1
        .Name = &quot;MyPrimaryKey&quot;
        .PrimaryKey = True
        .Unique = True
        .IndexNulls = adIndexNullsDisallow
    End With
    pk1.Columns.Append &quot;MyID&quot;
    tbl1.Indexes.Append pk1
    
'Make connection to Excel source.
    cnn2.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
       &quot;Data Source=C:\Programming Access\Chap09\mygas.xls;&quot; &amp; _
       &quot;Extended Properties=Excel 8.0;&quot;
       
'Open read-only recordset based on Excel source.
'Recall default is read-only.
    Set rst1 = New ADODB.Recordset
    rst1.Open &quot;gas&quot;, cnn2, , , adCmdTable
            
            
'Open read-write recordset based on local table
'named gas.
    Set rst2 = New ADODB.Recordset
    rst2.ActiveConnection = cnn1
    rst2.CursorType = adOpenKeyset
    rst2.LockType = adLockOptimistic
    rst2.Open &quot;gas&quot;
    
    Do Until rst1.EOF
        With rst2
            .AddNew
            .Fields(&quot;Date&quot;) = rst1.Fields(&quot;Date&quot;)
            .Fields(&quot;Miles&quot;) = rst1.Fields(&quot;Miles&quot;)
            .Fields(&quot;Gallons&quot;) = rst1.Fields(&quot;Gallons&quot;)
            .Fields(&quot;PricePerGallon&quot;) = _
                rst1.Fields(&quot;Price Per Gallon&quot;)
            .Update
        End With
        rst1.MoveNext
    Loop
    
createTableExit:
    Exit Sub

createTableTrap:
    If Err.Number = -2147217857 Then
        cat1.Tables.Delete &quot;gas&quot;
        Resume
    Else
        Debug.Print Err.Number; Err.Description
        Resume createTableExit
    End If

End Sub
</pre>
</td>
</tr>
</table></P>


<P>The procedure above is lengthy because it performs several discrete but related functions. To create a local table with Excel spreadsheet values, the sample needs a pair of 
<I>Connection </I>and 
<I>Recordset </I>objects. These objects provide simultaneous connectivity to the spreadsheet and the local table so that the procedure can copy a row from one data source to the other. To define a local table programmatically within Access, the code declares 
<I>Catalog</I>, 
<I>Table</I>, and 
<I>Index </I>objects.</P>

<p>
Before copying the data from Excel, the procedure prepares a local table to accept them. It starts by assigning the connection for the current project to the 
<I>cnn1 </I>reference. Since 
<I>cnn1 </I>refers to the native project connection, there is no need to include the 
<I>New </I>keyword in its declaration. On the other hand, the procedure does create new instances of the <I>Catalog </I>and 
<I>Table </I>objects (and their declarations reflect this by the inclusion of 
<I>New</I>). It then uses ADO code to define and append fields for holding spreadsheet values. However, it reverts to SQL code for specifying the start and step values for the index. This capability depends completely on built-in Jet engine functionality. Therefore, the SQL code is specific to the Jet database engine. After completing the definition of the index and appending it to the table, the procedure opens a connection to the spreadsheet. (This sample uses the same spreadsheet as the preceding one.)</P>

<p>
Any attempt to redefine an existing table generates error number -2147217857. The procedure deletes the old table and resumes adding the new table. In a full-scale application, you might want to archive the old table.</P>


<p>
The procedure prepares for copying values by creating two 
<I>Recordset </I>objects&#8212;one for the spreadsheet and one for the local table. The code uses 
the default cursor for the spreadsheet because it just reads values sequentially from it, but it uses an <I>adOpenKeyset </I>cursor type for the link to the local table so 
that it can add records. Since Access can exactly duplicate the computations of 
Excel, there is no need to copy computed fields. This keeps your table's field 
values independent of one another so that your table is normalized.</P>


<A NAME="312"><H2>Running Excel Procedures from an Access Procedure</H2></A>

<P>In the following procedure, 
<I>runXL</I>, Access uses the 
<I>GetObject </I>function to 
create an instance of the Excel 
<I>Application </I>object that contains the 
<I>MyGas </I>workbook shown in Figure 9-2. It sets the 
<I>Visible </I>property of the 
<I>Application </I>and 
<I>Window </I>objects to 
<I>True</I>. Then it invokes the 
<I>Application </I>object's 
<I>Run </I>method for the 
<I>computeOnGas </I>procedure in the ThisWorkbook folder of the MyGas.xls file. After the 
<I>computeOnGas </I>procedure from the Excel file returns control to Access, the 
<I>runXL </I>procedure invokes the 
<I>Save </I>method for the ActiveWorkbook in Excel. This commits the changes to storage and avoids a prompt asking whether to do that when the next line invokes the 
<I>Quit </I>method. If you want to close Excel without saving the changes and without a 
prompt that asks whether to save them, you set the workbook's 
<I>Saved </I>property to 
<I>True</I> before invoking the 
<I>Quit </I>method. (See the commented line for the correct 
syntax.) You retrieve the automation resources by setting the automation object reference to <I>Nothing</I>.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub runXL()
Dim myXLWrkBk As Excel.Workbook

'Open connection to XL workbook and make visible.
    Set myXLWrkBk = GetObject(&quot;c:\Programming Access\Chap09\MyGas.xls&quot;)
    myXLWrkBk.Application.Visible = True
    myXLWrkBk.Application.Windows(&quot;MyGas.xls&quot;).Visible = True
    
'Run procedure in ThisWorkBook folder.
    myXLWrkBk.Application.Run &quot;ThisWorkBook.computeOnGas&quot;

'Close automation object.
'Either invoke the Save method or set the Saved
'property to True to avoid a prompt about saving changes.
    myXLWrkBk.Application.ActiveWorkbook.Save
'    myXLWrkBk.Application.ActiveWorkbook.Saved = True
    myXLWrkBk.Application.Quit
    Set myXLWrkBk = Nothing
    
End Sub
</pre>
</td>
</tr>
</table></P>


<P>Figure 9-4 shows the worksheet after 
<I>computeOnGas</I> runs. Notice that it computes summary information two rows below the table's last row, and it adds a new column that displays the miles traveled per day between refills. 
The procedure also resizes the columns so that they fit their widest entry.</P>


<P><A HREF="javascript:fullSize('F09qh04x.htm')"> <img src="Images/F09qh04.JPG" width=404 height=234 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 9-4.</B> <I>An excerpt from the output of the </I>computeOnGas <I>procedure. Notice the new column of data and the resized columns.</I><!-- /CAPTION -->
</P>


<p>
The 
<I>computeOnGas </I>procedure involves nothing more than standard 
VBA, but it uses objects, properties, and methods that are unique to Excel. When 
you perform automation, you inevitably require some knowledge of at least one 
other object model&#8212;namely the object model for the Office application that you 
are automating. One advantage of using the 
<I>Run </I>method, as in the 
<I>runXL </I>procedure, is that it lets individual developers specialize in particular object 
models. When a developer wants to use a standard function in an unfamiliar 
application, he or she can copy a procedure designed by another developer. 
Even without detailed knowledge of an application, a developer can invoke the 
<I>Run </I>method for the copied procedure.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
Sub computeOnGas()
Dim mySheet As Worksheet
Dim iRow As Integer, lastRow As Integer
Dim sumDays As Long

'Set reference to first worksheet.
    Set mySheet = Worksheets(1)
    lastRow = Range(&quot;gas&quot;).Rows.Count
    
'Assign column heading.
    mySheet.Cells(1, 9) = &quot;Miles per Day&quot;
    
'Compute miles per day.
    For iRow = 3 To lastRow
        mySheet.Cells(iRow, 9) = _
            Format(Range(&quot;gas&quot;).Cells(iRow, 2) / _
            Range(&quot;gas&quot;).Cells(iRow, 7), _
            &quot;0.##&quot;)
        sumDays = sumDays + mySheet.Cells(iRow, 7)
    Next iRow

'Compute summary statistics.
    mySheet.Cells(Range(&quot;gas&quot;).Rows.Count + 2, 1).Select
    ActiveCell.Formula = &quot;Summary&quot;
'Compute total miles.
    ActiveCell.Offset(0, 1).Activate
    ActiveCell.Formula = &quot;=Sum(b2:b&quot; &amp; lastRow &amp; &quot;)&quot; &amp; &quot;&quot;
'Compute total gallons.
    ActiveCell.Offset(0, 1).Activate
    ActiveCell.Formula = &quot;=Sum(c2:c&quot; &amp; lastRow &amp; &quot;)&quot; &amp; &quot;&quot;
'Compute total gas dollars.
    ActiveCell.Offset(0, 5).Activate
    ActiveCell.Formula = &quot;=Sum(h2:h&quot; &amp; lastRow &amp; &quot;)&quot; &amp; &quot;&quot;
'Compute days since last refill.
    ActiveCell.Offset(0, -1).Activate
    ActiveCell.Formula = &quot;=Sum(g3:g&quot; &amp; lastRow &amp; &quot;)&quot; &amp; &quot;&quot;
'Compute price per gallon.
    mySheet.Cells(Range(&quot;gas&quot;).Rows.Count + 2, 4).Select
    ActiveCell.Formula = &quot;=H&quot; &amp; (lastRow + 2) &amp; &quot;/C&quot; &amp; (lastRow + 2)
'Compute miles per gallon.
    ActiveCell.Offset(0, 1).Activate
    ActiveCell = Format(mySheet.Cells(lastRow + 2, 2) / _
        mySheet.Cells(lastRow + 2, 3), &quot;0.###&quot;)
    ActiveCell.Font.Bold = True
'Compute cents per mile.
    ActiveCell.Offset(0, 1).Activate
    ActiveCell = Format(mySheet.Cells(lastRow + 2, 8) / _
        mySheet.Cells(lastRow + 2, 2), &quot;0.###&quot;)
'Compute miles per day.
    ActiveCell.Offset(0, 3).Activate
    temp = mySheet.Cells(lastRow + 2, 2)
    temp2 = sumDays
    ActiveCell = Format(mySheet.Cells(lastRow + 2, 2) / sumDays, &quot;0.###&quot;)

'Resize columns to show values.
   Worksheets(&quot;Sheet1&quot;).Columns(&quot;a:I&quot;).AutoFit

End Sub
</pre>
</td>
</tr>
</table></P>


</BODY>
</HTML>




