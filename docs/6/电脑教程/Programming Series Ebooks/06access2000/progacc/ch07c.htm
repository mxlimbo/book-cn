<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Class Modules</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07b.htm", "ch07d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="230"><H1>Class Modules</H1></A>

<P>Standalone class modules differ from form and report class modules 
in several ways.</P>

<P>First, standalone class modules do not have a built-in user interface, 
as form and report class modules do. This makes standalone class modules 
more suited to tasks that do not require an interface, such as performing 
calculations, looking up data, or modifying a database. When form or report modules 
require computationally intensive tasks, they can call a standalone class module.</P>

<P>Second, standalone class modules offer <I>Initialize 
</I>and <I>Terminate </I>events that enable operations that need to take place at the opening and closing of 
a class instance. Report and form modules do not have these events, but you 
can perform similar functions with the <I>Load 
</I>and <I>Close </I>events.</P>

<P>Third, you must use the <I>New </I>keyword to create instances of 
standalone class modules. Report and form class modules also let you create instances 
with the <I>DoCmd OpenForm </I>and <I>OpenReport 
</I>methods as well as by referencing the report or form class module's properties or methods. For 
example, <I>Form_MyForm.SetFocus </I>opens the <I>MyForm 
</I>form.</P>

<P>You can create a standalone class module from the Insert menu in 
VBE. (The same menu offers commands for building a standard module or a procedure.) After creating a class module shell, you can populate it with procedures and declarations, which equip it with custom properties and methods.</P>


<A NAME="231"><H2>Custom Property Functions and Custom Methods</H2></A>

<P>Special property functions make it easier to develop any combination of 
read-only, write-only, and read/write properties for your classes. If your 
application permits, you can define properties by simply declaring a public variable. 
When a class module defines a property with a public variable, it is always a 
read/write property. The ability to declare custom properties lets you extend the 
basic Access functionality for forms and reports. In addition, these property 
functions allow you to create powerful standalone classes.</P>

<P>Your applications can also build custom methods into classes. You can use subprocedures or function procedures to accomplish this. By selectively exposing variables and procedures with the <I>Public 
</I>keyword, you can narrowly define what methods and properties they expose. This lets your applications 
define interfaces to your class objects that perform in very specific ways.</P>


<A NAME="232"><H2>Instantiating Classes</H2></A>

<P>The public methods and procedures support programmatic access by 
procedures outside the class. You must first instantiate the class in a host procedure within another module, using the <I>New </I>keyword. (You use the same keyword to instantiate objects from other classes, such as ADO <I>Connection </I>and <I>Recordset </I>objects. In fact, your applications can instantiate multiple copies of a custom class at 
the same time&#8212;just like the ADO classes.) After instantiating a class, the code in your host procedure manipulates the instance of the class, not the class itself. You can change a property in one instance of a form, but when you instantiate a second instance of the form it appears with the default property setting.</P>


<A NAME="233"><H2>Custom Classes and Events</H2></A>

<P>Although VBA in Access lets you build custom classes with their own 
properties and methods, you cannot build custom events within those classes. You 
can, however, design a class that hooks onto a built-in class or type library that 
you attach. For example, you can build a class module that launches VBA code 
in response to the <I>ItemAdded </I>and <I>ItemRemoved 
</I>events of the <I>References </I>collection. This collection tracks links to external type libraries and ActiveX 
controls. After referencing a library, such as the Microsoft ActiveX Data Objects 2.1 
Library, you can build custom events around the ADO events for the 
<I>Connection </I>and <I>Recordset </I>objects. These events can enable asynchronous data access 
that lets your application respond to users even while it remains ready to 
respond to a completed connection or the availability of a fetched set of records.</P>


<P>You use the <I>WithEvents </I>keyword within a 
<I>Public </I>declaration to point to an object reference that monitors and reports events within an ActiveX 
control. This keyword is valid only in class modules. You can define multiple variables within a module with the <I>WithEvents 
</I>keyword, but you cannot create arrays with it. Also, a declaration cannot contain both the <I>WithEvents </I>and <I>New </I>keywords.</P>



</BODY>
</HTML>




