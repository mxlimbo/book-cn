<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Manipulating Forms with VBA</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05e.htm", "ch05g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="192"><H1>Manipulating Forms with VBA</H1></A>

<P>This section describes some techniques for automating the use of forms. 
In particular, it illustrates how to enumerate forms and controls, techniques 
for programmatically hiding and showing forms, and methods for listing the 
form in another project.</P>


<A NAME="193"><H2>Enumerating Forms and Controls</H2></A>

<P>The <I>AllForms</I> collection, which belongs to the 
<I>CurrentProject</I> object, contains an item for each form in a project. An application can enumerate 
the <I>AccessObject</I> objects in the 
<I>AllForms</I> collection to find all the forms in a 
project. The <I>AccessObject</I> object's<I> 
Name</I> and <I>IsLoaded</I> properties are particularly 
convenient: The <I>Name</I> property represents the name of each form in a project, 
and the <I>IsLoaded</I> property indicates whether the form is open.</P>


<P>The following procedure uses the <I>Count</I> property of the 
<I>AllForms</I> collection to determine how many forms are in the current project. Then it prints 
the name and loaded status of each form in the project. (The 
<I>AllForms</I> collection is indexed beginning with 
<I>0</I>; therefore, the <I>For</I> loop runs from 
<I>0</I> to one less than the total number of forms in the project.)</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub ListAllForms()
Dim int1 As Integer

'Print the number of forms in the project.
    Debug.Print CurrentProject.AllForms.Count
    Debug.Print

'Enumerate each form in the project.
    For int1 = 0 To CurrentProject.AllForms.Count - 1
        Debug.Print CurrentProject.AllForms.Item(int1).Name
        Debug.Print CurrentProject.AllForms.Item(int1).IsLoaded
        Debug.Print
    Next int1

End Sub
</PRE>
</TD></TR></TABLE></P>
 

<P>The <I>Forms</I> collection contains the set of all open forms in a project, 
and the <I>Controls</I> collection contains the set of controls on a form. Your 
applications can use these collections to find a specific form and an individual control 
on that form.</P>

<P>The following procedure enumerates all open forms in a project. For 
each open form, it lists the form's controls by name and type. The 
<I>Control</I> object's <I>ControlType</I> property indicates the type of control. You can use the 
<I>TypeOf</I> keyword in a similar way.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub ListControlsOnOpenForms()
Dim frm1 As Form, ctl1 As Control

'Enumerate all open forms.
    For Each frm1 In Forms
        Debug.Print frm1.Name

'Enumerate each control on a specific open form.
        For Each ctl1 In frm1.Controls
            Debug.Print &quot;     &quot; &amp; ctl1.Name &amp; _
                &quot;, &quot; &amp; _
                IIf(ctl1.ControlType = 100, &quot;label&quot;, &quot;not label&quot;)
        Next ctl1
    Next frm1

End Sub
</PRE>
</TD></TR></TABLE></P>
 


<P>Notice that the procedure decodes the value of the 
<I>ControlType</I> property. When this value is 
<I>100</I>, the control is a label. In a practical decoding 
exercise, you are more likely to use a <I>Select 
Case</I> statement instead of the <I>Immediate 
If</I> function in the preceding sample. The <I>Immediate If 
</I>function, however, works adequately for decoding a single value. (You can use the Object Browser to 
find the <I>ControlType</I> values.)</P>


<A NAME="194"><H2>Hiding and Showing Forms</H2></A>

<P>You can use VBA and the <I>AllForms</I> collection along with some other objects to make forms invisible in the Database window. If you also make the form invisible in your application, the user might think that you removed the form. Hidden forms can still expose values for use by the other objects in an application.</P>

<P>
The following pair of procedures hide and unhide an Access form:</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub HideAForm(frmName As String)
    
'Close form if it is open so that it can be hidden.
    If CurrentProject.AllForms(frmName).IsLoaded = True Then
        DoCmd.Close acForm, frmName
    End If

'Set form's Hidden property and do not show hidden
'objects in Database window.
    Application.SetHiddenAttribute acForm, frmName, True
    Application.SetOption &quot;Show Hidden Objects&quot;, False

End Sub


Sub UnhideAForm(frmName As String)

'If form is hidden, set form's hidden property to False
'and open form.
    If Application.GetHiddenAttribute(acForm, frmName) = True Then
        Application.SetHiddenAttribute acForm, frmName, False
        DoCmd.OpenForm frmName
    End If

End Sub
</PRE>
</TD></TR></TABLE></P>
 

<P>The <I>SetHiddenAtrribute</I> method sets or clears the Hidden attribute 
from the Database window for database objects, such as forms, reports, and 
queries. This method takes two arguments, an 
<I>AccessObject</I> object and a Boolean argument that indicates whether the object is to be hidden. Calling this method 
with an object and the value <I>True </I>is the same as setting the object's 
<I>Hidden</I> property in the Database window.</P>

<P>By itself, <I>SetHiddenAtrribute</I> just grays the object; users can still select 
and use it. To make hidden objects invisible to the user, choose Options from 
the Tools menu, click Hidden Objects, and then click OK.</P>

<P>Before invoking <I>SetHiddenAttribute</I>, you should check the 
<I>AccessObject</I> object's <I>IsLoaded</I> property. If the object is loaded, you should close it 
before attempting to invoke 
<I>SetHiddenAttribute</I>; calling the method with an open 
object generates an error.
</P>


<A NAME="195"><H2>Enumerating Forms in Another Project</H2></A>

<P>VBA does not restrict you to working with database objects in the current 
project. For example, you can test for the existence of forms in another instance of 
an Access application. One essential step in this process is to compare the 
<I>Name </I>property of <I>AllForms </I>members to the name of the target form. There is also 
a new trick to learn: You open a new instance of an Access 
<I>Application</I> form with the target database in it, and then you use the current project of that 
instance as the source for your <I>AllForms </I>collection. This subtle refinement lets you 
process database objects in another database file.</p>

<p>The following two procedures implement this with VBA. 
<I>FormToLookFor</I> sets the database path to the other database file and gathers the name of 
the target form. The second procedure, 
<I>FormExistsInDB</I>, searches for a target form. You call the second form from the first one.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub FormToLookFor()
Dim strDB As String
Dim strFormName As String

'Search for forms in the Northwind database.
    strDB = &quot;C:\Program Files\Microsoft &quot; &amp; _
        &quot;Office\Office\Samples\Northwind.mdb&quot;
'Get the name of the form to search for from the user.
    strFormName = InputBox(&quot;Enter the name of the form to search for: &quot;, _
        &quot;Programming Microsoft Access 2000&quot;)
    
'Call FormExistsInDB to check whether the form exists.
    FormExistsInDB strDB, strFormName

End Sub


Sub FormExistsInDB(strDB As String, strFormName As String)
Dim appAccess As Access.Application, int1 As Integer
     
'Return reference to Microsoft Access Application.
    Set appAccess = New Access.Application
    
'Open a database in the other application.
    appAccess.OpenCurrentDatabase strDB
    
'Check whether the form exists.
    For int1 = 0 To (appAccess.CurrentProject.AllForms.Count - 1)
        If (appAccess.CurrentProject.AllForms.Item(int1).Name = _
            strFormName) Then
            MsgBox &quot;Form &quot; &amp; strFormName &amp; &quot; exists in the.&quot;, _
                &amp; strDB &amp; &quot; database.&quot;, _
                vbInformation, &quot;Programming Microsoft Access 2000&quot;
            GoTo FormExistsExit
        End If
    Next int1

'Report that form does not exist.
    MsgBox &quot;Form &quot; &amp; strFormName &amp; &quot; does not exist in the.&quot;, _
        &amp; strDB &amp; &quot; database.&quot;
    
'Close other Access application.
FormExistsExit:
    appAccess.CloseCurrentDatabase
    Set appAccess = Nothing

End Sub
</PRE>
</TD></TR></TABLE></P>
 


<P>The first procedure sets <I>strDB</I> equal to a typical path for the 
Northwind database. If you have your copy of Northwind elsewhere, you should 
update this path. An <I>InputBox</I> function prompts the user to input the name of the 
form to search for, and then the first procedure calls the second procedure.</P>


<P>The second procedure sets and opens a reference for the new 
instance of the Access application, and then enters a loop that checks whether any 
of the forms in the new database match the target form name. The procedure 
reports whether it found the target form and frees its resources before returning.</P>


</BODY>
</HTML>




