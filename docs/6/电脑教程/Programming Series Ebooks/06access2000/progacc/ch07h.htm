<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Programmatically Editing Modules</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07g.htm", "ch08a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="266"><H1>Programmatically Editing Modules</H1></A>

<P>Since you can perform so many different tasks with standard modules, 
standalone class modules, and class modules for forms, your applications are likely to 
have many of these modules. This will eventually create a need for maintenance. 
One common maintenance requirement is the insertion or deletion of one or 
more lines of code in a set of modules. This section shows how to add a line to 
and remove a line from all the standard and standalone class modules, and then 
it shows the same for form class modules. Because the code for standard 
and standalone class modules is stored differently from the code for class 
modules for forms, the steps are slightly different.</P>


<A NAME="267"><H2>Editing Approaches</H2></A>

<P>The <I>Module </I>object offers an array of methods and properties that can help 
you programmatically edit modules. The samples in this section use the 
<I>InsertLines</I>, <I>Find</I>, and <I>DeleteLines 
</I>methods. These methods process both standard and 
class modules, including standalone class modules and report and form class 
modules. These are a subset of the methods and properties that support 
programmatically managing module content.</P>

<P>
You use the <I>InsertLines </I>method with a <I>Module 
</I>object to insert one or more lines into the module. Module line numbers start with 
<I>1</I> and extend through the <I>CountOfLines 
</I>property value for the module. The method takes a line 
number and a string argument. If you need to insert multiple lines into a 
module, add <I>vbCrLf </I>constants into the string expression representing the method's 
string argument. When you insert lines with this method, it moves down the 
remaining lines in the module.</P>

<P>
The <I>Find </I>method searches for a text string in a module. It returns a 
value of <I>True</I> if it finds the search text, and it returns 
<I>False</I> otherwise. If you know precisely where some text is, you can specify a starting line and column 
and an ending line and column. If you do not know where some search text 
resides in a module, leave the text position arguments blank and the function will 
return the values of the search text in the module. You can also designate 
pattern searches and case-restrictive searches.</P>

<P>
The <I>DeleteLines </I>method removes one or more lines of text from a 
module. The method takes two arguments: a start line and the total number of 
lines to remove from a module. You can use the <I>DeleteLines 
</I>method in combination with the <I>Find </I>method. You use the 
<I>Find </I>method to search for text in a module. You can then base the invocation of the 
<I>DeleteLines </I>method on the return value from the 
<I>Find </I>method.</p>

<A NAME="268"><H2>Inserting Text into Modules</H2></A>

<P>The procedures below combine the <I>AllModules 
</I>and <I>Modules </I>collections to edit the text in a collection of modules. Specifically, they insert a comment line 
at the beginning of each module, proclaiming it a standard module or a 
class module. The <I>EnumerateAllModulestoInsert 
</I>procedure loops through the members of the <I>AllModules 
</I>collection and calls the other procedure, which 
actually updates the target modules. Since the <I>InsertIntoModules 
</I>procedure requires an open module, the first procedure opens the module if it is not already 
open. Then, when the second procedure returns control to the first one, it closes 
the module again to restore its initial state.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllModulestoInsert()
Dim obj1 As AccessObject
    
'Loop through AllModules members.
'If module is open, call sub to insert lines;
'else open module first, then close afterwards.
    For Each obj1 In Application.CurrentProject.AllModules
        If obj1.IsLoaded = True Then
            InsertIntoModules obj1.Name
        Else
            DoCmd.OpenModule obj1.Name
            InsertIntoModules obj1.Name
            DoCmd.Close acModule, obj1.Name, acSaveYes
        End If
    Next obj1

End Sub


Sub InsertIntoModules(modname)
Dim strType As String, mod1 As Module

    Set mod1 = Modules(modname)
    
'Detect module type to determine which
'string to insert.
    If mod1.Type = 0 Then
        strType = &quot;'Standard Module&quot;
    Else
        strType = &quot;'Class Module&quot;
    End If
    mod1.InsertLines 1, strType
    Set mod1 = Nothing

End Sub
</pre>
</TD></TR></table></p>


<P>The <I>InsertIntoModules </I>procedure accepts a single argument&#8212;the 
name of the module to edit. It performs no iteration because the first procedure 
calls it once for each member in the <I>AllModules 
</I>collection. The procedure begins by setting a reference to the module named in the passed argument. Then it 
determines the type of module to which the reference points and sets a string 
variable to a comment naming the module type. After determining the text to 
insert, the procedure invokes the <I>InsertLines 
</I>method for the referenced module.</P>


<A NAME="269"><H2>Deleting Text from Modules</H2></A>

<P>The following two procedures delete a line from a procedure. In fact, 
they remove the line added by the preceding pair of procedures. The design of 
these next two procedures is flexible enough so that you can easily extend them 
to accommodate the deletion of multiple selected lines from any set of modules.</P>

<P>The procedures follow the same general logic as the preceding pair, 
with one major difference: this pair uses the <I>Find 
</I>and <I>DeleteLines </I>methods to remove text instead of the 
<I>InsertLines </I>method. The <I>Find </I>method is often critical 
when you prepare to use the <I>DeleteLines </I>method because the 
<I>Find </I>method lets your code determine whether some text is there before it deletes any content. In 
this instance, the <I>Find </I>method looks for the word 
<I>Module </I>in the first 40 characters of the first line. The 
<I>DeletefromModules </I>procedure invokes the 
<I>DeleteLines </I>method to delete one line starting with the first line in the module. 
The <I>DeleteLines </I>method removes lines unconditionally. However, you can 
manually invoke the <I>Undo Delete </I>function to restore removed text.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllModulestoDelete()
Dim obj1 As AccessObject, dbs As Object
Dim mod1 As Module, frm1 As Form

'Loop through AllModules members.
'If module is open, call sub to delete line;
'else open module first, then close afterwards.
    For Each obj1 In Application.CurrentProject.AllModules
        If obj1.IsLoaded = True Then
            DeletefromModules obj1.Name
        Else
            DoCmd.OpenModule obj1.Name
            DeletefromModules obj1.Name
            DoCmd.Close acModule, obj1.Name
        End If
    Next obj1

End Sub


Sub DeletefromModules(modname)
Dim mod1 As Module

    Set mod1 = Modules(modname)
    
'Delete first line if first 40 characters
'contain &quot;Module&quot;.
    If mod1.Find(&quot;Module&quot;, 1, 1, 1, 40) = True Then
        mod1.DeleteLines 1, 1
    End If
    Set mod1 = Nothing

End Sub
</pre>
</TD></TR></table></p>

<A NAME="270"><H2>Inserting Text into Form Class Modules</H2></A>

<P>The following two procedures insert a line at the beginning of each form 
class module with the comment that it is a class module. Instead of looping 
through the <I>AllModules </I>collection, the first procedure loops through the 
<I>AllForms </I>collection. For each member of the 
<I>AllForms </I>collection, it calls the 
<I>InsertIntoForms </I>procedure.</P>

<P>
This second procedure assesses whether the passed form name is a 
class module. If it is, the procedure sets a reference to the module behind the 
form. This step exposes that module. The procedure closes by inserting the 
comment line into the module and setting the reference to 
<I>Nothing</I> to free its resources.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllFormsToInsert()
Dim obj1 As AccessObject

'Loop through AllForms members;
'if form is loaded invoke module to insert line,
'else open form first and then close afterwards.
    For Each obj1 In Application.CurrentProject.AllForms
        If obj1.IsLoaded Then
            InsertIntoForms obj1.Name
        Else
            DoCmd.openform obj1.Name
            InsertIntoForms obj1.Name
            DoCmd.Close acForm, obj1.Name, acSaveYes
        End If
    Next obj1

End Sub


Sub InsertIntoForms(frmname)
Dim mod1 As Module, strType As String

'If Form has module, set reference to it
'and insert line into the module.
'Free reference resource when done.
    If Forms(frmname).HasModule = True Then
        Set mod1 = Forms(frmname).Module
        strType = &quot;'Form Class Module&quot;
        mod1.InsertLines 1, strType
        Set mod1 = Nothing
    End If

End Sub
</pre>
</TD></TR></table></p>

<A NAME="271"><H2>Deleting Text from Form Class Modules</H2></A>

<P>The two procedures below remove the <I>Class Module 
</I>comment line from the first line of modules behind forms. As you can see, this pair's design mimics 
critical elements from the preceding pairs of procedures for inserting and 
deleting lines. This pair iterates through the <I>AllForms 
</I>collection, like the pair that added a comment line to the beginning of all form class modules in a project.</P>

<P>However, the second procedure in this pair uses the 
<I>Find </I>and <I>DeleteLines </I>methods to remove the first line in a module if it contains the word 
<I>Module </I>in the first 40 characters of its first line. This resembles the procedure for 
deleting lines from the <I>Modules </I>collection.</P>

<p><table CELLPADDING=5 WIDTH="95%"><TR><TD>
<pre>Sub EnumerateAllFormstoDelete()
Dim obj1 As AccessObject
    
'Loop through AllForms members;
'if form is loaded invoke module to remove line,
'else open form first and then close afterwards.
    For Each obj1 In Application.CurrentProject.AllForms
        If obj1.IsLoaded Then
            DeletefromForms obj1.Name
        Else
            DoCmd.openform obj1.Name
            DeletefromForms obj1.Name
            DoCmd.Close acForm, obj1.Name, acSaveYes
        End If
    Next obj1

End Sub


Sub DeletefromForms(frmname)
Dim mod1 As Module, strType As String

'If form has module, then check contents of first line
'for &quot;Module&quot;, and delete the first line if it is present.
'Free module reference resource when done.
    If Forms(frmname).HasModule = True Then
        Set mod1 = Forms(frmname).Module
        If mod1.Find(&quot;Module&quot;, 1, 1, 1, 40) = True Then
            mod1.DeleteLines 1, 1
        End If
        Set mod1 = Nothing
    End If
End Sub</pre>
</TD></TR></table></p>

</BODY>
</HTML>




