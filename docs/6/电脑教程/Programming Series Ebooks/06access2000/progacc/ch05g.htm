<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Using Form Classes</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05f.htm", "ch06a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="196"><H1>Using Form Classes</H1></A>

<P>Any Access 2000 form with a module behind it is a form class; you can 
create new instances of the class with the <I>New 
</I>keyword just as you do with any generic Access class. One advantage of form classes is that they have all the 
standard form properties and methods as well as your custom additions.</P>


<A NAME="197"><H2>Viewing Form Class Properties and Methods</H2></A>

<P>You can view the properties and methods of form classes using the 
Object Browser. You select the Project's name in the Project/Library drop-down list 
box and select a form class name to see its properties and methods.</P>

<p>The Object Browser in Figure 5-15 displays a subset of the members 
in the <I>Form_frmButtonSwitchboard</I> class. Recall that this form navigates to 
any of three other forms via event procedures. The event procedures are 
class methods, such as <I>cmdGoHere_click</I>. The buttons, such as 
<I>cmdGoHere</I>, are class properties.</P>

<P><A HREF="javascript:fullSize('F05qh15x.htm')"> <img src="Images/F05qh15.JPG" width=404 height=264 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-15.</B> <I>Methods and properties of a form class.</I><!-- /CAPTION -->
</P>


<A NAME="198"><H2>Manipulating Form Classes</H2></A>

<P>The following procedure references class modules in Access 2000. It has 
several code segments that manipulate the basic form class in progressively 
more sophisticated ways. Working with form classes and their instances 
resembles working with a cookie cutter and cookies. The cutter is the form class, and 
the cookies are instances of it. Changes to a cookie do not impact the cutter. 
On the other hand, changes to the cutter impact all cookies after the change.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub testformclass()
Dim frm1 As Form

'First code segment
'Saves reference to instance of a form class in frm1.
'Can reference with either class or reference name.
    Set frm1 = Form_frmCustomers
    frm1.Caption = &quot;foo&quot;
    MsgBox Form_frmCustomers.Caption
    MsgBox frm1.Caption
    DoCmd.Close acForm, frm1.Name

'Second code segment
'Programmatically alters and opens default form instance.
'Does not set reference to instance.
'Clears instance by setting Visible to False.
    Form_frmCustomers.Caption = &quot;foo&quot;
    Form_frmCustomers.Visible = True
    MsgBox Form_frmCustomers.Caption
    If MsgBox(&quot;Do you want to close form instance?&quot;, vbYesNo, _
        &quot;Programming Microsoft Access 2000&quot;) = vbYes Then
        Form_frmCustomers.Visible = False
    End If

'Third code segment
'Open form in Design view to modify class properties.
'Open in Form view to see impact of Design view change.
    DoCmd.OpenForm &quot;frmCustomers&quot;, acDesign
    Forms(&quot;frmCustomers&quot;).Caption = &quot;foo&quot;
    MsgBox Form_frmCustomers.Caption
    DoCmd.Close acForm, &quot;frmCustomers&quot;, acSaveYes
    Form_frmCustomers.Visible = True
    MsgBox Form_frmCustomers.Caption
    
'Fourth code segment
'Restore class caption property.
    DoCmd.OpenForm &quot;frmCustomers&quot;, acDesign
    Set frm1 = Form_frmCustomers
    frm1.Caption = &quot;Customers&quot;
    DoCmd.Close acForm, frm1.Name, acSaveYes
    Form_frmCustomers.Visible = True
    MsgBox Form_frmCustomers.Caption
        
End Sub
</PRE>
</TD></TR></TABLE></P>
 

<P>The first code segment assigns a form class to a reference. It creates an instance of the <I>Form_frmCustomers</I> class and assigns it to <I>frm1</I>. You can manipulate the instance using either the class or the reference name; the identical results from the two message boxes confirm this. Changing the instance of a form class does not alter the class itself.</P>


<P>You do not need references to designate or modify the properties of 
form class instances. The second segment accomplishes the same task as the 
initial one without creating a pointer to the form class. This segment also includes 
a prompt to ask the user whether he or she wants to close the form instance. 
(An instance survives for the life of the procedure that creates it unless your 
code terminates it sooner.)</P>


<P>The third code segment opens a form in Design view and manipulates 
its properties. Unlike when you programmatically modify the properties of a 
form in Form view, changes to properties in Design view are persistent after you 
save the form. The last two lines of the third segment open an instance of the 
form class in Form view. For the first time in the procedure, the form opens with 
the caption &quot;foo&quot;.</P>


<P>The fourth code segment restores the form class's caption to its 
original value of &quot;Customers&quot;.</P>


<A NAME="199"><H2>References to Form Class Instances </H2></A>

<P>The form class sample below drills down further into form classes. You 
can easily test the behavior of this procedure by using the 
<I>frmFirstWithControls </I>form, which includes a button that launches the 
<I>testformclass2</I> procedure. 
<I>testformclass2</I> processes multiple instances of a form class.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Sub testformclass2()
On Error GoTo testclass2Trap
Dim frm1 As Form
Dim frm2 As New Form_frmCustomers
Dim int1 As Integer

'Show caption of frm2 before editing the property.
    MsgBox &quot;Frm2 default caption is &quot; &amp; frm2.Caption, _
        vbInformation, &quot;Programming Microsoft Access 2000&quot;

'Set frm1 as a reference to frmCustomers class. 
    Set frm1 = Form_frmCustomers
    frm1.Caption = &quot;Caption from frm1 instance&quot;

'Reset caption for frm2 instance.
    frm2.Caption = &quot;Caption from frm2 instance&quot;
    
'Show the captions of the class instances referenced by
'frm1 and frm2.
    frm1.SetFocus
    frm2.SetFocus
    MsgBox frm1.Caption, vbInformation, _
        &quot;Programming Microsoft Access 2000&quot;
    MsgBox frm2.Caption, vbInformation, _
        &quot;Programming Microsoft Access 2000&quot;
        
'Close form instances by their references.
    frm1.SetFocus
    DoCmd.Close
    frm2.SetFocus
    DoCmd.Close
        
testclass2Exit:
    Exit Sub
    
testclass2Trap:
    If Err.Number = 2467 Then
'Trap attempt to print caption for closed form.
        MsgBox &quot;Cannot print caption of closed form&quot;, _
            vbInformation, &quot;Programming Microsoft Access 2000&quot;
        Resume Next
    Else
        Debug.Print Err.Number, Err.Description
        Resume testclass2Exit
    End If
  
End Sub
</PRE>
</TD></TR></TABLE></P>
 

<P>It is convenient to use references to form class instances when you 
deal with more than one instance. The sample above uses the references 
<I>frm1</I> and <I>frm2</I>. After declaring 
<I>frm1</I> as a general form class, the code assigns a 
reference to an instance of the 
<I>Form_frmCustomers</I> class to it. The <I>frm2 
</I>declaration statement points it at an instance of the same form class. Therefore, 
<I>frm1</I> and <I>frm2</I> are two separate instances of the identical form class.</P>


<P>The second <I>Dim</I> statement creates an instance based on a form class 
using the <I>New</I> keyword. (You must refer to a form class with the 
<I>Form_</I> prefix when using the <I>New</I> keyword to create an instance.) After creating the references, 
you can invoke standard form properties and methods for the objects to which 
the variables refer. For example, the procedure resets the 
<I>Caption</I> property of <I>frm2</I> and then assigns the focus first to 
<I>frm1</I> and then to <I>frm2</I>. This opens both 
forms with one behind the other on the Access screen.</P>


<P>You can close a form instance by giving it the focus and then 
invoking the <I>DoCmd</I> object's <I>Close </I>method.</P>


</BODY>
</HTML>




