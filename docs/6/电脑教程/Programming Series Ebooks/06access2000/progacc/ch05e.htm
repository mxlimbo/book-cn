<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Looking Up and Displaying Data</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05d.htm", "ch05f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="184"><H1>Looking Up and Displaying Data</H1></A>

<P>A lookup form is similar to a parameter query with a custom front end; the 
form simply collects input that drives a query. When you use forms and VBA, 
you can be flexible in how you gather input as well as in the type of 
information that you can return to users.</P>


<A NAME="185"><H2>Creating a Lookup Form</H2></A>

<P>The easiest way to implement a form that looks up information is to have 
the user type the lookup information in a text box and click a button to start 
the search. The text box should be unbound because it doesn't enter 
information into the database; it simply gathers search information from the user. A 
query uses the value specified in the text box to find the matching information.</P>


<P>Figure 5-9 shows a form that opens the 
<I>qprHistoryfromTextBox</I> query when the user types a customer ID in the text box and clicks Look It Up. 
The query finds the total quantity ordered of each product bought by that customer.</P>


<P><A HREF="javascript:fullSize('F05qh09x.htm')"> <img src="Images/F05qh09.JPG" width=404 height=299 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-9.</B> <I>A form that performs a simple lookup operation.</I><!-- /CAPTION -->
</P>


<P>Figure 5-10 shows the 
<I>qprHistoryfromTextBox</I> query in Design view. Notice that it is a simple query that sums the 
<I>Quantity</I> field of the <I>Order Details</I> table for each product the customer ordered. (The 
WHERE<I> </I>clause in the last column limits the query to rows in which the 
<I>CustomerID</I> field matches the value in the form's text box.)</P>


<P><A HREF="javascript:fullSize('F05qh10x.htm')"> <img src="Images/F05qh10.JPG" width=404 height=193 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-10.</B> <I>The </I>qprHistoryfromTextBox<I> query in Design view.</I><!-- /CAPTION -->
</P>


<P>The final element is a short VBA event procedure that fires when 
the user clicks Look It Up. The procedure has a single line that opens the query <I>qprHistoryfromTextBox</I>:</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Private Sub cmdLookup_Click()
    DoCmd.OpenQuery &quot;qprHistoryfromTextBox&quot;
End Sub
</PRE>
</TD></TR></TABLE></P>
 

<A NAME="186"><H3>Using a combo box for user input</H3></A>

<P>The form shown in Figure 5-11 has a better design than the one in Figure 
5-9. Instead of forcing the user to guess the customer ID, it lets the user select 
the customer from a combo box. A procedure for the combo box's 
<I>After Update</I> event opens the 
<I>qprHistoryfromComboBox</I> query that uses the customer 
selected by the user, so the command button is unnecessary.</P>


<P><A HREF="javascript:fullSize('F05qh11x.htm')"> <img src="Images/F05qh11.JPG" width=404 height=235 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-11.</B> <I>A better design for a lookup form.</I><!-- /CAPTION -->
</P>


<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>Combo box lookup forms can become prohibitively slow as the number of lookup items becomes large. In this situation, you have at least two choices. First, you can revert to the text box lookup form described above. Second, you can create a tiered system in which users make choices that restrict the range of items that a combo box makes available.
</BLOCKQUOTE></DIV></P>
 

<P>To give any combo box control over this functionality, follow these steps:</P>


<OL>
<P><LI>Set the control's <I>Row Source 
Type</I> property to <I>Table/Query </I>(the default).
</LI></P>

<P><LI>Set the control's <I>Row 
Source</I> property to a SQL string that returns the fields you want. (The SQL string for the sample is 
SELECT CUSTOMERID, COMPANYNAME FROM CUSTOMERS.)
</LI></P>

<P><LI>Set the control's <I>Column Count</I> property to <I>2</I>.
</LI></P>

<P><LI>Specify the column widths, separated by a semicolon. (The first 
value should always be <I>0</I>.)
</LI></P>
</OL>


<P>If you prefer, the Combo Box wizard can create the control for you. 
Simply ensure that the Control Wizards button on the Toolbox is depressed, 
and then add the combo box to the form.</P>


<A NAME="187"><H3>Displaying results in a message box</H3></A>

<P>The preceding samples suffer from two weaknesses. First, they pass values 
to and expose values from queries. This means that users can inadvertently 
damage the query's design. Second, a user can also modify the data 
underlying a query.</P>


<P>The sample lookup form at the top of Figure 5-12 remedies both of 
these deficiencies by using VBA and ActiveX Data Objects (ADO). The input form 
has the same look and feel as the form in Figure 5-11. While the return sets of 
the queries opened by both forms are identical, they are displayed in different 
ways. The sample in Figure 5-12 displays its return set in message boxes rather 
than in a query window in Datasheet view. (The sample uses as many message 
boxes as necessary to display its return set.) This protects the underlying data 
from inadvertent damage by a user.</P>


<P><A HREF="javascript:fullSize('F05qh12x.htm')"> <img src="Images/F05qh12.JPG" width=404 height=767 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-12.</B> <I>The form at the top displays its result set in message boxes so that users can view the result set but not alter its underlying data.</I><!-- /CAPTION -->
</P>


<P>The following procedure fires on the <I>After 
Update</I> event of the combo box in Figure 5-12. It executes a command based on a query to develop a 
return set. It then assigns the return set from the command to a recordset and 
displays the recordset using one or more message boxes.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Private Sub cboLookup_AfterUpdate()
Dim ctl1 As Control
Dim cmd1 As Command
Dim rst1 As Recordset, str1 As String

'Set reference to ComboBox control.
Set ctl1 = Me.Controls(&quot;cboLookup&quot;)

'Create and define command.
'Use ComboBox value in SQL string for command.
    Set cmd1 = New ADODB.Command
    With cmd1
        .ActiveConnection = CurrentProject.Connection
        .CommandText = &quot;Select Customers.CompanyName, &quot; &amp; _
            &quot;Products.ProductName, &quot; &amp; _
            &quot;Sum([Order Details].Quantity) As TotalQuantity &quot; &amp; _
            &quot;From Products Inner Join ((Customers Inner Join Orders &quot; &amp; _
            &quot;ON Customers.CustomerID = Orders.CustomerID) &quot; &amp; _
            &quot;Inner Join [Order Details] ON &quot; &amp; _
            &quot;Orders.OrderID = [Order Details].OrderID) &quot; &amp; _
            &quot;ON Products.ProductID = [Order Details].ProductID &quot; &amp; _
            &quot;Where Customers.CustomerID = '&quot; &amp; ctl1.Value &amp; &quot;'&quot; &amp; _
            &quot;GROUP BY Customers.CompanyName, Products.ProductName;&quot;
        .CommandType = adCmdText
        .Execute
    End With

'Create recordset based on return set from SQL string.
    Set rst1 = New ADODB.Recordset
    rst1.Open cmd1, , adOpenKeyset, adLockOptimistic
    
'Loop through return set to display in message box(es)
'in blocks of 925 characters or less.
    Do Until rst1.EOF
        str1 = str1 &amp; rst1.Fields(0) &amp; &quot;, &quot; &amp; _
            rst1.Fields(1) &amp; &quot;, &quot; &amp; rst1.Fields(2)
        str1 = str1 &amp; vbCrLf
        If Len(str1) &gt; 925 Then
            str1 = str1 &amp; vbCrLf &amp; &quot;Click OK to see more &quot; &amp; _
                &quot;in another message box&quot;
            MsgBox str1, vbInformation, _
                &quot;Programming Microsoft Access 2000&quot;
            str1 = &quot;&quot;
        End If
        rst1.MoveNext
    Loop
    MsgBox str1, vbInformation, _
        &quot;Programming Microsoft Access 2000&quot;

End Sub
</PRE>
</TD></TR></TABLE></P>


<P>I could not use the SQL code from a query window in Design view in 
this procedure because the SQL string for 
<I>Command</I> objects does not support lookup fields. Therefore, I added the 
<I>Products</I> table to the query design so that I 
could report each product's name in the return set instead of just a product ID 
from the <I>Order Details</I> table. Adding this extra table further complicated the join 
logic for the query. (See <a href="ch04a.htm">Chapter 4</a> for an introduction to the SQL statement syntax.)</P>


<P>A <I>Do</I> loop steps through the recordset sequentially and writes its 
contents to a string. At the end of each record, it inserts a carriage return and a 
linefeed. If the string length exceeds 925 characters, the procedure inserts a blank 
line and an instruction to view the continuation of the sales history for the 
customer in the next message block. A message box can hold just over 1000 
characters. (The <I>testmsgbox</I> procedure in this chapter's sample database helps you 
determine the maximum number of characters that a message box can hold; 
each of the top 19 lines has two nonprinting characters.) Limiting additions to 
the current message box to 925 characters allows the message box to be 
filled without truncating any characters.</P>



<A NAME="188"><H2>Dynamically Displaying Information</H2></A>

<P>You can display data, such as a record, in a form, and you can even design 
a form so that users can view the record but not edit it. Figure 5-13 below shows a pair of forms that work together to let the user view 
a customer's record. The user selects a customer in the 
<I>frmCustomerLookup</I> form and clicks Show Customer In Form to open the 
<I>Customers</I> form, which displays the customer's record. (The 
<I>Allow Edits</I>, <I>Allow Deletions</I>, and 
<I>Allow Additions</I> properties of the 
<I>Customers</I> form are set to <I>No</I>, which prevents the user 
from changing the data.) The user can then click the Return To Customer 
Lookup Form button to transfer control back to the initial lookup form. The user 
can also launch another lookup or exit the application from this form.</P>

<P><A HREF="javascript:fullSize('F05qh13x.htm')"> <img src="Images/F05qh13.JPG" width=404 height=505 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-13.</B> <I>These forms let the user select and view a customer's record.</I><!-- /CAPTION -->
</P>


<P>
The following elegant and simple event procedure is the code behind 
the Show Customer In Form button.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Private Sub cmdShowCustomer_Click()
On Error GoTo ShowCustomerTrap
Dim strValue As String, strMsg As String

    strValue = Me.Combo2.Value
    DoCmd.OpenForm &quot;frmCustomers&quot;, acNormal, , _
        &quot;CustomerID = '&quot; &amp; strValue &amp; &quot;'&quot;
    
ShowCustomerTrapExit:
    Exit Sub
    
ShowCustomerTrap:
    If Err.Number = 94 Then
        MsgBox &quot;Select a customer in the combo box &quot; &amp; _
            &quot;before attempting to open the Customer form.&quot;, _
            vbExclamation, &quot;Programming Microsoft Access 2000&quot;
    Else
        strMsg = &quot;Error number: &quot; &amp; Err.Number &amp; &quot;caused &quot; &amp; _
            &quot;failure. Its description is:&quot; &amp; vbCrLf &amp; _
            Err.Description
        MsgBox strMsg, vbExclamation, _
            &quot;Programming Microsoft Access 2000&quot;
    End If
    Resume ShowCustomerTrapExit
    
End Sub
</PRE>
</TD></TR></TABLE></P>
 


<A NAME="189"><H2>Charting a Subset of Data</H2></A>

<P>The Microsoft Graph 2000<I> Chart</I> object makes it easy to create 
professional looking charts. The object, which sits in an unbound object control on a 
form, can be bound to Access tables and queries, and you can choose from a 
wide selection of graph types and formatting options. (Double-click the object on 
a form in Design view to expose the custom menu for the object. When you 
finish using the <I>Chart</I> object menu, click on the form outside the object to 
restore the normal Access form Design menu.)</P>


<A NAME="190"><H3>Creating a chart using the Chart wizard</H3></A>

<P>You can add a <I>Chart</I> object manually, but using the Chart wizard is easier. 
Simply follow these steps:</P>


<OL>
<P><LI>Click the <I>Forms </I>object in the Database window and then click New.
</LI></P>

<P><LI>Select Chart Wizard and the table or query on which your chart 
will be based, and then click OK.
</LI></P>

<P><LI>Select the fields that will be on your chart datasheet and then click Next.
</LI></P>

<P><LI>Select the chart type and click Next.
</LI></P>

<P><LI>Drag and drop the desired field buttons to the chart and click Next.
</LI></P>

<P><LI>Select Modify The Design Of The Form Or The Chart and click Finish.
</LI></P>
</OL>

<P>You can add aggregation and formatting functions by modifying the 
SQL string in the <I>Row Source</I> property for the unbound object control containing the <I>Chart</I> object. (The wizard creates this statement for you.)</P>



<A NAME="191"><H3>Using code to display the chart</H3></A>

<P>Figure 5-14 below shows two forms that let the user chart 
sales for a selected month. The top form lets the user select any year in the 
<I>Orders</I> table. The combo box's <I>After 
Update</I> event opens the bottom form, which uses the Microsoft Graph 
2000<I> Chart</I> object to display total sales quantity by 
month for the specified year.</P>

<P>In Figure 5-14, the chart is based on a query that retrieves all orders 
from the specified year. The query translates each order date to the first of its 
month. (The underlying data remains unchanged.) This makes it simple to 
aggregate sales quantity by month, which in turn makes it easy to chart sales quantity 
by month. (The Chart wizard automatically sums sales quantity by month for a record source such as this.)</P>

<P><A HREF="javascript:fullSize('F05qh14x.htm')"> <img src="Images/F05qh14.JPG" width=404 height=432 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 5-14.</B> <I>These forms let the user see monthly order data for a selected year.</I><!-- /CAPTION -->
</P>



<P>The following three event procedures control the interaction between 
the two forms. The <I>cboPickAYear_AfterUpdate</I> procedure loads the charting 
form and minimizes the form in which the user selects a year. (You must 
minimize instead of close this form because the query for the chart determines what 
year the user selected using the combo box on the first form.)</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>Private Sub cboPickAYear_AfterUpdate()
    DoCmd.Minimize
    DoCmd.OpenForm &quot;frmChart&quot;

End Sub


Private Sub cmdClose_Click()
    DoCmd.Close acForm, &quot;frmPickAYear&quot;
    DoCmd.Close

End Sub


Private Sub cmdPickAYear_Click()
    DoCmd.OpenForm &quot;frmPickAYear&quot;
    DoCmd.Close acForm, &quot;frmChart&quot;

End Sub
</PRE>
</TD></TR></TABLE></P>
 

</BODY>
</HTML>




