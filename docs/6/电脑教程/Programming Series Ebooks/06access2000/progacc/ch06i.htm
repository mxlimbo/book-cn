<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Manipulating Reports and Report Controls Programmatically</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06h.htm", "ch07a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="224"><H1>Manipulating Reports and Report Controls Programmatically</H1></A>

<P>Access offers two levels of entry to reports, forms, and other important database objects. In Chapter 5, you learned about the <I>AllForms </I>collection. Access also has an <I>AllReports </I>collection&#8212;as well as <I>AllTables</I>, 
<I>AllQueries</I>, <I>AllMacros</I>, <I>AllViews</I>, <I>AllModules</I>, <I>AllStoredProcedures</I>, 
<I>AllDataAccessPages</I>, and <I>AllDataDiagrams</I> collections. A member of any of these collections is an 
<I>AccessObject </I>object<I> </I>(a new type of object in Access 2000). You can refer to an <I>AllReports</I> member by one of three conventions:</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>AllReports (0)
AllReports (&quot;name&quot;)
AllReports![name]</pre>
</td>
</tr>
</table></P>


<A NAME="225"><H2>Enumerating Reports</H2></A>

<P>Your code can enumerate <I>AccessObject </I>objects in any of the <I>All </I>collections to determine whether objects are in a database connection. It does not matter whether the object is open or closed. You can also determine whether an object is loaded. When an <I>AccessObject </I>object is loaded or open, your application can work with a parallel collection space. Such collections are all the open reports, forms, and so forth in an Access database. Members of the <I>Reports </I>collection are individual reports that are open in an application. These 
open <I>Report </I>objects expose all the properties available through VBA instead of the much more restricted set in the <I>AllReports </I>collection. You can use the <I>Name </I>property in <I>AllReports </I>and <I>Reports </I>to move between the two parallel collections. By using the <I>IsLoaded </I>property in the <I>AllReports </I>collection, you can verify whether you need to open a report before attempting to manipulate its properties and methods.</P>


<p>
The <I>ListAllReports </I>procedure below enumerates the members of the <I>AllReports </I>collection while listing their name and loaded status. The <I>AllReports </I>collection members belong to either the <I>CurrentProject </I>or the <I>CodeProject</I>, which are members of the <I>Application </I>object. You must reference one of these to expose the <I>AllReports </I>members. Therefore, the <I>ListAllReports </I>procedure starts by setting a reference to the <I>CurrentProject </I>member of the <I>Application </I>object. You need this reference to reach the members of the <I>AllReports </I>collection. Notice that the 
<I>For...Each </I>loop passes through each <I>AccessObject 
</I>object (<I>obj1</I>) in <I>AllReports</I>, but the path to 
<I>AllReports </I>starts with the reference to 
<I>Application.CurrentProject</I>.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Sub ListAllReports()
Dim obj1 As AccessObject, app1 As Object

'Create a reference to the current project instance.
    Set app1 = Application.CurrentProject
    
'List each report in the application and
'describe as loaded or not.
    For Each obj1 In app1.AllReports
        If obj1.IsLoaded = True Then
            Debug.Print obj1.Name &amp; &quot; is loaded.&quot;
        Else
            Debug.Print obj1.Name &amp; &quot; is not loaded.&quot;
        End If
    Next obj1

End Sub</pre>
</td>
</tr>
</table></P>


<P>The <I>AllReports </I>and <I>AllForms </I>collections are directly analogous to one another. You are not restricted to examining <I>AccessObject </I>members in the active project. The 
<I>ListAllFormsElsewhere </I>and <I>ListAllReportsElsewhere 
</I>procedures below show how to program both collections when they point at another project. Notice the similarity of the code between collections as well as between the current project and another project.</P>


<p>
The <I>ListAllFormsElsewhere </I>procedure below prints the total number and the names of individual members in the <I>AllForms </I>collection for Chapter5.mdb. This file is on the book's companion CD. The procedure assumes that you 
load the file from the CD and store it in your My Documents folder. It enumerates <I>AccessObject </I>members in another database file.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Sub ListAllFormsElsewhere()
Dim appAccess1 As Access.Application
Dim obj1 As AccessObject

'Create a reference to another database file.
    Set appAccess1 = New Access.Application
    appAccess1.OpenCurrentDatabase &quot;c:\Programming Access\&quot; &amp; _
        &quot;Chap05\Chapter5.mdb&quot;
    
'Print the total number of forms in the database.
    Debug.Print appAccess1.CurrentProject.AllForms.Count
    For Each obj1 In appAccess1.CurrentProject.AllForms
        Debug.Print obj1.Name
    Next obj1

End Sub</pre>
</td>
</tr>
</table></P>


<P>The <I>ListAllReportsElsewhere </I>procedure below follows the same general design as the preceding one, although it deals with the <I>AllReports </I>collection instead of the 
<I>AllForms</I> collection and uses the Northwind.mdb database 
instead of Chapter 5.mdb. The layout is nearly identical except for the use of string variables to define the database name. This change is strictly for 
convenience and generality&#8212;nothing in Access or VBA mandates the use of strings.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Sub ListAllReportsElsewhere()
Dim appAccess1 As Access.Application
Dim obj1 As AccessObject
Dim srtPath As String, strFile As String, strDBName As String

'Create a reference to another database file.
    Set appAccess1 = New Access.Application
    strPath = &quot;c:\Program Files\Microsoft Office\Office\Samples\&quot;
    strFile = &quot;Northwind.mdb&quot;
    strDBName = strPath &amp; strFile
    appAccess1.OpenCurrentDatabase strDBName
    
'Print the total number of reports in the database.
    Debug.Print appAccess1.CurrentProject.AllReports.Count
    For Each obj1 In appAccess1.CurrentProject.AllReports
        Debug.Print obj1.Name
    Next obj1
End Sub
</pre>
</td>
</tr>
</table></P>


<A NAME="226"><H2>Modifying Report Control Properties</H2></A>

<P>Your application code can use the <I>AllReports 
</I>collection as a pathway to individual open reports and the controls on them. Once you pass through the pathway, your application can read and modify the properties of individual open reports. The <I>ControlsInReports </I>procedure drills down from the <I>AllReports </I>collection members to the text box and label properties on individual open reports.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Sub ControlsInReports()
Dim obj1 As AccessObject, ctl1 As Control

    For Each obj1 In CurrentProject.AllReports
        If obj1.IsLoaded = True Then
            For Each ctl1 In Reports(obj1.Name)
                If ctl1.ControlType = 100 Then
                    Debug.Print ctl1.Name, ctl1.Caption
                ElseIf ctl1.ControlType = 109 Then
                    Debug.Print ctl1.Name, ctl1.Value
                Else
                    Debug.Print ctl1.Name &amp; &quot; is not a&quot; &amp; _
                        &quot; label or a text box.&quot;
                End If
            Next ctl1
        End If
    Next obj1

End Sub</pre>
</td>
</tr>
</table></P>


<P>The <I>ControlsInReports </I>procedure starts with a 
<I>For...Each </I>loop that iterates through the members of the <I>AllReports </I>collection. If a member is open, 
as indicated by a value of <I>True</I> for its <I>IsLoaded 
</I>property, the code enters a nested <I>For...Each 
</I>loop to enumerate the controls on that report. You can use 
the <I>ControlType </I>property to determine a control's type. It is important to know the type because it determines the properties that the control exposes. For example, a label control displays its <I>Caption</I> property, but a text box uses a <I>Value</I> property to depict what it shows. You can use the Object Browser in VBE to view the numeric codes of other control types that you want to edit or examine.</P>


<A NAME="227"><H2>Mailing Snapshots</H2></A>

<P>The sample on the facing page enumerates reports to determine whether they are marked for mailing as snapshot files. The sample relies on two procedures. First, the <I>SendSnapShots </I>procedure enumerates the members of the 
<I>AllReports </I>collection. Since the code checks whether the report's <I>Tag</I> property is &quot;mail it&quot;, the report must be open. The <I>Tag </I>property is not available through the <I>AllReports </I>collection&#8212;it is only available through the <I>Reports </I>collection. The <I>SendSnapshots 
</I>procedure checks the <I>IsLoaded </I>status of each 
<I>AllReports </I>member. If the report is loaded, the procedure calls the <I>CheckMailItTag </I>procedure. If <I>IsLoaded 
</I>has a value of <I>False</I>, the procedure opens the report before calling the second procedure. The sample does not call the <I>Echo </I>method with a <I>False </I>parameter, so a user can easily get feedback as the second procedure runs. This is 
particularly appropriate for long reports for which it can take a while for the snapshot file to be created and mailed.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Sub SendSnapShots()
Dim obj1 As AccessObject, app1 As Object

'Create a reference to the current project instance.
    Set app1 = Application.CurrentProject
    
'Enumerate each member in AllReports to verify if loaded.
'If not loaded, open before calling CheckMailItTag.
    For Each obj1 In app1.AllReports
        If obj1.IsLoaded = True Then
            CheckMailItTag obj1.Name
        Else
            DoCmd.OpenReport obj1.Name, acViewPreview
            CheckMailItTag obj1.Name
            DoCmd.Close acReport, obj1.Name, acSaveNo
        End If
    Next obj1

End Sub


Sub CheckMailItTag(obj1name)
Dim rep1 As Report

'Set reference to Reports member corresponding
'to AllReports member.
    Set rep1 = Reports(obj1name)

'If Tag property says &quot;mail it&quot;
'create a snapshot file and mail it.
    If rep1.Tag = &quot;mail it&quot; Then
        DoCmd.SendObject acOutputReport, obj1name, _
        acFormatSNP, &quot;virginia@cabinc.net&quot;, , , _
        &quot;Snapshot Report&quot;, &quot;Here is the report.&quot;, False
    End If
    
End Sub</pre>
</td>
</tr>
</table></P>


<P>The <I>CheckMailItTag </I>procedure accepts the report name passed to it by <I>SendSnapShots</I>. It uses this name to create a reference to the <I>Reports </I>collection member with the same name. Then it checks the <I>Tag </I>property of the report to determine whether it equals &quot;mail it&quot;. If so, the procedure invokes <I>DoCmd</I>'s <I>SendObject </I>method to create a snapshot file and send it to an e-mail 
address (in this case, virginia@cabinc.net). You can replace the string constant for the address with any single address or series of addresses that your application requires. It is important that the argument after the message body be 
<I>False</I>. With the default value of <I>True</I>, your procedure will halt with the message open and wait for the user to edit the message. Setting the value to <I>False </I>enables the procedure to loop through all the reports without any operator intervention.</P>


</BODY>
</HTML>




