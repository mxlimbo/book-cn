<HTML>
<HEAD>
<TITLE>Performing Synchronous Device I/O</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch02c.htm">[Previous]</A> <A HREF="ch02e.htm">[Next]</A><P>

<A NAME="20"><H1>Performing Synchronous Device I/O</H1></A>

<p>This section discusses the Windows functions that allow you to perform 
synchronous device I/O. Keep in mind that a device can be a file, mailslot, 
pipe, socket, and so on. No matter which device is used, the I/O is performed 
using the same functions.</p>

<p>Without a doubt, the easiest and most commonly used functions for 
reading from and writing to devices are <I>ReadFile 
</I>and <I>WriteFile</I>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>BOOL ReadFile(
   HANDLE      hfile, 
   PVOID       pvBuffer,
   DWORD       nNumBytesToRead, 
   PDWORD      pdwNumBytes,
   OVERLAPPED* pOverlapped);

BOOL WriteFile(
   HANDLE      hfile, 
   CONST VOID  *pvBuffer,
   DWORD       nNumBytesToWrite, 
   PDWORD      pdwNumBytes,
   OVERLAPPED* pOverlapped);
</pre></td></tr></table>
</p>

<p>The <I>hfile</I> parameter identifies the handle of the device you want to 
access. When the device is opened, you must not specify the FILE_FLAG_
OVERLAPPED flag, or the system will think that you want to 
perform asynchronous I/O with the device. The 
<I>pvBuffer</I> parameter points to the buffer to which the device's data should be read or to the buffer containing the 
data that should be written to the device. The 
<I>nNumBytesToRead</I> and <I>nNumBytesToWrite</I> parameters tell 
<I>ReadFile</I> and <I>WriteFile</I> how many bytes 
to read from the device and how many bytes to write to the device, respectively.</p>

<p>The <I>pdwNumBytes</I> parameters indicate the address of a DWORD that 
the functions fill with the number of bytes successfully transmitted to and from 
the device. The last parameter, <I>pOverlapped</I>, should be NULL when 
performing synchronous I/O. You'll examine this parameter in more detail shortly 
when asynchronous I/O is discussed.</p>

<p>Both <I>ReadFile</I> and <I>WriteFile</I> return TRUE if successful. By the 
way, <I>ReadFile</I> can be called only for devices that were opened with the GENERIC_
READ flag. Likewise, <I>WriteFile</I> can be called only when the device is 
opened with the GENERIC_WRITE flag.</p>

<A NAME="21"><H2>Flushing Data to the Device</H2></A>

<p>Remember from our look at the <I>CreateFile</I> function that you can pass quite 
a few flags to alter the way in which the system caches file data. Some other 
devices, such as serial ports, mailslots, and pipes, also cache data. If you want 
to force the system to write cached data to the device, you can call 
<I>FlushFileBuffers</I>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>BOOL FlushFileBuffers(HANDLE hfile);
</pre></td></tr></table>
</p>

<p>The <I>FlushFileBuffers</I> function forces all the buffered data associated 
with a device that is identified by the 
<I>hfile</I> parameter to be written. For this to 
work, the device has to be opened with the GENERIC_WRITE flag. If the 
function is successful, TRUE is returned.</p>

</BODY>
</HTML>




