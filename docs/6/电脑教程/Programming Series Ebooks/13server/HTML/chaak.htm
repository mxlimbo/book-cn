<HTML>
<HEAD>
<TITLE><i>DebugBreak</i> Improvement for <i>x</i>86 Platforms</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="chaaj.htm">[Previous]</A> <A HREF="chaal.htm">[Next]</A><P>

<A NAME="308"><h1><i>DebugBreak</i> Improvement for <i>x</i>86 Platforms</h1></A>
<p>I sometimes want to force a breakpoint in my code even when the process is not running under a debugger. You can do this in Windows by having a thread call the <i>DebugBreak</i> function. This function, which resides in Kernel32.dll, lets you attach a debugger to the process. Once the debugger is attached, the instruction pointer is positioned on the CPU instruction that caused the breakpoint. This instruction is contained in the <i>DebugBreak</i> function in Kernel32.dll, so to see my source code I must single-step out of the <i>DebugBreak</i> function.</p>

<p>On the <i>x</i>86 architecture, you perform a breakpoint by executing an &quot;int 3&quot; CPU instruction, so I redefine <i>DebugBreak</i> as this inline assembly language instruction. When my <i>DebugBreak</i> macro is executed, I do not call into Kernel32.dll; the breakpoint occurs right in my code, and the instruction pointer is positioned to the next C/C++ language statement. This improved <i>DebugBreak</i> macro just makes things a little more
convenient.</p>

</BODY>
</HTML>




