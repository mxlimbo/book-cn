<HTML>
<HEAD>
<TITLE>Permanent Configuration Settings</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch08g.htm">[Previous]</A> <A HREF="ch09a.htm">[Next]</A><P>

<A NAME="170"><h1>Permanent Configuration Settings</h1></A>
<p>Many services require keeping permanent configuration settings. (We discussed how to use the registry for this purpose in <A HREF="ch05a.htm">Chapter 5</A>.) As an alternative, you can create properties in a Win32_Service-derived class. A third option is to use a standard provider that ships with WMI. To use this provider, you just have to write a suitable MOF file.</p> 

<p>WMI keeps all of its configuration information, such as the directory location of auto-recover MOF files and start-up heap allocation size, under the following registry key:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
HKEY_LOCAL_MACHINE\Software\Microsoft\WBEM
</pre></td></tr></table>
</p>

<p>The following MOF file defines a class derived from the CIM_Setting class. The derived class allows you to use WMI to see these WBEM registry settings.</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
#pragma namespace(&quot;\\\\.\\root\\cimv2&quot;)
// Instance provider
instance of __Win32Provider as $InstProv
{
    Name    = &quot;RegProv&quot; ;
    ClsId   = &quot;{fe9af5c0-d3b6-11ce-a5b6-00aa00680c3f}&quot; ;
};

instance of __InstanceProviderRegistration
{
    Provider = $InstProv;
    SupportsPut = TRUE;
    SupportsGet = TRUE;
    SupportsDelete = FALSE;
    SupportsEnumeration = TRUE;
};

[dynamic, provider(&quot;RegProv&quot;), 
ClassContext(&quot;local|hkey_local_Machine\\software\\microsoft\\wbem&quot;)]
class Richter_MySettings : CIM_Setting
{
  [key,PropertyContext(&quot;CIMOM&quot;)] string  SettingId;
  [PropertyContext(&quot;Autorecover MOFs&quot;)] string AutoRecoverMOFs[];
  [PropertyContext(&quot;Startup Heap Preallocation Size&quot;)] 
    uint32 HeapPreAllocationSize;
};
</pre></td></tr></table>
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
These values are already exposed via the Win32_WMISetting class. This MOF file is for demonstration purposes only.</blockquote>
</div>
</p>

<p>Note two important features of this MOF file. First, the standard registry provider is declared and registered using the &quot;instance of Win32Provider&quot; and &quot;instance of InstanceProviderRegistration&quot; syntax. This declaration and registration might already have been done if a developer used the registry provider in the CIMV2 namespace. Doing it a second time has no ill effect.</p>

<p> Second, the declaration of the settings subclass is handled using the &quot;class Richter_MySettings&quot; statement. Critical to note here is the association of the class with the registry provider by using the provider qualifier, and the association of the property with the registry fields using the PropertyContext qualifiers. The PropertyContext qualifiers indicate which registry values the property values are to be mapped to.</p>

</body>
</html>





