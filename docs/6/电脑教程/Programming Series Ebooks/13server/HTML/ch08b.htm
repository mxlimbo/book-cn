<HTML>
<HEAD>
<TITLE>WMI Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch08a.htm">[Previous]</A> <A HREF="ch08c.htm">[Next]</A><P>

<A NAME="120"><h1>WMI Architecture</h1></A>
<p>WMI is an extensible data model of a computer system. The WMI architecture is illustrated in Figure 8-1. In this section, I discuss the components of the WMI architecture.</p>

<A NAME="121"><h2>Windows Management Service</h2></A>
<p>The Windows Management Service (WinMgmt.exe) is the primary component of WMI. WinMgmt brokers the communication between WMI consumers (management applications) and WMI providers. WMI data is stored in an object-oriented schema. This schema is designed by the DMTF and offers a single data description mechanism for all components exposing WMI data. By offering a standard schema that supports inheritance, WMI data providers can offer standard data classes and properties while also allowing others to derive vendor-specific extensions to differentiate specific products. Much of this chapter is dedicated to showing exactly how this is done.</p>

<p>
<A HREF="javascript:fullSize('F08fj01x.htm')"> <img src="images/F08fj01.JPG" width=404 height=338 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 8-1.</b> <i>WMI architecture</i><!-- /caption -->
</p>

<A NAME="122"><h3>CIM Object Manager</h3></A>
<p>The Common Information Model (CIM) Object Manager provides client interfaces that support a variety of access techniques such as COM, scripting, XML, ODBC, and ADO. The object manager supports APIs for creating, deleting, modifying, and retrieving classes and instances. The class instances are either supplied by the CIM repository, in which case they are static instances, or by a provider of some sort (implemented as a COM server), in which case they are dynamic instances.</p>

<A NAME="123"><h3>CIM Repository</h3></A>
<p>The CIM repository is typically used only for storing information about the classes supported by WMI. It is essentially a symbol table and should not be used for large volumes of data. The CIM repository is populated either through object manager APIs that allow the declaration of classes and instances or through a textual form known as MOF (Managed Object Format).</p>

<A NAME="124"><h2>WMI Providers</h2></A>
<p>Providers are COM components that complete the connection between the CIM Object Manager and the managed object. Providers can be built-in or application-specific.</p>

<p>Providers come in various forms, the most common of which is the instance provider, which returns specific information for a managed object. The class provider is a more complex type of provider that is able to return definitions of classes as well as instances. If, for example, you were trying to return information from a database in which someone might be adding new tables, it would be possible to return a class per table, with each class being defined at the time the provider opened the database. This type of provider is advanced and is usually not implemented by services. Active Directory is a rare example of a service that does implement a dynamic class provider. Property providers are a simpler type of provider that allows dynamic properties to be added to static instances.</p>

<p>The general intent of the WMI architecture is to make writing providers as simple as possible&#8212;for example, writing an instance provider might be just a matter of generating a few lines of code (that is, with the help of the provider-generating tools and samples in the WMI SDK). The construction of providers also takes advantage of inheritance. If you are adding a new subclass to a class that already has a provider, you need to supply only property values for your new properties or for the ones you are overriding.</p>

<A NAME="125"><h2>Managed Objects</h2></A>
<p>A managed object can be any enterprise component&#8212;for example, a Win32 object or service. A service that allows clients to connect using a named pipe could allow itself to be managed by exposing the name of the pipe in a WMI object instance.</p>

<A NAME="126"><h2>Management Applications</h2></A>
<p>Management applications are applications that communicate with a local or remote WinMgmt service. These applications can query the WinMgmt service to determine all the logical and physical components residing on a machine. This information can then be displayed and modified, allowing the user to really understand and change a machine's configuration. In addition, management applications can instruct the WinMgmt service to send notifications when special events occur. For example, a management application can receive a notification when the machine's hard drive has less than 20 percent free space, or when a new process begins running on the managed machine.</p>

<A NAME="127"><h2>Schema</h2></A>
<p>WMI hides all the ugly complexities of the management environment. It takes the Win32 APIs, registry settings, Simple Network Management Protocol (SNMP) Management Information Bases (MIBs) and traps, and all other miscellaneous management interfaces, and it wraps them in a carefully defined schema.</p>

<p>The schema isn't really a separate component of WMI, but it is an important part of WMI. The schema is a collection of classes that describe managed objects. All the components in the WMI architecture support the schema.</p>

<p>The schema, which is provided by the object manager, handles a whole range of information, including systems, networks, applications, devices, and physical components, that affects the installation, configuration, and management of services. The schema consists of instances arranged in classes that have properties, associations, and methods.</p>

<p><div class="sidebar"><blockquote><b>WMI Name Evolution</b>

<p>The Common Information Model (CIM) is a specification defined by the Distributed Management Task Force (DMTF) that describes an object-oriented approach to the management of systems and networks. Microsoft originally named its implementation of the CIM &quot;Web-Based Enterprise Management (WBEM)&quot; and named the kernel-mode portion &quot;Windows Management Information (WMI).&quot; The DMTF started a marketing initiative and used &quot;WBEM&quot; as the name to describe a set of management and Internet technologies based on CIM. Microsoft then changed the name of its implementation of the CIM to &quot;WMI&quot; and changed the name of the kernel-mode portion to &quot;WMI extensions for the Windows Driver Model (WDM).&quot; Because of this name evolution, you find &quot;WMI,&quot; &quot;WBEM,&quot; and &quot;CIM&quot; used throughout the Windows management architecture for functions, interfaces, and classes, as well as other elements.</p></blockquote></div>
</p>

</BODY>
</HTML>




