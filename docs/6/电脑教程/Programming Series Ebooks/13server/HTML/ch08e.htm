<HTML>
<HEAD>
<TITLE>Core Service-Related Classes Provided by WMI</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch08d.htm">[Previous]</A> <A HREF="ch08f.htm">[Next]</A><P>

<A NAME="136"><h1>Core Service-Related Classes Provided by WMI</h1></A>
<p>Let's take a brief look at the core service-related classes provided by WMI. These classes are shown in Figure 8-3. The CIM_ManagedSystemElement, CIM_Setting, and CIM_StatisticalInformation classes provide root classes for operational, setting, and statistical data, respectively. As you can see from looking at the Win32_BaseService class, a wide range of information is provided by WMI about services, as well as about basic methods for defining, modifying, starting, stopping, and deleting services.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Class names prefixed with &quot;CIM_&quot; indicate classes defined by the DMTF, whereas classes prefixed with &quot;Win32_&quot; are defined by Microsoft. If you intend to add new classes to the CIMV2 namespace, you should decide on a name for your schema that is familiar to you, such as a trademark, to ensure that no one else uses the same name.</blockquote>
</div>
</p>

<p>
<A HREF="javascript:fullSize('F08fj03x.htm')"> <img src="images/F08fj03.JPG" width=404 height=527 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 8-3.</b> <i>Core service-related classes provided by WMI</i><!-- /caption -->
</p>

<A NAME="137"><h2>CIM_ManagedSystemElement</h2></A>
<p>The CIM_ManagedSystemElement class is the base class for all the operational data held in the CIMV2 namespace. It represents all the physical and logical components of the system. CIM_ManagedSystemElement is a base class for exactly two derived classes: CIM_LogicalElement and CIM_PhysicalElement.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You should never derive a class using CIM_ManagedSystemElement as a base. If you do, you are basically saying that the data you are defining is neither physical nor logical; however, the CIM schema claims that every element of a system is either physical <i>or</i> logical and cannot be both.</blockquote>
</div>
</p>

<p>CIM_ManagedSystemElement defines the following fundamental set of properties for which every component of a system is expected to supply values:</p>


<ul>
<p><li><b>Caption</b> A short textual description (a one-line string) for the object.</li></p>

<p><li><b>Description</b> A textual description of the object of unlimited size.</li></p>

<p><li><b>InstallDate</b> The date and time value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.</li></p>

<p><li><b>Name</b> The label by which the object is known. Derived classes can override the name to make the property a key, but they do not have to.</li></p>

<p><li><b>Status</b> An enumeration indicating the current state of the object</li></p>
</ul>



<p>
<div class="note"><blockquote><b>NOTE</b><hr>
These properties and those defined for the other classes described in this section are described in the WMI SDK and CIM Studio. To take a look at a property description in CIM Studio, select the class that contains the property, and click the Help For Class button.</blockquote>
</div>
</p>

<A NAME="138"><h2>Win32_BaseService</h2></A>
<p>The Win32_BaseService class represents executables that are installed in the Service Control Manager's registry database. Instances of this class identify services or device drivers. Your service should derive a class using Win32_Service (discussed in the next section) as its base class. A device driver would derive a class using Win32_SystemDriver as its base class.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You should never derive a class from Win32_BaseService. Doing so tells the system that you have changed the operating system architecture.</blockquote>
</div>
</p>

<p>The properties supported by the Win32_BaseService class include the following:</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<td class="columns"><ul><li>AcceptPause</li></ul>  </td>
<td class="columns"><ul><li>PathName</li></ul>  </td></tr>
<tr> 
<td class="columns"><ul><li>AcceptStop</li></ul>  </td>
<td class="columns"><ul><li>ServiceSpecificExitCode</li></ul>  </td></tr>
<tr> 
<td class="columns"><ul><li>DesktopInteract</li></ul>  </td>
<td class="columns"><ul><li>ServiceType</li></ul>  </td></tr>
<tr> 
<td class="columns"><ul><li>DisplayName</li></ul>  </td>
<td class="columns"><ul><li>StartName</li></ul>  </td></tr>
<tr> 
<td class="columns"><ul><li>ErrorControl</li></ul>  </td>
<td class="columns"><ul><li>State</li></ul>  </td></tr>
<tr> 
<td class="columns"><ul><li>ExitCode</li></ul>  </td>
<td class="columns"><ul><li>TagId</li></ul>  </td></tr>
</table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
In CIM Studio, some properties have a yellow arrow icon. This yellow arrow indicates that the property is inherited from a base class.</blockquote>
</div>
</p>

<A NAME="139"><h2>Win32_Service</h2></A>
<p>The Win32_Service class represents a service on a Microsoft Win32 computer system. A service application conforms to the interface rules of the Service Control Manager as discussed in <a href="ch03a.htm">Chapters 3</a> and <a href="ch04a.htm">4</a> of this book.</p>

<p>In WMI, the service class should be used for managing the service, not for providing access to the service's tasks. For example, it would be inappropriate to declare a DHCPService class derived from Win32_Service and implement a method in the class to obtain a new DHCP address. However, it would be entirely appropriate to implement a method in a derived class that would allow you to restrict the range of addresses that could be returned by the service.</p>

<p>The Win32_Service class supports the following properties:</p>


<ul>
<p><li>CheckPoint</li></p>

<p><li>ProcessId</li></p>

<p><li>WaitHint</li></p>
</ul>

 

<A NAME="140"><h2>CIM_ServiceAccessPoint</h2></A>
<p>The CIM_ServiceAccessPoint class represents access points for your service, such as the command-line parameters accepted by an application and port 80 in the context of a protocol service. Use this class to manage the access point. Provide instances of this class if you need to control, for example, which machine hosts the access point.</p>

<A NAME="141"><h2>CIM_Setting</h2></A>
<p>You know that setting data is represented separately from operational data. The CIM_Setting class provides a base class for all setting data. Any time you want to add setting-related data for your service, you should make it accessible by deriving from the CIM_Setting class.</p>

<p>Notice the CIM_ElementSetting association between CIM_Setting and CIM_ManagedSystemElement that defines which CIM_ManagedSystemElement a particular setting applies to. You should always derive a class from an association class to establish the particular association between your CIM_ManagedSystemElement class (typically a Win32_Service or CIM_ServiceAccessPoint class) and the CIM_Setting-derived class that configures it. You can store the setting data in the CIM repository (as you saw in the joke class example earlier in this chapter), but I don't advise it because the CIM repository is not meant as a general-purpose store. Rather, save the information elsewhere&#8212;in the registry, for example&#8212;and use the WMI registry provider to retrieve the information.</p>

<A NAME="142"><h2>CIM_StatisticalInformation</h2></A>
<p>The CIM_StatisticalInformation class provides a location for statistical data in the CIMV2 namespace. You can select any of the classes under this class and look at an instance of it to see its current statistics. For example, look at Win32_PerfRawData_PerfDisk_PhysicalDisk under CIM_StatisticalInformation\Win32_Perf\Win32_PerfRawData.</p>



<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Some of the class names include multiple underscores. Strictly speaking, this is not allowed&#8212;these are cases in which Microsoft has not conformed to the rules. Be careful to include only one underscore in each of your class names; this underscore should separate the trademark-derived name from the class name.</blockquote>
</div>
</p>

<A NAME="143"><h2>Association Classes</h2></A>
<p>An important feature I have only touched on is association classes, which link classes together. One example of an association class that you have seen is CIM_ElementSetting, which links CIM_ManagedSystemElement classes to the settings that represent their configuration parameters.</p>

<p>You must understand the more important association classes to use WMI properly. The next few sections describe the important associations you should be aware of.</p>

<A NAME="144"><h3>CIM_Dependency</h3></A>
<p>Most of the associations that link two CIM_ManagedSystemElement classes are one of two types&#8212;a CIM_Dependency association or a CIM_Component association. CIM_Dependency associations represent functional dependency between objects. Dependencies show which components another component depends upon. For example, the Win32_DependentService association class (derived from CIM_ServiceServiceDependency, which is derived from CIM_Dependency) is used to indicate a dependency relationship between services. If a service fails to start due to a dependent service, it is possible to follow the dependency chain until you locate the service that is causing all the trouble.</p>

<p> If you open CIM Studio and expand the tree under CIM_Dependency, you will see well over 40 association classes, each representing a different type of dependency that can be expressed in the WMI model. Some of them are specific to services and their associated objects. CIM_Dependency is frequently used as a base class.</p>

<A NAME="145"><h3>CIM_Component</h3></A>
<p>The CIM_Component association class is used to identify that a component is part of another component. Classes derived from CIM_Component represent the association between a system component and the various CIM_ManagedSystemElement classes that make up the system. CIM_Component is frequently used as a base class.</p>

<A NAME="146"><h3>CIM_ElementSetting</h3></A>
<p>CIM_ElementSetting associates a setting with the CIM_ManagedSystemElement class for which it provides configuration parameters. You must derive a class from the CIM_ElementSetting association class to associate any settings you add to the CIMV2 namespace with the CIM_ManagedSystemElement-derived class that the settings apply to.</p>

<A NAME="147"><h3>CIM_Statistics</h3></A>
<p>The statistics association class links a CIM_ManagedSystemElement-derived class to the various statistics that apply to it. You must derive a class from the CIM_Statistics association class to provide a way for users to get at a CIM_ManagedSystemElement-derived class object's statistics.</p>

<A NAME="148"><h3>CIM_ServiceServiceDependency</h3></A>
<p>This class is derived from the CIM_Dependency association class. Use it to define any dependency relationships that exist between services. It is actually quite unusual to see a class such as CIM_ServiceServiceDependency as part of the CIMV2 namespace, because service dependencies are typically defined as properties of the service itself.</p>

<A NAME="149"><h3>CIM_ServiceAccessBySAP</h3></A>
<p>This class is also derived from the CIM_Dependency association class and should be used to define associations between a service and the access points that can be used to access the service.</p>

<A NAME="150"><h2>Win32 Service-Related Classes</h2></A>
<p>The next few sections describe some of the Win32 service-related classes you should be aware of. These include classes related to the system, classes related to user accounts, and classes that specify execution dependencies for groups of services. Some of the classes are shown in Figure 8-4.</p>

<A NAME="151"><h3>Win32_ComputerSystem</h3></A>
<p>The Win32_ComputerSystem class represents a computer in the Win32 environment. It includes multiple properties related to booting, power, hardware, owners, and other information. The Win32_ComputerSystem class ultimately derives from the CIM_System class. Typically you will never add anything to the CIM_System class or any of its descendants. Although system manufacturers might derive a class from Win32_ComputerSystem to define specific features of their Win32 systems, it is highly unlikely.</p>

<A NAME="152"><h3>Win32_Process</h3></A>
<p>The Win32_Process class is strictly limited to the processes known to the Win32 system. You should not add instances or properties to this class, but you can establish associations to process instances. For example, you could use associations to expose the details of how your service maps to a set of processes and threads.</p>

<p>
<A HREF="javascript:fullSize('F08fj04x.htm')"> <img src="images/F08fj04.JPG" width=404 height=255 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 8-4.</b> <i>Some Win32 service-related classes</i><!-- /caption -->
</p>

<A NAME="153"><h3>Win32_Account</h3></A>
<p>The Win32_Account class contains information about user accounts and group accounts known to the Win32 system. User or group names recognized by a Windows domain are descendants (or members) of this class.</p>

<A NAME="154"><h3>Win32_SystemAccount</h3></A>
<p>The Win32_SystemAccount class represents the LocalSystem account.</p>

<A NAME="155"><h3>Win32_LoadOrderGroup</h3></A>
<p>The Win32_LoadOrderGroup class identifies which load order group a service can be dependent upon. The two important associations for the Win32_LoadOrderGroup class are the Win32_LoadOrderGroupServiceMembers class, which represents a component (or membership) association between a base service and a load order group, and the Win32_LoadOrderGroupServiceDependencies class, which represents a dependency association between a base service and a load order group that the service depends on to start running. The difference between the two can be represented this way: the component association says &quot;this service or driver is a member of this group,&quot; whereas the dependency association says &quot;this service or driver is dependent on this group.&quot;</p>

<A NAME="156"><h2>Software Installation Classes</h2></A>
<p>Figure 8-5 shows the main classes involved in software installation. These classes directly reflect the information used to control the Microsoft Windows Installer technology. If you use Windows Installer to install your service, these installation classes will be populated for you automatically, and you will be able to install, uninstall, and repair your installation by using WMI.</p>

<p>
<A HREF="javascript:fullSize('F08fj05x.htm')"> <img src="images/F08fj05.JPG" width=404 height=283 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 8-5.</b> <i>Classes involved in software installation</i><!-- /caption -->
</p>

<p>Win32_Product is a concrete class that is a collection of physical elements, software features, and/or other products, acquired by a consumer as a unit. Instances of this class represent products installed by the Windows Installer. A product generally correlates to a single installation package.</p>

<p>The CIM_SoftwareElement class breaks up a CIM_SoftwareFeature object into a set of individually manageable or deployable elements for a particular platform. A software element's platform is uniquely identified by its underlying hardware architecture and operating system (for example, Microsoft Windows 98 or Windows 2000).</p>

</BODY>
</HTML>




