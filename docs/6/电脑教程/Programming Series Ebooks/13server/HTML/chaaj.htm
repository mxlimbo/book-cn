<HTML>
<HEAD>
<TITLE>The <i>chBEGINTHREADEX</i> Macro</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="chaai.htm">[Previous]</A> <A HREF="chaak.htm">[Next]</A><P>

<A NAME="307"><h1>The <i>chBEGINTHREADEX</i> Macro</h1></A>
<p>All the multithreaded samples in this book use the <i>_beginthreadex</i> function, which is in Microsoft's C/C++ run-time library, instead of the operating system's <i>CreateThread</i> function. I use <i>_beginthreadex</i> because it prepares the new thread to use the C/C++ run-time library functions and ensures that the per-thread C/C++ run-time library information is destroyed when the thread returns. (See Chapter 6 of <i>Programming Applications for Microsoft Windows, Fourth Edition,</i> for more details.) Unfortunately, the <i>_beginthreadex</i> function is prototyped as follows:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
unsigned long __cdecl _beginthreadex(
   void *,
   unsigned,
   unsigned (__stdcall *)(void *), 
   void *, 
   unsigned, 
   unsigned *);
</pre></td></tr></table>
</p>

<p>Although the parameter values for <i>_beginthreadex</i> are identical to the parameter values for the <i>CreateThread</i> function, the parameters' data types do not match. Here is the prototype for the <i>CreateThread</i> function:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
typedef DWORD (WINAPI *PTHREAD_START_ROUTINE)(PVOID pvParam);

HANDLE CreateThread(
   PSECURITY_ATTRIBUTES  psa, 
   DWORD                 cbStack,
   PTHREAD_START_ROUTINE pfnStartAddr, 
   PVOID                 pvParam,
   DWORD                 fdwCreate, 
   PDWORD                pdwThreadId);
</pre></td></tr></table>
</p>

<p>Microsoft did not use the Windows data types when creating the <i>_beginthreadex</i> function's prototype because Microsoft's C/C++ run-time group does not want to have any dependencies on the operating system group. I commend this decision; however, this makes using the <i>_beginthreadex</i> function more difficult.</p>

<p>There are really two problems with the way Microsoft prototyped the <i>_beginthreadex</i> function. First, some of the data types used for the function do not match the primitive types used by the <i>CreateThread</i> function. For example, the Windows data type DWORD is defined as follows:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
typedef unsigned long DWORD;
</pre></td></tr></table>
</p>

<p>This data type is used for <i>CreateThread</i>'s <i>cbStack</i> parameter as well as for its <i>fdwCreate</i> parameter. The problem is that <i>_beginthreadex</i> prototypes these two parameters as <i>unsigned</i>, which really means <i>unsigned int</i>. The compiler considers an <i>unsigned int</i> to be different from an <i>unsigned long</i> and generates a warning. Because the <i>_beginthreadex</i> function is not a part of the standard C/C++ run-time library and exists only as an alternative to calling the <i>CreateThread</i> function, I believe that Microsoft should have prototyped <i>_beginthreadex</i> this way to avoid generating warnings:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
unsigned long __cdecl _beginthreadex(
   void                   *psa, 
   unsigned               long cbStack,
   unsigned (__stdcall *) (void *pvParam), 
   void                   *pvParam,
   unsigned long          fdwCreate, 
   unsigned long          *pdwThreadId);
</pre></td></tr></table>
</p>

<p>The second problem is just a small variation of the first. The <i>_beginthreadex</i> function returns an <i>unsigned long</i> representing the handle of the newly created thread. An application typically wants to store this return value in a data variable of type HANDLE as follows:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
HANDLE hThread = _beginthreadex(...);
</pre></td></tr></table>
</p>

<p>This code causes the compiler to generate a warning. To avoid the compiler warning, you must rewrite the line, introducing a cast as follows:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
HANDLE hThread = (HANDLE) _beginthreadex(...);
</pre></td></tr></table>
</p>

<p>But this is inconvenient. To make life a little easier, I defined a <i>chBEGINTHREADEX</i> macro in CmnHdr.h to perform all of this casting for me:</p>

<p>
<table cellpadding="5" width="95%"><tr><td><pre>
typedef unsigned (__stdcall *PTHREAD_START) (void *);

#define chBEGINTHREADEX(psa, cbStack, pfnStartAddr, \
   pvParam, fdwCreate, pdwThreadId)                 \
      ((HANDLE)_beginthreadex(                      \
         (void *)        (psa),                     \
         (unsigned)      (cbStack),                 \
         (PTHREAD_START) (pfnStartAddr),            \
         (void *)        (pvParam),                 \
         (unsigned)      (fdwCreate),               \
         (unsigned *)    (pdwThreadId))) 
</pre></td></tr></table>
</p>

</BODY>
</HTML>




