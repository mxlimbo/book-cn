<HTML>
<HEAD>
<TITLE>Maintaining a Clean Registry</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch05i.htm">[Previous]</A> <A HREF="ch05k.htm">[Next]</A><P>

<A NAME="89"><h1>Maintaining a Clean Registry</h1></A>
<p>As I have pointed out several times in this chapter, the responsibility of avoiding registry clutter rests on the application developer. Your server (or any other application you write) should not only attempt to make efficient use of the system registry but also clean up after itself when it is finished.</p>

<p>The system provides two functions for deleting data from the registry: <i>RegDeleteKey</i> and <i>RegDeleteValue</i>. These functions are prototyped as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
LONG燫egDeleteValue(
牋燞KEY牋爃key,
牋燩CTSTR爌szValueName);

LONG燫egDeleteKey(
牋燞KEY牋爃key,
牋燩CTSTR爌szSubKey);
</pre></td></tr></table>
</p>

<p>You might be surprised to find out that deleting data is not a completely trivial topic. The <i>RegDeleteValue</i> function is as simple as it looks, assuming your application has security permission to delete a particular key. However, the possibility of your application <i>not</i> having permission to delete a key forced the developers to implement <i>RegDeleteKey</i> with the following major restriction: <i>RegDeleteKey</i> will delete only a key that contains no subkeys. The reason for this restriction becomes clear with a little thought on the matter&#8212;your process might not have permission to delete a subkey in the tree below the key that you wish to delete. The system cannot simply traverse the tree and check security permissions before beginning the delete procedure, because doing so could be a lengthy operation, and the permissions might actually change on a subkey after the security check has passed. This, in turn, could cause the deletion of subkeys to fail in the middle of the delete operation, leaving a partially destroyed registry tree.</p>

<p>Although <i>RegDeleteKey</i> will not delete a key with subkeys, the developers of the Windows shell implemented a function similar to <i>RegDeleteKey</i> that will. This function is named <i>SHDeleteKey</i> and is defined as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
DWORD燬HDeleteKey(
牋燞KEY牋爃key,
牋燩CTSTR爌szSubKey);
</pre></td></tr></table>
</p>

<p>Your process should have permission to delete all underlying keys before calling <i>SHDeleteKey</i>. If your process does not have permission to delete all underlying keys when it calls <i>SHDeleteKey</i>, the function detects this and returns &quot;Access denied.&quot; Note that <i>SHDeleteKey</i> suffers from the same previously mentioned race condition in which, if permissions for a key change during a call to <i>SHDeleteKey</i>, <i>SHDeleteKey</i> can leave a partially deleted tree.</p>

</BODY>
</HTML>




