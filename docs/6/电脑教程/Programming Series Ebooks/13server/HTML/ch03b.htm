<HTML>
<HEAD>
<TITLE>The Windows Service Communication Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch03a.htm">[Previous]</A> <A HREF="ch03c.htm">[Next]</A><P>

<A NAME="41"><H1>The Windows Service Communication Architecture</H1></A>

<p>Three types of components are involved in making services work:</p>

<UL>

<p><li><B>Service Control Manager (SCM, pronounced <I>scum</I>)</B> 
Each Windows 2000 system ships with a component called the 
Service Control Manager. This component lives in the Services.exe file; it 
is automatically invoked when the operating system boots, and 
terminates when the system is shut down. The SCM runs with 
system privileges and provides a unified and secure means of controlling 
service applications. The SCM is responsible for communicating 
with the various services, telling them to start, stop, pause, continue, 
and so on.</li></p>


<p><li><B>Service application</B> A service is simply an application that 
contains the infrastructure necessary for communicating with the 
SCM, which sends commands to the service, telling it to start, stop, 
pause, continue, or shut down. A service also calls special functions 
that communicate its status back to the SCM.</li></p>

<p><li><B>Service Control Program (SCP)</B> This is an application that 
usually presents a user interface that allows a user to start, stop, 
pause, continue, and otherwise control all the services installed on a 
machine. The service control program calls special Windows 
functions that let it talk to the SCM.</li></p>

</UL>


<p>Figure 3-1 shows how all these components communicate with one 
another. Notice that SCP applications do not communicate with services 
directly; all communication goes through the SCM. This architecture is precisely 
what makes the remote administration transparent to the SCP and service 
applications. It is possible to implement an architecture and a protocol that enables 
your SCP application to talk directly with your service application, but you must 
write the communication code yourself.</p>


<p>
<A HREF="javascript:fullSize('F03fj01x.htm')"> <img src="images/F03fj01.JPG" width=404 height=247 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-1.</b> <i>Windows service communication architecture</i><!-- /caption -->
</p>

<p>Of these three components, you will never implement the SCM 
itself. Microsoft implements the SCM and packages it into every version of 
Windows 2000. What you will implement are services and SCPs. This chapter will 
cover what you need to know to design and implement a service, and the next 
chapter will cover the details of writing an SCP.</p>

</BODY>
</HTML>




