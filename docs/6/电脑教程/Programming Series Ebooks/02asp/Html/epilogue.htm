<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- This HTML document was generated by PageMaker -->
<!-- On Mon Oct 13 19:08:30 1997 from "D:\downloadmspress\Epilogue.p65" -->
<HTML>
<HEAD>
<TITLE>Epilogue</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffff">


<H1>Choosing the Right Technology</H1>
<P>If you are a Web developer, you face a bewildering number of options for 
creating business solutions that run in a browser. Competing technologies 
present a confusing picture as you try to select a suite of tools for your project. 
This section examines some of the key issues involved in Web-based solutions 
and provides guidance in the selection of technologies for creating an application.
<P>
<H1>Client Platform Considerations</H1>
<P>Without question, the single biggest concern in technology selection is 
the target browser. You must identify the various browsers you will support with 
your solution. If the application is intended as a public Internet solution, look to 
the widest possible audience. That does <I>not</I> 
mean that you must accommodate every type of browser. If you try to do so, you are limited to simple HTML 
pages with no frames or tables. A solution written to the lowest common 
denominator offers little functionality or visual appeal.
<P>In most cases, support for Microsoft Internet Explorer and 
Netscape Navigator should be sufficient to reach over 90 percent of the intended 
audience. However, different versions of these browsers support different 
technology levels. If your application has to support an earlier version of IE or 
NN&#151;one prior to version 3.0&#151;some of the newer technologies might not work. 
And even limiting the scope of the solution by version might not be sufficient 
to solve the problem. Operating systems can affect the equation as well. For 
example, IE 3.0 running under Microsoft Windows 3.11 does not recognize 
the &lt;OBJECT&gt; tag.
<P>Obviously, target platforms become the primary focus of technology 
selection. The following table shows some popular browsers and their capabilities.
<P>
<HR>
<TABLE>
<TR>
<TD VALIGN=top><b>Browser</b></td>
<TD VALIGN=top><b>HTML</b></td>
<TD VALIGN=top><b>Cascading Style Sheets</b></td>
<TD VALIGN=top><b>Dynamic HTML</b></td>
<TD VALIGN=top><b>Scripting</b></td>
<TD VALIGN=top><b>ActiveX</b></td>
<TD VALIGN=top><b>Java</b></td>
</tr>
<TR>
<TD VALIGN=top>Internet Explorer 4.0</td>
<TD VALIGN=top>3.2</td>
<TD VALIGN=top>Complete</td>
<TD VALIGN=top>Yes</td>
<TD VALIGN=top>VBScript<BR>JScript</td>
<TD VALIGN=top>Complete</td>
<TD VALIGN=top>1.1</td>
</tr>
<TR>
<TD VALIGN=top>Internet Explorer 3.0</td>
<TD VALIGN=top>2</td>
<TD VALIGN=top>Format support only</td>
<TD VALIGN=top>No</td>
<TD VALIGN=top>VBScript<BR>JScript</td>
<TD VALIGN=top>Complete</td>
<TD VALIGN=top>1.0</td>
</tr>
<TR>
<TD VALIGN=top>Netscape Navigator 4.0 (Communicator)</td>
<TD VALIGN=top>3.2</td>
<TD VALIGN=top>Complete</td>
<TD VALIGN=top>Yes<SUP>*</SUP></td>
<TD VALIGN=top>JavaScript</td>
<TD VALIGN=top>Active Documents</td>
<TD VALIGN=top>1.1<SUP>**</SUP></td>
</tr>
<TR>
<TD VALIGN=top>Netscape Navigator 3.0</td>
<TD VALIGN=top>2</td>
<TD VALIGN=top>None</td>
<TD VALIGN=top>No</td>
<TD VALIGN=top>JavaScript</td>
<TD VALIGN=top>None</td>
<TD VALIGN=top>1.0</td>
</tr>
<TR>
<TD VALIGN=top>Netscape Navigator 2.0</td>
<TD VALIGN=top>2</td>
<TD VALIGN=top>None</td>
<TD VALIGN=top>No</td>
<TD VALIGN=top>JavaScript</td>
<TD VALIGN=top>None</td>
<TD VALIGN=top>1.0</td>
</tr>
</table>
<HR>
<FONT SIZE ="-1">*  Dynamic HTML is implemented differently in Communicator than in IE 4.0.<BR>
** Communicator supports partial implementation of Java 1.1, with complete support promised.</font>                
<P>You could examine endless combinations of browsers and operating 
systems, but let's focus on the most common solutions and consider 
suggestions for creating wide-ranging applications. For the sake of discussion, assume 
that a <I>platform-independent solution</I> means an application that can be used by 
Internet Explorer and Netscape Navigator versions 3.0 and later. Even in this 
limited domain, you'll find plenty to be concerned with.
<P>
<H2>HTML Support</H2>
<P>Within your limited field, all the browsers you are targeting support the 
latest HTML 3.2 standard. This does not mean that you can use 
<I>any</I> HTML tag. Many tags are not part of the HTML standard and are simply proprietary 
to a particular browser. The &lt;LAYER&gt; tag in Netscape Navigator 4.0 (also 
known as Communicator) is a good example of a tag not supported by any other 
browser. &lt;LAYER&gt; is used to create invisible layers of HTML content in the 
Communicator version of Dynamic HTML. However, if you limit yourself to the HTML 3.2 
standard and stay away from proprietary tags, all the target browsers should 
support your content.
<P>
<H2>Cascading Style Sheets</H2>
<P>Cascading Style Sheets (CSS) were introduced under Internet Explorer 3.0 and 
were enhanced under IE 4.0. Communicator introduced CSS support for 
Netscape browsers. IE 4.0 and Communicator accommodate the complete CSS 
specification, including positioning elements through left, top, height, width, and 
<I>z</I>-index attributes. Under IE 3.0, CSS support is limited to font attributes such as size, 
color, and style and does not include advanced content positioning.
<P>
<H2>Dynamic HTML Support</H2>
<P>Dynamic HTML is, of course, a new feature of Internet Explorer 4.0 and is 
not supported in any previous release of IE. Netscape Communicator also 
supports a version of Dynamic HTML, which can lead to confusion regarding the 
implementation of this technology. Although Netscape uses the same name for 
its dynamic positioning technology, the technology itself is fundamentally 
different from Dynamic HTML under IE 4.0. Under Communicator, you create 
layers of content that can be moved and sized dynamically. These layers can be 
created by using a &lt;STYLE&gt; tag with a position attribute set to ABSOLUTE or 
by using the proprietary &lt;LAYER&gt; tag.
<P>Although you can create effects in Communicator that are similar 
to effects in IE 4.0, you will have an extremely difficult time creating an 
application using Dynamic HTML that runs under both IE and Communicator. At 
this time, the World Wide Web Consortium (W3C) is considering standards 
for Dynamic HTML that might eventually bring the two browsers closer 
together, but the Dynamic HTML issue illustrates a larger truth: competition has 
left little motivation for companies to agree on any content generation 
standards. Look for this trend to continue.
<P>
<H2>Scripting Support</H2>
<P>Here the choice is clear. If you want to use client-side scripting in both 
Microsoft and Netscape products, you need to use JavaScript, which is recognized by 
all the target browsers. Bear in mind, however, that Internet Explore's 
JScript does not contain the same level of case sensitivity as Navigator's JavaScript.
<P>Internet Explorer also differs from Netscape Navigator in the 
implementation of its browser object model. Generally speaking, the object model of IE 4.0 is 
far richer than that of any other browser, but most of this model is used to tie 
scripting to Dynamic HTML. Therefore, if you use the browser object model beyond 
the simple Window, Document, and Form objects, be careful to ensure that the 
script runs on all target platforms.
<P>Also note that some third parties have created plug-ins for 
Navigator that allow some support for VBScript. The best known of these comes 
from N-Compass Labs. Although a plug-in can be useful, users might not have 
the plug-in when they reach your site and presumably would be forced to 
download it prior to viewing any content that required it. Forced downloading 
is time-consuming.
<P>
<H2>ActiveX Support</H2>
<P>This area might surprise you because Communicator offers some level of 
support for ActiveX technologies. Communicator has the ability to host 
documents from applications such as Microsoft Word and Microsoft Excel through 
Automation. The feature allows you to make documents a part of any site that 
targets the browser. However, any Navigator version prior to Communicator 
will not support ActiveX documents. Additionally, some literature advertises 
that Visual Basic ActiveX documents can be viewed in Communicator. At this 
writing, we can find no such support in the product.
<P>
<H2>Java</H2>
<P>Java is another area where support is widespread. But note that Internet 
Explorer version 3.0 and Netscape Navigator version 3.0 support only version 
1.0 of the Java Development Kit (JDK). The most recent release of Java, which 
is version 1.1, is fully supported only by IE 4.0. Communicator provides 
only partial support for JDK 1.1, but Netscape promises full support by the 
end of 1997.
<P>After examining the difficulties confronting developers who target a 
wide audience, you might feel that you are left with only HTML 2.0, JavaScript, 
and Java 1.0. But the truth is that the best solution targets optimal features of 
all the target browsers. The key to optimizing any solution you create is to use 
the Browser Capabilities component of Active Server Pages. (The Browser 
Capabilities component is discussed in Chapter 5.) Finally, test your site in 
every version of the browser you expect to support. You absolutely cannot 
guarantee that the site behaves correctly without multiple-platform testing.
<P>
<H2>Server-Side Considerations</H2>
<P>Platforms that can function as Web servers fall into three categories: Windows, 
non-Windows, and Internet Service Providers. The Windows platform is obviously 
the tool of choice for the back end of any Web application. Active Server Pages 
is available only from Microsoft under the Windows platform (although third 
parties have created versions for other systems). The problem arises when you cannot 
use Windows, Internet Information Server, and ASP as a back-end solution. In this 
case, you need to be aware of other available technology.
<P>Even without Windows, IIS, and ASP, you can still use many of the 
client-side technologies described in this book. Non-Windows platforms can 
download client-side script in either VBScript or JavaScript. You can also use 
client-side ActiveX components. Even though the server might not understand the 
components, the browser can still request a file download, so all you have to do is make the 
files available on the server and Internet Explorer can use them. Java is also still 
effective. Once again, as long as the files are on the server, the browser can retrieve 
them. What you lose with non-Windows platforms is the ease and performance of 
Active Server Pages. You will probably be left with older, slower technology such 
as Common Gateway Interface (CGI).
<P>If you are using an Internet Service Provider (ISP), client-side 
technologies are still available. As long as you can upload script, DLL files, and 
CLASS files, you can use VBScript, JavaScript, ActiveX, and Java. Some ISPs even 
support ASP on their server. Check with your ISP to see which technologies 
are used on the server and whether they are available to subscribers.
<P>
<H1>Conclusion</H1>
<P>Selecting a technology is a function of many different factors. You must 
decide whether your application will run on the Internet or on an intranet. You 
must identify your infrastructure support and determine whether you can use 
ASP as a back end. You should also consider existing knowledge and code 
investments. If, for example, you have seasoned Visual Basic programmers at 
your shop, training them in Java might not make sense. Additionally, existing 
code can be reused in your Web solutions. You might have existing ActiveX 
controls that could be used in Web pages or Visual Basic forms that could be 
easily converted to ActiveX Documents. All in all, no simple answers exist, and 
the pressure of competition promises to prevent true cross-platform solutions 
for years to come.
</BODY>
</HTML>
