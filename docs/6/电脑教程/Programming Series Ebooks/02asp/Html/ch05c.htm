<HTML>
<HEAD>
<TITLE>Active Server Pages Objects</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Active Server Pages Objects</B></H1>
<P>ASP hosts a number of built-in objects that are available to the developer. 
These objects help manage everything from variables to form submission. The 
objects are simple to use and can be called directly from code without any 
special syntax. In this section, we examine the ASP objects available in Visual 
InterDev for the Internet developer. Properties and methods supported by these 
objects are described in <a href="chad.htm">Appendix D</a>.


<P>
<H2>
<B>Application Object</B>
</H2>
<P>The Application object allows you to create <I>application 
variables,</I> variables that are available to all users of an application. All users who request Web 
pages from the same virtual directory can share any application variables 
defined in those pages.
<P>Listing 5-3 shows a code sample that uses the Application object. 
In this example, an application variable is used to track the last time the 
page was visited.<P>
<B>Listing 5-3.</B> <I>The Application object.</I>
<HR><BLOCKQUOTE>


<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Application&#160;Variables&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&#160;BGCOLOR=&quot;FFFFFF&quot;&gt;

This&#160;page&#160;was&#160;last&#160;visited&#160;on&#160;&lt;%=Application(&quot;Time&quot;)%&gt;

&lt;%Application.Lock%&gt;
&lt;%Application(&quot;Time&quot;)&#160;=&#160;Now%&gt;
&lt;%Application.Unlock%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>Creating an application variable is a simple matter of addressing 
the Application object with the name of the new variable you want to create. 
For example, the following code produces an application variable named 
Company and sets its value to NewTech:
<PRE WIDTH="0">Application(&quot;Company&quot;)&#160;=&#160;&quot;NewTech&quot;
</PRE>
<P>The name is arbitrary, and the variable can contain any kind of 
information, whether numbers or text.<P>
Because the variable is available to a number of users simultaneously, 
you must deal with concurrency; that is, you cannot guarantee that two users 
will not try to set the variable to different values at the same time. To deal with 
this situation, the Application object supports Lock and Unlock methods. 
The Lock method locks the entire Application object, not just the variable 
you are changing, so always unlock the Application object immediately after 
changing a variable value:
<PRE WIDTH="0">Application.Lock
Application(&quot;Company&quot;)&#160;=&#160;&quot;NewTech&quot;
Application.Unlock
</PRE>
<P>Although application variables are useful for temporary storage of 
data, they can't be used to store data permanently. The data in an 
application variable is destroyed when the Application_OnEnd event fires. Be sure to 
move application variables to permanent storage, such as a database, if you want 
to save the values after the application terminates.


<P>
<H2>
<B>Session Object</B>
</H2>
<P>In programming applications, developers are often less concerned about 
data shared by many users and more concerned about data related to an 
individual user. ASP supports variables for individual users through the Session 
object, which allows you to create <I>session 
variables</I> for use by individuals.
<P>Listing 5-4 shows how to define some session variables in the 
GLOBAL.ASA file. Defining session variables is just as simple as defining application 
variables. All you have to do is address the Session object with the name of the variable 
you want to define. The big difference between application and session variables 
is the scope. Session variables are reserved for just one user and last as long as 
the user continues the session. Once the user stops requesting pages from a 
given virtual directory for 20 minutes, the data is gone.
<P>


<B>Listing 5-4.</B> <I>Creating session variables.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&#160;RUNAT=&quot;Server&quot;&gt;

'&#160;You&#160;can&#160;add&#160;special&#160;event&#160;handlers&#160;in&#160;this&#160;file,&#160;which&#160;
'&#160;will&#160;be&#160;run&#160;automatically&#160;when&#160;special&#160;Active&#160;Server&#160;
'&#160;Pages&#160;events&#160;occur.&#160;To&#160;create&#160;these&#160;handlers,&#160;add
'&#160;a&#160;subroutine&#160;with&#160;a&#160;name&#160;from&#160;the&#160;list&#160;below&#160;that&#160;
'&#160;corresponds&#160;to&#160;the&#160;event&#160;you&#160;want&#160;to&#160;use.&#160;For&#160;example,&#160;
'&#160;to&#160;create&#160;an&#160;event&#160;handler&#160;for&#160;Session_OnStart,&#160;you&#160;would&#160;
'&#160;put&#160;the&#160;following&#160;code&#160;into&#160;this&#160;file&#160;(without&#160;the&#160;
'&#160;comments):
'
'&#160;Sub&#160;Session_OnStart
'&#160;&#160;&#160;&#160;&#160;**Put&#160;your&#160;code&#160;here&#160;**
'&#160;End&#160;Sub

'&#160;EventName&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Description
'&#160;Session_OnStart&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;the&#160;first&#160;time&#160;a&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user&#160;runs&#160;any&#160;page&#160;in&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;your&#160;application
'&#160;Session_OnEnd&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;when&#160;a&#160;user's&#160;session&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;times&#160;out&#160;or&#160;quits&#160;your&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;application
'&#160;Application_OnStart&#160;&#160;&#160;&#160;&#160;Runs&#160;once&#160;when&#160;the&#160;first&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;page&#160;of&#160;your&#160;application&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is&#160;run&#160;for&#160;the&#160;first&#160;time&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;by&#160;any&#160;user
'&#160;Application_OnEnd&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;once&#160;when&#160;the&#160;Web&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server&#160;shuts&#160;down

&lt;/SCRIPT&gt;

&lt;SCRIPT&#160;LANGUAGE=VBScript&#160;RUNAT=Server&gt;
&#160;&#160;&#160;&#160;Sub&#160;Session_OnStart
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Session(&quot;Company&quot;)&#160;=&#160;&quot;NewTech&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Session(&quot;EMail&quot;)&#160;=&#160;&quot;info@vb-bootcamp.com&quot;
&#160;&#160;&#160;&#160;End&#160;Sub
&lt;/SCRIPT&gt;
</PRE>
</blockquote>

<HR>


<P>Session variables can be created in any Web page or GLOBAL.ASA 
file, and they can be accessed from any Web page in the application where 
the variables were originally defined. You can retrieve the values of session 
variables by reading them out of the Session object. The following code reads the 
session variables established in Listing 5-4 and displays them in text fields:
<PRE WIDTH="0">&lt;FORM&gt;
&lt;P&gt;&lt;INPUT&#160;VALUE=&lt;%=Session(&quot;Company&quot;)%&gt;&gt;Company&lt;/P&gt;
&lt;P&gt;&lt;INPUT&#160;VALUE=&lt;%=Session(&quot;EMail&quot;)%&gt;&gt;E-Mail&lt;/P&gt;
&lt;/FORM&gt;
</PRE>
<P>Earlier in this chapter, Internet applications were described as 
stateless transactions between a Web server and a browser. If Internet applications 
are stateless, how does ASP remember session variables for each user of 
an application? The answer is that the session variables are saved on the 
server for each client. The browser itself receives a unique identifier that tells 
the server which set of data belongs to that client. The client stores the 
identifier, called a Globally Unique Identifier (GUID), and uses it later to retrieve the 
data stored by the server. Thus, each client can have individual data for each 
application used on the Internet.
<H2>
<B>Request Object</B>
</H2>
<P>An Internet application certainly differs in many ways from a typical 
client/server application, but they are similar in that the application 
absolutely depends upon the transfer of data between client and server. When a 
Web server wants to send data to a client, it does so by creating a Web page 
and sending it. When a client wants to return data to the Web server, the 
browser relies on the process of <I>form submission.</I><P>
To send data to a Web server, a client utilizes a form with &lt;FORM&gt; 
tags, which contain data input fields such as text boxes. The client packages 
the entered data into the data fields and subsequently submits the package to 
the back end.<P>
The process of submitting a form is controlled by two attributes of 
the &lt;FORM&gt; tag: METHOD and ACTION. The METHOD attribute of 
the &lt;FORM&gt; tag determines how the data is sent to the server. This attribute has two 
possible values: POST and GET. POST tells the browser to package all data inside 
the form and send it to the server. GET, on the other hand, sends the data as 
an integral part of the Uniform Resource Locator for the target page. The 
ACTION attribute specifies the target page for the submitted data. The following 
code, for example, sends all data from the text fields to a page named DATA.ASP 
by the POST method:
<PRE WIDTH="0">&lt;FORM&#160;METHOD=&quot;POST&quot;
&#160;&#160;&#160;&#160;ACTION=&quot;http://www.vb-bootcamp.com/data.asp&quot;&gt;
&lt;P&gt;&lt;INPUT&#160;TYPE=&quot;TEXT&quot;&#160;NAME=&quot;txtName&quot;&gt;&lt;/P&gt;
&lt;P&gt;&lt;INPUT&#160;TYPE=&quot;TEXT&quot;&#160;NAME=&quot;txtEMail&quot;&gt;&lt;/P&gt;
&lt;P&gt;&lt;INPUT&#160;TYPE=&quot;SUBMIT&quot;&gt;&lt;/P&gt;
&lt;/FORM&gt;
</PRE>
<P>The special control designated in the form as TYPE=&quot;SUBMIT&quot; is a button 
that is clicked by the user when the form is ready for submission. Clicking the 
button causes the browser to package the data in the text fields and submit it. 
The format of the submitted data is strictly defined so that the server knows 
what to expect from the client. The data takes the form of Field=Value pairs 
sent to the server in clear text format. If, in the preceding example, you 
typed <I>NewTech</I> into the txtName field and 
<I>Info</I> into the txtEMail field, the following text would be sent to the page DATA.ASP:
<PRE WIDTH="0">txtName=NewTech&amp;txtEMail=Info
</PRE>
<P>On the server side, this data could then be parsed back into fields 
and values and used by the server for any purpose, including data access or 
creating and sending e-mail. This is where the Request object comes in. The 
Request object is used by ASP to parse submitted data received from a client. To 
use the Request object, simply provide the name of the field you would like 
to examine, and the Request object returns the value. For example, the 
following code would return the value NewTech:
<PRE WIDTH="0">&lt;%=Request.Form(&quot;txtName&quot;)%&gt;
</PRE>
<P>Request.Form is used anytime you want to examine the contents of a 
form submitted to an ASP page. The Request object is available only to ASP 
pages and can return data only from a form submitted directly to your page. 
You cannot access data from forms that were not submitted to your page.<P>
Many Internet applications use sequential form submission to 
accomplish a task such as drilling into a database. However, there are times when a 
user does not need to fill out a form and submit it and would rather simply click 
a hyperlink to view data. This too can be accomplished by using the Request object.
<P>Creating a hyperlink that is capable of submitting data requires 
an anchor, or &lt;A&gt;, tag. The anchor tag uses the HREF attribute to designate 
a target page and to carry data to the target page when the user clicks the 
link. A question mark (?) separates the target page and the data. Consider 
the example in which the form submitted txtName and txtEMail fields. If 
you wanted to submit the same data using a hyperlink, you might write this code:
<PRE WIDTH="0">&lt;A&#160;HREF=
&quot;http://www.vb-bootcamp.com/data.asp?txtName=NewTech&amp;txtEMail=Info&quot;&gt;
Click&#160;here&#160;to&#160;submit&#160;data!
&lt;/A&gt;
</PRE>
<P>Notice how the data attached to the hyperlink takes the 
format Field=Value, just as it does in a submitted form. As long as you provide the data in 
this format, the Request object will be able to parse it. Strangely, you cannot 
use the syntax Request.Form on data submitted through a hyperlink. Instead, 
you must use Request.QueryString, which works in the same way as 
Request.Form but is used on data submitted by a hyperlink. Thus, the following code 
returns the value NewTech from the hyperlink:
<PRE WIDTH="0">&lt;%=Request.QueryString(&quot;txtName&quot;)%&gt;
</PRE>
<P>The Request object has several other uses as well. You can, for 
example, use Request to retrieve all kinds of information about the client. You can 
access everything from cookies sent with the client's request to the user agent 
string of the browser. Listing 5-5 shows a simple example of using the 
ServerVariables collection of the Request object to determine the Microsoft Windows 
NT account that the client is logged on to.
<P>
<B>Listing 5-5.</B>


<I>Determining the Windows NT logon account.</I>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Visual&#160;InterDev&#160;1.0&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Server&#160;Variables&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&#160;BGCOLOR=&quot;WHITE&quot;&gt;

&lt;H1&gt;
You&#160;are&#160;logged&#160;in&#160;under&#160;&lt;%=Request.ServerVariables(&quot;LOGON_USER&quot;)%&gt;
&lt;/H1&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>


</blockquote><HR>
<P>Server variables provide a wide range of information about the client 
and the Web server. Complete documentation of all variables supported in 
this collection can be found in Visual InterDev, but accessing any particular 
variable is simply a matter of reading the collection. For example, the following 
code returns the user agent string of the client browser:
<PRE WIDTH="0">&lt;%=Request.ServerVariables(&quot;HTTP_USER_AGENT&quot;)%&gt;&#160;
</PRE>
<H2>
<B>Response Object</B>
</H2>
<P>The Response object manages the content returned to a browser by ASP. In 
fact, although you might not realize it, you use the Response object in every 
ASP page. When you use the angle bracket/percent sign/equal sign 
combination (&lt;%=<I>variable%&gt;</I>) to return ASP-generated content, the equal sign is 
actually shorthand for the Write method of the Response object. Therefore, the 
following two lines of code are equivalent:
<PRE WIDTH="0">&lt;%=&quot;NewTech&quot;%&gt;
&lt;%Response.Write&#160;&quot;NewTech&quot;%&gt;
</PRE>
<P>Because the Response object is used so frequently in ASP, the equal 
sign shorthand makes a lot of sense. Otherwise, you would have to type 
countless iterations of <I>Response.Write</I> into every ASP page.
<P>Another useful feature of the Response object is the Expires 
property. Response.Expires specifies the time in minutes before the current 
page expires. If this property is set to zero, the Web page expires the moment it 
is downloaded and Internet Explorer will not cache the page.
<P>Caching in Internet Explorer version 4.0 affects many 
development efforts and can prevent your site from behaving correctly. IE 4.0 
actually caches pages in two ways: to disk and to memory. Most developers and 
users are familiar with page caching to disk and expect this to occur, but 
most people do not realize that IE 4.0 also caches pages to memory. In fact, IE 
4.0 remembers in RAM the last five pages that were viewed. This can have 
a significant impact on the way your application behaves. Consider 
the following simple code to show a date/time stamp in a Web page:
<PRE WIDTH="0">&lt;H1&gt;The&#160;time&#160;is&#160;now&#160;&lt;%Response.Write&#160;Now%&gt;
</PRE>
<P>Under normal conditions, IE 4.0 requests this page and the server 
script is run, causing the current time to appear on the page. However, if the 
browser moves to another page and then back to the page with the date/time 
stamp, the time will not change. This is because IE 4.0 has cached the results of 
the ASP page in RAM and does not request a new page when the browser 
returns. This behavior will continue until the user visits five different pages, after 
which the first page is flushed from the RAM cache.<P>
You can prevent this caching behavior by setting the Expires property 
of the Response object to 0, forcing the Web page to expire. The complete 
code in Listing 5-6 displays the correct time whenever the page is 
visible&#151;regardless of whether it is in the RAM cache.<P>
RAM caching can cause strange effects at design time as well. 
Developers often make changes to a Web page in Visual InterDev, browse it, and 
wonder why the changes do not appear in the new page. This usually happens 
because the old version of the page is still in the RAM cache and IE 4.0 does not 
load the changed page. Therefore, when developing pages in Visual InterDev, 
always reload your page into the browser after making changes.<P>
<B>Listing 5-6.</B>


<I>Forcing a page to expire.</I>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;%Response.Expires&#160;=&#160;0%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Visual&#160;InterDev&#160;1.0&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Forcing&#160;a&#160;Page&#160;to&#160;Expire&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&#160;BGCOLOR=&quot;white&quot;&gt;
&lt;H1&gt;The&#160;time&#160;is&#160;now&#160;&lt;%Response.Write&#160;Now%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>


</blockquote><HR>
<H2>
<B>Server Object</B>
</H2>
<P>The Server object is a sort of catchall object, providing functions that are 
not related to each other in any way except that they are useful to the 
Internet developer.
<P>Perhaps the most important of all the Server object functions is 
the CreateObject method, which creates an instance of an ActiveX 
component. The component can be either a built-in component that ships with 
Visual InterDev (discussed in the next section) or a component you make yourself 
in any language. In any case, using a server-side ActiveX component requires 
the CreateObject method.<P>
CreateObject takes as an argument the ProgID of the ActiveX 
component that you want to use. A ProgID is a descriptive name for a component such 
as Excel.Sheet or Word.Basic. The following code shows how you could use 
the CreateObject method to generate an instance of an e-mail component that 
has a ProgID of Mail.Connector.
<PRE WIDTH="0">Set&#160;MyObject&#160;=&#160;Server.CreateObject(&quot;Mail.Connector&quot;)
</PRE>


</BODY>
</HTML>
