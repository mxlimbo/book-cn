<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- This HTML document was generated by PageMaker -->
<!-- On Wed Oct 08 16:34:42 1997 from "C:\unzipped\PP-APPDS\Z01APPA.P65" -->
<HTML>
<HEAD>
<TITLE>Appendix A</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffff">



<H1>Appendix A</H1>
<H1>VBScript and ActiveX Primer</H1>
<P>This appendix provides a quick reference for developers who are starting 
to use the VBScript language and ActiveX technology to create dynamic Web pages.
<H1>Script Sections</H1>
<P>Understanding scripting begins with &lt;SCRIPT&gt; tags, which designate 
sections of an HTML Web page where script code can be inserted. 
Although usually placed as the last set of tags in the HEAD section of a Web 
page, &lt;SCRIPT&gt; tags can be used anywhere in the page. A &lt;SCRIPT&gt; tag has 
the following syntax:
<UL>
<TABLE>
<TR>
<TD VALIGN=top WIDTH=150>&lt;SCRIPT</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CLASS</td>
<TD VALIGN=top>The style class for the &lt;SCRIPT&gt; tag</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>EVENT</td>
<TD VALIGN=top>The name of the event that the &lt;SCRIPT&gt; tag will handle</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>FOR</td>
<TD VALIGN=top>The name of the HTML element that triggers the handled event</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ID</td>
<TD VALIGN=top>The identifier for the tag</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>LANGUAGE</td>
<TD VALIGN=top>The scripting language used for this section</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>SRC</td>
<TD VALIGN=top>The source file for this section</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>TITLE</td>
<TD VALIGN=top>Additional information</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&gt;</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&lt;/SCRIPT&gt;</td>
<TD VALIGN=top></td>
</tr>
</table>             
</ul>
<P>VBScript is an event-driven language, and the primary purpose of 
a SCRIPT section is to map the code you write to a user interaction or a 
system response. Microsoft Internet Explorer supports many different types of 
events, including a full range of mouse and keyboard events. (For a complete list 
of supported events, see the online reference on the CD-ROM that 
accompanies this book.)
<P>Mapping events to code in a SCRIPT section can be accomplished 
in different ways. You can choose, for example, to dedicate an entire 
SCRIPT section to a single event by using the EVENT and FOR attributes of 
the &lt;SCRIPT&gt; tag. The following code declares a SCRIPT section for 
the Window_OnLoad event:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot; FOR=&quot;Window&quot; EVENT=&quot;OnLoad&quot;&gt;

&lt;/SCRIPT&gt;
</PRE>
<P>Obviously, if you declare a SCRIPT section for just one event, you will 
have to create multiple sections&#151;one for each event that you want to trap. 
But multiple SCRIPT sections are difficult to maintain, so you might want to 
combine a number of events in one section. This is accomplished by using the 
<I>Sub Object_EventName</I> syntax. The following code designates a single section 
that contains event handlers for both the OnLoad and OnUnload events of 
the Window object:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&#160;&#160;&#160; Sub Window_OnLoad()

&#160;&#160;&#160; End Sub

&#160;&#160;&#160; Sub Window_OnUnload()

&#160;&#160;&#160; End Sub
&lt;/SCRIPT&gt;
</PRE>
<P>You can also choose to map events by using event-handling 
attributes, which are mapped directly to a tag and call a VBScript procedure written in 
a SCRIPT section. The following code uses an event-handling attribute to 
call a function for the OnLoad event of the Window object:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&#160;&#160;&#160; Sub PageStart
&#160;&#160;&#160;&#160;&#160;&#160;&#160; MsgBox &quot;Page Loaded!&quot;
&#160;&#160;&#160; End Sub
&lt;/SCRIPT&gt;

&lt;BODY LANGUAGE=&quot;VBScript&quot; OnLoad=&quot;PageStart&quot;&gt;
</PRE>
<P>Regardless of how you choose to declare events, you must be wary 
of attempting to execute client-side code in a browser that does not support 
scripting. Browsers have an interesting response to tags they do not recognize: 
they simply ignore them. This has a strange effect on the code contained in 
a SCRIPT section. For example, you would expect the following code to show 
a message when the page is loaded:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&#160;&#160;&#160; Sub Window_OnLoad()
&#160;&#160;&#160;&#160;&#160;&#160;&#160; MsgBox &quot;Hello!&quot;
&#160;&#160;&#160; End Sub
&lt;/SCRIPT&gt;
</PRE>
<P>This code works well if the browser recognizes script. But an old 
Mosaic browser, which does not understand the &lt;SCRIPT&gt; tag, ignores the tag 
and sees only the following text:
<PRE WIDTH="0">Sub Window_OnLoad()
&#160;&#160;&#160; MsgBox &quot;Hello!&quot;
End Sub
</PRE>
<P>Because the code now appears as text, the old browser is happy to 
display the code as content in the body of the browser. This is not at all what you 
want. The solution to the problem is to surround the code with HTML 
comment marks, which hide the code from old browsers and prevent unwanted 
behavior. Newer browsers expect to see the comment marks and will ignore them.
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
&#160;&#160;&#160; Sub Window_OnLoad()
&#160;&#160;&#160;&#160;&#160;&#160;&#160; MsgBox &quot;Hello!&quot;
&#160;&#160;&#160; End Sub
--&gt;
&lt;/SCRIPT&gt;
</PRE>
<H1>Declaring Variables</H1>
<P>VBScript supports only one data type: the Variant. A Variant is a variable 
that can represent any data&#151;numbers, text, or objects. You simply declare a 
variable and assign the value. A Variant can, however, distinguish the kind of 
data stored in the variable. This distinction is known as the Variant subtype, 
which determines whether a value is added or concatenated (for example, when 
you use a + sign).<P>
Data subtypes can lead to subtle Type Mismatch errors in your script 
code. For example, suppose you want to assign the Window object to a variable. 
You might declare a Variant with the Dim statement and assign the object, but 
this will fail unless you use the Set keyword required by VBScript when dealing 
with object data:
<PRE WIDTH="0">Dim MyWindow
Set MyWindow = Window
</PRE>
<P>VBScript supports a full range of subtype conversions. Generally, 
these functions begin with capital C (for convert) and the subtype you want. 
Thus, a number can convert to a string, as follows:
<PRE WIDTH="0">Dim MyString
Dim MyNumber
MyNumber = 5
MyString = CStr(MyNumber)
</PRE>
<P>Variables declared in VBScript have lifetime and scope restrictions. 
<I>Lifetime</I> and <I>scope</I> refer to how long the variable is available and what parts of 
the VBScript code can access it. VBScript supports three levels of scope 
through the keywords Public, Private, and Dim.
<P>Public variables are declared inside of a SCRIPT section but outside 
of any procedure. When variables are declared as Public, they are available to 
all the scripts in the Web page. Their values persist as long as the page is loaded.<P>
Private variables are also declared inside of a SCRIPT section and 
outside of any procedure. When variables are declared as Private, they are 
available only to the routines defined in the SCRIPT section where the 
variables are defined. Their values persist as long as the Web page is loaded.<P>
Variables declared with the Dim keyword can be declared outside 
of routines, where they behave as Private variables. They can also be 
declared directly in the body of a procedure, where they are available only to the 
procedure code itself; no other routine can use them. When variables are 
declared in a procedure, their values persist only until the procedure finishes 
running, and then they are destroyed.
<H1>Key Language Elements</H1>
<P>VBScript supports a number of structures designed to perform decision 
and looping functions in the program. These structures create the logic of 
the program.
<P>The primary decision structure in VBScript is the If&#133;Then 
statement, which has the following syntax:
<PRE WIDTH="0"><B>If</B> <I>condition</I> <B>Then</B>
&#160;&#160;&#160;&#160;[<I>statements</I>]
[<B>ElseIf</B> <I>condition-n</I> <B>Then</B>
&#160;&#160;&#160;&#160;[<I>elseifstatements</I>]]<B>...</B>
[<B>Else</B>
&#160;&#160;&#160;&#160;[<I>elsestatements</I>]]
<B>End If</B> 
</PRE>
<P>If&#133;Then structures are useful for making simple decisions but can 
be cumbersome if the number of cases is too large. Fortunately, VBScript 
supports the Select&#133;Case statement, which provides a number of different 
branching tests in a single compact statement. The Select&#133;Case statement has the 
following syntax:
<PRE WIDTH="0"><B>Select Case</B> <I>testexpression</I>
&#160;&#160;&#160;&#160;[<B>Case</B> <I>expressionlist-n</I>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[<I>statements-n</I>]]<B>...</B>
&#160;&#160;&#160;&#160;[<B>Case Else</B> <I>expressionlist-n</I>
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[<I>elsestatements-n</I>]]
<B>End Select</B>
</PRE>
<P>In addition to decision structures, VBScript supports several 
looping structures, which allow you to perform an operation many times or move 
easily through a group of objects. The primary loop structure is For&#133;Next, 
which loops a fixed number of times based on the definition of a looping 
variable. The For&#133;Next loop has the following syntax:
<PRE WIDTH="0"><B>For</B> <I>counter</I> <B>=</B> <I>start</I> <B>To</B> <I>end</I> [<B>Step</B> <I>step</I>]
&#160;&#160;&#160;&#160;[<I>statements</I>]
<B>Next</B>
</PRE>
<P>Although For&#133;Next is good for simple loops, more complex loops 
require a richer structure. The Do loop allows looping to continue until a 
condition is met, supporting conditional testing at either the beginning or the 
end of the loop. The Do loop has the following syntax:
<PRE WIDTH="0"><B>Do </B>[{<B>While</B> | <B>Until</B>} <I>condition</I>]
&#160;&#160;&#160;&#160;[<I>statements</I>]
<B>Loop</B> [{<B>While</B> | <B>Until</B>} <I>condition</I>]
</PRE>
<P>If you need to move through a set of objects contained in a 
collection, choose the For Each&#133;Next loop, which allows you to perform an 
operation on every member of a collection or an array. The For Each&#133;Next loop has 
the following syntax:
<PRE WIDTH="0"><B>For Each</B> <I>element</I> <B>In</B> <I>group</I>
&#160;&#160;&#160;&#160;[<I>statements</I>]
<B>Next</B> [<I>element</I>]
</PRE>
<H1>Using ActiveX Components</H1>
<P>In addition to the built-in variables, functions, and structures 
of VBScript, you can utilize ActiveX components in constructing your Web pages. These 
ActiveX components can be controls found in the toolbox of a visual development 
tool, or they can be Automation servers that do not have a graphical user 
interface. In any case, VBScript accesses the functionality of an ActiveX 
component through the &lt;OBJECT&gt; tag, which defines the component to be run on 
the client. The &lt;OBJECT&gt; tag has the following syntax:
<UL>
<TABLE>
<TR>
<TD VALIGN=top WIDTH=150>&lt;OBJECT</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ACCESSKEY</td>
<TD VALIGN=top>The key to use as an accelerator with the CTRL key</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ALIGN</td>
<TD VALIGN=top>The alignment to use with the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CLASS</td>
<TD VALIGN=top>The style class of the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CLASSID</td>
<TD VALIGN=top>The Globally Unique Identifier (GUID) that identifies the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CODE</td>
<TD VALIGN=top>The location of the Java class file</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CODEBASE</td>
<TD VALIGN=top>The location of the component files for downloading</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CODETYPE</td>
<TD VALIGN=top>The Internet media-type for the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATA</td>
<TD VALIGN=top>The Internet address where the component's run-time data is located</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATAFLD</td>
<TD VALIGN=top>The database field to bind to the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATASRC</td>
<TD VALIGN=top>The ID of the Advanced Data Control to bind with</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>HEIGHT</td>
<TD VALIGN=top>The height of the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ID</td>
<TD VALIGN=top>The identifier for the component in this page</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>LANGUAGE</td>
<TD VALIGN=top>The language to use with event attributes</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>NAME</td>
<TD VALIGN=top>The name of the component or bookmark</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>STYLE</td>
<TD VALIGN=top>The style attributes for the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>TABINDEX</td>
<TD VALIGN=top>The tabbing order for the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>TITLE</td>
<TD VALIGN=top>Additional information</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>TYPE</td>
<TD VALIGN=top>The MIME type for the scripting engine</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>WIDTH</td>
<TD VALIGN=top>The width of the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&gt;</td>
<TD VALIGN=top>&lt;/OBJECT&gt;</td>
</tr>
</table>
</ul>                                
<P>Although the &lt;OBJECT&gt; tag has many attributes, only three of them 
are required to use a component: ID, CLASSID, and CODEBASE. ID is the 
name of the component. You use this attribute in VBScript to address the 
properties, events, and methods of the component.
<P>The CLASSID attribute contains the GUID that uniquely identifies 
the component. (The GUID is a serial number unique to the component and 
is the same on every client machine running the component.) CLASSID is 
stored in the system registry for all ActiveX components. When Microsoft 
Internet Explorer 4.0 encounters an &lt;OBJECT&gt; tag, it uses the CLASSID attribute 
to identify the component in the system registry and create a copy of it. If 
the component is not in the registry, IE 4.0 can download it from the address 
specified by the CODEBASE attribute.
<P>Once downloaded, the component generally sets default values for 
its properties. This is usually accomplished through &lt;PARAM&gt; tags, which 
identify a property of the component and a default value. A &lt;PARAM&gt; tag has 
the following syntax:
<UL>
<TABLE>
<TR>
<TD VALIGN=top WIDTH=150>&lt;PARAM</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATAFLD</td>
<TD VALIGN=top>The database field to bind to the component</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATAFORMATAS</td>
<TD VALIGN=top>Indicates whether the bound data is HTML or plain text</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATASRC</td>
<TD VALIGN=top>The ID of the Advanced Data Control to bind with</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>NAME</td>
<TD VALIGN=top>The property name</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>VALUE</td>
<TD VALIGN=top>The default value</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&gt;</td>
<TD VALIGN=top></td>
</tr>
</table>
</ul>          
</BODY>
</HTML>
