<HTML>
<HEAD>
<TITLE>Active Server Pages Components</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Active Server Pages Components</B></H1>
<P>ASP components are really just ActiveX components&#151;like any you 
might create in Visual Basic, Visual C++, or even Visual 
J++. These special components, however, are written by Microsoft and ship with Visual InterDev. They 
are designed to perform useful, generic tasks for Web sites, including data 
access. You create these components in your Web page by using the 
CreateObject method of the Server object. Once they are created, you can access 
their properties and methods to perform functions in your site.
<H2>
<B>Database Access Component (ActiveX Data Objects)</B>
</H2>
<P>The most useful of all the ASP components has to be the Database 
Access component, also called the ActiveX Data Objects, or ADO. Database 
publishing on the Web utilizes this component, and the objects contained in it, to 
read and write to Open Database Connectivity (ODBC) data sources. (See 
<a href="chad.htm">Appendix D</a> for a complete list of ActiveX Data Objects.)
<P>The Connection object is created through the CreateObject method 
of the Server object and uses a variable to receive the object reference. Once 
the Connection object is created, it can be used to open a connection to any 
ODBC data source. The following code establishes a connection to a SQL 
Server ODBC source named Publications:
<PRE WIDTH="0">&lt;%
&#160;&#160;&#160;&#160;`&#160;Declare&#160;a&#160;variable
&#160;&#160;&#160;&#160;Dim&#160;objConnection

&#160;&#160;&#160;&#160;`&#160;Create&#160;the&#160;Connection&#160;object
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Server.CreateObject(&quot;ADODB.Connection&quot;)

&#160;&#160;&#160;&#160;`&#160;Open&#160;the&#160;data&#160;source&#160;connection
&#160;&#160;&#160;&#160;objConnection.Open&#160;&quot;Publications&quot;,&#160;&quot;sa&quot;,&#160;&quot;&quot;
%&gt;
</PRE>
<P>In this code, objConnection is the variable used as an object 
reference to the instance of the Connection object. This reference can access all 
the properties and methods of the Connection object. The Open method 
establishes the data source connection and has three arguments: data source name, 
user ID, and password.<P>
When the data source connection is open, you can use a Recordset 
object to retrieve information from the data source. The Recordset object allows 
you to run an SQL SELECT statement and returns a set of records matching 
the statement. Like the Connection object, the Recordset object is created by 
using the Server object. In the following example, the program runs an 
SQL SELECT statement on the data source represented by the variable objConnection:
<PRE WIDTH="0">&lt;%
&#160;&#160;&#160;&#160;`&#160;Declare&#160;a&#160;variable
&#160;&#160;&#160;&#160;Dim&#160;objRecordset

&#160;&#160;&#160;&#160;`&#160;Create&#160;the&#160;Recordset&#160;object
&#160;&#160;&#160;&#160;Set&#160;objRecordset&#160;=&#160;Server.CreateObject(&quot;ADODB.Recordset&quot;)

&#160;&#160;&#160;&#160;`&#160;Run&#160;the&#160;SQL&#160;query
&#160;&#160;&#160;&#160;objRecordset.Open&#160;&quot;SELECT&#160;*&quot;,&#160;objConnection
%&gt;
</PRE>
<P>After the records are retrieved, you can use the MoveFirst, 
MoveLast, MoveNext, and MovePrevious methods to navigate the records. The 
Write method of the Response object can place the data onto a Web page, which is 
then passed to a browser. Listing 5-7 shows a complete sample ASP page that 
builds a list box of publishing companies contained in a Publications data source.
<P>
<B>Listing 5-7.</B> <I>Building a data list with ADO.</I>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Visual&#160;InterDev&#160;1.0&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Using&#160;ADO&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;


&lt;%
&#160;&#160;&#160;&#160;'&#160;Declare&#160;variables
&#160;&#160;&#160;&#160;Dim&#160;objConnection
&#160;&#160;&#160;&#160;Dim&#160;objRecordset
&#160;&#160;&#160;&#160;'&#160;Create&#160;objects
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Server.CreateObject(&quot;ADODB.Connection&quot;)
&#160;&#160;&#160;&#160;Set&#160;objRecordset&#160;=&#160;Server.CreateObject(&quot;ADODB.Recordset&quot;)

&#160;&#160;&#160;&#160;'&#160;Open&#160;connection&#160;and&#160;run&#160;query
&#160;&#160;&#160;&#160;objConnection.Open&#160;&quot;Publications&quot;,&#160;&quot;sa&quot;,&#160;&quot;&quot;
&#160;&#160;&#160;&#160;objRecordset.Open&#160;&quot;SELECT&#160;pub_name&#160;FROM&#160;Publishers&quot;,&#160;objConnection
%&gt;

&lt;!--&#160;Build&#160;SELECT&#160;list&#160;from&#160;recordset&#160;--&gt;
&lt;SELECT&#160;SIZE=8&gt;
&lt;%
&#160;&#160;&#160;&#160;Do&#160;While&#160;Not&#160;ObjRecordset.EOF
%&gt;

&lt;!--&#160;Create&#160;each&#160;entry&#160;in&#160;the&#160;list&#160;--&gt;
&lt;OPTION&gt;&lt;%=objRecordset(&quot;pub_name&quot;)%&gt;&lt;/OPTION&gt;

&lt;%
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objRecordset.MoveNext
&#160;&#160;&#160;&#160;Loop
%&gt;
&lt;/SELECT&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>Managing the information in a Recordset object is one of the 
primary programming tasks in any data-driven Web application. Often a simple 
query returns many more rows of data than can be reasonably displayed. For 
example, consider what happens when you use any Internet search engine. The 
engine accepts a keyword and then returns links to sites with references to the 
requested topic. Many times, however, there are thousands of Internet sites that 
contain the requested keyword. Showing all the sites at once on a single Web page 
is obviously impossible.<P>
The answer to large query-result sets is 
<I>paging.</I> Paging is used by all search engines to return a portion of the query results&#151;say, 10 records at a 
time&#151;so that the user can effectively manage the information returned. 
ADO supports paging through several properties of the Recordset object: 
PageSize, PageCount, and AbsolutePage.<P>
When you use ADO to retrieve a recordset, you can specify that 
the records be divided into pages. Setting a value for the PageSize 
property specifies the number of rows from the recordset that will constitute a 
page. Then you can determine the total number of pages in a recordset 
through the PageCount property. Accessing any given page is accomplished with 
the AbsolutePage property.<P>
Listing 5-8 provides a complete paging example that allows a user to 
browse records 10 at a time. In this example, a session variable named 
CurrentPage is used to track the page currently in use. The user can click two hyperlinks 
to navigate to the previous set or next set of 10 records.
<P>
<B>Listing 5-8.</b> <I>Paging with ADO.</i>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;%Response.Expires&#160;=&#160;0%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Visual&#160;InterDev&#160;1.0&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Paging&#160;Records&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;%

&#160;&#160;&#160;&#160;'&#160;What&#160;page&#160;are&#160;we&#160;on?
&#160;&#160;&#160;&#160;Select&#160;Case&#160;Request.QueryString(&quot;Direction&quot;)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Case&#160;&quot;&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Session(&quot;CurrentPage&quot;)&#160;=&#160;1
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Case&#160;&quot;Next&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Session(&quot;CurrentPage&quot;)&#160;=&#160;Session(&quot;CurrentPage&quot;)&#160;+&#160;1
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Case&#160;&quot;Previous&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Session(&quot;CurrentPage&quot;)&#160;=&#160;Session(&quot;CurrentPage&quot;)&#160;-&#160;1
&#160;&#160;&#160;&#160;End&#160;Select

&#160;&#160;&#160;&#160;'&#160;Constants
&#160;&#160;&#160;&#160;Const&#160;adOpenKeyset&#160;=&#160;1

&#160;&#160;&#160;&#160;'&#160;Declare&#160;variables
&#160;&#160;&#160;&#160;Dim&#160;objConnection
&#160;&#160;&#160;&#160;Dim&#160;objRecordset

&#160;&#160;&#160;&#160;'&#160;Open&#160;database
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Server.CreateObject(&quot;ADODB.Connection&quot;)
&#160;&#160;&#160;&#160;objConnection.Open&#160;&quot;Biblio&quot;,&#160;&quot;&quot;,&#160;&quot;&quot;

&#160;&#160;&#160;&#160;'&#160;Create&#160;the&#160;SQL&#160;statement
&#160;&#160;&#160;&#160;Dim&#160;strSQL
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;SELECT&#160;Authors.Author,&#160;Titles.Title,&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;Publishers.`Company&#160;Name`&#160;FROM&#160;Authors,&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;`Title&#160;Author`,&#160;Titles,&#160;Publishers&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;WHERE&#160;Authors.Au_ID&#160;=&#160;`Title&#160;Author`.Au_ID&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;AND&#160;`Title&#160;Author`.ISBN&#160;=&#160;Titles.ISBN&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;AND&#160;(Publishers.`Company&#160;Name`&#160;LIKE&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;'%Microsoft%')&#160;ORDER&#160;BY&#160;Authors.Author&quot;

&#160;&#160;&#160;&#160;'&#160;Create&#160;recordset
&#160;&#160;&#160;&#160;Set&#160;objRecordset&#160;=&#160;Server.CreateObject(&quot;ADODB.Recordset&quot;)
&#160;&#160;&#160;&#160;objRecordset.PageSize&#160;=&#160;10
&#160;&#160;&#160;&#160;objRecordset.Open&#160;strSQL,&#160;objConnection,&#160;adOpenKeyset
&#160;&#160;&#160;&#160;objRecordset.AbsolutePage&#160;=&#160;CLng(Session(&quot;CurrentPage&quot;))

&#160;&#160;&#160;&#160;'&#160;Show&#160;the&#160;results
%&gt;

&lt;P&gt;Page&#160;&lt;%=Session(&quot;CurrentPage&quot;)%&gt;&#160;of&#160;&lt;%=objRecordset.PageCount%&gt;
&lt;/P&gt;

&lt;TABLE&#160;BORDER&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TR&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Author
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Title
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Publisher
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TH&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TR&gt;
&lt;%
&#160;&#160;&#160;&#160;Dim&#160;i
&#160;&#160;&#160;&#160;For&#160;i&#160;=&#160;1&#160;To&#160;objRecordset.PageSize
%&gt;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TR&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;%=objRecordset(&quot;Author&quot;)%&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;%=objRecordset(&quot;Title&quot;)%&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;%=objRecordset(&quot;Company&#160;Name&quot;)%&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TD&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/TR&gt;
&lt;%
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objRecordset.MoveNext
&#160;&#160;&#160;&#160;Next
%&gt;
&lt;/TABLE&gt;

&lt;!--&#160;NEXT&#160;hyperlink&#160;--&gt;
&lt;%If&#160;CLng(Session(&quot;CurrentPage&quot;))&#160;&lt;&#160;objRecordset.PageCount&#160;Then&#160;%&gt;
&lt;P&gt;&lt;A&#160;HREF=&quot;paging.asp?Direction=Next&quot;&gt;Next&#160;Page&lt;/A&gt;&lt;/P&gt;
&lt;%End&#160;If%&gt;

&lt;!--&#160;PREVIOUS&#160;hyperlink&#160;--&gt;
&lt;%If&#160;CLng(Session(&quot;CurrentPage&quot;))&#160;&gt;&#160;1&#160;Then&#160;%&gt;
&lt;P&gt;&lt;A&#160;HREF=&quot;paging.asp?Direction=Prev&quot;&gt;Previous&#160;Page&lt;/A&gt;&lt;/P&gt;
&lt;%End&#160;If%&gt;

&lt;%
&#160;&#160;&#160;&#160;'&#160;Close&#160;database
&#160;&#160;&#160;&#160;objRecordset.Close
&#160;&#160;&#160;&#160;objConnection.Close
&#160;&#160;&#160;&#160;Set&#160;objRecordset&#160;=&#160;Nothing
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Nothing
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>The example utilizes several techniques that are worth discussing. 
Notice first that the program requires only a single ASP file to accomplish the 
entire paging process. The same ASP file is called again and again for each 
page of data. Normally, when a page is called, Internet Explorer provides the 
page from RAM, if available. In the example, the page will always be in RAM 
because it is called recursively.<P>
The problem with retrieving a page from RAM, however, is that your 
query will not be executed unless you run the server-side code. You have to 
prevent IE&#160;4.0 from using the ASP file already in RAM. To force a return 
to the server, set the Expires property of the Response object to zero. This code forces a 
refresh of the file on each request and results in the proper behavior.<P>
Also note that the code runs the same query each time the page 
is called, changing only the AbsolutePage property. Running the same 
query over and over might seem wasteful, but it requires far fewer resources 
than storing large Recordset objects in session variables and trying to 
persist them across pages. Imagine a site with thousands of users, each with 
a Recordset object in a session variable. This would quickly eat up 
server-side resources.<P>
Using ADO, you can perform data access on the server side by using 
any SQL statement. Queries can be retrieved using SQL server stored 
procedures or through hard-coded SQL SELECT statements. Updates are performed 
using SQL UPDATE statements and the Execute method of the Connection 
object. You can also use ADO on the client side in combination with the 
Advanced Data Control (ADC), covered in <a href="ch04a.htm">Chapter 4</a>. In fact, the ADC is little more 
than an ActiveX control wrapper for much of the functionality of ADO. The 
ADC provides access to many of these features through its Recordset property.
<H2>
<B>File Access Component</B>
</H2>
<P>The File Access component allows access to text files on your Web site. 
The component actually consists of two separate objects: the FileSystem 
object, which is used to open and close files; and the TextStream object, which is 
used to read and write.<P>
To open a file for access, first create a FileSystem object with 
the CreateObject method of the Server object. Once the FileSystem object 
is instantiated, you can use the CreateTextFile method to create a new file or 
the OpenTextFile method to open an existing file. In either case, the result is 
a TextStream object that allows reading or writing. The following code shows 
how to use the objects to access a file named DATA.TXT:
<PRE WIDTH="0">Set&#160;objFile&#160;=&#160;Server.CreateObject(&quot;Scripting.FileSystemObject&quot;)
Set&#160;objStream&#160;=&#160;objFile.OpenTextFile(&quot;DATA.TXT&quot;)
</PRE>
<P>After the TextStream object is created, you can use any number 
of available methods to read or write to the file. Keep in mind, however, that 
a file is usually opened only for reading or writing, not for both 
simultaneously. This can greatly affect the code in your ASP page, occasionally requiring a 
file to be opened, closed, and then reopened for different operations.<P>
In addition to simple reading and writing, the File Access component 
is also useful for creating dynamic content. Try creating a tip-of-the-day 
effect, which displays a different tip or message on the page each time the page 
is accessed. Listing 5-9 shows a complete example that provides Visual 
Basic programming hints. The key to generating tips is to create a text file that 
has a single line for each tip. The tips are then accessed randomly by using 
the ReadLine method of the TextStream object. A single line is placed on the 
page by using the Write method of the Response object.
<P>
<B>Listing 5-9.</b> <I>Generating a tip of the day.</i>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;!DOCTYPE&#160;HTML&#160;PUBLIC&#160;&quot;-//IETF//DTD&#160;HTML//EN&quot;&gt;
&lt;HTML&gt;

&lt;HEAD&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;content=&quot;Microsoft&#160;FrontPage&#160;2.0&quot;&gt;
&lt;TITLE&gt;VB&#160;Tips&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&#160;BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;%

&#160;&#160;&#160;&#160;'&#160;Declare&#160;variables
&#160;&#160;&#160;&#160;Dim&#160;objFile
&#160;&#160;&#160;&#160;Dim&#160;objStream

&#160;&#160;&#160;&#160;'&#160;Open&#160;file
&#160;&#160;&#160;&#160;Set&#160;objFile&#160;=&#160;_
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Server.CreateObject(&quot;Scripting.FileSystemObject&quot;)
&#160;&#160;&#160;&#160;Set&#160;objStream&#160;=&#160;_
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objFile.OpenTextFile(Server.MapPath(&quot;/ASP&quot;)&#160;&amp;&#160;_
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;\Chap05\Listing&#160;5-9\tips.txt&quot;)

&#160;&#160;&#160;&#160;Randomize&#160;Timer
&#160;&#160;&#160;&#160;intLine&#160;=&#160;Int(Rnd&#160;*&#160;19)

&#160;&#160;&#160;&#160;For&#160;i&#160;=&#160;0&#160;to&#160;intLine
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objStream.SkipLine
&#160;&#160;&#160;&#160;Next

&#160;&#160;&#160;&#160;strText&#160;=&#160;objStream.ReadLine
&#160;&#160;&#160;&#160;objStream.Close
&#160;&#160;&#160;&#160;Set&#160;objStream&#160;=&#160;Nothing
&#160;&#160;&#160;&#160;Set&#160;objFile&#160;=&#160;Nothing

%&gt;
&lt;CENTER&gt;&lt;H1&gt;VB&#160;Tip&#160;of&#160;the&#160;Day&lt;/H1&gt;&lt;/CENTER&gt;
&lt;%=strText%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<H2>
<B>Browser Capabilities Component</B>
</H2>
<P>The Browser Capabilities component identifies the browser that is 
currently accessing the site and provides programmatic access to the list of 
features supported by the browser. This component is a tremendous asset to 
Web developers who are targeting both Internet Explorer and Netscape 
Navigator. Using this component, you can tailor the Web page to a particular browser.
<P>The Browser Capabilities component relies on the browser's user 
agent string to identify the browser type. The user agent string (discussed in 
detail in <a href="ch03a.htm">Chapter 3</a>) is passed by the browser to the server each time a Web page 
is requested. For example, the user agent string for IE 4.0 looks like this:
<P>


<PRE>Mozilla 4.0 (compatible; MSIE 4.0; Windows 95)</pre>
<P>In order to determine the supported features of a particular browser, 
the Browser Capabilities component attempts to match the browser's user 
agent string to entries in a special initialization file named BROWSCAP.INI. When 
the Browser Capabilities component matches a user agent string, all of the 
features listed for that browser are immediately accessible as properties of the 
component. Listing 5-10 shows the portion of 
BROWSCAP.INI that corresponds to IE 4.0.
<P>
<B>Listing 5-10.</B>


<I>BROWSCAP.INI entry for IE 4.0.</I>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">[Mozilla/4.0&#160;(compatible;&#160;MSIE&#160;4.0;&#160;Windows&#160;95)]
browser=IE
Version=4.0
majorver=#4
minorver=#0
frames=TRUE
tables=TRUE
cookies=TRUE
backgroundsounds=TRUE
vbscript=TRUE
javascript=TRUE
javaapplets=TRUE
ActiveXControls=TRUE
Win16=False
beta=False
AK=False
SK=False
AOL=False
crawler=False
</PRE>


</blockquote><HR>


<P>
Using the Browser Capabilities component is similar to providing 
a conditional compilation statement in your ASP page. You can construct 
simple If&#133;Then statements that greatly affect the final content. For example, 
Listing&#160;5-11 sends an &lt;OBJECT&gt; tag to a browser that supports ActiveX 
controls, an &lt;APPLET&gt; tag to a Java-capable browser, or a text message to browsers 
that have neither feature.<P>
<B>Listing 5-11.</b> <I>Detecting Browser Capabilities</i>


<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;%Response.Expires&#160;=&#160;0%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Visual&#160;InterDev&#160;1.0&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Browser&#160;Capabilities&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;CENTER&gt;


&lt;%

&#160;&#160;&#160;&#160;'&#160;Create&#160;Browser&#160;Capabilities&#160;component
&#160;&#160;&#160;&#160;Dim&#160;objBrowser
&#160;&#160;&#160;&#160;Set&#160;objBrowser&#160;=&#160;_
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Server.CreateObject(&quot;MSWC.BrowserType&quot;)

&#160;&#160;&#160;&#160;'&#160;Find&#160;out&#160;what&#160;features&#160;are&#160;supported
%&gt;
&lt;%
&#160;&#160;&#160;&#160;If&#160;objBrowser.ActiveXControls&#160;Then
%&gt;

&lt;H1&gt;ActiveX&#160;Controls&lt;/H1&gt;

&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--

&#160;&#160;&#160;&#160;Sub&#160;Window_OnLoad()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pathBall.Target&#160;=&#160;objBall.Style
&#160;&#160;&#160;&#160;End&#160;Sub

--&gt;
&lt;/SCRIPT&gt;

&lt;!--&#160;Structured&#160;Graphics&#160;control&#160;--&gt;
&lt;OBJECT&#160;ID=&quot;objBall&quot;
&#160;&#160;&#160;&#160;STYLE=&quot;POSITION:ABSOLUTE;HEIGHT:70;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;WIDTH:110;TOP:0;LEFT:0;ZINDEX:0&quot;&#160;
&#160;&#160;&#160;&#160;CLASSID=
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;CLSID:5FD6A143-372A-11D0-A521-0080C78FEE85&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;Line0001&quot;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;SetLineColor(255,255,255)&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;Line0002&quot;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;SetFillColor(255,0,0,0,0,255)&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;Line0003&quot;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;SetFillSTYLE(1)&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;Line0004&quot;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;SetLineSTYLE(1)&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;Line0005&quot;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;Oval(0,-25,50,50,0)&quot;&gt;
&lt;/OBJECT&gt;

&lt;!--&#160;Path&#160;control&#160;--&gt;
&lt;OBJECT&#160;ID=&quot;pathBall&quot;&#160;&#160;
&#160;&#160;&#160;&#160;CLASSID=
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&quot;CLSID:E0E3CC60-6A80-11D0-9B40-00A0C903AA7F&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=AutoStart&#160;VALUE=-1&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=XSeries&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;0,0;30,0;45,0;52,0;55,0&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=YSeries&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;VALUE=&quot;0,0;30,80;45,160;52,240;55,320&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=EdgeAction&#160;VALUE=&quot;1&quot;&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=TickInterval&#160;VALUE=10&gt;
&lt;/OBJECT&gt;


&lt;%ElseIf&#160;objBrowser.JavaApplets&#160;Then%&gt;

&lt;H1&gt;Java&#160;Applet&lt;/H1&gt;
&lt;APPLET&#160;CODE=&quot;marquee.class&quot;&#160;HEIGHT=40&#160;WIDTH=400&gt;
&#160;&#160;&#160;&#160;&lt;PARAM&#160;NAME=&quot;CAPTION&quot;&#160;VALUE=&quot;Java&#160;is&#160;Cool!&quot;&gt;
&lt;/APPLET&gt;

&lt;%Else%&gt;

&lt;!--&#160;Text-only&#160;browser&#160;--&gt;
&lt;H1&gt;No&#160;Components&#160;Supported!&lt;/H1&gt;

&lt;%End&#160;If%&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>

<H2>
<B>Ad Rotator Component </B>
</H2>
<P>The Ad Rotator component is designed specifically for sites that are 
renting advertising space. The component provides a way of controlling the 
rotation of advertising images in a site. It reads information regarding 
advertisements from a special text file that directs which ad to show and for how long. 
Using the Ad Rotator is a simple matter of creating the component and reading 
the text file. Here is the code:
<PRE WIDTH="0">&lt;%
&#160;&#160;&#160;&#160;Dim&#160;Ad
&#160;&#160;&#160;&#160;Set&#160;Ad&#160;=&#160;Server.CreateObject(&quot;MSWC.AdRotator&quot;)
&#160;&#160;&#160;&#160;Response.Write&#160;Ad.GetAdvertisement(&quot;ADS.TXT&quot;)
%&gt;
</PRE>
<P>The text file read by the Ad Rotator has a well-defined structure 
that determines the image to display, specifies the percentage of time to show 
the image, and provides a hyperlink that is activated when the advertisement 
is clicked. You simply construct the text file in the appropriate format, and 
the component does the rest.
<H2>
<B>Content Linking Component </B>
</H2>
<P>The Content Linking component is designed for publication of 
online magazines and newspapers. The component links separate Web pages 
together, allowing them to be scrolled. <a href="ch08a.htm">Chapter 8</a> provides a complete project that 
uses the Content Linking component.<P>
Like the Ad Rotator, the Content Linking component depends on a 
text file to create the publication. The file, known as the Content Linking 
List, provides a listing of the linked Web pages and a description of each. Using 
the Content Linking component simply requires creating the component 
and reading the associated text file. Here is the code:
<PRE WIDTH="0">&lt;%Set&#160;objLinker&#160;=&#160;Server.CreateObject(&quot;MSWC.NextLink&quot;)%&gt;
</PRE>
<P>Once the publication is created, you can use methods such as 
GetNextURL and GetPreviousURL to navigate the pages. Descriptions of individual pages 
are retrieved through the GetNextDescription and GetPreviousDescription 
methods. These values can be used to generate hyperlinks to other pages in 
the publication. Here is the code:
<PRE WIDTH="0">&lt;A&#160;HREF=&quot;&lt;%=objLinker.GetNextURL%&gt;&quot;&gt;
&#160;&#160;&#160;&#160;&lt;%=objLinker.GetNextDescription%&gt;
&lt;/A&gt;
</PRE>
<H2>
<B>Using Other ActiveX Components</B>
</H2>
<P>In addition to using all of the components provided by Visual InterDev, you 
can create your own ActiveX components for ASP. The project in <a href="ch09a.htm">Chapter 9</a> 
features a custom component created with Visual Basic 5.0 to send Internet e-mail.<P>
Once a custom component is created, it can be accessed in the same 
way as any other component&#151;through the CreateObject method of the 
Server object. All you have to do is provide the ProgID for the custom 
component. This feature is a powerful tool that allows you to extend ASP to include 
any functions you need.
</BODY>
</HTML>
