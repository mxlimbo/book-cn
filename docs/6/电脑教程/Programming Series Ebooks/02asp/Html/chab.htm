<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<!-- This HTML document was generated by PageMaker -->
<!-- On Wed Oct 08 17:13:00 1997 from "C:\unzipped\PP-APPDS\Z01APPB.P65" -->
<HTML>
<HEAD>
<TITLE>Appendix B</TITLE>
</HEAD>
<BODY BGCOLOR="#ffffff">



<H1>Appendix B</h1>
<H1>JScript and Java Primer</H1>
<P>Most of the examples in this book use the VBScript language, but not 
all browsers support VBScript. In fact, only Microsoft Internet Explorer 
fully supports VBScript, Dynamic HTML, and ActiveX. If you are interested 
in creating an application that can run on both Netscape Navigator and 
Internet Explorer, your solution might be Active Server Pages with a little 
client-side script. This is an excellent approach for Internet applications that must 
run on the largest number of browsers. This appendix gives an overview of 
the JScript language, Microsoft's implementation 
of JavaScript, which runs on both Netscape Navigator and IE 4.0.
<H1>JScript Event Handling</H1>
<P>The &lt;SCRIPT&gt; tag, discussed in detail in Appendix A, designates script 
code in JScript as well as in VBScript. However, mapping events to script code is 
done a little differently in JScript than in VBScript. In VBScript, you can choose 
from several techniques, but in JScript, you always use the event attribute 
method. The following code would be used to handle the Window OnLoad event:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!--
&#160;&#160;&#160; function pageStart
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; alert(&quot;Page Loaded!&quot;);
&#160;&#160;&#160;&#160;&#160;&#160;&#160; return true;
&#160;&#160;&#160;&#160;}
--&gt;
&lt;/SCRIPT&gt;

&lt;BODY LANGUAGE=&quot;JavaScript&quot; OnLoad=&quot;var rtn =pageStart();&quot;&gt;
</PRE>
<P>Notice that JScript has a much different syntax than VBScript. 
JScript looks more like C than like Basic. Every routine in JScript is a function, 
and the beginning and end of a function is defined by using curly braces ({}). 
And JScript is case sensitive! That's right, case matters. In most instances, JScript 
uses lowercase for all object names. So be careful when you use the Window 
and Document objects&#151;they are <I>window</I> and 
<I>document</I> to JScript.
<H1>Declaring Variables</H1>
<P>Like VBScript, JScript does not have any specific data types. Instead, it has 
only a single typeless data, which can be thought of as a Variant and which 
functions much like the Variant in VBScript. Also, like VBScript, JScript 
supports subtypes in variables. In other words, although the variable is typeless, the 
data inside the variable is identified by JScript as one of three types: String, 
Numeric, or Boolean.
<P>The String data subtype in JScript is unique in scripting languages 
because it behaves as an object. Simply declaring a variable and assigning 
text to it creates a String object. Methods associated with the String object can 
be used to perform functions such as parsing or capitalization. The following 
code creates a String object and capitalizes all the characters in the text:
<PRE WIDTH="0">&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!--
&#160;&#160;&#160; function caps(stringData)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; alert(stringData.toUpperCase());
&#160;&#160;&#160;&#160;}
--&gt;
&lt;/SCRIPT&gt;
</PRE>
<P>In addition to the String object, JScript supports several other 
intrinsic objects that can be used directly in the scripting language. The available 
objects are the Array, Date, Math, Number, and Function objects. For 
documentation on the properties and methods of the objects, refer to the CD-ROM that 
accompanies this book.
<P>The Numeric data subtype is used to hold any numbers, and the 
Boolean subtype is used for true and false values. JScript recognizes the 
keywords true and false, but beware of case sensitivity. Declaring variables in 
JScript requires the var keyword&#151;the only keyword for declaring variables.
<P>Variables in JScript have two levels of scope: global and local. A 
variable declared inside the SCRIPT section but outside of functions is global and 
can be used by all functions. A variable declared inside a function is available 
only to the function in which it resides.
<H1>Custom Objects</H1>
<P>In addition to its intrinsic objects, JScript supports custom objects in 
code. Creating custom objects gives your script a more object-oriented look and 
feel. A custom object is created by using special functions that declare 
properties and methods for the object. As an example, let's create an object named 
alien to describe a mythical extraterrestrial. To define the object, establish a 
function with variables for properties:
<PRE WIDTH="0">function alien(skincolor, numheads, antenna)
{
&#160;&#160;&#160;&#160;//Properties
&#160;&#160;&#160; this.skincolor = skincolor;
&#160;&#160;&#160; this.numheads = numheads;
&#160;&#160;&#160; this.antenna = antenna;
}
</PRE>
<P>Notice the use of the keyword this, which refers to the object 
instance being created with the function. The function accepts arguments for all 
the properties and assigns them in turn when the alien object is created. You 
can also create methods for the alien object in the same way. First, declare the 
methods as functions in your script:
<PRE WIDTH="0">function eat(food)
{
&#160;&#160;&#160; window.alert(&quot;MMMMM &quot;&#160;+ food +&#160;&quot; was good!&quot;);
}

function changeskincolor(color)
{
&#160;&#160;&#160; if (color ==&#160;&quot;Green&quot;&#160;| color ==&#160;&quot;Red&quot;)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.skincolor = color;
&#160;&#160;&#160;&#160;}

&#160;&#160;&#160; if (color ==&#160;&quot;Red&quot;)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.numheads = 5;
&#160;&#160;&#160;&#160;}
}
</PRE>
<P>Once the functions are created for the methods, assign them to the 
object using the keyword this. Here is the complete function for the alien object:
<PRE WIDTH="0">function alien(skincolor, numheads, antenna)
{
&#160;&#160;&#160;&#160;// Properties
&#160;&#160;&#160; this.skincolor = skincolor;
&#160;&#160;&#160; this.numheads = numheads;
&#160;&#160;&#160; this.antenna = antenna;

&#160;&#160;&#160;&#160;// Methods
&#160;&#160;&#160; this.eat = eat;
&#160;&#160;&#160; this.changeskincolor = changeskincolor;
}
</PRE>
<P>Once the alien object is declared, you can create instances of it by 
using the keyword new. This allows you to call the associated properties and 
methods by using a variable. The following code shows a complete alien example:
<PRE WIDTH="0">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Aliens!!&lt;/TITLE&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;

&#160;&#160;&#160; var MyAlien // This is the variable for the instance

&#160;&#160;&#160; function createalien()
&#160;&#160;&#160;&#160;{

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Create an instance of a
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// new alien

&#160;&#160;&#160;&#160;&#160;&#160;&#160; MyAlien = new alien(&quot;Green&quot;, 12,&#160;&quot;Yes&quot;);
&#160;&#160;&#160;&#160;&#160;&#160;&#160; window.alert(&quot;Alien Created!&quot;);
&#160;&#160;&#160;&#160;}


&#160;&#160;&#160;&#160;// Define the class

&#160;&#160;&#160; function alien(skincolor, numheads, antenna)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;// Properties
&#160;&#160;&#160; &#160;&#160;&#160;&#160;this.skincolor = skincolor;
&#160;&#160;&#160; &#160;&#160;&#160;&#160;this.numheads = numheads;
&#160;&#160;&#160; &#160;&#160;&#160;&#160;this.antenna = antenna;

&#160;&#160;&#160; &#160;&#160;&#160;&#160;// Methods
&#160;&#160;&#160; &#160;&#160;&#160;&#160;this.eat = eat;
&#160;&#160;&#160; &#160;&#160;&#160;&#160;this.changeskincolor = changeskincolor;
&#160;&#160;&#160;&#160;}

&#160;&#160;&#160; function eat(food)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; window.alert(&quot;MMMMM &quot;&#160;+ food +&#160;&quot; was good!&quot;);
&#160;&#160;&#160;&#160;}

&#160;&#160;&#160; function changeskincolor(color)
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (color ==&#160;&quot;Green&quot;&#160;| color ==&#160;&quot;Red&quot;)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.skincolor = color;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (color ==&#160;&quot;Red&quot;)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; this.numheads = 5;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
&#160;&#160;&#160;&#160;}

&lt;/SCRIPT&gt;

&lt;BODY BGCOLOR=&quot;WHITE&quot;&gt;
&lt;CENTER&gt;
&lt;FORM NAME=&quot;frmAlien&quot;&gt;

&lt;!--&#160;This button creates the alien&#160;--&gt;
&lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;Create Alien&quot;
&#160;&#160;&#160; OnClick=&quot;createalien();&quot;&gt;&lt;P&gt;

&lt;!--&#160;This text box is for the alien's food&#160;--&gt;
&lt;INPUT NAME=&quot;txtFood&quot;&gt;&lt;P&gt;

&lt;!--&#160;This button feeds the alien whatever is
in the text box&#160;--&gt;
&lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;Feed the Alien&quot;
&#160;&#160;&#160; OnClick=&quot;MyAlien.eat(document.frmAlien.txtFood.value);&quot;&gt;
&lt;P&gt;

&lt;!--&#160;This button reads the skin color and displays it&#160;--&gt;
&lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;Get Skin Color&quot;
&#160;&#160;&#160; OnClick=&quot;window.alert(MyAlien.skincolor);&quot;&gt;
&lt;P&gt;

&lt;!--&#160;This text box allows you to set a new color&#160;--&gt;
&lt;INPUT NAME=&quot;txtColor&quot;&gt;

&lt;!--&#160;This button sets the new color&#160;--&gt;
&lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;Set Skin&#160;Color&quot;
&#160;&#160;&#160;&#160;OnClick=&quot;MyAlien.changeskincolor(document.frmAlien.txtColor.value);&quot;&gt;
&lt;P&gt;

&lt;!--&#160;This button displays the number of heads&#160;--&gt;
&lt;INPUT TYPE=&quot;BUTTON&quot; VALUE=&quot;Number of Heads&quot;
&#160;&#160;&#160; OnClick=&quot;window.alert(MyAlien.numheads);&quot;&gt;

&lt;/FORM&gt;
&lt;/CENTER&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<H1>Key Language Elements</H1>
<P>JScript supports a number of decision and looping structures, many of 
which mimic the structures available in VBScript. The primary decision structure 
in JScript is the if statement, which is similar to the VBScript If&#133;Then 
statement. The if statement uses the following syntax:
<PRE WIDTH="0"><B>if</B> (<I>condition</I>)
&#160;&#160;&#160; <I>statement1</I>
[<B>else</B>
&#160;&#160;&#160; <I>statement2</I>]&#160;
</PRE>
<P>Unlike VBScript, JScript does not support a statement similar to 
the Select&#133;Case statement. Instead, you use multiple lines of if statements 
to create complex branches. The only alternative to this is an implicit 
branch using a somewhat unreadable question mark structure. For information 
about this oddity, see the CD-ROM that accompanies this book.
<P>JScript supports several different types of loops. The first is a 
statement that mimics the VBScript For&#133;Next loop, the for statement. Here is the 
syntax for the for statement:
<PRE WIDTH="0"><B>for</B> (<I>initialization</I>; <I>test</I>; <I>increment</I>)
&#160;&#160;&#160; <I>statement </I>
</PRE>
<P>The while loop is the equivalent of the VBScript Do loop. This 
structure loops as long as a condition is true, giving you control over when the loop 
ends. The following code shows the syntax for the while loop:
<PRE WIDTH="0"><B>while </B>(<I>expression</I>)
&#160;&#160;&#160; <I>statement </I>
</PRE>
<P>Like VBScript, JScript also supports a loop that allows you to perform 
a function on each member of a collection or an array. In JScript, this 
structure is called the for&#133;in statement. Here is the syntax for the for&#133;in statement:
<PRE WIDTH="0"><B>for</B> (<I>variable </I><B>in</B> [<I>object </I>| <I>array</I>])
&#160;&#160;&#160; <I>statement </I>
</PRE>
<H1>Using Java Applets</H1>
<P>Many developers use Java applets in Web pages to enhance the graphical 
user interface. Like ActiveX components, Java applets are separately 
compiled, downloadable units of software that can run in a Web page. And like 
ActiveX components, Java applets can support events, properties, and methods. 
These members can be accessed by both JScript and VBScript.<BR>
Applets are placed in a Web page by using the &lt;APPLET&gt; tag, which 
has the following syntax:
<UL>
<TABLE>
<TR>
<TD VALIGN=top WIDTH=150>&lt;APPLET</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ALIGN</td>
<TD VALIGN=top>The alignment for the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ALT</td>
<TD VALIGN=top>The text to show if the browser can't execute the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CLASS</td>
<TD VALIGN=top>The style class of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CODE</td>
<TD VALIGN=top>The name of the applet file to download and run</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>CODEBASE</td>
<TD VALIGN=top>The base address of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATAFLD</td>
<TD VALIGN=top>The field to bind with an applet parameter</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>DATASRC</td>
<TD VALIGN=top>The identifier of the Advanced Data Control to bind with</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>HEIGHT</td>
<TD VALIGN=top>The height of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>HSPACE</td>
<TD VALIGN=top>The horizontal margin for the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>ID</td>
<TD VALIGN=top>The identifier for the applet in script</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>NAME</td>
<TD VALIGN=top>The name of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>SRC</td>
<TD VALIGN=top>The Internet address of a data file</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>STYLE</td>
<TD VALIGN=top>The style attributes of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>TITLE</td>
<TD VALIGN=top>Additional information</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>VSPACE</td>
<TD VALIGN=top>The vertical margin for the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>WIDTH</td>
<TD VALIGN=top>The width of the applet</td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&gt;</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top WIDTH=150>&lt;/APPLET&gt;</td>
<TD VALIGN=top></td>
</tr>
</table>
</ul>             
<P>Although the &lt;APPLET&gt; tag has many attributes, only one is really 
required: the CODE attribute identifies the applet to download and run. 
Unlike ActiveX components, Java applets do not rely on the registry to download; 
the file is downloaded and run each time. As in ActiveX components, 
however, properties can be stored in &lt;PARAM&gt; tags for the application to read. 
A &lt;PARAM&gt; tag has the following syntax:
<UL>
<TABLE>
<TR>
<TD VALIGN=top>&lt;PARAM</td>
<TD VALIGN=top></td>
</tr>
<TR>
<TD VALIGN=top>DATAFLD</td>
<TD VALIGN=top>The database field to bind to the component</td>
</tr>
<TR>
<TD VALIGN=top>DATAFORMATAS</td>
<TD VALIGN=top>Indicates whether the bound data is HTML or plain text</td>
</tr>
<TR>
<TD VALIGN=top>DATASRC</td>
<TD VALIGN=top>The ID of the Advanced Data Control to bind with</td>
</tr>
<TR>
<TD VALIGN=top>NAME</td>
<TD VALIGN=top>The property name</td>
</tr>
<TR>
<TD VALIGN=top>VALUE</td>
<TD VALIGN=top>The default value</td>
</tr>
<TR>
<TD VALIGN=top>&gt;</td>
<TD VALIGN=top></td>
</tr>
</table>
</ul>       
</BODY>
</HTML>
