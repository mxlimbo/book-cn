<HTML>
<HEAD>
<TITLE>The Object Model</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>The Object Model</H1>
<P>Although many new features of Internet Explorer&#160;4.0 are designed to 
enhance the user experience, improved browsing depends entirely on improved 
content. To that end, IE&#160;4.0 provides a number of new features for content 
developers. Most of these features, including Dynamic HTML, are covered in 
later chapters of this book, but all content development depends on a strong 
understanding of the IE&#160;4.0 architecture. This architecture takes the form of an 
object model.
<P>The concept of constructing software from objects is certainly not 
new. Most of the applications that you know well&#151;Microsoft Word, Microsoft 
Excel, Microsoft PowerPoint, and Internet Explorer&#151;are constructed of 
objects. These applications are built from well-defined software modules that 
provide data through variables known as 
<I>properties</I> and provide services through 
function calls known as <I>methods.</I> Properties and methods perform useful 
functions for a piece of software. The collection of properties and methods that 
define an object is called an <I>interface.</I> An interface is invoked by a user through 
the toolbar and menus, but it can also be called directly by a programmer 
through code. In fact, virtually anything a user can do with an application can be 
done by a programmer who makes calls to the objects. This is an extremely 
powerful mechanism for manipulating applications that have rich object models, 
such as IE&#160;4.0.
<P>Microsoft's object models are based on a technology known as the 
Component Object Model (COM), a specification that defines how objects 
communicate for the purpose of sharing services. Sharing services gives object 
models power and flexibility.
<P>Suppose you are building an application that requires the use of 
tabular data. Your application needs to store data in a flat table and perform 
arithmetic functions on that data. Sounds like a spreadsheet, right? Well, you could 
build your own spreadsheet, or you could borrow the services of an existing 
spreadsheet such as Excel. Excel has an object model, and because COM is the 
technology underlying Excel, the services provided by any Excel object can 
be shared with any application that knows how to implement COM. All 
of Microsoft's development tools know how to access COM objects, so you are 
free to call the functions of an Excel spreadsheet from code that you wrote 
in Microsoft Visual Basic, Visual C++, Visual J++, Visual InterDev, or Visual 
FoxPro. And that is an important key: COM is language independent.
<P>Let's imagine that you want to use the services of the Excel 
spreadsheet from Visual InterDev. In order to access the object, you must first review 
the application's object model. A partial examination of Excel's large and 
complex object model reveals objects named Application, Workbook, and 
Worksheet. (See Figure&#160;3-4.) These objects are arranged in hierarchical order in a 
&quot;has a&quot; type of relationship: the Excel Application &quot;has a&quot; Workbook, and a 
Workbook &quot;has a&quot; Worksheet.
<P><img src="pictures/F03XF04.GIF" width=491 height=287 border=0>
<P><B>Figure 3-4.</B>


<I>Part of the Excel object model.</I>
<P>Once the object model is understood, you can programmatically 
access an object and its associated services. Accessing services is typically done 
by creating an <I>instance</I> of the object you need. An instance is a copy of the 
object that is created in memory and contains all of the functionality defined for 
the object and its services. In Visual InterDev, an instance of any COM object 
can be created by using the CreateObject method. The following code 
establishes a variable named MyWorksheet as a pointer to an instance of the COM 
object Worksheet contained in the application Excel:
<PRE WIDTH="0">Set&#160;MyWorksheet&#160;=&#160;Server.CreateObject(&quot;Excel.Worksheet&quot;)
</PRE>
<P>Once this worksheet is created, all the services available through 
the object can be invoked from code. For example, a worksheet knows how 
to perform a spelling check on all the data contained in its cells. This 
service can be invoked using the CheckSpelling method. The following code 
does the job:
<PRE WIDTH="0">MyWorksheet.CheckSpelling
</PRE>
<P>You might also find that additional objects exist under the current 
object. Worksheets have cells in them, so, not surprisingly, you can find a Cell 
object under the Worksheet object. Using the Cell object, you can access any cell 
in the worksheet. In fact, every cell in the worksheet is actually a member of 
the Cells collection. This collection allows easy access to any cell. The 
following code reads the value of cell A1 into a variable named MyData:
<PRE WIDTH="0">MyData&#160;=&#160;MyWorksheet.Cells(1,&#160;1)
</PRE>
<P>In a similar manner, all the objects in Internet Explorer are 
arranged hierarchically and are accessible from code. This code access could easily 
be written in a language such as Visual Basic (or any other language that 
supports COM). Visual InterDev, however, supports an additional access method: 
client-side scripting. Using languages such as VBScript or JavaScript, you can 
access any of the objects in IE 4.0 from script. This is a powerful technique 
that enables all of the client-side programming features discussed in this book.
<P>As we continue through this book, we will add more and more 
capability to our Web pages by accessing the IE 4.0 object model. The complete 
model is shown in Figure&#160;3-5 and provides a valuable reference. A complete 
object reference is also included on the CD-ROM that accompanies this book. 
But for now, let's take a look at some of the key objects found in the model and 
how to exploit them.
<H2>
<B>Window</B>
</H2>
<P>As the top-level object in the Internet Explorer 4.0 hierarchy, the 
Window object represents the entire browser. When you address the Window 
object in script, you are directly manipulating IE 4.0. The Window 
object's properties, methods, and events (described in <a href="chad.htm">Appendix D</a>) allow you to 
achieve interesting effects.
<P><img src="pictures/F03XF05.GIF" width=262 height=838 border=0>
<P><B>Figure&#160;3-5.</B>


<I>The IE 4.0 object model.</I>
<P>
<P>As an example of what is possible using the Window object, let's 
construct a sample that creates a status bar marquee, a special effect that rolls a 
text message across the browser status bar. (See Figure&#160;3-6.) You can create 
this effect by using properties, methods, and events of the Window object.
<P><img src="pictures/F03XF06.JPG" width=600 height=387 border=0>
<P><B>Figure&#160;3-6.</B>


<I>A status bar marquee.</I>
<P>The Window object exposes several properties of the browser. One 
of these properties is Status, which allows you direct access to the text that 
appears on the status bar. The following code places a simple message in the status bar:
<PRE WIDTH="0">Window.Status&#160;=&#160;&quot;Here&#160;is&#160;a&#160;message!&quot;
</PRE>
<P>Notice how the Window object is addressed directly in code. This 
syntax is used whenever you want to access the features of the object. Because 
Window is the main object in the hierarchy, it will also allow you to address 
its properties and methods implicitly&#151;that is, without actually typing 
<I>Window</I>. Hence, the following code works just as well:
<PRE WIDTH="0">Status&#160;=&#160;&quot;Here&#160;is&#160;a&#160;message!&quot;
</PRE>
<P>Making the text scroll is a simple matter of padding the message 
with spaces and reducing the number of spaces over time. In order to move 
the message, you need some sort of function with a periodic call that manages 
the position of the text in the status bar. A periodic function call can be made 
with the SetTimeout method of the Window object. SetTimeout allows you to 
specify a routine to call and a period of time to wait between calls. The timeout 
is identified by a variable you define. If you wanted, for example, to call a 
routine named Scroll every 100 milliseconds, you could write the following code:
<PRE WIDTH="0">Dim&#160;MyTimeout
MyTimeout&#160;=&#160;SetTimeout(&quot;Scroll&quot;,&#160;100)
</PRE>
<P>Using the SetTimeout method and the Status property, you can set up 
a routine to scroll text across the status bar. The only question is when to 
start the scrolling. You need an event to trigger the scrolling routine. In this 
case, you want to begin scrolling as soon as the page finishes loading. You can 
detect when a page is fully rendered in the browser by using the OnLoad 
event of the Window object. OnLoad fires when the page is loaded, so you can 
use it to establish the initial call to SetTimeout. The following code makes it happen:
<PRE WIDTH="0">Public&#160;MyTimeout

Sub&#160;Window_OnLoad()
&#160;&#160;&#160;&#160;MyTimeout&#160;=&#160;SetTimeout(&quot;Scroll&quot;,&#160;100)
End&#160;Sub
</PRE>
<P>Note that the variable is declared Public, which makes it available to 
all the script in the page. This is important because you will use the variable 
in other routines.
<P>Listing&#160;3-1 shows how these pieces together&#151;the OnLoad event, 
the Status property, and the SetTimeout method&#151;create the status bar marquee.
<P>
<B>Listing 3-1.</B> <I>The status bar marquee.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Developer&#160;Studio&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Status&#160;Bar&#160;Marquee&lt;/TITLE&gt;

&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;`&#160;Script-level&#160;variables
&#160;&#160;&#160;&#160;Public&#160;strMessage
&#160;&#160;&#160;&#160;Public&#160;intSpaces
&#160;&#160;&#160;&#160;Public&#160;intTimeout

one&#160;blank&#160;line&#160;within&#160;code</FONT>
&#160;&#160;&#160;&#160;Sub&#160;Window_OnLoad()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Initialize&#160;the&#160;variables&#160;when&#160;the&#160;page&#160;is&#160;fully&#160;loaded
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strMessage&#160;=&#160;&quot;Check&#160;out&#160;this&#160;scrolling&#160;text!&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intSpaces&#160;=&#160;100
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;Window.SetTimeout(&quot;Scroll&quot;,&#160;100)
&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;Scroll()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Call&#160;this&#160;routine&#160;every&#160;100&#160;milliseconds
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Dim&#160;strTemp,&#160;i

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Scroll&#160;right&#160;to&#160;left
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intSpaces&#160;=&#160;intSpaces&#160;-&#160;1
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;If&#160;intSpaces&#160;=&#160;0&#160;Then&#160;intSpaces&#160;=&#160;100

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Pad&#160;with&#160;spaces
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;For&#160;i&#160;=&#160;1&#160;to&#160;intSpaces
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strTemp&#160;=&#160;strTemp&#160;&amp;&#160;&quot;&#160;&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Next

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Write&#160;message
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Window.Status&#160;=&#160;strTemp&#160;&amp;&#160;strMessage

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Reset&#160;timer
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;Window.SetTimeout(&quot;Scroll&quot;,&#160;100)
&#160;&#160;&#160;&#160;End&#160;Sub
--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;
&lt;BODY&gt;


&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>This book contains examples that can be run properly only under 
Internet Explorer 4.0. The problem of cross-platform support has not gone away, 
and many of IE 4.0's new features simply exacerbate the problem. Therefore, 
you need a surefire methodology for identifying when your HTML is being run 
on IE 4.0. Fortunately, you can create a feature to examine the 
<I>user agent string</I> in a JavaScript function named Version. The user agent string is a 
special string that identifies the browser. User agent strings can be cryptic and 
quite confusing to humans, but if you know what to expect, they can be useful. 
Here is the user agent string for IE 4.0:<P>


<PRE>Mozilla/4.0 (compatible; MSIE 4.0; Windows 95)</pre>
<P>This string can be parsed to retrieve the information that identifies 
the browser as an IE 4.0 browser. JavaScript is used to ensure support from 
the widest array of browsers. Listing&#160;3-2 shows the function in action in a 
simple Web page.


<P><B>Listing 3-2.</B> <I>Browser detection.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Developer&#160;Studio&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Browser&#160;Type&lt;/TITLE&gt;

&lt;SCRIPT&#160;LANGUAGE=JavaScript&gt;
&lt;!--

&#160;&#160;&#160;&#160;function&#160;browserType()
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Define&#160;new&#160;properties&#160;for&#160;the
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Window&#160;object,&#160;and&#160;assign&#160;them
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;using&#160;the&#160;Version&#160;function

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;window.Version&#160;=&#160;Version();
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(window.Version&#160;&gt;=&#160;4)&#160;window.IE4&#160;=&#160;true;

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Test&#160;the&#160;new&#160;properties&#160;here
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(window.IE4&#160;==&#160;true)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alert(&quot;Congratulations!&#160;You&#160;are&#160;running&#160;IE&#160;4.0!&quot;);
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alert(&quot;Oh,&#160;no!&#160;Please&#160;get&#160;IE&#160;4.0&#160;now!&quot;);
&#160;&#160;&#160;&#160;}

&#160;&#160;&#160;&#160;function&#160;Version()
&#160;&#160;&#160;&#160;{
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Get&#160;the&#160;user&#160;agent&#160;string
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;var&#160;strAgent&#160;=&#160;window.navigator.userAgent;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;var&#160;intIndex&#160;=&#160;strAgent.indexOf(&quot;MSIE&#160;&quot;);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Display&#160;the&#160;user&#160;agent&#160;string
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alert(strAgent);

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//&#160;Parse&#160;the&#160;string&#160;to&#160;find&#160;the&#160;version&#160;number
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if&#160;(intIndex&#160;&gt;&#160;0)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;parseInt(strAgent.substring(intIndex&#160;+&#160;5,&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strAgent.indexOf(&quot;.&quot;,&#160;intIndex)));
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return&#160;0;
&#160;&#160;&#160;&#160;}

--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H1&gt;Are&#160;you&#160;using&#160;IE&#160;4.0?&lt;/H1&gt;&lt;P&gt;

&lt;FORM&gt;
&lt;INPUT&#160;TYPE=&quot;BUTTON&quot;&#160;VALUE=&quot;Find&#160;out!&quot;
Name=&quot;cmdBrowser&quot;&#160;OnClick=&quot;var&#160;rtn=browserType();&quot;&gt;
&lt;/FORM&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>






</blockquote><HR>

<H2>
<B>Location</B>
</H2>
<P>The Location object provides information about the current Internet 
location. It allows you to retrieve the address of the current location through the 
HRef property or retrieve portions of the address through the properties Hash, 
Host, Hostname, Pathname, Port, Protocol, and Search.
<H2>
<B>Frames</B>
</H2>
<P>The Frames collection allows access to all the frames in the browser. The 
collection provides a mechanism for programmatically manipulating one 
frame from script running in another frame. Normally, the collection is 
accessed using an index number that begins with zero, but you can access the 
windows by name if you have provided names for them. (When you provide names 
for windows, you should ensure that all windows have unique names since 
the Frames collection will return only the first window with the specified 
name.) The following code declares a set of frames and gives them names:
<PRE WIDTH="0">&lt;FRAMESET&#160;COLS=&quot;27%,73%&quot;&gt;
&#160;&#160;&#160;&#160;&lt;FRAME&#160;SRC=&quot;/Demos/toolbar.htm&quot;&#160;NAME=&quot;TOOLBAR&quot;&#160;SCROLLING=&quot;Yes&quot;&gt;
&#160;&#160;&#160;&#160;&lt;FRAMESET&#160;ROWS=&quot;25%,75%&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;FRAME&#160;SRC=&quot;/Demos/banner.htm&quot;&#160;NAME=&quot;BANNER&quot;&#160;SCROLLING=&quot;No&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;FRAME&#160;SRC=&quot;/Demos/home.htm&quot;&#160;NAME=&quot;MAIN&quot;&#160;SCROLLING=&quot;Yes&quot;&gt;
&#160;&#160;&#160;&#160;&lt;/FRAMESET&gt;
&#160;&#160;&#160;&#160;&lt;NOFRAMES&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;BODY&#160;BGCOLOR=&quot;FFFFFF&quot;&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;H3&gt;Your&#160;browser&#160;does&#160;not&#160;support&#160;frames&lt;/H3&gt;&lt;BR&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;H4&gt;You're&#160;missing&#160;the&#160;show!!&lt;/H4&gt;&lt;P&gt;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Get&#160;the&#160;&lt;A&#160;HREF=&quot;http://www.microsoft.com/ie/&quot;&gt;Internet
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Explorer&lt;/A&gt;
&#160;&#160;&#160;&#160;&lt;/NOFRAMES&gt;
&lt;/FRAMESET&gt;
</PRE>
<P>Once the frames are defined inside a frame set, you can use the 
Frames collection to access any of the existing frames. In the preceding example, 
three frames were designated: Toolbar, Banner, and Main. Manipulating the 
Main window from the Toolbar window can be accomplished with the following code:
<PRE WIDTH="0">window.parent.frames(&quot;MAIN&quot;).navigate&#160;&quot;http://www.microsoft.com&quot;
</PRE>
<H2>
<B>Navigator</B>
</H2>
<P>The Navigator object represents the entire browser. This object is useful in 
an environment where the browser is supporting multiple frames. A 
single-frame Web page has only one Window object, so the Window object and the 
browser can be considered one and the same. A multiple-frame Web page, however, 
has a separate Window object for each frame, so the only way to access the 
browser as a whole is through the Navigator object.
<H2>
<B>Event</B>
</H2>
<P>The Event object supports all the events that occur in Internet Explorer. 
This object is extremely important in Dynamic HTML and is discussed in detail 
in Chapter 4.
<H2>
<B>Screen</B>
</H2>
<P>The Screen object represents the client screen and returns information 
about its capabilities. Perhaps the most useful of the Screen properties are 
Height and Width, which return the screen resolution for the client in pixels. 
This information can then be used to accurately reposition elements on a Web 
page based on the screen resolution.
<H2>
<B>Document</B>
</H2>
<P>The Document object represents the document currently loaded in the 
browser. It is perhaps the most important of all the objects in the hierarchy because 
it acts as the gateway to every aspect of the document, from the background 
color to each and every individual tag located in the document. In fact, 
Dynamic HTML relies heavily on accessing HTML tags through the Document 
object. (See Appendix D for a description of the object's properties, methods, 
and events.)<P>
As a simple exercise, let's use the Document object to generate a 
fade-in effect that causes the browser background to gradually change from black 
to white. This is an interesting effect that adds some simple action to a page. 
(It also requires the use of the SetTimeout method of the Window object.)<P>
The Document object gives you access to many of the HTML 
attributes that define the &lt;BODY&gt; tag. Using the BGColor property of the 
Document object, you can read and write to the BGCOLOR attribute, which takes as 
an argument the color for the page background in RGB format. This means 
that you must provide the color as six hexadecimal digits: the first two digits 
represent red, the second two represent green, and the last two represent 
blue. Black is 000000, and white is FFFFFF. The fade-in example will change the 
color from black to white over time using the SetTimeout method.<P>
Changing the color is simple but has just one trick. You must be sure 
to properly format the BGColor property in code, or you will not get the 
intended results. Correct formatting is done with the VBScript Hex function, which 
takes a number as an argument and returns the hexadecimal equivalent as text. 
This is exactly what the BGColor property expects.<P>
In the example, you define a variable for the background color, 
retrieve the existing color, and modify it. Let's say you just want to read the existing 
color and change it to white in only one step. The following code would work:
<PRE WIDTH="0">Dim&#160;lngBGColor
lngBGCOLOR&#160;=&#160;Document.BGColor
lngBGCOLOR&#160;=&#160;&amp;HFFFFFF
Document.BGColor&#160;=&#160;Hex(lngBGColor)
</PRE>
<P>This reading and writing is simple enough and can be done at any 
time from script. In order to get the fade-in effect, you must increment the 
background color value periodically until the background is completely white. 
If the fade-in code is written as a separate routine, you can use SetTimeout to 
call the routine at regular intervals. Here is the code:
<PRE WIDTH="0">lngBGColor&#160;=&#160;lngBGColor&#160;+&#160;&amp;H111111
Document.BGColor&#160;=&#160;lngBGColor
</PRE>
<P>The complete code for the example is shown in Listing&#160;3-3 and 
simply expands this idea.


<P><B>Listing 3-3.</B> <I>The fade-in effect.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Developer&#160;Studio&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Fade-In&lt;/TITLE&gt;

&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--

&#160;&#160;&#160;&#160;`&#160;Color&#160;constants
&#160;&#160;&#160;&#160;Const&#160;ntsBGStart&#160;=&#160;&amp;H0
&#160;&#160;&#160;&#160;Const&#160;ntsBGStep&#160;=&#160;&amp;H111111
&#160;&#160;&#160;&#160;Const&#160;ntsBGEnd&#160;=&#160;&amp;HFFFFFF
&#160;&#160;&#160;&#160;Const&#160;ntsTimerStep&#160;=&#160;10

&#160;&#160;&#160;&#160;`&#160;Variable&#160;for&#160;background&#160;color
&#160;&#160;&#160;&#160;Public&#160;lngBGColor

&#160;&#160;&#160;&#160;Sub&#160;Window_OnLoad()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Set&#160;timer
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;Window.SetTimeout(&quot;Fade&quot;,&#160;ntsTimerStep)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Initialize&#160;background&#160;color
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngBGColor&#160;=&#160;ntsBGStart
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Document.BGColor&#160;=&#160;Hex(lngBGColor)
&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;Fade()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Fade&#160;in
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngBGColor&#160;=&#160;lngBGColor&#160;+&#160;ntsBGStep
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Document.BGColor&#160;=&#160;Hex(lngBGColor)

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Keep&#160;going&#160;until&#160;white
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;If&#160;lngBGColor&#160;&lt;&#160;ntsBGEnd&#160;Then
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;Window.SetTimeout(&quot;Fade&quot;,&#160;ntsTimerStep)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;End&#160;If
&#160;&#160;&#160;&#160;End&#160;Sub

--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;CENTER&gt;&lt;H1&gt;Welcome&#160;to&#160;My&#160;Web&#160;Page!&lt;/H2&gt;&lt;/CENTER&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>


</blockquote><HR>


</BODY>
</HTML>
