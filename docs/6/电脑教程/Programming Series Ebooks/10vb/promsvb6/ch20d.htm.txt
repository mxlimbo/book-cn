<HTML>
<HEAD>
<TITLE>ASP Components</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch20c.htm", "ch20e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="1022"><h1>ASP Components</h1></A>
<p>As you know, ASP scripts can instantiate and use ActiveX components, which can add tremendous flexibility and power to ASP scripts.</p>

<A NAME="1023"><h2>Using Components in ASP Scripts</h2></A>
<p>There are two ways to instantiate ActiveX components in ASP scripts: by using the <I>Server.CreateObject</I> method and by using an &lt;OBJECT&gt; tag with the SCOPE attribute set to <I>server</I>. The former technique is more likely to appeal to Visual Basic programmers, whereas the latter will sound more natural to HTML programmers.</p>

<p>In at least one case, however, it makes sense even for Visual Basic programmers to use an &lt;OBJECT&gt; tag梟amely, to create an object reference that has application scope or session scope. Let's say that you want to create an ADO Connection object that is shared by all the scripts in the session. You can achieve this by creating the object in the <I>Session_OnStart</I> event procedure and then storing the reference in a Session variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Create the ADO Connection object.
    Set conn = Server.CreateObject("ADODB.Connection")
    ' Open it.
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
    ' Make it available to all ASP scripts.
    Set Session("conn") = conn
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>An ASP script can use this session-scoped Connection object, but it has to extract it from the Session object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Inside an ASP script
    Set conn = Session("conn")
    conn.BeginTrans               %&gt;
</pre></td></tr></table></p>

<p>Let's see what happens when the object is declared in Global.asa using a &lt;SCRIPT&gt; tag with a proper SCOPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT RUNAT=server SCOPE=Session ID="Conn" PROGID="ADODB.Connection"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Open the connection (no need to create it).
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>When an object is declared in this way, you can reference it from any session in the application just by using its name, as in the following ASP script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  conn.BeginTrans %&gt;
</pre></td></tr></table></p>

<p>Objects can be defined this way with Application scope as well as with Session scope. In both cases, they appear in the StaticObjects collection of the corresponding object.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Most components designed for ASP pages are in-process components. From time to time, however, you might need to create out-of-process components. To do so, you must manually modify the AllowOutOfProcCmpts value in the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP \Parameters Registry key from 0 (the default value) to 1.
</blockquote></div>
<P></P>

<A NAME="1024"><h2>Using Custom ASP Components</h2></A>
<p>You can use any ActiveX component from an ASP page, including those written in Visual Basic. For example, you can write a component that augments VBScript in the areas in which this script language is weak, such as file management, fast math calculations, string routines, and so on. These components can't really be classified as ASP components, however, because they don't interact with the ASP object model. What we need is a component that can read data coming from an HTML form through the Request object and write data using the Response object.</p>

<A NAME="1025"><h3>Writing ASP components in Visual Basic</h3></A>
<p>Writing an ASP component in Visual Basic is surprisingly simple梕xcept for one detail, it's exactly like writing a standard ActiveX component. The first thing you do is start an ActiveX DLL project, set the threading model to Apartment model, and check the Unattended Execution option in the General tab of the Project Properties dialog box.</p>

<p>
<IMG border=0 height=87 src="images/new.jpg" width=102>
</p>

<p>Visual Basic 6 offers a new option for components marked for unattended execution, the Retained In Memory flag. (See Figure 20-10.) When this option is enabled, the component is held in memory until the client process terminates. This capability is especially useful when you expect that your component will often be loaded in memory and then discarded because it saves Windows the overhead of continuously loading it from disk. When the component is running inside IIS or MTS, which typically serve hundreds or even thousands of clients, this option is going to speed up the overall performance noticeably.</p>

<p>
 <IMG border=0 height=364 src="images/F20ph10x.gif" width=404>
</p><p>
<!--caption--><B>Figure 20-10.</B> <i>The suggested Project settings for a typical ASP component.</i><!--/caption-->
</p>

<p>Now you have to add a reference to the ASP type library. Two such libraries are registered in a system on which IIS has been installed: the Microsoft Active Server Pages Object Library and the Microsoft Active Server Pages 2.0 ObjectContext Class Type Library. The former library includes the five main ASP objects, and the latter includes only the definition of the ObjectContext object, which you need only when developing ASP components that must run under MTS. Both type libraries are contained in the Asp.dll file.</p>

<p>As you see, up to this point there isn't really anything special about an ASP component. The only problem left to be resolved is this: How can the component get a reference to one of the five main ASP objects? Well, the script code might pass such an object to a property or a method of the component, soon after creating it, but this technique isn't recommended and isn't even necessary if you know the little secret about writing ASP components in Visual Basic.</p>

<p>As soon as the component is created by an ASP script, IIS invokes the component's <I>OnStartPage</I> method, if the component exposes such a method. Therefore the only thing to do is to add the code for this method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a class-level variable.
Dim sc As ASPTypeLibrary.ScriptingContext

Sub OnStartPage(AspSC As ASPTypeLibrary.ScriptingContext)
    ' Save the reference for later.
    Set sc = AspSC
End Sub
</pre></td></tr></table></p>

<p>The ScriptingContext object passed to the <I>OnStartPage</I> method is nothing but the root object of the ASP type library. A quick trip to the object browser reveals that this object exposes five properties