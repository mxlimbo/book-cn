<HTML>
<HEAD>
<TITLE>The TabStrip Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10e.htm", "ch10g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="453"><h1>The TabStrip Control</h1></A>

<p>Tabbed dialog boxes are standard these days among Windows applications. 
Visual Basic comes with two controls for implementing them: The TabStrip common 
control and the SSTab control. In this section, I describe the TabStrip control, 
whereas <a href="ch12a.htm">Chapter 12</a> covers the SSTab control.</P>

<p>The most important thing to learn about the TabStrip control is that it 
<I>isn't </I>a container. In other words, it offers a program only the ability to display a number 
of tabs and react to users' clicks on them. It's up to the developer to make a group 
of controls visible or invisible, depending on which tab is currently selected. This 
makes working with this control at design time a tedious job and is probably the reason 
why many developers prefer the SSTab control, which is a real container control and 
can swap pages at design time as well. In my opinion, this nuisance is balanced by 
the fact that TabStrip is more powerful in other areas.</P>

<p>The TabStrip control exposes a Tabs collection, which in turn contains 
Tab objects. You must be aware of this structure to exploit all the features of this control.</P>

<A NAME="454"><h2>Setting Design-Time Properties</h2></A>

<p>After you place a TabStrip control on a form, you have to set up a few general 
properties and then add a number of tabs. You can perform both operations from 
within the Properties custom dialog box, which you display by right-clicking on the 
control and selecting the Properties menu option.</P>

<A NAME="455"><h3>General properties</h3></A>

<p>You can set all general properties from the General tab of the Property Pages 
dialog box, as shown in Figure 10-19. The first property you might want to set is 
<I>Style</I>, which lets you change the appearance of the control. In most cases, you leave it with its 
default value 0-tabTabs (the control is rendered as a collection of tabbed pages), 
but you can also set it to 1-tabButtons (tabs are replaced by buttons, and no border 
is displayed) or 2-tabFlatButtons (same as tabButtons, but buttons are flat). In the 
latter two cases, you can opt for separators among buttons by setting the 
<I>Separators </I>property to True. A few combinations of these styles are visible in Figure 10-20.</P>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>The tabFlatButton setting has appeared for the first time in Visual Basic 6, 
together with the <I>Separator </I>property. Other new Visual Basic 6 properties are 
<I>TabMinWidth</I>, <I>Placement</I>,<I> 
TabStyle</I>, <I>HotTracking</I>, and 
<I>MultiSelect</I>.</P>

<p>
<img src="images/F10ph19x.gif" width=419 height=315 border=0>
</p><p>
<!--caption--><B>Figure 10-19.</B> <i>The General tab of the Property Pages dialog box of a TabStrip control.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F10ph20x.htm')"> <img src="images/F10ph20.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-20.</B> <i>A gallery of styles for the TabStrip control.</i><!--/caption-->
</p>

<p>If you're going to add more tabs than can appear in a single line, you can 
create multiple lines of tabs by setting the <I>MultiRow 
</I>property to True. You can choose different justification styles for the tabs by setting the 
<I>TabWidthStyle </I>property to 0-tabJustified, 1-tabNonJustified, or 2-tabFixed. If you're working with tabs of 
fixed width, you can assign a suitable value to the 
<I>TabFixedWidth </I>and <I>TabFixedHeight </I>properties. If you're working with tabs of variable width, you can set a minimum 
value for their size using the <I>TabMinWidth </I>property.</P>

<p>The <I>Placement </I>property lets you decide whether tabs should appear near 
the top (default), bottom, left, or right border of the control. The 
<I>TabStyle </I>property affects the run-time behavior of TabStrip controls with multiple rows: When you 
set this property to 1-tabTabOpposite, all the rows that precede the current one are 
displayed on the opposite side of the control.</P>

<p>A few other design-time Boolean properties can affect the appearance of 
the control. You can set the <I>HotTracking </I>property to True to activate the hot 
tracking feature (but only if <I>Style </I>is tabFlatButtons). If the 
<I>Multiselect</I> property is True, the user can select multiple tabs by clicking on them while pressing the Ctrl key (but only 
if <I>Style </I>is tabButtons or tabFlatButtons). Finally, if the 
<I>ShowTips </I>property is True, the control displays the 
<I>ToolTipText </I>associated with the tab over which the user moves the mouse.</P>

<A NAME="456"><h3>Tab objects</h3></A>

<p>Once you've set the most important general properties, you can create tabs in 
the Tabs tab (sounds a bit confusing, yes? It's the second tab&#133;) of the Property 
Pages dialog box. The only property that isn't optional is the 
<I>Caption </I>property. The <I>Key </I>property is the value that identifies a tab in the Tabs collection, whereas 
<I>Tag </I>and <I>ToolTipText </I>have the usual meanings and effects.</P>

<p>You can display an icon in each tab. To do that, you have to load all the 
images into a companion ImageList control and then store a reference to this 
control in the TabStrip's <I>ImageList </I>property. At this point, you can assign a Tab's 
<I>Image </I>property the index of the image that should be displayed.</P>

<A NAME="457"><h3>Preparing the child containers</h3></A>

<p>Because the TabStrip control isn't a container control, you can't place child 
controls directly on its surface. This is probably the most serious limitation of this control: 
Even if it doesn't affect the control's run-time potential, it surely makes the 
design-time phase a little cumbersome. At run time, it's up to the programmer to show all 
the controls on the tab being clicked by the user and hide the child controls 
belonging to all other tabs.</P>

<p>In practice, the most convenient way to manage the child controls is to 
create a number of container controls on the form&#8212;for example, PictureBox or Frame 
controls. These controls should belong to a control array so that you can easily 
manipulate them as a group. It isn't really important where you place these containers 
on the form because you'll have to move and resize them at run time.</P>

<p>Let's say that you have a TabStrip control with three tabs. You create 
three PictureBox controls, such as those visible in Figure 10-21, and then place child 
controls inside each PictureBox. I suggest that you move the containers to 
different positions so that you can easily select them at design time and bring them to the 
front using the Ctrl+J key combination. Things are easier if you use containers with 
visible borders and then hide the borders at run time.</P>

<p>
<A HREF="javascript:fullSize('F10ph21x.htm')"> <img src="images/F10ph21.JPG" width=404 height=261 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-21.</B> <i>Using PictureBoxes to contain child controls of a TabStrip control.</i><!--/caption-->
</p>

<A NAME="458"><h2>Run-Time Operations</h2></A>

<p>In most cases, you use only a fraction of the possibilities offered by the 
TabStrip control. In fact, the majority of applications just need to show the pages defined 
at design time and never need to create new ones. In this section, I describe the 
most common actions you can perform on this control using code.</P>

<A NAME="459"><h3>Moving and resizing containers</h3></A>

<p>If you have followed my advice about using Frame or PictureBox controls as 
containers for child controls, you need to move and resize them before the form 
becomes visible. You usually do it in the <I>Form_Load 
</I>event and exploit the properties 
<I>ClientLeft</I>, <I>ClientTop</I>, 
<I>ClientWidth</I>, and <I>ClientHeight</I> of the TabStrip control to learn where 
those containers should be moved. You also need to hide containers' borders, if they 
have any. The following code snippet assumes that all PictureBox container controls 
belong to the <I>picTab </I>control array:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Dim pic As PictureBox
    For Each pic In picTab
        pic.Move TabStrip1.ClientLeft, TabStrip1.ClientTop, _
            TabStrip1.ClientWidth, TabStrip1.ClientHeight
        pic.BorderStyle = 0
    Next
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="460"><h3>Selecting the current container</h3></A>

<p>You react to the user's clicks by making the container control&#8212;the one that 
corresponds to the clicked tab&#8212;the only visible container. You can learn which tab 
has been clicked by querying the <I>SelectedItem 
</I>property:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TabStrip1_Click()
    Dim pic As PictureBox
    For Each pic In picTab
        ' The expression on the right returns True for one picture box.
        ' (Control arrays are zero-based; Selected.Index is one-based.)
        pic.Visible = (pic.Index = TabStrip1.SelectedItem.Index - 1)
    Next     
End Sub
</pre>
</td></tr>
</table>
</p>


<p>When the <I>Click</I> event fires, the <I>SelectedItem 
</I>property has already been set to the tab that's now current. If you want to keep track of which tab was current 
before the click, you must store this value in a form-level variable. Alternatively, 
you can trap the user's action before the <I>Click 
</I>event in the <I>BeforeClick </I>event. This 
event offers the program an opportunity to validate data on the current tab before the 
user leaves it and possibly to cancel the click. Here's an example of this technique:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub TabStrip1_BeforeClick(Cancel As Integer)
    Select Case TabStrip1.SelectedItem.Index
        Case 1
            ' Refuse to move until the user types something in this field.
            If txtUserName.Text = &quot;&quot; Then Cancel = True
        Case 2
            ' Validation code for second tab
        Case 3
            ' Validation code for third tab
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You can also select a tab programmatically, by assigning a value to 
the <I>SelectedItem</I> property. You can use one of these two syntax forms:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Both statements select the second tab.
Set TabStrip1.SelectedItem = TabStrip1.Tabs(2)
TabStrip1.Tabs(2).Selected = True
</pre>
</td></tr>
</table>
</p>


<p>The <I>BeforeClick</I> and <I>Click </I>events fire even when a tab is selected through code.</P>

<P>Multiple Tab objects can have their 
<I>Selected</I> property set to True if the 
TabStrip's <I>MultiSelect </I>property is also True. You can quickly deselect all tabs using the 
<I>DeselectAll </I>method. Finally, you can highlight one or more tabs without showing their 
contents by setting the <I>Highlighted </I>property to True:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Highlight the second tab.
TabStrip1.Tabs(2).Highlighted = True
</pre>
</td></tr>
</table>
</p>


<A NAME="461"><h3>Creating and removing Tab objects</h3></A>

<p>You can create new tabs at run time, using the 
<I>Add </I>method of the <I>Tabs</I> collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Caption], [Image]) As Tab
</pre>
</td></tr>
</table>
</p>


<p>The <I>Add</I> method's arguments are the 
<I>Index</I>, <I>Key</I>, <I>Caption</I>, and <I>Image 
</I>properties of the Tab object being created. Because this method returns a reference to 
the created object, you can set additional properties using the following technique:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With TabStrip1.Add(, , &quot;Authentication&quot;)
    .ToolTipText = &quot;Click here to change authentication settings&quot;
    .Tag = &quot;ABC123&quot;
End With
</pre>
</td></tr>
</table>
</p>


<p>You can remove an existing Tab object at run time using the Tabs 
collection's <I>Remove </I>method, and you can remove all the tabs using the collection's 
<I>Clear </I>method.</P>

</BODY>
</HTML>





