<HTML>
<HEAD>
<TITLE>The DataReport Designer</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15d.htm", "ch16a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="699"><h1>The DataReport Designer</h1></A>
<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>Visual Basic 6 is the first version that includes a report writer completely 
integrated in the IDE. Compared to the more popular Crystal Report, you'll probably 
find&#8212;especially for simpler reports&#8212;the new report designer easier to use. But it still 
lacks several features and can't reasonably replace Crystal Report or other third-party 
report writers for heavy-duty tasks. By the way, Crystal Report is still included in 
the package, even though you have to install it manually.</P>

<p>Before using the DataReport designer, you must make it accessible from the 
IDE, which you do by issuing the Components command from the Project menu, 
switching to the Designer tab, and ticking the Data Report check box. Alternatively, 
you can create a new Data Project and let Visual Basic create an instance of the 
DataReport designer for you.</P>

<p>The DataReport designer works in bound mode only, in the sense that it's 
able to automatically retrieve the data to be sent to the printer or simply displayed in 
the preview window. It can export a report to a text file or an HTML file and also 
supports custom format layouts. The DataReport designer comes with a set of custom 
controls that you can drop on its surface in the same way as you do with forms and 
other designers. These controls include lines, shapes, images, and 
also function fields, which you can use to create summary fields in your reports. Another intriguing feature of 
this designer is its ability to print in asynchronous mode, which lets the user perform 
other tasks while the printing proceeds.</P>

<A NAME="700"><h2>Design-Time Operations</h2></A>

<p>The simplest way to create a report using the DataReport designer is in 
conjunction with the DataEnvironment designer. The DataReport designer supports 
drag-and-drop operations of DataEnvironment's Command objects, including hierarchical 
Command objects. The only limitation is that the report can account for just one child 
Recordset at each nesting level. For all the examples in this chapter, I'll use a hierarchical 
Command object based on the Orders and Order Details tables in the NWind.mdb 
database. As usual, the complete sample application is provided on the companion CD.</P>

<A NAME="701"><h3>Binding to a Command object</h3></A>

<p>Here are the steps you should follow to create a report based on the sample 
hierarchical Command object:</P>
<OL>
<P><LI>Create a hierarchical Command, named Orders, that contains a child 
Command named Order Details. Ensure that it retrieves the information 
you're interested in&#8212;for example, by binding it to a Hierarchical FlexGrid control on a form and running the application.</LI></P>
<P><LI>Create a new instance of the DataReport designer, or use the one 
provided by default with a Data Project type of Visual Basic project.</LI></P>
<P><LI>Bring up the Properties window, let the DataReport's 
<I>DataSource </I>property point to <I>DataEnvironment1 
</I>(or whatever the name of your DataEnvironment is), and then set its 
<I>DataMember </I>property to <I>Orders</I>.</LI></P>
<P><LI>Right-click on the Report Header of the DataReport 
designer, and select the Retrieve Structure menu command; this will create a Group 
Header and Group Footer section labeled 
Orders_Header and Orders_Footer, respectively; between them is a Detail section labeled Order_Details_Detail.</LI></P>
<P>A section represents a block of data that will be repeated for 
each record in the parent Command object. The first section corresponds to 
the parent Command object, the second section to its child Command, 
and so on until you reach the Detail section, which corresponds to the 
innermost Command object. All the sections except the Detail section are 
divided into a header section and a footer section, which are printed 
before and after the information related to the sections pertaining to objects 
at an inner level. The DataReport designer also includes a Report 
section (which prints information at the beginning and end of the report) and 
a Page section (which prints information at the beginning and end of 
each page). If you don't see these two sections, right-click anywhere on 
the DataReport designer and select the appropriate menu command.</P>
<P><LI>Drag the fields you need from the 
Orders<I> </I>Command object in the DataEnvironment to the Orders_Header section of the DataReport. 
Whenever you release the mouse button, a pair of controls, RptLabel and 
a RptTextBox, appear in the DataReport. When the report is 
eventually displayed, the RptLabel control produces a constant string with the 
name of the field (or whatever you assigned to its 
<I>Caption </I>property), while the RptTextBox control is replaced by the actual contents of the 
corresponding database field. You can then arrange the fields in the 
Orders_Header section and delete the RptLabel controls that you don't want to display.</LI></P>
 <P><LI>Click on the Order Details<I> 
</I>Command object and drag it onto the DataReport; Visual Basic creates one RtpLabel-RptTextBox control pair 
for each field in the corresponding Recordset. You can then delete the 
OrderID field and arrange the others in a row, as displayed in Figure 15-8.</LI></P>

<P><LI>Adjust each section's height so that it doesn't take more room than 
strictly necessary. This is especially important for the Detail section, because 
it will be repeated for each single record in the Order Detail table. You 
can also reduce all the sections that don't contain any fields to a null height.</LI></P>

<P><LI>What you've done so far is sufficient to see the DataReport in action. 
Bring up the Project Property Pages dialog box, select 
DataReport1<I> </I>as the startup object, and then run the program.</LI></P>
</OL>
<p>Before moving on to another topic, a couple of notes about the placement 
of controls are in order. First, you can drop any control in the section that 
corresponds to the Command object it belongs to, as well as in any section with a deeper 
nesting level. For example, you can drop the OrderID field from the 
Orders<I> </I>Command in both the Orders section and the Order_Details section. You can't, however, move 
the UnitPrice field from the inner Order_Details section to the Order section. Second, 
you shouldn't drop binary fields or fields containing images from the 
DataEnvironment onto the DataReport designer; Visual Basic won't generate an error, but it will 
create a RptTextBox control that contains meaningless characters at run time.</P>

<p>
<A HREF="javascript:fullSize('F15ph08x.htm')"> <img src="images/F15ph08.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-8.</B> <I>The DataReport designer at design time, with the pop-up menu that appears when you right-click on a control.</i><!--/caption-->
</p>

<A NAME="702"><h3>Setting control properties</h3></A>

<p>The controls you have dropped on the DataReport's surface are similar to the 
standard controls you place on a form, but they belong to a different control library. 
In fact, you can't drop a standard intrinsic control on a DataReport designer, nor 
can you place a control from the DataReport control library on a form or another 
designer. But you can move DataReport controls and align them as you would do with 
any regular control. You can't use the commands in the standard Format menu, 
though, and you have to right-click on the control and use the commands in the pop-up 
menu, as shown in Figure 15-8.</P>

<p>DataReport controls react to the F4 key in the same way regular controls 
do, by displaying the Properties window. Because the RptLabel and RptTextBox 
controls are so similar to their standard counterparts, you should already be familiar 
with most of the properties you find in this window. For example, you can change 
the <I>DataFormat </I>properties of the 
txtOrderDate<I> </I>and txtShippedDate<I> </I>controls so that 
they display their values in long date format. Or you can change the 
txtOrderID<I> </I>control's <I>BackStyle </I>property to 1-rptBkOpaque and its 
<I>BackColor </I>property to gray (&amp;HE0E0E0) so that order identifiers are highlighted in the report. RptLabel controls don't 
expose any <I>Data</I>xxxx property; they're just cosmetic controls that insert fixed strings 
in the report.</P>

<p>The only custom property that we haven't seen yet is 
<I>CanGrow</I>, which applies to both the RptLabel and RptTextBox controls. If this property is True, the control 
is allowed to expand vertically when its content exceeds the control's width. The 
default value for this property is False, which causes longer strings to be truncated 
to the control's width.</P>

<A NAME="703"><h3>Adding controls</h3></A>

<p>Nothing prevents you from adding new controls to the DataReport from the 
Toolbox rather than from the DataEnvironment designer. In fact, the Toolbox includes 
a DataReport tab, which contains all the controls in the MSDataReportLib library. 
In addition to the RptLabel and RptTextBox controls, this library also contains the 
following items:</P>
<UL>
<p><LI>The RptLine and RptShape controls, which allow you to add lines 
and other elementary shapes to the report, including squares and 
rectangles (also with round corners), circles, and ovals. You can't change a line's width, but you can create horizontal and vertical lines of any width by using rectangular RptShape controls whose 
<I>BackStyle </I>property is set to 1rptBkOpaque.</LI></P>

<p><LI>The RptImage control, which adds static images to the report, such as 
a company logo. Unfortunately this control can't be bound to a data 
source, so you can't use it to display images stored in database binary fields.</LI></P>

<p><LI>The RptFunction control, a textbox variant that can automatically 
evaluate simple aggregate functions, such as count, sum, average, 
minimum, maximum, and standard deviation. (This control is described further in the next section.)</LI></P>
</UL>
<p>For example, drop a horizontal line in the Orders_Footer group, as shown 
in Figure 15-8. This control will draw a line to separate each group of detail 
information about an order. Using the <I>BorderStyle 
</I>property, you can also draw several types of dotted lines.</P>

<A NAME="704"><h3>Displaying calculated fields</h3></A>

<p>There are two ways to display calculated fields. The first way, which is suitable 
for calculated values that depend on other values in the same record, requires that 
you modify the SELECT command to include the calculated field in the list of fields to 
be retrieved. In the Orders example, you might have the inner Order Details 
Command object work with the following SELECT query:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT OrderID, ProductID, UnitPrice, Quantity, Discount, 
    ((UnitPrice*Quantity)*(1-Discount)) AS Total FROM [Order Details]
</pre>
</td></tr>
</table>
</p>


<p>Then you might add a Total field in the Detail section that lists the total price for 
each record from the Order Details table. Remember to align the field to the right and 
allow for the correct number of digits after the decimal point. This way of 
implementing calculated fields is fairly versatile because you can use all the functions offered 
by SQL. But it can only work on a record-by-record basis.</P>

<p>Another way to take advantage of SQL is to use a JOIN clause in the 
SELECT command to retrieve information from other tables. For example, you might 
transform the ProductID field in the Order Details table into the product's name from 
the Products table, using the following SELECT in the Order 
Details<I> </I>Command object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SELECT [Order Details].OrderID, [Order Details].ProductID, 
    [Order Details].UnitPrice, [Order Details].Quantity, 
    [Order Details].Discount, (([Order Details].UnitPrice*[Order 
    Details].Quantity)*(1-[Order Details].Discount))  AS Total, 
    Products.ProductName FROM [Order Details] INNER JOIN Products 
    ON [Order Details].ProductID = Products.ProductID
</pre>
</td></tr>
</table>
</p>


<p>You can use the same technique to display the customer's name in 
the Orders_Header section. The sample application, however, achieves the same 
result by using a different technique, which I'll explain in the &quot;<A HREF="ch15e.htm#713">Adding Dynamic Formatting and Lookup Fields</A>&quot; section at the end of this chapter.</P>

<p>The second technique for adding a calculated field is based on 
RptFunction controls and is suitable for summary fields. For example, let's add a field that 
evaluates the total value of each order. This requires calculating the sum of the values 
of the Total field in the Order_Details<I> </I>Command. To do this, you must drop a 
RptFunction control into the Orders_Footer section&#8212;that is, the first footer after the section 
where the data to be summed is displayed. Then set the new control's 
<I>DataMember </I>property to Order_Details, its 
<I>DataField </I>property to Total, its <I>FunctionType 
</I>to 0rptFuncSum, and its <I>DataFormat </I>property to Currency. Using the same approach, you can add 
a summary field with the total number of distinct products in the order, by 
setting <I>DataField </I>to ProductID and <I>FunctionType 
</I>to 4-rptFuncRCnt.</P>

<p>You're not forced to place a RptFunction control in the footer section 
that immediately follows the section where the data field is. For example, to evaluate 
the sum of the Total fields from the 
Order_Details<I> </I>Command, you can 
add a RptFunction control in the Report Footer section, and you can add another RptFunction control 
 to calculate the sum of the Freight fields from the 
Orders<I> </I>section. In any case, you only have to set these controls' 
<I>DataMember </I>properties to point to the correct 
Command object. Unfortunately, you can't place a RptFunction control in a Page 
Footer section, so you can't have totals at the end of each page.</P>

<p>Thanks to the capabilities of the DataEnvironment designer, there is 
nothing special about preparing a report that groups records. For example, to display a 
list of customers grouped by country, all you have to do is create a Command 
object linked to the Customers table, switch to the Grouping tab of its Property Pages 
dialog box, and group the Command object by its Country field. This operation 
creates a new Command object with two folders. You can then assign this Command to 
the <I>DataMember</I> property of a DataReport designer and issue the Retrieve 
Structure command to let the designer automatically create the necessary sections. The 
sample application on the companion CD includes a report built using this technique.</P>

<A NAME="705"><h3>Managing page footers and page breaks</h3></A>

<p>You can place controls in a Page Header or Page Footer section, typically to 
display information about the current page number, the total number of pages, the date 
and time of the report, and so forth. To do this, right-click in the section of interest, 
select the Insert Control menu command, and then from a pop-up menu select the 
information you want to display.</P>

<p>A control created in this way is a RptLabel, which contains special 
characters in its <I>Caption </I>property. Table 15-1 summarizes the characters 
with a special meaning when inside a RptLabel control. You can create the control 
yourself and set a suitable <I>Caption </I>property&#8212;for example, 
<I>Page %p of %P </I>to display the current and the total number of pages&#8212;in the same RptLabel control. Figure 
15-9 displays the area near the bottom border of a report that includes a page 
footer, summary fields, and other embellishments that we've seen so far.</P>

<p>
<A HREF="javascript:fullSize('F15ph09x.htm')"> <img src="images/F15ph09.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-9.</B> <I>The DataReport designer at run time; the controls in the window let you print the report, export it to a file, and navigate through its pages.</I><!--/caption-->
</p>

<p>All the Section objects expose two properties that affect how page breaks 
are inserted in the report. The <I>ForcePageBreak 
</I>property determines if a new page should be started before or after the section and can take one of the following 
values: 0rptPageBreakNone (the default), 1-rptPageBreakBefore (add a page break 
before printing the section), 2-rptPageBreakAfter (add a page break immediately after 
the section), or 3-rptPageBreakBeforeAndAfter (add a page break immediately before 
and after the section).</P>

<p>The other property that affects the page breaks added to the report is 
the <I>KeepTogether </I>Boolean property. If you set this property to True, the 
DataReport designer will automatically insert a page break before the section if its contents would overflow to the next page. Both these properties are also exposed by the Report and Page sections, but they're ignored in these cases.</P>

<p><B>Table 15-1.</B> <I>The special characters accepted in a RtpLabel's 
</I>Caption <I>property.</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Symbol</i></TH>
<TH><i>Description</i></TH>
<TH><i>Symbol</i></TH>
<TH><i>Description</i></TH>
</TR>
<TR>
<TD VALIGN="TOP">%d</TD>
<TD VALIGN="TOP">Current date (Short format)</TD>
<TD VALIGN="TOP">%p</TD>
<TD VALIGN="TOP">Current page number</TD>
</TR>
<TR>
<TD VALIGN="TOP">%D</TD>
<TD VALIGN="TOP">Current date (Long format)</TD>
<TD VALIGN="TOP">%P</TD>
<TD VALIGN="TOP">Total number of pages</TD>
</TR>
<TR>
<TD VALIGN="TOP">%t</TD>
<TD VALIGN="TOP">Current time (Short format)</TD>
<TD VALIGN="TOP">%i</TD>
<TD VALIGN="TOP">The title of the report</TD>
</TR>
<TR>
<TD VALIGN="TOP">%T</TD>
<TD VALIGN="TOP">Current time (Long format)</TD>
<TD VALIGN="TOP">%%</TD>
<TD VALIGN="TOP">Percentage symbol</TD>
</TR>
</TABLE></P>
       
               



<A NAME="706"><h3>Other report properties</h3></A>

<p>The DataReport designer exposes many design-time properties, which you can 
modify in the Properties window as you would do with any other designer. Most of 
these properties are also exposed by forms&#8212;for example, 
<I>Caption</I>, <I>Font</I>, <I>WindowState</I>, 
and <I>ShowInTaskbar</I>&#8212;therefore, you already know how to use them. Some of these 
properties (such as <I>Caption </I>and 
<I>BorderStyle</I>) affect only the preview window; others 
(for example, <I>Font</I>) also affect the printed report.</P>

<p>Only a few properties are peculiar to the DataReport designer. The 
<I>LeftMargin</I>, <I>RightMargin</I>, 
<I>TopMargin</I>, and <I>BottomMargin </I>properties set and return the size of 
the printed report margins, whereas 
<I>ReportWidth</I> determines the width of the 
printed page. The <I>GridX </I>and <I>GridY </I>properties affect the distance between the division of 
the control grid at design time and are ignored at run time. All these measures are 
expressed in twips. The only other custom property of the DataReport designer is 
<I>Title</I>, which is used to replace the <I>%i 
</I>placeholder in RptLabel controls, as explained in 
the previous section, and is also used when displaying dialog boxes at run time.</P>

<p><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
You can make the DataReport window an MDI child window 
by setting its <I>MDIChild </I>property to True. Just be aware that there is a bug that 
sometimes makes the DataReport window disappear from the WindowList menu 
of the MDI application. For additional information and a workaround for this 
problem, see article Q195972 in the Microsoft Knowledge Base.
</BLOCKQUOTE></DIV></P>

<A NAME="707"><h2>Run-Time Operations</h2></A>

<p>While you can prepare great reports by merely dropping some controls on 
a DataReport designer, don't forget that because this is an object that exposes 
properties, methods, and events, it can be controlled through code at run time. The 
code can be placed outside the designer&#8212;for example, in the form that starts the 
reporting process&#8212;or inside the DataReport module itself. The latter approach lets 
you create a complex report and encapsulate all the code that manages it in the 
designer module so that you can easily reuse it in other projects.</P>

<A NAME="708"><h3>Printing the report</h3></A>

<p>The easiest way to print the report is to let the user start the operation 
interactively by clicking on the leftmost button in the DataReport preview window. Users can 
pick a printer from the list of installed ones and select a page range and the number 
of copies they want. They can even print to a file so that they can do the actual 
printing later. When you enable interactive printing, all you need to do is display 
the DataReport window, which you can do by using the 
<I>Show </I>method or (as is rarely done) by designating the DataReport designer as the startup object of the 
current project. You can use several properties to modify the default appearance of the 
preview window:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the DataReport in a modal maximized window.
DataReport1.WindowState = vbMaximized
DataReport1.Show vbModal
</pre>
</td></tr>
</table>
</p>


<p>You can fine-tune the printing process if you start the print process 
yourself through code. You will need the <I>PrintReport 
</I>method of the DataReport designer, which accepts several arguments and returns a Long value:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Cookie = PrintReport([ShowDialog], [Range], [PageFrom], [PageTo])
</pre>
</td></tr>
</table>
</p>


<p><I>ShowDialog </I>is a Boolean value that determines whether the designer 
will display the Print dialog box, and <I>Range 
</I>can be one of the following values<I>: </I>0rptRangeAllPages or 1-rptRangeFromTo. If you want to print a page range, 
you should pass the number of the first and last page to the 
<I>PageFrom </I>and <I>PageTo </I>arguments, respectively. The 
<I>PrintReport </I>method starts an asynchronous print process 
and returns a cookie value, which can be used to refer to the particular print 
operation. Here's an example:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the first 10 pages of the report without showing a dialog.
Dim Cookie As Long
Cookie = DataReport1.PrintReport(False, rptRangeFromTo, 1, 10)
</pre>
</td></tr>
</table>
</p>


<A NAME="709"><h3>Taking advantage of asynchronous processing</h3></A>

<p>Producing the report consists of three subprocesses: the query; the creation of a 
temporary file; and the actual print, preview, or export operation. The first two are 
synchronous operations; the third is asynchronous. While the DataReport designer 
is performing an asynchronous operation, it periodically fires a 
<I>ProcessingTimeout</I> event, approximately once every second. You can trap this event to let the user cancel a 
lengthy operation, using a block of code similar to the one shown below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_ProcessingTimeout(ByVal Seconds As Long, _
    Cancel As Boolean,ByVal JobType As MSDataReportLib.AsyncTypeConstants,_
    ByVal Cookie As Long)
    ' Display a message every 20 seconds.
    Const TIMEOUT = 20
    ' The value of Seconds when we displayed the last message.
    Static LastMessageSecs As Long
    
    ' Reset LastMessage if a new print operation is in progress.
    If Seconds &lt; LastMessageSecs Then
        LastMessageSecs = 0
    ElseIf LastMessageSecs + TIMEOUT &lt;= Seconds Then
        ' A new timeout interval has elapsed.
        LastMessageSecs = Seconds
        ' Ask the user whether the operation should be canceled.
        If MsgBox(&quot;This operation has been started &quot; &amp; Seconds _
            &amp; &quot; seconds ago.&quot; &amp; vbCr &amp; &quot;Do you want to cancel it?&quot;, _
            vbYesNo + vbExclamation) = vbYes Then
            Cancel = True
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>JobType </I>argument is the type of operation in progress and can be one 
of the following values: 0-rptAsyncPreview, 1-rptAsyncPrint, or 2-rptAsyncExport. 
<I>Cookie </I>identifies the particular operation and corresponds to the Long value returned by 
a <I>PrintReport </I>or <I>ExportReport </I>method.</P>

<P>If you're simply interested in displaying a progress indicator without 
canceling an asynchronous operation, you can use the 
<I>AsyncProgress </I>event, which is fired every time a new page is sent to the printer or exported to a file:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_AsyncProgress(ByVal JobType As 
    MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, _
    ByVal PageCompleted As Long, ByVal TotalPages As Long)
    ' Display the progress in a Label control on the main form.
    frmMain.lblStatus = &quot;Printing page &quot; &amp; PageCompleted _
        &amp; &quot; of &quot; &amp; TotalPages
End Sub
</pre>
</td></tr>
</table>
</p>


<p>If the DataReport designer can't continue its operations because of an error, 
it raises an <I>Error </I>event. In this event, you can determine which operation failed 
and suppress the standard error message by setting the 
<I>ShowError </I>parameter to False:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Error(ByVal JobType As 
    MSDataReportLib.AsyncTypeConstants, ByVal Cookie As Long, 
    ByVal ErrObj As MSDataReportLib.RptError, ShowError As Boolean)
    ' Display your own custom error message box.
    If JobType = rptAsyncPrint Or JobType = rptAsyncExport Then
        MsgBox &quot;Error #&quot; &amp; ErrObj.ErrorNumber &amp; vbCr _
            &amp; ErrObj.Description, vbCritical
        ShowError = False
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="710"><h3>Exporting a report</h3></A>

<p>Users can export the current report by clicking on the second button from the left 
in the DataReport preview window. In the dialog box that appears, they must select a 
file name, a file type, and a page range, as shown in Figure 15-10. The DataReport 
designer supports four types of export formats: HTML Text, Unicode, HTML, and Unicode 
Text. Note that the dialog doesn't display the correct number of total pages; this value 
depends on the export format and generally doesn't match the number of pages in 
the preview window (which depends on the Font used in the window itself). Also 
note that the exported report can't include graphics originated by RptImage and 
RptShape controls. Horizontal lines are acceptable in HTML reports and appear as rows of 
hyphens in text reports. Table 15-2 lists the indices, symbolic 
constants, and string values that you can use to identify the four predefined export formats.</P>

<p>
<img src="images/F15ph10x.gif" width=426 height=360 border=0>
</p><p>
<!--caption--><B>Figure 15-10.</B> <I>The Export dialog box lets you export a report in one of four predefined formats.</i><!--/caption-->
</p>

<P>The <I>ExportReport </I>method allows you to programmatically export a report, 
and has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Cookie = ExportReport([FormatIndexOrKey], [FileName], [Overwrite], 
    [ShowDialog], [Range], [PageFrom], [PageTo])
</pre>
</td></tr>
</table>
</p>


<p><I>FormatIndexOrKey </I>is a numerical index or a string key that identifies one of 
the predefined export formats, <I>FileName </I>is the name of the output file, 
<I>Overwrite </I>is a Boolean value that determines whether an existing file can be overwritten (the 
default is True), and <I>ShowDialog </I>is a Boolean value that specifies whether the standard 
export dialog box should be displayed. The remaining arguments have the same 
meaning as in the <I>PrintReport </I>method. The 
<I>ExportReport </I>method returns a Long value that 
can be used to identify this particular operation in a 
<I>ProcessingTimeout</I>, <I>AsyncProgress</I>, or 
<I>Error </I>event.</P>

<P>The <I>FormatOrIndexKey</I> is one of the values found in the first three 
columns of Table 15-2. In fact, you can pass a number in the range from 1 to 4, a 
<I>rptKey</I>xxxx symbolic constant, or its corresponding string value. If you omit either the 
export format or the file name, the Export dialog box is displayed even if you set 
<I>ShowDialog </I>to False:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Export all pages to an HTML file in the application's directory.
Cookie = DataReport1.ExportReport rptKeyHTML, App.Path &amp; &quot;\Orders&quot;, True
</pre>
</td></tr>
</table>
</p>


<p>The export dialog is also displayed if you specify the name of an existing 
file and pass <I>Overwrite </I>set to False. You can omit the file extension because the 
export filter adds the correct extension automatically.</P>

<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
The exporting features of the DataReport designer probably 
need some refinement. On many occasions, executing the preceding code caused 
a crash in the IDE. This problemn shows up randomly, and I've not been able 
to find a recurring pattern or a workaround for it.
</BLOCKQUOTE></DIV></P>

<p><B>Table 15-2.</B> <I>Indexes, symbolic constants and string values that identify the four predefined export formats.</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Index</i></TH>
<TH><i>Symbolic Constant</i></TH>
<TH><i>String</i></TH>
<TH><i>File Filter</i></TH>
<TH><i>Description</i></TH>
</TR>
<TR>
<TD VALIGN="TOP">1</TD>
<TD VALIGN="TOP">rptKeyHTML</TD>
<TD VALIGN="TOP">&quot;key_def_HTML&quot;</TD>
<TD VALIGN="TOP">*.htm, *.html</TD>
<TD VALIGN="TOP">HTML</TD>
</TR>
<TR>
<TD VALIGN="TOP">2</TD>
<TD VALIGN="TOP">rptKeyUnicode-HTML_UTF8</TD>
<TD VALIGN="TOP">&quot;key_def_Unicode-HTML_UTF8&quot;</TD>
<TD VALIGN="TOP">*.htm, *.html</TD>
<TD VALIGN="TOP">Unicode HTML</TD>
</TR>
<TR>
<TD VALIGN="TOP">3</TD>
<TD VALIGN="TOP">rptKeyText</TD>
<TD VALIGN="TOP">&quot;key_def_Text&quot;</TD>
<TD VALIGN="TOP">*.txt</TD>
<TD VALIGN="TOP">Text</TD>
</TR>
<TR>
<TD VALIGN="TOP">4</TD>
<TD VALIGN="TOP">rptKeyUnicode-Text</TD>
<TD VALIGN="TOP">&quot;key_def_Unicode-Text&quot;</TD>
<TD VALIGN="TOP">*.txt</TD>
<TD VALIGN="TOP">Unicode text</TD>
</TR>
</TABLE></P>


       



<A NAME="711"><h3>Creating custom export formats</h3></A>

<p>The export mechanism is fairly sophisticated. In fact, you can define your own 
export format by adding an ExportFormat object to the 
ExportFormats<I> </I>collection. The <I>Add </I>method of this collection expects five arguments, which correspond to the 
properties of the ExportFormat object being created:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>ExportFormats.Add Key, FormatType, FileFormatString, FileFilter, Template
</pre>
</td></tr>
</table>
</p>


<p><I>Key </I>is the string key that will identify the new export format in the 
collection. <I>FormatType</I> is one of the following constants: 0-rptFmtHTML, 
1-rptFmtText, 2rptFmtUnicodeText, or 3-rptFmtUnicodeHTML_UTF8. 
<I>FileFormatString </I>is the description that will appear in the File Filter combo box within the Export dialog 
box, <I>FileFilter </I>is the file filter used for this type of report, and 
<I>Template </I>is a string that determines how the report is arranged:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Initialize()
    ' Create a custom export format.
    Dim template As String
    template = &quot;My Custom Text Report&quot; &amp; vbCrLf &amp; vbCrLf _
        &amp; rptTagTitle &amp; vbCrLf &amp; vbCrLf _
        &amp; rptTagBody
    ExportFormats.Add &quot;Custom Text&quot;, rptFmtText, _
        &quot;Custom text format (*.txt)&quot;, &quot;*.txt&quot;, template
End Sub
</pre>
</td></tr>
</table>
</p>


<p>When creating the <I>Template </I>property, you can use two special strings that 
will work as placeholders to be replaced by the actual report elements. The 
DataReport library exposes such strings as symbolic constants: The rptTagTitle constant is 
replaced by the report title (much like a RptLabel control whose 
<I>Caption </I>property is set to <I>%i</I>), while rptTagBody is replaced by the report body. When you create template 
strings for HTML formats, you can enforce any text attribute, as in the following code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DataReport_Initialize()
    ' Create a custom HTML format for exporting this report.
    Dim template As String
    Title = &quot;Orders in May 1999&quot;
    template = &quot;&lt;HTML&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;HEAD&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;TITLE&gt;&quot; &amp; rptTagTitle &amp; &quot;&lt;/TITLE&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;BODY&gt;&quot; &amp; vbCrLf _
        &amp; rptTagBody &amp; vbCrLf &amp; _
        &quot;&lt;/BODY&gt;&quot; &amp; vbCrLf &amp; _
        &quot;&lt;/HTML&gt;&quot;
    ExportFormats.Add &quot;Custom HTML&quot;, rptFmtHTML, _
        &quot;Custom HTML format (*.htm)&quot;, &quot;*.htm;*.html&quot;, template
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Once you've added a custom ExportFormat object, it appears in the Export 
dialog box's combo box, and you can select it programmatically as you would a 
built-in export format:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Export the first page to an HTML report in custom format.
Cookie = DataReport1.ExportReport &quot;Custom Text&quot;, App.Path &amp; &quot;\Orders&quot;, _
    True, False, rptRangeFromTo, 1, 1
</pre>
</td></tr>
</table>
</p>


<A NAME="712"><h3>Changing the report layout at run time</h3></A>

<p>You often need to create several similar reports, such as one report that displays 
all the information in the Employees table and another that hides the confidential 
data. Because the DataReport is a programmable object, you can, in most cases, 
accommodate such minor differences with a few lines of code. In fact, you can reference 
 all the controls that make up the report and consequently move them around, 
change their size and visibility, or assign new values to properties such as 
<I>Caption</I>, <I>ForeColor</I>, and so on.</P>

<P>Before looking at the implementation details, you must learn how to 
reference a Section object, using the Sections<I> 
</I>collection, and to reference a control inside 
a given section:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Hide the footer section corresponding to the Orders Command.
DataReport1.Sections(&quot;Orders_Footer&quot;).Visible = False
' Change the background color of the lblTitle control.
DataReport1.Sections(&quot;Section1&quot;).Controls(&quot;lblTitle&quot;).Caption = &quot;May 99&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can reference a particular section using its numerical index or its 
name. When the DataReport is initially created, the default sections have generic 
names: Section1 is the Report Header, Section2 is the Report Footer, 
Section3<I> </I>is the Page Header, and 
Section4<I> </I>is the Page Footer. The sections that contain database fields 
take the names of the Command objects from which they retrieve data. In all cases, 
however, you can change the section's <I>Name </I>property in the Properties window.</P>

<P>Alas, you can't add controls at run time because the DataReport's 
Controls<I> </I>collection doesn't support the <I>Add 
</I>method (unlike the form's Controls<I> 
</I>collection). To work around this limitation, you have to incorporate all the possible fields 
when preparing a report and then hide those fields that aren't needed in a particular 
version of the report. You can also hide an entire section by using the section's 
<I>Visible </I>property, and you can shrink a section by using its 
<I>Height </I>property. There's a peculiarity, however: You can't reduce a section's height if the operation would leave 
one or more controls partially invisible. (This holds true even if the control's 
<I>Visible </I>property is False.) For this reason, after you make a control invisible, you have to 
decrease its <I>Top </I>property if you also want to shrink the section it belongs to.</P>

<P>The program on the companion CD puts all these techniques together to 
create a report in two versions (shown in Figure 15-11), with 
and without details on each order. To make the report a reusable entity, I've added a 
Public Boolean property named <I>ShowDetails</I>, which can be assigned from outside 
the DataReport module before invoking its 
<I>Show</I>, <I>PrintReport</I>,<I> </I>or <I>ExportReport 
</I>methods. This is the code inside the DataReport module that implements this feature:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A private member variable.
Dim m_ShowDetails As Boolean

Public Property Get ShowDetails() As Boolean
    ShowDetails = m_ShowDetails
End Property

Public Property Let ShowDetails(ByVal newValue As Boolean)
    Dim newTop As Single
    m_ShowDetails = newValue
    ' This property affects the visibility of the innermost section.
    Sections(&quot;Order_Details_Detail&quot;).Visible = m_ShowDetails
    ' It also affects the visibility of a few fields in the Orders section.
    ' This is the actual Top value if controls are visible; 0 otherwise.
    newTop = IIf(m_ShowDetails, 1870, 0)

    With Sections(&quot;Orders_Header&quot;)
        .Controls(&quot;lblProduct&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblProduct&quot;).Top = newTop
        .Controls(&quot;lblUnitPrice&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblUnitPrice&quot;).Top = newTop
        .Controls(&quot;lblQty&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblQty&quot;).Top = newTop
        .Controls(&quot;lblDiscount&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblDiscount&quot;).Top = newTop
        .Controls(&quot;lblTotal&quot;).Visible = m_ShowDetails
        .Controls(&quot;lblTotal&quot;).Top = newTop
        .Controls(&quot;shaDetailHeader&quot;).Visible = m_ShowDetails
        .Controls(&quot;shaDetailHeader&quot;).Top = newTop
        ' Setting the section's Height to 0 shrinks it as much as possible.
        .Height = IIf(m_ShowDetails, 2200, 0)
    End With
End Property
</pre>
</td></tr>
</table>
</p>


<p>
<A HREF="javascript:fullSize('F15ph11x.htm')"> <img src="images/F15ph11.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 15-11.</B> <I>Two versions of the demonstration report, with and without detail data on each order.</i><!--/caption-->
</p>

<A NAME="713"><h3>Adding dynamic formatting and lookup fields</h3></A>

<p>At first sight, it seems that the DataReport design has little to offer highly 
experienced Visual Basic programmers who have learned to use more powerful report writers 
such as Crystal Report. The truth is, however, that when you combine the DataReport 
with the standard ADO binding mechanism, its potential increases markedly.</P>

<P>The key to such power isn't obvious until you remember that you can 
control the format of bound fields through the <I>Format 
</I>event of a StdDataFormat object. Because this event fires each time a value is read from the data source, it offers a 
way to execute your custom code each time a record is about to be displayed on the 
report. The following example shows how you can use this technique to omit null 
discount values:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is used to trap the instant when a new record is read.
Dim WithEvents DiscountFormat As StdDataFormat

Private Sub DataReport_Initialize()
    ' Create a StdDataFormat object, and assign it to the txtDiscount field.
    Set DiscountFormat = New StdDataFormat
    Set Sections(&quot;Order_Details_Detail&quot;).Controls(&quot;txtDiscount&quot;). _
        DataFormat = DiscountFormat
End Sub

Private Sub DiscountFormat_Format(ByVal DataValue As _
    StdFormat.StdDataValue)
    ' If the discount is zero, use a Null value instead.
    If CDbl(DataValue.Value) = 0 Then DataValue.Value = Null
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Unfortunately, the code inside a <I>Format </I>event procedure can't directly 
modify a control's properties, such as 
<I>Visible</I>, <I>ForeColor</I>, or 
<I>BackColor</I>. Nor can it dynamically assign an image to a RptImage control while the report is being processed, 
which would enable you to overcome the designer's inability to display bitmaps stored 
in a database. If these limitations were addressed, the DataReport designer would 
become a tool suitable even for most demanding reporting jobs.</P>

<p>The only other (minor) problem I found with this approach is that 
the <I>DataValue.TargetObject </I>property contains Nothing when the event fires, so you 
can't assign the same StdDataFormat object to the 
<I>DataFormat </I>properties of multiple controls, because you wouldn't have any means to tell which field is being processed.</P>

<p>The demonstration program also shows how you can implement lookup 
fields using a variant of this mechanism. In its 
<I>Initialize </I>event, the DataReport opens a Recordset that points to the lookup table, and in the 
<I>Format </I>event, it transforms the CustomerID value in the Orders table into the value of the CompanyName field 
in the Customers table:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim WithEvents CustFormat As StdDataFormat
' Used to look up the CustomerID field in the Customers table
Dim rsCust As New ADODB.Recordset

Private Sub DataReport_Initialize()
    ' Create a new format object, and assign it to the txtCustomer field.
    Set CustFormat = New StdDataFormat
    Set Sections(&quot;Orders_Header&quot;).Controls(&quot;txtCustomerName&quot;).DataFormat _
        = CustFormat
    ' Open a Recordset on the Customers table.
    rsCust.Open &quot;Customers&quot;, DataEnvironment1.Connection1, adOpenStatic, _
        adLockReadOnly, adCmdTable
End Sub

Private Sub DataReport_Terminate()
    ' Close the Recordset.
    rsCust.Close
    Set rsCust = Nothing
End Sub

Private Sub CustFormat_Format(ByVal DataValue As StdFormat.StdDataValue)
    ' Transform a CustomerID value into the customer's CompanyName.
    rsCust.MoveFirst
    rsCust.Find &quot;CustomerID='&quot; &amp; DataValue.Value &amp; &quot;'&quot;
    If rsCust.EOF Then
        DataValue.Value = Null                     ' Match not found.
    Else
        DataValue.Value = rsCust(&quot;CompanyName&quot;)    ' Match found.
    End If
End Sub

</pre>
</td></tr>
</table>
</p>


<p>This chapter concludes the part of the book devoted to database programming. 
At this point, you probably know more than you ever dreamed of knowing about 
ADO, and above all you're aware of its incredible power and some of its shortcomings. 
In the next part of the book, I describe how you can take advantage of what you 
have learned about classes and objects to create ActiveX components and controls. If 
you're a database programmer, you'll find additional material in <a href="ch18a.htm">Chapter 18</a> about the 
inner workings of ADO, including directions for building your own data source classes 
and OLE DB providers.</P>
</BODY>
</HTML>





