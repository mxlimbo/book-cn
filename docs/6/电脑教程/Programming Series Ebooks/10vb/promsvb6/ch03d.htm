<HTML>
<HEAD>
<TITLE>CommandButton, CheckBox, and OptionButton Controls</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03c.htm", "ch03e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="80"><H1>CommandButton, CheckBox, and OptionButton Controls</H1></A>
<p>When compared to TextBox controls, these controls are really simple. Not only 
do they expose relatively few properties, they also support a limited number of 
events, and you don't usually write much code to manage them.</P>

<A NAME="81"><h2>CommandButton Controls</h2></A>

<p>Using CommandButton controls is trivial. In most cases, you just draw the 
control on the form's surface, set its 
<I>Caption</I> property to a suitable string (adding an 
&amp; character to associate a hot key with the control if you so choose), and you're 
finished, at least with user-interface issues. To make the button functional, you write code 
in its <I>Click</I> event procedure, as in this fragment:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Command1_Click()
    ' Save data, then unload the current form.
    Call SaveDataToDisk
    Unload Me
End Sub
</pre>
</td></tr>
</table>
</P>


<p>You can use two other properties at design time to modify the behavior of 
a CommandButton control. You can set the 
<I>Default</I> property to True if it's the 
default push button for the form (the button that receives a click when the user presses 
the Enter key&#8212;usually the OK or Save button). Similarly, you can set the 
<I>Cancel</I> property to True if you want to associate the button with the Escape key.</P>

<p>The only relevant CommandButton's run-time property is 
<I>Value</I>, which sets or returns the state of the control (True if pressed, False otherwise). 
<I>Value</I> is also the default property for this type of control. In most cases, you don't need to query 
this property because if you're inside a button's 
<I>Click</I> event you can be sure that the button is being activated. The 
<I>Value</I> property is useful only for 
programmatically clicking a button:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This fires the button's Click event.
Command1.Value = True
</pre>
</td></tr>
</table>
</P>


<p>The CommandButton control supports the usual set of keyboard and 
mouse events (<I>KeyDown</I>, <I>KeyPress</I>, 
<I>KeyUp</I>, <I>MouseDown</I>, <I>MouseMove</I>, 
<I>MouseUp</I>, but not the <I>DblClick</I> event) and also the 
<I>GotFocu</I>s and <I>LostFocus</I> events, but you'll rarely 
have to write code in the corresponding event procedures.</P>

<A NAME="82"><h2>CheckBox Controls</h2></A>

<p>CheckBox controls are useful when you want to offer your users a yes or no, true 
or false choice. Anytime you click on this control, it toggles between the yes state 
and the no state. This control can also be 
<I>grayed</I> when the state of the CheckBox is unavailable, but you must manage that state through code.</P>
<P>When you place a CheckBox control on a form, all you have to do, usually, 
is set its <I>Caption</I> property to a descriptive string. You might sometimes want to 
move the little check box to the right of its caption, which you do by setting the 
<I>Alignment</I> property to 1-Right Justify, but in most cases the default setting is OK. If you want 
to display the control in a checked state, you set its 
<I>Value</I> property to 1-Checked right in the Properties window, and you set a grayed state with 2-Grayed.</P>
<P>The only important event for CheckBox controls is the 
<I>Click</I> event, which fires when either the user or the code changes the state of the control. In many cases, 
you don't need to write code to handle this event. Instead, you just query the 
control's <I>Value</I> property when your code needs to process user choices. You usually write 
code in a CheckBox control's <I>Click</I> event when it affects the state of other controls. 
For example, if the user clears a check box, you might need to disable one or 
more controls on the form and reenable them when the user clicks on the check box 
again. This is how you usually do it (here I grouped all the relevant controls in one 
frame named Frame1):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Check1_Click()
    Frame1.Enabled = (Check1.Value = vbChecked)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Note that <I>Value</I> is the default property for CheckBox controls, so you can 
omit it in code. I suggest that you not do that, however, because it would reduce 
the readability of your code.</P>

<A NAME="83"><h2>OptionButton Controls</h2></A>

<p>OptionButton controls are also known as <I>radio 
buttons</I> because of their shape. You always use OptionButton controls in a group of two or more because their 
purpose is to offer a number of mutually exclusive choices. Anytime you click on a button in the group, it switches to a selected state and all the other controls in the group become unselected.</P>

<p>Preliminary operations for an OptionButton control are similar to those 
already described for CheckBox controls. You set an OptionButton control's 
<I>Caption</I> property to a meaningful string, and if you want you can change its 
<I>Alignment </I>property to make the control right aligned. If the control is the one in its group that's in the 
selected state, you also set its <I>Value</I>property to True. (The OptionButton's 
<I>Value</I> property is a Boolean value because only two states are possible.) 
<I>Value</I> is the default property for this control.</P>

<p>At run time, you typically query the control's 
<I>Value</I> property to learn which button in its group has been selected. Let's say you have three OptionButton 
controls, named <I>optWeekly</I>, 
<I>optMonthly</I>, and <I>optYearly</I>. You can test which one has 
been selected by the user as follows:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If optWeekly.Value Then
    ' User prefers weekly frequency.
ElseIf optMonthly.Value Then
    ' User prefers monthly frequency.
ElseIf optYearly.Value Then
    ' User prefers yearly frequency.
End If
</pre>
</td></tr>
</table>
</P>


<p>Strictly speaking, you can avoid the test for the last OptionButton control in 
its group because all choices are supposed to be mutually exclusive. But the 
approach I just showed you increases the code's readability.</P>

<p>A group of OptionButton controls is often hosted in a Frame control. This 
is necessary when there are other groups of OptionButton controls on the form. As 
far as Visual Basic is concerned, <I>all </I>the OptionButton controls on a form's surface 
belong to the same group of mutually exclusive selections, even if the controls are 
placed at the opposite corners of the window. The only way to tell Visual Basic which 
controls belong to which group is by gathering them inside a Frame control. 
Actually, you can group your controls within any control that can work as a 
container&#8212;PictureBox, for example&#8212;but Frame controls are often the most reasonable choice.</P>

<A NAME="84"><h2>Going Graphical</h2></A>

<p>CheckBox, OptionButton, and CommandButton controls have been with Visual 
Basic since version 1, and their basic set of properties have remained unchanged for 
years. Visual Basic 5, however, introduced a new, interesting graphic mode, which 
transforms these old-fashioned controls into more modern user-interface gadgets that are 
more likely to catch your users' attention, as you can see in Figure 3-5. Since the properties involved are exactly the same for all three controls, I'll 
describe them together.</P>

<p>
<A HREF="javascript:fullSize('F03ph05x.htm')"> <img src="images/F03ph05.JPG" width=404 height=216 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-5.</B> <i>CheckBox, OptionButton, and CommandButton controls come with a graphic flavor.</i><!--/caption-->
</p>

<P>If you want to create a graphical control, you begin by setting its 
<I>Style</I> property to 1-Graphical; the appearance of the control changes, and a border is 
drawn around it. (This is more evident with CheckBox and OptionButton controls.) 
Then you choose a suitable image by clicking on the 
<I>Picture</I> property and navigating through your collection of icons and bitmaps. (You have a collection of icons 
and bitmaps, don't you?) In most cases, this is all you need to do to create 
graphical buttons. If you care about the details, you can select a second icon for the down 
state and assign it to the <I>DownPicture</I><B> 
</B>property.You can also select a different icon for 
the disabled state and assign it to the 
<I>DisabledPicture</I> property. You can set these 
properties at run time, even though this is strictly necessary only when you create the 
user interface dynamically (for instance, a user-defined toolbar with his or her 
favorite commands):</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Command1.Picture = LoadPicture(&quot;c:\vb6\myicon.ico&quot;)
</pre>
</td></tr>
</table>
</P>


<p>You might need to consider two additional properties when you're 
assigning images. The <I>MaskColor</I> property defines which color in the bitmap is to be considered the transparent color. Any pixels in the loaded picture that match this color won't be transferred; in their place, the regular button background color will be used. (The default value for this property is &amp;HC0C0C0, light gray. The <I>MaskColor </I>property is active only if you also set the <I>UseMaskColor</I> to True, however&#8212;otherwise, it's ignored. These properties are useful only for bitmaps because icons (ICO files) and metafiles (WMF and EMF files) already include information about transparency. Note that you should always assign an RGB color to the <I>MaskColor</I> property (as opposed to a system color) because system colors depend on the end user's settings, and your button might not appear on other systems as it appears on yours.</P>

<p>Apart from the graphical look, CheckBox, OptionButton, and 
CommandButton controls using the Style=1-Graphical setting behave exactly like their textual 
counterparts. If you have a series of graphical radio buttons, only one of them stays 
down when pressed. When you press a graphical CheckBox control once, it goes into 
the down state, which is really the checked state. You press the button again to make 
it go in the up, or the clear, state. It's that simple.</P>

</BODY>
</HTML>





