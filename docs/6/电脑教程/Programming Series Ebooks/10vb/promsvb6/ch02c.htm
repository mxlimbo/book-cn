<HTML>
<HEAD>
<TITLE>Common Methods</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02b.htm", "ch02d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="35"><h1>Common Methods</h1></A>

<p> Just as there are many properties that most objects share, they also have 
many methods in common. In this section, we examine these methods.</p>

<A NAME="36"><h2>The <I>Move</I> Method</h2></A>

<p>If a control supports <I>Left</I>, <I>Top</I>, 
<I>Width</I>, and <I>Height</I> properties, it also supports the 
<I>Move</I> method, through which you can change some or all four properties in a single 
operation. The following example changes three properties: 
<I>Left</I>, <I>Top</I>, and <I>Width</I>.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Double a form's width, and move it to the upper left corner of the screen.
' Syntax is: Move Left, Top, Width, Height.
Form1.Move 0, 0, Form1.Width * 2
</pre>
</td></tr>
</table></p>


<p>Note that all arguments but the first one are optional, but you can't omit 
any of them in the middle of the command. For example, you can't pass the 
<I>Height</I> 
argument if you omit the <I>Width</I> argument. As I mentioned in the description of 
individual properties, you should be aware that the 
<I>Height</I> property is read-only for the ComboBox control.</p>

<p><div class="tip"><blockquote><b>TIP</b><hr>
The <I>Move</I> method should always be preferred to individual property 
assignment for at least two reasons: This operation is two to three times 
faster than four distinct assignments, and if you're modifying the 
<I>Width</I> and <I>Height</I> 
properties of a form, each individual property assignments would fire a 
separate <I>Resize</I> event, thus adding a lot of overhead to your code.
</blockquote></div></p>

<A NAME="37"><h2>The <I>Refresh</I> Method</h2></A>

<p>The <I>Refresh</I> method causes the control to be redrawn. You normally don't need 
to explicitly call this method because Visual Basic automatically refreshes the 
control's appearance when it has a chance (usually when no user code is running and 
Visual Basic is in an idle state). But you can explicitly invoke this method when you 
modify a control's property and you want the user interface to be immediately updated:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For n = 1000 To 1 Step -1
    Label1.Caption = CStr(i)
    Label1.Refresh          ' Update the label immediately.
Next
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote><b>CAUTION</b><hr>
You can also refresh a form using the 
<I>DoEvents</I> command because it yields the control to Visual Basic, and the Visual Basic form engine 
exploits this opportunity to update the user interface. But you should be aware 
that <I>DoEvents</I> performs additional processing as well&#8212;for example, it 
checks whether any button has been clicked and if so it executes its 
<I>Click</I> procedure. Therefore, the two techniques aren't always equivalent. In general, using 
the <I>Refresh</I> method on the only control that has been modified delivers better 
performance than executing a <I>DoEvents</I> command. It also avoids reentrancy 
problems that can occur, for example, when the user clicks again on the same 
button before the previous <I>Click</I> procedure has completed its processing. If you 
want to update all the controls on a form but you don't want the end user to 
interact with the program, just execute the <I>Refresh 
</I>method of the parent form.
</blockquote></div></p>

<A NAME="38"><h2>The <I>SetFocus</I> Method</h2></A>

<p>The <I>SetFocus</I> method moves the input focus on the specified control. You need 
to call this method only if you want to modify the default Tab order sequence that 
you implicitly create at design time by setting the 
<I>TabIndex</I> property of the controls on the form, as we saw in <a href="ch01a.htm">Chapter 1</a>. The control whose 
<I>TabIndex </I>property is set to 0 receives the focus when the form loads.</p>

<p>A potential problem with the <I>SetFocus</I> method is that it fails and raises a 
run-time error if the control is currently disabled or invisible. For this reason, avoid 
using this method in the <I>Form_Load</I> event (when all controls aren't yet visible) and 
you should either ensure that the control is ready to receive the focus or protect 
the method with an <I>On Error</I> statement. Here's the code for the former approach:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the focus to Text1. 
If Text1.Visible And Text1.Enabled Then
    Text1.SetFocus
End If
</pre>
</td></tr>
</table></p>


<p>And here's the code for the other possible approach, using the 
<I>On Error</I> 
statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the focus to Text1. 
On Error Resume Next
Text1.SetFocus
</pre>
</td></tr>
</table></p>


<P><div class="TIP"><blockquote>
<B>TIP</B><HR>
The <I>SetFocus</I> method is often used in the 
<I>Form_Load</I> event procedure to programmatically set which control on the form should receive the focus 
when the form initially appears. Because you can't use 
<I>SetFocus</I> on invisible controls, you're forced to make the form visible first:

<p><table><tr><td>
<PRE>
Private Sub Form_Load()
    Show          ' Make the form visible.
    Text1.SetFocus
End Sub
</PRE>
</td></tr></table></p>


<p>Here's another possible solution:</p>

<p><table><tr><td>
<PRE>
Private Sub Form_Load()
    Text1.TabIndex = 0  
End Sub
</PRE>
</td></tr></table></p>

<p>Note that if <I>Text1</I> isn't able to receive the input focus (for example, 
its <I>TabStop</I> property is set to False), Visual Basic automatically moves the 
focus on the next control in the Tab order sequence, without raising any error. 
The drawback of this second approach is that it affects the Tab order of all 
other controls on the form.</p>
</blockquote></div></p>

<A NAME="39"><h2>The <I>ZOrder</I> Method</h2></A>

<p>The <I>ZOrder</I> method affects the visibility of the control with respect to other 
overlapping controls. You just execute this method without any argument if you want to 
position the control in front of other controls; or you can pass 1 as an argument to move 
the control behind other controls:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move a control behind any other control on the form.
Text1.ZOrder 1      
Text1.ZOrder        ' Move it in front.
</pre>
</td></tr>
</table></p>


<p>Note that you can set the relative z-order of controls at design time using 
the commands in the Order submenu of the Format menu, and you can also use the 
Ctrl+J key combination to bring the selected control to the front or the Ctrl+K key 
combination to move it behind other controls.</p>

<p>The actual behavior of the <I>ZOrder</I> method depends on whether the control 
is standard or lightweight. In fact, lightweight controls can never appear in front 
of standard controls. In other words, the two types of controls&#8212;standard and 
lightweight&#8212;are located on distinct z-order layers, with the layer of standard controls in front 
of the layer of lightweight controls. This means that the 
<I>ZOrder</I> method can change the relative z-order of a control only within the layer it belongs to. For example, you 
can't place a Label (lightweight) control in front of a TextBox (standard) control. 
However, if the standard control can behave like a container control&#8212;a PictureBox or a 
Frame control, for example&#8212;you can make a lightweight control appear in front of 
the standard control if you place the lightweight control inside that container control, 
as you can see in Figure 2-5.</p>

<p>The <I>ZOrder</I> method also applies to forms. You can send a form behind all 
other forms in the same Visual Basic application, or you can bring it in front of them. 
You can't use this method, however, to control the relative position of your forms 
with respect to windows belonging to other applications.</p>

<p>
<A HREF="javascript:fullSize('F02ph05x.htm')"> <img src="images/F02ph05.JPG" width=404 height=273 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 2-5.</B> <i>Relative z-order of controls.</i><!--/caption-->
</p>

</BODY>
</HTML>





