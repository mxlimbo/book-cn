<HTML>
<HEAD>
<TITLE>The ImageList Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="410"><h1>The ImageList Control</h1></A>

<p>The ImageList control is most often used as a container for images and icons that 
are employed by other controls, such as TreeView, ListView, TabStrip, and 
ImageCombo controls. For this reason, it makes sense to describe it before any other controls. 
The ImageList control is invisible at run time, and to display one of the images it 
contains you must draw it on a form, a PictureBox control, or an Image control, or 
associate it with another control.</p>

<p>Using the ImageList control as a repository for images that are then used by 
other controls offers a number of advantages. Without this control, in fact, you would 
have to load images from disk at run time using a 
<I>LoadPicture </I>function, which slows down execution and increases the number of files to be distributed with your program, 
or an array of Image controls, which slows down form loading. It's much easier and 
more efficient to load all the images in the ImageList control at design time and then 
refer to them from the other controls or in source code.</p>

<A NAME="411"><h2>Adding Images</h2></A>

<p>The ImageList control exposes a ListImages collection, which in turn contains 
a number of ListImage objects. Each ListImage item holds an individual image. As 
with any collection, an individual ListImage object can be referenced through its 
numerical index or its string key (if it has one). Each ListImage object can hold an image 
in one of the following graphic formats: bitmap (.bmp), icon (.ico), cursor (.cur), 
JPEG (.jpg), or GIF (.gif). The latter two formats weren't supported by the ImageList 
control distributed with Visual Basic 5.</p>

<A NAME="412"><h3>Adding images at design time</h3></A>

<p>Adding images at design-time is easy. After you place an ImageList control on a 
form, right-click on it, select the Properties command from the pop-up menu, and 
switch to the Images tab, as shown in Figure 10-3. All you have to do now is click on 
the Insert Picture button and pick up your images from disk. You should associate a 
string key with each image so that you can refer to it correctly later, even if you add 
or remove other images in the future (which would affect its numerical index). Of 
course, all string keys must be unique in the collection. You can also specify a string for 
the <I>Tag</I> property of an image, for example, if you want to provide a textual 
description of the image or any other information associated with this image. Visual Basic 
never directly uses this property, so you're free to store any string data in it.</p>

<p>
<img src="images/F10ph03x.gif" width=419 height=315 border=0>
</p><p>
<!--caption--><B>Figure 10-3.</B> <i>The Images tab of the Properties window of an ImageList control.</i><!--/caption-->
</p>

<p>Images added to the ListImages collection can be of any size, with a caveat: 
If you're going to use these images inside another common control, all the images 
after the first one will be resized and stretched to reflect the size of the first image 
added to the control. This isn't an issue if you're going to display these images on a 
form, a PictureBox control, or an Image control.</p>

<p>If the ImageList control doesn't contain any images, you can set the size 
you want the images to be in the General tab of the Properties dialog box. Trying to 
do this when the control already contains one or more ListImage items raises an error.</p>

<A NAME="413"><h3>Adding images at run time</h3></A>

<p>Adding images at run time requires you to use the 
<I>Add</I> method of the ListImages collection, the syntax of which is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Picture]) As ListImage
</pre>
</td></tr>
</table>
</p>


<p>If you omit the <I>Index </I>argument, you add the new image at the end of the 
collection. The following code creates a new ListImage item and associates it with 
a bitmap loaded from disk:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim li As ListImage
Set li = ImageList1.ListImages.Add(, &quot;Cut&quot;, _
    LoadPicture(&quot;d:\bitmaps\cut.bmp&quot;))
</pre>
</td></tr>
</table>
</p>


<p>You don't need to assign the result value of the 
<I>Add</I> method to a ListImage object unless you want to assign a string to the 
<I>Tag</I> property of the object just created. 
Even in that case, you can do without an explicit variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With ImageList1.ListImages.Add(, &quot;Cut&quot;, LoadPicture(&quot;d:\bitmaps\cut.bmp&quot;))
    .Tag = &quot;The Cut icon&quot;
End With
</pre>
</td></tr>
</table>
</p>


<p>You can remove individual ListImage objects (added either at design time 
or at run time) by using the <I>Remove</I> method of the ListImages collection.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can use a numerical index or a string key
' to remove the associated image.
ImageList1.ListImages.Remove &quot;Cut&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can also remove all the images in one operation by using the 
collection's <I>Clear</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Remove all images.
ImageList1.ListImages.Clear
</pre>
</td></tr>
</table>
</p>


<p>You can learn the size of the images currently stored in the control by 
using the ImageList's <I>ImageWidth</I> and 
<I>ImageHeight</I> properties. These properties are in 
pixels and can be written to only if the ListImages collection is empty; after you add 
the first image, they become read-only properties.</p>

<A NAME="414"><h2>Extracting and Drawing Images</h2></A>

<p>If you associate an ImageList control with another common control, you usually 
don't have to worry about extracting and showing individual images because 
everything is done automatically for you. But if you want to manually display or print 
images, you have to learn how to use a few properties and methods from the ImageList 
control and its ListImage dependent objects.</p>

<A NAME="415"><h3>Extracting individual images</h3></A>

<p>Each ListImage object exposes a <I>Picture</I> property, which lets you extract the 
image and assign it to another control, typically a PictureBox or Image control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set Picture1.Picture = ImageList1.ListImages(&quot;Cut&quot;).Picture
</pre>
</td></tr>
</table>
</p>


<p>In general, you can use the <I>Picture</I> property of a ListImage object 
whenever you would use the <I>Picture</I> property of a PictureBox or an Image control, as in 
the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save an image to a disk file.
SavePicture ImageList1.ListImages(&quot;Cut&quot;).Picture, &quot;C:\cut.bmp&quot;
' Display an image on the current form, zooming it by a factor
' of 4 along the X-axis, and 8 along the Y-axis.
With ImageList1
    PaintPicture .ListImages(&quot;Cut&quot;).Picture, 0, 0, _
        ScaleX(.ImageWidth, vbPixels) * 4, ScaleY(.ImageHeight, vbPixels) * 8
End With
</pre>
</td></tr>
</table>
</p>


<p>Using the <I>PaintPicture</I> method, you can display any ListImage object on a 
form or in a PictureBox control, or you can print it to the Printer object. For more 
information about the <I>PaintPicture</I> method, see <a href="ch02a.htm">Chapter 2</a>.</p>

<p>ListImage objects also expose an 
<I>ExtractIcon</I> method, which creates an icon 
out of the image and returns it to the caller. You can therefore use this method 
whenever an icon is expected, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Form1.MouseIcon = ImageList1.ListImages(&quot;Pointer&quot;).ExtractIcon
</pre>
</td></tr>
</table>
</p>


<p>Unlike standard collections, keys in the ListImages collection are dealt with 
in a case-sensitive way. In other words, 
&quot;<I>Pointer</I>&quot; and 
&quot;<I>pointer</I>&quot; are assumed to be different items.</p>

<A NAME="416"><h3>Creating transparent images</h3></A>

<p>The ImageList control has a <I>MaskColor </I>property whose value determines the 
color that should be considered transparent when you're performing graphical 
operations on individual ListImage objects or when you're displaying images inside other 
controls. By default, this is the gray color (&amp;HC0C0C0), but you can change it both 
at design time in the Color tab of the Properties dialog box and at run time via code.</p>

<p>When a graphical operation is performed, none of the pixels in the image 
that are the color defined by <I>MaskColor</I> are transferred. To actually display 
transparent images, however, you must ensure that the 
<I>UseMaskColor</I> property is set to True, which is its default value. You can modify this value in the General tab of the 
Properties dialog box or at run time via code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make white the transparent color.
ImageList1.MaskColor = vbWhite
ImageList1.UseMaskColor = True
</pre>
</td></tr>
</table>
</p>


<A NAME="417"><h3>Using the <I>Draw</I> method</h3></A>

<p>ListImage objects support the <I>Draw</I> method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Draw hDC, [x], [y], [Style]
</pre>
</td></tr>
</table>
</p>


<p>where <I>hDC </I>is the handle of a device context (typically the value returned by the 
<I>hDC</I> property of a form, a PictureBox control, or the Printer object) and 
<I>x </I>and <I>y </I>are the coordinates in pixels where the image should be displayed in the target object. 
<I>Style </I>is one of the following values: 0-imlNormal (default, draw the image without 
any change), 1-imlTransparent (use the 
<I>MaskColor</I> property to account for 
transparent areas), 2-imlSelected (draw the image dithered with the system highlight color), 
or 3-imlFocus (as imlSelected, but create a hatched effect to indicate that the image 
has the focus):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show an image in the upper left corner of a PictureBox control.
ImageList1.ListImages(&quot;Cut&quot;).Draw Picture1.hDC, 0, 0
</pre>
</td></tr>
</table>
</p>


<A NAME="418"><h3>Creating composite images</h3></A>

<p>The ImageList control also includes the ability to create composite images by 
overlaying two individual images held in ListImage objects. This can be 
accomplished using the <I>Overlay</I> method. Figure 10-4 shows two individual images and then 
what you can get by overlaying the second one on the first one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PaintPicture ImageList1.ListImages(1).Picture, 0, 10, 64, 64
PaintPicture ImageList1.ListImages(2).Picture, 100, 10, 64, 64
PaintPicture ImageList1.Overlay(1, 2), 200, 10, 64, 64
</pre>
</td></tr>
</table>
</p>


<p>
<img src="images/F10ph04.GIF" width=265 height=91 border="0">
<p>
<!--caption--><B>Figure 10-4.</B> <i>The effect of the Overlay method.</i><!--/caption-->


<p>The <I>Overlay</I> method implicitly uses the 
<I>MaskColor</I> property to determine which color is to be considered as the transparent color, so you must ensure that 
the <I>UseMaskColor</I> property is set to True.</p>

</BODY>
</HTML>





