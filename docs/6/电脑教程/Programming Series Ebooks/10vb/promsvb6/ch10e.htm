<HTML>
<HEAD>
<TITLE>The Toolbar Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10d.htm", "ch10f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="444"><h1>The Toolbar Control</h1></A>

<p>The majority of Windows applications include one or more toolbars, which offer 
the end user the convenience of executing the most common commands with a click 
of the mouse. Toolbars should never replace menus&#8212;and for good reason: menus 
can be operated with the keyboard; toolbars can't&#8212;but they surely make a program 
more usable and give it a modern look and feel.</P>

<p>Visual Basic comes with a Toolbar control that can contain buttons and 
other controls and that can be interactively customized by the end user. The Visual Basic 
6 version adds the flat style made popular by Microsoft Internet Explorer and the 
support for building drop-down menus.</P>
<P>The Toolbar control exposes the Buttons collection, which in turn 
contains Button objects. Each Button object can be an actual push button, a separator, or 
a placeholder for another control placed on the toolbar (typically a TextBox 
control or a ComboBox control). In addition, a Button object exposes the ButtonsMenus 
collection, where each ButtonMenu object is an item of a drop-down menu. (If the 
Button object isn't a drop-down menu, this collection is empty.)</P>

<P>
<A HREF="javascript:fullSize('G10ph02x.htm')"> <img src="images/G10ph02.JPG" width=404 height=201 border=0 ALT = "Click to view at full size."> </A>
</P>

<A NAME="445"><h2>Setting Design-Time Properties</h2></A>

<p>In most cases, you define the appearance of a Toolbar at design time and then 
simply react to user's clicks on its buttons. You have two ways to work with a 
Toolbar at design time: by using the Toolbar Wizard or by manually setting properties. 
The two methods aren't mutually exclusive: In most cases, in fact, you might find it 
convenient to create a first version of a Toolbar control using the wizard and then 
refine it in its Properties dialog box.</P>


<A NAME="446"><h3>The Toolbar Wizard</h3></A>
<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>The Toolbar Wizard is a new add-in provided with Visual Basic 6. But you won't 
find this wizard in the list of installable add-ins in the Add-In Manager dialog box. 
Instead, you have to install the Application Wizard add-in: After you do this, you'll find 
the Toolbar Wizard command in the Add-In menu. If you select this command, the 
wizard adds a new Toolbar control to the current form and lets you customize it. Or 
you can place a Toolbar control on the form yourself, and the wizard will be 
automatically activated.</P>

<p>Using the Toolbar Wizard is simple. You have a list of buttons in the 
leftmost list box (see Figure 10-14) from which you select the 
buttons you want to add to the Toolbar control. You can move items between the two 
list boxes and change their order in the toolbar by using the provided push buttons, 
or you can use drag-and-drop. The wizard also creates the companion ImageList 
control on the form. When you complete a toolbar, you'll be asked whether you 
want to save it in an .rwp profile file, which lets you speed up the creation of similar 
toolbars in future applications.</P>

<p>
<A HREF="javascript:fullSize('F10ph14x.htm')"> <img src="images/F10ph14.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-14.</B> <i>Creating a toolbar using the Toolbar Wizard.</i><!--/caption-->
</p>

<A NAME="447"><h3>General properties</h3></A>

<p>After you create a toolbar, you can access its Property Pages by right-clicking on 
it and choosing Properties. The General tab of the Property Pages dialog box 
includes most of the design-time properties that let you control the fine points of the 
appearance and behavior of a Toolbar control, as shown in Figures 10-15 and 10-16. 
For example, you make the following decisions: Whether the end user can customize 
the toolbar at run time (<I>AllowCustomize</I> property), whether the toolbar will wrap 
on multiple lines when the form is resized 
(<I>Wrappable</I> property), whether ToolTips are visible 
(<I>ShowTips</I> property), and what the default size of buttons 
(<I>ButtonWidth</I> and <I>ButtonHeight</I> properties) is. If necessary, buttons are automatically enlarged to 
account for their caption or image, so in most cases you don't need to edit the 
default values of the latter two properties.</P>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>A few new properties let you access the most interesting features 
introduced in Visual Basic 6. You can create flat toolbars by setting the 
<I>Style</I> property to the value 1-tbrFlat, and you can use the 
<I>TextAlignment </I>property to modify the alignment 
of a button's caption with respect to the button's image (0-tbrTextAlignBottom or 1-tbrTextAlignRight).</P>

<p>A toolbar's button can be in three possible states: normal, disabled, or 
selected. (The selected state occurs when the mouse passes over the button if 
<I>Style</I> is 1-tbrFlat.) Instead of having three properties to point to different images of the same 
ImageList control, the Toolbar control uses a different approach: Each Button object 
exposes only one <I>Image </I>property&#8212;an index or a string key&#8212;and the state of the button 
implicitly affects which ImageList control will be used. You assign these three 
ImageList controls to the <I>ImageList</I>, 
<I>DisabledImageList</I>,<I> </I>and <I>HotImageList 
</I>properties either at design time or at run time. For example, you can mimic the behavior of Internet 
Explorer 4 by using a set of black-and-white icons for the normal state and a set 
of colorful icons for the selected state. If you don't assign the latter two properties, 
the Toolbar automatically creates a suitable image for the disabled or selected state.</P>

<p>
<img src="images/F10ph15x.gif" width=419 height=387 border=0>
</p><p>
<!--caption--><B>Figure 10-15.</B> <i>The General tab of the Property Pages dialog box of a Toolbar control.</i><!--/caption-->
</p>

<p>
<img src="images/F10ph16x.gif" width=419 height=387 border=0>
</p><p>
<!--caption--><B>Figure 10-16.</B> <i>The Buttons tab of the Property Pages dialog box of a Toolbar control.</i><!--/caption-->
</p>

<A NAME="448"><h3>Button objects</h3></A>

<p>A Toolbar control without any Button objects is useless. You can add Button 
objects using the Toolbar Wizard, as I explained previously, or you can do it in the 
Buttons tab of the Property Pages dialog box, as you can see in Figure 10-16. Each 
Button has a <I>Caption</I> property (use an empty string if you want to display only the 
icon), an optional <I>Description</I> that appears during a customization operation, a 
<I>Tag </I>property, a <I>Key</I> in the Buttons collection (optional, but use it to improve the 
readability of your code), a <I>ToolTipText</I> that appears if the Toolbar's 
<I>ShowTips </I>property is True, and an 
<I>Image</I> index or key to the associated ImageList controls.</P>
<P><I>Style</I> is the most interesting property of a Button object. This property affects the appearance and behavior of the button and can be assigned one of the following values: 0-tbrDefault (a normal button, which behaves like a push button), 1-tbrCheck (a button that stays down when pressed, much like a CheckBox control), 2-tbrButtonGroup (a button that belongs to a group in which only one item can be in the selected state, similar to an OptionButton control), 3-tbrSeparator (a separator of fixed width), 4-tbrPlaceholder (a separator whose size depends on the 
<I>Width</I> property; this style is used to make room for another control placed on the 
toolbar), or 5-tbrDropDown (a button with a down arrow beside it, which displays a 
drop-down menu when clicked).</P>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>When the <I>Style</I> property is set to the value 5-tbrDropDown, you can add 
one or more ButtonMenu objects to the current Button. (You can create ButtonMenu 
items regardless of the button's style, but they're visible only when the style is 
tbrDropDown.) Each ButtonMenu object has a 
<I>Text</I> property (the caption of the menu line), 
an optional <I>Key </I>in the ButtonMenus collection, and a 
<I>Tag </I>property. Unfortunately, you can't associate an image with a ButtonMenu object: Drop-down menus are 
inherently text-only, which definitely contrasts with the graphical nature of the Toolbar 
control. See Figure 10-17 for an example of a Toolbar control whose first button has 
an associated drop-down menu.</P>

<p>
<img src="images/F10ph17.GIF" width=319 height=154 border="0">
<p>
<!--caption--><B>Figure 10-17.</B> <i>A toolbar with a drop-down menu.</i><!--/caption-->


<A NAME="449"><h2>Run-Time Operations</h2></A>

<p>Once you have added a Toolbar control to a form, you have to trap the user's 
actions on it. You might also need to programmatically build the control at run time 
or let the user customize it and save the new layout for subsequent sessions.</P>

<A NAME="450"><h3>Creating Button and ButtonMenu objects</h3></A>

<p>You can create new Button objects at run time using the 
<I>Add</I> method of the Buttons collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index], [Key], [Caption], [Style], [Image]) As Button
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position at which the Button object will be inserted in the 
collection, <I>Key </I>is its optional string key, 
<I>Caption </I>is the text visible on the toolbar, 
<I>Style </I>determines the type of the button being added (0-tbrNormal, 1-tbrCheck, 
2tbrButtonGroup, 3-tbrSeparator, 4-tbrPlaceholder, or 5-tbrDropDown), and 
<I>Image </I>is the index or the key of an image in the three companion ImageList controls.</P>

<p>You might want to set a few additional properties when you're creating a 
Button object, such as <I>Width </I>(for placeholder buttons) and 
<I>ToolTipText</I>. Buttons whose style is tbrCheck or tbrButtonGroup can be created in a pressed state by assigning 
1-tbrPressed to the <I>Value </I>property. Here's an example of code that adds a few buttons:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A button that can be in an on or off state
Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrCheck, &quot;Lock&quot;)
btn.Value = tbrPressed
' A separator
Toolbar1.Buttons.Add, , , tbrSeparator
' Two buttons that are mutually exclusive
Set btn = Toolbar1.Buttons.Add(, , , tbrButtonGroup, &quot;Green&quot;)
Set btn = Toolbar1.Buttons.Add(, , , tbrButtonGroup, &quot;Red&quot;)
btn.Value = tbrPressed
</pre>
</td></tr>
</table>
</p>


<p>You can place any control in the toolbar by creating a Button object with 
the <I>Style </I>property set to tbrPlaceholder and then moving the control to the correct 
position. For example, let's say that you want to place the 
<I>cboFontSizes</I> control in the toolbar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a placeholder of proper width.
Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrPlaceholder)
btn.Width = cboFontSizes.Width
' Move the ComboBox control over the placeholder button.
Set cboFontSizes.Container = Toolbar1
cboFontSizes.Move btn.Left, btn.Top
</pre>
</td></tr>
</table>
</p>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>If you create a Button object whose 
<I>Style</I> property is tbrDropDown, you can add one or more items to its ButtonMenus collection by using the collection's 
<I>Add </I>method:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add ([Index], [Key], [Text]) As ButtonMenu
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>is the position in the collection, 
<I>Key </I>is an optional key, and <I>Text </I>is 
the caption of the menu item. The piece of code below adds 
one drop-down Button object with a menu of three items.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim btn As Button
Set btn = Toolbar1.Buttons.Add(, , , tbrDropDown, &quot;New&quot;)
With btn.ButtonMenus
    .Add , , &quot;File&quot;
    .Add , , &quot;Document&quot;
    .Add , , &quot;Image&quot;
End With
</pre>
</td></tr>
</table>
</p>


<A NAME="451"><h3>Reacting to a user's actions</h3></A>

<p>When the user clicks on a button, the Toolbar control fires a 
<I>ButtonClick </I>event, so it's easy to execute a piece of code when this happens:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonClick(ByVal Button As MSComCtlLib.Button)
    Select Case Button.Key
        Case &quot;New&quot;
            Call mnuFileNew_Click
        Case &quot;Save&quot;
            Call mnuFileSave_Click
        ' And so on.
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>Visual Basic 6 introduces two new events, both of which are related to 
drop-down menus. The <I>ButtonDropDown </I>event fires when the user opens a drop-down menu. You can use this event to create or modify the menu on the fly&#8212;for example, by setting the <I>Visible </I>or <I>Enabled 
</I>property of its individual ButtonMenu items or 
by adding new menu lines:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonDropDown(ByVal Button As MSComctlLib.Button)
    ' Make the &quot;Open | Image&quot; command unavailable if necessary.
    If Button.Caption = &quot;Open&quot; Then
        Button.ButtonMenus(&quot;Image&quot;).Enabled = ImagesAreEnabled
    End If
End Sub
</pre>
</td></tr>
</table>
</p>


<p>The <I>ButtonMenuClick </I>event fires when the end user actually selects a 
command in a drop-down menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_ButtonMenuClick(ByVal ButtonMenu As 
    MSComctlLib.ButtonMenu)
    Select Case ButtonMenu.Key
        Case &quot;Document&quot;
            Call mnuFileNewDocument
        Case &quot;Image&quot;
            Call mnuFileNewImage
    End Select
End Sub
</pre>
</td></tr>
</table>
</p>


<A NAME="452"><h3>Customizing the Toolbar control</h3></A>

<p>You can allow for users to customize the Toolbar control if you want. You can 
choose from two ways to achieve this: You set the 
<I>AllowCustomization </I>property to True to let users enter customization mode by double-clicking on the toolbar, or you 
programmatically enter customization mode by executing the Toolbar's 
<I>Customize </I>method. The latter approach is necessary if you want to provide this capability 
only to a restricted group of users:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_DblClick()
    If UserIsAdministrator Then Toolbar1.Customize
End Sub
</pre>
</td></tr>
</table>
</p>


<p>Whatever method you choose, you end up displaying the Customize 
Toolbar dialog box, shown in Figure 10-18.</P>

<p>
<A HREF="javascript:fullSize('F10ph18x.htm')"> <img src="images/F10ph18.JPG" width=404 height=170 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 10-18.</B> <i>The Customize Toolbar dialog box.</i><!--/caption-->
</p>

<p>When the user closes this dialog box, the Toolbar control raises a 
<I>Change </I>event. (Beware: This event occurs even if the user made no changes to the toolbar's 
layout.) Within this event procedure, you should execute a 
<I>SaveToolbar </I>method, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SaveToolbar Key, Subkey, Value
</pre>
</td></tr>
</table>
</p>


<p><I>Key </I>is the name of a Registry key, <I>SubKey 
</I>is the name of a Registry subkey, and <I>Value 
</I>is the name of a Registry value; together, these arguments define a location 
in the system Registry where the layout of the toolbar is stored. For example, you 
can use them to save different layouts depending on the application's name, the 
user currently logged in, and the particular toolbar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Toolbar1_Change()
    Toolbar1.SaveToolbar &quot;MyApplication&quot;, UserName, &quot;MainFormToolbar&quot;
End Sub
</pre>
</td></tr>
</table>
</p>


<p>You restore these settings using the <I>RestoreToolbar 
</I>method, typically in the <I>Form_Load </I>event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Toolbar1.RestoreToolbar &quot;MyApplication&quot;, UserName, &quot;MainFormToolbar&quot;
End Sub
</pre>
</td></tr>
</table>
</p>


<p><div class="note"><blockquote><b>NOTE</b><hr>
Oddly, the <I>RestoreToolbar</I> method raises a 
<I>Change</I> event. This behavior is usually harmless because the code in this event procedure proceeds 
to save the toolbar again in the Registry (adding just a little overhead to the 
form-loading process). However, if the Toolbar object's 
<I>Change </I>event procedure contains other, time-consuming statements, they might slow down your code 
and even cause an unexpected error.
</blockquote></div></P>

<p>When the Customize Toolbar dialog box is active, users can delete 
existing buttons, restore buttons that had been previously deleted, or change the order 
of buttons in the toolbar. If you want to let users add buttons, you must create 
such buttons at design time, run the application, invoke the Customize Toolbar, and 
delete these extra buttons. The deleted buttons will be available in the leftmost list box 
in the Customize Toolbar dialog box in case a user wants to restore them.</P>

</BODY>
</HTML>





