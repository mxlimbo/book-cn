<HTML>
<HEAD>
<TITLE>ADO 2.1 DDL and Security Extensions</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13g.htm", "ch14a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="605"><h1>ADO 2.1 DDL and Security Extensions</h1></A>
<p>The beauty of ADO is that it is an extensible architecture. It's not the monolithic (and overly complex) object model that DAO is. Microsoft can easily add new features to ADO without breaking existing applications and without forcing developers to learn a new object model at each new release. In fact, although ADO 2.1 contains several improvements to the ADO 2.0 model, all the new features are provided in the form of distinct object trees that are linked dynamically&#8212;that is, at run time&#8212;to the object in the standard ADO hierarchy.</p>

<p>In the remainder of this chapter, I'll illustrate the objects in the Microsoft Extension 2.1 for DDL and Security (ADOX) library, which extends the standard ADODB library with data definition language capabilities, giving you, for example, the ability to enumerate the tables, views, and stored procedures in a database as well as the ability to create new ones. This library also contains security objects that permit you to determine and modify the permissions granted to an individual or to groups of users. ADO 2.1 contains other extensions, such as the ADOMD library for online analytical processing (OLAP) operations and the support for Microsoft Jet replications, but I won't cover those topics in this book.</p>

<p>Figure 13-5 depicts the ADOX hierarchy. This object tree includes more items than ADODB, but the relationships among the nodes are still fairly intuitive. Whereas the standard ADO library deals mostly with the data in databases, the ADOX library is interested only in the structure of the tables, the views, and the procedures stored in the database as well as in the users and the groups of users that can access these items. Working with the ADOX library is simple because you don't have to account for recordsets, cursors, timeout errors, locks, transactions, and all the usual issues you have to resolve when writing a standard database application based on ADO. All the objects in the hierarchy also support the Properties collection, which includes all the dynamic properties.</p>

<p>
<A HREF="javascript:fullSize('F13ph05x.htm')"> <img src="images/F13ph05.JPG" width=404 height=480 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-5.</B> <i>The ADOX object model. The Catalog object can be linked to an existing ADODB.Connection object through the Catalog's </i>ActiveConnection<i> property.</i><!--/caption-->
</p> 

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Not all providers support all the DDL capabilities mentioned in this section. For example, a provider might support the enumeration of database objects but not the creation of new ones. For this reason, it is essential for you to make sure that all the code that accesses these objects is protected against unanticipated errors.
</blockquote></div></p>

<A NAME="606"><h2>The Catalog Object</h2></A>
<p>The Catalog object is the entry point of the ADOX hierarchy. It represents the database and includes all the tables, stored procedures, views, users, and groups of users. The Catalog object allows you to perform two distinct operations: enumerate the objects in an existing database or create a new database from scratch.</p>

<p>When you just want to explore an existing database, you have to create a stand-alone ADODB.Connection object, open it, and then assign it to the <I>ActiveConnection </I>property of the Catalog object. By doing so, you link the ADODB and the ADOX hierarchies together:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;
Dim cn As New ADODB.Connection, cat As New ADOX.Catalog
' Open the connection.
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=&quot; &amp; DBPATH 
' Link the catalog to the connection.
Set cat.ActiveConnection = cn
</pre>
</td></tr></table></p>

<p>After you've linked the Catalog object to an open Connection object, you can enumerate the objects in the database by using the Tables, Procedures, Views, Groups, and Users collections:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Fill a list box with the names of the stored procedures in the database.
Dim proc As ADOX.Procedure
For Each proc In cat.Procedures
    List1.AddItem proc.Name
Next
</pre>
</td></tr></table></p>

<p>On the companion CD, you'll find a complete project that lists all the objects in a Catalog and the values of all their properties, as shown in Figure 13-6.</p>

<p>The Catalog object exposes two methods, <I>GetObjectOwner </I>and <I>SetObjectOwner</I>, which let you read and modify the owner of a database object, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next      ' Not all providers support this capability.
owner = cat.GetObjectOwner(&quot;Authors&quot;, adPermObjTable)
</pre>
</td></tr></table></p>

<p>When you create a new (empty) database, you don't need a stand-alone Connection object. Instead, you can carry out the task by using the Catalog object's <I>Create </I>method. This method takes as its only argument the connection string that defines both the provider and the database name:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The next line fails if the database already exists.
cat.Create &quot;Provider=Microsoft.Jet.OLEDB.4.0;User ID=Admin;&quot; _
    &amp; &quot;Data Source=C:\Microsoft Visual Studio\Vb98\BiblioCopy.mdb&quot;
</pre>
</td></tr></table></p>

<p>The <I>Create </I>method isn't supported by the OLE DB providers for SQL Server, Oracle, and ODBC drivers.</p>

<p>Regardless of whether you've created a new database or opened an existing one, you can add or remove objects using the Catalogs collections. For example, here's the code that creates a new table with two fields and adds it to the database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As New ADOX.Table
tbl.Name = &quot;Customers&quot;                     ' Create a table.
tbl.Columns.Append &quot;CustID&quot;, adInteger     ' Add two fields.
tbl.Columns.Append &quot;Name&quot;, adWVarChar, 50
cat.Tables.Append tbl                      ' Append the table to
                                           ' the collection.
</pre>
</td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F13ph06x.htm')"> <img src="images/F13ph06.JPG" width=404 height=328 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 13-6.</B> <i>This ADOX application shows all the objects in a Catalog and the relationships among them.</i><!--/caption-->
</p>

<A NAME="607"><h2>The Table Object</h2></A>
<p>The Table object is the most complex object in the ADOX hierarchy. It exposes four simple properties&#8212;<I>Name</I>, <I>Type</I>, <I>DateCreated</I>, and <I>DateModified</I>&#8212;and the Columns, Indexes, Keys, and Properties collections. These names are fairly self-explanatory, so I won't describe them in depth. The Table object doesn't expose any methods.</p>

<p>All the tables in the database are contained in the Tables collection. This collection exposes the usual <I>Item </I>and <I>Count </I>properties and the <I>Append</I>, <I>Delete</I>, and <I>Refresh </I>methods. For example, you can enumerate all the tables in the database and all the columns in each table by using the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As ADOX.Table, col As ADOX.Column
For Each tbl in cat.Tables
    Print &quot;TABLE &quot; &amp; tbl.Name
    Print &quot;Created on &quot; &amp; tbl.DateCreated
    Print &quot;Modified on &quot; &amp; tbl.DateModified
    Print &quot;Field List ------&quot;
    For Each col In tbl.Columns
        Print &quot;   &quot; &amp; col.Name
    Next
Next
</pre>
</td></tr></table></p>

<p>You can't append or delete tables using the OLE DB providers for Oracle and ODBC drivers.</p>

<A NAME="608"><h2>The Column Object</h2></A>
<p>The Column object and the corresponding Columns collection appear in several places in the ADOX hierarchy, namely, as a dependent object of the Table, Index, and Key objects. The Column object exposes several properties, even though not all of them make sense in all cases. When the Column object is a dependent of a Table object, you can read the <I>Name</I>, <I>Type</I>, <I>DefinedSize</I>, <I>NumericScale</I>, and <I>Precision </I>properties, which have the same meaning as the properties with the same names exposed by the ADODB.Field object. The Column object also supports the <I>Attributes </I>bit-field property, which can be 1-adColFixed or 2-adColNullable.</p>

<p>If the Column object is a dependent of a Key object, you can also set or retrieve the <I>RelatedColumn</I> property, which specifies the name of the related field in the related table. If the Column object is a dependent of an Index object, you can set the <I>SortOrder</I> property with the values 1-adSortAscending or 2-adSortDescending.</p>

<p>You can add a Column object to a table, an index, or a key by using the <I>Append </I>method of the respective Columns<I> </I>collections. This method takes as arguments the name of the column, its type, and (optionally) the value of the <I>DefinedSize </I>property of the Column object to be created:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add two fields to the Customers table.
Dim tbl As ADOX.Table
Set tbl = cat.Tables(&quot;Customers&quot;)
tbl.Columns.Append &quot;CustID&quot;, adInteger
tbl.Columns.Append &quot;Name&quot;, adVarChar, 255
</pre>
</td></tr></table></p>

<A NAME="609"><h2>The Index Object</h2></A>
<p>You can enumerate the indexes of a table through its Indexes collection. The Index object exposes a few properties whose names are self-explanatory: <I>Name</I>, <I>Clustered </I>(True if the index is clustered), <I>Unique </I>(True if the index is unique), and <I>PrimaryKey </I>(True if the index is the primary key for the table). The only property that requires a more detailed description is <I>IndexNulls</I>, which specifies whether records with Null values appear in the index. This property can take one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adIndexNullsAllow</td>
<td valign="top">Null values are accepted.</td>
</tr>
<tr>
<td valign="top">1-adIndexNullsDisallow</td>
<td valign="top">The index raises an error if a key column has a Null value.</td>
</tr>
<tr>
<td valign="top">2-adIndexNullsIgnore</td>
<td valign="top">Columns with Null values are ignored and are not added to the index.</td>
</tr>
<tr>
<td valign="top">4-adIndexNullsIgnoreAny</td>
<td valign="top">In a multicolumn index, records are not indexed if any of the index columns has a Null value.</td>
</tr>
</table></p>

<p>To add an index to a table, you create a stand-alone Index object, set its properties as required, add one or more items to its Columns collection, and finally add the Index to the Indexes collection of a Table object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim tbl As ADOX.Table, ndx As New ADOX.Index
' Create a new index.
ndx.Name = &quot;YearBorn_Author&quot;
ndx.Unique = True
' Append two columns to it.
ndx.Columns.Append &quot;Year Born&quot;
ndx.Columns(&quot;Year Born&quot;).SortOrder = adSortDescending
ndx.Columns.Append &quot;Author&quot;
' Add the index to the Authors table.
Set tbl = cat.Tables(&quot;Authors&quot;)
tbl.Indexes.Append ndx
</pre>
</td></tr></table></p>

<p>You can modify all the properties of an Index object only before the Index is appended to the Indexes collection of a Table object. When you add a field to the Columns collection of an Index object, an error occurs if the column doesn't already exist in the Table object or if the Table object hasn't already been added to the Tables collections of the Catalog object.</p>

<A NAME="610"><h2>The Key Object</h2></A>
<p>The Key object represents a key column in a table. You can enumerate the Keys collection of a Table object to determine its key columns, or you can use the collection's <I>Append </I>method to add new keys. When a key hasn't yet been appended to the collection, you can set its <I>Name </I>and <I>Type </I>properties. The <I>Type </I>property defines the type of the key and can be one of the following values: 1-adKeyPrimary (the primary key), 2-adKeyForeign (a foreign key), or 3-adKeyUnique (a unique key).</p>

<p>If the key is a foreign key, three other properties come into play. The <I>RelatedTable </I>property contains the name of the related table, and the <I>UpdateRule </I>and <I>DeleteRule </I>properties determine what happens to the foreign key if the record in the related table is updated or deleted, respectively. The <I>UpdateRule </I>and <I>DeleteRule </I>properties can contain one of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adRINone</td>
<td valign="top">No action is taken.</td>
</tr>
<tr>
<td valign="top">1-adRICascade</td>
<td valign="top">Changes are cascaded.</td>
</tr>
<tr>
<td valign="top">2-adRISetNull</td>
<td valign="top">The key is assigned a Null value.</td>
</tr>
<tr>
<td valign="top">3-adRISetDefault</td>
<td valign="top">The key is assigned its default value.</td>
</tr>
</table></p>     

<p>Each Key object exposes a Columns collection, which contains all the columns that make up the key. The following code shows how you can add a new key to a table:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a foreign key to the Orders table, and make the key point
' to the EmployeeID field of the Employees table.
Dim tbl As ADOX.Table, key As New ADOX.Key
Set tbl = cat.Tables(&quot;Orders&quot;)
' Create the key, and set its attributes.
key.Name = &quot;Employee&quot;
key.Type = adKeyForeign
key.RelatedTable = &quot;Employees&quot;
key.UpdateRule = adRICascade
' Add a column to the key, and set its RelatedColumn attribute.
key.Columns.Append tbl.Columns(&quot;EmployeeId&quot;)
key.Columns(&quot;EmployeeId&quot;).RelatedColumn = &quot;EmployeeId&quot;
' Append the key to the table's Keys collection.
tbl.Keys.Append key
</pre>
</td></tr></table></p>

<A NAME="611"><h2>The View and Procedure Objects</h2></A>
<p>The View object and the Procedure object are similar. They represent a view and a stored procedure in the database, respectively. They also expose the same set of four properties: <I>Name</I>, <I>DateCreated</I>, <I>DateModified</I>, and <I>Command</I>. The <I>Command </I>property provides the maximum flexibility to these objects, without making the ADOX hierarchy more complex than strictly required. In fact, the <I>Command </I>property returns a reference to an ADODB.Command object that can execute the view or the stored procedure, so you can determine the underlying SQL command as well as the name and the type of any parameters using this Command object's properties. The following code example demonstrates how you can extract this information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim cmd As ADODB.Command
Set cmd = cat.Views(&quot;All Titles&quot;).Command
MsgBox cmd.CommandText
</pre>
</td></tr></table></p>

<p>You also use the auxiliary Command object when you want to create a new view or a stored procedure, as shown in the following code snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;
Dim cn As New ADODB.Connection, cmd As New ADODB.Command
' Note the version number of the Jet OLE DB Provider.
cn.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=&quot; &amp; DBPATH
Set cmd.ActiveConnection = cn 
cmd.CommandText = &quot;Select * From Authors Where [Year Born] = [Year]&quot;
cmd.Parameters.Append cmd.CreateParameter(&quot;Year&quot;, adInteger, adParamInput)
' Open the Catalog, and create the new procedure. 
Set cat.ActiveConnection = cn
cat.Procedures.Append &quot;AuthorsByYear&quot;, cmd
</pre>
</td></tr></table></p>

<p>Views aren't supported by the OLE DB Provider for SQL Server. The providers for ODBC and Oracle support them, but you can only enumerate them&#8212;you can't add or delete individual View objects. None of these providers can create or delete Procedure objects.</p>

<A NAME="612"><h2>The Group and User Objects</h2></A>
<p>The Catalog object exposes the Groups and Users collections, which include the groups of users and the individual users that can access some or all of the objects in the database. These two objects are tightly connected to each other in that each User object exposes a Groups collection (all the groups the user belongs to), and each Group object exposes a Users collection (all the users that belong to that group).</p>

<p>You can retrieve the permissions assigned to a User object or a Group object using their <I>GetPermissions </I>method. Because this method returns a bit-field value, you must use the AND Boolean operator to understand which operations are allowed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Displays which permissions on the Customers table
' have been granted to the users in the Guests group.
Dim grp As ADOX.Group, permissions As Long
Set grp = cat.Groups(&quot;Guests&quot;)
permissions = grp.GetPermissions(&quot;Customers&quot;, adPermObjTable)
If permissions And adRightExecute Then Print &quot;Execute&quot;
If permissions And adRightRead Then Print &quot;Read&quot;
If permissions And adRightUpdate Then Print &quot;Update&quot;
If permissions And adRightInsert Then Print &quot;Insert&quot;
If permissions And adRightDelete Then Print &quot;Delete&quot;
If permissions And adRightReference Then Print &quot;Reference&quot;
If permissions And adRightCreate Then Print &quot;Create&quot;
If permissions And adRightWriteDesign Then Print &quot;Design&quot;
If permissions And adRightWithGrant Then Print &quot;Grant Permissions&quot;
</pre>
</td></tr></table></p>

<p>The <I>SetPermission</I> method lets you set, grant, deny, or revoke permissions on a given database object to a User or a Group:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Revoke the Guests group the permission to read the Customers table.
cat.Users(&quot;Guests&quot;).SetPermissions &quot;Customers&quot;, adPermObjTable, _
    adAccessRevoke, adRightRead
' Give the Managers group full permissions on the Employees table.
cat.Users(&quot;Managers&quot;).SetPermissions &quot;Employees&quot;, adPermObjTable, _
    adAccessSet, adRightFull
</pre>
</td></tr></table></p>

<p>The Groups and the Users collections aren't supported by the OLE DB Provider for SQL Server, Oracle, and ODBC drivers.</p>

<p>In this chapter, I described all the objects in the ADO hierarchy and their many properties, methods, and events. Although I've shown you how to use ADO to carry out some complex tasks, I haven't yet illustrated in practice how you can build complete database applications that exploit ADO's most advanced features. We'll focus on how to use these objects in <a href="ch14a.htm">Chapter 14</a>.</p>
</BODY>
</HTML>





