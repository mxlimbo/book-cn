<HTML>
<HEAD>
<TITLE>DriveListBox, DirListBox, and FileListBox Controls</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03g.htm", "ch03i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="97"><H1>DriveListBox, DirListBox, and FileListBox Controls</H1></A>
<p>In a nutshell, the DriveListBox control is a combobox-like control that's 
automatically filled with your drive's letters and volume labels. The DirListBox is a special list 
box that displays a directory tree. The FileListBox control is a special-purpose 
ListBox control that displays all the files in a given directory, optionally filtering them 
based on their names, extensions, and attributes.</P>
<P>These controls often work together on the same form; when the user selects 
a drive in a DriveListBox, the DirListBox control is updated to show the directory 
tree on that drive. When the user selects a path in the DirListBox control, the 
FileListBox control is filled with the list of files in that directory. These actions don't 
happen automatically, however&#8212;you must write code to get the job done.</P>
<P>After you place a DriveListBox and a DirListBox control on a form's surface, 
you usually don't have to set any of their properties; in fact, these controls don't 
expose any special property, not in the Properties window at least. The FileListBox 
control, on the other hand, exposes one property that you can set at design time&#8212;the 
<I>Pattern</I> property. This property indicates which files are to be shown in the list area: Its 
default value is <I>*.*</I> (all files), but you can enter whatever specification you need, 
and you can also enter multiple specifications using the semicolon as a separator. 
You can also set this property at run time, as in the following line of code:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>File1.Pattern = &quot;*.txt;*.doc;*.rtf&quot;
</pre>
</td></tr>
</table>
</P>


<p>After these preliminary steps, you're ready to set in motion the chain of 
events. When the user selects a new drive in the DriveListBox control, it fires a 
<I>Change</I> event and returns the drive letter (and volume label) in its 
<I>Drive</I> property. You trap this event 
and set the DirListBox control's <I>Path</I><B> 
</B>property to point to the root directory of the selected drive:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Drive1_Change()
    ' The Drive property also returns the volume label, so trim it.
    Dir1.Path = Left$(Drive1.Drive, 1) &amp; &quot;:\&quot;
End Sub
</pre>
</td></tr>
</table>
</P>


<p>When the user double-clicks on a directory name, the DirListBox control 
raises a <I>Change</I> event; you trap this event to set the FileListBox's 
<I>Path</I> property accordingly:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Dir1_Change()
    File1.Path = Dir1.Path
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Finally, when the user clicks on a file in the FileListBox control, a 
<I>Click</I> event is fired (as if it were a regular ListBox control), and you can query its 
<I>Filename</I> property to learn which file has been selected. Note how you build the complete path:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Filename = File1.Path 
If Right$(Filename, 1) &lt;&gt; &quot;\&quot; Then Filename = Filename &amp; &quot;\&quot;
Filename = Filename &amp; File1.Filename
</pre>
</td></tr>
</table>
</P>


<p>The demonstration program shown in Figure 3-16 builds on these controls 
to provide a functional Image Preview utility. It also supports dynamic resizing of 
the controls when the form they're on is resized.</P>

<p>The DirListBox and FileListBox controls support most of the properties 
typical of the control they derive from&#8212;the ListBox control&#8212;including the 
<I>ListCount</I> and the <I>ListIndex</I> properties and the 
<I>Scroll</I> event. The FileListBox control supports 
multiple selection; hence you can set its <I>MultiSelect 
</I>property in the Properties window and query the 
<I>SelCount</I> and <I>Selected </I>properties at run time.</P>

<p>
<A HREF="javascript:fullSize('F03ph16x.htm')"> <img src="images/F03ph16.JPG" width=404 height=250 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-16.</B> <i>A minimal but completely functional Image Preview utility that also supports bitmap tiling.</i><!--/caption-->
</p>

<p>The FileListBox control also exposes a few custom Boolean properties, 
<I>Normal</I>,<I> Archive</I>,<I> Hidden</I>,<I> 
ReadOnly</I>, and <I>System</I>, which permit you to decide whether 
files with these attributes should be listed. (By default, the control doesn't display 
hidden and system files.) This control also supports a couple of custom events, 
<I>PathChange</I> and <I>PatternChange</I>, that fire when the corresponding property is changed 
through code. In most cases, you don't have to worry about them, and I won't provide 
examples of their usage.</P>
<P>The problem with the DriveListBox, DirListBox and FileListBox controls is 
that they're somewhat outdated and aren't used by most commercial applications 
any longer. Moreover, these controls are known to work incorrectly when listing files 
on network servers and sometimes even on local disk drives, especially when long 
file and directory names are used. For this reason, I discourage you from using them 
and suggest instead that you use the Common Dialog controls for your FileOpen 
and FileSave dialog boxes. But if you need to ask the user for the name of a 
directory rather than a file, you're out of luck because&#8212;while Windows does include such 
a system dialog box, named BrowseForFolders dialog&#8212;Visual Basic still doesn't 
offer a way to display it (unless you do some advanced API programming). 
Fortunately, Visual Basic 6 comes with a new control&#8212;the ImageCombo control&#8212;that lets 
you simulate the appearance of the DriveListBox control. It also offers you a 
powerful library&#8212;the FileSystemObject library&#8212;that completely frees you from using 
these three controls, if only as hidden controls that you use just for quickly retrieving 
information on the file system. For more information about the FileSystemObject 
library and the ImageCombo control, see Chapters <a href="ch05a.htm">5</a> and <a href="ch10a.htm">10</a>, respectively. Command 
dialogs are covered in <a href="ch12a.htm">Chapter 12</a>.</P>

</BODY>
</HTML>





