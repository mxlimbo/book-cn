<HTML>
<HEAD>
<TITLE>Control Arrays</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03j.htm", "ch04a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="106"><h1>Control Arrays</h1></A>

<p>So far, we've dealt with individual controls, each one with a distinctive name and 
a distinct set of properties and events. In addition to these, Visual Basic embodies 
the concept of <I>control arrays</I>, in which multiple controls share the same set of 
event procedures even though each individual element in the array can have different 
values for its properties. A control array can be created only at design time, and at the 
very minimum at least one control must belong to it. You create a control array 
following one of these three methods:</p>
<UL>

<p><li> You create a control and then assign a numeric, non-negative value to 
its <I>Index</I> property; you have thus created a control array with just one element.</li></p>

<p><li> You create two controls of the same class and assign them an 
identical <I>Name</I> property. Visual Basic shows a dialog box warning you that 
there's already a control with that name and asks whether you want to create 
a control array. Click on the Yes button.</li></p>

<p><li> You select a control on the form, press Ctrl+C to copy it to the 
clipboard, and then press Ctrl+V to paste a new instance of the control, which has the same <I>Name </I>property as the original one. Visual Basic shows the warning mentioned in the previous bullet.</li></p>
</ul>

<p>Control arrays are one of the most interesting features of the Visual 
Basic environment, and they add a lot of flexibility to your programs:</p>

<ul>
<p><li> Controls that belong to the same control array share the same set of event procedures; this often dramatically reduces the amount of code you have to write to respond to a user's actions.</li></p>

<p><li> You can dynamically add new elements to a control array at run time; 
in other words, you can effectively create new controls that didn't exist 
at design time.</li></p>

<p><li> Elements of control arrays consume fewer resources than regular 
controls and tend to produce smaller executables. Besides, Visual Basic forms 
can host up to 256 different control <I>names,</I> but a control array counts as 
one against this number. In other words, control arrays let you 
effectively overcome this limit.</li></p>
</UL>
 
<p>The importance of using control arrays as a means of dynamically 
creating new controls at run time is somewhat reduced in Visual Basic 6, which has 
introduced a new and more powerful capability. Read about dynamic control 
creation in <a href="ch09a.htm">Chapter 9</a>.</p>
<p>Don't let the term <I>array</I> lead you to think 
<I>control array</I> is related to <I>VBA 
arrays</I>; they're completely different objects. Control arrays can only be one-dimensional. 
They don't need to be dimensioned: Each control you add automatically extends the 
array. The <I>Index</I> property identifies the position of each control in the control array 
it belongs to, but it's possible for a control array to have holes in the index 
sequence. The lowest possible value for the 
<I>Index</I> property is 0. You reference a control 
belonging to a control array as you would reference a standard array item:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Text1(0).Text = &quot;&quot;
</pre>
</td></tr>
</table>
</P>


<A NAME="107"><h2>Sharing Event Procedures</h2></A>

<p>Event procedures related to items in a control array are easily recognizable 
because they have an extra <I>Index</I> parameter, which precedes all other parameters. This 
extra parameter receives the index of the element that's raising the event, as you can 
see in this example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_KeyPress(Index As Integer, KeyAscii As Integer)
    MsgBox &quot;A key has been pressed on Text1(&quot; &amp; Index &amp; &quot;) control&quot;
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The fact that multiple controls can share the same set of event procedures 
is often in itself a good reason to create a control array. For example, say that you 
want to change the background color of each of your TextBox controls to yellow when 
it receives the input focus and restore its background color to white when the user 
clicks on another field:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_GotFocus(Index As Integer)
    Text1(Index).BackColor = vbYellow
End Sub
Private Sub Text1_LostFocus(Index As Integer)
    Text1(Index).BackColor = vbWhite
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Control arrays are especially useful with groups of OptionButton controls 
because you can remember which element in the group has been activated by 
adding one line of code to their shared 
<I>Click</I> event. This saves code when the program 
needs to determine which button is the active one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A module-level variable
Dim optFrequencyIndex As Integer

Private Sub optFrequency_Click(Index As Integer)
    ' Remember the last button selected.
    optFrequencyIndex = Index
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="108"><h2>Creating Controls at Run Time</h2></A>

<p>Once you have created a control array at design time, even with just one item, 
it's straightforward to create new items at run time using the 
<I>Load</I> command:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Suppose you created Text(0) at design time.
Load Text1(1)
' Move the new control where you need it, and resize it.
Text1(1).Move 1200, 2000, 800, 350
' Set other properties as required.
Text1(1).MaxLength = 10
...
' Finally make it visible.
Text1(1).Visible = True
</pre>
</td></tr>
</table>
</P>


<p>The <I>Load</I> command creates the new control with exactly the same set of 
properties that the first item of the 
array&#8212;<I>Text1(0</I>) in the preceding example&#8212;had at 
design time, including the position on the form. The only exception to this rule is that the 
<I>Visible</I> property for a control created in this way is always False because Visual Basic 
correctly expects that you want to move the new control to a different position before 
making it visible. Once you have dynamically added a control, it belongs to the control 
array and can be treated exactly like those controls created at design time.</p>
<p>You can remove controls from a control array using the 
<I>Unload</I> command, as in the following line of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Unload Text1(1)
</pre>
</td></tr>
</table>
</P>


<p>You can unload only controls that were added dynamically at run time; if 
you use the <I>Unload</I> command on an item of the array that had been created at 
design time, an error occurs. If you unload an item and then reload an item with the 
same index, you're actually creating a brand-new instance, which inherits its 
properties, size, and position from the first element in the array, as I explained previously.</p>

<A NAME="109"><h2>Iterating on the Items of a Control Array</h2></A>

<p>Control arrays often let you save many lines of code because you can execute 
the same statement, or group of statements, for every control in the array without 
having to duplicate the code for each distinct control. For example, you can clear 
the contents of all the items in an array of TextBox controls as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>For i = txtFields.LBound To txtFields.UBound
    txtFields(i).Text = &quot;&quot;
Next
</pre>
</td></tr>
</table>
</P>


<p>Here you're using the <I>LBound </I>and 
<I>UBound</I> methods exposed by the 
<I>control array object,</I> which is an intermediate object used by Visual Basic to gather all 
the controls in the array. In general, you shouldn't use this approach to iterate over 
all the items in the array because if the array has holes in the Index sequence an 
error will be raised. A better way to loop over all the items of a control array is using 
the <I>For Each</I> statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim txt As TextBox
For Each txt In txtFields
    txt.Text = &quot;&quot;
Next
</pre>
</td></tr>
</table>
</P>


<p>A third method exposed by the control array object, 
<I>Count</I>, returns the number of elements it contains. It can be useful on several occasions (for example, 
when removing all the controls that were added dynamically at run time):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This code assumes that txtField(0) is the only control that was
' created at design time (you can't unload it at run time).
Do While txtFields.Count &gt; 1
    Unload txtFields(txtFields.UBound)
Loop
</pre>
</td></tr>
</table>
</P>


<A NAME="110"><h2>Arrays of Menu Items</h2></A>

<p>Control arrays are especially useful with menus because arrays offer a solution to 
the proliferation of menu <I>Click</I> events and, above all, permit you to create new 
menus at run time. An array of menu controls is conceptually similar to a regular control 
array, only you set the <I>Index</I> property to a numeric (non-negative) value in the Menu 
Editor instead of in the Properties window.</p>
<p>There are some limitations, though: All the items in an array of menu 
controls must be adjacent and must belong to the same menu level, and their 
<I>Index</I> properties must be in ascending order (even though holes in the sequence are 
allowed). This set of requirements severely hinders your ability to create new menu items 
at run time. In fact, you can create new menu items in well-defined positions of 
your menu hierarchy&#8212;namely, where you put a menu item with a nonzero 
<I>Index</I> value&#8212;but you can't create new submenus or new top-level menus.</p>

<p>Now that you have a thorough understanding of how Visual Basic's forms 
and controls work, you're ready to dive into the subtleties of the Visual Basic for 
Applications (VBA) language. The <a href="ch04a.htm">next chapter</a> is devoted to the many data types you can 
use in your programs. In <a href="ch05a.htm">Chapter 5</a>, I illustrate the many VBA functions and commands.</p>
</BODY>
</HTML>





