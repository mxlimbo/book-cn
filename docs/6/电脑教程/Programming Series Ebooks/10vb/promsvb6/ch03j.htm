<HTML>
<HEAD>
<TITLE>Menus</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03i.htm", "ch03k.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="103"><h1>Menus</h1></A>

<p>Menus are intrinsic controls, and as such they deserve a place in this chapter. On 
the other hand, menus behave differently from other controls. For example, you don't 
drop menu items on a form from the Toolbox; rather, you design them in the Menu 
Editor window, as you can see in Figure 3-18. You invoke this tool from the Menu Editor button on the standard toolbar or by pressing the Ctrl+E 
shortcut key. There's also a Menu Editor<I> </I>command in the Tools menu, but you 
probably won't use it often.</P>
<P>Basically, each menu item has a <I>Caption</I><B> 
</B>property (possibly with an embedded &amp; character to create an access key) and a 
<I>Name</I>. Each item also exposes three Boolean properties, 
<I>Enabled</I>, <I>Visible</I>, and <I>Checked</I>, which you can set both at 
design time and at run time. At design time, you can assign the menu item a shortcut 
key so that your end users don't have to go through the menu system each time they 
want to execute a frequent command. (Do you <I>really 
</I>like pulling down the Edit menu any time you need to clear some text or copy it to the Clipboard?) The assigned 
shortcut key can't be queried at run time, much less modified. Menu items support a few 
other properties, but I won't describe them until <a href="ch09a.htm">Chapter 9</a>.</P>
<P>Building a menu is a simple, albeit more tedious, job: You enter the item's 
<I>Caption</I> and <I>Name</I>, set other properties (or accept the default values for those 
properties), and press Enter to move to the next item. When you want to create a 
submenu, you press the Right Arrow button (or the Alt+R hot key). When you want to 
return to work on top-level menus&#8212;those items that appear in the menu bar when 
the application runs&#8212;you click the Left Arrow button (or press Alt+L). You can 
move items up and down in the hierarchy by clicking the corresponding buttons or the 
hot keys Alt+U and Alt+B, respectively.</P>
<P>You can create up to five levels of submenus (six including the menu bar), 
which are too many even for the most patient user. If you find yourself working with 
more than three menu levels, think about trashing your specifications and redesigning 
your application from the ground up.</P>

<p>You can insert a separator bar using the hypen (-) character for the 
<I>Caption</I> property. But even these separator items must be assigned a unique value for 
the <I>Name </I>property, which is a real nuisance. If you forget to enter a menu item's 
<I>Name</I>, the Menu Editor complains when you decide to close it. The convention used in 
this book is that all menu names begin with the three letters 
<I>mnu</I>.</P>

<p>
<img src="images/F03ph18.GIF" width=366 height=366 border="0">
<p>
<!--caption--><B>Figure 3-18.</B> <i>The Menu Editor window.</i><!--/caption-->


<P>One of the most annoying defects of the Menu Editor tool is that it doesn't 
permit you to reuse the menus you have already written in other applications. It would 
be great if you could open another instance of the Visual Basic IDE, copy one or 
more menu items to the clipboard, and then paste those menu items in the application 
under development. You can do that with controls and with pieces of code, but not 
with menus! The best thing you can do in Visual Basic is load the FRM file using an 
editor such as Notepad, find the portion in the file that corresponds to the menu 
you're interested in, load the FRM file you're developing (still in Notepad), and paste 
the code there. This isn't the easiest operation, and it's also moderately dangerous: If 
you paste the menu definition in the wrong place, you could make your FRM form 
completely unreadable. Therefore, always remember to make backup copies of your 
forms before trying this operation.</P>

<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<P>Better news is that you <I>can </I>add a finished menu to a form in your 
application with just a few mouse clicks. All you have to do is activate the Add-In 
Manager from the Add-Ins menu, choose the <I>VB 6 Template 
Manager</I>, and tick the Loaded/Unloaded check box. After you do that, you'll find three new commands in the 
Tools menu: Add Code Snippet, Add Menu, and Add Control Set. Visual Basic 6 comes 
with a few menu templates, as you can see in Figure 3-19, that you might find useful 
as a starting point for building your own templates. To create your menu templates, 
you only have to create a form with the complete menu and all the related code and 
then store this form in the \Templates\Menus directory. (The complete path, 
typically c:\Program Files\Microsoft Visual Studio\VB98\Template, can be found in the 
Environment tab of the Options dialog box on the Tools menu. The Template 
Manager was already available with Visual Basic 5, but it had to be installed manually 
and relatively few programmers were aware of its existence.</P>

<p>
<A HREF="javascript:fullSize('F03ph19x.htm')"> <img src="images/F03ph19.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-19.</B> <I>The Template Manager in action.</I><!--/caption-->
</p>
<A NAME="104"><h2>Accessing Menus at Run Time</h2></A>

<p>Menu controls expose only one event, 
<I>Click</I>. As you expect, this event fires when the user clicks on the menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuFileExit_Click()
    Unload Me
End Sub
</pre>
</td></tr>
</table>
</P>


<p>You can manipulate menu items at run time through their 
<I>Checked</I>, <I>Visible</I>, and <I>Enabled 
</I>properties. For example, you can easily implement a menu item that 
acts as a switch and displays or hides a status bar:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuViewStatus_Click()
    ' First, add or remove the check sign.
    mnuViewStatus.Checked = Not mnuViewStatus.Checked
    ' Then make the status bar visible or not.
    staStatusBar.Visible = mnuViewStatus.Checked
End Sub
</pre>
</td></tr>
</table>
</P>


<p>While menu items can be responsible for their own 
<I>Checked</I> status, you usually set their 
<I>Visible</I> and <I>Enabled</I> properties in another region of the code. You 
make a menu item invisible or disabled when you want to make the corresponding 
command unavailable to the user. You can choose from two different strategies to 
achieve this goal: You can set the menu properties as soon as something happens that 
affects that menu command, or you can set them one instant before the menu is 
dropped down. Let me explain these strategies with two examples.</P>

<p>Let's say that the Save command from the File menu should look disabled if 
your application has loaded a read-only file. In this case, the most obvious place in 
code to set the menu <I>Enabled</I> property to False is in the procedure that loads the file, 
as shown in the code below.</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub LoadDataFile(filename As String)
    ' Load the file in the program.
    ' ... (code omitted)...
    ' Enable or disable the menu enabled state according to the file's
    ' read-only attribute (no need for an If...Else block).
    mnuFileSave.Enabled = (GetAttr(filename) And vbReadOnly)
End Sub
</pre>
</td></tr>
</table>
</P>


<p>This solution makes sense because the menu state doesn't change often. 
By comparison, the state of most of the commands in a typical Edit menu (Copy, 
Cut, Clear, Undo, and so on) depends on whether any text is currently selected in the 
active control. In this case, changing the menu state any time a condition changes 
(because the user selects or deselects text in the active control, for example) is a waste of 
time, and it also requires a lot of code. Therefore, it's preferable to set the state of 
those menu commands in the parent menu's 
<I>Click</I> event just before displaying the menu:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub mnuEdit_Click()
    ' The user has clicked on the Edit menu,
    ' but the menu hasn't dropped down yet.
    On Error Resume Next
    ' Error handling is necessary because we don't know if 
    ' the Active control actually supports these properties.
    mnuEditCopy.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
    mnuEditCut.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
    mnuEditClear.Enabled = (ActiveControl.SelText &lt;&gt; &quot;&quot;)
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="105"><h2>Pop-Up Menus</h2></A>

<p>Visual Basic also supports pop-up menus, those context-sensitive menus that 
most commercial applications show when you right-click on an user interface object. 
In Visual Basic, you can display a pop-up menu by calling the form's 
<I>PopupMenu</I> method, typically from within the 
<I>MouseDown</I> event procedure of the object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub List1_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    If Button And vbRightButton Then
        ' User right-clicked the list box.
        PopupMenu mnuListPopup
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<p>The argument you pass to the <I>PopupMenu</I> method is the name of a menu 
that you have defined using the Menu Editor. This might be either a submenu that 
you can reach using the regular menu structure or a submenu that's intended to work 
only as a pop-up menu. In the latter case, you should create it as a top-level menu in 
the Menu Editor and then set its <I>Visible </I>attribute to False. If your program includes 
many pop-up menus, you might find it convenient to add one invisible top-level entry 
and then add all the pop-up menus below it. (In this case, you don't need to make 
each individual item invisible.) The complete syntax of the 
<I>PopupMenu</I> method is quite complex:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PopupMenu Menu, [Flags], [X], [Y], [DefaultMenu]
</pre>
</td></tr>
</table>
</P>


<p>By default, pop-up menus appear left aligned on the mouse cursor, and 
even if you use a right-click to invoke the menu you can select a command only with 
the left button. You can change these defaults using the 
<I>Flags </I>argument. The following constants control the alignment: 0-vbPopupMenuLeftAlign (default), 
4-vbPopupMenuCenterAlign, and 8-vbPopupMenuRightAlign. The following constants 
determine which buttons are active during menu operations: 0-vbPopupMenuLeftButton 
(default) and 2-vbPopupMenuRightButton. For example, I always use the latter because I 
find it natural to select a command with the right button since it's already pressed 
when the menu appears:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>PopupMenu mnuListPopup, vbPopupMenuRightButton
</pre>
</td></tr>
</table>
</P>


<p>The <I>x </I>and <I>y </I>arguments, if specified, make the menu appear in a 
particular position on the form, rather than at mouse coordinates. The last optional 
argument is the name of the menu that's the default item for the pop-up menu. This item 
will be displayed in boldface. This argument has only a visual effect; 
If you want to offer a default menu item, you must write code in the 
<I>MouseDown</I> event procedure to trap double-clicks with the right 
button.</P>


<DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
You can take advantage of the 
<I>x </I>and <I>y</I> arguments in a <I>PopupMenu 
</I>method to make your program more Windows compliant, and show your pop-up 
menus over the control that has the focus when the user presses the Application 
key (the key beside the Windows key on the right side of a typical extended 
keyboard, such as the Microsoft Natural Keyboard). But remember that Visual  Basic 
doesn't define any key-code constant for this key. Here's how you must proceed:
<P><TABLE><tr><td>
<PRE>
Private Sub List1_KeyDown(KeyCode As Integer, Shift As Integer)
    If KeyCode = 93 Then
        ' The system pop-up menu key has been pressed.
        ' Show a pop-up menu near the list box's center.
        PopupMenu mnuListPopup, , List1.Left + _
            List1.Width / 2, List1.Top + List1.Height / 2
    End If
End Sub
</PRE></td></tr></TABLE></P>
</blockquote></div></P>



<p>Visual Basic's implementation of pop-up menus has a serious flaw. All 
Visual Basic TextBox controls react to right-clicks by showing the standard Edit pop-up 
menu (with the usual commands, such as Undo, Copy, Cut, and so on). The problem is 
that if you invoke a <I>PopupMenu</I> method from within the TextBox control's 
<I>MouseDown</I> event, your custom pop-up menu will be displayed only after the standard one, 
which is obviously undesirable. You can solve it only by resorting to the unorthodox 
and undocumented technique shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Text1_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    If Button And vbRightButton Then
        Text1.Enabled = False
        PopupMenu mnuMyPopup
        Text1.Enabled = True
    End If
End Sub
</pre>
</td></tr>
</table>
</P>


<p>This technique appeared for the first time in a Tech Tips supplement of 
the <I>Visual Basic Programmer's Journal</I>. VBPJ publishes two such supplements each 
year, in February and August, and they're always packed with useful tricks for Visual 
Basic developers of any level of expertise. You can download past issues from their <a href="http://www.dex.com" target="_window2"><I>http://www.dex.com</I></a> Web site.</p>

</BODY>
</HTML>





