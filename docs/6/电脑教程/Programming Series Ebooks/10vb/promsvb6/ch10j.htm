<HTML>
<HEAD>
<TITLE>The ImageCombo Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10i.htm", "ch11a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="478"><h1>The ImageCombo Control</h1></A>
<P>
<img src="images/new.jpg" width=102 height=87 border="0">
</P>

<p>The ImageCombo control is new to Visual Basic and is one of the few 
controls introduced in Visual Basic 6. In a nutshell, the ImageCombo control is a combo 
box that supports images and a different indentation for each individual item. This is 
the same control that Windows uses internally for its file common dialog boxes.</P>

<P>From the programmer's point of view, the main difference between 
the ImageCombo control and the standard ComboBox control is that the 
ImageCombo control uses an object-oriented architecture and exposes the ComboItems 
collection, which in turn contains ComboItem objects.</P>

<A NAME="479"><h2>Setting Design-Time Properties</h2></A>

<p>An ImageCombo control is so similar to a standard ComboBox control that it 
makes sense to describe only the few differences between them. At design time, you 
need to set only two properties. The <I>ImageList 
</I>property is a reference to the ImageList control that contains the images to be displayed beside each ComboItem object. 
The <I>Indentation </I>property sets the default indentation for all ComboItem objects, 
expressed as a number of indentation units, where each unit is 10 pixels. Individual 
ComboItem objects can provide a different value for this property, thus overwriting the 
default value set in the Properties window at design time or through code at run time.</P>

<P>Like, ComboBox controls, ImageCombo controls can be bound to a data 
source and therefore support all the usual 
<I>Data</I>xxxx properties.</P>

<A NAME="480"><h2>Run-Time Operations</h2></A>

<p>The ImageCombo control exposes many of the properties supported by the 
regular ComboBox control, including 
<I>ForeColor</I>, <I>BackColor</I>, <I>Text</I>, 
<I>SelText</I>, <I>SelStart</I>, <I>SelLength</I>, and 
<I>Locked. </I>The ImageCombo control doesn't expose any events other than the 
ones supported by ComboBox.</P>

<P>You see the difference between an ImageCombo control and a ComboBox 
control when it's time to add items to the control. The ImageCombo control 
doesn't support the <I>AddItem </I>method. Instead, you add items using the 
<I>Add</I> method of the ComboItems collection, which has the following syntax:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add([Index],[Key],[Text],[Image],[SelImage],[Indentation]) As ComboItem
</pre>
</td></tr>
</table>
</p>


<p><I>Index </I>determines where the new ComboItem is inserted, 
<I>Key</I> is its key in the collection, 
<I>Text</I> is the string that appears in the control, 
<I>Image</I> is the associated image (an index or a key in the companion ImageList control), 
<I>SelImage</I> is the image displayed when the item is selected, and 
<I>Indentation</I> is the indentation level. (Each unit is 10 pixels.) This syntax allows you to add a new ComboItem and set all 
its properties in one operation. Here's a routine that loads all the drive letters and 
volume labels in an ImageCombo control, as you can see in Figure 10-26:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub LoadDrivesIntoImageCombo(ImgCombo As ImageCombo)
    Dim fso As New Scripting.FileSystemObject, dr As Scripting.Drive
    Dim drLabel As String, drImage As String
    ' Assume that the ImageCombo control is linked to an ImageList
    ' control that includes three icons with the following key names.
    ImgCombo.ComboItems.Add , , &quot;My Computer&quot;, &quot;MyComputer&quot;
    For Each dr In fso.Drives
        ' Use a different image for each type of drive.
        Select Case dr.DriveType
            Case Removable:  drImage = &quot;FloppyDrive&quot;
            Case CDRom:      drImage = &quot;CDDrive&quot;
            Case Else:       drImage = &quot;HardDrive&quot;
        End Select
        ' Retrieve the letter and (if possible) the volume label.
        drLabel = dr.DriveLetter &amp; &quot;: &quot;
        If dr.IsReady Then
            If Len(dr.VolumeName) Then drLabel = drLabel &amp; &quot;[&quot; &amp; _
                dr.VolumeName &amp; &quot;]&quot;
        End If
        ' Add an indented item to the combo.
        ImgCombo.ComboItems.Add , dr.DriveLetter, drLabel, drImage, , 2
    Next
    ' Select the current drive.
    Set ImgCombo.SelectedItem = ImgCombo.ComboItems(Left$(CurDir$, 1))
 End Sub
</pre>
</td></tr>
</table>
</p>


<p>
<img src="images/F10ph26.GIF" width=313 height=312 border="0">
<p>
<!--caption--><B>Figure 10-26.</B> <i>The ImageCombo demonstration program shows information about all the drives in the system.</i><!--/caption-->


<P>You can choose from two ways to select a ComboItem object through code: 
You can use the <I>SelectedItem </I>property of the ImageCombo control (as shown in the 
preceding routine), or you can set the <I>Selected 
</I>property of an individual ComboItem object:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select the current drive (alternative method).
Set ImgCombo.ComboItems(Left$(CurDir$, 1)).Selected = True
</pre>
</td></tr>
</table>
</p>


<p>An interesting effect of dealing with individual ComboItem objects is that 
you can modify their <I>Text </I>properties without having to remove and add them again, 
as you would do with a standard ComboBox:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change the text of the first item.
ImgCombo.ComboItems(1).Text = &quot;My Computer&quot;
</pre>
</td></tr>
</table>
</p>


<p>You can delete an individual ComboItem using the 
<I>Remove</I> method of the ComboItems collection, and you can delete all the items using the collection's 
<I>Clear </I>method.</P>

<P>The ImageCombo control exposes only one custom method, 
<I>GetFirstVisible</I>, which returns a reference to the first ComboItem object in the list portion of 
the control. There isn't much that you can do with this method, however, because 
you have no way to set the first visible item and therefore you can't programmatically 
scroll the contents of the list area.</P>

<p>This concludes the description of all the controls embedded in the file 
MsComCtl.ocx. In the <a href="ch11a.htm">next chapter</a>, I'll describe all the other Windows common controls 
provided with Visual Basic 6.</P>
</BODY>
</HTML>





