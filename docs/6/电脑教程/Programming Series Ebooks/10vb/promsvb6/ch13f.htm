<HTML>
<HEAD>
<TITLE>The Parameter Object</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13e.htm", "ch13g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="600"><h1>The Parameter Object</h1></A>
<p>A Parameter object represents a parameter in the parameterized command or stored procedure on which a Command object is based. In theory, a provider might not support parameterized commands, but in practice, all major providers do. Parameter objects can represent input values for a command or a query or output values or return values from a stored procedure. All the Parameter objects related to a Command object are contained in the Command's Parameters collection.</p>

<p>ADO is really smart at dealing with the Parameters collection. It automatically builds the collection when you reference the <I>Parameters </I>property of a Command object. But ADO also gives you the capability to create the collection yourself through code, which is something that isn't possible in DAO or RDO. Usually you can get better performance if you create the Parameters collection yourself because you save ADO a round-trip to the server just to determine the names and the types of all the parameters. On the other hand, if you want ADO to retrieve all the parameters' names and attributes, you only have to perform the <I>Refresh </I>method of the Parameters collection of a Command object, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cmd.Parameters.Refresh
</pre>
</td></tr>
</table></p>

<p>Calling the <I>Refresh </I>method is optional, however, because if you access the Parameters collection without having created its elements yourself, ADO will refresh the collection automatically.</p>

<A NAME="601"><h2>Properties</h2></A>
<p>The Parameter object exposes nine properties. Most of them are similar to properties with the same names as those exposed by the Field object. Because of the similarities, I won't describe these properties in depth here. For example, each Parameter object has a <I>Name</I>, <I>Type</I>, <I>Precision</I>, and <I>NumericScale</I> property, exactly as Field objects have. Table 13-5 lists all the possible values for the <I>Type </I>property. (Notice that Parameter objects support a few types that Field objects don't support.)</p>

<p>The Parameter object also supports the <I>Value </I>property. This property is also the default for this object, so you can omit it if you want to:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>cmd.Parameters(&quot;StartHireDate&quot;) = #1/1/1994#
</pre>
</td></tr>
</table></p>

<p>The <I>Direction </I>property specifies whether the Parameter object represents an input parameter, an output parameter, or the return value from a stored procedure. It can be one of the following enumerated constants:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">0-adParamUnknown</td>
<td valign="top">Unknown direction</td>
</tr>
<tr>
<td valign="top">1-adParamInput</td>
<td valign="top">An input parameter (the default)</td>
</tr>
<tr>
<td valign="top">2-adParamOutput</td>
<td valign="top">An output parameter</td>
</tr>
<tr>
<td valign="top">3-adParamInputOutput</td>
<td valign="top">An input/output parameter</td>
</tr>
<tr>
<td valign="top">4-adParamReturnValue</td>
<td valign="top">A return value from a stored procedure</td>
</tr>
</table></p>

<p>This property is read/write, which is useful when you're working with a provider that can't determine the direction of the parameters in a stored procedure.</p>

<p>The <I>Attributes </I>property specifies a few characteristics of the Parameter object. This is a bit-field value that can be the sum of the following values:</p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">16-adParamSigned</td>
<td valign="top">The parameter accepts signed values.</td>
</tr>
<tr>
<td valign="top">64-adParamNullable</td>
<td valign="top">The parameter accepts Null values.</td>
</tr>
<tr>
<td valign="top">128-adParamLong</td>
<td valign="top">The parameter accepts long binary data.</td>
</tr>
</table></p>

<p>The <I>Size </I>property sets and returns the maximum size of the value of a Parameter object. If you're creating a Parameter object of a variable-length data type (for example, a string type), you must set this property before appending the parameter to the Parameters collection; if you don't, an error occurs. If you've already appended the Parameter object to the Parameters collection and you later change its type to a variable-length data type, you must set the <I>Size </I>property before invoking the <I>Execute </I>method.</p>

<p>The <I>Size</I> property is also useful if you let the provider automatically populate the Parameters collection. When the collection includes one or more variable-length items, ADO can allocate memory for those parameters based on their maximum potential dimension, which might cause an error later. You can prevent such errors by explicitly setting the <I>Size </I>property to the correct value before executing the command.</p>

<A NAME="602"><h2>Methods</h2></A>
<p>The only method the Parameter object supports is <I>AppendChunk</I>. This method works exactly as it does in the Field object, so I won't repeat its description here. You can test the adParamLong bit of the Parameter object's <I>Attributes </I>property to test whether the parameter supports this method.</p>

<A NAME="603"><h2>The Parameters Collection</h2></A>
<p>Each Command object exposes a <I>Parameters </I>property that returns a reference to a Parameters collection. As I mentioned earlier in the chapter, you can let ADO automatically populate this collection or you can save ADO some work by creating Parameter objects and adding them manually to the collection. You add objects manually with the <I>CreateParameter </I>method of the Command object in conjunction with the <I>Append </I>method of the Parameters collection, as this code demonstrates:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DBPATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\NWind.mdb&quot;
Dim cmd As New ADODB.Command, rs As New ADODB.Recordset
cmd.CommandText = &quot;Select * From Employees Where BirthDate &gt; ? &quot; _
    &amp; &quot;AND HireDate &gt; ?&quot;
cmd.ActiveConnection = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; _
    &amp; &quot;Data Source= &quot; &amp; DBPATH
' You can use a temporary Parameter variable.
Dim param As ADODB.Parameter
Set param = cmd.CreateParameter(&quot;BirthDate&quot;, adDate, , , #1/1/1960#)
cmd.Parameters.Append param
' Or you can do everything in one operation. 
cmd.Parameters.Append cmd.CreateParameter(&quot;HireDate&quot;, adDate, , , _
    #1/1/1993#)
Set rs = cmd.Execute(, , adCmdText)
</pre>
</td></tr>
</table></p>

<p>Parameterized queries and commands are especially useful when you're going to perform the operation more than once. In all subsequent operations, you need to modify only the values of the parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can reference a parameter by its index in the collection.
cmd.Parameters(0) = #1/1/1920#
' But you deliver more readable code if you reference it by its name.
cmd.Parameters(&quot;HireDate&quot;) = #1/1/1920#
Set rs = cmd.Execute()
</pre>
</td></tr>
</table></p>

<p>You can use the <I>Delete </I>method of the Parameters collection to remove items from it, and you can use its <I>Count </I>property to determine how many elements it contains. When the Command object refers to a stored procedure that has a return value, <I>Parameters(0) </I>always refers to the return value.</p>

</BODY>
</HTML>





