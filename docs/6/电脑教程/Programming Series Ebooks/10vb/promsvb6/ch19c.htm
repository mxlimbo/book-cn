<HTML>
<HEAD>
<TITLE>An Introduction to Dynamic HTML </TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19b.htm", "ch19d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="921"><h1>An Introduction to Dynamic HTML </h1></A>

<p>Entire books have been devoted to Dynamic HTML (DHTML), and I strongly 
advise you to get one of them if you're seriously interested in producing DHTML 
programs. As I've done with plain HTML, in this chapter I can only outline the most 
important features of this language.</p>

<p>In theory, Dynamic HTML should be considered as HTML 4.0, that is, the 
next version of HTML. In practice, Microsoft Internet Explorer and Netscape 
Navigator currently support different versions of DHTML, so it's difficult to write DHTML 
pages that work equally well with both browsers. From our particular point of view as 
Visual Basic programmers, however, this issue isn't really relevant because DHTML 
applications actually require Internet Explorer 4.01 Service Pack 1 or later, and they 
can't run inside another browser. The problem isn't the DHTML language in itself, but 
the fact that only the most recent versions of the Microsoft browser expose the 
DHTML events to the outside, whereas a DLL written in Visual Basic 6 can trap them 
and react accordingly.</p>

<A NAME="922"><h2>Main Features</h2></A>

<p>Dynamic HTML isn't radically different from regular HTML. All the old tags are 
still supported, and scripts inside the page can exploit an expanded object model 
that's compatible with the previous version, so they'll continue to work as before. In a 
sense and at the risk of oversimplifying, we can say that the real difference between 
regular HTML and Dynamic HTML is in how the page is interpreted by the browser 
when the page is being downloaded from the remote server.</p>

<p>Among the new features of DHTML, the following ones deserve special mention:</p>

<UL>
<p><li> Dynamic redrawing of the page, which means that you can change 
the style, the color or any other attribute of an element of the 
page&#8212;including its visibility&#8212;and the page automatically redraws itself without the 
user needing to download it again. This means faster response time, 
less workload on the server, and above all really dynamic behavior.</li></p>

 
<p><li>     The DHTML object model gives you access to any element of the 
page, including tags, images, paragraphs, down to the individual word or 
character if necessary. You can therefore manipulate the appearance of 
the page in its tiniest details.</li></p>

<p><li>    Styles and style sheets have been expanded with more attributes, and 
so they give you more control over the page elements.</li></p>

<p><li>     You can enforce absolute position of elements, which means that, if 
necessary, you can prepare the layout of your pages with the highest 
accuracy. Moreover, each element has a 
<I>z-index</I> attribute (similar to Visual Basic's 
<I>ZOrder</I> property) that can be used to simulate 3-D 
appearance. Because elements' coordinates can be dynamically modified, it's easy 
to create animation effects using simple scripts.</li></p>

<p><li>     The new event model adds flexibility in how a user's actions can be 
processed by scripts in the page. This includes the event bubbling 
feature, which lets scripts process events when it's more convenient to do so.</li></p>

<p><li>     Visual filters offer many eye-catching ways to render any element on 
the page and permit you to create shadowed and 3-D text. Transition 
filters let you display a portion of the page using fading effects. Internet 
Explorer offers 13 built-in transition filters, but you can also use third-party filters.</li></p>

<p><li>     DHTML includes many other improvements over traditional HTML, 
such as a better control over the creation of tables and support for 
additional graphic formats (such as PNG, Portable Network Graphics, the 
successor of the GIF format).</li></p>
</ul>

<p>Let's see the most important new features in more detail.</p>

<A NAME="923"><h2>Tags</h2></A>

<p>You've already seen how you can use the &lt;DIV&gt; and &lt;/DIV&gt; tags to group 
multiple elements and create a portion of the page that can be assigned a common style. 
For example, you can use these tags to create rectangular areas with text and 
background colors that are different from the other elements:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot; WIDTH=300; HEIGHT=100; COLOR=white; BACKGROUND=red;&quot;&gt;
A red block with white text&lt;BR&gt;
Another line in the same block
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>When you're working with DHTML, you might need to process items that 
are smaller than the heading or the paragraph. You can reference such items using 
the &lt;SPAN&gt; and &lt;/SPAN&gt; pair of tags, which subdivide an element into smaller 
chunks so that each portion can have different attributes:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;WIDTH=300; HEIGHT=150; COLOR=white; BACKGROUND=red;&quot;&gt;
A red block with white text&lt;BR&gt;
&lt;SPAN STYLE=&quot;COLOR=yellow&quot;&gt;Some words in yellow,&lt;/SPAN&gt;
&lt;SPAN STYLE=&quot;COLOR=blue&quot;&gt;Other words in blue&lt;/SPAN&gt;
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>An important difference between the &lt;DIV&gt; tag and the &lt;SPAN&gt; tag is that 
the former always adds a carriage return after the closing &lt;/DIV&gt; tag, which means 
that you can't continue to insert text on the same line. Conversely, the &lt;/SPAN&gt; tag 
doesn't insert a carriage return, so, for example, the previous code snippet produces two 
lines of text, not three. The importance of the &lt;DIV&gt; and &lt;SPAN&gt; tags will be more 
evident when you see how you can use scripts to create dynamic pages.</p>

<p>The &lt;BUTTON&gt; and &lt;/BUTTON&gt; tags allow you to add more versatile 
button controls on a form. While the standard &lt;INPUT TYPE=Button&gt; tag supports only 
a text caption, these new tags let you embed anything in the text, including an image:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BUTTON ID=&quot;Button1&quot; STYLE=&quot;height=80; width=180&quot;&gt;
Click Here
&lt;IMG SRC=&quot;www.vb2themax.com/mylogo.gif&quot;&gt;
&lt;/BUTTON&gt;
</pre>
</td></tr>
</table></p>


<p>DHTML includes a sort of Frame control, which can draw a border around 
other controls. You create such a control using the &lt;FIELDSET&gt; tag and specify its 
caption using the &lt;LEGEND&gt; tag. Actually, this frame control is even more powerful than 
its Visual Basic counterpart because you can embed nearly everything between 
the &lt;LEGEND&gt; and &lt;/LEGEND&gt; tag pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FIELDSET&gt;
&lt;LEGEND&gt;Select a product&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/LEGEND&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot; CHECKED&gt;Tape
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot;&gt;Music CD
&lt;INPUT TYPE=Radio NAME=&quot;Product&quot;&gt;Videotape
&lt;/FIELDSET&gt;
</pre>
</td></tr>
</table></p>


<p>Dynamic HTML also adds several new attributes that you can use with 
certain tags. For example, the TABINDEX attribute lets you specify the tab order of 
controls on the page, exactly as the Visual Basic property does. The ACCESSKEY 
attribute works with some types of page elements to provide a hot key for easy 
Alt+<I>key<U> </U></I>selection. The difference is that DHTML doesn't highlight the selected key in any 
way&#8212;you have to do it yourself. While this failure to highlight a selected key seems a 
flaw in DHTML, it actually gives you a lot of flexibility when building your user interface:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A &quot;Click <B>H</B>ere&quot; button that you click using the Alt+H key combination
&lt;BUTTON ID=&quot;Button1&quot; ACCESSKEY=&quot;H&quot;&gt;Click &lt;B&gt;H&lt;/B&gt;ere&lt;/BUTTON&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, the DISABLED attribute lets you selectively disable (and 
reenable) controls and other elements. You just need to remember that it works in a way 
opposite to the Visual Basics <I>Enabled </I>property:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Radio ID=&quot;optMusicCD&quot; NAME=&quot;Product&quot; DISABLED&gt;Music CD

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Button1_onclick()
    ' Reenable the option button.
    optMusicCD.disabled = False
End sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="924"><h2>Properties</h2></A>

<p>Dynamic HTML adds some new properties to the &lt;STYLE&gt; tag. These properties 
are useful in themselves, but above all they add a new dimension to scripting 
because they allow a script routine to move, hide, and change the relative z-order of the 
elements on the page, so making the page a truly dynamic one.</p>

<p>The <I>position </I>property permits you to accurately place an element on the 
page; by default this property is set to the value 
<I>static</I>, which means that the element is positioned according to the usual rules of HTML. But if you set the 
<I>position</I> property to <I>absolute</I>, you can specify the coordinates of an object with respect to the 
upper left corner of the window, using the <I>left 
</I>and <I>top </I>properties. Here's an example 
that displays white text inside a rectangle with a red background. The rectangle is 
300 pixels wide and 150 pixels high:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=50; LEFT=100; WIDTH=300; HEIGHT=150; 
COLOR=white; BACKGROUND=red;&quot;&gt;A red block with white text&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>If the object is contained within another object&#8212;for example, another 
&lt;DIV&gt; section&#8212;the left and top coordinates are measured with respect to the 
container's upper left corner. For example, the following piece of code creates a red 
rectangle and a blue rectangle within it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=100; LEFT=100; WIDTH=300; HEIGHT=150; 
COLOR=white; BACKGROUND=red;&quot;&gt;
Outer rectangle
   &lt;DIV STYLE=&quot;POSITION=absolute; TOP=20; LEFT=40; WIDTH=220; HEIGHT=110; 
   COLOR=white; BACKGROUND=Blue;&quot;&gt;Inner rectangle&lt;/DIV&gt;
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>If <I>position </I>is set to <I>relative</I>, the 
<I>left </I>and t<I>o</I>p<I> </I>properties refer to the upper 
left corner of the element in the page that immediately precedes the current one. 
You typically use relative mode to move a portion of text or an image to a given 
distance from the last piece of text in the page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>A string of text followed by a green rectangle
&lt;DIV STYLE=&quot;POSITION=relative; TOP:10; LEFT=0; WIDTH=300; HEIGHT=10; 
BACKGROUND=green;&quot;&gt;&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>When you have overlapping objects on the page, you can determine their 
visibility using the <I>z-order </I>property, by means of which a higher value puts an 
object in front of objects with lower values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV STYLE=&quot;POSITION=absolute; TOP=100; LEFT=100; WIDTH=300; 
HEIGHT=150; COLOR=white; BACKGROUND=red; Z-INDEX=2&quot;&gt;
This rectangle overlaps the next one.&lt;/DIV&gt;
&lt;DIV STYLE=&quot;POSITION=absolute; TOP=120; LEFT=120; WIDTH=300; 
HEIGHT=150; COLOR=white; BACKGROUND=green; Z-INDEX=1&quot;&gt;&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>You can't use the <I>z-order </I>property to change the relative z-ordering of an 
object and its container because the container will always appear behind the objects 
it contains. If you omit the <I>z-order </I>property, objects stack according to the order 
they appear in the HTML source code. (That is, each object covers the object defined 
before it in code.)</p>

<p>The <I>visibility </I>property specifies whether the object is visible. It takes the 
values <I>hidden </I>or <I>visible</I>. This property is most useful when it's controlled via 
script. Another new intriguing property is 
<I>display</I>: When you set it to <I>none</I>, the 
element becomes invisible and the browser reclaims the space this element occupied to 
rearrange the other elements on the page (unless they use absolute positioning). 
You can make the element visible again by setting the 
<I>display </I>property back to an empty string. For an example of this property, see the &quot;<A HREF="ch19e.htm#955">The First Example: A Dynamic Menu</A>&quot; section later in this chapter.</p>

<A NAME="925"><h2>Properties and Scripting</h2></A>

<p>The &quot;dynamic&quot; in Dynamic HTML means that you can modify one or more 
attributes of the page at run time and have the browser immediately render the new 
contents of the page without needing to reload the page from the server. For this reason, 
you must create script procedures to exploit the potential of DHTML.</p>

<p>You can programmatically control any attribute of any item on the page, 
provided that the item can be referenced in code. In plain HTML, you can reference 
only a few items&#8212;for example, the controls in a form&#8212;but in Dynamic HTML, you 
can reference any item that has an ID attribute. For example, the following code 
contains a &lt;DIV&gt; portion of the page associated with the 
<I>rectangle </I>ID, and a push button that, when clicked, executes a VBScript routine that modifies the background color of 
the &lt;DIV&gt; section:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;DIV ID=&quot;rectangle&quot; STYLE=&quot;POSITION=absolute; LEFT=100; 
TOP=50; WIDTH=200; HEIGHT=100; BACKGROUND=red&quot;&gt;
Click the button to change background color
&lt;/DIV&gt;
&lt;FORM&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;ChangeColor&quot; VALUE=&quot;Change Color&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' Randomly change the color of the rectangle.
Sub ChangeColor_onclick()
    Rectangle.style.background = &quot;#&quot; &amp; RndColor() &amp; RndColor() &amp; RndColor()
End Sub

' Return a random two-digit hexadecimal value.
Function RndColor()
    RndColor = Right(&quot;0&quot; &amp; Hex(Rnd * 256), 2)
End Function
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You need to pass through the intermediate <I>style 
</I>object to get to the <I>background </I>property. This makes sense because 
<I>background</I> is a property of the STYLE 
attribute. Likewise, you can control other properties of the 
<I>style </I>object, such as these:
</p>

<UL>

<p><li> The <I>fontFamily, fontStyle</I>, and 
<I>fontSize </I>properties determine the style of the characters. (Notice that property names are similar to names of 
style attributes but don't include the hyphen.)
</li></p>
 
<p><li> The <I>left</I>, <I>top</I>, <I>width</I>, and 
<I>height </I>properties set and return a string 
that contains the position and size of the object (for example 
<I>10px</I> for 10 pixels); there are also the 
<I>posLeft</I>, <I>posTop</I>, <I>posWidth</I> and 
<I>posHeight</I> properties, which don't append the 
<I>px</I> string to the numeric value and are therefore more useful in regular programming.
</li></p>
<p><li> The padding property is the distance in pixels between the contents 
of an element and its border. You can use the properties 
<I>paddingLeft</I>, <I>paddingTop</I>, 
<I>paddingRight</I> and <I>paddingBottom</I> to specify the 
distance from the individual borders on the four sides.
</li></p>
<p><li> The <I>textAlign</I> property affects the horizontal alignment of text in an 
element and can be left, center, or right.
</li></p>
<p><li> The <I>visibility</I> property affects whether the element is displayed (can 
be hidden or visible). The <I>zIndex</I> property sets or returns a number 
that determines whether the object is displayed in front or behind other 
elements; positive values move the element in front of the other objects 
on the page, negative values move the element behind others on the 
page. The &lt;BODY&gt; element has <I>zIndex</I> equal to 0.
</li></p>
<p><li> The <I>cssText</I> property sets and returns the argument of the STYLE 
attribute as a string.
</li></p>
</ul>

<p>To fine-tune the position and size of an item, you can strip the 
<I>px</I> characters appended to the value returned by the 
<I>left</I>, <I>top</I>, <I>width </I>and <I>height 
</I>properties. Using the <I>pos</I>xxxx properties is usually better, however, because they return 
numerical values. The following example shows how you can move an element to the right:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>rectangle.style.posLeft = rectangle.style.posLeft + 10
</pre>
</td></tr>
</table></p>


<p>If a property isn't defined in the STYLE attribute, it returns Null. The 
<I>pos</I>xxxx properties are an exception to this rule because they always return numeric values.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Use the 
<I>style.color </I>and <I>style.backgroundColor 
</I>properties to adjust the text and background color of any element on the page except the 
Document object, for which you should use the <I>fgcolor 
</I>and <I>bgcolor </I>properties.
</blockquote></div>
</p>

<A NAME="926"><h2>Text Properties and Methods</h2></A>

<p>Because a DHTML document is an active entity, you often want to modify its 
contents at run time. You can make run-time modifications in many ways, for 
example, by using the TextRange object (which is described later in this chapter). Most 
visible page elements, however, support four properties and two methods that make 
this an easy job.
</p>

<p>The four properties are <I>innerText</I>, 
<I>outerText</I>, <I>innerHTML, </I>and 
<I>outerHTML</I>. The <I>innerText </I>returns the portion of the document contained in the element as text. 
(All HTML tags are automatically filtered out.) The 
<I>outerText </I>property returns the same value as 
<I>innerText</I>, but you get a different result when you assign a string to it, 
as you'll see in a moment. The <I>innerHTML </I>property returns the HTML code 
between the opening and closing tags. The <I>outerHTML 
</I>property returns the HTML code of the element, including its opening and closing tags.
</p>

<p>To experiment with these properties, let's define an element that contains 
some HTML tags inside it, such as
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1 ID=Heading1&gt;Level &lt;I&gt;One&lt;/I&gt; Heading&lt;/H1&gt;
</pre>
</td></tr>
</table></p>


<p>which is rendered on your browser as <B>Level 
<I>One</I> Heading</B>.<I> </I>Now see what the 
preceding properties return when applied to this element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MsgBox Heading1.innerText  ' Level One Heading
MsgBox Heading1.outerText  ' Level One Heading
MsgBox Heading1.innerHTML  ' Level &lt;I&gt;One&lt;/I&gt; Heading
MsgBox Heading1.outerHTML  ' &lt;H1 ID=Heading1&gt;Level &lt;I&gt;One&lt;/I&gt; Heading&lt;/H1&gt;
</pre>
</td></tr>
</table></p>


<p>Assigning a value to the <I>innerText </I>substitutes the text between the opening 
and closing tags; the new value isn't parsed, so it shouldn't include HTML tags. For 
example, the statement
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.innerText = &quot;A New Heading&quot;
</pre>
</td></tr>
</table></p>


<p>completely replaces the text between the &lt;H1&gt; and &lt;/H1&gt; tags, and the new 
heading appears in your browser as <B>A New 
Heading</B>. Even if the <I>outerText </I>property 
always return the same string as the <I>innerText 
</I>property, it behaves differently when a new value is assigned to it because the substitution also affects the surrounding 
tags. Hence the statement
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.outerText = &quot;A New Heading&quot;
</pre>
</td></tr>
</table></p>


<p>actually destroys the &lt;H1&gt; and &lt;/H1&gt; tags and transforms the heading element 
into plain text (unless it was contained in another pair of tags). What's worse is that 
now the object has no ID attribute associated with it, so you can't programmatically 
access it any longer. For this reason, the 
<I>outerText</I> property has a limited practical 
use, and in most cases you'll use it just to delete the tags that surround an element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A reusable VBScript routine
Sub DeleteOuterTags(anyElement)
    anyElement.outerText = anyElement.innerText
End Sub
</pre>
</td></tr>
</table></p>


<p>If you want to replace the portion of a page inside a pair of tags with some 
HTML text, you should use that element's <I>innerHTML 
</I>property, as in this line of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.innerHTML = &quot;A &lt;U&gt;New&lt;/U&gt; Heading&quot;
</pre>
</td></tr>
</table></p>


<p>In this case, the string passed to the property is parsed and all HTML tags affect 
the result. For example, after the previous assignment the result displayed in the 
browser is <B>A <U>New</U> Heading</B>.
</p>

<p>The last property of this group, 
<I>outerHTML</I>, works like <I>innerHTML,</I> but 
the substitution also affects the surrounding tags. This means that you can modify 
the type and the ID of the element you're referencing, and you can change, for 
example, the level of a heading and the formatting of its contents in one operation:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Heading1.outerHTML = &quot;&lt;H2 ID=Heading1&gt;Level &lt;U&gt;Two&lt;/U&gt; Heading&lt;/H2&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Or you can center the heading using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre> Heading1.outerHTML = &quot;&lt;CENTER&gt;&quot; &amp; Heading1.outerHTML &amp; &quot;&lt;/CENTER&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Thanks to the string manipulation capabilities of VBScript, you can create 
a reusable routine that lets you change the level of any heading in the page 
without altering either its ID or its contents:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub ChangeHeadingLevel(element, newLevel)
    html = element.outerHTML
    pos1 = Instr(UCase(html), &quot;&lt;H&quot;)
    level = Mid(html, pos1 + 2, 1)
    pos2 = InstrRev(UCase(html), &quot;&lt;/H&quot; &amp; level, -1, 1)
    ' Because VBScript doesn't support the &quot;_&quot; continuation character,
    ' you must type the next two lines as a single statement.
    html = Left(html, pos1 + 1) &amp; newLevel &amp; Mid(html, pos1 + 3, 
        pos2 - pos1) &amp; newLevel &amp; Mid(html, pos2 + 4)
    element.outerHTML = html
End Sub
</pre>
</td></tr>
</table></p>


<p>If you modify an element's ID, the event procedure you've written for it 
won't work any longer. For this reason, you should always keep the same ID, or you 
should dynamically add the code to manage events from the new element. Also keep in 
mind that not all visible elements support all these four properties, the most notable 
exception being table cells (which expose only the 
<I>innerText</I> and <I>innerHTML </I>properties).
</p>

<p>While the four properties I've described so far let you 
<I>replace </I>a portion of the document, most elements also support two methods that enable you to 
<I>add</I> new contents to the document. The <I>insertAdjacentText 
</I>method inserts a portion of plain text immediately before or after the opening or the closing tag of the element. 
The <I>insertAdjacentHTML </I>method does the same, but its argument is parsed and all 
HTML is correctly recognized and affect the result. Here are a few examples:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Append plain text at the end of the heading.
Heading1.insertAdjacentText &quot;BeforeEnd&quot;, &quot; (added dynamically)&quot;
' As above, but appends italicized text.
Heading1.insertAdjacentHTML &quot;BeforeEnd&quot;, &quot; &lt;I&gt;(added dynamically)&lt;/I&gt;&quot;
' Add new text before the first word of the heading.
Heading1.insertAdjacentText &quot;AfterBegin&quot;, &quot;This is a &quot;
' Add a level 2 heading immediately after this heading.
Heading1.insertAdjacentHTML &quot;AfterEnd&quot;, &quot;&lt;H2&gt;New Level 2 Heading&lt;/H2&gt;&quot;
' Insert italicized text right before this heading.
Heading1.insertAdjacentHTML &quot;BeforeBegin&quot;, &quot;&lt;I&gt;Introducing...&lt;/I&gt;&quot;
</pre>
</td></tr>
</table></p>


<A NAME="927"><h2>Events</h2></A>

<p>Each page element with which you've associated an ID attribute can raise an 
event. The majority of DHTML events are similar to Visual Basic events, even though 
their names are different. All the DHTML events begin with the two characters 
<I>on</I>, such as <I>onclick</I>, 
<I>onkeypress</I>, and <I>onchange</I>. For example, when the hyperlink
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A ID=&quot;Details&quot; HREF=&quot;www.vb2themax.com/details&quot;&gt;here&lt;/A&gt; for details
</pre>
</td></tr>
</table></p>


<p>is clicked, you can trap the user's action with the following VBScript code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Details_onclick()
    MsgBox &quot;About to be transferred to another site&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>The handling of DHTML events differs significantly in a couple of ways 
from the Visual Basic' way of managing events, though. First, event procedures don't 
take arguments. Second, an event is received by the object that raised it (which is like 
the innermost of a set of Russian dolls) and in turn by all the page elements that 
contain the object that raised the event. (This feature, known as 
<I>event bubbling</I>, is explained in the following section.)
</p>

<p>All the arguments that make sense inside an event can be retrieved as (and 
possibly assigned to) properties of the <I>event 
</I>object. For example, when an <I>onkeypress 
</I>event is received, you can determine which key has been pressed by looking at 
the <I>event.keycode </I>property, and you can also &quot;eat&quot; the key by setting this property 
to 0. For example, see how you can convert to uppercase all the text entered in 
a TextBox control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Text NAME=&quot;txtCity&quot; VALUE=&quot;&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub txtCity_onkeypress()
    window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Inside any event procedure, you can retrieve a reference to the object the 
event is bound to by using the <I>Me </I>keyword, as in the following piece of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub txtCity_onkeypress()
    ' Clear the text box if the spacebar is pressed.
    If window.event.keycode = 32 Then 
        Me.Value = &quot;&quot;
        window.event.keycode = 0      ' Also eat the key.
    End If
End Sub
</pre>
</td></tr>
</table></p>


<A NAME="928"><h3>Event bubbling</h3></A>

<p>The <I>event bubbling </I>feature of DHTML events lets you process an event in 
multiple places on the page, which isn't something you can do in Visual Basic. A DHTML 
event is first received by the object acted on by the user, it's next raised for its 
container and then for the container's container, and so on until the event reaches the 
highest tag in the hierarchy. For example, if the user clicks on a hyperlink inside a table, 
the <I>onclick </I>event is first fired for the hyperlink object, then for the table, for the 
Body object, and finally for the Document object.
</p>

<p>The following example makes use of the event bubbling feature to write 
one event procedure that manages the keys pressed in three distinct TextBox 
controls, which have been grouped together under a &lt;DIV&gt; tag. The example also 
demonstrates that the event is generated for the Body object (provided that you label it 
with an ID attribute) and for the Document object:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY ID=&quot;Body&quot;&gt;
&lt;DIV ID=Textboxes&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtName&quot; VALUE=&quot;&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtCity&quot; VALUE=&quot;&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;txtCountry&quot; VALUE=&quot;&quot;&gt;
&lt;/DIV&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Textboxes_onkeypress()
    ' Convert to uppercase.
    window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
End Sub

Sub Body_onkeypress()
    ' The Body element also gets the event.
End Sub

Sub Document_onkeypress()
    ' The Document element also gets the event.
End Sub
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>By setting the <I>event.cancelBubble </I>property to True, you can cancel the bubbling in any event procedure. For example, if you set this property to 
True in the <I>Body_onclick </I>procedure, the Document object won't receive the event.
</p>

<p>In any event procedure in the event chain, you can retrieve a reference to 
the element that started the event by querying the 
<I>event.srcElement </I>property. This permits you to create generalized event procedures and at the same time to account 
for special cases, as in the following example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Textboxes_onkeypress()
    ' Convert all textboxes to uppercase except txtName.
    If window.event.srcElement.Name = &lt;&gt; &quot;txtName&quot; Then
        window.event.keycode = Asc(UCase(Chr(window.event.keycode)))
    End If
End Sub 
</pre>
</td></tr>
</table></p>


<p>Don't confuse the <I>srcElement </I>property with the 
<I>Me </I>keyword, which returns a reference to the object the event procedure is bound to. The two objects 
coincide only inside the first event procedure fired by the event bubbling mechanism.
</p>

<A NAME="929"><h3>Canceling the default effect</h3></A>

<p>Most user actions on a page element produce default results. For example, a 
mouse click on a hyperlink causes a jump to another HTML page, and a key pressed 
when the focus is on a TextBox control causes the character to be added to the 
control's current contents. You can cancel this default action by assigning False to 
the <I>event.returnValue </I>property, as in this example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A ID=&quot;Link1&quot; HREF=&quot;http://www.vb2themax.com&quot;&gt;here&lt;/A&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Link1_onclick()
    'Prevent the yperlink from firing.
    window.event.returnValue = False
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Another way to cancel the default action of an event is to transform the 
event procedure into a Function and assign False to the return value, as here:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function Link1_onclick()
    Link1_onclick = False
End Function
</pre>
</td></tr>
</table></p>


<A NAME="930"><h3>Timer events</h3></A>

<p>Even if HTML doesn't provide a Timer control, it's possible&#8212;indeed simple&#8212;to 
create routines that are executed at regular intervals. You can choose from two 
types of timer routines: one that fires repeatedly and one that fires only once. (This in 
fact is a standard HTML feature, so you don't need DHTML for using the code in 
this section.) You activate a timer routine using the 
<I>setTimeout </I>(for one-shot timers) or <I>setInterval 
</I>(for regular timers)<I> </I>methods of the <I>window 
</I>object. These methods have a similar syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>window.setTimeout &quot;routinename&quot;, milliseconds, language
window.setInterval &quot;routinename&quot;, milliseconds, language
</pre>
</td></tr>
</table></p>


<p>You normally invoke these methods from within the 
<I>window_onload </I>routine or outside any routine. (In both cases, the methods are executed as soon as the 
page is downloaded.) For example, the following code moves a button to the right by 
20 pixels twice per second.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=BUTTON NAME=&quot;Button1&quot; VALUE=&quot;Button Caption&quot; 
    STYLE=&quot;POSITION=absolute&quot; &gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' This line is executed when the page is loaded.
window.setInterval &quot;TimerEvent&quot;, 500, &quot;VBScript&quot;

' The following routine is executed every 500 milliseconds.
Sub TimerEvent()
    Button1.style.posLeft = Button1.style.posLeft+5
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can cancel the effect of a <I>setTimeout 
</I>or a <I>setInterval </I>method by using the 
<I>clearTimeout </I>or the <I>clearInterval </I>method, respectively.
</p>

<A NAME="931"><h3>Event summary</h3></A>

<p>We can subdivide DHTML events into a few categories, according to their functions.
</p>

<p>Keyboard events include <I>onkeypress</I>, 
<I>onkeydown, </I>and <I>onkeyup</I>. These are 
similar to the Visual Basic events of same names. The 
event object's <I>keycode </I>property contains the code of the pressed key , and you can read the state of shift keys 
by means of the <I>altKey</I>, <I>ctrlKey, </I>and 
<I>shiftKey </I>properties of the event object.
</p>

<p>Dynamic HTML supports the same mouse events as Visual Basic, 
including <I>onclick</I>, <I>ondblclick</I>, 
<I>onmousedown</I>, <I>onmouseup</I>, and 
<I>onmousemove</I>. The <I>onclick </I>event also fires when the user presses Enter while a push button has the focus. 
Inside a mouse event you can query the <I>event.button 
</I>property to learn which button was pressed. (The bit-coded value you get is similar to the argument received by 
Visual Basic's mouse events.)
</p>

<p>Several DHTML events have no counterparts in Visual Basic: 
<I>onmouseover </I>fires when the mouse cursor hovers over an element, and 
<I>onmouseout </I>when the mouse abandons an element. Inside these event procedures you can use the 
<I>fromElement </I>and <I>toElement </I>properties of the 
<I>event </I>object to learn which element has been 
entered or abandoned.
</p>

<p>The <I>onfocus </I>and <I>onblur </I>events are similar to Visual Basic's 
<I>GotFocus </I>and <I>LostFocus </I>events, but they also fire when the focus goes to another window or 
another application. The <I>onchange </I>event is similar to the corresponding Visual 
Basic event, but it fires only when the focus leaves the control.
</p>

<p>The <I>onselectstart </I>event fires when the user clicks on the page and starts 
selecting a portion of text or other elements; when the mouse moves and the selected 
area changes accordingly, an <I>onselect </I>event is fired. The 
<I>ondragstart</I> event fires when a drag operation starts: By trapping this event, you can cancel its default action, 
which is copying the selected text elsewhere.
</p>

<p>A few events are global to the entire page. The 
<I>onreadystatechange </I>event fires when the state of the page changes (for example, when the download has 
completed and the page is about to become interactive). The 
<I>onresize </I>event fires when the page is resized. The 
<I>onunload </I>and <I>onbeforeunload </I>events are similar to Visual 
Basic's <I>Unload </I>and <I>QueryUnload</I>, and they fire when the page is about to be 
unloaded because the user is navigating to another page or closing the browser. The 
<I>onscroll </I>event occurs when the document (or a page element) is scrolled. The 
<I>onhelp </I>event fires when the user presses the F1 key. The 
<I>onerror </I>event fires when a script error occurs or when the download of a page element (for example, an image) fails.
</p>

<p>A few events can't be trapped from a DHTML Visual Basic application: 
<I>onabort</I> (the user clicks on the Stop button on the browser's toolbar), 
<I>onreset </I>(the user clicks on the Reset button), and 
<I>onsubmit </I>(the user clicks on the Submit button).
</p>

</BODY>
</HTML>




