<html>
<HEAD>

<TITLE>Chapter 6 -- Classes and Objects</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">



</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05g.htm", "ch06b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<font size="+3">Chapter 6</font>
<A NAME="212"><H1>Classes and Objects</H1></A>

<p>Since Microsoft Visual Basic 4 introduced the concept of class modules, a 
furious debate has raged among Visual Basic developers about the object-oriented nature 
of the language. Is Visual Basic a <I>real </I>object-oriented programming (OOP) 
language? Is it just an <I>object-based </I>language? Or is it somewhere between these two extremes?</p>

<p>For what it's worth, my position on the question is a compromise: Visual 
Basic definitively is <I>not </I>a true OOP language and it won't be one until it possesses 
some essential OOP features, such as inheritance. But this deficit shouldn't excuse your 
not learning in depth what classes and objects have to offer developers. This is what 
I'll show in this chapter and in the remainder of this book:</p>

<UL>
<p><li> Class modules can immensely improve your productivity, help you 
solve many common and intricate programming problems, and even 
permit you to perform tasks that would be extremely difficult, if not 
impossible, otherwise.</li></p>

<p><li> Even if Visual Basic isn't a full-fledged object-oriented programming 
language, you can still use its classes to better organize your code into 
truly reusable modules and design your applications entirely using 
concepts derived from the Object-Oriented Design discipline. In this sense, 
the inclusion of a tool such as Visual Modeler in the Enterprise Edition is 
a clear sign of Microsoft's will to pursue this goal.</li></p>

<p><li> Most important, objects are the base on which almost every feature 
of Visual Basic is implemented. For example, without objects you can't 
do serious database programming, you can't deliver Internet applications, 
and you can't write components for COM, DCOM, or MTS. In short, you 
can do little or nothing without a firm grasp on what objects are and how 
you can take advantage of them.</li></p>
</UL>

<p>If you're absolutely new to object-oriented programming, this could be the 
most difficult chapter of the entire book for you to grasp. To understand how objects 
can help you write better programs in less time, you must be ready for a conceptual 
leap, not unlike the leap that many programmers had to take when switching from 
pure procedural MS-DOS languages such as QuickBasic to newer and more 
sophisticated event-driven programming environments such as Visual Basic. But once you 
grasp the basic concepts of OOP, you'll probably agree that objects are the most 
exciting thing to happen to Visual Basic since its first version. When you dive into 
object-oriented programming, you'll soon find yourself devising new, concise, and 
elegant solutions to old problems, often in less time and with less code. But I don't want 
to sound intimidating. As a Visual Basic programmer, you've already learned to 
master many advanced programming techniques concerned with, for example, events, 
database programming, and user interface issues. OOP isn't more difficult, it's 
merely different. And it's certainly a lot of fun.</p>

<p>If you've ever read books or articles about OOP, you surely found dozens 
of different definitions for the term <I>object</I>. Most of the definitions are correct and 
confusing at the same time. The definition I like most is this one:</p>

<p><I>An object is an entity that embeds both data and the code that deals with it.</I></p>

<p>Let's see what this means in practice.</p>

</BODY>
</HTML>




