<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="petzoldi.css" TYPE="text/css">
<title>Using the Timer for a Status Report</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">
<A NAME="233"><h1>Using the Timer for a Status Report</h1></A>
<p>The final program in this chapter is something I alluded to in <a href="ch05a.htm#94">Chapter 5</a>. It's the only good use I've found for the <I>GetPixel</I> function.

<p>WHATCLR (shown in Figure 8-7) displays the RGB color of the pixel currently under the hot point of the mouse cursor.

<p><B>Figure 8-7.</B> <I>The WHATCLR program.</I>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>

<A NAME="234"><p><h3>WHATCLR.C</h3></A>
<p><pre>
/*------------------------------------------
   WHATCLR.C -- Displays Color Under Cursor

                (c) Charles Petzold, 1998
  ------------------------------------------*/

#include &lt;windows.h&gt;

#define ID_TIMER    1

void FindWindowSize (int *, int *) ;
LRESULT CALLBACK WndProc (HWND, UINT, WPARAM, LPARAM) ;

int WINAPI WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance,
                    PSTR szCmdLine, int iCmdShow)
{
     static TCHAR szAppName[] = TEXT (&quot;WhatClr&quot;) ;
     HWND         hwnd ;
     int          cxWindow, cyWindow ;
     MSG          msg ;
     WNDCLASS     wndclass ;
     
     wndclass.style         = CS_HREDRAW | CS_VREDRAW ;
     wndclass.lpfnWndProc   = WndProc ;
     wndclass.cbClsExtra    = 0 ;
     wndclass.cbWndExtra    = 0 ;
     wndclass.hInstance     = hInstance ;
     wndclass.hIcon         = LoadIcon (NULL, IDI_APPLICATION) ;
     wndclass.hCursor       = LoadCursor (NULL, IDC_ARROW) ;
     wndclass.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH) ;
     wndclass.lpszMenuName  = NULL ;
     wndclass.lpszClassName = szAppName ;
     
     if (!RegisterClass (&amp;wndclass))
     {
          MessageBox (NULL, TEXT (&quot;This program requires Windows NT!&quot;),
                      szAppName, MB_ICONERROR) ;
          return 0 ;
     }
     
     FindWindowSize (&amp;cxWindow, &amp;cyWindow) ;
     
     hwnd = CreateWindow (szAppName, TEXT (&quot;What Color&quot;),
                          WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_BORDER,
                          CW_USEDEFAULT, CW_USEDEFAULT,
                          cxWindow, cyWindow,
                          NULL, NULL, hInstance, NULL) ;
     
     ShowWindow (hwnd, iCmdShow) ;
     UpdateWindow (hwnd) ;
     
     while (GetMessage (&amp;msg, NULL, 0, 0))
     {
          TranslateMessage (&amp;msg) ;
          DispatchMessage (&amp;msg) ;
     }
     return msg.wParam ;
}

void FindWindowSize (int * pcxWindow, int * pcyWindow)
{
     HDC        hdcScreen ;
     TEXTMETRIC tm ;
     
     hdcScreen = CreateIC (TEXT (&quot;DISPLAY&quot;), NULL, NULL, NULL) ;
     GetTextMetrics (hdcScreen, &amp;tm) ;
     DeleteDC (hdcScreen) ;
     
     * pcxWindow = 2 * GetSystemMetrics (SM_CXBORDER)  + 
                        12 * tm.tmAveCharWidth ;

     * pcyWindow = 2 * GetSystemMetrics (SM_CYBORDER)  +
                       GetSystemMetrics (SM_CYCAPTION) + 
                         2 * tm.tmHeight ;
}

LRESULT CALLBACK WndProc (HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
     static COLORREF cr, crLast ;
     static HDC      hdcScreen ;
     HDC             hdc ;
     PAINTSTRUCT     ps ;
     POINT           pt ;
     RECT            rc ;
     TCHAR           szBuffer [16] ;
     
     switch (message)
     {
     case WM_CREATE:
          hdcScreen = CreateDC (TEXT (&quot;DISPLAY&quot;), NULL, NULL, NULL) ;

          SetTimer (hwnd, ID_TIMER, 100, NULL) ;
          return 0 ;
          
     case WM_TIMER:
          GetCursorPos (&amp;pt) ;
          cr = GetPixel (hdcScreen, pt.x, pt.y) ;

          SetPixel (hdcScreen, pt.x, pt.y, 0) ;
          
          if (cr != crLast)
          {
               crLast = cr ;
               InvalidateRect (hwnd, NULL, FALSE) ;
          }
          return 0 ;
          
     case WM_PAINT:
          hdc = BeginPaint (hwnd, &amp;ps) ;
          
          GetClientRect (hwnd, &amp;rc) ;
          
          wsprintf (szBuffer, TEXT (&quot;  %02X %02X %02X  &quot;),
                    GetRValue (cr), GetGValue (cr), GetBValue (cr)) ;
          
          DrawText (hdc, szBuffer, -1, &amp;rc,
                    DT_SINGLELINE | DT_CENTER | DT_VCENTER) ;
          
          EndPaint (hwnd, &amp;ps) ;
          return 0 ;
          
     case WM_DESTROY:
          DeleteDC (hdcScreen) ;
          KillTimer (hwnd, ID_TIMER) ;
          PostQuitMessage (0) ;
          return 0 ;
     }
     return DefWindowProc (hwnd, message, wParam, lParam) ;
}
</pre>
</td></tr></table>

<p>WHATCLR does a little something different while still in <I>WinMain</I>. Because WHATCLR's window need only be large enough to display a hexadecimal RGB value, it creates a nonsizeable window using the WS_BORDER window style in the <I>CreateWindow</I> function. To calculate the size of the window, WHATCLR obtains an information device context for the video display by calling <I>CreateIC</I> and then calls <I>GetSystemMetrics</I>. The calculated width and height values of the window are passed to <I>CreateWindow</I>.

<p>WHATCLR's window procedure creates a device context for the whole video display by calling <I>CreateDC</I> during the WM_CREATE message. This device context is maintained for the lifetime of the program. During the WM_TIMER message, the program obtains the pixel color at the current mouse cursor position. The RGB color is displayed during WM_PAINT.

<p>You may be wondering whether that device context handle obtained from the <I>CreateDC</I> function will let you <I>display</I> something on any part of the screen rather than just obtain a pixel color. The answer is Yes. It's generally considered impolite for one application to draw on another, but it could come in useful in some odd circumstances.
</BODY>
</HTML>






