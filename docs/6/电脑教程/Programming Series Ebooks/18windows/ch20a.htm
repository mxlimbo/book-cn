<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="petzoldi.css" TYPE="text/css">
<title>Chapter 20 -- Multitasking and Multithreading</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<font size="+3">Chapter 20</font>

<A NAME="709"><h1>Multitasking and Multithreading</h1></A><P>Multitasking is the ability of an operating system to run multiple programs 
concurrently. Basically, the operating system uses a hardware clock to allocate &quot;time slices&quot; for 
each currently running process. If the time slices are small enough&#8212;and the machine is 
not overloaded with too many programs trying to do something&#8212;it appears to a user as if 
all the programs are running simultaneously.
<P>Multitasking is nothing new. On large mainframe computers, multitasking is a 
given. These mainframes often have hundreds of terminals attached to them, and each terminal 
user should get the impression that he or she has exclusive access to the whole machine. 
In addition, mainframe operating systems often allow users to &quot;submit jobs to the 
background,&quot; where they are then carried out by the machine while the user can work on something else.
<P>Multitasking on personal computers has taken much longer to become a reality. 
But we now often seem to take PC multitasking for granted. As I'll discuss shortly, to some 
extent the earlier 16-bit versions of Microsoft Windows supported multitasking but in a 
somewhat limited capability. The 32-bit versions of Windows all support both true multitasking 
and&#8212;as an extra bonus&#8212;multithreading.
<P>Multithreading is the ability for a program to multitask within itself. The program 
can split itself into separate &quot;threads&quot; of execution that also seem to run concurrently. 
This concept might at first seem barely useful, but it turns out that programs can 
use multithreading to perform lengthy jobs in the background without requiring the user 
to take an extended break away from their machines. Of course, sometimes this may not 
be desired: an excuse to take a journey to the watercooler or refrigerator is often 
welcome! But the user should always be able to do 
<I>something</I> on the machine, even when it's 
busy doing something else.

</BODY>
</HTML>






