<html><head><title>04app</title><base target="right"></head><body><div nowrap=true>
<p>04app</p>
<a href="html/ch00.htm">cover</a><br>
&nbsp; <a href="html/ch00aa.htm">loc page</a><br>
<a href="html/introa.htm">introduction</a><br>
&nbsp; <a href="html/introb.htm">today's windows platforms</a><br>
&nbsp; <a href="html/introc.htm">tomorrow's windows platforms (64-bit windows 2000)</a><br>
&nbsp; <a href="html/introd.htm">what's new in the fourth edition</a><br>
&nbsp; <a href="html/introe.htm">this book has no mistakes</a><br>
&nbsp; <a href="html/introf.htm">about the cd-rom/system requirements</a><br>
&nbsp; <a href="html/introg.htm">support</a><br>
&nbsp; <a href="html/introh.htm">thanks for your help</a><br>
<a href="html/abouta.htm">about the author</a><br>
<a href="html/deda.htm">dedication</a><br>
part i: required reading<br>
&nbsp; <a href="html/ch01a.htm">chapter 1 -- error handling</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch01b.htm">you can do this too</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch01c.htm">the errorshow sample application</a><br>
&nbsp; <a href="html/ch02a.htm">chapter 2 -- unicode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02b.htm">character sets</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02c.htm">why you should use unicode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02d.htm">windows 2000 and unicode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02e.htm">windows 98 and unicode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02f.htm">windows ce and unicode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02g.htm">keeping score</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02h.htm">a quick word about com</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02i.htm">how to write unicode source code</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch02j.htm">making your application ansi- and unicode-ready</a><br>
&nbsp; <a href="html/ch03a.htm">chapter 3 -- kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch03b.htm">what is a kernel object?</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch03c.htm">a process's kernel object handle table</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch03d.htm">sharing kernel objects across process boundaries</a><br>
part ii: getting work done<br>
&nbsp; <a href="html/ch04a.htm">chapter 4 -- processes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch04b.htm">writing your first windows application</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch04c.htm">the createprocess function</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch04d.htm">terminating a process</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch04e.htm">child processes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch04f.htm">enumerating the processes running in the system</a><br>
&nbsp; <a href="html/ch05a.htm">chapter 5 -- jobs</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05b.htm">placing restrictions on a job's processes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05c.htm">placing a process in a job</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05d.htm">terminating all processes in a job</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05e.htm">querying job statistics</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05f.htm">job notifications</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch05g.htm">the joblab sample application</a><br>
&nbsp; <a href="html/ch06a.htm">chapter 6 -- thread basics</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06b.htm">when to create a thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06c.htm">when not to create a thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06d.htm">writing your first thread function</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06e.htm">the createthread function</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06f.htm">terminating a thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06g.htm">some thread internals</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06h.htm">c/c++ run-time library considerations</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch06i.htm">gaining a sense of one's own identity</a><br>
&nbsp; <a href="html/ch07a.htm">chapter 7 -- thread scheduling, priorities, and affinities</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07b.htm">suspending and resuming a thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07c.htm">suspending and resuming a process</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07d.htm">sleeping</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07e.htm">switching to another thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07f.htm">a thread's execution times</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07g.htm">putting the context in context</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07h.htm">thread priorities</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07i.htm">an abstract view of priorities</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07j.htm">programming priorities</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch07k.htm">affinities</a><br>
&nbsp; <a href="html/ch08a.htm">chapter 8 -- thread synchronization in user mode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch08b.htm">atomic access: the interlocked family of functions</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch08c.htm">cache lines</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch08d.htm">advanced thread synchronization</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch08e.htm">critical sections</a><br>
&nbsp; <a href="html/ch09a.htm">chapter 9 -- thread synchronization with kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09b.htm">wait functions</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09c.htm">successful wait side effects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09d.htm">event kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09e.htm">waitable timer kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09f.htm">semaphore kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09g.htm">mutex kernel objects</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09h.htm">a handy thread synchronization object chart</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch09i.htm">other thread synchronization functions</a><br>
&nbsp; <a href="html/ch10a.htm">chapter 10 -- thread synchronization toolkit</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch10b.htm">implementing a critical section: the optex</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch10c.htm">creating thread-safe datatypes  and inverse semaphores</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch10d.htm">the single writer/multiple reader guard (swmrg)</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch10e.htm">implementing a waitformultipleexpressions function</a><br>
&nbsp; <a href="html/ch11a.htm">chapter 11 -- thread pooling</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch11b.htm">scenario 1: call functions asynchronously</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch11c.htm">scenario 2: call functions at timed intervals</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch11d.htm">scenario 3: call functions when single kernel objects become signaled</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch11e.htm">scenario 4: call functions when asynchronous i/o requests complete</a><br>
&nbsp; <a href="html/ch12a.htm">chapter 12 -- fibers</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch12b.htm">working with fibers</a><br>
part iii: memory management<br>
&nbsp; <a href="html/ch13a.htm">chapter 13 -- windows memory architecture</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13b.htm">a process's virtual address space</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13c.htm">how a virtual address space is partitioned</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13d.htm">regions in an address space</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13e.htm">committing physical storage within a region</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13f.htm">physical storage and the paging file</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13g.htm">protection attributes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13h.htm">bringing it all home</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch13i.htm">the importance of data alignment</a><br>
&nbsp; <a href="html/ch14a.htm">chapter 14 -- exploring virtual memory</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch14b.htm">system information</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch14c.htm">virtual memory status</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch14d.htm">determining the state of an address space</a><br>
&nbsp; <a href="html/ch15a.htm">chapter 15 -- using virtual memory in your own applications</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15b.htm">reserving a region in an address space</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15c.htm">committing storage in a reserved region</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15d.htm">reserving a region and committing storage simultaneously</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15e.htm">when to commit physical storage</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15f.htm">decommitting physical storage and releasing a region</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15g.htm">changing protection attributes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15h.htm">resetting the contents of physical storage</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch15i.htm">address windowing  extensions (windows 2000 only)</a><br>
&nbsp; <a href="html/ch16a.htm">chapter 16 -- a thread's stack</a><br>
&nbsp; <a href="html/ch17a.htm">chapter 17 -- memory-mapped files</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17b.htm">memory-mapped executables and dlls</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17c.htm">memory-mapped data files</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17d.htm">using memory-mapped files</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17e.htm">processing a big file using memory-mapped files</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17f.htm">memory-mapped files and coherence</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17g.htm">specifying the base address of a memory-mapped file</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17h.htm">implementation details of memory-mapped files</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17i.htm">using memory-mapped files to share data among processes</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17j.htm">memory-mapped files backed by the paging file</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch17k.htm">sparsely committed memory-mapped files</a><br>
&nbsp; <a href="html/ch18a.htm">chapter 18 -- heaps</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch18b.htm">a process's default heap</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch18c.htm">reasons to create additional heaps</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch18d.htm">how to create an additional heap</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch18e.htm">miscellaneous heap functions</a><br>
part iv: dynamic-link libraries<br>
&nbsp; <a href="html/ch19a.htm">chapter 19 -- dll basics</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch19b.htm">dlls and a process's address space</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch19c.htm">the overall picture</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch19d.htm">building the dll module</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch19e.htm">building the executable module</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch19f.htm">running the executable module</a><br>
&nbsp; <a href="html/ch20a.htm">chapter 20 -- dll advanced techniques</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20b.htm">explicit dll module loading and symbol linking</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20c.htm">the dll's entry-point function</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20d.htm">delay-loading a dll</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20e.htm">function forwarders</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20f.htm">known dlls</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20g.htm">dll redirection</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20h.htm">rebasing modules</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch20i.htm">binding modules</a><br>
&nbsp; <a href="html/ch21a.htm">chapter 21 -- thread-local storage</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch21b.htm">dynamic tls</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch21c.htm">static tls</a><br>
&nbsp; <a href="html/ch22a.htm">chapter 22 -- dll injection and api hooking</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22b.htm">dll injection: an example</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22c.htm">injecting a dll using the registry</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22d.htm">injecting a dll using windows hooks</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22e.htm">injecting a dll using remote threads</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22f.htm">injecting a dll with a trojan dll</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22g.htm">injecting a dll as a debugger</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22h.htm">injecting code with a memory-mapped file on windows 98</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22i.htm">injecting code with  createprocess</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch22j.htm">api hooking: an example</a><br>
part v: structured exception handling<br>
&nbsp; <a href="html/ch23a.htm">chapter 23 -- termination handlers</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch23b.htm">understanding termination handlers by example</a><br>
&nbsp; <a href="html/ch24a.htm">chapter 24 -- exception handlers and software exceptions</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24b.htm">understanding exception filters and exception handlers by example</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24c.htm">exception_execute_handler</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24d.htm">exception_continue_execution</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24e.htm">exception_continue_search</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24f.htm">getexceptioncode</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24g.htm">getexceptioninformation</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch24h.htm">software exceptions</a><br>
&nbsp; <a href="html/ch25a.htm">chapter 25 -- unhandled exceptions and c++ exceptions</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25b.htm">just-in-time debugging</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25c.htm">turning off the exception message box</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25d.htm">calling unhandledexceptionfilter yourself</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25e.htm">inside the unhandledexceptionfilter function</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25f.htm">exceptions and the debugger</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch25g.htm">c++ exceptions versus structured exceptions</a><br>
part vi: windowing<br>
&nbsp; <a href="html/ch26a.htm">chapter 26 -- window messaging</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26b.htm">a thread's message queue</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26c.htm">posting messages to a thread's message queue</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26d.htm">sending messages to a window</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26e.htm">waking a thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26f.htm">sending data with messages</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch26g.htm">how windows handle ansi/unicode characters and strings</a><br>
&nbsp; <a href="html/ch27a.htm">chapter 27 -- the hardware input model and local input state</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch27b.htm">the raw input thread</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch27c.htm">local input state</a><br>
&nbsp;&nbsp;&nbsp; <a href="html/ch27d.htm">attaching virtualized input queues and local input state together</a><br>
<a href="html/chaaa.htm">appendix a -- the build environment</a><br>
&nbsp; <a href="html/chaab.htm">the cmnhdr.h header file</a><br>
<a href="html/chaba.htm">appendix b -- message crackers, child control macros, and api macros</a><br>
&nbsp; <a href="html/chabb.htm">message crackers</a><br>
&nbsp; <a href="html/chabc.htm">child control macros</a><br>
&nbsp; <a href="html/chabd.htm">api macros</a><br>
<a href="html/footnotesa.htm">footnotes</a><br>
<a href="html/aboutebook.htm">about this electronic book</a><br>
<a href="html/ch99.htm">about microsoft press</a><br>
</div></body></html>
