<HTML>
<HEAD>
<TITLE>Tomorrow's Windows Platforms (64-Bit Windows 2000)</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="introb.htm">[Previous]</A> <A HREF="introd.htm">[Next]</A><P>

<A NAME="398"><H1>Tomorrow's Windows Platforms (64-Bit Windows 2000)</H1></A>

<P>The future is upon us. As I write this, Microsoft is hard at work porting 
the Windows 2000 kernel so that it is a true 64-bit operating system. The 
expected title is <I>64-bit Windows 2000, </I>and the expected ship date is the year 2000. 
Initially, this 64-bit kernel will run on Compaq's Alpha CPU architecture 
(AXP64) and Intel's new 64-bit CPU architecture (IA-64). </P>
<P>Compaq's Alpha CPUs have always been 64-bit architectures. So if 
you already own an Alpha machine, you will just need to install 64-bit Windows 
2000 when it ships in order to run a full 64-bit operating system. Intel's 
Pentium series (and earlier) CPUs use a 32-bit architecture (IA-32). Machines 
with these CPUs cannot run 64-bit Windows 2000. Intel is 
currently designing a new 64-bit CPU architecture. The 
first chip to use this architecture is code-named Merced. 
Machines based on the Merced CPU should ship in the year 2000.</P>
<P>64-bit Windows 2000 interests me a great deal, and I have been 
preparing my code for this day. Today Microsoft's Web site has a number of 
articles about 64-bit Windows 2000 and how it will look to software developers. I'm happy to report the following:</P>
<UL>
<P><LI>     The 64-bit Windows 2000 kernel is a port of the existing 
32-bit Windows 2000 kernel. This means that all the details and 
intricacies that you've learned about 32-bit Windows 2000 will still apply in 
the 64-bit world. In fact, Microsoft has modified the 32-bit 
Windows source code so that it can be compiled to produce a 32-bit or a 
64-bit system. They have just one source-code base, so new features 
and bug fixes are simultaneously applied to both systems.</LI></P>
<P><LI>     Since the kernels use the same code and underlying concepts, 
the Windows API is identical on both platforms. This means that you 
do not have to redesign or reimplement your application to work 
on 64-bit Windows. You can simply make slight modifications to 
your source code and then rebuild.</LI></P>
<P><LI>     Since it is so easy to port 32-bit applications, we should soon 
see tools (such as Microsoft's Developer Studio) supporting 
64-bit development.</LI></P>
<P><LI>     For backward compatibility, 64-bit Windows can 
execute 32-bit applications. However, it is 
promised that your application's performance will 
improve greatly if built as a true 64-bit application.</LI></P>
<P><LI>     There is little new for you to learn. You'll 
be happy to know that most data types remain 32 
bits wide. These include <I>int</I>s, DWORDs, LONGs, BOOLs, 
and so on. In fact, you mostly just need to worry 
about pointers and some handles, since they are now 
64-bit values.</LI></P>
</UL>
 <P>Since Microsoft's Web site offers much information 
on how to modify your existing source code to be 64-bit 
ready, I will not go into those details in this book. However, 
I thought about 64-bit Windows as I wrote each chapter. 
Where appropriate, I have included information specific to 
64-bit Windows. In addition, I have compiled all the sample 
applications in this book using a 64-bit compiler, and I was 
able to test the applications on a very early version of 
64-bit Windows for the Alpha CPU. So, if you follow the 
sample applications in this book, and do as I've done, you 
should have no trouble creating a single source-code base that 
you can easily compile for 32-bit or 64-bit Windows.</P>

</BODY>
</HTML>






