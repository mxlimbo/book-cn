<HTML>
<HEAD>
<TITLE>Putting the Context in Context</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch07f.htm">[Previous]</A> <A HREF="ch07h.htm">[Next]</A><P>

<A NAME="102"><H1>Putting the Context in Context</H1></A>

<p>By now, you should understand the important role that the context structure plays in thread scheduling. The context structure allows the system to remember a thread's state so that the thread can pick up where it left off the next time it has a CPU to run on.</p>

<p>You might be surprised to learn that such a low-level data structure is completely documented in the Platform SDK. However, if you look up the CONTEXT structure in the documentation, all you'll see is this:</p>

<p>&quot;A CONTEXT structure contains processor-specific register data. The system uses CONTEXT structures to perform various internal operations. Currently, there are CONTEXT structures defined for Intel, MIPS, Alpha, and PowerPC processors. Refer to the header file WinNT.h for definitions of these structures.&quot; </p>

<p>The documentation does not show you the structure's members and does not describe the members in any way whatsoever because the members depend on which CPU Windows 2000 is running on. In fact, of all the data structures Windows defines, the CONTEXT structure is the only data structure that is CPU-specific. </p>

<p>So what's in the CONTEXT structure? Well, it contains a data member for each register on the host CPU. On an <i>x</i>86 machine, the members are <i>Eax</i>, <i>Ebx</i>, <i>Ecx</i>, <i>Edx</i>, and so on. For the Alpha processor, the members are <i>IntV0</i>, <i>IntT0</i>, <i>IntT1</i>, <i>IntS0</i>, <i>IntRa</i>, <i>IntZero</i>, and so on. The code fragment below shows the complete CONTEXT structure for an <i>x</i>86 CPU.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
typedef爏truct燺CONTEXT爗

牋牋//
牋牋//燭he爁lags爒alues爓ithin爐his爁lag燾ontrol爐he燾ontents爋f
牋牋//燼燙ONTEXT爎ecord.
牋牋//
牋牋//營f爐he燾ontext爎ecord爄s爑sed燼s燼n爄nput爌arameter,爐hen
牋牋//爁or爀ach爌ortion爋f爐he燾ontext爎ecord燾ontrolled燽y燼爁lag
牋牋//爓hose爒alue爄s爏et,爄t爄s燼ssumed爐hat爐hat爌ortion爋f爐he
牋牋//燾ontext爎ecord燾ontains爒alid燾ontext.營f爐he燾ontext爎ecord
牋牋//爄s燽eing爑sed爐o爉odify燼爐hreads燾ontext,爐hen爋nly爐hat
牋牋//爌ortion爋f爐he爐hreads燾ontext爓ill燽e爉odified.
牋牋//
牋牋//營f爐he燾ontext爎ecord爄s爑sed燼s燼n營N燨UT爌arameter爐o燾apture
牋牋//爐he燾ontext爋f燼爐hread,爐hen爋nly爐hose爌ortions爋f爐he爐hread's
牋牋//燾ontext燾orresponding爐o爏et爁lags爓ill燽e爎eturned.
牋牋//
牋牋//燭he燾ontext爎ecord爄s爊ever爑sed燼s燼n燨UT爋nly爌arameter.
牋牋//

牋牋DWORD燙ontextFlags;

牋牋//
牋牋//燭his爏ection爄s爏pecified/returned爄f燙ONTEXT_DEBUG_REGISTERS爄s
牋牋//爏et爄n燙ontextFlags.牋Note爐hat燙ONTEXT_DEBUG_REGISTERS爄s燦OT
牋牋//爄ncluded爄n燙ONTEXT_FULL.
牋牋//

牋牋DWORD牋燚r0;
牋牋DWORD牋燚r1;
牋牋DWORD牋燚r2;
牋牋DWORD牋燚r3;
牋牋DWORD牋燚r6;
牋牋DWORD牋燚r7;

牋牋//
牋牋//燭his爏ection爄s爏pecified/returned爄f爐he
牋牋//燙ontextFlags爓ord燾ontians爐he爁lag燙ONTEXT_FLOATING_POINT.
牋牋//

牋牋FLOATING_SAVE_AREA燜loatSave;

牋牋//
牋牋//燭his爏ection爄s爏pecified/returned爄f爐he
牋牋//燙ontextFlags爓ord燾ontians爐he爁lag燙ONTEXT_SEGMENTS.
牋牋//

牋牋DWORD牋燬egGs;
牋牋DWORD牋燬egFs;
牋牋DWORD牋燬egEs;
牋牋DWORD牋燬egDs;

牋牋//
牋牋//燭his爏ection爄s爏pecified/returned爄f爐he
牋牋//燙ontextFlags爓ord燾ontians爐he爁lag燙ONTEXT_INTEGER.
牋牋//

牋牋DWORD牋燛di;
牋牋DWORD牋燛si;
牋牋DWORD牋燛bx;
牋牋DWORD牋燛dx;
牋牋DWORD牋燛cx;
牋牋DWORD牋燛ax;

牋牋//
牋牋//燭his爏ection爄s爏pecified/returned爄f爐he
牋牋//燙ontextFlags爓ord燾ontians爐he爁lag燙ONTEXT_CONTROL.
牋牋//

牋牋DWORD牋燛bp;
牋牋DWORD牋燛ip;
牋牋DWORD牋燬egCs;牋牋牋牋牋牋牋//燤UST燘E燬ANITIZED
牋牋DWORD牋燛Flags;牋牋牋牋牋牋