<HTML>
<HEAD>
<TITLE>A Process's Kernel Object Handle Table</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch03b.htm">[Previous]</A> <A HREF="ch03d.htm">[Next]</A><P>

<A NAME="29"><H1>A Process's Kernel Object Handle Table</H1></A>

<p>When a process is initialized, the system allocates a handle table
for it. This handle table is used only for kernel objects, not for User
objects or GDI objects. The details of how the handle table is
structured and managed are undocumented. Normally I would refrain from
discussing undocumented parts of the operating system. In this case,
however, I'm making an exception because I believe that a competent
Windows programmer must understand how a process's handle table is
managed. Because this information is undocumented, I will not have all
of the details completely correct, and the internal implementation is
certainly different among Windows 2000, Windows 98, and Windows CE. So
read the following discussion to improve your understanding, not to
learn how the system really does it.</p>

<p>Table 3-1 shows what a process's handle table looks like. As you
can see, it is simply an array of data structures. Each structure
contains a pointer to a kernel object, an access mask, and some
flags.</p>

<p><b>Table 3-1.</b> <i>The structure of a process's handle table</i></p>
<table cellpadding=5 width="95%">
<tr>
<th>Index</th>

<th>Pointer to Kernel Object Memory Block</th>

<th>Access Mask (DWORD of Flag Bits)</th>

<th>Flags (DWORD of Flag Bits)</th>
</tr>
    
<tr><td vAlign=top>1</td> <td vAlign=top>0x????????</td> <td vAlign=top>0x????????</td> 
<td vAlign=top>0x????????</td></tr>

<tr><td vAlign=top>2</td><td vAlign=top>0x????????</td><td vAlign=top>0x????????</td> 
<td vAlign=top>0x????????</td></tr>

<tr><td vAlign=top>&#8230;</td><td vAlign=top>&#8230;</td><td vAlign=top>&#8230;</td><td vAlign=top>&#8230;</td></tr>
</table>


<A NAME="30"><H2>Creating a Kernel Object</H2></A>

<p>When a process first initializes, its handle table is empty. Then
when a thread in the process calls a function that creates a kernel
object, such as <i>CreateFileMapping</i>, the kernel allocates a block
of memory for the object and initializes it; the kernel then scans the
process's handle table for an empty entry. Because the handle table
in Table 3-1 is empty, the kernel finds the structure at index 1 and
initializes it. The pointer member will be set to the internal memory
address of the kernel object's data structure, the access mask will
be set to full access, and the flags will be set. (We'll discuss
the flags in the inheritance section later in this chapter.)</p>

<p>Here are some of the functions that create kernel objects (this is
in no way a complete list):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HANDLE燙reateThread(
牋燩SECURITY_ATTRIBUTES爌sa,