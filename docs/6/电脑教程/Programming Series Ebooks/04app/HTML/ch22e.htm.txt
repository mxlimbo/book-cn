<HTML>
<HEAD>
<TITLE>Injecting a DLL Using Remote Threads</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch22d.htm">[Previous]</A> <A HREF="ch22f.htm">[Next]</A><P>

<A NAME="290"><H1>Injecting a DLL Using Remote Threads</H1></A>

<p>The third method of injecting a DLL, using remote threads, offers
the greatest flexibility. It requires that you understand several
Windows features: processes, threads, thread synchronization, virtual
memory management, DLLs, and Unicode. (If you're unclear about any
of these features, please refer to their respective chapters in this
book.) Most Windows functions allow a process to manipulate only
itself. This is good because it prevents one process from corrupting
another process. However, a handful of functions do allow one process
to manipulate another. Most of these functions were originally designed
for debuggers and other tools. However, any application can call these
functions.</p>
 
<p>Basically, this DLL injection technique requires that a thread in the
target process call <i>LoadLibrary</i> to load the desired DLL. Since
we can't easily control the threads in a process other than our
own, this solution requires that we create a new thread in the target
process. Since we create this thread ourselves, we can control what
code it executes. Fortunately, Windows offers a function called <i>
CreateRemoteThread</i> that makes it easy to create a thread in another
process:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>

<PRE>
HANDLE燙reateRemoteThread(
牋燞ANDLE爃Process,