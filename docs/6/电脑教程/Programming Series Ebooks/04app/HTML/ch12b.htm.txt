<HTML>
<HEAD>
<TITLE>Working with Fibers</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch12a.htm">[Previous]</A> <A HREF="ch13a.htm">[Next]</A><P>

<A NAME="159"><H1>Working with Fibers</H1></A>

<p>The first thing to note is that the Windows kernel implements
threads. The operating system has intimate knowledge of threads and
schedules them according to the algorithm defined by Microsoft. A fiber
is implemented in user-mode code; the kernel does not have knowledge of
fibers, and they are scheduled according to the algorithm you define.
Because you define the fiber-scheduling algorithm, fibers are
nonpreemptively scheduled as far as the kernel is concerned.</p>

<p>The next thing to be aware of is that a single thread can contain
one or more fibers. As far as the kernel is concerned, a thread is
preemptively scheduled and is executing code. However, the thread
executes one fiber's code at a time&#8212;you decide which fiber.
(These concepts will become clearer as we go on.)</p>

<p>The first step you must perform when you use fibers is to turn your
existing thread into a fiber. You do this by calling <i>
ConvertThreadToFiber</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
PVOID燙onvertThreadToFiber(PVOID爌vParam);
</pre></td></tr></table></p>

<p>This function allocates memory (about 200 bytes) for the fiber's
execution context. This execution context consists of the following
elements:</p>

<ul>
<p><li>A user-defined value that is initialized to the value passed to
<i>ConvertThreadToFiber</i>'s <i>pvParam</i> argument</li></p>

<p><li>The head of a structured exception handling chain</li></p>

<p><li>The top and bottom memory addresses of the fiber's stack
(When you convert a thread to a fiber, this is also the thread's
stack.)</li></p>

<p><li>Various CPU registers, including a stack pointer, an instruction
pointer, and others</li></p>
</ul>

<p>After you allocate and initialize the fiber execution context, you
associate the address of the execution context with the thread. The
thread has been converted to a fiber, and the fiber is running on this
thread. <i>ConvertThreadToFiber</i> actually returns the memory address
of the fiber's execution context. You need to use this address
later, but you should never read from or write to the execution context
data yourself&#8212;the fiber functions manipulate the contents of the
structure for you when necessary. Now if your fiber (thread) returns or
calls <i>ExitThread</i>, the fiber and thread both die.</p>

<p>There is no reason to convert a thread to a fiber unless you plan to
create additional fibers to run on the same thread. To create another
fiber, the thread (currently running fiber) calls <i>
CreateFiber</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
PVOID燙reateFiber(
牋燚WORD燿wStackSize,