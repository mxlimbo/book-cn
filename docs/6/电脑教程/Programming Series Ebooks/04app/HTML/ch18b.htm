<HTML>
<HEAD>
<TITLE>A Process's Default Heap</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch18a.htm">[Previous]</A> <A HREF="ch18c.htm">[Next]</A><P>

<A NAME="235"><H1>A Process's Default Heap</H1></A>

<p>When a process initializes, the system creates a heap in the
process's address space. This heap is called the process's <i>
default heap</i>. By default, this heap's region of address space
is 1 MB in size. However, the system can grow a process's default
heap so that it becomes larger than this. You can change the default
region size of 1 MB using the /HEAP linker switch when you create an
application. Because a DLL does not have a heap associated with it, you
should not use the /HEAP switch when you are linking a DLL. The /HEAP
switch has the following syntax:</p>

<p><table cellpadding=5><tr><td>
<PRE>
/HEAP:<i>reserve</i>[,<i>commit</i>]
</pre></td></tr></table></p>

<p>Many Windows functions require the process's default heap. For
example, the core functions in Windows 2000 perform all of their
operations using Unicode characters and strings. If you call an ANSI
version of a Windows function, this ANSI version must convert the ANSI
strings to Unicode strings and then call the Unicode version of the
same function. To convert the strings, the ANSI function needs to
allocate a block of memory to hold the Unicode version of the string.
This block of memory is allocated from your process's default heap.
Many other Windows functions require the use of temporary memory
blocks; these blocks are allocated from the process's default heap.
Also, the old 16-bit Windows functions <i>LocalAlloc</i> and 
<i>GlobalAlloc</i> make their memory allocations from the process's
default heap.</p>

<p>Because the process's default heap is used by many of the
Windows functions, and because your application has many threads
simultaneously calling the various Windows functions, access to the
default heap is serialized. In other words, the system guarantees that
only one thread at a time can allocate or free blocks of memory in the
default heap at any given time. If two threads attempt to
simultaneously allocate a block of memory in the default heap, only one
thread will be able to allocate a block; the other thread will be
forced to wait until the first thread's block is allocated. Once
the first thread's block is allocated, the heap functions will
allow the second thread to allocate a block. This serialized access
causes a small performance hit. If your application has only one thread
and you want to have the fastest possible access to a heap, you should
create your own separate heap and not use the process's default
heap. Unfortunately, you cannot tell the Windows functions not to use
the default heap, so their accesses to the heap are always
serialized.</p>

<p>A single process can have several heaps at once. These heaps can be
created and destroyed during the lifetime of the process. The default
heap, however, is created before the process begins execution and is
destroyed automatically when the process terminates. You cannot destroy
the process's default heap. Each heap is identified with its own
heap handle, and all of the heap functions that allocate and free
blocks within a heap require this heap handle as a parameter.</p>

<p>You can obtain the handle to your process's default heap by
calling <i>GetProcessHeap</i>:</p>

<p><table cellpadding=5><tr><td>
<PRE>
HANDLE GetProcessHeap();
</pre></td></tr></table></p>


</BODY>
</HTML>






