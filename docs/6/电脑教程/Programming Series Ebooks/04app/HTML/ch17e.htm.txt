<HTML>
<HEAD>
<TITLE>Processing a Big File Using Memory-Mapped Files</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch17d.htm">[Previous]</A> <A HREF="ch17f.htm">[Next]</A><P>

<A NAME="225"><H1>Processing a Big File Using Memory-Mapped Files</H1></A>

<p>In an earlier section, I said I would tell you how to map a 16-EB
file into a small address space. Well, you can't. Instead, you must
map a view of the file that contains only a small portion of the
file's data. You should start by mapping a view of the very
beginning of the file. When you've finished accessing the first
view of the file, you can unmap it and then map a new view starting at
an offset deeper within the file. You'll need to repeat this
process until you access the complete file. This certainly makes
dealing with large memory-mapped files less convenient, but fortunately
most files are small enough that this problem doesn't usually come
up.</p>

<p>Let's look at an example using an 8-GB file and a 32-bit address
space. Here is a routine that counts all the 0 bytes in a binary data
file in several steps:</p>

<p><table width="95%" cellpadding="5"><tr><td>
<pre>
_ _int64燙ount0s(void)爗

牋