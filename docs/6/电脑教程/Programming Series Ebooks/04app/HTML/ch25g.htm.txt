<HTML>
<HEAD>
<TITLE>C++ Exceptions Versus Structured Exceptions</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch25f.htm">[Previous]</A> <A HREF="ch26a.htm">[Next]</A><P>

<A NAME="346"><H1>C++ Exceptions Versus Structured Exceptions</H1></A>

<p>Developers frequently ask me whether they should use structured
exceptions or C++ exceptions when developing their applications.
I'd like to offer an answer in this section.</p>

<p>Let me start by reminding you that SEH is an operating system facility
available in any programming language, while C++ EH can only be used
when writing C++ code. If you're writing a C++ application, you
should use C++ exceptions instead of structured exceptions. The reason
is that C++ exceptions are part of the language and therefore the
compiler knows what a C++ class object is. This means that the compiler
automatically generates code to call C++ object destructors in order to
guarantee object cleanup.</p>

<p>However, you should know that Microsoft's Visual C++ compiler has
implemented C++ exception handling using the operating system's
structured exception handling. So, when you create a C++ <i>try</i>
block, the compiler is generating an SEH <i>_ _try</i> block. A C++ <i>
catch</i> test becomes an SEH exception filter and the code in the <i>
catch</i> block becomes the code in the SEH <i>_ _except</i> block. In
fact, when you write a C++ <i>throw</i> statement, the compiler
generates a call to the Windows <i>RaiseException</i> function. The
variable used in the <i>throw</i> statement is passed as an additional
argument to <i>RaiseException</i>.</p>

<p>The following code fragment will help make all of this a little
clearer. The function on the top uses C++ exception handling and the
function on the bottom demonstrates how the C++ compiler generates the
equivalent structured exception handling.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
void燙hunkyFunky()爗
牋爐ry爗
牋牋牋//燭ry燽ody

牋牋牋<img src="images/grayvellip.JPG" width=3 height=13 border=0>

牋牋牋throw