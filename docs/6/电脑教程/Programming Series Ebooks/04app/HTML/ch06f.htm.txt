<HTML>
<HEAD>
<TITLE>Terminating a Thread</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06e.htm">[Previous]</A> <A HREF="ch06g.htm">[Next]</A><P>

<A NAME="84"><H1>Terminating a Thread</H1></A>

<p>A thread can be terminated in four ways:</p>

<ul>
<p><li>The thread function returns. (This is highly recommended.)</li></p>

<p><li>The thread kills itself by calling the <i>ExitThread</i>
function. (Avoid this method.)</li></p>

<p><li>A thread in the same or in another process calls the <i>
TerminateThread</i> function. (Avoid this method.)</li></p>

<p><li>The process containing the thread terminates. (Avoid this
method.)</li></p>
</ul>


<p>This section discusses all four methods for terminating a thread and
describes what happens when a thread ends.</p>

<A NAME="85"><H3>The Thread Function Returns</H3></A>

<p>You should always design your thread functions so that they return
when you want the thread to terminate. This is the only way to
guarantee that all your thread's resources are cleaned up
properly.</p>

<p>Having your thread function return ensures the following:</p>

<ul>
<p><li>Any and all C++ objects created in your thread function will be
destroyed properly via their destructors.</li></p>

<p><li>The operating system will properly free the memory used by the
thread's stack.</li></p>

<p><li>The system will set the thread's exit code (maintained in the
thread's kernel object) to your thread function's return
value.</li></p>

<p><li>The system will decrement the usage count of the thread's
kernel object.</li></p>
</ul>


<A NAME="86"><h3>The <i>ExitThread</i> Function</h3></A>
<p>You can force your thread to terminate by having it call <i>
ExitThread</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID燛xitThread(DWORD燿wExitCode);
</pre></td></tr></table></p> 

<p>This function terminates the thread and causes the operating system
to clean up all of the operating system resources that were used by the
thread. However, your C/C++ resources (such as C++ class objects) will
not be destroyed. For this reason, it is much better to simply return
from your thread function instead of calling <i>ExitThread</i>
yourself. (For more information, see the section titled &quot;<A HREF="ch04d.htm#59">The <i>ExitProcess</i> Function</A>&quot; in Chapter 4.)</p>

<p>Of course, you use <i>ExitThread</i>'s <i>dwExitCode</i>
parameter to tell the system what to set the thread's exit code to.
The <i>ExitThread</i> function does not return a value because the
thread has terminated and cannot execute any more code.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The recommended way to have a thread terminate is by having its thread
function simply return (as described in the previous section). However,
if you use the method described in this section, be aware that the <i>
ExitThread</i> function is the Windows function that kills a thread. If
you are writing C/C++ code, you should never call <i>ExitThread</i>.
Instead, you should use the Visual C++ run-time library function <i>
_endthreadex</i>. If you do not use Microsoft's Visual C++
compiler, your compiler vendor will have its own alternative to <i>
ExitThread</i>. Whatever this alternative is, you must use it. I will
explain what <i>_endthreadex</i> does and why it is so important later
in this chapter.
</blockquote></div></p>

<A NAME="87"><h3>The <i>TerminateThread</i> Function</h3></A>
<p>A call to <i>TerminateThread</i> also kills a thread:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL燭erminateThread(
牋燞ANDLE爃Thread,