<HTML>
<HEAD>
<TITLE>System Information</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch14a.htm">[Previous]</A> <A HREF="ch14c.htm">[Next]</A><P>

<A NAME="184"><H1>System Information</H1></A>

<p>Many operating system values are dependent on the host machine: page size, allocation granularity size, and so on. These values should never be hard-coded into your source code. Instead, you should always retrieve these values when your process initializes and use the retrieved values within your source code. The <i>GetSystemInfo</i> function retrieves the values relevant to the host machine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID GetSystemInfo(LPSYSTEM_INFO psinf);
</pre>
</td></tr></table></p>

<p>You must pass the address of a SYSTEM_INFO structure to this
function. The function will initialize all of the structure's
members and return. Here is what the SYSTEM_INFO data structure looks like:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
typedef struct _SYSTEM_INFO {
   union {
      DWORD dwOemId;   // Obsolete, do not use
      struct {
         WORD wProcessorArchitecture;
         WORD wReserved;
      };
   };
   DWORD     dwPageSize;
   LPVOID    lpMinimumApplicationAddress;
   LPVOID    lpMaximumApplicationAddress;
   DWORD_PTR dwActiveProcessorMask;
   DWORD     dwNumberOfProcessors;
   DWORD     dwProcessorType;
   DWORD     dwAllocationGranularity;
   WORD      wProcessorLevel;
   WORD      wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;
</pre>
</td></tr></table></p>

<p>When the system boots, it determines what the values of these
members should be. For any given system, the values will always be the same, so you will never need to call this function more than once for any given process. <i>GetSystemInfo</i> exists so that an application can query these values at run time. Of all the members in the structure, only four of them have anything to do with memory. These four members are explained in the following table.</p>

<p><table width="95%" cellpadding="5">
<tr>
<th>Member Name</th>
<th>Description</th>
</tr>
<tr>
<td valign="TOP"><i>dwPageSize</i></td>
<td valign="TOP">Shows the CPU's page size. On x86, this value
is 4096 bytes; on Alpha CPUs, this value is 8192 bytes; and on IA-64, this value is 8192 bytes.</td>
</tr>
<tr>
<td valign="TOP"><i>lpMinimumApplicationAddress</i></td>
<td valign="TOP">Gives the minimum memory address of every process's usable address space. On Windows 98, this value is 4,194,304, or 0x00400000, because the bottom 4 MB of every process's address space is unusable. On Windows 2000, this value is 65,536, or 0x00010000, because the first 64 KB of every process's address space is always free.</td>
</tr>
<tr>
<td valign="TOP"><i>lpMaximumApplicationAddress</i></td>
<td valign="TOP">Gives the maximum memory address of every process's usable private address space. On Windows 98, this address is 2,147,483,647, or 0x7FFFFFFF, because the shared memory-mapped file region and the shared operating system code are contained in the top 2-GB partition. On Windows 2000, this address is where kernel-mode memory starts, less 64 KB.</td>
</tr>
<tr>
<td valign="TOP"><i>dwAllocationGranularity</i></td>
<td valign="TOP">Shows the granularity of a reserved region of address space. As of this writing, this value is 65,536 on all Windows platforms.</td>
</tr>
</table></p>

<p>The other members of this structure are not at all related to memory management; I explain them here for completeness.</p>

<p><table width="95%" cellpadding="5">
<tr>
<th>Member Name</th>
<th>Description</th>
</tr>
<tr>
<td valign="TOP"><i>dwOemId</i></td>
<td valign="TOP">Obsolete, do not reference</td>
</tr>
<tr>
<td valign="TOP"><i>wReserved</i></td>
<td valign="TOP">Reserved for future use, do not reference</td>
</tr>
<tr>
<td valign="TOP"><i>dwNumberOfProcessors</i></td>
<td valign="TOP">Indicates the number of CPUs in the machine</td>
</tr>
<tr>
<td valign="TOP"><i>dwActiveProcessorMask</i></td>
<td valign="TOP">A bitmask indicating which CPUs are active (allowed to run threads)</td>
</tr>
<tr>
<td valign="TOP"><i>dwProcessorType</i></td>
<td valign="TOP">Used for Windows 98 only&#8212;not for Windows 2000; indicates the processor type, such as Intel 386, 486, or Pentium</td>
</tr>
<tr>
<td valign="TOP"><i>wProcessorArchitecture</i></td>
<td valign="TOP">Used only for Windows 2000&#8212;not for Windows 98; indicates the processor architecture, such as Intel, Alpha, Intel 64-bit, or Alpha 64-bit</td>
</tr>
<tr>
<td valign="TOP"><i>wProcessorLevel</i></td>
<td valign="TOP">Used only for Windows 2000&#8212;not for Windows 98; breaks down the process architecture further, such as specifying Intel Pentium Pro or Pentium II</td>
</tr>
<tr>
<td valign="TOP"><i>wProcessorRevision</i></td>
<td valign="TOP">Used only for Windows 2000&#8212;not for Windows 98; breaks down the processor level further</td>
</tr>
</table></p>

<A NAME="185"><H2>The System Information Sample Application</H2></A>

<p>The SysInfo application (&quot;14 SysInfo.exe&quot;)&#8212;listed in Figure 14-1 below&#8212;is a simple program that calls <i>GetSystemInfo</i> and displays the information returned in the SYSTEM_INFO structure. The source code and resource files for the application are in the 14-SysInfo directory on the companion CD-ROM. The following dialog boxes show the results of running the SysInfo application on several different platforms.</p>

<p>
<img src="images/G14si01a.JPG" width=285 height=183 border="0">
</p><p>
<i>Windows 98 on</i> x<i>86</i>
</p>

<p>
<img src="images/G14si01b.JPG" width=285 height=183 border="0">
</p><p>
<i>32-bit Windows 2000 on</i> x<i>86</i>
</p>


<p>
<img src="images/G14si01c.JPG" width=285 height=183 border="0">
</p><p>
<i>32-bit Windows 2000 on Alpha</i>
</p>

<p>
<img src="images/G14si01d.JPG" width=285 height=183 border="0">
</p><p>
<i>64-bit Windows on Alpha</i>
</p>

<p>
<b>Figure 14-1.</b> <i>The SysInfo Application</i>
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<p><b>SysInfo.cpp</b></p>
<PRE>
/******************************************************************************
Module:  SysInfo.cpp
Notices: Copyright (c) 2000 Jeffrey Richter
******************************************************************************/


#include &quot;..\CmnHdr.h&quot;     /* See Appendix A. */
#include &lt;windowsx.h&gt;
#include &lt;tchar.h&gt;
#include &lt;stdio.h&gt;
#include &quot;Resource.h&quot;


///////////////////////////////////////////////////////////////////////////////


// Set to TRUE if the app is running on Windows 9x.
BOOL g_fWin9xIsHost = FALSE;


///////////////////////////////////////////////////////////////////////////////


// This function accepts a number and converts it to a
// string, inserting commas where appropriate.
PTSTR BigNumToString(LONG lNum, PTSTR szBuf) {

   TCHAR szNum[100];
   wsprintf(szNum, TEXT(&quot;%d&quot;), lNum);
   NUMBERFMT nf;
   nf.NumDigits = 0;
   nf.LeadingZero = FALSE;
   nf.Grouping = 3;
   nf.lpDecimalSep = TEXT(&quot;.&quot;);
   nf.lpThousandSep = TEXT(&quot;,&quot;);
   nf.NegativeOrder = 0;
   GetNumberFormat(LOCALE_USER_DEFAULT, 0, szNum, &amp;nf, szBuf, 100);
   return(szBuf);
}


///////////////////////////////////////////////////////////////////////////////


void ShowCPUInfo(HWND hwnd, WORD wProcessorArchitecture, WORD wProcessorLevel, 
   WORD wProcessorRevision) {

   TCHAR szCPUArch[64]  = TEXT(&quot;(unknown)&quot;);
   TCHAR szCPULevel[64] = TEXT(&quot;(unknown)&quot;);
   TCHAR szCPURev[64]   = TEXT(&quot;(unknown)&quot;);

   switch (wProcessorArchitecture) {
      case PROCESSOR_ARCHITECTURE_INTEL: 
         lstrcpy(szCPUArch, TEXT(&quot;Intel&quot;)); 
         switch (wProcessorLevel) {
         case 3: case 4:
            wsprintf(szCPULevel, TEXT(&quot;80%c86&quot;), wProcessorLevel + '0');
            if (!g_fWin9xIsHost) 
               wsprintf(szCPURev, TEXT(&quot;%c%d&quot;), 
               HIBYTE(wProcessorRevision) + TEXT('A'), 
               LOBYTE(wProcessorRevision));
            break;

         case 5:
            wsprintf(szCPULevel, TEXT(&quot;Pentium&quot;));
            if (!g_fWin9xIsHost) 
               wsprintf(szCPURev, TEXT(&quot;Model %d, Stepping %d&quot;),
                  HIBYTE(wProcessorRevision), LOBYTE(wProcessorRevision));
            break;

         case 6:
            wsprintf(szCPULevel, TEXT(&quot;Pentium Pro or Pentium II&quot;));
            if (!g_fWin9xIsHost) 
               wsprintf(szCPURev, TEXT(&quot;Model %d, Stepping %d&quot;),
                  HIBYTE(wProcessorRevision), LOBYTE(wProcessorRevision));
            break;
         }
         break;

      case PROCESSOR_ARCHITECTURE_ALPHA: 
         lstrcpy(szCPUArch, TEXT(&quot;Alpha&quot;));
         wsprintf(szCPULevel, TEXT(&quot;%d&quot;), wProcessorLevel);
         wsprintf(szCPURev, TEXT(&quot;Model %c, Pass %d&quot;), 
            HIBYTE(wProcessorRevision) + TEXT('A'), 
            LOBYTE(wProcessorRevision));
         break;

      case PROCESSOR_ARCHITECTURE_IA64:
         lstrcpy(szCPUArch, TEXT(&quot;IA-64&quot;));
         wsprintf(szCPULevel, TEXT(&quot;%d&quot;), wProcessorLevel);
         wsprintf(szCPURev, TEXT(&quot;Model %c, Pass %d&quot;), 
            HIBYTE(wProcessorRevision) + TEXT('A'), 
            LOBYTE(wProcessorRevision));
         break;

      case PROCESSOR_ARCHITECTURE_ALPHA64:
         lstrcpy(szCPUArch, TEXT(&quot;Alpha64&quot;));
         wsprintf(szCPULevel, TEXT(&quot;%d&quot;), wProcessorLevel);
         wsprintf(szCPURev, TEXT(&quot;Model %c, Pass %d&quot;), 
            HIBYTE(wProcessorRevision) + TEXT('A'), 
            LOBYTE(wProcessorRevision));
         break;

      case PROCESSOR_ARCHITECTURE_UNKNOWN:
      default:
         wsprintf(szCPUArch, TEXT(&quot;Unknown&quot;));
         break;
   }
   SetDlgItemText(hwnd, IDC_PROCARCH,  szCPUArch);
   SetDlgItemText(hwnd, IDC_PROCLEVEL, szCPULevel);
   SetDlgItemText(hwnd, IDC_PROCREV,   szCPURev);
}


///////////////////////////////////////////////////////////////////////////////

BOOL Dlg_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) {

   chSETDLGICONS(hwnd, IDI_SYSINFO);

   SYSTEM_INFO sinf;
   GetSystemInfo(&amp;sinf);

   if (g_fWin9xIsHost) {
      sinf.wProcessorLevel = (WORD) (sinf.dwProcessorType / 100);
   }

   ShowCPUInfo(hwnd, sinf.wProcessorArchitecture,
      sinf.wProcessorLevel, sinf.wProcessorRevision);

   TCHAR szBuf[50];
   SetDlgItemText(hwnd, IDC_PAGESIZE,
      BigNumToString(sinf.dwPageSize, szBuf));

   _stprintf(szBuf, TEXT(&quot;%p&quot;), sinf.lpMinimumApplicationAddress);
   SetDlgItemText(hwnd, IDC_MINAPPADDR, szBuf);

   _stprintf(szBuf, TEXT(&quot;%p&quot;), sinf.lpMaximumApplicationAddress);
   SetDlgItemText(hwnd, IDC_MAXAPPADDR, szBuf);

   _stprintf(szBuf, TEXT(&quot;0x%016I64X&quot;), (_ _int64) sinf.dwActiveProcessorMask);
   SetDlgItemText(hwnd, IDC_ACTIVEPROCMASK, szBuf);

   SetDlgItemText(hwnd, IDC_NUMOFPROCS,
      BigNumToString(sinf.dwNumberOfProcessors, szBuf));

   SetDlgItemText(hwnd, IDC_ALLOCGRAN,
      BigNumToString(sinf.dwAllocationGranularity, szBuf));

   return(TRUE);
}

///////////////////////////////////////////////////////////////////////////////

void Dlg_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) {

   switch (id) {
      case IDCANCEL:
         EndDialog(hwnd, id);
         break;
   }
}


///////////////////////////////////////////////////////////////////////////////


INT_PTR WINAPI Dlg_Proc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam) {

   switch (uMsg) {
      chHANDLE_DLGMSG(hDlg, WM_INITDIALOG, Dlg_OnInitDialog);
      chHANDLE_DLGMSG(hDlg, WM_COMMAND,    Dlg_OnCommand);
   }
   return(FALSE);
}


///////////////////////////////////////////////////////////////////////////////


int WINAPI _tWinMain(HINSTANCE hinstExe, HINSTANCE, PTSTR pszCmdLine, int) {

   OSVERSIONINFO vi = { sizeof(vi) };
   GetVersionEx(&amp;vi);
   g_fWin9xIsHost = (vi.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS);

   DialogBox(hinstExe, MAKEINTRESOURCE(IDD_SYSINFO), NULL, Dlg_Proc);
   return(0);
}

//////////////////////////////// End of File //////////////////////////////////
</PRE>
</TD></TR></TABLE></P>


<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<p><b>SysInfo.rc</b></p>
<PRE>
//Microsoft Developer Studio generated resource script.
//
#include &quot;Resource.h&quot;

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include &quot;afxres.h&quot;

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// English (U.S.) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
#ifdef _WIN32
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
#pragma code_page(1252)
#endif //_WIN32

#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;Resource.h\0&quot;
END

2 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;#include &quot;&quot;afxres.h&quot;&quot;\r\n&quot;
   &quot;\0&quot;
END

3 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;\r\n&quot;
   &quot;\0&quot;
END

#endif    // APSTUDIO_INVOKED


/////////////////////////////////////////////////////////////////////////////
//
// Dialog
//

IDD_SYSINFO DIALOG DISCARDABLE  18, 18, 186, 97
STYLE WS_MINIMIZEBOX | WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU
CAPTION &quot;System Info&quot;
FONT 8, &quot;MS Sans Serif&quot;
BEGIN
   RTEXT           &quot;Processor Architecture:&quot;,IDC_STATIC,4,4,88,8,
                    SS_NOPREFIX
   RTEXT           &quot;ID_PROCARCH&quot;,IDC_PROCARCH,96,4,84,8,SS_NOPREFIX
   RTEXT           &quot;Processor level:&quot;,IDC_STATIC,4,14,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_PROCLEVEL&quot;,IDC_PROCLEVEL,96,14,84,8,SS_NOPREFIX
   RTEXT           &quot;Processor revision:&quot;,IDC_STATIC,4,24,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_PROCREV&quot;,IDC_PROCREV,96,24,84,8,SS_NOPREFIX
   RTEXT           &quot;Number of processors:&quot;,IDC_STATIC,4,34,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_NUMOFPROCS&quot;,IDC_NUMOFPROCS,96,34,84,8,SS_NOPREFIX
   RTEXT           &quot;Active processor mask:&quot;,IDC_STATIC,4,44,88,8,
                    SS_NOPREFIX
   RTEXT           &quot;ID_ACTIVEPROCMASK&quot;,IDC_ACTIVEPROCMASK,96,44,84,8,
                    SS_NOPREFIX
   RTEXT           &quot;Allocation granularity:&quot;,IDC_STATIC,4,54,88,8,
                    SS_NOPREFIX
   RTEXT           &quot;ID_ALLOCGRAN&quot;,IDC_ALLOCGRAN,96,54,84,8,SS_NOPREFIX
   RTEXT           &quot;Page size:&quot;,IDC_STATIC,4,64,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_PAGESIZE&quot;,IDC_PAGESIZE,96,64,84,8,SS_NOPREFIX
   RTEXT           &quot;Minimum app. address:&quot;,IDC_STATIC,4,74,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_MINAPPADDR&quot;,IDC_MINAPPADDR,96,74,84,8,SS_NOPREFIX
   RTEXT           &quot;Maximum app. address:&quot;,IDC_STATIC,4,84,88,8,SS_NOPREFIX
   RTEXT           &quot;ID_MAXAPPADDR&quot;,IDC_MAXAPPADDR,96,84,84,8,SS_NOPREFIX
END


/////////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDI_SYSINFO             ICON    DISCARDABLE     &quot;SysInfo.Ico&quot;

/////////////////////////////////////////////////////////////////////////////
//
// DESIGNINFO
//

#ifdef APSTUDIO_INVOKED
GUIDELINES DESIGNINFO DISCARDABLE 
BEGIN
   IDD_SYSINFO, DIALOG
   BEGIN
      RIGHTMARGIN, 170
      BOTTOMMARGIN, 77
   END
END
#endif    // APSTUDIO_INVOKED

#endif    // English (U.S.) resources
/////////////////////////////////////////////////////////////////////////////



#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//


/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</pre>
</td></tr></table></p>


</BODY>
</HTML>






