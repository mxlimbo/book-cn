<HTML>
<HEAD>
<TITLE>Regions in an Address Space</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch13c.htm">[Previous]</A> <A HREF="ch13e.htm">[Next]</A><P>

<A NAME="172"><H1>Regions in an Address Space</H1></A>

<p>When a process is created and given its address space, the bulk of
this usable address space is <i>free,</i> or unallocated. To use
portions of this address space, you must allocate regions within it by
calling <i>VirtualAlloc</i> (discussed in <A HREF="ch15a.htm">Chapter 15</A>). The act of
allocating a region is called <i>reserving</i>.</p>

<p>Whenever you reserve a region of address space, the system ensures
that the region begins on an <i>allocation granularity</i> boundary.
The allocation granularity can vary from one CPU platform to another.
However, as of this writing, all the CPU platforms (<i>x</i>86, 32-bit
Alpha, 64-bit Alpha, and IA-64) use the same allocation granularity of
64 KB.</p>

<p>When you reserve a region of address space, the system ensures that
the size of the region is a multiple of the system's <i>page</i>
size. A page is a unit of memory that the system uses in managing
memory. Like the allocation granularity, the page size can vary from
one CPU to another. The <i>x</i>86 uses a 4-KB page size, whereas the
Alpha (when running both 32-bit Windows 2000 and 64-bit Windows 2000)
uses an 8-KB page size. At the time of this writing, Microsoft expects
the IA-64 to also use an 8-KB page size. However, Microsoft might
switch to a larger page size (16 KB or higher) if testing indicates
better overall system performance.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Sometimes the system reserves regions of address space on behalf of
your process. For example, the system allocates a region of address
space to store a <i>process environment block</i> (PEB). A PEB is a
small data structure created, manipulated, and destroyed entirely by
the system. When a process is created, the system allocates a region of
address space for the PEB.

<p>The system also needs to create <i>thread environment
blocks</i> (TEBs) to help manage all the threads that currently exist
in the process. The regions for these TEBs will be reserved and
released as threads in the process are created and destroyed. </p>

<p>Although the system demands that any of your requests to reserve
address space regions begin on an allocation granularity boundary (64
KB on all platforms to date), the system itself is not subjected to the
same limitation. It is extremely likely that the region reserved for
your process's PEB and TEBs will not start on a 64-KB boundary.
However, these reserved regions will still have to be a multiple of the
CPU's page size.</p>
</blockquote></div></p>

<p>If you attempt to reserve a 10-KB region of address space, the
system will automatically round up your request and reserve a region
whose size is a multiple of the page size. This means that on an <i>
x</i>86, the system will reserve a region that is 12 KB; on an Alpha,
the system will reserve a 16-KB region.</p>

<p>When your program's algorithms no longer need to access a
reserved region of address space, the region should be freed. This
process is called <i>releasing</i> the region of address space and is
accomplished by calling the <i>VirtualFree</i> function.</p>

</BODY>
</HTML>






