<HTML>
<HEAD>
<TITLE>Software Exceptions</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch24g.htm">[Previous]</A> <A HREF="ch25a.htm">[Next]</A><P>

<A NAME="334"><H1>Software Exceptions</H1></A>

<p>So far, we have been discussing hardware exceptions in which the CPU
catches an event and raises an exception. It is also possible for your
code to forcibly raise an exception. This is another way for a function
to indicate failure to its caller. Traditionally, functions that can
fail return some special value to indicate failure. The caller of the
function is supposed to check for this special value and take an
alternative course of action. Frequently, the caller has to clean up
what it's doing and return its own failure code back to its caller.
This propagating of error codes causes your source code to become much
more difficult to write and to maintain. </p>

<p>An alternative approach is to have functions raise exceptions when they
fail. With this approach, the code is much easier to write and to
maintain. Plus, the code typically performs better without all of the
error testing code being executed. In fact, the error-testing code only
executes if there is a failure, and this is the exceptional case.</p>

<p>Unfortunately, most developers do not get into the habit of using
exceptions for error handling. There are two basic reasons for this.
The first reason is that most developers are unfamiliar with SEH. Even
if one developer is acquainted with it, other developers might not be.
If one developer writes a function that raises an exception but other
developers don't write SEH frames to trap the exception, the
process will be terminated by the operating system.</p>
 
<p>The second reason why developers avoid SEH is that it is not portable
to other operating systems. Many companies target multiple operating
systems and would like to have a single source code base for their
products, which is certainly understandable. SEH is a Windows-specific
technology.</p>

<p>However, if you decide to return errors via exceptions, I applaud
your decision and this section is for you. First, let's look at the
Windows Heap functions such as <i>HeapCreate</i>, <i>HeapAlloc</i>, and
so on. You'll recall from <A HREF="ch18a.htm">Chapter 18</A> that these functions offer
developers a choice. Normally when any of the heap functions fail, they
return NULL to indicate failure. You can, however, pass the
HEAP_GENERATE_EXCEPTIONS flag to any of these heap functions. If you
use this flag and the function fails, the function does not return
NULL; instead, the function raises a STATUS_NO_MEMORY software
exception that other parts of your code can catch with an SEH
frame.</p>

<p>If you want to take advantage of this exception, you can code your
<i>try</i> block as though the memory allocation will always succeed;
if the allocation fails, you can either handle the exception by using
an <i>except</i> block or have your function clean up by matching the
<i>try</i> block with a <i>finally</i> block. How convenient!</p>
 
<p>Your application traps software exceptions exactly the same way that it
traps hardware exceptions. In other words, everything I said in the
last chapter applies equally well to software exceptions. </p>

<p>What we want to concentrate on in this section is how to have your own
functions forcibly raise software exceptions as a method for indicating
failure. In fact, you can implement your functions similarly to
Microsoft's implementation of the heap functions: have your callers
pass a flag that tells your function how it should indicate
failures. </p>

<p>Raising a software exception couldn't be easier. You simply call
the <i>RaiseException</i> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID燫aiseException(
牋燚WORD燿wExceptionCode,