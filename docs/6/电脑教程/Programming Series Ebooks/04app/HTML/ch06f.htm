<HTML>
<HEAD>
<TITLE>Terminating a Thread</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06e.htm">[Previous]</A> <A HREF="ch06g.htm">[Next]</A><P>

<A NAME="84"><H1>Terminating a Thread</H1></A>

<p>A thread can be terminated in four ways:</p>

<ul>
<p><li>The thread function returns. (This is highly recommended.)</li></p>

<p><li>The thread kills itself by calling the <i>ExitThread</i>
function. (Avoid this method.)</li></p>

<p><li>A thread in the same or in another process calls the <i>
TerminateThread</i> function. (Avoid this method.)</li></p>

<p><li>The process containing the thread terminates. (Avoid this
method.)</li></p>
</ul>


<p>This section discusses all four methods for terminating a thread and
describes what happens when a thread ends.</p>

<A NAME="85"><H3>The Thread Function Returns</H3></A>

<p>You should always design your thread functions so that they return
when you want the thread to terminate. This is the only way to
guarantee that all your thread's resources are cleaned up
properly.</p>

<p>Having your thread function return ensures the following:</p>

<ul>
<p><li>Any and all C++ objects created in your thread function will be
destroyed properly via their destructors.</li></p>

<p><li>The operating system will properly free the memory used by the
thread's stack.</li></p>

<p><li>The system will set the thread's exit code (maintained in the
thread's kernel object) to your thread function's return
value.</li></p>

<p><li>The system will decrement the usage count of the thread's
kernel object.</li></p>
</ul>


<A NAME="86"><h3>The <i>ExitThread</i> Function</h3></A>
<p>You can force your thread to terminate by having it call <i>
ExitThread</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID ExitThread(DWORD dwExitCode);
</pre></td></tr></table></p> 

<p>This function terminates the thread and causes the operating system
to clean up all of the operating system resources that were used by the
thread. However, your C/C++ resources (such as C++ class objects) will
not be destroyed. For this reason, it is much better to simply return
from your thread function instead of calling <i>ExitThread</i>
yourself. (For more information, see the section titled &quot;<A HREF="ch04d.htm#59">The <i>ExitProcess</i> Function</A>&quot; in Chapter 4.)</p>

<p>Of course, you use <i>ExitThread</i>'s <i>dwExitCode</i>
parameter to tell the system what to set the thread's exit code to.
The <i>ExitThread</i> function does not return a value because the
thread has terminated and cannot execute any more code.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The recommended way to have a thread terminate is by having its thread
function simply return (as described in the previous section). However,
if you use the method described in this section, be aware that the <i>
ExitThread</i> function is the Windows function that kills a thread. If
you are writing C/C++ code, you should never call <i>ExitThread</i>.
Instead, you should use the Visual C++ run-time library function <i>
_endthreadex</i>. If you do not use Microsoft's Visual C++
compiler, your compiler vendor will have its own alternative to <i>
ExitThread</i>. Whatever this alternative is, you must use it. I will
explain what <i>_endthreadex</i> does and why it is so important later
in this chapter.
</blockquote></div></p>

<A NAME="87"><h3>The <i>TerminateThread</i> Function</h3></A>
<p>A call to <i>TerminateThread</i> also kills a thread:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL TerminateThread(
   HANDLE hThread, 
   DWORD dwExitCode);
</pre></td></tr></table></p>

<p>Unlike <i>ExitThread,</i> which always kills the calling thread, <i>
TerminateThread</i> can kill any thread. The <i>hThread</i> parameter
identifies the handle of the thread to be terminated. When the thread
terminates, its exit code becomes the value you passed as the <i>
dwExitCode</i> parameter. Also, the thread's kernel object has its
usage count decremented.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The <i>TerminateThread</i> function is asynchronous. That is, it tells the
system that you want the thread to terminate but the thread is not
guaranteed to be killed by the time the function returns. If you need
to know for sure that the thread has terminated, you might want to call
<i>WaitForSingleObject</i> (described in <A HREF="ch09a.htm">Chapter 9</A>) or a similar
function, passing the handle of the thread.
</blockquote></div></p>

<p>A well-designed application never uses this function because the
thread being terminated receives no notification that it is dying. The
thread cannot clean up properly and it cannot prevent itself from being
killed.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When a thread dies by returning or calling <i>ExitThread</i>, the stack for
the thread is destroyed. However, if <i>TerminateThread</i> is used,
the system does not destroy the thread's stack until the process
that owned the thread terminates. Microsoft purposely implemented <i>
TerminateThread</i> in this way. If other still-executing threads were
to reference values on the forcibly killed thread's stack, these
other threads would raise access violations. By leaving the killed
thread's stack in memory, other threads can continue to execute
just fine. 
<p>In addition, DLLs usually receive notifications when a
thread is terminating. If a thread is forcibly killed with <i>
TerminateThread</i>, however, the DLLs do not receive this
notification, which can prevent proper cleanup. (See <A HREF="ch20a.htm">Chapter 20</A> for
more information.)</p>
</blockquote></div></p>

<A NAME="88"><H3>When a Process Terminates</H3></A>

<p>The <i>ExitProcess</i> and <i>TerminateProcess</i> functions
discussed in <A HREF="ch04a.htm">Chapter 4</A> also terminate threads. The difference is that
these functions terminate all the threads contained in the process
being terminated. Also, since the entire process is being shut down,
all resources in use by the process are guaranteed to be cleaned up.
This certainly includes any and all thread stacks. These two functions
cause the remaining threads in the process to be forcibly killed, as if
<i>TerminateThread</i> were called for each remaining thread.
Obviously, this means that proper application cleanup does not occur:
C++ object destructors aren't called, data isn't flushed to
disk, and so on.</p>

<A NAME="89"><H3>When a Thread Terminates</H3></A>

<p>The following actions occur when a thread terminates:</p>

<ul>
<p><li>All User object handles owned by the thread are freed. In
Windows, most objects are owned by the process containing the thread
that creates the objects. However, a thread owns two User objects:
windows and hooks. When a thread dies, the system automatically
destroys any windows and uninstalls any hooks that were created or
installed by the thread. Other objects are destroyed only when the
owning process terminates.</li></p>

<p><li>The thread's exit code changes from STILL_ACTIVE to the code
passed to <i>ExitThread</i> or <i>TerminateThread</i>.</li></p>

<p><li>The state of the thread kernel object becomes signaled.</li></p>

<p><li>If the thread is the last active thread in the process, the
system considers the process terminated as well.</li></p>

<p><li>The thread kernel object's usage count is decremented by
1.</li></p>
</ul>


<p>When a thread terminates, its associated thread kernel object
doesn't automatically become freed until all the outstanding
references to the object are closed.</p>

<p>Once a thread is no longer running, there isn't much any other
thread in the system can do with the thread's handle. However,
these other threads can call <i>GetExitCodeThread</i> to check whether
the thread identified by <i>hThread</i> has terminated and, if it has,
determine its exit code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL GetExitCodeThread(
   HANDLE hThread, 
   PDWORD pdwExitCode);
</pre></td></tr></table></p>

<p>The exit code value is returned in the DWORD pointed to by <i>
pdwExitCode</i>. If the thread hasn't terminated when <i>
GetExitCodeThread</i> is called, the function fills the DWORD with the
STILL_ACTIVE identifier (defined as 0x103). If the function is
successful, TRUE is returned. (<A HREF="ch09a.htm">Chapter 9</A> has more on using the
thread's handle to determine when the thread has terminated.)</p>

</BODY>
</HTML>






