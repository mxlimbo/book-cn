<html>
<head>
<title>Chapter 5 -- Jobs</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch04f.htm">[Previous]</A> <A HREF="ch05b.htm">[Next]</A><P>

<font size="+3">Chapter 5</font>

<A NAME="67"><H1>Jobs</H1></A>

<p>You often need to treat a group of processes as a single entity. For
example, when you tell Microsoft Developer Studio to build a project,
it spawns Cl.exe, which might have to spawn additional processes (such
as the individual passes of the compiler). But if the user wants to
prematurely stop the build, Developer Studio must somehow be able to
terminate Cl.exe and all its child processes. Solving this simple (and
common) problem in Windows has been notoriously difficult because
Windows doesn't maintain a parent/child relationship between
processes. In particular, child processes continue to execute even
after their parent process has been terminated.</p>

<p>When you design a server, you must also treat a set of processes as
a single group. For instance, a client might request that a server
execute an application (which might spawn children of its own) and
return the results back to the client. Since many clients might connect
to this server, it would be nice if the server could somehow restrict
what a client can request to prevent any single client from
monopolizing all of its resources. These restrictions might include:
maximum CPU time that can be allocated to the client's request,
minimum and maximum working set sizes, preventing the client's
application from shutting down the computer, and security
restrictions.</p>

<p>Microsoft Windows 2000 offers a new job kernel object that lets you
group processes together and create a &quot;sandbox&quot; that
restricts what the processes can do. It is best to think of a job
object as a container of processes. However, it is useful to create
jobs that contain a single process because you can place restrictions
on that process that you normally cannot.</p>

<p>My <i>StartRestrictedProcess</i> function (Figure 5-1) places a
process in a job that restricts the process's ability to do certain
things.</p>

<p><div class="note"><blockquote><b>Windows 98</b><HR>
Windows 98 does not support jobs.
</blockquote></div></p>

<p><b>Figure 5-1.</b> <i>The</i> StartRestrictedProcess <i>function</i></p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
void燬tartRestrictedProcess()爗
牋