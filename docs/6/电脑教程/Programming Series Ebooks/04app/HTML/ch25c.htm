<HTML>
<HEAD>
<TITLE>Turning Off the Exception Message Box</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch25b.htm">[Previous]</A> <A HREF="ch25d.htm">[Next]</A><P>

<A NAME="337"><H1>Turning Off the Exception Message Box</H1></A>

<p>There might be times when you don't want the exception message
box to be displayed if an exception occurs. For example, you might not
want the message box to appear in the shipping version of your product.
If it did appear, it could easily lead an end user to accidentally
start debugging your application. An end user needs only to click on
the Cancel button in the message box to enter unfamiliar, scary
territory&#8212;the debugger. You can use a variety of methods to
prevent this message box from appearing.</p>

<A NAME="338"><H2>Forcing the Process to Die</H2></A>

<p>To prevent <i>UnhandledExceptionFilter</i> from displaying the
exception message box, you can call the <i>SetErrorMode</i> function
shown here, passing it the SEM_ 
NOGPFAULTERRORBOX identifier:</p>

<p><table cellpadding=5><tr><td>
<PRE>
UINT燬etErrorMode(UINT爁uErrorMode);
</pre></td></tr></table></p>

<p>Then, when <i>UnhandledExceptionFilter</i> is called to handle the
exception, it sees that you have turned on this flag and immediately
returns EXCEPTION_EXECUTE_HANDLER. This causes the global unwind and then executes the
handler in <i>BaseProcessStart</i> or <i>BaseThreadStart.</i> The
handler terminates the process.</p>

<p>I personally don't like this method because the user is given
absolutely no warning; the application just vanishes.</p>

<A NAME="339"><H2>Wrapping a Thread Function</H2></A>

<p>Another method you can use to disable the message box is to place a
<i>try-except</i> block around the entire contents of your primary
thread's entry-point function (<i>main</i>, <i>wmain</i>, <i>
WinMain,</i> or <i>wWinMain</i>). Make sure that the exception filter
always evaluates to EXCEPTION_EXECUTE_HANDLER so that the exception is
handled, preventing the system from calling the <i>
UnhandledExceptionFilter</i> function.</p>

<p>In your exception handler, you can display a dialog box with some
diagnostic information. The user can copy the information and report it
to your customer service lines to help you track the sources of
problems in your application. You should create the dialog box so that
the user can only terminate the application and not invoke the
debugger.</p>

<p>The problem with this method is that it catches only exceptions that
occur in your process's primary thread. If any other threads are
running, and an unhandled exception occurs in one of these threads, the
system calls the built-in <i>UnhandledExceptionFilter</i> function. To
fix this, you would need to include <i>tryexcept</i> blocks in all your
secondary thread entry-point functions as well.</p>

<A NAME="340"><H2>Wrapping All Thread Functions</H2></A>

<p>Windows offers another function, <i>SetUnhandledExceptionFilter</i>,
which allows you to wrap all your thread functions in an SEH frame:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
PTOP_LEVEL_EXCEPTION_FILTER燬etUnhandledExceptionFilter(
牋燩TOP_LEVEL_EXCEPTION_FILTER爌TopLevelExceptionFilter);
</pre></td></tr></table></p>

<p>After your process calls this function, an unhandled exception
occurring in any of your process's threads causes your own
exception filter to be called. You need to pass the address of your
filter as the parameter to <i>SetUnhandledExceptionFilter</i>. The
prototype of your filter function must look like this:</p>

<p><table cellpadding=5><tr><td>
<PRE>
LONG燯nhandledExceptionFilter(PEXCEPTION_POINTERS爌ExceptionInfo);
</pre></td></tr></table></p>

<p>You'll notice that this function is identical in form to the <i>
UnhandledExceptionFilter</i> function. You can perform any processing
you desire in your exception filter as long as you return one of the
three EXCEPTION_* identifiers. The following table shows what happens
when each identifier is returned.</p>

<p><table width="95%" cellpadding="5">
<tr><th>Identifier</th>
<th>What Happens</th></tr>

<tr><td valign="TOP">EXCEPTION_EXECUTE_HANDLER</td>
<td valign="TOP">The process simply terminates because the system doesn't perform any action in its exception handler block.</td></tr>

<tr><td valign="TOP">EXCEPTION_CONTINUE_EXECUTION</td>
<td valign="TOP">Execution continues at the instruction that raised the exception. You can modify the exception information referenced by the PEXCEPTION_POINTERS parameter.</td></tr>

<tr><td valign="TOP">EXCEPTION_CONTINUE_SEARCH</td>
<td valign="TOP">The normal Windows <i>UnhandledExceptionFilter</i> function executes.</td></tr>
</table></p>

<p>To make the <i>UnhandledExceptionFilter</i> function the default
filter again, you can simply call <i>SetUnhandledExceptionFilter</i>
and pass it NULL. Also, whenever you set a new unhandled exception
filter, <i>SetUnhandledExceptionFilter</i> returns the address of the
previously installed exception filter. This address will be NULL if <i>
UnhandledExceptionFilter</i> was the currently installed filter. If
your own filter is about to return EXCEPTION_CONTINUE_SEARCH, you
should call the previously installed filter whose address was returned
by the <i>SetUnhandledExceptionFilter</i> function.</p>

<A NAME="341"><H2>Automatically Invoking the Debugger</H2></A>

<p>Here is the last method for turning off <i>
UnhandledExceptionFilter</i>'s message box. In the same registry
subkey mentioned earlier, there is another data value named Auto. This
value indicates whether <i>UnhandledExceptionFilter</i> should display
the message box or simply start the debugger. If Auto is set to 1, <i>
UnhandledExceptionFilter</i> does not display a message box showing the
user the exception and immediately invokes the debugger. If the Auto
subkey is set to 0, <i>UnhandledExceptionFilter</i> displays the
exception message box first and operates as described earlier.</p>

</BODY>
</HTML>






