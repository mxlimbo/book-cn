<HTML>
<HEAD>
<TITLE>Event Kernel Objects</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09c.htm">[Previous]</A> <A HREF="ch09e.htm">[Next]</A><P>

<A NAME="126"><H1>Event Kernel Objects</H1></A>

<p>Of all the kernel objects, events are by far the most primitive.
They contain a usage count (as all kernel objects do), a Boolean value
indicating whether the event is an auto-reset or manual-reset event,
and another Boolean value indicating whether the event is signaled or
nonsignaled.</p>

<p>Events signal that an operation has completed. There are two
different types of event objects: manual-reset events and auto-reset
events. When a manual-reset event is signaled, all threads waiting on
the event become schedulable. When an auto-reset event is signaled,
only one of the threads waiting on the event becomes schedulable.</p>

<p>Events are most commonly used when one thread performs
initialization work and then signals another thread to perform the
remaining work. The event is initialized as nonsignaled, and then after
the thread completes its initial work, it sets the event to signaled.
At this point, another thread, which has been waiting on the event,
sees that the event is signaled and becomes schedulable. This second
thread knows that the first thread has completed its work.</p>

<p>Here is the <i>CreateEvent</i> function, which creates an event
kernel object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HANDLE燙reateEvent(
牋燩SECURITY_ATTRIBUTES爌sa,
牋燘OOL爁ManualReset,