<HTML>
<HEAD>
<TITLE>Successful Wait Side Effects</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09b.htm">[Previous]</A> <A HREF="ch09d.htm">[Next]</A><P>

<A NAME="125"><H1>Successful Wait Side Effects</H1></A>

<p>For some kernel objects, a successful call to <i>
WaitForSingleObject</i> or <i>WaitForMultipleObjects</i> actually
alters the state of the object. A successful call is one in which the
function sees that the object was signaled and returns a value relative
to WAIT_OBJECT_0. A call is unsuccessful if the function returns
WAIT_TIMEOUT or WAIT_FAILED. Objects never have their state altered for
unsuccessful calls.</p>

<p>When an object has its state altered, I call this a <i>successful wait
side effect</i>. For example, let's say that a thread is waiting on
an auto-reset event object (discussed later in this chapter). When the
event object becomes signaled, the function detects this and can return
WAIT_OBJECT_0 to the calling thread. However, just before the function
returns, the event is set to the nonsignaled state&#8212;the side effect
of the successful wait.</p>

<p>This side effect is applied to auto-reset event kernel objects because
it is one of the rules that Microsoft has defined for this type of
object. Other objects have different side effects, and some objects
have no side effects at all. Process and thread kernel objects have no
side effects at all&#8212;that is, waiting on one of these objects never
alters the object's state. As we discuss various kernel objects in
this chapter, we'll go into detail about their successful wait side
effects.</p>

<p>What makes <i>WaitForMultipleObjects</i> so useful is that it performs
all of its operations atomically. When a thread calls <i>
WaitForMultipleObjects</i>, the function can test the signaled state of
all the objects and perform the required side effects all as a single
operation.</p>

<p>Let's look at an example. Two threads call <i>
WaitForMultipleObjects</i> in exactly the same way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HANDLEçˆƒ[2];
h[0]