<HTML>
<HEAD>
<TITLE>Dynamic TLS</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch21a.htm">[Previous]</A> <A HREF="ch21c.htm">[Next]</A><P>

<A NAME="282"><H1>Dynamic TLS</H1></A>

<p>An application takes advantage of dynamic TLS by calling a set of
four functions. These functions are actually most often used by DLLs.
Figure 21-1 shows the internal data structures that Windows uses for
managing TLS.</p>

<p>The figure shows a single set of in-use flags for each process
running in the system. Each flag is set to either FREE or INUSE,
indicating whether the TLS slot is in use. Microsoft guarantees that at
least TLS_MINIMUM_AVAILABLE bit flags are available. By the way, 
TLS_MINIMUM_AVAILABLE is defined as 64 in WinNT.h. Windows 2000 has 
expanded this flag array to allow more than 1000 TLS slots! This should 
be more than enough slots for any application.</p>

<p>To use dynamic TLS, you must first call <i>TlsAlloc</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
DWORD燭lsAlloc();
</pre></td></tr></table></p>

<p>
<A HREF="javascript:fullSize('F21SI01x.htm')"> <img src="images/F21SI01.JPG" width=404 height=262 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><b>Figure 21-1.</b> <i>Internal data structures that manage TLS</i><!-- /CAPTION -->
</p>

<p>This function instructs the system to scan the bit flags in the
process and locate a FREE flag. The system then changes the flag from
FREE to INUSE, and <i>TlsAlloc</i> returns the index of the flag in the
bit array. A DLL (or an application) usually saves the index in a
global variable. This is one of those times when a global variable is
actually the better choice because the value is used on a per-process
basis rather than a per-thread basis.</p>

<p>If <i>TlsAlloc</i> cannot find a FREE flag in the list, it returns
TLS_OUT_OF_INDEXES (defined as 0xFFFFFFFF in WinBase.h). The first time <i>
TlsAlloc</i> is called, the system recognizes that the first flag is
FREE and changes the flag to INUSE and <i>TlsAlloc</i> returns 0.
That's 99 percent of what <i>TlsAlloc</i> does. I'll get to the
other 1 percent later.</p>

<p>When a thread is created, an array of TLS_MINIMUM_AVAILABLE PVOID
values is allocated, initialized to 0, and associated with the thread
by the system. As Figure 21-1 shows, each thread gets its own array and
each PVOID in the array can store any value.</p>

<p>Before you can store information in a thread's PVOID array, you
must know which index in the array is available for use&#8212;this is
what the earlier call to <i>TlsAlloc</i> is for. Conceptually, <i>
TlsAlloc</i> reserves an index for you. If <i>TlsAlloc</i> returns
index 3, it is effectively saying that index 3 is reserved for you in
every thread currently executing in the process as well as in any
threads that might be created in the future.</p>

<p>To place a value in a thread's array, you call the <i>
TlsSetValue</i> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL燭lsSetValue(
牋燚WORD燿wTlsIndex,