<HTML>
<HEAD>
<TITLE>DLL Redirection</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch20f.htm">[Previous]</A> <A HREF="ch20h.htm">[Next]</A><P>

<A NAME="278"><H1>DLL Redirection</H1></A>

<p><div class="note"><blockquote>
<b>Windows 98</b><HR>
Windows 98 does not support DLL redirection.
</blockquote></div></p>

<p>When Windows was first developed, RAM and disk space were at a
premium. So Windows was designed to share as many resources as possible to conserve these precious resources. To this end, Microsoft recommended that any modules shared by multiple applications, such as the C/C++ run-time library and the Microsoft Foundation Classes (MFC) DLLs, be placed in the Windows system directory. This allowed the system to locate the shared files easily.</p>

<p>As time went on, this became a serious problem because setup programs would overwrite files in this directory with older files or newer files that were not completely backward compatible. This prevented the user's other applications from running properly. Today, hard disks are big and cheap and RAM is also quite plentiful and relatively cheap. So Microsoft is now reversing itself and strongly recommending that you place all of your application's files in their own directory and never touch anything in the Windows system directory. This will prevent
your application from harming other applications and will keep your application from being harmed by other applications.</p>

<p>To help you, Microsoft has added a DLL redirection feature to Windows 2000. This feature forces the operating system loader to load modules from your application's directory first. Only if the loader cannot find the file there will it search other directories.</p> 

<p>To force the loader to always check the application's directory first, all you do is place a file in the application's directory. The contents of the file are ignored but the file must be called AppName.local.</p>

<p>For example, if you have an executable file called SuperApp.exe, the redirection file must be called SuperApp.exe.local. </p>

<p>Internally, <i>LoadLibrary</i>(<i>Ex</i>) has been modified to check for the existence of this file. If the file exists in the
application's directory, the module in this directory is loaded. If the module doesn't exist in the application's directory, <i>LoadLibrary</i>(<i>Ex</i>) works as usual.</p> 

<p>This feature is extremely useful for registered COM objects. It allows an application to place its COM object DLLs in its own directory so that other applications registering the same COM objects cannot interfere with your operation.</p>

</BODY>
</HTML>






