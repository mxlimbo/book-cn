<HTML>
<HEAD>
<TITLE>Semaphore Kernel Objects</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09e.htm">[Previous]</A> <A HREF="ch09g.htm">[Next]</A><P>

<A NAME="131"><H1>Semaphore Kernel Objects</H1></A>

<p>Semaphore kernel objects are used for resource counting. They
contain a usage count, as all kernel objects do, but they also contain
two additional signed 32-bit values: a maximum resource count and a
current resource count. The maximum resource count identifies the
maximum number of resources that the semaphore can control; the current
resource count indicates the number of these resources that are
currently available.</p>

<p>To put this in perspective, let's see how an application might use
semaphores. Let's say that I'm developing a server process in
which I have allocated a buffer that can hold client requests. I've
hard-coded the size of the buffer so that it can hold a maximum of five
client requests at a time. If a new client attempts to contact the
server while five requests are outstanding, the new client is turned
away with an error indicating that the server is busy and the client
should try again later. When my server process initializes, it creates
a thread pool consisting of five threads, each thread ready to process
individual client requests as they come in.</p>

<p>Initially, no clients have made any requests, so my server doesn't
allow any of the threads in the pool to be schedulable. However, if
three client requests come in simultaneously, three threads in the pool
should be schedulable. You can handle this monitoring of resources and
scheduling of threads very nicely using a semaphore: the maximum
resource count is set to 5 since that is the size of my hard-coded
buffer. The current resource count is initially set to 0 since no
clients have made any requests. As client requests are accepted, the
current resource count is incremented, and as client requests are
handed off to server pool threads, the current resource count is
decremented.</p>

<p>The rules for a semaphore are as follows:</p>

<ul>

<p><li>If the current resource count is greater than 0, the semaphore is
signaled.</li></p>

<p><li>If the current resource count is 0, the semaphore is
nonsignaled.</li></p>

<p><li>The system never allows the current resource count to be
negative.</li></p>

<p><li>The current resource count can never be greater than the maximum
resource count.</li></p>

</ul>

<p>When you use a semaphore, do not confuse the semaphore object's
usage count with its current resource count.</p>

<p>This function creates a semaphore kernel object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HANDLE燙reateSemaphore(
牋燩SECURITY_ATTRIBUTE爌sa,
牋燣ONG爈InitialCount,