<HTML>
<HEAD>
<TITLE>A Process's Virtual Address Space</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch13a.htm">[Previous]</A> <A HREF="ch13c.htm">[Next]</A><P>

<A NAME="162"><H1>A Process's Virtual Address Space</H1></A>

<p>Every process is given its very own virtual address space. For
32-bit processes, this address space is 4 GB, since a 32-bit pointer
can have any value from 0x00000000 through 0xFFFFFFFF. This allows a
pointer to have one of 4,294,967,296 values, which covers a
process's 4-GB range. For 64-bit processes, this address space is
16 EB (exabytes), since a 64-bit pointer can have any value from
0x00000000'00000000 through 0xFFFFFFFF'FFFFFFFF. This allows a
pointer to have one of 18,446,744,073,709,551,616 values, which covers
a process's 16-EB range. This is quite a range!</p>

<p>Since every process receives its very own private address space,
when a thread in a process is running, that thread can access memory
that belongs only to its process. The memory that belongs to all other
processes is hidden and inaccessible to the running thread.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
In Windows 2000, the memory belonging to the operating system itself is
also hidden from the running thread, which means that the thread cannot
accidentally access the operating system's data. In Windows 98, the
memory belonging to the operating system is not hidden from the running
thread. Therefore, the running thread could accidentally access the
operating system's data and corrupt the operating system
(potentially causing it to crash). It is <i>not</i> possible in Windows
98 for one process's thread to access memory belonging to another
process.
</blockquote></div></p>

<p>As I said, every process has its own private address space. Process
A can have a data structure stored in its address space at address
0x12345678, while Process B can have a totally different data structure
stored in <i>its</i> address space&#8212;at address 0x12345678. When
threads running in Process A access memory at address 0x12345678, these
threads are accessing Process A's data structure. When threads
running in Process B access memory at address 0x12345678, these threads
are accessing Process B's data structure. Threads running in
Process A cannot access the data structure in Process B's address
space, and vice versa.</p>

<p>Before you get all excited about having so much address space for
your application, keep in mind that this is <i>virtual</i> address
space&#8212;not physical storage. This address space is simply a range
of memory addresses. Physical storage needs to be assigned or mapped to
portions of the address space before you can successfully access data
without raising access violations. We will discuss how this is done
later in this chapter.</p>

</BODY>
</HTML>






