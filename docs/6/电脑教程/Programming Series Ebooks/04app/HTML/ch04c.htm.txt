<HTML>
<HEAD>
<TITLE>The CreateProcess Function</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch04b.htm">[Previous]</A> <A HREF="ch04d.htm">[Next]</A><P>

<A NAME="49"><h1>The <i>CreateProcess</i> Function</h1></A>
<p>You create a process with the <i>CreateProcess</i> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL燙reateProcess(
牋燩CTSTR爌szApplicationName,
牋燩TSTR爌szCommandLine,
牋燩SECURITY_ATTRIBUTES爌saProcess,
牋燩SECURITY_ATTRIBUTES爌saThread,
牋燘OOL燽InheritHandles,
牋燚WORD爁dwCreate,
牋燩VOID爌vEnvironment,
牋燩CTSTR爌szCurDir,
牋燩STARTUPINFO爌siStartInfo,
牋燩PROCESS_INFORMATION爌piProcInfo);
</pre>
</td></tr></table></p>

<p>When a thread calls <i>CreateProcess</i>, the system creates a
process kernel object with an initial usage count of 1. This process kernel object is not the process itself but a small data structure that the operating system uses to manage the process&#8212;you can think of the process kernel object as a small data structure that consists of statistical information about the process. The system then creates a virtual address space for the new process and loads the code and data for the executable file and any required DLLs into the process's address space.</p>

<p>The system then creates a thread kernel object (with a usage count of 1) for the new process's primary thread. Like the process kernel object, the thread kernel object is a small data structure that the operating system uses to manage the thread. This primary thread begins by executing the C/C++ run-time startup code, which eventually calls your <i>WinMain</i>, <i>wWinMain</i>, <i>main</i>, or <i>wmain</i> function. If the system successfully creates the new process and primary thread, <i>CreateProcess</i> returns TRUE.</p>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
<i>CreateProcess</i> returns TRUE before the process has fully
initialized. This means that the operating system loader has not
attempted to locate all the required DLLs yet. If a DLL can't be
located or fails to initialize correctly, the process is terminated. Since <i>CreateProcess</i> returned TRUE, the parent process is not aware of any initialization problems.
</blockquote></div></p>

<p>OK, that's the broad overview. The following sections dissect
each of <i>CreateProcess</i>'s parameters.</p>

<A NAME="50"><h2><i>pszApplicationName</i> and <i>pszCommandLine</i></h2></A>
<p>The <i>pszApplicationName</i> and <i>pszCommandLine</i> parameters specify the name of the executable file the new  process will use and the command-line string that will be passed to the new process, respectively. Let's talk about the <i>pszCommandLine</i> parameter first.</p>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
<p>Notice that the <i>pszCommandLine</i> parameter is prototyped as a PTSTR. This means that <i>CreateProcess</i> expects that you are passing the address of a non-constant string. Internally, <i>CreateProcess</i> actually does modify the command-line string that you pass to it. But before <i>CreateProcess</i> returns, it restores the string to its original form.</p>

<p>This is important because an access violation will occur if your command-line string is contained in a read-only portion of your file image. For example, the following code causes an access violation because Visual C++ 6.0 places the &quot;NOTEPAD&quot; string in read-only memory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
STARTUPINFO爏i