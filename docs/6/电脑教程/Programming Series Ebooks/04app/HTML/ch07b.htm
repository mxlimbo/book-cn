<HTML>
<HEAD>
<TITLE>Suspending and Resuming a Thread</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch07a.htm">[Previous]</A> <A HREF="ch07c.htm">[Next]</A><P>

<A NAME="97"><H1>Suspending and Resuming a Thread</H1></A>

<p>Inside a thread kernel object is a value that indicates the
thread's suspend count. When you call <i>CreateProcess</i> or <i>CreateThread</i>, the thread kernel object is created and the suspend count is initialized to 1. This prevents the thread from being scheduled to a CPU. This is, of course, desirable because it takes time for the thread to be initialized and you don't want the system to start executing the thread before it is fully ready.</p>

<p>After the thread is fully initialized, <i>CreateProcess</i> or <i>CreateThread</i> checks to see whether you've passed the CREATE_SUSPENDED flag. If you have, the functions return and the new thread is left in the suspended state. If you have not, the function decrements the thread's suspend count to 0. When a thread's suspend count is 0, the thread is schedulable unless it is waiting for something else to happen (such as keyboard input).</p>

<p>Creating a thread in the suspended state allows you to alter the thread's environment (such as priority, discussed later in the chapter) before the thread has a chance to execute any code. Once you alter the thread's environment, you must make the thread
schedulable. You do this by calling <i>ResumeThread</i> and passing it the thread handle returned by the call to <i>CreateThread</i> (or the thread handle from the structure pointed to by the <i>ppiProcInfo</i> parameter passed to <i>CreateProcess</i>):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
DWORD ResumeThread(HANDLE hThread);
</pre>
</td></tr></table></p>

<p>If <i>ResumeThread</i> is successful, it returns the thread's
previous suspend count; otherwise, it returns 0xFFFFFFFF.</p>

<p>A single thread can be suspended several times. If a thread is
suspended three times, it must be resumed three times before it is eligible for assignment to a CPU. In addition to using the
CREATE_SUSPENDED flag when you create a thread, you can suspend a
thread by calling <i>SuspendThread</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
DWORD SuspendThread(HANDLE hThread);
</pre>
</td></tr></table></p>

<p>Any thread can call this function to suspend another thread (as long as you have the thread's handle). It goes without saying (but I'll say it anyway) that a thread can suspend itself but cannot resume itself. Like <i>ResumeThread</i>, <i>SuspendThread</i> returns the thread's previous suspend count. A thread can be suspended as many as MAXIMUM_SUSPEND_COUNT times (defined as 127 in WinNT.h). Note that <i>SuspendThread</i> is asynchronous with respect to kernel mode execution, but user-mode execution does not occur until the thread is resumed.</p>

<p>In real life, an application must be careful when it calls <i>
SuspendThread</i> because you have no idea what the thread might be doing when you attempt to suspend it. If the thread is attempting to allocate memory from a heap, for example, the thread will have a lock on the heap. As other threads attempt to access the heap, their execution will be halted until the first thread is resumed. <i>SuspendThread</i> is safe only if you know exactly what the target thread is (or might be doing) and you take extreme measures to avoid problems or deadlocks caused by suspending the thread. (Deadlocking and other thread synchronization issues are discussed in Chapters <a href="ch08a.htm">8</a>, <a href="ch09a.htm">9</a>, and
<a href="ch10a.htm">10</a>.)</p>


</BODY>
</HTML>






