<HTML>
<HEAD>
<TITLE>Explicit DLL Module Loading and Symbol Linking</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch20a.htm">[Previous]</A> <A HREF="ch20c.htm">[Next]</A><P>

<A NAME="260"><H1>Explicit DLL Module Loading and Symbol Linking</H1></A>

<p>In order for a thread to call a function in a DLL module, the
DLL's file image must be mapped into the address space of the calling thread's process. You can accomplish this in two ways. The first way is to have your application's source code simply
reference symbols contained in the DLL. This causes the loader to
implicitly load (and link) the required DLL when the application is invoked.</p>

<p>The second way is for the application to explicitly load the
required DLL and explicitly link to the desired exported symbol while the application is running. In other words, while the application is running, a thread within it can decide that it wants to call a function within a DLL. That thread can explicitly load the DLL into the process's address space, get the virtual memory address of a function contained within the DLL, and then call the function using this memory address. The beauty of this technique is that everything is done while the application is running.</p>

<p>Figure 20-1 shows how an application explicitly loads a DLL and links to a symbol within it.</p>

<p>
<A HREF="javascript:fullSize('F20SI01x.htm')"> <img src="images/F20SI01.JPG" width=404 height=570 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><b>Figure 20-1.</b> <i>How a DLL is created and explicitly linked by an application</i><!-- /CAPTION -->
</p>

<A NAME="261"><H2>Explicitly Loading the DLL Module</H2></A>

<p>At any time, a thread in the process can decide to map a DLL into the process's address space by calling one of these two
functions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HINSTANCE燣oadLibrary(PCTSTR爌szDLLPathName);

HINSTANCE燣oadLibraryEx(
牋燩CTSTR爌szDLLPathName,