<HTML>
<HEAD>
<TITLE>The Importance of Data Alignment</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch13h.htm">[Previous]</A> <A HREF="ch14a.htm">[Next]</A><P>

<A NAME="182"><H1>The Importance of Data Alignment</H1></A>

<p>In this section, we leave the discussion of a process's virtual
address space and discuss the important topic of data alignment. Data
alignment is not so much a part of the operating system's memory
architecture, but it is a part of the CPU's architecture.</p>

<p>CPUs operate most efficiently when they access properly aligned
data. Data is aligned when the memory address of the data modulo of the
data's size is 0. For example, a WORD value should always start on
an address that is evenly divided by 2, a DWORD value should always
start on an address that is evenly divided by 4, and so on. When the
CPU attempts to read a data value that is not properly aligned, the CPU
will do one of two things. It will either raise an exception or the CPU
will perform multiple, aligned memory accesses in order to read the
full misaligned data value.</p>

<p>Here is some code that accesses misaligned data:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID燬omeFunc(PVOID爌vDataBuffer)爗