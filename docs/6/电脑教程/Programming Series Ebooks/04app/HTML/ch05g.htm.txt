<HTML>
<HEAD>
<TITLE>The JobLab Sample Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05f.htm">[Previous]</A> <A HREF="ch06a.htm">[Next]</A><P>

<A NAME="73"><H1>The JobLab Sample Application</H1></A>

<p>The JobLab application, &quot;05 JobLab.exe&quot; (listed in Figure
5-6), allows you to easily experiment with jobs. The source code and
resource files for the application are in the 05-JobLab directory on
the companion CD-ROM. When you start the program, the window shown in
Figure 5-5 appears.</p>

<p>When the process initializes, it creates a job object. I created
this job object with the name JobLab so you can use the MMC Performance
Monitor Snap-In to see it and monitor its performance. The application
also creates an I/O completion port and associates the job object with
it. This allows notifications from the job to be monitored and
displayed in the list box at the bottom of the window. </p>
<p>Initially, the job has no processes and no limits or restrictions. The
fields at the top set basic and extended limits on the job object. All
you do is fill them in with valid values and click on the Apply Limits
button. If you leave a field empty, that limit will not be applied.
Besides the basic and extended limits, you can turn various UI
restrictions on and off. Note that the Preserve Job Time When Applying
Limits check box does not set a limit; it simply allows you to change
the job's limits without resetting the <i>
ThisPeriodTotalUserTime</i> and <i>ThisPeriodTotalKernelTime</i>
members when querying the basic accounting information. This check box
is disabled when you apply a per-job time limit.</p>

<p>
<A HREF="javascript:fullSize('F05si05x.htm')"> <img src="images/F05si05.JPG" width=404 height=380 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><b>Figure 5-5.</b> <i>JobLab sample application</i><!-- /CAPTION -->
</p>

 
<p>The remaining buttons let you manipulate the job in other ways. The
Terminate Processes button kills all the processes in the job. The
Spawn CMD In Job button spawns a command shell process that is
associated with the job. From this command shell, you can spawn
additional child processes and see how they behave as part of the job.
I found this very useful for experimenting. The last button, Put PID In
Job, lets you associate an existing jobless process with the job.</p> 
<p>The list box at the bottom of the window shows updated status
information about the job. Every 10 seconds, this window shows the
basic and I/O accounting information as well as the peak process/job
memory usage. The process ID for each process currently in the job is
also shown. </p>
<p>In addition to all this statistical information, the list box displays
any notifications that come from the job to the application's I/O
completion port. Whenever a notification is posted to the list box, the
status information at that time is also displayed.</p>

<p>One last note: if you modify the source code and create the job
kernel object without a name, you can run multiple copies of this
application to create two or more job objects on the same machine and
perform more experiments that way.</p>

<p>As far as the source code goes, there isn't anything special to
discuss because the source code is well annotated. I did, however,
create a Job.h file that defines a CJob C++ class that encapsulates the
operating system's job object. This made things a little easier to
work with since I didn't have to pass around the job's handle.
This class also reduces the amount of casting that I would ordinarily
need to do when calling the <i>QueryInformationJobObject</i> and <i>
SetInformationJobObject</i> functions.</p>

<p><b>Figure 5-6.</b> <i>The JobLab sample application</i></p>

<p><table cellpadding=5 width="95%"><tr><td>
<p><b>JobLab.cpp</b></p>
<PRE>
/******************************************************************************
Module:牋JobLab.cpp
Notices:燙opyright