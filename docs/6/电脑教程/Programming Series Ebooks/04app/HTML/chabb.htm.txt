<HTML>
<HEAD>
<TITLE>Message Crackers</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="chaba.htm">[Previous]</A> <A HREF="chabc.htm">[Next]</A><P>

<A NAME="385"><H1>Message Crackers</H1></A>

<p>Message crackers make it easier to write window procedures.
Typically, window procedures are implemented as one huge <i>switch</i>
statement. In my travels, I've seen window procedure <i>switch</i>
statements that contained well over 500 lines of code. We all know that
implementing window procedures in this way is bad practice, but we do
it anyway. I've been known to do it myself on occasion. Message
crackers force you to break up your <i>switch</i> statements into
smaller functions&#8212;one function per window message. This makes your
code much more manageable.</p>

<p>Another problem with window procedures is that every message has <i>
wParam</i> and <i>lParam</i> parameters, and depending on the message,
these parameters have different meanings. In some cases, such as a
WM_COMMAND message, <i>wParam</i> contains two different values. The
high-word of the <i>wParam</i> parameter is the notification code, and
the low-word is the ID of the control. Or is it the other way around? I
always forget. If you use message crackers, you don't have to
remember or look up any of this. Message crackers are so named because
they crack apart the parameters for any given message. To process the
WM_COMMAND message, you simply write a function that looks like
this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
void燙ls_OnCommand(HWND爃wnd,爄nt爄d,燞WND爃wndCtl,
牋燯INT燾odeNotify)爗

牋爏witch