<HTML>
<HEAD>
<TITLE>Gaining a Sense of One's Own Identity</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06h.htm">[Previous]</A> <A HREF="ch07a.htm">[Next]</A><P>

<A NAME="94"><H1>Gaining a Sense of One's Own Identity</H1></A>

<p>As threads execute, they frequently want to call Windows functions
that change their execution environment. For example, a thread might
want to alter its priority or its process's priority. (Priorities
are discussed in <A HREF="ch07a.htm">Chapter 7</A>.) Since it is common for a thread to alter
its (or its process's) environment, Windows offers functions that
make it easy for a thread to refer to its process kernel object or to
its own thread kernel object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HANDLE燝etCurrentProcess();
HANDLE燝etCurrentThread();
</pre></td></tr></table></p>

<p>Both of these functions return a pseudo-handle to the calling
thread's process or thread kernel object. These functions do not
create new handles in the calling process's handle table. Also,
calling these functions has no effect on the usage count of the process
or thread kernel object. If you call <i>CloseHandle</i>, passing a
pseudo-handle as the parameter, <i>CloseHandle</i> simply ignores the
call and returns FALSE. </p>
<p>When you call a Windows function that requires a handle to a process or
thread, you can pass a pseudo-handle, which causes the function to
perform its action on the calling process or thread. For example, a
thread can query its process's time usage by calling <i>
GetProcessTimes</i> as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
FILETIME爁tCreationTime,爁tExitTime,爁tKernelTime,爁tUserTime;
GetProcessTimes(GetCurrentProcess(),
牋