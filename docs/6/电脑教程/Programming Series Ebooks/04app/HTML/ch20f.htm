<HTML>
<HEAD>
<TITLE>Known DLLs</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch20e.htm">[Previous]</A> <A HREF="ch20g.htm">[Next]</A><P>

<A NAME="277"><H1>Known DLLs</H1></A>

<p>Certain operating system_supplied DLLs get special treatment. These are called <i>known DLLs</i>. They are just like any other DLL except that the operating system always looks for them in the same directory in order to load them. Inside the registry is the following key:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\
   Session Manager\KnownDLLs
</pre>
</td></tr></table></p>

<p>Here's what this subkey looks like on my machine using the
RegEdit.exe utility.</p>

<p>
<A HREF="javascript:fullSize('G20si05x.htm')"> <img src="images/G20si05.JPG" width=404 height=290 border=0 ALT="Click to view at full size."> </A>
</p>

<p>As you can see, this key contains a set of value names that are the names of certain DLLs. Each of these value names has value data that happens to be identical to the value name with a .dll file extension. (This does not have to be the case, however, as I'll show you in an upcoming example.) When <i>LoadLibrary</i> or <i>LoadLibraryEx</i> is called, the functions first check to see whether you are passing a DLL name that includes the .dll extension. If you are not, they search for the DLL using the normal search rules.</p>

<p>If you do specify a .dll extension, these functions remove the
extension and then search the <i>KnownDLLs</i> registry key to see whether it contains a value name that matches. If no matching name is found, the normal search rules are used. But if a matching value name is found, the system looks up the associated value data and attempts to load a DLL using the value data instead. The system also begins searching for the DLL in the directory indicated by the <i>DllDirectory</i> value's data in the registry. By default, the <i>DllDirectory</i> value's data is %SystemRoot%\System32 on Windows 2000.</p>

<p>To illustrate, suppose we add the following value to the <i>KnownDLLs</i> registry key:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Value name: SomeLib
Value data: SomeOtherLib.dll
</pre>
</td></tr></table></p>

<p>When we call the following function, the system uses the normal search rules to locate the file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
LoadLibrary(&quot;SomeLib&quot;);
</pre>
</td></tr></table></p>

<p>However, if we call the function below, the system sees that there is a matching value name. (Remember that the system removes the .dll extension when it checks the registry value names.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
LoadLibrary(&quot;SomeLib.dll&quot;);
</pre>
</td></tr></table></p>

<p>The system therefore attempts to load a library called
SomeOtherLib.dll instead of SomeLib.dll. And it first looks for
SomeOtherLib.dll in the %SystemRoot%\System32 directory. If it finds the file in this directory, it loads it. If the file is not in this directory, <i>LoadLibrary</i>(<i>Ex</i>) fails and returns NULL, and a call to <i>GetLastError</i> returns 2 (ERROR_FILE_NOT_FOUND).</p>

</BODY>
</HTML>






