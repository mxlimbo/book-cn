<HTML>
<HEAD>
<TITLE>Writing Your First Windows Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch04a.htm">[Previous]</A> <A HREF="ch04c.htm">[Next]</A><P>

<A NAME="39"><H1>Writing Your First Windows Application</H1></A>

<p>Windows supports two types of applications: those based on a
graphical user interface (GUI) and those based on a console user
interface (CUI). A GUI-based application has a graphical front end. It can create windows, have menus, interact with the user via dialog boxes, and use all the standard &quot;Windowsy&quot; stuff. Almost all the accessory applications that ship with Windows (such as Notepad, Calculator, and WordPad) are GUI-based applications. Console-based applications are text-based. They don't usually create windows or process messages, and they don't require a graphical user interface. Although CUI-based applications are contained within a window on the screen, the window contains only text. The command shells&#8212;CMD.EXE (for Windows 2000) and COMMAND.COM (for Windows 98)&#8212;are typical examples of CUI-based applications.</p>

<p>The line between these two types of applications is very fuzzy. It is possible to create CUI-based applications that display dialog boxes. For example, the command shell could have a special command that causes it to display a graphical dialog box, in which you can select the command you want to execute, instead of having to remember the various commands supported by the shell. You can also create a GUI-based application that outputs text strings to a console window. I frequently create GUI-based applications that create a console window in which I can view debugging information as the application executes. You are
certainly encouraged to use a GUI in your applications instead of the old-fashioned character interface, which is much less
user-friendly.</p>

<p>When you use Microsoft Visual C++ to create an application project, the integrated environment sets up various linker switches so that the linker embeds the proper type of subsystem in the resulting executable. This linker switch is /SUBSYSTEM:CONSOLE for CUI applications and /SUBSYSTEM:WINDOWS for GUI applications. When the user runs an application, the operating system's loader looks inside the executable image's header and grabs this subsystem value. If the value indicates a CUI-based application, the loader automatically ensures that a text console window is created for the application. If the value indicates a GUI-based application, the loader doesn't create the console window and just loads the application. Once the application starts running, the operating system doesn't care what type of UI your application has.</p>

<p>Your Windows application must have an entry-point function that is called when the application starts running. There are four possible entry-point functions:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
int燱INAPI燱inMain(
牋燞INSTANCE爃instExe,