<HTML>
<HEAD>
<TITLE>EXCEPTION_EXECUTE_HANDLER</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch24b.htm">[Previous]</A> <A HREF="ch24d.htm">[Next]</A><P>

<A NAME="320"><H1>EXCEPTION_EXECUTE_HANDLER</H1></A>

<p>In <i>Funcmeister2</i>, the exception filter expression evaluates to
EXCEPTION_EXECUTE_HANDLER. This value basically says to the system, &quot;I recognize the exception. That is, I had a feeling that this exception might occur some time, and I've written some code to deal with it that I'd like to execute now.&quot; At this point, the system
performs a global unwind (discussed later in this chapter) and then
execution jumps to the code inside the <i>except</i> block (the
exception handler code). After the code in the <i>except</i> block has
executed, the system considers the exception to be handled and allows
your application to continue executing. This mechanism allows Windows
applications to trap errors, handle them, and continue running without
the user ever knowing that the error happened.</p>

<p>But, once the <i>except</i> block has executed, where in the code
should execution resume? With a little bit of thought, we can easily
imagine several possibilities.</p>

<p>The first possibility would be for execution to resume after the CPU
instruction that generates the exception. In <i>Funcmeister2</i>,
execution would resume with the instruction that adds 10 to <i>
dwTemp</i>. This might seem like a reasonable thing to do, but in
reality, most programs are written so that they cannot continue
executing successfully if one of the earlier instructions fails to
execute.</p>

<p>In <i>Funcmeister2</i>, the code can continue to execute normally;
however, <i>Funcmeister2</i> is not the normal situation. Most likely,
your code will be structured so that the CPU instructions following the
instruction that generates the exception will expect a valid return
value. For example, you might have a function that allocates memory, in
which case a whole series of instructions will be executed to
manipulate that memory. If the memory cannot be allocated, all the
lines will fail, making the program generate exceptions repeatedly.</p>

<p>Here is another example of why execution cannot continue after the
failed CPU instruction. Let's replace the C statement that
generated the exception in <i>Funcmeister2</i> with the following
line:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
malloc(5