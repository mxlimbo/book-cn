<HTML>
<HEAD>
<TITLE>Committing Storage in a Reserved Region </TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch15b.htm">[Previous]</A> <A HREF="ch15d.htm">[Next]</A><P>

<A NAME="193"><H1>Committing Storage in a Reserved Region </H1></A>

<p>After you have reserved a region, you will need to commit physical storage to the region before you can access the memory addresses contained within it. The system allocates physical storage committed to a region from the system's paging file. Physical storage is always committed on page boundaries and in page-size chunks.</p>

<p>To commit physical storage, you must call <i>VirtualAlloc</i> again. This time, however, you'll pass the MEM_COMMIT identifier instead of the MEM_RESERVE identifier for the <i>fdwAllocationType</i> parameter. You usually pass the same page protection attribute (most often PAGE_READWRITE) that was used when <i>VirtualAlloc</i> was called to reserve the region, although you can specify a different protection attribute.</p>

<p>From within the reserved region, you <i>must</i> tell <i>VirtualAlloc</i> where you want to commit physical storage and how much physical storage to commit. You do this by specifying the desired memory address in the <i>pvAddress</i> parameter and the amount of physical storage, in bytes, in the <i>dwSize</i> parameter. Note that you don't have to commit physical storage to the entire region at once.</p>

<p>Let's look at an example of how to commit storage. Say your
application is running on an <i>x</i>86 CPU and the application
reserves a 512-KB region starting at address 5,242,880. You would like your application to commit storage to the 6-KB portion of the reserved region starting 2 KB into the reserved region's address space. To do this, call <i>VirtualAlloc</i> using the MEM_COMMIT flag as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VirtualAlloc((PVOID)