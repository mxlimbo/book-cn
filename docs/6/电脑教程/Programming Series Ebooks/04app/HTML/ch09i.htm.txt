<HTML>
<HEAD>
<TITLE>Other Thread Synchronization Functions</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09h.htm">[Previous]</A> <A HREF="ch10a.htm">[Next]</A><P>

<A NAME="137"><H1>Other Thread Synchronization Functions</H1></A>

<p><i>WaitForSingleObject</i> and <i>WaitForMultipleObjects</i> are the
most commonly used functions for performing thread synchronization.
However, Windows offers a few more functions that have slight
variations. If you understand <i>WaitForSingleObject</i> and <i>
WaitForMultipleObjects</i>, you'll have no trouble understanding
how these other functions work. In this section, I'll briefly
introduce some of them.</p>


<A NAME="138"><H2>Asynchronous Device I/O</H2></A>

<p>Asynchronous device I/O allows a thread to start a read or write
operation without having to wait for the read or write operation to
complete. For example, if a thread needs to load a large file into
memory, the thread can tell the system to load the file into memory.
Then, as the system loads the file, the thread can be busy performing
other tasks&#8212;creating windows, initializing internal data
structures, and so on. When the initialization is complete, the thread
can suspend itself, waiting for the system to notify it that the file
has been read.</p>

<p>Device objects are synchronizable kernel objects, which means that you
can call <i>WaitForSingleObject</i>, passing the handle of a file,
socket, communication port, and so on. While the system performs the
asynchronous I/O, the device object is in the nonsignaled state. As
soon as the operation is complete, the system changes the state of the
object to signaled so that the thread knows that the operation has
completed. At this point, the thread continues execution.</p>


<A NAME="139"><h2><i>WaitForInputIdle</i></h2></A>
<p>A thread can also suspend itself by calling <i>
WaitForInputIdle</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
DWORD燱aitForInputIdle(
牋燞ANDLE爃Process,