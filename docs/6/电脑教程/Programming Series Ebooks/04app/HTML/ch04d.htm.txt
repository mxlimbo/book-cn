<HTML>
<HEAD>
<TITLE>Terminating a Process</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch04c.htm">[Previous]</A> <A HREF="ch04e.htm">[Next]</A><P>

<A NAME="57"><H1>Terminating a Process</H1></A>

<p>A process can be terminated in four ways:</p>

<ul>
<p><li>The primary thread's entry-point function returns. (This is highly recommended.)</li></p>

<p><li>One thread in the process calls the <i>ExitProcess</i> function. (Avoid this method.)</li></p>

<p><li>A thread in another process calls the <i>TerminateProcess</i> function. (Avoid this method.)</li></p>

<p><li>All the threads in the process just die on their own. (This hardly ever happens.)</li></p>
</ul>

<p>This section discusses all four methods and describes what actually happens when a process ends.</p>

<A NAME="58"><H2>The Primary Thread's Entry-Point Function Returns</H2></A>

<p>You should always design an application so that its process
terminates only when your primary thread's entry-point function
returns. This is the only way to guarantee that all your primary
thread's resources are cleaned up properly.</p>

<p>Having your primary thread's entry-point function return ensures the following:</p>

<ul>
<p><li>Any C++ objects created by this thread will be destroyed properly using their destructors.</li></p>

<p><li>The operating system will properly free the memory used by the thread's stack.</li></p>

<p><li>The system will set the process's exit code (maintained in
the process kernel object) to your entry-point function's return
value.</li></p>

<p><li>The system will decrement the process kernel object's usage count.</li></p>
</ul>

<A NAME="59"><h2>The <i>ExitProcess</i> Function</h2></A>
<p>A process terminates when one of the threads in the process calls <i>ExitProcess</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID燛xitProcess(UINT爁uExitCode);
</pre>
</td></tr></table></p>

<p>This function terminates the process and sets the exit code of the process to <i>fuExitCode</i>. <i>ExitProcess</i> doesn't return a value because the process has terminated. If you include any code following the call to <i>ExitProcess</i>, that code will never execute.</p>

<p>When your primary thread's entry-point function (<i>WinMain,
wWinMain, main,</i> or <i>wmain</i>) returns, it returns to the C/C++ run-time startup code, which properly cleans up all the C run-time resources used by the process. After the C run-time resources have been freed, the C run-time startup code explicitly calls <i>ExitProcess</i>, passing it the value returned from your entry-point function. This explains why simply returning from your primary thread's entry-point function terminates the entire process. Note that any other threads running in the process terminate along with the process.</p>

<p>The Windows Platform SDK documentation states that a process does not terminate until all its threads terminate. As far as the operating system goes, this statement is true. However, the C/C++ run time imposes a different policy on an application: the C/C++ run-time startup code ensures that the process terminates when your application's primary thread returns from its entry-point
function&#8212;whether or not other threads are running in the
process&#8212;by calling <i>ExitProcess</i>. However, if you call <i>ExitThread</i> in your entry-point function instead of calling <i>ExitProcess</i> or simply returning, the primary thread for your application will stop executing but the process will not terminate if at least one other thread in the process is still running.</p>

<p>Note that calling <i>ExitProcess</i> or <i>ExitThread</i> causes a process or thread to die while inside a function. As far the operating system is concerned, this is fine and all of the process's or thread's operating system resources will be cleaned up perfectly. However, a C/C++ application should avoid calling these functions because the C/C++ run time might not be able to clean up properly. Examine the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
#include