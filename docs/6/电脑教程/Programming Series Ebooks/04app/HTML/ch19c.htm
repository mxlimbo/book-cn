<HTML>
<HEAD>
<TITLE>The Overall Picture</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch19b.htm">[Previous]</A> <A HREF="ch19d.htm">[Next]</A><P>

<A NAME="252"><H1>The Overall Picture</H1></A>

<p>To fully understand how DLLs work and how you and the
system use DLLs, let's start out by examining the whole picture.
Figure 19-1 summarizes how the components fit together.</p>

<p>For now, we'll concentrate on how executable and DLL modules
implicitly link to one another. Implicit linking is by far the most
common type of linking. Windows also supports explicit linking (which
we'll discuss in <A HREF="ch20a.htm">Chapter 20</A>).</p>

<p>As you can see in Figure 19-1, several files and components come
into play when a module (such as an executable file) makes use of
functions and variables in a DLL. To simplify the discussion, I'll
refer to &quot;executable modules&quot; as importing functions and
variables from a DLL and &quot;DLL modules&quot; as exporting functions
and variables for an executable module. However, be aware that DLL
modules can (and often do) import functions and variables that are
contained in other DLL modules.</p>

<p>
<A HREF="javascript:fullSize('F19si01x.htm')"> <img src="images/F19si01.JPG" width=404 height=506 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><b>Figure 19-1.</b> <i>How a DLL is created and implicitly linked by an application</i><!-- /CAPTION -->
</p>

<p>To build an executable module that imports functions and variables
from a DLL module, you must first build the DLL module. Then you can
build the executable module.</p>

<p>Building a DLL requires the following steps:</p>

<ol>
<p><li> You must first create a header file, which contains the function
prototypes, structures, and symbols that you want to export from the
DLL. This header file is included by all of your DLL's source code
modules to help build the DLL. As you'll see later, this same
header file is required when you build an executable module (or
modules) that uses the functions and variables contained in your
DLL.</li></p>

<p><li> You create the C/C++ source code module (or modules) that
implements the functions and variables that you want in the DLL module.
Since these source code modules are not required to build an executable
module, the DLL company's source code can remain a company
secret.</li></p>

<p><li> Building the DLL module causes the compiler to process each
source code module, producing an .obj module (one .obj module per
source code module).</li></p>

<p><li> After all of the .obj modules are created, the linker combines
the contents of all the .obj modules and produces a single DLL image
file. This image file (or module) contains all the binary code and
global/static data variables for the DLL. This file is required in
order to execute the executable module.</li></p>

<p><li> If the linker detects that the DLL's source code module
exports at least one function or variable, the linker also produces a
single .lib file. This .lib file is small because it contains no
functions or variables. It simply lists all the exported function and
variable symbol names. This file is required in order to build the
executable module.</li></p>
</ol>

<p>Once you build the DLL module, you can build the executable module.
These steps are</p>

<ol>
<p><li value="6"> In all of the source modules that reference functions,
variables, data structures, or symbols, you must include the header
file created by the DLL developer.</li></p>

<p><li> You create the C/C++ source code module (or modules) that
implements the functions and variables that you want in the executable
module. The code can, of course, reference functions and variables
defined in the DLL's header file.</li></p>

<p><li> Building the executable module causes the compiler to process
each source code module, producing an .obj module (one .obj module per
source code module).</li></p>

<p><li> After all of the .obj modules are created, the linker combines
the contents of all the .obj modules and produces a single executable
image file. This image file (or module) contains all the binary code
and global/static data variables for the executable. The executable
module also contains an import section that lists all the DLL module
names required by this executable. (See <A HREF="ch17a.htm">Chapter 17</A> for more on
sections.) In addition, for each DLL name listed, the section indicates
which function and variable symbols are referenced by the
executable's binary code. The operating system loader parses the
import section, as you'll see in a moment.</li></p>
</ol>

<p>Once the DLL and the executable modules are built, a process can
execute. When you attempt to run the executable module, the operating
system's loader performs the following steps:</p>

<ol>
<p><li value="10"> The loader creates a virtual address space for the new process.
The executable module is mapped into the new process's address
space. The loader parses the executable module's import section.
For every DLL name listed in the section, the loader locates the DLL
module on the user's system and maps that DLL into the
process's address space. Note that since a DLL module can import
functions and variables from another DLL module, a DLL module might
have its own import section. To fully initialize a process, the loader
parses every module's import section and maps all required DLL
modules into the process's address space. As you can see,
initializing a process can be time consuming.</li></p>
</ol>

<p>Once the executable module and all of the DLL modules have been
mapped into the process's address space, the process's primary
thread can start executing and the application can run. The next few
sections go into the process in further detail.</p>

</BODY>
</HTML>






