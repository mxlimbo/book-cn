<HTML>
<HEAD>
<TITLE>Using Memory-Mapped Files to Share Data Among Processes</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch17h.htm">[Previous]</A> <A HREF="ch17j.htm">[Next]</A><P>

<A NAME="229"><H1>Using Memory-Mapped Files to Share Data Among Processes</H1></A>

<p>Windows has always excelled at offering mechanisms that allow
applications to share data and information quickly and easily. These
mechanisms include RPC, COM, OLE, DDE, window messages (especially
WM_COPYDATA), the clipboard, mailslots, pipes, sockets, and so on. In
Windows, the lowest-level mechanism for sharing data on a single
machine is the memory-mapped file. That's right, all of the
mechanisms I mention ultimately use memory-mapped files to do their
dirty work if all the processes communicating are on the same machine.
If you require high-performance with low overhead, the memory-mapped
file is the hands-down best mechanism to use.</p>

<p>This data sharing is accomplished by having two or more processes map
views of the same file-mapping object, which means they are sharing the
same pages of physical storage. As a result, when one process writes to
data in a view of a shared file-mapping object, the other processes see
the change instantly in their views. Note that for multiple processes
to share a single file-mapping object, all processes must use exactly
the same name for the file-mapping object.</p>

<p>Let's look at an example: starting an application. When an
application starts, the system calls <i>CreateFile</i> to open the .exe
file on the disk. The system then calls <i>CreateFileMapping</i> to
create a file-mapping object. Finally the system calls <i>
MapViewOfFileEx</i> (with the SEC_IMAGE flag) on behalf of the newly
created process so that the .exe file is mapped into the process's
address space. <i>MapViewOfFileEx</i> is called instead of <i>
MapViewOfFile</i> so that the file's image is mapped to the base
address stored in the .exe file's image. The system creates the
process's primary thread, puts the address of the first byte of
executable code of this mapped view in the thread's instruction
pointer, and then lets the CPU start executing the code.</p>

<p>If the user runs a second instance of the same application, the system
sees that a file-mapping object already exists for the desired .exe
file and doesn't create a new file object or file-mapping object.
Instead, the system maps a view of the file a second time, this time in
the context of the newly created process's address space. What the
system has done is map the identical file into two address spaces
simultaneously. Obviously, this is a more efficient use of memory
because both processes are sharing the same pages of physical storage
containing portions of the code that are executing.</p>

<p>As with all kernel objects, you can use three techniques to share the
objects with multiple processes: handle inheritance, naming, and handle
duplication. See <A HREF="ch03a.htm">Chapter 3</A> for a detailed explanation of all three
techniques.</p>

</BODY>
</HTML>






