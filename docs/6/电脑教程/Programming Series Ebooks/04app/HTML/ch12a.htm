<html>
<head>
<title>Chapter 12 -- Fibers</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch11e.htm">[Previous]</A> <A HREF="ch12b.htm">[Next]</A><P>


<font size="+3">Chapter 12</font>

<A NAME="158"><H1>Fibers</H1></A>

<p>Microsoft added fibers to Windows to make it easy to port existing
UNIX server applications to Windows. UNIX server applications are
single-threaded (by the Windows definition) but can serve multiple
clients. In other words, the developers of UNIX applications have
created their own threading architecture library, which they use to
simulate pure threads. This threading package creates multiple stacks,
saves certain CPU registers, and switches among them to service the
client requests.</p>

<p>Obviously, to get the best performance, these UNIX applications must
be redesigned; the simulated threading library should be replaced with
the pure threads offered by Windows. However, this redesign can take
several months or longer to complete, so companies are first porting
their existing UNIX code to Windows so they can ship something to the
Windows market.</p>

<p>Problems can arise when you port UNIX code to Windows. In
particular, the way in which Windows manages a thread stack is much
more complex than simply allocating memory. Windows stacks start out
with relatively little physical storage and grow as necessary. This
process is described in the section titled &quot;<A HREF="ch16a.htm#204">A Thread'sStack</A>&quot; in <A HREF="ch16a.htm">Chapter 16</A>. Porting is also complicated by the
structured exception handling mechanism (described in <a href="ch23a.htm">Chapters 23</a>, <a href="ch24a.htm">24</a>,
and <a href="ch25a.htm">25</a>).</p>

<p>To help companies port their code more quickly and correctly to
Windows, Microsoft added fibers to the operating system. In this
chapter, we'll examine the concept of a fiber, the functions that
manipulate fibers, and how to take advantage of fibers. Keep in mind,
of course, that you should avoid fibers in favor of more properly
designed applications that use Windows native threads.</p>

</BODY>
</HTML>






