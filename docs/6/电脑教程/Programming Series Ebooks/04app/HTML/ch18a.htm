<html>
<head>
<title>Chapter 18 -- Heaps</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch17k.htm">[Previous]</A> <A HREF="ch18b.htm">[Next]</A><P>



<FONT SIZE="+3">Chapter 18</FONT>


<A NAME="234"><H1>Heaps</H1></A>

<p>The third and last mechanism for manipulating memory is the use of
heaps. Heaps are great for allocating lots of small blocks of data. For
example, linked lists and trees are best managed using heaps rather
than the virtual memory techniques discussed in <A HREF="ch15a.htm">Chapter 15</A> or the
memory-mapped file techniques discussed in <A HREF="ch17a.htm">Chapter 17</A>. The advantage of
heaps is that they allow you to ignore all the allocation granularity
and page boundary stuff and concentrate on the task at hand. The
disadvantage of heaps is that allocating and freeing memory blocks is
slower than the other mechanisms and you lose the direct control over
the committing and decommitting of physical storage.</p>

<p>Internally, a heap is a region of reserved address space. Initially,
most of the pages within the reserved region are not committed with
physical storage. As you make more allocations from the heap, the heap
manager commits more physical storage to the heap. This physical
storage is always allocated from the system's paging file. As you
free blocks within a heap, the heap manager decommits the physical
storage.</p>

<p>Microsoft does not document the exact rules that the heap follows
for committing and decommitting storage&#8212;and the rules are
different for Microsoft Windows 98 and Windows 2000. I can tell you
this: Windows 98 is more concerned with memory usage, so it decommits
heap storage as soon as possible. Windows 2000 is more concerned with
speed, so it tends to hold on to physical storage longer and returns it
to the paging file only after the pages have gone unused for some
period of time. Microsoft is constantly performing stress tests and
running different scenarios to determine the rules that work best most
of the time. As applications and the hardware that runs them change,
these rules will change. If this knowledge is critical to your
application, don't use heaps. Instead, use the virtual memory
functions (that is, <i>VirtualAlloc</i> and <i>VirtualFree</i>) so you
can control these rules yourself.</p>


</BODY>
</HTML>






