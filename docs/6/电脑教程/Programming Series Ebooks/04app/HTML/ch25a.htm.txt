<html>
<head>
<title>Chapter 25 -- Unhandled Exceptions and C++ Exceptions</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch24h.htm">[Previous]</A> <A HREF="ch25b.htm">[Next]</A><P>



<FONT SIZE="+3">Chapter 25</FONT>


<A NAME="335"><H1>Unhandled Exceptions and C++ Exceptions</H1></A>

<p>In the previous chapter, we discussed what happens when a filter
returns EXCEPTION_CONTINUE_SEARCH. Returning this tells the system to
continue walking up the call tree looking for additional exception
filters. But what happens if every filter returns
EXCEPTION_CONTINUE_SEARCH? In this case, we have what's called an
<i>unhandled exception</i>.</p>

<p>Remember from <A HREF="ch06a.htm">Chapter 6</A> that every thread truly begins executing
with a function inside Kernel32.dll called <i>BaseProcessStart</i> or
<i>BaseThreadStart</i>. These two functions are practically identical;
the only difference is that one function is used for a process's
primary thread:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID燘aseProcessStart(PPROCESS_START_ROUTINE爌fnStartAddr)爗
牋燺 _try爗
牋牋牋ExitThread((pfnStartAddr)());
牋爙
牋燺 _except