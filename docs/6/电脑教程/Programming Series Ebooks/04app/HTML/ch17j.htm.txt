<HTML>
<HEAD>
<TITLE>Memory-Mapped Files Backed by the Paging File</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch17i.htm">[Previous]</A> <A HREF="ch17k.htm">[Next]</A><P>

<A NAME="230"><H1>Memory-Mapped Files Backed by the Paging File</H1></A>

<p>So far I've discussed techniques that allow you to map a view of
a file that resides on a disk drive. Many applications create some data
while they run and need to transfer the data or share it with another
process. It would be terribly inconvenient if the applications had to
create a data file on a disk drive and store the data there in order to
share it.</p>

<p>Microsoft realized this and added the ability to create memory-mapped
files that are backed by the system's paging file rather than a
dedicated hard disk file. This method is almost identical to the method
for creating a memory-mapped disk file except that it's even
easier. For one thing, there is no need to call <i>CreateFile</i> since
you will not be creating or opening a dedicated file. Instead, you
simply call <i>CreateFileMapping</i> as you would normally and pass
INVALID_HANDLE_VALUE as the <i>hFile</i> parameter. This tells the system that
you are not creating a file-mapping object whose physical storage
resides in a file on the disk; instead, you want the system to commit
physical storage from the system's paging file. The amount of
storage allocated is determined by <i>CreateFileMapping</i>'s <i>
dwMaximumSizeHigh</i> and <i>dwMaximumSizeLow</i> parameters.</p>

<p>After you have created this file-mapping object and mapped a view of it
into your process's address space, you can use it as you would any
region of memory. If you want to share this data with other processes,
call <i>CreateFileMapping</i> and pass a zero-terminated string as the
<i>pszName</i> parameter. Then other processes that want to access the
storage can call <i>CreateFileMapping</i> or <i>OpenFileMapping</i> and
pass the same name.</p>

<p>When a process no longer needs access to the file-mapping object, that
process should call <i>CloseHandle</i>. When all the handles are
closed, the system will reclaim the committed storage from the
system's paging file.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Here is an interesting problem that has caught unsuspecting
programmers by surprise. Can you guess what is wrong with the following
code fragment?

<p><table cellpadding="5"><tr><td>
<pre>
HANDLEçˆƒFile