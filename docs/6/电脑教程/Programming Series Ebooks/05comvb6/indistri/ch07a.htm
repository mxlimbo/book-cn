<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Chapter 7 -- Exploring Apartments and Multithreading</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06e.htm", "ch07b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<font size="+3">Chapter 7</font>

<A NAME="100"><H1>Exploring Apartments and Multithreading</H1></A>

<p>Using Microsoft Visual Basic, you can create multithreaded ActiveX DLLs and EXEs. This can be advantageous in a handful of situations, but multithreading also adds a level of complexity to your code that can be highly unpredictable if you don't know exactly what you're doing. You should approach multithreading with extreme caution. You must have a solid understanding of the conceptual issues before you begin to add multithreaded techniques to your production code. Bad things happen to good programmers who approach multithreading with a casual attitude. This chapter shows you what you need to know and encourages you to think long and hard about whether multithreaded applications are really worth the trouble.

<p>Why would you need multiple threads in an application? Many new programmers think that multithreading is done to make things faster. In most cases, however, the purpose of a secondary thread is to improve responsiveness. When a user is editing a document in Microsoft Word, for example, background tasks such as document repagination and print spooling jobs are conducted on secondary threads. This allows the application to be fully responsive to the user at all times.

<p>Can multithreading ever really speed things up? On a computer with a single processor, usually not. Each additional thread creates more administrative overhead for the system's thread scheduler. The overall throughput of the system actually diminishes as more time is spent switching among threads and less time is spent doing real work. The primary situation in which multiple threads significantly increase the throughput and speed of an application is on a computer with two or more processors.

<p>Earlier versions of Visual Basic had few threading capabilities. Since Visual Basic has been used primarily to create forms-based, single-user applications, this limitation hasn't been overly taxing. Many programmers have found that the <I>DoEvents </I>statement can simulate multithreading to a degree and provide applications with greater responsiveness.

<p>Recently Visual Basic has become popular for building nonvisual, server-side business objects. In a server-side process with many connected clients, threading becomes a much greater concern. The way that a distributed application deals with threading determines whether it can scale up to accommodate a larger user base. If you're creating server-side objects, you should understand what's going on with threading in both Visual Basic and COM.

<p>You must understand what a COM apartment is if you want to master the multithreading techniques available in Visual Basic. However, before you can understand apartments, you must understand the principles of threading in the Win32 API. This chapter begins by explaining how threads are created and managed by the Win32 API. Even though you won't directly apply these Win32 techniques and concepts from within Visual Basic, you must understand them. Everything that COM does with apartments is built on top of the Win32 threading model.

</BODY>
</HTML>






