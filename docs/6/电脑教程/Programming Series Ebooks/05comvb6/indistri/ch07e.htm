<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Threading in the COM+ Era</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="113"><H1>Threading in the COM+ Era</H1></A>

<p>A future version of COM+ will likely address some of the performance limitations of the STA. Currently, if you want COM to serialize access to your objects automatically, you must put them in single-threaded apartments. This has the desired effect of ensuring that all calls to your object are serialized. This practice also has the potentially costly effect of forcing a thread to be dedicated to servicing those calls for the lifetime of the process, rather than simply using an RPC thread borrowed from the RPC thread pool. Microsoft is now working on an enhanced model for concurrency management that has the working name <I>activity threading, </I>or <I>worker threading. </I>Like today's STA-based objects, activity-threaded objects don't need to worry about concurrent access. However, unlike today's STA-based objects, activity-threaded objects don't require a dedicated thread. Instead, the RPC layer can directly dispatch calls to objects using an arbitrary thread borrowed from the RPC thread pool. The RPC layer will track activitywide locks and block any incoming method requests until all previous calls have completed.

<p>While the locking in the activity-threaded model will still protect your objects from concurrent access, it will provide a faster and more scalable architecture. Today's STA-based model has limited scalability because every new STA requires a dedicated thread to service incoming calls. Because COM+ activities won't require dedicated threads, creating hundreds or thousands of activities will be far more acceptable than creating the same number of STAs today. The good news for Visual Basic programmers is that you probably won't have to do anything differently when the activity model becomes available. (Actually, it's available today in MTS, but the current implementation pins activities to STA threads.)

<p>The code you write today for an STA should not behave any differently when COM+'s new activity threading implementation ships later this century. Your Visual Basic objects will simply run faster and be more responsive. That's the good news. The bad news is that your objects will not be able to take advantage of this new threading implementation until the Visual Basic team modifies both its run-time layer and its compiler to provide support for this new model. As mentioned earlier in this chapter, every component created by Visual Basic today has thread affinity. All Visual Basic objects rely on data that's kept in thread-local storage. This means that a Visual Basic object can be accessed only by the thread that created it. Objects with thread affinity won't be able to take advantage of this new model.

</BODY>
</HTML>






