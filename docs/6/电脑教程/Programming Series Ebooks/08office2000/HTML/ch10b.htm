<HTML>
<HEAD>
<TITLE>About the Solution, Chapter 10</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch10a.htm">[Previous]</A> <A HREF="ch10c.htm">[Next]</A><P>

<A NAME="195"><H1>About the Solution</H1></A>

<P>As I discussed in <A HREF="ch06a.htm">Chapter 6</A>, most businesses have some set of metrics by which 
they measure the health of a project, a production process, or the entire company. 
Often those metrics are fairly stable, and a user needs to examine them only once a 
day, week, or month. However, occasionally those metrics are exceptionally 
volatile, changing nearly every second, and spreadsheet models that use them as input 
need to recalculate as they change. Common examples of real-time metrics include 
current call loads at a call center, production line reject rates, network server 
statistics, and financial market information.</P>

<P>To illustrate integrating real-time data into the Spreadsheet component, I 
built a real-time stock portfolio application. Using this application, you can build a 
custom stock portfolio and watch the net worth change as prices fluctuate throughout 
the trading day. (Note that values will not change after the market closes at 4:00 
p.m. Eastern time.) Since the solution gets its data from the Microsoft Investor web 
site (http://www.investor.msn.com), the data is actually delayed by 20 minutes. 
However, the technique would be exactly the same if you purchased a real-time data feed 
from the market itself. You can also save your current portfolio to a new local file 
using Internet Explorer's File|Save As menu command. Although you might think 
saving the current state of the control should require no additional work, it actually 
does. I will describe the details and hidden traps of this later in the chapter.</P>

<P>Stock prices have a fairly universal appeal, and it is relatively easy to get 
stock information (delayed 20 minutes) from the Internet, so this type of data makes 
for an easy example. However, you can use the same techniques I discuss in this 
chapter to integrate any type of highly dynamic data. The key is to expose that data 
as properties of a COM object, which is quite simple using Microsoft Visual Basic.</P>

<P><div class="warning"><blockquote><b>WARNING</b><HR>
The Spreadsheet component can handle quite a few property 
bindings in one spreadsheet, but its performance will degrade proportionally to 
the number of bindings you create. To test the scalability of this feature, I created 
a Clock object that exposes a Time property. The clock sends a property 
change notification every second, causing the Spreadsheet control to get the new 
time value. To start with, I inserted the formula &quot;=document.Clock.Time&quot; into the 
first cell and let it run for a while. The cell's value updated every second, and 
everything seemed to work well. I then entered that same formula into 200 
spreadsheet cells and let the sample run for a while. The Spreadsheet control 
handled it, but it took longer than 1 second to process all the change notifications 
and get all the new values. Instead of seeing the cells update every second, I 
saw them update every 2 seconds. You should use this technique only when you 
have few cells to update or when the properties do not change faster than the 
Spreadsheet control can process the change notifications.
</blockquote></div></p>

</BODY>
</HTML>





