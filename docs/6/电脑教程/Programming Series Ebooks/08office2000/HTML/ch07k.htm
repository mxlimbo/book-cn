<HTML>
<HEAD>
<TITLE>Formatting the Report Based on Page Styles</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch07j.htm">[Previous]</A> <A HREF="ch07l.htm">[Next]</A><P>

<A NAME="167"><H1>Formatting the Report Based on Page Styles</H1></A>

<P>In the <a href="ch06a.htm">previous chapter</a>, I showed you how to format the Chart control based 
on the formatting encoded into the containing page's style sheet. This solution 
uses that same code for the chart and uses the sister function FormatPivotFromStyles 
to format the PivotTable control with the style sheet information. I will not discuss 
this function in detail because it is similar to the FormatChartFromStyles function 
covered in <A HREF="ch06a.htm">Chapter 6</A>. </P>

<P>Note that the FormatPivotFromStyles function will look for a few extra 
selectors and attributes in the style sheet that you might want set. For example, it is 
often useful to format total values with a nice number format. You can apply these 
number formats in code, or you can use the FormatPivotFromStyles function and 
encode them in your style sheet like so:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Store Sales
{
    number-format: $#,##0.00
}

Unit Sales
{
    number-format: $#,##0.00
}

Sales Count
{
    number-format: #,##0
}
</pre></td></tr></table></p>


<P>The function will look for selectors of the same name or unique name as 
the total. You can also use selectors such as PivotTable, PivotTitlebar, PivotFields, 
and PivotMembers to format the various PivotTable control elements. For more details 
on which selectors are supported, see the FormatPivotFromStyles function in 
the FormatControls.scp file in the Scripts directory on the companion CD. </P>

<P>The other interesting formatting function is FormatPivotSubtotalsFromStyles, 
also in the FormatControls.scp file on the CD. This function runs through the various 
fields on the Row and Column axes and sets the SubtotalBackColor and SubtotalFont 
properties based on the GrandTotals and 
SubtotalsLevel<I>N</I> selectors in the style sheet. 
<I>N</I> is the subtotal level in your report starting at 1. For example, suppose you have 
the following code in your style sheet:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
GrandTotals
{
    color: White;
    background-color: #9faccb;
    font-family: Verdana;

    font-size: 9pt;
    font-weight: bold;
}

SubtotalsLevel1
{
    color: Black;
    background-color: White;
    font-family: Verdana;

    font-size: 9pt;
    font-weight: bold;
}

SubtotalsLevel2
{
    color: Black;
    background-color: White;
    font-family: Verdana;

    font-size: 8pt;
    font-weight: bold;
}
</pre></td></tr></table></p>


<P>In this example, the FormatPivotSubtotalsFromStyles function would set 
the background color of the report's grand totals to #9faccb (a pleasant baby blue) 
and the font to bold, white, 9-point Verdana. The function would format the subtotals 
in the next level as bold, black, 9-point Verdana and the subtotals in the following 
level as bold, black, 8-point Verdana. If you call this function from the 
PivotTable component's QueryComplete event handler, you can emulate automatic 
formatting so that the grand total and each level of subtotals appears in a particular way, 
regardless of which fields are located on which axes.</P>


</BODY>
</HTML>





