<HTML>
<HEAD>
<TITLE>About the Code</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="introb.htm">[Previous]</A> <A HREF="introd.htm">[Next]</A><P>

<A NAME="238"><H1>About the Code</H1></A>

<P>Nearly all the code in this book is written in Microsoft Visual 
Basic, Scripting Edition (VBScript) and exists as client-side script in a web page or as script in an 
ASP (Microsoft Active Server Pages) page. (However, <A HREF="ch11a.htm">Chapter 11</A> contains code 
written in Visual Basic.) This is not meant to imply that the Office Web Components can 
be scripted only in web or ASP pages, nor is it meant to imply that you cannot 
use JavaScript, C++, or other COM-enabled languages. My choice of VBScript was 
based on two considerations:</p>

<UL>
<P><LI>Developers familiar with programming Office will be more familiar 
with VBScript than with other languages because VBScript is a subset of 
VBA, which is the programming language embedded in Office applications.</LI></P>
<P><LI>VBScript has more functionality and far better error-handling 
capabilities than JavaScript. This enabled me to write better examples and 
more robust solutions.</LI></P>
</UL>


 <P>My choice of web and ASP pages (as opposed to Visual Basic or C++ 
applications) as the execution context was primarily due to developers' current 
excitement about these environments. Many developers recognize the benefits presented by 
Internet technologies, and I wanted this book to illustrate how the Office Web 
Components work in that environment.</P>
<P>My naming and coding conventions might be slightly different than what you 
have seen before. I developed them when implementing information systems in 
Microsoft's Information Technology group. My conventions are similar to most naming 
conventions evangelized by others, using consistent prefixes to variable names to denote 
their purpose in the code. However, while others base prefixes solely on a 
variable's data type, I prefer to encode a bit more meaning into my prefixes. For example, 
instead of giving a prefix of &quot;l&quot; or &quot;n&quot; to all Long number variables, I use a prefix that 
denotes the variable's <I>purpose,</I> such as &quot;ct&quot; for counter or &quot;id&quot; for unique identifier.</P>

</BODY>
</HTML>





