<HTML>
<HEAD>
<TITLE>Using the Web Installer</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch12b.htm">[Previous]</A> <A HREF="ch12d.htm">[Next]</A><P>

<A NAME="227"><H1>Using the Web Installer</H1></A>

<P>If your target runtime environment is a web browser (or the Web Browser 
COM control in a Microsoft Visual Basic or C++ application), you can configure your 
application to automatically download and install the Office Web Components 
using the special Web Installer provided in the Office 2000 setup. Using the 
Microsoft Windows Installer technology, the Web Installer deploys only the OWC library 
and MDAC 2.1 files to the client, leaving the rest of Office 2000 on the file server.</P>

<A NAME="228"><H2>Creating a Network Install Image</H2></A>

<P>To use the Web Installer, you must first create an Office 2000 network install 
image on a file server. Most large corporations already do this because it provides 
the opportunity to preconfigure the Office setup experience and the initial 
application options to match company policies. If your corporation has created such an 
install image, you can use it as the source for the Office Web Components installation.</P>

<P>If your company has not set up an image, you can either use the Office 
Resource Kit or you can simply run the Office 2000 setup wizard using the /a 
command-line switch. For example, if your CD drive is D:, insert CD 1 from your Office 2000 
CD set and type the following command:</P>

<P><table cellpadding=5 width="95%"><tr><td>
<PRE>
D:\setup.exe /a
</pre></td></tr></table></p>
<P>The setup wizard will run in administrative setup mode, allowing you to 
specify a file location for the network install image. The wizard will copy all the files 
from CD 1 to this directory, which consumes about 554 MB. Unfortunately, neither 
the Office Resource Kit nor the administrative setup 
allows you to copy only the subset of files needed for the Office Web Components; however, the file 
lists at the end of this chapter will help you determine which files you actually need. The Web Installer 
was built to find the necessary files in the directory structure defined on the CD and 
copy them to the client machine, so you cannot simply copy some of the files from 
the CD into a directory structure of your own choosing.</P>

<A NAME="229"><H2>Specifying the Codebase Attribute</H2></A>

<P>After creating your network install image, the next step in enabling the 
automatic download of the components is to add the codebase attribute to all your object 
tags. The codebase attribute is the key to making Microsoft Internet Explorer 
automatically download and run the Web Installer&#8212;if you omit the codebase attribute, 
Internet Explorer will fail to load the controls and will instead display the alternate 
HTML defined for the &lt;object&gt; tag.</P>

<P>The codebase tag tells Internet Explorer the location from which it should 
install a component that is not yet installed on the client's system. If the class ID defined 
in the &lt;object&gt; tag's classid attribute is not registered, or if the existing version is 
older than the requested version, Internet Explorer automatically uses the URL 
specified in the codebase attribute to download and install the component. A typical 
&lt;object&gt; tag and codebase attribute look like this:</P>

<P><table cellpadding=5 width="95%"><tr><td>
<PRE>
&lt;object id=&quot;Spreadsheet1&quot;
  classid=&quot;CLSID:0002E510-0000-0000-C000-000000000046&quot;
  codebase=
  &quot;file:\\OfficeInstallServer\InstallShare\Msowc.cab#version=9,0,0,2710&quot;
&gt;
</pre></td></tr></table></p>

<P>The first part of the codebase attribute (the part before the hash symbol [#]) 
in this example points back to a file path on a mythical file server called 
OfficeInstallServer with a mythical share called InstallShare. This path should point directly to the 
Office network install image I described earlier. The Msowc.cab file is the file your 
codebase attribute should reference, and it is in the root of the Office network install image.</P>

<P>The second part of the codebase attribute (the part after #) specifies an 
explicit version of the OWC library. This part of the codebase tag is optional, but it is 
extremely useful for forcing clients to automatically upgrade to a newer version of the 
library. When you include the version number, Internet Explorer checks the existing 
version of the component implementing the specified class ID to make sure it is the 
requested version or higher. If not, Internet Explorer automatically downloads the newer 
version and installs it.</P>

<P>Because of the licensing restrictions on the Office Web Components, the 
value in the codebase attribute must be a file: path rather than an http: path. The 
Web Installer will ensure that the codebase attribute starts with &quot;file:&quot; before installing 
the OWC library. If the Web Installer allowed downloading of the OWC library 
over the Internet, you could not guarantee that the client machine had an Office 
2000 license. You can still take advantage of clients that do have the Office Web 
Components installed by simply writing pages without codebase attributes and offering 
the user a choice between static or interactive content, as I demonstrated in <A HREF="ch09a.htm">Chapter 9</A>.</P>

<A NAME="230"><H2>Running the Web Installer</H2></A>

<P>As you might have noticed, the Msowc.cab file is actually quite small&#8212;86 KB to 
be exact. This is because this file contains only the Web Installer itself. When Internet 
Explorer starts an automatic download of the OWC library using the codebase 
attribute, it first downloads and installs the Web Installer. The Web Installer then registers 
itself as implementing all the class IDs of the Office Web Components so that it 
can masquerade as if it were the components themselves.</P>

<P>Internet Explorer then creates an instance of the Web Installer for each 
Office Web Component used in the page. Instead of displaying the real OWC control, the 
Web Installer displays a watermark and begins the process of installing the OWC 
library (and MDAC 2.1 if you do not already have it installed). When you first start the 
installation process, your page will look something like Figure 12-1.</P>

<P>
<A HREF="javascript:fullSize('f12pi01x.htm')"> <img src="images/f12pi01.JPG" width=404 height=289 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-1.</B> <I>The Web Installer starting a dynamic install.</I><!-- /CAPTION -->
</P>

<P>The opening screen of the Web Installer verifies that the user does want 
to install the Office Web Components, describes the Office 2000 license 
requirement, and warns the user that the full download (including MDAC 2.1) can take a 
while over a slow connection. If the user chooses Yes in this dialog box, he or she is 
then shown the full end user license agreement for the components, which is depicted 
in Figure 12-2.</P>

<P>
<img src="images/f12pi02.GIF" width=398 height=345 border="0">
</P><P>
<!-- CAPTION --><B>Figure 12-2.</B> <I>The Web Installer's End User License Agreement Dialog Box.</I><!-- /CAPTION -->
</P>

<P>The content displayed in this dialog box comes from the License.txt file 
located in the root directory of the Office 2000 network install image you created earlier.</P>

<P>After the user accepts the license agreement, the Web Installer ensures that 
the Windows Installer&#8212;the new install engine in Office 2000 and Windows 
2000&#8212;is present on the system (downloading it if necessary) and then uses that engine to 
install the OWC library and the MDAC 2.1 files if they are not already on the system. 
The Windows Installer displays a dialog box with a progress meter that informs the 
user how long it will take to complete the install. This dialog box is depicted in Figure 
12-3.</P>

<P>
<img src="images/f12pi03.GIF" width=386 height=147 border="0">
</P><P>
<!-- CAPTION --><B>Figure 12-3.</B> <I>The Windows Installer deploying the Office Web Components.</I><!-- /CAPTION -->
</P>

<P>After the Web Installer finishes, it notifies Internet Explorer to reload the 
current page. Now that the real Office Web Components are registered, Internet 
Explorer creates the real controls and displays them in the page.</P>

<P>The Web Installer begins the download process before any code in 
your window_onLoad event handler executes. After the install, Internet Explorer 
reloads the page and then fires the window_onLoad event, giving you the opportunity 
to initialize the controls. Note that if the user chooses No in the first dialog box, the 
Web Installer halts the installation process and your window_onLoad event handler 
will run. However, because the controls were not installed, script that references 
properties and methods of the controls will fail. If you are enabling an automatic 
download through the Web Installer, you should use one of two methods to ensure 
that the controls were indeed installed:</P>

<UL>
<P><LI>Use the On Error Resume Next declaration, and then try to read one 
of the properties from the control, such as MajorVersion. If the control 
was not installed, this will fail and Err.Number will return a nonzero value.</LI></P>

<P><LI>Use the TypeName function to ask for the type name of the control. 
For example, the code TypeName(Spreadsheet1.Object) will return 
&quot;Spreadsheet&quot; if the Spreadsheet control was properly installed; otherwise, it 
will return &quot;IWebInstCtl&quot;, which is the class name of the Web Installer.</LI></P>
</UL>


 <P>Note that if any file being installed is currently in use, the Web Installer will 
notify the user that he or she must reboot the system before running the page. Because 
the Office Web Components are new to Office 2000 and since they do not 
upgrade existing Office 95 or 97 files, it is necessary to reboot only when another 
application is using one of the MDAC files. Because the Data Access Group chose to keep all 
its DLL names the same, it is possible that another application will be using an 
older version of an MDAC file, and the Web Installer cannot simply overwrite a DLL that 
is in use. Because forcing a reboot can be disruptive to the user, you might 
consider creating a special installation page, as described in the next section.</P>

<A NAME="231"><H2>Creating an Installation Page</H2></A>

<P>An installation page is a special page in your web site that knows how to check 
the client machine to see whether the Office Web Components are already installed. 
If the components have not been installed, this page will ask the user whether he 
or she wants to install them and will let the user continue after the installation 
finishes. Checking for the presence of the OWC library is also an easy way to 
dynamically determine whether you should return a page with an interactive control or a 
page with static information from a web site on the Internet.</P>

<P>I have implemented a simple installation page in the InstallOWC.asp file 
located in the Chap12 folder on the companion CD. You can use this file as is or 
customize it to fit the look and feel of your particular site. To call this page, use the 
following URL syntax:</P>

<P>
<table cellpadding=5 width="95%"><tr><td>
<PRE>
InstallOWC.asp?ContinueTo=<I>URL</I>&amp;Codebase=<I>CodebaseURL</I>
</pre></td></tr></table>
</P>

<P>In this line, <I>URL</I> is the URL that you want the page to navigate to if the 
OWC library is installed (or after it is installed), and 
<I>CodebaseURL</I> is the value you would normally put in the codebase attribute, as I described earlier. The page will 
check for the existence of the OWC library&#8212;if it is installed, the page will 
immediately navigate to the URL specified in the ContinueTo parameter. If not, the page will 
return a page containing the Chart control, placing the value from the Codebase 
parameter into the &lt;object&gt; tag's codebase attribute.</P>

<P>Let's take a look at how this page works. The Microsoft Active Server Pages 
script will emit this HTML and client-side script fragment when first checking for the 
presence of the OWC library:</P>

<P>
<table cellpadding=5 width="95%"><tr><td>
<PRE>
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
&lt;p id=lblChecking&gt;Checking whether the Microsoft Office 2000 Web
Components are installed...&lt;/p&gt;

&lt;script language=vbscript&gt;
Option Explicit

' Attempt to create an Office Web Component as
' an object in memory to determine whether the OWC
' library is installed
On Error Resume Next
Dim objOWC
Set objOWC = CreateObject(&quot;OWC.Chart.9&quot;)
' If this was successful
If Err.number = 0 Then
    ' And if the object reference is something
    If Not(objOWC Is Nothing) Then
        ' Check the MinorVersion and BuildNumber to make
        ' sure it is the required version
        ' (Note: Change these values if you want to require
        ' a version other than the version
        ' released with Microsoft Office 2000)
        If objOWC.MinorVersion &gt;= 0 And _
            StrComp(objOWC.BuildNumber,&quot;2710&quot;) = 0 Then
            window.navigate &quot;&lt;%= Request(&quot;ContinueTo&quot;) %&gt;&quot;
        End If 'Correct version
    End If 'Components installed
End If 'No error on create
&lt;/script&gt;
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
</pre></td></tr></table>
</P>

<P>The script block attempts to create the object OWC.Chart.9, and if 
successful (if Err.Number is 0), the script checks that the version number is acceptable. If all 
this checks out, the script navigates the window to the URL specified in the 
ContinueTo parameter and your user continues to work with your web site. Note that 
because the Office Web Components are marked as safe for initialization and safe for 
scripting, this code will not produce security warnings, meaning it is extremely unobtrusive.</P>

<P>If the CreateObject function fails or if the version number is not correct, the 
page continues by emitting this HTML fragment:</P>

<P>
<table cellpadding=5 width="95%"><tr><td>
<PRE>
&lt;p id=lblInstall style=&quot;display:none&quot;&gt;
&lt;b&gt;You need to install the Microsoft Office 2000 Web Components.&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
Installing the components might take some time over a slow connection. 
To make the installation as easy as possible, you should close 
any other applications you have running before starting 
the installation.
&lt;/p&gt;
&lt;a href=&quot;InstallOWC.asp?ContinueTo=&lt;%= Request(&quot;ContinueTo&quot;) %&gt;
&amp;Codebase=&lt;%= Request(&quot;Codebase&quot;) %&gt;&amp;Install=True&quot;&gt;
&lt;img src=&quot;PoweredByMSOWC.gif&quot; border=none&gt;
&lt;b&gt;Click here to install the Microsoft Office 2000 Web Components.&lt;/b&gt;
&lt;/a&gt;

&lt;script language=vbscript&gt;
Option Explicit
lblChecking.style.display = &quot;none&quot;
lblInstall.style.display = &quot;&quot;
&lt;/script&gt;
</pre></td></tr></table>
</P>

<P>This HTML warns the user that the download might take some time and 
encourages him or her to shut down all other applications in case any of the MDAC 
files are in use. The HTML then provides a hyperlink that returns to the same ASP 
page, but this time it passes the Install=True query string attribute, which causes the 
page to emit the following HTML and client-side script fragment:</P>

<P>
<table cellpadding=5 width="95%"><tr><td>
<PRE>
&lt;p&gt;Installing the Microsoft Office 2000 Web Components...&lt;/p&gt;
&lt;p id=lblClick&gt;When you see the chart, click it to continue.&lt;/p&gt;
&lt;object id=cspace
width=&quot;50%&quot; height=&quot;50%&quot;
classid=&quot;clsid:0002E500-0000-0000-C000-000000000046&quot;
codebase=&quot;&lt;%= Request(&quot;Codebase&quot;) %&gt;&quot;
&gt;
&lt;/object&gt;

&lt;script language=vbscript&gt;
'------------------------------------------------------------------------
' Window Load Event Handler
'
Sub window_onLoad()
    Dim cht     ' Temporary WCChart reference
    Dim c       ' Constants object reference
    Dim ser     ' Temporary WCSeries reference
    
    ' Check for successful download
    On Error Resume Next
    Dim nMajorVer
    nMajorVer = cspace.MajorVersion
    If Err.number &lt;&gt; 0 Then
        Exit Sub
    End If
    On Error Goto 0
    
    ' Create a simple literal data chart
    Set c = cspace.Constants
    Set cht = cspace.Charts.Add()
    cht.HasLegend = True
    cht.SetData c.chDimSeriesNames, c.chDataLiteral, _
        Array(&quot;Forecasted Sales&quot;, &quot;Actual Sales&quot;)
    cht.SetData c.chDimCategories, c.chDataLiteral, _
        Array(&quot;Quarter 1&quot;, &quot;Quarter 2&quot;, &quot;Quarter 3&quot;, &quot;Quarter 4&quot;)

    Set ser = cht.SeriesCollection(0)
    ser.SetData c.chDimValues, c.chDataLiteral, _
        Array(100000, 110000, 120000, 130000)

    Set ser = cht.SeriesCollection(1)
    ser.SetData c.chDimValues, c.chDataLiteral, _
        Array(110000, 140000, 170000, 190000)
End Sub

'-------------------------------------------------------------------------
' Chart Space Click Event Handler
'
Sub cspace_Click(evtinfo)
    window.navigate &quot;&lt;%= Request(&quot;ContinueTo&quot;) %&gt;&quot;
End Sub 'cspace_Click()

'-------------------------------------------------------------------------
' Chart Space MouseMove Event Handler
'
Sub cspace_MouseMove(evtinfo)
    lblClick.style.fontWeight = &quot;Bold&quot;
End Sub 'cspace_MouseMove()

'-------------------------------------------------------------------------
' Document MouseOver Event Handler
'
Sub document_onMouseOver()
    lblClick.style.fontWeight = &quot;&quot;
End Sub
&lt;/script&gt;
</pre></td></tr></table>
</P>

<P>The HTML fragment contains an &lt;object&gt; tag for the Chart control, 
specifying the codebase attribute so that Internet Explorer will begin the download process 
and invoke the Web Installer. When the Web Installer finishes, Internet Explorer fires 
the window_onLoad event and the code in that event's handler adds some literal 
data to the chart. When the user clicks the Chart control, the client-side code 
navigates the window to the URL specified in the ContinueTo parameter and the user 
continues to use your web site as normal.</P>

</BODY>
</HTML>





