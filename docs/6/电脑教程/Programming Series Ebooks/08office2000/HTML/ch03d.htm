<html>
<head>
<title>Key Elements of the Programming Model, Chapter 3</title>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>

<BODY>
<A HREF="ch03c.htm">[Previous]</A> <A HREF="ch03e.htm">[Next]</A><P>

<A NAME="78"><H1>Key Elements of the Programming Model</H1></A>

<p>As in the <a href="ch02a.htm">previous chapter</a>, I want to finish by highlighting the key elements of 
the Chart component's programming model. The properties, methods, and events 
listed in this section are the subset that you will likely want to use often and are 
organized according to the tasks you will typically want to perform.</p>

<p>I will not repeat the parts of the Spreadsheet component's programming 
model that I noted in the <a href="ch02a.htm">previous chapter</a> as applying to all the controls in the Office 
Web Components library&#8212;you can refer back to <A HREF="ch02a.htm">Chapter 2</A> for a list and explanation 
of those properties.</p>


<A NAME="79"><H2>Creating Charts in the Chart Space</H2></A>

<p>When you create a new ChartSpace object, it initially does not contain any 
charts. To add a chart to the ChartSpace object, use the Add method of the WCCharts 
collection. Table 3-1 lists the properties and methods you will use to add and 
remove charts from the chart space.</p>

<p><B>Table 3-1.</B> <I>Properties and methods for adding and removing charts from the chart space.</I></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">
		
		<TR>
			<TH><I>Property or Method</I></TH>
			<TH><I>Description</I></TH>
		</TR>

		<TR>
			<TD VALIGN="TOP">ChartSpace.Charts</TD>
			<TD VALIGN="TOP">This property returns the WCCharts collection of all the WCChart objects in the Chart control.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCCharts.Add</TD>
			<TD VALIGN="TOP">Use this method to add a new chart to the chart space.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">ChartSpace.Clear</TD>
			<TD VALIGN="TOP">This method clears all content from the Chart control. Use it to quickly remove all charts, data sources, and any other elements created within the chart space.</TD>
		</TR>

	</TABLE>
</p>


<A NAME="80"><H2>Changing Chart or Series Types</H2></A>

<p>As you will recall, we discussed the various chart types much earlier in the 
chapter. Changing from one chart type to another is as simple as setting one property, as 
Table 3-2 shows.</p>

<p><B>Table 3-2.</B> <I>Properties and constants for changing chart or series types.</i></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH><I>Property or Enum</i></TH>
			<TH><i>Description</I></TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCChart.Type</TD>
			<TD VALIGN="TOP">This property sets or returns the type for all series in a chart.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCSeries.Type</TD>
			<TD VALIGN="TOP">This property sets or returns the type for a single series in a chart. Multiple series can each have their own type, but not all types can be combined in one chart (as discussed earlier in the chapter in the &quot;<A HREF="ch03b.htm#62">Combination Charts</A>&quot; section).</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">ChartChartTypeEnum</TD>
			<TD VALIGN="TOP">This enumeration contains all the constants you can use with the two Type properties just described.</TD>
		</TR>
		
	</TABLE>
</p>
     
     
<A NAME="81"><H2>Loading the Chart with Data</H2></A>

<p>Table 3-3 lists the methods you will use to load the Chart component with data. 
For more detailed explanations and example code, see the section &quot;<A HREF="ch02b.htm#20">Loading Data</A>&quot; 
that appears earlier in the chapter.</p>

<p><B>Table 3-3.</B> <I>Methods for loading data into a chart.</I></p>

<P>
	<TABLE CELLPADDING=5 WIDTH="95%">
	
		<TR>
			<TH><I>Method</i></TH>
			<TH><i>Description</I></TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCChart.SetData</TD>
			<TD VALIGN="TOP">This method can be used to load data into the entire chart at once, including the series names.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCSeries.SetData</TD>
			<TD VALIGN="TOP">This method loads data into a given series.</TD>
		</TR>

	</TABLE>
</P>	
     

<A NAME="82"><H2>Exporting a GIF Image</H2></A>

<p>You can export the Chart control's current contents to a GIF image on disk at 
any time. Use the ExportPicture method, which is described in Table 3-4.</p>

<p><B>Table 3-4.</B> <I>Method for creating a GIF image of the chart space.</I></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
			<TH><I>Method</i></TH>
			<TH><i>Description</I></TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">ChartSpace.ExportPicture</TD>
			<TD VALIGN="TOP">This method exports the Chart control's current contents to a GIF image file. You can specify the filename, width, and height. If you specify the optional FilterName parameter, it must be &quot;GIF&quot; since the only format implemented in this version of the control is GIF.</TD>
		</TR>
		
	</TABLE>
</p>


<A NAME="83"><H2>Working with Axes</H2></A>

<p>Often you will want to adjust the look of the various axes in your chart. Use 
the properties outlined in Table 3-5 to accomplish this.</p>

<p><B>Table 3-5.</B> <I>Properties for formatting the chart axes.</I></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH><I>Property</I></TH>
			<TH><I>Description</I></TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCChart.Axes</TD>
			<TD VALIGN="TOP">This property returns the WCAxes collection, from which you can obtain a specific axis. To ask for an axis by its location, use the appropriate constant from ChartAxisPositionEnum. To retrieve the axes in order, use their index values.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCAxis.NumberFormat</TD>
			<TD VALIGN="TOP">This property sets or returns the number format used for value axis labels. You can specify any number format that the Spreadsheet control supports, including the named formats and the custom formats.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCAxis.Font</TD>
			<TD VALIGN="TOP">This property returns the OWCFont object for the axis. You can use the properties of this object to adjust the name, size, and other font attributes of the axis labels.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCAxis.HasTitle</TD>
			<TD VALIGN="TOP">This property sets or returns whether the axis has a title. If this property is False, no title exists; the space it would have used is reclaimed for the chart. If this property is set to True, the axis will have a title; you can use the WCAxis.Title property to get at the WCTitle object and set its caption. Note that accessing the Title property while WCAxis.HasTitle is False results in a runtime error.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCAxis.Title</TD>
			<TD VALIGN="TOP">This property returns the WCTitle object for the axis, with which you can set the title's caption, font, and color settings.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">WCAxis.TickLabelSpacing</TD>
			<TD VALIGN="TOP">This property sets or returns the tick label spacing used for the axis. The tick label spacing determines how many labels are dropped from the axis between those that are displayed. This technique is useful for dropping date values when you have too many to show. The dropped labels can be assumed based on the surrounding labels.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCAxis.TickMarkSpacing</TD>
			<TD VALIGN="TOP">This property sets or returns the spacing between tick marks on an axis. Like the TickLabelSpacing property, this property determines how many tick marks should be dropped between those that are shown.</TD>
		</TR>
		
	</TABLE>
</p>


<A NAME="84"><H2>Manipulating the Legend</H2></A>

<p>You might want to hide or show the legend of a chart or hide individual legend 
entries. To do so, use the properties discussed in Table 3-6.</p>

<p><B>Table 3-6.</B> <I>Properties for manipulating legend display.</I></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">
	
		<TR>
			<TH><I>Property</i></TH>
			<TH><i>Description</I></TH>
		</TR>

		<TR>
			<TD VALIGN="TOP">ChartSpace.HasChartSpaceLegend, WCChart.HasLegend</TD>
			<TD VALIGN="TOP">Like the WCAxis.HasTitle property described in Table 3-5, the HasChartSpaceLegend and HasLegend properties determine whether the chart space and individual chart will show and reserve space for a legend. To use the ChartSpaceLegend or Legend property described below, first set the HasChartSpaceLegend or HasLegend property to True.</TD>			
		</TR>
		
		<TR>
			<TD VALIGN="TOP">ChartSpace.ChartSpaceLegend, WCChart.Legend</TD>
			<TD VALIGN="TOP">The ChartSpaceLegend and Legend properties return WCLegend objects that represent the legends for the entire chart space and the individual chart, respectively.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCLegend.LegendEntries</TD>
			<TD VALIGN="TOP">This property returns the WCLegendEntries collection of all entries in the legend. The collection has a Count property that tells you how many entries appear in the legend and an Item property that lets you retrieve each one.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCLegendEntry.Visible</TD>
			<TD VALIGN="TOP">This property determines whether a legend entry appears in the legend. Setting this to False will hide the legend entry.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">WCLegend.Position</TD>
			<TD VALIGN="TOP">This property determines where the legend is placed in the chart. It can be placed on the top, bottom, left side, or right side (the default) of the chart.</TD>
		</TR>

	</TABLE>
</p>
 

<A NAME="85"><H2>Useful Events</H2></A>

<p>The Chart control exposes a few interesting events that you might want to catch. 
All events are raised from the top-level ChartSpace object. Table 3-7 lists the most 
interesting events.</p>

<p><B>Table 3-7.</B> <I>Useful ChartSpace events.</i></p>

<p>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH><I>Event</I></TH>
			<TH><I>Description</I></TH>
		</TR>

		<TR>
			<TD VALIGN="TOP">Click, DblClick</TD>
			<TD VALIGN="TOP">Raised whenever the user clicks or double-clicks anywhere on the Chart control. Use the WCChartEventInfo object passed to these events to determine the current X and Y coordinates of the mouse within the Chart control, and pass those to the RangeFromPoint method to retrieve the chart object at that (X,Y) point.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">MouseMove</TD>
			<TD VALIGN="TOP">Raised whenever the user moves the mouse over the Chart control. The WCChartEventInfo object is also passed to this event.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">DataSetChange</TD>
			<TD VALIGN="TOP">Raised whenever a bound data source notifies the chart that the data has changed. The Chart control will automatically update to show the new data; however, you should use this event to reformat the chart in case new series were added. Beware of putting too much code in this event: since any change to the source data will raise the event, it can fire quite often.</TD>
		</TR>

	</TABLE>
</p>


</BODY>
</HTML>



</body>
</html>
