<HTML>
<HEAD>
<TITLE>Introduction</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="acka.htm">[Previous]</A> <A HREF="introb.htm">[Next]</A><P>


<A NAME="236"><H1>Introduction</H1></A>

<P>When I first started developing information systems at Microsoft, I often looked 
at Microsoft Excel and lamented that it was not packaged as a collection of 
reusable components that I could simply pick up and integrate into my applications. At 
that time, the current version of Excel had a new revolutionary user interface 
element called a &quot;toolbar,&quot; and everyone loved it. When the Microsoft engineers 
integrated toolbars into the new operating system shell, Microsoft Windows 95, they built 
the toolbar as a reusable control&#8212;part of the Windows common controls. 
However, Microsoft Office still remained a set of large, monolithic applications, reusable 
only through cross-process automation. Soon after that, the Office applications 
integrated Microsoft Visual Basic for Applications (VBA), allowing developers to build 
solutions <I>within</I> the applications; however, that did not help developers 
who were writing custom applications in Microsoft Visual Basic or C++. Those developers 
needed the power of Excel's recalculation, charting, and PivotTable services 
<I>inside</I> their applications, hosted on their forms, and integrated with their data.</P>
<P>With the release of Office 2000, this dream of mine has finally become a 
reality. In this version of Office, our team released a new set of reusable services 
named the Office Web Components (OWC), which encapsulate the basic data analysis 
and reporting features found in Excel and Microsoft Access. However, as with most 
first-version technologies, developers will need help understanding what these 
components offer and how they can successfully incorporate OWC into their custom 
solutions. That is why I wrote this book. This book is the definitive resource on the Office 
Web Components, and it comes straight from a member of the team that built them.</P>

</BODY>
</HTML>





