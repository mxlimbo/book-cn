<html>
<head>
<TITLE>Anatomy of a Connection String</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch03d.htm">[Previous]</A> <A HREF="ch03f.htm">[Next]</A><P>

<A NAME="63"><H1>Anatomy of a Connection String</H1></A>

<p>ADO is extremely flexible when it comes to connecting to databases
and provides a variety of ways to build a connection string.</p>

<A NAME="64"><H2>Using Data Links to Build Connection Strings</H2></A>

<p>First let's spend a little time looking at how you create a
connection to a database at design time, using Visual Basic 6. Whether
you're using the DataEnvironment object, the DataView window, or
the ADO Data Control (Microsoft ADO Data Control 6.0), you can access
the same user interface, the Data Link Properties property sheet, to
specify the OLE DB provider you want to use. Rather than including
their own connection strings, each of these technologies uses the Data
Link Properties property pages to let the user interactively build the
connection strings.</p>

<p>Select the OLE DB provider on the Provider tab, as shown in Figure
3-1, and click Next to see the Connection property page, where you can
specify the location of your database. You can even click the Test
Connection button to test whether you can connect to the database you
selected.</p>

<p>Perhaps the best way to learn about using connection strings is to
create one. From a Visual Basic 6 project, simply reference the
Microsoft OLE DB Service Component 1.0 Type Library and write code such
as the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim爋bjDataLink燗s燤SDASC.DataLinks
Dim爏trConn燗s燬tring

Set爋bjDataLink