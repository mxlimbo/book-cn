<html>
<head>
<title>Chapter 15 -- Passing Your Recordset Out of Process</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch14f.htm">[Previous]</A> <A HREF="ch15b.htm">[Next]</A><P>

<font size="+3">Chapter 15</font>

<A NAME="385"><H1>Passing Your Recordset Out of Process</H1></A>

<p>More and more programmers are moving from using traditional
client/server applications to using multitiered applications. Component
Services (which is based on Microsoft Transaction Server) and Microsoft
Internet Information Services (formerly known as Internet Information
Server) are server-based technologies that provide much of the
&quot;plumbing&quot; programmers need to develop multitiered
applications in the Microsoft Windows environment. Component Object
Model (COM) is another piece of the puzzle that can simplify the
interprocess communication required in multitiered applications.</p>

<p>When it comes to developing multitiered applications, working with
ADO offers some advantages over working with its predecessors, Data
Access Objects (DAO) and Remote Data Objects (RDO). The ADO development
team built libraries that work in conjunction with COM to package your
recordset, pass its contents across a process boundary, and unpackage
that stream of data into a Recordset object in the receiving
process.</p>

<p>With the functionality built into COM and ADO, it's almost too
easy to develop a multitiered application using any of the languages in
the Microsoft Visual Studio suite. So why dedicate an entire chapter to
the topic of passing recordsets across process boundaries? Although COM
and ADO hide much of the complexity involved in communicating across
process boundaries, you need to understand how COM and ADO handle this
situation so that you can avoid coding yourself into a corner.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>This is a fairly complex topic that involves some of
the behaviors of COM, as well as of ADO. If you're interested in
learning more about COM and interprocess communication, I strongly
recommend reading <i>Understanding ActiveX and OLE,</i> by David
Chappell [Microsoft Press, 1996], and <i>Inside COM,</i> by Dale
Rogerson [Microsoft Press, 1997].</blockquote></div>
</p>

</BODY>
</HTML>






