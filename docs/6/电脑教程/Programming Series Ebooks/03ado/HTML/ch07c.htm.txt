<html>
<head>
<TITLE>Definitions of Cursor Types</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch07b.htm">[Previous]</A> <A HREF="ch07d.htm">[Next]</A><P>

<A NAME="247"><H1>Definitions of Cursor Types</H1></A>

<p>Many different types of cursors exist, and each has its own unique
set of characteristics. Some cursors allow updating, and some allow you
to view changes made by other users. Let's take a look at the
features of each type of cursor in some depth.</p>

<A NAME="248"><H2>Forward-Only Cursors</H2></A>

<p>The forward-only cursor is the simplest type of cursor. As its name
suggests, and as shown in Figure 7-1, you can only move forward through
the records in this cursor. After you move beyond a record, it is no
longer available in the cursor. Although this level of functionality
might seem limiting, it is extremely fast.</p>

<p>
<A HREF="javascript:fullSize('F07no01x.htm')"> <img src="images/F07no01.JPG" width=404 height=142 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 7-1</b> <i>The forward-only cursor.</i><!-- /caption -->
</p>



<p>Most client/server developers prefer the forward-only cursor because
of its speed and the minimal stress it places on the database system.
This cursor allows developers to retrieve the data from the cursor (in
the case of ADO, the Recordset) and manage the results of the query on
their own&#8212;in a Variant array or a collection, for example.</p>

<p>The adOpenForwardOnly constant, a CursorTypeEnum type, corresponds
to this type of cursor. It is the default value for a Recordset
object's CursorType property when you use the default value
(adUseServer) for the Recordset object's CursorLocation property.
ADO retrieves from the cursor up to the number of records specified by
the CacheSize property, and then when you navigate beyond the data in
the cache, ADO retrieves the next set of records.</p>

<p>You can use the Recordset's <i>MoveNext</i> method to navigate
forward through the Recordset, but using the <i>MovePrevious</i>, <i>
MoveFirst</i>, or <i>MoveLast</i> methods will generate an error
stating that the cursor does not support fetching backward. You can use
the <i>Move</i> method with a negative number to move backward as long
as you do not navigate outside the records currently held in the
cache.</p>

<p>Some database systems support updatable forward-only cursors, some
do not.</p>

<A NAME="249"><H2>Firehose Cursors</H2></A>

<p>There is a special type of cursor often called a firehose cursor.
It's a forward-only cursor that is read-only and returns data one
record at a time. The data comes out extremely fast&#8212;like water
coming out of a fire hose&#8212;and it's up to you to figure out
what to do with it. Some databases and OLE DB providers support only
this type of cursor because of its performance and simplicity. Most
database systems use this scenario (forward-only, read-only, and one
record at a time) as the default way to return the results of a query,
and those systems use no cursor-like structure to store these results.
Therefore, a firehose cursor is sometimes not considered a cursor.</p>

<p>In order to use a firehose cursor in Remote Data Objects (RDO), you
have to use an rdoQuery object and set the RowsetSize property (similar
to the CacheSize property on the ADO Recordset object) to 1 or set the
CursorDriver property to rdUseNone. Using firehose cursors with ADO is
simpler because this is the default type of cursor used by ADO. If you
want to use a non-firehose forward-only cursor, you'll need to set
the Recordset's CacheSize property to an integer larger than the
default of 1.</p>

<p>Microsoft SQL Server is optimized for this type of query. If you
decide to use a firehose cursor with SQL Server, you'll see
excellent performance, but with one important caveat: SQL Server can
support only one active query on a connection. If you open a firehose
cursor and do not fetch all of the data, and then close that cursor,
you've tied up that connection. Programmers familiar with RDO might
remember the error message &quot;Connection is busy with results from
another hstmt.&quot; You received this error if you tried to use a
connection that was busy, such as in the case just described.</p>

<p>For better or for worse, OLE DB&#8212;the technology on which ADO is
based&#8212;simplifies things for the programmer. Rather than generate
an error message, the OLE DB provider will simply request another
connection. Thus, if you use code like the following, you'll be
using the default firehose cursor type and will open up three separate
connections to your SQL Server database:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Setç‡¾nNorthwind