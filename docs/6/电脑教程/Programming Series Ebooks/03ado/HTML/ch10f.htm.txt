<html>
<head>
<TITLE>Resync Command Dynamic Property</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch10e.htm">[Previous]</A> <A HREF="ch10g.htm">[Next]</A><P>

<A NAME="312"><H1>Resync Command Dynamic Property</H1></A>

<p>In ADO 2.1, the Cursor Engine introduced a new dynamic property
called Resync Command to help make updating Recordsets based on joins
simpler. In order to use this property, you must also set the Unique
Table dynamic property on the Recordset. In the case of the query
we've been using, the unique table is the Orders table. To update a
join, set the Unique Table property to the unique table in your join.
Then set the Resync Command property to the query you want to use to
resynchronize the data in your join-based Recordset. Use parameter
markers (?) in the WHERE clause to denote the key columns in the unique
table.</p>

<p>A couple of examples will help to clarify how useful this feature
can be. Let's revisit our customers and orders query and look at
how you can use Resync Command to simplify modifying or inserting
records in Recordsets based on joins.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
SELECT燙ustomers.CustomerID燗S燵Customers.CustomerID],牋牋
牋牋牋燙ustomers.CompanyName,燙ustomers.ContactName,燨rders.*
FROM燙ustomers,燨rders燱HERE燙ustomers.CustomerID