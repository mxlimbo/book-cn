<html>
<head>
<TITLE>ADO Parameter Object Properties and Collections</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch05d.htm">[Previous]</A> <A HREF="ch05f.htm">[Next]</A><P>

<A NAME="180"><H1>ADO Parameter Object Properties and Collections</H1></A>

<p>The purpose of the Parameter object is to enable you to reuse a
query while changing a small piece of the query. For example, you could
build a query such as the following to select a single customer record
based on the value of the CustomerID field, and then execute that query
multiple times, changing only the value of the CustomerID each time the
query is executed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
SELECT * FROM Customers WHERE CustomerID = ?
</pre>
</td></tr></table>
</p>

<p>If you're using a parameterized query, you can change the value
without having to rebuild the entire query string. In short, the
Command object can use parameters the same way a function can use
parameters. The following table shows the properties and collections of
the Parameter object.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">Parameter Object Properties and Collections</th></tr>
<tr><th><i>Property or Collection Name</i></th><th><i>Data Type</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">Attributes</td><td valign="top">Long</td><td valign="top">Describes some of the characteristics of the Parameter object</td></tr>
<tr><td valign="top">Direction</td><td valign="top">ParameterDirectionEnum</td><td valign="top">Indicates which type of parameter you're using&#8212;input, output, input/output, or return</td></tr>
<tr><td valign="top">Name</td><td valign="top">String</td><td valign="top">Contains the name of the Parameter object</td></tr>
<tr><td valign="top">NumericScale</td><td valign="top">Byte</td><td valign="top">Indicates the numeric scale for numeric data</td></tr>
<tr><td valign="top">Precision</td><td valign="top">Byte</td><td valign="top">Indicates the precision for numeric data</td></tr>
<tr><td valign="top">Properties</td><td valign="top">Collection of Property objects</td><td valign="top">Contains dynamic properties</td></tr>
<tr><td valign="top">Size</td><td valign="top">Long</td><td valign="top">Returns the defined size for a field</td></tr>
<tr><td valign="top">Type</td><td valign="top">DataTypeEnum</td><td valign="top">Returns the data type for a field</td></tr>
<tr><td valign="top">Value</td><td valign="top">Variant</td><td valign="top">Contains the current value for a field</td></tr>
</table>

<A NAME="181"><H2>Attributes Property</H2></A>

<p>The Attributes property describes some of the properties of the
parameter, such as whether it accepts Null values. The Attributes
property uses a long integer to store the sum of values from the
ParameterAttributesEnum enumeration shown in this next table. This
property is read/write.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">ParameterAttributesEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adParamSigned</td><td valign="top">16</td><td valign="top">The data type of the parameter is signed; it applies to numeric data types.</td></tr>
<tr><td valign="top">adParamNullable</td><td valign="top">64</td><td valign="top">The parameter accepts Null as its value.</td></tr>
<tr><td valign="top">adParamLong</td><td valign="top">128</td><td valign="top">The parameter accepts long string or binary data.</td></tr>
</table>

<A NAME="182"><H2>Direction Property</H2></A>

<p>Most programming languages have different parameter types that
control whether data is passed to and/or from a procedure. Many
databases also utilize these concepts. ADO uses the Direction property
on the Parameter object to denote the direction in which data will be
passed.</p>

<p>Not all databases support all the settings available in ADO. You
might need to supply parameter direction information even if you're
using the <i>Refresh</i> method on the Parameters collection to
retrieve information about your parameters. For example, SQL Server
lets you use the OUTPUT keyword to specify that the parameter can
return data. However, there is no way to specify whether the parameter
is used for output only or for both input and output.</p>

<p>The SQL Server OLE DB provider (or ODBC driver) will assume that the
parameter is for both input and output. If you neglect to supply a
value for the parameter before executing the query, you'll receive
an error. You can set the Direction property to any of the values in
ParameterDirectionEnum, shown in the following table. If you want the
parameter to be output-only, you'll need to manually set the
Direction property on the Parameter object to adParamOutput. Of course,
you're better off populating the Parameters collection to begin
with, so this shouldn't be an issue for you, right?</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">ParameterDirectionEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adParamUnknown</td><td valign="top">0</td><td valign="top">Direction is unknown.</td></tr>
<tr><td valign="top">adParamInput</td><td valign="top">1</td><td valign="top">Default; parameter is input-only.</td></tr>
<tr><td valign="top">adParamOutput</td><td valign="top">2</td><td valign="top">Parameter is output-only.</td></tr>
<tr><td valign="top">adParamInputOutput</td><td valign="top">3</td><td valign="top">Parameter is input/output.</td></tr>
<tr><td valign="top">adParamReturnValue</td><td valign="top">4</td><td valign="top">Parameter is the return value for a stored procedure.</td></tr>
</table>

<A NAME="183"><H2>Name Property</H2></A>

<p>The Name property can help you locate the Parameter object in the
Parameters collection and improve the readability of your code. Beyond
that, you don't need to use it. As long as the parameters on your
SQL Server stored procedures have names, you do not need to set the
Name property of your Parameter objects to the same value.</p>

<A NAME="184"><H2>NumericScale and Precision Properties</H2></A>

<p>Like the Field object (discussed in <A HREF="ch04a.htm">Chapter 4</A>), the Parameter object
exposes NumericScale and Precision properties. If you're using
variable-length numeric data types, you'll want to set the
NumericScale and Precision properties accordingly. These are probably
the only properties on the Parameter object that you might want to set
that aren't available on the <i>CreateParameter</i> method of the
Command object. For more information on these properties, see the
discussion of the Field object in <A HREF="ch04a.htm">Chapter 4</A>.</p>

<p>If you're having trouble setting these properties correctly,
here are a couple of suggestions for finding the correct settings:</p>

<ul>
<p><li> If the property corresponds to a field in one of your tables,
query that table and examine the settings for the NumericScale and
Precision properties on the Field object in the returned
Recordset.</li></p>

<p><li> Call <i>Parameters.Refresh</i> once (if your OLE DB provider or
ODBC driver supports that functionality), and check the value of the
NumericScale and Precision properties.</li></p>
</ul>



<p>Use the values you retrieve from either of these suggestions to set
these properties in your code.</p>

<A NAME="185"><H2>Properties Collection</H2></A>

<p>Like most ADO objects, the Parameter object also exposes a
Properties collection. I have yet to see this collection populated, but
if a provider wanted to expose some provider-specific properties, that
information could be available in this collection.</p>

<A NAME="186"><H2>Size Property</H2></A>

<p>The Parameter object's Size property corresponds to the Field
object's DefinedSize property (discussed in <A HREF="ch04a.htm">Chapter 4</A>):
it applies to variable length string and binary data types. For ANSI
and Unicode strings, the value of this property determines the number
of characters, rather than the number of bytes, that the Parameter
object can store.</p>

<A NAME="187"><H2>Type Property</H2></A>

<p>The Type property for the Parameter object corresponds to the Type
property for the Field object. If you're unsure of the data type to
use for a parameter, use one of the two guidelines listed above for the
NumericScale and Precision properties (but query the Type property, of
course).</p>

<A NAME="188"><H2>Value Property</H2></A>

<p>The Value property stores the value of the parameter in a Variant,
similar to the Value property on the Field object. Like the Field
object, the default property on the Parameter object is the Value
property.</p>

</BODY>
</HTML>






