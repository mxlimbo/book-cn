<html>
<head>
<TITLE>RDS DataControl Object</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch16b.htm">[Previous]</A> <A HREF="ch16d.htm">[Next]</A><P>

<A NAME="405"><H1>RDS DataControl Object</H1></A>

<p>The RDS DataControl object is similar to the data controls included
with Microsoft Visual Basic except that it's not a visible control.
It's simply an object, just like the ADO Connection and Recordset
objects.</p>

<p>The DataControl object's most compelling feature is that it can
greatly simplify the process of querying a database on an internal
network and sending the results, in the form of a Recordset object, to
a client application anywhere on the Internet.</p>

<p>The DataControl object was designed primarily for use on web pages.
Microsoft Internet Explorer supports binding controls to the
DataControl. You can use the DataControl object on a web page or in a
client application written in Visual Basic, Microsoft Visual C++, and
other languages that support COM objects, but you can't bind
controls directly to the DataControl in the forms packages of these
languages.</p>

<A NAME="406"><H2>RDS DataControl Object Properties</H2></A>

<p>Let's take a closer look at the properties exposed by the
DataControl object, as described in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="3">Properties of the RDS DataControl Object</th></tr>

<tr><th><i>Property Name</i></th><th><i>Data Type</i></th><th><i>Description</i></th></tr>

<tr><td valign="top">Connect</td>
<td valign="top">String</td>
<td valign="top">Specifies the string the object uses to connect to a
database.</td></tr>

<tr><td valign="top">DataSpace</td>
<td valign="top">String</td>
<td valign="top">Ignore; exists for backward compatibility. We
won't discuss this property.</td></tr>

<tr><td valign="top">ExecuteOptions</td>
<td valign="top">Integer</td>
<td valign="top">Controls whether the query is run
asynchronously.</td></tr>

<tr><td valign="top">FetchOptions</td>
<td valign="top">Integer</td>
<td valign="top">Controls whether the results of a query are
fetched asynchronously.</td></tr>

<tr><td valign="top">FilterColumn</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the field in the recordset
on which you want to apply a filter.</td></tr>

<tr><td valign="top">FilterCriterion</td>
<td valign="top">String</td>
<td valign="top">Specifies the filter criterion (&lt;, &gt;,
=, and so on).</td></tr>

<tr><td valign="top">FilterValue</td>
<td valign="top">String</td>
<td valign="top">Specifies the value you want to use in the
filter.</td></tr>

<tr><td valign="top">Handler</td>
<td valign="top">String</td>
<td valign="top">Indicates the name of the custom handler to use when
connecting.</td></tr>

<tr><td valign="top">InternetTimeout</td>
<td valign="top">Long</td>
<td valign="top">Specifies the time, in milliseconds, that RDS
should wait before timing out.</td></tr>

<tr><td valign="top">ReadyState</td>
<td valign="top">Long</td>
<td valign="top">Indicates the current state of the query.</td></tr>

<tr><td valign="top">Recordset</td>
<td valign="top">Recordset object</td>
<td valign="top">Contains the results of a query.</td></tr>

<tr><td valign="top">Server</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the IIS server and
communications protocol to use.</td></tr>

<tr><td valign="top">SortColumn</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the field on which you
choose to sort your data.</td></tr>

<tr><td valign="top">SortDirection</td>
<td valign="top">Boolean</td>
<td valign="top">Specifies the direction to use for the
sort.</td></tr>

<tr><td valign="top">SourceRecordset</td>
<td valign="top">Recordset object</td>
<td valign="top">Allows you to specify the Recordset
whose changes you want to submit to the database.</td></tr>

<tr><td valign="top">SQL</td>
<td valign="top">String</td>
<td valign="top">Specifies the query string you want to submit to your
database.</td></tr>

<tr><td valign="top">URL</td>
<td valign="top">String</td>
<td valign="top">Specifies the URL for an ASP page that will return a
Recordset.</td></tr>
</table></p>

<A NAME="407"><H3>Connect property</H3></A>

<p>The Connect property on the RDS DataControl object is similar to the
ConnectionString property on the ADO Connection object. To use this
property, supply the connection string you want to use to connect to
your database. You can use the Connect property in conjunction with an
RDS handler, which we'll discuss later in the chapter.</p>

<p>Keep in mind that the Connect property tells the RDS server
components how to connect to your database. If you want to describe how
the DataControl will connect to a machine running IIS, use the Server
property.</p>

<A NAME="408"><H3>ExecuteOptions property</H3></A>

<p>The ExecuteOptions property accepts an integer to specify whether
the query should be submitted synchronously or asynchronously. You can
use either value from ADCExecuteOptionEnum, listed in the following
table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="3">ADCExecuteOptionEnum Values</th></tr>

<tr><th><i>Constant</i></th><th><i>Value<th><i>Description</i></th></tr>

<tr><td valign="top">adcExecSync</td>
<td valign="top">1</td>
<td valign="top">Submits a query synchronously</td></tr>

<tr><td valign="top">adcExecAsync</td>
<td valign="top">2</td>
<td valign="top">Default; submits a query asynchronously</td></tr></table></p>

<A NAME="409"><H3>FetchOptions property</H3></A>

<p>The FetchOptions property accepts an integer that controls how the
results of a query are fetched. You can use a value from
ADCFetchOptionEnum, listed in this next table.</p>

<p><table cellpadding=5 width="95%"><tr><th colspan="3">ADCFetchOptionEnum Values</th></tr>

<tr><th><i>Constant</i></th><th><i>Value<th><i>Description</i></th></tr>

<tr><td valign="top">adcFetchUpFront</td>
<td valign="top">1</td>
<td valign="top">Fetches all records in a recordset before
returning control to your code.</td></tr>

<tr><td valign="top">adcFetchBackground</td>
<td valign="top">2</td>
<td valign="top">Fetches the records, beyond the initial set
specified by the Recordset's CacheSize property, in the background. After the
initial set of records has been fetched, control is returned to your
application. If you attempt to access a record that hasn't been
fetched, your code will be blocked until that record is fetched. This
behavior is similar to that of ADO's adAsyncFetch constant in the
ExecuteOptionEnum enumeration.</td></tr>

<tr><td valign="top">adcFetchAsync</td>
<td valign="top">3</td>
<td valign="top">Default; fetches the records, beyond the initial set
specified by the Recordset's CacheSize property, in the background.
After the initial set of records has been fetched, control is returned
to your application. If you attempt to access a record that hasn't
been fetched, your code will not be blocked. This behavior is similar
to that of ADO's adAsyncFetchNonBlocking constant in the
ExecuteOptionEnum enumeration.</td></tr></table></p>

<A NAME="410"><H3>FilterColumn, FilterCriterion, and FilterValue properties</H3></A>

<p>You can use these three properties together to apply a string-based
filter to the results of a query. Each property accepts a string and
can be used as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DataControl.FilterColumn = &quot;City&quot;
DataControl.FilterCriterion = &quot;=&quot;
DataControl.FilterValue = &quot;Seattle&quot;
</pre>
</td></tr></table>
</p>

<p>The FilterCriterion property accepts =, &gt;, &lt;, &gt;=, &lt;=,
and &lt;&gt;. It does not accept LIKE. You cannot use wildcards with
the FilterValue property.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>If you change the value of the FilterColumn,
FilterCriterion, or FilterValue property, the changes won't be
applied to the Recordset returned by the DataControl object until you
call the DataControl's <i>Reset</i> method.</blockquote></div>
</p>

<p>If you want to clear the current filter, set the FilterColumn or
FilterCriterion property to an empty string and then call the <i>
Reset</i> method with a value of False in the <i>fRefilter</i>
parameter.</p>

<A NAME="411"><H3>Handler property</H3></A>

<p>The Handler property accepts a string to specify the name of the RDS
handler to use to enforce security on a server. This property defaults
to an empty string.</p>

<A NAME="412"><H3>InternetTimeout property</H3></A>

<p>The InternetTimeout property accepts a long integer value to control
the number of milliseconds that RDS will wait before timing out an
attempt to connect to an IIS server. The property defaults to 300,000
milliseconds (5 minutes). The InternetTimeout property affects only
connection attempts using HTTP or HTTPS.</p>

<A NAME="413"><H3>ReadyState property</H3></A>

<p>The ReadyState property on the RDS DataControl object is similar to
the State property on the ADO Connection and Recordset objects. You can
use the ReadyState property to determine the current state of a query.
The ReadyState property returns a long integer value from
ADCReadyStateEnum, as described in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="3">ADCReadyStateEnum Values</th></tr>

<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>

<tr><td valign="top">adcReadyStateLoaded</td>
<td valign="top">2</td>
<td valign="top">The current query is still executing.</td></tr>

<tr><td valign="top">adcReadyStateInteractive</td>
<td valign="top">3</td>
<td valign="top">RDS has fetched the initial set of
records from a query, but there are more records to fetch.</td></tr>

<tr><td valign="top">adcReadyStateComplete</td>
<td valign="top">4</td>
<td valign="top">The query has completed, and all records
have been fetched.</td></tr></table></p>

<p>The DataControl object's <i>onReadyStateChange</i> event will
fire when the value of the ReadyState property changes.</p>

<A NAME="414"><H3>Recordset and SourceRecordset properties</H3></A>

<p>The Recordset property on the DataControl object contains the
results of your query. This property is read-only:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set MyRecordsetObject = DataControl.Recordset
</pre>
</td></tr></table>
</p>

<p>If you've been working with a separate Recordset and want to use
it with the DataControl, use the SourceRecordset property, which is
write-only:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set DataControl.SourceRecordset = MyRecordsetObject
</pre>
</td></tr></table>
</p>

<A NAME="415"><H3>Server property</H3></A>

<p>The Server property controls which server the DataControl object
will connect to in order to interface with the RDS components that run
in IIS on that machine. The setting for this property also controls the
protocol (such as HTTP or DCOM) that RDS will use to communicate with
its server-side components:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Connect to internal server through DCOM.
DataControl.Server = &quot;MyWebServer&quot;

'Connect to internal server through HTTP.
DataControl.Server = &quot;http://MyWebServer&quot;

'Connect over the Internet through HTTP.
DataControl.Server = &quot;http://www.microsoft.com&quot;
</pre>
</td></tr></table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>The Server property does not specify the server where
your database is located. That information should be provided in the
Connect property (described earlier in this section).</blockquote></div>
</p>

<A NAME="416"><H3>SortColumn and SortDirection properties</H3></A>

<p>To sort the results of a query based on a particular field, set the
SortColumn property to the name of that field. The SortDirection
property accepts a Boolean value to specify whether RDS should sort the
data in ascending or descending order. By default, this property is set
to True, which indicates that RDS should sort the data in ascending
order. A setting of False specifies a sort in descending order.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>If you change the value of the SortColumn and
SortDirection properties, you must call the DataControl object's
<i>Reset</i> method before they will affect the Recordset returned by
the DataControl.</blockquote></div>
</p>

<A NAME="417"><H3>SQL property</H3></A>

<p>The SQL property contains the query that RDS will submit to your
database. This property accepts a string and is similar to the
CommandText property of the Command object and the Source property of
the Recordset object.</p>

<A NAME="418"><H3>URL property</H3></A>

<p>The URL property is a string that can be set to a valid URL.
Typically, the URL property is set to a URL for an ASP page that
returns a recordset in its Response object. The URL property was added
in RDS 2.5, allowing you to use the DataControl with XML data.</p>

<A NAME="419"><H2>RDS DataControl Object Methods</H2></A>

<p>Now let's examine the methods of the DataControl object, which
are shown in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="2">Methods of the RDS DataControl Object</th></tr>

<tr><th><i>Method Name</i></th><th><i>Description</i></th></tr>

<tr><td valign="top"><i>Cancel</i></td>
<td valign="top">Cancels an asynchronous operation</td></tr>

<tr><td valign="top"><i>CancelUpdate</i></td>
<td valign="top">Cancels the pending changes for a record</td></tr>

<tr><td valign="top"><i>CreateRecordset</i></td>
<td valign="top">Creates a new, empty Recordset object with
the structure you request</td></tr>

<tr><td valign="top"><i>Refresh</i></td>
<td valign="top">Connects to an IIS server, executes a query, and
retrieves the results</td></tr>

<tr><td valign="top"><i>Reset</i></td>
<td valign="top">Resets the sort or filter on a Recordset object</td></tr>

<tr><td valign="top"><i>SubmitChanges</i></td>
<td valign="top">Submits the pending changes in a Recordset
object to your database</td></tr>
</table></p>

<A NAME="420"><h3><i>Cancel</i> method</h3></A>
<p>Use the <i>Cancel</i> method to cancel an asynchronous action on the
DataControl object. If you call the <i>Cancel</i> method while RDS is
still executing a query, the DataControl will return without generating
an error. The <i>onReadyStateChange</i> event will fire, the ReadyState
property will return adcReadyStateComplete, and the Recordset object
will contain a null pointer.</p>

<p>You can also call the <i>Cancel</i> method to terminate the
asynchronous fetching of results for a query. Using the <i>Cancel</i>
method in this fashion still won't generate an error. The <i>
onReadyStateChange</i> event will fire, the ReadyState property will
return adcReadyStateComplete, and the Recordset property will return a
valid Recordset object containing the records that RDS fetched before
you called the <i>Cancel</i> method.</p>

<A NAME="421"><h3><i>CancelUpdate</i> method</h3></A>
<p>Use the <i>CancelUpdate</i> method to cancel pending changes in the
Recordset.</p>

<p>When you call the <i>CancelUpdate</i> method, all pending changes in
the Recordset are discarded. The Recordset will then contain the data
retrieved the last time you called the DataControl object's <i>
Refresh</i> method.</p>

<A NAME="422"><h3><i>CreateRecordset</i> method</h3></A>
<p>You can use the <i>CreateRecordset</i> method to generate a new,
empty Recordset. <i>CreateRecordset</i> accepts a single parameter:</p>

<ul>
<p><li> <i><b>varColumnInfos</b></i> This parameter
holds a Variant array that contains information about the structure of
the Recordset that you want to create.</li></p>
</ul>



<p>You can generate this parameter in one of two ways. The first
technique is easier to follow but requires more code. The second is
easier to write but can be a bit confusing until you understand the
structure of the parameter. Let's take a look at the first
technique:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Create the fixed-length Variant arrays.
Dim aColumns(2), c0(3), c1(3), c2(3)
'The c0 array represents the first (or 0th) column.
'The initial entry in the array corresponds to
' the column's name and accepts a string.
c0(0) = &quot;CustomerID&quot;
'The second entry corresponds to the column's data type.
'CreateRecordset requires that this information be stored in an
' integer. ADO uses a long integer for its data types. If you're using 
' the ADO constants rather than the explicit value, you'll need to use 
' CInt.
c0(1) = CInt(adInteger)
'The third entry corresponds to the column's size. If you're using data
' types that handle various sizes (char, varchar, binary, varbinary),
' specify the size here. Otherwise, use -1.
c0(2) = -1
'The fourth and final entry controls whether the column accepts
' null values.
c0(3) = False
'Generate the arrays for the other two columns.
c1(0) = &quot;CustomerName&quot;
c1(1) = CInt(adVarChar)
c1(2) = 64
c1(3) = False
c2(0) = &quot;BalanceDue&quot;
c2(1) = CInt(adCurrency)
c2(2) = -1
c2(3) = False
'Store each column array as an element in the aColumns array.
aColumns(0) = c0
aColumns(1) = c1
aColumns(2) = c2
'Now call CreateRecordset.
Set Recordset = DataControl.CreateRecordset(aColumns)
</pre>
</td></tr></table>
</p>

<p>Once you have a handle on the structure of the <i>varColumnInfos</i>
parameter, you can use the second technique, which takes advantage of
dynamic arrays and the <i>Array</i> function of Visual Basic for
Applications (VBA). With the second technique, you use the <i>Array</i>
function to build and populate dynamic Variant arrays&#8212;rather than
the static Variant arrays used in the first technique.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Create the structures as dynamic Variant arrays.
Dim aColumns(), c0(), c1(), c2()
'Create each column array using the Array function, specifying
' the column's name, data type, size, and whether it accepts null
' values.
c0 = Array(&quot;CustomerID&quot;, CInt(adInteger), -1, False)
c1 = Array(&quot;CustomerName&quot;, CInt(adVarChar), 64, False)
c2 = Array(&quot;BalDue&quot;, CInt(adCurrency), -1, False)
'Create the aColumns array, supplying each of the column arrays.
aColumns = Array(c0, c1, c2)
Set Recordset = DataControl.CreateRecordset(aColumns)
</pre>
</td></tr></table>
</p>

<p>This feature is similar to ADO's creatable Recordsets that allow
you to populate the Fields collection using the <i>Fields.Append</i>
method, which is discussed in <A HREF="ch04a.htm">Chapter 4</A>.</p>

<A NAME="423"><h3><i>Refresh</i> method</h3></A>
<p>Call the <i>Refresh</i> method on the DataControl object when you
want to refresh the information you retrieved from a query. The <i>
Refresh</i> method will create a connection to an IIS server, open a
connection to your database, and submit a query. The <i>Refresh</i>
method takes no parameters.</p>

<A NAME="424"><h3><i>Reset</i> method</h3></A>
<p>Use the <i>Reset</i> method when you want the changes you've
made to the DataControl object's sorting and filtering properties
to take effect. The <i>Reset</i> method accepts a single parameter:</p>

<ul>
<p><li> <i><b>fRefilter</b></i> This optional parameter
defaults to 1. A value of 1 indicates that you want the changes to the
filtering and sorting information to apply to the currently filtered
data. This parameter can help create compound filters.</li></p>
</ul>



<p>For example, let's say you want to view only customers whose
names begin with the letter &quot;D.&quot; You can't use wildcards,
but you could use a compound filter by setting the filter properties
twice, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim rdsDC As RDS.DataControl
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
With rdsDC
    .FilterColumn = &quot;CompanyName&quot;
    .FilterCriterion = &quot;&gt;=&quot;
    .FilterValue = &quot;D&quot;
    .Reset False
    .FilterColumn = &quot;CompanyName&quot;
    .FilterCriterion = &quot;&lt;&quot;
    .FilterValue = &quot;E&quot;
    .Reset True
End With
</pre>
</td></tr></table>
</p>

<p>This code uses the <i>fRefilter</i> parameter in the calls to the
<i>Reset</i> method. Initially, you simply want to show the records
whose CompanyName field contains a value greater than or equal to
&quot;D&quot;. When you call the <i>Reset</i> method, you use False as
the value for the <i>fRefilter</i> parameter because you want to remove
any previous filters before applying this one. Then you want to show
the records whose CompanyName field contains a value less than
&quot;E&quot;. But you want the records to satisfy the previous filter
criteria as well, so you use a value of True for the <i>fRefilter</i>
parameter.</p>

<p>If you want to clear the current filter, set the FilterColumn or
FilterCriterion property to an empty string and then call the <i>
Reset</i> method with a value of False for the <i>fRefilter</i>
parameter.</p>

<A NAME="425"><h3><i>SubmitChanges</i> method</h3></A>
<p>The DataControl object's <i>SubmitChanges</i> method takes no
parameters and is similar to the <i>UpdateBatch</i> method on the
Recordset object. You use it to submit the changes pending in the
Recordset to your database.</p>

<p>If you have changes pending in records that aren't visible
because of the current filter setting, those pending changes will not
be submitted. The changes that are submitted are bundled in a
transaction. If any of the update attempts fail, the entire transaction
is rolled back and none of the changes will be committed to your
database.</p>

<A NAME="426"><H2>RDS DataControl Object Events</H2></A>

<p>Finally, let's look at the two events that the DataControl
object exposes, shown in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="2">RDS DataControl Events</th></tr>

<tr><th><i>Event Name</i></th><th><i>Description</i></th></tr>

<tr><td valign="top"><i>onError</i></td>
<td valign="top">An error has occurred.</td></tr>

<tr><td valign="top"><i>onReadyStateChange</i></td>
<td valign="top">The value of the ReadyState property has
changed.</td></tr></table></p>

<A NAME="427"><h3><i>onError</i> event</h3></A>
<p>The <i>onError</i> event fires when the DataControl object
encounters an error. You can use the <i>onError</i> event to handle
errors generated by the DataControl. This event supports four
parameters:</p>

<ul>
<p><li> <i><b>SCode</b></i> An integer value that
indicates the status code of the error.</li></p>

<p><li> <i><b>Description</b></i> A string that
describes the error.</li></p>

<p><li> <i><b>Source</b></i> A string that contains the
query or command that generated the error.</li></p>

<p><li> <i><b>CancelDisplay</b></i> A Boolean value
that you can set to control whether the error will display a dialog
box. This parameter is False by default, meaning a dialog box will be
displayed.</li></p>
</ul>



<A NAME="428"><h3><i>onReadyStateChange</i> event</h3></A>
<p>The <i>onReadyStateChange</i> event fires when the value of the
DataControl object's ReadyState property changes. This event uses
no parameters. You can use this event to determine when the results of
your query have been fetched, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub rdsDC_onReadyStateChange()
    'Test the ReadyState property to see whether the operation has
    ' completed.
    If rdsDC.ReadyState = adcReadyStateComplete Then
        'Retrieve the Recordset.
        Set rs = rdsDC.Recordset
        'Test to see whether an uninitialized Recordset was returned.
        If Not rs Is Nothing Then
            Set gridResults.DataSource = rs
            gridResults.Visible = True
        Else
            MsgBox &quot;No Recordset was returned&quot;
        End If
    End If
End Sub
</pre>
</td></tr></table>
</p>

</BODY>
</HTML>






