<html>
<head>
<TITLE>ADO Connection Object Properties and Collections</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch03a.htm">[Previous]</A> <A HREF="ch03c.htm">[Next]</A><P>

<A NAME="30"><H1>ADO Connection Object Properties and Collections</H1></A>

<p>Let's take a look at the properties and collections exposed by
the Connection object, which are described in the following table.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th colspan=3>Connection Object Properties and Collections</th>
		</tr>
		
		<tr>
			<th><i>Property or Collection Name</i></th>
			<th><i>Data Type</i></th>
			<th><i>Description</i></th>
		</tr>

		<tr>
			<td valign="top">Attributes</td>
			<td valign="top">Long</td>			
			<td valign="top">Controls the behavior of the Connection object after <i>CommitTrans</i> or <i>RollbackTrans</i> has been called</td>
		</tr>

		<tr>
			<td valign="top">CommandTimeout</td>
			<td valign="top">Long</td>			
			<td valign="top">Sets the length of time that queries on this connection can run before timing out</td>
		</tr>

		<tr>
			<td valign="top">ConnectionString</td>
			<td valign="top">String</td>			
			<td valign="top">Specifies how to connect to your database</td>
		</tr>

		<tr>
			<td valign="top">ConnectionTimeout</td>
			<td valign="top">Long</td>			
			<td valign="top">Sets the length of time that ADO will wait before an attempt to connect to your database times out</td>
		</tr>

		<tr>
			<td valign="top">CursorLocation</td>
			<td valign="top">Long</td>			
			<td valign="top">Sets the default value for the location of the cursor library for Recordsets opened on this Connection object</td>
		</tr>
		
		<tr>
			<td valign="top">DefaultDatabase</td>
			<td valign="top">String</td>			
			<td valign="top">When connecting to Microsoft SQL Server and other database servers that expose multiple databases, specifies which database on the server to use</td>
		</tr>

		<tr>
			<td valign="top">Errors</td>
			<td valign="top">Collection of Error objects</td>			
			<td valign="top">Each Error object contains information about an error that occurred on the Connection object</td>
		</tr>

		<tr>
			<td valign="top">IsolationLevel</td>
			<td valign="top">Long</td>			
			<td valign="top">Controls the level at which transactions for the database are isolated</td>
		</tr>

		<tr>
			<td valign="top">Mode</td>
			<td valign="top">Long</td>			
			<td valign="top">Sets the permissions for modification of the Connection object</td>
		</tr>

		<tr>
			<td valign="top">Properties</td>
			<td valign="top">Collection of Property objects</td>			
			<td valign="top">Stores information about provider-specific properties for the Connection object</td>
		</tr>
		
		<tr>
			<td valign="top">Provider</td>
			<td valign="top">String</td>			
			<td valign="top">OLE DB provider name</td>
		</tr>

		<tr>
			<td valign="top">State</td>
			<td valign="top">Long</td>			
			<td valign="top">Current state (open or closed) of the Connection object</td>
		</tr>

		<tr>
			<td valign="top">Version</td>
			<td valign="top">String</td>			
			<td valign="top">Version of ADO</td>
		</tr>
		
	</table>
</p>

<A NAME="31"><H2>Attributes Property</H2></A>

<p>The Attributes property takes a value of type XactAttributeEnum and
allows you to control the behavior of your Connection object after
you've ended a transaction, as described in the following table.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th colspan=3>XactAttributeEnum Values</th>
		</tr>
		
		<tr>
			<th><i>Constant</i></th>
			<th><i>Value</i></th>
			<th><i>Description</i></th>
		</tr>
		
		<tr>
			<td valign="top">(No constant defined)</td>
			<td valign="top">0</td>			
			<td valign="top">Default</td>
		</tr>

		<tr>
			<td valign="top">adXactCommitRetaining</td>
			<td valign="top">131072</td>			
			<td valign="top">Creates a new transaction when you call the <i>CommitTrans</i> method of the Connection object</td>
		</tr>

		<tr>
			<td valign="top">adXactAbortRetaining</td>
			<td valign="top">262144</td>			
			<td valign="top">Creates a new transaction when you call the <i>RollbackTrans</i> method of the Connection object</td>
		</tr>
		
	</table>
</p>

<p>By default, the Attributes property is set to 0. This property is a
bitmask and can be set to either of the values in XactAttributeEnum
(adXactCommitRetaining or adXactAbortRetaining) or to the sum of those
two constants. For more information on using this property, see the
&quot;<A HREF="ch03f.htm#70">Managing Your Transactions</A>&quot; section.</p>

<A NAME="32"><H2>CommandTimeout Property</H2></A>

<p>Queries sometimes take longer to execute than expected. Your
database server might be busy, or your network connection might be slow
because of traffic. Maybe your query is extremely complex. Or maybe
your query will return large amounts of data. In any case, you might
want the query to fail after a given amount of time rather than letting
it run ad infinitum.</p>

<p>The CommandTimeout property defines the length of time in seconds
that your query will run before it times out and generates an error.
The default value is 30 seconds. Once the database starts to return
data from your query, the CommandTimeout value is ignored. For example,
let's say that you've lost your mind and submitted a query that
will return a hundred thousand rows of data into a client-side cursor.
Chances are that it will take more than 30 seconds to retrieve that
much data. As soon as the OLE DB provider signals to ADO that it has
the first row of data from the query, the CommandTimeout value is
ignored and ADO starts to retrieve the results of the query.</p>

<p>If you want to let your query run for as long as necessary without
ever timing out, set the CommandTimeout property to 0.</p>

<A NAME="33"><H2>ConnectionString Property</H2></A>

<p>You use the ConnectionString property to define what database
you'll connect to and how you'll connect to it. We'll
describe building connection strings in more depth in the section
&quot;<A HREF="ch03e.htm#64">Using Data Links to Build Connection Strings</A>,&quot; 
where we discuss the methods that use this property.</p>

<A NAME="34"><H2>ConnectionTimeout Property</H2></A>

<p>The ConnectionTimeout property is similar to the CommandTimeout
property. You use it to define, in seconds, how long ADO will wait
before it times out of its attempt to connect to your database. The
default value for this property is 15 seconds. As with the
CommandTimeout property, if you want the connection attempt to continue
indefinitely, simply set this property to 0.</p>

<A NAME="35"><H2>CursorLocation Property</H2></A>

<p>This property determines how the results of your query will be
stored. The CursorLocation property for the Connection object has the
same functionality as the same property for the Recordset object. For
more information, see the &quot;<A HREF="ch04b.htm#85">CursorLocation Property</A>&quot; section
in Chapter 4.</p>

<A NAME="36"><H2>DefaultDatabase Property</H2></A>

<p>Some database servers, such as Microsoft SQL Server, expose multiple
databases on a single server. When you install SQL Server 7, for
example, you automatically get a Master database and two sample
databases: Pubs and Northwind. If you're connecting to SQL Server
and you don't specify the database that you want to use by
explicitly setting this property or by defining the database in your
connection string, you'll be connected to the Master database by
default.</p>

<A NAME="37"><H2>Errors Collection</H2></A>

<p>The ADO Connection object exposes an Errors collection that contains
information about the errors that occurred on that database connection.
There are times when a single operation will return multiple error
messages. Each message is stored in an Error object in the Errors
collection.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
This book will not cover the Error object in much
depth. Perhaps ADO's greatest drawback is that it frequently
generates error information that provides little to no help in
determining the cause of the error. When an error occurs, the Errors
collection often contains a single Error object whose Description
property simply returns, &quot;Errors occurred.&quot; Sad, but
true.</blockquote></div>
</p>

<p>The next time you use the Connection object, the previous contents
of the Errors collection will be cleared.</p>

<A NAME="38"><H2>IsolationLevel Property</H2></A>

<p>You can use the IsolationLevel property to control the isolation
level of the transactions on your Connection object. The property can
be set to any one of the IsolationLevelEnum values listed in the
following table.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th colspan=3>IsolationLevelEnum Values</th>
		</tr>
		
		<tr>
			<th><i>Constant</i></th>
			<th><i>Value</i></th>
			<th><i>Description</i></th>
		</tr>

		<tr>
			<td valign="top">adXactUnspecified</td>
			<td valign="top">-1</td>			
			<td valign="top">Indicates that the provider is using an isolation level that cannot be determined</td>
		</tr>

		<tr>
			<td valign="top">adXactChaos</td>
			<td valign="top">16</td>			
			<td valign="top">Indicates that you cannot overwrite pending changes from more highly isolated transactions</td>
		</tr>

		<tr>
			<td valign="top">adXactBrowse, adXactReadUncommitted</td>
			<td valign="top">256</td>			
			<td valign="top">Allows you to view changes pending in another transaction
<p>Subject to nonrepeatable reads and phantom rows</p></td>
		</tr>

		<tr>
			<td valign="top">adXactCursorStability, adXactReadCommitted</td>
			<td valign="top">4096</td>			
			<td valign="top">Default; ensures that your transaction does not view any pending updates 
<p>Subject to nonrepeatable reads and phantom rows, but immune to dirty reads (See  &quot;Definitions of Some Transactional Terms&quot;  in  the section &quot;<a href="ch03f.htm#73">IsolationLevel Property</a>&quot; for explanations of these terms.)</p></td>
		</tr>

		<tr>
			<td valign="top">adXactRepeatableRead</td>
			<td valign="top">65536</td>			
			<td valign="top">Ensures that your transaction does not view any pending updates and that rows you read are not modified by other transactions
<p>Subject to phantom rows</p></td>
		</tr>

		<tr>
			<td valign="top">adXactIsolated, adXactSerializable</td>
			<td valign="top">1048576</td>			
			<td valign="top">Specifies complete isolation from other transactions</td>
		</tr>

	</table>
</p>

<p>Although the values might make this property look like a bitmask,
you cannot set this property to the sum of two of these constants. Not
all of these values are supported for all OLE DB providers, ODBC
drivers, or databases. To learn more about using this property, see
&quot;<A HREF="ch03f.htm#70">Managing Your Transactions</A>.&quot;</p>

<A NAME="39"><H2>Mode Property</H2></A>

<p>Use the Mode property to control the privileges (read-only,
read/write) on your Connection object. You can set this property to any
of the values available in ConnectModeEnum, which are shown in the
following table.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th colspan=3>ConnectModeEnum Values</th>
		</tr>
		
		<tr>
			<th><i>Constant</i></th>
			<th><i>Value</i></th>
			<th> <i>Description</i></th>
		</tr>

		<tr>
			<td valign="top">adModeUnknown</td>
			<td valign="top">0</td>			
			<td valign="top">Default; uses the default permissions to your database</td>
		</tr>

		<tr>
			<td valign="top">adModeRead</td>
			<td valign="top">1</td>			
			<td valign="top">Connects to your database with read-only permissions</td>
		</tr>

		<tr>
			<td valign="top">adModeWrite</td>
			<td valign="top">2</td>			
			<td valign="top">Connects to your database with write-only permissions</td>
		</tr>

		<tr>
			<td valign="top">adModeReadWrite</td>
			<td valign="top">3</td>			
			<td valign="top">Connects to your database using read/write permissions</td>
		</tr>

		<tr>
			<td valign="top">adModeShareDenyRead</td>
			<td valign="top">4</td>			
			<td valign="top">Prevents other users from reading your database while your connection is open</td>
		</tr>
		
		<tr>
			<td valign="top">adModeShareDenyWrite</td>
			<td valign="top">8</td>			
			<td valign="top">Prevents other users from modifying your database while your connection is open</td>
		</tr>

		<tr>
			<td valign="top">adModeShareExclusive</td>
			<td valign="top">12</td>			
			<td valign="top">Prevents other users from connecting to your database while your connection is open</td>
		</tr>

		<tr>
			<td valign="top">adModeShareDenyNone</td>
			<td valign="top">16</td>			
			<td valign="top">Allows other users to open the same Record with read and write permissions but prevents other users from using adModeShareDenyWrite or adModeShareExclusive</td>
		</tr>
		
	</table>
</p>

<p>Administrators of client/server databases such as those implemented
in Oracle and SQL Server might shudder at the thought of a property
that a programmer can set in an application that limits database access
to a single user at a time. However, those administrators don't
need to lie awake at night worrying about such a property, since its
capabilities are limited. Setting the Mode property to
adModeShareExclusive before connecting to most databases won't
prevent other users from connecting to the database. This property is
designed for developers building applications for Microsoft Access
databases and works only on Access.</p>

<p>You can read a value from or write a value to the Mode property
while the Connection object is closed; when it's open, you can only
read the value. Although the ConnectModeEnum values make this property
look like a bitmask, it isn't. You can set the Mode property to
only one of the values in ConnectModeEnum, or to the sum of constants
in the enumerated data type if that sum equals another value in that
type. For example, you can set the Mode property to adModeRead +
adModeWrite because their values add up to the value of
adModeReadWrite. You cannot, however, set the Mode property to
adModeRead + adModeShareDenyWrite.</p>

<p>A write-only connection to an Access database is not possible, thus
the adModeWrite and adModeShareDenyRead constants cannot be used on
their own. These constants can be used only with their counterparts,
adModeRead and adModeShareDenyWrite.</p>

<A NAME="40"><H2>Properties Collection</H2></A>

<p>ADO is designed to allow you to connect to all sorts of databases.
Since no two database systems are exactly alike, exposing all their
major features by means of a single object model is impractical, if not
impossible. The standard properties, methods, and events of the
Connection object allow ADO to expose a base level of functionality;
additional functionality is exposed through the dynamic Properties
collection. Some of the entries in the Properties collection, such as
the Prompt property, apply to most OLE DB providers.</p>

<p>Actually, the Prompt property might appear familiar to RDO users.
The rdoConnection object exposes similar functionality through the <i>
OpenConnection</i> and <i>EstablishConnection</i> methods. You can set
the Prompt property in ADO to any value in ConnectPromptEnum while the
connection is closed:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
cnDatabase.Properties(&quot;Prompt&quot;).Value