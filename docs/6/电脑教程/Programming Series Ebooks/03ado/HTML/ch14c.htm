<html>
<head>
<TITLE>How the Data Shape Provider Works</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch14b.htm">[Previous]</A> <A HREF="ch14d.htm">[Next]</A><P>

<A NAME="365"><H1>How the Data Shape Provider Works</H1></A>

<p>When you submit a query on a connection that loads the data shape
provider, the provider parses the query string to determine whether
that string includes keywords that the provider uses to build
hierarchical recordsets. If no such keywords are used, the data shape
provider passes the query string to the OLE DB provider you've
specified as the data provider.</p>

<A NAME="366"><H2>Parsing a Hierarchical Query String</H2></A>

<p>If the data shape provider finds keywords, it breaks the query
string into distinct queries, passes those queries along to the data
provider, processes the results, and organizes the data into the
hierarchy you requested. For example, let's take a look at the
query string used earlier in the chapter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strSQL = &quot;SHAPE {SELECT * FROM Customers} AS Customers &quot; &amp; _
         &quot;APPEND ({SELECT * FROM Orders} AS Orders &quot; &amp; _
         &quot;RELATE CustomerID TO CustomerID) AS Orders&quot;
</pre>
</td></tr></table>
</p>

<p>This query is composed of two simple query strings that retrieve the
contents of two separate tables (Customers and Orders), and it
specifies how to relate the results of the two queries. In this case,
you're asking the data shape provider to relate the two queries
based on the contents of the CustomerID field for each query. Thus,
only the records from the Orders table that have the same CustomerID
value as the current record returned by the Customers query will be
visible.</p>

<p>The SHAPE keyword invokes the data shape provider's logic. The
APPEND keyword tells the data shape provider to add a field to the
initial recordset. With this added field, the orders for each customer
appear to be contained in a Field object in the resulting Recordset
object. The following code prints all orders for each customer:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
rsCustomers.Open strSQL, cnNorthwind, adOpenStatic, _
                 adLockBatchOptimistic, adCmdText
Set rsOrders = rsCustomers.Fields(&quot;Orders&quot;).Value
Do While Not rsCustomers.EOF
    Debug.Print rsCustomers!CustomerID &amp; &quot; _ &quot; &amp; rsCustomers!CompanyName
    Do While Not rsOrders.EOF
        Debug.Print vbTab &amp; rsOrders!OrderID &amp; &quot; _ &quot; &amp; rsOrders!OrderDate
        rsOrders.MoveNext
    Loop
    rsCustomers.MoveNext
Loop
</pre>
</td></tr></table>
</p>

<p>Each time you move to the next record in the <i>rsCustomers</i>
Recordset, only those orders for the current customer are visible in
the <i>rsOrders</i> Recordset. While the query syntax is rather
complicated, examining the data in the hierarchical Recordset is fairly
simple. In this example, I refer to the customer data as the
&quot;parent data&quot; and the orders data as the &quot;child
data.&quot;</p>

<A NAME="367"><H2>Using Grid Controls with Hierarchical Recordsets</H2></A>

<p>Microsoft Visual Basic 6 includes a control designed to display the
results of hierarchical queries: MSHFlexGrid, which is the Microsoft
Hierarchical FlexGrid Control 6.0 (OLEDB). When you use this control to
display the contents of a hierarchical Recordset, the parent data
resembles the results of a standard query and is displayed in a simple
grid, similar to a Microsoft Excel spreadsheet. The child data is
displayed in an additional column or columns in the grid. In this
example, the orders for each customer appear as a grid within a grid in
a kind of tree structure as shown in Figure 14-1. You can use the
symbol to the left of the customer information to expand or hide the
order information.</p>

<p>
<A HREF="javascript:fullSize('F14no01x.htm')"> <img src="images/F14no01.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14-1 </b> <i>A hierarchical recordset in the Hierarchical FlexGrid Control. </i><!-- /caption -->
</p>




<p>While this method of envisioning the hierarchy makes sense and is
how you want to display the data, it's not how ADO stores the data.
Let's take a closer look at the two main types of hierarchies and
how ADO maintains the data in each case.</p>

</BODY>
</HTML>






