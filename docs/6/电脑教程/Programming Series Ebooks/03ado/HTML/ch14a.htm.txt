<html>
<head>
<title>Chapter 14 -- Hierarchical Recordsets</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>

<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch13d.htm">[Previous]</A> <A HREF="ch14b.htm">[Next]</A><P>

<font size="+3">Chapter 14</font>

<A NAME="363"><H1>Hierarchical Recordsets</H1></A>

<p>Data does not exist in a vacuum. Most of the data in your database
is probably interconnected. Take a look at the referential integrity
constraints in the Northwind database that ships with Microsoft Visual
Basic, Microsoft Access, and Microsoft SQL Server. Most of the tables
exist as either the parent or the child in a relationship.</p>

<p>In your applications, you're likely to encounter scenarios in
which you'll want to retrieve data from two or more related tables
in your database. With other object models such as Data Access Objects
(DAO) and Remote Data Objects (RDO), you could retrieve such data in
one of two ways: into separate result sets, or into one or more result
sets using join operations.</p>

<p>As I alluded to in <A HREF="ch10a.htm">Chapter 10</A>, recordsets based on join queries can
be difficult to maintain and update. While the ADO Cursor Engine has
features that can simplify these problems, most programmers avoid using
join queries on tables that contain updatable data and one-to-many
relationships, such as a Customers table and an Orders table. In
addition to the problems with updating data, a join query results in a
waste of memory; your application must store a single set of data in
multiple memory locations. For example, every record of a Recordset
object based on a join query between the Customers table and the Orders
table contains a different order, but the customer information is
duplicated for customers with multiple orders.</p>

<p>If you retrieve data into separate Recordset objects rather than
performing a join, you'll need to write additional code to keep the
Recordsets synchronized. For example, if you're viewing customer
and order data, you'll want to apply a filter to the orders
Recordset so that the only visible orders are those for the currently
bookmarked customer.</p>

<p>To avoid these problems with joins and separate objects, the ADO
development team introduced in version 2.0 the concept of a
hierarchical Recordset. Based on a concept used in early versions of
Microsoft FoxPro, a hierarchical Recordset is similar to many related
Recordset objects. You can create a single query, such as the
following, to retrieve data from multiple tables:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strSQL