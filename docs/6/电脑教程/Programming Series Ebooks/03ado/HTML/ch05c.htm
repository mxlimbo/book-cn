<html>
<head>
<TITLE>ADO Command Object Methods</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch05b.htm">[Previous]</A> <A HREF="ch05d.htm">[Next]</A><P>

<A NAME="173"><H1>ADO Command Object Methods</H1></A>

<p>Now let's take a look at the methods available on the Command
object.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="2">Command Object Methods</th></tr>
<tr><th><i>Method Name</i></th><th><i>Description</i></th></tr>
<tr><td valign="top"><i>Cancel</i></td><td valign="top">Cancels an asynchronous query</td></tr>
<tr><td valign="top"><i>CreateParameter</i></td><td valign="top">Creates a Parameter object for the Command object's Parameters collection</td></tr>
<tr><td valign="top"><i>Execute</i></td><td valign="top">Executes your query</td></tr>
</table>

<A NAME="174"><h2><i>Cancel</i> Method</h2></A>
<p>The <i>Cancel</i> method allows you to terminate the execution of an
asynchronous query. Keep in mind that if you execute the query using
the asynchronous fetching option, canceling the query after the <i>
ExecuteComplete</i> event of the Connection object has fired will have
no effect.</p>

<A NAME="175"><h2><i>CreateParameter</i> Method</h2></A>
<p>The <i>CreateParameter</i> method returns a Parameter object. If
you're using a parameterized query, you can populate the Parameters
collection for the Command object by using the <i>Append</i> method on
the Parameters collection combined with the <i>CreateParameter</i>
method on the Command object. Here are the parameters that the <i>
CreateParameter</i> method supports:</p>

<ul>
<p><li> <i><b>Name</b> </i>This optional parameter
accepts a string that represents the name of the parameter.</li></p>

<p><li> <i><b>Type</b> </i>This optional parameter
accepts a value from DataTypeEnum for the parameter's data type.
For information on DataTypeEnum values, see the ADO documentation in
the Platform SDK Help.</li></p>

<p><li> <i><b>Direction</b> </i>This optional parameter
accepts a value from ParameterDirectionEnum. It specifies the direction (input
or output) for the parameter.</li></p>

<p><li> <i><b>Size</b> </i>This optional parameter
accepts a long value to specify the maximum size of the parameter.</li></p>

<p><li> <i><b>Value</b> </i>This optional parameter
accepts a Variant that specifies the value for the parameter.</li></p>
</ul>



<p>The parameters on the <i>CreateParameter</i> method correspond to
most of the properties on the Parameter object that you're liable
to set. I'll describe these parameters in more detail later in the
chapter when we cover the Parameter object. Perhaps the only properties
you might need to set on the Parameter object that aren't available
as parameters on the <i>CreateParameter</i> method are the NumericScale
and Precision properties.</p>

<A NAME="176"><h2><i>Execute</i> Method</h2></A>
<p>As its name implies, the <i>Execute</i> method executes the query
your Command object contains. By default, this method will return a
Recordset object with the results of your query. It has the following
parameters:</p>

<ul>
<p><li> <i><b>RecordsAffected</b> </i>This optional
parameter accepts a long value that returns the number of records
affected by the query.</li></p>

<p><li> <i><b>Parameters</b> </i>This optional
parameter accepts a Variant array that specifies the parameters for the
query.</li></p>

<p><li> <i><b>Options</b> </i>This optional parameter
accepts a long value. You can supply a value from CommandTypeEnum
and/or values from ExecuteOptionEnum.</li></p>
</ul>



<p>The initial parameter, <i>RecordsAffected</i>, will contain a long
integer that indicates the number of records affected by your query. If
you're using action queries to update data in your database,
you'll probably want to know how many records your query
modified.</p>

<p>The <i>Execute</i> method also takes a parameter, <i>Parameters</i>,
that you can use to supply values for the parameters of your query
without having to use the Parameters collection. This parameter on the
<i>Execute</i> method accepts a Variant array of values and/or
variables that correspond to the items in your Command object's
Parameters collection. Values supplied in <i>Parameters</i> will
override the values in the Parameters collection.</p>

<p>Just as with the <i>Options</i> parameter of the <i>
Recordset.Open</i> and <i>Connection.Execute</i> methods, you can use
this final parameter of the <i>Execute</i> method with constants from
CommandTypeEnum and/or ExecuteOptionEnum (see <A HREF="ch04a.htm">Chapter 4</A>). The parameter 
is a bitmask, so you can combine appropriate
constants such as adCmdText + adExecuteNoRecords. You can also specify
a value or values from ExecuteOptionEnum in this parameter to execute
your command asynchronously.</p>

</BODY>
</HTML>






