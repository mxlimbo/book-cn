<html>
<head>
<title>Chapter 13 -- Persisting Your Recordset</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch12h.htm">[Previous]</A> <A HREF="ch13b.htm">[Next]</A><P>

<font size="+3">Chapter 13</font>

<A NAME="357"><H1>Persisting Your Recordset</H1></A>

<p>There will probably be times when your users want to save the
current contents of a recordset, disconnect from the server, and still
have access to the information in that recordset. A salesperson going
on the road is the perfect example of such a user. You want your
salesperson to be able to view product and customer information and to
create orders while he is on a sales call. This requires that the
salesperson save the recordset data to a file&#8212;just as you'd
save a Microsoft Word document or a Microsoft Excel spreadsheet to a
file for later use&#8212;on the hard drive of his portable computer.
When the salesperson is finished drumming up business, he can reconnect
to the database and submit the new orders stored in the files on the
hard drive. This ability to retain recordset information after a
database or server connection has been closed is called
persistence.</p>

<p>Personally, I love this feature. In some of the test applications
I've written, I store data in a persisted recordset rather than
storing settings in the Microsoft Windows Registry. Not that I have
anything against using the Registry, but when I use persisted
recordsets, I can put the test application on a server and use the same
settings to run the application without having to change the settings
of the machine I'm using.</p>

</BODY>
</HTML>






