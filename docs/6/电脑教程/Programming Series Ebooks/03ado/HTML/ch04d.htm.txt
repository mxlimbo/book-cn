<html>
<head>
<TITLE>ADO Recordset Object Events</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch04c.htm">[Previous]</A> <A HREF="ch04e.htm">[Next]</A><P>

<A NAME="130"><H1>ADO Recordset Object Events</H1></A>

<p>ADO introduced events in version 2.0. They can greatly help you
organize your code and respond to actions on your Recordset objects.
Documenting all the different ways the events could fire, however,
would be an overwhelming and nearly impossible task. Instead, we'll
cover the basics of each event, as described in the following table. If
you're looking for a list of events and parameter values for a
specific scenario&#8212;&quot;What if a user modifies a field in the
grid and then clicks on another record?&quot;&#8212;your best bet is to
put code into each of the event handlers, create the desired scenario,
verify the events that fire, and check the value of the parameters in
those events.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="2">Recordset Object Events  </th></tr>
<tr>
<th><i>Event Name</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top"><i>EndOfRecordset</i>  </td>
<td valign="top">Fires when you navigate beyond the last record
of data in your Recordset  </td></tr>
<tr>
<td valign="top"><i>FetchComplete</i>  </td>
<td valign="top">Fires when the ADO Cursor Engine retrieves the
last of the data in your Recordset that uses asynchronous fetching  </td></tr>
<tr>
<td valign="top"><i>FetchProgress</i>  </td>
<td valign="top">Fires after the ADO Cursor Engine retrieves a
batch of records for your Recordset that uses asynchronous fetching  </td></tr>
<tr>
<td valign="top"><i>FieldChangeComplete</i>  </td>
<td valign="top">Fires after you've modified the value
for a field  </td></tr>
<tr>
<td valign="top"><i>MoveComplete</i>  </td>
<td valign="top">Fires after the current position of the
Recordset changes  </td></tr>
<tr>
<td valign="top"><i>RecordChangeComplete</i>  </td>
<td valign="top">Fires after you modify a record  </td></tr>
<tr>
<td valign="top"><i>RecordsetChangeComplete</i>  </td>
<td valign="top">Fires after the Recordset object has
changed  </td></tr>
<tr>
<td valign="top"><i>WillChangeField</i>  </td>
<td valign="top">Fires before the contents of a field
change  </td></tr>
<tr>
<td valign="top"><i>WillChangeRecord</i>  </td>
<td valign="top">Fires before the contents of a record
change  </td></tr>
<tr>
<td valign="top"><i>WillChangeRecordset</i>  </td>
<td valign="top">Fires before the Recordset object
changes  </td></tr>
<tr>
<td valign="top"><i>WillMove</i>  </td>
<td valign="top">Fires before the current position in the Recordset
changes  </td></tr>
</table></p>


<A NAME="131"><h2><i>EndOfRecordset</i> Event</h2></A>
<p>This event fires when you move beyond the last record in your
Recordset. There's a property you can set on most Visual Basic
navigation controls that enables the control to automatically add a
record to the end of your Recordset when you reach EOF. With this
event, you can provide similar functionality in your application. The
<i>EndOfRecordset</i> event supports three parameters:</p>

<ul>
<p><li> <i><b>fMoreData</b></i> This parameter accepts
Boolean operators. Set it to True if you appended a new record to the
end of your Recordset in the event handler.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter returns a
value from EventStatusEnum, as shown in the table below.</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>

<p>You can also use the <i>EndOfRecordset</i> event simply to determine
when you've reached the end of your Recordset.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="3">EventStatusEnum Values  </th></tr>
<tr>
<th><i>Constant</i>  </th>
<th><i>Value</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top">adStatusOK  </td>
<td valign="top">1   </td>
<td valign="top">The operation that caused the event was successful.  </td></tr>
<tr>
<td valign="top">adStatusErrorsOccurred  </td>
<td valign="top">2   </td>
<td valign="top">The operation that caused the event failed
because of an error or errors.  </td></tr>
<tr>
<td valign="top">adStatusCantDeny   </td>
<td valign="top">3  </td>
<td valign="top">The event cannot request cancellation of the
pending operation.  </td></tr>
<tr>
<td valign="top">adStatusCancel  </td>
<td valign="top">4   </td>
<td valign="top">Requests cancellation of the operation that caused
the event to occur.  </td></tr>
<tr>
<td valign="top">adStatusUnwantedEvent   </td>
<td valign="top">5   </td>
<td valign="top">Prevents subsequent notifications of the
event.  </td></tr>
</table></p>


<p>If you do not want this event to continue to fire, you can set the
<i>adStatus</i> parameter to adStatusUnwantedEvent.</p>

<A NAME="132"><h2><i>FetchComplete</i> Event</h2></A>
<p>This event fires only if you're using asynchronous fetching with
a client-side Recordset. After the final <i>FetchProgress</i> event
fires, <i>FetchComplete</i> will fire. The <i>FetchComplete</i> event
has three parameters:</p>

<ul>
<p><li> <i><b>pError</b></i> If <i>adStatus</i> is set
to adStatusErrorsOccurred, this parameter is a pointer to an Error
object.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter takes its
value from EventStatusEnum, as shown in the table above.</li></p>

<p><li> <i><b>pRecordset</b></i> This is a pointer to
the Recordset object that fired the event.</li></p>
</ul>



<p>Setting <i>adStatus</i> to adStatusUnwantedEvent will not prevent
the event from firing in the future. We'll talk more about
ADO's asynchronous fetching feature and events at the end of this
chapter.</p>

<A NAME="133"><h2><i>FetchProgress</i> Event</h2></A>
<p>Like the <i>FetchComplete</i> event, the <i>FetchProgress</i> event
fires when you use asynchronous fetching with the ADO Cursor Engine. It
has four parameters:</p>

<ul>
<p><li> <i><b>Progress</b></i> This parameter accepts a
long value.</li></p>

<p><li> <i><b>MaxProgress</b></i> This parameter
accepts a long value.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter takes its
value from EventStatusEnum, as shown in the table above.</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>The <i>Progress</i> and <i>MaxProgress</i> parameters are designed
to help you determine what percentage of the fetching has completed
thus far. To date, I've retrieved only a value of 1 from the <i>
MaxProgress</i> parameter and 0 for <i>Progress</i> until the final
time the event fires.</p>

<p>Two dynamic properties on client-side Recordsets can help determine
how often this event fires: Initial Fetch Size and Background Fetch
Size. They default to 50 and 15, respectively. These properties are
available as soon as you set the Recordset's CursorLocation
property to adUseClient. Once ADO has retrieved the number of records
specified in the Initial Fetch Size property, the <i>
ExecuteComplete</i> event on the Connection object will fire. From that
point on, after ADO retrieves the number of records specified in the
Background Fetch Size property, it will fire the <i>FetchProgress</i>
event. The <i>FetchProgress</i> event will also be fired if ADO reaches
the end of the Recordset without retrieving the number of records
specified by Background Fetch Size. After <i>FetchProgress</i> fires
for the final time, <i>FetchComplete</i> will fire.</p>

<p>Setting <i>adStatus</i> to adStatusUnwantedEvent will prevent the
event from firing again.</p>

<A NAME="134"><h2><i>WillChangeField</i> and <i>FieldChangeComplete</i> Events</h2></A>
<p>Whenever you change the Value property of Field objects in your
Recordset, the <i>WillChangeField</i> and <i>FieldChangeComplete</i>
events will fire. These events use the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillChangeField