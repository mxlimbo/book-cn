<html>
<head>
<title>Questions That Should Be Asked More Frequently</title>
<LINK REL=STYLESHEET HREF="progado.css" TYPE="text/css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch05f.htm">[Previous]</A> <A HREF="ch06a.htm">[Next]</A><P>

<A NAME="191"><H1>Questions That Should Be Asked More Frequently</H1></A>

<p><b>Q. <i>Should I always use a Command object?</i></b> </p>

<p><b>A.</b> In short, no. The Command object can be extremely handy,
but it's primarily designed for two-tiered client-server
applications, which, these days, aren't as fashionable as
multitiered applications. If you're building a query that will run
in a Component Services (formerly known as Microsoft Transaction
Server) component or in Active Server Pages (ASP), there's really
no reason to use a Command object.</p>

<p><b>Q. <i>Should I always use Parameter objects in my query?</i></b> </p>

<p><b>A.</b> Again, in short, no. If you're executing your query
only once, there's usually little reason to use a parameterized
query.</p>

<p>If you know ahead of time that you're going to retrieve
information about a particular customer, but you're accepting input
from the user to decide which customer, you might be tempted to use
this information in a Parameter object. While that's a perfectly
acceptable reason for using a Parameter object, bear in mind that you
could also simply build your query string and include that information
prior to submitting the query.</p>

<p>Many developers will use parameterized queries because they're
receiving input from the user and don't want to worry about
delimiting the string or date. You'll understand why if you've
ever had to build a query like the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
SELECT