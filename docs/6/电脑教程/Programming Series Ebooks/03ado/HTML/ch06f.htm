<html>
<head>
<TITLE>ADO Stream Object</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch06e.htm">[Previous]</A> <A HREF="ch06g.htm">[Next]</A><P>

<A NAME="217"><H1>ADO Stream Object</H1></A>

<p>In addition to the Record object, ADO 2.5 introduces the Stream
object to the ADO object model. Although you can use the Stream object
in conjunction with the Record object to access document-based data,
the Stream object can also be used independently in ways that
traditional database programmers and web programmers alike will find
useful.</p>

<A NAME="218"><H2>Working with Document Data</H2></A>

<p>While the Record object allows you to interact with the structure of
documents, the Stream object lets you access the contents of those
documents. You can use the Stream object's <i>Open</i> method to
access the default stream of data associated with the Record. From
there, you can read and modify the contents of the document through the
Stream object's properties and methods. The code that follows uses
a Stream object to store the contents of a file in a Record object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Stream.Open Record, adModeReadWrite, adOpenStreamFromRecord
Stream.Position = 0
Stream.LoadFromFile strPathToFile
Stream.Flush
</pre>
</td></tr></table>
</p>

<A NAME="219"><H2>Working with Persistent Data</H2></A>

<p>In ADO 2.5, the Recordset object's persistence features have
been enhanced to work with Stream objects. You can persist data to a
Stream rather than to a file by using the Stream object's <i>
Save</i> method. To turn that data back into a Recordset object, simply
use the Stream object as the <i>Source</i> parameter on the
Recordset's <i>Open</i> method.</p>

<A NAME="220"><H2>Working with BLOB Data</H2></A>

<p>Writing code to access and modify BLOB (binary large object) data
(long string and binary fields) in your database has never been easy.
Programmers using ADO and its predecessors have had to rely on the
Field object's <i>GetChunk</i> and <i>AppendChunk</i>
methods&#8230;until now.</p>

<p>BLOB fields often contain the contents of files. The Stream object
greatly simplifies the process of interacting with this data. You
don't need to access the data in small chunks or determine how much
data you're about to access. For example, to retrieve the contents
of the ImageField field and store that data in a file, you could use
the following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Stream.Type = adTypeBinary
Stream.Write Recordset.Fields(&quot;ImageField&quot;).Value
Stream.SaveToFile strPathToFile
</pre>
</td></tr></table>
</p>

<p>To move the contents of the file back to the database, you'd use
this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Stream.Type = adTypeBinary
Stream.LoadFromFile strPathToFile
Recordset.Fields(&quot;ImageField&quot;).Value = Stream.Read
</pre>
</td></tr></table>
</p>

</BODY>
</HTML>






