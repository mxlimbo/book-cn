<html>
<head>
<TITLE>RDSServer DataFactory Object</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch16d.htm">[Previous]</A> <A HREF="ch16f.htm">[Next]</A><P>

<A NAME="432"><H1>RDSServer DataFactory Object</H1></A>

<p>The DataFactory object is an RDS component that runs on your IIS
server. In fact, the DataControl object passes the connection and query
strings to the DataFactory component on the server that you've
specified.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>I've found that if you use the DataSpace object in
Visual Basic, you should dimension your business object variable as
Object rather than use early binding.</blockquote></div>
</p>

<p>You can use the DataFactory object to query and update your
database. You can also convert Recordsets to MIME strings and generate
empty Recordsets.</p>

<p>Think of the DataFactory object as a generic business object designed
to help you communicate with your database through queries. DataFactory
acts as the default server-side object of RDS. When you use the
DataControl object to query your database, RDS instantiates a hidden
DataFactory object on your server to submit the query. Let's take a
closer look at the methods available through the DataFactory object,
shown in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="2">Methods of the RDSServer DataFactory Object</th></tr>

<tr><th><i>Method Name</i></th><th><i>Description</i></th></tr>

<tr><td valign="top"><i>ConvertToString</i></td>
<td valign="top">Converts the Recordset to a MIME-encoded
string.</td></tr>

<tr><td valign="top"><i>CreateRecordset</i></td>
<td valign="top">Creates a new, empty Recordset with the
structure you request.</td></tr>

<tr><td valign="top"><i>Execute</i></td>
<td valign="top">Interacts with the RDS DataControl. Not intended for
external use.</td></tr>

<tr><td valign="top"><i>Query</i></td>
<td valign="top">Connects to your database, executes a query, and
retrieves the results.</td></tr>

<tr><td valign="top"><i>SubmitChanges</i></td>
<td valign="top">Submits the changes in the specified Recordset
to the database associated with a connection string.</td></tr>

<tr><td valign="top"><i>Synchronize</i></td>
<td valign="top">Interacts with the RDS DataControl. Not intended
for external use.</td></tr></table></p>

<A NAME="433"><h2><i>ConvertToString</i> Method</h2></A>
<p>The <i>ConvertToString</i> method accepts a Recordset object and
returns its contents in a MIME-encoded string. This method is designed
for ASP programmers who want to embed the contents of a Recordset in an
HTML page.</p>

<p>The <i>ConvertToString</i> method is already somewhat antiquated.
There are better ways to send data to your client application. Rather
than using MIME-encoded strings, you might want to consider marshaling
the object itself through a business object, using the DataSpace object
or the <i>Execute</i> or <i>Query</i> method on the DataFactory object.
Another option is to store the contents of a Recordset in XML format
using the ASP Response object and to use the DataControl object's
URL property to retrieve the contents.</p>

<A NAME="434"><h2><i>CreateRecordset</i> Method</h2></A>
<p>The DataFactory object's <i>CreateRecordset</i> method is
identical to the <i>CreateRecordset</i> method of the DataControl
object. For more information, see the section
&quot;<A HREF="ch16c.htm#422"><i>CreateRecordset</i> method</A>.&quot;</p>

<A NAME="435"><h2><i>Query</i> Method</h2></A>
<p>The DataFactory object's <i>Query</i> method returns a Recordset
object based on a query string. This method accepts three
parameters:</p>

<ul>
<p><li> <i><b>bstrConnection</b></i> This required
parameter is the connection string that the DataFactory will use to
communicate with your database.</li></p>

<p><li> <i><b>bstrQuery</b></i> You specify the query
string you want to submit to your database in this required
parameter.</li></p>

<p><li> <i><b>IMarshalOptions</b></i> This optional
parameter accepts a long value from ADCFetchOptionEnum. For information
on these values, see the section &quot;<A HREF="ch16c.htm#409">FetchOptions property</A>.&quot;</li></p>
</ul>



<A NAME="436"><h2><i>SubmitChanges</i> Method</h2></A>
<p>The DataFactory object's <i>SubmitChanges</i> method is similar
to the <i>SubmitChanges</i> method of the DataControl object. The <i>
SubmitChanges</i> method on the DataFactory object accepts two required
parameters:</p>

<ul>
<p><li> <i><b>bstrConnection</b></i> Supply the
connection string for your database in this parameter.</li></p>

<p><li> <i><b>pRecordset</b></i> Supply the Recordset
object that has pending changes you want to submit to the database in
this parameter.</li></p>
</ul>



<p>One difference between this method and its DataControl namesake is
that with the DataFactory object's <i>SubmitChanges</i> method,
pending changes in records that aren't visible because of the
filter applied to the Recordset are still submitted to your database.
The DataFactory object still wraps these changes in a transaction so
that if any of the pending changes fail, the entire batch of changes
fails.</p>

</BODY>
</HTML>






