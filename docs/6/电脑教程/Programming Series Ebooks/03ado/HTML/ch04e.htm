<html>
<head>
<TITLE>ADO Fields Collection</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch04d.htm">[Previous]</A> <A HREF="ch04f.htm">[Next]</A><P>

<A NAME="138"><H1>ADO Fields Collection</H1></A>

<p>The ADO Fields collection contains the Field objects for your
Recordset. Like all collections, the Fields collection exposes a Count
property and an Item property (the default). With the Item property,
you can return a particular Field by name or index.</p>

<p>ADO 2.5 has introduced some new methods to the collection: <i>
CancelUpdate</i>, <i>Resync</i>, and <i>Update</i>. These methods
provide functionality that's similar to that of the methods with
the same names on the Recordset object. They're designed to be used
on the Fields collection of the Record object because it directly
exposes such methods. Calling these methods&#8212;or entering certain
parameters when calling some of the methods&#8212;on the Fields
collection of the Recordset object will generate a run-time error.</p>

<p>Let's take a look at the methods exposed by the Fields
collection and listed in this next table.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="2">Fields Collection Methods  </th></tr>
<tr>
<th><i>Method Name</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top"><i>Append</i>  </td>
<td valign="top">Adds a new Field to the collection  </td></tr>
<tr>
<td valign="top"><i>CancelUpdate</i>  </td>
<td valign="top">Cancels the pending changes for a record  </td></tr>
<tr>
<td valign="top"><i>Delete</i>  </td>
<td valign="top">Deletes a Field from the collection  </td></tr>
<tr>
<td valign="top"><i>Refresh</i>  </td>
<td valign="top"> Refreshes the Fields collection  </td></tr>
<tr>
<td valign="top"><i>Resync</i>  </td>
<td valign="top"> Resynchronizes the current record  </td></tr>
<tr>
<td valign="top"><i>Update</i>  </td>
<td valign="top">Submits the pending changes in a record  </td></tr>
</table></p>


<A NAME="139"><h2><i>Append</i> Method</h2></A>
<p>You can use the <i>Append</i> method on the Fields collection to
create your own Recordset object without using a database. You can
populate the Fields collection with Field objects in this fashion and
then call the <i>Recordset.Open</i> method to start adding records to
your Recordset. If you're not trying to communicate with a database
but would like to maintain your data in a Recordset object, this method
is for you. Its parameters are as follows:</p>

<ul>
<p><li> <i><b>Name</b></i> This parameter accepts a
string that represents the name of the new field.</li></p>

<p><li> <i><b>Type</b></i> This parameter can take a
byte value from DataTypeEnum and designates the data type for the new
field.</li></p>

<p><li> <i><b>DefinedSize</b></i> This parameter
accepts long type data and is optional. It is the defined size for the
new field.</li></p>

<p><li> <i><b>Attributes</b></i> This optional
parameter accepts long type data. It sets attributes for the new
field.</li></p>

<p><li> <i><b>FieldValue</b></i> This optional
parameter accepts a Variant containing the value of the new field.</li></p>
</ul>



<p>The <i>DefinedSize</i> parameter is helpful when using variable
length strings and binary data. You don't need to use this
parameter with data types that have a predefined size, such as
integers. If you're using a numeric field, you can set the
NumericScale and Precision properties on the Field object after
creating the field with the <i>Append</i> method but prior to opening
the Recordset by calling the <i>Open</i> method.</p>

<p>You can set attributes for the field you're creating by using
the <i>Attributes</i> parameter on the <i>Append</i> method. You can
use a combination of values from FieldAttributeEnum (shown in &quot;<A HREF="ch04f.htm#147">Attributes Property</A>&quot;)
in this parameter.</p>

<p>Although you can use any entry in DataTypeEnum (see ADO Help) for
the data type for your new field, you should refrain from using certain
data types in this fashion. You should avoid types such as adVariant,
adIUnknown, and adIDispatch in creatable Recordsets. I won't go
into too much detail about why here. Suffice it to say that these data
types could be used to store COM objects, but knowing how and when to
decrement the reference counter for these objects can be tricky. To
simplify this dilemma, ADO never decrements the reference counter.
Thus, if you're trying to use a creatable Recordset to maintain COM
objects, you're liable to encounter behavior that looks like a
memory leak. In other words, don't do it. Your best bet is to stick
with the data types that ADO uses to store data from your database.</p>

<p>You can also call the <i>Append</i> method on the Fields collection
of a Record object, if the Record allows it. The <i>FieldValue</i>
parameter accepts a Variant for the value of the new field. This
parameter was added in ADO 2.5 and is designed for the Fields
collection on the Record object. As mentioned before, if you use this
parameter on the Fields collection of a Recordset object, you'll
generate a run-time error.</p>

<A NAME="140"><h2><i>CancelUpdate</i> Method</h2></A>
<p>This method is similar to the <i>CancelUpdate</i> method on the
Recordset object. You can use it to cancel the pending changes in the
Fields collection of a Record object. Calling this method on the Fields
collection of a Recordset object will generate a run-time error.</p>

<A NAME="141"><h2><i>Delete</i> Method</h2></A>
<p>You can use the <i>Delete</i> method to remove a Field object from
the Fields collection. The <i>Delete</i> method accepts a single
required parameter, as follows:</p>

<ul>
<p><li> <i><b>Index</b></i> This parameter specifies
the Field you want to delete.</li></p>
</ul>



<p>The <i>Index</i> parameter accepts a long integer or a string so
that you can specify the Field you want to delete by name or by
number.</p>

<p>You can call the <i>Delete</i> method on the Fields collection of a
creatable Recordset object that you have yet to open. You can also call
the <i>Delete</i> method on the Fields collection of a Record object to
delete a record-specific field, if you have permission to do so.</p>

<A NAME="142"><h2><i>Refresh</i> Method</h2></A>
<p>Call the <i>Refresh</i> method to refresh the Fields collection.
This method has no visible effect on the Fields collection of the
Record or Recordset object.</p>

<A NAME="143"><h2><i>Resync</i> Method</h2></A>
<p>The Fields collection exposes a <i>Resync</i> method similar to the
<i>Resync</i> method on the Recordset object and is designed to supply
similar functionality for the Record object. This method forces ADO to
refetch the contents of the Record from your data store. Calling the
<i>Resync</i> method on the Fields collection of a Recordset object
will cause a run-time error.</p>

<p>The <i>Resync</i> method accepts one optional parameter, as
follows:</p>

<ul>
<p><li> <i><b>ResyncValues</b></i> This optional
parameter is of type ResyncEnum and defaults to adResyncAllValues. It
can be used to control where the newly fetched data is stored&#8212;in
the Value property or in the UnderlyingValue property of each
Field.</li></p>
</ul>



<p>For more information, see the discussion of the <i>Resync</i> method
on the Recordset object in the first  &quot;<A HREF="ch04c.htm#124"><i>Resync</i> Method</A>&quot; section in this chapter.</p>

<A NAME="144"><h2><i>Update</i> Method</h2></A>
<p>The <i>Update</i> method on the Fields collection is designed to let
you submit the changes stored in the Fields collection of a Record
object to your data store. This method is similar to the <i>Update</i>
method on the Recordset object. Calling this method on the Fields
collection of the Recordset object will generate a run-time error.</p>

</BODY>
</HTML>






