<html>
<head>
<TITLE>ADO Recordset Object Events</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch04c.htm">[Previous]</A> <A HREF="ch04e.htm">[Next]</A><P>

<A NAME="130"><H1>ADO Recordset Object Events</H1></A>

<p>ADO introduced events in version 2.0. They can greatly help you
organize your code and respond to actions on your Recordset objects.
Documenting all the different ways the events could fire, however,
would be an overwhelming and nearly impossible task. Instead, we'll
cover the basics of each event, as described in the following table. If
you're looking for a list of events and parameter values for a
specific scenario&#8212;&quot;What if a user modifies a field in the
grid and then clicks on another record?&quot;&#8212;your best bet is to
put code into each of the event handlers, create the desired scenario,
verify the events that fire, and check the value of the parameters in
those events.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="2">Recordset Object Events  </th></tr>
<tr>
<th><i>Event Name</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top"><i>EndOfRecordset</i>  </td>
<td valign="top">Fires when you navigate beyond the last record
of data in your Recordset  </td></tr>
<tr>
<td valign="top"><i>FetchComplete</i>  </td>
<td valign="top">Fires when the ADO Cursor Engine retrieves the
last of the data in your Recordset that uses asynchronous fetching  </td></tr>
<tr>
<td valign="top"><i>FetchProgress</i>  </td>
<td valign="top">Fires after the ADO Cursor Engine retrieves a
batch of records for your Recordset that uses asynchronous fetching  </td></tr>
<tr>
<td valign="top"><i>FieldChangeComplete</i>  </td>
<td valign="top">Fires after you've modified the value
for a field  </td></tr>
<tr>
<td valign="top"><i>MoveComplete</i>  </td>
<td valign="top">Fires after the current position of the
Recordset changes  </td></tr>
<tr>
<td valign="top"><i>RecordChangeComplete</i>  </td>
<td valign="top">Fires after you modify a record  </td></tr>
<tr>
<td valign="top"><i>RecordsetChangeComplete</i>  </td>
<td valign="top">Fires after the Recordset object has
changed  </td></tr>
<tr>
<td valign="top"><i>WillChangeField</i>  </td>
<td valign="top">Fires before the contents of a field
change  </td></tr>
<tr>
<td valign="top"><i>WillChangeRecord</i>  </td>
<td valign="top">Fires before the contents of a record
change  </td></tr>
<tr>
<td valign="top"><i>WillChangeRecordset</i>  </td>
<td valign="top">Fires before the Recordset object
changes  </td></tr>
<tr>
<td valign="top"><i>WillMove</i>  </td>
<td valign="top">Fires before the current position in the Recordset
changes  </td></tr>
</table></p>


<A NAME="131"><h2><i>EndOfRecordset</i> Event</h2></A>
<p>This event fires when you move beyond the last record in your
Recordset. There's a property you can set on most Visual Basic
navigation controls that enables the control to automatically add a
record to the end of your Recordset when you reach EOF. With this
event, you can provide similar functionality in your application. The
<i>EndOfRecordset</i> event supports three parameters:</p>

<ul>
<p><li> <i><b>fMoreData</b></i> This parameter accepts
Boolean operators. Set it to True if you appended a new record to the
end of your Recordset in the event handler.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter returns a
value from EventStatusEnum, as shown in the table below.</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>

<p>You can also use the <i>EndOfRecordset</i> event simply to determine
when you've reached the end of your Recordset.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="3">EventStatusEnum Values  </th></tr>
<tr>
<th><i>Constant</i>  </th>
<th><i>Value</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top">adStatusOK  </td>
<td valign="top">1   </td>
<td valign="top">The operation that caused the event was successful.  </td></tr>
<tr>
<td valign="top">adStatusErrorsOccurred  </td>
<td valign="top">2   </td>
<td valign="top">The operation that caused the event failed
because of an error or errors.  </td></tr>
<tr>
<td valign="top">adStatusCantDeny   </td>
<td valign="top">3  </td>
<td valign="top">The event cannot request cancellation of the
pending operation.  </td></tr>
<tr>
<td valign="top">adStatusCancel  </td>
<td valign="top">4   </td>
<td valign="top">Requests cancellation of the operation that caused
the event to occur.  </td></tr>
<tr>
<td valign="top">adStatusUnwantedEvent   </td>
<td valign="top">5   </td>
<td valign="top">Prevents subsequent notifications of the
event.  </td></tr>
</table></p>


<p>If you do not want this event to continue to fire, you can set the
<i>adStatus</i> parameter to adStatusUnwantedEvent.</p>

<A NAME="132"><h2><i>FetchComplete</i> Event</h2></A>
<p>This event fires only if you're using asynchronous fetching with
a client-side Recordset. After the final <i>FetchProgress</i> event
fires, <i>FetchComplete</i> will fire. The <i>FetchComplete</i> event
has three parameters:</p>

<ul>
<p><li> <i><b>pError</b></i> If <i>adStatus</i> is set
to adStatusErrorsOccurred, this parameter is a pointer to an Error
object.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter takes its
value from EventStatusEnum, as shown in the table above.</li></p>

<p><li> <i><b>pRecordset</b></i> This is a pointer to
the Recordset object that fired the event.</li></p>
</ul>



<p>Setting <i>adStatus</i> to adStatusUnwantedEvent will not prevent
the event from firing in the future. We'll talk more about
ADO's asynchronous fetching feature and events at the end of this
chapter.</p>

<A NAME="133"><h2><i>FetchProgress</i> Event</h2></A>
<p>Like the <i>FetchComplete</i> event, the <i>FetchProgress</i> event
fires when you use asynchronous fetching with the ADO Cursor Engine. It
has four parameters:</p>

<ul>
<p><li> <i><b>Progress</b></i> This parameter accepts a
long value.</li></p>

<p><li> <i><b>MaxProgress</b></i> This parameter
accepts a long value.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter takes its
value from EventStatusEnum, as shown in the table above.</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>The <i>Progress</i> and <i>MaxProgress</i> parameters are designed
to help you determine what percentage of the fetching has completed
thus far. To date, I've retrieved only a value of 1 from the <i>
MaxProgress</i> parameter and 0 for <i>Progress</i> until the final
time the event fires.</p>

<p>Two dynamic properties on client-side Recordsets can help determine
how often this event fires: Initial Fetch Size and Background Fetch
Size. They default to 50 and 15, respectively. These properties are
available as soon as you set the Recordset's CursorLocation
property to adUseClient. Once ADO has retrieved the number of records
specified in the Initial Fetch Size property, the <i>
ExecuteComplete</i> event on the Connection object will fire. From that
point on, after ADO retrieves the number of records specified in the
Background Fetch Size property, it will fire the <i>FetchProgress</i>
event. The <i>FetchProgress</i> event will also be fired if ADO reaches
the end of the Recordset without retrieving the number of records
specified by Background Fetch Size. After <i>FetchProgress</i> fires
for the final time, <i>FetchComplete</i> will fire.</p>

<p>Setting <i>adStatus</i> to adStatusUnwantedEvent will prevent the
event from firing again.</p>

<A NAME="134"><h2><i>WillChangeField</i> and <i>FieldChangeComplete</i> Events</h2></A>
<p>Whenever you change the Value property of Field objects in your
Recordset, the <i>WillChangeField</i> and <i>FieldChangeComplete</i>
events will fire. These events use the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillChangeField <i>cFields</i>, <i>Fields</i>, <i>adStatus</i>, <i>pRecordset</i>
FieldChangeComplete <i>cFields</i>, <i>Fields</i>, <i>pError</i>, <i>adStatus</i>, <i>pRecordset</i>
</pre>
</td></tr></table>
</p>

<p>The following is a list of the combined parameters for both <i>
WillChangeField</i> and <i>FieldChangeComplete</i>:</p>

<ul>
<p><li> <i><b>cFields</b></i> This is a long data type
parameter that specifies the number of fields modified.</li></p>

<p><li> <i><b>Fields</b></i> This parameter accepts a
Variant array of Field objects.</li></p>

<p><li> <i><b>pError</b></i> This parameter is a
pointer to the Error object if an error occurred.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter takes its
value from EventStatusEnum, as shown in the table in the section, &quot;<A HREF="ch04d.htm#131"><i>EndOfRecordset</i> Event</A>.&quot;</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>If you want to determine which fields have been or will be modified,
you can use code as follows in the event handler for either event:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim lngCounter As Long

For lngCounter = 0 To cFields - 1
    Debug.Print Fields(lngCounter).Name
Next lngCounter
</pre>
</td></tr></table>
</p>

<p>If an error occurs, you can use the <i>pError</i> parameter in the
<i>FieldChangeComplete</i> event handler to determine the cause.</p>

<p>You can set the <i>adStatus</i> parameter to adStatusUnwantedEvent to
prevent either event from occurring in the future. You can set this
parameter to adStatusCancel if you want to prevent the Field from being
updated. In the <i>FieldChangeComplete</i> event, this parameter will
be set to adStatusErrorsOccurred if an error occurs.</p>

<p>As far as I can tell, there is no way to use the <i>WillChangeField</i>
event to examine the change that will be made to the Field.</p>

<A NAME="135"><h2><i>WillChangeRecord</i> and <i>RecordChangeComplete</i> Events</h2></A>
<p>You can use the <i>WillChangeRecord</i> and <i>
RecordChangeComplete</i> events to keep track of changes to the records
in your Recordset. These events will fire as a result of calls to the
<i>Update</i>, <i>Delete</i>, <i>CancelUpdate</i>, <i>AddNew</i>, <i>
UpdateBatch</i>, <i>CancelBatch</i>, or <i>Resync</i> methods on the
Recordset. The events will also fire the first time you modify the
value of a field. When the event fires, the only records visible
through the filter are those affected by the action that caused these
events to fire. You cannot change the Filter property in either of
these events. The <i>WillChangeRecord</i> and <i>
RecordChangeComplete</i> events use the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillChangeRecord <i>adReason</i>, <i>cRecords</i>, <i>adStatus</i>, <i>pRecordset</i>
RecordChangeComplete <i>adReason</i>, <i>cRecords</i>, <i>pError</i>, <i>adStatus</i>, <i>pRecordset</i>
</pre>
</td></tr></table>
</p>

<p>The following is a list of the combined parameters for both these
events:</p>

<ul>
<p><li> <i><b>adReason</b></i> This parameter accepts
certain values from EventReasonEnum.</li></p>

<p><li> <i><b>cRecords</b></i> A long data type
parameter, it specifies the number of records modified.</li></p>

<p><li> <i><b>pError</b></i> This parameter is a
pointer to the Error object if an error occurred.</li></p>

<p><li> <i><b>adStatus</b></i>This parameter accepts a
value from EventStatusEnum, as shown in the table in the section &quot;<A HREF="ch04d.htm#131"><i>EndOfRecordset</i> Event</A>.&quot;</li></p>

<p><li> <i><b>pRecordset</b></i>This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>The <i>adReason</i> parameter can help you understand why the event
fired. Changing the current record in different ways will cause the <i>
adReason</i> parameter to contain different values, as detailed in the
following table.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="3">EventReasonEnum Values Available to <i>WillChangeRecord</i> and <i>RecordChangeComplete</i> </th></tr>
<tr>
<th><i>Constant</i>  </th>
<th><i>Value</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top">adRsnFirstChange  </td>
<td valign="top">11   </td>
<td valign="top">The record was modified for the first time.
Subsequent modifications to the record prior to submitting those
changes to the database will not cause the events to fire.  </td></tr>
<tr>
<td valign="top">adRsnAddNew  </td>
<td valign="top">1   </td>
<td valign="top">The record was added by using <i>AddNew</i>.
Subsequent modifications to the record prior to submitting those
changes to the database will not cause the events to fire.  </td></tr>
<tr>
<td valign="top">adRsnDelete  </td>
<td valign="top">2   </td>
<td valign="top">The record was deleted.  </td></tr>
<tr>
<td valign="top">adRsnUpdate  </td>
<td valign="top">3   </td>
<td valign="top">The pending changes in the record were submitted to the
database by <i>Update</i> (for LockTypes of adLockOptimistic or
adLockPessimistic), or by <i>UpdateBatch</i> (for a LockType of
adLockBatchOptimistic).  </td></tr>
<tr>
<td valign="top">adRsnUndoUpdate  </td>
<td valign="top">4   </td>
<td valign="top">A pending modification was canceled by <i>
CancelUpdate</i> or <i>CancelBatch</i>.  </td></tr>
<tr>
<td valign="top">adRsnUndoAddNew   </td>
<td valign="top">5   </td>
<td valign="top">A pending insertion was canceled by <i>
CancelUpdate</i> or <i>CancelBatch</i>.  </td></tr>
<tr>
<td valign="top">adRsnUndoDelete  </td>
<td valign="top">6   </td>
<td valign="top">A pending deletion was canceled by <i>
CancelBatch</i>.  </td></tr>
<tr>
<td valign="top">adRsnResynch  </td>
<td valign="top">8   </td>
<td valign="top">The record was changed by calling the <i>Resync</i>
method.  </td></tr>
</table></p>


<p>Setting the <i>adStatus</i> parameter to adStatusUnwantedEvent will
prevent the event from firing in the future. If you want to cancel the
operation that caused the event, you can set the <i>adStatus</i>
parameter to adStatusCancel in the <i>WillChangeRecord</i> event
handler so long as the parameter was not equal to adStatusCantDeny when
the event fired. Setting the <i>adStatus</i> parameter to
adStatusCancel will cause the function that fired the event to return
an error.</p>

<A NAME="136"><H2><i>WillChangeRecordset</i> and <i>RecordsetChangeComplete</i> Events</H2></A>
<p>These events can fire as a result of changing the Filter property or
by calling <i>Requery</i>, <i>Close</i>, or the different navigation
methods on the Recordset. They use the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillChangeRecordset <i>adReason, adStatus, pRecordset</i>
RecordsetChangeComplete <i>adReason, pError, adStatus, pRecordset</i>
</pre>
</td></tr></table>
</p>

<p>The following is a list of the combined parameters for these
events:</p>

<ul>
<p><li> <i><b>adReason</b></i> This parameter takes
certain values from EventReasonEnum.</li></p>

<p><li> <i><b>pError</b></i> This parameter is a
pointer to the Error object if an error occurred.</li></p>

<p><li> <i><b>adStatus</b></i> This parameter accepts a
value from EventStatusEnum, as shown in the table in &quot;<A HREF="ch04d.htm#131"><i>EndOfRecordset</i> Event</A>.&quot;</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>The <i>adReason</i> parameter can help you understand why the event
fired. Changing the current record in different ways will cause the <i>
adReason</i> parameter to contain different values. (See the following
table.) For example, if your Recordset does not support bookmarks
(server-side forward-only and dynamic cursors), these events will fire
when ADO refreshes the cache. This can happen the first time you
examine the data in the Recordset object; by navigating outside the
currently cached records by calling the <i>Move</i>, <i>MoveNext</i>,
or similar methods; or by setting the Filter property. If you call the
<i>Requery</i> method on a Recordset that doesn't support
bookmarks, these events will fire with an <i>adReason</i> of
adRsnMove.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="3">EventReasonEnum Values Available to <i>WillChangeRecordset</i> and
<i>RecordsetChangeComplete</i>  </th></tr>
<tr>
<th><i>Constant</i>  </th>
<th><i>Value</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top">adRsnRequery  </td>
<td valign="top">7   </td>
<td valign="top">An operation requeried the Recordset.  </td></tr>
<tr>
<td valign="top">adRsnSynch  </td>
<td valign="top">8   </td>
<td valign="top">The query has been resynchronized with the
database.  </td></tr>
<tr>
<td valign="top">adRsnClose  </td>
<td valign="top">9   </td>
<td valign="top"> Calling the <i>Open</i> or <i>Requery</i> method
(whether your Recordset supports bookmarks or not) will cause the <i>
RecordsetChangeComplete</i> event (but not the <i>
WillChangeRecordset</i> event) to fire with this value for the <i>
adReason</i> parameter. </td></tr>
<tr>
<td valign="top">adRsnMove  </td>
<td valign="top">10  </td>
<td valign="top"><i>Requery</i> has been called on a Recordset that
doesn't support bookmarks.  </td></tr>
</table></p>


<p>Setting the <i>adStatus</i> parameter to adStatusUnwantedEvent will
prevent the event from firing in the future. If you want to cancel the
operation that caused the event, you can set the <i>adStatus</i>
parameter to adStatusCancel in the <i>WillChangeRecordset</i> event so
long as the parameter was not equal to adStatusCantDeny when the event
fired. Setting <i>adStatus</i> to adStatusCancel will cause the
function that fired the event to return an error.</p>

<A NAME="137"><h2><i>WillMove</i> and <i>MoveComplete</i> Events</h2></A>
<p>The <i>WillMove</i> and <i>MoveComplete</i> events fire when you
navigate through your Recordset. These events use the following
syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillMove <i>adReason</i>, <i>adStatus</i>, <i>pRecordset</i>
MoveComplete <i>adReason</i>, <i>pError</i>, <i>adStatus</i>, <i>pRecordset</i>
</pre>
</td></tr></table>
</p>

<p>They support the following parameters:</p>

<ul>
<p><li> <i><b>adReason</b></i> This parameter takes
certain values from EventReasonEnum.</li></p>

<p><li> <i><b>pError</b></i> This is a pointer to the
Error object if an error occurred.</li></p>

<p><li> <i><b>adStatus</b></i>This parameter accepts a
value from EventStatusEnum, as shown in the table in &quot;<A HREF="ch04d.htm#131"><i>EndOfRecordset</i> Event</A>&quot;</li></p>

<p><li> <i><b>pRecordset</b></i> This parameter is a
pointer to the Recordset object that fired the event.</li></p>
</ul>



<p>The <i>adReason</i> parameter can help you understand why the event
fired. Changing the current record in different ways will cause the <i>
adReason</i> parameter to contain different values, as explained in the
following table.</p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th colspan="3">EventReasonEnum Values Available to <i>WillMove</i> and <i>MoveComplete</i> </th></tr>
<tr>
<th><i>Constant</i>  </th>
<th><i>Value</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top">adRsnRequery  </td>
<td valign="top">7   </td>
<td valign="top">The <i>Requery</i> method was called. Currently,
calling <i>Requery</i> will cause the <i>WillMove</i> and <i>
MoveComplete</i> events to fire twice, first with an <i>adReason</i> of
adRsnRequery and then with an <i>adReason</i> of adRsnMove.  </td></tr>
<tr>
<td valign="top">adRsnMove   </td>
<td valign="top">10   </td>
<td valign="top">Calling the <i>Move</i> or <i>Requery</i> method, or
moving to another record by setting the AbsolutePage, AbsolutePosition,
Bookmark, Filter, or Index property, will cause these events to fire
with this value in the <i>adReason</i> parameter.  </td></tr>
<tr>
<td valign="top">adRsnMoveFirst   </td>
<td valign="top">12  </td>
<td valign="top">The <i>MoveFirst</i> method was called.  </td></tr>
<tr>
<td valign="top">adRsnMoveNext  </td>
<td valign="top">13   </td>
<td valign="top">The <i>MoveNext</i> method was called.  </td></tr>
<tr>
<td valign="top">adRsnMovePrevious  </td>
<td valign="top">14   </td>
<td valign="top">The <i>MovePrevious</i> method was called.  </td></tr>
<tr>
<td valign="top">adRsnMoveLast  </td>
<td valign="top">15   </td>
<td valign="top">The <i>MoveLast</i> method was called.  </td></tr>
</table></p>


<p>Setting the <i>adStatus</i> parameter to adStatusUnwantedEvent will
prevent the event from firing in the future. If you want to cancel the
operation that caused the event, you can set the <i>adStatus</i>
parameter to adStatusCancel in the <i>WillMove</i> event as long as the
parameter is not equal to adStatusCantDeny when the event is fired.
Setting <i>adStatus</i> to adStatusCancel will cause the function that
fired the event to return an error.</p>

</BODY>
</HTML>






