<html>
<head>
<TITLE>RDS DataControl Object</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch16b.htm">[Previous]</A> <A HREF="ch16d.htm">[Next]</A><P>

<A NAME="405"><H1>RDS DataControl Object</H1></A>

<p>The RDS DataControl object is similar to the data controls included
with Microsoft Visual Basic except that it's not a visible control.
It's simply an object, just like the ADO Connection and Recordset
objects.</p>

<p>The DataControl object's most compelling feature is that it can
greatly simplify the process of querying a database on an internal
network and sending the results, in the form of a Recordset object, to
a client application anywhere on the Internet.</p>

<p>The DataControl object was designed primarily for use on web pages.
Microsoft Internet Explorer supports binding controls to the
DataControl. You can use the DataControl object on a web page or in a
client application written in Visual Basic, Microsoft Visual C++, and
other languages that support COM objects, but you can't bind
controls directly to the DataControl in the forms packages of these
languages.</p>

<A NAME="406"><H2>RDS DataControl Object Properties</H2></A>

<p>Let's take a closer look at the properties exposed by the
DataControl object, as described in the following table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="3">Properties of the RDS DataControl Object</th></tr>

<tr><th><i>Property Name</i></th><th><i>Data Type</i></th><th><i>Description</i></th></tr>

<tr><td valign="top">Connect</td>
<td valign="top">String</td>
<td valign="top">Specifies the string the object uses to connect to a
database.</td></tr>

<tr><td valign="top">DataSpace</td>
<td valign="top">String</td>
<td valign="top">Ignore; exists for backward compatibility. We
won't discuss this property.</td></tr>

<tr><td valign="top">ExecuteOptions</td>
<td valign="top">Integer</td>
<td valign="top">Controls whether the query is run
asynchronously.</td></tr>

<tr><td valign="top">FetchOptions</td>
<td valign="top">Integer</td>
<td valign="top">Controls whether the results of a query are
fetched asynchronously.</td></tr>

<tr><td valign="top">FilterColumn</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the field in the recordset
on which you want to apply a filter.</td></tr>

<tr><td valign="top">FilterCriterion</td>
<td valign="top">String</td>
<td valign="top">Specifies the filter criterion (&lt;, &gt;,
=, and so on).</td></tr>

<tr><td valign="top">FilterValue</td>
<td valign="top">String</td>
<td valign="top">Specifies the value you want to use in the
filter.</td></tr>

<tr><td valign="top">Handler</td>
<td valign="top">String</td>
<td valign="top">Indicates the name of the custom handler to use when
connecting.</td></tr>

<tr><td valign="top">InternetTimeout</td>
<td valign="top">Long</td>
<td valign="top">Specifies the time, in milliseconds, that RDS
should wait before timing out.</td></tr>

<tr><td valign="top">ReadyState</td>
<td valign="top">Long</td>
<td valign="top">Indicates the current state of the query.</td></tr>

<tr><td valign="top">Recordset</td>
<td valign="top">Recordset object</td>
<td valign="top">Contains the results of a query.</td></tr>

<tr><td valign="top">Server</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the IIS server and
communications protocol to use.</td></tr>

<tr><td valign="top">SortColumn</td>
<td valign="top">String</td>
<td valign="top">Specifies the name of the field on which you
choose to sort your data.</td></tr>

<tr><td valign="top">SortDirection</td>
<td valign="top">Boolean</td>
<td valign="top">Specifies the direction to use for the
sort.</td></tr>

<tr><td valign="top">SourceRecordset</td>
<td valign="top">Recordset object</td>
<td valign="top">Allows you to specify the Recordset
whose changes you want to submit to the database.</td></tr>

<tr><td valign="top">SQL</td>
<td valign="top">String</td>
<td valign="top">Specifies the query string you want to submit to your
database.</td></tr>

<tr><td valign="top">URL</td>
<td valign="top">String</td>
<td valign="top">Specifies the URL for an ASP page that will return a
Recordset.</td></tr>
</table></p>

<A NAME="407"><H3>Connect property</H3></A>

<p>The Connect property on the RDS DataControl object is similar to the
ConnectionString property on the ADO Connection object. To use this
property, supply the connection string you want to use to connect to
your database. You can use the Connect property in conjunction with an
RDS handler, which we'll discuss later in the chapter.</p>

<p>Keep in mind that the Connect property tells the RDS server
components how to connect to your database. If you want to describe how
the DataControl will connect to a machine running IIS, use the Server
property.</p>

<A NAME="408"><H3>ExecuteOptions property</H3></A>

<p>The ExecuteOptions property accepts an integer to specify whether
the query should be submitted synchronously or asynchronously. You can
use either value from ADCExecuteOptionEnum, listed in the following
table.</p>

<p><table cellpadding=5 width="95%">
<tr><th colspan="3">ADCExecuteOptionEnum Values</th></tr>

<tr><th><i>Constant</i></th><th><i>Value<th><i>Description</i></th></tr>

<tr><td valign="top">adcExecSync</td>
<td valign="top">1</td>
<td valign="top">Submits a query synchronously</td></tr>

<tr><td valign="top">adcExecAsync</td>
<td valign="top">2</td>
<td valign="top">Default; submits a query asynchronously</td></tr></table></p>

<A NAME="409"><H3>FetchOptions property</H3></A>

<p>The FetchOptions property accepts an integer that controls how the
results of a query are fetched. You can use a value from
ADCFetchOptionEnum, listed in this next table.</p>

<p><table cellpadding=5 width="95%"><tr><th colspan="3">ADCFetchOptionEnum Values</th></tr>

<tr><th><i>Constant</i></th><th><i>Value<th><i>Description</i></th></tr>

<tr><td valign="top">adcFetchUpFront</td>
<td valign="top">1</td>
<td valign="top">Fetches all records in a recordset before
returning control to your code.</td></tr>

<tr><td valign="top">adcFetchBackground</td>
<td valign="top">2</td>
<td valign="top">Fetches the records, beyond the initial set
specified by the Recordset's CacheSize property, in the background. After the
initial set of records has been fetched, control is returned to your
application. If you attempt to access a record that hasn't been
fetched, your code will be blocked until that record is fetched. This
behavior is similar to that of ADO's adAsyncFetch constant in the
ExecuteOptionEnum enumeration.</td></tr>

<tr><td valign="top">adcFetchAsync</td>
<td valign="top">3</td>
<td valign="top">Default; fetches the records, beyond the initial set
specified by the Recordset's CacheSize property, in the background.
After the initial set of records has been fetched, control is returned
to your application. If you attempt to access a record that hasn't
been fetched, your code will not be blocked. This behavior is similar
to that of ADO's adAsyncFetchNonBlocking constant in the
ExecuteOptionEnum enumeration.</td></tr></table></p>

<A NAME="410"><H3>FilterColumn, FilterCriterion, and FilterValue properties</H3></A>

<p>You can use these three properties together to apply a string-based
filter to the results of a query. Each property accepts a string and
can be used as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DataControl.FilterColumn