<html>
<head>
<TITLE>ADO Record Object Functions and Methods</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch06d.htm">[Previous]</A> <A HREF="ch06f.htm">[Next]</A><P>

<A NAME="209"><H1>ADO Record Object Functions and Methods</H1></A>

<p>Now let's examine the functions and methods exposed by the
Record object and shown in the following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="2">Record Object Functions and Methods</th></tr>
<tr><th><i>Function or Method Name</i></th><th><i>Description</i></th></tr>
<tr><td valign="top"><i>Cancel</i></td><td valign="top">Cancels an asynchronous action on the Record object</td></tr>
<tr><td valign="top"><i>Close</i></td><td valign="top">Closes an open Record object</td></tr>
<tr><td valign="top"><i>CopyRecord</i></td><td valign="top">Copies the Record object to another location</td></tr>
<tr><td valign="top"><i>DeleteRecord</i></td><td valign="top">Deletes the Record object</td></tr>
<tr><td valign="top"><i>GetChildren</i></td><td valign="top">Retrieves the child data associated with the Record object</td></tr>
<tr><td valign="top"><i>MoveRecord</i></td><td valign="top">Moves the Record object to another location</td></tr>
<tr><td valign="top"><i>Open</i></td><td valign="top">Opens an existing Record object or creates a new Record object</td></tr>
</table>

<A NAME="210"><h2><i>Cancel</i> Method</h2></A>
<p>Use the <i>Cancel</i> method to cancel a pending asynchronous call
on the Record object. This method can cancel calls to the <i>Open</i>,
<i>CopyRecord</i>, <i>DeleteRecord</i>, and <i>MoveRecord</i> methods
on the Record object, which can all be called asynchronously if the OLE
DB provider supports asynchronous operations. The <i>Cancel</i> method
takes no parameters.</p>

<A NAME="211"><h2><i>Close</i> Method</h2></A>
<p>The <i>Close</i> method closes an open Record object. Like the <i>
Close</i> method on a Recordset object, a Record object's <i>
Close</i> method does not remove the object from memory. The <i>
Close</i> method takes no parameters.</p>

<A NAME="212"><h2><i>CopyRecord</i> Method</h2></A>
<p>The <i>CopyRecord</i> method copies a Record and its contents to
another location. This method accepts six parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Record.</i>CopyRecord <i>Source</i>, <i>Destination</i>, <i>UserName</i>, <i>Password</i>, _
 <i>                 Options</i>, <i>Async</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Source</i> parameter is optional and accepts a string to
denote the Record you want to copy. If you omit this parameter, the
data referenced by the current Record object will be copied. The <i>
Destination</i> parameter is marked as optional in the ADO Help files,
but it's actually required. This parameter accepts a string value
to specify the location where you want to create a new copy of the
Record object.</p>

<p>The <i>UserName</i> and <i>Password</i> parameters are optional and
can be used to authorize the user to copy the Record to the specified
destination. You can use the optional <i>Options</i> parameter to
specify which of the attributes available in CopyRecordOptionsEnum (and
listed in the following table) you want. The <i>Options</i> parameter
can accept the sum of multiple values from CopyRecordOptionsEnum.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">CopyRecordOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adCopyUnspecified</td><td valign="top">-1</td><td valign="top">This is the default.</td></tr>
<tr><td valign="top">adCopyOverWrite</td><td valign="top">1</td><td valign="top">Overwrites whatever data is currently stored in the location specified by the Destination parameter. The  CopyRecord method will fail if you attempt to copy over existing data without specifying this option.</td></tr>
<tr><td valign="top">adCopyNonRecursive</td><td valign="top">2</td><td valign="top">Copies the Record object but none of the child data associated with it. For example, CopyRecord copies the directory but not the files and subdirectories contained in it.</td></tr>
<tr><td valign="top">adCopyAllowEmulation</td><td valign="top">4</td><td valign="top">Requests that the provider attempt to simulate the copy (using download, upload, and delete operations) if the attempt to copy the Record object fails, because the destination URL is on a different server or serviced by a different provider than the source. Note that specifying this option can cause increased latency and/or data loss because of different provider capabilities when moving resources between providers.</td></tr>
</table>

<p>The optional <i>Async</i> parameter accepts a Boolean value that
indicates whether you want to call the <i>CopyRecord</i> method
asynchronously. By default, this parameter is set to False. (Be aware
that not all OLE DB providers that support the Record object allow
asynchronous operations on the Record object.)</p>

<A NAME="213"><h2><i>DeleteRecord</i> Method</h2></A>
<p>Use the <i>DeleteRecord</i> method to delete the Record and its
contents. The <i>DeleteRecord</i> method accepts two optional
parameters, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Record.</i>DeleteRecord <i>Source</i>, <i>Async</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Source</i> parameter accepts a string to denote the Record
you want to delete. If you omit this parameter, the data currently
referenced by the Record object will be deleted. The <i>Async</i>
parameter accepts a Boolean value and indicates whether you want to
call the <i>DeleteRecord</i> method asynchronously. By default, this
parameter is set to False. (Note that not all OLE DB providers that
support the Record object allow asynchronous operations on the Record
object.)</p>

<A NAME="214"><h2><i>GetChildren</i> Method</h2></A>
<p>The <i>GetChildren</i> method returns a Recordset object, as
shown:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set <i>Recordset</i> = <i>Record</i>.GetChildren
</pre>
</td></tr></table>
</p>

<p>The returned Recordset object contains the child data associated
with the current Record. You can call this method on Record objects
that have a RecordType property value of adCollectionRecord. Depending
on the functionality that your OLE DB provider supports, you might be
able to call this method on a Record object whose RecordType is
adStructDoc.</p>

<A NAME="215"><h2><i>MoveRecord</i> Method</h2></A>
<p>The <i>MoveRecord</i> method copies a Record object and its contents
to another location, and then deletes it from its current location.
This method accepts the following six parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Record.</i>MoveRecord <i>Source</i>, <i>Destination</i>, <i>UserName</i>, <i>Password</i>, _
 <i>                 Options</i>, <i>Async</i>
</pre>
</td></tr></table>
</p>

<p>All the parameters behave the same as the parameters for the <i>
CopyRecord</i> method, with the exception of the <i>Options</i>
parameter. Rather than taking a value from CopyRecordOptionsEnum, the
<i>Options</i> parameter for the <i>MoveRecord</i> method accepts
values from MoveRecordOptionsEnum, shown in the next table. The <i>
Options</i> parameter can accept the sum of multiple values from
MoveRecordOptionsEnum.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">MoveRecordOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adMoveUnspecified</td><td valign="top">-1</td><td valign="top">This is the default.</td></tr>
<tr><td valign="top">adMoveOverWrite</td><td valign="top">1</td><td valign="top">Overwrites whatever data is currently stored in the location specified by the Destination parameter. The MoveRecord method will fail if you attempt to move data onto existing data without specifying this option.</td></tr>
<tr><td valign="top">adMoveDontUpdateLinks</td><td valign="top">2</td><td valign="top">Modifies the default behavior of the MoveRecord method by not updating the hypertext links of the source Record object. The default behavior depends on the capabilities of the provider. The move operation updates links if the provider offers this capability. If the provider cannot fix links or if this value isn't specified, the move succeeds even when links have not been fixed.</td></tr>
<tr><td valign="top">adMoveAllowEmulation</td><td valign="top">4</td><td valign="top">Requests that the provider attempt to simulate the move (using download, upload, and delete operations) if the attempt to move the Record object fails because the destination URL is on a different server or serviced by a different provider than the source. Note that specifying this option can cause increased latency and/or data loss because of different provider capabilities when moving resources between providers.</td></tr>
</table>

<A NAME="216"><h2><i>Open</i> Method</h2></A>
<p>Use the <i>Open</i> method to open an existing Record or create a
new one. The <i>Open</i> method has seven parameters, all of which are
optional:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Record.</i>Open <i>Source</i>, <i>ActiveConnection</i>, <i>Mode</i>, <i>CreateOptions</i>, _
            <i>Options</i>, <i>UserName</i>, <i>Password</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Source</i> parameter accepts a string or a Recordset and
indicates the location of the data in your data store. You can use this
parameter to override the current setting of the Record object's
Source property. If you omit this parameter, ADO will use the current
setting for the Source property.</p>

<p>The <i>ActiveConnection</i> parameter accepts a connection string or
a Connection object to indicate the location of your data store.
Omitting this parameter will cause ADO to use the current value of the
Record object's ActiveConnection property to connect to your data
store. Using this parameter overrides the current setting for the
ActiveConnection property on the Record object.</p>

<p>The <i>Mode</i> parameter accepts values from ConnectModeEnum and
corresponds to the Record object's Mode property to specify the
access mode used to communicate with your data store. The <i>
CreateOptions</i> parameter accepts values available in
RecordCreateOptionsEnum, listed in the following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">RecordCreateOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adFailIfNotExists</td><td valign="top">-1</td><td valign="top">Default; results in a run-time error if the value in the Source parameter points to a nonexistent node</td></tr>
<tr><td valign="top">adCreateNonCollection</td><td valign="top">0</td><td valign="top">Creates a new Record object with a RecordType value of adSimpleRecord</td></tr>
<tr><td valign="top">adCreateCollection</td><td valign="top">8192</td><td valign="top">Creates a new Record object with a RecordType value of adCollectionRecord</td></tr>
<tr><td valign="top">adOpenIfExists</td><td valign="top">33554432</td><td valign="top">Specifies that if the Record object at the location used in the Source parameter exists in your data store, the Open method will open that Record object rather than create a new one</td></tr>
<tr><td valign="top">adCreateOverwrite</td><td valign="top">67108864</td><td valign="top">Specifies that if the Record object at the location used in the Source parameter exists in your data store, the Open method will overwrite that data with a new Record</td></tr>
<tr><td valign="top">adCreateStructDoc</td><td valign="top" nowrap>-2147483648</td><td valign="top">Creates a new Record object with a RecordType value of adStructDoc instead of opening an existing Record</td></tr>
</table>

<p>You can use the <i>Options</i> parameter to supply a combination of
values from RecordOpenOptionsEnum for further options upon opening your
Record, as this next table shows.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">RecordOpenOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adOpenRecordUnspecified</td><td valign="top">-1</td><td valign="top">This is the default.</td></tr>
<tr><td valign="top">adOpenAsync</td><td valign="top">4096</td><td valign="top">Indicates that you want to open the Record object in asynchronous mode.</td></tr>
<tr><td valign="top">adDelayFetchStream</td><td valign="top">16384</td><td valign="top">Specifies that the default stream associated with the Record object need not be fetched initially.</td></tr>
<tr><td valign="top">adDelayFetchFields</td><td valign="top">32768</td><td valign="top">Specifies not to fetch the fields associated with the Record object initially, but to fetch each field at the first attempt to access that field.</td></tr>
<tr><td valign="top">adOpenSource</td><td valign="top">8388608</td><td valign="top">Indicates that if the value in the Source parameter points to a node containing an executable script (such as an .asp script file), a Record containing the source is opened rather than the executed contents of the script. Only valid with noncollection Record objects.</td></tr>
</table>

<p>You can specify the <i>UserName</i> and <i>Password</i> parameters
to authorize the user to open or create the Record.</p>

</BODY>
</HTML>






