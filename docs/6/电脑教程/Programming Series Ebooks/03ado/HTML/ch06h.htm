<html>
<head>
<TITLE>ADO Stream Object Functions and Methods</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch06g.htm">[Previous]</A> <A HREF="ch06i.htm">[Next]</A><P>

<A NAME="230"><H1>ADO Stream Object Functions and Methods</H1></A>

<p>Let's examine the functions and methods available on the Stream
object and shown in the following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="2">Stream Object Functions and Methods</th></tr>
<tr><th><i>Function or Method Name</i></th><th><i>Description</i></th></tr>
<tr><td valign="top"><i>Cancel</i></td><td valign="top">Cancels a pending asynchronous call to a Stream object</td></tr>
<tr><td valign="top"><i>Close</i></td><td valign="top">Closes an open Stream object</td></tr>
<tr><td valign="top"><i>CopyTo</i></td><td valign="top">Copies data from the Stream object to another Stream object</td></tr>
<tr><td valign="top"><i>Flush</i></td><td valign="top">Flushes the contents stored in the Stream object's buffer</td></tr>
<tr><td valign="top"><i>LoadFromFile</i></td><td valign="top">Loads the contents of a file into the stream</td></tr>
<tr><td valign="top"><i>Open</i></td><td valign="top">Opens the Stream object</td></tr>
<tr><td valign="top"><i>Read</i></td><td valign="top">Reads binary data from the stream</td></tr>
<tr><td valign="top"><i>ReadText</i></td><td valign="top">Reads text data from the stream</td></tr>
<tr><td valign="top"><i>SaveToFile</i></td><td valign="top">Persists data from the Stream object to a file</td></tr>
<tr><td valign="top"><i>SetEOS</i></td><td valign="top">Sets the current position as the end of the Stream object</td></tr>
<tr><td valign="top"><i>SkipLine</i></td><td valign="top">Moves to the beginning of the next line of data in a text stream</td></tr>
<tr><td valign="top"><i>Write</i></td><td valign="top">Appends binary data to the stream</td></tr>
<tr><td valign="top"><i>WriteText</i></td><td valign="top">Appends text data to the stream</td></tr>
</table>

<A NAME="231"><h2><i>Cancel</i> Method</h2></A>
<p>You can call the <i>Cancel</i> method to terminate a pending
asynchronous call to the Stream object's <i>Open</i> method. This
method takes no parameters.</p>

<A NAME="232"><h2><i>Close</i> Method</h2></A>
<p>The <i>Close</i> method closes a Stream object and releases the data
associated with that Stream object. This method takes no
parameters.</p>

<A NAME="233"><h2><i>CopyTo</i> Method</h2></A>
<p>You can use the <i>CopyTo</i> method to move data from one Stream
object to another. The <i>CopyTo</i> method takes two parameters as
shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.CopyTo <i>DestStream</i>, <i>NumChars</i>
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>DestStream</i>, is required and accepts an
open Stream object. The second parameter, <i>NumChars</i>, is optional
and accepts a long integer specifying the number of characters or bytes
(starting at the current position) to copy to <i>DestStream</i>. The
default value for this parameter is -1, which specifies that all data,
from the current position to EOS, should be copied. If you specify a
value that's larger than the remaining number of characters or
bytes in the source Stream, this method will copy only the remaining
characters or bytes and no error will occur.</p>

<p>If you're using a Stream of type adTypeBinary, the <i>
NumChars</i> parameter actually specifies the number of characters to
copy, regardless of whether you're using Unicode or ANSI strings.
After ADO copies the data from the source Stream to the destination
Stream, the current position in the source Stream will be the byte or
character that follows the last byte or character copied.</p>

<A NAME="234"><h2><i>Flush</i> Method</h2></A>
<p>Call the <i>Flush</i> method to send the data buffered in the Stream
object to that object's underlying source to ensure the contents
have been written. You should not need to call <i>Flush</i> prior to
closing your Stream because calling the <i>Close</i> method will
implicitly flush the buffered data. If you need to write the data
stored in the buffer while keeping the Stream object open, that's a
good time to call the <i>Flush</i> method. The <i>Flush</i> method
takes no parameters.</p>

<A NAME="235"><h2><i>LoadFromFile</i> Method</h2></A>
<p>If you want to load the contents of a file into a Stream object,
call the <i>LoadFromFile</i> method. This method takes a single string
parameter that contains the name and location of the file you want to
load:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.LoadFromFile <i>FileName</i>
</pre>
</td></tr></table>
</p>

<p>The <i>FileName</i> parameter can contain any valid pathname and
filename in Universal Naming Convention (UNC) format. If the specified
file doesn't exist, a trappable error occurs.</p>

<p>When you use the <i>LoadFromFile</i> method, the contents of the
file overwrite the contents of the Stream. When the <i>LoadFromFile</i>
method completes, the Stream object's Position property will be set
to 0&#8212;the beginning of the Stream.</p>

<A NAME="236"><h2><i>Open</i> Method</h2></A>
<p>The <i>Open</i> method opens a Stream object from a Record object or
a URL. The <i>Open</i> method accepts five optional parameters, as
shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.Open <i>Source</i>, <i>Mode</i>, <i>OpenOptions</i>, <i>UserName</i>, <i>Password</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Source</i> parameter specifies the source of the data to
retrieve into the Stream object. This parameter accepts an open Record
object or a string that contains a valid URL. You can also specify an
empty string for the <i>Source</i> parameter, to open an empty Stream
object. If you omit this parameter, the value of the Source property
will be used.</p>

<p>The <i>Mode</i> parameter accepts a value from ConnectModeEnum and
corresponds to the Stream object's Mode property. If you omit this parameter,
the value of the Mode property will be used. The <i>OpenOptions</i>
parameter accepts values from StreamOpenOptionsEnum, shown in the
following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">StreamOpenOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adOpenStreamUnspecified</td><td valign="top">-1</td><td valign="top">Default; opens the Stream object with default options.</td></tr>
<tr><td valign="top">adOpenStreamAsync</td><td valign="top">1</td><td valign="top">Opens the Stream object in asynchronous mode.</td></tr>
<tr><td valign="top">adOpenStreamFromRecord</td><td valign="top">4</td><td valign="top">Specifies that the Source parameter contains an open Record object. The default stream associated with that node is opened.</td></tr>
</table>

<p>The <i>UserName</i> and <i>Password</i> parameters contain strings
that authorize the user to open the Stream.</p>

<A NAME="237"><h2><i>Read</i> Method</h2></A>
<p>Use the <i>Read</i> method to retrieve binary data from the Stream
object. This method accepts a long integer and returns a Variant:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Variant</i> = <i>Stream</i>.Read <i>NumBytes</i>
</pre>
</td></tr></table>
</p>

<p>The <i>NumBytes</i> parameter specifies the number of bytes to
return, starting with the current position in the Stream. If you
specify a number that's larger than the number of bytes remaining
in the Stream, the <i>Read</i> method will return only the remaining
data; no error will occur. If you omit this parameter, this method will
return all the data from the current position through the end of the
Stream. <i>NumBytes</i> can also accept the value adReadAll from
StreamReadEnum, the values from which are shown in the following
table.</p>


<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">StreamReadEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adReadAll</td><td valign="top">-1</td><td valign="top">Default; reads all remaining characters in the Stream object</td></tr>
<tr><td valign="top">adReadLine</td><td valign="top">-2</td><td valign="top">Reads until the end of the current line</td></tr>
</table>

<A NAME="238"><h2><i>ReadText</i> Method</h2></A>
<p>The <i>ReadText</i> method is similar to the <i>Read</i> method,
except that it retrieves text data rather than binary data from the
Stream object. <i>ReadText</i> takes a single parameter, <i>
NumChars</i>, and is shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>String</i> = <i>Stream</i>.ReadText <i>NumChars</i>
</pre>
</td></tr></table>
</p>

<p>In addition to a long integer value, <i>NumChars</i> can accept
either of the values in StreamReadEnum.</p>

<p>Whether the Stream object contains single-byte characters (such as
ANSI) or multibyte characters (such as Unicode), <i>ReadText</i> will
return the number of characters specified rather than the number of
bytes. The Stream object's Charset property specifies the type of
character data stored in the Stream.</p>

<A NAME="239"><h2><i>SaveToFile</i> Method</h2></A>
<p>To save the contents of the Stream to a file, call the <i>
SaveToFile</i> method. This method takes two parameters as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.SaveToFile <i>FileName</i>, <i>SaveOptions</i>
</pre>
</td></tr></table>
</p>

<p>The <i>FileName</i> parameter is required and accepts a fully
qualified name for the file to create. This parameter is a string data
type and accepts UNC paths. The <i>SaveOptions</i> parameter is
optional and accepts one or both of the values from SaveOptionsEnum,
shown in the following table.</p>


<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">SaveOptionsEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adSaveCreateNotExist</td><td valign="top">1</td><td valign="top">Default; creates a new file. Raises a trappable error if the file already exists.</td></tr>
<tr><td valign="top">adSaveCreateOverWrite</td><td valign="top">2</td><td valign="top">Overwrites the existing file if it exists.</td></tr>
</table>

<p>When the <i>SaveToFile</i> method completes, the Stream object's
current position will be at EOS.</p>

<A NAME="240"><h2><i>SetEOS</i> Method</h2></A>
<p><i>SetEOS</i> designates the current position as the end of the
stream of data. All data from that position onward will be lost. This
method takes no parameters.</p>

<A NAME="241"><h2><i>SkipLine</i> Method</h2></A>
<p>The <i>SkipLine</i> method skips to the beginning of the next line
of text in your Stream. If your text data has no more remaining line
separators, the position will be set to the end of the Stream&#8212;the
Stream object's EOS property will return True and its Position
property will return the same value as its Size property.</p>

<A NAME="242"><h2><i>Write</i> Method</h2></A>
<p>Use the <i>Write</i> method to append binary data to your Stream.
The <i>Write</i> method accepts a single parameter, shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.Write <i>Buffer</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Buffer</i> parameter is required and accepts a byte array
containing the data to append to the Stream.</p>

<p>After the <i>Write</i> method completes, the current position of the
Stream will be the byte following the data appended to the Stream. If
you aren't positioned at the end of the Stream prior to calling <i>
Write</i>, you'll overwrite data in the Stream with the data in the
<i>Buffer</i> parameter.</p>

<A NAME="243"><h2><i>WriteText</i> Method</h2></A>
<p>Use the <i>WriteText</i> method to append text data to your Stream.
The <i>WriteText</i> method accepts two parameters, shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
<i>Stream</i>.WriteText <i>Data</i>, <i>Options</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Data</i> parameter is required and accepts a string
containing the data to append to the Stream. The <i>Options</i>
parameter is optional and accepts one of the two values in
StreamWriteEnum, which the following table describes.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">StreamWriteEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adWriteChar</td><td valign="top">0</td><td valign="top">Default; appends only the string in the <i>Data</i> parameter to the Stream object</td></tr>
<tr><td valign="top">adWriteLine</td><td valign="top">1</td><td valign="top">Appends the string in the <i>Data</i> parameter, as well as the line separator specified by the LineSeparator property, to the Stream object</td></tr>
</table>

<p>After the <i>WriteText</i> method completes, the current position of
the Stream will be the character following the data appended to the
Stream. If you aren't positioned at the end of the Stream prior to
calling <i>WriteText</i>, you'll overwrite the existing data in the
Stream with the data in the <i>Data</i> parameter.</p>

</BODY>
</HTML>






