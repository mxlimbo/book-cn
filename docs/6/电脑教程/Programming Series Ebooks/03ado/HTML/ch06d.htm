<html>
<head>
<TITLE>ADO Record Object Properties and Collections</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch06c.htm">[Previous]</A> <A HREF="ch06e.htm">[Next]</A><P>

<A NAME="200"><H1>ADO Record Object Properties and Collections</H1></A>

<p>Let's look at the properties and collections exposed by the
Record object and shown in the following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">Record Object Properties and Collections</th></tr>
<tr><th><i>Property or Collection Name</i></th><th><i>Data Type</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">ActiveConnection</td><td valign="top">Variant</td><td valign="top">Specifies the Connection object used to retrieve the data for the Record object</td></tr>
<tr><td valign="top">Fields</td><td valign="top">Collection of Field objects</td><td valign="top">A pointer to the collection of Field objects that contain data in the Record object</td></tr>
<tr><td valign="top">Mode</td><td valign="top">ConnectModeEnum</td><td valign="top">Specifies the permissions for modification of the Record object</td></tr>
<tr><td valign="top">ParentURL</td><td valign="top">String</td><td valign="top">Indicates the parent URL for the Record object</td></tr>
<tr><td valign="top">Properties</td><td valign="top">Collection of Property objects</td><td valign="top">Collection of dynamic properties for the Record object</td></tr>
<tr><td valign="top">RecordType</td><td valign="top">RecordTypeEnum</td><td valign="top">Indicates the type of the Record object</td></tr>
<tr><td valign="top">Source</td><td valign="top">Variant</td><td valign="top">Specifies the source of the data contained in the Record object</td></tr>
<tr><td valign="top">State</td><td valign="top">ObjectStateEnum</td><td valign="top">Indicates the state of the Record object</td></tr>
</table>

<A NAME="201"><H2>ActiveConnection Property</H2></A>

<p>The ActiveConnection property on the Record object contains the
connection information that ADO will use to connect to your data store.
You can set the ActiveConnection property to a valid connection string
or to an open Connection object. The ActiveConnection property will
return a Connection object.</p>

<p>Use the Record object's ActiveConnection property in the same
way you'd use the ActiveConnection property on the Recordset and
Command objects. (See Chapters <a href="ch04a.htm">4</a> and <a href="ch05a.htm">5</a>, respectively.)</p>

<A NAME="202"><H2>Fields Collection</H2></A>

<p>Like the Recordset object, the Record object exposes a Fields
collection. As mentioned earlier in this chapter, when you examine a
record in a Record object its Fields collection might contain more
entries than if you examine the same record in a Recordset object. For
more information on the Fields collection, see <A HREF="ch04a.htm">Chapter 4</A>.</p>

<A NAME="203"><H2>Mode Property</H2></A>

<p>The Mode property indicates the permissions for modification of the
Record object. This property contains a long value that represents a
bitmask of values in ConnectModeEnum, as the following table
describes.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">ConnectModeEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adModeUnknown</td><td valign="top">0</td><td valign="top">Uses the default permissions to your Record object</td></tr>
<tr><td valign="top">adModeRead</td><td valign="top">1</td><td valign="top">Default; opens the Record object with read-only permissions</td></tr>
<tr><td valign="top">adModeWrite</td><td valign="top">2</td><td valign="top">Opens the Record object with write-only permissions</td></tr>
<tr><td valign="top">adModeReadWrite</td><td valign="top">3</td><td valign="top">Opens the Record object using read/write permissions</td></tr>
<tr><td valign="top">adModeShareDenyRead</td><td valign="top">4</td><td valign="top">Prevents other users from reading the contents of your Record object while it's open</td></tr>
<tr><td valign="top">adModeShareDenyWrite</td><td valign="top">8</td><td valign="top">Prevents other users from modifying your Record object while it's open</td></tr>
<tr><td valign="top">adModeShareExclusive</td><td valign="top">12</td><td valign="top">Prevents other users from connecting to your Record object while it's open</td></tr>
<tr><td valign="top">adModeShareDenyNone</td><td valign="top">16</td><td valign="top">Allows other users to open the same Record object with read and write permissions but prevents other users from using adModeShareDenyWrite or adModeShareExclusive</td></tr>
</table>

<p>You can set this property only on a closed Record object; the value
of the Mode property is read-only when the Record is open. Although the
Record's Mode property accepts the same values as the Connection
object's Mode property, in functionality it closely resembles the
Recordset object's LockType property.</p>

<A NAME="204"><H2>ParentURL Property</H2></A>

<p>The ParentURL property is read-only and contains a string indicating
the location of the Record object's parent Record. The
documentation for ParentURL states that this property will be set to
Null if the Record represents the root in a hierarchy or if the type of
data stored in the Record does not support URLs (such as a record in a
Recordset). While testing with the beta versions of ADO, I found that
the root Record's ParentURL property returns the URL for that
Record, rather than Null or an empty string.</p>

<A NAME="205"><H2>Properties Collection</H2></A>

<p>Like most ADO objects, the Record object exposes a Properties
collection whose contents depend on your choice of OLE DB providers. In
the samples I've written to test the Record object's Properties
collection using the OLE DB Provider For Internet Publishing, the
Properties collection is always empty. However, as more OLE DB
providers support the Record object, this collection is where those
providers will expose provider-specific attributes for the Record
object.</p>

<A NAME="206"><H2>RecordType Property</H2></A>

<p>The RecordType property indicates the type of data stored in the
Record object. It's read-only and returns one of the values from
RecordTypeEnum listed in the following table.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">RecordTypeEnum Values</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adSimpleRecord</td><td valign="top">0</td><td valign="top">Indicates a simple record (does not contain child nodes)</td></tr>
<tr><td valign="top">adCollectionRecord</td><td valign="top">1</td><td valign="top">Indicates a collection record (contains child nodes)</td></tr>
<tr><td valign="top">adStructDoc</td><td valign="top">2</td><td valign="top">Indicates a special kind of collection record that represents COM structured documents</td></tr>
</table>

<A NAME="207"><H2>Source Property</H2></A>

<p>Like the Source property on the Recordset object, this property
stores a Variant that directs ADO to the location where the
Record's data is stored. While the Record object is closed, this
property is read/write. While the Record object is open, this property
is read-only.</p>

<p>You can set the Source property to a string or to a Record object.
The Source property corresponds to the <i>Source</i> parameter on the
Record's <i>Open</i> method. For more information, see the <i>
Open</i> method documented later in this chapter in the section &quot;<a href="ch06e.htm#216"><i>Open</i> Method</a>.&quot;</p>

<A NAME="208"><H2>State Property</H2></A>

<p>The Record object's State property indicates the current state
of the Record. Like the State property on the Recordset object, this
property returns a long value that represents a bitmask of values
available in ObjectStateEnum. The following table lists these
values.</p>

<table cellpadding="5" border="0" width="95%">
<tr><th colspan="3">ObjectStateEnum Values Applicable to the Record Object</th></tr>
<tr><th><i>Constant</i></th><th><i>Value</i></th><th><i>Description</i></th></tr>
<tr><td valign="top">adStateClosed</td><td valign="top">0</td><td valign="top">The Record object is closed.</td></tr>
<tr><td valign="top">adStateOpen</td><td valign="top">1</td><td valign="top">The Record object is open.</td></tr>
<tr><td valign="top">adStateExecuting</td><td valign="top">4</td><td valign="top">The Record object is being opened asynchronously.</td></tr>
</table>

<p>The OLE DB Provider For Internet Publishing does not support opening
Record objects asynchronously. If you use a provider that does support
asynchronous operations with the Record object, be sure to perform
bitwise operations rather than checking for specific values when
testing the State property. For example, if the Record object is being
opened asynchronously, the State property will return a value of 5
(adStateOpen + adStateExecuting).</p>

<p><div class="note"><blockquote><b>NOTE</b> <hr>ObjectStateEnum also contains the value
adStateFetching, but this value currently is not applicable to the
State property of the Record object.</blockquote></div>
</p>

</BODY>
</HTML>






