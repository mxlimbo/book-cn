<html>
<head>
<TITLE>The Recordset as a Data Container</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch09a.htm">[Previous]</A> <A HREF="ch09c.htm">[Next]</A><P>

<A NAME="277"><H1>The Recordset as a Data Container</H1></A>

<p>One of the simplest features of the ADO Cursor Engine is its ability
to store the results of your queries. Of course you can also use a
server-side cursor to store query results, but in most cases, as we
discussed in <A HREF="ch07a.htm">Chapter 7</A>, you want to avoid server-side cursors.</p>

<p>Using a client-side Recordset object to work with the results of
your query can save a great deal of coding. You don't have to move
the data from the recordset to your own data structure. You also have a
wealth of rapid application development (RAD) features available to you
when you use the Recordset object. Bound controls are among the more
obvious and traditional RAD features.</p>

<A NAME="278"><H2>Bound Controls</H2></A>

<p>Traditionally, bound controls in Microsoft Visual Basic have gotten
a bad rap. But I'm much more impressed with the bound controls
included with Visual Basic 6 than I was with previous versions of the
controls. With version 6, you can bind controls more easily and
dynamically at run time. Using bound controls with ADO Recordset
objects doesn't incur as much overhead&#8212;such as network
activity and additional database connections&#8212;as using them with
the Recordset objects' DAO (Data Access Objects) counterparts.
Visual Basic 6 makes it possible to format your data (including
currency and Null data) with the DataFormat property on most bound
controls. As you can see, bound controls are a more attractive option
than they were in the past.</p>

<p>However, by using bound controls you still give up a great deal of
flexibility. Displaying data in a bound grid is simple, but interacting
with that data the way you want can pose a challenge. In many cases,
you'll probably want more control over data manipulation in your
application than bound controls offer. For example, when a user enters
a product number into an order, you might want to perform a lookup and
display the name, price, and availability for that product as soon as
the user leaves the product number field. Sometimes you can implement
this type of functionality with bound controls; sometimes you
can't.</p>

<p>Bound controls often have limitations and bugs that you don't
discover until you're halfway through the process of building your
application. I've spoken with quite a few Visual Basic developers
who had to give up using the DataEnvironment object in their
applications because binding controls to the DataEnvironment became
more trouble than it was worth.</p>

<p>I use the DataEnvironment object occasionally, but I avoid binding
controls to it. The DataEnvironment doesn't properly broadcast
events to controls. Controls are not notified of critical events such
as when you're requerying your Recordset or navigating through a
hierarchical Recordset. As a result, you would have to write so much
code to repeatedly bind your controls to the DataEnvironment that you
might decide to forego using the DataEnvironment in future
projects.</p>

<p>Interacting with bound controls is hardly groundbreaking, however.
Both DAO and RDO (Remote Data Objects) can do that, but with an ADO
client-side Recordset you can do so much more.</p>

<A NAME="279"><H2>Filtering and Searching</H2></A>

<p>Have you ever wanted to display only certain records in your
Recordset based on a particular criterion? For example, suppose you
retrieve all your customers but, based on user input, want to display
only the customers located in a particular region.</p>

<p>You could examine the customer data on your own and decide which
data to display. You could also submit a new query to your database to
retrieve only the customers in that region. ADO offers another
option&#8212;you can simply apply a filter to your Recordset, like
this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
rsCustomers.Filter