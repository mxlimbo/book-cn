<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Creating a BHO</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch12b.htm">[Previous]</A> <A HREF="ch12d.htm">[Next]</A><P>

<A NAME="278"><H1>Creating a BHO</H1></A>

<p>To create a Browser Helper Object, you can use any development language 
that supports COM. In this chapter, we'll use Microsoft Visual C++ and ATL to create 
a Browser Helper Object named IEHelper.</p>

<A NAME="279"><H2>IEHelper</H2></A>

<p>When loaded, IEHelper creates a window that displays all the events that are 
fired by Internet Explorer. IEHelper also provides an edit box into which you can enter 
a URL. After typing in the URL, you can click the Navigate button to go to the URL 
you've just entered. You can also click the Go Back and Go Forward buttons to move 
backward and forward in the navigation history. (See Figure 12-2.)</p>

<p>
<A HREF="javascript:fullSize('F12ii02x.htm')"> <img src="images/F12ii02.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 12-2.</B> <I>IEHelper.</I><!-- /caption -->
</p>

<p>To create a BHO, first create a new project by using Visual C++'s ATL 
COM AppWizard, which you can access from the New dialog box shown in Figure 12-3.</p>

<p>
<A HREF="javascript:fullSize('F12ii03x.htm')"> <img src="images/F12ii03.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 12-3.</B> <I>New dialog box, from which you can access the ATL COM AppWizard.</I><!-- /caption -->
</p>

<p>A Browser Helper Object must be a DLL because it is loaded into the 
same process space as Internet Explorer. So in step 1 of the ATL COM AppWizard, 
shown in Figure 12-4, choose Dynamic Link Library (DLL) as the server type, and then 
click the Finish button. Click OK in the New<I> 
</I>Project Information dialog box that appears.</p>

<p>
<A HREF="javascript:fullSize('F12ii04x.htm')"> <img src="images/F12ii04.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 12-4.</B> <I>Choosing the server type.</I><!-- /caption -->
</p>

<p>Next we'll create a simple ATL object. In the ClassView pane of your 
project, right-click your project name and choose New ATL Object. Then click the 
Simple Object icon, shown in Figure 12-5, and click the Next button to open the ATL 
Object Wizard Properties dialog box.</p>

<p>On the Names tab (shown in Figure 12-6), enter 
<I>IEHlprObj</I> in the Short Name field. Retain the defaults for all the other fields, and click OK.</p>

<p>We won't go into how to create the window that displays Internet 
Explorer's events and provides navigation buttons. The code to perform these actions is 
standard Win32 code and can be seen by loading the IEHelper example from the 
companion CD in the folder \Samples\Chap12\IEHelper. Now let's concentrate on how to 
implement the <I>IObjectWithSite </I>interface in a Browser Helper Object.</p>

<p>
<A HREF="javascript:fullSize('F12ii05x.htm')"> <img src="images/F12ii05.JPG" width=404 height=251 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 12-5.</B> <I>Creating a simple ATL object.</I><!-- /caption -->
</p>

<p>
<A HREF="javascript:fullSize('F12ii06x.htm')"> <img src="images/F12ii06.JPG" width=278 height=184 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 12-6.</B> <I>ATL Object Wizard Properties dialog box.</I><!-- /caption -->
</p>

<A NAME="280"><H2>Implementing <I>IObjectWithSite</I></H2></A>
<p>After creating the IEHlprObj simple ATL object, we must change the default 
implementation of the <I>CIEHlprObj</I> class to implement the 
<I>IObjectWithSite</I> interface. It is through the 
<I>SetSite </I>method of the<I> 
IObjectWithSite</I> interface that we receive a 
pointer to the <I>IWebBrowser2 </I>interface of Internet Explorer. Without this interface, you will 
not be able to communicate with or control Internet Explorer. In fact, if you don't 
implement this interface, Internet Explorer will not even load your Browser Helper Object.</p>

<p>Implementing the <I>IObjectWithSite </I>interface in ATL is easy. Just change the 
declaration of <I>CIEHlprObj</I> so that 
<I>CIEHlprObj</I> will inherit from 
<I>IObjectWithSiteImpl</I>,<I> </I>and add 
<I>IObjectWithSite</I> to your COM map by using the 
COM_INTERFACE_ENTRY_IMPL<I> </I>macro. The code below shows the changed declaration of the 
<I>CIEHlprObj </I>class and its COM map.</p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>/////////////////////////////////////////////////////////////////////
// CIEHlprObj
class ATL_NO_VTABLE CIEHlprObj : 
   public CComObjectRootEx&lt;CComSingleThreadModel&gt;,
   public CComCoClass&lt;CIEHlprObj, &amp;CLSID_IEHlprObj&gt;,
   public IObjectWithSiteImpl&lt;CIEHlprObj&gt;,
   public IDispatchImpl&lt;IIEHlprObj,
                        &amp;IID_IIEHlprObj,
                        &amp;LIBID_IEHELPERLib&gt;
{
   <img src="images/grayvellip.JPG" width=3 height=13 alt="" border="0">
   BEGIN_COM_MAP(CIEHlprObj)
      COM_INTERFACE_ENTRY(IIEHlprObj)
      COM_INTERFACE_ENTRY(IDispatch)
      COM_INTERFACE_ENTRY_IMPL(IObjectWithSite)
   END_COM_MAP()
   <img src="images/grayvellip.JPG" width=3 height=13 alt="" border="0">

};
</PRE>
</td></tr></table></p>

<p>Next you must override the <I>SetSite </I>method of the 
<I>IObjectWithSite </I>interface. When Internet Explorer loads the Browser Helper Object, it calls your 
<I>IObjectWithSite::SetSite </I>method and passes a pointer to its 
<I>IWebBrowser2 </I>interface. The implementation 
of the <I>SetSite </I>method is straightforward. All you need to do is save a copy of 
this <I>IWebBrowser2</I> interface pointer so that you can use it later. This process, shown 
in the following code, is as easy as copying the 
<I>IWebBrowser2</I> interface pointer to a class member or a global variable. The code also shows a partial implementation of 
the <I>SetSite </I>method.</p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>STDMETHODIMP CIEHlprObj::SetSite(IUnknown *pUnkSite)
{
   USES_CONVERSION;
   HRESULT hr = E_FAIL;

   if (!pUnkSite)
      ATLTRACE(&quot;\nSetSite(): pUnkSite is NULL\n\n&quot;);
   else
   {
      // Make sure Internet Explorer is the one calling SetSite
      // by querying pUnkSite for the IWebBrowser2 interface.
      //
      m_spWebBrowser2 = pUnkSite;

      if (!m_spWebBrowser2)
      {
         hr = E_FAIL;
      }
      else
      {
         <img src="images/grayvellip.JPG" width=3 height=13 alt="" border="0">
      }
   }

   return hr;
}
</PRE>
</td></tr></table></p>

</BODY>
</HTML>





