<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Creating Visual Basic ActiveX Controls</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05b.htm">[Previous]</A> <A HREF="ch05d.htm">[Next]</A><P>

<A NAME="130"><H1>Creating Visual Basic ActiveX Controls</H1></A>

<P>Now that you understand how to use ActiveX controls on your Web pages, it's 
time to learn how to create your own. It is often more rewarding and sometimes 
necessary to create your own controls, as there aren't third-party controls available 
for everything you could possibly want to do. This section demonstrates how to 
create a simple Visual Basic ActiveX control that you can place on a Web page. This 
discussion isn't meant to be an all-inclusive tutorial. Let's just get started so you 
will understand the concepts discussed later in this book.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>Visual Basic ActiveX controls are sometimes referred to as 
UserControls, so don't be confused if you hear this term. Controls created using other 
development tools are still referred to as ActiveX controls.</blockquote></div>
</P>

<P>First, start Visual Basic. The New Project dialog box, shown in Figure 5-8, appears.</P>

<P>
<A HREF="javascript:fullSize('F05ii08x.htm')"> <img src="images/F05ii08.JPG" width=404 height=386 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-8. </B> <I>New Project dialog box. </I><!-- /caption -->
</P>

<P>In this dialog box, double-click the ActiveX Control icon. After you open the new project, the form for the Visual Basic ActiveX control is displayed (Figure 5-9). You can design a control in this form. This window is 
named the Object window.</P>

<P>Add any of the intrinsic controls from the Control Toolbox on the left-hand 
side of the Visual Basic integrated development environment (IDE). For this 
simple example, add a PictureBox, a TextBox, and a CommandButton control to the 
form, as shown in Figure 5-10.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>You don't necessarily need an ActiveX control to handle what 
this example does because similar controls are available as HTML elements 
in Internet Explorer. This simple example is just meant to teach you how to 
create ActiveX controls.</blockquote></div>
</P>

<P>
<A HREF="javascript:fullSize('F05ii09x.htm')"> <img src="images/F05ii09.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-9. </B> <I>Visual Basic ActiveX form. </I><!-- /caption -->
</P>

<P>
<A HREF="javascript:fullSize('F05ii10x.htm')"> <img src="images/F05ii10.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-10. </B> <I>Adding controls to a form. </I><!-- /caption -->
</P>

<P>We'll design an ActiveX control with the following functionality: the 
PictureBox control will display a bitmap image when you enter the path to that image in 
the TextBox and then press the CommandButton. First just accept all the default 
names for all the controls. Remove the default text in the TextBox by clicking the 
TextBox control and then deleting the text for the 
<I>Text </I> property in the Properties box on the right-hand side of the IDE. (You'll have to scroll down to bring it into view.)</P>

<P>Next, change the text in the CommandButton control by clicking the button 
and changing the Caption property in the Properties box on the right-hand side of 
the IDE to the value <I>Load Picture</I>. Now you must add some Visual Basic code to 
the ActiveX control so it will actually do something. To enter code for the control, 
switch to Code view in the Visual Basic IDE by double-clicking somewhere on the form 
(or on one of the controls on the form), or by choosing Code from the View menu. 
If you double-click the CommandButton control on the form, the Code view 
window in Figure 5-11 is displayed.</P>

<P>
<A HREF="javascript:fullSize('F05ii11x.htm')"> <img src="images/F05ii11.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-11. </B> <I>Visual Basic Code window. </I><!-- /caption -->
</P>

<P>Visual Basic tries to determine what you're going to do next. Because you 
clicked the CommandButton control, Visual Basic assumes that you want to write an 
event handler for the <I>Click</I> event of the CommandButton. This event handler looks 
identical to the event handlers we wrote for VBScript. It consists of the name of the 
object, the underscore character (_), and the name of the event. 
<I>Command1 </I>is the default name for the first CommandButton control that you place on a form. 
<I>Command2 </I>is the default name for the second, and so forth.</P>

<P>You'll want the ActiveX control to achieve this: when the Command1 button 
is clicked, the associated ActiveX control will load a picture from a file on the 
client's hard disk or from a URL. To read a graphics file from a URL, you need to use 
the <I>AsyncRead</I> method that is part of the 
<I>UserControl</I> object that represents the 
control. You'll want to load the file that was entered by the user. You can retrieve the 
filename from the <I>Text</I> property of the Text1 control, which represents the text box on the 
form. The code for the <I>Click</I> event handler should look like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub Command1_Click()
   AsyncRead Text1.Text, vbAsyncTypeFile
End Sub
</PRE>
</td></tr></table></p>

<P>When calling the <I>AsyncRead </I> method, you have to specify the type of data 
that you're downloading. In this case, you're downloading a file, so you should 
specify <I>vbAsyncTypeFile</I>, as listed in the preceding code. The 
<I>AsyncRead</I> method starts an asynchronous download of the file that you specify. When the download is 
complete, the <I>AsyncReadComplete</I> event of the control is fired. It is in your event handler 
for this event that you load the picture specified by the user.</p>

<P>To load the picture into the picture box, set the 
<I>Picture </I>property of the <I>PictureBox</I> object by using the text entered by the user. Open the Object 
drop-down list in the Code window and select 
<I>UserControl1</I>, then open the Procedure drop-down list in the Code window and select 
<I>AsyncReadComplete.</I> You'll be in the <I>AsyncReadComplete 
</I>event handler block. In this event handler block, type in the 
name of the PictureBox, <I>Picture1</I>, and then press the period character (.) in it. 
Visual Basic uses IntelliSense technology to display a list of all the methods and properties of 
the <I>PictureBox</I> object, as shown in Figure 5-12. Pretty convenient, wouldn't you say?</p>

<P>
<A HREF="javascript:fullSize('F05ii12x.htm')"> <img src="images/F05ii12.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-12. </B> <I>Visual Basic IntelliSense. </I><!-- /caption -->
</P>

<P>Choose the <I>Picture</I> property by scrolling to it and clicking it or by typing in 
the name of the property and pressing the Tab or Enter key. (You'll notice that 
Visual Basic will force the drop-down list to scroll as you're typing. Once the property 
you're looking for is highlighted, you can press Tab or Enter to select it.)</P>

<P>Because <I>Picture </I>is a property, we're going to set it equal to some value. 
You will want to set it equal to the picture that the 
<I>AsyncRead</I> method loaded. However, the 
<I>Picture </I>property of <I>Picture1</I> is a 
<I>Picture</I> object, which means you can't just 
set this property equal to the name of the file entered by the user. To set the 
<I>Picture </I>property, you have to use a special helper function named 
<I>LoadPicture</I>, which takes a string as its first parameter. This string indicates the path and name of the 
picture file you want to load. 
<I>LoadPicture</I> creates a <I>Picture</I> object by loading the picture 
from the path and filename that you specify.</P>

<P>This <I>Picture</I> object is then returned so that you can use it to set the 
<I>Picture</I> property of <I>Picture1</I>. When calling 
<I>LoadPicture</I>, use the value that was returned from 
the asynchronous download operation. This value is stored in the 
<I>Value</I> property of the 
<I>AsyncProp</I> object that is passed to the 
<I>AsyncReadComplete</I> event handler. Here's 
how the Visual Basic code will look for the 
<I>AsyncReadComplete</I> event handler:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub UserControl_AsyncReadComplete(AsyncProp As AsyncProperty)
   Picture1.Picture = LoadPicture(AsyncProp.Value)
End Sub
</PRE>
</td></tr></table></p>

<P>In addition to loading the picture that the user has specified, you might 
want to load a picture when the ActiveX control is first created. Creation of an 
ActiveX control or other object is often referred to as instantiation. When the control is 
first instantiated, its <I>Initialize</I> event is fired. To handle this event, you could enter the 
name of the event handler manually, or you could switch back to Object view and 
double-click on an empty area of the form. If you follow the second option, Visual Basic 
will create an event handler named 
<I>UserControl_Initialize</I>. You can enter code in this 
event handler to call the <I>AsyncRead</I> method to load a picture from your Web server.</P>

<P>You can copy the file tv.bmp included on the companion CD in the 
folder \Samples\Chap05\VBCtrl. This file was obtained from the samples that are 
available on the Visual Studio 6 CD. If you load tv.bmp from your Web server, the code 
for the <I>Initialize</I> event of the control should look like this. (Obviously, you should 
change <I>yourserver.</I>com to the name of your Web server.)</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub UserControl_Initialize()
   AsyncRead &quot;http://<I>yourserver.</I>com/tv.bmp&quot;, vbAsyncTypeFile
End Sub
</PRE>
</td></tr></table></p>

<A NAME="131"><H2>Adding Methods </H2></A>

<P>Before you package a control for use on a Web page, you'll probably want to 
add some methods, properties, and events to the control so that you can use it 
programmatically. Adding methods to a Visual Basic ActiveX control is extremely easy. All 
you have to do is declare a public function, which can take any number of input 
arguments that you specify. In addition, you can specify the 
<I>Optional</I> keyword to indicate that a parameter is optional. You can add a method to the control to allow 
the picture being displayed to be changed by using script at run time.</p>

<p>Create a public function named 
<I>ChangePicture</I> that takes one input 
argument. This input argument is a string that specifies the path and the name of the picture 
to load. Here's the code for this function:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public Sub ChangePicture(ByVal txtPictureName As String)
   AsyncRead txtPictureName, vbAsyncTypeFile
End Sub
</PRE>
</td></tr></table></p>

<P>This function accepts the name of the picture to load. Again, the name of 
the picture can point to the location of the file on your local system, or it can be a 
URL that points to the file on your Web server or some other server on the Internet. 
Then you load the picture using the 
<I>AsyncRead</I> method. We'll discuss how to write 
script to call this method after we package the control for distribution on the Web.</P>

<A NAME="132"><H2>Adding Properties</H2></A>

<P>Adding properties to a control is even easier than adding methods. All you have 
to do is declare a property as you would declare any other global variable in Visual 
Basic. But instead of using <I>Dim</I>, you use the 
<I>Public</I> keyword to declare a property, like 
you did when declaring the <I>ChangePicture</I> function earlier. In our example, you can 
add a property to the control that can be used to determine the path and name of 
the current picture loaded into the PictureBox. You can name this property 
<I>CurrentPicture</I> and declare it:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public CurrentPicture As String
</PRE>
</td></tr></table></p>

<A NAME="133"><H2>Firing Events</H2></A>

<P>Firing events from a Visual Basic ActiveX control is also easy. Simply declare the 
event using the <I>Event</I> keyword together with the keyword 
<I>Public</I>, and then use the <I>RaiseEvent</I> function to fire the event. You can even pass parameters with the event when 
it fires. You do this by specifying the parameters that you're going to pass when 
you declare the event. For the control we are creating, you can declare an event 
named <I>OnPictureChanged</I> that will fire each time the 
<I>Picture</I> object is changed. Here's the code for declaring 
<I>OnPictureChanged</I>:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public Event OnPictureChanged()
</PRE>
</td></tr></table></p>

<P>The event will fire each time the picture changes. For example, 
<I>OnPictureChanged</I> can be fired from any of the methods in our example control, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>RaiseEvent OnPictureChanged
</PRE>
</td></tr></table></p>

<P>After you add the method, property, and event to the control, the code 
should look similar to Listing 5-2. You can find the code listing on the companion CD 
in the folder \Samples\Chap05\VBCtrl. Notice that I combined all the code to load 
the picture into the <I>ChangePicture</I> method so that I don't have to maintain multiple 
copies of the same code.</P>

<P><B>Listing 5-2.</B></P>

 
<P><table cellpadding=5><TR><TD>
<A NAME="134"><H3>VBCtrl.ctl</H3></A>
<PRE>Option Explicit
Public CurrentPicture As String
Public Event OnPictureChanged()

Public Sub ChangePicture(ByVal txtPictureName As String)
    CurrentPicture = txtPictureName
    AsyncRead CurrentPicture, vbAsyncTypeFile
End Sub

Private Sub Command1_Click()
    ChangePicture (Text1.Text)
End Sub

Private Sub UserControl_AsyncReadComplete(AsyncProp As AsyncProperty)
    Picture1.Picture = LoadPicture(AsyncProp.Value)
    RaiseEvent OnPictureChanged
End Sub

Private Sub UserControl_Initialize()
    ' Change the &quot;yourserver.com&quot; to the name of your Web server.
    ' Otherwise, the control will not work at all.
    '
    AsyncRead &quot;http://<I>yourserver.</I>com/tv.bmp&quot;, vbAsyncTypeFile
End Sub
</PRE>
</td></tr></table></p>

<P>Now save the project and the control. Choose a descriptive name other 
than the default of Project1.vbp and UserControl1.ctl. Otherwise, you'll eventually 
have hundreds of projects and controls on your system with the same name. Choose 
names such as VBCtrl.vbp and VBCtrl.ctl. (Notice how I left the file extensions alone.)</P>

<A NAME="135"><H2>Setting the Threading Model</H2></A>

<P>Before you are ready to compile your control, you must perform one more task. 
As you'll recall, only Apartment-threaded controls will work correctly in Internet 
Explorer. For Visual Basic 6, Apartment threading is the default threading model setting. If 
you create an ActiveX control in an earlier version of Visual Basic, you'll want to 
ensure that the threading model is set to Apartment.</P>

<P>To ensure that the threading model is set to Apartment in Visual Basic 6, 
invoke the Project Properties dialog box by choosing the Project Properties menu item 
from the Project menu. The dialog box that appears is shown in Figure 5-13. A 
drop-down list of the available threading models is displayed in the lower right-hand corner. 
Make sure the list box displays Apartment Threaded. If that option is already set 
correctly, click Cancel to close the dialog box. Otherwise, change the Threading Model 
option to Apartment Threaded, and click OK.</P>

<P>
<A HREF="javascript:fullSize('F05ii13x.htm')"> <img src="images/F05ii13.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-13. </B> <I>Visual Basic Project Properties dialog box. </I><!-- /caption -->
</P>

<A NAME="136"><H2>Compiling</H2></A>

<P>Now you're ready to compile the control. Choose Make from the File menu. (If 
you named the project VBCtrl like I did, the Make menu item will display as 
Make VBCtrl.ocx.) Visual Basic will ask you to enter a location for the OCX file. Put 
this OCX file in the same directory as your project files. After you package the 
control using the Package And Deployment Wizard, you'll be ready to test the 
control with Internet Explorer and write script for the control. PDW will be 
discussed in detail in the next section.</P>

<P>Immediately after you compile the control, return to the Project Properties 
dialog box and click the Component tab. (See Figure 5-14.) Select the 
Binary Compatibility option, and below it, enter the path to VBCtrl.ocx in the text box. Specifying 
this setting ensures that Visual Basic will use the same CLSID for the control every 
time the control is compiled. This step is important because if the CLSID changes, 
clients of the control won't be able to use it.</P>

<P>
<A HREF="javascript:fullSize('F05ii14x.htm')"> <img src="images/F05ii14.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-14. </B> <I>Setting binary compatibility. </I><!-- /caption -->
</P>

<A NAME="137"><H2>Using PDW to Package Your Visual Basic Control</H2></A>

<P>Now that you've compiled the control, let's package it so that it can be used on 
a Web page. We could take the time to create the INF and CAB files manually, but 
why do that when Visual Basic 6 provides a wizard that creates the files for you? 
An application known as the Package And Deployment Wizard (PDW) ships with 
Visual Basic 6. This application enables you to easily create packages&#8212;which are the 
files required to use the ActiveX control on the Web&#8212;such as the CAB, INF, and 
HTML files. &quot;HTML files?&quot; you might ask. That's right, PDW even creates a default Web 
page for you that includes an &lt;OBJECT&gt; tag with all the correct attribute settings.</P>

<P>Creating a package for use in Internet Explorer is relatively easy. First you 
need to start PDW from the Start/Programs menu, choose Microsoft Visual Studio 
6/Microsoft Visual Studio 6 Tools, and then choose Package And Deployment Wizard. 
(The Microsoft Visual Studio 6 menu was created when you installed Visual Studio.) If 
you've installed only Visual Basic 6, PDW will be under the Visual Basic 6 Tools directory. 
After you select PDW, the dialog box shown in Figure 
5-15 is displayed.</P>

<P>Select the project you want PDW to use to create the Internet package. 
Click the Browse button, locate the VBCtrl.vbp file that you created earlier, select it, 
and click Open. If any of the files in the project are out of date, PDW will ask 
whether you want to recompile the project.</P>

<P>
<A HREF="javascript:fullSize('F05ii15x.htm')"> <img src="images/F05ii15.JPG" width=404 height=340 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-15. </B> <I>Package And Deployment Wizard. </I><!-- /caption -->
</P>

<P>Click the Package button on the left-hand side of the PDW dialog box. 
After PDW finishes checking your project, the 
Package Type dialog box in Figure 5-16 will be displayed, and you'll be asked to choose the type of package that you want 
to create. Choose Internet Package, and click the Next button to display the 
Package Folder dialog box, shown in Figure 5-17.</P>

<P>
<A HREF="javascript:fullSize('F05ii16x.htm')"> <img src="images/F05ii16.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-16. </B> <I>Package Type dialog box. </I><!-- /caption -->
</P>

<P>The Package Folder dialog box asks you to select a location for the 
package files that PDW will create. By default, PDW creates a 
Package directory under the directory in which the project is located. Most of the time you'll want to accept 
the default location and click the Next button. If the 
Package directory doesn't exist, PDW will ask you whether you want to create it. If you're asked, click Yes. You'll also 
be asked if you want to distribute the property page DLL for our example control. 
Property pages allow developers who are creating applications using your control to 
set the properties of your control at design time. You don't need property pages for 
this control, so click No.</P>

<P>
<A HREF="javascript:fullSize('F05ii17x.htm')"> <img src="images/F05ii17.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-17. </B> <I>Package Folder dialog box. </I><!-- /caption -->
</P>

<P>PDW gives you a summary of the files that will be included in this package. 
This list should be similar to what is displayed in Figure 5-18. 
Notice that the Microsoft Stock Property Page DLL (MSSTKPRP.DLL) isn't selected. That's 
because you chose No when asked whether you wanted to distribute the property 
page DLL with the package. Also notice that the VB6 Runtime and OLE Automation 
DLLs are somehow going to be included in this package: PDW has determined that 
the control needs these DLLs. You didn't have to go through the trouble of 
determining the dependencies yourself.</P>

<P>Click the Next button to display the 
File Source dialog box, which is shown in Figure 5-19. Using this dialog box, you can choose where the 
needed files should be located. For example, you'll want VBCtrl.ocx to be included in 
this CAB file. However, you probably want the VB6 Runtime and OLE Automation 
DLLs to be downloaded from Microsoft's Web site. You can change the location values, 
but you'll usually want to accept the defaults.</P>

<P>
<A HREF="javascript:fullSize('F05ii18x.htm')"> <img src="images/F05ii18.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-18. </B> <I>Included Files dialog box. </I><!-- /caption -->
</P>

<P>
<A HREF="javascript:fullSize('F05ii19x.htm')"> <img src="images/F05ii19.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-19. </B> <I>File Source dialog box. </I><!-- /caption -->
</P>

<P>Click the Next button to display the 
Safety Settings dialog box, shown in Figure 5-20. 
In this dialog box, you specify whether the control is safe for 
scripting, safe for initialization, or both. Some developers don't ever consider a control 
that accesses the user's hard disk to be safe, but you need to decide for yourself 
which values to specify in the Safety Settings dialog box. Although the control we 
created does access files on the user's hard disk, it can't do anything malicious to those 
files, so you're probably safe if you specify 
Yes for both scripting and initialization. 
One good rule of thumb to follow is that if something malicious could possibly be 
done with the control, the control is not safe.</P>

<P>
<A HREF="javascript:fullSize('F05ii20x.htm')"> <img src="images/F05ii20.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-20. </B> <I>Safety Settings dialog box. </I><!-- /caption -->
</P>

<P>Remember that if you don't mark the control safe for scripting and 
initialization and you try to script or initialize it using &lt;PARAM&gt; tags, users with certain 
security levels for Internet Explorer will, at the very least, be warned about the control. 
Also, if the user's security level is high enough, the script you write for the ActiveX 
control won't run, and the control won't be initialized. When you're finished 
deciding what to do, click the Next button.</P>

<P>You're finally finished providing all the values that PDW needs to create 
the Internet Package. At this point the Finished! dialog box is displayed, as shown 
in Figure 5-21. Click the Finish button to have PDW create the package for you.</P>

<P>
<A HREF="javascript:fullSize('F05ii21x.htm')"> <img src="images/F05ii21.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-21. </B> <I>Finished! dialog box. </I><!-- /caption -->
</P>

<A NAME="138"><H2>Testing </H2></A>

<P>Notice that PDW created a Package directory in the Project directory after it 
finished creating the package. In the Package directory, PDW placed a CAB file 
named VBCtrl.cab, which contains an INF file and the control. PDW also created a 
simple HTML page that contains an &lt;OBJECT&gt; tag with all the necessary attributes so 
that the control will be displayed on the Web page. The following code lists 
this &lt;OBJECT&gt; tag:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT ID=&quot;UserControl1&quot;
   CLASSID=&quot;CLSID:412FF29B-AE0B-11D2-A9BA-444553540001&quot;
   CODEBASE=&quot;VBCtrl.CAB#version=1,0,0,0&quot;&gt;
&lt;/OBJECT&gt;
</PRE>
</td></tr></table></p>

<P>Notice that PDW gave the control an ID of 
<I>UserControl1</I>. You'll use this ID when you write script for the ActiveX control. Also notice that PDW adds the 
necessary HTML code for using the License Pack Manager. This code, which is commented 
out, can make life easier for you if you need to use the License Pack Manager.</P>

<P>Open the HTML file that PDW created for you in Internet Explorer to test 
out the control. When loaded, the control should display the tv.bmp file, as is shown 
in Figure 5-22. Try entering a path and a filename of another picture file and then 
clicking the Load Picture button. If the picture isn't loaded, check the path and filename 
you entered. If it's correct, review the code and make sure you've typed everything 
correctly. If you're still having trouble, try copying and running the VBCtrl project 
from the companion CD, which can be found in the folder \Samples\Chap05\VBCtrl. 
PDW adds a comment to the HTML for the License Pack Manager that refers you to 
the ActiveX SDK to download the latest Lpk_Tool.exe. The ActiveX SDK existed only 
for Internet Explorer 3. You can download Lpk_Tool.exe from the MSDN Online 
Web Workshop.</P>

<P>
<A HREF="javascript:fullSize('F05ii22x.htm')"> <img src="images/F05ii22.JPG" width=404 height=281 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-22. </B> <I>VBCtrl in action. </I><!-- /caption -->
</P>

<A NAME="139"><H2>Writing Script for Your Visual Basic Control</H2></A>

<P>Now that you have a working Visual Basic ActiveX control, you can write some 
script to access the method and property of the control and to handle its event. 
Writing script for an ActiveX control is the same as writing script for any object in the 
DHTML Object Model. You can call methods and properties and handle events using 
the object's ID. For example, to access the 
<I>ChangePicture</I> method using VBScript, insert this code into the HTML file for the Web page:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>UserControl1.ChangePicture(Text1.value)
</PRE>
</td></tr></table></p>

<P>To display the value of the 
<I>CurrentPicture</I> property using JScript, insert this 
code into the HTML file:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>alert(UserControl1.CurrentPicture);
</PRE>
</td></tr></table></p>

<P>To handle the <I>OnPictureChanged</I> event in VBScript, enter this code into 
the page:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub UserControl1_OnPictureChanged
   MsgBox &quot;Picture Changed&quot;
End Sub
</PRE>
</td></tr></table></p>

<P>To show you how easy it is to write script for ActiveX controls, the 
companion CD includes an enhanced version of the VBCtrl.htm file, which you can find in 
the folder \Samples\Chap05\VBCtrl. (See Figure 5-23.) I've added a text box and a 
button that allow you to change the current picture, as well as a button that displays the 
value of the <I>CurrentPicture</I> property when clicked.</P>

<P>
<A HREF="javascript:fullSize('F05ii23x.htm')"> <img src="images/F05ii23.JPG" width=404 height=327 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-23. </B> <I>VBCtrl.htm. </I><!-- /caption -->
</P>

<P>At first you might think we have two ways to perform the same operation: 
one through the ActiveX control, and the other through the HTML intrinsic 
controls. Actually, you don't need to include a control in the user interface of an ActiveX 
control if sufficient replacements are available in standard 
HTML. In other words, you can use HTML to provide the user interface and call the methods and properties of 
an ActiveX control using script to provide functionality that just isn't possible using 
only HTML and script.</p>

<P>Listing 5-3 shows the source code (minus the License Pack Manager code) 
for the enhanced version of VBCtrl.htm. You can find the code on the companion 
CD in the folder \Samples\Chap05\VBCtrl.</p>

<P><B>Listing 5-3.</B></P>


<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="140"><H3> VBCtrl.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;VBCtrl.HTM&lt;/TITLE&gt;

   &lt;SCRIPT LANGUAGE=&quot;VBS&quot;&gt;
   Sub Btn1_onclick
      UserControl1.ChangePicture(Text1.value)
   End Sub

   Sub UserControl1_OnPictureChanged
      MsgBox &quot;Picture Changed&quot;
   End Sub
   &lt;/SCRIPT&gt;

&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;OBJECT ID=&quot;UserControl1&quot;
      CLASSID=&quot;CLSID:412FF29B-AE0B-11D2-A9BA-444553540001&quot;
      CODEBASE=&quot;VBCtrl.CAB#version=1,0,0,0&quot;&gt;
   &lt;/OBJECT&gt;

   &lt;P&gt;
   &lt;BR&gt;&lt;BR&gt;
   &lt;INPUT TYPE=&quot;TEXT&quot; ID=&quot;Text1&quot;&gt;
   &lt;BUTTON ID=&quot;Btn1&quot;&gt;Load Picture&lt;/BUTTON&gt;
   &lt;P&gt;
   &lt;BUTTON onclick=&quot;alert(UserControl1.CurrentPicture)&quot;&gt;
      Current Picture
   &lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<A NAME="141"><H2>Initializing from HTML</H2></A>

<P>Even if you're not writing script for the ActiveX control, you can send 
initialization data to the control using the &lt;PARAM&gt; tag. The &lt;PARAM&gt; tag is placed between 
the opening and closing object tags in this example. The &lt;PARAM&gt; tag has two 
attributes: NAME and VALUE. The NAME attribute specifies the name of the property in 
the ActiveX control that you want to initialize. The VALUE attribute specifies the 
value to which the property should be set.</p>

<P>When Internet Explorer sees the &lt;PARAM&gt; tag, it passes the name and 
value that you specify to the ActiveX control via a property bag object. The ActiveX 
control then reads the properties that you specified from this object and sets 
them accordingly. These properties don't necessarily have the same names as the 
corresponding properties of the ActiveX control we covered earlier. Potentially these 
properties can have any arbitrary names the developer of the control chooses. In 
the interest of consistency, however, it's best to give these properties the same name 
as their counterparts in the ActiveX control. Here's how you can set the 
<I>CurrentPicture</I> property using the &lt;PARAM&gt; tag:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT ID=&quot;UserControl1&quot; WIDTH=325 HEIGHT=250
      CLASSID=&quot;CLSID:1A9B2B56-AE27-11D2-A9BA-444553540001&quot;
      CODEBASE=&quot;VBCtrl.CAB#version=1,0,0,0&quot;&gt;
   &lt;PARAM NAME=&quot;CurrentPicture&quot; VALUE=&quot;http://<I>yourserver.</I>com/tv.bmp&quot;&gt;
&lt;/OBJECT&gt;
</PRE>
</td></tr></table></p>

<P>Notice that I included the WIDTH and HEIGHT attributes for the &lt;OBJECT&gt; 
tag. If you don't specify the width and height of the control when using &lt;PARAM&gt; 
tags, Visual Basic assumes that these should be set to 
<I>0</I>. As a result, you won't see the control's user interface.</P>

<P>If you specify the &lt;PARAM&gt; tags for a Visual Basic ActiveX control, when 
the control is first instantiated, the 
<I>ReadProperties</I> event of the 
<I>UserControl</I> is fired. To read the properties that the &lt;PARAM&gt; tags are initializing, you must handle 
the <I>ReadProperties</I> event in the control. In the event handler, use the 
<I>PropertyBag</I> object that was sent to the event handler to read the properties that are being 
initialized. You can set the properties for the control as needed. Add the following code to 
the VBCtrl.ctl to read and set the 
<I>CurrentPicture</I> property using the Visual 
Basic <I>PropertyBag</I> object:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
   ChangePicture PropBag.ReadProperty(&quot;CurrentPicture&quot;)
End Sub
</PRE>
</td></tr></table></p>

<P>Notice that we're calling the 
<I>ReadProperty</I> method to read the 
<I>CurrentPicture</I> property. The 
<I>ReadProperty</I> method will return the value of 
the <I>CurrentPicture</I> property<I> </I>if it finds the property in the property bag. Then we call 
the <I>ChangePicture</I> method to set the 
<I>CurrentPicture</I> property accordingly.</P>

<A NAME="142"><H2>Printing</H2></A>

<P>When the ActiveX control is on a Web page and the user chooses Print from the 
File menu, you typically want the control to be printed in its current state. When 
printing, Internet Explorer performs background printing by creating a hidden version 
of the current page. This hidden version contains a second instance of everything 
on the page. When creating this hidden page, Internet Explorer loads and initializes 
the ActiveX control. Before initializing the control on this hidden Web page, 
Internet Explorer uses the property bag object to tell the control that it should save any 
properties that have changed to the Internet Explorer property bag. Then, when 
initializing the control, Internet Explorer instructs the control to initialize itself using the 
values of the properties stored in Internet Explorer's property bag. That's how you can 
ensure that the control is printed in the current state.</P>

<P>You've already seen <I>ReadProperties</I>&#8212;the event of the control that is fired 
when the control is initialized. Before Internet Explorer creates the hidden Web page 
for printing, the control's <I>WriteProperties</I> event is fired to tell the control that it 
should save its properties to Internet Explorer's property bag. Implementing this in 
Visual Basic is easy. Create an event handler for the 
<I>WriteProperties </I>event, and use the 
<I>WriteProperty</I> method of the given 
<I>PropertyBag</I> object to save the properties. 
Here's how the event handler should appear in the Visual Basic code:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
   PropBag.WriteProperty &quot;CurrentPicture&quot;, CurrentPicture
End Sub
</PRE>
</td></tr></table></p>

<P>Now that you see how cool ActiveX controls are and how easily you can 
create them by using Visual Basic, you probably want to stop reading and start 
programming. Hold the train! There's still more to learn. Creating an ActiveX control by 
using Visual Basic is simple, but there's a reason: ActiveX controls created using Visual 
Basic can't perform some of the tasks that ActiveX controls built with C++ and ATL 
can. You'll see a more specific discussion about the differences in the <a href="ch06a.htm">next chapter</a>. 
For now, let's talk about how to create an ActiveX control using the Active 
Template Library (ATL).</P>

</BODY>
</HTML>





