<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Using Default Behaviors</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch11a.htm">[Previous]</A> <A HREF="ch11c.htm">[Next]</A><P>

<A NAME="252"><H1>Using Default Behaviors</H1></A>

<P>Internet Explorer installs a number of its own default Behaviors, as shown 
in Table 11-1. Two categories of these default Behaviors are of particular 
importance to Web developers: client capabilities and persistence. The next two sections 
cover these Behaviors in detail. For more information about the other default 
Behaviors, refer to the MSDN Online Web Workshop.</P>

<P><b>Table 11-1.</b> <i>Internet Explorer's Default Behaviors</i></P>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Behavior</i></th><th valign="top"><i>Description</i></th></tr>
<tr><td valign="top"><I>AnchorClick</I></td><td valign="top">Enables browser navigation to a folder.</td></tr>
<tr><td valign="top"><I>anim</I></td><td valign="top">Defines an instance of the Microsoft DirectAnimation viewer in an HTML page that can be used to render DirectAnimation objects and play DirectAnimation sounds. (For more information about the Microsoft DirectAnimation viewer, refer to MSDN Online: <I><A HREF="http://msdn.microsoft.com" TARGET="_window2">http://msdn.microsoft.com</A>.</I>)</td></tr>
<tr><td valign="top"><I>animation</I></td><td valign="top">Defines a timed animation element.</td></tr>
<tr><td valign="top"><I>audio</I></td><td valign="top">Defines a timed audio element.</td></tr>
<tr><td valign="top"><I>clientCaps</I></td><td valign="top">Provides information about the features supported by the current instance of Internet Explorer and enables installation of browser components on demand.</td></tr>
<tr><td valign="top"><I>download</I></td><td valign="top">Provides a means to download a file. You can also use this Behavior to indicate a specified callback function that will be called when download is complete.</td></tr>
<tr><td valign="top"><I>homePage</I></td><td valign="top">Contains information about a user's home page.</td></tr>
<tr><td valign="top"><I>httpFolder</I></td><td valign="top">Contains scripting features that enable browser navigation to a folder view.</td></tr>
<tr><td valign="top"><I>img</I></td><td valign="top">Defines a timed image element.</td></tr>
<tr><td valign="top"><I>media</I></td><td valign="top">Defines a generic, timed media element.</td></tr>
<tr><td valign="top"><I>par</I></td><td valign="top">Defines a new timeline container. All HTML descendents of this element will have independent, or parallel, timing.</td></tr>
<tr><td valign="top"><I>saveFavorite</I></td><td valign="top">Enables an object to save data in a Favorites list.</td></tr>
<tr><td valign="top"><I>saveHistory</I></td><td valign="top">Enables an object to save data in the browser history.</td></tr>
<tr><td valign="top"><I>saveSnapshot</I></td><td valign="top">Enables an object to save data in a snapshot.</td></tr>
<tr><td valign="top"><I>seq</I></td><td valign="top">Defines a new timeline container for sequentially timed elements.</td></tr>
<tr><td valign="top"><I>time</I></td><td valign="top">Provides an active timeline. By using this Behavior, you can set any HTML element to appear at a given time, last for a specified duration, and repeat the behavior if desired.</td></tr>
<tr><td valign="top"><I>userData</I></td><td valign="top">Enables an object to persist data in user data.</td></tr>
<tr><td valign="top"><I>video</I></td><td valign="top">Defines a timed video element.</td></tr>
</table>

<P>When using the default Behaviors in HTML, you specify the ID of the 
Behavior, preceded by the pound sign (#). You must also include the 
<I>#default </I>ID before the ID of the Behavior to tell Internet Explorer that the ID of the Behavior you 
are specifying is a default Behavior implemented by Internet Explorer. For example, 
you would use the following syntax to attach the 
<I>time</I> Behavior to the &lt;BODY&gt; tag:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;BODY ID=&quot;oTimeBehavior&quot; STYLE=&quot;behavior:url(#default#time)&quot;&gt;
</PRE>
</td></tr></table></p>

<A NAME="253"><H2>Client Capabilities</H2></A>


<P>When designing a Web site, you typically want to support users whose systems 
have different capabilities. For example, users will be accessing your Web site via 
different types of Internet connections: modem, LAN, and so forth. If they're 
connecting to your Web site via modem, which is usually slower than a LAN connection, 
you might want to limit the number and types of graphics displayed on the page, 
for example.
</P>

<P>

Also, certain Internet Explorer features might be disabled on a user's 
machine, such as support of Java applications. In versions earlier than Internet Explorer 5, if you wanted everyone to be able to access your Web sites, you had to design the 
sites to work correctly with the lowest common denominator system. For instance, 
maybe you couldn't include high-resolution graphics, Java applets, or any of the other 
cool Internet Explorer features on your Web site. Or maybe you designed your Web 
site to work only on systems that used a certain type of Internet connection and that 
had Java enabled, thus denying low-end users the pleasure of enjoying your Web site.</P>

<A NAME="254"><H3><I>clientCaps</I></H3></A>
<P>To address these issues, Internet Explorer 5 includes a default Behavior 
named <I>clientCaps</I>. The <I>clientCaps </I>Behavior allows you to determine the capabilities of 
the client system when your Web site is accessed; furthermore, it allows you to 
display different data depending on how the client system is configured. For example, if 
the user is hooked up to the Internet via a LAN connection, you can display 
high-resolution graphics. On the other hand, if the user is connected via a modem, you 
might want to display lower-resolution graphics.
</P>

<P>

As with the other default Behaviors that Internet Explorer 5 installs, you attach the <I>clientCaps</I> Behavior by using the <I>#default</I> ID, followed by the ID of the <I>clientCaps</I> Behavior. You use the following code to attach this default Behavior to the &lt;BODY&gt; tag on your Web page:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;BODY ID=&quot;oClientCaps&quot; STYLE=&quot;behavior:url(#default#clientCaps)&quot;&gt;
</PRE>
</td></tr></table></p>

<P>Once you've added the <I>clientCaps</I> Behavior to an HTML element, you can 
access the properties of the object to which the Behavior is attached (in this case, the 
<I>body </I>object, which is represented by the 
<I>oClientCaps</I> ID) to determine the different 
capabilities of the client system. Table 11-2 lists the properties of the 
<I>clientCaps</I> Behavior.
</P>

<P><b>Table 11-2.</b> <i>Properties of the</I> clientCaps  <I>Default Behavior</i></P>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Property</i></th><th valign="top"><i>Description</i></th></tr>

<tr><td valign="top"><I>availHeight</I></td>     
<td valign="top">Returns the height of the working area of the 
system's screen, in pixels, excluding the Microsoft Windows taskbar</td></tr>

<tr><td valign="top"><I>availWidth</I></td>     
<td valign="top">Returns the width of the working area of the system's 
screen, in pixels, excluding the Windows taskbar</td></tr>

<tr><td valign="top"><I>bufferDepth</I></td>     
<td valign="top">Returns the number of bits per pixel used for colors on 
the offscreen bitmap buffer</td></tr>

<tr><td valign="top"><I>colorDepth</I></td>     
<td valign="top">Returns the number of bits per pixel used for colors on 
the destination device or buffer</td></tr>

<tr><td valign="top"><I>connectionType</I></td>     
<td valign="top">Specifies the type of connection currently being used 
(LAN, modem, or offline)</td></tr>

<tr><td valign="top"><I>cookieEnabled</I></td>     
<td valign="top">Returns whether client-side cookies are enabled</td></tr>

<tr><td valign="top"><I>cpuClass</I></td><td valign="top">Returns a string that indicates the class of the CPU 
being used (<I>x86</I>, <I>Alpha</I>, or 
<I>Other</I>)</td></tr>

<tr><td valign="top"><I>height</I></td>     <td valign="top">Returns the vertical resolution of the screen in pixels</td></tr>

<tr><td valign="top"><I>javaEnabled</I></td>     
<td valign="top">Indicates whether the Microsoft virtual machine is enabled</td></tr>

<tr><td valign="top"><I>platform</I></td>     <td valign="top">Returns a string that indicates the platform on which 
the browser is running&#8212;for example, the Microsoft Windows 
32-bit platform, the Microsoft Windows 16-bit platform, or 
the Microsoft Windows CE platform</td></tr>

<tr><td valign="top"><I>systemLanguage</I></td>     
<td valign="top">Returns the default language that the system is using (For 
a list of language codes, refer to the following document in 
the MSDN Online Web Workshop: 
<I><A HREF="http://msdn.microsoft.com/workshop/author/dhtml/reference/language_codes.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/author/dhtml/reference/language_codes.asp</A>.</I>
)</td></tr>

<tr><td valign="top"><I>userLanguage</I></td><td valign="top">Returns the current user language</td></tr>

<tr><td valign="top"><I>width</I></td><td valign="top">Returns the horizontal resolution of the screen, in pixels</td></tr>
</table>

<P>The <I>clientCaps </I>Behavior also includes a number of methods that you can 
use to determine information about the particular components of the client's system 
to be installed. Table 11-3 lists these methods.</P>

<P>To see how to use the <I>clientCaps</I> Behavior, take a look at the ClientCaps 
Web page shown in Figure 11-1 below. The ClientCaps example, which 
you can find on the companion CD in the folder \Samples\Chap11, enables you to 
determine any of the capabilities of the client system on which the browser is running.</P>

<P><b>Table 11-3.</b> <i>Methods of the</i> clientCaps <i>Default Behavior</i></P>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Method</i></th><th valign="top"><i>Description</i></th></tr>

<tr><td valign="top"><I>addComponentRequest</I></td>     <td valign="top">Adds a component to the queue of components to 
be installed; specify one of the component IDs listed 
on <I><A HREF="http://msdn.microsoft.com/workshop/author/behaviors/reference/methods/installable.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/author/behaviors
/reference/methods/installable.asp</A></I></td></tr>

<tr><td valign="top"><I>clearComponentRequest</I></td>     <td valign="top">Clears the queue of all component download requests</td></tr>

<tr><td valign="top"><I>compareVersions</I></td>     <td valign="top">Compares two version numbers retrieved by using 
the <I>getComponentVersion </I>method</td></tr>

<tr><td valign="top"><I>doComponentRequest</I></td>     <td valign="top">Downloads all the components that have been 
queued by using the <I>addComponentRequest</I> method</td></tr>

<tr><td valign="top"><I>getComponentVersion</I></td>     <td valign="top">Returns the version of the specified component; for 
this method and the <I>isComponentInstalled</I> method, specify 
a component from the list of detectable component 
identifiers listed on <I><A HREF="http://msdn.microsoft.com/workshop/author/behaviors/reference/methods/detectable.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/author/behaviors/reference/methods/detectable.asp</A></I></td></tr> 

<tr><td valign="top"><I>isComponentInstalled</I></td>     <td valign="top">Returns a Boolean value indicating whether the 
specified component is installed</td></tr>
</table>

<P>
<A HREF="javascript:fullSize('F11ii01x.htm')"> <img src="images/F11ii01.JPG" width=404 height=262 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 11-1.</B> <i>ClientCaps DHTML Behavior example.</i><!-- /caption -->
</P>

<P>In this example, the <I>clientCaps</I> Behavior is attached to the &lt;BODY&gt; tag, as 
you saw earlier. The ClientCaps example contains a drop-down list box that has 
option items for each of the client capabilities listed in Table 11-2 and these two 
methods listed in Table 11-3: <I>getComponentVersion 
</I>and <I>isComponentInstalled</I>. When the user selects an item in the list, the 
<I>queryGenie </I>function is called.
</P>

<P>

In the <I>queryGenie </I>function, the currently selected item is interrogated. The 
<I>select </I>object's <I>selectedIndex </I>property is used to determine the selected item, and a 
<I>switch </I>statement is used for the <I>selectedIndex 
</I>property to determine which client capability to display to the user. For example, to determine which type of connection 
the user activated to hook up to the Internet, you can use the 
<I>connectionType </I>property, like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
case 5:
   answer = &quot;Your connection type is &quot; + oClientCaps.connectionType + &quot;.&quot;;
   break;
</PRE>
</td></tr></table></p>


<P>The ClientCaps example also demonstrates how to determine whether 
the Microsoft VRML Viewer is installed by using the 
<I>isComponentInstalled </I>method of the 
<I>clientCaps</I> Behavior. (For more information about the Microsoft VRML Viewer, 
visit the Microsoft VRML home page: 
<I><A HREF="http://www.microsoft.com/VRML" TARGET="_window2">http://www.microsoft.com/VRML</A></I>.)
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
case 14:
   answer = &quot;You &quot;;
   if (oClientCaps.isComponentInstalled(&quot;x-vrml&quot;, &quot;mimetype&quot;) == false)
   {
      answer = answer + &quot;do not &quot;;
   }

   answer = answer + &quot;have the Microsoft VRML Viewer installed.&quot;
   break;
</PRE>
</td></tr></table></p>


<P>The ClientCaps application demonstrates how to determine the version of 
an installed component as well. For example, it determines what version of the 
Microsoft Media Player is installed by using the 
<I>getComponentVersion </I>method:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>case 15:
   var version;
   version = oClientCaps.getComponentVersion(
                  &quot;{22d6f312-b0f6-11d0-94ab-0080c74c7e95}&quot;,
                  &quot;componentid&quot;);
   if (version != null)
   {
      answer = &quot;You have version &quot; + version 
             + &quot; of the Microsoft Media Player installed.&quot;;
   }
   else
   {
      answer = &quot;You do not have the Microsoft Media Player installed.&quot;;
   }
   break;
</PRE>
</td></tr></table></p>

<A NAME="255"><H2>Persistence</H2></A>


<P>Persistence is another important category of default Behaviors. How many times 
have you navigated to a customizable Web page and changed it to fit your 
preferences, only to lose those preferences when you navigated away from the page or shut 
down the browser? By using Internet Explorer 5's four default persistence Behaviors 
(discussed at length in the following sections), you can save the state and 
information of a page in different ways, as the following list shows:</p>

<UL>
<P><LI><I>saveFavorite</I>. Persists the current state of the Web page when it is 
saved as a favorite in the Favorites list.</LI></P>

<P><LI><I>saveHistory</I>. Persists the state of the Web page when the user 
navigates away from it.</LI></P>

<P><LI>
<I>saveSnapshot</I>. Allows you to persist form values, styles, dynamic 
content, and scripting variables when the user has saved a Web page using 
Internet Explorer's Save As menu item. The values being persisted are included 
in the saved document.
</LI></P>

<P><LI>
<I>userData</I>. Allows you to persist information across sessions by writing 
to an XML data store. This information is saved when the page is 
unloaded and restored whenever the page is reloaded.</li></p>
</ul>

<p><div class="note"><blockquote><b>NOTE</b><HR>
XML is outside the scope of this book. For more information, refer 
to the MSDN Online Web Workshop.
</blockquote></div></p>

<P>To learn about how each of these persistence Behaviors is used, check out 
another example named LinkBuilder, which is on the companion CD in the 
folder \Samples\Chap11.<I> </I>(See Figure 11-2.) This example allows you to save link 
information by using the various persistence Behaviors.
</P>

<P>
<A HREF="javascript:fullSize('F11ii02x.htm')"> <img src="images/F11ii02.JPG" width=404 height=312 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 11-2.</B> <i>LinkBuilder persistence DHTML Behavior example.</i><!-- /caption -->
</P>

<A NAME="256"><H3><I>saveFavorite</I></H3></A> 
<P>The <I>saveFavorite </I>Behavior requires that you specify the &lt;META&gt; tag, the <I>style</I> block, and the CLASS attributes in order to persist an object. The ID attribute is also recommended for performance reasons. The LinkBuilder example specifies these elements as follows:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;META NAME=&quot;SAVE&quot; content=&quot;favorite&quot;&gt;
   &lt;STYLE&gt;
      .saveFavorite {behavior:url(#default#saveFavorite);}
   &lt;/STYLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
   &lt;UL ID=&quot;oLinks0&quot; CLASS=&quot;saveFavorite&quot;&gt;&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>
 
<P>In this code, the &lt;META&gt; and &lt;STYLE&gt; tags are used to specify that the Web page is persistent and that it uses the <I>saveFavorite</I> Behavior. CLASS is included as an attribute of the &lt;UL&gt; tag, and it specifies the type of persistence that the element is using. That's all you need to do. Now when you save the page as a favorite, all information that is part of the &lt;UL&gt; tag is saved with the Favorites. (The LinkBuilder<I> </I>application dynamically inserts HTML into the &lt;UL&gt; tag by using the <I>insertAdjacentHTML </I>and <I>innerHTML </I>properties discussed in <A HREF="ch03a.htm">Chapter 3</A>.)</p>

<A NAME="257"><H3><I>saveHistory</I></H3></A>
<P>The <I>saveHistory </I>Behavior requires the same three elements as the 
<I>saveFavorite</I> Behavior. The LinkBuilder example uses the 
<I>saveHistory </I>Behavior to save the links 
you've entered so that if you navigate away from a page, the links you entered will be 
displayed when you return to the page. This<I> 
</I>Behavior has many other uses as well. For example, it persists information for the current browser instance, so if you shut 
down Internet Explorer, the information you persisted will appear the next time you 
start the browser and navigate to your page.
</P>

<P>The following HTML shows the <I>saveHistory</I> Behavior implementation in 
the LinkBuilder example:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;META NAME=&quot;SAVE&quot; content=&quot;history&quot;&gt;
   &lt;STYLE&gt;
      .saveHistory {behavior:url(#default#saveHistory);}
   &lt;/STYLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
   &lt;UL ID=&quot;oLinks1&quot; CLASS=&quot;saveHistory&quot;&gt;&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>


<P>Note that the <I>style </I>block typically contains all the Behaviors that you're 
using for the current Web page. In other words, you'll have only one 
<I>style </I>block on your page. Or, instead of the 
<I>style </I>block, you can use an inline STYLE attribute (as 
you'll see in the section &quot;<A HREF="ch11c.htm#260">Using Behaviors Created with HTML Components</A>&quot;).</p>

<A NAME="258"><H3><I>saveSnapshot</I></H3></A>
<P>The <I>saveSnapshot </I>Behavior allows you to save form data directly within the 
page. This data is then persisted when you save the Web page by using Internet 
Explorer's Save As dialog box. The 
<I>saveSnapshot</I> Behavior requires the same elements as 
the other two Behaviors we've just looked at. However, the ID attribute in this 
Behavior isn't optional; it's required. Here's the HTML that implements the 
<I>saveSnapshot</I> Behavior in the LinkBuilder example:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;META NAME=&quot;SAVE&quot; content=&quot;snapshot&quot;&gt;
   &lt;STYLE&gt;
      .saveSnapshot {behavior:url(#default#saveSnapshot);}
   &lt;/STYLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
   &lt;UL ID=&quot;oLinks2&quot; CLASS=&quot;saveSnapshot&quot;&gt;&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<A NAME="259"><H3><I>userData</I></H3></A>
<P>The <I>userData </I>Behavior persists session data from one session to the next. A 
session is a connection between a browser and a server. Sessions are generally used for 
virtual shopping Web sites or search engines. Session data consists of session files 
and variables that contain user identification, activity, and other information. These 
session files and variables are typically used in CGI scripts or Active Server Pages to 
save the state or other information of a session on the server. By using the new 
Internet Explorer <I>userData </I>Behavior, you can persist this data on the client side instead of on the server side.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The <I>userData 
</I>Behavior is an excellent replacement for client-side 
cookies. Just like the <I>userData </I>Behavior, cookies can save session information; 
however, client-side cookies suffer from a 4-KB data limit. The 
<I>userData</I> Behavior doesn't have this upper limit. If you're currently using client-side cookies, 
consider using the <I>userData </I>Behavior instead.
</blockquote></div></p>


<P>The <I>userData </I>Behavior requires three elements to function properly: a 
<I>style </I>block or STYLE attribute, an ID attribute, and a CLASS attribute that are applied 
to the object whose data you want to persist. The following code shows these 
three elements as they are included in the LinkBuilder example. (The META element 
isn't needed for the <I>userData</I> Behavior as it is for the other persistence Behaviors.)
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;STYLE&gt;
      .userData {behavior:url(#default#userData);}
   &lt;/STYLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
   &lt;UL ID=&quot;oLinks3&quot; CLASS=&quot;userData&quot; &gt;&lt;/UL&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>


<P>Unlike the other persistence Behaviors, the data to be stored with the 
<I>userData</I> Behavior isn't stored automatically when you shut down (or save) the page, nor is 
it loaded automatically when you restore the page. To save the data, you must use 
the <I>setAttribute </I>method to store the data in an attribute, and then call the 
<I>save </I>method to save the data in an arbitrary XML store. You'll typically call these methods 
when you're unloading the current page (in other words, in the 
<I>onunload </I>event handler of the <I>window 
</I>object.) The following VBScript code stores user data information 
as it is implemented in the LinkBuilder example:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub window_onunload()
   Dim elem
         
   Set elem = document.all.oLinks3
   elem.setAttribute &quot;sInnerHTML&quot;, elem.innerHTML
   elem.save &quot;oXMLBranch&quot;
   Set elem = Nothing
End Sub
</PRE>
</td></tr></table></p>


<P>In this code, the call to <I>setAttribute</I> sets the data for an attribute. The first 
parameter to <I>setAttribute </I>is the attribute name. You can use any name you want, 
keeping in mind that you'll use this name when retrieving the data later. The 
<I>save</I> method is then used to save the data to an arbitrary XML data store.</p>

<p>When this Web page is reloaded, you'll probably want to load the data that 
was previously stored by using the <I>userData 
</I>Behavior. First call the <I>load </I>method to 
load the XML data store that you previously saved, and then call the 
<I>getAttribute </I>method to retrieve the data that you previously saved when calling the 
<I>setAttribute</I> method. Typically, you'll want to call these methods in the 
<I>onload </I>event handler of the <I>window </I>object because 
<I>onload </I>is fired when the Web page is finished loading.</p>

<p>The following code loads user data as it is implemented in the 
LinkBuilder<I> </I>example:</p>
 
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Sub window_onload()
   Dim elem
         
   Set elem = document.all.oLinks3
   elem.load &quot;oXMLBranch&quot;

   If Not IsNull(elem.getAttribute(&quot;sInnerHTML&quot;)) Then
      elem.innerHTML = elem.getAttribute(&quot;sInnerHTML&quot;)
   End If

   Set elem = Nothing   
End Sub
</PRE>
</td></tr></table></p>


<P>When calling the <I>load </I>method, this code specifies the name of the XML 
store that was specified in the call to the 
<I>save</I> method in the <I>window_onunload</I> 
event handler. Also, when calling the <I>getAttribute 
</I>method to retrieve the actual data, the code specifies the same attribute name that was specified when 
<I>setAttribute</I> was called.</p>

<p>OK, we're finished looking at DHTML default Behaviors. Now let's see how 
you can implement Behaviors yourself and even create your own. We'll work with 
HTML Components (HTCs) by using DHTML and script.</p>

</BODY>
</HTML>






