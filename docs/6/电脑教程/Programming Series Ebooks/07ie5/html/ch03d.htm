<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Other Cool DHTML Features</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch03c.htm">[Previous]</A> <A HREF="ch03e.htm">[Next]</A><P>

<A NAME="101"><H1>Other Cool DHTML Features</H1></A>

<P>In addition to the DHTML objects I have showed you so far, Internet Explorer 
offers a lot of other exciting features. Some of these features, such as cascading style 
sheets and positioning, dynamic properties, printing support, mouse capture, and 
context menus, are discussed in the following sections.</P>

<A NAME="102"><H2>Cascading Style Sheets</H2></A>

<P>If you've used Internet Explorer since version 3, cascading style sheets (CSS) 
are nothing new to you, although they weren't dynamic until Internet Explorer 4 and 
5. If you've never used them, a little overview is in order. Basically, style sheets are 
design templates that give you control over the layout and presentation aspects of your 
Web page. They allow you to separate the design of your Web page from the actual 
content of the page. A discussion of CSS could fill an entire chapter, perhaps even a 
small book. We'll just focus on what you can do with CSS in Dynamic HTML.</P>
<P>To add CSS to a Web page, you typically use the &lt;STYLE&gt; tag, which is a 
block tag and requires a closing tag. You should specify the 
<I>style</I> block only in the &lt;HEAD&gt; section of the document. Using the &lt;STYLE&gt; tag, you can specify colors, fonts, 
and so on for elements on a Web page, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;STYLE&gt;
   BODY { background-color: green; }
   A    { text-decoration: none; color: blue;  }
&lt;/STYLE&gt;
</PRE>
</td></tr></table></p>
<P>In this example, the background color for the document will be green, and 
all links on the page will be blue with no text decoration (for example, no 
underline). Any styles we set in the <I>style</I> block apply to all elements on the page of that type. 
If we want to set the style only for a particular element, we can specify the style as 
an attribute of the element. For example, to specify a style for one anchor tag, we'd 
use the STYLE attribute, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;A ID=&quot;A1&quot; HREF=&quot;http://<I>yourserver.</I>com/&quot;
   STYLE=&quot;text-decoration: none; color: blue&quot;&gt;Some Link&lt;/A&gt;
</PRE>
</td></tr></table></p>
<P>As I discussed earlier, each tag on a Web page is represented in the 
DHTML Object Model by an object of a similar name. In this case, the 
<I>style </I>object represents the &lt;STYLE&gt; tag. Therefore, we can dynamically change the style of an element 
from within the script. We can change the color of an anchor tag from blue to red 
when the mouse pointer moves over it, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
      Sub A1_onmouseover
         A1.style.color = &quot;red&quot;
      End Sub

      Sub A1_onmouseout
         A1.style.color = &quot;blue&quot;
      End Sub
   &lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Here we're handling the <I>onmouseover </I>and 
<I>onmouseout </I>events for the anchor tag that has an ID of 
<I>A1</I>. We set the <I>color </I>property of the 
<I>style </I>object to <I>red</I> in the <I>onmouseover 
</I>event handler and <I>blue</I> in the <I>onmouseout 
</I>event handler. (In VBScript, we can access an HTML object by name. So we can access the 
<I>style</I> object by referring to the <I>anchor 
</I>object by name: <I>A1. </I>We can also do this in JScript, but we 
must make sure the object is defined before we try to access it, so this script block 
would have to be placed after the anchor tag in the document in JScript.)</P>

<A NAME="103"><H3>Positioning</H3></A>

<P>One aspect of CSS that really shows off the power of DHTML is positioning. 
CSS positioning gives you the ability to move HTML elements around on your Web 
page after the page is loaded. Positioning is accomplished by using a combination of 
script and different properties of the 
<I>style</I> object. The most important property for 
positioning is the <I>position </I>property. It has three possible values: 
<I>Static</I>, <I>Absolute</I>, and 
<I>Relative</I>. <I>Static</I> indicates that no special positioning exists. 
<I>Absolute</I> indicates that the object is positioned regardless of the layout of the surrounding objects. In other words, 
once you place the object, it doesn't move unless you manually move it. 
<I>Relative</I> indicates that the object is positioned relative to other objects on the page. The object 
moves automatically when the object or objects to which it is relative moves.</P>
<P>Along with the position property, you can use many other properties to set 
or change the actual position of the element on the page, such as 
<I>left</I>, <I>right</I>, <I>posLeft</I>, 
<I>posRight</I>, and <I>posTop</I>. (There are too many properties to list! As you probably 
guessed, you can refer to the MSDN Online Web Workshop for more information about them.)</P>
<P>One other point to note about style sheets is that if an inline style isn't set 
for an HTML element, a default style is applied. In Internet Explorer 4, you couldn't 
access the default style applied to an element, but in Internet Explorer 5, you can by 
using the <I>currentStyle </I>property of the element.</P>
<P>The easiest way to show you the power of CSS positioning is with a 
funny DHTML example named DHTML Soup. When you click the Begin message, the 
letters that spell <I>Dynamic HTML</I> rise out of a pot and line up at the top. When all 
the letters have lined up, they start to jiggle. This sample uses CSS positioning to 
create these effects. Also, when you move your mouse pointer over the letters, they 
change color. This sample uses CSS to create this effect as well. DHTML Soup is shown 
in Figure 3-5 and is also included on the companion CD.</P>

<P>
<A HREF="javascript:fullSize('F03ii05x.htm')"> <img src="images/F03ii05.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-5.</B> <I>DHTML Soup.</I><!-- /caption -->
</P>

<A NAME="104"><H2>Dynamic Properties</H2></A>

<P>Prior to Internet Explorer 5, the properties of objects were static. For example, if 
a value of one property depended on the value of another property, you had to 
manually calculate the value of the dependent property every time the other property 
was changed. In version 5, properties are dynamic. You can specify an expression, or 
a formula, for a property, which can reference other property values. Each time 
the referenced property value changes, the expression is reevaluated for the 
property in question.</P>
<P>Using dynamic properties, you can create a DHTML spreadsheet that is 
similar to a Microsoft Excel spreadsheet. This spreadsheet is basically an HTML table that 
allows users to enter a value or an expression in a cell. For example, an 
expression can specify that the cell's value be the sum of the values of other cells. To 
implement dynamic properties, you use four methods: 
<I>getExpression</I>, <I>recalc</I>,<I> 
removeExpression</I>,<I> </I>and 
<I>setExpression</I>.</P>
<P>The <I>setExpression </I>method allows you to set an expression for a property 
by using script. You can also set expressions inline by using the STYLE attribute. 
For example, let's say we set up a &lt;SPAN&gt; tag:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SPAN ID=&quot;SP1&quot; STYLE=&quot;top:20&quot;&gt;Text Block 1&lt;/SPAN&gt;
</PRE>
</td></tr></table></p>
<P>We could create another span block whose size is based on the size of the 
first span block&#8212;<I>SP1</I>:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SPAN ID=&quot;SP2&quot; STYLE=&quot;top:expression(SP1.offsetTop)&quot;&gt;Text Block 2&lt;/SPAN&gt;
</PRE>
</td></tr></table></p>
<P>Whenever the top position of <I>SP1</I> changes, the top position of 
<I>SP2</I> will automatically change as well. Here's how we can set an expression in script using 
the <I>setExpression</I> method:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>SP2.style.setExpression(&quot;top&quot;, &quot;SP1.offsetTop&quot;, &quot;jscript&quot;);
</PRE>
</td></tr></table></p>
<P>The first parameter is the name of the property to which the expression will 
be added. The second parameter is the expression using either JScript or VBScript 
syntax. The third parameter is the language to be used when evaluating the expression.</P>
<P>The <I>getExpression</I> method returns the expression for the current object. It 
will also recalculate the expression for the property in question.</P>
<P>The <I>recalc </I>method recalculates dynamic properties. Calling 
<I>recalc </I>with a value of <I>false</I> (the default) will recalculate all expressions in the document for 
properties that have changed since the last 
<I>recalc</I> was performed. Calling <I>recalc 
</I>with a value of <I>true</I> will force recalculation of all expressions in the document, whether 
they've changed or not. Finally, the 
<I>removeExpression</I> method deletes an expression 
that's connected to a property.</P>

<A NAME="105"><H2>Printing Support</H2></A>

<P>In Internet Explorer versions earlier than 5, you couldn't print the contents of a 
Web page using only script without an ActiveX control. (You'll learn how to build 
an ActiveX control in <A HREF="ch05a.htm">Chapter 5</A>.) With version 5, you can print using script. Also, 
you can receive notifications in the form of events when the user chooses to print 
the document, which allows you to change the contents of the document before the 
document is printed&#8212;for example, to add headers and footers. After the document 
is printed, you receive another event, which you can handle to change the 
document back to the way it was before printing. And your users never see these changes!</P>
<P>To print the document from script in Internet Explorer 5, you use a new 
method of the <I>window</I> object named 
<I>print</I>. This method has no input parameters and is 
therefore easy to use. Calling <I>print </I>from within script has the same effect as the 
user choosing Print from the Internet Explorer File menu. Here's how to call 
<I>print </I>to print the document in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>window.print();
</PRE>
</td></tr></table></p>
<P>Printing can't get any simpler than that. When we call 
<I>print </I>or when the user chooses Print from the File menu, two events fire. Before the document is 
actually printed, the <I>onbeforeprint </I>event fires. We can handle 
<I>onbeforeprint </I>to make changes to the document before it is printed, perhaps to add multiline headers and 
footers. Currently, we can't add multiline headers and footers using the Internet Explorer 
Print dialog box, so using the <I>print</I> method is pretty handy. The following code 
shows how to use VBScript to add multiline headers and footers to the document before 
it is printed.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   Sub window_onbeforeprint
      document.body.insertAdjacentHTML &quot;AfterBegin&quot;, _
               &quot;&lt;DIV ID='Header'&gt;&quot; _
             &amp; &quot;    &lt;FONT SIZE=2&gt;&lt;B&gt;Company Information&lt;/B&gt;&quot; _
             &amp; &quot;    &lt;/FONT&gt;&quot; _
             &amp; &quot;    &lt;BR&gt;&quot; _
             &amp; &quot;    &lt;FONT SIZE=1&gt;&lt;I&gt;Page Number 1&lt;/I&gt;&quot; _
             &amp; &quot;    &lt;/FONT&gt;&lt;BR&gt;&lt;BR&gt;&quot; _
             &amp; &quot;&lt;/DIV&gt;&quot;

      document.body.insertAdjacentHTML &quot;BeforeEnd&quot;, _
               &quot;&lt;BR&gt;&lt;BR&gt;&quot; _
             &amp; &quot;&lt;DIV ID='Footer' &quot; _
             &amp; &quot;  STYLE='position:absolute;&quot; _
             &amp; &quot;         top:expression(document.body.offsetHeight)'&quot; _
             &amp; &quot;    &lt;FONT SIZE=2&gt;&lt;B&gt;Document1.htm&lt;/B&gt;&quot; _
             &amp; &quot;    &lt;/FONT&gt;&quot; _
             &amp; &quot;    &lt;BR&gt;&quot; _
             &amp; &quot;    &lt;FONT SIZE=1&gt;&lt;I&gt;(C) Copyright 1999, My Company&lt;/I&gt;&quot; _
             &amp; &quot;    &lt;/FONT&gt;&quot; _
             &amp; &quot;&lt;/DIV&gt;&quot;
   End Sub
</PRE>
</td></tr></table></p>
<P>In this code example, we're just using the <I>insertAdjacentHTML 
</I>method to insert text before the document prints. Notice that we wrapped the HTML we're 
inserting into the page with the &lt;DIV&gt; tags. You'll see why in a moment. When setting 
the footer, we used a combination of CSS and dynamic expressions to print the footer 
at the bottom of the document. We set the top of the footer block using the 
<I>top</I> property of the <I>style </I>object. We set this property equal to the 
<I>offsetHeight</I> of the body, which is calculated dynamically using the 
<I>expression </I>property of the <I>style </I>object.</P>
<P>Next we'll want to change the page back to normal after the printing job 
finishes. Here's how to do that using VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   Sub window_onafterprint
      Header.outerHTML = &quot;&quot;
      Footer.outerHTML = &quot;&quot;
   End Sub
</PRE>
</td></tr></table></p>
<P>Now you can see why we wrapped the HTML code that we inserted with 
the &lt;DIV&gt; tags. We needed an object that we could reference. In the previous code, 
we simply set the <I>outerHTML </I>property of the objects referenced by the names 
<I>Header</I> and <I>Footer</I> to an empty string, thus removing the HTML that we had previously 
inserted into the <I>onbeforeprint </I>event handler.</P>

<A NAME="106"><H2>Mouse Capture</H2></A>

<P>Mouse capture enables you to specify one particular object to handle all mouse 
events; in other words, you create one event handler for a specific mouse event instead 
of writing event handlers for every object for which you want to handle mouse 
events. (The mouse events you can handle are listed in Table 3-11.) Mouse capture is 
important because it tells Windows applications that you want mouse messages 
even when the mouse pointer goes outside your window. (By default, mouse 
messages will be sent to the window below the pointer.) Mouse capture's most obvious use 
is for drag-and-drop operations where you need to know that the mouse button 
is released in another window.</P>

<P><B>Table 3-11.</B> <I>Mouse Events</I></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Mouse Event</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>onmousedown</I></TD>
<TD VALIGN="TOP">Fires when an object is clicked with either mouse button</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmouseup</I></TD>
<TD VALIGN="TOP">Fires when a mouse button is released while over an object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmousemove</I></TD>
<TD VALIGN="TOP">Fires when the mouse is moved over an object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onclick</I></TD>
<TD VALIGN="TOP">Fires when the left mouse button is clicked on an object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondblclick</I></TD>
<TD VALIGN="TOP">Fires when an object is double-clicked with the left mouse button</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmouseover</I></TD>
<TD VALIGN="TOP">Fires when the mouse pointer is moved into an object</TD>
</TR><TR>     
<TD VALIGN="TOP"><I>onmouseout</I></TD>
<TD VALIGN="TOP">Fires when the mouse pointer is moved outside of an object</TD>
</TR></TABLE></P>

     
     
<P>To implement mouse capture, we use the 
<I>setCapture</I> and <I>releaseCapture </I>methods, which accomplish exactly what you'd expect given their names. The 
<I>setCapture </I>method sets the object that will handle all the mouse events for the Web page. 
Calling <I>setCapture </I>is easy. Here's how to call it in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE><I>object1</I>.setCapture();
</PRE>
</td></tr></table></p>
<P>In this code, <I>object1 </I>is an arbitrary name of some HTML element on the 
Web page. The <I>object1 </I>object will handle all the mouse events. Once we've set the 
mouse capture by using <I>setCapture</I>, we can handle mouse events just as we normally 
would, but all these events will be handled by just one object. In our mouse event 
handlers, we can use the <I>srcElement </I>property of the 
<I>event </I>object to determine which element fired the mouse event.</P>
<P>The <I>releaseCapture </I>method removes mouse capture from the object. 
Calling <I>releaseCapture </I>is as easy as calling the 
<I>setCapture</I> method. Here's how to call it in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE><I>object1</I>.releaseCapture()
</PRE>
</td></tr></table></p>
<P>We can call the <I>releaseCapture </I>method off the 
<I>document </I>object as well as the object to which we originally set mouse capture. Calling 
<I>releaseCapture</I> off the document makes determining which object has the mouse capture unnecessary, which 
is helpful when we're setting and releasing mouse capture programmatically. In 
addition to losing the mouse capture by calling 
<I>releaseCapture</I>, you'll also lose it in 
these three cases:</P>

<UL>
<P><LI>When displaying a modal dialog box, such as the modal dialog box 
displayed by a call to the <I>alert</I> or 
<I>MsgBox</I> functions, or when displaying a context menu</LI></P>
<P><LI>When switching focus to another application or browser window</LI></P>
<P><LI>When scrolling through the Web document (This doesn't seem to be 
true if you use the scroll wheel to scroll through the document.)</LI></P>
</UL>
 <P>Also note that when mouse capture is lost, the 
<I>onlosecapture</I> event is fired. An example of using mouse capture is included on the companion CD and is shown 
in Figure 3-6.</P>

<P>
<A HREF="javascript:fullSize('F03ii06x.htm')"> <img src="images/F03ii06.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-6.</B> <I>Mouse capture.</I><!-- /caption -->
</P>

<A NAME="107"><H2>Context Menus</H2></A>

<P>One of the most common questions people ask is: &quot;How can I disable the 
Internet Explorer context menus using script?&quot; Prior to Internet Explorer 5, you couldn't. 
But now the <I>oncontextmenu </I>event, which is a member of the 
<I>document</I> object, allows you to disable the Internet Explorer context menu simply by setting the 
<I>event</I> object's <I>returnValue </I>property to 
<I>false</I>. Here's how to do this using VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub document_oncontextmenu
   window.event.returnValue = False
End Sub
</PRE>
</td></tr></table></p>
<P>When the user clicks the right mouse button on the document, your 
event handler will be called. Because you're setting 
<I>returnValue </I>to <I>false</I>, the context 
menu is never displayed. Disabling context menus is as easy as that.</P>

</BODY>
</HTML>





