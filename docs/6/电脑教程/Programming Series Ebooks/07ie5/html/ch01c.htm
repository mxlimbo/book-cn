<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Internet Explorer 3</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch01b.htm">[Previous]</A> <A HREF="ch01d.htm">[Next]</A><P>

<A NAME="4"><H1>Internet Explorer 3</H1></A>

<P>So now you're probably thinking, &quot;This is awesome. Internet Explorer versions 1 
and 2 gave me so much; why did Microsoft need to go any further?&quot; Well, as you might 
have guessed, you can do much more with a Windows application than you can with 
a basic HTML page. For example, when creating a Windows application, you can 
include any number of ActiveX controls. Internet Explorer 1 and 2 didn't even 
have the ability to host ActiveX controls. That's where Internet Explorer 3 stepped up 
to the plate. The release of version 3 (shown in Figure 1-3) on August 13, 1996, 
brought us closer to creating a full-blown application for the Web using Internet 
Explorer. Version 3 introduced new features that contributed to Internet Explorer's 
programmability and reusability.</P>

<P>
<A HREF="javascript:fullSize('F01ii03x.htm')"> <img src="images/F01ii03.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 1-3. </B> <I>Internet Explorer 3. </I><!-- /caption -->
</P>

<A NAME="5"><H2>ActiveX Controls</H2></A>

<P>One of the most significant Internet Explorer 3 features was the ability to host 
ActiveX controls on Web pages. ActiveX controls are dynamic-link libraries (DLLs) 
that expose some functionality through the Component Object Model (COM). 
ActiveX controls allow you to do just about anything on your Web page that you can do 
in a normal Windows application. With these new capabilities came security 
risks, however, so version 3 introduced the concept of security models to prevent 
people from creating ActiveX controls that could trash your computer. We'll talk about 
how to create ActiveX controls in <A HREF="ch05a.htm">Chapter 5</A>.</P>

<A NAME="6"><H2>Scripting Support</H2></A>

<P>In the past, all data had to be blindly sent to a server. A program running on the 
server checked the data entered by the user. If some data was incorrect or missing, the 
Web page was redisplayed with an explanation of the problem. This predicament 
caused users a lot of frustration, as they constantly had to enter data and resubmit forms 
to determine whether all the information was correct. It was also time-consuming, 
especially when users were connected to the Internet using slow modem lines.</P>

<P>Version 3 of Internet Explorer introduced support for scripting using 
Microsoft JScript and Microsoft Visual Basic Script (VBScript). Now you could call methods 
and access properties on the ActiveX controls that you had included on your Web 
page. In addition, you could validate data in a form before submitting the data to 
your Internet server for processing. If any of the data was incorrect, the user was 
alerted and prompted to enter the correct data.</P>

<A NAME="7"><H2>Internet Explorer Object Model</H2></A>

<P>As mentioned earlier, with versions 1 and 2, all information displayed on a Web 
page was static: you had to decide which information was going to be on the page as 
you were designing it, and once Internet Explorer displayed the page, you couldn't 
access the information on it.</P>

<P>With scripting support and the Internet Explorer object model (later named 
the DHTML Object Model), you could decide what to display on the page as the 
page was loaded. Also, you could access information from script on a Web page by 
using the DHTML objects, enabling you to validate form data before sending it to your server.</P>

<A NAME="8"><H2>WebBrowser Control</H2></A>

<P>So far, we've examined only the programmability of Internet Explorer. What if 
you wanted to include Internet functionality in your own Windows applications? 
For instance, you might want to create your own Web browser for school children. 
With this type of Web browser, you might want to be able to control which Web 
pages children could view. Or you might want to make your Web browser extremely 
easy for children to use. Of course, you might not want to go through the trouble of 
creating an entire Web browser application from scratch. If you were to do that, 
you'd have to be an expert in many different technologies&#8212;communications, COM, 
C++, Internet standards and protocols, security, and so forth.</P>

<P>Many Web browsers exist on the market. Wasn't there a simple way to 
reuse some of the functionality that's already out there? Starting with Internet Explorer 
3, there was. Internet Explorer 3 was the first browser on the market to allow its 
technology to be reused. Microsoft shipped an ActiveX control with version 3 named 
the WebBrowser control. Using this control, you could build your own Web 
browser application by using any COM-aware development tool, such as Visual C++, 
Visual Basic, Microsoft Visual J++, and even Microsoft Visual FoxPro. And the 
WebBrowser control also let you control Internet Explorer itself.</P>

</BODY>
</HTML>





