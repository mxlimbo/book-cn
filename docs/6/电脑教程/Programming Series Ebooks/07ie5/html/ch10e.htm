<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Adding Toolbar Buttons</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch10d.htm">[Previous]</A> <A HREF="ch10f.htm">[Next]</A><P>

<A NAME="244"><H1>Adding Toolbar Buttons</H1></A>

<P>Now that you know all about band objects, let's add some buttons to 
Internet Explorer's toolbar so that you'll be able to run any application on your system 
with the click of a button. You can execute Explorer Bars, COM objects, scripts, and 
normal executable applications directly from Internet Explorer's toolbar, allowing 
you to easily start your favorite applications or scripts without having to search 
through a maze of menus or folders on your hard disk. Adding toolbar buttons also 
makes Explorer Bars easier to use because you won't have to search for them on 
Internet Explorer's menus.</P>

<P>Just as when you created an Explorer Bar in DHTML and script, you must 
add the information in the Registry before you can add toolbar buttons to the 
Internet Explorer user interface. Because adding this information manually can be 
cumbersome, you might want to have an ActiveX control or the setup program for an application 
or a band object update the Registry for you. To update the Registry, follow these steps:</P>
<OL>
<P><LI>Create a new GUID as you did when creating a DHTML Explorer Bar.</LI></P>

<P><LI>Use this newly created GUID as the name of a new key you create 
under the key <I>HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer\
Extensions. </I>The new key should look like this:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>HKEY_LOCAL_MACHINE\Software\Microsoft\Internet 
   Explorer\Extensions\&lt;Your New GUID&gt;</PRE>
</TD></TR></TABLE></P>

<P><LI>Optionally, you can create a new string value under the key you 
created in step 2 that will cause your toolbar button to appear on the 
Internet Explorer toolbar by default. Name this new string value 
<I>Default Visible</I>. (Notice that this name is two words.) Set 
<I>Default Visible</I> to <I>Yes</I> to show the button by default; otherwise, set it to 
<I>No</I>.</LI></P>
<P>By default, new buttons aren't displayed on the Internet 
Explorer toolbar. They are included on the left side of the Customize Toolbar 
dialog box.</P>
<P><LI>Create a new string value under the key you created in step 2, and 
name it <I>ButtonText</I>. It should point to the label you want for the new toolbar button.</LI></P>
<P><LI>Create a new string value under the key you created in step 2. Name 
this string value <I>HotIcon</I>. Set the value of 
<I>HotIcon</I> to the full path of the file that contains the icon that you want displayed when the mouse hovers over the button.</LI></P>
<P>The value of <I>HotIcon</I> can point directly to an .ico file that 
contains the icon or to a resource in a DLL or other resource file. (For more on 
icons, see the sidebar following these steps.)</P>
<P><LI>Create a new string value under the key you created in step 2, and 
name it <I>Icon</I>.</LI></P>
<P><LI>Set the value of <I>Icon</I> to the full path of the file that contains the icon 
for the button.</LI></P>
<P>Optionally, you can provide support for multiple native 
languages. For more information about adding this support, refer to the MSDN Online Web Workshop.</P>
</OL>

<P><DIV CLASS="SIDEBAR"><BLOCKQUOTE>
<P><B>Referencing Icons </B></P>
<P>Icons that are stored in a resource such as a DLL can be referenced by 
providing the path to the resource and the ID of the icon in the following 
format: &quot;<I>path,resourceID</I>&quot;. For instance, if the icon is stored in a DLL named 
YourDll.dll and has a resource ID of <I>104</I>, you would reference it like this: &quot;YourDll.dll,104&quot;.</P>
<P>For more information about creating icons for Internet Explorer and a 
style guide about toolbar buttons, refer to the MSDN Online Web Workshop 
Toolbar Button Style Guide: <I><A HREF="http://msdn.microsoft.com/workshop/browser/ext/overview/toolbar_style.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/browser/ext/overview
/toolbar_style.asp</A></I>.)</P>
</BLOCKQUOTE></DIV></P>

<P>At this point, the Registry key and values you added should resemble 
those shown in Figure 10-10. (The button won't actually show on the toolbar until you 
add more information about the action to take when the button is clicked.)</P>


<P>
<A HREF="javascript:fullSize('F10ii10x.htm')"> <img src="images/F10ii10.JPG" width=404 height=279 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 10-10.</B> <I>Initial Registry key and values.</I><!-- /caption -->
</P>


<P>Now that you've entered the preliminary Registry information for the new 
toolbar button, you must enter some additional Registry information. The information 
will vary depending on what will be run when the toolbar is clicked.</P>

<A NAME="245"><H2>Displaying Explorer Bars</H2></A>

<P>To create a toolbar button that displays an Explorer Bar when clicked, follow 
these additional steps:</P>
<OL>
<P><LI>Create a new string value under the GUID key 
(<I>HKEY_LOCAL_MACHINE\ Software\Microsoft\Internet 
Explorer\Extensions\&lt;</I>Your New 
GUID<I>&gt;</I>) that you created in the steps in the previous section. Name this string 
value <I>CLSID</I>. Set the value of <I>CLSID </I>to the following:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>{E0DD6CAB-2D10-11D2-8F1A-0000F87ABD16}</PRE>
</TD></TR></TABLE></P>

<P><LI>Create a new string value under the same key, and name it 
<I>BandCLSID</I>. Set the value of <I>BandCLSID 
</I>to the CLSID of your Explorer Bar.</LI></P>

<P>The WebBand example includes the necessary code to register the toolbar 
information. If you compile and register WebBand and start Internet Explorer, you 
will see the WebBand icon on the toolbar, as shown in Figure 10-11.</P>


<P>
<A HREF="javascript:fullSize('F10ii11x.htm')"> <img src="images/F10ii11.JPG" width=404 height=279 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 10-11.</B> <I>WebBand button on Internet Explorer's toolbar.</I><!-- /caption -->
</P>
</OL>

<A NAME="246"><H2>Running COM Objects</H2></A>

<P>If you are creating a toolbar button to run a COM object, follow these additional steps:</P>
<OL>
<P><LI>After registering your COM object and performing the initial steps 
to update the Registry, create a new string value named 
<I>CLSID</I> under the GUID key you created in the initial steps. Set the value of 
<I>CLSID </I>to the following:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>{1FBA04EE-3024-11D2-8F1F-0000F87ABD16}</PRE>
</TD></TR></TABLE></P>

<P><LI>Create a new string value under the GUID key named 
<I>ClsidExtension</I>. Set the value of 
<I>ClsidExtension</I> to the CLSID of the COM object that you 
want to run. This COM object must implement 
<I>IOleCommandTarget</I>.</LI></P>

<P>The <I>Exec</I> method of this interface will be called with 
<I>nCmdID</I> equal to <I>1</I> when the button is clicked and 
<I>2</I> when the menu item associated with this COM object 
is selected. (You'll implement the menu item shortly.) If your COM object needs to 
access the DHTML Object Model of the page that Internet Explorer is displaying, the 
COM object must implement <I>IObjectWithSite</I>. If the COM object implements 
<I>IObjectWithSite</I>, when the <I>SetSite </I>method is called the method will be passed a pointer to 
the <I>IShellBrowser </I>interface implemented in Internet Explorer.</P>

</OL>

<A NAME="247"><H2>Running Scripts</H2></A>

<P>You can also create a toolbar button that runs script when it is clicked. In 
addition to the initial steps to update the Registry, you need to follow these steps:</P>
<OL>
<P><LI>Create a new string value under the GUID key that you created in the 
initial steps. Name this string value 
<I>CLSID</I>, and give it the following value:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>{1FBA04EE-3024-11D2-8F1F-0000F87ABD16}</PRE>
</TD></TR></TABLE></P>

<P><LI>Create a new string value named 
<I>Script</I> beneath the GUID key. Set the value of 
<I>Script</I> to the full path of the file that contains the script that 
you want to run. Make sure that no <I>Exec</I> string value exists. The 
<I>Script </I>and<I> Exec</I> values can't coexist.</LI></P>
</OL>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
Script that is run from a toolbar button or a menu item has an 
HTML window; therefore, it can access 
<I>window</I> and <I>document</I> object methods such 
as <I>alert</I>. But if you try to use methods that aren't in the DHTML Object Model, 
such as VBScript's <I>MsgBox</I> function, you will receive a run-time error.
</BLOCKQUOTE></DIV></P>

<A NAME="248"><H2>Running Executable Files</H2></A>

<P>Finally, you can also create buttons that run executable files that exist on your 
system. Along with the initial steps to update the Registry, perform the following steps:</P>
<OL>
<P><LI>Create a new string value under the GUID key that you created in the 
initial steps. Name this string value 
<I>CLSID</I>, and give it the following value:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>{1FBA04EE-3024-11D2-8F1F-0000F87ABD16}</PRE>
</TD></TR></TABLE></P>

<P><LI>Create a new string value named 
<I>Exec</I> beneath the GUID key. Set the value of 
<I>Exec</I> to the full path of the .exe file that you want to run. Make 
sure that no <I>Script</I> string value exists. These two values can't coexist.</LI></P>
</OL>

</BODY>
</HTML>





