<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>DHTML Objects</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch03b.htm">[Previous]</A> <A HREF="ch03d.htm">[Next]</A><P>

<A NAME="78"><H1>DHTML Objects</H1></A>

<P>Now that you understand the concept of an object and its methods, properties, 
events, and collections, let's examine the most important objects in the DHTML Object 
Model. These objects are the ones you'll encounter frequently when writing script for 
your Web pages or when creating full-blown Web applications, which I'll show you 
how to do in <A HREF="ch04a.htm">Chapter 4</A>. We'll start off with the objects you'll use the most and 
progress to some of the lesser-used objects.</P>
<P>Each HTML tag on a Web page is represented by an object in the DHTML 
Object Model, so there are far too many objects to discuss in this book. After I explain 
the most common objects that you'll use, I'll cover methods, properties, and events 
that are common to most HTML elements on a Web page. Knowing these will make 
creating Web-based applications for Internet Explorer 5 easier.</P>

<A NAME="79"><H2><I>window</I> Object</H2></A>
<P>The <I>window </I>object is the mother of all objects. It's the topmost object in the 
DHTML Object Model. The <I>window </I>object represents an open window in Internet 
Explorer. When you open a new instance of Internet Explorer, the 
<I>window</I> object is created first. It gives you access to an HTML document and all the HTML elements in 
the document. The <I>window </I>object also allows you to retrieve information about the 
state of the window.</P>
<P>When you open a new window, typically only one 
<I>window</I> object is created. However, if the Web page being displayed inside the window contains frames, 
one <I>window </I>object will be created for the topmost, or parent, window, and one 
<I>window </I>object will be created for each of the frame windows. In that case, the 
<I>window </I>objects within the frame windows are child windows of the topmost 
<I>window </I>object.</P>
<P>You've already seen and used one of the methods of the 
<I>window</I> object&#8212;the <I>alert</I> method. You can call the 
<I>alert </I>method whenever you want to display a 
dialog box to alert the user of something important. You might have noticed previously 
that when I called the <I>alert </I>method, I didn't specify the 
<I>window </I>object. You can call any of the methods, properties, events, or collections of the 
<I>window </I>object without having to specify it. If you don't specify an object name, Internet Explorer assumes 
that you mean the topmost <I>window </I>object. But if you want to call a method or 
property of a <I>window </I>object in a frame, you must specify the name of the 
<I>window </I>object in the frame. I'll show you how to do this shortly.</P>

<A NAME="80"><H3>Methods</H3></A>

<P>The <I>window </I>object for Internet Explorer 5 contains 26 methods&#8212;far too many 
to explain in detail. So I've listed all the methods and a short description of each 
in Table 3-1. I'll cover a few of the most common methods 
that you'll use&#8212;<I>open</I>, <I>close</I>, 
<I>navigate</I>, <I>showModalDialog</I>, and 
<I>showModelessDialog</I>&#8212;in a little more detail. We've already looked at 
<I>alert</I> and <I>prompt</I>.</P>


<P><B>Table 3-1.</B> <I>Methods of the <I>window</I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Method</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP"><I>alert</I></TD>
<TD VALIGN="TOP">Displays a dialog box containing a message and an OK button.</TD>
</TR><TR>
<TD VALIGN="TOP"><i>attachEvent</i></TD>
<TD VALIGN="TOP">Attaches the specified function to an event so that the 
function gets called whenever the event is fired on the <I>window</I> object.</TD>
</TR><TR>
<TD VALIGN="TOP"><i>blur</i></TD>
<TD VALIGN="TOP">Causes the window to lose focus and fires the 
<I>onblur</I> event.</TD>
</TR><TR>
<TD VALIGN="TOP"><i>clearInterval</i></TD>
<TD VALIGN="TOP">Clears the interval previously set by the 
<I>setInterval</I> method.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>clearTimeout</I></TD>
<TD VALIGN="TOP">Clears the timeout previously set by the 
<I>setTimeout</I> method.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>close</I></TD>
<TD VALIGN="TOP">Closes the window associated with the 
<I>window</I> object specified.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>confirm</I></TD>
<TD VALIGN="TOP">Displays a confirm dialog box that contains a message and the 
OK and Cancel buttons.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>detachEvent</I></TD>
<TD VALIGN="TOP">Detaches the specified function from an event so that the 
function is no longer called when the event is fired by the 
<I>window</I> object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>execScript</I></TD>
<TD VALIGN="TOP">Enables you to dynamically execute script.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>focus</I></TD>
<TD VALIGN="TOP">Sets the focus to the specified 
<I>window</I> object and causes the <I>onfocus</I> event to fire.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>moveBy</I></TD>
<TD VALIGN="TOP">Moves the screen position of the window by the 
<I>x</I> and <I>y</I> offsets specified.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>moveTo</I></TD>
<TD VALIGN="TOP">Moves the screen position of the upper left corner of the 
window to the specified <I>x</I> and <I>y</I> coordinates.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>navigate</I></TD>
<TD VALIGN="TOP">Causes the window to navigate to the specified URL.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>open</I></TD>
<TD VALIGN="TOP">Opens a new window and causes it to navigate to the 
specified URL.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>print</I></TD>
<TD VALIGN="TOP">Prints the document that's loaded in the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>prompt</I></TD>
<TD VALIGN="TOP">Displays a dialog box with a message and an input field.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>resizeBy</I></TD>
<TD VALIGN="TOP">Changes the current size of the window by the specified 
<I>x</I> and <I>y</I> offsets.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>resizeTo</I></TD>
<TD VALIGN="TOP">Sets the current size of the window to the specified values.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>scroll</I></TD>
<TD VALIGN="TOP">Scrolls the window to the specified 
<I>x</I> and <I>y</I> offsets at the upper left corner of the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>scrollBy</I></TD>
<TD VALIGN="TOP">Scrolls the window by the specified 
<I>x</I> and <I>y</I> offsets relative to the current scroll position.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>scrollTo</I></TD>
<TD VALIGN="TOP">Causes the window to scroll to the specified 
<I>x</I> and <I>y</I> coordinates at the upper left corner of the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>setInterval</I></TD>
<TD VALIGN="TOP">Causes an expression to be evaluated each time the specified interval elapses.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>setTimeout</I> </TD>
<TD VALIGN="TOP">Causes an expression to be evaluated after the specified 
timeout has occurred.</TD>
</TR><TR>  
<TD VALIGN="TOP"><I>showHelp</I></TD>
<TD VALIGN="TOP">Displays the specified help file.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>showModalDialog</I></TD>
<TD VALIGN="TOP">Displays a modal dialog box that shows the HTML 
document given by the specified URL. This dialog box is 
application modal, meaning that the Web page that called 
this method can't be accessed until this dialog box is closed.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>showModelessDialog</I></TD>
<TD VALIGN="TOP">Displays a modeless dialog box that shows the HTML 
document given by the specified URL. In contrast to a modal 
dialog box, the Web page that called <I>showModelessDialog</I> can be accessed while this dialog box is displayed.</TD>
</TR></TABLE></P>

     
<P>The <I>open </I>method is probably the 
<I>window</I> object method that you'll use most often. This method enables you to open a new Internet Explorer window from 
your Web page. When opening the window, you can specify the URL that Internet 
Explorer should navigate to. In addition, you can specify other options that determine 
how the new window will appear. For instance, you can specify whether you want 
the new window to have a toolbar, a status bar, or an address bar.</P>
<P>Let's check out a few examples to learn how to use the 
<I>open</I> method. The first example, which is in JScript, simply opens a new Internet Explorer window with 
all the default options to navigate to Microsoft's home page. We'll specify a name of 
the window as the second parameter. We can use this name as the TARGET attribute 
for the &lt;FORM&gt; tag or anchor (&lt;A&gt;) tag.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var wnd;
wnd = window.open(&quot;http://www.microsoft.com&quot;, &quot;MSHOME&quot;);
</PRE>
</td></tr></table></p>
<P>As the example shows, the <I>open </I>method returns a 
<I>window </I>object for the new window so that you can access the different methods, properties, and so on, of 
the new window. Another method of the <I>window 
</I>object that you'll probably want to call is the 
<I>close </I>method. You'll invariably want to close the new window at some 
point, unless you expect the user to close it. To close the new window, just call the 
<I>close </I>method, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>wnd.close();
</PRE>
</td></tr></table></p>
<P>For a more advanced example, let's open a new Internet Explorer window 
with a height of 200 pixels and a width of 100 pixels. This new window won't have a 
menu bar, toolbar, status bar, or address bar. We'd want this type of window to display 
if we wanted to provide a help screen in response to the user clicking a Help 
button on our page. We'll use VBScript to implement the Help button and the Help 
window, as shown in Listing 3-1. The results of the HTML code are 
shown in Figure 3-2.</P>

<P><B>Listing 3-1.</B></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="81"><H3>HelpWnd.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Help Window&lt;/TITLE&gt;
   &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Sub ShowHelpWindow
      window.open &quot;HelpPage1.htm&quot;, &quot;HelpWnd&quot;, _
        &quot;height=200,width=500,toolbar=no,status=no,menubar=no,location=no&quot;
   End Sub
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;BUTTON onclick=&quot;ShowHelpWindow()&quot;&gt;Help&lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<P>
<A HREF="javascript:fullSize('F03ii02x.htm')"> <img src="images/F03ii02.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-2.</B> <I>Help window.</I><!-- /caption -->
</P>

<P>Another reason you might want to use the <I>open 
</I>method is to allow your users to navigate through multiple pages of help using the same Help window. This 
basically provides context-sensitive help for our application. To accomplish this in 
our simple example, we'll place multiple buttons on the main Web page. Each button 
will display different help pages using the same window. This time, we'll use Jscript, 
as shown in Listing 3-2. Figure 3-3 shows the results of the code.</P>

<P><B>Listing 3-2.</B></P>
<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="82"><H3>MPgWnd.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Figure 3-3: Displaying Multiple Help Pages
          in the Same Window
   &lt;/TITLE&gt;

   &lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
   function ShowHelpWindow(helpPage)
   {
      var sFeatures = &quot;height=200,width=500,&quot;;
      sFeatures += &quot;toolbar=no,status=no,&quot;;
      sFeatures += &quot;menubar=no,location=no&quot;;

      window.open(helpPage, &quot;HelpWnd&quot;, sFeatures);
   }
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;BUTTON onclick=&quot;ShowHelpWindow('HelpPage1.htm')&quot;&gt;
      Help (Page 1)
   &lt;/BUTTON&gt;
   &lt;BUTTON onclick=&quot;ShowHelpWindow('HelpPage2.htm')&quot;&gt;
      Help (Page 2)
   &lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<P>Listing 3-2 deserves a little closer inspection. In the script section of the 
page, we first created a function named 
<I>ShowHelpWindow</I> that is called when either 
the button for Page 1 or the button for Page 2 is clicked. Next we called the 
<I>open </I>method of the <I>window</I> object to open a new window using the height and width that 
we specified along with other features of the window. Now that wasn't too painful, 
was it? Using the <I>window.open</I> method enables you to provide content to your users 
for help or anything else you can think of.</P>
<P>Two other important methods of the <I>window </I>object are 
<I>showModalDialog</I> and 
<I>showModelessDialog</I>. The <I>showModalDialog 
</I>method allows you to create a modal dialog box that retains the focus until the dialog box is closed. In other words, as 
long as this dialog box is open, the user can't work inside the parent window that 
opened it. The <I>showModelessDialog</I> method allows you to create a modeless dialog 
box. Unlike <I>showModalDialog</I>, the 
<I>showModelessDialog</I> method allows your user to 
continue working in the parent window.</P>


<P>
<A HREF="javascript:fullSize('F03ii03x.htm')"> <img src="images/F03ii03.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-3.</B> <I>Displaying multiple help pages in the same window.</I><!-- /caption -->
</P>

<P>The <I>showModelessDialog</I> and 
<I>showModalDialog</I> methods are similar to the 
<I>open </I>method. The windows that open with 
<I>showModelessDialog</I> and 
<I>showModalDialog</I> act like normal Microsoft Windows dialog boxes in that they always remain on top 
of the parent window. To talk about the position of these windows more 
technically, we say that they have a higher Z-order than the parent window. (The Z-order of 
a window shows the window's position in a stack of overlapping windows.) Also, 
the windows created with <I>showModelessDialog</I> and 
<I>showModalDialog</I> have a default size that makes them appear more like normal Windows dialog boxes, whereas the 
window opened by a call to the <I>open </I>method has the default height and width of a 
normal Internet Explorer window.</P>
<P>Calling <I>showModelessDialog</I> and 
<I>showModalDialog</I> is easy. All we need is the URL of the Web page that we want to show in the newly opened dialog box. As 
with the <I>open </I>method, we can pass different parameter values to specify how the new 
dialog box should appear. However, 
<I>showModelessDialog</I> and 
<I>showModalDialog</I> don't return a <I>window 
</I>object. To see how easily we can call them, take a look at 
this JScript code:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>showModalDialog(&quot;http://www.microsoft.com&quot;);
showModelessDialog(&quot;http://www.microsoft.com&quot;);
</PRE>
</td></tr></table></p>

<A NAME="83"><H3>Properties</H3></A>

<P>In Internet Explorer 5, the <I>window </I>object has 28 properties&#8212;far too many to 
discuss in detail. Table 3-2 provides a short description of all the properties of the 
<I>window </I>object, and we'll look briefly at those most widely used: 
<I>document</I>,<I> navigator</I>, <I>event</I>, 
<I>history</I>, and <I>location</I>.</P>

<P><B>Table 3-2.</B> <i>Properties of the <I>window</I> Object</i></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Property</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP"><I>clientInformation</I></TD>
<TD VALIGN="TOP">Returns the 
<I>navigator</I> object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>closed</I></TD>
<TD VALIGN="TOP">Returns a Boolean value to signify whether the specified 
window is closed</TD>
</TR><TR>
<TD VALIGN="TOP"><I>complete</I></TD>
<TD VALIGN="TOP">Returns a Boolean value to indicate whether the 
specified window is fully loaded</TD>
</TR><TR>
<TD VALIGN="TOP"><I>dataTransfer</I></TD>
<TD VALIGN="TOP">Provides access to different predefined clipboard 
formats that can be used in transferring data</TD>
</TR><TR>
<TD VALIGN="TOP"><I>defaultStatus</I></TD>
<TD VALIGN="TOP">Sets or retrieves the message that will be displayed in 
the status bar at the bottom of the window by default</TD>
</TR><TR>
<TD VALIGN="TOP"><I>dialogArguments</I></TD>
<TD VALIGN="TOP">Sets or retrieves the arguments passed into a dialog 
window that was created by a call to either <I>showModalDialog</I> or <I>showModelessDialog</I></TD>
</TR><TR>
<TD VALIGN="TOP"><I>dialogHeight</I></TD>
<TD VALIGN="TOP">Sets or retrieves the height of a dialog window that was 
created by a call to either <I>showModalDialog</I> or 
<I>showModelessDialog</I></TD>
</TR><TR>
<TD VALIGN="TOP"><I>dialogLeft</I></TD>
<TD VALIGN="TOP">Sets or retrieves the left coordinate of a dialog window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>dialogTop</I></TD>
<TD VALIGN="TOP">Sets or retrieves the top coordinate of a dialog window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>dialogWidth</I></TD>
<TD VALIGN="TOP">Sets or retrieves the width of a dialog window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>document</I> </TD>
<TD VALIGN="TOP">Returns the object that represents an HTML document 
loaded into a window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>event</I></TD>
<TD VALIGN="TOP">Returns the <I>event</I> object that provides information about 
an event that's been fired</TD>
</TR><TR>
<TD VALIGN="TOP"><I>external</I></TD>
<TD VALIGN="TOP">Returns an object that represents the host of the Web 
page (This property is discussed further in <A HREF="ch09a.htm">Chapter 9</A>.)</TD>
</TR><TR>
<TD VALIGN="TOP"><I>history</I></TD>
<TD VALIGN="TOP">Returns an object that provides information regarding 
previously visited URLs</TD>
</TR><TR>
<TD VALIGN="TOP"><I>length</I></TD>
<TD VALIGN="TOP">Returns the number of frames contained in a 
particular window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>location</I></TD>
<TD VALIGN="TOP">Returns an object that provides information about the 
current URL</TD>
</TR><TR>
<TD VALIGN="TOP"><I>name</I></TD>
<TD VALIGN="TOP">Sets or retrieves the name of the window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>navigator</I></TD>
<TD VALIGN="TOP">Returns an object that provides information about 
Internet Explorer, such as the major and minor version numbers</TD>
</TR><TR>
<TD VALIGN="TOP"><I>offscreenBuffering</I></TD>
<TD VALIGN="TOP">Sets or retrieves whether objects are rendered offscreen 
before being displayed to the user</TD>
</TR><TR>
<TD VALIGN="TOP"><I>opener</I></TD>
<TD VALIGN="TOP">Sets or retrieves the object that opened the current window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>parent</I></TD>
<TD VALIGN="TOP">Returns the parent object of the current window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>returnValue</I></TD>
<TD VALIGN="TOP">Sets or retrieves the return value from a dialog window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>screen</I></TD>
<TD VALIGN="TOP">Returns an object that provides information regarding 
the client's screen</TD>
</TR><TR>
<TD VALIGN="TOP"><I>screenLeft</I></TD>
<TD VALIGN="TOP">Returns the coordinates of the left edge of the client's screen</TD>
</TR><TR>
<TD VALIGN="TOP"><I>screenTop</I></TD>
<TD VALIGN="TOP">Returns the coordinates of the top edge of the client's screen</TD>
</TR><TR>
<TD VALIGN="TOP"><I>self</I></TD>
<TD VALIGN="TOP">Returns the current <I>window</I> object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>status</I></TD>
<TD VALIGN="TOP">Sets or retrieves the text that's displayed in the status bar 
of the window</TD>
</TR><TR>
<TD VALIGN="TOP"><I>top</I></TD>
<TD VALIGN="TOP">Returns the topmost 
<I>window</I> object that is its own parent</TD>
</TR></TABLE></P>

     
<P>The <I>document </I>property is probably the most important of the window 
properties that you'll use. The <I>document </I>property gives you access to the Web 
page document and allows you to retrieve and change the data on a page. The 
<I>document </I>property of the <I>window </I>object returns an object&#8212;the 
<I>document </I>object. I'll cover the <I>document 
</I>object in more detail following the discussion of the 
<I>window </I>object.</P>
<P>The <I>navigator </I>property is another important property, especially if you 
want to provide support for different versions of Internet Explorer or even other 
browsers. The <I>navigator </I>property returns the 
<I>navigator </I>object, as you might have 
guessed. This object gives you access to version information for the browser. I'll talk more 
about this object in the &quot;<I> navigator</I> Object&quot; section of this chapter.</P>
<P>The <I>window </I>object's event property returns an 
<I>event</I> object that provides information about an event that was fired somewhere in the window. This object 
contains information for any event that was fired for any object on the Web page 
because of what's known as event bubbling. Most events that are fired for objects on a 
Web page &quot;bubble up&quot; the object model hierarchy. Eventually, all events that bubble 
up reach the <I>window </I>object, so it makes sense to keep information about events in 
an object that can be retrieved from a property of the 
<I>window </I>object. I'll talk more about the 
<I>event</I> object in the &quot;<I> event</I> Object&quot; section of this chapter.</P>
<P>The <I>history </I>property returns a 
<I>history</I> object that provides information about 
URLs that Internet Explorer has navigated to previously. The methods of this object 
won't give you the actual URLs of the previously navigated sites, but they will allow you 
to cause Internet Explorer to navigate backward or forward one or 
more pages in the history. I won't discuss this object further, but I encourage you to read the 
documentation for it in the MSDN Online Web Workshop 
<I>(<a href="http://msdn.microsoft.com/workshop" target="_window2">http://msdn.microsoft.com/workshop</a>)</I>.</P>
<P>The <I>location </I>property returns a 
<I>location</I> object that provides information 
about the current URL that Internet Explorer has navigated to in the window. This 
object has a property named <I>href</I> that gives you the full current URL. Also, this object 
has other properties that give you different sections of the URL, such as the path 
name, port number, and text that follows a hash symbol (#) or a question mark (?) in 
the URL. I won't discuss the <I>location </I>object further, but I encourage you to 
visit&#8212;you guessed it&#8212;MSDN Online Web Workshop.</P>

<A NAME="84"><H3>Events</H3></A>

<P>In Internet Explorer 5, the <I>window </I>object fires 10 events. Remember, though, 
that you can handle any event that bubbles from below the 
<I>window </I>object as if it were fired by the 
<I>window </I>object. Table 3-3 briefly describes all the events that are 
fired directly by the <I>window </I>object. The only event that I'll cover now is 
<I>onload</I>. I'll discuss the <I>onafterprint 
</I>and <I>onbeforeprint </I>events later in this chapter in the 
&quot;<A HREF="ch03d.htm#105">Printing Support</A>&quot; section.</P>


<P><B>Table 3-3.</B> <I>Events of the</I> window <I>Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Event</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP"><I>onafterprint</I></TD>
<TD VALIGN="TOP">Fires immediately after printing the HTML document in 
the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onbeforeprint</I></TD>
<TD VALIGN="TOP">Fires immediately before printing the HTML document in 
the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onbeforeunload</I></TD>
<TD VALIGN="TOP">Fires before a page is unloaded.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onblur</I></TD>
<TD VALIGN="TOP">Fires when the window loses the focus.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onerror</I></TD>
<TD VALIGN="TOP">Fires when there's an error loading the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onfocus</I></TD>
<TD VALIGN="TOP">Fires when the window receives the focus.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onhelp</I></TD>
<TD VALIGN="TOP">Fires when the user presses the F1 key to invoke the help 
function. This event fires only if the window has the focus.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onload</I></TD>
<TD VALIGN="TOP">Fires when the document in the window is completely 
finished loading.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onresize</I></TD>
<TD VALIGN="TOP">Fires when the size of the window is about to change.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onunload</I></TD>
<TD VALIGN="TOP">Fires right before the window is unloaded.</TD>
</TR></TABLE></P>

     
<P>The <I>onload </I>event is fired when the Web page document is completely 
finished loading. Only after <I>onload </I>is fired can you safely call methods of objects on the 
Web page, because <I>onload </I>indicates that every object on the Web page has finished 
loading and is ready to be used.</P>

<P><DIV CLASS="WARNING"><BLOCKQUOTE><B>WARNING</B><HR>
In the time that I spent as a developer support engineer for 
Microsoft, I saw many problems occur when users tried to access methods or 
properties of a document or HTML elements on a page before the 
<I>onload </I>event was fired. Wait until the <I>onload 
</I>event fires before you try to change or retrieve 
information about the Web page. I can't stress this enough. Handling the 
<I>onload </I>event is just as easy as handling any other event from an object, as I showed you earlier.
</BLOCKQUOTE></DIV></P>

<P>Here is one way to handle the <I>onload</I> event from VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Window_onLoad
   ' Now you can safely access the document.
End Sub
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Remember the third approach to handling the <I>onload 
</I>event? (If you don't remember the other approaches to handling the 
<I>onload</I> event, I encourage you to reread the &quot;<A HREF="ch03c.htm#84">Events</A>&quot; section. The third approach was to handle the 
event by specifying it as an attribute of an HTML tag. You might be wondering how to 
handle window events without a &lt;WINDOW&gt; tag. Certain window 
events&#8212;<I>onblur</I>, <I>onfocus</I>, 
<I>onload</I>, and <I>onunload</I>&#8212;can be handled without a &lt;WINDOW&gt; tag by specifying 
each as an attribute of the &lt;BODY&gt; tag. In the following example, which shows how 
to do this in JScript, the <I>WindowLoaded 
</I>JScript function is called when the window is completely finished loading:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;BODY onload=&quot;WindowLoaded()&quot;&gt;
</PRE>
</td></tr></table></p>

<A NAME="85"><H3>Collections</H3></A>

<P>The <I>window </I>object has only one 
collection&#8212;<I>frames</I>&#8212;which is a collection of all 
the frames on a Web page; in other words, it contains all the 
<I>window </I>objects that are in frames on the current page. If you need access to the actual 
<I>frame</I> object, you should use the 
<I>document.all</I> collection, which I'll explain when discussing the 
<I>document </I>object in the next section. Like other collections, the 
<I>frames </I>collection has an <I>item </I>method that you can use to access a specific frame in the collection by 
numeric index or name. The <I>item </I>method for the 
<I>frames</I> collection doesn't return a collection if you specify a string for the first parameter. It always returns the first 
<I>window </I>object that has the given name.</P>
<P>The <I>frames</I> collection also has a <I>length 
</I>property that you can use to retrieve the number of 
<I>window</I> objects in the collection. If the Web page has no frames, 
the <I>length </I>property returns the value 
<I>0</I>.</P>
<P>If we write script for a Web page that will be displayed in a frame, we can 
easily access methods, properties, and so forth, of the other frames by using the 
parent property of the <I>window </I>object. For example, let's say we're writing VBScript for 
a page that will be displayed in the second frame. (Remember that because the 
items in a collection are zero-based, the first frame is frame 0, and the second frame is 
frame 1.) The script we write will cause frame 0 to navigate to a new URL. Here's the 
VBScript that displays a page in the second frame:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub btn_onclick
   parent.frames(1).navigate &quot;http://www.microsoft.com&quot;
End Sub
</PRE>
</td></tr></table></p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
Internet Explorer doesn't allow you to access properties or methods 
of a frame's objects that are in a different domain from the one in which the 
script is written. In other words, if frame 0 has navigated to the microsoft.com 
domain, and frame 1 is in a different domain, script on the page in frame 1 can't 
access the properties and methods of the objects in frame 0. This security 
restriction was implemented to keep hidden frames from monitoring where you 
navigate to or obtaining password information from you.
</BLOCKQUOTE></DIV></P>

<A NAME="86"><H2><I>document</I> Object</H2></A>
<P>The <I>document </I>object represents the HTML document and is one of the most 
important objects in the object model. The <I>document 
</I>object allows you to obtain access to the elements on a Web page and leverage the power of DHTML. As with 
the <I>window </I>object, I'll cover the most important methods, properties, events, and 
collections of the <I>document </I>object.</P>

<A NAME="87"><H3>Methods</H3></A>

<P>The <I>document</I> object has 33 methods. Table 3-4 gives a short description of all 
of them. The methods that you'll probably use most often are 
<I>open</I>, <I>write, writeln</I>, and 
<I>close</I>. I'll talk a little more about these and show you how to use them. I'll also 
talk about two really exciting 
methods&#8212;<I>createElement</I> and 
<I>insertAdjacentElement</I>.</P>

<P><B>Table 3-4.</B> <I>Methods of the </I>document<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Method</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP"><I>appendChild</I></TD>
<TD VALIGN="TOP">Appends an element to the document as a child.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>applyElement</I></TD>
<TD VALIGN="TOP">Applies one element to another element.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>attachEvent</I></TD>
<TD VALIGN="TOP">Attaches a function to an event so that the function 
will be called whenever the event fires.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>clear</I></TD>
<TD VALIGN="TOP">Clears the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>cloneNode</I></TD>
<TD VALIGN="TOP">Makes a copy of the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>close</I></TD>
<TD VALIGN="TOP">Closes and flushes the <I>document object.</I></TD>
</TR><TR>
<TD VALIGN="TOP"><I>createDocumentFragment</I></TD>
<TD VALIGN="TOP">Creates a new instance of the 
<I>document object</I>.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>createElement</I></TD>
<TD VALIGN="TOP">Creates an instance of an element for the specified tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>createStyleSheet</I></TD>
<TD VALIGN="TOP">Creates a style sheet for the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>createTextNode</I></TD>
<TD VALIGN="TOP">Creates a text string from the given value.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>detachEvent</I></TD>
<TD VALIGN="TOP">Detaches the specified function from an event so 
that the function will no longer be called when the 
event fires.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>elementFromPoint</I></TD>
<TD VALIGN="TOP">Returns the element at the specified 
<I>x</I> and <I>y</I> coordinates.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>execCommand</I></TD>
<TD VALIGN="TOP">Executes a command.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>getAdjacentText</I></TD>
<TD VALIGN="TOP">Returns the adjacent text character.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>hasChildNodes</I></TD>
<TD VALIGN="TOP">Returns whether or not the given node has children.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>insertAdjacentElement</I></TD>
<TD VALIGN="TOP">Inserts an element at the specified location.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>insertBefore</I></TD>
<TD VALIGN="TOP">Inserts an element into the document hierarchy.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>open</I></TD>
<TD VALIGN="TOP">Opens the document. This is typically used in 
conjunction with <I>write</I> or <I>writeln</I>.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>queryCommandEnabled</I></TD>
<TD VALIGN="TOP">Returns whether the command can be successfully 
executed using <I>execCommand</I>.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>queryCommandIndeterm</I></TD>
<TD VALIGN="TOP">Returns whether the state of the specified command 
is indeterminate.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>queryCommandState</I></TD>
<TD VALIGN="TOP">Returns the current state of the command.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>queryCommandSupported</I></TD>
<TD VALIGN="TOP">Returns whether the current command is supported 
on the current range.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>queryCommandValue</I></TD>
<TD VALIGN="TOP">Returns the current value of the given command.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>recalc</I></TD>
<TD VALIGN="TOP">Recalculates all dynamic properties in the current 
document. (I cover this method later in this chapter in 
the section &quot;<A HREF="ch01e.htm#21">Dynamic Properties</A>.&quot;)</TD>
</TR><TR>
<TD VALIGN="TOP"><I>releaseCapture</I></TD>
<TD VALIGN="TOP">Removes mouse capture from the document. (I 
cover this method later in this chapter in the section 
&quot;<A HREF="ch01e.htm#21">Dynamic Properties</A>.&quot;)</TD>
</TR><TR>
<TD VALIGN="TOP"><I>removeChild</I></TD>
<TD VALIGN="TOP">Removes a child node from an element.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>removeNode</I></TD>
<TD VALIGN="TOP">Removes the document from the document hierarchy.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>replaceAdjacentText</I></TD>
<TD VALIGN="TOP">Replaces the adjacent text with the specified text.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>replaceChild</I></TD>
<TD VALIGN="TOP"> Replaces an existing child element with a new 
child element.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>replaceNode</I></TD>
<TD VALIGN="TOP">Replaces the document with a new element.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>swapNode</I></TD>
<TD VALIGN="TOP">Switches the location of two objects in the 
document hierarchy.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>write</I></TD>
<TD VALIGN="TOP">Writes HTML code to the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>writeln</I></TD>
<TD VALIGN="TOP">Writes HTML code to the document, followed by a 
newline character.</TD>
</TR></TABLE></P>

     
<P>To write HTML in the document, we can use the 
<I>open</I>, <I>write, writeln,</I> and <I>close 
</I>methods in conjunction. You might be wondering why we'd want to do this 
when we could just type in the HTML code when we create the page. Well, let's say 
we're creating a Web-based database application. In this application, we want the 
contents of our Web page to differ depending on the values stored in the database, so we 
use a little script code in combination with calls to the 
<I>open</I>, <I>write, writeln</I>, and <I>close 
</I>methods. Here's an example of how to use the method calls:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   document.open

   ' val is a Boolean data value that was previously 
   ' retrieved from the database
   If val = True Then
      document.write &quot;&lt;H1&gt;Heading 1&lt;/H1&gt;&quot;
   Else
      document.write &quot;&lt;H1&gt;Heading 2&lt;/H1&gt;&quot;
   End If
   
   document.close   ' You must have matching open and close calls
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Obviously, this example doesn't accomplish anything. Notice that this script 
code isn't inside a subroutine, which means that it's inline script code that will be 
executed as the document is being loaded. In this script code, we first called the 
<I>open</I> method to open the document, which is just like opening a file. Then, based on a 
Boolean value we previously retrieved from the database, we wrote out either Heading 1 
or Heading 2. Finally, we closed the document.</P>

<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>
To be safe, always have matching calls to 
<I>open </I>and <I>close.</I> If you don't, you might not run into problems immediately, but trust me&#8212;you will 
eventually. I've seen it happen many times.
</BLOCKQUOTE></DIV></P>

<P>The other two methods I want to introduce you to are 
<I>createElement</I> and 
<I>insertAdjacentElement</I>. These two methods really show the power of DHTML. 
By using them, you can dynamically add HTML elements to your page, perhaps in 
response to user input. The <I>createElement</I> method is used to create a new 
<I>element object</I>, and the <I>insertAdjacentElement 
</I>method is used to insert the element at some position adjacent to another element on the page.</P>
<P>For example, here's a Web page that contains a text box and a button. After 
the user enters his name into the text box and presses the button, an &lt;H2&gt; element 
is inserted into the page with a nice hello message. Listing 3-3 shows the JScript 
code to perform this action. The results of Listing 3-3 are shown in Figure 3-4.</P>

<P><B>Listing 3-3.</B></P>
<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="88"><H3>InsElmt.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Inserting Elements into a Document&lt;/TITLE&gt;
   &lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
      function btnClicked()
      {
         var newElement = document.createElement(&quot;H2&quot;);

         document.body.insertAdjacentElement(&quot;BeforeEnd&quot;, newElement);
         newElement.innerText = &quot;Hello there &quot; + txtName.value;
      }
      &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;INPUT TYPE=&quot;TEXT&quot; ID=&quot;txtName&quot;&gt;
   &lt;BUTTON onclick=&quot;btnClicked()&quot;&gt;SayHello&lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<P>Listing 3-3 deserves closer inspection. The Web page first displayed to the 
user contains only an input text box and a button. When the user enters his name 
into the text box and presses the button, the 
<I>btnClicked</I> function is called, because we hooked this function into the 
<I>onclick</I> event of the &lt;BUTTON&gt; tag as an attribute. 
The <I>btnClicked</I> function firsts created a new element object for the &lt;H2&gt; element 
using the <I>createElement </I>method.</P>

<P>
<A HREF="javascript:fullSize('F03ii04x.htm')"> <img src="images/F03ii04.JPG" width=404 height=270 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-4.</B> <I>Inserting elements into a document.</I><!-- /caption -->
</P>

<P>Next, we called the <I>insertAdjacentElement </I>method by using the 
<I>body </I>object. (We also could have chosen the 
<I>button</I> or <I>input </I>object.) The first parameter of 
the <I>insertAdjacentElement </I>is important. It tells Internet Explorer where to place the 
new element adjacent to another. We can specify four values: 
<I>BeforeBegin</I>, <I>AfterBegin</I>, 
<I>BeforeEnd</I>, and <I>AfterEnd</I>. In the case of the 
<I>body </I>object, the only allowable values are 
<I>AfterBegin</I> and <I>BeforeEnd</I>. All values are valid for other objects.</P>
<P>After inserting the new element, we set its associated text to the hello 
message by calling the <I>innerText</I> method of the newly created object. I will talk more 
about <I>innerText</I> later in this chapter in the section &quot;<A HREF="ch03c.htm#100">Other HTML Elements Important To DHTML</A>&quot;</P>

<A NAME="89"><H3>Properties</H3></A>

<P>The <I>document </I>object contains 35 properties. A short description of each is 
shown in Table 3-5. I'll discuss only one of these properties, the 
<I>body</I> property, at some length. (You were already introduced to the 
<I>body</I> property in the example provided in the section titled &quot;<A HREF="ch03c.htm#87">Methods</A>&quot;) The <I>body</I> property gives you access to the object that is represented in the document by 
the &lt;BODY&gt; tag. This object allows you to obtain and change the contents of the 
elements displayed to the user. A few methods enable you to change the 
document dynamically, and these are discussed later in this section.</P>

<P><B>Table 3-5.</B> <I>Properties of the </I>document<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Property</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP"><I>activeElement</I></TD>
<TD VALIGN="TOP">Returns the object that has the keyboard focus.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>aLinkColor</I></TD>
<TD VALIGN="TOP">Sets or retrieves the color for all active links in the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>bgColor</I></TD>
<TD VALIGN="TOP">Sets or retrieves the background color of the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>body</I></TD>
<TD VALIGN="TOP">Returns the <I>body </I>object that's represented by the &lt;BODY&gt; tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>charset</I></TD>
<TD VALIGN="TOP">Returns the character set for the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>cookie</I></TD>
<TD VALIGN="TOP">Sets or retrieves the string value of a cookie, which is a 
small piece of information stored by the browser.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>defaultCharset</I></TD>
<TD VALIGN="TOP">Sets or retrieves the default character set.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>designMode</I></TD>
<TD VALIGN="TOP">Switches between browsing and editing mode.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>documentElement</I></TD>
<TD VALIGN="TOP">Returns the <I>document 
</I>object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>domain</I></TD>
<TD VALIGN="TOP">Sets or retrieves the security domain for the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>expando</I></TD>
<TD VALIGN="TOP">Sets or retrieves whether or not arbitrary variables can be created within the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>fgColor</I></TD>
<TD VALIGN="TOP">Sets or retrieves the foreground text color.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>fileCreatedDate</I></TD>
<TD VALIGN="TOP">Returns the date a file was created.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>fileModifiedDate</I></TD>
<TD VALIGN="TOP">Returns the date a file was last modified.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>fileSize</I></TD>
<TD VALIGN="TOP">Returns the size of a file.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>firstChild</I></TD>
<TD VALIGN="TOP">Returns a reference to the first child in the 
<I>childNodes</I> collection.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>lastChild</I></TD>
<TD VALIGN="TOP">Returns a reference to the last child in the 
<I>childNodes</I> collection.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>lastModified</I></TD>
<TD VALIGN="TOP">Returns the date the Web page was last modified.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>linkColor</I></TD>
<TD VALIGN="TOP">Sets or retrieves the color of the hyperlinks in a document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>location</I></TD>
<TD VALIGN="TOP">Returns an object that contains information about the 
current URL.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>nextSibling</I></TD>
<TD VALIGN="TOP">Returns a reference to the next sibling of an object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>nodeName</I></TD>
<TD VALIGN="TOP">Returns the name of an element.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>nodeType</I></TD>
<TD VALIGN="TOP">Returns the type of the node requested.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>nodeValue</I></TD>
<TD VALIGN="TOP">Sets or retrieves a node's value.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>parentNode</I></TD>
<TD VALIGN="TOP">Returns the parent node of an object in the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>parentWindow</I></TD>
<TD VALIGN="TOP">Returns the parent window for the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>previousSibling</I></TD>
<TD VALIGN="TOP">Returns a reference to the sibling immediately preceding 
the specified object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>protocol</I></TD>
<TD VALIGN="TOP">Returns the protocol (access method) of a particular URL.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>readyState</I></TD>
<TD VALIGN="TOP">Returns the current state of the document (in other 
words, whether or not the document is finished loading).</TD>
</TR><TR>
<TD VALIGN="TOP"><I>referrer</I></TD>
<TD VALIGN="TOP">Returns the URL of the previous Web page.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>selection</I></TD>
<TD VALIGN="TOP">Returns an object that represented the currently selected 
block of text, object, or objects.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>title</I></TD>
<TD VALIGN="TOP">Returns an object that contains the title of the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>uniqueID</I></TD>
<TD VALIGN="TOP">Returns a unique identifier for the document. This unique 
identifier is generated when you access the <I>uniqueID 
</I>property.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>URL</I></TD>
<TD VALIGN="TOP">Sets or retrieves the URL of the current document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>vlinkColor</I></TD>
<TD VALIGN="TOP">Sets or retrieves the color of hyperlinks that have already 
been visited.</TD>
</TR></TABLE></P>

     
<A NAME="90"><H3>Events</H3></A>

<P>The <I>document </I>object has 21 events, which are listed in Table 3-6. Because 
you've already seen some of the most important events and the rest are pretty 
self-explanatory, I won't discuss them further.</P>

<P><B>Table 3-6.</B> <I>Events of the </I>document<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Event</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>onclick</I></TD>
<TD VALIGN="TOP">Fires when the user clicks the left mouse button in 
the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>oncontextmenu</I></TD>
<TD VALIGN="TOP">Fires when the user clicks the right mouse button in the 
client area of the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondblclick</I></TD>
<TD VALIGN="TOP">Fires when the user double-clicks inside the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondrag</I></TD>
<TD VALIGN="TOP">Fires continuously on the <I>source 
</I>object during a drag operation</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondragend</I></TD>
<TD VALIGN="TOP">Fires on the <I>source 
</I>object at the close of a drag operation when the mouse is released</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondragenter</I></TD>
<TD VALIGN="TOP">Fires on the target element when the document being 
dragged enters a drop target that is valid</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondragleave</I></TD>
<TD VALIGN="TOP">Fires on the target element object during a drag operation when the mouse moves out of a valid drop target</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondragover</I></TD>
<TD VALIGN="TOP">Fires on the target element while the document being 
dragged is over a valid drop target</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondragstart</I></TD>
<TD VALIGN="TOP">Fires on the <I>source </I>object when the user first starts to drag a selection of text or an object</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ondrop</I></TD>
<TD VALIGN="TOP">Fires on the target object during drag-and-drop when 
the mouse button is released</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onhelp</I></TD>
<TD VALIGN="TOP">Fires when the user presses the F1 key</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onkeydown</I></TD>
<TD VALIGN="TOP">Fires on the down stroke when the user presses a key</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onkeypress</I></TD>
<TD VALIGN="TOP">Fires after the user presses a key</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onkeyup</I></TD>
<TD VALIGN="TOP">Fires when the user releases a key</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmousedown</I></TD>
<TD VALIGN="TOP">Fires when the user clicks on the document with the right 
or left mouse button</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmousemove</I></TD>
<TD VALIGN="TOP">Fires when the user moves the mouse pointer 
anywhere over the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmouseout</I></TD>
<TD VALIGN="TOP">Fires when the user moves the mouse pointer outside 
the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmouseover</I></TD>
<TD VALIGN="TOP">Fires when the user moves the mouse pointer into 
the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onmouseup</I></TD>
<TD VALIGN="TOP">Fires when the user releases a mouse button while over 
the document</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onpropertychange</I></TD>
<TD VALIGN="TOP">Fires when a property of the document changes</TD>
</TR><TR>
<TD VALIGN="TOP"><I>onreadystatechange</I></TD>
<TD VALIGN="TOP">Fires whenever the ready state for document has changed</TD>
</TR></TABLE></P>


<A NAME="91"><H3>Collections</H3></A>

<P>The <I>document</I> object contains 14 collections, described in Table 3-7. Once you 
know how to work with one collection, you can work with them all, so I'm only going 
to discuss the <I>all </I>collection. The <I>all 
</I>collection comprises all elements contained in 
a document.</P>
<P>The <I>all</I> collection contains three methods and one property. I've already 
discussed the property (<I>length</I>) and one of the methods 
(<I>item </I>). Another method is <I>tags</I>. The 
<I>tags </I>method will retrieve a collection of all the objects in the 
<I>all</I> collection that have the specified HTML tag name. The final method is 
<I>urns</I>. It returns a collection of all the objects to which the specified behavior is attached. (<A HREF="ch11a.htm">Chapter 11</A> covers behaviors in more detail.)</P>

<P><B>Table 3-7.</B> <I>Collections of the </I>document<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Collection</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>all</I></TD>
<TD VALIGN="TOP">Returns a collection of all elements contained in the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>anchors</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>anchor</I> objects in the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>applets</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>applet</I> objects in the document. These objects are represented by the &lt;APPLET&gt; and &lt;OBJECT&gt; tags.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>attributes</I></TD>
<TD VALIGN="TOP">Returns a collection of attributes of an object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>childNodes</I></TD>
<TD VALIGN="TOP">Returns a collection of the child nodes for the specified object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>children</I></TD>
<TD VALIGN="TOP">Returns a collection of the direct descendants of an object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>embeds</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>embed</I> objects in the document. The 
<I>embed</I> object is represented in the document by the &lt;EMBED&gt; tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>forms</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>form</I> objects in the document.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>frames</I></TD>
<TD VALIGN="TOP"> Returns a collection of all the 
<I>window</I> objects that exist on a Web page.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>images</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>img</I> objects in the document. The <I>img</I> object is represented by the &lt;IMG&gt; tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>links</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>anchor</I> objects that specify the <I>href</I> property and all the 
<I>area </I>objects in the document. The <I>area 
</I>object is represented by the &lt;AREA&gt; tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>scripts</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>script</I> objects in the document. The 
<I>script</I> object is represented in the document by the &lt;SCRIPT&gt; tag.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>styleSheets</I></TD>
<TD VALIGN="TOP">Returns a collection of all the 
<I>styleSheet</I> objects in the document.</TD>
</TR></TABLE></P>

     
<P>To learn how to use the <I>all </I>collection, look at this simple JScript example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
function listAllElements()
{
   for (var i = 0; i &lt; document.all.length; i++)
   {
      alert(document.all(i).tagName);
   }
}
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>This JScript function loops through all the objects in the 
<I>all </I>collection. The <I>length </I>property specifies how many objects are in the collection. For each iteration 
through the loop, an alert dialog box is displayed to list the name of the tag at the 
current position in the collection. See how easy it is to use collections?</P>

<A NAME="92"><H2><I>navigator</I> Object</H2></A>
<P>The <I>navigator </I>object provides information about the browser in which your Web 
application is running, including the type of browser and its version. The most 
important component of the <I>navigator </I>object is its 
properties. I won't cover the methods and collections of the 
<I>navigator</I> object for a couple of reasons. First, it has only 
two methods, which aren't used that often. Second, the two collections are provided 
only for compatibility with other browsers and are therefore not implemented. No 
events exist for the <I>navigator </I>object.</P>

<A NAME="93"><H3>Properties</H3></A>

<P>The properties of the <I>navigator </I>object are listed in Table 3-8.</P>

<P><B>Table 3-8.</B> <I>Properties of the </I>navigator<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Property</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>appCodeName</I></TD>
<TD VALIGN="TOP">Returns the code name of the browser. (<I>Mozilla </I>is the code name returned by Internet Explorer.)</TD>
</TR><TR>
<TD VALIGN="TOP"><I>appMinorVersion</I></TD>
<TD VALIGN="TOP">Returns the minor version of the browser.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>appName</I></TD>
<TD VALIGN="TOP">Returns the name of the browser.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>appVersion</I></TD>
<TD VALIGN="TOP">Returns the platform and version of the browser.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>browserLanguage</I></TD>
<TD VALIGN="TOP">Returns the current browser language.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>cookieEnabled</I></TD>
<TD VALIGN="TOP">Returns whether or not client-side cookies are enabled.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>cpuClass</I></TD>
<TD VALIGN="TOP">Returns a string that indicates the CPU class of the system on which the browser is running&#8212;for example, x86 and Alpha.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>online</I></TD>
<TD VALIGN="TOP">Returns whether or not the system is running in 
offline mode. This property is true when the user has chosen 
Work Offline from the Internet Explorer File menu.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>platform</I></TD>
<TD VALIGN="TOP">Returns the platform on which the browser is running.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>systemLanguage</I></TD>
<TD VALIGN="TOP">Returns the default language for the system.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>userAgent</I></TD>
<TD VALIGN="TOP">Returns the HTTP user-agent request header as a string.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>userLanguage</I></TD>
<TD VALIGN="TOP">Returns the current user language.</TD>
</TR></TABLE></P>

     
<P>One of the most important reasons you'll use the 
<I>navigator </I>object is to determine the type and version of the browser in which your Web page is running. 
You can determine the name and version of the browser from the 
<I>appVersion</I> property. The string returned by the property contains the browser version, type, and the 
platform on which the browser is installed. For example, the string returned by 
the <I>appVersion</I> property for Internet Explorer 5 running on Windows NT is &quot;4.0 (compatible; MSIE 5.0; Windows NT)&quot;. We can use JScript or VBScript string 
indexing functions to retrieve the information we want. For example, here's how we can 
extract the type and version of the browser in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   var navVersion = navigator.appVersion;
   var strArray = navVersion.split(&quot;;&quot;);
   alert(&quot;The type and version of the browser are &quot; + strArray[1]);
</PRE>
</td></tr></table></p>
<P>We created a variable named <I>navVersion </I>that holds the string that is 
returned from the <I>appVersion </I>property. This variable is a JScript 
<I>string </I>object, so we then call the <I>split 
</I>method to split the string into an array of strings. The string is split 
based on the semicolon. The string returned from 
<I>appVersion </I>gives us an array of three strings. The string at position 1 in the array is the string that indicates the type 
and version of the browser.</P>
<P>If we merely want to retrieve the name of the browser, the 
<I>navigator </I>object provides us with a property named 
<I>appName </I>that returns the name of the 
browser. This string is typically more descriptive than the name of the browser in the 
<I>appVersion </I>string. Here's the VBScript code to display the name of the browser:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   MsgBox navigator.appName
</PRE>
</td></tr></table></p>

<A NAME="94"><H2><I>event</I> Object</H2></A>
<P>The <I>event </I>object is extremely important when handling events on a Web page. 
It provides you with information about the event that occurred. This information 
could be the object that fired the event, the type of event, or other pertinent 
information such as the <I>x</I>-coordinate and 
<I>y</I>-coordinate of the mouse pointer when the 
event was fired.</P>
<P>Just like the <I>navigator </I>object, the most important component of the 
<I>event </I>object is its properties. In fact, the 
<I>event </I>object doesn't have any methods or events, 
and it has only two collections, which are of minor importance. So I'll concentrate on 
the properties and only briefly mention the collections of the 
<I>event </I>object.</P>

<A NAME="95"><H3>Properties</H3></A>

<P>The <I>event </I>object contains 26 properties, short descriptions of which are shown 
in Table 3-9. Each of the properties of the 
<I>event </I>object is pretty easy to understand. To get you started, we'll look at a couple of them: 
<I>srcElement </I>and <I>cancelBubble</I>. The <I>srcElement 
</I>property returns a reference to the object that fired 
the event. Using this reference, you can obtain information about the object, such 
as its ID, name, and type. For example, we can create event handlers that handle 
all <I>onmouseover </I>events for the document. Each time the mouse is moved over an 
element on the Web page, the <I>onmouseover</I> event fires for that element. Because of 
the event bubbling mechanism we talked about earlier, the 
<I>onmouseover</I> event will bubble up the object hierarchy. If 
<I>onmouseover</I> had no handlers to cancel the bubbling, 
it would eventually reach the <I>document</I> object.</P>

<P><B>Table 3-9.</B> <I>Properties of the </I>event<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Property</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>altKey</I></TD>
<TD VALIGN="TOP">Returns whether the Alt key is pressed or not.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>button</I></TD>
<TD VALIGN="TOP">Returns which mouse button, if any, is pressed.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>cancelBubble</I></TD>
<TD VALIGN="TOP">Sets or retrieves whether or not the current event should 
bubble up the hierarchy of event handlers.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>clientX</I></TD>
<TD VALIGN="TOP">Returns the <I>x</I>-coordinate of the mouse pointer's position 
when the mouse button is clicked. This coordinate is relative to the 
size of the client area of the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>clientY</I></TD>
<TD VALIGN="TOP">Returns the <I>y</I>-coordinate of the mouse pointer's position 
when the mouse button is clicked. This coordinate is relative to the 
size of the client area of the window.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>ctrlKey</I></TD>
<TD VALIGN="TOP">Returns whether or not the Ctrl key is pressed.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>dataFld</I></TD>
<TD VALIGN="TOP">Returns the data column that is affected by the 
<I>oncellchange</I> event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>fromElement</I></TD>
<TD VALIGN="TOP">Returns the object that the mouse pointer is exiting. This 
property applies only during the 
<I>onmouseover</I> and <I>onmouseout</I> events.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>keyCode</I></TD>
<TD VALIGN="TOP">Sets or retrieves the Unicode key code of the key that caused the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>offsetX</I></TD>
<TD VALIGN="TOP">Returns the horizontal coordinate of the mouse pointer's 
position. This coordinate is relative to the object that fired the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>offsetY</I></TD>
<TD VALIGN="TOP">Returns the vertical coordinate of the mouse pointer's 
position. This coordinate is relative to the object that fired the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>propertyName</I></TD>
<TD VALIGN="TOP">Returns the name of the property that has changed. This 
<I>event</I> object property should be used with the 
<I>onpropertychange</I> event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>reason</I></TD>
<TD VALIGN="TOP">Returns the reason for completion for a data source object.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>recordset</I></TD>
<TD VALIGN="TOP">Returns a recordset if the object is a data provider.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>repeat</I></TD>
<TD VALIGN="TOP">Returns whether or not an event is being repeated.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>returnValue</I></TD>
<TD VALIGN="TOP">Sets or retrieves the value that will be returned from the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>screenX</I></TD>
<TD VALIGN="TOP">Returns the <I>x</I>-coordinate of the mouse pointer's position, in 
pixels. This position is relative to the screen.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>screenY</I></TD>
<TD VALIGN="TOP">Returns the <I>y</I>-coordinate of the mouse pointer's position, in 
pixels. This position is relative to the screen.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>shiftKey</I></TD>
<TD VALIGN="TOP">Returns whether or not the Shift key is pressed.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>srcElement</I></TD>
<TD VALIGN="TOP">Returns the object that fired the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>srcFilter</I></TD>
<TD VALIGN="TOP">Returns the <I>filter</I> object that fired the 
<I>onfilterchange</I> event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>srcUrn</I></TD>
<TD VALIGN="TOP">Returns the universal resource name (URN) of the behavior 
that fired the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>toElement</I></TD>
<TD VALIGN="TOP">Returns the object being moved to. This property applies only to the <I>onmouseover </I>and <I>onmouseout </I>events.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>type</I></TD>
<TD VALIGN="TOP">Returns the name of the event.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>x</I></TD>
<TD VALIGN="TOP">Returns the <I>x</I>-coordinate of the mouse pointer's position 
when the event fired.</TD>
</TR><TR>
<TD VALIGN="TOP"><I>y</I></TD>
<TD VALIGN="TOP">Returns the <I>y</I>-coordinate of the mouse pointer's position 
when the event fired.</TD>
</TR></TABLE></P>

<P>To show in VBScript how to create event handlers that handle all 
<I>onmouseover </I>events for the document, we can use the following code and write the name of 
the tag that fired the event in the status area of the browser:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   Sub document_onmouseover
      window.status = window.event.srcElement.tagName
   End Sub
</PRE>
</td></tr></table></p>
<P>In this example, we set the <I>status </I>property of the 
<I>window</I> object to the name of the tag that fired the 
<I>onmouseover</I> event. We get this tag name by first getting 
the <I>event </I>object from the <I>window </I>object.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The previous example is one case in which you must specify the 
<I>window</I> object when accessing one of the properties of the 
<I>window </I>object. The <I>window </I>object must be specified when retrieving the 
<I>event </I>object via the <I>event </I>property. In VBScript, the code can't read 
<I>event.srcElement.tagName</I>. Trying to read this string results in a syntax error. You don't have to specify the 
<I>window</I> object if you're using JScript.
</BLOCKQUOTE></DIV></P>

<P>Next we get the <I>srcElement</I> property from the 
<I>event </I>object. Finally, we get the name of the tag from the 
<I>tagName</I> property of the object returned by the 
<I>srcElement</I> property.</P>
<P>In the previous example, we were able to handle all 
<I>onmouseover</I> events that were fired by elements on the page just by creating an event handler for 
the document's <I>onmouseover</I> event. We can do this because of Internet Explorer's 
event bubbling<I> </I>mechanism. (Not all events bubble up. See the MSDN Online Web 
Workshop documentation for the event in question to see whether it bubbles up.) If 
for some reason we want to cancel event bubbling somewhere along the way, we 
can set the <I>cancelBubble</I> property of the 
<I>event </I>object to <I>true</I>.</P>
<P>For example, let's say that on a page we have a button that has an ID of 
<I>btnClick</I>, and we want to handle the 
<I>onmouseover</I> event for the button to change the text 
of the button. In this case, we don't want the 
<I>onmouseover</I> event to bubble up to the document. We'll also handle the 
<I>onmouseout</I> event to change the text of the 
button back to its original state. In Listing 3-4 is 
the VBScript code that shows how to do this.</P>

<P><B>Listing 3-4.</B></P>
<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="96"><H3>CaBubble.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Canceling Event Bubbling&lt;/TITLE&gt;

   &lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Sub document_onmouseover
      window.status = window.event.srcElement.tagName
   End Sub

   Sub btnClick_onmouseover
      btnClick.value = &quot;Mouse Over&quot;
      window.event.cancelBubble = True
   End Sub

   Sub btnClick_onmouseout
      btnClick.value = &quot;Click Me&quot;
   End Sub
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;H1&gt;Event Object Example&lt;/H1&gt;
   &lt;BUTTON ID=&quot;btnClick&quot;&gt;Click Me&lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>

<P>In Listing 3-4, we have a button on the page with an ID of 
<I>btnClick</I>. When the <I>onmouseover</I> event for the button fires, we change the text inside the button by 
setting the button's <I>value </I>property to <I>&quot;Mouse Over&quot;</I>. Then we set the 
<I>cancelBubble</I> property of the <I>event </I>object to 
<I>true</I> so that the event isn't bubbled up to the 
document&#8212;the document event handler for 
<I>onmouseover</I> isn't called. When we move the 
mouse away from the button, the <I>onmouseout</I> event fires and we set the value of the 
button back to its original value, <I>&quot;Click Me&quot;</I>.</P>

<A NAME="97"><H3>Collections</H3></A>

<P>The <I>event </I>object has only two collections, as shown in Table 3-10.</P>

<P><B>Table 3-10.</B> <I>Collections of the </I>event<I> Object</I></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><i>Collection</i></TH>
<TH><i>Description</i></TH>
</TR><TR>
<TD VALIGN="TOP"><I>bookmarks</I></TD>
<TD VALIGN="TOP">Returns a collection of Microsoft Active Data Objects 
(ADO) bookmarks that are connected to the rows effected by the event</TD>
</TR><TR>
<TD VALIGN="TOP"><I>boundElements</I></TD>
<TD VALIGN="TOP">Returns a collection of all elements on the page that are 
bound to a data set</TD>
</TR></TABLE></P>

     
<A NAME="98"><H2><I>form</I> Object</H2></A>
<P>One final object worth mentioning is the 
<I>form</I> object. It represents the &lt;FORM&gt; 
tag on a Web page. Using the <I>form </I>object, you can obtain information that your 
users entered into the form. You can validate that information before it's sent to your 
Web server. The <I>onsubmit </I>event and the <I>elements 
</I>collection are the most important components of the 
<I>form </I>object that help you perform the validation.</P>
<P>The <I>onsubmit </I>event fires after the user presses the Submit button but 
before the data is actually sent to the server. To validate the data in your form, you can 
create an event handler for the <I>onsubmit </I>event. In your event handler, you'll use the 
<I>elements</I> collection to obtain references to all the 
<I>input</I>, <I>select</I>, and <I>textarea</I> objects 
in your form. Using these objects, you can obtain the data that the user entered 
and validate it. You can also use the <I>elements 
</I>collection to obtain a reference to a specific object in the form by specifying the object's ID. After you're finished 
validating the data, if everything is OK, you return 
<I>true </I>from the event handler. If the data is incorrect, you can return 
<I>false </I>to prevent the submission of the form.</P>
<P>Listing 3-5 (FrmValid.htm), which is on the companion CD, creates a form 
that contains an Input box and a Submit button. When a user presses the Submit 
button, the <I>onsubmit</I> event fires. In the event handler for this method, we make sure 
that the user has entered only numeric characters into the Input text box. If 
alphabetic characters were entered, we display an error message that asks the user to 
reenter the data. If everything is OK, we allow the form to be submitted to the server 
for processing.</P>

<P><B>Listing 3-5.</B></P>
<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="99"><H3>FrmValid.htm</H3></A>
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
   &lt;TITLE&gt;Validating Form Data&lt;/TITLE&gt;
   &lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
      function Validate()
      {
         var txtVal =
               document.forms(&quot;Form1&quot;).elements(&quot;txtNumData&quot;).value;

         if (txtVal == &quot;&quot; || isNaN(txtVal))
         {
            alert(&quot;Please enter only numeric values&quot;);
            return false;
         }

         return true;
      }
   &lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
   &lt;FORM ID=&quot;Form1&quot; METHOD=&quot;GET&quot; 
      ACTION=&quot;http://yourserver.com/SomeApp.asp&quot;
      onsubmit=&quot;return(Validate())&quot;&gt;

      Please enter a numeric value: 
      &lt;INPUT TYPE=&quot;TEXT&quot; ID=&quot;txtNumData&quot;&gt;
      &lt;INPUT TYPE=&quot;SUBMIT&quot; VALUE=&quot;SUBMIT&quot;&gt;
   &lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
</td></tr></table></p>
<P>In this code, we first check to see whether the user entered a value into the 
text box. If a value was entered, we use the JScript 
<I>isNaN </I>function to determine whether it was numeric. If the value is not numeric, we display an error message and 
return <I>false</I> so that the form will not be submitted.</P>
<P>You can see how we can get access to the values the user entered. First we 
must get access to the <I>form </I>object. We can access this object by using the 
<I>forms </I>collection of the <I>document </I>object. Then we can get access to individual elements in 
the form using the <I>elements </I>collection. The value property of the INPUT element 
returns the text entered by the user&#8212;that is, if the type of this element is &quot;TEXT&quot;.</P>

<A NAME="100"><H2>Other HTML Elements Important to DHTML</H2></A>

<P>So far, we've covered in detail only the major objects of the DHTML Object 
Model, but remember that every HTML element on a Web page is represented as an 
object in the object model&#8212;too many exist to discuss in detail here. Some important 
methods and properties, however, are common to all elements on a page, and a few of 
these are important to DHTML. I'll explain these methods in the context of three 
objects: <I>body</I>, <I>div</I>, and <I>span</I>.</P>
<P>You already know that the <I>body</I> object represents the &lt;BODY&gt; tag on a 
Web page, but you don't know about the <I>div </I>and 
<I>span</I> objects yet. The <I>div</I> object 
represents a &lt;DIV&gt; tag on a Web page. A &lt;DIV&gt; tag is basically a container for HTML. 
It is a block tag, so the closing tag is required. This tag allows you to wrap lines of 
HTML so that you can perform operations on them as if they were one object. Here's 
an example of HTML code using a &lt;DIV&gt; tag:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;DIV ID=&quot;div1&quot; onclick=&quot;DivClicked()&quot;&gt;
   &lt;H2 ID=&quot;Heading2&quot;&gt;Heading 2&lt;/H2&gt;
   &lt;H3 ID=&quot;Heading3&quot;&gt;Heading 3&lt;/H3&gt;
&lt;/DIV&gt;
</PRE>
</td></tr></table></p>
<P>The &lt;DIV&gt; tag has an ID attribute that is used to identify the 
<I>div </I>object. After assigning a value to this attribute, you can access the 
<I>div </I>object by name in script. (As always, you can use the 
<I>all </I>collection to get to this object as well.) This ID 
attribute allows you to handle events for all elements within the 
<I>div</I> block. For example, to handle the 
<I>onclick</I> event for either the &lt;H2&gt; or &lt;H3&gt; tags in the 
<I>div</I> block, you can simply create an event handler for 
<I>div1</I>. Because of event bubbling, when you click on either the text surrounded by &lt;H2&gt;&lt;/H2&gt; tags or the text surrounded by &lt;H3&gt;
&lt;/H3&gt; tags, the <I>onclick </I>event is bubbled up to the 
<I>div </I>object. Here's the VBScript code for an event handler for the 
<I>div</I> block's <I>onclick </I>event:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>   Sub DivClicked()
      MsgBox window.event.srcElement.id
   End Sub
</PRE>
</td></tr></table></p>
<P>This code displays a message box that shows the ID of the element that 
was clicked. In this case, the ID will either be &quot;Heading2&quot; or &quot;Heading3&quot; because 
the source element will either be the &lt;H2&gt; tag or the &lt;H3&gt; tag.</P>
<P>The <I>span </I>object represents a &lt;SPAN&gt; tag on a Web page. The &lt;SPAN&gt; tag 
is similar to the &lt;DIV&gt; tag. However, whereas the &lt;DIV&gt; tag is a container for 
HTML, the &lt;SPAN&gt; tag is a container for text. Using the &lt;SPAN&gt; tag and the 
<I>span </I>object is exactly the same as using the &lt;DIV&gt; tag and the 
<I>div </I>object.</P>
<P>The <I>insertAdjacentHTML</I> method is one of the few common methods of 
HTML elements that are important to DHTML because it enables you to insert HTML 
directly into a Web page adjacent to other HTML. The 
<I>insertAdjacentHTML</I> method is similar to the 
<I>insertAdjacentElement </I>method in that it allows you to insert an HTML 
element adjacent to another element, but whereas you can insert only an HTML 
element object using <I>insertAdjacentElement</I>, you can insert an entire string of HTML 
using <I>insertAdjacentHTML</I>. The input parameters for 
<I>insertAdjacentHTML </I>are similar to those for 
<I>insertAdjacentElement.</I> The first parameter specifies where to insert the 
new text relative to the object on which you are calling this method. The allowable 
values are <I>BeforeBegin, AfterBegin, BeforeEnd, 
</I>and<I> AfterEnd</I>. The <I>BeforeBegin 
</I>value specifies to place the text before the beginning of the object; the rest of the 
values should be self-explanatory. If you're calling 
<I>insertAdjacentHTML </I>off the <I>body </I>object,
 the only allowable values are <I>AfterBegin</I> and 
<I>BeforeEnd</I>. Here's the JScript code to show you how to use the 
<I>insertAdjacentHTML</I> method:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>function DivClicked()
{
      document.body.insertAdjacentHTML(&quot;AfterBegin&quot;, 
          &quot;&lt;H1&gt;Heading 1&lt;/H1&gt;&quot;);
      document.all(&quot;div1&quot;).insertAdjacentHTML(&quot;AfterEnd&quot;,
         &quot;&lt;I&gt;Some Text in italics&lt;/I&gt;&quot;);
}  
</PRE>
</td></tr></table></p>
<P><I>DivClicked </I>is called in response to the user clicking a &lt;DIV&gt; tag named 
<I>div1</I>. In this code, we first insert some Heading Level 1 text after the beginning of the 
body. Next we insert some text in italics after the end of the 
<I>div</I> block. Notice how we use the <I>all 
</I>collection to get a reference to the <I>div 
</I>object that has the ID <I>div1</I>. In this 
case, because only one <I>div </I>object on the Web page has the 
ID<I> div1</I>, we don't need to specify the second parameter of the 
<I>all </I>collection. (You learned about the <I>all 
</I>collection earlier in this chapter, in the section titled &quot;<A HREF="ch03c.htm#91">Collections</A>&quot;) Another way to 
access the <I>div1</I> object is by name, which is more efficient than using the 
<I>all </I>collection. Here's the code from the preceding example, but this time referencing the 
<I>div1</I> object by name:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>function DivClicked()
{
      document.body.insertAdjacentHTML(&quot;AfterBegin&quot;, 
        &quot;&lt;H1&gt;Heading 1&lt;/H1&gt;&quot;);
      div1.insertAdjacentHTML(&quot;AfterEnd&quot;, &quot;&lt;I&gt;Some Text in italics&lt;/I&gt;&quot;);
}
</PRE>
</td></tr></table></p>
<P>Notice that JScript is case sensitive, so we must be sure to use the correct 
case when referencing the name of the object. Also in JScript, we must define the 
object somewhere in the document before the object can be used. For instance, the 
script code in the previous example must exist in the Web page after the &lt;DIV&gt; tag 
that has an ID of <I>div1</I>. VBScript doesn't have either of these requirements.</P>
<P>Four common properties are important to DHTML: 
<I>innerHTML</I>, <I>innerText</I>, 
<I>outerHTML</I>, and <I>outerText</I>.<I> </I>They all work in basically the same way. The 
properties with names beginning with <I>inner</I> set or retrieve HTML or text between the start 
and end tags of the current object. The <I>outerHTML 
</I>property sets or retrieves the current object and its content in HTML. The 
<I>outerText</I> property sets or retrieves the text 
of the current object.</P>
<P>So you can see how important these properties are to making HTML 
dynamic. They allow you to change the text or HTML inside HTML tags or to change the 
tags to something completely different. Let's look back at our example that used 
&lt;DIV&gt; tags. Here's the HTML code again to refresh your memory:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;DIV ID=&quot;div1&quot; onclick=&quot;DivClicked()&quot;&gt;
   &lt;H2 ID=&quot;Heading2&quot;&gt;Heading 2&lt;/H2&gt;
   &lt;H3 ID=&quot;Heading3&quot;&gt;Heading 3&lt;/H3&gt;
&lt;/DIV&gt;
</PRE>
</td></tr></table></p>
<P>What if we want to change the text of the &lt;H2&gt; tag named 
<I>Heading2</I>? We can do so using the 
<I>innerText</I> property in VBScript, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub DivClicked()
   Heading2.innerText = &quot;New Heading&quot;   
End Sub
</PRE>
</td></tr></table></p>
<P>If we want to change the tag for 
<I>Heading3</I> from an &lt;H3&gt; tag to an &lt;H4&gt; 
tag, we could use the <I>outerHTML </I>property, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub DivClicked()
   Heading3.outerHTML = &quot;&lt;H4 ID='Heading4'&gt;Heading 4&lt;/H4&gt;&quot;   
End Sub
</PRE>
</td></tr></table></p>
<P>Notice that in the preceding code, we're changing the ID of the tag. The 
next time we click on the <I>div</I> block, the script will result in a syntax error because 
<I>Heading3 </I>will no longer exist. Therefore we might want to consider leaving the ID as it is.</P>
<P>Let's say that instead of changing each HTML element within the 
<I>div</I> block, we want to change all the HTML within the 
<I>div</I> block. We can do so using the 
<I>innerHTML </I>property of the <I>div </I>object named 
<I>div1</I>. Here's the VBScript code that changes the 
entire contents of the <I>div</I> block:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub DivClicked()
   div1.innerHTML = &quot;&lt;H1 ID='Heading1'&gt;Heading 1&lt;/H1&gt;&quot; _
                  &amp; &quot;&lt;I&gt;Some Text in Italics&lt;/I&gt;&quot;
End Sub
</PRE>
</td></tr></table></p>
<P>Now that you know how easily you can make your Web pages dynamic, I 
bet you're ready to change them all today!</P>

</BODY>
</HTML>






