<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Internet Explorer 5</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch01d.htm">[Previous]</A> <A HREF="ch02a.htm">[Next]</A><P>

<A NAME="15"><H1>Internet Explorer 5</H1></A>

<P>Internet Explorer 4 offered many new features to enhance its programmability 
and reusability, but as a development platform, it was insufficient. That's where 
Internet Explorer 5 comes to the rescue. (See Figure 1-9.) Finally a platform exists that 
lets you create fully functional Web-based Internet applications. Using Internet 
Explorer 5, you can create applications that run in the browser, applications that reuse 
browser components, or applications that run outside the browser as normal Windows 
applications. To provide this functionality, version 5 extends a few of the features 
first introduced in version 4 and also introduces some new technologies that 
solidify Internet Explorer as a development platform.</P>

<P>
<A HREF="javascript:fullSize('F01ii09x.htm')"> <img src="images/F01ii09.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 1-9. </B> <I>Internet Explorer 5. </I><!-- /caption -->
</P>

<P><div class="sidebar"><blockquote><B>Internet Explorer 5 as a Development Platform</B>
<P>You might be wondering what I mean by a development platform. It's any 
tool, component, application programming interface (API), operating system (you 
get the idea) that developers can use to create their own applications. For 
example, Windows is a development platform. Developers who create applications 
for Windows reuse the Windows API so that they don't have to reinvent the 
wheel. They also use the Windows API so that their applications will run on top 
of Windows.</P>

<P>The same applies to the Internet Explorer development platform. 
Web developers use APIs and COM objects provided by Internet Explorer to 
create applications that use Internet Explorer components and run on top of the 
Internet Explorer platform. In the most general sense, these APIs and COM 
objects include DHTML, script, the WebBrowser control, and many other 
components and functionality.</P></blockquote></div>
</P>

<A NAME="16"><H2>DHTML Behaviors and HTML Components (HTCs)</H2></A>

<P>When developing applications for a platform such as Windows or Internet 
Explorer, you must be able to reuse specific functionality of your application. If you've 
created applications using C++, for instance, you can reuse functionality such as 
libraries of source code. Also, with COM, you can reuse a component's entire 
functionality without even having to look at its source code. If you couldn't reuse 
functionality like this, you probably wouldn't want to write applications for Windows. You 
would always have to create your applications from scratch.</P>

<P>Well, the same goes for Internet Explorer. You have to be able to reuse 
functionality for Internet Explorer to be accepted as a development platform. To that 
end, Internet Explorer 5 introduces DHTML Behaviors. Behaviors are extremely 
lightweight components that you can reuse from one Web page to the next. You can 
enhance the default Behavior of a specific HTML element by attaching a Behavior to the 
element. You can implement Behaviors as binary components using C++ and COM 
or simply DHTML and script. Behaviors that are created using DHTML and script 
are referred to as HTML Components (HTCs). <A HREF="ch11a.htm">Chapter 11</A> covers DHTML Behaviors 
and HTCs as well as the default Internet Explorer 5 Behaviors.</P>

<A NAME="17"><H2>Persistence</H2></A>

<P>Internet Explorer 5 persistence means just what it sounds like&#8212;Internet 
Explorer allows you to retain Web page information, styles, variables, and state from 
one browser session to another. So the next time your users navigate to your Web 
page, they can return to the exact place where they left off. For instance, let's say you 
have a collapsible list of items on a menu. Your user might go three or four levels 
deep into the menu hierarchy. Using versions of Internet Explorer earlier than version 
5, if the user navigated away from that Web page or shut down the browser, the 
next time he navigated to that page, he would have to start all over again. Using 
Internet Explorer 5 persistence, the user is able to retain the exact position in the menu 
hierarchy when leaving a page. The user can pick up where he left off the next time 
he navigates to that page. This feature is commonly used in the MSDN Online Web 
Workshop: 
<I><A HREF="http://msdn.microsoft.com/workshop" TARGET="_window2">http://msdn.microsoft.com/workshop</A></I>. We'll examine persistence further in 
<A HREF="ch11a.htm">Chapter 11</A> when we talk about DHTML Behaviors.</P>

<A NAME="18"><H2>Client Capabilities</H2></A>

<P>As anybody who has created Windows applications will tell you, if you can't 
determine the capabilities of the platform on which your application is running, you 
won't be able to provide your users with the best experience possible. With Internet 
Explorer 5's new client capabilities technology, you can determine certain 
capabilities that the browser supports, such as the speed of the user's Internet connection. 
Client capabilities are covered in <A HREF="ch11a.htm">Chapter 11</A>.</P>

<A NAME="19"><H2>HTML Applications</H2></A>

<P>HTML Applications (HTAs) are full-blown applications that run on their own 
under Windows, which means that they don't have any of the security restrictions 
imposed on Web pages. HTAs are Windows applications just like Microsoft Word and 
Microsoft Excel. And the best part is that you can create them using only DHTML and 
script. You don't need to learn C++, Visual Basic, and COM. If you know DHTML and 
script, and you've already created Web pages, you've basically already created an 
HTML Application. <A HREF="ch04a.htm">Chapter 4</A> covers HTAs in more detail.</P>

<A NAME="20"><H2>Printing</H2></A>

<P>One of the most common questions people ask is, &quot;How can I print from script?&quot; 
Prior to Internet Explorer 5, you had to create an ActiveX control and let the control do 
it for you. Well, that solution didn't exactly promote Internet Explorer as a 
development platform. Obviously, any development platform must have good support for 
printing if it's going to be used by the masses. Finally, with Internet Explorer 5, you 
can print from script&#8212;using the 
<I>window.print</I> method. Also, events tell you when a 
page is going to be printed and when it's finished. More on this in <A HREF="ch03a.htm">Chapter 3</A>.</P>

<A NAME="21"><H2>Dynamic Properties</H2></A>

<P>Up until Internet Explorer 5, all properties of HTML tags on a Web page were 
determined when the page was designed. For instance, if you wanted to change the 
size of a block of text based on some value entered by the user, you had to jump 
through hoops. Using Internet Explorer 5, you can specify an expression to be used at 
run time to calculate the value of a property. More on this in <A HREF="ch03a.htm">Chapter 3</A>.</P>

<A NAME="22"><H2>XML</H2></A>

<P>XML (Extensible Markup Language) provides a method for describing and 
exchanging data. Whereas HTML is used for displaying data, XML is used for working 
directly with data. Support for XML was first introduced in Internet Explorer 4 but wasn't 
really complete until Internet Explorer 5. Along with XML comes support for XSL 
(Extensible Stylesheet Language), which provides a language for expressing style sheets. 
It consists of a language for transforming XML documents into HTML documents or 
into other XML documents, and an XML vocabulary for specifying formatting 
semantics. (The topic of XML is outside the scope of this book. For more information about 
XML, refer to the book <I>XML in Action </I> [Microsoft Press, 1999].)</P>

<A NAME="23"><H2>Increased Performance</H2></A>

<P>All these great Internet Explorer 5 features would be meaningless without the 
most important new feature of all&#8212;increased performance. Internet Explorer 5 is 
about 25 percent faster than version 4, mainly because of some major changes in the 
underlying implementation of Internet Explorer. For Web pages that contain tables, 
you will find that Internet Explorer is a lot faster than that. I think you will be quite 
pleased by how fast your Internet applications run under Internet Explorer 5.</P>

<A NAME="24"><H2>Why Program Using Internet Explorer 5?</H2></A>

<P>So now I bet you're thinking, &quot;All these new features of Internet Explorer 5 
are cool, but what can I do with them?&quot; The possibilities are endless. In the simplest 
case, you could add help to your application. Doing so in the past wasn't easy. You 
had to create an .rtf file in a specific format. Then you had to run your .rtf file 
through the help compiler to generate a Windows help file. What a pain.</P>

<P>Now, using Internet Explorer 5&#8212;and more specifically, the WebBrowser 
control&#8212;you can easily add help to your application. If you know how to create a 
Web page, you already know how to add help to your applications. You don't need 
to learn the correct format of the .rtf help files or know how to use the help 
compiler. It's as simple as adding the WebBrowser control to a dialog box or a form 
and navigating to the Web pages you're using for help. For a real-world example, see 
the MSDN Library viewer for Visual Studio 6 in Figure 1-10. The MSDN Library 
viewer uses the WebBrowser control to display help via Web pages.</P>

<P>
<A HREF="javascript:fullSize('F01ii10x.htm')"> <img src="images/F01ii10.JPG" width=404 height=266 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 1-10. </B> <I>MSDN Library viewer for Visual Studio 6. </I><!-- /caption -->
</P>

<P>OK, so now you see how easy it is to 
<I>webify</I> your help pages. But what else can you do? I showed you the simplest case. In a more advanced case, you can 
create an entire browser of your own. The WebBrowser control provides you with 
this capability. Using the WebBrowser control, you can create your own browser 
application without having to implement the code to perform the actual download of 
the Web pages, images, and so forth. You don't have to worry about implementing 
support for JavaScript, VBScript, ActiveX controls, security, authentication, and so on. 
The WebBrowser control does this. Also, you don't have to worry about supporting 
the latest Internet protocols and standards. If the standards change, so will the 
underlying components of the WebBrowser control. You don't have to update your 
browser application every time a standard changes.</P>

<P>A real-world example that uses the WebBrowser control to integrate Web 
browsing functionality into the product is Microsoft Money 99. (See Figure 1-11.) Anyone who has used the Internet will have no trouble using 
Money 99. Money 99 uses the WebBrowser control to display Web pages, thereby 
providing a familiar interface to its users. Using the WebBrowser control made 
developing Money 99 easy. The developers of this product didn't have to worry about 
implementing the code to link one page to the next, displaying images, and so on. All they 
had to do was use the WebBrowser control, and it took care of the rest. Then the 
Money 99 development team had to create only the necessary Web pages to provide 
their users with an appropriate interface.</P>

<P>
<A HREF="javascript:fullSize('F01ii11x.htm')"> <img src="images/F01ii11.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 1-11. </B> <I>Microsoft Money 99. </I><!-- /caption -->
</P>

<P>Money 99 isn't the only Microsoft product that uses Internet Explorer 
components. Microsoft Outlook Express, Microsoft Expedia, and Microsoft Office 2000 
also use this technology, and you'll be seeing a lot more products in the future. 
Using Internet Explorer components makes life a lot easier for developers, and it 
decreases the development time.</P>

<P>Reusing the WebBrowser control requires you to know Visual Basic, Visual 
C++, Visual J++, or some other COM-aware development tool. What if you know 
only DHTML and script? Can you still use the Internet Explorer development platform? 
<I>Yes!</I> Because reusing the WebBrowser control isn't the only way to reuse Internet 
Explorer. Internet Explorer 5 provides many ways for you to create Internet applications 
using only DHTML and script. For example, you can create an order-entry 
application that connects to the corporate database. Or you can create a shopping cart 
application that allows your customers to order your products on the Web. The 
possibilities are endless. You'll find countless ways to use the Internet Explorer 5 platform on 
the World Wide Web.</P>

<P><div class="sidebar"><blockquote><B>What's Next?</B><HR>
<P>Before examining advanced Internet Explorer features such as DHTML, 
ActiveX controls, the WebBrowser control, and so forth, you must first understand 
the fundamentals. In <A HREF="ch02a.htm">Chapter 2</A>, you'll create Web pages using simple HTML 
and script. After you've mastered the basics, you'll be ready for DHTML, 
ActiveX controls, and whatever Internet Explorer 5 can throw at you.</P></blockquote></div>
</P>

</BODY>
</HTML>





