<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">

<TITLE>Chapter 4 -- Writing HTML Applications</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch03e.htm">[Previous]</A> <A HREF="ch04b.htm">[Next]</A><P>


<font size="+3">Chapter 4</font>

<A NAME="109"><H1>Writing HTML Applications </H1></A>


<p>Writing applications for Microsoft Windows usually requires that you know at 
least one and sometimes several programming languages and development tools. 
Depending on the type of application you are creating and your particular preference, 
you might decide to use C++, Basic, or Java. You might also be required to know 
Microsoft Visual C++, Microsoft Visual Basic, or Microsoft Visual J++. But what you need to 
know doesn't end there! Creating an application for Microsoft Windows 95 and later 
versions or for Microsoft Windows NT often involves using the Microsoft Windows 
32bit Application Programming Interface (Win32 API). Using the Win32 API requires 
you to learn possibly hundreds of functions. And if you're programming with Visual 
C++, you might have to learn to program by using the Microsoft Foundation Classes 
(MFC) or the Active Template Library (ATL). If your application needs to use the 
Component Object Model (COM), as most Internet applications do, you have to know COM 
architecture, and you must be able to use a lot of COM interfaces as well.</p>

<p>Learning all of these technologies can be quite overwhelming and time 
consuming. What if you could apply your knowledge of DHTML and script to 
writing Windows applications? Fortunately, with Internet Explorer 5, you can. Introduced 
by Internet Explorer 5 is a new technology known as HTML Applications. An 
HTML Application (HTA) is a full-fledged Windows application that you can create by 
using only DHTML and script&#8212;basically, an HTML document that runs as a 
Windows application. You can even create an HTA in its simplest form by using only 
HTML, but it would be static&#8212;just as a Web page that contains only HTML is static. So 
using DHTML and script in your HTA is the best way to provide a dynamic experience 
for your users.</p>

<p>When you create HTAs, the possibilities are endless. Any task you can 
perform with a normal Web page by using DHTML and script (and ActiveX controls, as 
you'll see in <A HREF="ch05a.htm">Chapter 5</A>), you can perform in your HTA. And an HTML Application 
even provides many advantages over a normal Web page. First of all, an HTA runs in 
its own window and not in the Internet Explorer window, where Web pages are 
displayed, so it appears to your users to be a normal Windows application, and for 
good reason&#8212;it is.</p>

<p>Second, unlike a Web page, an HTA is trusted. So if your HTA contains 
frames, you can write script in one frame to access elements in the other frame, even if 
the other frame exists in another domain. You can't do this with a normal Web page 
that is running in Internet Explorer. Also, because an HTML Application contains only 
the menus, toolbars, icons, and other elements that you create, it is considered trusted.</p>

<p>Basically, an HTML Application provides all the advantages that a normal 
Web page offers&#8212;the DHTML Object Model, scripting, the ability to download 
ActiveX controls (discussed in <A HREF="ch05a.htm">Chapter 5</A>), and so forth&#8212;without the user interface or 
strict security restriction of the browser.</p>

</BODY>
</HTML>





