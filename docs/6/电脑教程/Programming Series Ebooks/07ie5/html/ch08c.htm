<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Accessing the DHTML Object Model from Visual Basic</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch08b.htm">[Previous]</A> <A HREF="ch08d.htm">[Next]</A><P>

<A NAME="205"><H1>Accessing the DHTML Object Model from Visual Basic</H1></A>

<P>To help you understand how to obtain or change the data on a Web page, we'll 
create a simple Visual Basic application that hosts the WebBrowser control. You'll 
add features to this application as you progress through this section of the chapter. 
Before you get started, however, you must perform a few preliminary tasks, such as 
hosting the WebBrowser control or automating Internet Explorer within a Visual 
Basic application. (You're probably thinking, &quot;Duh, Scott!&quot;)</P>

<P>Start Visual Basic, and create a new Standard 
EXE project. Save the project as VbObjMdl. Add the WebBrowser control to the toolbox by choosing Components 
from the Project menu and then selecting Microsoft Internet Controls from the 
Component dialog box. Add the WebBrowser control to your project's main form. Add the 
typical controls needed to navigate the Web: Address label, Address text box, and Go 
button. Name the text box <I>txtAddress</I>, and name the Go button <I>btnGo. </I>The Visual Basic 
form for your project should look similar to the one shown in Figure 8-1.</P>

<P>
<A HREF="javascript:fullSize('F08ii01x.htm')"> <img src="images/F08ii01.JPG" width=404 height=334 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-1.</B> <I>VbObjMdl form after adding WebBrowser control and navigation controls.</I><!-- /caption -->
</P>

<P>Now add the necessary code to implement the controls on the form. (This 
code is the typical code you use to navigate to a Web page, as you saw in <A HREF="ch06a.htm">Chapter 6</A>. 
You will see the declaration of the <I>WebDoc</I> variable later in this section.) </P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnGo_Click()
   On Error Resume Next
   WebBrowser1.Navigate txtAddress.Text
End Sub

Private Sub Form_Load()
   WebBrowser1.GoHome
End Sub
</PRE>
</td></tr></table></p>

<P>To change the data on a Web page or to just read it, you must first obtain 
a reference to the <I>document</I> object. As you learned in <A HREF="ch03a.htm">Chapter 3</A>, you obtain 
references to the objects that represent the HTML elements on the Web page through the 
<I>document</I> object. To access the 
<I>document</I> object, you use the WebBrowser's 
<I>Document </I>property. Then you use the 
<I>document</I> object's properties and collections to 
access all the objects in the DHTML Object Model, including the parent 
<I>window</I> object and all element objects.</P>

<P>But you can't just haphazardly access the 
<I>Document</I> property of the WebBrowser. You must wait until the Web page is 
completely finished loading before you attempt to access the <I>document</I> object. And how do you know when you can safely 
access it? That's right&#8212;after the WebBrowser control's 
<I>DocumentComplete</I> event has fired. Therefore, you need to declare a global variable to hold a reference to the 
<I>document</I> object and set it in the handler method for the WebBrowser control's 
<I>DocumentComplete </I>event.</P>

<P>But wait! Before you declare a global variable that will hold a reference to 
the <I>document</I> object, you must tell Visual Basic where to look when it needs to 
obtain information about the <I>document</I> object's methods, properties, collections, and 
so forth. If you don't, you will have to declare your variable as type 
<I>Object</I>, which means that Visual Basic's IntelliSense technology won't be able to show you the 
methods and properties of your object, and you'll have to refer to the actual 
documentation for the <I>document</I> object. (Egad!) If Visual Basic can't find information about an 
object, it won't display the object's methods, properties, and collections when you type 
the name of the object and press the period key. Just as you did when automating 
Internet Explorer in <A HREF="ch06a.htm">Chapter 6</A>, you tell Visual Basic where to look for information about 
an object by setting a reference to that object's type library.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B><HR>
A type library for a component such as mshtml.dll contains 
definitions of all the GUIDS; objects; interfaces; and the interfaces' methods, 
properties, events, and collections that are implemented in the component. In 
previous versions of Internet Explorer, the type library for MSHTML was contained 
in mshtml.dll. With Internet Explorer 5, this type library was moved into 
mshtml.tlb to decrease the size of mshtml.dll and to decrease the size of the minimum 
installation of Internet Explorer.
</BLOCKQUOTE></DIV>
</P>

<P>The type library for the <I>document</I> object and all the HTML element objects 
on a Web page is contained in a file named mshtml.tlb. (As I mentioned in Chapter 
6, these objects are implemented in the MSHTML component.) You set a reference 
to mshtml.tlb in the References dialog box, which you open by choosing 
References from the Project menu.</P>

<P>The easiest way to set the reference is to click the 
Browse  button in the References dialog box. By default, Visual Basic displays the Add 
Reference  dialog box that opens in the system directory. (By default, the system directory will 
be C:\Windows\System for Microsoft Windows 95 and higher systems, and C:\WinNT\System32 for Microsoft Windows NT or Windows 2000 systems.) After opening 
the Add Reference dialog box, type in the name of the type library file in the File 
Name text box, <I>mshtml.tlb</I>,  and click the Open button. Visual Basic adds a reference to 
the Microsoft HTML Object Library to the Reference dialog box, as shown in Figure 
8-2. (As an alternative to browsing for 
mshtml.tlb,  you can scroll down in the 
References dialog box and choose Microsoft HTML Object Library.) Click the OK button to 
finish setting this reference.</P>

<P>
<A HREF="javascript:fullSize('F08ii02x.htm')"> <img src="images/F08ii02.JPG" width=404 height=321 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-2.</B> <I>Visual Basic References dialog box with Microsoft HTML Object Library selected.</I><!-- /caption -->
</P>

<P>Once you've set a reference to the type library for MSHTML, you can use 
Visual Basic's Object Browser to view all the objects and interfaces in that type library. 
To display the Object Browser, press F2 or choose 
Object  Browser from the View  menu. Then in the upper left-hand drop-down list box where &lt;All Libraries&gt; is 
displayed, select MSHTML. All the objects and interfaces stored in the MSHTML type library 
will be displayed, as shown in Figure 8-3.</P>



<P>Now that you've added the MSHTML type library as a reference to your 
project, you can declare a global variable that will hold a reference to the 
<I>document</I> object returned by the WebBrowser's 
<I>Document</I> property. Name this variable 
<I>WebDoc</I>, and declare it as 
<I>HTMLDocument</I>. The <I>HTMLDocument</I> object is defined in the type 
library for MSHTML and represents the 
<I>document</I> object. <I>HTMLDocument </I>is the type of 
object returned by the WebBrowser's 
<I>Document</I> property. The declaration of this 
global variable should appear in the code like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim WebDoc As HTMLDocument
</PRE>
</td></tr></table>
</p>

<P>
<A HREF="javascript:fullSize('F08ii03x.htm')"> <img src="images/F08ii03.JPG" width=404 height=334 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-3.</B> <I>Visual Basic Object Browser displaying the MSHTML type library.</I><!-- /caption -->
</P>

<P>Next create an event handler for the <I>DocumentComplete 
</I>event, and add the following code to set <I>WebDoc 
</I>to the <I>document</I> object returned by the 
WebBrowser's <I>Document</I> property:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub WebBrowser1_DocumentComplete(ByVal pDisp As Object, _
                                         URL As Variant)
   On Error Resume Next
   Set WebDoc = WebBrowser1.Document
End Sub
</PRE>
</td></tr></table></p>

<P>As you can see, whether you are hosting the control or automating 
Internet Explorer, you'll obtain a reference to the 
<I>document</I> object in the same way.</P>

<P>Later in this section and in the next section, when you add code to obtain 
and change the data on a Web page, you'll use 
<I>WebDoc</I>. If you use <I>WebDoc</I> before you set it to a 
<I>document</I> object, an error will occur. You can avoid this error in two 
ways. One way is to set <I>WebDoc</I> to 
<I>Nothing</I> in the <I>Form_Load</I> method and in 
the <I>WebBrowser</I>_<I>BeforeNavigate2 </I>event handler. Then you can verify that 
<I>WebDoc</I> is not equal to <I>Nothing</I> before trying to use it. The other way is to use one of Visual 
Basic's error handling statements, <I>On Error Resume 
Next</I>, which involves much less code. The code in the rest of this section uses the 
<I>On Error Resume Next</I> error handling statement.</P>


<A NAME="206"><H2>Obtaining Data from a Web Page</H2></A>

<P>Obtaining data contained on a Web page&#8212;including HTML and the information 
users enter on a form&#8212;is easy in Visual Basic because the DHTML Object Model 
provides the necessary methods, properties, and collections to do so. In <A HREF="ch03a.htm">Chapter 3</A>, you 
learned to obtain the inner and outer HTML of an entire document and of a particular 
HTML element by using the <I>innerHTML</I> and 
<I>outerHTML</I> properties. (You can also use the 
<I>innerText </I>and <I>outerText</I> properties to obtain the inner and outer text of a 
document or an element.) To refresh your memory, add a button to your form, name 
it <I>btnBodyHTML</I>, and change its <I>Caption 
</I>property to <I>Get Body</I>. When clicked, the 
Get Body button displays the HTML contained within the opening &lt;BODY&gt; tag and 
closing &lt;/BODY&gt; tag. Double-click the button to create an event handler for the 
button's <I>Click</I> event. To display the inner HTML for the &lt;BODY&gt; tag, you just access 
the <I>innerHTML </I>property for the object associated with the tag. (This procedure 
works for any element on the page.)</P>

<P>But how do you obtain a reference to this 
<I>body</I> object? You already have a reference to the 
<I>document </I>object, and by using the methods, properties, and 
collections of the <I>document </I>object, you can easily obtain references to any other 
object on the page. For example, you can obtain a reference to the 
<I>body </I>object by accessing the <I>body</I> property of the 
<I>document </I>object, which enables you to call any of 
the methods, properties, and collections of the 
<I>body </I>object. To call the <I>innerHTML</I> 
property of the <I>body</I> object from the event handler for the btnBodyHTML button, just 
obtain a reference to the <I>body </I>object and call the 
<I>innerHTML</I> property of the <I>body</I> 
object, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnBodyHTML_Click()
   On Error Resume Next
   MsgBox WebDoc.body.innerHTML
End Sub
</PRE>
</td></tr></table></p>

<P>This code provides a reference to the 
<I>body</I> object by using the <I>body 
</I>property of the document and then calling 
<I>innerHTML</I>. Remember that in the handler for the 
<I>DocumentComplete</I> event, you set 
<I>WebDoc</I> to the <I>document </I>object of the 
WebBrowser. Now, when the user clicks the Get Body button, the entire HTML 
in the body section of the Web page will be displayed. Also notice that the code 
includes the <I>On Error Resume Next</I> statement, just in case the user clicks Get Body before 
the document is completely finished loading. Now run your application and click 
Get Body. You should see all the HTML contained within the body of the Web page.</P>

<P>The technique you just used to access the 
<I>body</I> object on a Web page works for every element on the page. First you get a reference to the document, and 
then you access one of its properties or collections to obtain a reference to the object 
you want. In the preceding code, you saw how to access the 
<I>body</I> object by using the <I>body </I>property of the document. However, the 
<I>innerHTML </I>and <I>outerHTML </I>properties of the body give you only the HTML that is contained in the body section of 
the document. It doesn't give you the entire HTML of the page. To access the entire 
HTML of the page, you must use the new Internet Explorer 5 property, 
<I>documentElement</I>.</P>

<P>To access the entire HTML of the page, add another button to your form 
that will display the entire contents of the document when clicked. Name this 
button <I>btnGetAllHTML</I>,  and change its 
<I>Caption </I>property to <I>Get All HTML</I>. Double-click 
this button to bring up the Code View window and to create the skeleton code for 
this button's <I>Click </I>event handler. In this event handler, add the following code:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnGetAllHTML_Click()
   On Error Resume Next
   MsgBox WebDoc.documentElement.outerHTML
End Sub 
</PRE>
</td></tr></table></p>

<P>In this code, the <I>documentElement</I> property of 
<I>WebDoc</I> is called first to access the object representing the document element. Then the 
<I>outerHTML</I> property of the <I>document</I> object we just got is called to get the contents of the entire Web 
page. Finally, <I>MsgBox</I> is called to display the contents of the Web page. Although 
no &lt;DOCUMENT&gt; tag exists, the 
<I>documentElement</I> property was created to give 
you access to the entire document as an HTML element. But using the 
<I>documentElement </I>property isn't the only way you can access the entire HTML for a Web page.</P>

<P>Far too many elements exist on the Web page for you to create a specific 
property for each, so you will occasionally need to use the collections of the 
<I>document</I> object, such as the <I>All</I> collection, to obtain references to some of the elements. 
For example, you can access the entire HTML for a Web page by using the 
<I>outerHTML</I> property of the &lt;HTML&gt; element, but because you can't access &lt;HTML&gt; directly, 
you have to iterate through the <I>All </I>collection of the document, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnGetAllHTML_Click()
   On Error Resume Next
   Dim Elem As IHTMLElement

   For Each Elem In WebDoc.All
      If StrComp(Elem.tagName, &quot;HTML&quot;, vbTextCompare) = 0 Then
         MsgBox Elem.outerHTML
      End If
   Next
End Sub
</PRE>
</td></tr></table></p>

<P>In this code, we first declare a local variable of type 
<I>IHTMLElement</I>. A variable of this type must be declared because the 
<I>All </I>collection returns a collection of all 
the elements on the page. Remember, there are objects and interfaces that represent 
all the elements on the page, and you can use 
<I>IHTMLElement</I> to represent any of those elements. In the code, when we access the elements contained in the 
<I>All </I>collection, we don't know the exact type for the element we are accessing, so we have to 
declare and use a local variable that has some generic 
type&#8212;<I>IHTMLElement</I>.</P>

<P>Notice that in the code we iterate through the <I>All 
</I>collection to look for the &lt;HTML&gt; element. The &lt;HTML&gt; element is usually the first one on the page, and 
when it is, you can access it by referencing index 0 in the 
<I>All </I>collection. But when it <I>isn't,</I> such as the case in which a Web page author adds comments to the top of a 
Web page, the first element on the page is the HTML comment tag. That's why in 
the preceding code, we loop through all the elements in the collection looking for 
the &lt;HTML&gt; tag.</P>

<P>Also notice that we use the <I>tagName</I> property of the element in the code. 
This property can be used to determine whether an element is of a certain type, and 
it returns the actual tag name of the element without the opening and closing 
angle brackets (&lt;&gt;). For example, if the element is an &lt;HTML&gt; element, the 
<I>tagName</I> property will return HTML. The preceding code accessed the &lt;HTML&gt; tag, but you 
can also use  the <I>tagName</I> property to access any element on the page.</P>

<P>Also notice that in the preceding code, we use the Visual Basic 
<I>StrComp </I>function to compare the <I>tagName 
</I>with the string <I>&quot;HTML&quot;. StrComp 
</I>performs a case-insensitive search if you specify the 
<I>vbTextCompare </I>setting for the third 
parameter. This specification is necessary because no one can guarantee that the string 
returned from the <I>tagName </I>property will be a specific case. Once the &lt;HTML&gt; element 
is found, the entire contents of the Web page is displayed by using the 
<I>outerHTML </I>property of the &lt;HTML&gt; element.</P>

<P><DIV CLASS="SIDEBAR"><BLOCKQUOTE>
<B>Using Tags with IDs</B>

<P>If the &lt;HTML&gt; tag in a document has an ID, such as 
<I>Html1</I>, you can obtain a reference to the HTML element object like this:</P>

<P><table cellpadding=5><TR><TD>
<PRE>WebDoc.All(&quot;Html1&quot;)
</PRE>
</td></tr></table></p>

<P>Then you can call the <I>innerHTML </I>or <I>outerHTML 
</I>properties as usual. However, most Web page authors don't specify an ID for the &lt;HTML&gt; tag. If 
you're the creator of the Web page and you need to access the &lt;HTML&gt; tag, you 
might want to specify an ID for it, because obtaining a reference to the HTML 
element object using an ID is much more efficient.</P></blockquote></div>
</P>

<P>In addition to being able to access the HTML for the document or for a 
specific element on a Web page, you can obtain data that was entered by a user into the 
form input elements such as a textbox, a checkbox, and a radio button. Once you have 
a reference to the object that represents the HTML element that you want, you can 
easily access its methods, properties, and collections. As you might have guessed, the 
object that represents form input elements is 
<I>HTMLInputElement</I>.</P>

<P>Data entered into a form input element such as a textbox is typically stored 
in the element's <I>Value </I>property. You can specify a default value for an input 
element by using the VALUE  attribute of the 
&lt;INPUT&gt;  tag when you create the page. To 
obtain the data that is entered into a form input element, you simply use the 
<I>Value </I>property of the 
<I>HTMLInputElement</I> object. This property will reflect the current 
data entered into the input element. For textboxes, this data will be what the user 
has entered. For input types such as checkboxes and radio buttons, this value will be 
what the Web page author specified for the VALUE attribute. In the case of checkboxes 
and radio buttons, if you just want to know whether they are checked, you can use 
the<I> HTMLInputElement</I> object's <I>Checked 
</I>property.</P>

<P>To see how easily you can obtain the data the user entered, let's modify 
the example we've been creating. First you need to change the 
<I>Form_Load</I> method. Instead of navigating to the user's home page, you should navigate to a Web 
page that I've included on the companion CD in the folder 
\Samples\Chap08\VbObjMdl. This page is called VbObjMdl.htm and it contains an HTML form with a few 
HTML elements that allow the user to enter data. Copy this Web 
page  to the application directory of the VbObjMdl project, and change the 
<I>Form_Load</I> method to navigate to this page, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub Form_Load()
   WebBrowser1.Navigate App.Path &amp; &quot;\VbObjMdl.htm&quot;
End Sub
</PRE>
</td></tr></table></p>

<P>Next add a button to your form, name it 
<I>btnGetFormData</I>, and change its <I>Caption 
</I>property to <I>Get Form Data</I>. Also add a 
text box to your form that will be used to display all the data the user entered. Name this text box 
<I>txtDataValues</I>, and leave its <I>Text </I>property empty. Set its 
<I>MultiLine </I>property to <I>True</I>. Your form 
should now look similar to the one shown in Figure 8-4. (Note that this form already 
contains the buttons you added earlier as well as a button named Add HTML, which 
you will add later in this section.)</P>

<P>
<A HREF="javascript:fullSize('F08ii04x.htm')"> <img src="images/F08ii04.JPG" width=404 height=283 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-4. </B> <I>VbObjMdl form after adding Get Form Data button and textbox. </I><!-- /caption -->
</P>

<P>Now double-click the Get Form Data button to display the Code View 
window, and create the skeleton code for the Get Form Data button's 
<I>Click </I>event handler. When the Get Form Data button is clicked, 
the  event handler will obtain all the data for 
the input elements and display it in the text box you just added. Enter the following 
code in the event handler to implement this functionality:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnGetFormData_Click()
   On Error Resume Next

   Dim strData As String
   Dim Elem As HTMLInputElement

   ' Loop through all the elements on the form
   ' and retrieve the data for the input element objects.
   '
   For Each Elem In WebDoc.Forms(0).elements
      strData = strData &amp; &quot;ID: &quot; &amp; Elem.Id &amp; &quot;, &quot;

      If StrComp(Elem.Type, &quot;checkbox&quot;, vbTextCompare) = 0 _
         Or StrComp(Elem.Type, &quot;radio&quot;, vbTextCompare) = 0 Then
               
         strData = strData &amp; &quot;Checked: &quot; &amp; Elem.Checked
      Else
         strData = strData &amp; &quot;Value: &quot; &amp; Elem.Value
      End If
            
      strData = strData &amp; vbCrLf
   Next
    
   txtDataValues.Text = strData
End Sub
</PRE>
</td></tr></table></p>

<P>In this code, we declare a variable named 
<I>Elem</I> of type <I>HTMLInputElement </I>that will hold references to input element objects within the form. Then we use the 
form's<I> elements </I>collection to loop through all the elements on the form. To access the 
form, you simply use the document's <I>Forms</I> collection, which returns all the 
<I>form</I> objects for the Web page. Notice that we reference item 0 in the 
<I>Forms </I>collection, because only one form exists on this page. (Remember that items in collections are 
indexed starting at 0.)</P>

<P>The form that is returned from the <I>Forms</I> collection is a collection as well. 
Think about it a minute. An HTML form is just a container for input elements, so a 
<I>form</I> object is a collection of input elements. The 
<I>form</I> object has an <I>item </I>method, just 
like other collections, that you can use to access an item in the collection. But using 
the form's <I>elements</I> collection allows you to use the 
<I>For Each...Next</I> loop construct.</P>

<P>Once a reference to an input element exists on the form, we start building 
the string that will be displayed in the textbox. This string will contain the ID of 
the element and either the value associated with the element or, if the element is 
a checkbox or a radio button, the value of the <I>Checked 
</I>property.</P>

<P>As you saw in <A HREF="ch03a.htm">Chapter 3</A>, most attributes for HTML tags have an 
associated property that is a member of the object representing the element. For 
&lt;INPUT&gt; elements, you specify the type of element by using the TYPE attribute; 
consequently, you determine the type of the input element by using the 
<I>Type</I> property. In the preceding code, if the type of the input element is 
<I>checkbox </I>or <I>radio</I>, whether the checkbox or radio button is currently checked is displayed. You can 
determine whether the checkbox or radio button is checked by using the 
<I>HTMLInputElement </I>object's <I>Checked</I> property.</P>

<P>If the input element is not a checkbox or a radio button, the current value 
of the input element is displayed. This value will be the data inserted by the user or 
the default value that was specified by using the VALUE attribute.</P>

<P>Now go ahead and test your application. When you run it, the 
VbObjMdl.htm file should be loaded and displayed, as shown in Figure 8-5. To retrieve the 
entire HTML of the page and the HTML inside the body of the document, click all the 
buttons you've added to your form. Also enter some data into the text box, and check 
the check boxes and radio buttons. Then click the Get Form Data button to 
retrieve the entered data and display it in the text box.</P>

<P>
<A HREF="javascript:fullSize('F08ii05x.htm')"> <img src="images/F08ii05.JPG" width=404 height=293 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-5. </B> <I>VbObjMdl. </I><!-- /caption -->
</P>

<A NAME="207"><H2>Dynamically Inserting Data into a Web Page Using Visual Basic</H2></A>

<P>Once you know how to obtain data from a Web page, changing this 
data&#8212;whether it's HTML or data entered by the user&#8212;is simple. Most of the properties that you 
use to retrieve data also allow you to set that data. For example, as you've learned, 
you use the <I>innerHTML</I>,<I> outerHTML</I>,<I> 
innerText</I>,  and <I>outerText</I> properties to retrieve 
the inner or outer HTML, the text of the entire document, or the text of a specific 
element. You can also use these properties to change this data.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>Not all properties can be changed&#8212;some are read-only. When in 
doubt, refer to the MSDN Online Web Workshop.</blockquote></div>
</P>

<P>We'll change the VbObjMdl project to allow you to add HTML to the end of 
the Web page document. First add a new button to your form named 
<I>btnAddHTML</I>, and change its <I>Caption </I>property to 
<I>Add HTML</I>. When the Add HTML button is clicked, 
a form will be displayed that allows the user to enter HTML. This HTML will be 
appended to the end of the Web page after the form is closed.</P>

<P>Add a new form to your project by selecting Add Form from the 
Project  menu. From the Add Form dialog box, choose the basic form, and then click the Open 
button to add the form to your project. Change the 
<I>Caption </I>property of your form to <I>Add 
HTML</I>. Then add a text box to the new form, name it 
<I>txtHTML</I>,  set its <I>MultiLine 
</I>property to <I>True</I>, and clear its <I>Text 
</I>property. Add a button to the form, name it 
<I>btnOK</I>, and set its <I>Caption </I>property to 
<I>OK</I>. Your new form should look similar to Figure 8-6.</P>

<P>
<A HREF="javascript:fullSize('F08ii06x.htm')"> <img src="images/F08ii06.JPG" width=404 height=311 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-6. </B> <I>Add HTML form (Form2). </I><!-- /caption -->
</P>

<P>When the OK button is clicked, the text that is entered into the text box 
will be added to the end of the Web page being displayed inside the WebBrowser 
control on the main form. You need to add a little bit of code to make this work 
correctly. First, in the code window for your main form (Form1), create a public variable 
named <I>g_strHTML </I>of type <I>String</I>, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public g_strHTML As String
</PRE>
</td></tr></table></p>

<P>Next go back to Form2, and create a <I>Click 
</I>event handler for the OK button. The code for this button is quite simple. Just set the 
<I>g_strHTML</I> variable of Form1 to the text entered in the text box, and then unload Form2. (Note that if the user just 
clicks the system Close button, nothing will be added to the Web page. Clicking the 
system Close button is equivalent to canceling the operation.)</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnOK_Click()
   Form1.g_strHTML = txtHTML.Text
   Unload Me
End Sub
</PRE>
</td></tr></table></p>

<P>Now that you've written the code to obtain HTML from the user, you have 
to add the code to display this new form, and add the new HTML to the end of the 
Web page. Create a <I>Click </I>event handler for the Add HTML button. In this event 
handler, you create and show Form2 as a modal dialog box. When the user clicks the 
OK button in Form2,  the <I>g_strHTML</I> variable will be set to the text that was entered 
into the text box in the dialog box. If the user actually did enter text or HTML, you 
should call the <I>insertAdjacentHTML</I> method to add the HTML to the end of the Web 
page. (Remember the <I>insertAdjacentHTML</I> method from <A HREF="ch03a.htm">Chapter 3</A>?) Here's the code 
to implement the <I>Click</I> event handler for the Add HTML button:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnAddHTML_Click()
   g_strHTML = &quot;&quot;
    
   Dim frmHTML As Form2
   Form2.Show vbModal, Me
    
   If g_strHTML &lt;&gt; &quot;&quot; Then
      WebDoc.body.insertAdjacentHTML &quot;BeforeEnd&quot;, g_strHTML
   End If
End Sub
</PRE>
</td></tr></table></p>

<P>Now test the additions you've made to VbObjMdl. Click the Add HTML 
button to invoke the Add HTML dialog box, and enter some text or HTML into the text 
box. Then click OK to see the HTML added to the end of the page.</P>

<P>Along with changing the HTML on a page, you can insert or change data in 
form elements. You already know how to obtain this data, so inserting it into these 
elements should be a breeze. To add this insertion functionality to the VbObjMdl example, 
start by adding a text box and a button to Form1. Name the text box 
<I>txtNewText</I>, and leave its <I>Text </I>property empty. Name the button 
<I>btnChgText1</I>, and set its <I>Caption 
</I>property to <I>Change Text1</I>. When you enter text into the text box and click the Change 
Text1 button, the text you entered will be inserted into the text box on the 
VbObjMdl.htm Web page. Your new form should look similar to the one shown in Figure 8-7.</P>

<P>
<A HREF="javascript:fullSize('F08ii07x.htm')"> <img src="images/F08ii07.JPG" width=404 height=283 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-7. </B> <I>Form1 with new text box and Change Text1 button. </I><!-- /caption -->
</P>

<P>Now create a <I>Click </I>event handler for the Change Text1 button by 
double-clicking the button. Inside this event handler, set the value of the text box on the Web 
page to the text that was entered into the <I>txtNewText 
</I>text box. To do this, simply set the 
<I>Value</I> property of the <I>textbox</I> object on the Web page to the 
<I>Text</I> property of the <I>txtNewText</I> textbox on your form. Here's the code for the 
<I>Click</I> event handler for the Change Text1 button:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub btnChgText1_Click()
   On Error Resume Next
   WebDoc.Forms(0).Item(&quot;Text1&quot;).Value = txtNewText.Text
End Sub
</PRE>
</td></tr></table></p>

<P>This code might look a little complicated because we use object chaining, 
but it really isn't difficult. Let's examine the code a little more closely. First we get a 
reference to the form on the Web page by accessing the first item in the 
<I>Forms</I> collection. Because the text box on the Web page has an ID of 
<I>Text1</I>, we can reference the textbox input element by name using the 
<I>Item </I>method of the <I>form</I> object. 
Then, once we have a reference to the 
<I>textbox</I> object, we set the object's <I>Value 
</I>property to the text that was entered into the textbox input element on Form1.</P>

<P>Now run the final version of VbObjMdl. This time, enter some text into 
the <I>txtNewText</I> text box, and click the Change Text1 button. The text you've just 
entered will be inserted into the text box on the Web page. That's it! You can find the 
entire code for the final version of VbObjMdl on the companion CD in the folder \Samples\
Chap08\VbObjMdl.</P>

<P>I can't show you all the objects and interfaces of the DHTML Object Model, 
but the techniques you just learned work with all objects on the Web page. Now let's 
get down-and-dirty and talk about how to access and change the data on a Web 
page from a Visual C++ application.</P>

</BODY>
</HTML>





