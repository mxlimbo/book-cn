<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">

<TITLE>Chapter 9 -- Advanced Hosting Interfaces</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch08f.htm">[Previous]</A> <A HREF="ch09b.htm">[Next]</A><P>


<font size="+3">Chapter 9</font>

<A NAME="215"><H1>Advanced Hosting Interfaces</H1></A>

<p>During the time that I was a member of the Internet Client Development group 
of Microsoft Developer Support, I had the chance to work with customers who 
were creating some really cool applications using the WebBrowser control. Often 
these people wanted to know how to manage certain aspects of the WebBrowser 
control, such as its user interface, as well as learn what the WebBrowser could download 
and execute.</p>

<p>For example, one customer was struggling with an application she had 
written that was hosting the WebBrowser control. When her users right-clicked in 
the WebBrowser window and selected View Source from the context menu, they 
could view her source code. She, however, wanted to hide her source code from them. 
Our customer also wanted her users to use only her application for Internet and 
intranet browsing. But when her users pressed Ctrl-O, they could display the Open 
dialog box, type in a URL, and press Enter to invoke a new instance of the Microsoft 
Internet Explorer window.</p>

<p>Taking charge of the WebBrowser control's user interface, extending the 
DHTML Object Model, and controlling what the WebBrowser control can download 
and execute are all tasks that Internet Explorer's advanced hosting interfaces can 
manage for you. This chapter explains these advanced hosting interfaces, 
including <I>IDocHostUIHandler</I>,<I> 
ICustomDoc</I>,<I> </I>and <I>IDocHostShowUI</I>, and explains how to use 
a special ambient property, 
<I>DISPID_AMBIENT_DLCONTROL</I>, to control what users 
can download and execute when hosting the WebBrowser control. The information 
you learn in this chapter will give you the appropriate level of control to solve 
problems like the one I just described, as well as many others.</p>

<p>Unfortunately, the full ability to control tasks is available to you only if you 
are hosting the WebBrowser control in a Microsoft Visual C++ application, but you 
can integrate a subset of this functionality into Microsoft Visual Basic applications 
indirectly by using a Visual C++ COM object named 
<I>WBCustomizer.</I> In this chapter, you'll learn about 
<I>WBCustomizer</I>, which I created for customers, and see how 
to integrate its functionality into Visual Basic applications. Microsoft doesn't 
support this COM object, but you can create a similar COM object or update the one I 
created to accomplish whatever you want. First let's take a look at the advanced 
hosting interfaces.</p>

</BODY>
</HTML>





