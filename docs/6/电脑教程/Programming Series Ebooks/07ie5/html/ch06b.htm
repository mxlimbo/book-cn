<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Internet Explorer Architecture</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06a.htm">[Previous]</A> <A HREF="ch06c.htm">[Next]</A><P>

<A NAME="153"><H1>Internet Explorer Architecture</H1></A>

<P>The WebBrowser control consists of many different components. A lot of them 
are COM objects, which means that you can reuse them in your applications. If you 
are hosting the WebBrowser control or automating Internet Explorer, you need to 
know only a couple of components. Figure 6-1 shows the 
architecture of a WebBrowser host application such as one you might create using Visual 
Basic or Visual C++. As the figure shows, an application that is hosting the 
WebBrowser control consists of many components. The next several sections cover each of 
the components in turn, starting with the top component in the architecture.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Many of the components involved in hosting the WebBrowser control aren't shown in Figure 6-1. These components provide functionality such as downloading Web pages and ActiveX controls (URLMON) and supporting low-level communications (WININET). I won't cover these components in this chapter because you don't need to know about them to be able to host the WebBrowser control or automate Internet Explorer. The WebBrowser control handles control of and interaction with these components for you for free. If you were to create all this functionality from scratch, it could take years of effort and lots of pain.</blockquote></div></p>

<P>
<A HREF="javascript:fullSize('F06ii01x.htm')"> <img src="images/F06ii01.JPG" width=404 height=293 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-1.</B> <I>WebBrowser host architecture. Only the most critical 
components needed for hosting the WebBrowser control are shown.</I><!-- /caption -->
</P>

<A NAME="154"><H2>WebBrowser Control Host</H2></A>

<P>The first component in Figure 6-1 is the WebBrowser host, or container, which is 
any application that you develop to reuse the WebBrowser control. You can create 
applications by using Visual Basic, Visual C++, or any COM-aware development 
tool. The container must be able to host ActiveX controls; the WebBrowser control 
takes care of the rest.</P>

<P>The WebBrowser control is both an ActiveX control and an Active Document host. (For more information about Active Documents, refer to the MSDN documentation.) Because it's an ActiveX control, the WebBrowser can be hosted in any ActiveX control container. In other words, it can be reused just like the ActiveX controls you encountered in <A HREF="ch05a.htm">Chapter 5</A>. As an Active Document host, to view a file of a particular type, the WebBrowser control loads the Active Document server that is registered for that file type. If you want to load a .doc file, the WebBrowser control loads Microsoft Word; if you want to load an .xls file, the WebBrowser loads Microsoft Excel. With HTML files, the WebBrowser control loads a component named<I> </I>MSHTML, which is implemented in mshtml.dll, installed by Internet Explorer, and used to read and display Web pages. You no longer have to manually build an application that can load many different file types. You just have to host the WebBrowser control in your application, and&#8212;voila!</P>

<A NAME="155"><H2>SHDOCVW</H2></A>

<P>The second component shown in Figure 6-1 is SHDOCVW (pronounced sh-doc-view), which is implemented in shdocvw.dll. It holds the WebBrowser control (as well as other controls and COM objects) and provides browsing capability for your host. In Figure 6-1, notice that the WebBrowser control sits at the second level of the host architecture&#8212;Internet Explorer uses SHDOCVW even though Internet Explorer doesn't host the WebBrowser control directly. Although the SHDOCVW<I> </I>component provides Internet browsing, it doesn't provide all the functionality that the Internet Explorer window offers. Even so, SHDOCVW does simplify the process of creating a Web-enabled application. At the end of this chapter in the section titled &quot;<A HREF="ch06f.htm#173">Adding Advanced Functionality</A>&quot; as well as in later chapters, I'll show you how to include some functionality of the Internet Explorer window in your own applications.</P>

<A NAME="156"><H2>MSHTML</H2></A>

<P>As mentioned earlier, the MSHTML component (the third component in Figure 6-1) can read and display HTML pages. MSHTML is an Active Document server, so you can load it into the applications that are Active Document hosts. MSHTML is also an ActiveX control host. Just like the applications mentioned previously that host the WebBrowser control, MSHTML can host ActiveX controls. Remember that you can place ActiveX controls on a Web page&#8212;MSHTML is the control that hosts the ActiveX controls. And MSHTML can host other components such as Active scripting engines (like Microsoft VBScript and Microsoft JScript), Java applets, and plug-ins&#8212;not too surprising, because these components are implemented as ActiveX controls in Internet Explorer.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Developers typically refer to the process of reading and displaying 
a Web page as parsing and rendering the page, respectively.
</blockquote></div></p>


</BODY>
</HTML>






