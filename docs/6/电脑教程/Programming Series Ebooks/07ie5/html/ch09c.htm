<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>ICustomDoc</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09b.htm">[Previous]</A> <A HREF="ch09d.htm">[Next]</A><P>

<A NAME="222"><H1><I>ICustomDoc</I></H1></A>
<p>After telling my customer about 
<I>IDocHostUIHandler</I>, I thought all her problems 
were solved. But there was one more problem. Her application was created using 
Visual Basic, which means that she couldn't implement 
<I>IDocHostUIHandler</I>. That's where the <I>ICustomDoc 
</I>interface saves the day.</p>

<p>The MSHTML component implements the 
<I>ICustomDoc</I> interface to allow you to implement the 
<I>IDocHostUIHandler </I>interface in a COM object that is not 
a WebBrowser host. To specify your implementation of 
<I>IDocHostUIHandler</I>, which<I> </I>MSHTML should use when it needs user interface information, you simply 
query MSHTML (represented by the 
<I>IHTMLDocument2</I> interface) for the <I>ICustomDoc 
</I>interface and call its only method, 
<I>SetUIHandler</I>.<I> </I>To this method, you pass a pointer 
to your implementation of <I>IDocHostUIHandler</I>.</p>

<p>However, this approach has a few caveats. Certain 
<I>IDocHostUIHandler</I> methods are called by MSHTML only if the object implementing 
<I>IDocHostUIHandler </I>also implements 
<I>IOleClientSite</I>&#8212;in other words, only if the object is a host 
application. A couple of these methods are <I>GetHostInfo 
</I>and <I>GetExternal</I>. <I>ShowContextMenu 
</I>and <I>TranslateAccelerator </I>are called even if the host doesn't implement 
<I>IOleClientSite</I>.</p>

<p>Also remember that the <I>IDocHostUIHandler </I>methods are called by 
MSHTML, and <I>ICustomDoc </I>is implemented by the MSHTML component. Because a new 
version of MSHTML is loaded each time you navigate to a new Web page, you must 
query the document for <I>ICustomDoc </I>and call the 
<I>SetUIHandler </I>method each time a new page is loaded. You shouldn't call this method until the WebBrowser control fires 
its <I>NavigateComplete2 </I>event.</p>

<p>Here's how you would set your implementation of 
<I>IDocHostUIHandler </I>by using 
<I>SetUIHandler</I>. (Note that 
<I>m_spWebBrowser</I> is a smart pointer for the 
WebBrowser control.)</p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>if (m_spWebBrowser)
{
   CComPtr&lt;IDispatch&gt; spDoc;
   m_spWebBrowser-&gt;get_Document(&amp;spDoc);

   if (spDoc)
   {
      CComQIPtr&lt;ICustomDoc, &amp;IID_ICustomDoc&gt; spCustomDoc(spDoc);
      if (spCustomDoc)
         spCustomDoc-&gt;SetUIHandler(this);
   }
}
</PRE>
</td></tr></table></p>

</BODY>
</HTML>





