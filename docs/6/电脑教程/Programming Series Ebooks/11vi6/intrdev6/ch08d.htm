<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Using the User Interface DTCs</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08c.htm", "ch08e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="138"><H1>Using the User Interface DTCs</H1></A>
<P>The standard User Interface (UI) DTCs are:

</P>
<UL>
<P><LI>Button
</LI>
</P>
<P><LI>Textbox
</LI>
</P>
<P><LI>Listbox
</LI>
</P>
<P><LI>Label
</LI>
</P>
<P><LI>Grid
</LI>
</P>
<P><LI>Checkbox
</LI>
</P>
<P><LI>OptionGroup
</LI>
</P>
<P><LI>RecordsetNavbar
</LI></P>
</UL>




<P>These DTCs allow you to bind to a database and construct an 
event-driven interface. With these DTCs, you can build an interface with the same 
functionality of a traditional application written in Visual Basic but design the 
interface in a traditional Web style.

</P>
<P>You can use the events and methods of the DTCs to control their 
actions at run time. The next bit of code takes the value in the Listbox DTC and 
places it in the Textbox DTC. Then it hides the list box and displays the text box.

</P>
<P><PRE>
&lt;SCRIPT ID=clientEventHandlersVBS LANGUAGE=vbscript&gt;
&lt;!--

Sub window_onload
    Listbox1.addItem &quot;Widget A&quot;
    Listbox1.addItem &quot;Widget B&quot;
    Listbox1.addItem &quot;Widget C&quot;
    Listbox1.addItem &quot;Widget D&quot;
    txtItemName.hide
End Sub

Sub Listbox1_onchange()
    if Listbox1.getValue() &gt; &quot;&quot; then
        MsgBox &quot;list is: &quot; &amp; Listbox1.getText()
        txtItemName.value = Listbox1.getValue()
        Listbox1.hide
        txtItemName.show
    end if
End Sub
--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The above code comes from the InventoryListClient.asp file.<BR>
The <I>if</I> statement checks the value of the list box to determine whether 
the user has selected a valid entry. This expression must include the empty 
parentheses at the end of <I>getValue</I>:

</P>
<P><PRE>
Listbox1.getValue()
</PRE>

</P>
<P>The <I>()</I> must be included because 
<I>getValue</I> is a function. If you do not 
include them, this expression will evaluate to the JScript code that implements 
<I>getValue</I>. This is <I>not</I> the desired effect!

</P>
<P>The events for the DTCs are also handy for setting up database 
operations. You can use the <I>onchange</I> event to determine when a user has completed 
an action in a DTC, and then take the value of that DTC and perform some 
database action with it. To demonstrate this, we created InventoryLookup.asp 
and InventoryShow.asp.

</P>
<P>InventoryLookup.asp displays a list of item names in a list box. When 
a user selects an item, the <I>onchange</I> event navigates to InventoryShow.asp 
and displays the record which corresponds to that item. The 
InventoryLookup.asp file is shown in the Source Editor in Figure 8-3.

</P>
<P>
<A HREF="javascript:fullSize('F08lh03x.htm')"> <IMG SRC="images/F08lh03.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 8-3.</B> <I>The InventoryLookup.asp page contains Listbox, Recordset, and RecordsetNavbar DTCs.</I><!-- /CAPTION -->

</P>
<P>The Recordset DTC uses the following SQL statement to extract all 
the records in the ItemMaster table:

</P>
<P><PRE>
Select * from ItemMaster
</PRE>

</P>
<P>The Listbox DTC's properties are shown in Figure 8-4.

</P>
<P>
<IMG SRC="images/F08LH04.gif" width=401 height=325 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 8-4.</B> <I>The Lookup tab of the Listbox Properties dialog box sets the parameters for the lookup operation of the Listbox DTC, not the binding of the DTC.</I><!-- /CAPTION -->

</P>
<P>You can see in Figure 8-4 that the Recordset option is chosen in the 
List Source group on the Lookup tab. (There are no data settings for this DTC 
on the General tab because we are only using the DTC to populate the list, not 
to update a field in the recordset.) The Row Source drop-down list 
corresponds to the Listbox DTC's <I>RowSource</I> property, and is set to Recordset1. The 
Bound Column drop-down list corresponds to the 
<I>BoundColumn</I> property, and is set to ItemNumber&#8212;the field that should be returned from the list box when 
the user selects an entry. The List Field drop-down list corresponds to the 
<I>ListField</I> property, and is set to ItemName. When the page is displayed in the 
browser, the user will see a list of ItemName entries, which is more descriptive 
than ItemNumber entries. When the user selects an ItemName entry from the list, 
the corresponding ItemNumber is returned from the DTC. You will see how 
this works in the code in just a moment.

</P>
<P>In addition to the Recordset and Listbox DTCs, we added a 
PageObject DTC named <I>InventoryLookup</I>. The PageObject DTC will be used to store 
the ItemNumber in a property and to navigate to the page that will display the 
details for the item. To set the properties for the PageObject DTC, follow these steps:

</P>
<OL>
<P><LI>Right-click the PageObject DTC, and select Properties.
</LI>
</P>
<P><LI>Click the Properties tab in the PageObject Properties dialog box.
</LI>
</P>
<P><LI>Create a property with the name <I>ItemNumber</I>.
</LI>
</P>
<P><LI>Set the Lifetime for <I>ItemNumber</I> to Session.
</LI>
</P>
</OL>




<P>This creates a variable that we can use across the entire session.

</P>
<P>The Listbox DTC's <I>onchange</I> event is used to determine when the 
user selects an ItemName entry from the list. The code in the 
<I>onchange</I> event is shown below:

</P>
<P><PRE>
&lt;SCRIPT ID=serverEventHandlersVBS LANGUAGE=vbscript RUNAT=Server&gt;
Sub Listbox1_onchange()
    if Listbox1.getValue() then
        InventoryLookup.setItemNumber(Listbox1.getValue())
        InventoryLookup.navigateURL(&quot;InventoryShow.asp&quot;)
    end if
End Sub
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The first line checks the value of the list box to make sure it is not 
blank. The second line sets the PageObject DTC's 
<I>ItemNumber</I> property to the value contained in the list box. Pay particular attention to the parentheses on 
the methods such as <I>getValue</I>. It is important to note that the 
<I>set</I> and <I>get</I> methods for the PageObject DTC's properties are methods, not properties. To use 
them, you must pass the value in as a parameter to the method, as shown in 
the previous code. You cannot set the property using an equal sign (=), as you 
can in Visual Basic.

</P>
<P>The second line of code in the <I>onchange</I> event navigates to 
InventoryShow.asp.

</P>
<P>Figure 8-5 shows InventoryShow.asp in Design view.

</P>
<P>
<A HREF="javascript:fullSize('F08LH05x.htm')"> <IMG SRC="images/F08LH05.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 8-5.</B> <I>InventoryShow.asp uses the Recordset DTC to open the ItemMaster table.</I><!-- /CAPTION -->

</P>
<P>This page contains the following DTCs:

</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">

<TR>
<TH VALIGN="top"><B><I>DTC</I></B></TH>
<TH VALIGN="top"><B><I>Name</I></B></TH>
</TR>

<TR>
<TD VALIGN="top">Recordset</TD>
<TD VALIGN="top">Recordset1</TD>
</TR>

<TR>
<TD VALIGN="top">Textbox</TD>
<TD VALIGN="top">Textbox1 (displays ItemNumber)</TD>
</TR>

<TR>
<TD VALIGN="top">Textbox</TD>
<TD VALIGN="top">Textbox2 (displays ItemName)</TD>
</TR>

<TR>
<TD VALIGN="top">Textbox</TD>
<TD VALIGN="top">Textbox3 (displays ItemDescription)</TD>
</TR>

<TR>
<TD VALIGN="top">PageObject</TD>
<TD VALIGN="top">InventoryShow</TD>
</TR>
</TABLE>

</P>
<P>The Textbox DTCs are each bound to Recordset1. The SQL 
statement for Recordset1 is

</P>
<P><PRE>
Select * from itemmaster
</PRE>

</P>
<P>This SQL is used to preset the Recordset DTC so that we can bind the 
Textbox DTCs to it. When the page executes, we reset the SQL. The field that 
each Textbox DTC is bound to is shown after its name in the table above.

</P>
<P>After you add the Recordset DTC to the page, right-click the DTC, 
select Properties to display the Recordset Properties dialog box, and then click 
the Implementation tab. (See Figure 8-6.) Uncheck the Automatically Open 
The Recordset option, and then click Close to apply the change.

</P>
<P>
<IMG SRC="images/F08LH06.gif" width=404 height=356 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 8-6.</B> <I>You can change the implementation properties of a Recordset DTC by using the Recordset Properties dialog box.</I><!-- /CAPTION -->

</P>
<P>The Automatically Open The Recordset option is checked by 
default, which results in the recordset opening when the page loads. Unchecking 
this value allows you to control when the recordset opens.

</P>
<P>Add the PageObject DTC and set a reference to InventoryLookup.asp:

</P>
<OL>
<P><LI>Right-click the PageObject DTC, and select Properties.
</LI>
</P>
<P><LI>Click the References tab in the PageObject Properties dialog box.
</LI>
</P>
<P><LI>Click Browse (&#8230;), and select InventoryLookup.asp.
</LI>
</P>
</OL>




<P>Now you can add the code used in InventoryShow.asp just after 
the &lt;HEAD&gt; tag:

</P>
<P><PRE>
&lt;%
    dim ItemNumber
    ItemNumber = InventoryLookup.getItemNumber()
    Recordset1.setSQLText _
        (&quot;Select * from itemmaster where itemnumber = &quot; &amp; _
        ItemNumber)
    Recordset1.open
%&gt;
</PRE>

</P>
<P>The next line extracts the value from the 
<I>ItemNumber</I> property of the PageObject DTC in InventoryLookup.asp and places it in the 
<I>ItemNumber</I> variable using the 
<I>getItemNumber</I> method:

</P>
<P><PRE>
ItemNumber = InventoryLookup.getItemNumber()
</PRE>

</P>
<P>Then set the SQL for the recordset by concatenating the string using 
a Select statement and the <I>ItemNumber</I> variable. Now open the recordset 
using the <I>open</I> method.

</P>
<P>We can also provide this functionality in a single page without using 
the PageObject DTC. The page shown in Figure 8-7 is a single page. The user 
simply selects an item from the list box and the page redisplays with the 
correct information. The code for the page is also straightforward.

</P>
<P>
<A HREF="javascript:fullSize('F08LH07x.htm')"> <IMG SRC="images/F08LH07.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 8-7.</B> <I>The Listbox DTC and its </I>onchange<I> event control the operation of this page.</I><!-- /CAPTION -->

</P>
<P>Below, the code for InventoryLookup2.asp is shown from the 
beginning of the page through the &lt;/HEAD&gt; tag. The section of code below contains all the script that I added to the page.

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;%
    if thisPage.firstEntered then
        Listbox1.addItem &quot;&quot;,&quot;&quot;0
    end if
%&gt;
&lt;SCRIPT ID=serverEventHandlersVBS LANGUAGE=vbscript RUNAT=Server&gt;
Sub Listbox1_onchange()
    dim ItemNumber
    dim SQL

    if Listbox1.getValue() &gt; &quot;&quot; then
        ItemNumber = Listbox1.getValue()
        rsInventoryItem.close
        SQL = &quot;Select * from itemmaster where &quot; &amp; <U>_</U>
            &quot;ItemNumber = &quot; &amp; ItemNumber 
        rsInventoryItem.setSQLText(SQL)
        rsInventoryItem.open
    end if
End Sub
&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
</PRE>

</P>
<P>This code runs when the page is executed:

</P>
<P><PRE>&lt;%
    if thisPage.firstEntered then
        Listbox1.addItem &quot;&quot;,&quot;&quot;0
    end if
%&gt;
</PRE>

</P>
<P>If the page is executed as a result of a user navigating to it, 
<I>firstEntered</I> is True and the <I>addItem</I> method fires. This method is used to add a blank 
entry to the list. The 0 at the end of the parameters puts the blank entry at the top 
of the list. This code was added to present a blank to the user when the page 
first starts. If you do not use this code, the user cannot select the first item in 
the list without selecting another item in the list. Why, you might ask? When 
the page is loaded for the first time, the first entry in the list would be the first 
item in the recordset. If the user selects that item, the data the user selects and 
the data in the bound field are the same, and the 
<I>onchange</I> event does not fire. The blank entry solves this problem and gives the application a cleaner look.

</P>
<P>The code in the <I>onchange</I> event works similarly to the code we might 
use in a Visual Basic application containing a list box. The 
<I>if</I> statement makes sure we have a nonblank item in the list:

</P>
<P><PRE>
if Listbox1.getValue() &gt; &quot;&quot; then
</PRE>

</P>
<P>The next line extracts the current value from the list box and stores it 
in <I>ItemNumber</I>:

</P>
<P><PRE>
    ItemNumber = Listbox1.getValue()
</PRE>

</P>
<P>The next line might seem out of place. This line makes sure the 
recordset is closed before you try to open it. If you use 
<I>open</I> and the recordset is already open, it is not refreshed. Since we are changing the SQL for the recordset, 
it should be reopened anyway.

</P>
<P><PRE>
    rsInventoryItem.close
</PRE>

</P>
<P>This statement sets the variable <I>SQL</I> to the new query. The query is built in 
the same manner as the last page, except that we are now storing it in a variable:

</P>
<P><PRE>    SQL = &quot;Select * from itemmaster where &quot; &amp; <U>_</U>
        &quot;ItemNumber = &quot; &amp; ItemNumber
</PRE>

</P>
<P>This line sets the <I>SQLText</I> property of the recordset object:

</P>
<P><PRE>
    rsInventoryItem.setSQLText(SQL)
</PRE>

</P>
<P>The next line opens the recordset, and then we terminate the 
<I>if</I> statement:

</P>
<P><PRE>
        rsInventoryItem.open
    end if
</PRE>

</P>
<P>We created one more version of this page to demonstrate the 
flexibility of using the DTCs. This one is Inventory3.asp and uses the same list box 
and logic but replaces the Textbox DTCs with the Grid DTC. This page also 
allows you to choose between seeing one record or all records in the table by 
selecting the various items in the list.

</P>
<P>Figure 8-8 below shows the page when the user has 
selected All Items from the list.

</P>
<P>
<A HREF="javascript:fullSize('F08LH08x.htm')"> <IMG SRC="images/F08LH08.JPG" width=404 height=321 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 8-8.</B> <I>The list contains the All Items entry to allow users to select all records from the table.</I><!-- /CAPTION -->

</P>
<P>Notice that Figure 8-8 shows the Grid DTC displaying several rows. 
Figure 8-9 shows the same page when we have selected Widget A from the 
list. Notice how the display changes to show only that record.

</P>
<P>
<A HREF="javascript:fullSize('F08LH09x.htm')"> <IMG SRC="images/F08LH09.JPG" width=404 height=331 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 8-9.</B> <I>The Grid DTC automatically adjusts its output, depending upon the number of records in the recordset.</I><!-- /CAPTION -->

</P>
<P>You can see how the grid adjusts itself to the number of records in 
the recordset. Setting up the page to use the grid is quite simple:

</P>
<OL>
<P><LI>Delete the Textbox controls from the original page.
</LI>
</P>
<P><LI>Add the Grid DTC.
</LI>
</P>
<P><LI>Right-click the Grid DTC, and select Properties.
</LI>
</P>
<P><LI>Click the Data tab in the Grid Properties dialog box.
</LI>
</P>
<P><LI>Select the Recordset DTC to use from the Recordset drop-down list.
</LI>
</P>
<P><LI>Select the fields to use from the Available Fields list.
</LI>
</P>
</OL>




<P>Figure 8-10 shows the Data tab with the data-binding settings. Those 
are all the setting changes you must make to wire the control up and make it 
functional. In our sample, we also changed the layout and the number of 
records per page. You can see in Figure 8-10 that we also modified the headings.

</P>
<P>
<IMG SRC="images/F08lh10.gif" width=401 height=434 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 8-10.</B> <I>The Data tab of the Grid Properties dialog box contains the settings to bind the Grid DTC to the Recordset DTC.</I><!-- /CAPTION -->

</P>
<P>The code that controls this page is shown below:

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;%
    dim qFlag
    if thisPage.firstEntered then
        Listbox1.addItem &quot;All Items&quot;,&quot;*&quot;,0
        Listbox1.addItem &quot;&quot;,&quot;&quot;0
    end if

%&gt;
&lt;SCRIPT ID=serverEventHandlersVBS LANGUAGE=vbscript RUNAT=Server&gt;
Sub Listbox1_onchange()
    dim ItemNumber
    dim SQL
    if Listbox1.getValue() &gt; &quot;&quot; then
        ItemNumber = Listbox1.getValue()
        rsInventoryItem.close
        select Case ItemNumber
            case &quot;*&quot;: SQL = &quot;Select * from itemmaster&quot;
            case else: 
                SQL = &quot;Select * from itemmaster &quot; &amp; <U>_</U>
                    &quot; where ItemNumber = &quot; &amp; ItemNumber
        end select
        rsInventoryItem.setSQLText( sql)
        rsInventoryItem.open
    end if
End Sub
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The first bit of script code has the following line added:

</P>
<P><PRE>
Listbox1.addItem &quot;All Items&quot;,&quot;*&quot;,0
</PRE>

</P>
<P>This line adds the All Items entry in the list and places it just after the blank 
entry. The placement occurs because the line to add the blank entry follows this 
one. Also notice the * parameter. This sets the bound field of the control which 
is returned as the value field when we call 
<I>getValue</I>. So, when the user clicks the All Items entry, a 
* is returned so that we can correctly set the SQL statement.<BR>
Next I added this code to set the SQL statement:

</P>
<P><PRE>
select Case ItemNumber
    case &quot;*&quot;: SQL = &quot;select * from itemmaster&quot;
    case else: 
        SQL = &quot;Select * from itemmaster &quot; &amp; <U>_</U>
            &quot; where ItemNumber = &quot; &amp; ItemNumber
end select
</PRE>

</P>
<P>This code checks for an <I>ItemNumber</I> that is equal to 
*, and if it finds one, sets the SQL statement to retrieve all records from the database. If the value is 
not *, it sets the SQL statement as we did in the first two pages.

</P>
<P>Those are all the changes required to set up the Grid DTC as opposed 
to the Textbox DTCs. In fact, the first version of the Grid DTC page was made 
with no code changes whatsoever. We added the other features to enhance the 
page, but they were not required. This is one of the advantages of using the 
data-binding features. You can make changes quickly without having to do a lot 
of recoding.

</P>
</BODY>
</HTML>




