<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The Recordset Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14a.htm", "ch15a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="247"><H1>The <I>Recordset</I> Object</H1></A>
<P>As we have seen in previous chapters, you can use the Recordset 
design-time control (DTC) at design time to place a 
<I>Recordset</I> object onto your Web pages. After you have placed the Recordset DTC on your page, you can script the object in whatever manner necessary. The 
<I>Recordset</I> object has a rich set of properties, methods, and events for you to take advantage of in your applications.

</P>
<A NAME="248"><H2><I>Recordset</I> Properties</H2></A><P>The <I>Recordset</I> object has seven properties, as listed in Table 14-1.

</P>
<P><B>Table 14-1.</B> <I></I>Recordset<I> object properties.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Property</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>absolutePosition</I></TD>
<TD VALIGN="TOP"> Absolute position of the current record in
the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>BOF</I></TD>
<TD VALIGN="TOP">Cursor is positioned before the first record in
the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>EOF</I></TD>
<TD VALIGN="TOP">Cursor is positioned after the last record in
the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>fields</I></TD>
<TD VALIGN="TOP">Enables you to return names and values of
fields that are related to the <I>Recordset</I> object's fields</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>id</I></TD>
<TD VALIGN="TOP"><I>Recordset</I> object's ID</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>maintainState</I></TD>
<TD VALIGN="TOP">Maintains the state of the
<I>Recordset</I> object during server processing</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>name</I></TD>
<TD VALIGN="TOP"><I>Recordset</I> object's name</TD>
</TR>
</TABLE>
    



</P>
<A NAME="249"><H3><I>absolutePosition</I></H3></A><P>The <I>absolutePosition</I> property specifies the absolute position of the 
current record in the <I>Recordset</I> object. The syntax for the 
<I>absolutePosition</I> property is as follows,

</P>
<P><PRE><I>Recordset</I>.absolutePosition
</PRE>

</P>
<P>where <I>Recordset</I> is the name of your 
<I>Recordset</I> script object. The index returned is 1-based, so the first record is 1, the second record is 2, and so on. This 
can be useful for keeping track of the cursor location as the recordset is 
traversed. For example, you could use this property to print out the row number on a 
Web page, as shown here:

</P>
<P><PRE>Row &lt;% =rsAccountCode.absolutePosition %&gt; of 
&lt;% =rsAccountCode.getCount() %&gt;
</PRE>

</P>
<A NAME="250"><H3><I>BOF and EOF</I></H3></A><P>The <I>BOF</I> and <I>EOF</I> properties indicate when you are at the beginning and 
the end of the recordset data. These properties are quite useful when you are 
iterating through the recordset and displaying the results on screen. By 
checking the <I>EOF</I> property, you can determine when to end your loop, as in the 
following example:

</P>
<P><PRE>Do While not MyRecordset.EOF 
    Response.write MyRecordset.fields.getValue(&quot;myfield&quot;) 
    MyRecordset.moveNext 
Loop
</PRE>

</P>
<P>A more elaborate example using the &lt;TABLE&gt; syntax for formatting the 
resulting output might look like this:

</P>
<P><PRE>&lt;TABLE BORDER=1&gt;
&lt;TR&gt;
&lt;TH&gt;Account Id&lt;/TH&gt;
&lt;TH&gt;Account Description&lt;/TH&gt;
&lt;/TR&gt;
&lt;%
Do While NOT rsAccountCode.EOF
    Response.Write &quot;&lt;TR&gt;&lt;TD&gt;&quot; + _
        CStr(rsAccountCode.fields.getValue(&quot;account_id&quot;)) + _
        &quot;&lt;/TD&gt;&quot;
    Response.Write &quot;&lt;TD&gt;&quot; + _
        rsAccountCode.fields.getValue(&quot;account_description&quot;) + _
        &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    rsAccountCode.MoveNext
Loop
%&gt;
&lt;/TABLE&gt;
</PRE>

</P>
<P>Note that the <I>EOF</I> property tells you when the cursor is positioned 
<I>after</I> the last record in the recordset and the 
<I>BOF</I> property tells you when the cursor is positioned 
<I>before</I> the first record in the recordset. Both of these 
properties are read-only and available only at run time.

</P>
<A NAME="251"><H3><I>fields</I></H3></A><P>The <I>fields</I> property of the 
<I>Recordset</I> object is actually an object in itself. It 
contains the <I>fields</I> collection, which enables you to return names and values of 
fields that are related to the <I>Recordset</I> object's fields.

</P>
<P>The <I>fields</I> object has four methods: 
<I>getCount</I>, <I>getName</I>, <I>getValue</I>, 
and <I>setValue</I>, as shown in Table 14-2.

</P>
<P><B>Table 14-2.</B> <I> Methods for the </I>fields<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Method</I></B></TH>
<TH VALIGN="TOP"><I><B>Description</B></I></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>getCount</I></TD>
<TD VALIGN="TOP">Returns the number of items in the object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getName</I></TD>
<TD VALIGN="TOP">Returns the name of a field from the fields collection</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getValue</I></TD>
<TD VALIGN="TOP">Returns a value from an object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>setValue</I></TD>
<TD VALIGN="TOP">Sets a value of an object</TD>
</TR>
</TABLE>
   



</P>
<P>You can use <I>getCount</I> to determine the number of columns in 
the <I>Recordset</I> object, as in the following example:
</P>
<P><PRE>
Number of columns = &lt;% =rsAccountCode.fields.getCount() %&gt;
</PRE>

</P>
<P>You can use <I>getName</I> to determine the column name for each column 
in the <I>Recordset</I> object, as shown here:
</P>
<P><PRE>
&lt;%
For i = 0 to rsAccountCode.fields.getCount() - 1
    Response.Write &quot;Field &quot; + Cstr(i) + &quot; = &quot; + _
        rsAccountCode.fields.getName(i) + &quot;&lt;BR&gt;&quot;
Next
%&gt;
</PRE>

</P>
<P>Notice that when you use the <I>getName</I> method the index is zero-based. 
Therefore, <I>getName(0)</I> returns the column name for the first column, 
<I>getName(1)</I> returns the column name for the second column, and so on.

</P>
<P>You can use <I>getValue</I> to determine the values of the data in the 
<I>Recordset</I> object, as in the following example:
</P>
<P><PRE>
Account Id = &lt;% =rsAccountCode.fields.getValue(&quot;account_id&quot;) %&gt;
</PRE>

</P>
<P>This gets the value for the account_id column in the currently selected row. 
In addition to using the actual field name as the parameter for the 
<I>getValue</I> method, you can also use an index number. The index number is zero-based and 
indicates which column you are interested in. Assuming the account_id column 
is the first column in the <I>Recordset</I> object, the following code produces the 
same result as above by using an index instead of the column name. 
</P>
<P><PRE>
Account Id = &lt;% =rsAccountCode.fields.getValue(0) %&gt;
</PRE>

</P>
<P>You can use <I>setValue</I> to update the values of the data in the 
<I>Recordset </I>object, as in the following example:
</P>
<P><PRE>
rsAccountCode.fields.setValue &quot;account_id&quot;, 1
</PRE>

</P>
<P>This example updates the value of the account_id column to 1 for the 
currently selected record in the <I>Recordset</I> object. Changes are applied to the 
database directly using this method, eliminating the need to call the 
<I>updateRecord</I> method. When making these types of updates, be sure to check for errors 
arising from the database update because of primary or foreign key constraints.

</P>
<A NAME="252"><H3><I>id</I> and <I>name</I></H3></A><P>The <I>id</I> and <I>name</I> properties specify a unique identifier and the name of 
the <I>Recordset</I> object. These are often identical. The name is taken from the 
name given to the <I>Recordset</I> object on the General tab of the Recordset 
Properties dialog box. By default this name is Recordset#, where # is a sequential 
number. Both the <I>id</I> and <I>name</I> properties are read-only at run time. 

</P>
<A NAME="253"><H3><I>maintainState</I></H3></A><P>The <I>maintainState</I> property specifies whether the object state is 
maintained through server processing. The object state default setting is set to True. 
This means that the object maintains its properties and values during server 
processing. The object state can be turned off using the following syntax,
</P>
<P><PRE>
<I>ObjRS</I>.maintainState = False
</PRE>

</P>
<P>where <I>ObjRS</I> is the name of the <I>Recordset</I> object.

</P>
<A NAME="254"><H2><I>Recordset</I> Object Methods</H2></A><P>Table 14-3 lists the <I>Recordset</I> object's many methods.

</P>
<P><B>Table 14-3. </B> Recordset<I> object methods.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Method</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>addRecord</I></TD>
<TD VALIGN="TOP">Creates a new record in the
<I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>advise</I></TD>
<TD VALIGN="TOP">Registers an object to be notified and a
function to be called when a specific event occurs</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>cancelUpdate</I></TD>
<TD VALIGN="TOP">Cancels the changes being made to the
current record</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>close</I></TD>
<TD VALIGN="TOP">Closes a <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>deleteRecord</I> </TD>
<TD VALIGN="TOP">Deletes the current record from the
<I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getBookmark</I></TD>
<TD VALIGN="TOP">Returns a bookmark for the current record</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getConnectString</I></TD>
<TD VALIGN="TOP">Returns a text string or object that
determines the data connection
</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getCount</I></TD>
<TD VALIGN="TOP">Returns the number of items in the
<I>Recordset</I> object
</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getDHTMLDataSourceID</I></TD>
<TD VALIGN="TOP">Returns a text string from the ID of
the DHTML data source; available only in client script</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getParameter</I></TD>
<TD VALIGN="TOP">Gets a parameter from a stored procedure or parameterized query</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getRecordSource</I></TD>
<TD VALIGN="TOP">Returns the ActiveX Data Objects (ADO) <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>getSQLText</I></TD>
<TD VALIGN="TOP">Returns the SQL statement that queries the database for the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>isOpen</I></TD>
<TD VALIGN="TOP">Returns a Boolean value that indicates whether a <I>Recordset</I> object is open</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>move</I></TD>
<TD VALIGN="TOP">Moves the cursor, relative to its current position, within a <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>moveAbsolute</I></TD>
<TD VALIGN="TOP">Moves the cursor to a specific index within a <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>moveFirst</I></TD>
<TD VALIGN="TOP">Moves the cursor to the first record of the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>moveLast</I></TD>
<TD VALIGN="TOP">Moves the cursor to the last record of the <I>Recordset</I> object</TD>
</TR>
    
<TR>
<TD VALIGN="TOP"><I>moveNext</I></TD>
<TD VALIGN="TOP">Moves the cursor forward by one record within the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>movePrevious</I></TD>
<TD VALIGN="TOP">Moves the cursor backward by one record within the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>open</I></TD>
<TD VALIGN="TOP">Opens a <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>requery</I></TD>
<TD VALIGN="TOP">Refreshes the current recordset by requerying the database</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>setBookmark</I></TD>
<TD VALIGN="TOP">Sets the bookmark for pointing to a particular record</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>setParameter</I></TD>
<TD VALIGN="TOP">Sets a parameter for a stored procedure or parameterized query that is referenced by the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>setRecordSource</I></TD>
<TD VALIGN="TOP">Sets the connection properties for opening a <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>setSQLText</I></TD>
<TD VALIGN="TOP">Sets the SQL statement that is used to query the database for the recordset</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>unadvise</I></TD>
<TD VALIGN="TOP">Cancels the registration of an object that was registered by the <I>advise</I> method</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>updateRecord</I></TD>
<TD VALIGN="TOP">Updates the <I>Recordset</I> object with changes to the current record</TD>
</TR>
</TABLE>
</P>
<P>
</P>
<A NAME="255"><H3><I>addRecord, deleteRecord, updateRecord</I>, and <I>cancelUpdate</I></H3></A><P>The <I>addRecord</I>, <I>deleteRecord</I>, 
<I>updateRecord</I>, and <I>cancelUpdate</I> methods 
allow you to modify the <I>Recordset</I> object or cancel the update. The 
<I>addRecord</I> method adds a new record to the 
<I>Recordset</I> object, the <I>deleteRecord</I> method deletes 
a record, and the <I>updateRecord</I> updates the 
<I>Recordset</I> object with updates to the current record. Updates have to be made on a record-by-record basis. 

</P>
<P>The <I>cancelUpdate</I> method cancels the changes that are currently 
being made to the current record. This method is typically called from a cancel 
button that the user can click on to undo any pending changes to the data. 
The <I>cancelUpdate</I> method will replace the values on the form with their 
previous values prior to the user's changes.

</P>
<A NAME="256"><H3><I>advise</I> and <I>unadvise</I></H3></A><P>The <I>advise</I> method allows you to register an object to be notified and a 
function to be called when a specific event occurs. The syntax for the 
<I>advise</I> method is as follows:
</P>
<P><PRE>
[<I>id </I>= ]<I>object</I>.advise(<I>strEvent, CallFunction</I>)
</PRE>

</P>
<P>Here, <I>object</I> can be any script object, not just a 
<I>Recordset</I> object; <I>id</I> is an identifier that can be used by the 
<I>unadvise</I> method to unregister the object. 
The <I>strEvent</I> event causes the object to be notified; 
<I>CallFunction</I> is the function that the object should call when the event occurs.

</P>
<P>The <I>advise</I> method is needed only for events that are not implicit to 
the particular object in question. 

</P>
<P>The <I>unadvise</I> method cancels the registration of the object with the 
particular event. The syntax is as follows:
</P>
<P><PRE>
<I>object</I>.unadvise(<I>strEvent</I>, <I>id</I>)
</PRE>

</P>
<A NAME="257"><H3><I>close</I>, <I>open</I>, and <I>isOpen</I></H3></A><P>The <I>close</I>, <I>open</I>, and 
<I>isOpen</I> methods are useful when you want to use the 
same recordset but make a few programmatic modifications. For example, you 
might want to allow an end user to build his or her own queries and then view 
the results. After the results have been displayed, you might want to give the 
user the ability to create a new, different query using the same recordset behind 
the scenes. To do this, you'll need to close the recordset, modify the SQL 
statement, and then reopen the recordset. The following code shows an example:
</P>
<P><PRE>
If rsQuery.isOpen() Then
    rsQuery.close()
    &#8230;
    // Build your custom SQL statement here.
    &#8230;
    rsQuery.setSQLText(strSQL)
    rsQuery.open()
End If
</PRE>

</P>
<A NAME="258"><H3><I>getBookmark</I> and <I>setBookmark</I></H3></A><P>The <I>getBookmark</I> and <I>setBookmark</I> methods allow you to set a bookmark 
for the current record in the recordset and then to return to that specific record 
even if the recordset has been closed and then reopened. The bookmarks also 
work if you have added or deleted records from the recordset between the time 
you get the bookmark and the time you set the bookmark.

</P>
<P>The syntax for using the <I>getBookmark</I> method is as follows,
</P>
<P><PRE>
<I>strBookmark</I> = <I>Recordset</I>.getBookmark()
</PRE>

</P>
<P>where <I>strBookmark</I> is a string representing the value of the bookmark.

</P>
<P>The syntax for using the <I>setBookmark</I> method is shown here:
</P>
<P><PRE>
<I>Recordset</I>.setBookmark(<I>strBookmark</I>)
</PRE>

</P>
<P>You might use these methods in your applications when you want to add 
bookmarking capability to an online catalog. This way you can allow your users 
to bookmark an item of interest and then to return to it later on. To do this, 
you would call the <I>getBookmark</I> and 
<I>setBookmark</I> methods from a couple of buttons that you'd place on screen. The following code shows an example:
</P>
<P><PRE>
&lt;SCRIPT ID=serverEventHandlersVBS LANGUAGE=vbscript RUNAT=Server&gt;
Sub getBookmark_onclick()
    Session(&quot;tmpBookmark&quot;) = rsCustomer.getBookmark()
    Response.Write Session(&quot;tmpBookmark&quot;)
End Sub

Sub setBookmark_onclick()
    rsCustomer.setBookmark(Session(&quot;tmpBookmark&quot;))
End Sub
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>In this example, the scripting platform is server-side. The Web page 
for this example contains two buttons, as shown in Figure 14-1. 
The Bookmark This Record button is used to create the bookmark; the Return To Bookmark 
button is used to return to the bookmark. Since the bookmark must be 
persisted between calls to the ASP Web page, it is stored in a 
<I>Session</I> object variable. The code for this example is contained on the CD-ROM in the DBSamples 
Web project in a file named Bookmark.asp. To illustrate the actual text 
contained in a bookmark, the <I>onclick</I> event of the 
<I>getBookmark</I> button prints out the value of the bookmark. You can see from Figure 14-1 that the bookmark 
string contains the absolute number of the row plus the primary key value for 
the <I>Recordset</I> object.

</P>
<P>
<A HREF="javascript:fullSize('f14lh01x.htm')"> <IMG SRC="images/f14lh01.jpg" width=404 height=280 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 14-1. </B> <I> Sample Web page with bookmarking functionality.</I><!-- /CAPTION -->

</P>
<P>When the user creates the bookmark and then clicks the Return To 
Bookmark button, the ASP Web page reloads and displays the bookmarked record.

</P>
<A NAME="259"><H3><I>getConnectString</I></H3></A><P>The <I>getConnectString</I> method returns a text string that shows the data 
connection string for the <I>Recordset</I> object. The following code shows an example:
</P>
<P><PRE>
Connection String = &lt;% =rsAccountCode.getConnectString() %&gt;
</PRE>

</P>
<P>A typical connection string output from the above statement would be:
</P>
<P><PRE>
Connection String = Provider=MSDASQL.1;User ID=admin;
    Connect Timeout=15;Extended Properties=&quot;DBQ=C:\database\bank.mdb;
    DefaultDir=C:\database;Driver={Microsoft Access Driver 
    (*.mdb)};DriverId=25;FIL=MS Access;ImplicitCommitSync=Yes;
    MaxBufferSize=512;MaxScanRows=8;PageTimeout=5;
    SafeTransactions=0;Threads=3;UID=admin;UserCommitSync=Yes;&quot;;
    Locale Identifier=1033
</PRE>

</P>
<A NAME="260"><H3><I>getCount</I></H3></A><P>The <I>getCount</I> method can be used to determine the number of records 
present in the <I>Recordset</I> object, as shown in the following example:
</P>
<P><PRE>
Number of records = &lt;% =rsAccountCode.getCount() %&gt;
</PRE>

</P>
<P>This is useful if you wish to inform the user of the total record 
count&#8212;perhaps at the bottom of a Web page that shows 10 records at a time. The 
<I>getCount</I> method can be applied to other scripting objects, such as list boxes, as well 
as to <I>Recordset</I> objects.

</P>
<A NAME="261"><H3><I>getDHTMLDataSourceID</I></H3></A><P>The <I>getDHTMLDataSourceID</I> method returns a text string that represents 
the ID of the DHTML data source. This method is available only in client script. 
The method must be placed in client side, and the 
<I>Recordset</I> object must be set for the client (IE 4.0 DHTML) scripting platform.
</P>
<P><PRE>
&lt;SCRIPT ID=clientEventHandlersVB LANGUAGE=VBSCRIPT&gt;
&lt;!--
Sub rsAccountCode_ondatasetcomplete()
    MsgBox(rsAccountCode.getDHTMLDataSourceID())
End Sub
//--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The example above would return an ID such as rsAccountCode_RDS. This 
ID can be used to bind the <I>Recordset</I> object with intrinsic HTML.

</P>
<A NAME="262"><H3><I>getParameter and setParameter</I></H3></A><P>The <I>getParameter</I> method gets a parameter from a stored procedure or 
a parameterized query. The syntax is as follows:
</P>
<P><PRE>
<I>Recordset</I>.getParameter(<I>n</I>)
</PRE>

</P>
<P>Here, <I>n&#8212;</I>which is zero-based&#8212;is the index that specifies the particular 
parameter to return.

</P>
<P>The <I>setParameter</I> method sets a parameter for a stored procedure or 
a parameterized query. The syntax is as follows:
</P>
<P><PRE>
<I>Recordset</I>.setParameter(<I>nIndex</I>, <I>strParameter</I>)
</PRE>

</P>
<P>Here, <I>nIndex</I> is the zero-based parameter number to set, and 
<I>strParameter</I> is a string value that you want to assign to the parameter. You could use 
the <I>setParameter</I> method to pass a parameter to a 
<I>Recordset</I> object, as follows:
</P>
<P><PRE>
&lt;%
rsAccountCode.setParameter 0, 4
rsAccountCode.open()
%&gt;
</PRE>

</P>
<P>Notice that the Automatically Open The Recordset check box in the 
Implementation tab of the Recordset Properties dialog box must not be set, as 
shown in Figure 14-2. This is because the 
<I>setParameter</I> method must be called prior to opening the recordset. In the sample code listed above, a parameter 
value of 4 is passed into the first parameter of the 
<I>Recordset</I> object. In the following example, the 
<I>Recordset</I> object is actually a parameterized query:
</P>
<P><PRE>
SELECT account_id, account_description FROM Account_Code 
    WHERE (account_id = ?) ORDER BY account_id
</PRE>

</P>
<P>
<IMG SRC="images/f14lh02.gif" width=404 height=356 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 14-2. </B> <I> The Implementation tab of the Recordset Properties dialog box showing the Automatically Open The Recordset check box.</I><!-- /CAPTION -->


</P>
<P><div class="note"><blockquote>
<B>Note</B><hr>If the <I>Recordset</I> object represents a stored procedure, as 
opposed to a parameterized query, the 0 index refers to the return value from 
the stored procedure and the 1 index and above refer to the actual 
parameters that are passed to the stored procedure.
</blockquote></div>

</P>
<A NAME="263"><H3><I>getRecordSource</I> and <I>setRecordSource</I></H3></A><P>The <I>getRecordSource</I> method returns the ADO 
<I>Recordset</I> object. This object can then be used to access properties and methods supported by ADO that are 
not exposed in the <I>Recordset</I> script object.

</P>
<P>The <I>setRecordSource</I> method sets the connection properties for 
opening a <I>Recordset</I> object. You can pass the 
<I>setRecordSource</I> method either an ADO 
<I>Recordset</I> object or a data connection string plus a SQL statement.

</P>
<P>An interesting application of the <I>setRecordSource</I> method is to assign a recordset returned from a middle-tier COM component to a <I>Recordset</I> script object within your Web page. This way you can pass rich data types such as <I>Recordset</I> objects between two tiers of your Web applications, and you don't have to worry, for example, about programmatically parsing through strings with delimiters to separate variables. The following code shows an example of 
how you would take a recordset returned from a server-side component and load 
it into a <I>Recordset</I> script object within your Web page:
</P>
<P><PRE>
Sub rsData_onbeforeopen()
    Set obj = Server.CreateObject(&quot;COMObject.Class&quot;)
    rsData.setRecordSource( obj.recordsetfunction )
End Sub
</PRE>

</P>
<P>In this example, VBScript running on the server side within an ASP 
Web page creates an instance of a server-side component named 
<I>COMObject.Class</I> and then executes its 
<I>recordsetfunction</I> method. The recordset returned 
from the function is assigned to the <I>rsData</I> recordset using the 
<I>setRecordSource</I> method.

</P>
<A NAME="264"><H3><I>getSQLText</I> and <I>setSQLText</I></H3></A><P>The <I>getSQLText</I> and <I>setSQLText</I> methods are useful if you want to display 
the SQL statement to the user or if you wish to adjust the SQL statement. 
The following example shows how to determine the SQL statement and present 
it to the user:
</P>
<P><PRE>
SQL = &lt;% =rsAccountCode.getSQLText() %&gt;
</PRE>

</P>
<P><div class="note"><blockquote>
<B>Note</B><hr>If you use <I>getSQLText</I> to get the SQL statement for a 
<I>Recordset</I> object containing a parameterized query, you will get the placeholder 
for the parameter along with the SQL statement,  not the actual value of 
the parameter. This is true even if you have already used the 
<I>setParameter</I> method to specify the parameter. To get the parameter value, use 
the <I>getParameter</I> method.
</blockquote></div>

</P>
<P>To set the SQL statement for the 
<I>Recordset</I> object, use the <I>setSQLText</I> method and pass it the relevant SQL statement, as in the following example:
</P>
<P><PRE>
<I>Recordset</I>.setSQLText(&quot;select * from account_code order by account_id&quot;)
</PRE>

</P>
<P>The <I>setSQLText</I> method can be used for custom queries, as mentioned 
in the earlier section on the <I>open</I> and 
<I>close</I> methods. The following code shows an example:
</P>
<P><PRE>
Sub Search_onclick()
    rsSearch.close()
    sql = &quot;SELECT * FROM Customer WHERE first_name like '%&quot; + _
        txtFirst.value + &quot;%' AND last_name like '%&quot; + _
        txtLast.value + &quot;%' AND city like '%&quot; + _
        txtCity.value + &quot;%' ORDER BY &quot; + _
        txtOrder.getValue(txtOrder.selectedIndex)
    rsSearch.setSQLText(sql)
    rsSearch.open()
End Sub
</PRE>

</P>
<P>In this example, the SQL statement is built by using the values that the end 
user has entered into text boxes for the search criteria: first name, last name, and 
city. The SQL statement also includes an ORDER BY clause that is determined by 
the end user's selection from a drop-down list box named 
<I>txtOrder</I>. The complete Web page for this sample search is on the companion CD-ROM under 
the DBSamples Web project. It includes a 
<I>Recordset</I> object, <I>rsSearch</I>, which 
takes the custom SQL statement, a search button for building the query and 
performing the search, and a Grid DTC for displaying the output results. Figure 14-3 
shows how this page&#8212;named setSQLText.asp&#8212;appears within Visual InterDev 6.0.

</P>
<P>
<A HREF="javascript:fullSize('f14lh03x.htm')"> <IMG SRC="images/f14lh03.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 14-3.</B> <I> setSQLText.asp is a sample Web page that uses the </I>setSQLText<I> method to provide a custom query capability.</I><!-- /CAPTION -->

</P>
<A NAME="265"><H3>Navigation methods</H3></A><P>Six methods can be used for <I>Recordset</I> navigation: 
<I>move</I>, <I>moveAbsolute</I>, <I>moveFirst</I>, 
<I>moveLast</I>, <I>moveNext</I>, and 
<I>movePrevious</I>. The latter four are by far the 
most common and are fairly self-explanatory. The 
<I>move</I> method moves the cursor a certain number of records&#8212;either forward or backward&#8212;from its current 
position. The syntax for the <I>move</I> method is as follows:
</P>
<P><PRE>
<I>Recordset</I>.move(<I>nRecords</I>)
</PRE>

</P>
<P>Here <I>nRecords</I> is an integer that determines the number of records to move 
either forward or backward. If the integer is positive, the cursor moves forward. If it 
is negative, the cursor moves backward. The method returns a Boolean 
value indicating the success or failure of the operation.

</P>
<P>The <I>moveAbsolute</I> method allows you to move the cursor to a 
specific record in the <I>Recordset</I> object. The syntax is as follows:
</P>
<P><PRE>
<I>Recordset</I>.moveAbsolute(<I>n</I>)
</PRE>

</P>
<P>Here <I>n</I> is an index that specifies the number of the record to move to. The 
index is 1-based, so if <I>n</I> is 1 the cursor moves to the first record, and so on.

</P>
<A NAME="266"><H2><I>Recordset</I> Events</H2></A><P>At run time, the <I>Recordset</I> object exposes several events (via the Scripting 
Object Model) that can be handled either on the server side within Active Server 
Pages or on the client side using Dynamic HTML. These events give Web 
developers precise control over their data-driven applications at all stages of 
recordset processing. <I>Recordset</I> object events are triggered as a response to certain 
user actions or changes that occur in the recordset itself.

</P>
<P>Table 14-4 lists the seven events available within the <I>Recordset</I> object.

</P>
<P><B>Table 14-4. </B> Recordset<I> object events.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Event</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>onafterupdate</I></TD>
<TD VALIGN="TOP">Fires after the <I>UpdateRecord</I> method has been called successfully on the
<I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>onbeforeopen</I></TD>
<TD VALIGN="TOP">Occurs right before a <I>Recordset</I> object is opened (either automatically or through the <I>open</I> method)</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>onbeforeupdate</I></TD>
<TD VALIGN="TOP">Fires after the <I>UpdateRecord</I> method has been called, but before the actual update occurs on the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>ondatasetchanged</I></TD>
<TD VALIGN="TOP">Occurs whenever there is a change made to the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>ondatasetcomplete</I></TD>
<TD VALIGN="TOP">Occurs when the <I>Recordset</I> object has finished being downloaded from the server</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>onrowenter</I></TD>
<TD VALIGN="TOP">Occurs when the cursor position moves to another record in the <I>Recordset</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>onrowexit</I></TD>
<TD VALIGN="TOP">Occurs when the cursor position moves from a record in the <I>Recordset</I> object</TD>
</TR>
</TABLE>



</P>
<P>Each event fires at a certain point during recordset processing. For 
example, during a simple select operation where data is queried and then 
loaded into the recordset, the following events are triggered: 
<I>onbeforeopen</I>, <I>onrowenter</I>, 
<I>onrowexit</I>, <I>onrowenter</I>, 
<I>ondatasetchanged</I>, and 
<I>ondatasetcomplete</I>. An update operation triggers 
<I>onbeforeupdate</I> and <I>onafterupdate</I>. Record navigation 
triggers <I>onrowexit</I> and <I>onrowenter</I>.

</P>
<P>An easy way to determine the sequence of event firing is to display 
a message within your event handlers indicating which event has fired. This 
can be achieved by using the <I>MsgBox</I> function for client-side scripting or by 
using the <I>Response.Write</I> syntax for server-side scripting. Be aware of the 
sequence of event firing so that you can place validation code and other types of 
code in the appropriate events.

</P>
<A NAME="267"><H3>The <I>onafterupdate</I> event</H3></A><P>The <I>onafterupdate</I> event fires after the record has been updated via the 
<I>UpdateRecord</I> method. This event can be used to notify the end user that changes 
have been successfully saved to the database. The following code shows an example:
</P>
<P><PRE>
&lt;SCRIPT ID=clientEventHandlersVB LANGUAGE=vbscript&gt;
&lt;!--
Sub rsProfile_onafterupdate()
    MsgBox &quot;Your changes have been saved.&quot;, 0, &quot;VI-Bank&quot;
End Sub
//--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>This code would be placed within the &lt;HEAD&gt; section of your HTML code 
and would be appropriate for Internet Explorer browsers since the scripting 
language is VBScript.

</P>
<A NAME="268"><H3>The <I>onbeforeopen</I> event</H3></A><P>The <I>onbeforeopen</I> event fires before the recordset is opened either 
automatically or via the <I>open</I> method. It is useful if you want to change the SQL 
statement for the recordset or set some parameters. 

</P>
<A NAME="269"><H3>The <I>onbeforeupdate</I> event</H3></A><P>The <I>onbeforeupdate</I> event fires after the 
<I>UpdateRecord</I> method has been called but before the actual update occurs within the data source. This event 
is extremely useful for data validation. Within the 
<I>onbeforeupdate</I> event, data fields that have been input by the user can be validated against certain criteria. If 
they meet the criteria, the update can be allowed to proceed; if they do not 
meet the criteria, you can call the 
<I>CancelUpdate</I> method within the event to 
cancel the update and prompt the user to retry the input with some different 
values. Here's an example:
</P>
<P><PRE>
&lt;SCRIPT ID=clientEventHandlersVB LANGUAGE=vbscript&gt;
&lt;!--
Sub rsProfile_onbeforeupdate()
    If trim(rsProfile.fields.getValue(&quot;e_mail&quot;)) = &quot;&quot; Then      
        MsgBox &quot;E-Mail is a required field.&quot;, 0, &quot;VI-Bank&quot;
        rsProfile.CancelUpdate()
   End If
End Sub
//--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>This example checks the value of the e_mail field within the 
<I>rsProfile</I> <I>Recordset</I> object. If there is no entry in the field, a message box appears to 
the user and reminds the user that this is a required field. Finally, the 
<I>CancelUpdate</I> method is used to cancel the update of the recordset. If you were writing 
the same procedure for server-side execution, you might take advantage of a 
label field for displaying the message, like this:
</P>
<P><PRE>
Sub rsProfile_onbeforeupdate()
    If trim(rsProfile.fields.getValue(&quot;e_mail&quot;)) = &quot;&quot; Then      
        lblStatus.setCaption(&quot;E-Mail is a required field.&quot;)
        rsProfile.CancelUpdate()
   End If
End Sub
</PRE>

</P>
<A NAME="270"><H3>The <I>ondatasetchanged</I> event</H3></A><P>The <I>ondatasetchanged</I> event fires whenever there is a change made to 
the <I>Recordset</I> object. The event is fired under two circumstances: after a new 
data set is requested or when the existing data set is altered via the 
<I>addRecord</I>, <I>deleteRecord</I>, or 
<I>updateRecord</I> methods.

</P>
<A NAME="271"><H3>The <I>ondatasetcomplete</I> event</H3></A><P>The <I>ondatasetcomplete</I> event fires when the 
<I>Recordset</I> object has finished being downloaded from the server. When the scripting platform is 
Internet Explorer 4.0, this means that the 
<I>Recordset</I> object has cached all its data on the client. 
When the scripting platform is ASP, this means that the 
<I>Recordset</I> object is completely available to the ASP code. In either case, all the 
requested data is available in the 
<I>Recordset</I> object once the 
<I>ondatasetcomplete</I> event has fired (assuming the query was valid and returned some rows).

</P>
<P>This event is particularly useful when performing client-side 
scripting because the data transfer is asynchronous. The 
<I>ondatasetcomplete</I> event can be used to tell you when the entire transfer of data from the server to the 
client has completed.

</P>
<A NAME="272"><H3>The <I>onrowenter</I> event</H3></A><P>The <I>onrowenter</I> event fires when the cursor position moves to another 
record in the <I>Recordset</I> object. Methods that can trigger this event include the 
<I>move</I>, <I>moveAbsolute</I>, <I>moveFirst</I>, 
<I>moveLast</I>, <I>movePrevious</I>, and 
<I>moveNext</I> methods. The event is also fired when data is first populated into the 
<I>Recordset</I> object.

</P>
<P>An interesting thing happens at the first or last row of the 
<I>Recordset</I> object. If the cursor is on the first row and the 
<I>movePrevious</I> method is called, the cursor moves to the BOF record and then back to the first row again. This causes 
the <I>onrowenter</I> event to fire twice. If the cursor is on the first row and the 
<I>moveFirst</I> method is called, the cursor simply moves to the first row and the 
<I>onrowenter</I> event fires once. Something similar happens when the cursor is located on 
the last row of the <I>Recordset</I> object. The 
<I>moveNext</I> method causes the 
<I>onrowenter</I> event to fire twice, whereas the 
<I>moveLast</I> method causes the 
<I>onrowenter</I> event to fire just once.

</P>
<A NAME="273"><H3>The <I>onrowexit</I> event</H3></A><P>The <I>onrowexit</I> event fires when the cursor position moves from a record in 
the <I>Recordset</I> object. Methods that can trigger this event include 
the<I> move</I>, <I>moveAbsolute</I>, 
<I>moveFirst</I>, <I>moveLast</I>, 
<I>movePrevious</I>, and <I>moveNext</I> methods. The 
event is also fired when data is first populated into the 
<I>Recordset</I> object.

</P>
<P>If you are using the client-side scripting platform, the 
<I>onrowexit</I> event also fires when you move away from the Web page within your 
browser&#8212;perhaps by using the browser's Back button, Refresh button, Home button, or 
bookmarks. You can't use this event to determine whether the user is leaving 
the page, however, because it also fires when the user first retrieves the record 
and then whenever the user navigates through the 
<I>Recordset</I> object. 

</P>
<P>If you want to know when the user is leaving the page, you should 
use another event&#8212;the <I>onbeforeunload</I> event for the window object. The 
window object <I>onbeforeunload</I> event can therefore be used to warn users that 
their changes (if any have been made) will be lost if they continue with the 
operation and they have not yet saved the changes. You can present the user with 
a message box and then allow the user to decide whether to continue and 
thereby lose any changes or to go back to the page and save any changes. 
</P>
<P><PRE>
Function window_onbeforeunload()
    window_onbeforeunload = &quot;If you have made changes and have &quot; + _
        &quot;not yet saved them, they will be lost.&quot;
End Function
</PRE>

</P>
<P>
Figure 14-4 shows the dialog box that appears given the sample code above.

</P>
<P>
<IMG SRC="images/f14lh04x.gif" width=422 height=152 border=0> 

</P>
<P>
<!-- CAPTION --><B>Figure 14-4.</B> <I> A message box that asks users if they want to navigate away from the current page.</I><!-- /CAPTION -->
</P>
</BODY>
</HTML>




