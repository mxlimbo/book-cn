<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Introducing VBScript and JScript</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10e.htm", "ch10g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="157"><H1>Introducing VBScript and JScript</H1></A>
<P>Microsoft Visual InterDev offers two scripting languages for Web page 
development: VBScript and JScript. Both are secure and safe. Script writers 
cannot perform any actions that will harm another user's system without using 
some additional type of application or component.

</P>
<P>VBScript is a subset of the Visual Basic programming language. It 
is stripped down so that you can implement it without a large set of support 
files and so that it can be secure. VBScript programs run on a Web browser, 
with the VBScript code itself embedded as part of a Web page. This means that 
you can unknowingly download and execute VBScript programs as you browse 
the Web. To make browsing safe, Microsoft has removed everything from 
Visual Basic that might interact with the computer in any kind of dangerous way.

</P>
<P>You can use VBScript to generate a Web page dynamically, and you 
can use it to validate data on a form before you send it to the server. These 
features reduce the amount of traffic that has to be sent over the Internet and 
reduces the load on your Web server. In this sense, VBScript makes Web 
technology increasingly client-server&#8212;part of the load is handled by the Web server 
and part of it is handled by the browser.

</P>
<A NAME="158"><H2>Anatomy of VBScript</H2></A><P>VBScript is embedded on a Web page between &lt;SCRIPT&gt; tags, as shown below:

</P>
<P><PRE>&lt;SCRIPT LANGUAGE = VBScript&gt;
&lt;!--
Function Cube(num)
    Cube = num * num * num
End Function
--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>These tags mark the beginning and end of a VBScript. The VBScript 
code itself is also embedded between comment tags if it is sent as part of the 
HTML stream to the browser. Therefore, if you send your page to a browser that 
cannot understand VBScript, the code is simply ignored and not displayed. 
Server-side scripting does not require the comment tags.

</P>
<A NAME="159"><H3>Comments</H3></A><P>You can place comments within your VBScript code by using either the 
remark keyword (<I>REM</I>) or an apostrophe ('), as follows:

</P>
<P><PRE>REM This is a comment
' This is another comment
</PRE>

</P>
<A NAME="160"><H3>Variables</H3></A><P>A variable is a temporary storage area for data. You can create variables in 
one of two ways with VBScript. You can declare a variable using a 
<I>Dim</I> statement or you can declare more than one variable in the 
<I>Dim </I>statement by separating the variables with commas, as shown here:

</P>
<P><PRE>Dim age, height, weight
</PRE>

</P>
<P>You can also implicitly create a variable by referring to it in your code. 
If the variable has not been created when you first refer to it, it is created at 
that point in the code. This might seem like a convenient way to create 
variables, but it is not good programming practice. If you make a habit of not using 
the <I>Dim </I>statement to declare variables, you increase the chance of 
accidentally creating a new variable by misspelling the name of an existing one.

</P>
<P>VBScript's <I>Option Explicit</I> command forces you to declare variables 
using the <I>Dim </I>statement. The <I>Option 
Explicit</I> command should be the first command in your VBScript. 
<I>Option Explicit</I> disables implicit variable declaration, so if 
you use a variable without first declaring it, a Variable Is Undefined error is 
generated. This message contains the variable name and the line number of the 
statement that has the undefined variable.

</P>
<A NAME="161"><H3>Arrays</H3></A><P>A variable that holds a single value is said to be 
<I>scalar</I>. The following example creates the variable 
<I>Name</I>:

</P>
<P><PRE>Dim Name
</PRE>

</P>
<P><I>Name </I>can hold any value, but it can hold only one value at a time. 
Any value you place in <I>Name</I> will replace the existing value.

</P>
<P>You can also dimension an array variable:

</P>
<P><PRE>Dim  Names(10), Addresses(10,3)
</PRE>

</P>
<P>In this example, <I>Names </I>has space for 11 values, from 0 through 10. 
All arrays in VBScript are zero-based, so the first element is always 0. The 
<I>Addresses</I> array is two-dimensional; it has 11 
* 4 values. (Remember the zero-based arrays in VBScript.) You can dimension an array with up to 60 dimensions, but if 
you find yourself using more than two or three, you're probably using the 
array incorrectly. When you multiply the number of elements in each dimension, 
you get the total number of elements in the array. If you use several 
dimensions, you'll quickly allocate space for huge numbers of values&#8212;more values than 
you probably need.

</P>
<P>You can also declare <I>dynamic</I> arrays. In a dynamic array, the size is 
not determined in the <I>Dim</I> statement:

</P>
<P><PRE>Dim Scores()
</PRE>

</P>
<P>Before you use a dynamic array in code, you must redimension it 
using the <I>Redim</I> statement to hold as many values as you need. This is useful 
because you might not know how many values your array needs to hold until run time.

</P>
<P><PRE>Redim Scores(NumOfStudents)
</PRE>

</P>
<P>You can redimension a dynamic array any number of times in your 
code. If you want to change the size of the array without losing its contents, you 
must include the <I>Preserve </I>keyword:

</P>
<P><PRE>Redim Preserve Scores(NumOfStudents)
</PRE>

</P>
<P>If you redimension the array to a smaller size, you lose the values 
beyond the end of your array.

</P>
<A NAME="162"><H3>Operators</H3></A><P>VBScript includes a range of operators for arithmetic, comparison, 
concatenation, and logical operations on data. Table 10-1 describes the available operators.

</P>
<P>For comparison operations on data, you can use combinations of 
the greater than (&gt;), less than (&lt;), and equals (=) operators.

</P>
<P><B>Table 10-1.</B> <I>VBScript operators.</I>
</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>Operator</I></B> </TH><TH VALIGN="TOP">   <B><I>Description</I></B> </TH><TH VALIGN="TOP">  <B><I>Type</I></B></TH></TR>
<TR><TD VALIGN="TOP">+  </TD><TD VALIGN="TOP">Addition</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">And</TD><TD VALIGN="TOP">Conjunction</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">&amp;</TD><TD VALIGN="TOP">String concatenation</TD><TD VALIGN="TOP">Concatenation</TD></TR>
<TR><TD VALIGN="TOP">/</TD><TD VALIGN="TOP">Division</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">Eqv</TD><TD VALIGN="TOP">Equivalence</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">^</TD><TD VALIGN="TOP">Exponentiation</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">Imp</TD><TD VALIGN="TOP">Implication</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">\</TD><TD VALIGN="TOP">Integer division</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">Is</TD><TD VALIGN="TOP">Object equivalence</TD><TD VALIGN="TOP">Comparison</TD></TR>
<TR><TD VALIGN="TOP">Mod</TD><TD VALIGN="TOP">Modulus</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">*</TD><TD VALIGN="TOP">Multiplication</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">-</TD><TD VALIGN="TOP">Negation</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">Not</TD><TD VALIGN="TOP">Negation</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">Or</TD><TD VALIGN="TOP">Disjunction</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">-</TD><TD VALIGN="TOP">Subtraction</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">Xor</TD><TD VALIGN="TOP">Exclusion</TD><TD VALIGN="TOP">Logical</TD></TR>
</TABLE>

<A NAME="163"><H3>Data types</H3></A><P>Visual Basic has several data types, but VBScript has only one&#8212;Variant. 
When you dimension a variable using <I>Dim</I>, the variable is a Variant. The Variant 
data type can hold any value that you assign to it, so you don't need to use 
separate data types for dates, strings, numbers, and so on. When you assign a 
value to a variable, VBScript stores the type of data in that variable along with its 
value. You can use the <I>VarType</I> function to return the data type in the Variant 
variable. This can be useful if you need to ensure, for instance, that a user entered 
a number. The following code snippet shows how to use 
<I>VarType </I>to determine whether a variable is an integer from 0 through 100:

</P>
<P><PRE>&lt;SCRIPT&gt;
Function ValidScore(num)

    Dim IntegerType

    IntegerType = 2

    If VarType(num) = IntegerType Then
        If num &gt;= 0 and num &lt;= 100 Then
            ValidScore = True
        Else
            ValidScore = False
        End If
    Else
        ValidScore = False
    End If

End Function
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The <I>VarType </I>function returns a number that represents the type of 
data the Variant holds. Table 10-2 shows the value returned by 
<I>VarType</I> for different types of data.

</P>
<P><B>Table 10-2.</B> <I>The value of </I>VarType<I> for data types.</I>
</P>
<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>VarType</I></B></TH><TH VALIGN="TOP"> <B><I>Type of Variant</I></B></TH></TR>
<TR><TD VALIGN="TOP">0</TD><TD VALIGN="TOP">Empty (uninitialized)</TD></TR>
<TR><TD VALIGN="TOP">1</TD><TD VALIGN="TOP">Null (no valid data)</TD></TR>
<TR><TD VALIGN="TOP">2</TD><TD VALIGN="TOP">Integer</TD></TR>
<TR><TD VALIGN="TOP">3</TD><TD VALIGN="TOP">Long integer</TD></TR>
<TR><TD VALIGN="TOP">4</TD><TD VALIGN="TOP">Single-precision floating-point number</TD></TR>
<TR><TD VALIGN="TOP">5</TD><TD VALIGN="TOP">Double-precision floating-point number</TD></TR>
<TR><TD VALIGN="TOP">6</TD><TD VALIGN="TOP">Currency</TD></TR>
<TR><TD VALIGN="TOP">7</TD> <TD VALIGN="TOP">Date</TD></TR>
<TR><TD VALIGN="TOP">8</TD><TD VALIGN="TOP">String</TD></TR>
<TR><TD VALIGN="TOP">9</TD> <TD VALIGN="TOP">Automation object </TD></TR>
<TR><TD VALIGN="TOP">10</TD>    <TD VALIGN="TOP">Error</TD></TR>
<TR><TD VALIGN="TOP">11</TD><TD VALIGN="TOP">  Boolean</TD></TR>
<TR><TD VALIGN="TOP">12</TD>  <TD VALIGN="TOP">Variant (used only with arrays of Variants)</TD></TR>
<TR><TD VALIGN="TOP">13</TD> <TD VALIGN="TOP">Data-access object</TD></TR>
<TR><TD VALIGN="TOP">17</TD>   <TD VALIGN="TOP">Byte</TD></TR>
<TR><TD VALIGN="TOP">8192</TD><TD VALIGN="TOP">Array</TD></TR>
</TABLE>


</P>
<P>Most programming languages support constants, and Visual Basic is 
no exception. But the VBScript version of Visual Basic has no constants. 
Even though there is no explicit mechanism for defining constants in VBScript, it 
is still good programming practice to use a symbol in your code instead of 
a number. In VBScript, you need to use a variable. In the above example, in 
which you check the number to see whether it was an acceptable score, the 
<I>IntegerType </I>variable is assigned the value of 2 and uses the variable in the 
<I>If&#8230;Then</I> statement. You should use this technique in VBScript where you'd normally 
use constants in Visual Basic.

</P>
<A NAME="164"><H3>Flow control</H3></A><P>When a procedure or script starts running, it starts at the beginning and 
runs through to the end. You can change this flow either by using a decision 
construct or by looping. In this section, we'll cover some of the basic flow control 
statements, such as <I>If...Then...Else</I>, 
<I>For...Next</I>, and <I>Do...Loop</I>. Flow control 
statements not discussed here include the following:

</P>
<UL>
<P><LI><B>     While...Wend</B> For executing a series of statements as long as 
a given condition is True
</LI>
</P>
<P><LI><B>     Select Case</B> For executing one of several groups of 
statements, depending on the value of an expression
</LI>
</P>
<P><LI><B>     For Each...Next</B> For repeating a group of statements for each 
element in an array or collection
</LI></P>
</UL>



</P>
<P><B><I>If...Then...Else</I> statement</B>

</P>
<P>The decision construct is known as the 
<I>If&#8230;Then...Else</I> statement. It lets you 
test a condition and take one action if the condition is True and take another if 
the condition is False. It comes in two forms. The first form is the single-line 
form used for short, simple tests:

</P>
<P><PRE>If <I>condition</I> Then <I>statements</I> [Else <I>elsestatements</I> ]
</PRE>

</P>
<P>The square brackets surrounding the <I>Else</I> block indicate that the 
<I>Else</I> clause is optional.

</P>
<P>The second form is the block form, which provides more structure 
and flexibility than the single-line form and which is usually easier to read, 
maintain, and debug:

</P>
<P><PRE>If <I>condition</I> Then
    [<I>statements</I>]
[ElseIf <I>condition</I> Then
    [<I>elseifstatements</I>]]
[Else
    [<I>elsestatements</I>]]
End If
</PRE>

</P>
<P>The condition is a logical statement that evaluates to either True or 
False. The condition can be a comparison, such as the one shown below, or it 
can be a function that returns a Boolean value (True or False).

</P>
<P><PRE>If score &gt; 70 Then
</PRE>

</P>
<P>For example, VBScript has a function called <I>IsDate 
</I>that returns True if the value you pass it is a date, and False otherwise. The function can serve as 
the condition in your <I>If&#8230;Then...Else</I> statement:

</P>
<P><PRE>If IsDate(MyVariable) Then
</PRE>

</P>
<P>It isn't necessary to have an <I>Else</I> block in your 
<I>If&#8230;Then</I> statement. In fact, you should include an 
<I>Else</I> block only if you need to do two separate 
tasks&#8212;one if the condition is True, and one if it is False. The following code 
snippet is a complete <I>If&#8230;Then...Else</I> statement:

</P>
<P><PRE>If IsDate(MyVariable) Then
    ' Report back that the variable is a good date
Else
    ' Report back that we still need a date
End If
</PRE>

</P>
<P>If you need to take action only when the condition is True, do not 
include the <I>Else</I> block:

</P>
<P><PRE>If username = &quot;Eric&quot; Then
    ' Write a welcome statement for Mr. Vincent
End If
</PRE>

</P>
<P>It is bad practice not to include any code in the 
<I>If&#8230;Then</I> block and then to include code in the 
<I>Else</I> block:

</P>
<P><PRE>If Grade &gt;= 70 Then
Else
    ' Write a message saying they failed!
End If
</PRE>

</P>
<P>If you find yourself writing code like the previous 
<I>If...Then...Else</I> statement, you need to invert the condition so that you have an 
<I>If</I> block without an <I>Else</I> block. The above code uses a poor technique and makes for hard-to-read 
code. Here is the corrected code:

</P>
<P><PRE>If Grade &lt; 70 Then
    ' Write a message saying they failed!
End If
</PRE>

</P>
<P>In addition to using <I>If&#8230;Then...Else</I>
 statements to control program flow, you can use looping constructs. A loop is a section of code that executes 
more than once.</P>
<P>
<B><I>For...Next</I> statement</B>
</P>
<P>
Use the <I>For...Next</I> loop when you want to execute a block of code a 
fixed number of times. The syntax for the 
<I>For...Next</I> loop is as follows:

</P>
<P><PRE>For <I>counter</I> = <I>start</I> To <I>end</I> [Step <I>step</I>]
    [<I>statements</I>]
    [Exit For]
    [<I>statements</I>]
Next
</PRE>

</P>
<P>It uses a variable you supply as a counter to count the number of 
times through the loop.</P>
<P>
You specify the counter's starting and ending values, as shown below:

</P>
<P><PRE>For MyCounter = 1 To 5
    Sum = Sum + Counter
Next
</PRE>

</P>
<P>The counter is incremented by one each time the loop gets to the 
<I>Next </I>keyword.</P>
<P>
To increment or decrement the counter by a different value, you can 
use the <I>Step </I>keyword:

</P>
<P><PRE>For MyCounter = 5 To 1 Step -1
    DisplayCountdown(MyCounter)
Next
</PRE>

</P>
<P>
<B><I>Do...Loop</I> statement</B>
</P>
<P>
<I>For...Next</I> loops are useful if you know how many times you need to 
execute a block of code. However, in some situations you won't know how many 
times the loop needs to be executed.</P>
<P>
Using the <I>While </I>keyword, the <I>Do</I> loop executes a block of code while 
a condition is True. Here's the complete syntax:

</P>
<P><PRE>Do [{While | Until} <I>condition</I>]
    [<I>statements</I>]
    [Exit Do]
    [<I>statements</I>]
Loop 
</PRE>

</P>
<P>The following code executes the loop as long as the 
<I>MoreData </I>function returns True:

</P>
<P><PRE>Do While MoreData(variable)
    ProcessData
Loop
</PRE>

</P>
<P>You can use the <I>While </I>keyword either at the beginning or the end of 
the loop. If you place the keyword and the condition at the beginning of the 
loop, the condition is checked before the first time through the loop. If the 
<I>While</I> condition is False when it is first evaluated, the contents of the loop 
never execute.</P>
<P>
If you put the <I>While </I>keyword at the end of the loop, the condition is 
not evaluated until after the first time through the loop. In this case, your code 
is executed at least once. Here's the complete syntax:

</P>
<P><PRE>Do
    [<I>statements</I>]
    [Exit Do]
    [<I>statements</I>]
Loop [{While | Until} <I>condition</I>]
</PRE>

</P>
<P>And here's an example:

</P>
<P><PRE>Do
    AskUserForAnswer(answer)
Loop While DontHaveAnswer(answer)
</PRE>

</P>
<P>The <I>AskUserForAnswer</I> subroutine executes at least once, and it 
continues to execute as long as the 
<I>DontHaveAnswer</I> function returns True. The type 
of loop you use will depend on the problem you're trying to solve; neither one 
is more correct than the other. The first example requires that you check to 
see if there's any data to process; if there is, you can try to process the data 
and then continue to process it as long as there is more data to process. In the 
second example, you have to ask the user for the answer at least once and 
continue to ask for the answer only as long as you don't have an acceptable answer.</P>
<P>
You can also use the <I>Do</I> loop with the <I>Until 
</I>keyword. With this keyword, the loop executes as long as the condition is 
<I>not</I> True. <I>Until</I> is the inverse of 
<I>While</I>. You can also use the <I>Until </I>keyword at the beginning or end of the 
loop just as you can with the <I>While </I>keyword. This gives you the same flexibility 
over the loop block's first execution:

</P>
<P><PRE>Do
    AskUserForAnswer(answer)
Loop Until HaveAnswer(answer)
</PRE>

</P>
<A NAME="165"><H3>Procedures</H3></A><P>Procedures are the building blocks of VBScript programs. A procedure is 
a named block of code that is grouped together to perform a job. VBScript 
has two types of procedures: functions and subroutines. A function can return 
a value, and a subroutine performs its task without returning a value.</P>
<P>
You declare a subroutine by enclosing the block of code that it 
comprises between the <I>Sub</I> and <I>End 
Sub</I> keywords. The declaration itself must be 
enclosed in &lt;SCRIPT&gt; tags. Procedure declarations must come before the procedure 
is used, so it's good practice to declare your procedures in the Head section 
of the HTML page. In this way, all of your subroutines and functions are 
defined before they are used, and all the definitions are located in the same place 
on the page. In addition to enclosing procedure declarations in &lt;SCRIPT&gt; tags, 
they should also be within HTML comment tags so that the code is not displayed 
in a browser that doesn't understand VBScript.

</P>
<P>Here's the formal syntax for declaring a subroutine:

</P>
<P><PRE>[Public | Private] Sub <I>name</I> [(<I>arglist</I>)] 
    [<I>statements</I>]
    [Exit Sub]
    [<I>statements</I>]
End Sub 
</PRE>

</P>
<P>Here's an example that shows the use of the &lt;SCRIPT&gt; tags and 
HTML comment tags:

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=VBScript&gt;
&lt;!--
Sub Warning
    MsgBox &quot;Hey, this is dangerous!&quot;
End Sub
--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P><I>MsgBox </I>is a VBScript function that displays a dialog box with the 
message you specify. <I>MsgBox </I>can also display buttons and icons. For more 
information on <I>MsgBox</I>, see the VBScript Language Reference for the 
<I>MsgBox </I>function in Visual InterDev's online Help. You can use 
<I>MsgBox </I>only in client-side script.</P>
<P>
You can also declare a procedure with arguments. An argument is a 
variable that your procedure expects as input. You can have any number of 
arguments. When a procedure is used, it expects values to be passed in as 
arguments. Since VBScript has only Variant types of variables, you cannot specify what 
kind of data you want the procedure to use. You have two options: make sure 
you pass the right type of data to the procedure, or write code in the 
procedure to verify the data types before the data is used. One common error is a 
<I>type mismatch</I>. This occurs when you try to use data of one type (such as a 
string) as data of another type (such as a date). VBScript is considered a weakly 
typed language because it doesn't do a lot of type checking automatically. The 
following is an example of a procedure with arguments:

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=VBScript&gt;
&lt;!--
Sub DisplayMessage(Message, HowManyTimes)
    Dim Count

    For Count = 1 to HowManyTimes
        MsgBox Message
    Next
End Sub
--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>You declare functions in much the same way that you declare 
subroutines, except you use <I>Function </I>and 
<I>End Function </I>keywords. Functions return 
values; you return a value by assigning a value to the function name as if it were 
a variable within the function.</P>
<P>
Here's the formal syntax for declaring a function:

</P>
<P><PRE>[Public | Private] Function <I>name</I> [(<I>arglist</I>)]
    [<I>statements</I>]
    [<I>name</I> = <I>expression</I>]
    [Exit Function] 
    [<I>statements</I>]
    [<I>name</I> = <I>expression</I>]
End Function 
</PRE>

</P>
<P>Here's a function that takes a number and raises it to the third power 
using the exponentiation operator (^):

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=VBScript&gt;
&lt;!--
Function Cube(number)
    Cube = number ^ 3
End Function
--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>
<B>Using a function or a subroutine</B>
</P>
<P>
Once the procedure is declared, you can use it by referring to it in VBScript 
code. Since a subroutine does not return any values&#8212;you simply name it in code 
and pass it values (separated by commas) for any arguments it might have.

</P>
<P><PRE>' Call the DisplayMessage subroutine
DisplayMessage &quot;Hello there&quot;, 3
</PRE>

</P>
<P>Functions return a value, so you should be ready to use the value 
being returned. You can use the function name as if it were a variable and use it 
in an expression:

</P>
<P><PRE>' Use the Cube function to calculate a new variable
Dim Num1, Num2

Num1 = 10
Num2 = Cube(Num1)
</PRE>

</P>
<P>You can also design a function that returns either True or False, and 
then use the function as a condition in a 
<I>Do</I> loop or an <I>If...Then</I> statement. 
The functions <I>HaveAnswer </I>and <I>DontHaveAnswer 
</I>from earlier in the chapter are examples of functions that return Boolean values.</P>
<P>

<B>Built-in VBScript functions</B>
</P>
<P>
VBScript makes many intrinsic functions available. See Visual InterDev's 
online Help for more information on all of them, including math functions such as 
sine and cosine. You can derive the trigonometric functions not supplied in 
VBScript from the mathematical functions that are available.</P>
<P>
VBScript comes with a set of functions that help you determine the 
type of data stored in a variable. Table 10-3 describes these functions.

</P>
<P><B>Table 10-3.</B> <I>VBScript functions.</I>
</P>
<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>Function</I></B>   </TH> <TH VALIGN="TOP"> <B><I>Description</I></B></TH></TR>
<TR><TD VALIGN="TOP"><I>IsArray</I> </TD>  <TD VALIGN="TOP">  True if variable is an array of values</TD></TR>
<TR><TD VALIGN="TOP"><I>IsDate</I>  </TD>  <TD VALIGN="TOP"> True if variable is a date value</TD></TR>
<TR><TD VALIGN="TOP"><I>IsEmpty</I>   </TD><TD VALIGN="TOP">  True if variable has been initialized</TD></TR>
<TR><TD VALIGN="TOP"><I>IsNull</I>   </TD> <TD VALIGN="TOP"> True if variable is the Null value</TD></TR>
<TR><TD VALIGN="TOP"><I>IsNumeric</I>  </TD> <TD VALIGN="TOP">  True if variable is recognized as a number</TD></TR>
<TR><TD VALIGN="TOP"><I>IsObject</I>   </TD> <TD VALIGN="TOP"> True if variable refers to an Automation object</TD></TR>
</TABLE>
</P>
<A NAME="166"><H3>Objects</H3></A><P>VBScript includes several Automation objects that can be accessed via 
scripting. The objects are as follows:

</P>
<UL>
<P><LI><I>Dictionary</I>
</LI>
</P>
<P><LI><I>     Err</I>
</LI>
</P>
<P><LI><I>     FileSystemObject</I>
</LI>
</P>
<P><LI><I>TextStream</I>
</LI></P>
</UL>


<A NAME="167"><H3>Using VBScript with ASP</H3></A><P>When using VBScript on the server with ASP, two VBScript features are disabled:

</P>
<UL>
<P><LI>Statements that present UI elements, such as 
<I>InputBox</I> and <I>MsgBox</I>
</LI>
</P>
<P><LI>The VBScript function <I>GetObject</I>
</LI></P>
</UL>

<P>Use of these statements will cause an error.

</P>
<P>When you use <I>CreateObject</I>, you are actually using the default method 
of the <I>Server</I> object. <I>CreateObject</I> lets you integrate ActiveX Server 
components within your Web application.

</P>
<P>All ASP script processing is performed on the server side. There is no 
need to include HTML comment tags to hide the scripts from browsers that do 
not support scripting, as is often done with client-side scripts. All ASP 
commands are processed before content is sent to the browser and stripped out of 
the document before the document is sent to the browser.

</P>
<P>VBScript supports basic <I>REM</I> and apostrophe style comments. 
Unlike HTML comments, these are removed when the script is processed. They are 
not sent to the client.

</P>
<A NAME="168"><H2>Anatomy of JScript</H2></A><P>While VBScript is a powerful client-side and server-side scripting language, 
other scripting languages are also available to Visual InterDev developers. JScript 
is Microsoft's implementation of the ECMAScript language, which is the Web's 
only standard scripting language. While you might think that JScript is a 
derivative of Java, it is actually an independently conceived, object-based 
programming language. JScript has similarities to Java, as well as to C++. Developers 
comfortable with these programming languages will find many of JScript's 
constructs familiar.

</P>
<P>JScript code is embedded in the HTML or ASP Web page with 
the &lt;SCRIPT&gt; tag. Use the Language attribute to specify that the script block 
is JScript, as opposed to VBScript, like this,

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=JAVASCRIPT&gt;
//
// JScript code
//
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>or like this,

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=JSCRIPT&gt;
//
// JScript code
//
&lt;/SCRIPT&gt;
</PRE>

</P>
<A NAME="169"><H3>Statements and comments</H3></A><P>A statement in JScript consists of a line of code, much like VBScript. 
Although a new line indicates a new statement, you can also end a statement with 
a semicolon. This construct is testimony to JScript's heritage in Java and C++, 
and it is optional. Unlike the following example, however, it is good 
programming practice either to use the semicolon statement delimiter throughout all code 
or not to use it at all.

</P>
<P><PRE>// These are all legal JScript statements
energy = mass * (Speed_of_light * Speed_of_light);
paycheck = rate * hour
sum = num1 + num2;
</PRE>

</P>
<P>JScript supports a block construct that is defined by a series of 
statements delimited by curly braces. You use blocks of statements to define functions, 
as well as in conditional and other flow control operations.

</P>
<P>Comments in JScript also follow Java and C++ convention. Two 
forward slashes (//) begin a comment when all characters after it on the current line 
are to be ignored. For multiple-line comments, you can use the /* and */ 
characters to delimit the comment block.

</P>
<A NAME="170"><H3>Variables</H3></A><P>You do not have to declare variables in JScript, but it is good 
programming practice to do so using the <I>var 
</I>statement. JScript variables are 
case-sensitive, so the following two variables 
(<I>MyName </I>and <I>myName</I>) are different, 
even though they have the same name:

</P>
<P><PRE>var MyName

MyName = &quot;Eric&quot;
window.document.write(myName)
</PRE>

</P>
<P>Inspection of this code reveals a flaw. Assuming that 
<I>window.document.write</I> is a method that sends its arguments to the HTML stream, what does 
this code segment print? Nothing! <I>MyName</I> is a different variable from 
<I>myName</I>. Because JScript does not 
<I>require</I> that new variables be declared, when it 
sees <I>myName </I>it assumes that a new, empty variable should be created, which 
is probably not the author's intention. Developers familiar with 
case-insensitive languages should beware&#8212;mistakes in case are a leading cause of 
troublesome bugs that are difficult to spot when you browse over source code. Good 
discipline in coding techniques is more important than ever in this situation.

</P>
<A NAME="171"><H3>Operators</H3></A><P>JScript includes a range of operators for arithmetic, assignment, bitwise, 
and logical operations on data. Table 10-4 summarizes the available operators.
</P>
<P><B>Table 10-4.</B> <I>JScript operators.</I>
</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>Operator</I></B></TH><TH VALIGN="TOP"><B><I>Description</I></B></TH><TH VALIGN="TOP"><B><I>Type</I></B></TH></TR>
<TR><TD VALIGN="TOP">-</TD><TD VALIGN="TOP">Unary negation</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">++</TD><TD VALIGN="TOP">Increment</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">- -</TD><TD VALIGN="TOP">Decrement</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">*</TD><TD VALIGN="TOP">Multiplication</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">/</TD><TD VALIGN="TOP">Division</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">%</TD><TD VALIGN="TOP">Modulus</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">+</TD><TD VALIGN="TOP">Addition</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">-</TD><TD VALIGN="TOP">Subtraction</TD><TD VALIGN="TOP">Arithmetic</TD></TR>
<TR><TD VALIGN="TOP">!</TD><TD VALIGN="TOP">Not</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">==</TD><TD VALIGN="TOP">Equality</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">!= </TD><TD VALIGN="TOP">Inequality</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">&amp;&amp;</TD><TD VALIGN="TOP">And</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">||</TD><TD VALIGN="TOP">Or</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">?:</TD><TD VALIGN="TOP">Conditional</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">,</TD><TD VALIGN="TOP">Comma</TD><TD VALIGN="TOP">Logical</TD></TR>
<TR><TD VALIGN="TOP">~</TD><TD VALIGN="TOP">Not</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">&lt;&lt;</TD><TD VALIGN="TOP">Shift left</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">&gt;&gt;</TD><TD VALIGN="TOP"> Shift right</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">&gt;&gt;&gt;</TD><TD VALIGN="TOP">Unsigned shift right</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">&amp;</TD><TD VALIGN="TOP">And</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">^</TD><TD VALIGN="TOP">Xor</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">|</TD><TD VALIGN="TOP">Or</TD><TD VALIGN="TOP">Bitwise</TD></TR>
<TR><TD VALIGN="TOP">=</TD><TD VALIGN="TOP">Assignment</TD><TD VALIGN="TOP">Assignment</TD></TR>
</TABLE>


</P>
<P>As with VBScript, you can use combinations of the greater than (&gt;), 
less than (&lt;), and equals (=) operators for comparison operations on data.

</P>
<A NAME="172"><H3>Data types</H3></A><P>The basic data types in JScript are numbers, strings, and Booleans. The 
other data types are functions, methods, arrays, and objects.

</P>
<P>Numbers can be either integer or floating point and can be 
represented in decimal (base 10), octal (base 8), and hexadecimal (base 16) notations. 
Octal and hexadecimal representations cannot, however, represent the decimal 
part of a number. Here are a few examples:

</P>
<P><PRE>128.83    // Base 10 representation of a float
221       // Base 10 integer
0xFF92    // Hex notation. Note the leading &quot;0x&quot;
02265     // Octal notation. Note the leading zero
</PRE>

</P>
<P>JScript's Boolean variables are the familiar True and False. However, 
unlike in some other programming languages, True and False are not equal to 1 
and 0; each is an actual, separate data type.

</P>
<P>
<B>Arrays and objects</B>

</P>
<P>You handle arrays and objects almost identically in JScript. At times, it 
seems that there is no difference between them. An object is an entity that has 
properties and methods. A property can be a simple data type or another object. 
A method is a function that belongs to the object.</P>
<P>
For example, JScript has a built-in object called 
<I>Math</I>. <I>Math </I>has, among others, the properties 
<I>LN10 </I>and <I>PI</I>. This means that <I>Math 
</I>can supply the values for the natural logarithm of 10 and pi.

</P>
<P><PRE>var x
var y

x = Math.PI;
y = Math.LN10;
</PRE>

</P>
<P>The <I>Math</I> object also has methods, such as 
<I>max</I> and <I>round</I>. The <I>max</I> method returns the larger of two numbers, and the 
<I>round</I> method returns a number rounded to the nearest integer.

</P>
<P><PRE>var num1
var num2
var biggest
var my_integer

...
biggest = Math.max(num1, num2);
my_integer = Math.round(12.84521);
</PRE>

</P>
<P>JScript also provides other intrinsic (built-in) objects, such as 
<I>Date</I>, <I>String</I>, and <I>Array</I>.</P>
<P>

<B>Strings</B>
</P>
<P>
You can delimit a string literal in JScript using either single or double 
quotes. This is handy if you need to represent a single or double quote as part of 
the string. For instance, to represent the text &quot;JScript's string literals,&quot; you can 
use the following string literal:

</P>
<P><PRE>&quot;JScript's string literals&quot;
</PRE>

</P>
<P>But to represent the following text,</P>
<P>
<I>The cop said &quot;STOP,&quot; so he did.</I></P>
<P>
you can use single quotes:

</P>
<P><PRE>'The cop said &quot;STOP,&quot; so he did.'
</PRE>

</P>
<P>String variables in JScript are actually objects. Although you can 
implicitly create them by assigning a variable name to a string literal, string variables 
also have methods that make them a powerful and intuitive string manipulation tool:

</P>
<P><PRE>myName = &quot;Eric F. Vincent&quot;;    // Implicitly creates string
myName.toUpperCase();          // Value is now 'ERIC F. VINCENT'
</PRE>

</P>
<A NAME="173"><H3>Flow control</H3></A><P>JScript uses similar constructs to control the flow of a script, as does 
VBScript and most other popular languages. The 
<I>if</I> construct is the primary decision-making mechanism. 
<I>for</I> and <I>while</I> implement loops. For the most part, 
the difference is in the syntax.

</P>
<P>

<B><I>if...else</I> statement</B>

</P>
<P>The JScript syntax for the <I>if...else</I> statement is as follows:

</P>
<P><PRE>if (<I>condition</I>)
{
    // block of code
}
[else
{
    // block of code
}]
</PRE>

</P>
<P>In this example,<I> condition </I>is a Boolean expression that evaluates to 
either True or False. The square brackets surrounding the 
<I>else</I> block indicate that the <I>else</I> clause is optional, like the 
<I>Else</I> clause in VBScript. JScript uses curly braces to indicate a block of code.</P>
<P>
Curly braces are unnecessary if the block has only one statement:

</P>
<P><PRE>if (current &lt; top)
{
    next = next + 1;
    TakeAction(current);
}
else
    Finalize(current);
</PRE>

</P>
<P>In this example, the two statements following the 
<I>if</I> statement are grouped together. When the condition is True, both statements are executed because 
the <I>if</I> statement considers the statements in a block of code to be a unit.

</P>
<P>The <I>else</I> clause has no block of code; it has only one statement. When 
the condition is False, the one statement is executed and program flow 
continues. There is no need for an <I>End If</I> construct because the curly braces delimit 
blocks of code.</P>
<P>

<B><I>for </I>statement</B>
</P>
<P>
Again, the concept of the <I>for </I>statement is similar to the 
<I>For</I> loop in VBScript but is implemented a little bit differently. JScript's syntax for a 
<I>for</I> loop is

</P>
<P><PRE>for (<I>initializer </I>; <I>condition</I> ; <I>increment</I> )
{
    // block of code
}
</PRE>

</P>
<P>The loop has three parts: The first is the 
<I>initializer</I>, a statement that is executed only once before the first time through the loop. You typically use 
it to initialize a variable that will count as the loop progresses. The second is 
the <I>condition</I>, a Boolean expression that evaluates to True or False. The 
condition is evaluated before the first time through the loop, and again each time 
through the loop until it returns False. The condition typically tests a counter to see 
if it has reached a certain number. The block of code won't execute if the 
condition is False the first time through the loop. The third part&#8212;the 
<I>increment</I>&#8212;is a statement that is executed at the end of each loop. You typically use it 
to increment a counter by one each time through the loop. When you use 
these three parts together, they can behave the same as the 
<I>For...Next</I> loop in VBScript.

</P>
<P>The following is a <I>for</I> loop in which <I>x 
</I>varies from 1 through 10 in increments of one. Each time though the loop, 
<I>x</I> is added to a variable called 
<I>total</I>. This example introduces two new operators. The first is used in the 
increment part of the loop.

</P>
<P><PRE>for (x = 1; x &lt;= 10; x++)
    total += x;
</PRE>

</P>
<P>The increment operator, x++, is the third part of the loop. It adds one 
to its operand (in this case, <I>x</I>). There is also a decrement operator (--) that 
subtracts one from its operand, as well as a compound assignment.</P>
<P>
The compound assignment operator is little more than a shortcut. 
The statement

</P>
<P><PRE>total += x;
</PRE>

</P>
<P>is equivalent to

</P>
<P><PRE>total = total + x;
</PRE>

</P>
<P>

<B><I>while </I>statement</B>

</P>
<P>The <I>while </I>statement is also straightforward:

</P>
<P><PRE>while (<I>condition</I>)
{
    // block of code
}
</PRE>

</P>
<P>Again, the condition is a Boolean expression, and the block of code 
can be either several lines of code surrounded by curly braces or a single line 
of code. The condition is checked before the first time through the loop, so if 
it starts off as False, the block or statement never executes.

</P>
<P><PRE>while (theTime == right)
{
    DisplayAds();
    Feed(theHungry);
}
</PRE>

</P>
</BODY>
</HTML>




