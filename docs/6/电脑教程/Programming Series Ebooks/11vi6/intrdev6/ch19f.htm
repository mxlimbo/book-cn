<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Transactions Using ADO from ASP</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19e.htm", "ch19g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="356"><H1>Transactions Using ADO from ASP</H1></A>
<P>In this section, we'll see how an ASP Web page can participate in a true 
database transaction. To start simply, we'll only use ActiveX Data Objects (ADO) 
to access the data&#8212;we won't employ MTS components. The ASP code will 
therefore go directly against the database. The same functionality in the code 
could also be written by using the Data Environment and data command objects. In 
this particular example, we'll simply use straight ADO so that you can more easily 
see the code in the listing and thus focus on the transactional 
nature of the page.
</P>
<P>
Figure 19-7 shows the code for this example. The code is included on 
the companion CD-ROM as the ado_trans.asp file within the 
VI-Bank/VIntDev98 folder. The example selects information from the customer table in the 
Microsoft SQL Server 6.5 &quot;Bank&quot; database, which is part of the VI-Bank sample 
Internet Banking application. It then updates the customer's e-mail address in the 
customer table as well as the customer's checking account in the account_balance table 
by a debit of $0.50 for this service. Of course, in real life you might not want to 
charge anything for this service or your customers might go elsewhere! There are 
two phases to this operation. Since they are both contained within this 
transactional ASP Web page, they must both succeed or the transaction 
will be rolled back.

</P>
<P><B>Figure 19-7.</B> <I>Sample code showing how to transactionally update a SQL Server 
6.5 database using ADO and transactional ASP.</I>

</P>
<P>
<PRE>&lt;%@ TRANSACTION=Required LANGUAGE=&quot;VBScript&quot; %&gt;

&lt;!--#include file=&quot;adovbs.inc&quot;--&gt;

&lt;HTML&gt;

&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Transactional Database Update&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR=&quot;White&quot; topmargin=&quot;10&quot; leftmargin=&quot;10&quot;&gt;

&lt;h2&gt;&lt;font color=&quot;navy&quot;&gt;Transactional Database Update&lt;/font&gt;&lt;/h2&gt;

&lt;hr&gt;
This sample code shows how to transactionally update a SQL 6.5 
database using ADO and Transacted ASP. The example SELECTS information 
from the CUSTOMER table in the SQL 6.5 &quot;Bank&quot; database which is
part of the VI-BANK sample Internet Banking application. 
It then UPDATES the customer's e-mail address in the CUSTOMER 
table, as well as UPDATING the customer's checking account in the 
ACCOUNT_BALANCE table by a debit of $.50 for this service. 
&lt;p&gt;
Because the two database operations are wrapped within a shared ASP 
Transaction, both will be automatically rolled back to their previous 
state in the event of a failure.

&lt;%
Dim oConn ' object for ADODB.Connection obj
Dim oRs   ' object for recordset object
Dim oRs2  ' object for recordset object

' Create Connection and Recordset components
Set oConn = Server.CreateObject(&quot;ADODB.Connection&quot;)
Set oRs = Server.CreateObject(&quot;ADODB.Recordset&quot;)
Set oRs2 = Server.CreateObject(&quot;ADODB.Recordset&quot;)

' Open ADO Connection using the VI-Bank file DSN
oConn.Open &quot;FILEDSN=VI-Bank&quot;
Set oRs.ActiveConnection = oConn
Set oRs2.ActiveConnection = oConn

' Get the customer record based on the ssn
oRs.Source = &quot;SELECT * FROM customer WHERE ssn = 123456789&quot;
oRs.CursorType = adOpenStatic ' use a cursor other than Forward Only
oRs.LockType = adLockOptimistic ' use a locktype permitting insertions
oRs.Open

' Change e-mail address
If (Not oRs.EOF) Then
    oRs(&quot;e_mail&quot;).Value = &quot;nick.evans@us.pwcglobal.com&quot;
    oRs.Update
End If
                
' Find the customer's account balance information
oRs2.Source = &quot;SELECT * FROM account_balance &quot; &amp; _
    &quot;where ssn = 123456789 and account_id = 1&quot;
oRs2.CursorType = adOpenStatic   ' use a cursor other than 
                                 ' Forward Only
oRs2.LockType = adLockOptimistic ' use a locktype 
                                 ' permitting insertions
oRs2.Open

' Debit the checking account balance by $0.50
If (Not oRs2.EOF) Then
    oRs2(&quot;balance&quot;).Value = _
        CDbl(oRs2(&quot;balance&quot;).Value) - CDbl(0.5)
    NewBalance = oRs2(&quot;balance&quot;).Value
    oRs2.Update
End If

' Clean up
oRs.Close
oRs2.Close
oConn.Close
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;%
' The Transacted Script Commit Handler. This subroutine
' will be called if the transacted script commits.
    
Sub OnTransactionCommit()
    Response.Write &quot;&lt;p&gt;&lt;table border=1 width=350&gt;&lt;tr&gt;&lt;td&gt;&quot;
    Response.Write &quot;&lt;b&gt;New account balance is &quot; + _
        FormatCurrency(NewBalance)
    Response.Write &quot;&lt;p&gt;The update was successful.&lt;/b&gt;&quot; 
    Response.Write &quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;
End Sub

' The Transacted Script Abort Handler. This subroutine
' will be called if the transacted script aborts.
 
Sub OnTransactionAbort()
    Response.Write &quot;&lt;p&gt;&lt;b&gt;The update was not successful&lt;/b&gt;.&quot; 
End Sub
%&gt;
</PRE>

</P>
<P>Once again we start the ASP script with the @TRANSACTION 
directive. The script then proceeds to create one 
<I>Connection</I> object and two <I>Recordset</I> objects. It then uses a SELECT statement to obtain profile information from 
the customer table. The specific customer social security number is hard-coded 
in this example. Using the first <I>Recordset</I> object, the code changes the 
e-mail address for the customer and performs an update. Then, using the 
second <I>Recordset</I> object, the code uses a SELECT statement to obtain information 
about the customer's checking balance from the account_balance table. Finally, 
the customer's checking account balance is debited by $0.50 using the 
second <I>Recordset</I> object.
</P>
<P>
At the end of the ASP script, the event handlers are used to write a 
message to the browser to indicate whether the update was successful. If either 
the first or the second update failed (or both), the entire transaction is 
aborted automatically by MTS. This relieves the developer from having to write 
code to handle these scenarios. Because all the database operations have been 
placed into a single ASP Web page, they are made part of a single transaction. If 
both updates are successful, the transaction commits automatically when the 
script finishes execution. Figure 19-8 shows the resulting browser output after 
running the code.
</P>
<P>
<A HREF="javascript:fullSize('f19lh08x.htm')"> <IMG SRC="images/F19lh08.jpg" width=404 height=303 BORDER=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 19-8.</B> <I>Resulting browser output after running the code shown in Figure 19-7. This ASP Web page participates in a transaction using ADO against a SQL Server 6.5 database.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




