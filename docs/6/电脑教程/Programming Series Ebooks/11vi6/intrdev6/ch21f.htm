<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Using MSMQ in ASP</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch21e.htm", "ch21g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="393"><H1>Using MSMQ in ASP</H1></A>
<P>By using the MSMQ server-side components that we discussed in the 
previous section, we can write ASP code that works with MSMQ to send messages, 
receive messages, and even perform transactional messaging.

</P>
<P>As an example of transactional messaging, we might want to make 
an update to SQL Server and also send an MSMQ message all as part of one 
transaction. As we shall see in this section, MSMQ messages can be sent to 
queues that support transactions and are managed by MTS. We'll also see how easy 
it is to send and receive messages from MSMQ using ASP code.

</P>
<A NAME="394"><H2>Sending a Message</H2></A><P>To send an MSMQ message using ASP code, we need to create two 
MSMQ objects: <I>MSMQQuery</I> and 
<I>MSMQMessage</I>. The <I>MSMQQuery</I> object allows 
you to query MSMQ for existing public queues. The 
<I>MSMQMessage</I> object allows you to send your message. The code below shows how to 
search for an existing queue and send a message.

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Send MSMQ Message&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H2&gt;Send MSMQ Message&lt;/H2&gt;
&lt;HR&gt;

&lt;%
Set Query = Server.CreateObject(&quot;MSMQ.MSMQQuery.1&quot;)
Set QInfos = Query.LookupQueue(,,&quot;MyQueue&quot;)
QInfos.Reset
Set QInfo = QInfos.Next
Set Queue = QInfo.Open(2,0)

Set Message = Server.CreateObject(&quot;MSMQ.MSMQMessage.1&quot;)
Message.Label = &quot;MSMQ Message&quot;
Message.Body = &quot;This message was sent by SendMessage.asp.&quot;
Message.Send Queue

Response.Write &quot;Message Sent. Please check MSMQ Explorer.&quot;
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>In the above code, we use the 
<I>Server.CreateObject</I> syntax to create both the 
<I>MSMQQuery</I> object and the <I>MSMQMessage</I> object. The 
<I>LookupQueue</I> method of the <I>MSMQQuery</I> object is used to locate the queue named 
MyQueue within MSMQ.

</P>
<P>The message is sent by simply setting various properties of the 
<I>MSMQMessage</I> object. These properties include the message label and the 
message body. Finally, the message is sent by calling the 
<I>Send</I> method of the <I>MSMQMessage</I> object.

</P>
<P>In this example, the ASP Web page displays a confirmation message to 
the browser indicating that the message was sent. In a real application, you 
would probably not notify the user that a message has been sent since this is 
typically back-end functionality that the end users do not need to be concerned with.

</P>
<P>Figure 21-8 shows the resulting message within the MSMQ Explorer.

</P>
<P>
<A HREF="javascript:fullSize('f21LH08x.htm')"> <IMG SRC="images/f21LH08.JPG" width=404 height=252 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 21-8.</B> <I>Message sent from SendMessage.ASP shown within the MSMQ Explorer.</I><!-- /CAPTION -->

</P>
<P>In Figure 21-8, you can see some basic information about the 
message. You can see the message label, the priority, the message ID, the message 
position in the queue, and the size of the message in bytes.

</P>
<P>For more information about the message, you can right-click the 
message and choose Properties from the context menu. By clicking the Body tab of 
the Message Properties dialog box, you can see the actual text within the body 
of the message. In this example, as shown in Figure 21-9 on the following 
page, the text reads &quot;This message was sent by SendMessage.asp.&quot;

</P>
<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B>
<HR>
Another way to view the text within the body of the message is 
to choose Columns from the View menu of the MSMQ Explorer. Next 
choose Body from the list of available columns, and choose Add. This will add 
this particular column to the list of columns that are displayed within the 
MSMQ Explorer. There are many other available columns to choose from 
that allow you to customize your view of messages within the MSMQ 
Explorer. The Columns dialog box also allows you to customize your view of 
queues, computers, and sites within the MSMQ Explorer.
</BLOCKQUOTE></DIV>
</P>
<P>
<IMG SRC="images/f21LH09.GIF" width=395 height=357 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 21-9.</B> <I>The Body tab of the Message Properties dialog box showing the text within the body of the message.</I><!-- /CAPTION -->

</P>
<A NAME="395"><H2>Receiving Messages</H2></A><P>In addition to sending messages, you can also write ASP code to read 
and/or receive messages. The following code shows how this is achieved.

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Read MSMQ Message&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H2&gt;Read MSMQ Message&lt;/H2&gt;
&lt;HR&gt;

&lt;%
Set Query = Server.CreateObject(&quot;MSMQ.MSMQQuery.1&quot;)
Set QInfos = Query.LookupQueue(,,&quot;MyQueue&quot;)
QInfos.Reset
Set QInfo = QInfos.Next
Set Queue = QInfo.Open(1,0)

Set Message = Queue.Receive

Response.Write &quot;Message Detail&lt;P&gt;&quot;
Response.Write &quot;Message Label: &quot; + Message.Label + &quot;&lt;BR&gt;&quot;
Response.Write &quot;Message Body:  &quot; + Message.Body
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>The code is similar to our earlier code in which we sent a message. 
The main difference is that we call the 
<I>Receive</I> method of the <I>MSMQQueue</I> 
object instead of calling the <I>Send</I> method of the 
<I>MSMQMessage</I> object. Calling the 
<I>Receive</I> method actually creates a message object for us that we can then 
use to inspect the message properties. The code above prints the message label 
and the message body properties on screen. Also note that the 
<I>Open</I> method has been called using a parameter of 1. This value means that the queue is 
opened for read access instead of write access. Figure 21-10 shows the resulting 
browser output when running this sample code.

</P>
<P>
<A HREF="javascript:fullSize('f21LH10x.htm')"> <IMG SRC="images/f21LH10.JPG" width=404 height=277 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 21-10.</B> <I>Sample output from the ReadMessage.ASP file that opens up a queue in MSMQ and reads the first message.</I><!-- /CAPTION -->

</P>
<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B>
<HR>
To read a message in a queue, you might need to alter the 
security permissions on the queue. You may well encounter a message such 
as &quot;MSMQQueueInfo error 'c00e0025' - Access is denied&quot;. This is because 
by default only the queue owner has read access to messages in the queue. 
A simple way to open up the security during development of your code is 
to choose the Security tab from the Queue Properties dialog box and go 
into the Permissions section. Next change the permissions for Everyone 
from Send (SqGpPg) to Special Access (All). This setting is obviously not 
advised for production usage, but it is a simple way to be able to read the 
messages during your development and experimentation with MSMQ.
</BLOCKQUOTE></DIV>

</P>
<A NAME="396"><H2>Transactional Messaging</H2></A><P>To send a transactional message using ASP code, you simply follow the same 
basic procedure as in &quot;<A HREF="#394">Sending a Message</A>&quot; but add a few lines of code to declare the Web 
page as transactional and your message as transactional. The code listing below 
shows how to search for an existing transactional queue and send a message.

</P>
<P>There are a number of differences here when compared to the code 
in &quot;<A HREF="#394">Sending a Message</A>.&quot; First, the page is declared as transactional by using this syntax:

</P>
<P><PRE>
&lt;%@TRANSACTION=Required LANGUAGE=VBScript%&gt;
</PRE>

</P>
<P>Next, the event handlers at the bottom of the code listing are used to trap 
either the <I>OnTransactionCommit</I> event or the 
<I>OnTransactionAbort</I> event and print out an appropriate message on screen.

</P>
<P>The one change to the main code body in the code is that the 
<I>Send</I> method is called with an additional parameter. The parameter value of 1 after the 
<I>Send</I> method indicates that the call is part of the current MTS transaction. The 
value of 1 is equivalent to the MQ_MTS_TRANSACTION value.

</P>
<P><PRE>
&lt;%@TRANSACTION=Required LANGUAGE=VBScript%&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Send Transactional MSMQ Message&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H2&gt;Send Transactional MSMQ Message&lt;/H2&gt;
&lt;HR&gt;

&lt;%
Set Query = Server.CreateObject(&quot;MSMQ.MSMQQuery.1&quot;)
Set QInfos = Query.LookupQueue(,,&quot;mytransqueue&quot;)
QInfos.Reset
Set QInfo = QInfos.Next
Set Queue = QInfo.Open(2,0)

Set Message = Server.CreateObject(&quot;MSMQ.MSMQMessage.1&quot;)
Message.Label = &quot;Transactional MSMQ Message&quot;
Message.Body = _
    &quot;This message was sent by SendTransactionalMessage.asp.&quot;
Message.Send Queue, 1
Queue.Close
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;% 
Sub OnTransactionCommit
    Response.Write _
        &quot;Transactional MSMQ Message Sent and Committed.&quot;
End Sub 
%&gt;

&lt;%
Sub OnTransactionAbort
    Response.Write &quot;Transactional MSMQ Message Aborted.&quot;
End Sub 
%&gt;
</PRE>

</P>
<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B>
<HR>To send a transactional message, you must be sure to locate 
and use a transactional queue. If you have not yet set up a transactional 
queue within the MSMQ Explorer, you can do so by creating a new queue 
and marking the Transactional check box within the Queue Name dialog 
box at the time you create the queue. Once you have created a queue, 
you cannot change its transactional property from nontransactional to 
transactional or vice versa. You need to mark the queue as transactional 
during queue creation.
</BLOCKQUOTE></DIV>

</P>
</BODY>
</HTML>




