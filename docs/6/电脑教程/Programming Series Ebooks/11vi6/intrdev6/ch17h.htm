<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The Content Linking Component</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch17g.htm", "ch17i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="325"><H1>The Content Linking Component</H1></A>
<P>The Content Linking component lets you organize the pages of your Web 
site like the pages of a book. It constructs a table of contents and maintains 
previous and next page links in your Web pages. This allows you to change the 
order of pages, insert pages, or delete pages without having to do much 
maintenance work on the pages themselves. Content linking has two parts: a Content 
Linking List and a <I>NextLink</I> object.

</P>
<A NAME="326"><H2>The Content Linking List</H2></A><P>The Content Linking component needs to know which pages are to be 
included in the table of contents. This information is maintained in the Content 
Linking List, which is a text file. Each URL is listed on one line in the file&#8212;along 
with a description and a comment&#8212;in the order that it will appear in a table 
of contents. This syntax, shown below, is described in Table 17-10.

</P>
<P><PRE>
URL [Description] [Comment]
</PRE>

</P>
<P>A tab character separates the URL from the description and the comment. 
The description and comment are optional. The comment is for your use only; 
the component does not use it.


</P>
<P><B>Table 17-10.</B> <I>The format of the Content Linking List file.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Item</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">URL</TD>
<TD VALIGN="TOP">The URL for the page. It must be a virtual or relative URL. The Content Linking component will not use an absolute URL (one that begins with <I>http</I>).</TD>
</TR>

<TR>
<TD VALIGN="TOP">Description</TD>
<TD VALIGN="TOP">A textual description of the URL.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Comment</TD>
<TD VALIGN="TOP">A textual comment, which the component will not process.P</TD>
</TR>
</TABLE>


</P>
<A NAME="327"><H2>The <I>NextLink</I> Object</H2></A><P>The <I>NextLink</I> object is implemented in the NextLink.dll file. It contains 
several methods for managing a list of URLs. For IIS, the file is located by default 
in the C:\WINNT\system32\inetsrv folder.

</P>
<P>The syntax to instantiate the <I>NextLink</I> object is as follows, 
where<I> objNextLink </I>refers to the new 
<I>NextLink</I> object.

</P>
<P><PRE>
&lt;OBJECT RUNAT=server PROGID=MSWC.NextLink id=objNextLink&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P>The methods within the <I>NextLink</I> object all require the Content 
Linking List file as a parameter, as shown in Table 17-11. The 
<I>NextLink</I> object has no properties.

</P>
<P><B>Table 17-11.</B> <I>Methods in the </I>NextLink<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Method</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>GetNextURL(ContentLinkFile) 
<BR>
GetPreviousURL(ContentLinkFile) 
<BR>
GetNextDescription(ContentLinkFile) 
<BR>
GetPreviousDescription(ContentLinkFile)</I> </TD>
<TD VALIGN="TOP">Returns a string that is the next or previous URL or description. These calls are valid only from a page that is in the Content Linking List file.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>GetListCount(ContentLinkFile)</I></TD>
<TD VALIGN="TOP">Returns the number of pages in the Content Linking List file.
</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>GetListIndex(ContentLinkFile)</I></TD>
<TD VALIGN="TOP">Returns the index number of the current URL in the Content Linking List file.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>GetNthDescription (ContentLinkFile, index)GetNthURL (ContentLinkFile, index)</I></TD>
<TD VALIGN="TOP">Returns the page's URL or description, as specified by the index in the Content Linking List file.</TD>
</TR>
</TABLE>     
     
</P>
<A NAME="328"><H2>A Sample Table of Contents</H2></A><P>The Content Linking List file is fairly easy to use because it has only one 
purpose&#8212;to provide the list of URLs and their descriptions. You must create 
a Content Linking List file and some Active Server Script code to build the 
table of contents and the links to other pages. The following example is a table 
of contents for an online book and is included on the CD-ROM in the 
Components Web project. The code below shows the Content Linking List file, toc.txt:

</P>
<P><PRE>
ch1.asp     Chapter 1 - Introduction
ch2.asp     Chapter 2 - Active Server Pages
ch3.asp     Chapter 3 - Database Access
ch4.asp     Chapter 4 - N-Tier Architectures
</PRE>

</P>
<P>In this file, tabs are used to separate the URL from the descriptions.

</P>
<P>To keep your table of contents easy to maintain, you can store all 
your files in the same virtual directory on your Web server. This includes the 
Content Linking List file (toc.txt), the Table of Contents page 
(ContentLinking.asp), and the pages of the book (ch1.asp etc.).

</P>
<P>One of the Content Linking component's most useful features is its 
ability to automatically create the table of contents. The Active Server script 
used in the ContentLinking.asp page, shown below, is generic enough for you to 
use in any of your tables of contents.

</P>
<P><PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Content Linking Sample&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;

&lt;H2&gt;Content Linking Sample&lt;/H2&gt;
&lt;HR&gt;

&lt;OBJECT RUNAT=server PROGID=MSWC.NextLink id=objNextLink&gt;
&lt;/OBJECT&gt;

&lt;B&gt;Table of Contents&lt;/B&gt;

&lt;%  
count = NextLink.GetListCount(&quot;toc.txt&quot;)
Response.Write &quot;&lt;UL&gt;&lt;ul&gt;
For i = 1 to count
    Response.Write &quot;&lt;LI&gt;&lt;A HREF=&quot; + _

        objNextLink.GetNthURL(&quot;toc.txt&quot;, i) + _
        &quot;&gt;&quot; + objNextLink.GetNthDescription(&quot;toc.txt&quot;, i) + &quot;&lt;/A&gt;&quot;
Next
%&gt;  
&lt;/UL&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>Figure 17-12 shows the output from this script. This script uses 
<I>GetListCount </I>to find the number of pages. It then uses 
<I>GetNthURL </I>and <I>GetNthDescription </I>in a 
<I>For&#8230;Next</I> loop to build a bulleted list of the table of contents.

</P>
<P>
<A HREF="javascript:fullSize('f17lh12x.htm')"> <IMG SRC="images/f17lh12.jpg" width=404 height=277 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 17-12.</B> <I>The table of contents is generated automatically from the contents in the text file that defines the pages.</I><!-- /CAPTION -->

</P>
<P>Each page in the book needs links to the previous and next pages. 
Using the Content Linking component, you can include the same standard 
boilerplate code in each page. In this way, you don't have to make any changes if 
you rearrange the order or the number of pages.

</P>
<P>You include parts of the following script at the end of each page of 
the report. You can, of course, place the relevant sections of this file in an 
Include file and use the server-side include to pull this file into each page. This 
makes code maintenance much easier.

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H2&gt;Content Linking Sample - Chapter 2&lt;/H2&gt;
&lt;HR&gt;

&lt;OBJECT RUNAT=server PROGID=MSWC.NextLink id=objNextLink&gt;
&lt;/OBJECT&gt;

&lt;B&gt;Chapter 2&lt;/B&gt;
&lt;P&gt;
&lt;%
last = objNextLink.GetListCount(&quot;toc.txt&quot;)
current = objNextLink.GetListIndex(&quot;toc.txt&quot;)

If current &gt; 1 Then
    Response.Write &quot;&lt;A HREF=&quot; + _
        objNextLink.GetPreviousURL(&quot;toc.txt&quot;) + _
        &quot;&gt;Previous Page&lt;/A&gt;&quot;
End If
%&gt;
&amp;nbsp;
&lt;%
If current &lt; last Then
    Response.Write &quot;&lt;A HREF=&quot; + _
        objNextLink.GetNextURL(&quot;toc.txt&quot;) + _
        &quot;&gt;Next Page&lt;/A&gt;&quot;
End If
%&gt;
&lt;P&gt;
&lt;A HREF=&quot;ContentLinking.asp&quot;&gt;Table of Contents&lt;/A&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>This code automatically generates the links in the bottom part of the 
page, as shown in Figure 17-13 below. The Next Page and 
Previous Page links move users forward and backward in the pages listed in the 
Content Linking List file.

</P>
<P>Since you will use this same code for each page in your situation 
report, you need to check which page you're on and include next and previous 
links only when necessary. The script's first job is to create a 
<I>NextLink</I> object and get the number of pages and the current page.

</P>
<P>
<A HREF="javascript:fullSize('f17lh13x.htm')"> <IMG SRC="images/f17lh13.jpg" width=404 height=277 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 17-13.</B> <I>An ASP Web page showing the Previous Page and Next Page hyperlinks created using the Content Linking component.</I><!-- /CAPTION -->

</P>
<P>Two <I>If&#8230;Then </I>statements make comparisons on the current page. The first statement determines whether the current page is greater than one; if it is, 
you need to include a link back to the previous page. The second checks whether the current page is the last page; if it is not, you need a next-page link.

</P>
<P>Each page of your online book will have the correct links, both backward and forward. All you have to do is edit the toc.txt file to change the order of the pages.

</P>
</BODY>
</HTML>




