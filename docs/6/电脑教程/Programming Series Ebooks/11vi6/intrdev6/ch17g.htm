<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The Dictionary Component</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch17f.htm", "ch17h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="323"><H1>The Dictionary Component</H1></A>
<P>The <I>Dictionary </I>object of the Dictionary component is used for storage and 
is very much like an array. The <I>Dictionary </I>object has properties that make it 
more flexible&#8212;and in some cases much more usable&#8212;than an array. Unlike an 
array, a <I>Dictionary </I>object does not have to be declared to hold a certain 
number of elements; it is always dynamic. When you add an element to a 
<I>Dictionary </I>object, it grows to hold the element; when you remove an element, it 
shrinks. While you can do the same thing with a dynamic array, you have to 
manually manage the growing and shrinking of the array by using the 
<I>Redim Preserve</I>  command.

</P>
<P>A <I>Dictionary </I>object also lets you remove elements from any 
position within it. For instance, you can remove the first element and the 
<I>Dictionary </I>object will take care of freeing up that space. The element that was at 
position 2 is now at position 1, and so on.

</P>
<P>The last significant advantage of using a <I>Dictionary 
</I>object is that, just like with a printed dictionary, you don't have to refer to the elements in the dictionary by a number; instead, you look them up using a key. When you add 
something to a dictionary, you not only add the actual value, you also add a 
string that will be used to look up the value later.

</P>
<P>In the following statement, <I>objDictionary </I>is the variable that will hold 
a reference to the new <I>Dictionary</I> object. The methods and properties are 
described in Table 17-7 and Table 17-8.

</P>
<P><PRE>
&lt;OBJECT RUNAT=server PROGID=Scripting.Dictionary id=objDictionary&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P><B>Table 17-7.</B> <I>Methods in the </I>Dictionary<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Method</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>Add(Key, Item)</I></TD>
<TD VALIGN="TOP">Adds an item to the dictionary with the specified
key. An item can be a variable containing any type of data&#8212;dates, strings, integers, or other objects.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Exists(key)</I></TD>
<TD VALIGN="TOP">Checks to see if the key exists in the dictionary. Returns True if the specified key exists in the <I>Dictionary</I> object, False if it does not.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Items</I></TD>
<TD VALIGN="TOP">Returns an array of all the items in the dictionary.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Keys</I></TD>
<TD VALIGN="TOP">Returns an array of all the keys in the dictionary. Each string in the resulting array is a key in the dictionary.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Remove(Key)</I></TD>
<TD VALIGN="TOP">Removes a key and item pair from the dictionary. The <I>Dictionary</I> object automatically frees up the space used by the key item pair.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>RemoveAll</I></TD>
<TD VALIGN="TOP">Empties the dictionary. The <I>Dictionary</I> object frees up all the space used by key item pairs in the dictionary.</TD>
</TR>
</TABLE>

</P>
<P><B>Table 17-8.</B> <I>Properties in the </I>Dictionary <I>object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Property</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>CompareMode[= compare]</I></TD>
<TD VALIGN="TOP">Sets and returns the comparison mode for comparing string keys in a 
<I>Dictionary</I> object (See Table 17-9.)</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Count</I></TD>
<TD VALIGN="TOP">Returns the number of items in the dictionary</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Item(key)[ = newitem]</I></TD>
<TD VALIGN="TOP">Sets or returns an item for a specified key in a <I>Dictionary</I> object</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Key(key) = newkey</I></TD>
<TD VALIGN="TOP">Sets or returns a key in a <I>Dictionary</I> object</TD>
</TR></TABLE>
    
</P>
<P>Table 17-9 shows the possible values for the <I>CompareMode 
</I>property described earlier.

</P>
<P><B>Table 17-9.</B> <I>The </I>CompareMode<I> property values.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Value</I></B></TH>
<TH VALIGN="TOP"><B>Dictionary <I>Lookup Type</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">0</TD>
<TD VALIGN="TOP">Binary</TD>
</TR>

<TR>
<TD VALIGN="TOP">1</TD>
<TD VALIGN="TOP">Text</TD>
</TR>

<TR>
<TD VALIGN="TOP">2</TD>
<TD VALIGN="TOP">Database</TD>
</TR>

<TR>
<TD VALIGN="TOP">&gt;2</TD>
<TD VALIGN="TOP">Values greater than 2 can be used to refer to comparisons
using specific Locale IDs (LCID)</TD>
</TR>
</TABLE>


    
</P>
<A NAME="324"><H2>A Sample Dictionary Lookup</H2></A><P>To illustrate the use of the <I>Dictionary</I> object, you can, for example, create a 
Web page that supplies information about some books. The code for this 
example is on the CD-ROM in the Components Web project. An HTML form collects 
the ISBN for a book that the user is interested in, and the response looks up 
that book in the dictionary and returns a string that describes the book. The 
code in Figure 17-9 shows the dictionary being loaded in the script itself, with 
only three books. In a production environment, you should probably load a 
dictionary from either a data file or a database. The HTML form simply prompts 
the user for the book he or she is interested in.

</P>
<P><B>Figure 17-9.</B> <I>Source code for the Dictionary.htm page that captures an ISBN for 
a search using the </I>Dictionary<I> object.</I>

</P>
<P><PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Dictionary Sample&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H2&gt;Dictionary Sample&lt;/H2&gt;
&lt;HR&gt;

This page searches the dictionary for book information
&lt;BR&gt;based upon the ISBN.
&lt;P&gt;
Currently, the following three books are available:

&lt;UL&gt;
&lt;LI&gt;Inside Visual InterDev (1-57231-583-0)
&lt;LI&gt;Running IIS 4.0 (2)
&lt;LI&gt;Programming Visual InterDev 6.0 (3)
&lt;/UL&gt;
&lt;P&gt;

&lt;FORM Action=&quot;DictionaryHandler.asp&quot; METHOD=POST&gt;
Please enter an ISBN:
&lt;INPUT TYPE=TEXT NAME=ISBN&gt;
&lt;P&gt;
&lt;INPUT TYPE=SUBMIT&gt;
&lt;/FORM&gt;

&lt;HR&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>When the user clicks the Submit button, data is passed to the 
DictionaryHandler.asp page, as shown in Figure 17-10. This page creates the 
dictionary and enters information about three books.

</P>
<P><B>Figure 17-10.</B> <I>Source code for the DictionaryHandler.asp page that loads a 
dictionary with book information and performs a search given a key of the ISBN.</I>

</P>
<P><PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Dictionary Sample&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H2&gt;Dictionary Sample&lt;/H2&gt;
&lt;HR&gt;

&lt;OBJECT RUNAT=server PROGID=Scripting.Dictionary id=objDictionary&gt;
&lt;/OBJECT&gt;

&lt;%
' Enter three books in the dictionary

' VI 1.0
objDictionary.Add &quot;1-57231-583-0&quot;, &quot;Inside Visual InterDev by &quot; &amp; _
    &quot;Miller, Spencer, Vincent, and Evans&quot;      

' IIS 4.0
objDictionary.Add &quot;2,&quot; &quot;Running IIS 4.0&quot;

' VI 6.0
objDictionary.Add &quot;3,&quot; &quot;Programming Visual InterDev 6.0 by &quot; &amp; _
    &quot;Miller, Spencer, and Evans&quot;
%&gt;

Your entry was ISBN &lt;%=Request.Form(&quot;ISBN&quot;) %&gt;
&lt;p&gt;

&lt;%
key = Request.Form(&quot;ISBN&quot;)
If Not objDictionary.Exists(key) Then
%&gt;
ISBN &lt;%=key %&gt; was not found in the dictionary!
&lt;%
Else
%&gt;
The book that corresponds with ISBN &lt;%=Key %&gt; is 
&lt;P&gt;
&lt;B&gt;&lt;I&gt;&lt;%=objDictionary.Item(key) %&gt;&lt;/I&gt;&lt;/B&gt;
&lt;%
End If
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>The first thing you do is create the <I>Dictionary</I> object and assign it to the <I>objDictionary </I>variable. Using the <I>Add</I> method, you add entries for the 
three different books into the dictionary. In production, you can use a 
<I>TextStream </I>object that contains the books and then load this object at the 
<I>Session_OnStart </I>event. This is a good approach, especially if the data will be used in more than one page and as long as there is not too much data for the 
<I>Session</I> object to carry around.

</P>
<P>After loading the dictionary, the code checks that the user's input is in 
the dictionary with the <I>Exists</I> method. If it is False, it lets the user know that his 
or her entry was not found. If it does find it, it displays the information from 
the dictionary. Figure 17-11 shows the resulting output from the 
DictionaryHandler.asp page.


</P>
<P>
<A HREF="javascript:fullSize('f17lh11x.htm')"> <IMG SRC="images/f17lh11.jpg" width=404 height=339 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 17-11.</B> <I>Output from the DictionaryHandler.asp page.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




