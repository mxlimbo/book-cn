<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Creating Stored Procedures</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15c.htm", "ch15e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="281"><H1>Creating Stored Procedures</H1></A>
<P>Once you've created your data connection within Visual InterDev, you're all 
set to create stored procedures. To create a stored procedure, follow these steps:

</P>
<OL>
<P><LI>   Right-click Stored Procedures in the Data View window, and 
choose New Stored Procedure from the context menu. Visual InterDev 
will create a template stored procedure, as shown in the code 
following step 2. (See also Figure 15-5.)
</LI>
</P>
<P><LI>  Enter the code for your stored procedure into the source code 
editor, and click the Save button on the toolbar when you are ready 
to save the stored procedure.
</LI>
</P>
</OL>

<P><PRE>
Create Procedure StoredProcedure1
/*
    (
        @parameter1 datatype = default value,
        @parameter2 datatype OUTPUT
    )
*/
As
    /* set nocount on */
    return
</PRE>

</P>
<P>
<A HREF="javascript:fullSize('f15lh05x.htm')"> <IMG SRC="images/f15lh05.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 15-5. </B> <I> The source code editor within Visual InterDev showing a new stored procedure.</I><!-- /CAPTION -->

</P>
<P>Stored procedures can be as simple as a single SQL SELECT statement, 
or they can be hundreds of lines of SQL code. Here is an example stored 
procedure that performs a simple SQL SELECT statement:
</P>
<P><PRE>
Create Procedure spCompany
As
    SELECT * FROM Company
    return
</PRE>

</P>
<P>Here is another example stored procedure that performs a SQL 
SELECT statement. This procedure takes an input parameter for the City name and 
returns only those rows from the Company table that exactly match the 
search criteria:
</P>
<P><PRE>
Create Procedure spCompanybyCity
    (
    @city varchar(50)
    )
As
    SELECT * 
    FROM Company
    WHERE city = @city

    return
</PRE>

</P>
<P>If you want to return some information in addition to the resultset 
from the stored procedure to the calling program, you can use the OUTPUT 
option when you declare your parameters. The output parameter is passed by 
reference, so you pass the stored procedure a variable name that can point to 
the value of the output parameter. The following example returns the number 
of rows contained in the resultset:
</P>
<P><PRE>
Create Procedure spCompanybyCity2
    (
    @city varchar(50) = 'Dallas',
    @num_rows int OUTPUT
    )
As
    SELECT *
    FROM Company
    WHERE city = @city

    SELECT @num_rows = @@ROWCOUNT

    return
</PRE>

</P>
<P>The <I>@@ROWCOUNT</I> global variable has been used to determine the 
number of rows in the resultset. The value of <I>@@ROWCOUNT</I> refers to the last statement executed, which was the SELECT statement for the Company table. You'll also note that a default value has been used for the <I>@city</I> parameter so that the input defaults to 'Dallas' if there is no user input specified for this parameter.
</P>
<P>As another example, the stored procedure shown in the following 
code performs an INSERT statement into a table given some parameters as input.
</P>
<P><PRE>
Create Procedure spAddCompany
    (
        @company_name varchar(50),
        @address1 varchar(50) = Null,
        @address2 varchar(50) = Null,
        @city varchar(50) = Null,
        @state varchar(50) = Null,
        @zip varchar(10) = Null,
        @phone varchar(12) = Null,
        @fax varchar(12) = Null,
        @error_msg varchar(255) OUTPUT
    )
As
    If Len(@phone) &lt; 10
        BEGIN
        SELECT @error_msg = 'Please include the area code in the phone 
            number.'
        return -100
        END
    Else
        BEGIN
        INSERT INTO Company(company_name, address1, address2, 
            city, state, zip, phone, fax)
        VALUES (@company_name, @address1, @address2,
            @city, @state, @zip, @phone, @fax)
        END

    return
</PRE>

</P>
<P>The calling program can use the return code to check the success of 
the stored procedure. In this example, if a code of -100 is returned, the calling program can display an error message to the user. Of course, another way to handle data validation is via client-side scripting so that a round-trip to the server is not required and the user receives instantaneous feedback. Inspecting return codes from a stored procedure is useful, however, to ensure that the procedure executed successfully and that no unexpected errors were obtained 
during processing.

</P>
<P><div class="note"><blockquote>
<B>Note</B><hr>SQL Server has several reserved return status values. 
These range in value from -1 through -99 to indicate various reasons for 
failure. When returning a user-generated return value, be sure to pick a 
number outside of this range. Zero is also reserved by SQL Server 
for successful completion of the stored procedure.
</BLOCKQUOTE></DIV>

</P>
<P>In the spAddCo<I>mpany </I>stored procedure example, the Company table 
uses an IDENTITY property for the company_id column (the table's primary 
key). Columns that have the IDENTITY property set contain system-generated 
values that uniquely identify each row within the table. The values typically 
start at 1 and increment by 1 for each row that is added. To determine the latest 
value of an IDENTITY column after an INSERT statement, you can use 
the <I>@@IDENTITY</I> global variable. In the <I>spAddCompany</I> stored procedure, we would simply add the following code after the INSERT statement:
</P>
<P><PRE>
SELECT @company_id = @@IDENTITY
</PRE>

</P>
<P>The <I>@company_id</I> variable can be defined as an output parameter in 
the stored procedure definition to return the value to the calling program. This 
value can then be used when performing INSERT statements on other tables 
which contain the company_id column as a secondary key.

</P>
</BODY>
</HTML>




