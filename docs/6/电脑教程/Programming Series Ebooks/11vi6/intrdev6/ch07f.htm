<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Cascading Style Sheets</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07e.htm", "ch08a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="120"><H1>Cascading Style Sheets</H1></A>
<P>In developing standards for the World Wide Web, the W3C (World Wide 
Web Consortium) has proven, in their rejection of several submissions, to be 
aware of the need to separate content from presentation. In particular, &quot;formatting&quot; 
tags such as &lt;FONT&gt;, &lt;LAYER&gt;, and &lt;MARQUEE&gt; have failed to gain approval 
in favor of well-developed support for the Cascading Style Sheets (CSS) 
specification. CSS has become the accepted way to define page appearance.
</P>
<P>While Internet Explorer 3 provided a &quot;reference implementation&quot; of 
the original CSS specification, including support for approximately 80 percent 
of the nonpositional CSS attributes, Internet Explorer 4 improves upon this, 
resulting in roughly 99 percent compliance. There are just a few attributes of the 
CSS specification unimplemented in Internet Explorer 4. Among these 
unsupported attributes are some of the CSS pseudoclasses (first-line and first-character), 
and interword spacing. You can specify these attributes, pseudoclasses, and 
values; however, Internet Explorer 4 will ignore them. Oddly enough, there are 
technically unsupportable attributes in the specification. For example, how 
would one implement a vertical alignment of center when parsers are not allowed 
to &quot;look ahead&quot; to see where the next element might be?

</P>
<A NAME="121"><H2>Controlling Page Appearance</H2></A><P>DHTML provides a number of ways to control the appearance of a page. 
You can position the page, use filters on text elements, and take advantage of 
many other features to enhance the user's experience.
</P>
<P>It's a big deal in the HTML world to be able to specify absolute 
positioning. However, application designers have been able to do this for years. 
Absolute positioning, however, goes beyond the traditional 
<I>x</I> and <I>y</I> placement. There are also positioning modes that allow relative location on the page as well 
as allowing reflow, floats, and keeps (taken from the document-oriented 
nature of HTML).
</P>
<P>The Visibility, Display, and Z-index attributes are three useful 
positioning characteristics. The Visibility attribute determines whether an element is 
visible. The Display attribute controls whether the item still takes up space in the 
document according to its actual (though invisible) size. When set to &quot;none,&quot; it 
removes the item and its allotted space from the document, causing all items 
later in the document to reflow to fill the item's space. The Z-index attribute 
specifies the relative depth of elements on the page. This is particularly useful 
with absolutely positioned items.
</P>
<P>Using Microsoft WEFT (Web Embedding Fonts Tool), which is 
available from Microsoft's typography group, we can create &quot;font objects&quot; that we 
can download with our pages. These font objects are installed privately: only 
Internet Explorer can use them, and then only in the context of the site for which 
they were defined. See 
<I><A TARGET="_window2" HREF="http://www.microsoft.com/opentype/free.htm">http://www.microsoft.com/opentype/free.htm</A></I> for more 
information and to download WEFT and other utilities.
</P>
<P>We can specify typeface, size, family, color, and special treatments 
(small caps, for example). Using filters, we can also rotate, illuminate, and make 
masks from our text elements.

</P>
<A NAME="122"><H2>Maintenance and Performance</H2></A><P>One of the simple advantages of using style sheets is the fact that, since 
style information is separate from the document (in most cases, anyway) we can 
use the style information in many contexts. This is great, because developing a 
good style sheet is no trivial task, and it is important to be able to gain as much 
reusability as possible. As the shared style sheet changes, documents that use 
the style sheet do not need to be changed. Hits to the client documents of a 
style sheet will reflect the changed styles&#8212;no recompilation or relinking required.

</P>
<P>There are thousands upon thousands of graphics that are simply 
words formatted in a pretty way. The capabilities introduced with style sheets 
allow many of those graphics to be replaced with smaller, faster-to-download text.

</P>
<P>A side benefit of using a global style sheet for many pages in an 
application is that the style information goes down to the client machine once. 
This cached style sheet will be referenced on all client pages, further reducing 
the download costs of using style sheets.

</P>
<P>There's just a whole lot less coding when using style sheets than there 
is with one-off formatting of each and every paragraph. Within a document, 
many paragraphs will typically receive common treatment. By using style 
definitions, you simply point to a rule and your information is formatted by that rule. If 
you want an exception to the rule&#8212;no problem.

</P>
<P>In a well-designed document, all of the style information is moved out 
to the style sheet. This substantially reduces clutter, leaving only content. You 
will rarely need to mix style information with content.

</P>
<P>When working in multiple media, you can use different styles for 
each medium. For example, you might make the printable set of styles active 
when you want to print a document designed primarily for online presentation. 
By removing the formatting from the content, you can more easily repurpose 
the information.

</P>
<P>No more pesky font tags or tables in tables in tables&#8212;or any of those 
weird tagging arrangements once used to get a special effect on the page. All has 
been reduced to declarative &quot;put-it-right-here, 
just-like-this&quot; language.

</P>
<A NAME="123"><H2>Linked-In Style Sheets</H2></A><P>Linked-in style sheets form the most reusable style information you can get. 
The style sheet is a stand-alone document of MIME-type text that can be 
referenced by multitudes of individual pages.

</P>
<P>There are two ways to reference external style sheets&#8212;using the 
&lt;LINK&gt; tag or using the <I>@import</I> statement inside a &lt;STYLE&gt;&lt;/STYLE&gt; block. 
Generally, you link the primary style sheet in, and 
<I>@import</I> other supporting style sheets from within that linked-in main style sheet.

</P>
<P>Whether you use &lt;LINK&gt; or <I>@import</I>, you can give each style block 
a separate name. Why would you bother to do this? Because at run time you 
can turn whole style sheets on or off with a single statement. That's a pretty 
powerful tool. For example, with external style sheets, we can implement 
separate online and print versions of a document within a single file. To print the 
document, we simply turn off the online styles and turn on the styles suitable 
for printing.

</P>
<P>You can import a style sheet by using 
<I>@import</I>:

</P>
<P><PRE>
&lt;STYLE&gt;
    @import url(http://www.32x.com/ie4sem/styles/primary.asp);
&lt;/STYLE&gt;
</PRE>

</P>
<P>The next example uses the &lt;LINK&gt; tag:

</P>
<P><PRE>
&lt;HTML&gt;
&lt;HEAD&gt;&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/expeditn/COLOR0.CSS&quot; VI6.0THEME=&quot;Expedition&quot;&gt;
&lt;/HEAD&gt;
</PRE>

</P>
<A NAME="124"><H2>Embedded Style Sheets</H2></A><P>While you're experimenting with presentation, it might be easier to have 
the style information in a style block right there in your test document. You 
can move the information into a separate style sheet at any time. The advent of 
the CSS editor in Visual InterDev 6.0 makes working with separate style sheets easier.

</P>
<P>Suppose all your documents share a global style sheet. Usually the 
definitions in the global style sheet satisfy 95 percent of each document's 
requirements. You can satisfy the other 5 percent by defining an embedded style 
sheet, which is a style block local to the document. An embedded style sheet fits 
the bill until the global style sheet can incorporate the needed additions.

</P>
<P>You might find that some styles are too document-specific to include 
in the global style sheet. In these cases, an embedded style sheet might be the 
trick. However, remember that you can reference multiple style sheets. The last 
one overrides the earlier ones, so at some point it still might be advantageous 
to separate the embedded style sheet out into a separate file.

</P>
<P>To add an embedded style sheet, simply add a &lt;STYLE&gt;&lt;/STYLE&gt; 
pair inside the &lt;HEAD&gt; section of your document. Technically, you could add 
an embedded style sheet to the &lt;BODY&gt; section as well, but the 
recommendation is to add it in the &lt;HEAD&gt;. Place your style definitions, one to a line, 
inside the &lt;STYLE&gt; block.

</P>
<A NAME="125"><H2>Using the CSS Editor</H2></A><P>The CSS Editor allows you to edit style sheets by selecting properties in a 
set of property pages. This graphical interface makes it easy to create and 
modify style sheets. Figure 7-10 shows the CSS Editor in the center of the Visual 
InterDev development environment. To add a style sheet to your Web project and 
invoke the CSS Editor, simply select Add Item from the Project menu and then 
double-click Style Sheet in the Add Item dialog box. In the left part of the CSS 
Editor window, you can see the style sheet outline, which displays the tags and 
classes in the style sheet. You can use this outline view to move around in the 
style sheet. When you click a tag or a class in the outline, the CSS Editor updates 
the display of the property pages to reflect the current settings of the item 
you selected.

</P>
<P><A HREF="javascript:fullSize('f07lh10x.htm')"> <IMG SRC="images/f07lh10.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 7-10.</B> <I> The CSS Editor.</I><!-- /CAPTION -->

</P>
<P>Table 7-2 contains descriptions of the CSS Editor property pages. 

</P>
<P><B>Table 7-2.</B> <I> CSS Editor property pages.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Page</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">Font</TD>
<TD VALIGN="TOP">Controls the font aspects of the current style or class.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Background</TD>
<TD VALIGN="TOP">Changes background properties. This is handy when you
need to use an image for the page background. You can set the 
image file name, specify how to tile the image, and in general 
control the image's formatting. This is much easier than trying to 
remember the individual attributes to make these changes.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Borders</TD>
<TD VALIGN="TOP">Changes border properties. The Borders page makes
setting borders a quick and easy process. You can choose the border 
style, set the margins and padding, and control the border's color.
</TD>
</TR>

<TR>
<TD VALIGN="TOP">Layout</TD>
<TD VALIGN="TOP">Changes layout properties. This page is useful for controlling
layout features such as spacing between characters or page 
breaks.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Lists</TD>
<TD VALIGN="TOP">Controls list characteristics. This page makes setting up list
features a snap. You can control the type of list, the type of 
bullets used for the list, and the location of the bullets.
</TD>
</TR>

<TR>
<TD VALIGN="TOP">Advanced</TD>
<TD VALIGN="TOP">Controls positioning and other advanced properties. You
can control the clipping rectangle and you can control whether 
the item is visible.</TD>
</TR>
 
<TR>
<TD VALIGN="TOP">Source</TD>
<TD VALIGN="TOP">Displays the source for the style sheet.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Preview</TD>
<TD VALIGN="TOP">Previews the style sheet.</TD>
</TR>
</TABLE>
    
     
</P>
<P>The Preview page demonstrates how a page will look when rendered 
with your style sheet. Figure 7-11 shows the Preview page.

</P>
<P>The Preview page simplifies style testing by providing on-demand 
previews. You can use this page at the click of a button to display almost any 
feature of the style sheet you are working on. You can also change the page 
that is used for the preview.
</P>
<P>By unchecking the Style Sheet Applied check box, you can toggle 
between viewing the page with and without your style sheet.

</P>
<P><A HREF="javascript:fullSize('f07lh11x.htm')"> <IMG SRC="images/f07lh11.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 7-11.</B> <I> The CSS Editor Preview page.</I><!-- /CAPTION -->

</P>
<A NAME="126"><H2>Style Information on the Tag</H2></A><P>Most of the time, positioning information is one-off. That is, you want a 
particular element placed in a particular location, and you don't want to make 
any general rules about the placement. In such cases, it's perfectly appropriate 
to specify style information directly on the tag.

</P>
<P>In fact, certain attributes don't work unless they're directly on the tag. 
For example, the Background-image attribute no longer works in the style 
definition. It must be specified on the tag! As it turns out, this is true of every 
style attribute that implicitly creates a multimedia object to control the attribute, 
such as background image characteristics and filter attributes.

</P>
<P>Style information attached to a tag is also appropriate for any &quot;ad hoc&quot; 
style data. Again, at the times when you need very specific one-off control, 
this method allows for that fine-grained control.

</P>
<P>Just as the embedded style sheet overrode the linked-in style, the 
on-tag style information overrides both the embedded and the linked-in style 
definitions. However, there is an exception. If a style rule is declared as 
important (we'll see this later when we talk about style rules), it can override even 
in-tag style information regardless of where it is defined.

</P>
<P>Don't get carried away with in-tag styles! They'll wreak havoc on 
your attempts to define more global style information later. In-tag styles also 
muddy up the well-separated relationship between style sheets and the content, 
potentially rendering your document less portable.

</P>
<P>It's easy to define style information on the tag: just put a Style 
attribute on the tag. Every Visible tag supports the Style attribute.

</P>
<A NAME="127"><H2>Defining Style Rules</H2></A><P>Rules specified in linked-in style sheets or in embedded style sheets have the 
same syntax. There is a rule scope followed by the rule itself, which looks like this:

</P>
<P><PRE>
<I>rule-scope</I>  {<I>attribute</I>:<I>value</I>;<I>attribute</I>:<I>value</I>;...}
</PRE>

</P>
<P>You can specify as many attribute-value pairs as you want in a style rule. 
The braces, colons, and semicolons are required. (Technically, the last 
semicolon isn't required, but it does make cutting and pasting attribute-value pairs 
less error-prone.)

</P>
<P>Rules specified on tags do not require a scope because the rule is 
implicitly the duration of the tag itself. This can, depending on the inheritance of 
the specified rule, also apply to any elements coded within the bounds of 
block elements. So, in-tag rules look like this:

</P>
<P><PRE>
&lt;SOMETAG STYLE=&quot;<I>attribute</I>:<I>value;attribute</I>:<I>value;</I>...&quot;&gt;
</PRE>

</P>
<P>Any visual tag can have a Style attribute, although not all rules are 
valid for all tags.

</P>
<A NAME="128"><H3>Specifying the rule's scope</H3></A><P>Rules that are more specific have precedence over less specific rules. That's 
why the in-tag styles override the style-sheet-defined rules. When we define 
style rules we can define various scopes. For example, we can define how all 
text in the document looks, and then we can make specific exceptions based on 
tag, class, or on an individual basis. This is a typical way to work&#8212;first define 
general rules, and then the finer scope defines exceptions to those rules.

</P>
<P>You can define a single set of rules that applies to as many scopes as 
you want. Just separate the scopes with commas:

</P>
<P><PRE>
<I>s1, s2, s3</I>  {<I>attribute</I>:<I>value</I>;<I>attribute</I>:<I>value;</I>...}
</PRE>

</P>
<P>The tag scope is the most general, least specific scope, and can 
therefore be easily overridden or augmented in later style rules. Some tags have 
broader scope than others do. For example, the &lt;BODY&gt; tag contains all other 
visible tags in a document, and therefore has the broadest style scope. 
Consider the following:

</P>
<P><PRE>
body        {font-family:arial;font-size:10;}
p           {font-size:9;}
</PRE>

</P>
<P>In the example above, the &lt;P&gt; tag inherits its font family from the 
&lt;BODY&gt; tag's rule but overrides the font size rule.

</P>
<P>You can define rules that apply to a broad range of elements. Rules 
defined by class can even span different tags, since the same class can be 
applied to many different elements regardless of tag. You use a period (.) to indicate 
a class rule:

</P>
<P><PRE>
.error      {font-color:red;}
</PRE>

</P>
<P>Specifying a rule by class is convenient but implies that many tags in 
the document can end up with Class attributes on them. While not a huge 
maintenance burden, this can be tedious. There is a way to specify how things 
will look when they're contained inside another scope. For example, the 
following rule indicates how a paragraph will look when it is inside a &lt;DIV&gt; of class 
<I>Error</I>:

</P>
<P><PRE>
div.error p {font-color:red}
</PRE>

</P>
<P>Now all the paragraphs inside an Error section will share this 
characteristic without requiring individual Class attributes specified.

</P>
<P>You can define a rule for all elements that share an ID. Technically, 
IDs are supposed to be unique, which implies that the rule applies to a single 
item. This might sound like a ridiculous scope, but it's actually quite valuable.

</P>
<A NAME="129"><H2>Setting Style Attributes</H2></A><P>Attribute-value pairs don't all need to be specified on the same line. CSS 
uses curly braces ({ }) to determine where a rule starts and ends, and the 
semicolon (;) to separate attribute-value pairs. So use as much space as is helpful to 
make your style sheets readable.

</P>
<A NAME="130"><H3>Font size, family, weight, and style</H3></A><P>A large portion of a typical style specification concerns itself with the fonts 
of various elements in the document. You can control the significant 
characteristics of the font using the following properties:

</P>
<P><PRE>
font-family
font-size
font-weight
font-style
font-variant
@font-face
</PRE>

</P>
<P>A couple of notes on these attributes:

</P>
<UL>
<P><LI>When specifying the family name, use quotes around the name. 
It's required if the name has embedded blanks (and it's a good 
idea anyway). 

</LI>
</P>
<P><LI>The @font-face attribute is used to name a &quot;font object&quot; that 
you've defined with the font-object creation tool. 
</LI></P>
</UL>




<A NAME="131"><H3>Margins, spacing, and positions</H3></A><P>You can also control the relative spacing of elements as they appear on the 
page. The most commonly used attributes are:

</P>
<P><PRE>
margin derivatives (margin, margin-left, etc.)
left
top
width
height
position
display
</PRE>

</P>
<P>With Internet Explorer 4.0, we now have 
<I>onresize</I> events. We can use <I>onresize</I> to implement a layout policy for items on the page. This is the 
standard procedure in application environments such as Microsoft Visual 
Basic. However, a more robust and easier to develop approach is to use 
percentage-based values for the placement attributes. 

</P>
<A NAME="132"><H3>Colors, borders, and special effects</H3></A><P>We have a rich set of attributes to control the colors, border styles, and 
special-effect filters for each element. Note, however, that filters and borders only 
work for block elements (those elements that essentially form their own 
separate paragraphs). Block elements imply a line break at the beginning and end of 
the element.

</P>
<A NAME="133"><H3>Miscellaneous page characteristics </H3></A><P>With HTML-only browsers, we had the attributes on the &lt;BODY&gt; tag to 
control the background color and image displayed behind the document. 
For DHTML browsers you can still do this, but the preferred method is to use 
the background-management attributes on the Style attribute of the &lt;BODY&gt; 
tag. In fact, you can do this for any block element.

</P>
<A NAME="134"><H3>Differences in Netscape Navigator and Internet Explorer</H3></A><P>Netscape Navigator and Communicator versions 4.0 through 4.03 
implement cascading style sheets in a different manner than Internet Explorer. 
Navigator and Communicator treat relative URLs in style sheets as relative to the 
document they are referenced in, instead of relative to the linked-in style sheet. 
You should edit the CSS files and change the relative links to absolute links to 
work around this problem.
</P>
</BODY>
</HTML>




