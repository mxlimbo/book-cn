<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Scripting the DE Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13a.htm", "ch13c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="235"><H1>Scripting the DE Object</H1></A>
<P>The Data Environment provides a special object that you can use to script 
server-based database access: the <I>DE</I> object. This object exposes an object model 
that you can use to execute database commands and manage their recordsets. 
The <I>DE</I> object is a simplified version of the ActiveX Data Objects (ADO) model.

</P>
<P>Before starting to script the <I>DE</I> object, you'll need to add a data 
connection to your Web project within Microsoft Visual InterDev. Once you have 
done this, Visual InterDev adds script to the global.asa file to create a 
<I>DE</I> object for you to work with. The Visual InterDev_generated script also specifies the 
connection information for the <I>DE</I> object. Figure 13-1 shows a sample global.asa file. 
You can see that the <I>DE</I> object is created using the 
<I>Server.CreateObject</I> syntax and is then stored in an Application-level variable named 
<I>DE</I>. All of this code was generated automatically when the data connection was created.
</P>
<P>
<b>Figure 13-1.</b> <I>A global.asa file showing how the</i> DE <i>object is created in the</i> Application_Onstart <i>event.</i>

</P>
<P><PRE>&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt;

'You can add special event handlers in this file that will get 
'run automatically when special Active Server Pages events occur.
'To create these handlers, just create a subroutine with a name 
'from the list below that corresponds to the event you want to
'use. For example, to create an event handler for Session_OnStart,
'you would put the following code into this file (without the
'comments):

'Sub Session_OnStart
'**Put your code here **
'End Sub

'EventName              Description
'Session_OnStart        Runs the first time a user runs any page
'                       in your application
'Session_OnEnd          Runs when a user's session times out or
'                       quits your application

'Application_OnStart    Runs once when the first page of your
'                       application is run for the first time by
'                       any user

'Application_OnEnd      Runs once when the Web server shuts down

&lt;/SCRIPT&gt;

&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt;
Sub Application_OnStart
    '==Visual InterDev Generated - startspan==
    '--Project Data Connection
    Application(&quot;VIBankconn_ConnectionString&quot;) = &quot;DRIVER=SQL
        Server;SERVER=ntserver;UID=sa;APP=Microsoft(R)
        Windows NT(TM) Operating System;WSID=NTSERVER;
        DATABASE=bank;User Id=sa;&quot;
    Application(&quot;VIBankconn_ConnectionTimeout&quot;) = 15
    Application(&quot;VIBankconn_CommandTimeout&quot;) = 30
    Application(&quot;VIBankconn_CursorLocation&quot;) = 3
    Application(&quot;VIBankconn_RuntimeUserName&quot;) = &quot;sa&quot;
    Application(&quot;VIBankconn_RuntimePassword&quot;) = &quot;&quot;
    '-- Project Data Environment
    Set DE = Server.CreateObject(&quot;DERuntime.DERuntime&quot;)
    Application(&quot;DE&quot;) = DE.Load(Server.MapPath(&quot;Global.ASA&quot;),
        &quot;_private/DataEnvironment/DataEnvironment.asa&quot;)
    '==Visual InterDev Generated - endspan==
End Sub
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>By scripting the <I>DE</I> object, you can achieve many of the same end 
results as when you use Recordset DTCs and data-bound controls. For example, 
you can execute database commands (including SQL queries, parameterized 
queries, and stored procedures associated with command objects) and work 
with recordsets.

</P>
<A NAME="236"><H2>Executing Database Commands</H2></A><P>To execute a database command using the 
<I>DE</I> object, you first create an instance of the 
<I>DE</I> object on your Web page. You can then execute any data 
command object associated with the <I>DE</I> object. This means any data command that 
you have created and placed under your data connection within the Visual 
InterDev Data Environment.

</P>
<A NAME="237"><H3>Creating a <I>DE</I> object</H3></A><P>If you have the Scripting Object Model enabled, use the following syntax 
to create a <I>DE</I> object for your Web page:

</P>
<P><PRE>&lt;%
thisPage.createDE()
%&gt;
</PRE>

</P>
<P>If you do not have the Scripting Object Model enabled, use the 
syntax shown here:

</P>
<P><PRE>&lt;%
Set DE = Server.CreateObject(&quot;DERuntime.DERuntime&quot;)
DE.Init(Application(&quot;DE&quot;))
%&gt;
</PRE>

</P>
<A NAME="238"><H3>Executing a SQL query</H3></A><P>To execute a SQL query associated with a data command object, use the 
following syntax:

</P>
<P><PRE>&lt;% DE.<I>commandObjectName</I> %&gt;
</PRE>

</P>
<P>If the command takes parameters, use the syntax shown here:

</P>
<P><PRE>&lt;% DE.<I>commandObjectName (parameter1, parameter2, [&#8230;])</I> %&gt;
</PRE>

</P>
<P>If the command returns a value, use the this syntax:

</P>
<P><PRE>&lt;% <I>RetValue</I> = DE.<I>commandObjectName (parameter1, parameter2, [&#8230;])</I> %&gt;
</PRE>

</P>
<A NAME="239"><H2>Working with Recordsets</H2></A><P>After you have executed a data command using the 
<I>DE</I> object, you can access the recordset and navigate through it with 
<I>Recordset</I> objects. To give you access to the recordset, the DE object creates a 
<I>Recordset</I> object named after the data command object but with an &quot;rs&quot; prefix. Here is the syntax for accessing 
the <I>Recordset</I> object:

</P>
<P><PRE>&lt;% DE.rs<I>commandObjectName</I> %&gt;
</PRE>

</P>
<P>For example, if your data command object is named 
<I>AccountCode,</I> the <I>Recordset</I> object is named 
<I>rsAccountCode</I>.

</P>
<A NAME="240"><H3>Extracting values within a recordset</H3></A><P>Follow these steps to extract values within a recordset:

</P>
<OL>
<LI><P>Create the recordset, and set a variable to point to the DE 
<I>Recordset</I> object, as shown here:

</P>
<P><PRE>&lt;%
DE.AccountCode
Set rs = DE.rsAccountCode
%&gt;
</PRE>

</P>
</LI>

<LI><P>Extract individual values from the 
<I>Fields</I> collection of the <I>Recordset</I> object, as shown here:


</P>
<P><PRE>&lt;%
DE.AccountCode
Set rs = DE.rsAccountCode
Account_Id = rs.Fields(&quot;Account_Id&quot;)
Account_Description = rs.Fields(&quot;Account_Description)
%&gt;
</PRE>
</P>
</LI>
</OL>

<A NAME="241"><H3>Navigating a recordset</H3></A><P>Follow these steps to navigate a recordset:

</P>
<OL>
<P><LI>Use the <I>moveNext</I>,<I> 
movePrevious</I>, <I>moveFirst</I>, or 
<I>moveLast</I> methods of the <I>Recordset</I> object.
</LI>
</P>
<P><LI>Use the <I>EOF</I> or <I>BOF</I> properties to determine whether you are at 
the end or the beginning of the <I>Recordset</I> object.
</LI>
</P>
</OL>




<A NAME="242"><H2>DE Object Scripting Examples</H2></A><P>Figure 13-2 shows an example of scripting the 
<I>DE</I> object to display a list of account descriptions on a Web page. This example is taken from 
the AccountCodeDE.asp page within the VI-Bank Web project on the 
companion CD-ROM.
<Div class="note"><BLOCKQUOTE>
<b>NOTE</b><hr>
The VI-Bank Web project is a sample Internet Banking 
application that we'll be using throughout this chapter and many of the 
following chapters &#8212;especially chapters on three-tier transactional applications. 
VI-Bank is primarily a Microsoft SQL Server 6.5_based application. 
However, several of its Web pages&#8212;including the examples in this chapter&#8212;can 
be run against the Microsoft Access database that is also supplied with 
the application.
</BLOCKQUOTE></div>

</P>
<P><B>Figure 13-2.</B> <I>Source code for the AccountCodeDE.asp Web page showing how 
the </I>DE<I> object can be scripted to query and display data from a relational 
database.</I>

</P>
<P><PRE>&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Vi-Bank - Account Code Listing&lt;/TITLE&gt;

&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot;
    HREF=&quot;_Themes/blueprnt/THEME.CSS&quot;
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/GRAPH0.CSS&quot;
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot;
    HREF=&quot;_Themes/blueprnt/COLOR0.CSS&quot;
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot;
    HREF=&quot;_Themes/blueprnt/CUSTOM.CSS&quot;
    VI6.0THEME=&quot;Blueprint&quot;&gt;&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;TABLE&gt;
&lt;TR valign=top&gt;
&lt;TD width=125&gt;
&lt;!--#INCLUDE FILE=&quot;maintmenu.htm&quot;--&gt;
&lt;/TD&gt;
&lt;TD&gt;

&lt;H2&gt;&lt;FONT COLOR=&quot;navy&quot;&gt;&lt;I&gt;VI-Bank - Account Code Listing&lt;/I&gt;&lt;/FONT&gt;
&lt;/H2&gt;
&lt;HR style=&quot;COLOR: navy&quot;&gt;
&lt;P&gt;

&lt;%
thisPage.createDE()
DE.AccountCode
Set rs = DE.rsAccountCode
Response.Write &quot;&lt;TABLE BORDER=1 CELLSPACING=2 CELLPADDING=2&gt;&quot; + _
    &quot;&lt;TR&gt;&lt;TH&gt;Account Code&lt;/TH&gt;&lt;TH&gt;Account Description&lt;/TH&gt;&lt;/TR&gt;&quot;
Do While Not rs.EOF
    Response.Write &quot;&lt;TR&gt;&lt;TD&gt;&quot; + CStr(rs.Fields(&quot;account_id&quot;)) + _
        &quot;&lt;/TD&gt;&quot; + &quot;&lt;TD&gt;&quot; + rs.Fields(&quot;account_description&quot;) + _
        &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    rs.MoveNext
Loop
Response.Write &quot;&lt;/TABLE&gt;&quot;
%&gt;

&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;

&lt;/BODY&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;% EndPageProcessing() %&gt;
&lt;/FORM&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>Figure 13-3 shows the resulting output from the 
AccountCodeDE.asp page. In just nine lines of code, the 
<I>DE</I> object has been used to query the Account_Code table and then present the results in an HTML table on screen.

</P>
<P>
<A HREF="javascript:fullSize('f13LH03x.htm')"> <IMG SRC="images/f13LH03.JPG" width=404 height=295 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-3.</B> <I>Output from the AccountCodeDE.asp Web page, showing the contents of the Account_Code table.</I><!-- /CAPTION -->

</P>
<P>The <I>DE</I> object accesses the AccountCode data command object within 
the VI-Bank Web project for the source of the query. The query is a simple 
SQL SELECT statement, as shown here:

</P>
<P><PRE>SELECT account_id, account_description
FROM account_code
ORDER BY account_id
</PRE>
<DIV class="NOTE"><BLOCKQUOTE>
<b>NOTE</b><HR>When working with data command objects, it is often 
preferable to select <I>SQL Statement</I> as the source of the data. You then write the 
SQL code yourself within the Properties dialog box, as opposed to simply 
selecting a <I>Database Object</I> data source and selecting a table from the 
drop-down list box. By using hand-coded SQL, you can specify the sort 
order for your recordset and have more control over the result.
</BLOCKQUOTE></div>

</P>
<P>This example simply outputs the records for viewing within your 
browser. This type of multirow output is often combined with the ability to select 
a specific record and then edit that record on another Web page. This 
was achieved within Visual InterDev 1.0 by using the Data Form Wizard, 
which generated both form views and list views. To enable individual records 
within your output HTML table to be selected and launch another Web page, you 
might add some code, as in the following example:

</P>
<P><PRE>&lt;%
thisPage.createDE()
DE.AccountCode
Set rs = DE.rsAccountCode
Response.Write &quot;&lt;TABLE BORDER=1 CELLSPACING=2 CELLPADDING=2&gt;&quot; + _
    &quot;&lt;TR&gt;&lt;TH&gt;Account Code&lt;/TH&gt;&lt;TH&gt;Account Description&lt;/TH&gt;&lt;/TR&gt;&quot;
Do While Not rs.EOF
    Response.Write _
        &quot;&lt;TR&gt;&lt;TD&gt;&lt;A HREF=accountcodemaint.asp?account_id=&quot; + _
        CStr(rs.Fields(&quot;account_id&quot;)) + &quot;&gt;&quot; + _
        CStr(rs.Fields(&quot;account_id&quot;)) + &quot;&lt;/A&gt;&lt;/TD&gt;&quot; + _
        &quot;&lt;TD&gt;&quot; + rs.Fields(&quot;account_description&quot;) + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    rs.MoveNext
Loop
Response.Write &quot;&lt;/TABLE&gt;&quot;
%&gt; 
</PRE>

</P>
<P>In this example, a hyperlink is added to the output of the first column 
within the HTML table. This way the accountcodemaint.asp page is called and is 
passed the value of the account_id for editing. The accountcodemaint.asp page can 
use this value as a record locator so that it knows which record to query.

</P>
<P>From these examples, you can see how easy it is to script the Data 
Environment and to output resultsets to the Web page. In situations where you 
want to be able to navigate a lengthy recordset, perhaps ten rows at a time, it's 
more convenient to use some of Visual InterDev's DTCs to simplify the process, 
as we'll see in the following section.

</P>
</BODY>
</HTML>




