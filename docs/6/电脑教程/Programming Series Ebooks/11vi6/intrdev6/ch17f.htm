<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The Filesystem Object Component</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch17e.htm", "ch17g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="319"><H1>The Filesystem Object Component</H1></A>
<P>The Filesystem Object component makes available two objects for 
manipulating text files from ASP Web pages. The 
<I>FileSystemObject</I> object opens or creates text files, and the 
<I>TextStream</I> object reads and writes to the text file 
once it's opened.

</P>
<A NAME="320"><H2>The <I>FileSystemObject</I> Object</H2></A><P>The syntax for creating an instance of the <I>FileSystemObject </I>object is
</P>
<P><PRE>
&lt;OBJECT RUNAT=server PROGID=Scripting.FileSystemObject 
    id=objFileSys&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P>This statement instantiates a <I>FileSystemObject 
</I>object, and it adds a reference to the new object in the 
<I>objFileSys </I>variable. After the object is created, you 
can use it to access files. The <I>FileSystemObject 
</I>object has no properties. Its sole purpose is to create or open text files.

</P>
<P>The <I>FileSystemObject </I>object has two methods, one for creating files 
and one for opening text files. The <I>CreateTextFile</I> method takes the filename 
you specify and creates the file for you. It returns a <I>TextStream </I>object that you can use to manipulate the file after it's been created. The syntax, explained further in Table 17-3, is

</P>
<P><PRE>
Set objTextStream = objFileSys.CreateTextFile(FileName, 
    [Overwrite], [Unicode])
</PRE>

</P>
<P><B>Table 17-3.</B> <I>Arguments in the </I>CreateTextFile<I> method of the </I>FileSystemObject<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Argument</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>objTextStream</I></TD>
<TD VALIGN="TOP">The variable that contains the <I>TextStream</I> object created by this function.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>objFileSys</I></TD>
<TD VALIGN="TOP">A variable referencing an existing <I>FileSystemObject</I> object.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>FileName</I></TD>
<TD VALIGN="TOP">A string that contains the path to a file. This can be the fully qualified path, including the drive letter and directory, or just the filename. If it's just the 
filename, the file is created in the root directory of the site.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Overwrite</I></TD>
<TD VALIGN="TOP">This Boolean value can be set to False to keep the <I>FileSystemObject</I> object from deleting an existing file when you create a new file. This parameter is optional; if 
you don't specify a value, it defaults to True, and an existing file with the same name is deleted.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Unicode</I></TD>
<TD VALIGN="TOP">Set this argument to True to write in Unicode format.
This is an optional argument, and it defaults to False if omitted.</TD>
</TR>
</TABLE>

</P>
<P>The <I>OpenTextFile</I> method takes the filename you specify and opens 
the file. It has arguments that specify in which mode to open the file and what 
to do if the file is not there. Like <I>CreateTextFile</I>, <I>OpenTextFile </I>returns a 
<I>TextStream </I>object that you can use to manipulate the file once it's open. The 
following syntax is explained further in Table 17-4.

</P>
<P><PRE>
Set objTextStream = objFileSys.OpenTextFile(FileName, [IOMode], 
    [Create], [Format])
</PRE>

</P>
<P><B>Table 17-4.</B> <I>Arguments in the </I>OpenTextFile<I> method of the </I>FileSystemObject<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Argument</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>FileName</I></TD>
<TD VALIGN="TOP"> This required variable is the path and filename of the file you're trying to open. If you don't include the full path, the <I>FileSystemObject</I> object looks in the root directory.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>IOMode</I></TD>
<TD VALIGN="TOP">This optional constant is either <I>ForReading </I>or <I>ForAppending</I>, indicating that the file is open for either reading or appending.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Create</I></TD>
<TD VALIGN="TOP">This optional Boolean argument specifies what happens if the file you're trying to open doesn't exist. When set to True, it creates an empty file if the file is not found. 
When set to False, it generates an error if the file is not found. The default is False if you omit this argument. If you set it to True, you can avoid having to open the file, check 
for an error, and create the file if the open operation failed.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Format</I></TD>
<TD VALIGN="TOP">This optional value is one of three <I>Tristate </I>values (<I>TristateTrue</I> for Unicode, <I>TristateFalse</I> for ASCII, and <I>TristateUseDefault</I> for the system default) used to indicate the format of the opened file. If this value is omitted, the file is 
opened as ASCII.</TD>
</TR>
</TABLE>

</P>
<A NAME="321"><H2>The <I>TextStream</I> Object</H2></A><P>After you open or create the text file, you have a 
<I>TextStream </I>object. This object represents the file on disk. It has a cursor that, like the cursor in your word processor, indicates where the next typed characters will appear. The 
<I>TextStream </I>cursor also indicates where characters that you write to the stream will go, 
and where characters that you read will come from.

</P>
<P>You cannot create a <I>TextStream </I>object using the 
<I>Server.CreateObject </I>method. The only way to get a 
<I>TextStream </I>object is to open an existing text file or 
create a new one using the <I>FileSystemObject 
</I>object as discussed earlier. Table 17-5 lists the properties of the 
<I>TextStream</I> object, while Table 17-6 lists its methods.

</P>
<P><B>Table 17-5.</B> <I>Properties of the </I>TextStream<I> object.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Property</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>AtEndOfLine</I></TD>
<TD VALIGN="TOP">A read-only Boolean value. It is True if the cursor
is at the end of the current line, False if otherwise.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>AtEndOfStream</I></TD>
<TD VALIGN="TOP">A read-only Boolean value. It is True if the cursor
is at the end of the stream, False if otherwise.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Column</I></TD>
<TD VALIGN="TOP">A read-only integer that indicates the number of characters from the beginning of the line to where the cursor is located.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Line</I></TD>
<TD VALIGN="TOP">A read-only integer value that indicates the line
number in the file where the cursor is located.</TD>
</TR>
</TABLE>

</P>
<P><B>Table 17-6.</B> <I>Methods of the </I>TextStream<I> object.</I>
     
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Method</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>Close</I></TD>
<TD VALIGN="TOP">Closes the stream and its text file.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Read(NumCharacters) </I></TD>
<TD VALIGN="TOP">Reads the number of<I> </I>characters from the text file starting at the current cursor position. <I>NumCharacters </I>is an integer value. The characters are returned in a string. </TD>
</TR>
     
<TR>
<TD VALIGN="TOP"><I>ReadAll</I></TD>
<TD VALIGN="TOP">Reads the entire stream into a string.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>ReadLine</I></TD>
<TD VALIGN="TOP">Reads an entire line into a string.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>OSkip(NumCharacters) </I></TD>
<TD VALIGN="TOP">Moves the cursor a number of<I> </I>characters in the stream. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SkipLines(NumLines)</I></TD>
<TD VALIGN="TOP">Moves the cursor a number of lines in the stream. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Write(Text) </I></TD>
<TD VALIGN="TOP">Writes a string to the stream.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>WriteLine([Text])</I></TD>
<TD VALIGN="TOP">Writes a text string to the stream and appends an end-of-line character to it. This string is optional.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>WriteBlankLines(NumLines)</I></TD>
<TD VALIGN="TOP">Writes a number of blank lines to the stream.</TD>
</TR>
</TABLE>

</P>
<A NAME="322"><H2>Implementing a Simple Text-Based Data File</H2></A><P>You can do many different things with a <I>FileSystemObject 
</I>object and a <I>TextStream </I>object. To illustrate some of these uses, we'll look at a sample application that uses a text file to record the names and addresses of people who 
leave that information at your Web site. The code for this sample is located in 
the Components Web project on the companion CD-ROM.

</P>
<P>You want to store everyone's name and address in the same text file. 
This text file will be opened for write access. Since a file can be opened for 
write access by only one application at a time, you have to ensure that you try to 
open the file only once for write access. One way to do this is to execute the 
<I>Application </I>object's <I>Lock </I>method before you try to write to the file. If the 
application is already locked when you try to lock it, your session waits until 
the application is unlocked before proceeding. The downside of using 
<I>Application.Lock </I>is that you might tie up the <I>Application </I>object for a long time while the operation is pending. Another way to control opening the file only once is 
to store a reference to the open file in the <I>Application </I>object. If the reference to the file shows that the file is open, don't try to open it; if the reference 
shows it's not open, you can open it.

</P>
<P>Next you build a sample page that lets you obtain a user's name 
and address, and then you save that information to a text file. The first thing 
you need is the data to write to the file. A simple HTML form does the trick. 
The sample HTML form, named FileSystemObject.htm and shown in Figure 17-7, 
has seven text boxes&#8212;two for the user's first and last name and five for the 
address fields. It calls an ASP file named FileSystemObjectHandler.asp that does 
the actual work of writing the file.

</P>
<P><B>Figure 17-7.</B> <I>The source code for FileSystemObject.htm captures user input 
and passes it to FileSystemObjectHandler.asp to create a text file.</I>

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H2&gt;FileSystemObject Sample&lt;/H2&gt;
&lt;HR&gt;

&lt;FORM METHOD=&quot;POST&quot; ACTION=&quot;FileSystemObjectHandler.asp&quot;&gt;
&lt;TABLE border=0 cellPadding=1 cellSpacing=1 width=50%&gt;
    
    &lt;TR&gt;
        &lt;TD&gt;First Name&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=firstname name=firstname&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;Last Name&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=lastname name=lastname&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;Address&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=address1 name=address1&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;Address&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=address2 name=address2&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;City&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=city name=city&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;State&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=state name=state&gt;&lt;/TD&gt;&lt;/TR&gt;
    &lt;TR&gt;
        &lt;TD&gt;Zip&lt;/TD&gt;
        &lt;TD&gt;
            &lt;INPUT id=zip name=zip&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;INPUT id=submit name=submit type=submit value=submit&gt;&lt;/P&gt;
&lt;/FORM&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>The FileSystemObjectHandler.asp file creates the text stream and 
writes the data to the file, as shown in Figure 17-8 below:

</P>
<P><B>Figure 17-8.</B> <I>Source code for the FileSystemObjectHandler.asp file.</I>

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;%
On Error Resume Next

' Lock the application so only one update is allowed at a time
Application.Lock
%&gt;

&lt;OBJECT RUNAT=&quot;server&quot; PROGID=&quot;Scripting.FileSystemObject&quot; 
    id=&quot;objFileSys&quot;&gt;
&lt;/OBJECT&gt;

&lt;%
' Define the filename and path
fname = Server.MapPath(&quot;\components\names.txt&quot;)

' Create a text stream object and open the file
Set MyFile = objFileSys.OpenTextFile(fname, 8)

If Err.number &lt;&gt; 0 Then
    Set MyFile = objFileSys.CreateTextFile(fname)
    Err.Clear
End If
 
' Prepare the output string
OutString = Request.Form(&quot;firstname&quot;) &amp; &quot;|&quot; &amp; _
    Request.Form(&quot;lastname&quot;) &amp; &quot;|&quot; &amp; _
    Request.Form(&quot;address1&quot;) &amp; &quot;|&quot; &amp; _
    Request.Form(&quot;address2&quot;) &amp; &quot;|&quot; &amp; _
    Request.Form(&quot;city&quot;) &amp; &quot;|&quot; &amp; Request.Form(&quot;state&quot;) &amp; &quot;|&quot; &amp; _
    Request.Form(&quot;zip&quot;)
   
' Write the string to the text file
MyFile.WriteLine(OutString)

' Close the file
MyFile.Close

' Display a success or failure message
If Err.number = 0 Then
    Response.Write &quot;&lt;H2&gt;FileSystem Object Sample&lt;/H2&gt;&lt;HR&gt;&quot;
    Response.Write &quot;&lt;P&gt;Data written successfully to &quot; + fname
    Response.Write &quot;&lt;P&gt;&lt;A HREF=&quot; + fname + &quot;&gt;View the file.&lt;/A&gt;&quot;
Else
    Response.Write &quot;&lt;H2&gt;FileSystem Object Sample&lt;/H2&gt;&lt;HR&gt;&quot;
    Response.Write &quot;&lt;P&gt;An error occurred while writing the &quot; + _
        &quot;data to &quot; + fname
End If

' Unlock the application
Application.UnLock
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>You have to do a couple of things before you create the main logic 
portion of the file. The first line in this script is 
<I>On Error Resume Next</I>. This means that if the script has an error, the script ignores it and continues executing on the next line. You must have this error trapping in place when you try to 
open the file. If the file is not there and any script statement has a problem, you 
get a scripting error. Rather than ending the script, you should continue and try 
to create a new file. You must expect that the file might not exist and be 
prepared to handle this possibility. One way to handle the problem of a file not found 
is to set the <I>Create </I>argument of the <I>OpenTextFile 
</I>method to True. When set to True, the argument creates an empty file if the file is not found. (See Table 17-4 for more details.)

</P>
<P>After setting up error trapping, the script tries to lock the 
<I>Application </I>object. If it is already locked, the script pauses at that line and waits for 
the <I>Application </I>object to unlock until the time-out period expires. In this 
example, you needn't worry about this, but in a larger-scale production environment 
it might be an issue.

</P>
<P>To open a file, you first create a <I>FileSystemObject 
</I>object by dragging the object onto your ASP Web page from the Toolbox. You also need a filename for the text file you'll write to. The <I>MapPath 
</I>method of the <I>Server </I>object translates the text 
file's<I> </I>virtual path&#8212;the path within your Web site&#8212;to a fully qualified 
path on a device on your Web server. <I>MapPath 
</I>returns that path, which is stored in the <I>fname 
</I>variable.

</P>
<P>Next, try to open the file with the <I>OpenTextFile 
</I>method of the <I>FileSystemObject </I>object. If you can open the file, a 
<I>TextStream </I>object is created and is assigned to the variable 
<I>objTextStream</I>. If you cannot open the file, an 
error is generated. Because of the <I>On Error Resume Next 
</I>statement, the script continues to run. The next line checks to see if the value of the error object, <I>Err</I>, is not 0. If no error occurred, the value is 0. If the value is anything other 
than 0, there was a problem opening the file, so try using the 
<I>CreateTextFile </I>method instead. In a production system, you can determine the exact error by 
checking the value of the <I>Err </I>object's <I>Number</I> property, but in this example assume that the problem results from a file not being found.

</P>
<P>You should now have a <I>TextStream </I>object, whether you had to create 
a file or open an existing one. Next you use the <I>Request </I>object to get the name and address information that the user typed into the system. The strings are combined with the pipe character between them. This is the string you write to the text file using the <I>WriteLine </I>method. After writing the data, all you have to do is close the text file.

</P>
<P>To provide the user with some constructive feedback, check the 
<I>Err </I>object again. If an error occurred while writing the data, use the 
<I>Description </I>property of the <I>Err </I>object to relay the error to the user. Otherwise, just thank the user for the input. Either way, you will unlock the 
<I>Application </I>object before the script ends. You must leave the 
<I>Application </I>object unlocked or other sessions will 
get stuck when they try to write data.

</P>
</BODY>
</HTML>




