<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Microsoft Transaction Server</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19b.htm", "ch19d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="345"><H1>Microsoft Transaction Server</H1></A>
<P>The Microsoft Windows NT 4.0 Option Pack includes Microsoft 
Transaction Server, a transaction processing system for developing, deploying, and 
managing distributed server applications. MTS takes care of all the server-side 
plumbing issues, such as automatic management of processes and threads, object 
instance management, and a distributed security service, so that developers can 
concentrate on writing the business logic specific to their applications. MTS brings 
a higher level of scalability to Web applications running on IIS by 
conserving server resources. As we have seen above, MTS also provides transactional 
behavior for applications so operations either succeed or fail as a whole.

</P>
<P>Once you have installed MTS, take a few minutes to familiarize yourself 
with the Transaction Server Explorer, shown in Figure 19-1 below. 
You can access the Transaction Server Explorer by choosing 
Start|Programs|Windows NT 4.0 Option Pack|Microsoft Transaction Server|Transaction Server 
Explorer, or by choosing Start|Programs|Windows NT 4.0 Option Pack|Microsoft 
Internet Information Server|Internet Service Manager. Both of these options will launch 
the Microsoft Management Console, which contains the Transaction Server Explorer.

</P>
<P>
<A HREF="javascript:fullSize('F19lh01x.htm')"> <IMG SRC="images/F19lh01.jpg" width=404 height=263 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 19-1.</B> <I>The Transaction Server Explorer within the Microsoft Management Console.</I><!-- /CAPTION -->

</P>
<P>In the right-hand pane of the Transaction Server Explorer, you'll see 
the Packages Installed folder. This folder is where you can install, deploy, 
and maintain your packages and components. We'll now look at some of the 
MTS terminology: packages, components, roles, interfaces, and methods.

</P>
<A NAME="346"><H2>Packages</H2></A><P>All components need to belong to a <I>package</I>. A package is a set of 
components that perform related application functions. While packages are simple to 
create&#8212;using the Transaction Server Explorer&#8212;the components that are added 
to the package should be selected carefully. Packages can define process 
boundaries, so you want to carefully consider your component design and 
deployment strategy. For performance reasons, you'll want to minimize the 
number of process boundaries that are crossed. The following design issues should 
be considered when defining packages:

</P>
<UL>
<P><LI>Activation
</LI>
</P>
<P><LI>Shared Resources
</LI>
</P>
<P><LI>Fault Isolation
</LI>
</P>
<P><LI>Security Isolation
</LI></P>
</UL>




<P>A package can be activated either as a Library Package or as a Server 
Package. A Library Package runs in the same process as the client that created it 
and offers no component tracking, role checking, or process isolation. A Server 
Package runs in its own process. It supports role-based security&#8212;see the section 
on roles below&#8212;resource sharing, process isolation, and process management.

</P>
<P>Components that are in the same package are able to share expensive 
resources, such as database connections, via database pooling. Sharing of 
resources allows applications to scale more easily and can also improve performance. 
This design consideration favors placing components in the same package.

</P>
<P><I>Fault isolation</I> means that components in different packages are 
protected from each other. If the process for one package dies for some reason, this 
does not affect the other package, which is running a separate process. This is 
one design consideration that tends to favor placing components in separate 
packages. This can be especially relevant during development and testing 
phases when components are still being verified for correct functionality. A 
similar consideration applies when deciding whether to run Web projects in a 
separate memory space from the Web server to avoid crashing the Web server if 
the application crashes.

</P>
<P>Packages also define security boundaries, so by placing components 
in separate packages you can isolate them from one another. When a 
component calls another component in a different package, the MTS security model will 
check the authorization of the calling client. No authorization checking between 
components within the same package occurs unless it is done at a programmatic level.

</P>
<A NAME="347"><H2>Components</H2></A><P>A<I> component</I> is an ActiveX DLL that you create and install into MTS. They 
can be written in any language that supports the creation of COM 
components. Components provide the objects that clients request at run time. 

</P>
<P>There are several advantages of running your component under MTS, 
including simplified management of components via the Transaction Server 
Explorer, location transparency, thread management, and database connection 
pooling. 

</P>
<A NAME="348"><H2>Roles</H2></A><P>A <I>role</I> is a symbolic name that defines a class of users for a set of 
components. Roles are applied at the package, component, or interface level. They are 
defined within the Transaction Server Explorer and are similar to Windows 
NT groups. After creating a role, you typically assign Windows NT users 
and/or groups to that particular role. This tells MTS which users have authorization 
to access methods within components in packages.

</P>
<P>MTS offers two types of security: programmatic security and 
declarative security. Role assignments are a form of declarative security and are 
typically handled by an MTS administrator.

</P>
<A NAME="349"><H2>Interfaces</H2></A><P>An <I>interface</I> is defined as a group of logically related operations or 
methods that provides access to a component. Within the Transaction Server 
Explorer, the Interfaces folder shows the methods and role membership for a component. 

</P>
<A NAME="350"><H2>Methods</H2></A><P><I>Methods</I> are those functions exposed by your components. In the 
Transaction Server Explorer, the Methods folder contains all the methods defined in a 
selected interface. The Methods folder is a useful way of browsing a 
component to see what methods it exposes. 

</P>
</BODY>
</HTML>




