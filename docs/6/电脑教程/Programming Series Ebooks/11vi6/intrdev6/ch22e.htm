<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Database Security</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch22d.htm", "ch23a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="407"><H1>Database Security</H1></A>
<P>Web applications that provide access to data in a database typically have 
additional security requirements. Visual InterDev and Active Server Pages 
(ASP) provide certain features by default, as well as other options to enhance 
secure access to your application.

</P>
<P>Visual InterDev uses two different types of database logins: 
design-time (that is, how Visual InterDev itself logs into the database) and run-time 
(how users log from the browser to the Microsoft ActiveX Data Objects [ADO] model).

</P>
<P>You can set run-time logins to a default by using the Data 
Connection Properties sheet (on the Authentication tab). You can access the Data 
Connection Properties sheet by expanding the global.asa node within the 
Project Explorer, right-clicking the appropriate data connection, and then 
choosing Properties from the context menu. This login information, including the 
password, is cached as text in global.asa. If you use this option, database logins 
are protected from those browsing the site, but other site authors can see 
global.asa. This is fine for most situations because only authors can see the password, 
but some authors might not want any information cached in global.asa. 
Instead, they'll want a login screen that forces users to use their own user names 
or passwords for validation.

</P>

<div class="note"><BLOCKQUOTE><P><B>NOTE</B> <HR>
If someone tries to access the global.asa file from their 
Web browser, they will get the following error message:

</P>
<P>HTTP/1.1 Requests for GLOBAL.ASA Not Allowed

</P>
<P>This prevents people from attempting to read any username or 
password information that is stored in a global.asa file.</P></BLOCKQUOTE></DIV>


<P>Database security starts with Web security. Before users can access 
a database over the Web, they must access the page that provides the 
database interface. If the page does not allow the user access, the user cannot get to 
the database.

</P>
<P>The pages stored on a FrontPage Server Extensions site are subject to 
all the security of that site. After following the steps for setting browse 
security, you can extend security by adding a group for database users. A 
convenient and descriptive name for this group is Web Database Users. This group is 
then granted access to the pages that provide access to the database. For 
example, using FrontPage permissions, these pages can all be located in a separate 
site in which only the Web Database Users have browse privileges.

</P>
<P>You can also use NTFS ACLs to restrict access to individual files or 
folders in a site. Using this technique, you must selectively assign permissions 
to all of the ASP files and any other files that provide database access.

</P>
<P>Another approach is to use a custom login page to authenticate users. 
To do this, use the global.asa file and the 
<I>Session_OnStart</I> event to detect the start of a session, and then redirect the user to a login page. The following code 
does this:

</P>
<P><PRE>
&lt;SCRIPT LANGUAGE=VBScript RUNAT=Server&gt;
Sub Session_OnStart
    Response.Redirect &quot;Login.asp&quot;
End Sub
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>The key line in the global.asa file is <I>Response.Redirect &quot;Login.asp&quot;. 
</I>This command redirects the user to the login.asp page for validation. The code 
in login.asp is as follows:

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;

&lt;HTML&gt;

&lt;HEAD&gt;

&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;

&lt;TITLE&gt;VI-Bank - Login&lt;/TITLE&gt;

&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/THEME.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/GRAPH0.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/COLOR0.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/CUSTOM.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;TABLE&gt;
&lt;TR valign=top&gt;
&lt;TD width=125&gt;
&lt;!--#INCLUDE FILE=&quot;menu.htm&quot;--&gt;
&lt;/TD&gt;
&lt;TD&gt;

&lt;H2&gt;&lt;FONT COLOR=&quot;navy&quot;&gt;&lt;I&gt;VI-Bank - Login&lt;/I&gt;&lt;/FONT&gt;&lt;/H2&gt;
&lt;HR style=&quot;COLOR: navy&quot;&gt;
&lt;P&gt;

&lt;FORM METHOD=&quot;POST&quot; ACTION=&quot;ValidateLogin.asp&quot;&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;Username&lt;/TD&gt;
&lt;TD&gt;&lt;INPUT TYPE=&quot;text&quot; SIZE=&quot;20&quot; NAME=&quot;username&quot;&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Password&lt;/TD&gt;
&lt;TD&gt;&lt;INPUT TYPE=&quot;password&quot; SIZE=&quot;20&quot; NAME=&quot;password&quot;&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;P&gt;
&lt;INPUT TYPE=&quot;Submit&quot; VALUE=&quot;Submit&quot; NAME=&quot;Submit&quot;&gt;
&lt;INPUT TYPE=&quot;Reset&quot; VALUE=&quot;Reset&quot; NAME=&quot;Reset&quot;&gt;
&lt;/FORM&gt;

&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>The login page accepts the username and password from the user via 
the appropriate form fields. When the user clicks the Submit button, control is 
transferred to ValidateLogin.asp. This sample code can be found under the 
Chap22 folder on the CD-ROM. The database used to validate the login is the 
VI-Bank Access database found under the VI-Bank folder. Here is the code for the 
ValidateLogin.asp page:

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;

&lt;% Response.Buffer = True %&gt;

&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;

&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;

&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;

&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/THEME.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/GRAPH0.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/COLOR0.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/CUSTOM.CSS&quot; VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;!--METADATA TYPE=&quot;DesignerControl&quot; startspan
&#8230;
&lt;Recordset Design-Time Control&gt;
&#8230;

&lt;!--METADATA TYPE=&quot;DesignerControl&quot; endspan--&gt;

&lt;%

' Get the user-entered username and password

username = Request.Form(&quot;username&quot;)
password = Request.Form(&quot;password&quot;)

' Set the SQL String
sqlstring = &quot;select ssn, userid, password from login where &quot; + _
    &quot;userid = '&quot; + username + &quot;'&quot;
rsLogin.setSQLText(sqlstring)

' Open the recordset
rsLogin.open()

If rsLogin.EOF Then
    Response.Redirect(&quot;invalidusername.asp&quot;)
Else
    If Trim(rsLogin.fields.getValue(&quot;password&quot;)) = Trim(password) Then
        Session(&quot;ssn&quot;) = rsLogin.fields.getValue(&quot;ssn&quot;)
        Response.Redirect(&quot;main.asp&quot;)
    Else
        Response.Redirect(&quot;invalidpassword.asp&quot;)
    End If
End If

' Close the recordset
rsLogin.close()

%&gt;
&lt;/BODY&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;% EndPageProcessing() %&gt;
&lt;/FORM&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>This file tries to validate the username and password. To retrieve the 
user name and password from the login.asp file, use the 
<I>Request </I>object to access the <I>Form</I> collection that contains the variables. The username and password 
are then stored in variables and the Recordset DTC is used to look up the 
username in the Login table in the database. If the user name is found and the 
password matches the password field in the database, the user can access the site via 
the main.asp file. If the user name is not found or the password does not 
match, the user cannot access the site and the appropriate error message Web page 
is displayed to the user. These error-message Web pages are named 
InvalidUsername.asp and InvalidPassword.asp.

</P>
<P>The database used in the previous example consists of one table 
named Login. This table has three text fields: SSN, Userid, and Password. You can 
use a separate database for a table such as Login, or you can add the table to 
an existing database. You can quickly extend this example by adding another 
table or two to build in group functionality. This way you can separate customers 
into different classifications or use the functionality to provide similar access 
to several users.

</P>
<P>After you check the user's name and password, you can set a 
session variable to indicate that user's security level to future pages. In this case, 
you can take the username and set it in a <I>Session 
</I>variable with the same name. Then you can create a simple routine that checks this security level variable and 
either lets the user browse or execute the page, or redirects the user to a 
page indicating that access has been denied. The most effective way to do this is 
to write this routine in an include (.inc) file and simply include it at the top of 
the pages you want to protect.

</P>
<P>You can also set the ADO connection string information (stored in 
the <I>Session </I>object). The passwords and user IDs passed in via the login page 
are then used for those users when they connect to databases using ADO 
throughout the site. This is convenient because the ID and password are stored in 
session variables to begin with. In this way, you can effectively grant different 
database access levels to different users&#8212;introducing another layer of security using 
the DBMS system. However, keep in mind that the more fine-grained the 
control, the more difficult it is to administer the site. In many cases, the best way 
to protect databases is to ensure that the access to database pages is 
appropriately restricted using any of the techniques we described.

</P>
<P>Also, an obvious problem with using a login page is that the user 
name and password are passed as plain text in the HTTP stream. To protect this 
information, use SSL encryption.

</P>

<div class="note"><BLOCKQUOTE><P><B>NOTE</B>
<HR>The example above is just one technique for applying 
database security to your Web application. In general, when adding security to 
your applications, you should aim to minimize the number of areas where 
you need to maintain security information. Often developers tie the 
security back to the Windows NT security model. In other cases, developers tie 
the security back to the underlying database such as Oracle or Microsoft 
SQL Server. In this case, instead of maintaining a custom login table within 
your database, you would have the user enter an Oracle or SQL Server 
username and password. You then attempt to connect the user to the 
database. If the connection succeeds, the user has entered a valid login. 
If the connection fails, the user is not authorized to access your 
application and data.

</P>
<P>Another technique is to always minimize the number of areas where 
you hard-code login information. Areas to watch out for include the 
global.asa file and any File DSNs. If you use a File DSN, you can always edit it 
with a text editor and remove any user name and password information after 
it has been created. That way, if the file is compromised, no user 
access information is given away.
</P></BLOCKQUOTE></DIV>

</BODY>
</HTML>




