<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Scripting Using DTCs and Data-Bound Controls</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13b.htm", "ch14a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="243"><H1>Scripting Using DTCs and Data-Bound Controls</H1></A>
<P>Now that we've seen how to script the Data Environment using 100 
percent manual coding, let's see how to incorporate the Recordset DTC and 
data-bound controls to achieve the same results. We'll look at several examples, 
including simple SQL queries using the Recordset and Grid DTCs. We'll also spend 
time on more advanced examples that use the Recordset, FormManager, and 
several other DTCs together.

</P>
<A NAME="244"><H2>Writing Database Queries</H2></A><P>Besides scripting the <I>DE</I> object, another way to execute a query and 
display the resulting output on screen is to use a Recordset DTC to perform the 
query and to use a Grid DTC to display the output. Figure 13-4 shows the output 
of the AccountCodeGrid.asp file (part of the VI-Bank Web project on the 
CD-ROM). This file performs the same operation as our earlier example&#8212;it queries 
a database table named Account_Code and presents the resulting records in 
an HTML table on screen.

</P>
<P>
<A HREF="javascript:fullSize('f13LH04x.htm')"> <IMG SRC="images/f13LH04.JPG" width=404 height=295 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-4.</B> <I>Output from the AccountCodeGrid.asp page, showing the records in the Account_Code table.</I><!-- /CAPTION -->

</P>
<P>What is the advantage of using the Recordset DTC plus the Grid DTC 
rather than the pure scripting approach? The Grid DTC can give you some 
additional functionality&#8212;it provides navigation buttons for moving through the 
recordset. These buttons can be useful, especially for large recordsets that cannot be 
displayed on a single Web page. You can specify your exact navigation 
requirements for page or row navigation via the Navigation tab on the Grid Properties 
dialog box, as shown in Figure 13-5 below. Here you can 
specify the button captions and the number of records displayed per page. You can 
also specify the color used for the current row.

</P>
<P>
<IMG SRC="images/f13LH05.GIF" width=401 height=434 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 13-5.</B> <I>The Grid Properties dialog box for the Grid DTC allows you to specify various navigation options for your recordset.</I><!-- /CAPTION -->

</P>
<P>Figure 13-6 shows the AccountCodeGrid.asp page. The Recordset 
DTC uses a data command object named AccountCode as the source for its data. 
This is the same data command object that we used for our 
<I>DE</I> script object example earlier in this chapter. This is an example of how data command objects 
can be reused across many pages within your Web applications.

</P>
<P>
<A HREF="javascript:fullSize('f13LH06x.htm')"> <IMG SRC="images/f13LH06.JPG" width=404 height=289 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-6.</B> <I>AccountCodeGrid.asp Web page as it appears within the Visual InterDev IDE.</I><!-- /CAPTION -->

</P>
<P>The Data tab of the Grid Properties dialog box is where you specify the 
fields to be output on your Web page. Figure 13-7 shows the Data tab for the Grid 
DTC on AccountCodeGrid.asp. The two output fields are the account_id and 
account_description columns. The headers for these columns have been named 
Account Code and Account Description. You can see that the Grid DTC is bound to 
the AccountCode data command object.

</P>
<P>
<IMG SRC="images/f13LH07.GIF" width=401 height=434 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 13-7.</B> <I>The Data tab of the Grid Properties dialog box.</I><!-- /CAPTION -->

</P>
<P>As another example of using the Recordset DTC along with a Grid 
DTC, we'll take a look at the balance.asp page in the VI-Bank Web project. This 
page displays a user's bank balance for both checking and saving accounts. What 
is interesting is that the results of the query are displayed via the Grid DTC in 
an HTML table and also via manual scripting for display on the Web page 
outside the Grid DTC's HTML table. The Recordset DTC executes a parameterized 
query as follows:

</P>
<P><PRE>SELECT Customer.first_name, Customer.last_name, 
    Account_Code.Account_Description, Account_Balance.balance,
    Account_Balance.balance - 100 AS Available 
FROM Account_Code 
INNER JOIN Account_Balance ON Account_Code.Account_Id = 
    Account_Balance.account_id 
INNER JOIN Customer ON Account_Balance.ssn = Customer.ssn 
WHERE (Customer.ssn = ?)
</PRE>

</P>
<P>Since the Recordset DTC is expecting a parameter in order to execute 
the query, it is marked to not open the recordset at run time. The following 
code is placed just below the Recordset DTC to set the input parameter and to 
execute the query:

</P>
<P><PRE>&lt;%
rsAccountBalance.setParameter 0, &quot;123456789&quot;
rsAccountBalance.Open()
%&gt;
</PRE>

<DIV class="NOTE"><BLOCKQUOTE>
<b>NOTE</b><HR>You can learn more about the 
<I>setParameter</I> and <I>Open</I> methods for 
<I>Recordset</I> objects in <A HREF="ch14a.htm">Chapter 14</A>.
</BLOCKQUOTE></div>

</P>
<P>The customer's first and last names are displayed via the following 
script code within the balance.asp page:

</P>
<P><PRE>&lt;%
Response.Write &quot;Account Balance for &quot; + _
    rsAccountBalance.fields.getValue(&quot;First_Name&quot;)
Response.Write &quot; &quot; + rsAccountBalance.fields.getValue(&quot;Last_Name&quot;) + _
    &quot;&lt;P&gt;&quot;
%&gt;
</PRE>

</P>
<P>The remaining columns from the query are displayed in the Grid 
DTC. These are the Account_Description and Balance columns from the 
Account_Code and Account_Balance tables. Another column&#8212;Available Balance&#8212;is a 
calculated field from the Balance column. Figure 13-8 shows the output from 
the Balance.asp page. In this example, the page-navigation and row-navigation features 
available within the Grid DTC were turned off since they are not required.

</P>
<P>
<A HREF="javascript:fullSize('f13LH08x.htm')"> <IMG SRC="images/f13LH08.JPG" width=404 height=319 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-8.</B> <I>Output from the Balance.asp Web page created using a Recordset DTC and a Grid DTC.</I><!-- /CAPTION -->

</P>
<A NAME="245"><H2>Using the FormManager DTC</H2></A><P>In the previous section, we saw how to use the Recordset and Grid DTCs 
to display the results of SQL queries to the end user. By using the 
FormManager DTC along with the Recordset and other DTCs, you can provide your users 
with complete control over their data. This DTC provides the ability to insert, 
update, and delete records from the database.

</P>
<P>As an example, we'll again look at some of the code in the VI-Bank 
Web project on the companion CD-ROM. The code we'll look at is the 
Profile.asp page. This page allows a bank customer to update his or her profile 
information, including address, home and work phone numbers, and e-mail 
address. The page uses a Recordset DTC to provide the SQL query, a number of 
Textbox and Button DTCs to display and manipulate the data, and a FormManager 
DTC to coordinate the various modes and actions available on the page.

</P>
<P>This example requires that, given the customer's social security 
number, the Recordset DTC will query the Customer table for a specific customer 
and retrieve all the necessary fields. These include fields for the first name, last 
name, address, city, state, ZIP code, home phone, work phone, and e-mail address 
of the customer. The following code shows the query:

</P>
<P><PRE>SELECT first_name, last_name, address_1, address_2,
    city, state, zip, home_phone, work_phone, e-mail
FROM Customer
WHERE ssn = ?
</PRE>

</P>
<P>The customer should be able to click an Edit button and edit all 
fields except the first name and last name fields. After clicking the Edit button, 
the customer should have access to the Save and Cancel buttons. A Display 
button should also be available to enable viewing of the data in 
display-only mode&#8212;this should be the starting mode for the Web page. Figure 13-9 below shows the profile.asp page within the browser.

</P>
<P>The starting point for this Web page is a data command object 
named <I>Customer</I>. This command object contains the SQL code listed above. The 
next step is to create the profile.asp page. First a Recordset DTC is dragged onto a 
new ASP Web page and associated with the 
<I>Customer</I> data command object. Next the Textbox and Button DTCs are dragged onto the page. Each Textbox DTC is 
associated with one of the fields in the recordset by accessing the Textbox 
Properties page and selecting the appropriate field from the drop-down selection 
list. When you lay out the Textbox fields, use the Design tab within Visual 
InterDev&#8212;it's the most efficient way to control the positioning of the elements on the 
page. An HTML table can be used to align the Textbox fields horizontally.

</P>
<P>
<A HREF="javascript:fullSize('f13LH09x.htm')"> <IMG SRC="images/f13LH09.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-9.</B> <I>The profile.asp page showing the Account Profile page for the VI-Bank sample Internet Banking application.</I><!-- /CAPTION -->

</P>
<P>The buttons required for this page are Display, Edit, Save, and 
Cancel. Finally, a FormManager DTC is used to specify the modes and actions for the 
page. Figure 13-10 shows the profile.asp page in Design view within Visual InterDev.

</P>
<P>
<A HREF="javascript:fullSize('f13LH10x.htm')"> <IMG SRC="images/f13LH10.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-10.</B> <I>The profile.asp page in Design view within Visual InterDev. An HTML table is used to align the text and Textbox DTCs on the page.</I><!-- /CAPTION -->

</P>
<P>The FormManager DTC is given two modes: Edit and Display. In 
Display mode, only the Display and Edit buttons are visible on the page and all the 
fields are grayed out. In Edit mode, the Display, Edit, Save, and Cancel buttons 
are all visible on the page and the fields, with the exception of the first and last 
name fields, are enabled and visible.

</P>
<P>Table 13-1 shows the actions performed for Display mode. Table 13-2 
below shows the actions performed for Edit mode. These 
actions are specified in the Form Mode tab of the FormManager Properties dialog box.

</P>
<P><B>Table 13-1.</B> <I>The actions performed for the Display mode of the profile.asp page.</I>

<Table valign="top" cellpadding="5" width="95%" border="0">
<TR><TH valign="top"><b><I>Object</I></b></tH><TH valign="top"><b><I>Member</I></b></tH><TH valign="top"><b><I>Value</I></b></tH></tr>
<tr><TD valign="top"><I>Displaybtn</I></td><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>Displaybtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Editbtn</I></td><TD valign="top">Disabled</td><TD valign="top">False</td></tr>
<TR><TD valign="top"><I>Editbtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Savebtn</I></td><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>Savebtn</I></td><TD valign="top">Hide</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Cancelbtn</I></td><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>Cancelbtn</I></td><TD valign="top">Hide</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>FirstNametxt,</I></td><TD>&nbsp;</TD><TD>&nbsp;</TD></TR>
<TR><TD valign="top"><I>LastNametxt</I></td><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>FirstNametxt,</I></td><TD>&nbsp;</TD><TD>&nbsp;</TD></TR> 
<TR><TD valign="top"><I>LastNametxt</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Address1txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Address2txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Citytxt, Statetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Ziptxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>HomePhonetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>WorkPhonetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Emailtxt</I></TD><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>Address1txt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>     
<TR><TD valign="top"><I>Address2txt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I> Citytxt, Statetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Ziptxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>HomePhonetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>WorkPhonetxt,</I></TD><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Emailtxt</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>

</table>

</P>
<P><B>Table 13-2.</B> <I>The actions performed for the Edit mode of the Profile.asp page.</I>

<Table valign="top" cellpadding="5" width="95%" border="0">
<TR><TH valign="top"><b><I>Object</I></b></tH><TH valign="top"><b><I>Member</I></b></tH><TH valign="top"><b><I>Value</I></b></tH></tr>
<TR><TD valign="top"><I>Displaybtn</I></td><TD valign="top">Disabled</td><TD valign="top">False</td></tr>
<TR><TD valign="top"><I>Displaybtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Editbtn</I></td><TD valign="top">Disabled</td><TD valign="top">True</td></tr>
<TR><TD valign="top"><I>Editbtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Savebtn</I></td><TD valign="top">Disabled</td><TD valign="top">False</td></tr>
<TR><TD valign="top"><I>Savebtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Cancelbtn</I></td><TD valign="top">Disabled</td><TD valign="top">False</td></tr>
<TR><TD valign="top"><I>Cancelbtn</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>FirstNametxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>LastNametxt</I></td><TD valign="top">Disabled</TD><TD valign="top">True</TD></TR>
<TR><TD valign="top"><I>FirstNametxt,</I></td><TD valign="top">&nbsp;</td><TD valign="top">&nbsp;</td></tr>
<TR><TD valign="top"><I>LastNametxt</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
<TR><TD valign="top"><I>Address1txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>      
<TR><TD valign="top"><I>Address2txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Citytxt, Statetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Ziptxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>HomePhonetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>WorkPhonetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Emailtxt</I></td><TD valign="top">Disabled</td><TD valign="top">False</td></tr>
<TR><TD valign="top"><I>Address1txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>    
<TR><TD valign="top"><I>Address2txt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Citytxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Statetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Ziptxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>HomePhonetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>WorkPhonetxt,</I></td><TD valign="top">&nbsp;</TD><TD valign="top">&nbsp;</TD></TR>
<TR><TD valign="top"><I>Emailtxt</I></td><TD valign="top">Show</td><TD valign="top">()</td></tr>
</table>



</P>
<P>Now that the status of the buttons and Textbox DTCs on the page 
have been defined for both the Display and Edit modes, the final step is to 
specify the actions to take when each of the buttons are clicked. To do this, enter 
data into the Action tab of the FormManager Properties dialog box. Table 13-3 
summarizes the actions to take for each button's 
<I>onclick</I> event.

</P>
<P><B>Table 13-3.</B> <I>The actions performed for the </I>onclick<I> events for the four buttons on the profile.asp page.</I>

<Table valign="top" cellpadding="5" width="95%" border="0">
<TR><TH valign="top"><b><i>Current Mode</i></b></tH><TH valign="top"><b><i>Object</i></b></tH><TH valign="top"><b><i>Event</i></b></tH><TH valign="top"><b><i>Next Mode</i></b></tH><TH valign="top"><b><i>Action</i></b></tH></tr>
<TR><TD valign="top">Display</td><TD valign="top"><I>Editbtn</I></td><TD valign="top"><I>Onclick</I></td><TD valign="top">Edit</td><TD valign="top">N/A</td></tr>
<TR><TD valign="top">Edit</td><TD valign="top"><I>Displaybtn</I></td><TD valign="top"><I>Onclick</I></td><TD valign="top">Display</td><TD valign="top">N/A</td></tr>
<TR><TD valign="top">Edit</td><TD valign="top"><I>Savebtn</I></td><TD valign="top"><I>Onclick</I></td><TD valign="top">Edit</td><TD valign="top">rsProfile.updateRecord()</td></tr>
<TR><TD valign="top">Edit</td><TD valign="top"><I>Cancelbtn</I></td><TD valign="top"><I>Onclick</I></td><TD valign="top">Edit</td><TD valign="top">rsProfile.cancelUpdate()</td></tr>
</TABLE>


</P>
<P>Figure 13-11 shows the profile.asp page in Edit mode. Compare this 
figure with Figure 13-9, which shows the same page in Display mode. One way 
to improve the experience of this Web page for the end user is to change 
the scripting platform from the server to the client. This way, the buttons 
react immediately to being clicked, as opposed to having to perform a round-trip 
(to the server and back) to perform the required action. Changing the 
scripting platform can be accomplished easily: simply access the Properties dialog 
box for the ASP page and change the DTC Scripting Platform radio button 
from Server (ASP) to Client (IE 4.0 DHTML). One drawback to this is that the 
recordset can be moved to the client side for processing only if your end users are 
running Microsoft Internet Explorer 4.0 or later. If you do not know or 
cannot enforce the browser types of your end users, you are probably better off 
keeping the scripting platform on the server side for breadth of deployment.

</P>
<P>
<A HREF="javascript:fullSize('f13LH11x.htm')"> <IMG SRC="images/f13LH11.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 13-11.</B> <I>The profile.asp page showing the Account Profile page for the VI-Bank sample Internet Banking application. The page is shown in Edit mode.</I><!-- /CAPTION -->

</P>
<P>What if you do decide to make the change to the client-side 
scripting platform? After you have applied the change to your Web page, all the 
DTCs will inherit the change and will run under the client-scripting platform. Be 
sure to move any manual code that you have added for the Recordset DTC&#8212;or 
for any of the Textbox DTCs&#8212;from the server side to the client side. These 
objects no longer exist on the server, so you can script them using only 
client-side Microsoft JScript or Microsoft VBScript (Visual Basic, Scripting Edition).

</P>
<P>Another advantage of moving the scripting platform from the server 
side to the client side is that you can perform validation of user-entered data 
more easily on the client. In the next chapter, we'll see how this can be 
accomplished via <I>Recordset</I> events.
</P>
</BODY>
</HTML>




