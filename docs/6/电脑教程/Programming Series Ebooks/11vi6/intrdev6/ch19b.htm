<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Transactions</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19a.htm", "ch19c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="344"><H1>Transactions</H1></A>
<P>Those of you familiar with client/server applications should be accustomed 
to dealing with transactions. A transaction can be defined as a logical unit of 
work. It is performed as an atomic operation in that it either succeeds or fails as 
a whole. A simple example is that of transferring money from a savings 
account to a checking account. The transaction includes both the withdrawal of 
money from savings and the addition of the same amount of money into the 
checking account. If one of these steps fails, the transaction fails. Likewise, if the 
transaction fails, any step that had succeeded must be rolled back.

</P>
<P>MTS simplifies the task of developing application components by 
allowing you to perform work with transactions. This protects applications 
from anomalies caused by concurrent updates or system failures.

</P>
<P>Transactions maintain what are known as the 
<I>ACID</I> properties, as follows:

</P>
<UL>
<P><LI><I>Atomicity</I> ensures that all the updates completed under a 
specific transaction are either committed and made durable, or aborted 
and rolled back to their previous state.
</LI>
</P>
<P><LI><I>Consistency</I> means that a transaction is a correct transformation 
of the system state, preserving the state invariants.
</LI>
</P>
<P><LI><I>Isolation</I> protects concurrent transactions from seeing each 
other's partial and uncommitted results, which might create 
inconsistencies in the application state. Resource managers use 
transaction-based synchronization protocols to isolate the uncommitted work of 
active transactions.
</LI>
</P>
<P><LI><I>Durability</I> means that committed updates to managed 
resources&#8212;such as a database record&#8212;survive failures, including 
communication failures, process failures, and server system failures. 
Transactional logging even allows you to recover the durable state after disk 
media failures. 
</LI></P>
</UL>




<P>The intermediate states of a transaction are not visible outside the 
transaction, and either all the work happens or none of it does. This allows you 
to develop application components as if each transaction executes sequentially 
and without regard to concurrency. This simplifies the lives of application 
developers: they can develop code without having to worry about multiple users 
executing the same code. They can simply write the code as if it's intended for 
a single user. 

</P>
</BODY>
</HTML>




