<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Data-Binding Architecture</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16a.htm", "ch16c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="288"><H1>Data-Binding Architecture</H1></A>
<P>There are four fundamental components to the Dynamic HTML data-binding architecture:

</P>
<UL>
<P><LI>Data source objects
</LI>
</P>
<P><LI>Data consumers
</LI>
</P>
<P><LI>Data binding agent
</LI>
</P>
<P><LI>Table repetition agent
</LI></P>
</UL>




<P>Data source objects (DSOs) provide the data to the page, data 
consumers display the data on the page, and the data binding and table repetition 
agents ensure that the DSOs and the data consumers are synchronized. Figure 
16-1 shows the data-binding architecture. 

</P>
<P>Notice in Figure 16-1 that all four of these components must be 
present within the HTML page in Internet Explorer 4.0. Even the DSO is an object 
that needs to be placed on the page, usually as a Microsoft ActiveX control or 
Java applet.

</P>
<P>
<A HREF="javascript:fullSize('f16lh01x.htm')"> <IMG SRC="images/f16lh01.jpg" width=404 height=216 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 16-1. </B> <I>Data-binding architecture.</I><!-- /CAPTION -->


</P>
<A NAME="289"><H2>Data Source Objects</H2></A><P>Data source objects are those entities that expose data from some server in 
a regular row-by-column orientation. Internet Explorer 4.0 ships with a 
number of DSOs, including the following:

</P>
<UL>
<P><LI>Tabular Data Control (TDC)
</LI>
</P>
<P><LI>Remote Data Service (formerly ADC)
</LI>
</P>
<P><LI>JDBC applet
</LI>
</P>
<P><LI>XML data source object
</LI>
</P>
<P><LI>MSHTML data source object
</LI></P>
</UL>




<P>DSOs have several key responsibilities:

</P>
<UL>
<P><LI>Defining how the data is specified 
</LI>
</P>
<P><LI>Transporting the data to the page 
</LI>
</P>
<P><LI>Possibly manipulating the data 
</LI>
</P>
<P><LI>Possibly relaying changes back to the server 
</LI></P>
</UL>




<P>Data can be transported to the page using any protocol desired by the 
DSO developer. Additionally, the data can be transferred either synchronously 
or asynchronously. Asynchronous transmission is the recommended method 
since this way the end user doesn't have to wait for data as it arrives on the page.

</P>
<P>Depending on the provider and the nature of the data, updating the 
data might not be necessary. Many data providers support read-only data to the 
page. Note that the transport and manipulation of the data is at the provider's 
discretion. The only &quot;real&quot; requirement is that the provider exposes the data 
through one of two APIs:

</P>
<UL>
<P><LI>OLE DB 
</LI>
</P>
<P><LI>OLE DB Simple Provider (OSP)
</LI></P>
</UL>




<P>Following these minimal requirements allows Internet Explorer 4.0 
to manage the binding of your source to the bindable data elements on a page.

</P>
<P>We'll now look at three sample DSOs: the Tabular Data Control, 
the Remote Data Service, and the XML data source object.

</P>
<A NAME="290"><H3>The Tabular Data Control </H3></A><P>The Tabular Data Control (TDC) is an ActiveX control provided with 
Internet Explorer 4.0 that takes its data from an input file. This file is normally a 
comma-delimited text file with carriage returns at the end of each record. However, 
if necessary you can instruct the TDC to parse on different delimiter 
characters of your choice. Note that the default format (commas and carriage returns) 
is the most common export option on most popular database tools. You 
can specify the TDC object within your HTML page, as in the following example:
</P>
<P><PRE>
&lt;OBJECT id=TDC classid=&quot;clsid:333C7BC4-460F-11D0-BC04-0080C7055A83&quot;
    height=0 width=0&gt;
    &lt;PARAM NAME=&quot;DataURL&quot; VALUE=&quot;customers.csv &quot;&gt;
    &lt;PARAM NAME=&quot;UseHeader&quot; VALUE=&quot;True&quot;&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P>You can tell the TDC that the first record in the file is information 
about the rest of the records, or metadata. This is achieved by setting the 
<I>UseHeader</I> property to True in the &lt;PARAM&gt; tag. You can include field names and 
data type information in this first record. The delimiters used by the rest of the 
field separate each field description, but if there is both a field name and data 
type information, they are separated by a colon.

</P>
<P>Having your data come from text files might not seem very 
interesting, but it's not as limiting as you might first suspect. You can bind the TDC to 
an ASP file, for example, and have the server dynamically generate the data for 
you. The minimum requirement is to have the ASP file return text appropriate 
for the client object by specifying the text/plain mime type as in the 
following example:
</P>
<P><PRE>
&lt;%@ Language=&quot;JScript&quot;%&gt;
&lt;%
Response.ContentType = &quot;text/plain&quot;;
Response.Write(&quot;Example,Location,Type\n&quot;);
Response.Write(
    &quot;Current record example,examples/CurrentRecord.ASP,data\n&quot;);
</PRE>

</P>
<P>In this example, the text to be sent to the client is hardcoded, but we could 
have created an ActiveX Data Objects (ADO) recordset, retrieved data into the 
recordset, and then written out the recordset rows and columns instead.

</P>
<P>The object model for the TDC includes several file properties for 
describing the location of the data file and its format, plus properties for filtering and 
sorting the data. A <I>reset</I> method is used to apply the new filter or the new sort 
order so that it refreshes the HTML elements on the page. Table 16-1 shows the 
properties and methods for the TDC control.

</P>
<P><B>Table 16-1.</B> <I>Properties and methods for the Tabular Data Control.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Property/Method Name</I></B></TH>
<TH VALIGN="TOP"><B><I>Type</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP"><I>CharSet</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Identifies the character set used by the data file. The default character set is latin1.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>DataURL</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Specifies the location of the data file as a URL.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>EscapeChar</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Identifies the character to be used as an escape character in the data              file. There is no default escape character.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>FieldDelim</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP"> Identifies the character that is used to mark the end of a field in the data file. The default character is the comma (,).</TD>
</TR>
 
<TR>
<TD VALIGN="TOP"><I>Language</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Specifies the language used to generate the data file. (This specifier 
uses the HTML standard code based on ISO 369.) The default specifier is eng-us.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>TextQualifier</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Specifies the optional character that surrounds a field.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>RowDelim</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Identifies the character used to mark the end of each row of data. The default character is the newline (NL) character. </TD>
</TR>
          
<TR>
<TD VALIGN="TOP"><I>UseHeader</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Specifies whether the first line of the data file contains header 
information. The default value is FALSE.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Sort</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP"> Sorts the data. Specified using a semicolon-delimited list of column names. Prefix with a plus (+) symbol for ascending order or a minus (-) symbol for descending order.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Filter</I></TD>
<TD VALIGN="TOP">Property</TD>
<TD VALIGN="TOP">Filters the data.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>Reset</I></TD>
<TD VALIGN="TOP">Method</TD>
<TD VALIGN="TOP">Sorts and/or filters the data and refreshes the contents of the HTML  
elements bound to the data supplied by the TDC.</TD>
</TR>
</TABLE>
  

</P>
<P>         

</P>
<P>You can find the source code for the TDC on the Internet Client SDK. 
There is also plenty of reference information and sample code on the Microsoft 
Web site. The section &quot;<A HREF="ch16c.htm#298">Using the Tabular Data Control</A>&quot; later in this chapter also 
gives some examples of how to use this control within your applications.

</P>
<A NAME="291"><H3>Remote Data Service </H3></A><P>Remote Data Service (RDS&#8212;formerly known as ADC) is a bit more robust 
and complex than the TDC. RDS provides bindable recordsets to the client 
much as the TDC does but relies on a connection to some &quot;real&quot; back-end 
database and permits updates as well.

</P>
<P>RDS is a data-marshaling technology. The client-side component, 
called the <I>RDS.DataControl</I> object, interacts with a server-side component to 
move the records from server to client and back. Nominally, the server-side 
component is called the <I>RDS.DataFactory</I> object, but you can replace this object 
with one (or more) of your own creation.

</P>
<P>The <I>RDS.DataControl </I>object is the client-side component responsible 
for interacting with the Web page. Under most circumstances, you simply 
create the object on the page with an &lt;OBJECT&gt; tag and allow it to manage all 
the interactions with the server:
</P>
<P><PRE>
&lt;OBJECT id=rowData 
    classid=&quot;clsid:BD96C556-65A3-11D0-983A-00C04FC29E33&quot;&gt;
    &lt;PARAM name=&quot;Server&quot; value=&quot;http://www.myserver.com&quot;&gt;
    &lt;PARAM name=&quot;Connect&quot; value=&quot;DSN=mydsn&quot;&gt;
    &lt;PARAM name=&quot;SQL&quot; value=&quot;select * from products&quot;&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P>Of course, you can specify these values at run time, too. Once you've 
made changes that you want to keep, you call the <I>RDS.DataControl</I> object's 
<I>SubmitChanges</I> method and only the modified records are returned to the server.

</P>
<P>The <I>RDS.DataFactory</I> object is the default middle-tier component in 
RDS. It's the workhorse of the relationship, responsible for interacting with the 
client-side <I>RDS.DataControl</I> object, retrieving data from the ODBC data-
base, and updating that database with the modified records returned by 
the <I>RDS.DataControl</I> object. However, the 
<I>RDS.DataFactory</I> object is relatively simple. It cannot reconcile update conflicts, for example, or negotiate with the data server in any but the simplest way. If it is unsuitable for your needs, you can replace it with a business server of your own design.

</P>
<P>The <I>RDS.DataControl</I> and <I>RDS.DataFactory</I> objects communicate across one of four protocols:

</P>
<UL>
<P><LI>HTTP
</LI>
</P>
<P><LI>HTTPS
</LI>
</P>
<P><LI>DCOM
</LI>
</P>
<P><LI>In-process COM
</LI></P>
</UL>




<P>You specify which protocol to use with the <I>Server</I> property on the 
<I>RDS.DataControl</I> object. The recordset exchanged between the 
<I>RDS.DataControl</I> object and the <I>RDS.DataFactory</I> object is marshaled (in the case of 
Web servers) into a special MIME format called table datagrams. This marshaling 
is transparent to the applications using the RDS objects.

</P>
<A NAME="292"><H3>XML Data Source object</H3></A><P>The XML data source object allows you to display data from an XML file 
within your Web pages. XML stands for eXtensible Markup Language. One of the 
key features of XML is that is describes the format of data. In fact, it is the 
universal format for data on the Web. Being extensible means that you can create 
whatever tags you want within your XML code&#8212;you are not limited by the 
predefined tags of HTML. Rather than replacing HTML, XML is a 
complementary format that has many areas of application. The following is an example of 
an XML file:
</P>
<P><PRE>
&lt;?XML VERSION=&quot;1.0&quot; RMD=&quot;NONE&quot;?&gt;
&lt;VALUES&gt;
&lt;ITEM&gt;
    &lt;FIRST&gt;1&lt;/FIRST&gt;
    &lt;SECOND&gt;2&lt;/SECOND&gt;
&lt;/ITEM&gt;

&lt;ITEM&gt;
    &lt;FIRST&gt;3&lt;/FIRST&gt;
    &lt;SECOND&gt;4&lt;/SECOND&gt;
&lt;/ITEM&gt;
&lt;/VALUES&gt;
&lt;/XML&gt;
</PRE>

</P>
<P>The XML data source object is particularly useful for displaying 
hierarchical data on your Web pages. The XML data source object is implemented as a 
Java applet and can be obtained from the Microsoft Web site by downloading 
the XML Parser in Java. The class file that implements the XML data source 
object is named XMLDSO.class.

</P>
<P>The Microsoft Web site has plenty of information on XML, including 
information about XML support in Internet Explorer 4.0 and in Internet 
Explorer 5.0 Beta. Later in this chapter, we'll take a look at how to use the XML data 
source object in a sample HTML page.


</P>
<A NAME="293"><H2>Data Consumers</H2></A><P>Data Consumers are elements on an HTML page that render the data 
supplied by the DSO. Elements can be intrinsic HTML elements or custom Java 
applets and ActiveX controls.

</P>
<A NAME="294"><H3>HTML data-binding attributes</H3></A><P>To enable intrinsic HTML elements to render data from a DSO, Microsoft 
has introduced four attributes that make up the entire HTML interface to data 
binding. Table 16-2 lists the four attributes.

</P>
<P><B>Table 16-2.</B> <I>HTML data-binding attributes.</I></P>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Attribute</I></B></TH>
<TH VALIGN="TOP"><B><I>Description</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">DATASRC</TD>
<TD VALIGN="TOP">Specifies which element on the page (by ID) contains the data you want the element bound to.</TD>
</TR>

<TR>
<TD VALIGN="TOP">DATAFLD</TD>
<TD VALIGN="TOP">Specifies which field (by name) in the data you want the element bound to.</TD>
</TR>

<TR>
<TD VALIGN="TOP">DATAFORMATAS</TD>
<TD VALIGN="TOP">Specifies the format you want the data
rendered in. This can be &quot;text&quot; for plain text or 
numeric data or &quot;html&quot; if the data contains HTML 
markup in it. The data will be dynamically parsed 
and rendered on the page for each record displayed.</TD>
</TR>

<TR>
<TD VALIGN="TOP">DATAPAGESIZE</TD>
<TD VALIGN="TOP">For use with tables, specifies how many rows of data to display at once. Two additional methods, <I>nextPage</I> and <I>previousPage</I>, allow you to page through the records at run time.</TD>
</TR>
</TABLE>


<P>
</P>
<A NAME="295"><H3>Data-Consuming HTML elements</H3></A><P>Most elements that we'll look at are bound to the &quot;current row&quot; in the 
data source. Some specialized components, like grids and tables, know how to 
use the entire recordset. Presently, the only &quot;native&quot; HTML element that uses 
the entire recordset is the TABLE element. All the other elements bind to the 
current record only. The data-consuming HTML elements are shown in the 
following list of items.

</P>
<UL>
<P><LI><B>INPUT, TEXTAREA, and LABEL elements</B>  The simplest data-bound elements are the INPUT, TEXTAREA, and LABEL elements. Note that you do not have to code these elements inside a 
FORM to use them. Each element identifies its own DATASRC and 
DATAFLD attributes, which identify the data source and the data field, 
respectively. As the current record changes, the text in these 
elements changes accordingly. The INPUT and TEXTAREA elements can 
update data as well.
</LI>
</P>
<P><LI><B>DIV and SPAN elements</B>  These two elements, while 
read-only, provide novel functionality in that they both support the 
DATAFORMATAS=HTML property assignment, which causes the 
bound text to be parsed and presented as HTML text. This provides 
a mechanism for having parts of the presentation itself stored in 
a database and displayed in multiple contexts.
</LI>
</P>
<P><LI><B>A and IMG Elements</B>  The A and IMG elements are &quot;indirect&quot; 
in that the bound data is a URL. That is, the data is expected to 
point to a valid HREF (in the case of the A element) or a valid image 
file (in the case of the IMG element). If you want to bind the text of 
the A element, you can use a bound SPAN element. Note that the 
IMG element does not support &quot;blob&quot; image data from the database.
</LI>
</P>
<P><LI><B>SELECT and INPUT TYPE=RADIO binding</B>  In the previous elements, the interface of the control changed with each record. In SELECT and INPUT TYPE=RADIO controls, the interface is static 
as you scroll from record to record. What changes is which item in the list is selected for each record. Each OPTION element within a SELECT or each INPUT TYPE=RADIO sharing a NAME attribute 
has a VALUE attribute which corresponds to legal values in the data. If a given record has no corresponding VALUE in an element, no element is shown as selected.
</LI>
</P>
<P><LI><B>TABLE binding</B>  We can bind the TABLE element to a 
recordset and get a complete picture of the contents of that recordset. We 
have a lot of control over how that table displays the data. Basically, 
you define your header and a &quot;template&quot; row that describes the way 
you want the data represented. When Internet Explorer 4.0 displays this table, it repeats the template row for each record in the recordset.
</LI></P>
</UL>




<P>You don't have to stop at a single template row. Internet Explorer 4.0 
will repeat everything in the TBODY (explicitly or implicitly defined) for each 
record. When a recordset has lots of rows, it is sometimes appropriate to show the 
data in chunks rather than having one long scrolling view. You can specify the 
size of the chunk to display with the DATAPAGESIZE attribute on the TABLE 
element.
</P>
<P>In addition to the HTML elements listed above, there are many more 
that can be bound to a recordset. Table 16-3 lists the complete set of bindable 
elements, describes whether they are updatable and whether they can 
render HTML, and gives a description of the bound property of the element.

</P>
<P><B>Table 16-3.</B> <I>Bindable HTML elements.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Element</I></B></TH>
<TH VALIGN="TOP"><B><I>Updatable</I></B></TH>
<TH VALIGN="TOP"><B><I>Renders HTML</I></B></TH>
<TH VALIGN="TOP"><B><I>Bound Property</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">A</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">href</TD>
</TR>

<TR>
<TD VALIGN="TOP">APPLET</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">property value via PARAM</TD>
</TR>

<TR>
<TD VALIGN="TOP">BUTTON</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">innerText, innerHTML</TD>
</TR>

<TR>
<TD VALIGN="TOP">DIV</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">innerText, innerHTML</TD>
</TR>

<TR>
<TD VALIGN="TOP">FRAME</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">src</TD>
</TR>

<TR>
<TD VALIGN="TOP">IFRAME</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">src</TD>
</TR>

<TR>
<TD VALIGN="TOP">IMG</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">src</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=CHECKBOX </TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">checked</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=CHECKBOX</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">checked</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=HIDDEN</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">value</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=LABEL</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">value</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=PASSWORD</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>             
<TD VALIGN="TOP">value</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=RADIO</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">checked</TD>
</TR>

<TR>
<TD VALIGN="TOP">INPUT TYPE=TEXT</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">value</TD>
</TR>

<TR>
<TD VALIGN="TOP">LABEL</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">innerText, innerHTML</TD>
</TR>

<TR>
<TD VALIGN="TOP">MARQUEE</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">innerText, innerHTML</TD>
</TR>
     
<TR>
<TD VALIGN="TOP">SELECT</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">obj.options(obj.selected-Index).text</TD>
</TR>

<TR>
<TD VALIGN="TOP">SPAN</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">innerText, innerHTML</TD>
</TR>

<TR>
<TD VALIGN="TOP">TEXTAREA</TD>
<TD VALIGN="TOP">True</TD>
<TD VALIGN="TOP">False</TD>
<TD VALIGN="TOP">value</TD>
</TR>
</TABLE>


</P>
<A NAME="296"><H2>Binding Agent</H2></A><P>The part of the DHTML data-binding architecture that glues the HTML 
elements to the data sources is the binding agent in Internet Explorer 4.0. It is 
implemented by mshtml.dll, which is the HTML viewer for Internet Explorer. 
The binding agent is responsible for managing the relationship between the 
DSOs and data consumers to ensure that they are always synchronized.

</P>
<P>The binding agent actually fires scriptable events that the Web author 
can take advantage of. These signal various changes in the state of the data 
between the DSOs and their data consumers.


</P>
<A NAME="297"><H2>Table Repetition Agent</H2></A>

<P>The table repetition agent works with data consumers that present tabular 
data such as the HTML TABLE element. It ensures that the entire data set is 
repeated properly by the data consumer. For individual elements, it relies on the 
data binding agent to ensure synchronization.

</P>
</BODY>
</HTML>





