<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Creating ActiveX Components</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch18a.htm", "ch18c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="336"><H1>Creating ActiveX Components</H1></A>
<P>In this section, we'll create an ActiveX server-side component using Visual 
Basic 6.0 and then create an ASP Web page to call the component. The 
example component that we'll create will be used for the Loan Calculator in our 
VI-Bank sample application. The Loan Calculator calculates the monthly payment on 
a loan given the annual percentage rate, the principal amount of the loan, 
and the term of the loan in number of months.

</P>
<A NAME="337"><H2>Creating an ActiveX Component</H2></A><P>First run Visual Basic 6.0 and choose to create an ActiveX DLL project 
from the New Project dialog box, as shown in Figure 18-1. Next enter the code 
in Figure 18-2 into the class module.

</P>
<P>
<A HREF="javascript:fullSize('f18LH01x.htm')"> <IMG SRC="images/f18LH01.JPG" width=404 height=386 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 18-1.</B> <I>The New Project dialog box within Visual Basic 6.0 showing 
an ActiveX DLL project.</I><!-- /CAPTION -->
</P>
<P>
</P>
<P><B>Figure 18-2.</B> <I>The financial.cls class module within the VI-Bank.vbp project. 
The Payment method determines the monthly payment on a loan.</I>

</P>
<P><PRE>' Filename: Financial.cls (VI-Bank.vbp)
'
' Description: Financial Class
'
' This file is provided as part of the &quot;Programming Visual
' InterDev 6.0&quot; CD-ROM
'
' THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT
' WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
' PURPOSE.
'
' Copyright (C) 1998 Microsoft Corporation, All rights reserved

Option Explicit

Private Const APP_ERROR = -2147467008

Public Function Payment(ByVal NumMonths As Integer, _
    APR As Double, Principal As Double)

    Dim strResult As String
    
    On Error GoTo ErrorHandler
        
    ' Check for zeros
    If NumMonths = 0 Then
        Err.Raise Number:=APP_ERROR, Description:= _
            &quot;Please enter a non-zero value for the number of months&quot;
    End If
    If APR = 0 Then
        Err.Raise Number:=APP_ERROR, Description:= _
            &quot;Please enter a non-zero value for the APR.&quot;
    End If
    If Principal = 0 Then
        Err.Raise Number:=APP_ERROR, Description:= _
            &quot;Please enter a non-zero value for principal.&quot;
    End If
    
    ' Convert APR from a percentage to a decimal
    APR = APR / 100#
    
    ' Convert APR to a monthly percentage rate
    APR = APR / 12#

    ' Check that we don't divide by zero
    If (((1 + APR) ^ NumMonths) - 1) = 0 Then
        Err.Raise Number:=APP_ERROR, Description:= _
            &quot;Division by zero. Please retry with different inputs.&quot;
    Else
        Payment = Principal * (APR * ((1 + APR) ^ NumMonths)) / _
            (((1 + APR) ^ NumMonths) - 1)
    End If
    
Exit Function

ErrorHandler:
    
    Payment = -1 ' indicate that an error occurred
    
    Err.Raise Err.Number, &quot;VIBank.Financial.Payment&quot;, _
        Err.Description
    
End Function
</PRE>

</P>
<P>Alternatively, you can access the code for this example on the 
CD-ROM under the VI-Bank/VB98 folder in a Visual Basic 6.0 project named 
VI-Bank.vbp. After opening this project file and selecting the Financial class module, 
you should see a screen similar to that shown in Figure 18-3.

</P>
<P>
<A HREF="javascript:fullSize('f18LH03x.htm')"> <IMG SRC="images/f18LH03.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 18-3.</B> <I>The Visual Basic 6.0 development environment showing 
the financial.cls class module within the VI-Bank.vbp project.</I><!-- /CAPTION -->

</P>
<P>The code in the financial.cls class module shown in Figure 18-2 
defines a function called <I>Payment</I>. 
<I>Payment</I> is a simple function that takes three 
parameters as input (the principal, the APR, and the term of the loan) and 
calculates the monthly payment on the loan. This is a simple example that could 
easily be extended by adding more functions into the same class module. By 
doing this, you would have a powerful financial component with a variety of 
functions that can be reused across multiple applications.

</P>
<P>If you are creating your own Visual Basic 6.0 ActiveX DLL project, 
you'll also want to go into the Project Properties dialog box (by choosing 
Properties from the Project menu) and mark the project for Unattended Execution, 
as shown in Figure 18-4. In the case of our example project, this setting is 
already stored in the project file on the CD-ROM. To compile an ActiveX DLL for 
your project, simply choose Make from the File menu.

</P>
<P>
<IMG SRC="images/f18LH04x.gif" width=418 height=377 border=0>
</P>
<P>
<!-- CAPTION --><B>Figure 18-4.</B> <I>The Project Properties dialog box within Visual Basic 6.0 
showing the Unattended Execution check box.</I><!-- /CAPTION -->

</P>
<P>After compiling the project to make an ActiveX DLL (vibank.dll), 
you'll want to stage it on your Web server. If you are simply developing on a 
single machine and your copy of Visual Basic is on the same machine as your 
Web server, you won't need to stage the component&#8212;having compiled the 
component inside Visual Basic will have already registered the component on 
your machine for you. If you want to stage the component on another machine, 
see the &quot;<A HREF="ch18c.htm#339">Deploying ActiveX Components</A>&quot; section later in this chapter.

</P>
<A NAME="338"><H2>Calling the ActiveX Component from ASP</H2></A><P>To call an ActiveX component from an ASP Web page, simply use 
the <I>Server.CreateObject</I> syntax to instantiate the object and then reference its 
methods. Here is an example:

</P>
<P><PRE>
&lt;%
Dim oFinancial
Set oFinancial = Server.CreateObject(&quot;VIBank.Financial&quot;)
MonthlyPayment = oFinancial.Payment(36, 7.5, 10000)
Response.Write &quot;Monthly Payment is '&quot; + _
    FormatCurrency(MonthlyPayment) + &quot;'.&lt;p&gt;&quot;
%&gt;
</PRE>

</P>
<P>This code instantiates the <I>Financial</I> object of the VIBank component and 
then executes the <I>Payment</I> method. The resulting value from the method is 
stored in the <I>MonthlyPayment</I> variable. Finally, the value of the 
<I>MonthlyPayment</I> variable is converted to currency format using the 
<I>FormatCurrency</I> function and is then output to the browser using the 
<I>Response.Write</I> syntax.

</P>
<P>Instead of using <I>Server.CreateObject</I>, you can also use an &lt;OBJECT&gt; 
tag in which you specify the attribute RUNAT=SERVER. Creating an &lt;OBJECT&gt; 
tag allows you to reference the object in any server script on the page and 
adds the object and its members to the Microsoft IntelliSense statement 
completion drop-down list. For example, the following creates an object reference to 
the <I>Financial</I> object:

</P>
<P><PRE>
&lt;OBJECT RUNAT=&quot;Server&quot; ID=oFinancial
    PROGID=&quot;VIBank.Financial&quot;&gt;
&lt;/OBJECT&gt;
</PRE>

</P>
<P>In your script, you can reference this object by using the name you 
assigned in the ID attribute. The following statement uses the object defined in 
the &lt;OBJECT&gt; block:

</P>
<P><PRE>
MonthlyPayment = oFinancial.Payment(36, 7.5, 10000)
</PRE>

</P>
<P>Figure 18-5 shows the IntelliSense statement completion drop-down 
list for the <I>Payment</I> method.

</P>
<P>
<A HREF="javascript:fullSize('f18LH05x.htm')"> <IMG SRC="images/f18LH05.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 18-5.</B> <I>The Visual InterDev 6.0 IDE showing an ASP Web page 
with IntelliSense statement completion for the 
</I>Payment<I> method of the </I>Financial<I> object.</I><!-- /CAPTION -->

</P>
<P>To continue our ActiveX component example, we'll look at the entire 
ASP Web page that calls the <I>Payment</I> method. The ASP Web page presents the 
user with a form for entering three values for principal, annual percentage rate, 
and number of months for a loan. It is also a self-posting ASP Web page so that 
when the user clicks the Calculate button, the page is reloaded, the monthly loan 
payment amount is calculated (by calling the component), and the results are 
presented to the user on the same page. The code in Figure 18-6 shows the 
relevant page, named loan.asp, which is in the VI-Bank/VIntDev98 folder on the 
CD-ROM.

</P>
<P><B>Figure 18-6.</B> <I>The loan.asp page, which calls the 
</I>Payment<I> method of the </I>Financial<I> object. The page is a self-posting ASP 
Web page that both captures input values and displays results.</I>

</P>
<P><PRE>
&lt;html&gt;
&lt;head&gt;
&lt;meta NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;title&gt;VI-Bank - Loan Calculator&lt;/title&gt;

&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/THEME.CSS&quot; 
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/GRAPH0.CSS&quot; 
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/COLOR0.CSS&quot; 
    VI6.0THEME=&quot;Blueprint&quot;&gt;
&lt;LINK REL=&quot;stylesheet&quot; TYPE=&quot;text/css&quot; 
    HREF=&quot;_Themes/blueprnt/CUSTOM.CSS&quot; 
    VI6.0THEME=&quot;Blueprint&quot;&gt;&lt;/head&gt;
&lt;body&gt;

&lt;table&gt;
&lt;tr valign=top&gt;
&lt;td width=125&gt;
&lt;!--#INCLUDE FILE=&quot;menu.htm&quot;--&gt;
&lt;/td&gt;
&lt;td&gt;

&lt;h2&gt;&lt;FONT COLOR=&quot;navy&quot;&gt;
    &lt;I&gt;VI-Bank - Loan Calculator&lt;/I&gt;
&lt;/FONT&gt;&lt;/h2&gt;
&lt;hr color=navy&gt;
&lt;p&gt;
&lt;form METHOD=&quot;post&quot; ACTION=&quot;loan.asp&quot;&gt;

&lt;table border=&quot;1&quot; cellPadding=&quot;3&quot; cellSpacing=&quot;1&quot; width=&quot;350&quot;&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;Number of Months:&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;
    &lt;input id=&quot;NumMonths&quot; name=&quot;NumMonths&quot; size=&quot;15&quot;&gt;
&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;Annual Percentage Rate (APR):
&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;
    &lt;input id=&quot;APR&quot; name=&quot;APR&quot; size=&quot;15&quot;&gt;
&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;Principal:&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&gt;&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;
    &lt;input id=&quot;Principal&quot; name=&quot;Principal&quot; size=&quot;15&quot;&gt;
&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;P&gt;

&lt;table width=&quot;350&quot;&gt;
&lt;tr&gt;&lt;td&gt;
&lt;div align=&quot;center&quot;&gt;&lt;input id=&quot;submit&quot; name=&quot;submit&quot; 
    type=&quot;submit&quot; value=&quot;Calculate&quot;&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;/form&gt;
&lt;hr&gt;

&lt;% 
RequestMethod = Request.ServerVariables(&quot;REQUEST_METHOD&quot;)
If RequestMethod = &quot;POST&quot; THEN
%&gt;

&lt;OBJECT id=oFinancial RUNAT=server PROGID=VIBank.Financial&gt;
&lt;/OBJECT&gt;

&lt;%
MonthlyPayment = oFinancial.Payment(CInt(Request.Form(&quot;NumMonths&quot;)),
    CDbl(Request.Form(&quot;APR&quot;)), CDbl(Request.Form(&quot;Principal&quot;))) 
%&gt;
&lt;p&gt;

&lt;table BORDER=&quot;1&quot; width=&quot;350&quot;&gt;
&lt;tr&gt;&lt;td&gt;
&lt;font face =&quot;&quot; size=&quot;2&quot;&gt;
On a loan for &lt;%=FormatCurrency(Request.Form(&quot;Principal&quot;))%&gt;
, at &lt;%=Request.Form(&quot;APR&quot;)%&gt;
%, for &lt;%=Request.Form(&quot;NumMonths&quot;)%&gt; months... 
&lt;/font&gt;
&lt;p&gt;

&lt;i&gt;Your monthly payment would be &lt;b&gt;
&lt;%=FormatCurrency(MonthlyPayment)%&gt;&lt;/b&gt;&lt;/i&gt;
&lt;/p&gt;&lt;/FONT&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;
&lt;hr&gt;
    &lt;% End If %&gt;

&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;/body&gt;
&lt;/html&gt;
</PRE>

</P>
<P>Figure 18-7 shows the loan.asp page when it is first loaded into 
the browser. The REQUEST_METHOD HTTP environment variable is used to 
determine whether the page has been submitted. The value of this variable is 
stored in the <I>RequestMethod</I> variable. At this stage, the form has not been posted, 
so the ASP and HTML code enclosed within the 
<I>If</I> statement is not executed.

</P>
<P>
<A HREF="javascript:fullSize('f18LH07x.htm')"> <IMG SRC="images/f18LH07.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 18-7.</B> <I>The loan.asp page shown within the browser prior to the 
Calculate button being clicked.</I><!-- /CAPTION -->

</P>
<P>After the Calculate button has been clicked, the page calls itself and 
the <I>RequestMethod</I> variable evaluates to POST. Now the 
<I>Financial</I> object is instantiated, its 
<I>Payment</I> method is passed the values collected in the HTML 
form, and the results are output to the screen. Figure 18-8 shows the resulting 
output. Notice that HTML tables have been used to format the elements on the 
page and a theme has been applied to the page to give it more visual appeal. 
More important, notice that the values collected on the HTML form have been 
converted to the appropriate data types prior to being passed to the 
<I>Payment</I> method. The <I>Payment</I> method takes the 
<I>NumMonths</I> variable as an Integer and the 
<I>APR</I> and <I>Principal</I> variables as Doubles. The Microsoft VBScript (Visual 
Basic, Scripting Edition) functions <I>CInt</I> and 
<I>CDbl</I> have been used to perform this data type conversion. The 
<I>FormatCurrency</I> VBScript function has been 
used to present the resulting output from the 
<I>Payment</I> method to the user.

</P>
<P>
<A HREF="javascript:fullSize('f18LH08x.htm')"> <IMG SRC="images/f18LH08.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 18-8.</B> <I>The loan.asp page shown within the browser after the 
Calculate button has been clicked.</I><!-- /CAPTION -->

</P>
<P>As you can see from the code in Figure 18-6, the amount of code 
necessary to instantiate a server-side component and execute its methods is just 
a couple of lines. Most of the code in the listing is used to collect the input 
values from the end user and to format the results. Additional code could be 
added to this example to provide more robust error handling. Specifically, 
client-side scripting could be used to ensure that the input values are of the correct 
data type and range.

</P>
</BODY>
</HTML>





