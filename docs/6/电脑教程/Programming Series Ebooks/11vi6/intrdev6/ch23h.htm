<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Writing ASP Code to Access Certificate Server Functionality</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch23g.htm", "ch23i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="419"><H1>Writing ASP Code to Access Certificate Server Functionality</H1></A>
<P>In addition to writing ASP code to read client certificates, you can also 
write ASP code to interface with Certificate Server itself. As we saw in the 
earlier section on Certificate Server architecture, the product exposes several 
COM interfaces for external applications to take advantage of. In this way, you 
can create specialized applications that truly extend Certificate Server and 
integrate your own business rules regarding the issuance, renewal, and revocation 
of digital certificates. By customizing Certificate Server in this way, you can 
also reduce the amount of manual administration that is required to run your 
Certificate Authority services.

</P>
<P>In Table 23-1 in &quot;<A HREF="ch23d.htm#412">Installing Certificate Server</A>,&quot; we saw some of the interfaces that 
Certificate Server exposes. To be able to call them from within our ASP code, we need 
to determine the program IDs (PROGIDs) for these components. Table 23-4 
lists the PROGIDs for each of these interfaces.

</P>
<P><B>Table 23-4.</B> <I>The PROGIDs for each of the interfaces exported or imported by 
the Certificate Server server engine. These PROGIDs can be used to communicate 
with Certificate Server via ASP Web pages.</I>

</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">

<TR>
<TH VALIGN="top"><B><I>Interface</I></B></TH>
<TH VALIGN="top"><B><I>PROGID</I></B></TH>
</TR>

<TR>
<TD VALIGN="top"><I>ICertAdmin</I></TD>
<TD VALIGN="top">CertificateAuthority.Admin</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertConfig</I></TD>
<TD VALIGN="top">CertificateAuthority.Config</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertGetConfig</I></TD>
<TD VALIGN="top">CertificateAuthority.GetConfig</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertPolicy</I></TD>
<TD VALIGN="top">CertificateAuthority.Policy</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertRequest</I></TD>
<TD VALIGN="top">CertificateAuthority.Request</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertServerExit</I></TD>
<TD VALIGN="top">CertificateAuthority.ServerExit</TD>
</TR>

<TR>
<TD VALIGN="top"><I>ICertServerPolicy</I></TD>
<TD VALIGN="top">CertificateAuthority.ServerPolicy</TD>
</TR>
</TABLE>

</P>
<P>
<div class="note"><BLOCKQUOTE><B>NOTE</B>
<HR>
One trick for finding the appropriate PROGIDs for any 
server-side components that you have installed on your machine is to use the 
Microsoft Transaction Server Explorer within the Microsoft Management 
Console. You can create a dummy package and then choose the option to add 
components that are already registered into the package. By doing this, 
you'll see a list of COM components that are registered on your system. 
When you have found the PROGIDs that you're looking for, simply choose 
to cancel the operation.</BLOCKQUOTE></DIV>

</P>
<A NAME="420"><H2>Determining Certificate Disposition</H2></A><P>The code below shows how to use the CertificateAuthority.Admin and 
CertificateAuthority.Config components to determine the current disposition of a 
client certificate. Both of these components are instantiated by using the now 
familiar &lt;OBJECT&gt; tag with the appropriate PROGID. The code is taken from 
the Disposition.asp page included in the Certificate Web project on the CD-ROM.

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;H2&gt;Client Certificate (Disposition) Sample&lt;/H2&gt;
&lt;HR&gt;

&lt;OBJECT RUNAT=server PROGID=CertificateAuthority.Admin 
    id=objAdmin&gt;
&lt;/OBJECT&gt;
&lt;OBJECT RUNAT=server PROGID=CertificateAuthority.Config 
    id=objConfig&gt;
&lt;/OBJECT&gt;

&lt;%
If Len(Request.ClientCertificate(&quot;Subject&quot;)) = 0 Then
    Response.Write _
        &quot;This sample page requires a client certificate.&quot;
Else
    strSerialNumber = _
        Request.ClientCertificate(&quot;SerialNumber&quot;)
    strConfig = objConfig.GetConfig(0)
    disposition = _
        objAdmin.IsValidCertificate(strConfig, strSerialNumber)

    Select Case disposition
        Case 1
            strDisp = &quot;Call did not complete&quot;
        Case 2
            strDisp = &quot;Call failed&quot;
        Case 3
            strDisp = &quot;Certificate revoked&quot;
        Case 4
            strDisp = &quot;Certificate still valid&quot;
        Case 5
            strDisp = &quot;Certificate never issued&quot;
        Case 6
            strDisp = &quot;Taken under submission&quot;
    End Select

    Response.Write &quot;Configuration: &quot; + strConfig + &quot;&lt;P&gt;&quot;
    Response.Write &quot;SerialNumber: &quot; + strSerialNumber + &quot;&lt;P&gt;&quot;
    Response.Write &quot;Certificate disposition is &lt;B&gt;&quot; + _
        strDisp + &quot;&lt;/B&gt;&quot;
End If
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>The page reads the client certificate presented by the browser 
and determines its <I>SerialNumber</I> key value by using the 
<I>Request.ClientCertificate(&quot;SerialNumber&quot;)</I> 
syntax. Next the <I>GetConfig</I> method of the Certificate-Authority.Config 
component is used to get the default configuration string for 
the certificate server. This configuration string uniquely identifies the 
certificate server by including the machine name and the name of the root CA. Next 
the <I>IsValidCertificate</I> method of the CertificateAuthority.Admin component is 
used to determine the disposition of the certificate. There are six disposition types, 
as shown in the code above. When calling the 
<I>IsValidCertificate</I> method, the serial number of the certificate and the configuration string for the certificate server 
are passed as arguments. Figure 23-12 shows an example of the resulting output 
from the Disposition.asp page.

</P>
<P>
<A HREF="javascript:fullSize('f23LH12x.htm')"> <IMG SRC="images/f23LH12.JPG" width=404 height=277 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 23-12.</B> <I>Output from the Disposition.asp page showing the 
configuration string for the Certificate Server, the serial number of the presented 
client certificate, and the Certificate's disposition.</I><!-- /CAPTION -->

</P>
<A NAME="421"><H2>Revoking a Certificate</H2></A><P>When a certificate is revoked, a user can no longer use his or her certificate 
to access your application. Revoking a certificate is useful, and often highly 
necessary, in cases where employees leave a company or when you need to 
quickly deny access to your application.

</P>
<P>Certificates are most commonly revoked using the Certificate Server 
Log Administration page. This page is accessible by clicking the Certificate 
Administration Log Utility hyperlink on the main administration page of 
Certificate Server. The list view of this page can be found at 
<I>http://localhost/certsrv/wcalist.asp</I>. To revoke a certificate, you'll need to switch over to the form view 
by choosing a certificate to revoke. Figure 23-13 shows the Certificate Form 
Viewer with the Revoke button displayed at the bottom of the page.

</P>
<P>
<A HREF="javascript:fullSize('f23LH13x.htm')"> <IMG SRC="images/f23LH13.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 23-13.</B> <I>The Certificate Form Viewer showing the details of a 
client certificate and the Revoke button for revoking the certificate.</I><!-- /CAPTION -->

</P>
<P>
In your applications, you might want to automate features such as 
certificate revocation. You can do this from within your ASP code. For example, 
say you want to automatically revoke a certificate if your business partner 
becomes more than sixty days overdue in your accounts receivable database. To 
programmatically revoke a certificate, you can use the CertificateAuthority.Admin 
component, as shown in the code below.

</P>
<P><PRE>
&lt;OBJECT RUNAT=server PROGID=CertificateAuthority.Admin 
    id=objAdmin&gt;
&lt;/OBJECT&gt;
&lt;%
objAdmin.RevokeCertificate strConfig, strSerialNumber, 0, 0
%&gt;
</PRE>

</P>
<P>To revoke a certificate, call the 
<I>RevokeCertificate</I> method of the 
CertificateAuthority.Admin component and pass it four parameters: 

</P>
<UL>
<P><LI>The configuration string for the Certificate Server

</LI>
</P>
<P><LI>The serial number of the certificate that you want to revoke

</LI>
</P>
<P><LI>The revocation reason (0 means an unspecified reason)

</LI>
</P>
<P><LI>The date at which the revocation becomes effective (0 means 
the current GMT time)
</LI></P>
</UL>




</BODY>
</HTML>




