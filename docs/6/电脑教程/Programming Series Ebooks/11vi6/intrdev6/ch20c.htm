<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Deploying Transactional Components</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch20b.htm", "ch20d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="364"><H1>Deploying Transactional Components</H1></A>
<P>There are two methods of deploying transactional components: you can 
either deploy them using the Transaction Server Explorer or you can deploy them 
in a more automated fashion using Microsoft Visual InterDev 6.0. As we 
learned in <A HREF="ch18a.htm">Chapter 18</A>, remote deployment for middle-tier COM server components 
is one of the exciting new features in Visual InterDev 6.0.

</P>
<P>In this section, you'll learn how to perform both of these procedures. 
It's important to understand both techniques. Since Visual InterDev 6.0 allows 
you to remotely deploy these components from your workstation, you might 
want to modify some of the properties of your packages and components. These 
types of configuration operations can be performed only by using the 
Transaction Server Explorer. 

</P>
<A NAME="365"><H2>Using the Transaction Server Explorer</H2></A><P>Using the Transaction Server Explorer to deploy a transactional 
component requires that you first create a package and then install the component into 
that package. You'll also need to configure various properties of the package 
and its components.

</P>
<P>First access the Transaction Server Explorer by choosing 
Start|Programs|Windows NT 4.0 Option Pack|Microsoft Transaction 
Server|Transaction Server Explorer or by choosing Start|Programs|Windows NT 4.0 
Option Pack|Microsoft Internet Information Server|Internet Service Manager. Both 
of these options will launch the Microsoft Management Console. The 
following steps illustrate how to create a package:

</P>
<OL>
<P><LI>Open the folder named Computers.
</LI>
</P>
<P><LI>Open the icon named My Computer.
</LI>
</P>
<P><LI>Right-click the Packages Installed folder, and select New|Package from the context menu.
</LI>
</P>
<P><LI>In the Package Wizard, click the Create An Empty Package button. (See Figure 20-6.)
</LI>
</P>
<P><LI>Enter a name for the new package.
</LI>
</P>
<P><LI>Click Next.
</LI>
</P>
<P><LI>On the Set Package Identity step, select Interactive User.
</LI>
</P>
<P><LI>Click Finish.
</LI>
</P>
</OL>




<P>You should now see an icon representing your new package under 
the Packages Installed folder.

</P>
<P>
<A HREF="javascript:fullSize('f20lh06x.htm')"> <IMG SRC="images/f20lh06.jpg" width=404 height=374 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-6.</B> <I>The Package Wizard allows you either to create an empty package or to install prebuilt packages.</I><!-- /CAPTION -->

</P>
<P>If you want to adjust any of the properties of your package, simply 
right-click the package and choose Properties to bring up the Properties dialog 
box. This dialog box has five tab folders for configuring the general, security, 
advanced, identity, and activation properties. 

</P>
<P>On the General tab, you can change the name of the package and add 
a description. On the Security tab, you can enable authorization checking 
and specify the authentication level for calls. The Advanced tab allows you to 
specify how the server process should be shut down. You can either keep the 
process running when idle or have the process shut down after a certain number 
of minutes of inactivity. 

</P>
<P><div class="note"><blockquote>
<B>NOTE</B><HR>When developing and testing your components, it's worth 
setting the value on the Advanced tab to 1 minute so that the process is shut 
down quickly after execution. This will enable you to compile other versions 
of the component and stage them within MTS without having to wait as 
long for the process to shut down. 
</blockquote></div>

</P>
<P>The Identity tab is used to specify which account the process will 
run under. This can either be the currently logged on user or another 
Microsoft Windows NT user account that you specify. Finally, the Activation tab 
allows you to choose the activation type for your package. This can either be a 
library package or a server package. Server packages are recommended because 
they allow the component to be activated in a dedicated server process.

</P>
<P>Now that you have created your package, you can install your 
component. The following steps illustrate how to achieve this:

</P>
<OL>
<P><LI>Start the Transaction Server Explorer.
</LI>
</P>
<P><LI>Open the icon representing your new package.
</LI>
</P>
<P><LI>Right-click the folder labeled Components in the left-hand pane, and select New Component from the context menu.
</LI>
</P>
<P><LI>In the Component Wizard, click the Install New Component button.
</LI>
</P>
<P><LI>In the Install Components dialog box, click Add Files.
</LI>
</P>
<P><LI>Use the Select Files To Install dialog box to navigate to the folder holding your ActiveX DLL. Select the DLL and click Open. You can continue adding components to the package if you wish.
</LI>
</P>
<P><LI>In the Install Components dialog box, click Finish. One or more icons, representing each of the various classes within your component, will appear beneath the folder labeled Components.
</LI>
</P>
</OL>




<P>After installing the component, you'll need to configure the properties 
of the component. The following steps show how to achieve this:

</P>
<OL>
<P><LI>Right-click the icon representing your new component, and select Properties from the context menu to display the Properties dialog box, shown in Figure 20-7 below.
</LI>
</P>
<P><LI>Select the Transaction tab of the Properties dialog box, as shown in Figure 20-8. 
</LI>
</P>
<P><LI>Select Requires A Transaction, and click OK.
</LI>
</P>
<P><LI>Right-click the folder labeled Roles underneath your package in the left-hand pane, and select New|Role from the context menu.
</LI>
</P>
<P><LI>In the New Role dialog box, type in the word <I>Administrator</I>.
</LI>
</P>
<P><LI>Open the Roles folder to display the icon representing your new role.
</LI>
</P>
<P><LI>Open the Administrator role icon to display the folder labeled Users. 
</LI>
</P>
<P><LI>Right-click the Users folder, and select New|User from the context menu.
</LI>
</P>
<P><LI>Use the Add Users And Groups To Role dialog box to assign permissions. For testing purposes, you can simply select the group named Everyone from the list.
</LI>
</P>
<P><LI>Click Add, and then click OK. An icon representing the group will appear beneath the Users folder.
</LI>
</P>
</OL>




<P>
<IMG SRC="images/f20lh07.gif" width=404 height=448 border="0">

</P>
<P>
<!-- CAPTION --><B>Figure 20-7.</B> <I>The General tab of the Properties dialog box for a component within the Transaction Server Explorer. </I><!-- /CAPTION -->

</P>
<P>Your component is now ready for use! Figure 20-7 shows the General 
tab in the Properties dialog box. Here you'll notice the name of the DLL is 
listed as well as the CLSID and the package name. The CLSID is the component's 
class ID. This is the universally unique identifier (UUID) that identifies the 
component. The CLSID is stored in the Windows Registry. Figure 20-8 shows the 
Transaction tab of the Properties dialog box. 

</P>
<P>
<IMG SRC="images/f20lh08.gif" width=404 height=448 border="0">

</P>
<P>
<!-- CAPTION --><B>Figure 20-8.</B> <I>The Transaction tab of the Properties dialog box for a component within the Transaction Server Explorer.</I><!-- /CAPTION -->

</P>
<P>Figure 20-9 shows the Transaction Server Explorer after we have created a package named MTS Example, installed components named mtsexample.ASP and mtsexample.transaction (both part of the 
mtsexample.dll ActiveX component that we created earlier), and added an Administrator 
role and associated users to the package.

</P>
<P>
<A HREF="javascript:fullSize('f20lh09x.htm')"> <IMG SRC="images/f20lh09.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-9.</B> <I>The Transaction Server Explorer showing the components and roles that have been set up for the MTS Example package.</I><!-- /CAPTION -->

</P>
<A NAME="366"><H2>Using Visual InterDev 6.0</H2></A><P>Now that we've seen how to deploy a component using the Transaction 
Server Explorer, let's take a look at the equivalent operation within Visual InterDev 
6.0. The first step is to add your component to a Web project. The following 
steps show how to achieve this:

</P>
<OL>
<P><LI>Open up your Web project.
</LI>
</P>
<P><LI>Create a folder named Components under your Web project. (This step is not required but is good practice so that your middle-tier components are kept separate from your HTML and ASP code.)
</LI>
</P>
<P><LI>Prepare to add the component to the Components folder by right-clicking the folder and choosing Add|Add Item from the context menu.
</LI>
</P>
<P><LI>In the Add Item dialog box, choose the Existing tab.
</LI>
</P>
<P><LI>Locate your ActiveX DLL file, and choose Open.
</LI>
</P>
</OL>




<P>Your component will now be added to your Web project.

</P>
<P>Now that the component has been added to your Web project, you 
are ready to install it in Microsoft Transaction Server. You can do 
so by following these steps:

</P>
<OL>
<P><LI>Right-click the component, and choose Properties from the drop-down menu.
</LI>
</P>
<P><LI>Choose the Component Installation tab of the Properties dialog box.
</LI>
</P>
<P><LI>Check the Register On Server and Add To Microsoft Transaction Server Package check boxes, as shown in Figure 20-10.
</LI>
</P>
<P><LI>In the Package Name text box, enter the name of the package to add the component to.
</LI>
</P>
<P><LI>Select the transaction support option appropriate for your component, and choose OK.
</LI>
</P>
</OL>




<P>
<IMG SRC="images/f20lh10.gif" width=401 height=338 border="0">

</P>
<P>
<!-- CAPTION --><B>Figure 20-10.</B> <I>The Component Installation tab of the component Properties dialog box within Visual InterDev 6.0.</I><!-- /CAPTION -->

</P>
<P>When you enter a package name, you can either enter the name of 
an existing package within MTS or you can specify a new package and have 
Visual InterDev request MTS to create it for you. You'll remember from the 
discussion of transactional ASP in <A HREF="ch19a.htm">Chapter 19</A> that there are four available options 
for specifying transaction support. Table 20-1 summarizes these options.

</P>
<P><B>Table 20-1.</B> <I>Transaction support options available on the Component Installation tab of the component Properties dialog box within Visual InterDev 6.0.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Option</I></B></TH>
<TH VALIGN="TOP"><B><I>Action</I></B></TH>
</TR>

<TR>
<TD VALIGN="TOP">Requires A Transaction</TD>
<TD VALIGN="TOP">Set the component's objects to execute within the scope of a transaction regardless of whether the client has a transaction.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Requires A New Transaction</TD>
<TD VALIGN="TOP">Create a new transaction for the component's objects to execute within regardless of whether the client has a transaction.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Supports Transactions</TD>
<TD VALIGN="TOP">Set the component's objects to execute within the scope of the client's transaction.</TD>
</TR>

<TR>
<TD VALIGN="TOP">Does Not Support Transactions</TD>
<TD VALIGN="TOP">Set the component's objects to run without a transaction regardless of whether the client has a transaction.</TD>
</TR>
</TABLE>

</P>
<P>After you select OK, the component will be registered on the server 
and will be added into MTS under the appropriate package with the 
appropriate transaction support option that you specified. You'll be able to see the 
sequence of events by watching the status bar in the lower left-hand corner of the screen.

</P>
</BODY>
</HTML>




