<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Debugging Strategies</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03a.htm", "ch03c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="66"><H1>Debugging Strategies</H1></A>
<P>Debugging Visual InterDev applications is a difficult task for a system to 
handle. When an ASP application is set for debugging, Internet Information Server 
(IIS) makes the application an out-of-process application, which means that 
the application runs in a separate memory space. This results in the 
application running much slower than when the application runs in the IIS process. For 
this reason, you do not want to turn on debugging for a production application, 
at least not for long.

</P>
<P>Each breakpoint in a page stops and starts the Web server. This also 
impacts the performance of all other applications running on the site and their 
state management. Turning on buffering in IIS 4 for applications that are 
being debugged will speed up those applications.

</P>
<P>To properly debug an application, you should have a local Web server 
on the system on which you are running Visual InterDev or you should use 
a dedicated development server. You can remotely debug an application, but 
only one developer can be remotely debugging an application on an IIS system 
at a time. This means that your development team can actively have only 
one debug session per development server.

</P>
<P>Using a local Web server for debugging alleviates this problem. In that 
case, you can develop, test, debug, and then deploy the application to the 
development server when you are ready. This will make the process much easier 
to manage and much more productive.


</P>
<P><div class="note"><blockquote>
<B>NOTE</B><HR>
Microsoft highly recommends that you do not use the Active 
Desktop mode of Internet Explorer 4 when you are debugging.
</blockquote></div>

</P>
<A NAME="67"><H2>Setting up an Application for Debugging</H2></A><P>You must perform several steps before beginning to debug an application. 
First set the start page for the application. In Project Explorer, right-click the 
page you want to start with, and then select Set As Start Page from the context menu.

</P>
<P>Before you can debug an application, you must also enable 
debugging for the application. You can change this setting in Visual InterDev 6 or in IIS 
4. To change the Visual InterDev debug settings for a Web project, use the 
project's Properties dialog box, as shown in Figure 3-2.

</P>
<P>
<IMG SRC="images/f03lh02.GIF" width=401 height=356 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 3-2.</B> <I>A project's Properties dialog box, showing the debugging option.</I><!-- /CAPTION -->

</P>
<P>First display the project's Properties dialog box by right-clicking the project 
in Project Explorer and then selecting Properties from the context menu. On 
the Launch tab, check the option Automatically Enable ASP Server-side 
Script Debugging On Launch box under Server Script to enable debugging.

</P>
<P>When you enable debugging in Visual InterDev, Visual InterDev lets 
you debug each time you launch a page within the particular project. This does 
not affect other applications or other developers. Each time you start the 
application in debug mode, Visual InterDev will perform the following tasks:

</P>
<UL>
<P><LI>Set the IIS application to run in its own memory space (that is, 
out of process).

</LI>
</P>
<P><LI>Enable the IIS application's debugging options.

</LI>
</P>
<P><LI>Set up a Microsoft Transaction Server (MTS) package to allow 
you to attach the debugger to the Web application. The package's 
identification is set when you first start the debugging session by 
asking you to provide your name and password. 
</LI></P>
</UL>

<P>You can also enable debugging by using the Internet Server 
Manager subcomponent of IIS. Figure 3-3 shows these debug settings.

</P>
<P>
<IMG SRC="images/f03lh03x.gif" width=406 height=448 border=0> 
</P>
<P>
<!-- CAPTION --><B>Figure 3-3.</B> <I>You can also use the IIS Internet Service Manager to enable debugging.</I><!-- /CAPTION -->

</P>
<P>To display the debug options, select the site in the Internet Service 
Manager and display its properties. Click the Configuration button, and then click the 
App Debugging tab. Next check either the Enable ASP Server-side Script 
Debugging option or the Enable ASP Client-side Script Debugging option. Click OK or 
Apply to update the settings.

</P>
<P>Setting the debug properties with the Internet Service Manager 
enables this setting for all users of this application. Also, keep in mind that the 
application will run much slower with these settings turned on.

</P>
<P>If you enabled the debug options with Visual InterDev, the first time 
you launch the application in the debugger after having changed the 
debugging properties, you might be prompted for a Microsoft Windows NT account 
and password that has authority to enable debugging on the server.

</P>
<A NAME="68"><H2>Debugging ASP Script</H2></A><P>Visual InterDev provides tools you can use to debug either client or server 
code, but each requires a slightly different approach. Let's take a look at 
debugging server code. 

</P>
<P>To debug server script from within a Visual InterDev solution:

</P>
<OL>
<P><LI> Open the project containing the server script you want to debug.

</LI>
</P>
<P><LI> Set the startup page for the application by right-clicking the page 
you want to run first and choosing Set As Start Page from the context menu.

</LI>
</P>
<P><LI> Set a breakpoint in the server script you want to debug.

</LI>
</P>
<P><LI> Choose Start on the Debug menu to launch the project.
</LI>
</P>
</OL>




<P>Visual InterDev now attaches the debugger to the document running on 
the server. In Internet Explorer, navigate to the .asp file that contains the script 
you want to debug. When server script execution reaches the line with the 
breakpoint, the debugger will display the page in the Visual InterDev editor. 
The current line will be highlighted when the application stops in the editor. 

</P>
<P>If the .asp file you are debugging is part of your project and you have 
a working copy, you can fix any errors, save the file, and then click Restart 
on the Debug menu to restart the debug process.

</P>
<P>If debugging is enabled for an application and the server encounters a 
syntax error or a run-time error in server script, it displays an error message in the 
requesting browser. Responding Yes to this message will start the debug 
process. Visual InterDev is launched, and the debugger attaches itself to the script 
with the error and displays the page in the editor. If the page is part of a project 
in Visual InterDev, open the project and the page, fix any errors, save the file, 
and then deploy it to the server. Then refresh the page in Internet Explorer.

</P>
<P>If server debugging is not enabled for the application, errors are 
displayed in the browser as text in the page and you must manually start the debug 
process in Visual InterDev.

</P>
<A NAME="69"><H3>Debugging Global.asa</H3></A><P>Debugging Global.asa is a bit more problematic than debugging an ASP 
Web page. Global.asa is event-based and cannot be started directly (unlike an 
ASP Web page). The trick is to force a breakpoint in Global.asa's code and 
start another page that will cause the events in Global.asa to fire.

</P>
<P>You can set a breakpoint in Global.asa just as you can in other pages. 
You can also insert statements in your code that will stop the script language. 
Either of the statements in Table 3-2 will stop execution and explicitly start the debugger.

</P>
<P><B>Table 3-2.</B> <I>Debug statements for script languages.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Script Language</I></B></TH>
<TH VALIGN="TOP"><B><I>Stop and Debug Statement</I></B></TH>
</TR>
<TR>
<TD VALIGN="TOP">VBScript</TD>
<TD VALIGN="TOP">Stop</TD>
</TR>
<TR>
<TD VALIGN="TOP">JScript</TD>
<TD VALIGN="TOP">Debugger</TD>
</TR>
</TABLE>


</P>
<A NAME="70"><H2>Stepping Through an Application</H2></A><P>The Visual InterDev debugger lets you step through the code in your 
application line by line, checking variables and testing values as you go. This is 
the process we have used for years in Visual Basic to quickly test applications 
and get them into production.

</P>
<P>The Debug toolbar's Step buttons or the shortcut keys are the easiest 
way to walk through the code when the debugger stops at a breakpoint or 
when you start the application. The commands you use to step through your 
code are described in Table 3-3.

</P>
<P><B>Table 3-3.</B> <I>The debugging step commands.</I>

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Debug Menu Command</I></B></TH>
<TH VALIGN="TOP"><B><I>Button</I></B></TH>
<TH VALIGN="TOP"><B><I>Action</I></B></TH>
</TR>
<TR>
<TD VALIGN="TOP">Step Into (F11)</TD>
<TD VALIGN="TOP">
<IMG SRC="images/G03lh01.GIF" width=48 height=46 BORDER=0>
</TD>
<TD VALIGN="TOP">Moves you to the next script line. If the 
          script calls another procedure, Step Into allows you to step through the 
          lines of the called procedure as well.</TD>
</TR>
<TR>

<TD VALIGN="TOP">Step Over (F10)</TD>
<TD VALIGN="TOP">
<IMG SRC="images/G03lh02.GIF" width=48 height=46 BORDER=0>
</TD>
<TD VALIGN="TOP">Moves you to the next script line. If the script calls another procedure, the procedure is executed but the debugger does not step through the called procedure's individual lines.</TD>
</TR>
<TR>
<TD VALIGN="TOP">Step Out (Shift+F11)</TD>
<TD VALIGN="TOP">
<IMG SRC="images/G03lh03.GIF" width=48 height=46 BORDER=0>
</TD>
<TD VALIGN="TOP">Lets you stop stepping through lines of a procedure before reaching its end.</TD>
</TR>
</TABLE>
    
</P>
<P>The Run To Cursor command (Ctrl+F10) or its toolbar button is also 
useful. When you place the cursor in a page and click Run To Cursor, 
Visual InterDev will execute the code up to that line. Then you can step through it.

</P>
<A NAME="71"><H2>Using Breakpoints</H2></A><P>Developers use breakpoints to stop execution of code at a particular point. 
For instance, if you wish to test a certain line of code, you place a breakpoint 
on that line. Then, when you run the code in the debugger, the application 
stops on the line containing the breakpoint and the debugger goes into &quot;break&quot; 
mode. When the debugger is in break mode, you can inspect variables, execute 
commands, change the next line to execute, and so forth. Most of your 
debugging activities will be done in break mode.

</P>
<P>You can use a breakpoint (or a statement that will stop execution) 
to specify a place in a script at which you want to stop and examine the state 
of a process. You can then step into or step over lines of script individually to 
find errors. Breakpoints show up as red octagons to the left of a line of script, 
as shown in Figure 3-4.

</P>
<P>
<A HREF="javascript:fullSize('f03lh04x.htm')"> <IMG SRC="images/f03lh04.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-4.</B> <I>Breakpoints are indicated by the red octagon in the margin to the left of a line.</I><!-- /CAPTION -->

</P>
<P>It's easy to set a breakpoint:

</P>
<OL>
<P><LI> Open the file you're debugging.

</LI>
</P>
<P><LI> Place the cursor in the line of script in which you want to set 
a breakpoint.

</LI>
</P>
<P><LI> From the Debug menu, choose Insert Breakpoint.
</LI>
</P>
</OL>




<P>You can also set a breakpoint by placing the cursor in a line of script and 
pressing F9 or by clicking in the margin left of the line.

</P>
<P>The Breakpoints window displays a list of the breakpoints in your 
solution, as shown in Figure 3-5. (To open the Breakpoints window, select 
Breakpoints from the Debug menu or press Ctrl+B.) You can use this window 
to review the list of breakpoints, clear all the breakpoints in the solution, 
disable and enable breakpoints, and more.

</P>
<P>
<A HREF="javascript:fullSize('f03lh05x.htm')"> <IMG SRC="images/f03lh05.JPG" width=404 height=311 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-5.</B> <I>The Breakpoints window allows you to configure each breakpoint in a solution and to review all the breakpoints for that solution.</I><!-- /CAPTION -->

</P>
<P>One of the nice features of the debugger is the ability to set 
parameters on a breakpoint. One of the parameters you can set is a condition that 
must be met for that breakpoint to stop the execution of the code. Figure 3-6 shows the properties of a breakpoint with a condition set.

</P>
<P>To set a breakpoint's properties, display the Breakpoints window, 
select the desired breakpoint, and then click Properties. If you are setting a 
condition, you can set it to break when the condition is true by changing the radio 
button to the right of the condition.

</P>
<P>Breakpoint conditions are extremely useful when you are debugging 
an application that can have a wide range of values and you only need to 
test certain values. For instance, you might have a loop in your application 
that iterates 1000 times. Instead of stepping through each of those iterations, 
you can use a condition to trigger the breakpoint to stop on the particular 
iteration you are looking for. You can also use conditions in this manner when you 
are returning large amounts of data from a database and want to check only 
certain conditions.

</P>
<P>The Breakpoints window is also useful for removing breakpoints. 
When you have finished debugging your application and are ready to deploy it, 
you can bring up the Breakpoints window and delete either all or some of 
the breakpoints.

</P>
<P>
<IMG SRC="images/f03lh06x.gif" width=425 height=368 border=0>
</P>
<P>
<!-- CAPTION --><B>Figure 3-6.</B> <I>Breakpoint properties allow you to control how the breakpoint is triggered.</I><!-- /CAPTION -->

</P>
<A NAME="72"><H2>Using the Debug Windows</H2></A><P>The Immediate window is one of the most used debug windows. It is used 
to interact with your running Web application. You can enter commands 
and execute them, display the values of variables, execute functions, and much 
more. The Immediate window is your central point of contact with the application.

</P>
<P>Figure 3-7 shows a simple page that is in break mode. In the 
example shown, the application has a <I>Select 
Case</I> statement based upon the <I>sShowThis</I> variable. One of the tricks to testing a 
<I>Select Case</I> statement is to test it with 
all of its possible values. This process is usually time-consuming as you run 
the application several times and try to force the variables through each 
value change. You might choose to test a <I>Select 
Case</I> statement by programmatically changing the variable, but doing so still takes time.

</P>
<P>The debugger allows us to debug these types of statements 
dynamically. For instance, let's debug our <I>Select 
Case</I> statement in Figure 3-7 by changing all of its options. You can see that 
<I>sShowThis</I> currently has a value of 999 and 
that the cursor is stopped on the <I>Stop</I> statement, thus putting the application 
in break mode. (You can tell which line is the current line because the line will be 
yellow-highlighted and will have a small arrow in the left margin pointing at it.)

</P>
<P>
<A HREF="javascript:fullSize('f03lh07x.htm')"> <IMG SRC="images/f03lh07.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-7.</B> <I>Once the application is in break mode, you can interact with it line by line.</I><!-- /CAPTION -->

</P>
<P>To continue debugging this page, press F11 to step to the next line. 
We will continue stepping through the page by pressing F11 until the cursor 
reaches the <I>End Select</I> statement. At this point, we will have tested the 
<I>Select Case</I> statement for the 999 condition. We still need to test for a value of 1020 
and any values other than 1020 and 999, such as &quot;&quot;. 
To test these other conditions, we need to restart the <I>Select Case</I> statement. To do this, move the cursor 
to the <I>Select Case</I> line and select Set Next 
Statement from the Debug menu (Ctrl+Shift+F10). This will move the pointer to that line, and the line will 
now execute when you press F11 again. So, how do we reset the variable for 
the new condition? Simply enter a variable definition command into the 
Immediate window, as shown in Figure 3-8 below.

</P>
<P>Once you have reset the variable, you can press F11 to step through 
the application again, testing another condition. You can iterate through these 
steps until you have tested every condition of a 

<I>Select Case</I> or similar statement group.

</P>
<P>Other Debug windows can be used with the Immediate window to 
understand what is happening with your application. Figure 3-8 below shows the Immediate and Watch windows. The Locals window is also 
active in Figure 3-8 but is hidden behind the Immediate window. You can 
display hidden windows like this by clicking the tab for the window.

</P>

<P>The Watch window is used to display the results of a Watch 
expression. After a variable or object is placed in the Watch window, the debugger 
will monitor that variable and continually display its value.

</P>
<P>
<A HREF="javascript:fullSize('f03lh08x.htm')"> <IMG SRC="images/f03lh08.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-8.</B> <I>The Immediate window can be used to execute almost any script command.</I><!-- /CAPTION -->

</P>
<P>You can drag and drop variables from the code window to either 
the Immediate window or the Watch window. You can also drag a variable 
from either window to the other. The Watch window allows you to double-click 
a variable and edit its value. This is a great feature for interactively debugging 
your applications.

</P>
<P>The Watch window also allows you to monitor objects. If you place 
an object in the Watch window, you will see a plus (+) sign to the left of the 
object. Click the plus sign, and the object will expand to display its properties and 
other objects it contains. In the Value column, you will see the contents of each 
object's property.

</P>
<P>You can display the Watch window by selecting Debug Windows from 
the View menu and then selecting Watch from the submenu. You can also use 
the Debug Windows menu item to display the other Debug windows, or you 
can use their shortcut keys.

</P>
<A NAME="73"><H2>Connecting to an Executing Application</H2></A><P>The Running Documents window displays the documents that are 
currently executing. Figure 3-9 shows the Running Documents window with 
Page1.asp executing with several pages attached to it. Those attached pages are 
part of the Scripting Library and are providing support for the DTCs used in 
the page. If you aren't attached to any processes, the Running Documents 
window will be empty. To view the Running Documents window, select 
Debug Windows from the View menu, and then select Running Documents from 
the submenu.

</P>
<P>
<A HREF="javascript:fullSize('f03lh09x.htm')"> <IMG SRC="images/f03lh09.JPG" width=404 height=285 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-9.</B> <I>The Running Documents window shows the debuggable documents that are currently running on a system.</I><!-- /CAPTION -->

</P>
<P>You can also enter break mode at run time when the application is 
idle (not processing an event). When you break into a running application, 
execution stops when the next line of code is executed. This allows you to start 
a debug session while the application is currently running. This is handy 
when you are testing and discover an anomaly or just want to observe what is 
currently happening in the application.

</P>
<P>To break into a running application, select Break from the Debug menu.

</P>
<P>You can select the Processes command on the Debug menu to use 
the Processes window to start debugging an active application. Before you can 
use this technique, you must have enabled debugging on the server for your 
site. This is handy when you detect an error while the application is running 
and need to attach the debugger to the application. For this to work, you must 
enable just-in-time debugging:

</P>
<OL>
<P><LI>  Select Options from the Tools menu.

</LI>
</P>
<P><LI>  Select Debugger in the Options dialog box.

</LI>
</P>
<P><LI>  Under the Script section, check Attach To Programs Running On 
This Machine.
</LI>
</P>
</OL>




<P>This allows you to use Visual InterDev to debug any running ASP 
page that is part of a project that has debugging enabled. Now you can use 
the Processes window to attach Visual InterDev to the application.

</P>
<P>To debug a running script:

</P>
<OL>
<P><LI> Select Processes from the Debug menu.

</LI>
</P>
<P><LI> In the Processes window, select Active Server Pages.

</LI>
</P>
<P><LI> Click Attach.

</LI>
</P>
<P><LI> Close the Processes window.

</LI>
</P>
<P><LI> Display the Running Documents window (select Debug 
Windows from the View menu and then select Running Documents from 
the submenu, or press Ctrl+Alt+R).

</LI>
</P>
<P><LI> In the Running Documents window, double-click the script you 
want to debug, and Visual InterDev will open that page in the source 
code editor.

</LI>
</P>
<P><LI> Set breakpoints, and then choose Restart from the Debug menu 
or refresh the document in the browser.
</LI>
</P>
</OL>




<P>Figure 3-10 shows the Processes window after we have attached to 
the Active Server Pages process. Now we can use the Running Documents 
window to obtain a list of the running pages and to open the page in the 
source code editor.

</P>
<P>
<A HREF="javascript:fullSize('f03lh10x.htm')"> <IMG SRC="images/f03lh10.JPG" width=404 height=275 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-10.</B> <I>The Processes window shows both the active processes and the ones that have been attached.</I><!-- /CAPTION -->

</P>
<A NAME="74"><H2>Debugging Client Code</H2></A><P>You can also use Visual InterDev 6 to debug client pages that execute in 
the browser. This process is similar to debugging server-side ASP code:

</P>
<OL>
<P><LI> Open Project Explorer.

</LI>
</P>
<P><LI> Right-click the .htm file you wish to start, and select Set As Start Page.

</LI>
</P>
<P><LI> Click the Start button on the toolbar, or select Start from the Debug menu.
</LI>
</P>
</OL>




<P>The script will execute until Internet Explorer reaches the 
breakpoint. When Internet Explorer reaches the breakpoint, it stops and displays the 
source script in Source view.

</P>
<A NAME="75"><H2>Simultaneously Debugging Server and Client Code </H2></A><P>You can debug both server and client code at the same time, as long as all 
the code is part of one Visual InterDev 6 project. The following is the normal 
process used when working with an ASP application:

</P>
<OL>
<P><LI>Open the project containing the server script you want to debug.

</LI>
</P>
<P><LI>Set the Start page for the application by right-clicking the page 
you wish to run first and choosing Set As Start Page from the 
context menu.

</LI>
</P>
<P><LI>Set breakpoints in the lines of client and server script that you 
want to debug.

</LI>
</P>
<P><LI>Click Start on the toolbar, or choose Start from the Debug menu. 
The server script will execute and stop at the first breakpoint. 
</LI>
</P>
</OL>




<P>Now you can step through the code line by line. The server code 
will execute and be sent to the browser. When the browser encounters a 
breakpoint, it will stop and display the code in Source view.

</P>
<P>Of course, you must be careful when debugging client code. Much of 
the client code that is generated with ASP is dynamic in nature and exists only 
in the HTML stream to the client. In that case, you must look at the code as a 
result set only and try to determine what changes must be made to the ASP code 
to correct any problems.

</P>
<A NAME="76"><H2>Just-in-Time Debugging</H2></A><P>Visual InterDev allows you to launch the debugger in response to an error 
in an application. You can do this only if just-in-time debugging is enabled 
and the application has debugging enabled.

</P>
<P>You enable just-in-time debugging via the Options dialog box:

</P>
<OL>
<P><LI>Select Options from the Tools menu.

</LI>
</P>
<P><LI>In the Options dialog box, choose Debugger.

</LI>
</P>
<P><LI>Under the Script section, check Just-In-Time Debugging. 
</LI>
</P>
</OL>




<P>Now when an error occurs or a Stop or Debugger statement appears, 
a dialog box will ask whether you want to debug the 
application, as shown in Figure 3-11.

</P>
<P>
<IMG SRC="images/f03lh11.GIF" width=327 height=126 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 3-11.</B> <I>This dialog box will appear when a debug statement is encountered or an error occurs.</I><!-- /CAPTION -->

</P>
<P>When you answer Yes to the dialog box shown in Figure 3-11, a 
new instance of Visual InterDev will be launched and you will be prompted to 
open a project. If Visual InterDev is already running, a second instance is 
launched. Open the project containing the file you wish to debug. If the project is 
already open in another instance of Visual InterDev, you cannot open it again and 
must create a new solution and project instead. Once you have the page to 
debug loaded into the editor, you can debug it like any other page.

</P>
<A NAME="77"><H2>Debugging Visual Basic Components</H2></A><P>You can use Visual InterDev to debug your Visual Basic components 
directly from an ASP page. You must take a couple of steps to make this work, but 
the process is pretty simple.

</P>
<P>First, the Visual Basic IDE and debugger work similarly to Visual 
InterDev and its debugger, and the look and feel of each are also similar. 
Consequently, it's easy for developers to use both tools and to work back and forth 
between them. The commands are the same, the windows are the same, and even 
the command keys are almost the same, including our old friend F5 (Run). 
(One exception is the Step Into command, which is F8 in Visual Basic and F11 in 
Visual InterDev.) If you use the toolbars, you'll find they also work the same way.

</P>
<P>To debug a Visual Basic component, you must execute the 
component inside the Visual Basic IDE. This is the same technique you use to debug 
components in Visual Basic 4. To do this, follow these steps:

</P>
<OL>
<P><LI>On the machine where the ASP application is running, load 
the source for the Visual Basic component.

</LI>
</P>
<P><LI>Set breakpoints in the component.

</LI>
</P>
<P><LI>Execute the component. 
</LI>
</P>
</OL>




<P>These steps will execute the component in the Visual Basic IDE. 
Executing a component starts the executable and keeps it active. This lets other 
applications use the component while the component is running in the IDE, 
with all its Visual Basic resources available. Figure 3-12 demonstrates a 
component that is loaded in the Visual Basic IDE and executing. Notice that the IDE is 
in Run mode&#8212;the Visual Basic title bar indicates this with the word Run.

</P>
<P>
<A HREF="javascript:fullSize('f03lh12x.htm')"> <IMG SRC="images/f03lh12.JPG" width=404 height=252 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-12.</B> <I>This component has a breakpoint set and is executing within the Visual Basic IDE.</I><!-- /CAPTION -->

</P>
<P>Now start the debug process with the page that contains the code 
for executing the component. Figure 3-13 below demonstrates 
a page that is using the component executing in Figure 3-12.

</P>
<P>When you debug the page shown in Figure 3-13 and the line 
accessing the component executes&#8212;that is, 
<I>objCustInfo.CheckStatus(1)</I>&#8212;the Visual 
Basic IDE will become the current window and you will be debugging the 
component. Figure 3-14 demonstrates the component during the Visual Basic 
debug process.

</P>
<P>
<A HREF="javascript:fullSize('f03lh13x.htm')"> <IMG SRC="images/f03lh13.JPG" width=404 height=215 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-13.</B> <I>This page is using the component running in the Visual Basic IDE.</I><!-- /CAPTION -->

</P>
<P>
<A HREF="javascript:fullSize('f03lh14x.htm')"> <IMG SRC="images/f03lh14.JPG" width=404 height=252 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 3-14.</B> <I>The Visual Basic debugger can be used to interactively debug the component, complete with the data passed to it from the ASP page.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




