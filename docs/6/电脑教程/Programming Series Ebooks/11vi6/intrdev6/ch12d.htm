<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The Query Designer</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12c.htm", "ch12e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="226"><H1>The Query Designer</H1></A>
<P>The Query Designer allows you to create SQL commands using a visual 
interface and to view and edit the results of your queries. We had an 
introduction to the Query Designer in <A HREF="ch05b.htm">Chapter 5</A>. In this section, we'll look at creating 
insert, update, and delete queries. We'll also examine parameter queries. All 
of these queries can be constructed in the Query Designer and saved in your 
data command objects or Recordset DTCs for use within your Visual InterDev 
applications. To launch the Query Designer from your data command object 
or Recordset DTC, specify SQL Statement as the source of the data and then 
click the SQL Builder button.

</P>
<A NAME="227"><H2>Creating Update Queries</H2></A><P>To create an update query, take the following steps:

</P>
<OL>
<P><LI>  Add the table you want to update to the Diagram pane.
</LI>
</P>
<P><LI>   Click the Change Type button, and select Update from the 
Query toolbar.
</LI>
</P>
<P><LI>   Add the columns you want to update to the Grid pane.
</LI>
</P>
<P><LI>   Add your update values.
</LI>
</P>
<P><LI>  In the Criteria column, set the criteria to use for selecting the 
rows to update.
</LI>
</P>
<P><LI>   Verify the SQL syntax by clicking the Verify SQL Syntax button 
on the Query toolbar.
</LI>
</P>
<P><LI>  Execute or save your query.
</LI>
</P>
</OL>




<P>Figure 12-13 shows the Query Designer with an update query. The 
update statement in the figure changes the account_no field to 123401 for each 
row that is currently set to 123402.
</P>
<P>
<A HREF="javascript:fullSize('f12lh13x.htm')"> <IMG SRC="images/f12lh13.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 12-13.</B> <I>The SQL pane shows the update query that the Query Designer generates from the information in the Grid pane.</I><!-- /CAPTION -->

</P>
<A NAME="228"><H2>Creating Insert Queries</H2></A><P>There are two types of insert queries you can define: insert and insert 
values. The insert query uses a SELECT statement to gather the result set for 
insertion into the table. It can therefore be a multirow insert statement. The 
following code shows a sample insert query:

</P>
<P><PRE>INSERT INTO &quot;Account_Code&quot;
    (Account_Id, Account_Description)
SELECT Account_Id, Account_Description
FROM Account_Code_Tmp
</PRE>

</P>
<P>The insert values query does not use a SELECT statement and 
inserts specific values into a single new record. The following code shows a 
sample insert values query:

</P>
<P><PRE>INSERT INTO Account_Code
    (Account_Id, Account_Description)
VALUES (5, 'Personal Loan')
</PRE>

</P>
<P>To create an insert query, take the following steps:

</P>
<OL>
<P><LI> Add the table you want to insert in the Diagram pane.
</LI>
</P>
<P><LI> Click the Change Type button, and select Insert or Insert Values 
from the Query toolbar.
</LI>
</P>
<P><LI> If you have selected Insert, select the table name from the Insert 
Into Table dialog box and click OK. The table you selected in step 
1 becomes the source table for the insert query.
</LI>
</P>
<P><LI>  Add the columns you want to insert in the Grid pane.
</LI>
</P>
<P><LI>  Add your update values.
</LI>
</P>
<P><LI>  Verify the SQL syntax by using the Verify SQL Syntax button on 
the Query toolbar.
</LI>
</P>
<P><LI>  Execute or save your query.
</LI>
</P>
</OL>




<P>Figure 12-14 shows the Query Designer with an insert values query.
</P>
<P>
<A HREF="javascript:fullSize('f12lh14x.htm')"> <IMG SRC="images/f12lh14.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 12-14.</B> <I>The SQL pane shows the insert values query that the Query Designer generates from the information in the Grid pane.</I><!-- /CAPTION -->

</P>
<A NAME="229"><H2>Creating Delete Queries</H2></A><P>To create a delete query, take the following steps:

</P>
<OL>
<P><LI>   Add the table in which you want to delete records to the 
Diagram pane.
</LI>
</P>
<P><LI>   Click the Change Type button on the Query toolbar, and 
select Delete.
</LI>
</P>
<P><LI>   In the Criteria column, set the criteria to use for selecting the 
rows to delete.
</LI>
</P>
<P><LI>   Verify the SQL syntax by clicking the Verify SQL Syntax button 
on the Query toolbar.
</LI>
</P>
<P><LI>   Execute or save your query.
</LI>
</P>
</OL>




<P>SQL delete queries do not use columns; they use only the name of the 
table to delete the row from, and they use a WHERE clause to determine which 
rows to delete. You can delete the row inserted by the earlier insert values query 
with this statement:

</P>
<P><PRE>DELETE FROM Account_Code
WHERE (Account_Id = 5)
</PRE>

</P>
<P>This delete query deletes all rows in which the Account_Id field is equal to 5.

</P>
<A NAME="230"><H2>Parameterized Queries</H2></A><P>Parameterized queries will be the most typical queries that you create for 
your Web applications. These queries take input from the application during run 
time in the form of a variable or number of variables and build the SQL 
statement from these input parameters. Input parameters are typically used to 
supply values for the WHERE clause of a SELECT, UPDATE, or DELETE statement 
or are used as input parameters for stored procedures.

</P>
<P>To build a parameterized query, you simply use the Query Designer. 
Use a question mark (?) to indicate parameters within your query. Figure 12-15 
shows the Properties dialog box of a data command object named Customer, with 
a parameterized query entered as a SQL statement. 
</P>
<P>
<IMG SRC="images/f12lh15.gif" width=401 height=338 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 12-15.</B> <I>A parameterized query for a data command object named Customer.</I><!-- /CAPTION -->

</P>
<P>Once you have entered the SQL statement with the question mark, you 
can further define the type of parameter you want to supply to the query by 
moving to the Parameters tab of the Properties dialog box, as shown in Figure 12-16. 
</P>
<P>
<IMG SRC="images/f12lh16.gif" width=401 height=338 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 12-16.</B> <I>The Parameters tab of a data command object's Properties dialog box. Here you can further define your parameters.</I><!-- /CAPTION -->

</P>
<P>Within this tab you can define the data types for your parameters and 
specify whether they are input, output, or input/output parameters. For SQL 
statements these parameters can only be input parameters. For stored procedures, 
however, you can choose any of the options. In Figure 12-16, you'll also notice 
that there is a Value textbox. Here you can enter any of the following:

</P>
<UL>
<P><LI><B>     Literals</B>  Character values in single quotes or numeric values 
without quotes.
</LI>
</P>
<P><LI><B>     Variables</B>  Name of a variable defined in server code that 
will contain the value you want to pass.
</LI>
</P>
<P><LI><B>     Object References</B>  An object reference and property value 
such as <I>Textbox1.value</I>. The object must be available in server script. 
Also, note that the expression will be evaluated as a JScript expression.
</LI>
</P>
<P><LI><B>     Expressions</B>  The expression is evaluated as a JScript 
expression and can be any combination of literals, variables, object 
references, and function calls.
</LI></P>
</UL>




<P>If you enter expressions into the Value text box, be sure to use 
correct capitalization&#8212;the expressions are evaluated as JScript expressions and 
are therefore case sensitive. Use a plus sign (+) for concatenation and single 
quotation marks for string literals. You can also leave the Value text box blank 
and supply it later via a <I>Recordset</I> scripting object (that uses the data command 
object as its data source) and the <I>setParameter</I> method.

</P>
<P>In addition to data command objects, you can also create 
parameterized queries within <I>Recordset</I> scripting objects. The Recordset DTC also includes 
a Parameters tab in its Properties dialog box where you can enter a value for 
your parameter. 

</P>
<P><div class="note"><blockquote>
<B>Note</B><HR>To pass parameters into a <I>Recordset</I> scripting object, you want to be sure that the parameter is specified before the underlying recordset opens. You do this either by using the <I>onenter</I> event for the page or the <I>onbeforeopen</I> event for the <I>Recordset</I> scripting object or by marking the recordset not to open automatically and then programmatically 
setting the parameter and opening the recordset. <A HREF="ch14a.htm">Chapter 14</A> goes into more detail on the various <I>Recordset</I> scripting object methods, properties, and events.
</blockquote></div>

</P>
<P>Figure 12-17 shows a parameterized query within the Query 
Designer. Creating these types of queries is easy: simply add a question mark to the 
criteria column in the SQL grid pane for the specific column or columns you want 
to work with. 
</P>
<P>
<A HREF="javascript:fullSize('f12lh17x.htm')"> <IMG SRC="images/f12lh17.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 12-17.</B> <I>A parameterized query within the Query Designer.</I><!-- /CAPTION -->

</P>
<P>When you execute a parameterized query from within the Query 
Designer, you'll see a dialog box like the one shown in Figure 12-18. This dialog box 
asks you to define the query parameters prior to executing the query. After you 
have entered the relevant parameters, the results of the query are displayed as 
usual in the results pane within the Query Designer.
</P>
<P>
<IMG SRC="images/f12lh18.gif" width=296 height=301 border="0">
</P>
<P>
<!-- CAPTION --><B>Figure 12-18.</B> <I>The Define Query Parameters dialog box that appears when you execute a parameterized query from within the Query Designer.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




