<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Calling Stored Procedures from Active Server Pages</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15e.htm", "ch16a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="284"><H1>Calling Stored Procedures from Active Server Pages</H1></A>
<P>You can execute a stored procedure from within your Active Server Pages 
(ASP) code in your Visual InterDev web projects. The two main techniques for 
doing so are as follows:

</P>
<UL>
<P><LI>Via data command objects and scripting the Data Environment
</LI>
</P>
<P><LI>Via <I>Recordset</I> objects and literals, variables, object references, or expressions
</LI></P>
</UL>




<P>We'll now take a look at both of these techniques. The first technique 
gives you more control over the stored procedure call since the code is 
written manually with the exception of the data command object that contains the 
stored procedure. The second technique provides a fast way to call stored 
procedures but is sometimes harder to code for more advanced stored procedures calls 
that involve a lot of input and output parameters and that might or might not 
return a resultset. The authors preference is for the first technique: scripting 
the Data Environment.

</P>
<A NAME="285"><H2>Calling Stored Procedures via Data Command Objects and Data Environment Scripting</H2></A><P>In this section, we'll continue with the example stored procedure 
named <I>spAddCompany</I> and see how to call it from within ASP code. You'll 
remember that this stored procedure takes a number of input parameters and performs 
a SQL INSERT into the Company table. 

</P>
<P>First, we'll create an HTML file named AddCompanyScript.htm. This 
file, and the rest of this example, is included on the CD-ROM under the 
VI6Samples folder. The htm file is used to capture user input for the Company 
information. It consists of a simple HTML form, as shown in Figure 15-11.

</P>
<P>Second, we need to create a data command object that can reference 
the <I>spAddCompany</I> stored procedure. You can create this object as follows:

</P>
<OL>
<P><LI>  In the Project Explorer, right-click the data connection and 
choose Add Data Command.
</LI>
</P>
<P><LI>   Enter <I>AddCo</I> for the Command Name, and set the connection 
to VI6Samplesconn (or whatever connection name you have created).
</LI>
</P>
<P><LI>   For the source of the data, choose Stored Procedure from the 
Database Object drop-down list and then select the 
<I>dbo.spAddCompany</I> stored procedure from the Object Name drop-down list.
</LI>
</P>
</OL>




<P>
<A HREF="javascript:fullSize('f15lh11x.htm')"> <IMG SRC="images/f15lh11.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 15-11. </B> <I>An HTML form for capturing the user input for the </I>spAddCompany<I> stored procedure.</I><!-- /CAPTION -->

</P>
<P>Figure 15-12 shows the Properties dialog box for the data command 
object we have created.

</P>
<P>
<IMG SRC="images/f15lh12.gif" width=401 height=338 border="0">

</P>
<P>
<!-- CAPTION --><B>Figure 15-12. </B> <I>The Properties dialog for the data command object showing stored procedure named </I>spAddCompany<I> as the data source.</I><!-- /CAPTION -->

</P>
<P>Within the Properties dialog box for the data command object that 
we've created, you'll also notice a Parameters tab. Here you can inspect the list 
of parameters that the stored procedure is expecting. Figure 15-13 below shows the Parameters tab. On this tab, you can inspect the 
names of the parameters and their associated direction (that is, input, output, or 
input/output), data type, and size.

</P>
<P>
<IMG SRC="images/f15lh13.gif" width=401 height=338 border="0">

</P>
<P>
<!-- CAPTION --><B>Figure 15-13. </B> <I>The Properties dialog box for the data command object showing the parameters required by the stored procedure.</I><!-- /CAPTION -->

</P>
<P>After having created the HTML file to capture user input and the 
data command object to reference the stored procedure, next you create an ASP 
Web page that can call the data command object and pass it the user-supplied 
input values. The code below does just this. As you can see, there are no visual 
controls on the page at all&#8212;just Data Environment scripting.
</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;%
' Initialize parameters
a = Request.Form(&quot;company_name&quot;)
b = Request.Form(&quot;address1&quot;)
c = Request.Form(&quot;address2&quot;)
d = Request.Form(&quot;city&quot;)
e = Request.Form(&quot;state&quot;)
f = Request.Form(&quot;zip&quot;)
g = Request.Form(&quot;phone&quot;)
h = Request.Form(&quot;fax&quot;)
error_msg = &quot;&quot;

' Call the stored procedure
thisPage.createDE()
rtnVal = DE.AddCo (a, b, c, d, e, f, g, h, error_msg)

' Display the return status
If rtnVal = 0 Then
    Response.Write &quot;Company information sucessfully captured.&quot;
Else
    Response.Write &quot;Error: &quot; + CStr(rtnVal) + &quot;&lt;BR&gt;&quot;
    Response.Write &quot;Description: &quot; + error_msg + &quot;&lt;P&gt;&quot;
    Response.Write &quot;Please try again.&quot;
End If
%&gt;

&lt;/BODY&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;% EndPageProcessing() %&gt;
&lt;/FORM&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>There are basically three steps to follow in the 
AddCompanyScript.asp page. First, the parameters to be passed to the stored procedure are 
collected from the <I>Request</I> object and stored into variables. Second, the stored 
procedure is executed using the following syntax:
</P>
<P><PRE>
thisPage.createDE()
rtnVal = DE.AddCo (a, b, c, d, e, f, g, h, error_msg)
</PRE>

</P>
<P>Finally, the results of the procedure call are displayed on the screen. 
If the return value is 0, the procedure executed successfully and the new 
record was inserted into the Company table. If the return value was -100 or any 
other value other than 0, an error message is printed on the screen. Notice that 
the error_msg variable is an input/output parameter, so it is assigned a new 
value should the stored procedure encounter an error condition.

</P>
<P>As you can see from this example, using scripting in the Data 
Environment makes it easy to work with stored procedures. Only a couple of lines 
of code are needed, and you have access to all the necessary output 
parameters and return values you need to track the completion status of the stored 
procedure execution.

</P>
<A NAME="286"><H2>Calling Stored Procedures Using <I>Recordset</I> Objects</H2></A><P>In this section, we'll use the example stored procedure named 
<I>spCompanybyCity</I> and see how to call it from ASP code using a 
<I>Recordset</I> object. You'll remember that this stored procedure takes a single input parameter (the name of a city) and performs a SQL SELECT statement against the Company<I> </I>table.

</P>
<P>First create an ASP file named CompanybyCity.asp. This file is included on the CD-ROM under the VI6Samples folder. The next step is to place a <I>Recordset</I> object onto the ASP Web page. You can do this by dragging a Recordset design-time control (DTC) from the Toolbox. Next, name the Recordset DTC <I>rsCompanybyCity</I>. Display the Recordset Properties dialog box, choose 
the General tab, and then choose Stored Procedures from the Database Object 
drop-down list. Choose <I>spCompanybyCity</I> from the Object Name drop-down list. 
This is the name of the stored procedure we want to call from the <I>Recordset</I> object. 

</P>
<P>Since a Recordset DTC executes its query when the ASP Web page is 
first loaded, we'll need to specify the value of any parameters early on. 
Typically, we cannot gather or evaluate the value of the parameter after the page has 
been displayed. You can therefore specify the value of the parameter in one of 
these two events prior to the opening of the 
<I>Recordset</I> object:

</P>
<UL>
<P><LI>The <I>onenter</I> event for the page
</LI>
</P>
<P><LI>The <I>onbeforeopen</I> event for the 
<I>Recordset</I> object
</LI></P>
</UL>




<P>In this example, however, we'll use another technique. We'll uncheck 
the Automatically Open The Recordset check box. This check box is found on 
the Implementation tab of the Recordset Properties dialog box. By unchecking 
this option, you can now specify your parameters and then programmatically 
open the <I>Recordset</I> object after the parameters have been defined. The following 
code shows an example:
</P>
<P><PRE>
&lt;%
rsCompanybyCity.setParameter 1, &quot;Dallas&quot;
rsCompanybyCity.open
%&gt;
</PRE>

</P>
<div class="note"><blockquote><P>
<B>Note</B><HR>You can pass parameters to <I>Recordset</I> objects in several ways. These include specifying the following types of values in the Parameters tab of the Recordset Properties dialog box: 

</P>
<P><B>Literals</B>  Character values in single quotes and numeric values 
without quotes.

</P>
<P><B>Variables</B>  Names of variables defined in server code that contain 
the value you want to pass.

</P>
<P><B>Object References</B>  References to objects such as the 
<I>Request</I> object or a Textbox DTC and their associated property values.

</P>
<P><B>Expressions</B>  Any combination of literals, variables, and object 
references. The expression is evaluated as a Microsoft JScript expression, 
so be sure to use single quotes for character literals and the plus sign (+) 
for concatenation.
</P>
</blockquote></div>


<P>The code below shows the full code for the CompanybyCity.asp 
page minus the code that is generated by the Recordset DTC and the Grid DTC. 
You'll notice that there is very little code that needed to be manually scripted.
</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META name=VI60_DTCScriptingPlatform content=&quot;Server (ASP)&quot;&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H2&gt;Company List&lt;/H2&gt;
&lt;HR&gt;

&lt;!--METADATA TYPE=&quot;DesignerControl&quot; startspan
&#8230;

&lt;Recordset design-time control&gt;
&#8230;
&lt;!--METADATA TYPE=&quot;DesignerControl&quot; endspan--&gt;

&lt;%
rsCompanybyCity.setParameter 1, &quot;Dallas&quot;
rsCompanybyCity.open
%&gt;

&lt;!--METADATA TYPE=&quot;DesignerControl&quot; startspan
&#8230;
&lt;Grid design-time control&gt;
&#8230;
&lt;!--METADATA TYPE=&quot;DesignerControl&quot; endspan--&gt;

&lt;/BODY&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;% EndPageProcessing() %&gt;
&lt;/FORM&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>Notice also that a Grid DTC has been used to display the output 
from the Recordset DTC. Figure 15-14 below shows the output 
as it appears in the browser window.

</P>
<P>
<A HREF="javascript:fullSize('f15lh14x.htm')"> <IMG SRC="images/f15lh14.jpg" width=404 height=277 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 15-14. </B> <I>Output from the CompanybyCity.asp page. This page uses a Recordset DTC to call a stored procedure named </I>spCompanybyCity<I>. The results are displayed in a Grid DTC.</I><!-- /CAPTION -->

</P>
<P>Using either the Data Environment scripting technique or the 
<I>Recordset</I> object technique allows you to work with stored procedures easily. By 
trying out both techniques, you'll be able to find out which one works best for 
you and gives you the right level of programmatic control versus speed of 
development that you need. As mentioned earlier, the authors' preference is for 
scripting the Data Environment. This technique seems to provide the most 
dependable results no matter the nature of the stored procedure. We found the 
<I>Recordset</I> object technique provided unusual results when we were attempting to 
work with stored procedures that did not return a recordset.

</P>
<P>Overall, using stored procedures is an excellent way for both 
improving the performance of your Visual InterDev applications and for separating 
the business logic from the presentation layer within your applications. 
Performing this separation will allow you to write code that can be easily 
maintained in the future by other developers. One drawback to stored procedures, 
however, is that they are proprietary. A stored procedure written for a SQL 
Server database will require a few changes before you can place it into an 
Oracle database.
</P>
</BODY>
</HTML>



