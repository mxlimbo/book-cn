<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Using PageObject DTCs</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04d.htm", "ch04f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="85"><H1>Using PageObject DTCs</H1></A>
<P>The PageObject DTC allows you to designate a page in your application as 
a page object, an ASP Web page containing server script you can use in 
your application. It provides the server-side events 
<I>onenter</I> and <I>onexit</I>, and also the 
<I>onbeforeserverevent</I> client event. The PageObject DTC also allows a page 
to expose methods and properties. (A page utilizing the Scripting Object 
Model can also be treated as an object itself through the use of the 
<I>thisForm</I> HTML form.)

</P>
<P>When a user navigates to the ASP file, the 
<I>onenter</I> event fires. This allows you to place code in an event handler that executes when the page is 
first entered. When the page finishes, the 
<I>onexit</I> event fires; you can place code in an event handler for this event to clean up the page. 

</P>
<P>The PageObject DTC and the Scripting Object Model provide us with 
an object-oriented programming environment in both ASP and DHTML pages. 
You can treat your ASP code as objects with methods and properties. Both ASP 
and DHTML pages now are event driven.

</P>
<P>There are other page events you can use, such as placing an 
<I>onclick</I> event in your ASP file that is called by HTML in the browser. These events are 
provided by the run-time Scripting Object Model components and are 
implemented by using DTCs. 

</P>
<P>This new object model is tremendously powerful. You can see all 
this magic in action by running an ASP application that uses these events. First 
set breakpoints in the code to stop your application. Next debug the 
application starting with that page. 

</P>
<P>To use the PageObject DTC to implement an ASP file as a page 
object, all you need to do is insert the DTC in a page:

</P>
<OL>
<P><LI>Open the ASP file in the code editor.

</LI>
</P>
<P><LI>Enable the Scripting Object Model for this page.

</LI>
</P>
<P><LI>Drag the PageObject DTC from the Design-Time Controls tab of 
the Toolbox onto the page and inside the Scripting Object Model code.

</LI>
</P>
<P><LI>Enter the name for the PageObject DTC in its Name text box.
</LI>
</P>
</OL>




<P>The page should look similar to the one shown in Figure 4-6.

</P>
<P>
<A HREF="javascript:fullSize('F04lh06x.htm')"> <IMG SRC="images/F04lh06.JPG" width=404 height=296 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 4-6.</B> <I>The PageObject DTC's name is important because it is used to refer to items in the page.</I><!-- /CAPTION -->

</P>
<P>You can use the name you select for the page object when you want 
to refer to the page. The name is automatically registered in your Visual 
InterDev project and will remain the same, even if the page is moved. You can also 
move ASP files that are page objects into other projects.

</P>
<A NAME="86"><H2>Defining Page Methods</H2></A><P>You can define methods on a page and expose them with the PageObject 
DTC. Once you have exposed a method using the PageObject DTC, you can 
execute the methods from either a client or server script. You do not need to do 
anything special for the methods that you create. The PageObject DTC will 
allow you to expose both function and procedure methods.

</P>
<P>The PageObject DTC supports two types of methods. Navigate 
methods are used when a page needs to execute a procedure in an ASP file and 
then navigate to that or another page. Execute methods use remote scripting 
to execute ASP methods and return the data to the current page. Execute 
methods can be used from client script only. Navigate methods can be executed 
from either client or server script. To create a method of either of these types for 
a PageObject DTC, follow these steps:

</P>
<OL>
<P><LI>Open the ASP file in the code editor. The page must contain 
the PageObject DTC and the script functions that you want to use.

</LI>
</P>
<P><LI>Display the PageObject DTC's Properties dialog box by 
right-clicking the DTC and choosing Properties from the context menu.

</LI>
</P>
<P><LI>Click the Methods tab.

</LI>
</P>
<P><LI>Enter the name of your method in the Navigate Methods or 
Execute Methods section, depending upon which method type you want.
</LI>
</P>
</OL>




<P>Once you enter the method name, the property page will display 
the method as shown in Figure 4-7. You can also enter method names that do 
not exist, but they will be shown in red until you create the method.

</P>
<P>Once you enter the name of your method in the Navigate Methods 
or Execute Methods section, that method will be exposed to other pages. You 
can execute the method in your code by using this syntax:

</P>
<P><PRE>
&lt;%
    MyProp.Execute.CheckInventory()
%&gt;
</PRE>

</P>
<P>or

</P>
<P><PRE>
&lt;%
    MyProp.Navigate.CheckInventory()
%&gt;
</PRE>

</P>
<P>
<IMG SRC="images/F04lh07.GIF" width=401 height=313 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 4-7.</B> <I>This figure shows the PageObject Properties dialog box with one method that has been exposed.. </I><!-- /CAPTION -->

</P>
<P>This syntax is similar to the <I>Execute</I> syntax you use with stored 
procedures. When you execute a method using 
<I>Execute</I>, the execution takes place either synchronously&#8212;that is, the current page waits on the method to 
execute&#8212;or asynchronously&#8212;the current page stays in the browser and the user can 
continue to work with it while the method executes. When you use 
<I>Execute</I> to asynchronously execute a method, you can pass a parameter containing 
the name of a callback procedure. The callback procedure will be executed 
when the method completes. The callback procedure name should be included as 
the last parameter in the parameter list:

</P>
<P><PRE>
&lt;%
    MyProp.Execute.TotalInventory(ItemNumber, displayTotal)
%&gt;
</PRE>

</P>
<P>The callback procedure is simply a procedure or function in the 
client application. You can use the callback procedure to access the results of 
the function and display them or use them in some other manner. A callback 
procedure would look like this:

</P>
<P><PRE>
&lt;script LANGUAGE=&quot;JavaScript&quot;&gt;
function displayTotal(retObj)
{
    if (retObj.return_value == &quot;OK&quot;)
        ProcessTotal(return_value);
}
&lt;/script&gt;
</PRE>

</P>
<P>This example uses the <I>retObj</I> variable to access the object returned from 
the executed procedure. The <I>return_value</I> property allows us to retrieve the 
return value of a function.

</P>
<P>You can also use <I>Navigate</I> to execute methods. In fact, you must 
use <I>Navigate</I> to execute methods from ASP script. 
<I>Execute</I> can only be used by client script.

</P>
<A NAME="87"><H2>Defining Page Properties</H2></A><P>You can use the PageObject DTC to define properties for an ASP file in the 
same manner you define methods. Page properties are global variables that you 
create in your code.

</P>
<P>Page properties have three possible scopes:

</P>
<UL>
<P><LI><B>Page</B> The property can be used anywhere on the page and is 
available until the user navigates to another page.

</LI>
</P>
<P><LI><B>Session</B> The property is stored in a Session variable and is 
available anywhere in the user's session.

</LI>
</P>
<P><LI><B>Application</B> The property is stored in an Application variable 
and is available anywhere in the application. 
</LI></P>
</UL>




<P>Storing values using the PageObject DTC is easier than using Session 
and Application variables. If you select Session as the variable scope, browsers 
visiting your site must support cookies. Browsers that do not support cookies 
will not be able to use Session level variables.

</P>
<P>You define properties using the PageObject DTC using these steps:

</P>
<OL>
<P><LI>Open the ASP file in the code editor. The page must contain 
the PageObject DTC and the script functions that you wish to use.

</LI>
</P>
<P><LI>Display the PageObject DTC's Properties dialog box by 
right-clicking the DTC and choosing Properties from the context menu.

</LI>
</P>
<P><LI>Click the Properties tab.

</LI>
</P>
<P><LI>Enter the name of the property in the Name column.

</LI>
</P>
<P><LI>Select the Lifetime value to set the property's scope.

</LI>
</P>
<P><LI>Select the Client and Server access settings.
</LI>
</P>
</OL>




<P>Figure 4-8 shows three properties in the PageObject Properties dialog 
box. <I>ItemNumber</I> and <I>ItemName</I> are both Page properties and are read-only for 
the client. This allows the user to see the property data, but the data cannot 
be changed. The <I>OrderNumber</I> property is read/write for the client and is a 
Session property. This allows the user to change the data in the property, and it 
allows the application to access the property throughout the user's session.

</P>
<P>
<IMG SRC="images/F04lh08.GIF" width=401 height=313 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 4-8.</B> <I>Page properties are a useful way to store values in your application.</I><!-- /CAPTION -->

</P>
<P>You can access the properties in your script code by using IntelliSense. 
When the PageObject DTC creates the property procedures to use for accessing 
the properties, it builds them as <I>set</I>xxx and 
<I>get</I>xxx, where xxx is the name of a property. In other words, if we take the example shown in Figure 4-8, you would 
set these properties like this:

</P>
<P><PRE>
&lt;%
    ProjectCallback.setItemName = &quot;My Widget&quot;
    ProjectCallback.setItemNumber = &quot;101&quot;
    ProjectCallback.setOrderNumber = &quot;98-01001&quot;
%&gt;
</PRE>

</P>
<P>The properties in this example can be referenced using these statements:

</P>
<P><PRE>
&lt;%
    Response.Write ProjectCallback.getItemName
    Response.Write ProjectCallback.getItemNumber
    Response.Write ProjectCallback.getOrderNumber
%&gt;
</PRE>

</P>
<P>Figure 4-9 shows IntelliSense with these properties' <I>get</I> procedures displayed.

</P>
<P>It might seem strange using <I>get</I> and 
<I>set</I> as the prefix to page property procedures. The PageObject DTC builds the property procedures similar to the 
way Visual Basic classes use <I>Property Get</I> and 
<I>Property Set</I> procedures. This ensures that your property names do not clash with the names of other objects or 
items in a project and make debugging the project a nightmare. This also prevents 
you from overriding a built-in property or method with one of your properties.

</P>
<P>
<IMG SRC="images/F04lh09.GIF" width=273 height=265 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 4-9.</B> <I>The </I>set<I> and </I>get<I> procedures for page properties are available in your script code using IntelliSense.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




