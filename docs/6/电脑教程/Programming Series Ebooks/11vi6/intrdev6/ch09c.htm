<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Interacting with HTML Forms and Pages</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm", "ch09d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="146"><H1>Interacting with HTML Forms and Pages</H1></A>
<P>After looking at the new method for working with forms to collect and edit 
data via the FormManager DTC, we'll now cover the original Visual InterDev 
1 method which is still supported in Visual InterDev 6. This older technique 
is still important because it can often be simpler to program and gives you 
more manual control over the code that you write. The FormManager DTC is 
typically used for more complex data entry and editing routines that involve 
multiple modes. The HTML form technique is used for simpler data capture 
requirements. An example might be where there is no need for multiple modes and 
where there is no need for navigation through a Recordset DTC.

</P>
<P>This section describes the primary way to get user information with 
the <I>Form</I> collection. We'll also briefly touch on the 
<I>QueryString</I> and <I>ServerVariables</I> collections. These are just three of the collections available in the <I>Request</I> object in the Active Server Framework. For more information on the other collections, namely the <I>ClientCertificate</I> and <I>Cookies</I> collections, see <A HREF="ch10a.htm">Chapter 10</A> or the online documentation that comes with Visual InterDev.

</P>
<A NAME="147"><H2>The <I>Form</I> Collection</H2></A><P>One of the most common ways to obtain input for a server-side application 
is from an HTML form. Forms are part of standard HTML, and virtually all 
modern browsers support them. Forms let users of your HTML page enter 
information using text boxes, check boxes, radio buttons, and list boxes. Users can 
then submit this data by clicking a command button on the form. The form 
then embeds the information within an HTTP request string and sends the string 
back to the server.

</P>
<P>Traditionally, the return string has been passed to a CGI application 
(an .exe file running on the server). The CGI application then parses the string 
and interprets the results. Many aspects of this technique make it cumbersome. 
The CGI application is often written in C. This means you must be familiar with 
an additional language, use a separate set of tools, use a complex debugging 
process involving unintegrated components, and then interpret the HTTP 
request. You may have seen the strange text that your browser adds to the URL 
when sending a request to the server after you click the Submit button on a form. 
For instance, the following text is sent to the Microsoft search site when you try 
to search for &quot;Space Exploration near mars&quot; and select Excite as the search engine:

</P>
<P><PRE>http://www.excite.com/search.gw?searchType=Concept&amp;category=
    default&amp;mode=relevance&amp;showqbe=1&amp;display=msn,hb&amp;search=
    %22Space+Exploration%22+near+mars
</PRE>

</P>
<P>The CGI programmer must know the rules of HTTP requests and be 
able to parse the data out of a string such as that shown above. This can be a 
tedious process.

</P>
<P>The <I>Request</I> object in Active Server Script lets you circumvent all 
these complications. First, it lets you access the data from within the ASP Web 
page and keep the entire process inside Visual InterDev. Second, it parses the 
HTTP request for you, making the data readily available and easy to use.

</P>
<A NAME="148"><H2>Processing Forms with ASP Files</H2></A><P>An ASP file lets you collect or process HTML form values in three ways:

</P>
<UL>
<P><LI>A static .htm file can contain a formCX that posts its values to an 
ASP file.
</LI>
</P>
<P><LI>An ASP file can create a form that posts information to another 
ASP file.
</LI>
</P>
<P><LI>An ASP file can create a form that posts information to 
itself&#8212;that is, to the ASP file that contains the form.
</LI></P>
</UL>




<P>The first two methods operate the same way as forms that interact 
with other gateway programs, but with ASP you can include commands that read 
and respond to user choices. The third method is more complicated, requiring 
logic to handle different states within the file. Creating an ASP file that contains a 
form definition that posts information to itself is a slightly more complicated 
but powerful means of working with forms.

</P>
<P><div class="note"><blockquote>
<B>NOTE</B><HR>If you are considering writing a self-posting ASP Web page, 
you might want to consider using the FormManager DTC instead since 
your page is most likely multimodal (that is, having multiple entry paths).
</blockquote></div>

</P>
<P>The first step in processing forms with ASP is to create the 
appropriate HTML form (which can itself be an HTML or ASP file) and tell the form to 
send its data to the form handler ASP file. You do this in the HTML &lt;FORM&gt; 
tag by specifying the path of the ASP file that handles the processing, as shown here:

</P>
<P><PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Favorite Car&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#fffff&quot;&gt;

&lt;FORM METHOD=POST ACTION=&quot;FormHandler.asp&quot;&gt;
&lt;P&gt;
First Name: &lt;INPUT NAME=&quot;FName&quot; SIZE=30&gt;
&lt;P&gt;
Last Name: &lt;INPUT NAME=&quot;LName&quot; SIZE=30&gt;
&lt;P&gt;
Which car do you like best?
&lt;SELECT NAME=&quot;Car&quot;&gt;
&lt;OPTION&gt;Porsche
&lt;OPTION&gt;BMW
&lt;OPTION&gt;Ferrari
&lt;OPTION&gt;Chrysler
&lt;OPTION&gt;Lamborghini
&lt;/SELECT&gt;
&lt;P&gt;
&lt;INPUT TYPE=Submit&gt;
&lt;/FORM&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>This form produces the page shown in Figure 9-7 (which is in Quick view mode in Visual InterDev).

</P>
<P>
<A HREF="javascript:fullSize('f09lh07x.htm')"> <IMG SRC="images/f09lh07.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 9-7.</B> <I>A simple HTML form.</I><!-- /CAPTION -->

</P>
<P>The &lt;FORM&gt; tag tells the browser to collect the data the user enters 
on the form and package it in an HTTP request. If you weren't using ASP, a 
CGI program would be specified in the ACTION attribute. The following 
syntax specifies the ASP file named FormHandler.asp:

</P>
<P><PRE>&lt;FORM METHOD=POST ACTION=&quot;FormHandler.asp&quot;&gt;
</PRE>

</P>
<P>When the user clicks the Submit button on the form, control is 
transferred to FormHandler.asp. (See Figures 9-8 and 9-9.)

</P>
<P>The HTML form has three inputs: the text box named FName, the text 
box named LName, and a list box named Car. When the user clicks the Submit 
button, the names of all the form's inputs are passed to the target specified in 
the form tag's <I>Action </I>qualifier, as are the values in the form's controls. Figure 
9-8 shows how to retrieve the first and last name from the form, as well as the name 
of the car that the user selects as his or her favorite. The code shows how you 
can use this information to make a decision about what output to send to the user.

</P>
<P><B>Figure 9-8.</B> <I>Retrieving information from a form by using the </I>Request<I> object is a straightforward process.</I>

</P>
<P><PRE>&lt;%@ Language=VBScript %&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Form Handler&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FFFFF&quot;&gt;


Welcome,

&lt;% = Request.Form(&quot;FName&quot;) &amp; &quot; &quot; &amp; Request.Form(&quot;LName&quot;) %&gt;.
&lt;P&gt;
Your favorite car is a 
&lt;%
DIM favcar
favcar = Request.Form(&quot;Car&quot;)
If favcar = &quot;Chrysler&quot; Then
    Response.Write(&quot;... wait a minute... there must be an error.&quot;)
    Response.Write(&quot;&lt;P&gt;A &lt;B&gt;Chrysler&lt;/B&gt;?&quot;)
Else
    Response.Write(favcar &amp; &quot;.&lt;P&gt;That's cool.&quot;)
End If
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
<P>In the ASP Web page, you can reference the values the user enters by 
using the <I>Form</I> collection of the 
<I>Request</I> object.

</P>
<P>The syntax for retrieving the variables from the <I>Form</I> collection is

</P>
<P><PRE>Request.Form(<I>parameter</I>)[(<I>index</I>)|.Count]
</PRE>

</P>
<P>You retrieve the first name and last name values using the following 
syntax, which outputs the form's variables to the HTML stream with a space 
between them:

</P>
<P><PRE>&lt;% = Request.Form(&quot;FName&quot;) &amp; &quot; &quot; &amp; Request.Form(&quot;LName&quot;) %&gt;
</PRE>

</P>
<P>The <I>Car</I> form variable is retrieved in the same fashion:

</P>
<P><PRE>favcar = Request.Form(&quot;Car&quot;)
</PRE>

</P>
<P>If the HTTP request contains more than one parameter with the 
same name, it forms a collection that you can index by a number. For instance, if 
the HTML form has two first name text boxes named FName, you can access 
them in your script like this:

</P>
<P><PRE>The first FName is &lt;% = Request.Form(&quot;FName&quot;)(1) %&gt;
And the second FName is &lt;% = Request.Form(&quot;FName&quot;)(2) %&gt;
</PRE>

</P>
<P>If you do not use the index on such a parameter, you get a string 
with both values separated by commas. You can use the 
<I>Count</I> property to determine how many form variables with a particular name are in the Request's <I>Form</I> collection. For instance, if the HTML form has two FName variables, the 
value of the following is 2.

</P>
<P><PRE>Request.Form(&quot;FName&quot;).Count
</PRE>

</P>
<A NAME="149"><H3>Self-posting pages</H3></A><P>You can easily create an ASP Web page with a form that posts the input 
values back to itself. The user can then fill in the form variables and submit the 
form. The values are sent along with the request to reload the ASP file. The ASP 
file simply uses the <I>Request</I> object to access the form variables. The ASP file 
can check the results and update the form with a message if necessary. Also, 
self-posting forms are great for pages that progressively build as the user 
completes the form. For instance, when a user selects a type of car from the list, the 
page redisplays with a list of submodels. If the user then selects one of the 
submodels, the page redisplays with another list of features for the submodel. You 
can handle each step of the page in the same ASP file to give the user a 
seamless view of the application.

</P>
<P>Self-posting pages work much more seamlessly than separate pages 
that are sent back to users with some type of message&#8212;separate pages require 
users to move back to the previous page. Self-posting forms can display the 
message and let users continue.

</P>
<P>Self-posting pages require only one type of special logic&#8212;the logic to 
handle the different states the page might take. The page must be able to 
distinguish between each mode it might take. For instance, a page typically has one 
mode to display one section of the page and another mode to process the section.

</P>
<P>The GetEmail.asp page from the online Visual InterDev documentation 
is a simple implementation of a self-posting page. This page checks the 
<I>Email</I> variable for several things. If 
<I>Email</I> is blank, the resulting page asks the 
user for his or her e-mail address. If 
<I>Email</I> does not contain the @ character, the 
user sees the same message with a note on the proper syntax. If 
<I>Email</I> does not meet one of the last two criteria, it's probably OK and the final message 
appears. Figure 9-9 shows the code for GetEmail.asp.

</P>
<P><B>Figure 9-9.</B> <I>An example of a self-posting page.</I>

</P>
<P><PRE>&lt;HTML&gt;
&lt;BODY&gt;
&lt;!-- GetEmail.asp --&gt;

&lt;% 
    If IsEmpty(Request(&quot;Email&quot;)) Then 
        Msg = &quot;Please enter your email address.&quot; 
    ElseIf InStr(Request(&quot;Email&quot;), &quot;@&quot;) = 0 Then 
        Msg = &quot;Please enter an email address&quot; &amp; _
            &quot; in the form username@location.&quot;
    Else
        ' In a real application, the following message
        ' would be replaced by actual processing.
        Msg = &quot;This script could process the &quot; &amp; _
            &quot;valid Email address now.&quot;
    End If



%&gt;
&lt;FORM METHOD=&quot;POST&quot; ACTION=&quot;GetEmail.asp&quot;&gt;
&lt;PRE&gt;
Email: &lt;INPUT TYPE=&quot;TEXT&quot; NAME=&quot;Email&quot; SIZE=30 
    VALUE=&quot;&lt;%= Request(&quot;Email&quot;)%&gt;&quot;&gt;
&lt;%= Msg %&gt;&lt;P&gt;
&lt;INPUT TYPE=&quot;Submit&quot; VALUE=&quot;Submit&quot;&gt;
&lt;/PRE&gt;
&lt;/FORM&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>

</P>
</BODY>
</HTML>




