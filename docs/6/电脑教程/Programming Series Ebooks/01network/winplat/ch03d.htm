<HTML>
<HEAD>
<TITLE>Additional Mailslot APIs</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03c.htm" , "ch03e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="51"><H1>Additional Mailslot APIs</H1></A>

<p>A mailslot server application can use two additional API functions to interact with a mailslot: <i>GetMailslotInfo</i> and <i>SetMailslotInfo</i>. The <i>GetMailslotInfo</i> function retrieves message sizing information when messages become available on a mailslot. Applications can use this to dynamically adjust their buffers for incoming messages of varying length. <i>GetMailslotInfo</i> can also be used to poll for incoming data. <i>GetMailslotInfo</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL GetMailslotInfo(
    HANDLE<i> hMailslot</i>, 
    LPDWORD<i> lpMaxMessageSize</i>, 
    LPDWORD<i> lpNextSize</i>, 
    LPDWORD<i> lpMessageCount</i>, 
    LPDWORD<i> lpReadTimeout</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hMailslot</i> parameter identifies a mailslot returned from the <i>CreateMailslot</i> API call. The <i>lpMaxMessageSize</i> parameter points to how large a message (in bytes) can be written to the mailslot. The <i>lpNextSize</i> parameter points to the size in bytes of the next message. <i>GetMailslotInfo</i> might return the value <i>MAILSLOT_NO_MESSAGE</i>, indicating that no message is currently waiting to be received on the mailslot. A server can potentially use this parameter to poll the mailslot for incoming data, preventing your application from blocking on a <i>ReadFile</i> function call. Polling for data using this mechanism is not a good programming approach. Your application will continuously use the computer's CPU to check for incoming data&#8212;even when no messages are being processed, resulting in a slower overall performance by the computer. If you want to prevent the <i>ReadFile</i> function from blocking, we recommend using Win32 overlapped I/O. The <i>lpMesssageCount</i> parameter points to a buffer that receives the total number of messages waiting to be read. You can use this parameter for polling purposes too. The <i>lpReadTimeout</i> parameter points to a buffer that returns the amount of time in milliseconds that a read operation can wait for a message to be written to the mailslot before a timeout occurs.</p>

<p>The <i>SetMailslotInfo</i> API function sets the timeout values on a mailslot for how long read operations wait for incoming messages. Thus the application has the ability to change the read behavior from blocking to nonblocking mode or vice versa. <i>SetMailslotInfo</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL SetMailslotInfo(
    HANDLE<i> hMailslot</i>,
    DWORD<i> lReadTimeout</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hMailslot</i> parameter identifies a mailslot that is returned from the <i>CreateMailslot</i> API call. The <i>lReadTimeout</i> parameter specifies the amount of time in milliseconds that a read operation can wait for a message to be written to the mailslot before a timeout occurs. If you specify 0, read operations will return immediately if no message is present. If you specify <i>MAILSLOT_WAIT_FOREVER</i>, read operations will wait forever.</p>

</BODY>
</HTML>




