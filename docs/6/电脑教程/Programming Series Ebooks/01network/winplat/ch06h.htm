<HTML>
<HEAD>
<TITLE>Additional Winsock 2 Support Functions</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06g.htm" , "ch06i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="134"><H1>Additional Winsock 2 Support Functions</H1></A>

<p>Winsock 2 provides two useful support functions named <i>WSAAddressToString</i> and <i>WSAStringToAddress</i> that provide a protocol-independent method to convert a <i>SOCKADDR</i> structure of a protocol to a formatted character string and vice versa. Since these functions are protocol-independent, they require the transport protocol to support the string conversions. Currently these functions work only for the <i>AF_INET</i> and <i>AF_ATM</i> address families. The <i>WSAAddressToString</i> function is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
INT WSAAddressToString(
    LPSOCKADDR lpsaAddress, 
    DWORD dwAddressLength, 
    LPWSAPROTOCOL_INFO lpProtocolInfo, 
    OUT LPTSTR lpszAddressString, 
    IN OUT LPDWORD lpdwAddressStringLength
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpsaAddress</i> parameter represents a <i>SOCKADDR</i> structure for a particular protocol that contains the address to convert to a string. The <i>dwAddressLength</i> parameter specifies the size of the first parameter's structure, which can vary in size with different protocols. The <i>lpProtocolInfo</i> is an optional parameter that represents a protocol provider. Protocol providers can be retrieved from the <i>WSAEnumProtocols</i> API function, as described in <a href="ch05a.htm">Chapter 5</A>. If you specify <i>NULL</i>, the call uses the provider of the first protocol supporting the address family indicated in <i>lpsaAddress.</i> The <i>lpszAddressString</i> parameter is a buffer that receives the human-readable address string. The <i>lpdwAddressStringLength</i> parameter represents the size of <i>lpszAddressString</i>. On output, it returns the length of the string actually copied into <i>lpszAddressString</i>. If the supplied buffer isn't large enough, the function fails with error <i>WSAEFAULT</i> and the
<i>lpdwAddressStringLength</i> parameter is updated with the required size in bytes.</p>
<p>Conversely, the <i>WSAStringToAddress</i> API function takes a human-readable address string and converts it to a <i>SOCKADDR</i> structure. <i>WSAStringToAddress</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
INT WSAStringToAddress(
    LPTSTR<i> AddressString</i>,
    INT<i> AddressFamily</i>,
    LPWSAPROTOCOL_INFO<i> lpProtocolInfo</i>,
    LPSOCKADDR<i> lpAddress</i>,
    LPINT<i> lpAddressLength</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>AddressString</i> parameter is a human-readable address string. Table 6-3 describes the format for this string for the current supported protocols.</p>

<p><b>Table 6-3.</b> <i>Address string formats</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Address Family </th><th>String Format</th>
</tr>

<tr>
<td valign="top">IP</td><td valign="top"><i>XXX.XXX.XXX.XXX</i>:<i>Y</i>&#8212;where <i>X</i> represents an octet in an IP address string and <i>Y</i> represents a port number</td>
</tr>

<tr>
<td valign="top">ATM    </td><td valign="top"><i>NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN</i>&#8212;
where the 40 <i>N</i> characters represent a 20-byte ATM address in hexadecimal notation</td>

</tr>
</table>
</p>
The <i>AddressFamily</i> parameter represents the address family type for the <i>AddressString</i> parameter. The <i>lpProtocolInfo</i> parameter is an optional parameter that represents a protocol provider. If you set this parameter to <i>NULL</i>, Winsock will search for the first available protocol provider for the address family type specified in the <i>AddressFamily</i> parameter. If you want to select a particular provider, the <i>WSAEnumProtocols</i> API function will supply you with a list of available protocol providers installed on your system. The <i>Address</i> buffer parameter takes a <i>SOCKADDR</i> structure that receives the information in the address string. The <i>lpAddressLength</i> parameter represents the size of the resultant <i>SOCKADDR</i> structure.</p>

</BODY>
</HTML>




