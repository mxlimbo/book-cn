<HTML>
<HEAD>
<TITLE>How to Use This Book</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">
</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("introa.htm" , "introc.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="544"><H1>How to Use This Book</H1></A>

<p>This book is divided into three parts:</p>

<ul>
<p><li> Networking with NetBIOS and the Windows redirector</li></p>

<p><li> Winsock</li></p>

<p><li> Client Remote Access Server (RAS)</li></p>
</ul>



<p>We look at NetBIOS in <a href="ch01a.htm">Chapter 1</A>. In our experience in Microsoft Developer Support, we found a number of companies still relying on this technology, and until now there has not been an adequate source of information on how to write NetBIOS applications on Win32. <a href="ch01a.htm">Chapter 1</A> also offers methods for writing robust and cross-platform applications (especially since many developers use NetBIOS to communicate with legacy systems).</p>

<p>Chapters 2 through 4 cover the Windows redirector, mailslots, and named pipes. As you might know, mailslots and named pipes are based on the redirector. We decided to place the redirector in a separate chapter to give you adequate background information on how these three technologies relate to one another. Mailslots are an unreliable, one-way, message-oriented API that operates regardless of what protocols are available on the system. Named pipes offer more features, such as reliable, two-way, stream- and message-oriented data transmission. Named pipes also offer Windows燦T security through the redirector, which no other network API provides.</p>

<p><a href="ch05PartIIa.htm">Part II</a> of this book is dedicated to the Winsock API. <a href="ch05a.htm">Chapter 5</A> is an introduction to Winsock that covers the most common Winsock protocols that programmers use. All Winsock applications must create a socket in order to perform any network communication. This chapter introduces you to the capabilities of each protocol, while <a href="ch06a.htm">Chapter 6</A> goes over the specifics of how to create a socket and perform simple name resolution for each protocol type.</p>

<p><a href="ch07a.htm">Chapter 7</A> is where the real fun begins. Here we introduce the basic client/server programming model and cover the majority of the Winsock functions that deal with connection establishment and acceptance, data transfers, and more. <a href="ch08a.htm">Chapter 8</A> follows suit with the different I/O methods offered by Winsock. Since <a href="ch07a.htm">Chapter 7</A> is meant as a kind of introduction, it discusses only the simplest I/O methods, while <a href="ch08a.htm">Chapter 8</A> is dedicated to presenting the other I/O methods in detail. If you're new to Winsock, Chapters 5 through 7 should give you a solid background in using the API.</p>

<p>Each remaining chapter in the Winsock section deals with a specific aspect or feature of the API. Socket options and ioctl commands are the subject of <a href="ch09a.htm">Chapter 9</A>. This is where we cover most of the commands that affect the behavior of the socket or the protocol itself. This chapter is useful both for learning purposes and as a爎eference.</p>

<p><A HREF="ch10a.htm">Chapter 10</A> moves to Winsock 2 registration and name resolution (RNR). This is a protocol-independent method for registering and resolving service names to the underlying protocol's address. The recent release of Windows 2000 and Active Directory makes this a chapter of particular significance.</p>

<p><A HREF="ch11a.htm">Chapter 11</A> covers point-to-multipoint communication, including both IP multicasting and ATM point-to-multipoint. In <A HREF="ch12a.htm">Chapter 12</A> we cover Quality of Service (QOS), an exciting new technology that allows for guaranteed network bandwidth allocation to applications. <A HREF="ch13a.htm">Chapter 13</A> moves to raw IP sockets. In this chapter, we examine how Winsock applications can use raw IP sockets to use Internet Control Message Protocol (ICMP) and Internet Group Membership Protocol (IGMP) as well as other aspects of raw socket programming.</p>

<p><A HREF="ch14a.htm">Chapter 14</A> covers the Winsock Service Provider Interface (SPI). This interface is a means by which a programmer can install a layer between Winsock and lower-level service providers such as TCP/IP for the purpose of manipulating socket and protocol behavior or name registration and resolution. This is an advanced feature that allows software developers to extend Winsock functionality.</p>

<p>Finally, <A HREF="ch15a.htm">Chapter 15</A> discusses the Microsoft Visual Basic Winsock control. We decided to include this chapter after seeing how many developers rely on Visual Basic and this control. The control is limited in its ability to utilize the advanced features of Winsock, but it is fantastic for Visual Basic developers who require simple, easy-to-use network communication.</p>

<p><a href="ch16PartIIIa.htm">
Part III</a> covers client Remote Access Server (RAS). We decided to include a chapter on RAS because of the popularity of the Internet and dial-up communication. The ability for a programmer to add dial-in capability to a network application is quite useful since it makes the program easier for the user. That is, an end user does not need to know how to establish a dial-up connection to use your network application.</p>

<p>We conclude the book with three appendixes. <A HREF="chaaa.htm">Appendix A</A> is a NetBIOS command reference that we think you will find invaluable. It straightforwardly lists the required input and output parameters for each command. <A HREF="chaba.htm">Appendix B</A> covers new IP Helper functions that provide useful information about the network configuration on the current computer. <A HREF="chaca.htm">Appendix C</A> is a Winsock error code reference that describes individual errors in detail and offers possible reasons for their occurrence.</p>

<p>We hope that you will find this book to be a valuable learning tool and reference. We believe it is the most comprehensive book about Windows network programming available.</p>

</BODY>
</HTML>


