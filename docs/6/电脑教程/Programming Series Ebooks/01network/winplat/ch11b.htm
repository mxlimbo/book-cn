<HTML>
<HEAD>
<TITLE>Multicast Semantics</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11a.htm" , "ch11c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="323"><H1>Multicast Semantics</H1></A>

<p>Multicasting has two important properties: the control plane and the data plane. The <i>control plane</i> defines the way in which group membership is organized. The <i>data plane</i> refers to the way in which data is propagated among the members. Either one of these properties can be rooted or nonrooted. In a <i>rooted</i> control plane, there is a special member of the multicast group known as the <i>c_root</i>. Each of the remaining group members is known as a <i>c_leaf</i>. In most cases, the c_root establishes the multipoint group by initiating connections to any number of c_leafs. In some cases, a c_leaf might request membership to a given multipoint group at a later time. Note that there can be only one root node for a given group. The ATM protocol is an example of a rooted control plane.</p>

<p>A <i>nonrooted</i> control plane allows anyone to join a group without exception. In this situation, all group members are c_leaf nodes. Each member has the power to join a multipoint group. You can impose your own group membership scheme in a nonrooted control plane (this will in effect make one node a c_root) by implementing your own group membership protocol. However, your group membership scheme is still built upon a nonrooted control plane. IP multicasting is an example of a nonrooted control plane. Figure 11-1 illustrates the difference between rooted and nonrooted control planes. In the rooted control plane on the left, the c_root must explicitly ask each c_leaf to join the group, while in the nonrooted scheme on the right anyone can join the group.</p>

<p>The data plane also can be rooted or nonrooted. A rooted data plane has a participant called the <i>d_root</i>. The transfer of data occurs only between d_root and all other members of the multipoint session, who are each referred to as a <i>d_leaf</i>. The traffic can be either unidirectional or bidirectional, but a rooted data plane implies that data sent from one d_leaf will be received only by the d_root, while data sent from the d_root will be received by each d_leaf. ATM is an example of a rooted data plane. Figure 11-2  illustrates the difference between rooted and nonrooted data planes. In the rooted data plane on the left, data <i>abc</i> from the d_root is propagated to every d_leaf. Data <i>xyz</i> sent from a d_leaf is received only by the d_root. This contrasts with the nonrooted example on the right, in which data <i>abc</i> and <i>xyz</i> are propagated to every member, no matter who sent the data.</p>

<p>
<A HREF="javascript:fullSize('F11ji01x.htm')"> <img src="images/F11ji01.JPG" width=404 height=391 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 11-1.</b> <i>Rooted and nonrooted control planes</i><!-- /caption -->
</p>

<p>Finally, in a nonrooted data plane all group members can send data to all other members of the group. A block of data sent from a group member is delivered to all other members, and all recipients can send data back. There are no restrictions on who can receive or send data. Again, IP multicasting is nonrooted in the data plane.</p>

<p>So we see that ATM multicasting is rooted in the control and data planes, while IP multicasting is nonrooted in both planes. Combinations other than these two can exist. For example, it is possible to have a rooted control plane in which one node decides who can join the group and also have a nonrooted data plane in which data sent from any member is seen by all other members. However, none of the currently supported protocols under Winsock behave in this manner.</p>

<p>
<A HREF="javascript:fullSize('F11ji02x.htm')"> <img src="images/F11ji02.JPG" width=404 height=391 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 11-2.</b> <i>Rooted and nonrooted data planes</i><!-- /caption -->
</p>

<A NAME="324"><H2>Finding Multicast Properties</H2></A>

<p>In <a href="ch05a.htm">Chapter 5</A>, we discussed how to enumerate protocol entries and determine their properties. All the pertinent multipoint information about a protocol is also available from the protocol's entry in the catalog. The <i>dwServiceFlags1</i> entry in the <i>WSAPROTOCOL_INFO</i> structure returned by <i>WSAEnumProtocols</i> contains several bits we're interested in. If the <i>XP1_SUPPORT_MULTIPOINT</i> bit is set, the protocol entry supports multicasting. Then, if the <i>XP1_MULTIPOINT_CONTROL_PLANE</i> bit is set, the protocol supports a rooted control plane; otherwise, it is nonrooted. If the <i>XP1_MULTIPOINT_DATA_PLANE</i> bit is set, the protocol supports a rooted data plane. Likewise, if the bit is 0, the protocol supports only a nonrooted data plane.</p>

</BODY>
</HTML>




