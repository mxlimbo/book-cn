<HTML>
<HEAD>
<TITLE>Name Space Models</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10b.htm" , "ch10d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="312"><H1>Name Space Models</H1></A>

<p>Before we begin to explore the Winsock function, we need to introduce the various name space models to which most of the protocols adhere. A name space offers the capability to associate the protocol and its addressing attributes with a user-friendly name. Some of the more common name spaces are DNS for IP and the NetWare Directory Services (NDS) from Novell for IPX. These name spaces vary widely in their organization and implementation. Some of their properties are particularly important in understanding how to register and resolve names from Winsock.</p>

<p>There are three different types of name spaces: dynamic, static, and persistent. A dynamic name space allows you to register a service on the fly. This also means that clients can look up the service at run time. Typically, a dynamic name space relies on periodically broadcasting service information to signal that the service is continuously available. Examples of dynamic name spaces include Service Advertising Protocol (SAP)&#8212;used in NetWare environments&#8212;and AppleTalk's Name Binding Protocol (NBP) name space.</p>

<p>Static name spaces are the least flexible of the three types. Registering a service in a static name space requires that it be manually registered ahead of time. This means that there is no way to register a name with a static name space from Winsock&#8212;there is only a method of resolving names. DNS is an example of a static name space. For example, with DNS you manually enter IP addresses and host names into a file that the DNS service uses to handle resolution requests.</p>

<p>Persistent name spaces, like dynamic name spaces, allow services to register on the fly. Unlike dynamic name spaces, however, the persistent model maintains the registration information in nonvolatile storage, such as a file on a disk. Only when the service requests that it be removed will a persistent name space delete its entry. The advantage of a persistent name space is that it is flexible yet does not continually broadcast any kind of availability information. The drawback is that if a service is not well behaved (or is poorly written), it can go away without ever notifying the name space provider to remove its service entry, leading clients to believe incorrectly that the service is still available. NDS is an example of a persistent name space.</p>

<A NAME="313"><H2>Enumerating Name Spaces</H2></A>

<p>Now that you are acquainted with the various attributes of a name space, let's examine how to find out which name spaces are available on a machine. Most of the predefined name spaces are declared in the Nspapi.h header file. Each name space has an integer value assigned to it. Table 10-1 contains some of the more commonly supported name spaces available on Win32 platforms. The name spaces returned depend on which protocols are installed on the workstation. For example, unless IPX/SPX is installed on a workstation, the <i>NS_SAP</i> name space will not be returned.</p>

<p><b>Table 10-1.</b> <i>Supported name spaces</i></p>

<p>
<table cellpadding=5 width="95%">
<tr><th><i>Name Space</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th></tr>
<tr><td valign="top"><i>NS_SAP</i></td>
<td valign="top">1</td>
<td valign="top">SAP name space; used on IPX networks</td></tr>
<tr><td valign="top"><i>NS_NDS</i></td>
<td valign="top">2</td>
<td valign="top">NDS name space; also used on IPX networks</td></tr>
<tr><td valign="top"><i>NS_DNS</i></td>
<td valign="top">11</td>
<td valign="top">DNS name space; most commonly found on TCP/IP networks and on the Internet</td></tr>
<tr><td valign="top"><i>ND_NTDS</i></td>
<td valign="top">32</td>
<td valign="top">Windows NT domain space; protocol-independent name space found on Windows 2000</td></tr>
</table></p>

<p>When you install IPX/SPX on a machine, the SAP name space is supported for queries only. If you want to register your own service, you also need to install the SAP Agent service. In some cases, the Client Services for NetWare are required to display local IPX interface addresses correctly. Without this service, the local addresses show up as all zeros. Additionally, you must add an NDS client to utilize the NDS name space. All of these protocols and services can be added from the Control Panel.</p>

<p>Winsock 2 provides a method of programmatically obtaining a list of the name spaces available on a system. This is accomplished by calling the function <i>WSAEnumNameSpaceProviders</i>, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
INT WSAEnumNameSpaceProviders (
    LPDWORD lpdwBufferLength, 
    LPWSANAMESPACE_INFO lpnspBuffer
);
</pre>
</td></tr></table>
</p>

<p>The first parameter is the size of the buffer submitted as <i>lpnspBuffer</i>, which is a sufficiently large array of <i>WSANAMESPACE_INFO</i> structures. If the function is called with an insufficiently large buffer, it fails, sets <i>lpdwBufferLength</i> to the required minimum size, and causes <i>WSAGetLastError</i> to return <i>WSAEFAULT</i>. The function returns the number of <i>WSANAMESPACE_INFO</i> structures returned, or <i>SOCKET_ERROR</i> upon any error.</p>

<p>The <i>WSANAMESPACE_INFO</i> structure describes an individual name space installed on the machine. This structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _WSANAMESPACE_INFO {
GUID NSProviderId; 
DWORD dwNameSpace; 
BOOL fActive; 
DWORD dwVersion; 
LPTSTR lpszIdentifier;
} WSANAMESPACE_INFO, *PWSANAMESPACE_INFO, 
LPWSANAMESPACE_INFO;
</pre>
</td></tr></table>
</p>

<p>There are actually two definitions for this structure&#8212;one is Unicode, and one is ANSI. The Winsock 2 header file type-defines the appropriate structure to <i>WSANAMESPACE_INFO</i> according to how you build your project. In actuality, all structures and Winsock 2 registration and name resolution functions have both ANSI and UNICODE versions. The first member of this structure, <i>NSProviderId</i>, is a globally unique identifier (GUID) that describes this particular name space. The <i>dwNameSpace</i> field is the name space's integer constant, such as <i>NS_DNS</i> or <i>NS_SAP</i>. The <i>fActive</i> member is a Boolean value, which if true indicates that the name space is available and ready to take queries; otherwise, the provider is inactive and unable to take queries that specifically reference this provider. The <i>dwVersion</i> field simply identifies the version of this provider. Finally the <i>lpszIdentifier</i> is a descriptive string identifier for this provider.</p>

</BODY>
</HTML>




