<HTML>
<HEAD>
<title>Background</title>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm" , "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="345"><H1>Background</H1></A>

<p>QOS requires three components to make it work:</p>

<ul>
<p><li> Devices on the network&#8212;such as routers and switches&#8212;that are aware of this differentiation of services</li></p>

<p><li> Local workstations that can prioritize traffic that they place on the network</li></p>

<p><li> The policy component: who is allowed to use the available bandwidth and how much they are allowed to use</li></p>
</ul>



<p>However, before we begin discussing these components, we need to look at the Resource Reservation Protocol, which is the signaling protocol used between QOS senders and QOS receivers. RSVP plays a major role in QOS and the integration of the three major components of QOS.</p>

<A NAME="346"><H2>Resource Reservation Protocol</H2></A>

<p>Resource Reservation Protocol (RSVP) is the glue that binds the network, application, and policy components into one cohesive unit. RSVP carries resource reservation requests through the network, which can be composed of different media. RSVP propagates a user's QOS requests to all RSVP-aware network devices along the data path, allowing resources to be reserved from all RSVP-enabled devices. As a result, the network nodes can indicate whether the network can meet the desired levels of service.</p>

<p>The RSVP protocol reserves network resources by establishing <i>flows</i> end to end through the network. A flow is a network path associated with one or more senders, one or more receivers, and a specific level of QOS. A sending host wanting to send data that requires a specific level of QOS issues a PATH message toward the intended recipient or recipients. This PATH message contains the bandwidth requirements. The relevant parameters are propagated along the path to the intended recipients.</p>

<p>A receiving host that is interested in this data reserves the resources for the flow (and the entire path from the sender) by sending a RESV (reserve) message back toward the sender. As this occurs, intermediate RSVP-enabled devices decide whether they can accommodate the requested bandwidth requirements and ensure that the user who is requesting resources actually has the permission to do so. If the requested bandwidth is available and the user's policy settings indicate the user has the right to the request, each intermediate RSVP-enabled device commits the resources and propagates the RESV message back toward the sender.</p>

<p>When the sender receives the RESV message, QOS data can begin to flow. Periodically, each endpoint within the flow sends out PATH and RESV messages to reaffirm the reservation and to provide network information in case the levels of available bandwidth change. Also, by periodically refreshing PATH and RESV messages, the RSVP protocol remains dynamic. In the event that a better (for example, faster) route becomes available, these refresh messages can discover a new route. When we discuss QOS from Winsock later in this chapter, we'll return to RSVP and how the Winsock API calls invoke it.</p>

<p>Be aware of one important aspect of the session setup and RSVP: it is a one-way reservation. This is the case even if the application requests bandwidth requirements for both sending and receiving. One session is initiated for the sending requirements and another session is started for the receiving requirements. Later in this chapter, we will discuss the criteria required for initiating an RSVP session.</p>

<A NAME="347"><H2>Network Components</H2></A>

<p>In order for end-to-end QOS to work, the network devices between the two endpoints must also be able to differentiate traffic priorities. This way they can route traffic in a manner that satisfies the QOS guarantee that an application received. Additionally, these network devices must be able to determine whether enough bandwidth is available on the network when an application requests bandwidth. To support these requirements, the following components have been created:</p>

<ul>
<p><li> <b>802.1p</b> A standard for prioritizing packets in a subnet by setting 3 bits within the MAC header of packets</li></p>

<p><li> <b>IP Precedence</b> A method to establish priority for IP packets</li></p>

<p><li> <b>Layer 2 signaling</b> A mechanism for mapping RSVP objects to native WAN QOS components in OSI Layer 2 of a network</li></p>

<p><li> <b>Subnet Bandwidth Manager (SBM)</b> A component that manages shared media network bandwidth</li></p>

<p><li> <b>Resource Reservation Protocol (RSVP)</b> A protocol that carries QOS requests and information to QOS-aware network devices along the path between a sender and one or more receivers</li></p>
</ul>



<A NAME="348"><H3>802.1p</H3></A>

<p>A major part of enforcing QOS provisions and avoiding treating all packets equally lies on hubs and switches within the network. Hubs and switches lie within Layer 2 of the OSI reference model and as a result are aware of fields only within the media access control (MAC) header at the beginning of each packet.</p>

<p>802.1p is a standard that prioritizes network packets by setting a 3-bit precedence value in the MAC header. When a subnet becomes congested on non-802.1p networks, switches and routers are unable to keep up with the amount of traffic and a delay is introduced. On the other hand, switches and routers on 802.1p networks can begin prioritizing incoming traffic based on the precedence bits and give the higher-priority packets preferential treatment.</p>

<p>Implementing 802.1p for QOS requires specialized hardware capable of recognizing this 3-bit field. Network interface cards (NIC), network drivers, and network switches all must be 802.1p-aware.</p>

<A NAME="349"><H3>IP Precedence</H3></A>

<p>IP Precedence is a method of specifying precedence values at a higher level than 802.1p. This method allows packets passing through OSI Layer 3 devices&#8212;such as routers&#8212;to have their relative priorities differentiated. IP Precedence is implemented by using the type of service (TOS) field within the IP header to establish varying levels of priority. Based on these bits, routers can establish priority queues to service the different priority levels, which means higher priority traffic receives better service from routers.</p>

<p>As with 802.1p, in order for IP Precedence to work, all Layer 3 devices on the network must be able to understand the significance of the IP Precedence bits and handle traffic accordingly.</p>

<A NAME="350"><H3>Layer 2 signaling</H3></A>

<p>Layer 2 signaling is necessary when traffic traverses a wide area network (WAN). Typically a WAN links several networks over a variety of communications hardware. Thus, a WAN can manipulate Layer 1, Layer 2, and Layer 3 information as data is transmitted. To guarantee end-to-end QOS, the WAN link must understand the prioritization of QOS traffic. To accomplish this understanding, QOS provides a method for mapping RSVP and other QOS parameters to the WAN's native underlying Layer 2 signaling method&#8212;the means by which WAN technologies implement their own native QOS.</p>

<A NAME="351"><H3>Subnet Bandwidth Manager</H3></A>

<p>The Subnet Bandwidth Manager (SBM) manages the resources on a given shared media network, such as Ethernet. The SBM is also responsible for handling policy-based admission control for QOS applications. An SBM is necessary on shared media networks because when an endpoint requests QOS for an application, each network device admits or rejects the request based on the allocation of the network device's private resources. The network devices are not aware of the available resources on the shared media. The SBM solves this problem by becoming a broker for these devices. The SBM is also closely tied to the Admission Control Service (ACS) that is a part of the policy component. The SBM must check to ensure that an application (or user) requesting bandwidth has the privileges to do so. Note that the SBM for a network can be a host running Windows 2000 Server.</p>

<A NAME="352"><H2>Application Components</H2></A>

<p>You now have a good idea of network requirements for supporting QOS. We must consider how the local system prioritizes data based on the QOS levels that an application has requested. For the local system to support QOS, the following components are necessary:</p>

<ul>
<p><li> <b>GQOS service provider</b> A service provider that invokes other QOS components</li></p>

<p><li> <b>Traffic Control module</b> The module that controls the traffic leaving the computer (This module includes the Generic Packet Classifier, the Packet Scheduler, and the Packet Shaper.)</li></p>

<p><li> <b>Resource Reservation Protocol (RSVP)</b> The protocol that is invoked by the GQOS service provider and that carries the reservation request across the network</li></p>

<p><li> <b>GQOS API</b> The programmatic interface to GQOS, such as Winsock</li></p>

<p><li> <b>Traffic Control (TC) API</b> The programmatic interface to the Traffic Control components regulating traffic on the local host</li></p>
</ul>



<A NAME="353"><H3>GQOS service provider</H3></A>

<p>The GQOS service provider is the GQOS component that invokes nearly all resulting QOS facilities. The GQOS service provider initiates Traffic Control functionality (if appropriate) and implements, maintains, and handles RSVP signaling for all GQOS functionality.</p>

<p>In order to find the QOS-enabled service provider(s) on your host, you can query the provider catalog with <i>WSAEnumProtocols</i>. The flag to check whether a provider is QOS-enabled is within the <i>WSAPROTOCOL_INFO</i> structure returned from <i>WSAEnumProtocols</i>. The field of interest is <i>dwServiceFlags1</i>, and the flag to check for is <i>XP1_QOS_SUPPORTED</i>. For more information about <i>WSAEnumProtocols</i>, consult <a href="ch05a.htm">Chapter 5</A>.</p>

<A NAME="354"><H3>Traffic Control module</H3></A>

<p>Traffic Control (TC) plays a significant and central role in QOS. Within TC, packets are prioritized both within and outside the network node on which TC is enabled. The effects of this preferential treatment of packets as they flow through the system and through the network reach across the entire network and therefore directly affect QOS characteristics. The TC module is implemented through three modules: the Generic Packet Classifier, the Packet Scheduler, and the Packet Shaper.</p>

<p><b>Generic Packet Classifier</b></p>

<p>The duty of the Generic Packet Classifier (GPC) is to classify and prioritize packets within network components. The GPC performs this prioritization for activities such as CPU time or transmission onto the network.</p>

<p>The GPC accomplishes this prioritization by creating lookup tables and classification services within the network stack. This becomes the first step in the prioritization process for network traffic.</p>

<p><b>Packet Scheduler</b></p>

<p>Packet scheduling controls the way data transmission is performed, which is a key function of QOS. The Packet Scheduler is the traffic control module that regulates how much data an application, or flow, is allowed, essentially enforcing QOS parameters set for a particular flow.</p>

<p>The Packet Scheduler takes the prioritization scheme provided by the GPC and provides different levels of service to the various priority levels. For example, data that has been classified by the GPC as high priority receives preferential treatment within the Packet Scheduler.</p>

<p><b>Packet Shaper</b></p>

<p>The purpose of the Packet Shaper is to regulate the transmission of data from data flows onto the network. Most applications read and write data in bursts; however, many QOS applications need a particular data rate for sent data. Therefore, the Packet Shaper schedules the transmission of data over a period of time, smoothing out network usage and resulting in a more evenly loaded network.</p>

<A NAME="355"><H3>Traffic Control API</H3></A>

<p>The Traffic Control API is the interface to the components that regulate network traffic on the local host. This includes methods for manipulating the Generic Packet Classifier, the Packet Scheduler, and the Packet Shaper. Some of the Traffic Control functions are implicitly invoked through calls made to Winsock GQOS-enabled functions that are serviced by the GQOS Service Provider. However, applications that need to manipulate the Traffic Control components directly can do so with the Traffic Control API functions. These functions are beyond the scope of this book. (Consult the Platform SDK for more information.) We will cover the Winsock GQOS API later in this chapter.</p>

<A NAME="356"><H2>Policy Components</H2></A>

<p>Policy, the third and final component of GQOS, controls the allocation of resources to QOS-enabled applications. Policy components are of most interest to system administrators who want to control the allocation of resources based on users or on the class of application requesting bandwidth. Policy components include the following:</p>

<ul>
<p><li> <b>Admission Control Service (ACS)</b> A Windows 2000 Server service that intercepts RSVP PATH and RESV messages to control access of QOS-enabled clients to the various levels of guarantees offered through QOS</li></p>

<p><li> <b>Local Policy Module (LPM)</b> Provides resource-access decisions based on policies configured through ACS for the SBM</li></p>

<p><li> <b>Policy Element (PE)</b> Resides on the client and provides authentication information to facilitate reservation requests</li></p>
</ul>



<A NAME="357"><H3>Admission Control Service</H3></A>

<p>The Admission Control Service (ACS) regulates network usage for QOS-enabled applications. This is done through the RSVP protocol. The ACS intercepts both PATH and RESV messages in order to verify that the requesting application has sufficient privileges. Once an RSVP message is intercepted, it is passed to the Local Policy Module (LPM), which performs the actual authentication.</p>

<p>The ACS resides on a Windows 2000 machine and can be configured by the system administrator, who can set resource limits on users, applications, or groups.</p>

<A NAME="358"><H3>Local Policy Module</H3></A>

<p>The Local Policy Module (LPM) is closely related to the ACS in that the ACS intercepts RSVP messages, inserts user information, and passes them to the LPM. At this point, the LPM looks the user up in the Active Directory to verify policy information. If network resources are available (as determined by the SBM), and if the authentication check succeeds, the RSVP message intercepted by the ACS is sent to the next hop. Of course, if the user does not have the necessary permissions to request a certain level of QOS, an error indicating this is generated and returned within the RSVP message.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>For policy checks to succeed, users must be part of a Windows 2000 domain.</blockquote></div>
</p>

<A NAME="359"><H3>Policy Element</H3></A>

<p>This component actually contains the policy information that the Local Policy Module requests. These data structures are not covered in this book because they deal mainly with administration of network resources, which is not the focus of the book.</p>

</BODY>
</HTML>




