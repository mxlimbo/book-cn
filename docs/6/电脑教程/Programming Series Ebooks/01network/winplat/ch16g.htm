<HTML>
<HEAD>
<TITLE>Connection Management</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16f.htm" , "ch16h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="499"><H1>Connection Management</H1></A>

<p>RAS has three useful functions that allow you to retrieve the properties of connections established on your system: <i>RasEnumConnections</i>, <i>RasGetSubEntryHandle</i>, and <i>RasGetProjectionInfo</i>. The <i>RasEnumConnections</i> function lists all active RAS connections and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasEnumConnections(
    LPRASCONN lprasconn,
    LPDWORD lpcb, 
    LPDWORD lpcConnections
);
</pre>
</td></tr></table>
</p>

<p>The <i>lprasconn</i> parameter is an application buffer that will receive an array of <i>RASCONN</i> structures. A <i>RASCONN</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASCONN 
{ 
    DWORD dwSize; 
    HRASCONN hrasconn; 
    TCHAR szEntryName[RAS_MaxEntryName + 1]; 
#if (WINVER &gt;= 0x400) 
    CHAR szDeviceType[RAS_MaxDeviceType + 1]; 
    CHAR szDeviceName[RAS_MaxDeviceName + 1]; 
#endif
#if (WINVER &gt;= 0x401)
    CHAR szPhonebook[MAX_PATH];
    DWORD dwSubEntry;
#endif
#if (WINVER &gt;= 0x500)
    GUID guidEntry;
#endif
} RASCONN; 
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Indicates the size (in bytes) of a <i>RASCONN</i> structure.</li></p>

<p><li><b><i>hrasconn</i></b> Receives the connection handle that is created by <i>RasDial</i>.</li></p>

<p><li><b><i>szEntryName</i></b> Receives the phonebook entry that was used to establish the connection. If an empty string was used, the field will return a string with a period (.) followed by the phone number used.</li></p>

<p><li><b><i>szDeviceType</i></b> Receives a string describing the device type used in the connection.</li></p>

<p><li><b><i>szDeviceName</i></b> Receives a string with the name of the device that was used to make the connection.</li></p>

<p><li><b><i>szPhonebook</i></b> Receives the full path to the phonebook for the entry that made the connection.</li></p>

<p><li><b><i>dwSubEntry</i></b> Receives a subentry index of a multilink phonebook entry.</li></p>

<p><li><b><i>guidEntry</i></b> On Windows 2000, receives a GUID for the phonebook entry used to make the connection.</li></p>
</ul>

<p>You need to pass to <i>RasEnumConnections</i> a large enough buffer to hold several <i>RASCONN</i> structures; otherwise, this function will fail with the error <i>ERROR_BUFFER_TOO_SMALL</i>. Furthermore, the first <i>RASCONN</i> structure in your buffer must have the <i>dwSize</i> field set to the byte size of a <i>RASCONN</i> structure. The next parameter, <i>lpcb</i>, is a pointer to a variable that you must set to the size (in bytes) of your <i>lprasconn</i> array. When this function returns, <i>lpcb</i> will contain the number of bytes required to enumerate all connections. If you don't supply a large enough buffer, you can always try again with the correct buffer size returned in <i>lpcb</i>. The <i>lpcConnections</i> parameter is a pointer to a variable that receives a count of the number of <i>RASCONN</i> structures written to <i>lprasconn</i>.</p>

<p>The <i>RasGetSubEntryHandle</i> function, defined as follows, allows you to retrieve a connection handle for a specified subentry of a multilink connection.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetSubEntryHandle( 
    HRASCONN hrasconn, 
    DWORD dwSubEntry, 
    LPHRASCONN lphrasconn
);
</pre>
</td></tr></table>
</p>

<p>The <i>hrasconn</i> parameter is a RAS connection handle of a multilink connection. The <i>dwSubEntry</i> parameter is a subentry index of a device in the multilink connection. The <i>lphrasconn</i> parameter receives the connection handle for the subentry device.</p>

<p>With the RAS connection handles you receive from <i>RasEnumConnections</i> and <i>RasGetSubEntryHandle</i>, you can obtain network protocol-specific information that is used over an established RAS connection. This network protocol-specific information is known as <i>projection information.</i> A remote access server uses projection information to represent a remote client on the network. For example, when you make a RAS connection that uses the IP protocol over a framing protocol, IP configuration information (such as an assigned IP address) is established from the RAS service to your client. You can retrieve projection information for the protocols that travel over the PPP framing protocol by calling the <i>RasGetProjectionInfo</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetProjectionInfo(
    HRASCONN hrasconn,
    RASPROJECTION rasprojection,
    LPVOID lpprojection,
    LPDWORD lpcb
);
</pre>
</td></tr></table>
</p>

<p>The <i>hrasconn</i> parameter is a RAS connection handle. The <i>rasprojection</i> parameter is a <i>RASPROJECTION</i> enumeration type that allows you to specify a protocol to receive connection information for. The <i>lpprojection</i> parameter receives a data structure that is associated with the enumeration type specified in <i>rasprojection</i>. The final parameter, <i>lpcb</i>, is a pointer to a variable that you must set to the size of your <i>lpprojection</i> structure. When this function completes, this variable will contain the size of the buffer needed to obtain the projection information.</p>

<p>The following <i>RASPROJECTION</i> enumeration types allow you to receive connection information:</p>

<ul>
<p><li> <i>RASP_Amb</i></li></p>

<p><li> <i>RASP_PppNbf</i></li></p>

<p><li> <i>RASP_PppIpx</i></li></p>

<p><li> <i>RASP_PppIp</i></li></p>
</ul>

<p>If you specify a <i>RASP_Amb</i> enumeration type, you will receive a <i>RASAMB</i> structure that is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASAMB 
{
    DWORD dwSize; 
    DWORD dwError;
    TCHAR szNetBiosError[NETBIOS_NAME_LEN + 1]; 
    BYTE bLana; 
} RASAMB;
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Should be set to the size (in bytes) of a <i>RASAMB</i> structure.</li></p>

<p><li><b><i>dwError</i></b> Receives an error code from the PPP negotiation process.</li></p>

<p><li><b><i>szNetBiosError</i></b> Receives a NetBIOS name if a name conflict occurs during the authentication process of PPP. If <i>dwError</i> returns <i>ERROR_NAME_EXISTS_ON_NET</i>, <i>szNetBiosError</i> will receive the name that caused the error.</li></p>

<p><li><b><i>bLana</i></b> Identifies the NetBIOS LAN adapter (LANA) number that was used to establish the remote access connection.</li></p>
</ul>

<p>If you specify a <i>RASP_PppNbf</i> enumeration type to <i>RasGetProjectionInfo</i>, you will receive a <i>RASPPPNBF</i> structure that is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASPPPNBF 
{ 
    DWORD dwSize; 
    DWORD dwError; 
    DWORD dwNetBiosError; 
    TCHAR szNetBiosError[NETBIOS_NAME_LEN + 1]; 
    TCHAR szWorkstationName[NETBIOS_NAME_LEN + 1]; 
    BYTE bLana; 
} RASPPPNBF;
</pre>
</td></tr></table>
</p>

<p>The fields of <i>RASPPPNBF</i> are like the fields of the <i>RASAMB</i> structure except that <i>RASPPPNBF</i> contains two additional fields: <i>szWorkstationName</i> and <i>dwNetBiosError</i>. The <i>szWorkstationName</i> field receives the NetBIOS name that is used to identify your workstation on the network you are connecting to. The <i>dwNetBiosError</i> field receives the NetBIOS error that occurred.</p>

<p>If you specify a <i>RASP_PppIpx</i> enumeration type to <i>RasGetProjectionInfo</i>, you will receive a <i>RASPPPIPX</i> structure that is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASPPPIPX 
{ 
    DWORD dwSize; 
    DWORD dwError; 
    TCHAR szIpxAddress[RAS_MaxIpxAddress + 1]; 
} RASPPPIPX;
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Should be set to the size (in bytes) of a <i>RASPPPIPX</i> structure</li></p>

<p><li><b><i>dwError</i></b> Receives an error code from the PPP negotiation process</li></p>

<p><li><b><i>szIpxAddress</i></b> Receives a string representing the client's IPX address on the remote network</li></p>
</ul>

<p>If you specify a <i>RASP_PppIp</i> enumeration type to <i>RasGetProjectionInfo</i>, you will receive a <i>RASPPPIP</i> structure that is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASPPPIP 
{ 
    DWORD dwSize; 
    DWORD dwError; 
    TCHAR szIpAddress[RAS_MaxIpAddress + 1];
    TCHAR szServerIpAddress[RAS_MaxIpAddress + 1]; 
} RASPPPIP; 
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Should be set to the size (in bytes) of a <i>RASPPPIP</i> structure</li></p>

<p><li><b><i>dwError</i></b> Receives an error code from the PPP negotiation process</li></p>

<p><li><b><i>szIpAddress</i></b> Receives a string representing the client's IP address</li></p>

<p><li><b><i>szServerIpAddress</i></b> Receives a string representing the server's IP address</li></p>
</ul>

<p>Figure 16-4 demonstrates how to retrieve the IP addresses assigned to an IP connection that is made over RAS.</p>

<p><b>Figure 16-4.</b>  <i>Using</i> RasGetProjectionInfo <i>on an IP connection</i></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
lpProjection = (RASPPPIP *) GlobalAlloc(GPTR, cb);
lpProjection-&gt;dwSize = sizeof(RASPPPIP);
cb = sizeof(RASPPPIP);
     
Ret = RasGetProjectionInfo(hRasConn, RASP_PppIp, 
    lpProjection, &amp;cb);
     
if (Ret != ERROR_SUCCESS)
{
    printf(&quot;RasGetProjectionInfo failed with error %d&quot;, Ret);
    return;
}
else
{
    printf(&quot;\nRas Client IP address: %s\n&quot;, 
        lpProjection-&gt;szIpAddress);
    printf(&quot;Ras Server IP address: %s\n&quot;, 
        lpProjection-&gt;szServerIpAddress);
}
</pre>
</td></tr></table>
</p>

</BODY>
</HTML>



