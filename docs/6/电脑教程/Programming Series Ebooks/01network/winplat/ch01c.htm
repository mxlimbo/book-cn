<HTML>
<HEAD>
<TITLE>NetBIOS Programming Basics</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm" , "ch01d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="9"><H1>NetBIOS Programming Basics</H1></A>

<p>Now that we have gone over some of the basic concepts of NetBIOS, we will discuss the NetBIOS API set, which is easy because only one function exists:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
UCHAR Netbios(PNCB pNCB);
</pre>
</td></tr></table>
</p>

<p>All the function declarations, constants, and so on for NetBIOS are defined in the header file Nb30.h. The only library necessary for linking NetBIOS applications is Netapi32.lib. The most important feature of this function is the parameter <i>pNCB</i>, which is a pointer to a network control block (NCB). This is a pointer to an <i>NCB</i> structure that contains all the information that the required <i>Netbios</i> function needs to execute a NetBIOS command. The definition of this structure is as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _NCB 
{
    UCHAR     ncb_command;
    UCHAR     ncb_retcode;
    UCHAR     ncb_lsn;
    UCHAR     ncb_num;
    PUCHAR    ncb_buffer;
    WORD      ncb_length;
    UCHAR     ncb_callname[NCBNAMSZ];
    UCHAR     ncb_name[NCBNAMSZ];
    UCHAR     ncb_rto;
    UCHAR     ncb_sto;
    void      (*ncb_post) (struct _NCB *);
    UCHAR     ncb_lana_num;
    UCHAR     ncb_cmd_cplt;
    UCHAR     ncb_reserve[10];
    HANDLE    ncb_event;
} * PNCB, NCB;
</pre>
</td></tr></table>
</p>

<p>Not all members of the structure will be used in every call to NetBIOS; some of the data fields are output parameters (in other words, set on the return from the <i>Netbios</i> call). One important tip: it is always a good idea to zero out the <i>NCB</i> structure before filling in members prior to a <i>Netbios</i> call. Take a look at Table 1-4, which describes the usage of each field. Additionally, the command reference in Appendix A contains a detailed summary of each NetBIOS command and its required (and optional) fields in an <i>NCB</i> structure.</p>

<p><b>Table 1-4.</b> <i>NCB structure members</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th><i>Field</i>  </th>
<th> <i>Definition</i> </th></tr>
<tr>
<td valign="top"><i>ncb_command</i>  </td>
<td valign="top">Specifies the NetBIOS command to execute. Many commands can be executed synchronously or asynchronously by bitwise ORing the <i>ASYNCH</i> (0x80) flag and the command.  </td></tr>
<tr>
<td valign="top"><i>ncb_retcode</i>  </td>
<td valign="top">Specifies the return code for the operation. The function sets this value to <i>NRC_PENDING</i> while an asynchronous operation is in progress.  </td></tr>
<tr>
<td valign="top"><i>ncb_lsn</i>  </td>
<td valign="top">Identifies the local session number that uniquely identifies a session within the current environment. The function returns a new session number after a successful <i>NCBCALL</i> or <i>NCBLISTEN</i> command.  </td></tr>
<tr>
<td valign="top"><i>ncb_num</i>  </td>
<td valign="top">Specifies the number of the local network name. A new number is returned for each call with an <i>NCBADDNAME</i> or <i>NCBADDGRNAME</i> command. You must use a valid number on all datagram commands.  </td></tr>
<tr>
<td valign="top"><i>ncb_buffer</i>  </td>
<td valign="top">Points to the data buffer. For commands that send data, this buffer is the data to send. For commands that receive data, this buffer will hold the data on the return from the <i>Netbios</i> function<i>.</i> For other commands, such as <i>NCBENUM</i>, the buffer will be the predefined structure <i>LANA_ENUM</i>.  </td></tr>
<tr>
<td valign="top"><i>ncb_length</i>  </td>
<td valign="top">Specifies the length of the buffer in bytes. For receive commands, <i>Netbios</i> sets this value to the number of bytes received. If the specified buffer is not large enough, <i>Netbios</i> returns the error <i>NRC_BUFLEN</i>.  </td></tr>
<tr>
<td valign="top"><i>ncb_callname</i>  </td>
<td valign="top">Specifies the name of the remote application.  </td></tr>
<tr>
<td valign="top"><i>ncb_name</i>  </td>
<td valign="top">Specifies the name by which the application is known.  </td></tr>
<tr>
<td valign="top"><i>ncb_rto</i>  </td>
<td valign="top">Specifies the timeout period for receive operations. This value is specified as a multiple of 500-millisecond units. The value 0 implies no timeout. This value is set for <i>NCBCALL</i> and <i>NCBLISTEN</i> commands that affect subsequent <i>NCBRECV</i> commands.  </td></tr>
<tr>
<td valign="top"><i>ncb_sto</i>   </td>
<td valign="top">Specifies the timeout period for send operations. You specify the value in 500-millisecond units. The value 0 implies no timeout. This value is set for <i>NCBCALL</i> and <i>NCBLISTEN</i> commands that affect subsequent <i>NCBSEND</i> and <i>NCBCHAINSEND</i> commands.  </td></tr>
<tr>
<td valign="top"><i>ncb_post</i>  </td>
<td valign="top">Specifies the address of the post routine to call upon completion of the asynchronous command. The function is defined as  <p><pre>void CALLBACK PostRoutine(PNCB pncb);</pre></p> <p>where <i>pncb</i> points to the network control block of the completed command.</p></td></tr>
<tr>
<td valign="top"><i>ncb_lana_num</i>  </td>
<td valign="top">Specifies the LANA number to execute the command on.  </td></tr>
<tr>
<td valign="top"><i>ncb_cmd_cplt</i>  </td>
<td valign="top">Specifies the return code for the operation. <i>Netbios</i> sets this value to <i>NRC_PENDING</i> while an asynchronous operation is in progress.  </td></tr>
<tr>
<td valign="top"><i>ncb_reserve</i>  </td>
<td valign="top">Reserved. Must be 0.  </td></tr>
<tr>
<td valign="top"><i>ncb_event</i>  </td>
<td valign="top">Specifies a handle to a Windows event object set to the nonsignaled state. When an asynchronous command is completed, the event is set to its signaled state. Only manual reset events should be used. This field must be 0 if <i>ncb_command</i> does not have the <i>ASYNCH</i> flag set or if <i>ncb_post</i> is nonzero; otherwise, <i>Netbios</i> returns the error <i>NRC_ILLCMD</i>.  </td></tr>
</table></p>


<A NAME="10"><H2>Synchronous vs. Asynchronous</H2></A>

<p>When calling the <i>Netbios</i> function, you have the option of making the call synchronous or asynchronous. All NetBIOS commands by themselves are synchronous, which means the call to <i>Netbios</i> blocks until the command completes. For an <i>NCBLISTEN</i> command, the call to <i>Netbios</i> does not return until a client establishes a connection or until an error of some kind occurs. To make a command asynchronous, perform a logical OR of the NetBIOS command with the flag <i>ASYNCH</i>. If you specify the <i>ASYNCH</i> flag, you must specify either a post routine in the <i>ncb_post</i> field or an event handle in the <i>ncb_event</i> field. When an asynchronous command is executed, the value returned from <i>Netbios</i> is <i>NRC_GOODRET</i> (0x00) but the <i>ncb_cmd_cplt</i> field is set to <i>NRC_PENDING</i> (0xFF). Additionally, the <i>Netbios</i> function sets the <i>ncb_cmd_cplt</i> field of the <i>NCB</i> structure to <i>NRC_PENDING</i> until the command completes. After the command completes,
the <i>ncb_cmd_cplt</i> field is set to the return value of the command. <i>Netbios</i> also sets the <i>ncb_retcode</i> field to the return value of the command upon completion.</p>

</BODY>
</HTML>




