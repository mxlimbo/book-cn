<HTML>
<HEAD>
<TITLE>Transport Service Providers</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14b.htm" , "ch14d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="416"><H1>Transport Service Providers</H1></A>

<p>Two types of transport service providers are used in Winsock 2: base service providers and layered service providers. <i>Base</i> service providers implement the actual details of a network transport protocol&#8212;such as TCP/IP&#8212;including core network protocol functions such as sending and receiving data on a network. <i>Layered</i> service providers implement only higher-level custom communication functions and rely on an underlying base service provider for the actual exchange of data on a network. For example, you can implement a data security manager or a bandwidth manager on top of an existing base TCP/IP provider. Figure 14-2 shows how one or more layered providers can be installed between Ws2_32.dll and a base爌rovider.</p>

<p>
<A HREF="javascript:fullSize('F14JI02x.htm')"> <img src="images/F14JI02.JPG" width=404 height=320 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14-2.</b> <i> Layered provider architecture</i><!-- /caption -->
</p>

<p>This section focuses on the development aspects of a layered transport service provider. If you're developing a base service provider, the principles described here apply. However, we don't detail what is involved in implementing a particular SPI function from the ground up. For example, we don't supply the details of how the <i>WSPSend</i> SPI function writes data to a network adapter. Instead we show how the <i>WSPSend</i> function of a layered provider invokes the <i>WSPSend</i> function of a lower provider, which is a requirement of most layered service providers. Essentially, most of the work involved in developing a layered provider is relaying the SPI calls of your provider to the next provider below you. The tricky part is handling I/O calls from the Winsock I/O models described in <a href="ch08a.htm">Chapter 8</A>, which we will discuss later in this chapter. On the companion CD-ROM, we provide an example named LSP that demonstrates how to implement a layered service provider that simply counts how many bytes are transmitted over a socket using the IP transport protocol. The Microsoft Platform SDK also features a more advanced layered service provider example named &quot;layered&quot; that can be found in the MSDN Platform SDK examples downloaded from <i>ftp://ftp.microsoft.com/bussys/WinSock/winsock2/layered.zip.</i></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Throughout this section on transport service providers, we often use the terms &quot;SPI client&quot; and &quot;lower provider.&quot; An <i>SPI client</i> can be either Winsock 2's Ws2_32.dll or another layered service provider placed above your service provider. An SPI client is never a Winsock application itself because Winsock applications must use the Winsock 2 API exported from Ws2_32.dll. The term &quot;lower provider&quot; is used only when we describe development aspects of a layered service provider. A lower provider can be either another layered service provider or a base server provider. As you will see, you can have multiple layered service providers installed on a machine; thus there is a chance that a layered provider might be installed below your provider.
</blockquote></div>
</p>

<A NAME="417"><H2>WSPStartup</H2></A>

<p>Winsock 2 transport service providers are implemented as standard Windows dynamic-link library modules in which you must export a <i>DllMain</i> function. Additionally, you must export a single function entry named <i>WSPStartup</i>. When a caller (the SPI client) invokes <i>WSPStartup</i>, it exposes 30 additional SPI functions that make up a transport service provider via a function dispatch table passed as a parameter. (See燭able