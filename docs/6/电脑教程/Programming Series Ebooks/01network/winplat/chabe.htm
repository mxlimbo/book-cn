<HTML>
<HEAD>
<TITLE>ARP</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chabd.htm" , "chaca.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="539"><H1>ARP</H1></A>

<p>The Arp.exe utility is used to view and manipulate the ARP cache. The Platform SDK sample that emulates Arp.exe by using the IP Helper functions is named Iparp.exe. ARP (which, as you'll recall, stands for address resolution protocol) is responsible for resolving an IP address to a physical MAC address. Machines cache this information for performance reasons, and it is possible to access this information through the Arp.exe utility. Using this utility, you can display the ARP table with the -a option, delete an entry with the -d option, or add an entry with the -s option. In the next section, we will describe how to print the ARP cache, add an entry to the ARP table, and delete ARP entries.</p>

<p>All the IP Helper functions discussed in this section are available on Windows 98, Windows 2000, and Windows NT 4 Service Pack 4 (or later).</p>

<p>The simplest function is obtaining the ARP table. The IP Helper function that obtains this table is <i>GetIpNetTable</i>, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetIpNetTable ( 
    PMIB_IPNETTABLE pIpNetTable, 
    PULONG          pdwSize,
    BOOL            bOrder
);
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>pIpNetTable</i>, is a pointer to an <i>MIB_IPNETTABLE</i> structure that returns the ARP information. You must supply a sufficiently large buffer when calling this function. As with most other IP Helper functions, passing <i>NULL</i> for this parameter will return the buffer size needed as the parameter <i>pdwSize</i> and the error <i>ERROR_INSUFFICIENT_BUFFER</i>. Otherwise, <i>pdwSize</i> indicates the size of the buffer passed as <i>pIpNetTable</i>. The last parameter, <i>bOrder</i>, indicates whether the returned IP entries should be sorted in ascending IP order.</p>

<p>The <i>MIB_IPNETTABLE</i> structure is a wrapper for an array of <i>MIB_IPNETROW</i> structures and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPNETTABLE 
{ 
    DWORD        dwNumEntries; 
    MIB_IPNETROW table[ANY_SIZE]; 
} MIB_IPNETTABLE, *PMIB_IPNETTABLE;
</pre>
</td></tr></table>
</p>

<p>The <i>dwNumEntries</i> field indicates the number of array entries present in the <i>table</i> field. The <i>MIB_IPNETROW</i> structure contains the actual ARP entry information and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPNETROW { 
    DWORD dwIndex; 
    DWORD dwPhysAddrLen;
    BYTE  bPhysAddr[MAXLEN_PHYSADDR];
    DWORD dwAddr;
    DWORD dwType;
} MIB_IPNETROW, *PMIB_IPNETROW;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are as follows:</p>

<ul>
<p><li><b><i>dwIndex</i></b> Specifies the index of the adapter.</li></p>

<p><li><b><i>dwPhysAddrLen</i></b> Indicates the length, in bytes, of the physical address contained in the <i>bPhysAddr</i> field.</li></p>

<p><li><b><i>bPhysAddr</i></b> Is an array of bytes that contains the physical (MAC) address of the adapter.</li></p>

<p><li><b><i>dwAddr</i></b> Specifies the IP address of the adapter.</li></p>

<p><li><b><i>dwType</i></b> Indicates the type of the ARP entry. Table B-6 shows the possible values for this field.</li></p>
</ul>

<p><b>Table B-6.</b> <i>Possible ARP entry types</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th><i>ARP Type</i>  </th>
<th><i>Meaning</i>  </th></tr>
<tr>
<td valign="top"><i>MIB_IPNET_TYPE_STATIC</i>  </td>
<td valign="top">Static entry  </td></tr>
<tr>
<td valign="top"><i>MIB_IPNET_TYPE_DYNAMIC</i>  </td>
<td valign="top">Dynamic entry  </td></tr>
<tr>
<td valign="top"><i>MIB_IPNET_TYPE_INVALID</i>  </td>
<td valign="top">Invalid entry  </td></tr>
<tr>
<td valign="top"><i>MIB_IPNET_TYPE_OTHER</i>  </td>
<td valign="top">Other entry  </td></tr>
</table></p>



<A NAME="540"><H2>Adding an ARP Entry</H2></A>

<p>The next function of ARP is adding an entry to the ARP cache, which is another relatively simple operation. The IP Helper function to add an ARP entry is <i>SetIpNetEntry</i> and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD SetIpNetEntry ( 
    PMIB_IPNETROW pArpEntry 
);
</pre>
</td></tr></table>
</p>

<p>The only argument is the <i>MIB_IPNETROW</i> structure, which we covered in the previous section. To add an ARP entry, simply fill in the structure with the new ARP information. First you need to set the <i>dwIndex</i> field to the index of a local IP address that indicates the network on which the ARP entry applies. Remember that if you are given the IP address, you can map the IP to the index with the <i>GetIpAddrTable</i> function. The next field, <i>dwPhysAddrLen</i>, is typically set to 6. (Most physical addresses, such as ETHERNET MAC addresses, are 6 bytes in length.) The <i>bPhysAddr</i> byte array must be set to the physical address. Most MAC addresses are represented as 12 characters&#8212;for example, 00-A0-C9-A7-86-E8. These characters need to be encoded into the proper byte array locations of the <i>bPhysAddr</i> field. For example, the sample MAC address would be encoded into the following bytes:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
00000000 10100000 11001001 10100111 10000110 11101000
</pre>
</td></tr></table>
</p>

<p>The encoding method is the same used for encoding IPX and ATM addresses. (See <a href="ch06a.htm">Chapter 6</A> for more information.) The <i>dwAddr</i> field must be set to the IP address of the remote host you are entering the MAC address of. The last field, <i>dwType</i>, is set to one of the ARP entry types listed in Table B-6. Once the structure is filled, call <i>SetIpNetEntry</i> to add the ARP entry to the cache. Upon success, <i>NO_ERROR</i> is returned.</p>

<A NAME="541"><H2>Deleting an ARP Entry</H2></A>

<p>Deleting an ARP entry is similar to adding one except that the only information required is the interface index, <i>dwIndex</i>, and the IP address of the ARP entry to delete, <i>dwAddr</i>. The function to remove an ARP entry is <i>DeleteIpNetEntry</i>, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD DeleteIpNetEntry ( 
    PMIB_IPNETROW pArpEntry 
);
</pre>
</td></tr></table>
</p>

<p>Again, the only parameter is an <i>MIB_IPNETROW</i> structure, and the only information necessary for removing an ARP entry is the local IP index and the IP address of the entry to delete. Remember that the index number to a local IP interface can be obtained with the function <i>GetIpAddrTable</i>. Upon success, <i>NO_ERROR</i> is returned.</p>
</body>
</html>




