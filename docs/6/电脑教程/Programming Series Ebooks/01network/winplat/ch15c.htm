<HTML>
<HEAD>
<TITLE>Methods</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15b.htm" , "ch15d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="461"><H1>Methods</H1></A>

<p>The Winsock control has only a handful of methods. With a couple of exceptions, most of these method names mirror their Winsock equivalents. The method to read pending data is named <i>GetData</i>. Normally you would call the <i>GetData</i> method once the <i>DataArrival</i> event is triggered, notifying you that data has arrived. The method for sending data is named <i>SendData</i>. Additionally, a method named <i>PeekData</i> is similar to calling the Winsock <i>recv</i> function with the <i>MSG_PEEK</i> option. As always, message peeking is evil and should be avoided at all costs. Table 15-3 lists the available methods with their parameters. The methods themselves will be discussed in more detail in the client and server example sections later in this chapter.</p>

<p><b>Table 15-3.</b> <i>Winsock control methods</i></p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th><i>Method</i></th>
			<th><i>Parameters</i></th>
			<th><i>Return Value</i></th>
			<th><i>Description</i></th>
		</tr>
		
		<tr>
			<td valign="top"><i>Accept</i></td>
			<td valign="top"><i>RequestID</i></td>
			<td valign="top">Void</td>
			<td valign="top">For TCP connections only. Use this method to accept incoming connections when handling a <i>ConnectionRequest</i> event.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>Bind</i></td>
			<td valign="top"><i>LocalPort</i><br><i>LocalIP</i></td>
			<td valign="top">Void</td>
			<td valign="top">Binds the socket to the given local port and IP. Use <i>Bind</i> if you have multiple network adapters. <i>Bind</i> must be called before <i>Listen</i>.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>Close</i></td>
			<td valign="top">None</td>
			<td valign="top">Void</td>
			<td valign="top">Closes the connection or the listening socket.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>Connect</i></td>
			<td valign="top"><i>RemoteHost</i><br><i>RemotePort</i></td>
			<td valign="top">Void</td>
			<td valign="top">Establishes a TCP connection to the given <i>RemotePort</i> on the given <i>RemoteHost</i> number.</td>
		</tr>

		<tr>
			<td valign="top"><i>GetData</i></td>
			<td valign="top"><i>Data</i><br><i>Type</i><br><i>MaxLen</i></td>
			<td valign="top">Void</td>
			<td valign="top">Retrieves the current data pending. The  <i>Type</i> and <i>MaxLen</i> parameters are optional. The <i>Type</i> parameter defines the type of the data to be read. The <i>MaxLen</i> parameter specifies how many bytes or characters to retrieve. <i>GetData</i> ignores the <i>MaxLen</i> parameter for types other than byte array and string.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>Listen</i></td>
			<td valign="top">None</td>
			<td valign="top">Void</td>
			<td valign="top">Creates a socket and places it in listen mode. <i>Listen</i> is used only for TCP connections.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>PeekData</i></td>
			<td valign="top"><i>Data</i><br><i>Type</i><br><i>MaxLen</i></td>
			<td valign="top">Void</td>
			<td valign="top">Behaves exactly like <i>GetData</i> except that the data is not removed from the system's buffer.</td>
		</tr>
		
		<tr>
			<td valign="top"><i>SendData</i></td>
			<td valign="top"><i>Data</i></td>
			<td valign="top">Void</td>
			<td valign="top">Sends data to the remote computer. If a UNICODE string is passed, it will be converted to an ANSI string first. Always use a byte array for binary data.</td>
		</tr>
		
	</table>
</p>

</BODY>
</HTML>




