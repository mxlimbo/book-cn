<HTML>
<HEAD>
<TITLE>Other API Calls</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04c.htm" , "ch04e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="70"><H1>Other API Calls</H1></A>

<p>There are several additional named pipe functions that we haven't touched on yet. The first set of these API functions&#8212;<i>CallNamedPipe</i> and <i>TransactNamedPipe</i>&#8212;is designed to reduce coding complexity in an application. Both functions perform a write and read operation in one call. The <i>CallNamedPipe</i> function allows a client application to connect to a message-type pipe (and waits if an instance of the pipe is not available), writes to and reads from the pipe, and then closes the pipe. This is practically an entire client application written in one call. <i>CallNamedPipe</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL CallNamedPipe(
    LPCTSTR<i> lpNamedPipeName</i>, 
    LPVOID<i> lpInBuffer</i>, 
    DWORD<i> nInBufferSize</i>, 
    LPVOID<i> lpOutBuffer</i>, 
    DWORD<i> nOutBufferSize</i>, 
    LPDWORD<i> lpBytesRead</i>, 
    DWORD<i> nTimeOut</i> 
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpNamedPipeName</i> parameter is a string that represents the named pipe in UNC form. The <i>lpInBuffer</i> and <i>nInBufferSize</i> parameters represent the address and the size of the buffer that the application uses to write data to the server. The <i>lpOutBuffer</i> and <i>nOutBufferSize</i> parameters represent the address and the size of the buffer that the application uses to retrieve data from the server. The <i>lpBytesRead</i> parameter receives the number of bytes read from the pipe. The <i>nTimeOut</i> parameter specifies how many milliseconds to wait for the named pipe to be available.</p>

<p>The <i>TransactNamedPipe</i> function can be used in both a client and a server application. It is designed to combine read and write operations in one API call, thus optimizing network I/O by reducing send and receive transactions in the MSNP redirector. <i>TransactNamedPipe</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL TransactNamedPipe(
    HANDLE<i> hNamedPipe</i>, 
    LPVOID<i> lpInBuffer</i>, 
    DWORD<i> nInBufferSize</i>, 
    LPVOID<i> lpOutBuffer</i>, 
    DWORD<i> nOutBufferSize</i>, 
    LPDWORD<i> lpBytesRead</i>, 
    LPOVERLAPPED<i> lpOverlapped</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hNamedPipe</i> parameter identifies the named pipe returned by the <i>CreateNamedPipe</i> or <i>CreateFile</i> API functions. The <i>lpInBuffer</i> and <i>nInBufferSize</i> parameters represent the address and the size of the buffer that the application uses to write data to the pipe. The <i>lpOutBuffer</i> and <i>nOutBufferSize</i> parameters represent the address and the size of the buffer that the application uses to retrieve data from the pipe. The <i>lpBytesRead</i> parameter receives the number of bytes read from the pipe. The <i>lpOverlapped</i> parameter allows this <i>TransactNamedPipe</i> to operate asynchronously using overlapped I/O.</p>

<p>The next set of functions&#8212;<i>GetNamedPipeHandleState</i>, <i>SetNamedPipeHandleState</i>, and <i>GetNamedPipeInfo</i>&#8212;are designed to make named pipe client and server communication more flexible at run time. For example, you can use these functions to change the operating mode of a pipe at run time from message mode to byte mode and vice versa. <i>GetNamedPipeHandleState</i> retrieves information such as the operating mode (message mode and byte mode), pipe instance count, and buffer caching information about a specified named pipe. The information that <i>GetNamedPipeHandleState</i> returns can vary during the lifetime of an instance of the named pipe. <i>GetNamedPipeHandleState</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL GetNamedPipeHandleState( 
    HANDLE<i> hNamedPipe</i>, 
    LPDWORD<i> lpState</i>, 
    LPDWORD<i> lpCurInstances</i>, 
    LPDWORD<i> lpMaxCollectionCount</i>, 
    LPDWORD<i> lpCollectDataTimeout</i>, 
    LPTSTR<i> lpUserName</i>, 
    DWORD<i> nMaxUserNameSize</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hNamedPipe</i> parameter identifies the named pipe returned by the <i>CreateNamedPipe</i> or <i>CreateFile</i> function. The <i>lpState</i> parameter is a pointer to a variable that receives the current operating mode of the pipe handle. The <i>lpState</i> parameter can return the value <i>PIPE_NOWAIT</i> or the value <i>PIPE_READMODE_MESSAGE</i>. The <i>lpCurInstances</i> parameter is a pointer to a variable that receives the number of current pipe instances. The <i>lpMaxCollectionCount</i> parameter receives the maximum number of bytes to be collected on the client's computer before transmission to the server. The <i>lpCollectDataTimeout</i> parameter receives the maximum time in milliseconds that can pass before a remote named pipe transfers information over a network. The <i>lpUserName</i> and <i>nMaxUserNameSize</i> parameters represent a buffer that receives a null-terminated string containing the user name string of the client application.</p>

<p>The <i>SetNamedPipeHandleState</i> function allows you to change the pipe characteristics retrieved with <i>GetNamedPipeHandleState</i>. <i>SetNamedPipeHandleState</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL SetNamedPipeHandleState(
    HANDLE<i> hNamedPipe</i>,
    LPDWORD<i> lpMode</i>, 
    LPDWORD<i> lpMaxCollectionCount</i>, 
    LPDWORD<i> lpCollectDataTimeout</i>
); 
</pre>
</td></tr></table>
</p>

<p>The <i>hNamedPipe</i> parameter identifies the named pipe returned by <i>CreateNamedPipe</i> or <i>CreateFile</i>. The <i>lpMode</i> parameter sets the operating mode of a pipe. The <i>lpMaxCollectionCount</i> parameter specifies the maximum number of bytes collected on the client computer before data is transmitted to the server. The <i>lpCollectDataTimeout</i> parameter specifies the maximum time in milliseconds that can pass before a remote named pipe client transfers information over the network.</p>

<p>The <i>GetNamedPipeInfo</i> API function is used to retrieve buffer size and maximum pipe instance information. <i>GetNamedPipeInfo</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL GetNamedPipeInfo(
    HANDLE<i> hNamedPipe</i>, 
    LPDWORD<i> lpFlags</i>, 
    LPDWORD<i> lpOutBufferSize</i>, 
    LPDWORD<i> lpInBufferSize</i>,
    LPDWORD<i> lpMaxInstances</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hNamedPipe</i> parameter identifies the named pipe returned by <i>CreateNamedPipe</i> or <i>CreateFile</i>. The <i>lpFlags</i> parameter retrieves the type of the named pipe and determines whether it is a server or a client and whether the pipe is in byte mode or message mode. The <i>lpOutBufferSize</i> parameter determines the size in bytes of the internal buffer for outgoing data. The <i>lpInBufferSize</i> parameter receives the size in bytes of the internal buffer for incoming data. The <i>lpMaxInstance</i> parameter receives the maximum number of pipe instances that can be created.</p>

<p>The final API function, <i>PeekNamedPipe</i>, allows an application to look at the data in a named pipe without removing it from the pipe's internal buffer. This function is useful if an application wants to poll for incoming data to avoid blocking on the <i>ReadFile</i> API call. The function can also be useful for applications that need to examine data before they actually receive it. For example, an application might want to adjust its application buffers based on the size of incoming messages. <i>PeekNamedPipe</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL PeekNamedPipe(
   HANDLE<i> hNamedPipe</i>,
   LPVOID<i> lpBuffer</i>,
   DWORD<i> nBufferSize</i>,
   LPDWORD<i> lpBytesRead</i>,
   LPDWORD<i> lpTotalBytesAvail</i>,
   LPDWORD<i> lpBytesLeftThisMessage</i>
);
</pre>
</td></tr></table>
</p>

<p>The <i>hNamedPipe</i> parameter identifies the named pipe returned by <i>CreateNamedPipe</i> or <i>CreateFile</i>. The <i>lpBuffer</i> and <i>nBufferSize</i> parameters represent the receiving buffer along with the receiving buffer size to retrieve data from the pipe. The <i>lpBytesRead</i> parameter receives the number of bytes read from the pipe into the <i>lpBuffer</i> parameter. The <i>lpTotalBytesAvail</i> parameter receives the total number of bytes that are available to be read from the pipe. The <i>lpBytesLeftThisMessage</i> parameter receives the number of bytes remaining in a message if a pipe is opened in message mode. If a message cannot fit in the <i>lpBuffer</i> parameter, the remaining bytes in a message are returned. This parameter always returns 0 for byte-mode named pipes.</p>

</BODY>
</HTML>




