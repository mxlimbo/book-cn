<HTML>
<HEAD>
<TITLE>Defining Stubs for Kernel-Mode Routines</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="chaaa.htm">[Previous]</A> <A HREF="chaac.htm">[Next]</a>
</p>

<A NAME="432"><H1>Defining Stubs for Kernel-Mode Routines</H1></A>

<p>The stub technique used in WDMSTUB.VXD relies on the same basic trick that Microsoft crafted
to port several hundred kernel-mode support functions from Microsoft Windows NT to Windows
98&#8212;that is, extending the symbol tables that the run-time loader uses when it resolves
import references. To extend the symbol tables, you first define three data tables that will
persist in memory:</p>

<ul>
<p><li> A name table that gives the names of the functions you're defining</li></p>

<p><li> An address table that gives the addresses of the functions</li></p>

<p><li> An ordinal table that correlates the name and address tables</li></p>
</ul>


<p>Here are some of the table entries from WDMSTUB:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>static char* names[] = {
  &quot;PoRegisterSystemState&quot;,
  ...
  &quot;ExSystemTimeToLocalTime&quot;,
  ...
  };

static WORD ordinals[] = {
  0,
  ...,
  6,
  ...
  };

static PFN addresses[] = {
  (PFN) PoRegisterSystemState,
  ...
  (PFN) ExSystemTimeToLocalTime,
  ...
  };</pre>
</td></tr>
</table>
</p>

<p>The purpose of the ordinal table is to provide the index within <b>addresses</b> of the
entry for a given <b>names</b> entry. That is, the function named by <b>names[i]</b> is <b>
address[ordinals[i]]</b>.</p>

<p>If it weren't for a version compatibility problem I'll describe in a moment, you could
call <b>_PELDR_AddExportTable</b> as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>HPEEXPORTTABLE hExportTable = 0;

extern &quot;C&quot; BOOL OnDeviceInit(DWORD dwRefData)
  {
  _PELDR_AddExportTable(&amp;hExportTable, 
    &quot;ntoskrnl.exe&quot;,
    arraysize(addresses), // <img src="images/tlarrow.jpg" width=13 height=12 border="0"> don't do it this way!
    arraysize(names), 0, 
    (PVOID*) names,
    ordinals, addresses, NULL);
  return TRUE;
  }</pre>
</td></tr>
</table>
</p>

<p>The call to _PELDR_AddExportTable extends the table of symbols that the loader uses when it
tries to resolve import references from NTOSKRNL.EXE, which is of course the Windows