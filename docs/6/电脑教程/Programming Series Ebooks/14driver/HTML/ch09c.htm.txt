<HTML>
<HEAD>
<TITLE>Logging Errors</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch09b.htm">[Previous]</A> <A HREF="ch09d.htm">[Next]</a>
</p>

<A NAME="304"><H1>Logging Errors</H1></A>

<p>In the discussions of error handling up until now, I've been concerned only with
detecting (and propagating) status codes and with doing various things in the checked build to
help debug problems that show up as errors. Even in the free build of a driver, however, some
errors are serious enough that we want to be sure the system administrator knows about them.
For example, maybe a disk driver discovers that the disk's physical surface has an
unusually large number of bad sectors. Or maybe a driver is encountering unexpectedly frequent
data errors or some sort of difficulty configuring or starting the device.</p>

<p>To deal with these types of situations, a driver can write an entry to the system error log.
The Event Viewer applet&#8212;one of the administrative tools on a Microsoft Windows 2000
system&#8212;can later display this entry so that an administrator can learn about the problem.
See Figure 9-4 for an illustration of the Event Viewer. Another way to indicate sudden errors
is by signaling a Windows Management Instrumentation (WMI) event. I'll discuss event
logging in this section; WMI is the subject of Chapter 10, &quot;<a href="ch10a.htm#330">Windows Management
Instrumentation</a>.&quot;</p>

<p>Production of an administrative report from the error log involves the steps diagrammed in
Figure 9-5. A driver uses the kernel-mode service function <b>IoWriteErrorLogEntry</b> to send
an <i>error log packet</i> data structure to the event logger service. The packet contains a
numeric code instead of message text. As time permits, the event logger writes packets to a
logging file on disk. Later, the Event Viewer combines the packets in the log file with message
text drawn from a collection of <i>message files</i> to produce the report. The message files
are ordinary 32-bit DLLs containing text appropriate to all possible logged events in the local
language.</p>

<p>
<A HREF="javascript:fullSize('F09wi04x.htm')"> <img src="images/F09wi04.JPG" width=404 height=362 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 9-4.</b> <i>The Windows 2000 Event Viewer.</i><!--/caption-->
</p>


<p>
<A HREF="javascript:fullSize('F09wi05x.htm')"> <img src="images/F09wi05.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 9-5.</b> <i>Overview of event logging and reporting.</i><!--/caption-->
</p>


<p>Your job as a driver author is to create appropriate error log packets when noteworthy
events occur. As a practical matter, you'll probably also be the person who has to build
the message file in at least one natural language. I'll describe both aspects of error
logging in the next two sections.</p>

<A NAME="305"><H2>Creating an Error Log Packet</H2></A>

<p>To log an error, a driver creates an IO_ERROR_LOG_PACKET data structure and sends it to the
kernel-mode logger. The packet is a variable-length structure&#8212;see Figure