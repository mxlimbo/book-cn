<HTML>
<HEAD>
<TITLE>Working with the Bus Driver</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch11b.htm">[Previous]</A> <A HREF="ch12a.htm">[Next]</a>
</p>

<A NAME="379"><H1>Working with the Bus Driver</H1></A>

<p>In contrast to drivers for devices that attach to traditional PC buses such as PCI
(Peripheral Component Interconnect), a USB device driver never talks directly to its hardware.
Instead, it creates an instance of the data structure known as the USB request block that it
then submits to the bus driver.</p>

<p>Think of USBD.SYS as the entity to which you submit URBs. The call to USBD takes the form of
an IRP with the major function code IRP_MJ_INTERNAL_DEVICE_CONTROL. USBD in turn schedules bus time in some frame or another to carry out the
operation encoded in the URB.</p>

<p>In this section, I'll describe the mechanics of working with USBD to carry out the
typical operations a USB function driver performs. I'll first describe how to build and
submit a URB. Then I'll discuss the mechanics of configuring and reconfiguring your device.
Finally, I'll outline how your driver can manage each of the four types of communication
pipes.</p>

<A NAME="380"><H2>Initiating Requests</H2></A>

<p>To create a URB, you allocate memory for the URB structure and invoke an initialization
routine to fill in the appropriate fields for the type of request you're about to send.
Suppose, for example, that you were beginning to configure your device in response to an
IRP_MN_START_DEVICE request. One of your first tasks might be to read the device descriptor.
You might use the following snippet of code to accomplish this task:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
USB_DEVICE_DESCRIPTOR燿d;
URB爑rb;
UsbBuildGetDescriptorRequest(&amp;urb,