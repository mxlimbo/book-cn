<HTML>
<HEAD>
<TITLE>Defining a Device Class</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch12b.htm">[Previous]</A> <A HREF="ch12d.htm">[Next]</a>
</p>

<A NAME="418"><H1>Defining a Device Class</H1></A>

<p>Let's suppose you have a device that doesn't fit into one of the device classes
Microsoft has already defined. When you're initially testing your device and your driver,
you can get away with using the <b>Unknown</b> class in your INF file. Production devices are
not supposed to be in the Unknown class, however. You should instead place your custom device
into a new device class that you define in the INF file. I'll explain how to create a
custom class in this section.</p>

<p>The INF example I showed you earlier relied on a custom device class:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>[Version]
Signature=$CHICAGO$
Class=Sample
ClassGuid={894A7460-A033-11d2-821E-444553540000}</pre>
</td></tr>
</table>
</p>

<p>In fact, all of the samples in this book use the Sample class.</p>

<p>When you want to define a new class of device, you only need to do one task: run GUIDGEN to
create a unique GUID for the class. You can add polish to the user interface for your device
class by doing some additional tasks, such as writing a property page provider for use with the
Device Manager and putting some special entries into the registry key your class uses. You can
also provide filter drivers and parameter overrides that will be used for every device of your
class. You control each of these additional features by statements in your INF file. For
example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>[ClassInstall32]
AddReg=SamclassAddReg
CopyFiles=SamclassCopyFiles

[SamclassAddReg]
HKR,,,,&quot;WDM燘ook燬ample&quot;
...

[SamclassCopyFiles]
...</pre>
</td></tr>
</table>
</p>

<p>The illustrated registry entry turns into the &quot;friendly name&quot; for the device class
in the Device Manager and in the list of device types displayed by the add hardware wizard.
I'll explain some of the additional registry entries you might want to add to the class key
in the following sections.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
None of my INF files has a <b>ClassInstall32</b> section. None is needed
because the setup program for the sample disc puts the necessary class information directly
into the registry. If you define your own device class as part of a production driver package,
however, you will need this section. Note also that Microsoft discourages installing a new
class without using an INF.</blockquote></div>
</p>

<A NAME="419"><H2>A Property Page Provider</H2></A>

<p>Way back in Chapter 1, &quot;<A HREF="ch01a.htm#3">Introduction</A>&quot;&#8212;in Figure 1-6, to be
precise&#8212;I showed you a screen shot of the property page I invented for use with the Sample
device class. The SAMCLASS sample on the companion disc is the source code for the property
page provider that produced that page, and I'm now going to explain how it works.</p>

<p>A property page provider for a device class is a 32-bit DLL with the following contents:</p>

<ul>
<p><li> An exported entry point for each class for which the DLL supplies property pages</li></p>

<p><li> Dialog resources for each property page</li></p>

<p><li> A dialog procedure for each property page</li></p>
</ul>


<p>In general, a single DLL can provide property pages for several device classes. Microsoft
supplies some DLLs with the operating system that do this, for example. SAMCLASS, however,
provides only a single page for a single class of device. Its only exported entry point is the
following function:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>extern