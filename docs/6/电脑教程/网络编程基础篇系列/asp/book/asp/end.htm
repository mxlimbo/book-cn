<html>
<head>
<title>网络编程基础篇之ASP</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="ebook.css" type="text/css">
</head>
<body leftmargin="0" topmargin="0" background="bg.jpg">
<table width="100%" cellspacing="0">
  <tr>
    <td valign="top" bgcolor="#FFD26A">
      <table width="180" height="100%">
        <tr align="center" valign="top">
          <td>
            <p><img src="image.jpg"></p>
            <p><a href="list.htm"><img src="bd.gif" border="0"></a><br>
              <a href="ap.htm"><img src="ap.gif" border="0"></a></p>
          </td>
        </tr>
        <tr align="center" valign="bottom">
          <td></td>
        </tr>
      </table>
    </td>
    <td valign="top">
      <blockquote>
        <div align="center"><img src="title.gif"></div>
        <!--正文开始-->
<p><font color="#0000FF">12、维护 ASP 应用程序的安全</font></p>    
    <p>千万不要轻视正确配置安全设置的重要性。如果不正确配置安全设置，不但会使您的     
    ASP 应用程序遭受不必要的篡改，而且会妨碍正当用户访问您的 .asp     
    文件。</p>    
    <p>Web 服务器提供了各种方法来保护您的 ASP     
    应用程序免受未授权的访问和篡改。在您读完本主题下的安全信息之后，请花一定的时间仔细检查一下您的     
    Windows NT 和 Web 服务器安全性文档。详细信息，请参阅 安全性。</p>    
    <p>NTFS 权限</p>    
    <p>您可以通过为单独的文件和目录应用 NTFS     
    访问权限来保护 ASP 应用程序文件。NTFS 权限是 Web     
    服务器安全性的基础，它定义了一个或一组用户访问文件和目录的不同级别。当拥有     
    Windows NT     
    有效帐号的用户试图访问一个有权限限制的文件时，计算机将检查文件的     
    访问控制表 (ACL)。该表定义了不同用户和用户组所被赋予的权限。如果用户的帐号具有打开文件的权限，计算机则允许该用户访问文件。例如，Web     
    服务器上的 Web     
    应用程序的所有者需要有摳臄权限来查看、更改和删除应用程序的     
    .asp     
    文件。但是，访问该应用程序的公共用户应仅被授予撝欢翑权限，以便将其限制为只能查看而不能更改应用程序的     
    Web 页。</p>    
    <p>维护 Global.asa 的安全</p>    
    <p>为了充分保护 ASP 应用程序，一定要在应用程序的     
    Global.asa 文件上为适当的用户或用户组设置 NTFS 文件权限。如果     
    Global.asa 包含向浏览器返回信息的命令而您没有保护 Global.asa     
    文件，则信息将被返回给浏览器，即便应用程序的其他文件被保护。</p>    
    <p>有关配置 NTFS 权限的详细信息，请参阅 访问控制。</p>    
    <p>注意 一定要对应用程序的文件应用统一的 NTFS     
    权限。例如，如果您不小心过度限制了一应用程序需要包含的文件的     
    NTFS     
    权限，则用户可能无法查看或运行该应用程序。为了防止此类问题，在为您的应用程序分配     
    NTFS 权限之前应仔细计划。</p>    
    <p>Web 服务器权限</p>    
    <p>您可以通过配置您的 Web     
    服务器的权限来限制所有用户查看、运行和操作您的 ASP     
    页的方式。不同于 NTFS     
    权限提供的控制特定用户对应用程序文件和目录的访问方式， Web     
    服务器权限应用于所有用户，并且不区分用户帐号的类型。</p>    
    <p>对于要运行您的 ASP 应用程序的用户，在设置 Web     
    服务器权限时，必须遵循下列原则：</p>    
      <p>对包含 .asp 文件的虚拟目录允许权限。 </p>   
    <p>对 .asp 文件和其他包含脚本的文件（如 .htm 
    文件等）所在的虚目录允许权限。 </p>   
    <p>对包含 .asp 
    文件和其他需要权限才能运行的文件（如 .exe 和 .dll 
    文件等）的虚目录允许权限。 </p>   
    <p>有关配置 Web 服务器权限的详细信息，请参阅     
    访问控制。</p>    
    <p>脚本映射文件</p>    
    <p>应用程序的脚本映射保证了 Web 服务器不会意外地下载     
    .asp 文件的源代码。例如，即使您为包含了某个 .asp 
    文件的目录设置了权限，只要该 .asp     
    文件隶属于某个脚本映射应用程序，那么您的 Web     
    服务器就不会将该文件的源代码返回给用户。</p>    
    <p>Cookie 安全性</p>    
    <p>ASP 使用 SessionID cookie     
    跟踪应用程序访问或会话期间特定的 Web     
    浏览器的信息。这就是说，带有相应的 cookie 的 HTTP     
    请求被认为是来自同一 Web 浏览器。Web 服务器可以使用 SessionID cookies     
    配置带有用户特定会话信息的 ASP     
    应用程序。例如，如果您的应用程序是一个允许用户选择和购买 CD     
    唱盘的联机音乐商店，就可以用 SessionID     
    跟踪用户漫游整个应用程序时的选择。</p>    
    <p>SessionID 能否被黑客猜中？</p>    
    <p>为了防止计算机黑客猜中 SessionID cookie     
    并获得对合法用户的会话变量的访问，Web 服务器为每个 SessionID     
    指派一个随机生成号码。每当用户的 Web 浏览器返回一个 SessionID     
    cookie 时，服务器取出 SessionID     
    和被赋予的数字，接着检查是否与存储在服务器上的生成号码一致。若两个号码一致，将允许用户访问会话变量。这一技术的有效性在于被赋予的数字的长度（64     
    位），此长度使计算机黑客猜中 SessionID     
    从而窃取用户的活动会话的可能性几乎为 0。</p>    
    <p>加密重要的 SessionID Cookie</p>    
    <p>截获了用户 sessionID cookie 的计算机黑客可以使用此     
    cookie 假冒该用户。如果 ASP     
    应用程序包含私人信息，信用卡或银行帐户号码，拥有窃取的 cookie     
    的计算机黑客就可以在应用程序中开始一个活动会话并获取这些信息。您可以通过对您的     
    Web 服务器和用户的浏览器间的通讯链路加密来防止 SessionID cookie     
    被截获。有关加密的详细信息，请参阅 安全性。</p>    
    <p>使用身份验证机制保护被限制的 ASP 内容</p>    
    <p>您可以要求每个试图访问被限制的 ASP     
    内容的用户必须要有有效的 Windows NT     
    帐号的用户名和密码。每当用户试图访问被限制的内容时，Web     
    服务器将进行身份验证，即确认用户身份，以检查用户是否拥有有效的     
    Windows NT 帐号。</p>    
    <p>Web 服务器支持以下几种身份验证方式：</p>    
    <p>基本身份验证 提示用户输入用户名和密码。 </p>    
    <p>Windows NT 请求/响应式身份验证 从用户的 Web     
    浏览器通过加密方式获取用户身份信息。 </p>    
    <p>然而，Web 服务器仅当禁止匿名访问或 Windows NT     
    文件系统的权限限制匿名访问时才验证用户身份。详细信息，请参阅     
    关于身份验证。</p>    
    <p>保护元数据库</p>    
    <p>访问元数据库的 ASP 脚本需要 Web     
    服务器所运行的计算机的管理员权限。在从远程计算机上运行这些脚本时，须经已通过身份验证的连接，如使用     
    Windows NT 请求/响应验证方式进行连接。应该为管理级 .asp     
    文件创建一个服务器或目录并将其目录安全验证方式设置为 Windows NT     
    请求/响应式身份验证。目前，仅 Microsoft Internet Explorer version 2.0     
    或更高版本支持 Windows NT 请求/响应式身份验证。</p>    
    <p>使用 SSL 维护应用程序的安全</p>    
    <p>Secure Sockets Layer (SSL) 3.0 协议作为 Web     
    服务器安全特性，提供了一种安全的虚拟透明方式来建立与用户的加密通讯连接。SSL     
    保证了 Web 内容的验证，并能可靠地确认访问被限制的 Web     
    站点的用户的身份。</p>    
    <p>通过 SSL，您可以要求试图访问被限制的 ASP     
    应用程序的用户与您的服务器建立一个加密连接；以防用户与应用程序间交换的重要信息被截取。详细信息，请参阅     
    加密。 </p>    
    <p>维护包含文件的安全</p>    
    <p>如果您从位于没有保护的虚拟根目录中的 .asp     
    文件中包含了位于启用了 SSL 的目录中的文件，则 SSL     
    将不被应用于被包含文件。因此，为了保证应用 SSL，应确保包含及被包含的文件都位于启用了     
    SSL 的目录中。</p>    
    <p>客户资格认证</p>    
    <p>控制对您的 ASP     
    应用程序访问的一种十分安全的方法是要求用户使用 客户资格     
    登录。客户资格是包含用户身份信息的数字身份证，它的作用与传统的诸如护照或驾驶执照等身份证明相同。用户通常从委托的第三方组织获得客户资格，第三方组织在发放资格证之前确认用户的身份信息。（通常，这类组织要求姓名、地址、电话号码及所在组织名称；此类信息的详细程度随给予的身份等级而异。）</p>    
    <p>每当用户试图登录到需要资格验证的应用程序时，用户的     
    Web 浏览器会自动向服务器发送用户资格。如果 Web 服务器的 Secure     
    Sockets Layer (SSL)     
    资格映射特性配置正确，那么服务器就可以在许可用户对 ASP     
    应用程序访问之前对其身份进行确认。</p>    
    <p>用于处理资格证明的 ASP 脚本</p>    
    <p>作为 ASP     
    应用程序开发人员，您可以编写脚本来检查资格是否存在并读取资格字段。例如，您可以从资格证明中访问用户名字段和公司名字段。Active     
    Server Pages 在 Request 对象的 ClientCertificate     
    集合中保存资格信息。详细信息，请参阅 ASP 内建对象。</p>    
    <p>必须将 Web     
    服务器配置为接受或需要客户资格，然后才能通过 ASP     
    处理客户资格；否则，ClientCertificate 集合将为空。</p>    
    <p>--------------------------------------------------------------------------------</p>    
    <p>创建事务性脚本</p>    
    <p>商业应用程序常常需要具有在事务内部运行脚本和组件的能力。事务是一种服务器操作，即使该操作包括很多步骤（例如，定货、查看存货、付帐等），也只能整体返回操作是成功还是失败。用户可以创建在事务内部运行的     
    ASP 脚本，如果脚本的任何一部分失败，整个事务都将会终止。</p>    
    <p>ASP 事务处理是以 Microsoft? Transaction Server (MTS)     
    为基础的。Microsoft? Transaction Server (MTS)     
    是一个事务处理系统，用于开发、配置和管理高性能、可分级的、有鲁棒性的企业     
    Internet 和 Intranet 服务器应用程序。Transaction Server     
    为开发分布式的，基于组件的应用程序提供了一个应用程序设计模型。它也为配置和管理这些应用程序提供了一个运行环境。</p>    
    <p>创建事务性脚本的功能内置在 Internet Information Server 和     
    Personal Web Server 中。如果您安装了 Microsoft Transaction Server，就可以将组件打包，以使组件在事务内部运行。有关组件打包的详细信息，请参阅     
    创建 MTS 包。</p>    
    <p>关于事务</p>    
    <p>事务是整体成功或失败的操作。事务处理用于对数据库进行可靠地更新。在对数据库进行许多相关更改或同时更新多个数据库时，要保证所有更改都被正确执行。如果这些更改中的任何一个失败，都需要恢复数据库表的原始状态。</p>    
    <p>如果没有 MTS，您就需要编写脚本和组件，手工跟踪请求的更改情况，以便在某些更改失败时恢复数据。使用     
    MTS，您只需简单的将您的脚本和组件声明为撔枰挛駭并让 MTS     
    处理事务的一致性。事务处理只适用于数据库访问；MTS     
    不能对文件系统或其他的非事务性资源的更改进行恢复操作。应用程序所访问的数据库必须为     
    MTS 所支持。目前，MTS 支持 SQL Server 及任何支持 XA 协议（由 X/Open     
    协会制定）的服务器。MTS 将继续扩展对其他数据库的支持。</p>    
    <p>事务不能跨越多个 ASP     
    页。如果一个事务需要来自多个组件的对象，则须将使用这些对象的操作组合在一个     
    ASP     
    页中。例如，假定有一个组件用于更新工资单数据库，还有一个组件用于更新人力资源数据库中的员工记录。为了记录一个员工的新的工资信息，您需要编写这样一个脚本，该脚本在一个事务环境中调用这两个组件，一个用于更新工资单数据库，另一个用于更新人力资源数据库中的员工等级。</p>    
    <p>声明事务性脚本</p>    
    <p>在将一个页声明为事务性时，此页中的任何脚本命令和对象都运行在同一个事务环境中。Transaction     
    Server     
    处理生成事务的细节并决定事务成功（提交）或失败（终止）。要将某个页声明为事务性，可在页首添加     
    @TRANSACTION 指令：</p>    
    <p>&lt;%@ TRANSACTION = value %&gt;</p>    
    <p>value 参数可以是下列之一：</p>    
    <p>值 意义 </p>    
    <p>Requires_New 启动一个新的事务。 </p>    
    <p>Required 启动一个新的事务。 </p>    
    <p>Supported 不启动事务。 </p>    
    <p>Not_Supported 不启动事务。 </p>    
    <p>@TRANSACTION     
    指令必须在一页中的第一行，否则将产生错误。必须将该指令添加到需要在事务下运行的每一页中。当脚本处理结束时，当前事务即告结束。</p>    
    <p>大多数应用程序只有一些特定的操作需要事务环境。例如，一个航空公司的站点可能只需要事务性脚本处理购票和安排座位，而其他所有脚本则无须事务环境即可安全运行。因为事务只须用于需要事务处理的页即可，不要将应用程序的     
    Global.asa 文件声明为事务性。</p>    
    <p>如果事务被终止，Transaction Server     
    将恢复对支持事务的资源的任何更改。目前，仅数据库服务器完全支持事务，因为数据库中的数据对于企业应用是最为关键的。Transaction     
    Server     
    不对硬盘上的文件、会话和应用程序的变量、集合等的改变进行恢复。然而您可以如下文主题所述，通过编写事务事件来编写恢复变量和集合的脚本。在某些时候，您的脚本也可以显式的提交或终止一个事务，如向文件写数据失败时。</p>    
    <p>提交或终止脚本</p>    
    <p>因为 Transaction Server     
    跟踪事务处理，所以它决定事务是完全成功还是失败。脚本可以通过调用     
    ObjectContext.SetAbort 显式地声明终止一个事务。     
    例如，当一个事务在从一个组件收到错误消息、违反商业规范时（例如，帐户余额小于     
    0）或读写文件等非事务性操作失败时，脚本就需要终止该事务。如果页在事务完成之前超时，也必须终止事务。</p>    
    <p>编写事务事件</p>    
    <p>脚本本身不能决定事务是成功还是失败。但是，可以编写提交或终止事务时被调用的事件。例如，假设有一个确认银行帐户的脚本，并且您需要针对事务的不同状态将不同的页返回给用户，那么就可以使用     
    OnTransactionCommit 和 OnTransactionAbort 事件来编写对用户的不同响应。</p>    
    <p>&lt;%@ TRANSACTION = Required %&gt;</p>    
    <p>&lt;%</p>    
    <p>'Buffer output so that different pages can be displayed.</p>    
    <p>Response.Buffer = True</p>    
    <p>%&gt;</p>    
    <p>&lt;HTML&gt;</p>    
    <p>&lt;BODY&gt;</p>    
    <p>&lt;H1&gt;Welcome to the online banking service&lt;/H1&gt;</p>    
    <p>&lt;%</p>    
    <p>Set BankAction =     
    Server.CreateObject("MyExample.BankComponent")</p>    
    <p>BankAction.Deposit(Request("AcctNum"))</p>    
    <p>%&gt;</p>    
    <p>&lt;P&gt;Thank you. Your transaction is being processed.&lt;/P&gt;</p>    
    <p>&lt;/BODY&gt;</p>    
    <p>&lt;/HTML&gt;</p>    
    <p>&lt;%</p>    
    <p>' Display this page if the transaction succeeds.</p>    
    <p>Sub OnTransactionCommit()</p>    
    <p>Response.Write "&lt;HTML&gt;"</p>    
    <p>Response.Write "&lt;BODY&gt;"</p>    
    <p>Response.Write "Thank you. Your account has been credited."</p>    
    <p>Response.Write "&lt;/BODY&gt;"</p>    
    <p>Response.Write "&lt;/HTML&gt;"</p>    
    <p>Response.Flush()</p>    
    <p>end sub</p>    
    <p>%&gt;</p>    
    <p>&lt;%</p>    
    <p>' Display this page if the transaction fails.</p>    
    <p>Sub OnTransactionAbort()</p>    
    <p>Response.Clear()</p>    
    <p>Response.Write "&lt;HTML&gt;"</p>    
    <p>Response.Write "&lt;BODY&gt;"</p>    
    <p>Response.Write "We are unable to complete your transaction."</p>    
    <p>Response.Write "&lt;/BODY&gt;"</p>    
    <p>Response.Write "&lt;/HTML&gt;"</p>    
    <p>Response.Flush()</p>    
    <p>End sub</p>    
    <p>%&gt;</p>    
    <p>在 MTS 资源管理器中登记一个组件</p>    
    <p>为了参与一个事务，组件必须在 MTS     
    包中登记，而且必须被配置为需要事务。例如，如果您的脚本是通过调用两个组件来处理订单的，一个更新库存数据库，另一个更新付款数据库。那么，这两个组件就要在同一个事务环境中运行。Transaction     
    Server     
    保证如果任意一个组件失败，那么将不会有数据库被更新。某些组件不需要事务；例如，Ad     
    Rotator 组件。</p>    
    <p>注册和配置事务性组件可使用 MTS     
    资源管理器。必须将事务的属性设置为需要事务或需要新事务。事务组件必须在     
    MTS 包中注册。不要将组件放在 IIS     
    内部进程包中，而应该创建自己的包。通常，应将所有的组件放在一个组件库中。组件库的组件可被多个     
    ASP 应用程序使用并以 ASP 应用程序进程运行。使用 MTS     
    资源管理器可创建新的包并将包的 Activation 属性设置为 Library。</p>    
    <p>也可以在 Server 包中注册事务性组件。Server     
    包通常以服务器上的一个独立的进程运行。如果希望使用基于职能组的安全性检查或希望您的组件可被远程计算机上的应用程序访问，可对事务性组件使用     
    Server 包。</p>    
    <p>要使用 MTS 资源管理器，必须安装 Microsoft Transaction     
    Server。有关注册组件和选择包类型的详细信息，请参阅 创建 MTS 包。</p>    
    <p>对象作用域</p>    
    <p>一般情况下，不要将从 MTS 组件中创建的对象存储在     
    ASP Application 或 Session 对象中。 MTS 对象在事务完成后消失。因为     
    Session 对象和 Application 对象是为在不同 ASP     
    页之间使用的对象实例设计的，所以不要用它们保存在事务结束时即被释放的对象。</p>    
    <p>ASP 脚本是已声名的事务的根，即起始点。任何事务性     
    ASP 页所使用的 MTS     
    对象都被认为是事务的一部分。当事务完成后，在页中使用的 MTS     
    对象将消失，其中包括存储在 Session 或 Application     
    对象中的对象。在此之后，从另一个事务性页中调用会话作用域或应用程序作用域对象的尝试都将失败。</p>    
    <p>事务排队</p>    
    <p>从一个远程服务器对数据库的更新可能因为网络延迟或故障而导致事务延迟或终止。因为事务的所有部分都必须提交，所以应用程序将可能挂起，等待远程服务器的提交或终止消息，也可能由于无法发送数据库更新而导致事务被放弃。</p>    
    <p>对于必须同时完成的更新，正确的做法是在事务的所有参与者都能够提交之前，终止事务或推迟完成事务。例如，航空公司的定票程序应该同时完成对客户的银行帐号计入借方和对航空公司的银行帐户计入贷方。如果一个更新属于事务整体的一部分，但可能晚于其他更新，您可能不希望让客户等待整个更新过程的完成。例如，机票预定事务可能也要向食品供应商发送食品订单或更新客户的旅程津贴。这些操作虽然也必须完成，但可以晚一些。</p>    
    <p>Microsoft Message Queue Server     
    使您能够将一个或一组更新捆绑到一个事务性消息中送给远程服务器。Message     
    Queue Server     
    保证更新将被发送给远程服务器，即使目前网络不可用。您的应用将收到一个提交消息，从而可以继续处理事务。</p>    
    <p>有关在 ASP 应用程序中使用消息队列的示例，请参阅     
    开发人员范例。要查看这些示例，必须安装 SDK 文档。</p>    
    <p>有关 Microsoft Message Queue Server 的详细信息，请参阅     
    Microsoft Message Queue Server。</p>    
        <p>
          <!--正文结束-->
        </p>    
    <center>
      <hr>
      <p>本书由<a href="http://www.huiniao.com/">【灰鸟资讯】</a>免费制作<br>
          想要更多的免费电子图书，请光临<br>
          <a href="http://www.huiniao.com">http://www.huiniao.com</a></p>
      </center>
      </blockquote>
    </td>
  </tr>
</table>
</body>
</html>
