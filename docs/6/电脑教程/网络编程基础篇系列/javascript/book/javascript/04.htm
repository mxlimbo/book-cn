<html>
<head>
<title>网络编程基础篇之JavaScript</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="ebook.css" type="text/css">
</head>
<body leftmargin="0" topmargin="0" background="bg.jpg">
<table width="100%" cellspacing="0">
  <tr>
    <td valign="top" bgcolor="#FFD26A">
      <table width="180" height="100%">
        <tr align="center" valign="top">
          <td>
            <p><img src="image.jpg"></p>
            <p><a href="list.htm"><img src="bd.gif" border="0"></a><br>
              <a href="03.htm"><img src="ap.gif" border="0"></a></p>
          </td>
        </tr>
        <tr align="center" valign="bottom">
          <td><a href="05.htm"><img src="np.gif" border="0"></a></td>
        </tr>
      </table>
    </td>
    <td valign="top">
      <blockquote>
        <div align="center"><img src="title.gif"></div>
        <!--正文开始-->
        <font color="#0000FF"> 基于对象的JavaScript语言 </font> 
        <p>JavaScript语言是基于对象的（Object-Based），而不是面向对象的（object-oriented）。之所以说它是一门基于对象的语言，主要是因为它没有提供象抽象、继承、重载等有关面向对象语言的许多功能。而是把其它语言所创建的复杂对象统一起来，从而形成一个非常强大的对象系统。 
          <br>
          虽然JavaScript语言是一门基于对象的，但它还是具有一些面向对象的基本特征。它可以根据需要创建自己 <br>
          的对象，从而进一步扩大JavaScript的应用范围，增强编写功能强大的Web文文件。<br>
          <br>
          <font color="#0000FF">一、对象的基础知识 </font><br>
          １、对象的基本结构 <br>
          JavaScript中的对象是由属性(properties)和方法(methods)两个基本的元素的构成的。前者是对象在实施其所需要行为的过程中，实现信息的装载单位，从而与变量相关联；后者是指对象能够按照设计者的意图而被执行，从而与特定的函数相联。 
          <br>
          ２、引用对象的途径 <br>
          一个对象要真正地被使用，可采用以下几种方式获得： <br>
          引用JavaScript内部对象； <br>
          由浏览器环境中提供； <br>
          创建新对象。 <br>
          这就是说一个对象在被引用之前，这个对象必须存在，否则引用将毫无意义，而出现错误信息。从上面中我们可以看出JavaScript引用对象可通过三种方式获取。要么创建新的对象，要么利用现存的对象。 
          <br>
          ３、有关对象操作语句 <br>
          JavaScript不是一纯面向对象的语言，它设有提供面向对象语言的许多功能，因此JavaScript设计者之所以把它你“基于对象”而不是面向对象的语言，在JavaScript中提供了几个用于操作对象的语句和关键词及运算符。 
          <br>
          1）、For...in语句 <br>
          格式如下： <br>
          For（对象属性名 in 已知对象名） <br>
          说明： <br>
          该语句的功能是用于对已知对象的所有属性进行操作的控制循环。它是将一个已知对象的所有属性反复置给一个变量；而不是使用计数器来实现的。 <br>
          该语句的优点就是无需知道对象中属性的个数即可进行操作。 <br>
          例：下列函数是显示数组中的内容： <br>
          Function showData(object) <br>
          for (var X=0; X&lt;30;X++) <br>
          document.write(object[i])； <br>
          该函数是通过数组下标顺序值，来访问每个对象的属性，使用这种方式首先必须知道数组的下标值，否则若超出范围，则就会发生错误。而使For...in语句，则根本不需要知道对象属性的个数，见下： 
          <br>
          Function showData(object) <br>
          for(var prop in object) <br>
          document.write(object[prop])； <br>
          使用该函数时，在循环体中，For自动将的属性取出来，直到最后为此。 
        <p>2）、with语句 <br>         
                使用该语句的意思是：在该语句体内，任何对变量的引用被认为是这个对象的属性，以节省一些代码。 </p>         
              <p>with object{ </p>         
              <p>...} </p>         
              <p>所有在with语句后的花括号中的语句，都是在后面object对象的作用域的。 </p>         
              <p>3）、his关键词 <br>         
                this是对当前的引用，在JavaScript由于对象的引用是多层次，多方位的，往往一个对象的引用又需要对另一个对象的引用，而另一个对象有可能又要引用另一个对象，这样有可能造成混乱，最后自己已不知道现在引用的那一个对象，为此JavaScript提供了一个用于将对象指定当前对象的语句this。          
              </p>         
              <p>4）、ew运算符 <br>         
                虽然在JavaScript中对象的功能已经是非常强大的了。但更强大的是设计人员可以按照需求来创建自己的对象，以满足某一特定的要求。使用New运算符可以创建一个新的对象。其创建对象使用如下格式：          
                <br>         
                Newobject=NEW Object(Parameters table); <br>         
                其中Newobject创建的新对象：object是已经存在的对象； parameters table参数表；new是JavaScript中的命令语句。          
                <br>         
                如创建一个日期新对象 <br>         
                newData=New Data() <br>         
                birthday=New Data (December 12.1998) <br>         
                之后就可使NewData、birthday作为一个新的日期对象了。 <br>         
              　 <br> 
                ４、对象属性的引用 <br> 
                对象属性的引用可由下列三种方式之一实现： <br> 
                （１）使用点（.）运算符 <br> 
                university.Name=“云南省” <br> 
                university.city=“昆明市” <br> 
                university.Date="1999" <br> 
                其中university是一个已经存在的对象，Name、City、Date是它的三个属性，并通过操作对其赋值。 <br> 
                （２）通过对象的下标实现引用 <br> 
                university[0]=“云南” <br> 
                university[1]=“昆明市” <br> 
                university[2]="1999" <br> 
                通过数组形式的访问属性，可以使用循环操作获取其值。 <br> 
                function showunievsity(object) <br>         
                for (var j=0;j&lt;2; j++) <br>         
                document.write(object[j]) <br>         
                若采用For...in则可以不知其属性的个数后就可以实现： <br>         
                Function showmy(object) <br>         
                for (var prop in this) <br>         
                docament.write(this[prop]); <br>         
                （３）通过字符串的形式实现 <br>         
                university["Name"]=“云南” <br>         
                university["City"]=“昆明市” <br>         
                university["Date"]="1999" <br>         
              　 <br> 
                ５、对象的方法的引用 <br> 
                在JavaScript中对象方法的引用是非常简单的。 <br> 
                ObjectName.methods() <br> 
                实际上methods()=FunctionName方法实质上是一个函数。 如引用university对象中的showmy（）方法，则可使用：          
                <br>         
                document.write (university.showmy()) <br>         
                或：document.write(university) <br>         
                如引用math内部对象中cos()的方法 <br>         
                则： <br>         
                with(math) <br>         
                document.write(cos(35)); <br>         
                document.write(cos(80)); <br>         
                若不使用with则引用时相对要复杂些： <br>         
                document.write(Math.cos(35)) <br>         
                document.write(math.sin(80)) <br>         
              　 <br>
          <font color="#0000FF">二、常用对象的属性和方法</font> <br> 
                JavaScript为我们提供了一些非常有用的常用内部对象和方法。用户不需要用脚本来实现这些功能。这正是基于对象编程的真正目的。  
                <br> 
                在JavaScript提供了string（字符串）、math（数值计算）和Date（日期）三种对象和其它一些相关的方法。从而为编程人员快速开发强大的脚本程序提供了非常有利的条件。  
              </p> 
              <p>1、常用内部对象 <br> 
                在JavaScript中对于对象属性与方法的引用，有两种情况：其一是说该对象是静态对象，即在引用该对象的属性或方法时不需要为它创建实例；而另一种对象则在引用它的对象或方法是必须为它创建一个实例，即该对象是动态对象。  
                <br> 
                对JavaScript内部对象的引用，以是紧紧围绕着它的属性与方法进行的。因而明确对象的静动性对于掌握和理解JavaScript内部对象是具有非常重要的意义。  
                <br> 
                １)、串对象 </p> 
              <p> string对象：内部静态性。 </p> 
              <p> 访问properties和methods时，可使用（.）运算符实现。 </p> 
              <p> 基本使用格式：objectName.prop/methods <br> 
                （１）串对象的属性 <br> 
                该对象只有一个属性，即length。它表明了字符串中的字符个数，包括所有符号。例： <br> 
                mytest="This is a JavaScript" <br>         
                mystringlength=mytest.length <br>         
                最后mystringlength返回mytest字符串的长度为20。 <br>         
                （２）串对象的方法 <br>         
                string对象的方法共有１９个。主要用于有关字符串在Web页面中的显示、字体大小、字体颜色、字符的搜索以及字符的大小写转换。          
                <br>         
                其主要方法如下： </p>         
              <p> 锚点anchor()：该方法创建如用Html文文件中一样的anchor标记。使用anchor如用Html中(A Name="")一样。通过下列格式访问:string.anchor(anchorName)。          
              </p>         
              <p> 有关字符显示的控制方法 <br>         
                big字体显示, Italics()斜体字显示，bold()粗体字显示，blink()字符闪烁显示，small（）字符用小体字显示，fixed()固定高亮字显示、fontsize(size)控制字体大小等。          
              </p>         
              <p> 字体颜色方法；fontcolor(color) </p>         
              <p> 字符串大小写转换 <br>         
                toLowerCase()－小写转换，toUpperCase()大写转换。下列把一个给定的串分别转换成大写和小写格式: <br>         
                string=stringValue.toUpperCase和string=stringValue.toLowerCase。          
              </p>         
              <p> 字符搜索：indexOf[charactor,fromIndex] <br>         
                从指定formIndtx位置开始搜索charactor第一次出现的位置。 </p>         
              <p>返回字符串的一部分字符串：substring(start,end) </p>         
              <p>从start开始到end的字符全部返回。 <br>         
              　 <br> 
                ２)、算术函数的math对象 <br> 
              　功能：提供除加、减、乘、除以外的一引些自述运算。如对数，平方根等 。 <br>         
              　静动性：静态对象 <br> 
                （１）主要属性 <br> 
                math中提供了６个属性，它们是数学中经常用到的常数Ｅ、以１０为底的自然对数ＬＮ１０、以２为底的自然对数LN2、3.14159的PI、1/2的平方根SQRT1-2,2的平方根为SQRT2。  
                <br> 
                （２）主要方法 <br> 
              　绝对值：abs() <br> 
              　正弦余弦值：sin(),cos() <br> 
              　反正弦反余弦 :asin(), acos() <br>         
              　正切反正切：tan(),atan() <br> 
              　四舍五入：round() <br> 
              　平方根：sqrt() <br> 
              　基于几方次的值：Pow(base,exponent) <br> 
                ... <br> 
                ３)、日期及时间对象 <br> 
              　功能：提供一个有关日期和时间的对象。 <br> 
              　静动性：动态性，即必须使用New运算符创建一个实例。例: </p> 
              <p>MyDate=New Date() <br>         
                Date对象没有提供直接访问的属性。只具有获取和设置日期和时间的方法。 <br>         
              　日期起始值:１７７０年１月１日００:００:００。 </p> 
              <p>(1) 获取日期的时间方法 <br>         
              　getYear(): 返回年数 <br>         
              　getMonth():返回当月号数 <br> 
              　getDate(): 返回当日号数 <br>         
              　getDay():返回星期几 <br> 
              　getHours():返回小时数 <br> 
              　getMintes(:返回分钟数 <br> 
              　getSeconds():返回秒数 <br> 
              　getTime() : 返回毫秒数 </p>         
              <p>(1) 设置日期和时间： <br>         
              　setYear();设置年 <br> 
              　setDate():设置当月号数 <br> 
              　setMonth():设置当月份数 <br> 
              　setHours():设置小时数 <br> 
              　setMintes():设置分钟数 <br> 
              　setSeconds():设置秒数 <br> 
              　setTime ():设置毫秒数 <br>         
                ... <br>         
                2、JavaScript中的系统函数 <br>         
                JavaScript中的系统函数又称内部方法。它提供了与任何对象无关的系统函数，使用这些函数不需创建任何实例,可直接用。 <br>         
                1) 返回字符串表达式中的值： <br>         
              　方法名：eval（字符串表达式），例： <br> 
                test=eval("8+9+5/2"); <br> 
                2) 返回字符串ASCI码： <br>         
              　方法名：unEscape (string) <br>         
                3) 返回字符的编码： <br>         
              　方法名：escape(character) <br> 
                4) 返回实数： <br>         
                parseFloat(floustring); <br>         
                5) 返回不同进制的数： <br>         
                parseInt(numbestring ,rad.X) <br>         
                其中radix是数的进制，numbs字符串数 <br>         
              　 <br>
          <font color="#0000FF">三、范例</font> </p> 
              <p>下面是一个时钟显示的JavaScript文檔。在文文件中用了非常多的函数。 <br> 
                Test4_1.htm <br> 
                &lt;html&gt; <br> 
                &lt;head&gt; <br> 
                &lt;style TYPE="text/css"&gt; <br>         
                &lt;style&gt; <br>         
                &lt;/style&gt; <br>         
                &lt;title&gt;时钟&lt;/title&gt; <br>         
                &lt;script LANGUAGE="JavaScript"&gt; <br>         
                function showClock() { <br>         
                } <br>         
                function hideClock() { <br>         
                } <br>         
                var timerID = null <br>         
                var timerRunning = false <br>         
                function stopClock() { <br>         
                if(timerRunning) <br>         
                clearTimeout(timerID); <br>         
                timerRunning = false <br>         
                document.clock.face.value = ""; <br>         
                } <br>         
                function showTime() { <br>         
                var now = new Date(); <br>         
                var year = now.getYear(); <br>         
                var month = now.getMonth() + 1; <br>         
                var date = now.getDate(); <br>         
                var hours = now.getHours(); <br>         
                var mins = now.getMinutes(); <br>         
                var secs = now.getSeconds(); <br>         
                var timeVal = ""; <br>         
                timeVal += ((hours &lt;= 12) ? hours : hours - 12); <br>         
                timeVal += ((mins &lt; 10) ? ":0" : ":") +          
                mins; <br>         
                timeVal += ((secs &lt;= 10) ? ":0" : ":")          
                + secs; <br>         
                timeVal += ((hours &lt; 12) ? "AM" : "PM");          
                <br>         
                timeVal += ((month &lt; 10) ? " on 0" : " on ")          
                + month + "-"; <br>         
                timeVal += date + "-" + year; <br>         
                document.clock.face.value = timeVal; <br>         
                timerID = setTimeout("showTime()", 1000); <br>         
                timerRunning = true <br>         
                } <br>         
                function startClock() { <br>         
                stopClock(); <br>         
                showTime(); <br>         
                } <br>         
              　 <br> 
                function windowOpener( indexnum ){ <br>         
                var loadpos="date.html"+"#"+indexnum; <br>         
                controlWindow=window.open(loadpos,"date","toolbar=no,location=no,directories=no,<br>         
                status=no,menubar=no,scrollbars=yes,resizable=yes,width=620,height=400");          
                <br>         
                } <br>         
                &lt;/script&gt; <br>         
                &lt;/head&gt; <br>         
                &lt;body onLoad="startClock()" &gt; <br>         
                &lt;p align="center"&gt;&lt;big&gt;&lt;span style="background-color:          
                rgb(45,45,45)"&gt;&lt;font face="Arial"&gt;form&lt;/font&gt;          
                &amp;nbsp; &lt;font face="宋体"&gt;时钟&lt;/font&gt;　&lt;/span&gt;&lt;/big&gt;&lt;/p&gt;  
                <br> 
                &lt;p align="center"&gt;　&lt;/p&gt; <br> 
                &lt;div align="center"&gt;&lt;center&gt; <br>         
                &lt;table border="0" cellspacing="0" cellpadding="0"&gt;          
                <br>         
                &lt;tr&gt; <br>         
                &lt;td width="100%"&gt;&lt;form NAME="clock"          
                onSubmit="0"&gt; <br>         
                &lt;div align="center"&gt;&lt;center&gt;&lt;p&gt;&lt;input          
                TYPE="text" NAME="face" size="20"          
                VALUE style="background-color: rgb(192,192,192)"&gt;          
                &lt;/p&gt; <br>         
                &lt;/center&gt;&lt;/div&gt; <br>         
                &lt;/form&gt; <br>         
                &lt;/td&gt; <br>         
                &lt;/tr&gt; <br>         
                &lt;/table&gt; <br>         
                &lt;/center&gt;&lt;/div&gt; <br>         
                &lt;/body&gt; <br>         
                &lt;/html&gt; <br>         
 </p>         
              <p>本讲介绍了基于对象的JavaScript中常用内部对象属性、方法的使用。</p>
        <!--正文结束-->
      <center>
      <hr>
      <p>本书由<a href="http://www.huiniao.com/">【灰鸟资讯】</a>免费制作<br>
          想要更多的免费电子图书，请光临<br>
          <a href="http://www.huiniao.com">http://www.huiniao.com</a></p>
      </center>
      </blockquote>
    </td>
  </tr>
</table>
</body>
</html>
