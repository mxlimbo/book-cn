<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Microsoft Transaction Server</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09a.htm", "ch09c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="332"><H1>Lesson 1: Overview of Microsoft Transaction Server</H1></A>

<P>As you learned in Chapter 1, &quot;<A HREF="ch01a.htm#33">Application Design Concepts</A>,&quot; the n-tier (or distributed) architecture enables application components to run on middle-tier servers independent of both the presentation and database services. While there is no requirement that each unit runs on a different physical computer, to deliver maximum benefit, n-tier systems must run with presentation components on desktop clients (or Web browsers), application logic on middle-tier servers, and data on dedicated database servers. The independence of application logic from presentation and data in a distributed application offers many benefits:</P>

<ul><p><li> You can use Microsoft Visual Basic to develop reusable application components.</li></p>

<p>In Chapter 8, &quot;<A HREF="ch08a.htm#306">Using Stored Procedures</A>,&quot; you learned that you can encapusulate business rules in stored procedures. While this scenario is the best solution for 2-tier applications, the ability to create component object model dynamic link libraries (COM DLLs) to encapsulate business rules in an n-tier application provides you with more flexibility than using a limited stored procedure language such as Transact-SQL.</p>

<p><li> Application components can run on multiple computers simultaneously.</li></p>

<p>This spreads client workloads across multiple computers to enable higher availability, scalability, and performance. </p>

<p><li> Application components can share database connections.</li></p>

<p>By sharing database connections, resources required by the database server are lowered, improving performance. With two-tier systems, the database must allocate a connection for every user.</p>

<p><li> Middle-tiered application components can be secured centrally.</li></p>

<p>Access can be granted or denied on a component-by-component basis to simplify administration.</p>
</ul>
<P>In this lesson, you will learn how Microsoft Transaction Server (MTS) benefits n-tier application development.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>

<ul>
<p><li> Explain the role of MTS in a distributed solution.</li></p>

<p><li> Describe the benefits of using MTS.</li></p>

<p><li> Identify the services provided by MTS.</li></p>
</ul>

<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>

<A NAME="333"><H2>Developing N-tier Applications with MTS</H2></A>

<P>MTS is an application-programming model used for developing distributed component-based applications. It also provides a run-time infrastructure for deploying and managing these applications. When combined with Microsoft SQL Server, MTS provides the easiest way to run scalable, robust applications on the Microsoft Windows NT Server operating system. It is much easier to develop a distributed application with MTS.</P>

<P>MTS is all about managing the way applications use components, and not just about managing transactions. Although transactions are a big part of many applications, MTS also provides very useful services for applications that do not use transactions at all.</P>

<P>MTS simplifies the development and deployment of scalable n-tier applications built using COM technology. In MTS applications, application logic components run under the control of MTS and are invoked by presentation services running on various types of clients. Clients can be Web browsers, Active Server Page (ASP) scripts running within Microsoft Internet Information Server (IIS), or Visual Basic standard EXE applications.</P>

<P>Application logic components can access a number of different databases through MTS Resource Dispensers that perform services such as connection pooling automatically. MTS also supports automatic transactions so that access to data and resources are done with all-or-nothing protection.</P>

<A NAME="334"><H3>MTS Component Requirements</H3></A>

<P>An MTS component is a type of COM component that executes in the MTS run-time environment. In addition to the COM requirements, MTS requires that the component be a DLL. Components that are implemented as executable files (.exe files) cannot execute in the MTS run-time environment. For example, if you build a Remote Automation server executable file with Visual Basic, you must rebuild it as a DLL.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
MTS 1.0 had a limit of 100 methods per component. In MTS 2.0 this limit is now 1024 methods.
</blockquote></div>
</p>

<A NAME="335"><H3>Benefits of Using MTS</H3></A>

<P>MTS provides the required infrastructure, or plumbing code, that enables systems to operate efficiently and the business function to be shared by a large number of users. This drives down the complexity and cost of building applications, enabling you to focus on building business logic without having to build infrastructure. With MTS, you can use your existing skills with Visual Basic to build sophisticated n-tier applications. To do this, you develop components as COM DLLs that run on middle-tiered servers under the control of MTS. Then, when client-based applications on the presentation layer call your COM DLLs, the Distributed Component Object Model (DCOM) will route the requests to MTS automatically. Other benefits of using MTS include:</P>

<ul>
<p><li> The ability to access databases and other resources such as mainframe applications with full transaction protection.</li></p>

<p><li> Simplified component deployment via MTS Explorer drag-and-drop interfaces and automated client installation utilities.</li></p>

<p><li> Automatic use of scalability features such as thread pooling, database connection pooling, and just-in-time (JIT) object instantiation.</li></p>

<p><li> Easy component management via the MTS Explorer.</li></p>

<p><li> The ability to call the same objects from IIS and Active Server Pages.</li></p>
</ul>

<A NAME="336"><H2>MTS Services</H2></A>

<P>The application infrastructure in a multi-user environment is composed of the services that enable many users to access an application and underlying data at the same time. Furthermore, these services maintain the integrity of the data and processes that keep the business in working order. The application infrastructure includes services that manage resources, such as threads and database connections, security, and transactions.</P>

<P>While the n-tier model has been available for some time, developers in the past were forced to spend a large portion of development time creating the application infrastructure under which these applications could run. MTS eases the transition from single-user to multi-user development by providing the application infrastructure for building scalable, robust enterprise applications. This is possible because MTS provides specific services that are transparent to the user during the execution of an application.</P>

<A NAME="337"><H3>Component Transactions</H3></A>

<P>Component transactions are similar to database transactions. However, rather than encompassing SQL statements, a component transaction consists of methods running on one or more components. MTS monitors components as they interact with transactional resources, such as databases, and coordinates changes. Access to resources can be from a single component or from multiple components that are called together to form a single business operation. After all of the work in a transaction completes, MTS initiates a two-phase commit protocol. Each resource will transparently ensure that all databases and other resources included in a request will commit or abort as a unit. If an MTS component aborts a transaction, MTS facilitates the rollback of any changes made by that component as well as any changes made by other components running under the same transaction context.</P>

<A NAME="338"><H3>Object Brokering</H3></A>

<P>MTS acts as an object broker by servicing requests made from various clients for instances of a component. MTS acknowledges requests for object creation from remote clients. MTS then coordinates the creation, maintenance, and destruction of COM component instances and the threads that execute inside them. Another advantage is location independence of the component from the client. This feature supports dynamic reconfiguration, changing the execution location of an object without having to change the client application code, after the development phase.</P>

<A NAME="339"><H3>Resource Pooling</H3></A>

<P>MTS provides pooling and automatic management of two critical server resources: threads and database connections. A pool of connections to a database, managed by the ODBC or OLE DB driver, provides high-performance access without forcing the developer to manage complex database synchronization issues. MTS employs a pool of threads to make the components respond to client requests quickly. MTS also provides a mechanism that makes it easy to share data among multiple parallel executing objects without forcing you to program complex state sharing and synchronization logic.</P>

<A NAME="340"><H3>Just-in-Time Activation</H3></A>

<P>In most distributed object environments, instances of server-based objects remain active, and consume server resources, as long as one or more clients hold a reference to the object. In multi-user environments, this can result in tremendous server resource requirements. To address this issue, MTS extends the COM object model with Just-in-Time (JIT) activation where components only consume server resources while they are actually executing.</P>

<P>After an MTS-based component indicates that it has completed its work, MTS deactivates the component and recycles its resources. As long as the component is deactivated, only limited server resources remain allocated to it. When the component is called again, MTS reactivates it by reacquiring any resources that the component needs. Most important, from the client's perspective, only a single instance of the component exists from the time the client creates it to the time it is finally released. No special programming is required. </P>

<P>This ability gives you additional control over object lifetime and allows you to use server resources more efficiently. From the client's perspective, only a single instance of the object exists from the time the client creates it to the time it is finally released. In actuality, the object may be deactivated and reactivated many times. Object instance management and just-in-time activation enables MTS applications to scale better than most component applications built with traditional object-oriented infrastructure approaches.</P>

<A NAME="341"><H3>Support for Component Packages</H3></A>

<P>Assembling different software components into a single solution can present configuration and deployment issues. To address these issues, MTS provides <I>packages</I> to make it easy for developers to combine different COM components into a single manageable unit. A package contains a group of related component classes and their associated type libraries. You create a package and add components to it by using the MTS Explorer. You can then deploy and administer the components in the package as a group. Each component that runs under MTS must belong to a package.</P>

<P>Components in a package execute in the same process space, share common security, and can be deployed as a single unit. Packages also increase application deployment flexibility. An entire application can be distributed as a single package and then partitioned into multiple packages to optimize performance, load balancing, and fault isolation.</P>

<A NAME="342"><H3>Process Isolation</H3></A>

<P>MTS enables multiple components to be grouped together into packages, with each package operating in its own protected address space in memory. This is critical when you are integrating a software component purchased from a third party into an existing solution. Data corruption in one component cannot propagate to components in another package.</P>

<A NAME="343"><H3>Automatic Thread Pooling</H3></A>

<P>One way that developers can gain more scalability from their applications is to use Microsoft Windows NT threads instead of processes for application execution. To make it easy for developers to use threads, MTS provides an automatic thread pooling mechanism. When a request for component execution comes in to MTS from a client, MTS automatically locates an available thread from a pool, executes the component on the thread, and returns the thread to the pool. This simplifies programming and reduces the overhead of thread creation and deletion to improve performance.</P>

<A NAME="344"><H3>Security</H3></A>

<P>MTS provides a distributed security implementation for component-based applications. MTS uses Windows NT security to authenticate users, but provides its own options for authorization. Transaction Server provides two complementary models called <I>declarative security</I> and <I>programmatic</I> <I>security</I>. Declarative security, which is used by default, is specified when components are added into a package, and does not require developers to do any programming. Administrators declare which users and groups of users have access to a package using the MTS Explorer. This enables deployment-specific security, which can be used with pre-built components purchased from third parties.</P>

<P>In contrast, programmatic security lets you build custom access controls directly into components by explicitly using <I>roles</I>. Roles are central to the MTS security model. A role is a concept that defines a logical group of users. At development time, you use roles to define declarative authorization and programmatic security logic. At deployment time, you bind these roles to specific groups and users. For example, roles in a banking application could be called teller and manager, and components could check to make sure that the current user has been given manager privileges before performing certain operations. Administrators associate users with roles using the MTS Explorer. More importantly, components themselves have no embedded knowledge of specific users and don't have to make explicit calls to the Windows NT Security environment. This dramatically improves the ability of a component to be both secure and reusable. In Chapter 10, &quot;<A HREF="ch10a.htm#373">Implementing Security in the Enterprise</A>,&quot; you will learn how to use MTS roles in your application. In this chapter, however, you will focus on setting up roles on the MTS System package as explained in Lesson 2.</P>

<A NAME="345"><H3>Administration</H3></A>

<P>The MTS administration feature, Transaction Server Explorer, handles the administration of the middle tier of a client/server system. The MTS Explorer is a GUI-based systems management interface that makes it easy for administrators to create and manage packages, configure component properties such as security and transaction behavior, and monitor/manage operating servers. Other MTS Explorer features include:</P>
<ul>
<p><li> Advanced ease-of-use features, such as drag-and-drop support for installing components into the MTS environment and multiple item selection to make the same changes to more than one object at a time.</li></p>

<p><li> Operational features, such as the ability to lock packages to prevent changes while in deployment, view execution status, and rename packages and security roles.</li></p>

<p><li> The ability to manage IIS applications running under MTS and packages created by SNA Server 4.0.</li></p>

<p><li> A Software Development Kit (SDK) for developing applications that install and configure MTS applications automatically.</li></p>
</ul>
<P>You can use the MTS Explorer in both the development and deployment stages of a client/server system. MTS Explorer is a part of the new Microsoft Management Console (MMC), a graphical application that looks like Windows Explorer, as illustrated in Figure 9.1.</P>

<P>
<A HREF="javascript:fullSize('F09xx01x.htm')"> <img src="images/F09xx01.JPG" width=404 height=251 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 9.1</b> <i>MTS Explorer within Microsoft Management Console</i><!--/caption-->
</P>


<P>Several items can be administered with the MTS Explorer including:</P>

<ul>
<p><li> Installed components</li></p>

<p><li> Component locations</li></p>

<p><li> Transaction monitoring</li></p>

<p><li> Diagnostic output</li></p>

<p><li> Security role definitions</li></p>
</ul>

<A NAME="346"><H2>An MTS Application Example</H2></A>

<P>Consider a simple bank funds transfer application assembled from three components: Transfer, Credit, and Debit, each built by a different developer.</P>

<ul>
<p><li> Credit adds an amount to a checking account database.</li></p>

<p><li> Debit subtracts an amount from a savings account database.</li></p>

<p><li> Transfer moves money from checking to savings by calling Credit and Debit.</li></p>
</ul>

<P>Assume that Transfer begins work by calling Debit and Credit. Debit succeeds and subtracts $100 from a database. Credit fails because its database was unable to commit successfully. Unless the developer of Transfer has programmed what to do if one of the components has failed, the application will withdraw $100 from the savings account without putting it in a corresponding checking account. Although this scenario may be easy to correct in an application using only a few components, typical business applications involving hundreds of components running across multiple servers are unmanageable without transactions. With component-based development, an automatic distributed transaction infrastructure is the only way to address these issues in a cost-effective manner. Figure 9.2 illustrates the difference between performing a transfer within a transaction and performing a transfer without using a transaction.</P>

<P>
<A HREF="javascript:fullSize('F09xx02x.htm')"> <img src="images/F09xx02.JPG" width=404 height=226 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 9.2</b> <i>Comparison of performing a transfer within and without a transaction</i><!--/caption-->
</P>


<P>MTS makes transaction management transparent to the component developer. Developers do not have to write begin or end transaction statements into their application code. Developers can even use different tools and languages to build their components. They simply declare components to be transactional using the MTS Explorer. Then, when a component begins execution, MTS starts a transaction automatically if one is required.</P>

<P>When the component accesses a resource such as a database or mainframe application, MTS automatically enlists the resource in the transaction. If the component calls another component, the called component is automatically included in the transaction. When all components in a transaction complete their work, MTS initiates a full two-phase commit to either commit or abort the work.</P>

<A NAME="347"><H2>Lesson Summary </H2></A>

<P>Microsoft Transaction Server (MTS) simplifies development of distributed, component-based applications. With MTS, you can use your existing skills with Visual Basic to build sophisticated n-tier applications. In MTS applications, application logic components run under the control of MTS and are invoked by presentation services running on various types of clients.</P>

<P>Although MTS can be used to manage transactions, it also provides a run-time infrastructure for deploying and managing distributed applications. MTS services for COM DLLs include:</P>

<ul>
<p><li> Component Transactions</li></p>

<p><li> Object Brokering</li></p>

<p><li> Resource Pooling</li></p>

<p><li> Just-in-Time Activation</li></p>

<p><li> Support for Component Packages</li></p>

<p><li> Process Isolation</li></p>

<p><li> Automatic Thread Pooling</li></p>

<p><li> Security</li></p>

<p><li> Administration</li></p>
</ul>

</BODY>
</HTML>



