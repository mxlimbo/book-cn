<HTML>
<HEAD>
<TITLE>Lesson 2: Implementing SQL Server Security</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10b.htm", "ch10d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="386"><H1>Lesson 2: Implementing SQL Server Security</H1></A>

<P>SQL Server databases are most commonly used by a large number of users, which means that you must implement security controls to ensure that only individuals with the proper authority and expertise perform certain activities. For example, only human resources or accounting personnel should perform payroll disbursements and updates. In addition, company information must be protected, and cannot be shared with everyone in the company, or even with the general public. A person must have the proper credentials to access sensitive and confidential information stored in a SQL Server database.</P>

<P>Although the simplest security mechanism would be to give everyone full access to everything in the database, a well-intentioned coworker experimenting with SQL Server could accidentally delete a year's worth of sales transactions. In addition, more malevolent users may attempt to gain unauthorized access to sensitive personnel or customer data. These kinds of unintentional mistakes and unauthorized data access can be detrimental to a company. In this lesson, you will learn how to secure your SQL Server database to prevent these kinds of catastrophes.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li>Explain the concept of groups and roles.</li></p>

<p><li>Describe standard, mixed, and integrated security in SQL Server.</li></p>

<p><li>Create new users and groups in Windows NT Server.</li></p>

</ul>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>

<A NAME="387"><H2>Overview of SQL Server Security</H2></A>

<P>The security process in SQL Server is similar to Windows NT because it is stored, managed, and enforced through a hierarchical system of users. SQL Server uses roles, previously known as groups, to make it easier to grant or deny permissions to many users at once. A Windows NT group is an administrative unit that contains users or other groups. A role is an administrative unit within SQL Server that contains SQL Server logins, Windows NT logins, groups, or other roles. Permissions granted to, denied to, or revoked from a role also apply to any members of the role. Permissions are applied automatically when the users become members of the role.</P>

<A NAME="388"><H3>Security Modes in SQL Server</H3></A>

<P>There are two security modes that you can use when you configure SQL Server security.</P>

<ul>
<p><li>Windows NT Authentication</li></p>

<P>Windows NT Authentication security allows SQL Server to use Windows NT authentication to validate SQL Server logins for all connections. Therefore, clients that connect in integrated security mode have trusted connections. Users have a single login ID and password for both Windows NT and SQL Server. The clients of SQL Server in an n-tier application can be MTS components. Later in this chapter, you will learn how MTS components and packages can be configured to take advantage of integrated security.</P>

<p><li>Mixed</li></p>

<p>Mixed Mode allows users to connect using Windows NT Authentication or SQL Server Authentication. Users who connect through a Microsoft Windows NT user account can make use of trusted connections (connections validated by Windows NT) in either Windows NT Authentication Mode or Mixed Mode. After successful connection to SQL Server, the security mechanism is the same for both modes.</p>
</ul>

<A NAME="389"><H3>SQL Server Security for Enterprise Applications</H3></A>

<P>Windows NT Authentication security is recommended for enterprise solutions using Windows NT Server, MTS, and SQL Server. Windows NT Authentication security makes management of logins easier because accounts can be administrated from one source in Windows NT. Also, you can avoid coding login IDs and passwords into your components, or placing them in open database connectivity (ODBC) data source names (DSNs). Any login changes under standard security would force components to be recompiled, or ODBC DSNs to be tracked down and updated.</P>

<P>To set up an n-tier application to use SQL Server Windows NT Authentication security, create the necessary Windows NT user accounts for use by the MTS packages. When an MTS component connects to SQL Server, it is identified through integrated security as the Windows NT user account assigned to its package.</P>

<P>Regardless of whether you use Windows NT Authentication security or mixed security to connect to a database, SQL Server uses the login to identify the connection. A middle-tier component must have permissions to perform any operations on the database. The component's permissions depend on its login.</P>

<P><li><B> To create a new Windows NT user account</B></li></P>

<ol>
<p><li>Start the User Manager for Domains in Windows NT Server. </li></p>

<p>The User Manager is launched from the Start menu under the Programs, Administrative Tools folder.</p>

<p><li>On the <B>User</B> menu, click <B>New</B> <B>User</B>.</li></p>

<p>The New User dialog box appears, as illustrated in Figure 10.3.</p>

<p><li>Enter a user name.</li></p>

<p><li>Enter and remember the password for this user.</li></p>

<p><li>Set the account options as follows:</li></p>

<ul>
 <p><li>Clear the User Must Change Password at Next Logon checkbox.</li></p>

 <p><li>Check User Cannot Change Password checkbox.</li></p>

 <p><li>Check Password Never Expires checkbox.</li></p>

 <p><li>Clear the Account Disabled checkbox.</li></p>
</ul>
 
<p><li>Click the <B>Add</B> button to add the new user.</li></p>

<p><li>Click the <B>Close</B> button to close the New User dialog box.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx03x.htm')"> <img src="images/F10xx03.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.3</b> <i>The New User dialog box</i><!--/caption-->
</P>

</ol>

<P><li><B> To create a new Windows NT group account</B></li></P>

<ol>
<p><li>Start the User Manager for Domains in Windows NT Server.</li></p>

<p><li>On the <B>User</B> menu, click <B>New</B> <B>Local</B> <B>Group</B>.</li></p>

<p>The New Local Group dialog box appears, as illustrated in Figure 10.4.</p>

<p><li>Enter the Group Name.</li></p>

<p><li>Click the <B>Add</B> button to add any existing user accounts.</li></p>

<p>You can also click the <B>Remove</B> button to remove any user accounts that do not belong to this group.</p>

<p><li>Once the user accounts have been added, click <B>OK</B> in the New Local Group dialog box to create the new group account.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx04x.htm')"> <img src="images/F10xx04.JPG" width=404 height=249 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.4</b> <i>The New Local Group dialog box</i><!--/caption-->
</P>


</ol>

<P><li><B> To assign permissions to SQL Server objects</B></li></P>

<ol>
<p><li>Start the SQL Server Enterprise Manager.</li></p>

<p><li>Open the object to which you want to assign permissions, such as a table or stored procedure.</li></p>

<p><li>Click the <B>Permissions</B> button, which displays the <B>Object Permission</B> dialog box.</li></p>

<p>Figure 10.5 illustrates this process.</p>

<p><li>Select the permissions you want enabled for each user.</li></p>

<p><li>Click <B>OK</B> to assign the permissions.</li></p>

<P>
<A HREF="javascript:fullSize('F10xx05x.htm')"> <img src="images/F10xx05.JPG" width=404 height=296 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.5</b> <i>Opening the Object Properties dialog box by clicking Permissions</i><!--/caption-->
</P>


</ol>

<A NAME="390"><H3>Connecting to SQL Server in a Middle-Tier Component</H3></A>

<P>A component supplies its login through the ConnectionString property of the ADO Connection object. Another method consists of the login being passed as a ConnectionString parameter to the Open method of the Connection object, or ActiveConnection parameter to the Open method of the Recordset object. If a component supplies a login ID and password, the component connects using standard security. If the component does not supply a login ID and password, the component connects using integrated security, and its package's identity is used as the login.</P>

<P>If you are connecting through an OLE DB provider, you must notify the provider that you are connecting using integrated security. You do not provide a user ID or password, and you set the Trusted_Connection attribute, as shown in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim conn as ADODB.Connection
Set conn = New ADODB.Connection
conn.Provider = &quot;SQLOLEDB&quot;
conn.ConnectionString = &quot;Data Source=vb6entsvr;&quot; &amp; _
    &quot;Initial Catalog=Pubs;Trusted_Connection=Yes&quot;
conn.Open
</pre></td></tr></table></p>

<A NAME="391"><H2>Comparison of SQL Server Security Modes</H2></A>

<P>It can be easier to create security systems based on SQL Server logins and passwords than security systems based on Windows NT user and group accounts, especially for databases that are not mission critical and applications without sensitive and confidential information. For example, you can create a single SQL Server login and password for all users of an application, rather than creating all the necessary Windows NT user and group accounts. However, this is not recommended because it takes away the ability to track and control the activities of individual users.</P>

<P>In addition, Windows NT Authentication security has certain benefits over mixed mode security based on SQL Server logins and passwords because of its integration with the Windows NT security system. Windows NT security provides more features, such as secure validation and encryption of passwords, auditing, password expiration, minimum password length, and account lockout after multiple invalid login requests. Because only Windows NT maintains users and groups, SQL Server reads information about a user's groups membership when the user connects. If changes are made to the accessibility rights of a connected user, the changes become effective the next time the user connects to SQL Server or logs on to Windows NT.</P>

<A NAME="392"><H2>Lesson Summary </H2></A>

<P>In SQL Server, you can implement Windows NT Authentication and Mixed mode security. Windows NT Authentication security benefits enterprise applications because management of logins is made easy. You can administer user accounts from one source in Windows NT by using Windows NT Authentication security. Also, you can avoid coding login IDs and passwords, or ODBC DSNs into your components. Any login changes under standard security would force components to be recompiled, or DSNs to be updated. If you are connecting through an OLE DB provider using an ADO Connection object, you must notify the provider that you are connecting using integrated security by setting the Trusted_Connection attribute. You do not provide a user ID or password in the connection string.</P>

</BODY>
</HTML>



