<HTML>
<HEAD>
<TITLE>Lesson 3: Creating COM DLLs and EXEs</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03c.htm", "ch03e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="138"><H1>Lesson 3: Creating COM DLLs and EXEs</H1></A>

<P>In Lesson 2, you learned how to create simple class modules from which you can create objects. In this lesson, you will go a step further by implementing class modules with COM code components. Code components provide libraries of programmable objects because they contain one or more class modules. Objects in a code component can run either in the same process as your application, or in a separate process. COM DLLs typically run in-process, allowing faster access to objects, and COM EXEs run out-of-process, providing better fault tolerance. In n-tier architecture, you implement business rules in COM code components.</P>

<P>Because this course focuses on creating code components for use with Microsoft Transaction Server (MTS), it will also focus on creating COM DLLs because components in MTS must be DLLs. You will learn about MTS in Chapter 9, &quot;<A HREF="ch09a.htm#329">Using Microsoft Transaction Server</A>.&quot;</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>
<p><li> Set project properties for COM DLLs.</li></p>

<p><li> Describe the different threading models for Visual Basic components.</li></p>

<p><li> Implement unattended execution of COM components.</li></p>

<p><li> Describe the use of the Instancing property for COM components.</li></p>

<p><li> Register and unregister COM components.</li></p>

<p><li> Create, test, and debug COM components.</li></p>

</ul>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div>
</p>


<A NAME="139"><H2>ActiveX Project Templates</H2></A>

<P>When you create a new project in Visual Basic, you choose a template on which to base the new project. To create a COM component, you choose either the ActiveX EXE or the ActiveX DLL template in the New Project dialog box. You can build and run either in-process or out-of-process COM components in the Visual Basic integrated development environment (IDE). In-process components are COM DLLs, and out-of-process components are COM EXEs. Which type of component you create depends on the needs of the application; each has its own advantages and disadvantages:</P>

<ul>

<p><li> In-process DLLs provide faster access to objects but are less fault-tolerant. If the DLL fails, the entire host process fails.</li></p>

<p><li> Out-of-process EXEs provide better fault tolerance because faults are limited to just the out-of-process EXE. If the EXE fails, other processes in the system will not fail. However, COM EXEs are always slower than COM DLLs because method calls must be marshaled between processes.</li></p>

</ul>


<A NAME="140"><H2>Setting ActiveX DLL Project Properties</H2></A>

<P>You can set a number of properties for DLL projects, such as the project type, name, and description. The values of these properties affect how your COM component runs. In Visual Basic, you set project properties through the Project menu. On the General tab of the Project Properties dialog box, you can select the options you want.</P>


<A NAME="141"><H3>Project Type</H3></A>

<P>When you create a new ActiveX DLL or ActiveX EXE project, Visual Basic automatically sets the Project Type property. The project type determines how some other project options can be set. For example, ActiveX DLL projects allow you to choose a threading model; ActiveX EXE projects do not.</P>

<P>You can change a project type to another project type, and all associated changes are made automatically. However, if you have properties in the current project that are not valid in the new project, you will get a message suggesting that you not make the change.</P>


<A NAME="142"><H3>Startup Object</H3></A>

<P>The Startup Object allows you to specify whether you want code to run when the component is loaded. For most DLLs, set the Startup Object field to (None), and code runs when Visual Basic creates an instance of a class (in the Class_Initialize event procedure).</P>

<P>If you want initialization code to run when the DLL is loaded, set the Startup Object property to Sub Main and place code in a Sub Main procedure within a standard code module, as illustrated in Figure 3.10.</P>

<P>
<A HREF="javascript:fullSize('F03xx10x.htm')"> <img src="images/F03xx10.JPG" width=404 height=234 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.10</b> <i>Using Sub Main as the Startup Object</i><!--/caption-->
</P>



<A NAME="143"><H3>Project Name</H3></A>

<P>The project name is the name of the type library for your component. The type library contains the description of the objects and interfaces your component provides. The project name also identifies your component in the Windows Registry and the Object Browser, so it is important that it has a unique name.</P>

<P>The Project Name field specifies the first part of the programmatic identifier (ProgID) for the component. The ProgID combined with the class name forms a complete programmatic identifier. For example, if the project name is MyComponent, and the class name is MyClass1, then the programmatic identifier is MyComponent.MyClass1. This is the name a client uses when it calls the CreateObject function or uses the New operator in conjunction with the Set statement.</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
' MyComponent is the component name
' MyClass1 is the class name
Dim Obj As MyComponent.MyClass1
Set Obj = New MyComponent.MyClass1
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="144"><H3>Project Description</H3></A>

<P>When you set a description of the component, the contents appear in the References dialog box when you select references for other Visual Basic projects. The text also appears in the Description pane at the bottom of the Object Browser, as illustrated in Figure 3.11.</P>

<P>
<A HREF="javascript:fullSize('F03xx11x.htm')"> <img src="images/F03xx11.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.11</b> <i>Project description appearing in the Object Browser</i><!--/caption-->
</P>



<A NAME="145"><H3>Help Information</H3></A>

<P>You can specify help information for all of your Visual Basic projects. The Help File Name field displays the name of the help file (.hlp) associated with the project. In an ActiveX code component project, the project's Help Context ID field lists the context ID for a specific help topic. This help topic is called when a user clicks the help button while the application's object library, or type library, is selected in the Object Browser.</P>


<A NAME="146"><H3>Upgrade ActiveX Controls</H3></A>

<P>Selecting the Upgrade ActiveX Controls check box ensures that any ActiveX controls that your project references are the most up-to-date. If this check box is selected, and updated ActiveX controls are loaded onto the computer, Visual Basic automatically references the updated controls when you reload the project. If a newer version of an ActiveX control is available and the Upgrade ActiveX Controls option is not selected, a dialog box prompting you to upgrade the control appears.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Upgrade ActiveX Controls option is selected by default.
</blockquote></div>
</p>


<A NAME="147"><H3>Unattended Execution</H3></A>

<P>The Unattended Execution option specifies whether the component runs without user interaction. Unattended components do not have a user interface. Setting the Unattended Execution option disables all user interactions, including message boxes and system error dialog boxes, so any run-time functions, such as messages that normally result in user interaction, should be written to an event log. For example, you can log events or messages to a file of your choice, or to the system event log on Windows NT. </P>

<P>The LogMode property of the App object controls the way logging is done, and the LogPath property specifies the name of the log file. Items entered in the log file include: </P>

<ul>

<p><li> Text from message boxes your component attempts to display.</li></p>

<p><li> System errors.</li></p>

<p><li> Text strings entered using the App.LogEvent method.</li></p>

</ul>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
When your component is running in the development environment, these entries go to the Immediate window instead of to the log file.
</blockquote></div>
</p>

<P>To use default logging without specifying LogPath or LogMode, use the following code:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
With App
    .LogEvent &quot;Default Logging &quot; &amp; Now(), vbLogEventTypeInformation
End With
</PRE>
</TD></TR></TABLE>
</P>


<P>To perform logging to a file by specifying LogPath and LogMode in the StartLogging method call, use the following code:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
With App
    .StartLogging &quot;C:\temp\logtest.log&quot;, vbLogToFile
    .LogEvent &quot;Specified Path File Logging &quot; _
        &amp; Now, vbLogEventTypeInformation
End With  
</PRE>
</TD></TR></TABLE>
</P>

<P>If you are using Windows NT, check the default logging with the Event Viewer by selecting Application from the Log menu, then press the F5 key to refresh. If you are using Windows 95 or Windows 98, you can find VBEvents.log in the system directory (typically the C:\Windows directory). The non-default log file (LogTest.log) for both platforms is in the C:\Temp\ directory.</P>


<A NAME="148"><H3>Retained In Memory</H3></A>

<P>If you select the Unattended Execution option, you can choose to retain your project in memory. Normally, when you release all references to objects in a Visual Basic COM DLL, Visual Basic frees data structures in memory that are associated with the project. If you recreate the objects, those data structures must be recreated as well. If you select the Retained In Memory option, Visual Basic does not unload internal data structures when the DLL is no longer referenced. This option works most efficiently in the MTS environment where objects are constantly reused.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Microsoft Transaction Server Service Pack 1 automatically enables the Retained In Memory feature at run time, even if you did not select it at design time.
</blockquote></div>
</p>

<A NAME="149"><H3>Threading Model</H3></A>

<P>Win32 programming involves understanding <I>processes</I> and <I>threads</I>. A process is an instance of an application that has an address space with four gigabytes of <I>virtual</I> <I>memory</I> and other resources. Threads are objects that live in a process, and are the actual pieces of code that are executed on the processor. Each process starts with one thread, called the <I>primary</I> <I>thread</I>. A process always has one or more threads executing; the process ends when there are no more threads executing. The term <I>multithreading</I> comes from the fact that a process can execute more than one thread.</P>

<p><b>Apartment Threaded</b></p>

<P>In an ActiveX DLL project, the Threading Model list box allows you to choose whether your component is single-threaded or apartment-threaded. The default threading model is set to Apartment Threaded.</P>

<P>The apartment model is a COM-specific form of multithreading in Windows 95, Windows 98, and Windows NT. An apartment is essentially a way of describing a thread with a message queue that supports COM objects. Visual Basic greatly simplifies the job of authoring in-process components that multithreaded clients can use safely and efficiently. All COM components created with Visual Basic use apartment model threading, whether they're single-threaded or multithreaded.</P>

<p><b>Single Threaded</b></p>

<P>A single-threaded component has only one apartment, which contains all the objects the component provides. This means that a single-threaded DLL that you create with Visual Basic is safe to use with a multithreaded client. However, there is a performance trade-off for this safety: Visual Basic marshals calls from all client threads except one, just as if they were out-of-process calls.</P>

<p><b>Advantages of Apartment-Model Threading</b></p>

<P>Marking an ActiveX DLL project for apartment-model threading provides the following benefits: </P>

<ul>

<p><li> All of the objects a client creates on a given thread are created in the same apartment (thread) in the DLL. Calls to these objects do not require cross-thread marshaling, making them more efficient.</li></p>

<p><li> When a component has one thread of execution, code for only one object can execute at any given time. COM deals with this situation by serializing requests; the requests are queued and processed one at a time until they are all completed. Because an object is accessed only on the thread where it was created in apartment-model threading, calls are synchronized (serialized) so that a call is never interrupted by a call from another thread.</li></p>

<p><li> Arguments for cross-thread calls are marshaled, and the calling thread is blocked. This synchronization of data protects the calling thread's state.</li></p>

</ul>

<p><b>ActiveX EXE Threading</b></p>

<P>For ActiveX Exe projects, you can either specify that each new object be created on a new thread (Thread Per Object), or limit your component to a fixed pool of threads. A thread pool size of one makes the project single-threaded; a larger thread pool makes the project apartment-threaded. Visual Basic provides the following three models for assigning objects to threads in out-of-process components:</P>

<ul>

<p><li> One thread of execution</li></p>

<p>To use this option, select the Thread Pool option with one thread.</p>

<p><li> Thread pool with round-robin thread assignment</li></p>

<p>To use this option, select the Thread Pool option and specify the number of threads to allow.</p>

<p><li> Every externally created object on its own thread</li></p>

<p>To use this option, select the Thread Per Object option.</p>

</ul>

<P>A new ActiveX EXE project is single-threaded by default, which means that it can run only one method call at a time. When multiple clients are connected to the server component, this can cause one client's call to a method to block calls from all other clients. To increase the responsiveness of the server component, you can change the threading model. </P>

<P>If you choose the Thread Pool option (round-robin thread assignment), you cannot predict when objects will share global data, or when they will block each other from executing. The behavior of the round-robin thread pool algorithm is therefore referred to as <I>nondeterministic</I>. However, the advantage of this threading model is that it puts a limit on the total number of threads.</P>

<P>In the Thread Per Object model, as clients request objects, Visual Basic creates each object on a new thread. When the last client releases its last reference to objects on that thread, Visual Basic terminates the thread. The big drawback to the Thread Per Object model is that you have no control over the number of objects (and hence threads) that clients create. Too many active threads-threads that are actively executing code-will bog down the operating system. As a general rule, you want about the same number of active threads as you have processors.</P>


<A NAME="150"><H2>Setting Class Properties in a Component</H2></A>

<P>You set properties for each class module in the COM component to determine how client applications identify and create a class module. For example, when you set the Name property for a class, client applications use the value of the Name property to create an instance of a class. For example, if you name a class module Manager in an Employees component, you would create an instance of the Manager class using the following code:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim Emp As Object
Set Emp = CreateObject (&quot;Employees.Manager&quot;)
</PRE>
</TD></TR></TABLE>
</P>

<P>Setting the Name property for a class module is fairly simple; however, there are more advanced property settings that take more consideration.</P>


<A NAME="151"><H3>Setting the Instancing Property</H3></A>

<P>The value of the Instancing property determines the availability of your class, and how other applications create instances of the class. Some Instancing values are valid for only COM DLLs, only COM EXEs, or for both, as shown in the following table:</P>

<P>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH>Instancing Value</TH>
			<TH>Description</TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Private</TD>
			<TD VALIGN="TOP">Both COM DLLs and COM EXEs can have an Instancing value of Private. Private means that other applications aren't allowed access to type library information about the class and cannot create instances of it. Private objects are for use only within your component. Private is the default Instancing value.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">PublicNotCreatable</TD>
			<TD VALIGN="TOP">Both COM DLLs and COM EXEs can have an Instancing value of PublicNotCreatable. PublicNotCreatable means that other applications can use objects of this class only if your component creates the objects first. Other applications cannot use the CreateObject function or the New operator to create objects from the class.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">MultiUse</TD>
			<TD VALIGN="TOP">Both COM DLLs and COM EXEs can have an Instancing value of MultiUse. MultiUse allows other applications to create objects from the class. One instance of your component can provide any number of objects created using MultiUse.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">GlobalMultiUse</TD>
			<TD VALIGN="TOP">GlobalMultiUse is like MultiUse, with one addition: you can invoke properties and methods of the class as if they were simply global functions. It's not necessary to explicitly create an instance of the class first, because Visual Basic creates one automatically.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">SingleUse</TD>
			<TD VALIGN="TOP">Only COM EXEs can have an Instancing value of SingleUse. SingleUse allows other applications to create objects from the class, but every object of this class that a client creates starts a new instance of your component.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">GlobalSingleUse</TD>
			<TD VALIGN="TOP">GlobalSingleUse is like SingleUse, except that you can invoke properties and methods of the class as if they were simply global functions.</TD>
		</TR>
		
	</TABLE>
</P>
	
<P>You can build libraries of general-purpose procedures in Visual Basic by creating methods in a class module. You can set the Instancing property of the class module to any value except Private or PublicNotCreatable to allow clients to create instances of the class. </P>

<P>In COM DLLs, instancing for an externally creatable class is usually set to MultiUse. This setting allows an in-process component to supply any number of instances of the class to the client executable and to any other in-process component. </P>

<P>For COM EXEs, however, the instancing values SingleUse and MultiUse define very different behaviors for a class. MultiUse makes the most efficient use of memory, because it allows one instance of your component to provide multiple objects to multiple client applications without duplication of resources or global data. If the Instancing property of a class is set to MultiUse, and one client application creates two objects, or two client applications each create an object, one instance of your component supplies all objects. However, if the Instancing property is set to SingleUse, the result of both scenarios is that a separate copy of your component is loaded into memory for each object created.</P>


<A NAME="152"><H3>Data Binding Properties</H3></A>

<P>You can set the DataSourceBehavior property to determine if an object can act as a source of data for other objects. A data source is a class that provides data from an external source that other objects consume. A Data control is in reality an instance of a class that is a data source, but classes that are set up to act as data sources have the potential to be much more powerful than a Data control. Unlike the Data control, a data-aware class doesn't have to have a visual representation. When you make your class a data source, you are making your class <I>data-aware</I>.</P>

<P>The DataSourceBehavior property determines whether a class can act as a data source. By setting the DataSourceBehavior to 1 (vbDataSource), your class can act as a source of data for other objects.</P>

<P>You can also use the DataBindingBehavior property when you want an object to act as a consumer of data provided by objects. A data consumer may be either simple bound (binding to single fields) or complex bound (binding to a rowset).</P>


<A NAME="153"><H3>The Persistable Property</H3></A>

<P>Most components have properties that have default values set in the Initialize event of the class. Those default values are constant when you compile the component. To allow developers to change the default values to meet their own special conditions, use classes that have a Persistable property, which allow you to store a component's values between instances. For example, suppose that you have a COM DLL that calculates loans, with an InterestRate property used in the calculations. You could initialize the InterestRate to a constant value; however, interest rates periodically go up or down, meaning that the InterestRate property would need to be modified each time the component is instantiated. With class persistence, you can store the InterestRate value and modify it only when the interest rate changes. Each time your component runs, it can retrieve the InterestRate from storage so that the component always provides the latest rate.</P>

<P>To be persistable, a class must meet two conditions: it must be public and creatable. If a class meets both conditions, the Persistable property appears in the Properties window. By default, the Persistable property is set to NotPersistable. When you change this value to Persistable, Visual Basic adds three new events to the class: ReadProperties, WriteProperties, and InitProperties-used to read, write, and initialize the class's properties, respectively.</P>


<A NAME="154"><H2>Registering and Unregistering Components</H2></A>

<P>Before you can use a COM component, you must ensure that it is available on your computer. There are several ways to register a COM DLL:</P>

<ul>

<p><li> Run the Setup program.</li></p>

<p>When you run the Setup program, the component is registered.</p>

<p><li> Compile the DLL in Visual Basic.</li></p>

<p>When you compile the DLL, it is automatically registered on the computer where you compiled it.</p>

<p><li> Run Regsvr32.exe.</li></p>

<p>When you run the Regsvr32 utility, it registers the DLL.</p>

</ul>

<P>When you run the installation program for a component, the program adds any required files and, typically, also registers the component. If you are using a component that does not have an installation program, use the Regsvr32 (Regsvr32.exe) utility to register the component yourself.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
When you create your own ActiveX EXE program and run it from the Visual Basic IDE, the program is automatically registered on your computer.
</blockquote></div>
</p>


<A NAME="155"><H3>Using the Regsvr32 Utility</H3></A>

<P>The Regsvr32 utility is located in the system directory (for example, C:\Windows\System). You can run Regsvr32 either from an MS-DOS prompt or from the Run command on the Windows Start menu. Because you cannot run a DLL by itself, you must use the Regsvr32 utility to register a DLL component. Regsvr32 has several options. For example, use the /u option to unregister a COM server; use the /s (silent) option to register a server without displaying subsequent dialog boxes. You can see a list of all Regsvr32 options by running Regsvr32.exe without specifying a DLL name, as shown in Figures 3.12 and 3.13.</P>

<P>
<img src="images/F03xx12.GIF" width=347 height=163 border="0">
</P><P>
<!--caption--><b>Figure 3.12</b> <i>Running Regsvr32 without specifying a DLL name</i><!--/caption-->
</P>


<P>
<A HREF="javascript:fullSize('F03xx13x.htm')"> <img src="images/F03xx13.JPG" width=404 height=178 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 3.13</b> <i>The RegSvr32 options dialog box</i><!--/caption-->
</P>


<P><LI><B> To register a DLL component</B></LI></P>

<ol>

<p><li> Click the Windows <B>Start</B> button.</li></p>

<p><li> On the <B>Start</B> menu, click <B>Run</B>.</li></p>

<p><li> On the <B>Run</B> dialog box, type the following command:</li></p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Regsvr32.exe &lt;DLLPath&gt;\&lt;DLL name&gt;.dll
</PRE>
</TD></TR></TABLE>
</P>

<p>A dialog box similar to that shown in Figure 3.14 appears.</p>

<p><li>Click <B>OK</B>.</li></p>



<P>
<img src="images/F03xx14.GIF" width=350 height=119 border="0">
</P><P>
<!--caption--><b>Figure 3.14</b> <i>RegSvr32 confirmation dialog box</i><!--/caption-->
</P>

</ol>

<P>You can register a COM EXE simply by running it or by double-clicking the file in Windows Explorer. In addition, if you use the command-line options /regserver and /unregserver, you can register or unregister any COM EXE without invoking the program's user interface.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You unregister a component to manually remove component references from the system registry. You can then delete the component's EXE or DLL file.
</blockquote></div>
</p>

<P><LI><B> To register or unregister an EXE component</B></LI></P>

<ul>

<p><li> Type the filename of the component (including the path) followed by /regserver or /unregserver.</li></p>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
C:\MyProject\MyComponent.exe /regserver
</PRE>
</TD></TR></TABLE>
</P>
</ul>

<A NAME="156"><H3>Component Information Stored in the Registry</H3></A>

<P>When you register a COM DLL, entries are placed in the registry to allow clients to locate, create, and use classes in the COM DLL. The registry entries for COM classes are located in HKEY_CLASSES_ROOT in the system registry. </P>

<P>Visual Basic generates three registry keys when you compile a COM DLL:</P>

<ul>

<p><li> ProgID key</li></p>

<p>The ProgID key is a string value representing the component name followed by the class name. For example, the ProgID key for a class identified as Employees.Manager is \HKEY_CLASSES_ROOT\Employees.Manager. The ProgID has a subkey named CLSID that contains the class ID (CLSID) for the class, and this is how you can map a ProgID to the CLSID that is then used to instantiate a COM class.</p>

<p><li> CLSID key</li></p>

<p>The CLSID key is used to identify a class. Visual Basic automatically generates a globally unique identifier (GUID) for each public class and interface in your component. These GUIDs are usually referred to as CLSIDs and interface IDs (IID). Class IDs and interface IDs are the keys to version compatibility for components authored using Visual Basic.</p>

<p><li> TypeLib key</li></p>

<p>The TypeLib key locates a type library for a component. The TypeLib keys are located at: HKEY_CLASSES_ROOT\TypeLib\&lt;libid&gt;. You can find the LIBID from the TypeLib subkey in the CLSID key.</p>

</ul>


<A NAME="157"><H2>Testing and Debugging Components</H2></A>

<P>Once you create a COM component, you will want to test and debug the component in the Visual Basic IDE using a compiled version of it. Visual Basic provides two different component debugging scenarios. For in-process components, you can load a Standard EXE test project and one or more component projects into the development environment as a <I>project</I> <I>group</I>. You can run all the projects in the group together, and step directly from test project code into in-process component code.</P>

<P>You can debug out-of-process components using two instances of the development environment. One instance of Visual Basic runs the test project, whereas the second runs the component project. You can step directly from test project code into component code, and each instance of Visual Basic has its own set of breakpoints and watches.</P>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="158"><H2>Practice: Using a Project Group to Test a COM DLL </H2></A>

<P>In this practice, you will create an ActiveX DLL project that has a property and a method that a client application can use. You will add a Standard EXE project to your ActiveX DLL project, creating a project group, to test your COM DLL.</P>

<P><LI><B> To create a COM DLL in Visual Basic</B></LI></P>

<ol>

<p><li> Create a new <B>ActiveX DLL</B> project in Visual Basic.</li></p>

<p><li> Name the project <B>SampleDLL</B>.</li></p>

<p><li> In the <B>General Declarations</B> section of the <B>Class1</B> module, type the following code:</li></p>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private UserName As String
Private strMessage As String
Public Sub SayHello()
    MsgBox &quot;Hello &quot; &amp; UserName &amp; &quot;!&quot;
End Sub
Public Property Let Name(Name As String)
    UserName = Name
End Property
Public Property Get Message()
    strMessage = &quot;Hello from DLL.&quot;
    Message = strMessage
End Property
</PRE>
</TD></TR></TABLE>
</P>
</ol>
<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Normally you would need to register the DLL before calling it. Leaving it running in Visual Basic allows us to test the DLL because it is currently loaded in memory.
</blockquote></div>
</p>

<P><LI><B> To create a test project</B></LI></P>

<ol>

<p><li> On the <B>File</B> menu, click <B>Add</B> <B>Project</B>.</li></p>

<p><li> On the <B>Add Project</B> dialog box, double-click <B>Standard</B> <B>EXE</B>.</li></p>

<p><li> Click the <B>Standard EXE</B> project in the Project Explorer.</li></p>

<p><li> On the <B>Project</B> menu, click <B>References</B>.</li></p>

<p><li> Select the checkbox next to <B>SampleDLL</B>, then click <B>OK</B>.</li></p>

<p><li> Add a CommandButton control to <B>Form1</B>.</li></p>

<p><li> In the <B>Click</B> event procedure for the CommandButton control, type the following code:</li></p>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Dim obj As SampleDLL.Class1
Dim strMessage As String

Set obj = New Class1
obj.Name = &quot;John&quot;
obj.SayHello

strMessage = obj.Message
MsgBox strMessage, , &quot;Message from DLL&quot;
</PRE>
</TD></TR></TABLE>
</P>

<p><li> Right-click the <B>Standard</B> <B>EXE</B> project in the Project Explorer, then click <B>Set As Start Up</B> on the drop-down menu.</li></p>

<p><li>On the <B>File</B> menu, click <B>Save Project Group</B>.</li></p>

<p>Save the files to the \Practice\Ch03 folder. </p>

<p><li> On the <B>Run</B> menu, click <B>Start</B>.</li></p>

<p>You will see two message boxes. The first message box is displayed from the SayHello method of your ActiveX DLL. The second message box displays the value of the Message property of the object you declared in the Command1_Click event procedure.</p>

<p><li> Click <B>OK</B> to close each message box that appears.</li></p>

<p><li> On the <B>Run</B> menu, click <B>End</B>.</li></p>

</ol>


<A NAME="159"><H2>Lesson Summary </H2></A>

<P>New COM components are based on either the ActiveX EXE or ActiveX DLL template. You can build either in- or out-of-process components depending on the needs of your application:</P>

<ul>

<p><li> DLLs (in-process components) are faster but less fault tolerant. These are the major focus of this course.</li></p>

<p><li> EXEs (out-of-process components) are slower but provide better fault tolerance.</li></p>

</ul>

<P>Project properties you can set include:</P>

<ul>

<p><li> Project Type</li></p>

<p>Determines several other possible options such as the threading model.</p>

<p><li> Startup Object</li></p>

<p>Specifies whether to run code when the component loads.</p>

<p><li> Project Name</li></p>

<p>Is the name of the type library for the component. It is important to choose a unique name.</p>

<p><li> Project Description</li></p>

<p>Allows contents to appear in the References dialog box and in the Object Browser. </p>

<p><li> Help Information</li></p>

<p>Specifies the help (.hlp) file for the application.</p>

<p><li> Upgrade ActiveX Controls</li></p>

<p>Provides automatic update if newer versions of controls are loaded onto the computer.</p>

<p><li> Unattended Execution</li></p>

<p>Specifies whether the component runs without the user interface.</p>

<p><li> Retained In Memory</li></p>

<p>Gives the option to keep the project in memory when Unattended Execution is specified.</p>

<p><li> Threading Model (ActiveX DLLs) </li></p>

<p>Provides a choice between single-threading or apartment-threading. Actually, apartment-threading is standard in Visual Basic, but the Threading Model option lets you specify one or multiple threads per apartment.</p>

</ul>

<P>The properties you set for each class module in the COM components determine how clients identify and create the class module. The properties include the following:</P>

<ul>

<p><li> Instancing</li></p>

<p>Determines the availability of your class and how other applications create instances. </p>

<p><li> DataSourceBehavior</li></p>

<p>Determines whether the object is data-aware or can act as a data source for other objects.</p>

<p><li> Persistable</li></p>

<p>Determines that the component has default values that are constant when you compile the component. To be persistable, the component must be public and creatable.</p>

</ul>

<P>Before you can use a COM component, you must register it to make it available on your computer. You can do this by creating a Setup program, compiling the DLL in Visual Basic, and running the Regsvr32 utility.</P>

<P>After you create a COM component, test and debug it in the Visual Basic IDE using both a compiled version of the component and a project group. </P>


</BODY>
</HTML>



