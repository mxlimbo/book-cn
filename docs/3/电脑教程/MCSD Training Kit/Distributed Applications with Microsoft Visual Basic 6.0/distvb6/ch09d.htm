<HTML>
<HEAD>
<TITLE>Lesson 3: Creating Solutions Using Microsoft Transaction Server</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch09e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="356"><H1>Lesson 3: Creating Solutions Using Microsoft Transaction Server</H1></A>

<p>When designing components for MTS, you focus on organizing components based on business functionality, reuse, and possible upgrading. MTS utilizes COM technology to allow you to run components on remote servers. In this lesson, you will learn the differences between how DCOM instantiates objects and how MTS instantiates objects. You will also learn how to design components to run in MTS, move your components into MTS, and deploy your MTS components to clients.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li> Use MTS Explorer to create packages.</li></p>

<p><li> Add components to MTS packages.</li></p>

<p><li> Deploy MTS packages and configure client computers.</li></p>

<p><li> Use transactions in MTS components.</li></p>

</ul>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>

<A NAME="357"><H2>Designing MTS Components</H2></A>

<P>In addition to separating components based on business functionality, you may also want to separate your business rule components from your data components. Both types of components are part of the middle tier. Business components encompass business rules and data components encapsulate data manipulation and access functions. Business components should focus more on the front-end aspects dealing with client requests and issues, whereas the data components should act as intermediaries between business components and the data tier.</P>

<P>For example, suppose Chateau St. Mark Hotels provided special pricing for guests who frequently visit the hotel. You could create two separate components to provide this discount.</P>

<ol>
<p><li> The business component could determine if the guest is eligible to receive special pricing.</li></p>

<p><li> The data component could actually do the work of retrieving the price from the data source.</li></p>
</ol>

<P>By carefully designing your components this way, you greatly improve your ability to update the application. If the business rules for one part of the application change, you only have to recompile one component. A well thought-out design also determines how an application can be optimized. If many people will be reserving standard suites in a hotel, but few will be reserving presidential suites, having two separate components that handle the two different business activities allows you to focus on the particular performance requirements of each component. After your component is designed, you can focus on utilizing MTS as a way to incorporate it into an n-tier solution.</P>

<A NAME="358"><H2>Creating MTS Components</H2></A>

<P>You create MTS components in Visual Basic by adding MultiUse classes to an ActiveX DLL project. After you compile your DLL, you move the DLL into MTS by dragging and dropping its file into an existing package in MTS Explorer. You can also create a new package and add components to it by using the MTS Explorer.</P>

<P><li><B> To create a new package</B></li></P>

<ol>
<p><li> In the left pane of the MTS Explorer, double-click the computer in which you want to create a new package.</li></p>

<p><li> Click the <B>Packages Installed</B> folder.</li></p>

<p><li> Right-click the <B>Packages Installed</B> folder, point to <B>New</B>, then click <B>Package</B>.</li></p>

<p><li> In the <B>Package Wizard</B>, click <B>Create An Empty Package</B>.</li></p>

<p>You can click Install Pre-built Packages to add an existing package that is created with the package export function. For more information, see <a href="ch09d.htm#364">Deploying MTS Components</a> in this chapter.</p>

<p><li> Enter a name for the new package, then click <B>Next</B>.</li></p>

<p><li> In the <B>Set Package Identity</B> dialog box, select the appropriate Account option. </li></p>

<p>This setting specifies which Windows NT user account the package will use when it runs as a server process. Setting a package's identity will be discussed in Chapter 10, &quot;<A HREF="ch10a.htm#373">Implementing Security in the Enterprise</A>.&quot;</p>

<p><li> Click <B>Finish</B> and the new package will appear in the Packages Installed folder.</li></p>
</ol>

<P>Once you have created a new package, you can add components that implement related business services. A component can be included only in one package on a single computer. You should keep this in mind when organizing your components into packages. For example, if you have a general-purpose component that will be used by many MTS applications, you should put this component and others like it into a single package. You can then install this package as a unit where needed.</P>

<P><li><B> To add a component to a package</B></li></P>

<ol>
<p><li> Double-click the <B>Packages Installed</B> folder, then double-click the package in which you want to install a component.</li></p>

<p><li> Click the <B>Components</B> folder.</li></p>

<p><li> Right-click the <B>Components</B> folder, click <B>New</B>, then select <B>Component</B>, as illustrated in Figure 9.8.</li></p>

<p><li> Click <B>Install New Component(s)</B>.</li></p>

<p><li> In the <B>Install Components</B> dialog box, click <B>Add Files</B> to select the component.</li></p>

<p><li> In the <B>Select Files to Install</B> dialog box, select the files you want to add, then click <B>Open</B>.</li></p>

<p><li> In the <B>Install Components</B> dialog box, click <B>Finish</B>.</li></p>
</ol>

<P>
<A HREF="javascript:fullSize('F09xx08x.htm')"> <img src="images/F09xx08.JPG" width=404 height=264 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 9.8</b> <i>Adding a component to an MTS package</i><!--/caption-->
</P>


<P>After you add your component to a package, MTS modifies the component's registry entries on the server so it will run in the MTS run-time environment. This ensures that the package's server process can load the component.</P>

<A NAME="359"><H3>How Remote Objects are Created</H3></A>

<P>In order to create a remote object, the COM needs to know the network name of the server computer. In the DCOM architecture, once the server name and the Class Identifier (CLSID) for a component are known, an element of the COM library called the service control manager (SCM) on the client machine connects to the SCM on the server machine and requests creation of this object. The SCM is a remote procedure call (RPC) server that allows service configuration and service control programs to manipulate services on remote computers.</P>

<P>Clients can instantiate an object in the MTS environment using the New operator or the CreateObject function; however, you should use the CreateObject function when creating an object from within the same COM DLL. When a client application requests an instance of a new object, it sends a request to the Service Control Manager (SCM) on the client computer. The client-side SCM forwards the request to the SCM of the computer containing the MTS component. The server-side SCM responds by making a local activation request on the package containing the component.</P>

<P>The component in the MTS package appears to be a typical COM component to the client. However, MTS performs some additional tasks to modify a component's functionality. When a COM DLL is added to MTS, the CLSIDs for its components are modified to reroute the activation requests made by clients. The LocalServer32 key for the CLSID in the registry is given a new path pointing to the Mtx.exe file followed by the GUID for the MTS package, as shown in the following example.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>C:\WINNT\SYSTEM32\Mtx.exe /p:{7CC3DBE3-EC38-11D2-8ED1-00105AA66B27}</pre>
</td></tr>
</table>
</p>

<P>The Mtx.exe file runs the MTS Executive (MTX), which provides run-time services for MTS components. These services include thread and <I>context</I> management. Context is a state that is implicitly associated with an MTS object. Context contains information about the object's execution environment, such as the identity of the object's creator and any transaction encompassing the work of the object. An object's context is similar in concept to a process that the Windows operating system maintains for an executing program. </P>

<P>When a client creates an MTS object, MTX intercepts the activation request and connects the client to a context object. The actual MTS object inside of the context object is then activated by the MTX. The context object will forward all method calls made to the MTS object. This entire process is transparent to the client. The client cannot tell the difference between communicating with an MTS object or any other COM object through DCOM.</P>

<A NAME="360"><H2>Using Transactions in MTS Components</H2></A>

<P>Much like implementing transactions in SQL Server, you can implement transactions in your MTS components to perform a series of tasks as a single unit of execution. To use MTS transaction services, you must set a reference to Microsoft Transaction Server Type Library (mtxas.dll).</P>

<P>After setting a reference to the MTS library, the first thing you do when working with a transactional MTS component is to get a reference to an ObjectContext object. This allows you to control how MTS processes a transaction. To obtain a reference to a context object, you call the GetObjectContext function. This function returns a reference to the ObjectContext instance for your object. The following example calls GetObjectContext to return an ObjectContext object:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim ctxObject As ObjectContext
Set ctxObject = GetObjectContext()
</pre>
</td></tr>
</table>
</p>

<P>You can use the ObjectContext object in your code to:</P>

<ul>
<p><li> Declare that the object's work is complete.</li></p>

<p><li> Prevent a transaction from being committed, either temporarily or permanently.</li></p>

<p><li> Instantiate other MTS objects and include their work within the scope of your object's transaction.</li></p>
</ul>

<P>MTS objects can use other MTS objects to complete a series of tasks. If an object created by another MTS object is to participate within the same transaction, it must inherit its context from the creating object. For example, a component named Transfer could create a Debit and Credit object to perform transfer services. In this situation, the Transfer object must have its MTSTransactionMode property set to RequiresNewTransaction, as illustrated in Figure 9.9.</P>

<P>
<img src="images/F09xx09.GIF" width=291 height=233 border="0">
</P><P>
<!--caption--><b>Figure 9.9</b> <i>Setting the MTSTransactionMode property for the Transfer class</i><!--/caption-->
</P>


<A NAME="361"><H3>Calling the CreateInstance Method</H3></A>

<P>You can use methods in the Debit and Credit objects within the same transaction. Simply create the objects using the CreateInstance method on the ObjectContext object, as shown in the following example.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Get the object's ObjectContext and create an instance
Set ctxObject = MTxAS.GetObjectContext
Set objRsvn = ctxObject.CreateInstance(&quot;Chateau.CRsvn&quot;)
</pre>
</td></tr>
</table>
</p>

<P>Instead of setting the MTSTransactionMode property to RequiresNewTransaction, the object that is being created must have its MTSTransactionMode property set to RequiresTransaction or UsesTransaction. Any other MTSTransactionMode setting will not associate the object in the existing transaction. For example, to include the Debit and Credit objects in a transaction along with the Transfer object, the Debit and Credit object's MTSTransactionMode property should be set to UsesTransaction.</P>

<P>When CreateInstance is called to create a Debit and Credit object, a new context is created for them because all MTS objects always have an associated context object. Then, the context object inherits information such as the current activity, security information, and current transaction. At this point, the new object participates in the same transaction as the calling object. The following example creates an instance of a Debit object.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Get the object's ObjectContext and create an instance
Set ctxObject = GetObjectContext()
Set objDebit = ctxObject.CreateInstance(&quot;Account.Debit&quot;)
</pre>
</td></tr>
</table>
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If CreateInstance is used to create a non-MTS object, the object does not have a context object and does not participate in the existing transaction.
</blockquote></div>
</p>

<P>Although you use the CreateInstance function to create objects that will participate in a transaction, you use the CreateObject function and New keyword to create objects that will not participate in a transaction. If you are creating an instance of an object from the same Visual Basic project, use the CreateObject function. Although the New keyword offers a slight performance increase over CreateObject, you should not use the New keyword to create objects from the same project. This is because the object must be created internally in Visual Basic, instead of using COM services to create it. MTS hosts objects by intercepting creation calls through COM. If COM is not used to create an object, MTS is not able to host the object.</P>

<A NAME="362"><H3>Committing or Aborting a Transaction</H3></A>

<P>Once you have a reference to the context object for your object, use the SetComplete and SetAbort methods to notify MTS of the completion status of the work performed by your object. Each method that runs for an MTS object should indicate whether it has completed work successfully or unsuccessfully. If the method has completed successfully, it calls the SetComplete method on the ObjectContext object before returning from the method call.</P>

<P>The SetComplete method informs the context object that it can commit transaction updates and can release the state of the object along with any resources that are being held. If all other objects involved in the transaction also call SetComplete, MTS commits the transaction updates of all objects.</P>

<P>However, if an MTS object's method that completes a transaction is unsuccessful, it must call the SetAbort method of the ObjectContext object before returning. SetAbort informs the context object that the transaction updates of this object and all other objects in the transaction must be rolled back to their original state. If an object involved in a transaction calls SetAbort, the updates roll back even if other objects have called the SetComplete method. The following example calls the SetComplete method when an operation completes successfully, or calls the SetAbort method if an error occurs.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Operations were successful - commit the transaction
ctxObject.SetComplete
Exit Function
HandleError:
    ' One or more operations failed - rollback changes
    ctxObject.SetAbort
    MsgBox Err.Description
End Function
</pre>
</td></tr>
</table>
</p>

<A NAME="363"><H3>Using the Activate and Deactivate Events</H3></A>

<P>Components built with Visual Basic have Initialize and Terminate events that you can use to implement startup and shutdown code for each class. However, the context object is not available in the Initialize and Terminate events. For example, if you need to read security credentials in the Initialize event, you cannot get that information. This is because the Visual Basic run-time environment calls Class_Initialize before the object and its context are activated, so any operations that Class_Initialize attempts to perform on the object or its object context will fail. Similarly, the object and its context are deactivated before Class_Terminate is called, so operations that this method attempts on the object and its context will also fail.</P>

<P>To utilize the context object during initialization or shutdown, implement the ObjectControl interface in your class. The ObjectControl interface exposes the following methods.</P>

<ul>
<p><li> Activate</li></p>

<p>The Activate method allows an object to perform context-specific initialization whenever it's activated. This method is called by the MTS run-time environment before any other methods are called on the object. </p>

<p><li> CanBePooled</li></p>

<p>The CanBePooled event allows an object to notify the MTS run-time environment of whether it can be pooled for reuse. Return True if you want instances of this component to be pooled, or False if not. </p>

<p><li> Deactivate</li></p>

<p>The Deactivate event allows an object to perform whatever cleanup is necessary before it's recycled or destroyed. This method is called by the MTS run-time environment whenever an object is deactivated.</p>
</ul>

<P>You can add startup and shutdown code to these methods to handle activation and deactivation more appropriately, plus you have access to the context object within these methods, as shown in the following code.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Implements ObjectControl

Private Sub ObjectControl_Activate()
    Set ctxObject = GetObjectContext()
    ' Connect to database
End Sub

Private Function ObjectControl_CanBePooled() As Boolean
    ObjectControl_CanBePooled = True
End Function

Private Sub ObjectControl_Deactivate()
    cn.Close
    Set cn = Nothing
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If you implement the ObjectControl interface, you must also implement the CanBePooled method. Since object pooling is not currently supported in MTS, the easiest way to implement this method is to return True.
</blockquote></div>
</p>

<A NAME="364"><H2>Deploying MTS Components</H2></A>

<P>After you have developed and tested your MTS application in a development environment, you will deploy the application to production servers and clients. To do this, you create an MTS package and add your components to the package. After you have created the package, you can then export it. Exporting packages allows you to copy a package from one MTS computer to another. For example, you can use the MTS Explorer to export a package from a server on which the package was developed to another MTS server for testing.</P>

<P><li><B> To export a package from a server</B></li></P>

<ol>
<p><li> Double-click the computer that contains the package you want to export, then double-click the <B>Packages Installed</B> folder.</li></p>

<p><li> Select the package you want to export.</li></p>

<p><li> Right-click on the package and select <B>Export</B>.</li></p>

<p><li> In the <B>Export Package</B> dialog box, enter the path or browse for the folder where you want to create the package file. Type a name for the file. The component files will be copied to the same folder as the package file.</li></p>

<p>If you want to include any Windows NT user ids that have been mapped to roles for the package, click the Save Windows NT User Ids Associated With Roles checkbox.</p>

<p><li> Click <B>Export</B>.</li></p>
</ol>

<P>When you export a package, MTS creates a package file (.pak) in the folder you specified. The component files that are copied include the COM DLLs, associated type libraries, and necessary proxy stub DLLs. A Clients folder is also created within the Package folder, which contains an executable file that you can use to configure a client computer to access the package components.</P>

<P>When you export a package, MTS creates a client application executable in the Clients folder where the package file is exported. You can run this executable from a client machine to configure it to access the components in the package remotely. In addition, you can use the MTS Explorer to generate a client application executable that configures a client computer to access a remote package. The client computer must have DCOM support, but does not require any MTS server files other than the client application executable to access a remote MTS server application.</P>

<P><li><B> To install a client application executable on a client system</B></li></P>

<ol>
<p><li> Export the package that is to be used by client computers.</li></p>

<p><li> Locate the folder into which you exported your package. </li></p>

<p><li> Run the executable on the client computer.</li></p>

<p>For example, you can copy the executable and run it on client computers, provide a shared folder for users to copy and run on their computers, or incorporate an executable into an HTML document using the &lt;OBJECT&gt; tag.</p>
</ol>

<P>When you run the executable, the client application executable performs the following tasks:</P>

<ul>
<p><li> Copies the client application executable to a temporary folder named Clients and extracts the necessary client-side files, including type libraries and custom proxy-stub DLLs.</li></p>

<p><li> Transfers type libraries and proxy-stub DLLs for the server package to the Remote Applications folder in the Program Files folder.</li></p>

<p><li> Updates the system registry with the required entries for clients to use the server package remotely through DCOM, including information related to application, class, programmatic, interface, and library identifiers.</li></p>

<p><li> Registers the application in the Add/Remove Programs option in the Control Panel so that the application can be uninstalled at a later date. All remote applications are prefaced with &quot;Remote Application&quot; so that you can easily find your application in the Add/Remove Programs list of installed components.</li></p>

<p><li> Removes the Clients subfolder and files generated during installation.</li></p>
</ul>

<P>After the client computer is completely configured, components can be created from a remote server running MTS. In addition, the components run remotely on the MTS server when the client uses them.</P>

<A NAME="365"><H2>Lesson Summary </H2></A>

<P>You create MTS components in Visual Basic by adding MultiUse classes to an ActiveX DLL project. When a COM DLL is added to MTS, the CLSIDs for its components are modified to reroute the activation requests made by clients to MTS. After setting a reference to the MTS library in a COM DLL, the first thing you do when working with a transactional MTS component is to get a reference to an ObjectContext object. To obtain a reference to a context object, you call the GetObjectContext function. You can then create instances of other MTS objects to complete a series of tasks as a single unit of execution.</P>

<P>To utilize the context object during initialization or shutdown, implement the ObjectControl interface in your class. In addition, you should use the ObjectControl_Activate and ObjectControl_Deactivate event procedures instead of Initialize and Terminate because the context object is not available in these events. Use the SetComplete and SetAbort methods to notify MTS of the completion status of the work performed by your object.</P>

<P>After you have developed and tested your MTS application in a development environment, you will deploy the application to production servers and clients by creating an MTS package. You can then add your components to the package and export it. A Clients folder is created with the package, and contains an executable file that you can use to configure a client computer to access the package components.</P>

</BODY>
</HTML>



