<HTML>
<HEAD>
<TITLE>Appendix C -- Using the ADO Data Control</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chaba.htm", "chada.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="484"><H1>Appendix C -- Using the ADO Data Control</H1></A>

<P>This appendix provides information on how to use the ADO Data control for adding simple database functionality to applications. Although you can use Microsoft ActiveX Data Objects (ADO) directly in your applications, the ADO Data control has the advantage of being a graphical control complete with record navigation buttons. It is also an easy-to-use interface that allows you to create database applications with a minimum of code.</P>

<A NAME="485"><H2>Overview</H2></A>

<P>The ADO Data control uses ADO to quickly create connections between data-bound controls and data providers. Data-bound controls are any controls that feature a DataSource property, including the CheckBox, ComboBox, Image, Label, ListBox, PictureBox, and TextBox controls. Additionally, Microsoft Visual Basic includes several data-bound Microsoft ActiveX controls such as the DataGrid, DataCombo, Chart, and DataList controls. You can also create your own data-bound ActiveX controls, or purchase controls from other vendors. When you bind controls to an ADO Data control, each field is automatically displayed and updated when navigating through records. This is done internally by Visual Basic&#8212;you do not have to write any code.</P>

<P>Previous versions of Visual Basic included data controls based on the DAO and RDO technologies. Both controls are still included with Visual Basic for backward compatibility. The older DAO Data control is presented in the Visual Basic toolbox by default. However, because of the flexibility of ADO, it's recommended that new database applications that may require a data control be created using the ADO Data control.</P>

<P>The ADO Data control is similar to the intrinsic Data control and the Remote Data control (RDC). The ADO Data control allows you to quickly create a connection to a database using ADO. You must manually add the ADO Data control to the toolbox.</P>

<P><li><B> To add the ADO Data control to the toolbox</B></li></P>

<ol>
<p><li>On the <B>Project</B> menu, click <B>Components</B>.</li></p>

<p><li>On the <B>Components</B> dialog box, click the <B>Microsoft ADO Data control 6.0 (OLE DB)</B>, as illustrated in Figure C.1.</li></p>

<p><li>Click <B>OK</B>.</li></p>

<P>
<A HREF="javascript:fullSize('FCxx01x.htm')"> <img src="images/FCxx01.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure C.1</B> <i>The Components dialog box</i><!--/caption-->
</P>


</ol>

<A NAME="486"><H2>Connecting to a Data Source</H2></A>

<P>At design time, you can create a connection to a data source by setting the ConnectionString property of the ADO Data control to a valid connection string. After setting the ConnectionString property, set the RecordSource property to a table (or SQL statement) from which to retrieve records. Setting these properties is an easy process because Visual Basic provides Property Pages to set the values. When setting the ConnectionString property of the ADO Data control, you have three data source options.</P>

<ul>
<P><LI>Use Data Link File</LI></P>
<p>This option specifies that you are using a custom connection string that connects to the data source. When this is selected, you can click Browse to access the Select Data Link File dialog box, from which you can select your Data Link file.</p>

<P><LI>Use ODBC Data Source Name</LI></P>
<p>This option specifies that you are using a system-defined data source name (DSN) for the connection string. You can access a list of all system-defined DSNs through the combo box in the Property Page dialog box. When this option is selected, you can click New to access the Create New Data Source Wizard dialog box to add to or modify DSNs on the system.</p>

<P><LI>Use Connection String</LI></P>
<p>This option specifies that you are using a connection string to access data. You can click Build to access the Data Link Properties dialog box. Use this dialog box to specify the provider, connection, authentication, and advanced information required to access data using an OLE DB provider.</p>
</ul>

<A NAME="487"><H3>Setting a Connection String</H3></A>

<P>In the following procedure, we will focus on using a connection string to connect to a data source. In this process, you will choose an OLE DB provider, specify a database name and location, and test the connection.</P>

<P><li><B> To set the ConnectionString property value</B></li></P>

<ol>
<p><li>Place an ADO Data control on a form.</li></p>

<p><li>On the <B>Properties</B> window, click the <B>ConnectionString</B> property, then click the ellipsis (<B>...</B>) to open the <B>Property Pages</B>.</li></p>

<p><li>Click the <B>Use Connection String</B> option, then click <B>Build</B>.</li></p>

<p>The Data Link Properties dialog box will be displayed.</p>

<p><li>Select the <B>Microsoft OLE DB Provider for SQL Server</B>, then click <B>Next</B>.</li></p>

<p><li>Select your SQL Server from the <B>Select or enter a server name</B> drop-down list box.</li></p>

<p><li>Type your user name and password.</li></p>

<p><li>Select a database on the SQL Server from the <B>Select the database on the server</B> drop-down list.</li></p>

<p><li>Click the <B>Test</B> <B>Connection</B> button.</li></p>

<p>A message box will appear notifying you whether or not the connection succeeded.</p>

<p><li>Click <B>OK</B> to close the message box, then click <B>OK</B> to close the <B>Data Link Properties </B>dialog box.</li></p>

<p>A string value will be automatically generated for the Use Connection String value, as illustrated in Figure C.2.</p>

<p><li>Click <B>OK</B> to close the <B>ConnectionString Property Pages</B> window.</li></p>

<P>
<A HREF="javascript:fullSize('FCxx02x.htm')"> <img src="images/FCxx02.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure C.2</B> <i>A ConnectionString value</i><!--/caption-->
</P>


</ol>

<A NAME="488"><H3>Setting the RecordSource Property</H3></A>

<P>After you set the ConnectionString property of the ADO Data control to connect to a database, you can set the RecordSource property to establish where the records will come from. The RecordSource property can either be set to a database table name, a stored query name, or a Structured Query Language (SQL) statement. To improve performance, avoid setting the RecordSource property to an entire table. Set the RecordSource to a SQL string that retrieves only the necessary records. A SQL query must use syntax appropriate for the data source because Microsoft Access and Microsoft SQL Server use different SQL syntax; therefore, you must use the appropriate syntax for the particular database.</P>

<P>The RecordSource property can be set at design time by using the Property Pages in Visual Basic, as shown in Figure C.3.</P>

<P>
<img src="images/FCxx03.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure C.3</B> <i>RecordSource property page</i><!--/caption-->
</P>


<P>In the RecordSource property page dialog box, you set the command type parameter that tells ADO which type of command object to use. The following table explains the different command type options.</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Value</Th>
<Th>Description</Th>
</TR>
<TR>
<TD VALIGN="TOP">adCmdUnknown</TD>
<TD VALIGN="TOP">The type of command in the CommandText property is not known. This is the default value.</TD>
</TR>
<TR>
<TD VALIGN="TOP">adCmdText</TD>
<TD VALIGN="TOP">Evaluates CommandText as a textual definition of a command or stored procedure call.</TD>
</TR>
<TR>
<TD VALIGN="TOP">adCmdTable</TD>
<TD VALIGN="TOP">Evaluates CommandText as a table name whose columns are all returned by an internally generated SQL query.</TD>
</TR>
<TR>
<TD VALIGN="TOP">adCmdStoredProc</TD>
<TD VALIGN="TOP">Evaluates CommandText as a stored procedure name. This can be a stored procedure in a SQL Server database or a query in an Access database.</TD>
</TR>
</TABLE></p>

<P>If you select either adCmdTable or adCmdStoredProc, you set the table or stored procedure name in the Table or Stored Procedure Name drop-down list box below the command type drop-down list box, as illustrated in Figure C.4.</P>

<P>
<img src="images/FCxx04.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure C.4</B> <i>Selecting a stored procedure as a RecordSource</i><!--/caption-->
</P>


<A NAME="489"><H2>Binding Controls</H2></A>

<P>After you set the ConnectionString and RecordSource properties for the ADO Data control, you can add a bound control to display data on your form.</P>

<P>A bound control is one that is &quot;data-aware.&quot; When an ADO Data control moves from one record to the next, either through code or when the user clicks the ADO Data control arrows, all bound controls connected to the ADO Data control change to display data from fields in the current record. In addition, if the user changes the data in the bound control, those changes are automatically posted to the database as the user moves to another record. The benefit of using bound controls is that it minimizes the amount of code you must write. Because the value of the bound control is automatically retrieved from and written to the database, there is little or no programming involved.</P>

<A NAME="490"><H3>Setting the DataSource and DataField Properties</H3></A>

<P>In order to bind a control to an ADO Data control, you must set the DataSource and DataField properties of the bound control. The DataSource property specifies the source through which the control is bound to the database (for example, an ADO Data control).</P>

<P>The DataField property specifies a valid field name in the Recordset object created by the data source. This value determines which field is displayed in the bound control. The DataSource and DataField properties can be set at design time in the Properties window. You can also set the DataSource and DataField properties at run time. If you set the DataSource property at run time using code, you must use the Set keyword because the DataSource property is an object. The following example sets the DataSource and DataField properties:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
Set txtLastName.DataSource = adcAuthors
txtLastName.DataField = &quot;au_lname&quot;
</pre>
</td></tr></table></p>

<A NAME="491"><H2>Coding the ADO Data Control</H2></A>

<P>The ADO Data control allows you to view and edit records without writing any code. However, to support more advanced features, you will need to write some code. Using the ADO Data control and a bound control's properties, methods, and events, you can gain more control over how your application interacts with external data.</P>

<A NAME="492"><H3>Creating a Recordset</H3></A>

<P>You can use ADO Recordset objects to manipulate the data in a database. At any time, the Recordset object refers to only a single record within the set as the <I>current</I> <I>record</I>. To retrieve a set of records, you set the RecordSource property of the ADO Data control. The RecordSource property is a string value that can be a query or table name within a database from which to retrieve records.</P>

<P>You can also use the Filter property to selectively screen out records in a Recordset object. For example, you can set the recordset to contain only records where the AuthorID value is greater than five.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
adcAuthors.Recordset.Filter = &quot;au_id &gt; 5&quot;
</pre>
</td></tr></table></p>

<p><b>Checking the Recordset Position</b></p>

<P>After you have set the RecordSource property, you can check the Recordset object's BOF and EOF properties. These properties indicate whether you are at the beginning or end of the Recordset. If there are no records in the Recordset, the value of both BOF and EOF is True.</P>

<A NAME="493"><H3>Modifying Records in a Recordset</H3></A>

<P>The ADO Data control automatically changes a record in the database when you change the information displayed in the bound controls and click any arrow on the ADO Data control to move to another record.</P>

<P>However, using a command button allows you to add code to the Click event to perform tasks, such as validating fields on the form before updating a record. To perform an update to the current record, use the Update method. For example, in the Click event for the Update button, you can add the following code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
adcAuthors.Recordset.Update
</pre>
</td></tr></table></p>

<P>If you want to cancel any changes made to the current record, or to a new record prior to calling the Update method, you can use the CancelUpdate method. The syntax for the CancelUpdate method is shown in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
adcEmployees.Recordset.CancelUpdate
</pre>
</td></tr></table></p>

<A NAME="494"><H3>Adding Records to a Recordset</H3></A>

<P>New records can be added to a Recordset by calling the AddNew method. The AddNew method initializes the bound controls and the new record becomes the current record. If you call AddNew while editing another record, ADO automatically calls the Update method to save any changes and then creates the new record. The following code will add a new record to the adcAuthors recordset:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
adcAuthors.Recordset.AddNew
</pre>
</td></tr></table></p>

<P>To save changes to the new record, you can either call the Update method of the Recordset object, or you can click any one of the navigation buttons on the ADO Data control. You can use the CancelUpdate method to cancel any changes made to a new record prior to navigating with the ADO Data control or prior to calling the Update method.</P>

<A NAME="495"><H3>Deleting Records from a Recordset</H3></A>

<P>Using the Delete method, you can delete the current record or a group of records in a recordset. The Delete method has an AffectRecords parameter that is used to set the number of records the Delete method will affect.</P>

<P>
<TABLE cellpadding=5 width="95%">
<TR>
<Th>AffectRecords value</th>
<Th>Definition</th>
</TR>
<TR>
<TD VALIGN="TOP">adAffectCurrent</TD>
<TD VALIGN="TOP">This option will delete only the current record and is the default option.</TD>
</TR>
<TR>
<TD VALIGN="TOP">adAffectGroup</TD>
<TD VALIGN="TOP">This option can be used to delete all records that satisfy the current Filter property setting. You must set the Filter property in order to use this option.</TD>
</TR>
</TABLE></p>

<P>Retrieving field values from the deleted record generates an error. After deleting the current record, the deleted record remains current until you move to a different record. Once you move away from the deleted record, it is no longer accessible.</P>

<P>To invoke the Delete method, use the following syntax:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>
<PRE>
Recordset.Delete AffectRecords
</pre>
</td></tr></table></p>

<P>You can check the end of recordset (EOF) property to see if you have deleted the last record. If EOF is True, move to the last record in the Recordset, as shown in the following code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
' Delete a record from the Customers table
' in the Northwind sample database in SQL Server
adcCustomers.Recordset.Delete
adcCustomers.Recordset.MoveNext
If adcCustomers.Recordset.EOF = True Then
    adcCustomers.Recordset.MoveLast
End If
</pre></td></tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Northwind sample database in SQL Server has referential integrity rules defined that prevent you from deleting certain records from the Recordset. For example, you cannot delete a Customer if he or she has records in the Orders table.
</blockquote></div>
</p>

<A NAME="496"><H3>Searching for Records</H3></A>

<P>To add a search feature to your application, use the Find method of the ADO Data control's recordset. The Find method searches an existing recordset for the record that satisfies the specified criteria. If the criteria is met, the recordset is positioned on that record; otherwise, the position is set on the EOF.</P>

<P>The Find method has one required parameter, Criteria, and three optional parameters: SkipRows, SearchDirection, and Start.</P>

<P>The Criteria parameter is a string containing a statement that specifies the column name, comparison operator, and value to use in the search. The comparison operator in criteria may be &quot;&gt;&quot; (greater than), &quot;&lt;&quot; (less than), &quot;=&quot; (equal), or &quot;like&quot; (pattern matching).</P>

<P>In the following example, the first author that resides in the state of Washington will be returned:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcAuthors.Recordset.Find &quot;State = 'WA'&quot;
</pre></td></tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Find method can be slow unless you have limited the total number of records in the recordset. Another method for finding records is to use a SQL statement when setting the RecordSource property of the ADO Data control. You can also set the ADO Data control's Filter property to limit the number of records in a recordset.
</blockquote></div>
</p>

<p><b>Verifying Find Results</b></p>

<P>When you search for records using the Find method, you can use the EOF or BOF properties of the Recordset object to determine whether a particular record was found. If the search fails to find the record, you should return to the record where the search began. The following code shows how to use the EOF and BOF properties:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
' If the record isn't found
With adcAuthors
     If .EOF Or .BOF Then
          'Return to the starting record
          .Bookmark = varBookmark
          MsgBox &quot;Record not found.&quot;
     End If
End With
</pre></td></tr></table></p>

<p><b>Building Criteria with Partial Values</b></p>

<P>When you add searching capabilities to an application, offering the user the ability to search on a partial value is typically better than requiring a complete value. For example, a user might not know the exact name of a company and might only provide a portion of the company name. You can perform a search based on a partial name.</P>

<P>To search based on a partial string, you can use the Like keyword in SQL. Remember, when searching on a string, you must add single quotes around the string. If the comparison operator is Like, the string value may contain &quot;%&quot; (one or more occurrences of any character) or &quot;_&quot; (one occurrence of any character). The following code shows the use of the Like keyword:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
' Match states such as Maine and Massachusetts
adcAuthors.Recordset.Find &quot;State LIKE 'M%'&quot;
</pre></td></tr></table></p>


<P>The value in criteria may be a string, floating point number, or date. String values are delimited with single quotes (for example, state = 'WA').</P>

<P>There are three optional parameters for a recordset object's Find method:</P>

<ul>
<P><LI>SkipRows</LI></P>
<p>SkipRows is an optional Long data type value, whose default value is zero. It is used to specify the offset from the current row or start bookmark to begin the search.</p>

<P><LI>SearchDirection</LI></P>
<p>SearchDirection specifies whether the search should begin on the current row or the next available row in the direction of the search. The search stops at the start or end of the recordset, depending on the value of searchDirection. It can be one of the following enumerated values: </p>

<ul>
<P><LI>adSearchForward (1)-search forward from the current record</LI></P>
<P><LI>adSearchBackward (-1)-search backward from the current record.</LI></P>
</ul>

<P><LI>Start</LI></P>
<p>The Start parameter is a Variant bookmark to use as the starting position for the search. This argument is a Variant and can be either a bookmark or one of the following enumerated values: </p>

<ul>
<P><LI>adBookmarkCurrent (0)-the current record</LI></P>
<P><LI>adBookmarkFirst (1)-the first record</LI></P>
<P><LI>adBookmarkLast (2)-the last record.</LI></P>
</ul>

</ul>

<P>The following example implements the Find method of a recordset object using all four parameters:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim varBookmark As Variant

With adcFood.Recordset
     'Mark the current record
     varBookmark = .Bookmark
     'Specify the search criteria, start and direction
     .Find &quot;CategoryName = 'Condiments'&quot;, 0, adSearchForward, _
          adBookmarkCurrent
     'If the record isn't found
     If .EOF Or .BOF Then
          'Return to the starting record
          .Bookmark = varBookmark
          MsgBox &quot;Record not found.&quot;
     End If
End With
</pre></td></tr></table></p>
</BODY>
</HTML>



