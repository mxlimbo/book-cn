<HTML>
<HEAD>
<TITLE>Lesson 2: Introduction to the ADO Object Model</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05b.htm", "ch05d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="202"><H1>Lesson 2: Introduction to the ADO Object Model</H1></A>

<P>You can use ADO with Visual C++, Visual Basic, Visual Basic Scripting Edition, Java, and any platform that supports both COM and automation. The ADO object model has fewer objects and is easier to use when compared to other data access objects such as RDO and DAO.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li> Identify the organization of the ADO object model.</li></p>

<p><li> Describe the role of the ADO Connection object.</li></p>

<p><li> Describe the role of the ADO Command object.</li></p>

<p><li> Describe the role of the ADO Recordset object.</li></p>

</ul>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>

<A NAME="203"><H2>Creating ADO Objects</H2></A>

<P>The ADO object model provides an easy-to-use set of objects, properties, and methods for creating applications that access and manipulate data. Although ADO objects are creatable outside the scope of a hierarchy, the objects exist within hierarchical relationships, as shown in Figure 5.3. For example, unlike with previous database programming interfaces, you do not have to create a Connection object before accessing the Recordset object. With ADO, you can directly create a Recordset object, which automatically creates an implied connection. This concept is sometimes called a &quot;flat&quot; object model.</P>

<P>
<A HREF="javascript:fullSize('F05xx03x.htm')"> <img src="images/F05xx03.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.3</b> <i>The ADO Object Model</i><!--/caption-->
</P>


<P>The ADO object model has seven objects: </P>
<ul>
<p><li> Connection object</li></p>

<p>Maintains connection information with the data provider. </p>

<p><li> Command object</li></p>

<p>Maintains information about a command, such as a stored procedure in a SQL Server database. You can execute a command string on a Connecton object or a query string as part of opening a Recordset object, without defining a Command object. The Command object is useful where you need to define query parameters or execute a stored procedure that returns output parameters.</p>

<p><li> Recordset object</li></p>

<p>Contains a set of records returned from a query. You can open a recordset without explicitly opening a Connection object. However, if you first explicitly create a Connection object, you can open multiple Recordset objects on that same connection. This reduces application and server overhead.</p>

<p><li> Field object</li></p>

<p>Contains information about a single column of data within a recordset. The Recordset object supports the Fields collection.</p>

<p><li> Parameter object</li></p>

<p>A single parameter for a parameterized command. The Command object supports the Parameters collection.</p>

<p><li> Error object</li></p>

<p>Contains extended error information about a condition raised by the provider. Since a single statement can generate two or more errors, the Errors collection can contain more than one Error object, all of which result from the same incident.</p>

<p><li> Property object</li></p>

<p>Contains a provider-defined characteristic of an ADO object. The Property object is used when a data provider needs to support specific information about its data source that ADO does not already support. The Property object makes ADO extensible.</p>
</ul>
<P>Each ADO object features a set of properties and methods that allow you to manipulate the object and its contents. When you work with ADO programmatically, you typically use the following three ADO objects: Connection, Command, and Recordset objects.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Before you can use ADO in your Visual Basic application, you must first set a reference to the Microsoft ActiveX Data Objects 2.0 Library.
</blockquote></div>
</p>

<A NAME="204"><H2>The ADO Connection Object</H2></A>

<P>The Connection object establishes a connection to a data source. It allows your application to pass client information to create a connection. For example, before establishing a connection, an application can create a connection string that includes the user's logon name and password. The Connection object also allows you to configure the CommandTimeout property. This property specifies how long ADO should wait when establishing a connection before terminating the attempt and generating an error. In Chapter 6, &quot;<A HREF="ch06a.htm#223">Accessing Data with ActiveX Data Objects</A>,&quot; you will learn how to use the Connection object through ADO code.</P>

<A NAME="205"><H2>The ADO Command Object</H2></A>

<P>Command objects define specific detailed information about what data is retrieved from a database connection. Command objects can be based on either a database object (such as a table, view, or stored procedure) or a Structured Query Language (SQL) query.</P>

<P>A Command object opens a new connection or it uses an existing connection, depending on what you specify in the ActiveConnection property. If you set the ActiveConnection property with a reference to an existing Connection object, the Command object uses that connection. If you specify the ActiveConnection property with a connection string, a new connection is established for the Command object. However, since more than one Command object can use the same Connection object, to increase efficiency, you may want to first manually establish a connection via the Connection object. You will learn how to use ADO Command objects in your applications in Chapter 6, &quot;<A HREF="ch06a.htm#223">Accessing Data with ActiveX Data Objects</A>.&quot;</P>

<A NAME="206"><H2>The ADO Recordset Object</H2></A>

<P>A Recordset object represents the entire set of records from a database table or the results of an executed command. You use Recordset objects to manipulate data from a provider. All Recordset objects are constructed using records (rows) and fields (columns).</P>

<P>When you use data in a recordset object, you are working with a database <I>cursor</I>. A cursor is a database object used by applications to manipulate data by individual record rather than by the entire set of records. For example, when you create a recordset, only one record is active at a time. You can change or delete this active record without affecting the other records in the current set, then make the next, or previous, record active.</P>

<A NAME="207"><H3>Setting the CursorType Property</H3></A>

<P>The CursorType property determines how you can use the records in a recordset. You set the CursorType property prior to opening a recordset. If you do not specify the CursorType property before you open a recordset, a forward-only cursor is used by default. Four different cursor types are available in ADO:</P>
<ul>
<p><li> Dynamic cursor</li></p>

<P>Provides the most functionality of the cursor types, but uses the most overhead. Dynamic cursors allow you to view additions, changes, and deletions by other users as the modifications occur. In OLE DB, a bookmark is a value that identifies a record (or row) in a recordset. Bookmarks allow data consumers to move quickly to a record and access records randomly based on the bookmark value. A Dynamic cursor allows any type of movement through the recordset that does not rely on bookmarks. It also allows bookmarks if the provider supports them. The dynamic cursor is a good choice if your application must detect all concurrent updates made by other users.</P>

<p><li> Keyset cursor </li></p>

<p>Behaves like a dynamic cursor, except that it prevents you from seeing records that other users add and prevents access to records that other users delete. Data changes by other users are still visible. It always supports bookmarks and therefore allows all types of movement through the recordset.</p>

<p><li> Static cursor</li></p>

<p>Provides a static copy of a set of records for you to use to find data or generate reports. It always allows bookmarks and therefore allows all types of movement through the recordset. Additions, changes, or deletions by other users are not visible. If your application does not need to detect data changes, the static cursor is the best choice.</p>

<p><li> Forward-only cursor</li></p>

<p>Behaves identically to a static cursor except that it allows you to scroll only forward through records. This improves performance in situations where you need to make only a single pass through a recordset. If your application does not require scrolling through the recordset, the forward-only cursor is the best way for retrieving data quickly with the least amount of overhead.</p>
</ul>

<A NAME="208"><H2>Lesson Summary </H2></A>

<P>You can use ADO objects in Microsoft Visual C++, Microsoft Visual Basic, Microsoft Visual Basic Scripting Edition, Java, and any platform that supports both COM and automation. There are seven objects in the ADO object model: Connection, Command, Recordset, Field, Parameter, Error, and Property. Although each ADO object features a set of properties and methods that allow you to manipulate the object and its contents, when you work with ADO programmatically, you typically use the following three ADO objects: Connection, Command, and Recordset objects.</P>

<P>The Connection object establishes a connection to a data source. It allows an application to pass user-specific information when creating the connection.</P>

<P>Command objects define specific detailed information about what data is retrieved from a database connection. You can base command objects on either a database object (such as a table, view, stored procedure, or synonym) or an SQL query.</P>

<P>Recordset objects represent an entire set of records from a database table or the result of an executed command. You use Recordset objects to manipulate data from a provider, one record at a time.</P>

</BODY>
</HTML>



