<HTML>
<HEAD>
<TITLE>Appendix D -- Creating Internet Applications </TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chaca.htm", "chaea.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>




<A NAME="497"><H1>Appendix D -- Creating Internet Applications</H1></A>


<P>This appendix discusses how to create Internet-based applications with Microsoft Visual Basic. Visual Basic offers several ways to move your applications onto the Internet or a corporate intranet, including developing and deploying the following:</P>

<UL>
<P><LI> Dynamic Hypertext Markup Language (DHTML) applications</LI></P>
<P><LI> ActiveX documents</LI></P>
<P><LI> Internet Information Server (IIS) applications.</LI></P>
</UL>

<A NAME="498"><H2>Creating DHTML Applications</H2></A>

<P>Visual Basic Internet applications link Visual Basic code to one or more HTML pages and handle events raised in those pages by interacting with programs on either a client or a server. You can create two types of Internet applications in Visual Basic: client-based DHTML applications and server-based IIS applications.</P>

<P>DHTML is a technology extension of Internet Explorer that allows developers and users to interact with Web pages in diverse ways. A major benefit of DHTML is that much of the processing can be done on the client without having to transfer processing to the server.</P>

<P>A DHTML application is a Visual Basic application that uses a combination of DHTML and compiled Visual Basic code in an interactive, browser-based application. DHTML applications must be run on Internet Explorer 4.0 or later.</P>

<P>In its simplest form, a DHTML application can be a single HTML page that uses Visual Basic code and the Dynamic HTML object model to instantly respond to actions that occur on the page. This might involve:</P>

<UL>
<P><LI> Responding to user-initiated actions such as mouse movements or clicks.</LI></P>
<P><LI> Responding to an action that the browser itself performs, such as opening a page or loading a picture. </LI></P>
</UL>

<P>In a more complex DHTML application, you might: </P>

<UL>
<P><LI> Retrieve data from the page and use it to query a database.</LI></P>
<P><LI> Update the page's appearance and behavior.</LI></P>
<P><LI> Create HTML elements and insert them onto a page in response to user requests.</LI></P>
</UL>

<P>DHTML applications use Visual Basic code to perform much of the same processing you could accomplish with other methods of Internet application development, such as JavaScript or CGI (Common Gateway Interface). You write Visual Basic code to handle events that occur when a page is viewed in the browser. You can respond to events that occur on any element on the page-clicking a button, loading an image, passing the mouse over a certain part of the page, and so forth. While most of the processing associated with a DHTML application occurs on the client computer, the application can also make calls to the server.</P>

<A NAME="499"><H3>Advantages of DHTML Applications</H3></A>

<P>A major advantage of DHTML applications is that they combine the power and capabilities of DHTML with Visual Basic's controls and codes. Another advantage is the conservation of server resources since much of the processing takes place on the client. This client-side processing also results in a faster refresh or response to the user. In addition, you can use DHTML applications offline through the browser's cache. Security of your application is also an advantage with DHTML because, unlike code embedded in an HTML page, a DHTML application is not accessible because it is compiled on the client.</P>

<A NAME="500"><H3>Using the DHTML Page Designer</H3></A>

<P>To create a DHTML application, you use Visual Basic's DHTML Page designer (see Figure D.1) to create the Web pages that act as the user interface of your application. You can write Visual Basic code and attach it to a Web page or import an existing Web page into the designer and modify it. The designer's Treeview window on the left in Figure D.1 displays a hierarchical representation of all of the elements within an HTML page. The Detail pane on the right presents a drawing surface on which you can create the new page or edit the contents of an existing page.</P>

<P>
<A HREF="javascript:fullSize('FDxx01x.htm')"> <img src="images/FDxx01.JPG" width=404 height=251 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure D.1</B> <I>The DHTML Page designer</I> <!--/caption-->
</P>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
There is a one-to-one relationship between DHTML Page designers and HTML pages. If you want to use more than one HTML page in your application, you can add more DHTML Page designers to your project by clicking Add DHTML Page on the Project menu.
</blockquote></div>
</p>

<P>Here is the basic process for creating a DHTML application in Visual Basic:</P>

<OL>
<p><li> Create a new project in Visual Basic using the DHTML Application template.</li></p>

<p>Your project contains a DHTML Page designer and a code module by default.</p>

<p><li> Create an HTML page or use an existing HTML page as the user interface for your application.</li></p>

<p><li> Assign an ID property to uniquely identify each element, such as a TextField or Button on the HTML page that you want to access programmatically.</li></p>

<p><li> Write code to add functionality to your application.</li></p>

<p><li> Test and debug your application as you would any other Visual Basic application.</li></p>

<p>When you start your DHTML application from Visual Basic, it runs in Internet Explorer, but you will still debug your code in the Visual Basic IDE.</p>

<p><li> Compile your application, and use the Package and Deployment Wizard to package the DLLs and supporting files for distribution.</li></p>
</OL>

<A NAME="501"><H3>Modifying HTML with DHTML</H3></A>

<P>In HTML, tags provide the formatting instructions. For example, a third-level heading is written &lt;H3&gt;My Heading&lt;/H3&gt;. The H3 tags determine the size of the text that is displayed by the browser.</P>

<P>In DHTML, you can include additional information in these HTML tags to control and modify the appearance of the page. For example, ID is a DHTML attribute that assigns a unique identifier to the heading and makes it programmable. This example shows the ID attribute added to the HTML tag:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;H3 ID=Subhead1&gt;My Heading&lt;/H3&gt;</PRE>
</TD></TR></TABLE>
</P>

<P>In a Visual Basic application, you might replace text to customize the user's HTML page or change the appearance or format of the text on the HTML page. In a DHTML application, you can handle text replacements differently because you can dynamically make changes to text, as well as to HTML tags, at run time. </P>

<P>You must specify whether you are replacing the current HTML text with straight text or text that includes additional HTML tags. Additionally, you must indicate whether the original tags for the element should be affected by the replacement. You do this with two sets of properties: innerText and outerText, and innerHTML and outerHTML.</P>

<P>To change text within HTML tags, use the innerText or innerHTML properties. InnerText provides changes that the system inserts as straight text, without performing any parsing. InnerHTML provides text replacements and additional HTML tags that must be parsed and inserted between the original tags. For example:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Using innerText</TH>
<TH>Code</TH>
</TR>
<TR>
<TD VALIGN="TOP">The original HTML</TD>
<TD VALIGN="TOP"><PRE>&lt;H3 ID=Subhead1&gt;My Heading&lt;/H3&gt;</PRE></TD>
</TR>
<TR>
<TD VALIGN="TOP">Using the innerText property</TD>
<TD VALIGN="TOP"><PRE>Subhead1.innerText = &quot;Heading One&quot;</PRE></TD>
</TR>
<TR>
<TD VALIGN="TOP">Resulting HTML</TD>
<TD VALIGN="TOP"><PRE>&lt;H3 ID=Subhead1&gt;Heading One&lt;/H3&gt;</PRE></TD>
</TR>
<tr>
<TH>Using innerHTML</TH>
<TH>Code</TH>
</TR>
<TR>
<TD VALIGN="TOP">The original HTML</TD>
<TD VALIGN="TOP"><PRE>&lt;H3 ID=Subhead1&gt;My Heading&lt;/H3&gt;</PRE></TD>
</TR>
<TR>
<TD VALIGN="TOP">Using the innerHTML property</TD>
<TD VALIGN="TOP"><PRE>Subhead1.innerHTML=&quot;&lt;I&gt;Heading One&lt;/I&gt;&quot;</PRE></TD>
</TR>
<TR>
<TD VALIGN="TOP">Resulting HTML</TD>
<TD VALIGN="TOP"><PRE>&lt;H3 Subhead1&gt;&lt;I&gt;Heading One&lt;/I&gt;&lt;/H3&gt;</PRE></TD>
</TR>
</TABLE></P>

<P>To change both the text and the original tags around an element, use two properties called outerText and outerHTML. Both properties replace the text enclosed in the HTML for a specific element and the element tags themselves.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
For more information about using DHTML in your applications, search on &quot;Developing DHTML Applications&quot; in the MSDN Online Help.
</blockquote></div>
</p>

<A NAME="502"><H2>Creating ActiveX Documents</H2></A>

<P>With Visual Basic, you can use ActiveX technology to create ActiveX documents. ActiveX documents allow you to create solutions that are available to users through an Internet browser. ActiveX documents are components that you can use on HTML pages or as alternatives to HTML pages. You can use other ActiveX components to create Internet solutions, including code components (.exe and .dll files) that run on the client or controls (.ocx files). All of these components help you create Internet solutions that meet your business needs.</P>

<A NAME="503"><H3>Overview of ActiveX Documents</H3></A>

<P>ActiveX documents integrate tightly with other elements of  Internet or intranet sites. You can use ActiveX documents in conjunction with DHTML applications, IIS applications, or HTML pages that are not associated with a Visual Basic Internet application. You can deploy these components so that users can navigate transparently between ActiveX documents and other pages in your application or Web site.</P>

<P>Use ActiveX documents within your Internet applications when you want to:</P>

<UL>
<P><LI>Use the Visual Basic programming model rather than the programming model used in DHTML or IIS applications.</LI></P>
<P><LI> Gain control over the whole frame of the browser window rather than just a part of it. </LI></P>

<ul>
<p><li> When you display a Web page in the browser, HTML lets you specify the appearance of only the page itself. You cannot write HTML to control the menu, the scroll bar, or any other part of the browser window.</li></p>
<p><li> When you use an ActiveX document, you can control additional pieces of the window, such as menus, toolbars, scroll bars, and other items. For example, if you want one page of your DHTML application to contain a custom menu, you might use an ActiveX document.</li></p>
</ul>

</UL>

<P>Some objects in Visual Basic are <I>containers</I>; that is, they contain other Visual Basic objects. A form usually is a container; it contains one or more controls. Certain Visual Basic objects must be contained by another object. Still others can be either containers or contained, or both. ActiveX documents are not stand-alone applications-they can exist only in a container such as Internet Explorer. But they can also contain objects. Containers vary so you can't always predict the capabilities and limitations of your ActiveX document environment. Your application might work properly in Internet Explorer 4.<I>x </I>, but not in an earlier version.</P>

<P>Before you use an ActiveX document, you must place it within a container. Connecting an ActiveX document to its container is known as <I>siting</I>. Siting plays a key role in determining ActiveX document event behavior. It enables an ActiveX document to implement its functionality.</P>

<p><b>Advantages of ActiveX Documents</b></p>

<P>Several features help you provide installation, navigation, and persistence with your ActiveX documents. The advantages of ActiveX documents are:</P>

<UL>
<P><LI>Automatic downloading of components over the Internet </LI></P>
<p>You can create a link to your ActiveX document that causes the browser to automatically find and download all components that are needed to run the component. You can also make an ActiveX document upgrade automatically if the version on the server is more recent.</p>

<P><LI>Hyperlinking of objects</LI></P>
<p>You can use the properties and methods of Visual Basic's Hyperlink object in a hyperlink-aware container to jump to a given URL or navigate through the history list.</p>

<P><LI>Merging of menus</LI></P>
<p>You can merge the menus of Visual Basic ActiveX documents with the browser's menu, just as you would with documents that are made available through Microsoft Word or Microsoft Excel. As the document is loaded in Internet Explorer, for instance, the browser's menu items will be merged with those you created to accompany your ActiveX document.</p>

<P><LI>Storing of data</LI></P>
<p>You can store data through the PropertyBag object when you deploy an ActiveX document in Internet Explorer.</p>
</UL>

<A NAME="504"><H3>The UserDocument Object</H3></A>

<P>When you create an ActiveX document, you are creating an ActiveX component that can be either in-process (ActiveX document DLL) or out-of-process (ActiveX document EXE). The base object of an ActiveX document-the UserDocument object-resembles a standard Visual Basic Form object, with some exceptions. </P>

<P>Several differences exist between a Visual Basic form object and the UserDocument object. The UserDocument object has most, but not all, of the events that are found on a Form object. The following list shows the events available exclusively for forms and the events available only for UserDocuments.</P>

<P><table cellpadding=5 width="95%">
<tr>
<TH>Form Events</TH>
<TH>UserDocument Events</TH>
</TR>
<TR>
<TD VALIGN="TOP">Activate</TD>
<TD VALIGN="TOP">AsyncReadComplete</TD>
</TR>
<TR>
<TD VALIGN="TOP">Deactivate</TD>
<TD VALIGN="TOP">EnterFocus</TD>
</TR>
<TR>
<TD VALIGN="TOP">LinkClose</TD>
<TD VALIGN="TOP">ExitFocus</TD>
</TR>
<TR>
<TD VALIGN="TOP">LinkError</TD>
<TD VALIGN="TOP">Hide</TD></TR>
<TR>
<TD VALIGN="TOP">LinkExecute</TD>
<TD VALIGN="TOP">InitProperties</TD>
</TR>
<TR>
<TD VALIGN="TOP">LinkOpen</TD>
<TD VALIGN="TOP">ReadProperties</TD>
</TR>
<TR>
<TD VALIGN="TOP">Load</TD>
<TD VALIGN="TOP">Scroll</TD>
</TR>
<TR>
<TD VALIGN="TOP">QueryUnload</TD>
<TD VALIGN="TOP">Show</TD>
</TR>
<TR>
<TD VALIGN="TOP">Unload</TD>
<TD VALIGN="TOP">WriteProperties</TD>
</TR>
</TABLE></P>

<P>Another difference between a Visual Basic form object and a UserDocument object is that you cannot place embedded objects (such as an Excel or Word document) or an OLE Container control on a UserDocument, whereas you can place these on a Visual Basic form.</P>

<p><b>UserDocument Events</b></p>

<P>During the lifetime of a UserDocument object, the events that occur and the order in which they occur depend on a number of factors, including which container you use, whether the document has been sited, and what actions the user takes within the container.</P>

<P>The following are examples of events that can occur during the lifetime of an ActiveX document:</P>

<UL>
<P><LI> Initialize</LI></P>
<p>The Initialize event occurs each time you create or recreate an instance of an ActiveX document. It's always the first event that occurs during the lifetime of an ActiveX document.</p>

<P><LI> InitProperties</LI></P>
<p>The InitProperties event occurs when an ActiveX document is sited in the document's container, but none of the ActiveX document's property values have been saved. Once a property value is saved, the InitProperties event is replaced by the ReadProperties event.</p>

<P><LI> ReadProperties</LI></P>
<p>The ReadProperties event occurs when you save a property with the PropertyBag object.</p>

<P><LI> Terminate</LI></P>
<p>The Terminate event occurs just before you destroy the ActiveX document. To remove any object references, set all global object references to Nothing with the Terminate event.</p>

<P><LI> Show</LI></P>
<p>The Show event occurs in one of the following two situations: when a user opens an ActiveX document that has been sited in its container, and when a user clicks the Back or Forward button to return to an ActiveX document in the History list of Internet Explorer.</p>

<P><LI> Hide</LI></P>
<p>The Hide event occurs in one of the following two situations: when a user navigates away from a document (immediately before the Terminate event), or when a user closes Internet Explorer while the document is open.</p>
</UL>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The functionality of the Show and Hide events depends on the container.
</blockquote></div>
</p>

<p><b>UserDocument Files</b></p>

<P>UserDocuments have two types of files that define the appearance and interface of an ActiveX document, including its properties, events, and methods:</P>

<UL>
<P><LI>.dob files</LI></P>
<p>Visual Basic stores user documents in text files with a .dob extension. These files contain the source code, property values, and controls of the UserDocument object. A .dob file is analogous to a Standard EXE project's .frm file.</p>

<P><LI> .dox files</LI></P>
<p>Visual Basic stores any graphical elements in files with a .dox extension. These files are used for the controls of a UserDocument object, such as bitmaps. A .dox file is analogous to a Standard EXE project's .frx file.</p>
</UL>

<P>When you compile the ActiveX document project, an .exe or a .dll file is created in addition to a Visual Basic document (.vbd). To open the ActiveX document in a browser such as Internet Explorer, users must be able to navigate to the .vbd file.</P>

<A NAME="505"><H3>Creating an ActiveX Document</H3></A>

<P>As with any Visual Basic project, when you create an ActiveX document, first design the features and appearance of your document, and then determine the properties, methods, and events it will provide.</P>

<p><li><b> To create an ActiveX document in Visual Basic</b></li></p>

<OL>
<p><li> Create a new Visual Basic project using either the <B>ActiveX Document DLL</B> or the <B>ActiveX Document EXE</B> project template.</li></p>

<P>Create a .dll file if you want to create an in-process component.</P> 

<P> Create an .exe file if you want to create an out-of-process component.</P>

<p><li> Add controls and code to the UserDocument object to implement the user interface of your document, and write code to implement its properties, methods, and events.</li></p>

<p><li> Compile your document to create a .vbd file, and then test it with all potential container applications.</li></p>
</OL>

<p><b>Converting an Existing Standard EXE Project</b></p>

<P>You can convert existing Standard EXE projects to ActiveX document projects with Visual Basic's ActiveX Document Migration Wizard add-in. When you run the wizard, it converts the selected project forms to ActiveX documents, and changes the project type to either ActiveX EXE or ActiveX DLL. </P>

<P>You can use the ActiveX Document Migration Wizard to convert project forms other than Standard EXE projects to an ActiveX document project, but the option to convert the project type will be unavailable.</P>

<p><li><b> To load the ActiveX Document Migration Wizard add-in</b></li></p>

<OL>
<p><li> On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></p>
<p>The Add-In Manager appears.</p>

<p><li> Double-click the <B>VB 6 ActiveX Doc Migration Wizard</B>. </li></p>
<p>The word &quot;Loaded&quot; appears in the Load Behavior column.</p>

<p><li> Click <B>OK</B> to close the Add-In Manager.</li></p>
</OL>

<p><li><b> To convert an existing project to an ActiveX project</b></li></p>

<OL>
<p><li> On the <B>Add-Ins </B>menu, click <B>ActiveX Document Migration Wizard</B>.</li></p>

<p><li> If you want to skip the introduction screen when you use this wizard in the future, click <B>Skip this screen in the future</B>, then click <B>Next</B>.</li></p>

<p><li> On the Form Selection screen, select the form that you want to convert, then click <B>Next</B>.</li></p>

<p><li> On the Options screen, select <B>Comment out invalid code </B>and <B>Remove original forms after conversion</B>. Choose either <B>Convert to an ActiveX EXE </B>or <B>Convert to an ActiveX DLL</B>, then click <B>Next</B>.</li></p>

<p><li> On the Finished screen, click <B>Yes</B> to view a Summary<B> </B>Report, then click <B>Finish</B>.</li></p>
</OL>

<A NAME="506"><H3>Testing and Debugging an ActiveX Document Project</H3></A>

<P>Debugging an ActiveX document is similar to debugging other ActiveX components. You can use all the tools available in Visual Basic: setting breakpoints, watching variables, using Debug statements, and so on.</P>

<P>It's also important to remember that the container hosting the ActiveX document is its client, and uses objects the ActiveX document provides. If you stop the project while the host container is accessing the ActiveX document, an error will occur in the host container. To avoid this, quit Internet Explorer at the end of each of these procedures to release the reference.</P>

<P>If you run a project and view it in Internet Explorer, you can put it into break mode by pressing CTRL+BREAK without causing any errors in the host application (Internet Explorer). However, you should avoid modifying any code that causes Visual Basic to reset the project.</P>

<A NAME="507"><H2>Creating IIS Applications Using WebClasses</H2></A>

<P>An IIS application is a server-side Web application created in Visual Basic. It utilizes one of the new features in Microsoft Visual Basic 6.0: the capability to include WebClasses in projects. A WebClass represents code that can run on an Internet server, and gives you the ability to put code behind URLs. WebClasses provide a way for you to create server-side applications that are hosted by IIS and can be viewed on client Web browsers.</P>

<P>Web development emphasizes separating the components of an application into logic, presentation style, navigational structure, and content or state. You can use WebClasses to separate application logic from the presentation (user interface) of the application. This helps you create multitier, distributed applications by including Web components to deliver part of functionality through Web browsers.</P>

<A NAME="508"><H3>Overview of IIS Applications</H3></A>

<P>An IIS application lives on a Web server and responds to requests from the browser. The application uses HTML to present its user interface and compiled Visual Basic code to process requests and respond to events in the browser. </P>

<P>A user sees an IIS application as a series of HTML pages. A developer sees an IIS application as a WebClass that is made up of WebItems. A WebClass is a Visual Basic component that resides on a Web server and responds to input from the browser. A WebItem is an element that can be returned to the browser as part of a response to an HTTP request. A WebItem is usually an HTML page, but it could also be a MIME-type file, such as an image or a .wav file.</P>

<P>In an IIS application, you don't use Visual Basic to create the HTML pages that make up the application's user interface. A Web designer or a developer creates the pages using an HTML editor, a word processing package, or a text editor, and you link the finished pages into your WebClass.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
To use the IIS Application project template in Visual Basic, you must have Internet Information Server or Personal Web Server installed on your computer. You can obtain either of these services by installing the Windows NT Option Pack that is included on the Visual Basic CD.
</blockquote></div>
</p>

<P>The following table summarizes the differences between forms-based applications and Web-based applications:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Element</TH>
<TH>Forms-based application</TH>
<TH>Web-based application</TH>
</TR>
<TR>
<TD VALIGN="TOP">User Interface</TD>
<TD VALIGN="TOP">Visual Basic forms</TD>
<TD VALIGN="TOP">HTML pages</TD>
</TR>
<TR>
<TD VALIGN="TOP">User Interface Elements</TD>
<TD VALIGN="TOP">Controls</TD>
<TD VALIGN="TOP">Elements</TD>
</TR>
<TR>
<TD VALIGN="TOP">File Format</TD>
<TD VALIGN="TOP">.frm files</TD>
<TD VALIGN="TOP">.htm files</TD>
</TR>
<TR>
<TD VALIGN="TOP">Creator</TD>
<TD VALIGN="TOP">Developer</TD>
<TD VALIGN="TOP">Web designer and/or Visual Basic developer</TD>
</TR>
<TR>
<TD VALIGN="TOP">Run Time</TD>
<TD VALIGN="TOP">Visual Basic IDE, Windows</TD>
<TD VALIGN="TOP">Web browser</TD>
</TR>
</TABLE></P>

<p><b>Structure of IIS Applications</b></p>

<P>IIS applications are structured differently from standard, forms-based Visual Basic applications. The user interface consists of a series of HTML pages rather than traditional Visual Basic forms. An HTML page is like a Visual Basic form in that it contains all the visual elements that make up your application's user interface. You can place some of the same items onto a page as you do a form, including text, buttons, check boxes, and option buttons.</P>

<P>An IIS application consists of several pieces. Many of these are generated automatically when you build your project. The pieces include: </P>

<UL>
<P><LI> One or more WebClasses, which are generated automatically when you create a WebClass project.</LI></P>

<P><LI> One or more HTML templates and their events.</LI></P>

<P><LI> One or more custom WebItems and their events.</LI></P>

<P><LI> An .asp (Active Server Pages) file that hosts the WebClass in IIS. The .asp is generated automatically when you create a WebClass project; Visual Basic gives it the name you specify in the NameInURL property. </LI></P>

<P><LI> A WebClass run-time component, Mswcrun.dll, which helps process requests.</LI></P>

<P><LI> A project DLL (generated automatically on compile) that contains your Visual Basic code and is accessed by the run-time component.</LI></P>
</UL>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
A WebClass may contain a mixture of templates and custom WebItems, templates only, or only custom WebItems. You do not necessarily have to have both templates and custom WebItems in your WebClasses. 
</blockquote></div>
</p>

<P>Figure D.2 shows how the server portions of an IIS application work together.</P>

<P>
<A HREF="javascript:fullSize('FDxx02x.htm')"> <img src="images/FDxx02.JPG" width=404 height=243 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure D.2  </B> <I>Structure of an IIS application  </I><!--/caption-->
</P>



<P>Like other Visual Basic applications, an IIS application has code modules and a visual designer. IIS application objects are stored in plain text files that contain the source code of the WebClass, events, property settings, and the WebItems for the WebClass. Visual Basic uses the .dsr extension for these files. In addition to the .dsr file, Visual Basic generates a .dsx file that contains a binary version of the application. </P>

<A NAME="509"><H3>Using a WebClass to Respond to Client Requests</H3></A>

<P>A WebClass is a Visual Basic COM component that sends information to a Web browser from an Internet server. It is the central unit of the application, processing data from the browser and sending information to the users. You define a series of procedures that determine how the WebClass responds to these requests. A WebClass typically contains WebItems that it uses to provide content to the browser in response to a request, and to expose events. A WebItem can be one of two things: </P>

<UL>
<P><LI>An HTML template file</LI></P>
<p>An HTML template file is an HTML page that you associate with your WebClass. When the WebClass receives a request, it can send the HTML page to the browser for display. Templates differ from regular HTML pages only in that they often contain replacement areas that the WebClass can process before sending the page to the browser. This allows you to customize your response.</p>

<P><LI> A custom WebItem</LI></P>
<p>A custom WebItem doesn't have an associated HTML page it can return to the user. Instead, a custom WebItem is a programmatic resource that consists of one or more event handlers that are logically grouped together to help organize your Web application. These event handlers are called from the browser, either when the page loads or when a user selects an HTML element. The event handlers can generate a response to the browser or pass processing to another of the WebClass's WebItems. </p>
</UL>

<p><b>Writing Code to Respond to Events</b></p>

<P>Both templates and custom WebItems make the events available that the WebClass processes when certain actions occur in the browser. You can write event procedures for these events using standard Visual Basic code, thus linking the actions that occur on a Web page to Visual Basic processing.</P>

<P>Each WebClass can contain multiple templates and WebItems. In most applications, you only need one WebClass.You might, however, want to use multiple WebClasses if you want to break up your application into parts that can be reused in other applications.</P>

<p><b>WebClasses and .asp Files</b></p>

<P>Each WebClass in an IIS application has an associated .asp file that Visual Basic generates automatically during the compile or debug process. The .asp file hosts the WebClass on the Web server. In addition, it generates the WebClass' run-time component when the application is first started, and launches the first event in the WebClass' life cycle.</P>

<P>A WebClass is associated with only one client for its entire life cycle. Visual Basic creates a logical instance of the WebClass for each client that accesses it. For each client, however, the WebClass is capable of maintaining state between requests. Figure D.3 shows the relationship between .asp files, WebClasses, and WebClass contents.</P>

<P>For more information about storing state information for an IIS application, search on &quot;Storing State in Objects&quot; in the MSDN Online Help.</P>

<P>
<img src="images/FDxx03.GIF" width=374 height=268 border="0">
</P><P>
<!--caption--><B>Figure D.3  </B> <I>How a WebClass relates to ASP and WebItems</I><!--/caption-->
</P>



<A NAME="510"><H3>Using the WebClass Designer</H3></A>

<P>The WebClass designer is a design-time tool in Visual Basic that lets you quickly create and modify the WebItems that represent the pages in your application. You use the designer to: </P>

<UL>
<P><LI> Define the contents of the WebClass. A WebClass contains WebItems, which are the HTML pages and other items that the WebClass can send to the browser in response to a user request.</LI></P>

<P><LI> Add events to the WebItems in the WebClass.</LI></P>

<P><LI> Write code for each event in the WebClass.</LI></P>
</UL>

<P>The WebClass designer contains two panels. The Treeview panel on the left displays the WebItems that make up the WebClass. The WebItems represent the pages on your IIS server. These pages are entry points into the server's <I>namespace</I>. The server's namespace is a collection of symbols, such as filenames, folder names, or database keys, stored in a hierarchical structure. The Details panel on the right displays information about the currently selected item in the Treeview panel. Figure D.4 illustrates WebItems within a WebClass.</P>

<P>
<A HREF="javascript:fullSize('FDxx04x.htm')"> <img src="images/FDxx04.JPG" width=404 height=191 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure D.4  </B> <I>The WebClass designer  </I><!--/caption-->
</P>


<p><li><b> To create an IIS application in Visual Basic</b></li></p>

<OL>
<p><li> Create a new project in Visual Basic using the <B>IIS Application</B> project template.</li></p>

<p>The project contains a WebClass designer and a code module by default. A reference is automatically set to the Microsoft Active Server Pages Object Library.</p>

<p><li> Create custom WebItems to represent each page in your application, or import existing HTML pages as WebItems.</li></p>

<p><li> Define the functionality of your application by adding code to the WebItems and the Start event of your WebClass.</li></p>

<p><li> Test and debug your application as you would any other Visual Basic application.</li></p>

<p>When you start your IIS application from Visual Basic, it will run in Internet Explorer, but you will still debug your code in the Visual Basic IDE.</p>

<p><li> Compile your application, and use the <B>Package and Deployment Wizard</B> to package the .dll and supporting files for distribution.</li></p>
</OL>

<p><li><b> To create a custom WebItem</b></li></p>

<OL>
<p><li> On the <B>WebClass</B> toolbar, click <B>Add Custom WebItem</B>, as illustrated in Figure D.5.</li></p>

<p>A new WebItem appears at the end of the list of custom WebItems in the Treeview panel of the WebClass designer.</p>

<P>
<A HREF="javascript:fullSize('FDxx05x.htm')"> <img src="images/FDxx05.JPG" width=404 height=230 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure D.5  </B> <I>The Add Custom WebItem toolbar button  </I><!--/caption-->
</P>


<p><li> Type the name of the new WebItem.</li></p>
</OL>

<p><li><b> To import an existing HTML page as a WebItem</b></li></p>

<OL>
<p><li> On the <B>WebClass</B> toolbar, click <B>Add HTML Template WebItem</B>.</li></p>

<p>The <B>Add HTML Template</B> dialog box appears.</p>

<p><li> Select the HTML page you want to add as a WebItem, then click <B>Open</B>.</li></p>

<p>A new WebItem appears at the end of the list of HTML template WebItems in the Treeview panel of the WebClass designer. In the Details panel, the tags in the HTML page are listed as objects you can use in your code.</p>

<p><li> Type the name for the new WebItem.</li></p>
</OL>

<A NAME="511"><H3>Writing Code for a WebClass</H3></A>

<P>Since a WebClass is a COM component, you use the built-in events of the WebClass and the Active Server Pages object model to respond to Web browser requests. WebItems in your WebClass also have events, properties, and methods that you can use to define the functionality of your application. You can also add custom events to WebItems. You use the Active Server Page object model in your COM component to communicate with the Web browser. When the WebClass processes a request from the browser, it must send the browser a response. Generally, that response is a stream of HTML that the browser displays to the user. You can return HTML to the browser in two ways: </P>

<ul>
<P><LI> Send the contents of an HTML template file directly to the browser using the WriteTemplate method.</LI></P>

<P><LI> Produce the HTML stream with visual basic code.</LI></P>
</ul>

<P>In custom WebItems, you use the Write method of the Response object to write string information to the Web browser. The following code writes a heading to the Web browser:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Response.Write &quot;&lt;H1&gt;Welcome to My Web Site!&lt;/H1&gt;&quot;
</PRE>
</TD></TR></TABLE>
</P>

<P>In HTML template WebItems, you use the WriteTemplate method of the WebItem to write the entire contents of the WebItem to the Web browser. The WriteTemplate method is the simplest way to send HTML to the browser in response to a user action. When the WebClass launches an event procedure for a template event that contains this method, it sends the template's HTML back to the browser. The resulting page is displayed to the user. The following code writes the contents of the WebItem named Welcome to the Web browser:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Welcome.WriteTemplate
</PRE>
</TD></TR></TABLE>
</P>

<A NAME="512"><H3>Debugging and Deploying Your IIS Application</H3></A>

<P>Just as with DHTML documents and ActiveX documents, you debug your IIS application using the standard Visual Basic debugging tools. When you run your application from the Visual Basic environment, the HTML pages that act as the user interface are opened in Internet Explorer. However, you will still debug your code using the Visual Basic Integrated Development Environment (IDE).</P>

<P>When you compile your application, Visual Basic generates a .dll file and a simple .asp file that instantiates your COM component on the Internet server. You can use the Package and Deployment Wizard to package your application for distribution. The wizard compresses the COM component and any supporting files into a .cab file. You can use the same wizard to deploy your .cab file and .asp file to a server on a network or to a folder. When you mark a control safe for scripting, you guarantee that no script can cause the control to damage the users' computers or data. Controls marked safe for scripting should not be able to obtain unauthorized information from the users' computers nor corrupt their systems.</P>

<A NAME="513"><H3>Integration Between Visual Basic and Other Web Tools</H3></A>

<P>You have learned how Visual Basic can be used to create middle tier components through WebClasses. Now let's review Web programming and how your component fits in.</P>

<P>Web programming has two parts. One is programming the HTML or DHTML that the browser displays. The other is programming the server. You can use Visual Basic 6.0 along with Microsoft FrontPage or Microsoft Visual InterDev to create Web pages. You can then import the Web pages directly into the WebClass designer in Visual Basic, and write code in the Web pages that access the server. You can use DHTML as a front-end to WebClasses. DHTML uses HTTP as its mechanism for communicating with the Web server.</P>

<P>Tools like FrontPage and Visual InterDev are very good at managing and building an entire site, while Visual Basic is better suited for building applications that can include Web client access as part of their functionality. Visual Basic adds value in Web development because it lets you create database applications and access COM components and services such as Microsoft Message Queue Server. </P>

<p><b>Using Web Classes to Create Distributed Applications</b></p>

<P>WebClasses populate the middle tier with application logic that can be accessed via HTTP, Microsoft Message Queue Server (MSMQ), or Distributed Component Object Model (DCOM). In addition, WebClasses can use ADO to connect to OLE DB data sources, including both structured sources of data such as SQL Server and unstructured sources of data such as Microsoft Index Server. </P>

<P>With Visual Basic 6.0, you can build very scalable applications, such as Web sites, with more than one machine on the back end as servers and thousands of clients communicating with them on the front end through Web browsers. In addition, Visual Basic 6.0 supports creating objects on remote computers via DCOM, and communicating with servers via HTTP through WebClasses. Visual Basic 6.0 also supports communication between computers using low-level protocols such as Winsock.  Visual Basic can also use MSMQ for communication between computers. With MSMQ, you can take class modules created in Visual Basic 6.0 and persist them directly onto a queue for delivery now or later to another computer.</P>


</BODY>
</HTML>



