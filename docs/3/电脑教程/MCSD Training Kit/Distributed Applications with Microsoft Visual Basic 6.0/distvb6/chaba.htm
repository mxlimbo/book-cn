<HTML>
<HEAD>
<TITLE>Appendix B -- Creating ActiveX Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chaaa.htm", "chaca.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>




<A NAME="470"><H1>Appendix B -- Creating ActiveX Controls</H1></A>

<P>This appendix provides an overview of developing custom ActiveX controls. An ActiveX control is a COM component with user interface elements.  ActiveX controls are extensions to the Visual Basic toolbox and are used just like any of the standard built-in controls, such as the TextBox control.</P>

<A NAME="471"><H2>Overview</H2></A>

<P>ActiveX controls, previously known as OLE controls or OCX controls, are COM components that provide the user interface. ActiveX controls are reusable objects that include visual elements and code that you can use to quickly create forms and dialog boxes. To use ActiveX controls, you must place them in some type of container, such as a form or an application.</P>

<P>You can integrate ActiveX controls into Web pages, Microsoft Office, Microsoft Access, Microsoft Visual Basic, or any host that supports ActiveX controls. Because they are implemented via COM, ActiveX controls have associated methods that can be called from other applications (EXEs), dynamic link libraries (DLLs), Web pages, or other controls. Visual Basic has built-in controls that are visible in the toolbox, and also comes with several ActiveX controls that you can add to the toolbox. For example, Figure B.1 shows the ADO Data control&#8212;which packages some functionality of ADO into a simple, easy-to-use interface.</P>

<P>
<img src="images/FBxx01.GIF" width=233 height=179 border=0>
</P><P>
<!--caption--><B>Figure B.1</B> <i>A form acting as a container for an ADO Data control</i><!--/caption-->
</P>


<P><li><B> To add an ActiveX control to the Visual Basic toolbox</B></li></P>

<ol>
<p><li>On the <B>Project</B> menu, click <B>Components</B>.</li></p>

<p>The <B>Components</B> dialog box appears. The items listed include all registered ActiveX controls, insertable objects, and ActiveX designers.</p>

<p><li>On the <B>Controls</B> tab, click the check box to the left of the control name(s) that you want to add.</li></p>

<p><li>Click <B>OK</B> to close the <B>Components</B> dialog box.</li></p>

<p>The ActiveX controls that you selected now appear in the toolbox.</p>
</ol>

<A NAME="472"><H2>Control Classes</H2></A>

<P>In Visual Basic, an ActiveX control is always composed of a UserControl object plus any controls&#8212;referred to as constituent controls&#8212;that you choose to place on the UserControl. Like Visual Basic forms, UserControl objects have code modules and visual designers, as illustrated in Figure B.2. Place constituent controls on the UserControl object's designer, just as you would place controls on a form's designer.</P>

<P>
<A HREF="javascript:fullSize('FBxx02x.htm')"> <img src="images/FBxx02.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure B.2</B> <i>A UserControl containing two constituent controls</i><!--/caption-->
</P>


<P>You can use any standard Visual Basic control on the UserControl object except the OLE container control. You add constituent controls to a UserControl object in the same way that you add controls to a standard Visual Basic form.</P>

<A NAME="473"><H3>Files Associated with a UserControl</H3></A>

<P>A control that you create in Visual Basic is known as a control class. A control class acts as a template for that control. When a control from the Visual Basic toolbox is placed on a form, Visual Basic creates an actual object from the control class&#8212;for example, Text1, or Label1. Like forms, Visual Basic stores user controls in text files that contain the source code and property values of the UserControl and its constituent controls. Visual Basic uses the extension .ctl for these source files. </P>

<P>If a UserControl or its constituent controls use graphical elements, such as bitmaps, Visual Basic cannot store them as plain text. Instead, Visual Basic stores those elements in a .ctx file with the same name you gave the .ctl file. This procedure is analogous to the .frx files used to store graphical elements used in forms. The .ctl and .ctx files completely define an ActiveX control's appearance and interface (properties, methods, and events). </P>

<P>You can include .ctl files in any of the project types. When you compile an ActiveX control project, Visual Basic compiles the control class into an .ocx file. A Visual Basic ActiveX control project can contain one or more .ctl files, each  defining a separate control class. When you compile a control project, Visual Basic creates one .ocx file containing all of the controls in the project.</P>

<P>Your ActiveX control consists of a UserControl and its constituent controls; each instance actually contains those objects. Whenever you place an instance of your ActiveX control on a form, Visual Basic creates a UserControl object, along with instances of any constituent controls you placed on the UserControl designer. Visual Basic encapsulates these objects inside your control.</P>

<A NAME="474"><H2>Creating an ActiveX Control</H2></A>

<P>The following procedure explains how to create an ActiveX control that displays the current date and time:</P>

<ol>
<p><li>Start Visual Basic.</li></p>

<p><li>On the <B>New</B> <B>Project</B> dialog box, click <B>ActiveX</B> <B>Control,</B> then click <B>OK</B>.</li></p>

<p>A <B>UserControl</B> designer appears.</p>

<p><li>Add a Label control and a Timer control to <B>UserControl1</B>.</li></p>

<p>These are the constituent controls.</p>

<p><li>Position the controls as illustrated in Figure B.3.</li></p>

<P>
<img src="images/FBxx03.GIF" width=372 height=213 border=0>
</P><P>
<!--caption--><B>Figure B.3</B> <i>Positioning the constituent controls on the UserControl</i><!--/caption-->
</P>


<p><li>On the <B>Project</B> menu, click <B>Project1 Properties</B>.</li></p>

<p><li>On the <B>General</B> tab, set the Project Name property to <B>MyTimer</B>.</li></p>

<p><li>Click <B>OK</B> to close the <B>Project Properties</B> dialog box.</li></p>

<p><li>Set the Name property of <B>UserControl1</B> to <B>ctlTimer</B>.</li></p>

<p><li>Change the Name property of the Label control to <B>lblDateAndTime</B>.</li></p>

<p><li>Set the Font property of <B>lblDateAndTime</B> to font style <B>Bold</B> and font size <B>18</B>.</li></p>

<p><li>Set the Alignment property of <B>lblDateAndTime</B> to <B>2 - Center</B>.</li></p>

<p><li>Set the Interval property of <B>Timer1</B> to <B>1000</B>.</li></p>

<p><li>In the Timer event for <B>Timer1</B>, type the following code:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
lblDateAndTime.Caption = Now()
</pre></td></tr></table></p>

<p><li>On the <B>File</B> menu, click <B>Save</B> <B>Project.</B></li></p>

<p>Save your project as MyTimer.vbp.</p>
</ol>

<A NAME="475"><H2>Implementing Your ActiveX Control</H2></A>

<P>To use your new control in an application, you place the control on a form. When you put a control on a form at design time, Visual Basic creates an actual instance of the control class. Although you might think of this control as a permanent fixture of the form, it is only a design-time instance of the control. If the form is closed for any reason&#8212;for example, its Close button is clicked, the project is closed, or F5 is pressed to place the project in Run mode&#8212;Visual Basic destroys the design-time instance.</P>

<P>When the project is placed in Run mode, Visual Basic creates a run-time instance of the control when the form is loaded and destroys this run-time instance when the form is unloaded. </P>

<P>Instances of controls are continually created and destroyed, so you must ensure that the property values are preserved. When you create a control, you must include code that saves and retrieves property values of the control. To store and retrieve information each time an object is created or destroyed, use the ReadProperty and WriteProperty methods of the PropertyBag object.</P>

<A NAME="476"><H3>Creating a Property</H3></A>

<P>When you create an ActiveX control in Visual Basic, you can add properties, methods, and events to the control. You can do this manually by writing code such as property procedures, or you can use the ActiveX Control Interface Wizard add-in shown in Figure B.4.</P>

<P>
<A HREF="javascript:fullSize('FBxx04x.htm')"> <img src="images/FBxx04.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure B.4</B> <i>Adding a property using the ActiveX Control Interface Wizard</i><!--/caption-->
</P>


<P><li><B> To run the ActiveX Control Interface Wizard</B></li></P>

<ol>
<p><li>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></p>

<p><li>On the <B>Add-In Manager</B> dialog box, click <B>VB 6 ActiveX Ctrl Interface Wizard</B>.</li></p>

<p><li>Select the <B>Loaded/Unloaded</B> Load Behavior check box, then click <B>OK</B>.</li></p>

<p><li>On the <B>Add-Ins</B> menu, click <B>ActiveX Control Interface Wizard</B>.</li></p>
</ol>

<A NAME="477"><H3>Creating Property Pages</H3></A>

<P>Property pages enable you to define a custom interface for setting properties of an ActiveX control&#8212;providing more flexibility than the Properties window. Property pages look a lot like forms, and designing them is somewhat similar to designing forms. The way property pages work, however, is quite different from the way forms work. The procedure for creating a property page is as follows:</P>

<ol>
<p><li>Create the user interface for the property page.</li></p>

<p><li>Add code to synchronize the property page with the current state of the control.</li></p>

<p><li>Set up the appropriate property page relationships: associate properties with a property page, and associate a tabbed Property Page dialog box with your control.</li></p>
</ol>

<P>Visual Basic includes a Property Page Wizard that you can use to add a property page for your control:</P>

<P><li><B> To run the Property Page Wizard</B></li></P>

<ol>
<p><li>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></p>

<p><li>On the <B>Add-In Manager</B> dialog box, click <B>VB 6 Property Page Wizard</B>.</li></p>

<p><li>Select the <B>Loaded/Unloaded</B> Load Behavior check box, then click <B>OK</B>.</li></p>

<p><li>On the <B>Add-Ins</B> menu, click <B>Property Page Wizard</B>.</li></p>

<p><li>Add a new property page for each grouping of properties in your control.</li></p>

<p>If you have a property that is a standard data type (like color or font), the wizard will automatically add the standard property page to the list of property pages for your control.</p>

<p><li>Add the properties of your control to the property pages you've created.</li></p>

<p><li>Click <B>Finish</B>.</li></p>
</ol>

<P>You must let Visual Basic know when a property value changes by using the PropertyChanged method of the UserControl object within a property procedure.  Calling the PropertyChanged method to notify Visual Basic that a property of your control has changed is important so that Visual Basic can mark your control as needing to be saved in the project where it is being used. Calling PropertyChanged also tells Visual Basic to update the property value in the Properties window and in any property pages for your control.</P>

<A NAME="478"><H3>Saving Property Values</H3></A>

<P>You save property values by calling the WriteProperty method in the WriteProperties event of the UserControl object. Visual Basic calls this event when the design-time control is destroyed.</P>

<P>The WriteProperty method takes three arguments: a string indicating the property to save, a value for the property, and a default value if the developer did not set an initial property. This method writes the data value to the property bag.</P>

<P>The PropertyBag object is a mechanism that allows you to store your control's properties that are set within the Visual Basic development environment. The PropertyBag object is used exclusively for creating ActiveX controls and Active documents. The PropertyBag object saves data to a .vbd, .obd, or some other kind of file, depending on the application.</P>

<P>The PropertyBag has two methods: the WriteProperty method and the ReadProperty method. The PropertyBag object is exposed as part of the WriteProperties and ReadProperties event declaration.</P>

<P>The following example shows how to save current property values with the WriteProperty method of the PropertyBag object:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
     PropBag.WriteProperty &quot;UpperCase&quot;, mvarUpperCase, vbUpperCase
     PropBag.WriteProperty &quot;Caption&quot;, Label1.Caption, &quot;Username&quot;
End Sub
</pre></td></tr></table></p>

<P>For more information on the PropertyBag object, search for &quot;Saving Properties to the PropertyBag&quot; in the MSDN Online Help.</P>

<A NAME="479"><H3>Reading Property Values</H3></A>

<P>You retrieve property values by calling the ReadProperty method in the ReadProperties event of the UserControl object. Visual Basic calls this event when either the design-time or run-time control is created. The ReadProperty method takes two arguments: a string designating the property name, and a default value. If a property value has been saved, the ReadProperty method returns the value. If a property value has not been saved, the method returns the default value. The following example shows how to use the ReadProperty method to return the saved value of the Caption property:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
     ' Trap for invalid property values
     On Error Resume Next
     Label1.Caption = PropBag.ReadProperty(&quot;Caption&quot;, &quot;Username&quot;)
End Sub
</pre></td></tr></table></p>


<A NAME="480"><H3>Default Property Values</H3></A>

<P>When you read and write property values, it is important to provide default values. Visual Basic writes a line of code in the source file (.frm, .dob, .pag, or .ctl) of the control's container only if the property value differs from the default value that you provided. As a result of providing a default value, the file size is reduced and the application's performance is improved.</P>

<A NAME="481"><H3>Initializing Property Values in the InitProperties Event Procedure</H3></A>

<P>The first time you place an instance of a control on a container, the container receives the InitProperties event. Thereafter, only the ReadProperties event occurs. In the InitProperties event, you set the initial value for a property by using the same default value that you provide with the WriteProperty and ReadProperty methods when saving and retrieving the property value.</P>

<P>Since mapped properties are already initialized by the constituent control, you need to initialize only those properties that don't map to properties of constituent controls. The following code shows how to initialize the UpperCase property of an ActiveX control:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
'Set up storage for the property
Dim mvarUpperCase As Boolean

' Use that default value in the InitProperties event
Private Sub UserControl_InitProperties()
     mvarUpperCase = vbUpperCase
End Sub
</pre></td></tr></table></p>

<P>Figure B.5 shows the evolution of the control and related files as the control is created by a control developer, used by an application developer in a standard application, and then used by the user of the completed application.</P>

<P>
<A HREF="javascript:fullSize('FBxx05x.htm')"> <img src="images/FBxx05.JPG" width=404 height=135 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure B.5</B> <i>How an ActiveX control is implemented</i><!--/caption-->
</P>


<P>In Visual Basic, you can add a Standard EXE project to your control project group to test the control. Visual Basic automatically adds your ActiveX control to the toolbox. However, if the UserControl designer window is open, the control is disabled in the toolbox. When you close the UserControl window, the ActiveX control reappears in the Visual Basic toolbox, as illustrated in Figure B.6.You can add a Standard EXE project to your control project group to test the control. When you do this, you can then add your ActiveX control to a form in your Standard EXE project.</P>

<P>
<img src="images/FBxx06.GIF" width=81 height=361 border=0>
</P><P>
<!--caption--><B>Figure B.6 A UserControl available in the Visual Basic toolbox</B><!--/caption-->
</P>


<A NAME="482"><H2>Testing Your ActiveX Control</H2></A>

<P>After your create an ActiveX control in Visual Basic, you can implement it in another project. You will see a design-time and a run-time instance of the control. The following procedures explain how to do this.</P>

<P><li><B> To create a design-time instance of your control</B></li></P>

<ol>
<p><li>Start Visual Basic and create a new Standard EXE project.</li></p>

<p><li>On the <B>File</B> menu, click <B>Add</B> <B>Project</B>.</li></p>

<p><li>On the <B>Add Project</B> dialog box, click the <B>Recent</B> tab, select the <B>MyTimer</B> ActiveX control project, then click <B>Open</B>.</li></p>

<p>For instructional purposes, we will assume that you created the <B>MyTimer</B> control project described earlier in the &quot;<A HREF="chaba.htm#474">Creating an ActiveX Control</A>&quot; section of this appendix. Notice that in the Project Explorer you have two projects, as illustrated in Figure B.7. You will use the Standard EXE project as a container for your custom ActiveX control.</p>

<P>
<img src="images/FBxx07.GIF" width=232 height=179 border=0>
</P><P>
<!--caption--><B>Figure B.7 Using a Standard EXE project to test an ActiveX control</B><!--/caption-->
</P>


<p><li>Add the <B>ctlTimer</B> control from the Visual Basic toolbox to <B>Form1</B>.</li></p>

<p>Notice that the time is updated in the ActiveX control every second&#8212;even though the Standard EXE project is not running. This is an example of creating a design-time instance of a control.</p>
</ol>

<P><li><B> To create a run-time instance of the control</B></li></P>

<ol>
<p><li>On the <B>File</B> menu, click <B>Save</B> <B>Project</B> <B>Group</B> and save the project group files.</li></p>

<p><li>On the <B>Run</B> menu, click <B>Start</B>.</li></p>

<p>A new, run-time instance of the control is created. (If the MyTimer Project Properties dialog box appears, make sure the <B>Start Component</B> option is selected with the ctlTimer component, then click <B>OK</B>.)</p>

<p><li>On the <B>Run</B> menu, click <B>End</B>.</li></p>
</ol>

<P><li><B> To compile your ActiveX control</B></li></P>

<ol>
<p><li>Click the <B>MyTimer</B> project in the <B>Project</B> window.</li></p>

<p><li>On the <B>File</B> menu, click <B>Make MyTimer.ocx</B>.</li></p>

<p><li>Click <B>OK</B> to compile the control into an .ocx file.</li></p>

<p><li>Save your project.</li></p>
</ol>

<P><li><B> To use your compiled .ocx file</B></li></P>

<ol>
<p><li>On the <B>File</B> menu, click <B>New</B> <B>Project</B>.</li></p>

<p><li>On the <B>New Project</B> dialog box, click <B>Standard</B> <B>EXE,</B> then click <B>OK</B>.</li></p>

<p><li>Right-click on the Visual Basic toolbox, then click <B>Components</B>.</li></p>

<p><li>On the <B>Controls</B> tab of the Components dialog box, click the check box to the left of the <B>MyTimer</B> control, as illustrated in Figure B.8, then click <B>OK</B>.</li></p>

<P>Your ActiveX control is added to the Visual Basic toolbox.</P>

<P>
<A HREF="javascript:fullSize('FBxx08x.htm')"> <img src="images/FBxx08.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure B.8</B> <i>Adding MyTimer.ocx to your project</i><!--/caption-->
</P>


<p><li>Place a <B>MyTimer</B> control on <B>Form1</B>.</li></p>

<p>Visual Basic creates a design-time instance of your control on the form.</p>
</ol>

<A NAME="483"><H2>Making Your ActiveX Control a Data Source</H2></A>

<P>With Visual Basic, you can create an ActiveX control that provides data to other controls in much the same way as the ADO Data control does. Although you can use the ADO Data control for simple data access, you can create more advanced functionality in your own ActiveX control. For example, you could create a control that is a data source for a computer's file system or for data stored in a proprietary data format. Your custom data source control can then be reused, and data-bound controls can bind to it.</P>

<P><li><B> To create an ActiveX control that is a data source</B></li></P>

<ol>
<p><li>Set the DataSourceBehavior property of your control to <B>vbDataSource</B>.</li></p>

<p>This creates an event called <B>GetDataMember</B> that occurs when a data consumer requests a new data source</p>

<p><li>In the Initialize event procedure of your control, establish the data your source will provide.</li></p>

<p>This process involves creating a Connection object and a Recordset object, setting the connection parameters, and opening the recordset.</p>

<p><li>Write code in the <B>GetDataMembe</B>r event procedure to return a data object.</li></p>

<p>The GetDataMember<B> </B>event procedure has two parameters: DataMember and Data. The DataMember parameter is an optional parameter that specifies the name of the data member used if your control provides multiple data members. The Data parameter is the data object that the procedure returns to the data consumer. The following example returns data from a recordset called rsEmployees:</p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub UserControl_GetDataMember _
     (DataMember As String, Data As Object)
     ' Return the data to the consumer
     Set Data = rsEmployees
End Sub
</pre></td></tr></table></p>

<p><li>Add any additional functionality you want your data source control to contain.</li></p>

<p>For example, you might want to include features to navigate through records or display the current record.</p>
</ol>

<P>Once you have created your data source control, you can place it on a form and add controls that bind to it. The GetDataMember event is invoked when a data consumer requests a new data source. Your control then uses the DataMember parameter, if appropriate, to identify the specific data member the consumer requires and returns data back to the consumer in the form of a Recordset object.</P>

</BODY>
</HTML>



