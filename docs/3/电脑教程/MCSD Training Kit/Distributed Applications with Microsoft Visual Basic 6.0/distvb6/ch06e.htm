<HTML>
<HEAD>
<TITLE>Lesson 4: Modifying Records</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06d.htm", "ch06f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="250"><H1>Lesson 4: Modifying Records</H1></A>

<P>Using ADO, an application can modify existing records in a data source. This includes modifying the current record in a recordset or modifying multiple records through a single SQL command. Depending on whether you need to modify a single record or multiple records, you can choose between using a Recordset object or a SQL command. </P>

<P>When your application needs to update data in an external data source, you can either execute SQL statements directly or use a Recordset object and its various methods for modifying data. Since a recordset can only modify one record at a time and uses both client and server resources, you should use a SQL statement when updating multiple records. In the event multiple records are updated, you can use a Command or Connection object and execute a SQL Insert, an Update, or a Delete statement to add or modify records.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>

<p><li>Modify multiple records using a SQL command.</li></p>

<p><li>Modify a single record using a Recordset object.</li></p>

</ul>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>

<A NAME="251"><H2>Modifying Records with SQL statements</H2></A>

<P>If your application needs to update a number of records, you can execute a SQL statement using the Connection or Command object's Execute method. Use the Connection object when the statement will only be called once. Use the Command object if the command will be executed by your application more than once or if you need to call a stored procedure. A Command object can create a temporary stored procedure for better efficiency when the command is used more than one time. See Chapter 8, &quot;<A HREF="ch08a.htm#306">Using Stored Procedures</a>,&quot; for more information.</P>

<P>The following example uses an SQL statement to modify multiple records in a single database:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdConnect_Click()
    Dim cnPubs As Connection
    Dim strConnect As String

    Set cnPubs = New Connection
    ' Define the OLE DB connection string
    strConnect = &quot;Provider=SQLOLEDB;&quot; &amp; _
        &quot;Data Source=VB6ENTSVR;&quot; &amp; _
        &quot;Initial Catalog=Pubs&quot;
    ' Open the database connection
    cnPubs.Open strConnect, &quot;sa&quot;, &quot;&quot;
    ' Execute the SQL statement
    cnPubs.Execute &quot;UPDATE Titles Set Price = Price * 1.1&quot;
    cnPubs.Close
    Set cnPubs = Nothing
End Sub
</pre></td></tr></table></p>

<A NAME="252"><H2>Modifying Records in a Recordset</H2></A>

<p>If your application has already opened a recordset, you can modify data using the recordset's methods. Modifying records with a Recordset object is limited to a single addition, deletion, or update at a time.</p>

<A NAME="253"><H3>Adding a New Record</H3></A>

<P>In order to add a new record to the existing recordset use the AddNew method. Once the fields for the new record have been populated, use the Update method to save the changes to the recordset and the data source. The following example uses the AddNew method to add a new Author record:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
rsAuthors.AddNew
rsAuthors!au_fname = &quot;Nancy&quot;
rsAuthors!au_lname = &quot;Davolio&quot;
rsAuthors.Update
</pre></td></tr></table></p>

<A NAME="254"><H3>Deleting the Current Record</H3></A>

<P>To delete a record from the recordset, you must first navigate to the appropriate record. Use the Delete method to permanently remove the record from the recordset and the data source. The following example deletes the current record:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
rsAuthors.Delete
</pre></td></tr></table></p>

<A NAME="255"><H3>Modifying the Current Record</H3></A>

<P>To change the existing record in a recordset, your application can modify the values of each field. Then, using the Update method, you can save the changes to the recordset and the data source. The following example changes and then updates the current record:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
rsAuthors!au_fname = &quot;Nancy&quot;
rsAuthors!au_lname = &quot;Davolio&quot;
rsAuthors.Update
</pre></td></tr></table></p>

<A NAME="256"><H3>Canceling a Change or Addition</H3></A>

<P>If you need to cancel the proposed changes to a record, or the result of the AddNew method, you can use the CancelUpdate method. You can only use CancelUpdate prior to the Update method. If you use CancelUpdate with AddNew, the cursor returns to the previous record. The following example cancels an AddNew using CancelUpdate:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
rsAuthors.AddNew
rsAuthors!au_fname = &quot;Nancy&quot;
rsAuthors!au_lname = &quot;Davolio&quot;
rsAuthors.CancelUpdate
</pre></td></tr></table></p>

<A NAME="257"><H2>Lesson Summary</H2></A>

<P>In this lesson, you learned how to update records in a data source using SQL statements and the ADO Recordset object. Depending on whether your application needs to update multiple records at a time or individual records, you can choose between these techniques. SQL statements can be called through the Execute method of Connection or Command objects to update multiple records. Using the Recordset's AddNew, Delete, and Update methods, you can modify individual records. However, using a Recordset object uses more system resources than an SQL statement.</P>

</BODY>
</HTML>



