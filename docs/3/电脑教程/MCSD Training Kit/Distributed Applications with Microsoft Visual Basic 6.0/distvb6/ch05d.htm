<HTML>
<HEAD>
<TITLE>Lesson 3: Using the Data Environment</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05c.htm", "ch05e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="209"><H1>Lesson 3: Using the Data Environment</H1></A>

<P>The Data Environment designer is an object you can add to your Visual Basic project to provide an interactive, design-time environment for creating objects that access data. At design time, you can set property values for Connection and Command objects associated with a Data Environment. You can write code to respond to ADO events, execute commands, and return records from a data source. You can also drag Data Environment objects on to forms, or reports, to quickly create data-bound applications.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li> Use the Data Environment Designer.</li></p>

<p><li> Use the Data Environment to create connections.</li></p>

<p><li> Use the Data Environment to create commands.</li></p>

<p><li> Use Visual Basic code to work with recordsets in a Data Environment.</li></p>

</ul>
<b>Estimated lesson time: 50 minutes</b>
</blockquote></div>
</p>

<A NAME="210"><H2>The Data Environment Designer</H2></A>

<P>The Data Environment can be used as an alternative to coding ADO directly for quickly creating database applications. With the Data Environment, you can visually create and manipulate ADO connections and commands at design-time. The Data Environment designer window has an outline view that shows the defined Connection and Command objects. You arrange the outline view either by object type or by connection. The outline view can either display or hide the field objects of each Command object, depending on its settings. You can modify any existing Command or Connection object by accessing either its Properties dialog box or the Visual Basic Properties window. Common modifications include changing a Command object's connection source, adjusting a Connection object's logon information, and renaming an object, as illustrated in Figure 5.4.</P>

<P>
<A HREF="javascript:fullSize('F05xx04x.htm')"> <img src="images/F05xx04.JPG" width=404 height=284 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.4</b> <i>Data Environment designer</i><!--/caption-->
</P>


<P>Upon creation, objects in your Data Environment designer are given default names, such as Command1, Connection1, or DataEnvironment1. However, you should change these to more meaningful, unique names just as you would any new object added to a Visual Basic project.</P>

<A NAME="211"><H3>Establishing a Connection</H3></A>

<P>As illustrated in the previous figure, you can right-click on a Connection object in the Data Environment designer to set connection properties. The first step is to select a data source provider, as illustrated in Figure 5.5.</P>

<P>
<img src="images/F05xx05.GIF" width=367 height=460 border="0">
</P><P>
<!--caption--><b>Figure 5.5</b> <i>Selecting a data source provider</i><!--/caption-->
</P>


<P>After you have selected a data source provider, you can specify connection properties such as the database server name, username, password, and database name. After entering connection property values in the Properties tab of the Data Link dialog box, you can test the connection, as illustrated in Figure 5.6.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Connection tab's property sheet will look different according to the data source provider selected, as illustrated previously in Figure 5.5.
</blockquote></div>
</p>

<P>
<A HREF="javascript:fullSize('F05xx06x.htm')"> <img src="images/F05xx06.JPG" width=404 height=416 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.6</b> <i>Setting properties and testing the connection</i><!--/caption-->
</P>


<A NAME="212"><H3>Creating a Command Object</H3></A>

<P>Once you've created a connection to your database, you can use the Data Environment designer to create Command objects that give you access to data. For example, you can create a simple Command object that gives you access to the data in a table, or a more complex Command object based on a query. You can then use a data environment Command object as a data source in your application. Do this by right-clicking the Connection and clicking Add Command, as illustrated in Figure 5.7.</P>

<P>
<A HREF="javascript:fullSize('F05xx07x.htm')"> <img src="images/F05xx07.JPG" width=404 height=404 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.7</b> <i>Adding a Command to a Connection</i><!--/caption-->
</P>


<P>After you add a Command, you can use the Command Properties window to specify the Command object's name, the connection it uses, and the source of its data in the Command Properties dialog box. For example, you can set the source of data to be a table, stored procedure, or SQL statement, as illustrated in Figure 5.8.</P>

<P>
<img src="images/F05xx08.GIF" width=401 height=338 border="0">
</P><P>
<!--caption--><b>Figure 5.8</b> <i>Setting Command properties</i><!--/caption-->
</P>


<P>You can also click the SQL Builder button, as illustrated previously in Figure 5.8, to open the Query Designer. In the Query Designer, you can drag and drop database objects from the Data View window to build SQL statements as illustrated in Figure 5.9.</P>

<P>
<A HREF="javascript:fullSize('F05xx09x.htm')"> <img src="images/F05xx09.JPG" width=404 height=337 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.9</b> <i>Using the Query Designer to return data using SQL SELECT statement</i><!--/caption-->
</P>


<A NAME="213"><H3>Dragging From a Data View to Your Data Environment</H3></A>

<P>You can also create Command objects automatically by dragging objects from the Data View window to your Data Environment designer. This is an easy and efficient way to create Command objects from tables, views, or stored procedures that are listed in your Data View. If the connection associated with the Command object being dropped doesn't already exist in the Data Environment, a Connection object is automatically created, as illustrated in Figure 5.10.</P>

<P>
<A HREF="javascript:fullSize('F05xx10x.htm')"> <img src="images/F05xx10.JPG" width=404 height=376 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.10</b> <i>Dragging a table from the Data View to the Data Environment window</i><!--/caption-->
</P>


<A NAME="214"><H3>Using the Data Environment with Code</H3></A>

<P>When you finish designing the Command, you can drag and drop the Command from the Data Environment onto a form. If a Command object returns data, the results can be accessed using a Recordset object available from the DataEnvironment object, for example:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub cmdGetTitle_Click()
    ' Print the title field from a recordset
    ' to the debug window
    Debug.Print DataEnvironment1.rsCommand1!Title
End Sub
</PRE></TD></TR></TABLE></P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
For more information on programmatically controlling a recordset, see Chapter 6, &quot;<A HREF="ch06a.htm#223">Accessing Data with ActiveX Data Objects</A>.&quot;
</blockquote></div>
</p>

<P>
<img src="images/practice.gif" width=67 height=55 border="0">
</P>

<A NAME="215"><H2>Practice: Data Binding Using a Data Environment </H2></A>

<P>In this practice, you will connect to the SQL Server Pubs sample database using a Data Environment designer in Visual Basic. You will also add controls to navigate an ADO Recordset.</P>

<P><li><B> To create a front-end application</B></li></P>
<ol>
<p><li> Open a new Standard EXE.</li></p>

<p><li> Change the name of Form1 to <B>frmBookInformation</B>.</li></p>

<p><li> Set the Caption of <B>frmBookInformation</B> to <B>Book Information.</B></li></p>

<p><li> Add a data environment.</li></p>

<p><li> Set the <B>Name</B> property of the data environment to <B>deBookInfo</B>.</li></p>

<p><li> Change the name of the <B>Connection1 </B>object to <B>cnBookInfo</B> and connect to the Pubs database.</li></p>

<p><li> On the <B>Connection</B> tab of the <B>Data Link</B> properties window, select the database server from the drop-down list in <B>box 1</B> or enter a server name. </li></p>

<p><li> In <B>item 2</B>, select <B>Use A Specific Username And Password</B>, and type <B>sa</B> for the username while leaving the password field blank. </li></p>

<p><li> In <B>item 3</B>, select the <B>pubs</B> database from the drop-down list, as illustrated in Figure 5.11.</li></p>

<P>
<img src="images/F05xx11.GIF" width=367 height=460 border="0">
</P><P>
<!--caption--><b>Figure 5.11</b> <i>Providing connection information in Data Link Properties dialog box</i><!--/caption-->
</P>



<p><li>Click <B>Test</B> <B>Connection</B> to make sure the connection was successful.</li></p>

<p><li> Right-click <B>cnBookInfo</B>, then click <B>Add</B> <B>Command</B>.</li></p>

<p><li> Change the name of Command1 to <B>cmdBookInfo</B>.</li></p>

<p><li> Right-click <B>cmdBookInfo</B>, then click <B>Properties</B>.</li></p>

<p><li> Click <B>SQL</B> <B>Builder</B> to create a query that returns the following fields:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%">
<TR>
<TH>Field Name
</TH>
<TH>Table
</TH></TR>
<TR>
<TD VALIGN="TOP">au_lname
</TD>
<TD VALIGN="TOP">authors
</TD></TR>
<TR>
<TD VALIGN="TOP">au_fname
</TD>
<TD VALIGN="TOP">authors
</TD></TR>
<TR>
<TD VALIGN="TOP">title
</TD>
<TD VALIGN="TOP">titles
</TD></TR>
<TR>
<TD VALIGN="TOP">ytd_sales
</TD>
<TD VALIGN="TOP">titles
</TD></TR></TABLE></P>

<p>The Query design window should look similar to the illustration in Figure 5.12.</p>

<P>
<A HREF="javascript:fullSize('F05xx12x.htm')"> <img src="images/F05xx12.JPG" width=404 height=397 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.12</b> <i>The query design window for cmdBookInfo</i><!--/caption-->
</P>


<p><li> Close the query builder and, when prompted, save the changes to cmdBookInfo.</li></p>
</OL>

<P><li><B> To bind controls to cmdBookInfo</B></li></P>
<OL>
<p><li> Drag the <B>cmdBookInfo</B> icon from the Data Environment designer onto <B>frmBookInformation</B>, as illustrated in Figure 5.13.</li></p>

<P>
<A HREF="javascript:fullSize('F05xx13x.htm')"> <img src="images/F05xx13.JPG" width=404 height=258 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.13</b> <i>Dragging cmdBookInfo onto frmBookInformation</i><!--/caption-->
</P>


<p><li> Change the Caption property of each Label on the form to the following:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%">
<TR>
<TH>Current Caption
</TH>
<TH>New Caption
</TH></TR>
<TR>
<TD VALIGN="TOP">au_lname
</TD>
<TD VALIGN="TOP">Author's last name
</TD></TR>
<TR>
<TD VALIGN="TOP">au_fname
</TD>
<TD VALIGN="TOP">Author's first name
</TD></TR>
<TR>
<TD VALIGN="TOP">title
</TD>
<TD VALIGN="TOP">Title
</TD></TR>
<TR>
<TD VALIGN="TOP">ytd_sales
</TD>
<TD VALIGN="TOP">Year-to-date sales
</TD></TR></TABLE></P>
</OL>
<p>Your form should look similar to Figure 5.14.</p>

<P>
<A HREF="javascript:fullSize('F05xx14x.htm')"> <img src="images/F05xx14.JPG" width=404 height=248 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 5.14</b> <i>Controls bound to frmBookInformation </i><!--/caption-->
</P>


<P><li><B> To add recordset navigation features to the front-end</B></li></P>
<OL>
<p><li> Add four CommandButtons to <B>frmBookInformation</B> that do the following: move to the first record in the recordset, move to the previous record in the recordset, move to the next record in the recordset, and move to the last record in the recordset.</li></p>

<p>In your code, be sure to check for BOF and EOF values to avoid run-time errors. Your code should look similar to the following:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub cmdMoveFirst_Click()
    deBookInfo.rscmdBookInfo.MoveFirst
End Sub

Private Sub cmdMoveLast_Click()
    deBookInfo.rscmdBookInfo.MoveLast
End Sub

Private Sub cmdMoveNext_Click()
    With deBookInfo.rscmdBookInfo
        .MoveNext
        If .EOF Then .MoveFirst
    End With
End Sub

Private Sub cmdMovePrevious_Click()
    With deBookInfo.rscmdBookInfo
	.MovePrevious
	If .BOF Then .MoveLast
    End With
End Sub	
</PRE></TD></TR></TABLE></P>


<p>Your form should look similar to Figure 5.15.</p>

<P>
<img src="images/F05xx15.GIF" width=373 height=211 border="0">
</P><P>
<!--caption--><b>Figure 5.15</b> <i>Navigation controls added to frmBookInformation</i><!--/caption-->
</P>


<p><li> Save and test your application.</li></p>
</OL>
<A NAME="216"><H2>Lesson Summary </H2></A>

<P>The Data Environment designer is an object you can add to your Visual Basic project to provide an interactive, design-time environment for creating objects that access data. When you add a connection to a Data Environment, you select a data source provider, specify connection properties such as the database server name, username, password, and database name. Once you've created a connection to your database, you can use the Data Environment designer to create Command objects that give you access to data. For example, you can create a simple Command object that gives you access to the data in a table, or you can create a more complex Command object based on a query.</P>

<P>The Command Properties window contains a SQL Builder button that opens Query Designer for the Microsoft Visual Data Tools. Once you open the Query Designer, you can drag and drop database objects from the Data View window to build SQL statements. When you have finished designing the Command, you can drag and drop the Command from the Data Environment onto a form. If a Command object returns data, the results can be accessed using a Recordset object available from the DataEnvironment object.</P>

</BODY>
</HTML>



