<HTML>
<HEAD>
<TITLE>Lesson 2: Selecting an Application Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01b.htm", "ch01d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="55"><H1>Lesson 2: Selecting an Application Architecture</H1></A>

<P>The system architecture is an important feature in application design because it defines how elements in the application interact and what functionality each element provides. The three types of system (or application) architecture are single-tier (or monolithic), two-tier, and multi-tier. </P>

<P>Multi-tier applications can be implemented using multiple computers across a network. This type of application is referred to as a distributed application, or <I>n-tier application</I>. An n-tier application represents a special instance of a three-tier application in which one or more of the tiers are separated into additional tiers, providing better scalability. In this course, you will focus on creating n-tier applications. To learn more about developing single-tier and two-tier applications, see the <I>Desktop Applications for Microsoft Visual Basic 6.0 MCSD Training Kit </I>(Microsoft Press).</P>

<P><DIV CLASS="SIDEBAR"><BLOCKQUOTE>

<b>After this lesson you will be able to:</b>
<ul>

<p><li> Assess the potential impact of the logical design on performance, maintainability, extensibility, scalability, availability, and security.</li></p>

<p><li> Describe the three types of services in the basic 3-tier model.</li></p>

<p><li> Explain the advantages of implementing an n-tier model.</li></p>

<p><li> Describe the attributes of a distributed application.</li></p>

</ul>
<b>Estimated lesson time: 30 minutes</b>

</BLOCKQUOTE></DIV></P>

<A NAME="56"><H2>Understanding Application Structure</H2></A>

<P>A typical application that interacts with a user, from a spreadsheet on a personal computer to an accounts payable system on a mainframe, consists of three elements: presentation, application logic, and data services. Each of these elements (or services) has its own attributes, as the following table shows:</P>

<P>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH>Service Type</TH>
			<TH>Service Attribute</TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Presentation</TD>
			<TD VALIGN="TOP">Presentation of information and functionality, navigation, and protection of user interface consistency and integrity.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">Application Logic</TD>
			<TD VALIGN="TOP">Shared business policies, generation of business information from data, and protection of business integrity.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">Data Services</TD>
			<TD VALIGN="TOP">Definition of data, storage and retrieval of persistent data, and protection of data integrity.</TD>
		</TR>
		
	</TABLE>
</P>

<P>Presentation, also known as the user interface (UI), focuses on interacting with the user. In Visual Basic, this would be the forms and controls that the user interacts with.</P>

<P>Application logic, or business rules, perform calculations and determine the flow of the application. Business rules are constraints, usually self-imposed, that companies use to help them operate in their particular business environments-essentially, they encompass those practices and policies that define a corporation's behavior. Business rules often define a baseline for application requirements and provide guidance to the developer. In practical terms, these business rules are goals that developers strive to meet for their applications.</P>

<P>Data services manage information by storing data and providing data-related functionality. For example, a SQL Server running on a Windows NT Server computer would be a data service.</P>


<A NAME="57"><H3>Single-tier Applications</H3></A>

<P>In a single-tier application, only one layer supports the presentation, application logic, and data services. Only one application or application element processes all three of these services. The data itself can be physically stored in any location, such as on a server. However, the functionality for accessing the data is part of the application.</P>

<P>An example of a single-tier application is Microsoft Excel, where the presentation and application logic are combined in a single application. The application logic includes the calculation of totals, spell check, and other mathematical functions. In addition, the routines that access and save the Excel application files are part of the same application layer as the user interface and business rules. Traditional mainframe applications are also single-tier (monolithic), but are shared among multiple clients.</P>


<A NAME="58"><H3>Two-tier Applications</H3></A>

<P>Two-tier, or standard client/server applications, group presentation and application logic components on the client machine and access a shared data source using a network connection. In a two-tier application, the user interface and business rules are a single layer that runs on the client computer. Separate applications, such as SQL Server or Oracle database servers, provide the data services. Client/server applications are often two-tier applications, such as in a Visual Basic application that calls a SQL Server stored procedure to provide data to the application. The Visual Basic application is one layer, and the SQL Server data services are another layer. The code for the user interface and business rules would not necessarily have to be within the same project; the Visual Basic application could call a dynamic-link library (DLL) that accesses data. In this scenario, the user interface and business rules are a single layer; however, the business rules are stored in the DLL. </P>

<P>Two-tier applications work well in department-scale applications with low numbers of users (under 100), a single database, and secure, fast networking. For example, a two-tier application would be a good solution for a workgroup whose function is to enter product orders. Another example is a design department that shares one set of designs within its group of engineers.</P>

<p><b>Limitations of Two-Tier Applications</b></p>

<P>Classical two-tier architectures have brought efficiencies to businesses, but there are also a number of limitations:</P>

<ul>

<P><LI>Monolithic client applications</LI></P>

<p>Two-tier applications tend to have monolithic client-side components, which prevent incremental improvements (upgrades and bug fixes) to the application.</p>

<p><li> Difficult to scale</li></p>

<p>Application scaling is poor because of the limited number of database connections available to clients. Connection requests beyond this limit are simply rejected.</p>

<p><li> Difficult to maintain</li></p>

<p>It is hard to maintain client-side application logic because it has to be deployed to every client. Any change in the logic must be redistributed to all clients.</p>

<p><li> Compromised confidentiality</li></p>

<p>Application logic on the client potentially exposes business rules to users.</p>

<p><li> Difficult to use broadly</li></p>

<p>It is difficult to use two-tier application logic broadly, because applications are bound to specific database systems and table formats.</p>

<p><li> Tightly bound to data source</li></p>

<p>The client is often configured for a particular database, so moving data to a different database is more difficult.</p>

<p><li> Poor network performance</li></p>

<p>A network runs inefficiently because of the amount of raw data that is transferred across it. Much of the database processing is not localized.</p>

</ul>


<A NAME="59"><H3>Multi-tier Applications</H3></A>

<P>Tiers are a logical concept. The three tiers are generally described as user (first), business (second or middle), and data (third); however, there can be more than three tiers in a multi-tier application. Because of this fact, multi-tier applications are sometimes referred to as n-tier applications where n is any number greater than or equal to three. </P>

<P>A service is a unit of application logic that implements operations, functions, or transformations that are applied to objects. For example, a business service can be implemented as a COM component that ensures a purchase does not exceed the buyer's credit limit. In multi-tier architectures, presentation, application logic, and data elements are conceptually separated. These tiers don't necessarily correspond to physical locations on the network. For example, all three tiers may exist on only two machines or they may be deployed on five.</P>

<P>Presentation components manage user interaction and request application services by calling middle-tier components. Application components perform business logic and make requests to databases. </P>

<P>With multi-tier applications, the client provides only one layer: the user interface. The business rules are performed on a system between the user interface and the data storage system. This allows the presentation services, user interface, business rules, and database to reside separately, as illustrated in Figure 1.3. </P>

<P>
<A HREF="javascript:fullSize('F01xx03x.htm')"> <img src="images/F01xx03.JPG" width=404 height=197 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 1.3</b> <i>User interface, business rules, and database reside separately</i><!--/caption-->
</P>


<P>The benefit of this model is that business rules are centralized and can be updated and maintained easily. The presentation layer does practically no work beyond interacting with the user. In a multi-tier application, the client does not directly access a data storage system. The separation of presentation, business rules, and data services allows you to modify any layer of the system without having to change the other two (or more) layers. This significantly reduces the need to maintain clients. In a small, 10-person system, this is not too much of a problem. But when the number of clients reaches hundreds or thousands, the cost of updating business rules and application logic can be significant. Another advantage to using a multi-tier model is that you improve code reuse. Code that you write for business logic in one application, for example, can be reused on other servers within different applications.</P>

<P>Three-tier architectures are often called server-centric, because they uniquely enable application components to run on middle-tier servers, independent of both the presentation interface and database implementation. The independence of application logic from presentation and data offers many benefits:</P>

<ul>

<p><li> Multi-language support</li></p>

<p>You can develop application components using many programming languages.</p>

<p><li> Centralized components</li></p>

<p>You can centralize components for easy development, maintenance, and deployment.</p>

<p><li> Load balancing</li></p>

<p>You can spread application components across multiple servers, allowing for better scalability.</p>

<P><li> More efficient data access</li></P>

<p>You minimize database connection limitation problems since the database now sees only the application component, not all of its clients. Also, database connections and drivers are not required on the client. Database connections in two-tier applications are acquired early and held; in three-tier applications, they are acquired late and released.</p>

<p><li> Improved security</li></p>

<p>You can secure middle-tier application components centrally by using a common infrastructure. You can grant or deny access on a component-by-component basis, simplifying administration.</p>

<p><li> Simplified access to external resources</li></p>

<p>You simplify access to external resources, such as mainframe applications and other databases.</p>

</ul>


<A NAME="60"><H2>Developing a Distributed Application</H2></A>

<P>Before defining what a distributed application is, it is worthwhile to define what an application is. An application is a computer program that solves a particular problem or related set of problems. A simple application runs in a single process space and often loads in utility, or helper, functions through dynamic-link libraries, which helps the application achieve its task.</P>

<P>COM Servers (often just called servers or components) are specialized applications that provide services to other applications. In such a context, the application requesting a service is called a client. Clients and servers often run on separate machines, connected by a network. A client application using a server application is often called a client/server application. Frequently, servers communicate simultaneously with multiple clients. To the client, the server seems to be exclusively interacting with only that client. In reality, servers are shared resources that are used by many clients. To satisfy a client request, a server may become a client to one or more other servers, creating a chain of processing from the original client to many servers. This is what is meant by a distributed application. A distributed application is made up of multiple specialized applications working together to achieve some useful goal.</P>


<A NAME="61"><H3>Elements of a Distributed Application </H3></A>

<P>When developing a distributed n-tier system, you can build intelligent clients with business rules that have been compiled into stand-alone DLLs. These DLLs can be written in Visual Basic and reside on a server, most likely in Microsoft Transaction Server. The client, DLL, and database constitute a service in a multi-tier system.</P>

<P>If you view applications as being separated into presentation, business rules, and data services, you can build each application as a set of features or services that are used to fill consumer requests. When you model an application as a collection of discrete services, you can package the application's features and functionality for reuse-shared among multiple applications, and distributed across network boundaries, as illustrated in Figure 1.4.</P>

<P>The application infrastructure is the software that supports concurrent access to a shared service, usually business and data services. For example, a relational database management system (RDBMS) controls access to stored procedures and data on a database server. This course uses Microsoft SQL Server 7.0 for the RDBMS. This is software that works with the operating system to provide the centralized, multi-user functionality for most data services.</P>

<P>
<A HREF="javascript:fullSize('F01xx04x.htm')"> <img src="images/F01xx04.JPG" width=404 height=246 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 1.4</b> <i>Using MTS and SQL Server in an n-tier application</i><!--/caption-->
</P>


<P>A distributed application is:</P>

<ul>

<p><li> Scalable</li></p>

<p>As the number of users or workload increases, the application performance does not degrade significantly. </p>

<p><li> Reliable</li></p>

<p>Reliable applications do not stop users from doing their jobs due to a hardware or software failure. Users of reliable applications also have a high level of confidence regarding the correctness of their operation and availability. </p>

<p><li> Efficient</li></p>

<p>Efficient applications do their work quickly and are effective at helping users reach their goals.</p>

</ul>

<P>An enterprise-level distributed application, or an enterprise application, is a large-scale distributed application. Enterprise applications have additional characteristics beyond a distributed application. An enterprise application is:</P>

<ul>

<p><li> Extensive</li></p>

<p>Enterprise applications are often multi-user, multi-computer applications that manipulate huge amounts of data and utilize parallel processing, network-distributed resources, and complex logic. A team of developers typically develop the application, and it can be deployed across multiple platforms and inter-operate with many other applications. Enterprise applications are long-lived.</p>

<p><li> Business oriented</li></p>

<p>Enterprise applications meet specific business requirements. They encode business policies, processes, rules, and entities, and can be deployed in a manner responsive to business needs.</p>

<p><li> Mission critical</li></p>

<p>An enterprise application must be robust enough to sustain continuous operation. It must be extremely flexible for scalability and deployment, and allow for efficient maintenance, monitoring, and administration.</p>

</ul>


<A NAME="62"><H3>Distributed Component Object Model (DCOM) </H3></A>

<P>COM and DCOM, technologies that enable components to communicate with each other, make distributed applications on the Windows platform and other platforms possible. COM is an object-based programming model designed to promote software interoperability. DCOM is the &quot;glue&quot; that binds all of the technology in a distributed application together. DCOM allows two or more components to cooperate easily with one another, even if different vendors wrote them at different times and in different programming languages, or if the components are running on different computers with different operating systems. To support its interoperability features, COM defines and implements mechanisms that allow applications to connect to one another as software objects. </P>

<P>The following table lists terms and definitions used in this course that are related to components and COM: </P>

<P>
	<TABLE CELLPADDING=5 WIDTH="95%">

		<TR>
			<TH>Term</TH>
			<TH>Definition</TH>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Component Object Model (COM)</TD>
			<TD VALIGN="TOP">An industry-standard architecture for developing object-oriented components.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">COM component</TD>
			<TD VALIGN="TOP">Physical file (for example, .exe, .dll, .ocx) that contains classes. COM component is an umbrella term for ActiveX document, ActiveX control, Automation Server, and so on. The term component may be used once a COM component context is established.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">COM DLL</TD>
			<TD VALIGN="TOP">A COM component implemented as a DLL. A COM DLL is sometimes referred to as an in-process component.</TD>
		</TR>

		<TR>
			<TD VALIGN="TOP">COM EXE</TD>
			<TD VALIGN="TOP">A COM component implemented as an EXE. A COM EXE is sometimes referred to as an out-of-process component.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Class</TD>
			<TD VALIGN="TOP">The definition of an object, including code and data elements. Class is a template for constructing objects. A COM component may contain several classes.</TD>
		</TR>
		
		<TR>
			<TD VALIGN="TOP">Object</TD>
			<TD VALIGN="TOP">An instance of a class, created at run time.</TD>
		</TR>
		
	</TABLE>
</P>


<A NAME="63"><H3>Transactions</H3></A>

<P>Distributed, multi-user applications can make changes to database tables and even non-database entities such as message queues. Often more than one object in an activity initiates changes. Because the work in any single object can fail, the application must handle situations where some objects fail, but others succeed. Work cannot be left in an inconsistent state where some of the work is done, but other parts are not.</P>

<P>Transactions provide a simple, all-or-nothing model of managing work. All of the objects succeed and all the work is committed, or one or more of the objects fail and none of the work is committed. Database tables or files affected by the work will either all be changed or not changed at all-they will not be left in an inconsistent state. This provides a fault-tolerant service for a set of computing resources and is the essential element for enterprise-level distributed applications.</P>


<A NAME="64"><H2>Lesson Summary </H2></A>

<P>The system architecture is an important feature of application design since it defines how elements in the application interact and what functionality each element provides. The three types of system (or application) architecture are single-tier (or monolithic), two-tier, and multi-tier. </P>

<P>A typical application that interacts with a user consists of three elements: presentation, application logic, and data services. Presentation, also known as the user interface (UI), focuses on interacting with the user. In Visual Basic, this is the forms and controls with which the user interacts. Application logic, or business rules, perform calculations and determine the flow of the application. Data services consist of storing information and performing tasks such as stored procedures.</P>

<P>In a single-tier application, only one layer supports the user interface, business rules, and data services; only one application or application element processes all three of these services. Two-tier, or standard client/server applications, group presentation and application logic components on the client machine and access a shared data source using a network connection. In multi-tier architectures, the presentation, application logic, and data elements are conceptually separated; these tiers don't necessarily correspond to physical locations on the network.</P>

<P>When developing a distributed n-tier system, you can build intelligent clients with business rules that have been coded into stand-alone DLLs. You can write these DLLs in Visual Basic and they can reside on a server such as Microsoft Transaction Server.</P>

<P>COM and DCOM, technologies that enable components to communicate with each other, make distributed applications on the Windows platform and other platforms possible. </P>

<P>Distributed multi-user application can make changes to database tables and even non-database entities such as message queues. Transactions provide a simple, all-or-nothing model of managing work. All of the objects succeed and all the work is committed, or one or more of the objects fail and none of the work is committed.  Database tables or files affected by the work will either all be changed or not changed at all-they will not be left in an inconsistent state.</P>


</BODY>
</HTML>



