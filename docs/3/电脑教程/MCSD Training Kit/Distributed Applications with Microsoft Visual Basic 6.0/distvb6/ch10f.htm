<HTML>
<HEAD>
<TITLE>Chapter 10 -- Summary</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10e.htm", "ch10g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="408"><H1>Summary </H1></A>

<P>You should implement security controls based on authentication, access control, encryption, and system integrity. For a resource to be secure it must be accessible only to authorized users, and must be inaccessible to unauthorized users. Windows NT implements user-level security by controlling access to resources based on associations between users and resource. When a user logs in, he or she receives an access token that is verified each time the user attempts to access a resource. The access token is compared to the resource ACL to determine whether access is granted or denied. </P>

<P>In most two-tier applications, users must be authenticated on the database server, resulting in a high number of connections. This can consume server resources, and reduce the application's scalability. However, because n-tier application business logic is separate from user interface and data services, multiple MTS components can use the same database connection to reduce resources used on the server. Furthermore, several concurrent users connect to the database with the same package identity improving application scalability. In SQL Server, you can implement Windows NT Authentication and Mixed mode security.</P>

<P>MTS provides security by allowing you to define roles. Users that you add to a role are based on Windows NT domain users and groups. After you enable security on an MTS package, MTS uses declarative security to determine who can use a component in a package whenever a call is made from outside the package. To use a more customized security scheme in your components, you can write code in your component to determine if a client is authorized to perform operations. This type of security is called programmatic security, which you can implement in Visual Basic by using the IsCallerInRole and IsSecurityEnabled methods.</P>

<P>With DCOMCNFG, you can configure your Windows NTcomputer to act as a client, a server, or both. If you deploy a COM EXE that you want to run on a server, you can use DCOMCNFG to assign permissions to determine whether or not various clients can call the COM EXE. You can specify an execution location for components to determine the computer on which the component will execute. This is a suitable alternative to using MTS because MTS only supports COM DLLs. Although the Package and Deployment wizard handles the maintenance of registering remote servers automatically, you can use the Clireg32.exe utility to manually register the component on the client computer. To deploy your COM EXE, you set the Remote Server Files option in Visual Basic. When the COM EXE is compiled, a .vbr file is created. The .vbr file contains information needed by a client's computer to run the COM EXE on a remote computer. After you run the Clireg32.exe utility to register the COM EXE on the client computer, the client can call the COM EXE running on a remote server.</P>

</BODY>
</HTML>



