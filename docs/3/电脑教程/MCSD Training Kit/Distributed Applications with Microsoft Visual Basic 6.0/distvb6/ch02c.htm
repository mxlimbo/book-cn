<HTML>
<HEAD>
<TITLE>Lesson 2: Navigation and Validation</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02b.htm", "ch02d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="101"><H1>Lesson 2: Navigation and Validation</H1></A>

<P>The way that users navigate through an application and the way that you validate their entries influences how you create the user interface. When designing the application, you must also consider the capabilities of the standard and custom controls Visual Basic provides. </P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>
<p><li>Implement menus.</li></p>

<p><li>Create a pop-up menu.</li></p>

<p><li>Dynamically add and remove menu items.</li></p>

<p><li>Explain the purpose of validation.</li></p>

<p><li>Design form-level validation.</li></p>

<p><li>Design field-level validation.</li></p>

</ul>
<b>Estimated lesson time: 25 minutes</b>
</blockquote></div>
</p>

<A NAME="102"><H2>Developing Navigation</H2></A>

<P>The most commonly used navigational feature in an application is the menu. Menus provide a structured way for users to access the commands and tools contained in an application. Proper planning and design of menus and toolbars is essential to ensure proper functionality and the accessibility of your application to users.</P>

<P>In Visual Basic, you can create several kinds of menus: a permanently displayed menu; a menu that pops up in response to an event; or a menu that responds to an event by adding, deleting, enabling, or disabling options. With the Visual Basic Menu Editor, you can easily create menus that enhance the quality of your applications.</P>

<A NAME="103"><H3>Creating a Simple Menu</H3></A>

<P>You can add, delete, and alter menu items at design-time with the Menu Editor (Figure 2.4) or at run-time dynamically. The Menu Editor lets you create new menus and menu bars, add new commands to existing menus, and modify menu properties.</P>

<P>A menu control has many properties such as Name, Index, and Description.</P>
<ul>
<p><li>The Name property identifies the menu control in code. </li></p>

<p><li>The Index property identifies controls that share the same name. </li></p>

<p><li>The Description property is the text that appears on the menu bar at run time.</li></p>
</ul>

<P>
<img src="images/F02xx04.GIF" width=366 height=366 border="0">
</P><P>
<!--caption--><b>Figure 2.4</b> <i>The Menu Editor dialog box</i><!--/caption-->
</P>


<p><li><b>To create menu controls in the Menu Editor </B></li></P>
<ol>
<p><li>Click the form.</li></p>

<p><li>On the <B>Tools</B> menu, click <B>Menu Editor</B>, or click the <B>Menu Editor</B> button on the toolbar.</li></p>

<p><li>In the <B>Caption</B> text box, enter the text for the first menu's title. </li></p>

<p>This title will appear on the menu bar of your application. </p>

<p><li>In the <B>Name</B> text box, enter the name that you will use to refer to the menu control in code.</li></p>

<p><li>Click the left or right arrow button to decrease or increase, respectively, the indentation level of the control.</li></p>

<p><li>Set the other properties as necessary.</li></p>

<p><li>Click <B>Next</B> to create another menu control, or click <B>Insert</B> to add a menu control between existing controls.</li></p>

<p><li>When you have created all the menu controls for the form, click <B>OK</B> to close the <B>Menu Editor</B>.</li></p>
</OL>

<A NAME="104"><H3>Creating Pop-up Menus</H3></A>

<P>Pop-up menus are a convenient way to provide access to common, contextual commands. You can use the PopupMenu method to display a menu created in the Menu Editor. This method displays a pop-up menu on top of a form or control at the current mouse location. You can also display the menu at specified coordinates. If a menu has at least one menu item, you can display it as a pop-up menu at run time.</P>

<P>The following example displays a pop-up menu at the cursor location when the user clicks the right mouse button on a form. The Format menu that was shown in Figure 2.4 appears.</P>

<p><li><b>To create a pop-up menu</B></li></P>
<OL>
<p><li>Create a form that includes a menu control named <B>mnuFormat</B> with at least one submenu.</li></p>

<p><li>Add the following code to the Form_MouseDown event procedure:</li></p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Form_MouseDown (Button As Integer,  _
        Shift As, X As Single, Y As Single)
    If Button = vbRightButton Then
        PopupMenu mnuFormat
    End If
End Sub
</PRE></TD></TR></TABLE></P>
</ol>
<p>The PopupMenu method displays the mnuFormat menu when the user right-clicks the form.</p>

<A NAME="105"><H3>Adding and Deleting Menus Dynamically</H3></A>

<P>The menus that you create at design time can respond dynamically to run-time conditions. For example, if a menu item action becomes inappropriate at some point, you can disable that menu item to prevent users from selecting it. You can also use a check mark next to a menu item to indicate which command was last selected. Other menu control features described in this section include code that makes a menu item visible or invisible and that adds or deletes menu items. You can also dynamically add menu items if you have a menu control array.</P>

<P>You must use a control array to create a menu control at run time. Use the Load statement to dynamically load the controls. Each time you add a menu item to the array at run time, additional menu controls are loaded into the array, making the menu grow.</P>

<P>Controls created at run time can be hidden by using the Hide method or by setting the control's Visible property to False. Use the Unload statement to remove a control in a control array from memory. If you don't know the number of items in the array, you can determine the number by using a control array's UBound property. The following code demonstrates adding items to a menu control array and using the UBound property to determine the next available index:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim i As Integer
' Add 5 new items to the mnuFile menu
For i = 1 To 5
    'Use the UBound property to find the next available index number
    Load mnuFile(mnuFile.UBound + 1)
    ' Give the new menu item a caption
    mnuFile(mnuFile.UBound).Caption = &quot;This is new item &quot; &amp; _
        mnuFile.UBound
Next i
</PRE></TD></TR></TABLE></P>

<P>For more information on menus, see <I>Desktop Applications for Microsoft Visual Basic 6.0 MCSD Training Kit </I>(Microsoft Press).</P>

<A NAME="106"><H2>Validating Data</H2></A>

<P>Data validation ensures that every value that the user enters into your application is accurate. When a user types invalid data into fields on your form, you should provide an audio and/or visual notification of the invalid data entry. </P>

<P>Visual Basic provides two data validation methods:</P>
<UL>
<p><li>Form-level validation, which takes place after a user has filled in all fields on a form.</li></p>

<p><li>Field-level validation, which takes place as each field on a form is filled in.</li></p>
</UL>

<P>With either form-level or field-level validation, you should always set the focus back to the field that contains invalid data. For example, if a user types an invalid zip code into a TextBox control and you want to allow the user to make corrections, use the SetFocus method to place the cursor in the zip code TextBox control.</P>

<A NAME="107"><H3>Implementing Form-Level Validation</H3></A>

<P>When you implement form-level validation, it is important to provide visual cues to your users to help them determine which tasks they need to perform. For example, a form may contain multiple fields, such as first name, last name, address, city, state, and zip code, which need to be completely filled in before any further processing can take place. You can handle this type of scenario by using a For Each statement in a keyboard event to loop through each control on a form and validate its data. </P>

<P>The following code is an example of form-level validation. If the user does not enter the required values, the OK button remains disabled. When the user has typed all required information, the OK button's Enabled property is set to True. This lets the user know that the task is successfully completed.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
    ' The KeyUp event is used to also check the Backspace key
    Dim ctl As Control
    ' Loop through the Controls collection and validate each control
    For Each ctl In Controls
        'Check the type of the current control.
        If TypeOf ctl Is TextBox Then
            'Does the current text box have the required value?
            If ctl.Text = &quot;&quot; Then
                cmdOK.Enabled = False
                Exit Sub
            End If
        End If
    Next ctl
    'If all required values are entered,
    'give the user access to the OK button.
    cmdOK.Enabled = True
End Sub
</PRE></TD></TR></TABLE></P>


<A NAME="108"><H3>Implementing Field-Level Validation</H3></A>

<P>You may want to validate data as it is entered into each field. Field-level validation provides immediate direction to the user and gives the developer control over user actions. You use techniques such as:</P>
<UL>
<p><li>Setting the MaxLength property</li></p>

<p><li>Using the PasswordChar property</li></p>

<p><li>Setting the Locked property</li></p>
</UL>

<A NAME="109"><H3>Using Events for Field-Level Validation  </H3></A>

<P>You can use several events to validate user input. As with the form-level validation, you can use a control's KeyPress, KeyUp, and KeyPress events. You can also use the Validate event. The following example uses the KeyPress event to convert alphabetic characters to uppercase:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub txtSubdivision_KeyPress(KeyAscii As Integer)
    ' Use the Chr function to return the character 
    ' associated with the specified character code.
    ' After the character is converted to upper case,
    ' convert the uppercase character back into an ASCII value.
    KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub
</PRE></TD></TR></TABLE></P>


<p><b>Using the Validate Event </b></p>

<P>Visual Basic 6.0 includes a Validate event for controls, which occurs before a control loses focus. This event occurs only when the CausesValidation property  of the control that is about to receive the focus is set to True. Use both the Validate event and CausesValidation property for a control to evaluate input before allowing the user to move focus away from that control. The Validate event also includes a Cancel argument, which causes the control to retain focus when set to True.</P>

<P>The following example uses the Validate event to confirm that the user entered a date into a text box. If the value is not a date value, the event is cancelled and the text box retains focus.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub Text1_Validate(Cancel As Boolean)
    ' If the value is not a date, keep the focus, unless the user
    ' clicks Help   
    If Not IsDate(Text1.Text) Then
        Cancel = True
        MsgBox &quot;Please insert a date in this field.&quot;, ,   &quot;Text1&quot;   
    End if
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="110"><H2>Lesson Summary </H2></A>

<P>Menus facilitate navigation in an application. You create menus with the Menu Editor. If a menu has at least one menu item, you can display it as a pop-up menu at run time. You can also add and delete menu items at run time with a control array. You can hide a run time menu with the Hide method or by setting the menu control's Visible property to False.</P>

<P>Visual Basic provides two validation methods, form-level and field-level. With form-level validation, be sure to provide visual cues to help users understand what they must do. Use the For Each statement to loop through all controls on a form to ensure appropriate input exists.</P>

</BODY>
</HTML>



