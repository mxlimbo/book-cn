<HTML>
<HEAD>
<TITLE>Lesson 2: Developing a Custom Object Model</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="179"><H1>Lesson 2: Developing a Custom Object Model</H1></A>

<P>As discussed in Chapter 1, &quot;<A HREF="ch01a.htm#33">Application Design Concepts</A>,&quot; business rules are constraints, usually self-imposed, that companies use to help them operate in their particular business environments. They are goals that developers strive to meet for their applications. It is not uncommon for these rules to change in scope and direction. </P>

<P>Business components are objects that contain business rules that describe in detail specific areas of your corporate policy. An example of a business rule is: &quot;The hotel account managers may authorize discounts of up to 20 percent for regular customers.&quot; A business component could be created to implement this business rule. Since business rules change, there is an advantage to implementing them as components. If a business rule should change, you can modify the component, which should have little or no impact on the rest of the application. </P>

<P>But what if you wanted to adjust the discount? Business rules change as company policies change, so there is an advantage to implementing business rules as components. If a business rule changes, you can modify the component, which should have a low impact or no impact on the rest of the application. Code in a business component is in a centralized location, simplifying modification.</P>

<P>This lesson explores the role of business components in distributed applications. You will study important factors to consider when encapsulating business logic into a component. You will also learn the process of developing and implementing object models and collections, and explore some of the Visual Studio applications that assist in COM development.</P>


<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>
<p><li> Implement custom business objects.</li></p>

<p><li> Describe the role of custom business objects.</li></p>

<p><li> Describe how to create an object model.</li></p>

<p><li> Explain the benefits of implementing an object model.</li></p>

</ul>
<b>Estimated lesson time: 25 minutes</b>

</blockquote></div>
</P>

<A NAME="180"><H2>Custom Business Objects</H2></A>

<P>Business objects are components that can be created with Visual Basic, Visual C++, or Microsoft Visual J++. The goal of a business object is to separate a business rule from application logic. This separation helps protect the client and data tier from having to be updated. For example, a business rule might be a formula for calculating the price of a hotel room. Hotel management may not want customers to know how the room price is calculated. And they may want to change the rules for calculating the price at a later time. Ideally, this kind of business rule should be contained in a COM object where clients can access its logic, and the rule can be changed without affecting client applications. For example, if a business rule changes, only a single COM DLL may need to be recompiled. The client application that is providing the presentation services can remain undisturbed.</P>

<P>Because COM objects can communicate out-of-process, business objects can exist on a remote server and can be invoked by other client computers. To limit the workload of client computers, application logic can reside on the client computer, while the business rules and data services can reside on remote computers, as illustrated in Figure 4.11.</P>

<P>
<A HREF="javascript:fullSize('F04xx11x.htm')"> <img src="images/F04xx11.JPG" width=404 height=449 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 4.11</b> <i>Separation of business objects from presentation logic</i><!--/caption-->
</P>


<P>With this separation, the business rules and data can be protected, and the application processing can be distributed. This kind of distributed system is discussed in Chapter 1, &quot;<A HREF="ch01a.htm#33">Application Design Concepts</A>,&quot; and is called a &quot;multi-tier or n-tier system.&quot;</P>

<A NAME="181"><H2>Creating an Object Model</H2></A>

<P>An object model  is a hierarchical representation of objects and/or collections that exist within an applications framework. Typically, an object model expresses the fact that some objects are a subassembly of larger objects. For example, an engine, tires, and doors are a part of a larger car object. The object that is at the top of the hierarchy in an object model is called the parent, or <I>root object</I>.</P>

<P>Objects in the hierarchy are linked together by <I>properties</I> and <I>collections</I>. Some properties are objects themselves. For example, an ADO Data control is an object that contains an ADO Recordset object. A collection is simply a group of related objects. For instance, controls that are contained in a Visual Basic form are part of a Controls collection. Each Visual Basic form in an application is part of a Forms collection. When you create your own object model, you can implement collections.</P>

<P>An object model is composed of two objects: objects and collection objects. The root object, which is what the client application creates, contains a pointer to an object or collection. A collection object contains a data structure, such as an array comprised of item objects. For example, consider the earth as an object model. It has a set of its own properties such as diameter and mass. However, earth also has a collection of continent objects, and each continent object has a set of properties and methods. Each continent object can contain a collection of country objects.</P>

<P>Microsoft Office applications have their own object models. For example, the Microsoft Excel object model contains a root object named Application. The Application object exposes the workbooks, charts, worksheets, and so on. Each Workbooks collection contains many Workbook objects, and the Worksheets collection can contain many Worksheet objects. By implementing an object model, Excel is programmable through languages such as Visual Basic. Figure 4.12 shows a simplified view of the Microsoft Excel object model.</P>

<P>
<A HREF="javascript:fullSize('F04xx12x.htm')"> <img src="images/F04xx12.JPG" width=404 height=260 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 4.12</b> <i>The Microsoft Excel object model</i><!--/caption-->
</P>


<P>The object models that you create for your applications prioritize your objects and give them structure. When you organize your own custom object model by defining relationships between the objects in your component, you make programming with your component an easier task.  For example, you might create a ChateauStMark object as the root object of your object model. You might want the ChateauStMark object to have other types of objects and collections associated with it, such as Hotel objects and Room objects. A sample object model for this program is shown in Figure 4.13.</P>

<P>
<A HREF="javascript:fullSize('F04xx13x.htm')"> <img src="images/F04xx13.JPG" width=404 height=489 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 4.13</b> <i>The Chateau St. Mark object model</i><!--/caption-->
</P>


<A NAME="182"><H2>Collection Classes</H2></A>

<P>The best way to implement a collection is by making it a collection class module. The collection class provides a way to connect a group of related class objects with an object that &quot;contains&quot; them. Visual Basic provides three ways to create collections. Using the Chateau St. Mark as an example, you can:</P>
<ul>
<p><li> Declare a Hotel variable As Collection, and make it Public.</li></p>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Public Hotel As Collection</PRE>
</TD></TR></TABLE>
</P>

<p><li> Declare a mcolHotels variable As Collection, and make it Private. Then, give the ChateauStMark object a set of methods for adding and deleting objects.</li></p>

<p><li> Implement your own collection classes by creating a collection class module named, for example, Hotels. This is the preferred method.</li></p>
</ul>

<P>All collections have a standard set of methods: Add, Remove, Item, and Count. In addition, all collections have a NewEnum property that returns an enumeration object that is used to iterate over the items in a collection. The For Each...Next construct is a special syntax of Visual Basic that automatically calls the NewEnum property procedure in a collection object. Because using For Each...Next is far more convenient than calling NewEnum, the NewEnum property is usually marked as hidden in a component's type library. The illustration in Figure 4.14 shows the NewEnum Property Get procedure marked as hidden when the component's type library is viewed with the OLE View tool.</P>

<P>
<A HREF="javascript:fullSize('F04xx14x.htm')"> <img src="images/F04xx14.JPG" width=404 height=206 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 4.14</b> <i>The NewEnum method of the Hotels collection marked as hidden</i><!--/caption-->
</P>


<P><li><B> To manually create a collection class</B></li></P>

<ol>
<p><li> Open an ActiveX DLL project in Visual Basic.</li></p>

<p><li> Define the <B>Instancing</B> property and <B>Name</B> of a class module. </li></p>

<p>This setting will be determined by the structure of your object model. For example, the Instancing property will be set to MultiUse if the collection will be a top-level object.</p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
As a general rule, when naming objects and collections, use a singular naming convention for objects and a plural naming convention for collections. For example, the collection of Hotels (plural) contains multiple Hotel (singular) objects.
</blockquote></div>
</p>

<ol>
<p><li value="3"> Define a module level variable <B>As Collection</B>. </li></p>

<p>For example, in the class modules General Declaration section, you would declare:</p>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private mCol As Collection</PRE>
</TD></TR></TABLE>
</P>

<p><li> Add a second class module to the project and set the <B>Instancing</B> property to <B>PublicNotCreateable</B>. </li></p>

<p>This will be an object within the collection.</p>

<p><li> Add the following methods and properties to the collection: </li></p>

<ul>
<p><li>Add (method)</li></p>

<p><li> Remove (method)</li></p>

<p><li> Item (public property)</li></p>

<p><li> Count (public property)</li></p>

<p><li> NewEnum (public property)</li></p>
</ul>

<p>Later in this chapter, you will be introduced to the ClassBuilder Utility. This Visual Basic Add-In will automatically create these methods and properties for you.</p>

<p><li> Add additional properties and methods, if needed, to the collection and its objects.</li></p>
</ol>

<A NAME="183"><H2>Visual Basic Object Modeling Tools</H2></A>

<P>When you create a component with Visual Basic, you can include many different classes from which client applications can use to create objects. These classes can be organized within the component to create an object model. Several Visual Basic tools are available to aid in the development and evaluation of object models, including:</P>
<ul>
<p><li> The Visual Basic ClassBuilder Utility.</li></p>

<p><li> The Visual Basic Object Browser.</li></p>
</ul>

<A NAME="184"><H3>The ClassBuilder Utility</H3></A>

<P>The Class Builder utility is a Visual Basic add-in that assists in the development of your class and collection hierarchies. The Class Builder utility is part of the Wizards and Templates component when you install Visual Basic. When the Class Builder utility creates your object model, it generates the framework code necessary to implement the classes and collections, including the properties, methods, events, and enumerators, as illustrated in Figure 4.15.</P>

<P>
<A HREF="javascript:fullSize('F04xx15x.htm')"> <img src="images/F04xx15.JPG" width=404 height=255 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 4.15</b> <i>The Class Builder window</i><!--/caption-->
</P>


<P>The first time you use the Class Builder in a project that already has existing classes and collections, you will see them initially appear at the root of the hierarchy. This is because the Class Builder does not have any information about a hierarchy. You can use the Class Builder to arrange the existing classes and collections using drag-and-drop operations. You can then save the new arrangement of the object model hierarchy.</P>

<P>
<img src="images/practice.gif" width=67 height=55 border="0">
</P>

<A NAME="185"><H2>Practice: Creating Object Models with the Class Builder Utility </H2></A>

<P>In this practice, you will create the Chateau St. Mark Hotel collection and Hotel class, as previously illustrated in Figure 4.15.</P>

<P><li><B> To add the Class Builder utility to your application</B></li></P>
<ol>
<p><li> Open a new ActiveX DLL project in Visual Basic.</li></p>

<p><li> Remove the default class module from the project.</li></p>

<p><li> On the <B>Add-Ins</B> menu click the <B>Add-In Manager...</B> menu item.</li></p>

<p>The Add-In Manager dialog box appears.</p>

<p><li> Double-click the <B>VB 6 Class Builder Utility</B>.</li></p>

<p>The Class Builder Utility displays <B>Loaded</B> in the <B>Load Behavior</B> column.</p>

<p><li> Click <B>OK</B> to close the <B>Add-In Manager</B> dialog box.</li></p>

<p><li> On the <B>Add-Ins</B> menu click <B>Class Builder Utility...</B>.</li></p>

<p>The Class Builder utility dialog box appears.</p>
</ol>

<P><li><B> To create a collection object</B></li></P>
<ol>
<p><li> On the <B>File</B> menu point to <B>New</B> then click <B>Collection...</B>.</li></p>

<p><li> Set the <B>Name</B> property to <B>Hotels</B> and the <B>Instancing</B> property to <B>Mult Use</B>. </li></p>

<p><li> Click the <B>New Class</B> option in the <B>Collection of</B> property. </li></p>

<p><li> Type <B>Hotel</B> in the <B>New Class</B> text box. </li></p>

<p><li> Click <B>New Class Properties...</B>.</li></p>

<p>The Class Module Builder dialog box opens.</p>

<p><li> Set the Hotel class to <B>PublicNotCreateable</B>. Click <B>OK,</B> then click <B>OK </B>again.</li></p>

<p>You will return back to the Class Builder utility dialog box.</p>

<p><li> On the File menu click <B>Update Project</B>.</li></p>

<p>The Hotels collection and Hotel class will be added to your project.</p>
</ol>

<A NAME="186"><H3>The Object Browser</H3></A>

<P>The Object Browser displays information about objects in all of the type libraries referenced by your project, as illustrated in Figure 4.16. You can use the Object Browser to view the properties, methods, and events you've created for a class module. You can run the Object Browser by clicking Object Browser on the View menu, or by pressing F2 in the Visual Basic IDE. As you select the different properties, methods, and events you've created in a class module, the Object Browser will display any help information you may have added.</P>

<P>
<img src="images/F04xx16.GIF" width=396 height=304 border="0">
</P><P>
<!--caption--><b>Figure 4.16</b> <i>The Visual Basic Object Browser</i><!--/caption-->
</P>


<A NAME="187"><H2>Lesson Summary </H2></A>

<P>Business rules are constraints, usually self-imposed, that companies use to help them operate in their particular business environment. Business objects separate business rules and application logic. </P>

<P>An object model is a hierarchical representation of objects and/or collections that exist within an applications framework. Typically, an object model expresses the fact that some objects are more important than others.</P>

<P>There are three objects that make up a collection object: the root object, the collection object, and the item object. The root object, created by the client application, contains a pointer to a collection object. The collection object contains a data structure, such as an array comprised of item objects. The object models that you create for your applications prioritize your objects and give them structure. By organizing your objects-by defining the relationships between the objects in your program-you make programming with your component an easier task. </P>

<P>The best way to implement a collection is by making it a collection class module. </P>

<P>Several Visual Basic tools are available to aid in the development and evaluation of COM object models. Some of these tools are:</P>
<ul>
<p><li> The Visual Basic Class Builder utility.</li></p>

<p><li> The Visual Basic Object Browser.</li></p>
</ul>

</BODY>
</HTML>



