<HTML>
<HEAD>
<TITLE>Lesson 2: Using Stored Procedures</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08b.htm", "ch08d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="317"><H1>Lesson 2: Using Stored Procedures</H1></A>

<P>Most of the time, database administrators create stored procedures on a SQL Server. However, as a developer you can benefit from learning how to create stored procedures yourself. In this lesson, you will learn how to create simple stored procedures with SQL Server and also with Visual Basic. You will learn how to create more complex stored procedures that include input and output parameters, and how to return multiple Recordsets. In addition, you will learn how to create simple and nested transactions within a stored procedure. The T-SQL debugger will also be introduced so that you can learn how to interactively debug a stored procedure.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>

<ul>
<p><li> Create stored procedures with SQL Server.</li></p>
<p><li> Create stored procedures with Visual Basic.</li></p>
<p><li> Explain how nested transactions work in a stored procedure.</li></p>
<p><li> Describe how to use multiple Recordsets returned by a stored procedure.</li></p>
</ul>

<b>Estimated lesson time: 45 minutes</b>
</blockquote></div>
</p>

<A NAME="318"><H2>Creating Simple Stored Procedures</H2></A>

<P>Stored procedures can be created and customized to fit the needs of one or more applications. You can create stored procedures using the Create Procedure Transact-SQL statement in SQL Server. You can also use the Data View in Visual Basic to open, execute, debug, copy, delete, and rename stored procedures in a database. The Create Procedure statement has the following syntax:</P>

<p>CREATE PROCEDURE [owner.]procedure_name[;number]</p>

<p>[(parameter1 [, parameter2]...[parameter1024])]</p>

<p>[{FOR REPLICATION} | {WITH RECOMPILE}</p>

<p>[{[WITH] | [,]} ENCRYPTION]]</p>

<p>AS sql_statements</p>

<P>The following arguments are used in most stored procedures:</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<th>Argument</th>
<th>Description</th>
</TR>
<TR>
<td valign="top">procedure_name</td>
<td valign="top">The name of the new stored procedure. Procedure names must conform to the rules for identifiers and must be unique within the database and its owner. The complete name cannot exceed 128 characters.</td>
</TR>
<TR>
<td valign="top">parameter</td>
<td valign="top">A parameter in the procedure. You can declare one or more parameters optionally in a Create Procedure statement. The user must supply the value of each declared parameter when the procedure is executed (unless a default for the parameter has been defined). A stored procedure can have a maximum of 1024 parameters.</td>
</TR>
<TR>
<td valign="top">sql_statements</td>
<td valign="top">The actions the procedure is to take.</td>
</TR>
</TABLE></p>

<P>The following code creates a simple stored procedure called count_authors:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE count_authors
AS
SELECT count(*) FROM authors
</PRE>
</TD></TR></TABLE></P>

<P><LI> <B> To create a stored procedure with SQL Server</B></LI></P>
<ol>
<p><li> Start the SQL Server Enterprise Manager.</li></p>
<p><li> Right-click on the <B>Stored Procedures</B> object within the Pubs database on the SQL Server, then click <B>New Stored Procedure,</B> as illustrated in Figure 8.4.</li></p>
<p>The Stored Procedure Properties window opens.</p>
<p><li> In the <B>Stored Procedure Properties</B> window, type the <B>count_authors</B> stored procedure listed earlier, then click <B>OK</B>.</li></p>

<P>
<A HREF="javascript:fullSize('F08xx04x.htm')"> <img src="images/F08xx04.JPG" width=404 height=215 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 8.4</b> <i>Creating a new stored procedure with the SQL Server Enterprise Manager</i><!--/caption-->
</P>

</ol>

<P><LI> <B> To create a Stored Procedure with Visual Basic</B></LI></P>

<ol>
<p><li> From the <B>View</B> menu in Visual Basic, click <B>Data</B> <B>View</B> <B>Window</B>.</li></p>

<p><li> In the <B>Data View</B> window, click <B>Add a Data Environment to the Current Project</B> on the toolbar.</li></p>

<p>The Data Environment designer opens, as illustrated in Figure 8.5.</p>

<P>
<A HREF="javascript:fullSize('F08xx05x.htm')"> <img src="images/F08xx05.JPG" width=404 height=225 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 8.5</b> <i>Opening the Data Environment designer using the Data View window</i><!--/caption-->
</P>


<P><LI>Right-click on the <B>Connection1</B> object and select <B>Rename</B>. Type the name <B>conPubs</B>.</LI></P>

<p><li> Right-click on <B>conPubs</B> and select <B>Properties</B>. </li></p>
<p>This displays the Data Link Properties dialog box.</p>

<p><li> On the <B>Provider</B> tab of the <B>Data Link Properties</B> dialog box, specify the provider to connect to your SQL database, typically <B>Microsoft OLE DB Provider for SQL Server</B>.</li></p>

<p><li> On the <B>Connection</B> tab, specify the connection information to connect to the Pubs database.</li></p>

<p><li> When you click OK in the <B>Data Link Properties</B> dialog box, the new Connection will appear in the <B>Data View</B> window, as illustrated in Figure 8.6.</li></p>

<P>
<A HREF="javascript:fullSize('F08xx06x.htm')"> <img src="images/F08xx06.JPG" width=404 height=164 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 8.6</b> <i>Connection object added to the Data View window</i><!--/caption-->
</P>


<p><li> In the <B>Data View</B> window, expand the <B>Connection</B> object's tree view, right-click on the <B>Stored Procedures</B> folder, then click <B>New Stored Procedure</B>, as illustrated in Figure 8.7. (The New Stored Procedure option is available only for the Enterprise Edition of Visual Basic 6.0.)</li></p>

<P>
<img src="images/F08xx07.GIF" width=392 height=339 border=0>
</P><P>
<!--caption--><b>Figure 8.7</b> <i>Using the Data View window to create a stored procedure</i><!--/caption-->
</P>


<p>The New Stored Procedure window opens.</p>

<p><li> In the <B>New Stored Procedure</B> window, type the count_authors stored procedure using T-SQL syntax, as illustrated in Figure 8.8.</li></p>

<P>
<img src="images/F08xx08.GIF" width=372 height=307 border=0>
</P><P>
<!--caption--><b>Figure 8.8</b> <i>Typing T-SQL statements into the New Stored Procedure dialog box</i><!--/caption-->
</P>


<p><li> In the <B>New Stored Procedure</B> window, click the <B>Save To Database</B> toolbar button to save your stored procedure.</li></p>
</ol>

<A NAME="319"><H2>Using Parameters in Stored Procedures</H2></A>

<P>An application communicates with a stored procedure through <I>parameters</I>. There are two types of stored procedure parameters: input and output. Input parameters allow an application to pass values to a stored procedure to be used in SQL commands. When a stored procedure is executed, input parameters can either have their value set to a constant or use the value of a variable. Output parameters allow the stored procedure to pass a data value or cursor back to the application. </P>

<P>A stored procedure can have as many as 1,024 parameters, with each parameter having a name, data type, direction (input or output), and default value. Parameters are declared in a Create Procedure statement. You specify a parameter name using an at (@) sign as the first character. The following is an example of creating a stored procedure that can be used in the Pubs database. Given an author's last and first name, it displays the title and publisher of each book by that author:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE au_info @lastname varchar(40), @firstname varchar(20) 
AS
SELECT au_lname, au_fname, title, pub_name
FROM authors INNER JOIN titleauthor ON authors.au_id = titleauthor.au_id
    JOIN titles ON titleauthor.title_id = titles.title_id
    JOIN publishers ON titles.pub_id = publishers.pub_id
WHERE au_fname = @firstname
AND au_lname = @lastname
</PRE>
</TD></TR></TABLE></P>

<P>Normally, the calling application must supply the value of each declared parameter when the procedure is executed unless a default value for the parameter has been defined. The following code is an example of a stored procedure, pub_info2, that displays the names of all authors who have written a book published by the publisher given as a parameter. If no publisher name is supplied, the stored procedure shows the authors published by Algodata Infosystems.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE pub_info2 @pubname varchar(40) = 'Algodata Infosystems'
AS
SELECT au_lname, au_fname, pub_name
FROM authors a INNER JOIN titleauthor ta ON a.au_id = ta.au_id
    JOIN titles t ON ta.title_id = t.title_id
    JOIN publishers p ON t.pub_id = p.pub_id
WHERE @pubname = p.pub_name
</PRE>
</TD></TR></TABLE></P>

<A NAME="320"><H2>Generating Multiple Recordsets</H2></A>

<P>Instead of executing one query at a time, SQL Server allows you to issue and execute a batch of queries. When executing a batch of queries, more than one Recordset can be generated. For example, a stored procedure can generate multiple Recordsets that contain more than one Select statement, as shown in the following example:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE MultiRecProc as
SELECT * FROM titles
SELECT * FROM publishers
</PRE>
</TD></TR></TABLE></P>

<P>The NextRecordset method of the ADO Recordset object allows you to retrieve subsequent Recordset objects. If no more Recordsets are available, the returned Recordset object is set to Nothing. The following example demonstrates how to use the NextRecordset method to retrieve multiple Recordset objects.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim cmd As New ADODB.Command
Dim rs As ADODB.Recordset

Cmd.ActiveConnection = cn
Cmd.CommandText = &quot;MultiRecProc&quot;
Cmd.CommandType = adCmdStoredProc

Set rs = Cmd.Execute()
Do While Not rs Is Nothing
    If (Not rs.EOF) Then Debug.Print rs.Fields(0).Name
    Set rs = rs.NextRecordset()
Loop
</PRE>
</TD></TR></TABLE></P>

<A NAME="321"><H2>Implementing Transactions</H2></A>

<P>You can implement transactions in stored procedures to group SQL commands together as a single unit of work. The following example uses the Pubs database to increase the advance to be paid to an author when year-to-date sales of a title are greater than $8,000.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE PROCEDURE trans_test as
BEGIN TRANSACTION
UPDATE titles
SET advance = advance * 1.25
WHERE ytd_sales &gt; 8000
COMMIT
</PRE>
</TD></TR></TABLE></P>

<P>In addition, you can create nested transactions in which there is an inner transaction and an outer transaction. In this case, SQL Server ignores Commit statements for inner transactions. Instead, the entire transaction is either committed or rolled back based on whether or not the outermost transaction is committed. If the outer transaction is committed, the inner nested transactions are also committed. If the outer transaction is rolled back, then all inner transactions are also rolled back, regardless of whether or not the inner transactions were individually committed. The following example creates three transactions, none of which are committed until the outer transaction (OuterTran) is committed.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
CREATE TABLE TestTran (id INT PRIMARY KEY, description CHAR(3))
BEGIN TRANSACTION OuterTran
INSERT INTO TestTran VALUES (1, 'aaa')
BEGIN TRANSACTION Inner1
INSERT INTO TestTran VALUES (2, 'bbb')
BEGIN TRANSACTION Inner2
INSERT INTO TestTran VALUES (3, 'ccc')
COMMIT TRANSACTION Inner2
COMMIT TRANSACTION Inner1
/* No other transactions are commited until OuterTran is commited. */
COMMIT TRANSACTION OuterTran
</PRE>
</TD></TR></TABLE></P>

<A NAME="322"><H2>Debugging Transact-SQL</H2></A>

<P>The T-SQL debugger is integrated with the Data Environment designer. It allows you to interactively debug remote stored procedures written in Microsoft SQL Server's Transact-SQL dialect from within the Visual Basic development environment. Using the T-SQL debugger, you can: </P>

<ul>
<p><li> Display the SQL call stack, local variables, and parameters for the SQL stored procedure.</li></p>
<p><li> Control and manage breakpoints.</li></p>
<p><li> Modify local variables and parameters.</li></p>
</ul>

<P><LI> <B> To use the T-SQL Debugger from Visual Basic</B></LI></P>
<ol>
<p><li> From the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</li></p>
<p><li> From the list of available add-ins, click <B>VB T-SQL Debugger</B>, select the <B>Loaded/Unloaded</B> check box, then click <B>OK</B>.</li></p>
<p><li> If a message box is displayed indicating that the add-in is loaded, click <B>OK</B>.</li></p>
<p><li> From the <B>Add-Ins</B> menu, click <B>T-SQL Debugger</B>. This displays the Visual Basic Batch T-SQL Debugger dialog box.</li></p>
<p><li> On the <B>Settings</B> tab, complete the necessary settings to connect to the SQL Server database that contains the stored procedures you want to debug.</li></p>
<p><li> On the <B>Stored</B> <B>Procedure</B> tab, select the stored procedure you want to debug. If there are parameters, provide a value for each one.</li></p>
<p><li> Click <B>Execute</B> to display the T-SQL Debugger.</li></p>
</ol>
<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You must run the T-SQL Debugging Server Setup on your server computer prior to debugging a stored procedure using the T-SQL debugger. The T-SQL Debugging Server Setup file is located in the \Tools\Tsql\Srvsetup folder on the Supplemental Course Material CD-ROM that accompanies this book.
</blockquote></div>
</p>

<P>You can also display the T-SQL debugger for run-time debugging while you debug Visual Basic code.</P>

<P><LI> <B> To set up the T-SQL debugger for run-time debugging</B></LI></P>
<ol>
<p><li> Select <B>T-SQL Debugging Options</B> from the <B>Tools</B> menu. </li></p>

<p><li> Select the checkbox to automatically step into stored procedures through RDO and ADO connections, as illustrated in Figure 8.9.</li></p>


<P>
<img src="images/F08xx09.GIF" width=402 height=260 border=0>
</P><P>
<!--caption--><b>Figure 8.9</b> <i>The T-SQL Debugging Options dialog box</i><!--/caption-->
</P>

</ol>
<P>After you set up the T-SQL debugger for run-time debugging, you can then step into any ADO code that executes stored procedures. When this happens, you step into the stored procedure itself inside the T-SQL Debugger.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The T-SQL debugger does not work properly if SQL Server logs on as the SystemAccount. You can change this by opening the Services applet in the Control Panel and double-clicking the MSSQLServer service. If the service is set to run as the SystemAccount, change this so the server logs on to a specific account that is valid to your domain.
</blockquote></div>
</p>

<A NAME="323"><H2>Lesson Summary </H2></A>

<P>You can create stored procedures using the Create Procedure Transact-SQL statement in SQL Server. You can also use the Data View window in Visual Basic to open, execute, debug, copy, delete, and rename stored procedures in a database.</P>

<P>An application communicates with a stored procedure through parameters. There are two types of stored procedure parameters: input and output. Input parameters allow an application to pass values to a stored procedure to be used in SQL commands. Output parameters allow the stored procedure to pass data values or cursors back to the application. When executing a stored procedure, more than one Recordset can be generated. Use the NextRecordset method of the ADO Recordset object to retrieve multiple Recordset objects. </P>

<P>You can implement transactions in stored procedures to group together SQL commands as a single unit of work using the Begin Transaction and Commit statement. In addition, you can create nested transactions in which there is an inner transaction and an outer transaction. A nested transaction is either committed or rolled back based on whether or not the outermost transaction is committed.</P>

<P>The T-SQL debugger is integrated with Visual Basic. It allows you to interactively debug remote stored procedures written in Microsoft SQL Server's Transact-SQL dialect from within the Visual Basic development environment.</P>

</BODY>
</HTML>



