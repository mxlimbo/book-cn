<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Security</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10a.htm", "ch10c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="376"><H1>Lesson 1: Overview of Security</H1></A>

<P>This lesson introduces you to the concepts of enterprise security features associated with the Microsoft Windows NT operating system. Anything you do in Windows NT involves some form of security authentication. For example, if you attempt to access a file, Windows NT will verify your access permission. If you try to log on to a workstation, Windows NT will verify your user account and password. These security verifications also occur when Windows NT Server computers access network resources. For example, access verification will occur if an application from one computer attempts to access a data file on another computer. The Windows NT security concepts that you learn in this lesson relate to security concepts discussed in the rest of the chapter.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li>Describe the principles that compose distributed application security.</li></p>

<p><li>Explain how Windows NT implements security.</li></p>

<p><li>Describe how security is implemented in a two-tier application.</li></p>

<p><li>Describe how security is implemented in an n-tier application.</li></p>

</ul>
<b>Estimated lesson time: 35 minutes</b>
</blockquote></div>
</p>

<A NAME="377"><H2>Principles of Security</H2></A>

<P>Data is a corporate asset that an enterprise must protect by implementing security. Security should occur in applications, components, and databases from the beginning of the design process. Security cannot be an afterthought in development, but instead must be made a priority in the design process, especially since the design can become more complex as a result of the security controls. In an enterprise environment, computers rarely work in isolation, but are instead linked to a network or multiple networks. In addition, corporate LANs can be connected to create an intranet infrastructure, sometimes connected to the Internet. To keep your valuable assets, resources, products, and sensitive plans safe and secure, you need to implement security controls. Most security controls implemented in enterprise software stem from a few basic principles that form the cornerstone of Microsoft's security approach.</P>

<ul>
<p><li>Authentication</li></p>

<p>Authentication verifies the identity of the person with whom you are communicating. The most common strategy is a password known only to you and the people (or computers) you trust. For example, when you log onto a Windows NT network, you provide your user ID and your password. The server looks up your user ID in its security database to find your password and compares it to the password you typed at the client computer. If the two passwords match, the server gives you access to its resources. Authentication identifies a user and forwards his or her identity to all local and remote services.</p>

<p><li>Access control</li></p>

<p>Access control restricts access to data based on a user's identity. Once a user has been authenticated, the software or system must answer the question &quot;What information is available to this user?&quot; Access controls are the mechanisms that prohibit access to resources from unauthorized entities. For example, enterprise operating systems such as Windows NT typically support the use of access control mechanisms that specify which users can read, write, modify, or copy particular system objects.</p>

<p><li>Cryptography</li></p>

<p>Cryptography, or encryption, protects the privacy and integrity of data, especially when in transit across a network. This assures that information you send can be understood only by the intended recipient. The most common approach is to send sensitive information using software that scrambles (encrypts) it before transmission and then rely on the recipient to have software that unscrambles (decrypts) the message.</p>

<p><li>System integrity</li></p>

<p>System integrity ensures that the software and hardware portions of the system that are responsible for enforcing its security cannot themselves be compromised by regular users or their programs. For example, Windows NT is built around a security kernel that ultimately protects the system itself and enforces the access controls that protect all sensitive files and data outside the kernel, making the protection complete.</p>
</ul>

<A NAME="378"><H2>Windows NT Security Model</H2></A>

<P>The most fundamental security control in a widespread network is determining which users have access to which computers-that is, whether they have permission for local logon (where they're working on the computers) or for remote access to shared network resources. The Windows NT domain structure governs this policy by requiring that each user in a domain log on to be authenticated.</P>

<P>Windows NT protects its resources by controlling access to them. To protect or secure a resource, the resource must be accessible only to authorized users. There are two basic approaches to resource security. One method, called share-level security, associates an access code with each resource. Any user who knows the code receives access to the resource. Another method, called user-level security, associates users with resources. Any user that is granted permission to the resource receives access. In Windows NT, users are associated with a resource to implement a user-level security model.</P>

<A NAME="379"><H3>How Windows NT Manages Resources</H3></A>

<P>All Windows NT resources are represented as objects that can be accessed only by authorized Windows NT services and users. An object in Windows NT is defined as a set of data used by the system, and the set of actions that manipulate that data. For example, a file object consists of data stored in a file and a set of functions that allow you to read, write, or delete data in that file. You can apply this definition to any object used by the system.</P>

<P>Access to each object is controlled through an Access Control List (ACL). The ACL contains the user (and group) accounts that have access and permissions to the object. When a user successfully logs on, he or she receives an access token that remains with the user process until logging off. Each time the user attempts to access a resource (or object), the access token is compared to the resource ACL to determine whether access is granted or denied.</P>

<A NAME="380"><H3>Security IDs</H3></A>

<P>Even though user and group identifications are represented as readable names, the computer actually stores this information as a security identifier (SID) and group security identifiers (group SIDs). A SID is a unique identifier used to represent a user, a group, or some type of security authority. SIDs are used within access tokens and ACLs instead of readable usernames or group names. A SID is represented as a unique number, such as:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
S-1-5-21-76965814-1898335404-322544488-1001
</pre></td></tr></table></p>

<P>The result of identifying users by SIDs is that even though you may have created the same user account multiple times on the same computer, each instance of the account name will have a unique SID. For example, you have a user account for User1. If you delete this account and create a new account for User1 using the same name, the new account will not have access to the same resources as the old account because the SID is different, even though the account name is the same.</P>

<A NAME="381"><H2>Enterprise Application Security</H2></A>

<P>A typical enterprise application includes the following architectural elements and processes:</P>

<ul>
<p><li>User interface services </li></p>

<p><li>Operating system services </li></p>

<p><li>Business process services </li></p>

<p><li>Data transmission services </li></p>

<p><li>Database access services </li></p>
</ul>

<P>To implement security in an enterprise environment, each of these services must be available only to authenticated users, and each must be protected from unauthorized viewing, tampering, or modification. The best way to protect application components and processes is by using the services provided by Windows NT. Using Windows NT security prevents unauthorized access and tampering by providing user access control, resource and service protection, and auditing.</P>

<A NAME="382"><H3>Controlling User Access</H3></A>

<P>Authentication is the first step to implementing security in your applications. There are several ways to authenticate users, including:</P>

<ul>
<p><li>User accounts</li></p>

<p>You can control user access to your application by using Windows NT user accounts. If users cannot log on to the network, they cannot run your application. Applications do not require network logon accounts to be changed in order to be used for authentication. Instead, you can verify existing accounts as a means of protection in your enterprise applications.</p>

<p><li>User groups</li></p>

<p>Another way to limit access to your application is by collecting users into groups. A user group is a set of users who have identical network rights. Putting user accounts into groups simplifies user access administration. User groups also make it easier to grant multiple users access to a designated network resource. The only task you must perform is to grant a specific access permission to the group (instead of to each individual user). </p>

<p><li>Program access control</li></p>

<p>Your application can also control access by programmatically limiting access rights to certain users or groups. For example, you can assign selected component interfaces to certain users, thereby preventing others from using the component's method. You will learn more about how to use the programmatic security features built into Microsoft Transaction Server (MTS) in Lesson 3.</p>
</ul>

<A NAME="383"><H3>Two-Tier Application Security</H3></A>

<P>In a typical two-tier application, users log on to the database directly. Each user has a different login with different rights. The database is protected from unauthorized access because the user must supply a valid login to use the database. You can use SQL Server to create groups of users and manage privileges on a group basis. For example, you can create a Hotel Managers group and assign the same privileges to all users who are hotel managers. The illustration in Figure 10.1 shows how security works in a typical two-tier application.</P>

<P>
<A HREF="javascript:fullSize('F10xx01x.htm')"> <img src="images/F10xx01.JPG" width=404 height=276 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.1</b> <i>A security implementation in a two-tier hotel application</i><!--/caption-->
</P>


<P>There are some disadvantages to the security model used in two-tier applications, including:</P>

<ul>
<p><li>Reduced scalability</li></p>

<p>Each user must be authenticated on the database server, and each user has a separate database connection. This high number of connections not only uses server resources but also reduces the application's scalability.</p>

<p><li>Low level of integration between applications</li></p>

<p>When one application calls another application, the user must either be authenticated a second time or start a new session with the second application.</p>
</ul>

<A NAME="384"><H3>N-Tier Application Security</H3></A>

<P>N-Tier applications separate business logic from user interface and data services. Instead of accessing a database from the front-end (user interface service), the front-end requests data services from components running in MTS. The MTS component can then retrieve data from a SQL Server or perform updates on behalf of the front-end user. In this scenario, you split security into two types:</P>

<ul>
<p><li>Application security</li></p>

<p>Application security authorizes users access to specific components and interfaces in MTS packages, limiting their capabilities. Therefore, you map users to the application functionality that applies to them. For example, you might map hotel clerks to a Reservation class that creates new reservations, whereas you map hotel managers to a Payroll class that performs pay increases based on employee performance. Application security is implemented in the middle tier by using MTS, as you will learn in Lesson 3.</p>

<p><li>Data security</li></p>

<p>Data security assigns rights to MTS packages for access to the database. You implement data security in the data services tier by using SQL Server.</p>
</ul>

<P>More planning is required when determining an application's security requirements in all three tiers. Figure 10.2 shows how security works in an n-tier application.</P>

<P>
<A HREF="javascript:fullSize('F10xx02x.htm')"> <img src="images/F10xx02.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 10.2</b> <i>How security works in an n-tier model</i><!--/caption-->
</P>


<P>Advantages to implementing security in an n-tier model include:</P>

<ul>
<p><li>The MTS components can totally encapsulate all database access because the user does not log on directly to the database. By performing data manipulation in middle-tier components, you preserve data integrity.</li></p>

<p><li>Multiple MTS components can use the same database connection to reduce resources used on the server. In addition, multiple concurrent users connect to the database with the same package identity, improving scalability.</li></p>

<p><li>You reduce Administration when setting up the application because each user does not need a login to the server.</li></p>

<p><li>Instead of establishing end-user security based on databases and tables, you can use MTS to implement security based on roles that individuals play in an organization.</li></p>
</ul>

<A NAME="385"><H2>Lesson Summary </H2></A>

<P>You should implement security controls to keep your valuable assets and resources, such as products and sensitive plans, safe and secure. Most security controls implemented in applications are based on the principles of authentication, access control, encryption, and system integrity. For a resource to be protected or secured, the resource must be accessible only to authorized users. </P>

<P>Windows NT protects its resources by controlling access to them based on associations between users and resource. This type of security is called user-level security. When a user successfully logs on to Windows NT, he or she receives an access token that remains with the user process until logging off. Each time the user attempts to access a resource (or object), the access token is compared to the resource ACL to determine whether access is granted or denied. </P>

<P>The best way to protect an application's components and processes is by using the services provided by Windows NT. Using Windows NT security prevents unauthorized access and tampering by providing user access control, resource and service protection, and auditing.</P>

<P>In a typical two-tier application, users log on to the database directly. Each user has a different login with different rights. One advantage is that the database is protected from unauthorized access because users must supply a valid login to use the database. However, because each user must be authenticated on the database server, a high number of connections use the server's resources. This reduces the application's scalability.</P>

<P>In an n-tier application, business logic is separate from user interface and data services. Front-end applications request data services from components running in MTS. This model is advantageous because multiple MTS components can use the same database connection to reduce resources used on the server. In addition, multiple concurrent users connect to the database with the same package identity improving scalability.</P>

</BODY>
</HTML>



