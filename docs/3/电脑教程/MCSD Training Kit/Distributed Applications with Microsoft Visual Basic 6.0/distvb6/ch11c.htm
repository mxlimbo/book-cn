<HTML>
<HEAD>
<TITLE>Lesson 2: Testing and Debugging Middle-Tier Components</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11b.htm", "ch11d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="427"><H1>Lesson 2: Testing and Debugging Middle-Tier Components</H1></A>

<P>You can use Visual Basic to build an application for testing a COM DLL in an isolated environment before putting it into production. One option is to create a client application in a separate instance of Visual Basic. However, as your applications become more complex, you might want to work with multiple projects in the same session of the programming environment. For example, you might want to use one project to build a COM DLL and a second project for testing code before you add it to the application. In Visual Basic, this is known as creating a project group, which is a collection of projects. When you create a project group, you can use one project in the group to test another. By including your COM DLL project in a project group, you enable in-process debugging. In addition, the project group makes it easier to load your component project and test project.</P>

<P>The debugging capabilities in Visual Basic allow you to debug a Microsoft Transaction Server (MTS) component without it having to be installed in the MTS Explorer. When you start debugging, Visual Basic will automatically call into MTS to run your component in the MTS run-time. Depending on your debugging requirements, you might also want to install your component into the MTS Explorer. If you debug your existing MTS components, Visual Basic will activate your component inside of the MTS run-time environment.</P>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson you will be able to:</b>
<ul>

<p><li>Test and debug COM DLLs and COM EXEs.</li></p>

<p><li>Debug existing MTS components interactively in Visual Basic.</li></p>

<p><li>Use the Windows NT Event Viewer to identify MTS errors.</li></p>

</ul>
<b>Estimated lesson time: 35 minutes</b>
</blockquote></div>
</p>

<A NAME="428"><H2>Testing Code Components</H2></A>

<P>Visual Basic offers two scenarios for testing and debugging components: one for in-process components and one for out-of-process components. In the first scenario, you test a component within a single instance of Visual Basic. In the second scenario, you must run two copies of the development environment. </P>

<P>The first step in testing a COM DLL code component is to create a test project that will use the component. To test a COM DLL, you can add a Standard EXE project to the COM DLL's project group, and test the in-process component within a single instance of Visual Basic. You can then step directly from the test component code to the in-process component code. Conversely, to test a COM EXE you must run the component within one instance of Visual Basic, and run the test application in a second instance of Visual Basic. In this case, you cannot step directly from one component to the other, but you can use all of the other Visual Basic debugging tools. </P>

<A NAME="429"><H3>Handling Missing References</H3></A>

<P>Once you have set up a test project and set a reference to the component, you can debug the component just as you would any Visual Basic application. You can step between the client application and component and use the standard debugging tools to set break points, step through code, use watch expressions, and so on. However, in the course of debugging components you might see the following error message: &quot;Connection to type library or object library for remote process has been lost.&quot; This message indicates that the globally unique identifier (GUID) of the component's type library has changed, and the test project cannot refer to the type library. </P>

<p><li><b> To clear the missing reference</b></li></p>

<ol>
<p><li>Open the <B>Project References</B> dialog box.</li></p>

<p>In the References dialog box, the word MISSING will appear next to the name of the component.</p>

<p><li>Clear the check mark next to the name of the missing component, then click <B>OK</B>.</li></p>

<p>You can then reset the reference to the component.</p>
</ol>

<P>The solution to fixing missing references varies depending on the setting of the Version Compatibility option in your component project. Use the Project Compatibility setting when you're developing the first version of a component. Project. Compatibility preserves the type library identifier so that you're not continually setting references from your test projects to your component projects. Using Project Compatibility also makes it easier to switch between the component project and the compiled component when you're testing.</P>

<A NAME="430"><H2>Debugging MTS Components</H2></A>

<P>Visual Basic 6.0 supports debugging MTS components within the Visual Basic IDE. However, you must install Microsoft Windows NT Service Pack 4 in order to debug MTS components. By interactively debugging MTS components in Visual Basic, you can take advantage of the Visual Basic debugging environment for setting breakpoints and watches.</P>

<P>To build and debug an MTS component in Visual Basic, you must build your component into a DLL and set binary compatibility on the project. MTS might not detect these changes if you do not set binary compatibility and you add interfaces to, or remove them from, the component. The best way to set binary compatibility is to make a copy of the component DLL after it is compiled and set binary compatibility to the copy of the DLL. This ensures that when you recompile your component, Visual Basic will not make changes (such as modifying CLSIDs or IIDs) that MTS might not detect. Remember that you must debug the MTS component on the same computer that runs MTS.</P>

<p><li><b> To debug an MTS component</b></li></p>

<ol>
<p><li>Open the component project in Visual Basic.</li></p>

<p><li>Set the <B>MTSTransactionMode</B> property.</li></p>

<p>This value can be set to any value except NotAnMTSObject</p>

<p><li>From the <B>Project</B> menu, click <B>Properties</B>, then click the <B>Debugging</B> tab.</li></p>

<p><li>Select the <B>Start program</B> option and enter the start program in the available textbox, then click OK.</li></p>

<p>The start program is the client application that calls this component.</p>

<p><li>Press <B>F5</B> to begin debugging the component.</li></p>

<p>Visual Basic launches the client application and runs the component in debug mode.</p>
</ol>

<P>While in debug mode, you can place breakpoints in the component's code and set watches on variables. You can also debug components that are not inside an MTS package. For these components, Visual Basic automatically connnects to and interacts with MTS. Visual Basic requests a context object for the component. This allows you to test components before placing them in MTS. There are some important issues to remember when debugging MTS components in Visual Basic:</P>

<ul>
<p><li>Do not add the component to an MTS package while it is being debugged.</li></p>

<p><li>Multiple clients cannot access the component at the same time while the component is being debugged.</li></p>

<p><li>Do not export a package while one of the components is being debugged.</li></p>
</ul>

<A NAME="431"><H2>Handling Errors in MTS Components</H2></A>

<P>When errors occur both within and outside your MTS object, your MTS object must be capable of handling them, reporting them to MTS, and optionally, reporting them to the client. Three types of errors that can occur in an MTS application:</P>

<ul>
<p><li>Business rule errors</li></p>

<p><li>Internal errors</li></p>

<p><li>Windows exceptions</li></p>
</ul>

<A NAME="432"><H3>Business Rule Errors</H3></A>

<P>When an object performs an operation that violates business rules, the object causes a business rule error. An example would be when a client attempts to withdraw money from an empty account. You should write MTS objects that detect these types of errors. They enforce the business rules by checking client actions against business rules. For example, a Debit object should check an account balance before withdrawing money from it.</P>

<P>Business rules can also be enforced in the database itself. For example, if a client withdraws money from an empty account, it may be the database that catches this error through a stored procedure. The database can then raise the error to the Debit object. In either case, your application should do two things: abort the current transaction and report the error to the client. The user, upon seeing the error, can then act upon that information and attempt to correct the situation.</P>

<P>To abort the transaction in MTS, call SetAbort to rollback the transaction. To report the error back to the client, raise the error using the Err.Raise method with a custom error that you have defined. The client application must be able to interpret the error that is raised by the component to display the proper message to the user.</P>

<A NAME="433"><H3>Internal Errors</H3></A>

<P>Internal errors are unexpected errors that occur while objects are working on behalf of a client. For example, a file is missing, or network problems prevent connecting to a database. In Visual Basic, these errors are detected and raised by Visual Basic itself. You must write code to trap these errors and attempt to correct them, or abort the transaction. If you must abort the transaction, call SetAbort. Optionally, you might want to raise the error to the client using the Err.Raise method. This informs the client that an error occurred, and the client must display an appropriate error message. The client does not usually display the actual error message since it likely is not informative to the end user. For example, you wouldn't expect to see a &quot;File Not Found&quot; message on an Automated Teller Machine.</P>

<A NAME="434"><H3>Windows Exceptions</H3></A>

<P>Windows NT provides a system Event Viewer that tracks application, security, and system events. If for some reason your MTS object causes a Windows exception (a crash), MTS immediately terminates the process and an error is returned to the client, using a policy named <I>failfast</I>. When failfast occurs, the process hosting the object is terminated and the Windows NT event log is updated with information about the problem. For example, if you attempt to run the Sample Bank client (located in the Program Files\Mts\Vbbank.exe) installed with MTS without starting the Microsoft Distributed Transaction Coordinator (MS DTC), an automation error will be logged, as illustrated in Figure 11.4.</P>

<P>You can use the Windows NT Event Viewer to find errors logged by MTS. The error information includes what component caused the error, which can help diagnose the problem.</P>

<P>
<A HREF="javascript:fullSize('F11xx04x.htm')"> <img src="images/F11xx04.JPG" width=404 height=258 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 11.4 </B> <I>MTS error logged in the Windows NT Application Log  </I><!--/caption-->
</P>


<p><li><b> To find MTS events with the Windows NT Event Viewer</b></li></p>

<ol>
<p><li>On the <B>Log</B> menu, choose <B>Application</B>.</li></p>

<p><li>On the <B>View</B> menu, choose <B>Filter Events</B>.</li></p>

<p><li>Set the Source drop-down list to <B>Transaction Server</B> and click <B>OK</B>.</li></p>
</ol>

<P>Selecting an entry in your log and pressing Enter activates an Event Detail, which provides further information about the system event, as illustrated in Figure 11.5.</P>

<P>
<img src="images/F11xx05.GIF" width=392 height=422 border="0">
</P><P>
<!--caption--><b>Figure 11.5</b> <i>Analyzing the description of the event in the Event Detail dialog box</i><!--/caption-->
</P>


<A NAME="435"><H3>Error Handling in Multiple Objects</H3></A>

<P>Typically there are many objects created to process a client request. To report an error to the client when an object is several object calls deep from the original root object, write error-trapping code in each object using the On Error GoTo syntax. When an error occurs in an MTS component that cannot be corrected, call SetAbort and raise the same error to the caller using the Err.Raise method. Each calling object handles the error in the same way, calling SetAbort and raising the error to the caller. Eventually the root object returns the error to the client and the transaction is aborted. This is the simplest way to handle errors when multiple objects are working together.</P>

<A NAME="436"><H3>MTS Spy</H3></A>

<P>When problems occur, there are additional tools you can use to debug MTS applications, including the Microsoft Transaction Server Spy (MTS Spy). The MTS Spy attaches to MTS processes and captures information such as transaction events, thread events, resource events, object, method, and user events. This is a useful tool for diagnosing problems and monitoring components as they work.</P>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The MTS Spy source files are part of the MTS SDK, which is located in the Platform SDK. To download the SDK component that includes the MTS Spy source files and other MTS samples, go to http://msdn.microsoft.com/developer/sdk/. Once you have MTS Spy source files, you must build MTSSpy.exe.
</blockquote></div>
</p>

<A NAME="437"><H3>DTC Monitoring</H3></A>

<P>Because MTS uses the Microsoft Distributed Transaction Coordinator (DTC) to manage transactions, you can use the MTS Explorer to monitor DTC action. Specifically, you can view trace messages, the transaction list, and transaction statistics that are all generated by the DTC. All of these views are available in the MTS Explorer under the Computer folder, as illustrated in Figure 11.6.</P>

<P>
<A HREF="javascript:fullSize('F11xx06x.htm')"> <img src="images/F11xx06.JPG" width=404 height=240 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><b>Figure 11.6</b> <i>DTC views available in MTS Explorer</i><!--/caption-->
</P>


<P>The DTC related windows in MTS Explorer include:</P>

<ul>
<p><li>Trace Messages</li></p>

<p>Use the Trace Messages window to list current trace messages issued by the DTC. Tracing allows you to view the current status of various DTC activities, such as startup and shutdown, and to trace potential problems by viewing additional debugging information.</p>

<p><li>Transaction List</li></p>

<p>Use the Transaction List window to view the current transactions in which the computer participates. This also displays any transactions that have questionable status.</p>

<p><li>Transaction Statistics</li></p>

<p>Use the Transaction Statistics window to view information about all transactions that have occurred since the DTC was started. There is information about current transactions, how many transactions have aborted, how many have committed, and so on.</p>
</ul>

<A NAME="438"><H2>MTS Component Debugging Limitations</H2></A>

<P>An MTS component being debugged runs in the same process as the Visual Basic development environment, so a component failure will also cause Visual Basic to stop running. Also, the MTS run-time environment automatically shuts down the run-time process when it detects an inconsistent state internally. In these cases, MTS will display a dialog box explaining the situation, and an event will be recorded in the Windows NT system log. Check the Windows NT Event Viewer for possible explanations of the problem.</P>

<A NAME="439"><H3>Class_Initialize and Class_Terminate Events</H3></A>

<P>You should not put code in the Class_Initialize and Class_Terminate events of an MTS component that attempts to access the object or its corresponding context object. The Visual Basic run-time environment calls Class_Initialize before the object and its context are activated, so any operations that Class_Initialize attempts to perform on the object or its object context will fail. Similarly, the object and its context are deactivated before Class_Terminate is called, so operations that this method attempts on the object and its context will also fail. </P>

<P>You should not set a breakpoint in the Class_Terminate event of an MTS component. When the debugger reaches the breakpoint, it will attempt to activate the object, an attempt that will fail and cause Visual Basic to stop.</P>

<P>As an alternative, you can implement the ObjectControl interface in your class. Then, you can use the ObjectControl_Activate and ObjectControl_Deactivate event procedures instead of Initialize and Terminate. For more information about the ObjectControl interface, see Chapter 9, &quot;<A HREF="ch09a.htm#329">Using Microsoft Transaction Server</A>.&quot;</P>

<A NAME="440"><H3>Watching MTS Objects</H3></A>

<P>During debugging, do not watch object variables returned from the MTS run time, including return values from SafeRef, GetObjectContext, CreateInstance, and other functions that return objects wrapped by MTS. To simulate the run-time environment more effectively, the MTS run-time environment pauses operation each time that Visual Basic breaks in the debugger. Internally, Visual Basic makes method calls on objects that are being watched in the debugger. Because the MTS run-time is paused as you look at watch variables, the calls that Visual Basic makes to these objects might fail. </P>

<P>If you do add MTS-wrapped objects to the watch window or watch via other means, MTS may detect an inconsistent state and terminate the process.</P>

<A NAME="441"><H3>Component Changes Made During Debugging</H3></A>

<P>In Visual Basic, you can modify transactional attributes on an MTS component during debugging. Visual Basic does not register these changes in the MTS Explorer. If during debugging you make a source code change that requires Visual Basic to generate a new CLSID or ProgID or that changes the transactional attribute of any MTS class, you must use MTS Explorer to delete and reinstall the package containing the class. If you have set binary compatibility for the component, you will be warned that changes have occurred.</P>

<A NAME="442"><H2>Lesson Summary </H2></A>

<P>When you test COM DLLs, you run the test project and the DLL project within a single instance of Visual Basic. When you test a COM EXE, you must run two copies of the development environment-one for the COM EXE, and the other for the client test project. Visual Basic also provides debugging facilities to allow a user to debug an MTS component without it being installed in the MTS Explorer. Visual Basic will automatically call into MTS to run your component in the MTS run-time environment. If errors occur in MTS, you can use the Windows NT Event Viewer to find error information, including what component caused the error, to help diagnose the problem.</P>

<P>In addition to features that help you debug your MTS components with Visual Basic, there are also limitations. For example, you should not put code in the Class_Initialize and Class_Terminate events of an MTS component that attempts to access the object or its corresponding context object. The Visual Basic run-time environment calls Class_Initialize before the object and its context are activated, so any operations that Class_Initialize attempts to perform on the object or its object context will fail. Instead, you should use the ObjectControl interface events: ObjectControl_Activate and ObjectControl_Deactivate as you learned in Chapter 9, &quot;<A HREF="ch09a.htm#329">Using Microsoft Transaction Server</A>.&quot;</P>

</BODY>
</HTML>



