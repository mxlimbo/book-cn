<HTML>
<HEAD>
<TITLE>Project Plan Approved Milestone and Its Deliverables</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06d.htm", "ch06f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="310"><H1>Project Plan Approved Milestone and Its Deliverables</H1></A>

<p>The goal of the Planning Phase is to reach the Project Plan Approved
Milestone, which is the culmination of the team's work during this
phase and signifies agreement between the customer and the team on
critical project issues.</p>

<p>Four deliverables are required to meet the Project Plan Approved
Milestone. They are:</p>

<ul>
<p><li> A Functional Specification, which outlines the product being
developed and the needs it will meet.</li></p>

<p><li> A Master Project Plan, which shows how the team plans to execute
the project and includes any subsequent milestones and deliverables the
team intends to meet.</li></p>

<p><li> A Master Project Schedule, which outlines the time required for
each subsequent milestone and deliverable.</li></p>

<p><li> A revised Master Risk Assessment Document, which identifies
possible risks to the project and outlines how the team plans to deal
with each one.</li></p>
</ul>



<p>We also recommend including proof-of-concept systems to demonstrate
and validate the team's design choices.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> The goal of any deliverable is to serve as an
efficient communication tool. In this context, a deliverable does not
necessarily result in a paper artifact. A deliverable can take whatever
form is appropriate (a document, a diagram, an application, a screen
shot, e-mail, and so on) so long as it facilitates
communication.</blockquote></div>
</p>

<p>Every major milestone in the MSF Development Process Model signifies
an agreement between the customer, the project team, and any other key
project stakeholders. Reaching the Project Plan Approved Milestone
indicates agreement on the points listed in Table 6.7.</p>

<p><b>Table 6.7</b> <i>Agreement achieved by the Project Plan Approved Milestone</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Point of agreement</th>
<th>Documented in</th>
</tr>
<tr>
<td valign="top">What to build to meet the business needs</td>
<td valign="top">Functional Specification</td>
</tr>
<tr>
<td valign="top">What features have priority</td>
<td valign="top">Functional Specification</td>
</tr>
<tr>
<td valign="top">How long it will take to complete the project</td>
<td valign="top">Master Project Schedule</td>
</tr>
<tr>
<td valign="top">How to build the product and who will build it</td>
<td valign="top">Master Project Plan</td>
</tr>
<tr>
<td valign="top">Risks of building the product</td>
<td valign="top">Revised Master Risk Assessment Document</td>
</tr>
<tr>
<td valign="top">Milestones and deliverables</td>
<td valign="top">Master Project Plan</td>
</tr>
</table>
</p>

<p>The Project Plan Approved Milestone also provides an opportunity for
the customer and the project team to decide whether to proceed with the
project. After reviewing the deliverables from the Planning Phase, the
customer or the project team may decide that the product does not
provide enough benefits to justify its costs. This decision represents
a critical point in the project and is one of the reasons why the
Planning Phase is so significant. A well-executed Planning Phase
enables the team and the customer to proceed with confidence, knowing
that the necessary up-front work has been done to maximize the chances
for success.</p>

<A NAME="311"><H2>Interim Milestones</H2></A>

<p>To break the Planning Phase into manageable chunks, interim
milestones can be set throughout the phase. Because the plans and
schedules are developed by the various team roles based on the
Functional Specification, it makes sense to create a draft version of
the specification first. Team members can then create draft versions of
their own plans and schedules, which can be &quot;rolled up&quot; into
an overall master version. The team will probably revise and expand
these draft documents as it moves through both the design process and
the Planning Phase.</p>

<A NAME="312"><H2>Functional Specification</H2></A>

<p>The Functional Specification is the primary deliverable of the
Planning Phase. It is a detailed set of specifications for the product,
and serves as a contract between the customer and the project team. It
is not an exaggeration to say that all the work of the project team to
this point has been leading up to the Functional Specification, and all
subsequent work of the team will flow from and be based on it. Out of
the Functional Specification flow the remaining deliverables for the
Planning Phase: the Master Project Plan, the Master Project Schedule,
and the revised Master Risk Assessment Document.</p>

<p>Program Management is the owner of the Functional Specification and
is responsible for its ultimate completion. This is not to say that
Program Management must write the entire document. Indeed, the
Functional Specification should reflect the entire team's
understanding of the product, and should be based on information
contributed by various team members.</p>

<p>As the team creates the Functional Specification, certain pitfalls
should be avoided, including:</p>

<ul>
<p><li> Failing to provide enough detail.</li></p>

<p><li> Providing too much detail.</li></p>

<p><li> Creating an unrealistic design.</li></p>

<p><li> Freezing the Functional Specification too early.</li></p>

<p><li> Spending too much time updating the Functional
Specification.</li></p>

<p><li> Failing to communicate changes in the Functional Specification to
the customer, project team members, or other key project
stakeholders.</li></p>

<p><li> Failing to involve the whole team in design.</li></p>
</ul>



<p>Although most of these pitfalls seem obvious, many teams find them
easy to overlook. The team might want to post them in a prominent place
while it develops the project's Functional Specification.</p>

<A NAME="313"><H3>Functional Specification Contents</H3></A>

<p>The Functional Specification should contain all the items or
sections listed in Table 6.8. The project team may decide to include
additional items in the document to suit the demands of a particular
application development project.</p>

<p><b>Table 6.8</b> <i>Key components of the Functional Specification</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Item</th>
<th>Description</th>
</tr>
<tr>
<td valign="top"><b>Vision summary</b></td>
<td valign="top">What the team wants the product to be, justification for it, and key high-level constraints. Based on the vision document from the Envisioning Phase.</td>
</tr>
<tr>
<td valign="top"><b>Design goals</b></td>
<td valign="top">What the team wants to achieve with the product. Development will use these goals to make decisions on such issues as performance, reliability, timeliness, and possibly usability and accessi-		bility. These goals were originally developed during the Envisioning Phase.</td>
</tr>
<tr>
<td valign="top"><b>Requirements</b></td>
<td valign="top">What the customer, users, and stakeholders think the product must do. The requirements should be prioritized. Conflicting requirements should either be resolved or balanced in some way.</td>
</tr>
<tr>
<td valign="top"><b>Usage summary</b></td>
<td valign="top">When the product will be used and who will use it. This is a high-level aggregation of the usage scenarios that were defined during the design process.</td>
</tr>
<tr>
<td valign="top"><b>Features</b></td>
<td valign="top">What exactly the product does. A prioritized list of each of the product features, including such things as potential user interface, application navigation, and detailed functionality.</td>
</tr>
<tr>
<td valign="top"><b>Dependencies</b></td>
<td valign="top">What the product depends on. A description of external entities upon which the product might depend, including both high-level issues (such as interfacing to corporate systems) and low-level issues (such as a shared component).</td>
</tr>
<tr>
<td valign="top"><b>Schedule summary</b></td>
<td valign="top">What the schedule is. A summary of the Master Project Schedule, identifying key interim milestones, deliverables, and the product ship date.</td>
</tr>
<tr>
<td valign="top"><b>Risks</b></td>
<td valign="top">What the risks are. A list of risks that require external visibility or escalation. </td>
</tr>
<tr>
<td valign="top"><b>Appendixes</b></td>
<td valign="top">What remains. A collection of the design process output that the team used to develop the Functional Specification.</td>
</tr>
</table>
</p>

<A NAME="314"><H3>Functional Specification Review and Consensus</H3></A>

<p>An important step in developing the Functional Specification is its
review by the project team. The Functional Specification review:</p>

<ul>
<p><li> Allows everyone with a stake in the Functional Specification to
take part in creating it.</li></p>

<p><li> Involves a variety of people in making sure that requirements are
met.</li></p>

<p><li> Serves as a method of communicating what is going to be
built.</li></p>

<p><li> Provides a forum for negotiating and for achieving buy-in.</li></p>
</ul>



<p>The primary purpose of reviews of the Functional Specification is to
get the input of all the team roles. If all team roles participate in
these reviews, the specification will describe a much better product
that will meet the needs of each of the roles. Holding reviews is one
way to ensure that team members actually read the document.</p>

<p>Note the use of &quot;reviews&quot; (plural) in the preceding
paragraph. Because one of the interim deliverables noted earlier is the
draft Functional Specification, the Planning Phase should include at
least two reviews of the Functional Specification. Ideally, the
Functional Specification will be reviewed and updated regularly
throughout the Planning Phase.</p>

<p>The goal at the end of the Functional Specification process is <i>
consensus.</i> Everyone directly involved with the project&#8212;the
project team, the customer, and any other key stakeholders&#8212;should
concur that the Functional Specification accurately and adequately
documents their expectations of the product. Specifically, the customer
and each team role should agree with the items shown in Table 6.9.</p>

<p><b>Table 6.9</b> <i>Agreements required for the Functional Specification</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Role</th>
<th>Agrees that</th>
</tr>
<tr>
<td valign="top"><b>Customer</b></td>
<td valign="top">Solution meets business needs. The customer is willing to accept development schedules and resource estimates based on the scope specified in the Functional Specification.</td>
</tr>
<tr>
<td valign="top"><b>Product Management</b></td>
<td valign="top">Solution meets known requirements. Product Management believes the Functional Specification reflects a product that will meet known requirements when delivered.</td>
</tr>
<tr>
<td valign="top"><b>Program Management</b></td>
<td valign="top">Team responsibilities and schedules are realistic. Program Management believes that it is clear who is responsible for each specified function and that the committed schedules are 		realistic.</td>
</tr>
<tr>
<td valign="top"><b>Development</b></td>
<td valign="top">Solution is implementable. Development has sufficiently investigated development risks throughout the Planning Phase and believes the risk in meeting delivery dates is manageable. 		Development is willing to commit to schedules based on the state of the Functional Specification at this time.</td>
</tr>
<tr>
<td valign="top"><b>Testing</b></td>
<td valign="top">Solution is testable and can be stabilized. Testing has a defined strategy for test platforms, scripts, and data and commits to testing all aspects of the Functional Specification.</td>
</tr>
<tr>
<td valign="top"><b>User Education</b></td>
<td valign="top">Solution is usable, and user support needs are defined. User Education has a clear idea of who the users are and how the product will be used and supported. It commits to developing the user support systems outlined in the Functional Specification.</td>
</tr>
<tr>
<td valign="top"><b>Logistics Management</b></td>
<td valign="top">Solution is supportable and deployable. Logistics Management has a clear idea of all the organizational, application, and system interfaces and can commit to deploying the system.</td>
</tr>
<tr>
<td valign="top"><b>All roles</b></td>
<td valign="top">Everyone agrees to the ship date.</td>
</tr>
</table>
</p>

<A NAME="315"><H2>Master Project Plan</H2></A>

<p>The Master Project Plan tells how the product will be built by
gathering detailed plans from members of the project team. The team
then uses this collection of more detailed deliverables to synchronize
its work throughout the remainder of the project.</p>

<p>The purpose of a Master Project Plan is to:</p>

<ul>
<p><li> Consolidate feature team and role work plans.</li></p>

<p><li> Describe how feature teams and roles will execute their
tasks.</li></p>

<p><li> Synchronize the plans across the team.</li></p>
</ul>



<p>The overall owner of the Master Project Plan is Program Management,
because this role is the primary coordinator of planning and process
for the project. However, each role on the team is responsible for
developing and maintaining its own realistic project plan within the
overall plan.</p>

<p>The Master Project Plan should include the items listed in Table
6.10.</p>

<p><b>Table 6.10</b> <i>Components of the Master Project Plan</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Plan</th>
<th>Description</th>
</tr>
<tr>
<td valign="top"><b>Development</b></td>
<td valign="top">Tells how Development will build what抯 described in the Functional Specification. It describes such things as tools, methodologies, best practices, sequences of events, and test methods.</td>
</tr>
<tr>
<td valign="top"><b>Test</b></td>
<td valign="top">Includes a testing strategy, the specific areas to be tested, and the resources (hardware and people) Testing will require to do its job.</td>
</tr>
<tr>
<td valign="top"><b>Training</b></td>
<td valign="top">Includes a strategy and a plan for developing any necessary training 		materials.</td>
</tr>
<tr>
<td valign="top"><b>User support</b></td>
<td valign="top">Includes a strategy and details for developing anything that users will need for performance, such as wizards and user manuals.</td>
</tr>
<tr>
<td valign="top"><b>Communications</b></td>
<td valign="top">Includes a marketing strategy and promotional activities for users.</td>
</tr>
<tr>
<td valign="top"><b>Deployment</b></td>
<td valign="top">Includes a strategy and a detailed plan for preparing end users and operations personnel before and during deployment.</td>
</tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> The Master Project Plan is not typically used
for direct project management, because it is too cumbersome and at too
high a level. Instead, each team role should manage its
responsibilities according to its own project plans and merely
synchronize any necessary changes with the Master Project
Plan.</blockquote></div>
</p>

<A NAME="316"><H2>Master Project Schedule</H2></A>

<p>We are discussing the Master Project Schedule as the <i>third</i>
deliverable because it's important for both the customer and the
project team to understand that the schedule comes <i>after</i> the
Functional Specification and the Master Project Plan. The team
can't prepare the schedule until it knows what the feature set is
and how the team plans to deliver those features.</p>

<p>This is not to say that these three deliverables fall like dominoes.
This process can be, and often should be, iterative. The team prepares
the feature set, then the project plan, and finally the schedule, and
then realizes that the current feature set will push the ship date too
far into the future. So the team revises the Functional Specification,
revises the Master Project Plan, and revises the Master Project
Schedule, iterating through these steps until all three are
acceptable.</p>

<p>The point to remember is that while it is legitimate for the team to
include the ship date in its planning, it's not good management
practice to prepare the schedule <i>first</i> and then try to fit the
Master Project Plan and Functional Specification into it. The schedule
must flow out of the other two deliverables. The original ship date
identified in the Envisioning Phase acts as a design guideline.</p>

<p>The owner of the Master Project Schedule is Program Management, but
Program Management does not prepare the schedule as much as consolidate
the more detailed schedules prepared by each of the other team roles.
Program Management uses this aggregated version of those lower-level
schedules as an overall project schedule.</p>

<p>Of all the schedules in the Master Project Schedule, the development
schedule is the most crucial. All the other schedules will be based on
it.</p>

<p>The Master Project Schedule includes:</p>

<ul>
<p><li> Development schedule.</li></p>

<p><li> Product ship dates, both internal and external.</li></p>

<p><li> Test schedule.</li></p>

<p><li> Training schedule.</li></p>

<p><li> User support schedule.</li></p>

<p><li> Communications schedule.</li></p>

<p><li> Deployment schedule.</li></p>
</ul>



<A NAME="317"><H3>Principles of Scheduling</H3></A>

<p>Although covered throughout the book, we have summarized these
MSF-based principles for project scheduling here for easy reference. As
the team develops plans and schedules, it should keep certain
principles of scheduling in mind. These four principles from the MSF
Risk Management Model will help build schedules that are realistic and
attainable.</p>

<p><b>Bottom-Up Scheduling</b></p>

<p>The people who will do the work should also plan the work. Their
task-level 
estimates should be rolled up into the Master Project Schedule. This
principle not only increases the accuracy of the estimate, but also
fosters team acceptance of the schedule.</p>

<p><b>Fixed Ship-Date Mindset</b></p>

<p>Fixing the ship date eliminates easy excuses and limits tradeoff
decisions to 
resources and features. It's a way of heightening the importance of
shipping on time. It also drives the engineering decisions about what
will be built and to what extent. Note that a fixed ship-date mindset
means <i>realistically</i> setting a ship date, not <i>arbitrarily</i>
setting one. Achieving a fixed ship date requires using the other three
scheduling principles.</p>

<p><b>Risk-Driven Scheduling</b></p>

<p>Risk-driven scheduling essentially means doing the most difficult
and most risk-laden tasks first. There are several significant
advantages to this approach:</p>

<ul>
<p><li> The greatest risks tend to be those with the highest level of
unknowns, and addressing them first gives the team more time to work on
mitigation where mitigation is feasible.</li></p>

<p><li> If the team attacks a show-stopping risk early in the project and
realizes there is no mitigation, the project can be canceled much
earlier, minimizing wasted resources.</li></p>

<p><li> Working through the process of understanding what's important
to the customer and explaining what is most risky to the project helps
to manage customer expectations.</li></p>

<p><li> Mitigating show-stopping risks (those severe enough to end the
project) often means developing proof-of-concept systems during the
planning process to prove or disprove the probability or impact of
those risks.</li></p>
</ul>

<p>Obviously, for the team to practice risk-driven scheduling, it must
be prioritizing risks through some sort of risk management.</p>

<p><b>Scheduling for an Uncertain Future</b></p>

<p>Scheduling something uncertain seems like a contradiction in terms.
The point of this principle is that, because the future <i>is</i>
uncertain, the team must create schedules that are designed to adjust
to the unexpected. The three methods illustrated in Figure 6.13 can
help create such schedules.</p>

<P><A HREF="javascript:fullSize('f06ar15x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f06ar15.jpg" WIDTH=404 HEIGHT=140 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 6.13</b> <i> Methods of scheduling for an uncertain future</i><!-- /caption --></P>

<ul>
<p><li> <b>Add buffer time</b> Program Management adds buffer time to the
end of the schedule to accommodate project slippage. Although buffer
time is often controversial and disliked by management, it is an
essential part of an effective schedule. A project without buffer time
is a project set up for failure. The amount of buffer time that Program
Management adds to a schedule directly depends on how much confidence
Program Management has in team estimates. Bottom-up scheduling
determines the internal ship date. Adding buffer time to that date
determines the externally communicated ship date. However, buffer time
should be owned and managed at the Program Management level, not at the
individual resource level, because resources must stay focused on their
estimated dates.</li></p>

<p><li> <b>Use interim development milestones</b> These development
milestones are alpha and beta releases within a single project.
Breaking projects into smaller pieces provides more indicators that
tell the team earlier and more often how the project is progressing.
The product will also be more stable, and the schedule will be more
predictable. Using practice releases with their own Stabilizing Phases
allows the team to practice shipping and also indicates the health of
the project.</li></p>

<p><li> <b>Use discrete tasks</b> The team can keep the project on track
by using visible deliverables over short intervals. It is much easier
to define and manage short tasks. Also, the shorter the duration of the
task, the smaller the margin of error. For example, it would be
difficult for a one-week task to slip by six weeks. The team should
break down the product functions into associated tasks that are clearly
defined, with a beginning and ending point, a single output, and a
single owner. Task size should be limited to efforts that require, at
most, one to two weeks. Then, each task should be tracked as the
project progresses, and schedules should be adjusted accordingly.</li></p>
</ul>



<A NAME="318"><H2>Revised Master Risk Assessment Document</H2></A>

<p>By the end of the Planning Phase, the team should have a much
clearer picture of the risks associated with the project, and also of
their relative impact and priority. This revision of the Master Risk
Assessment Document should reflect increased insight into these
risks.</p>

<p>Again, Program Management is the owner of this document and is
responsible for ensuring that the revision is complete and accurate.
The revised Master Risk Assessment Document represents a collection of
more detailed risk assessments from the various team members. The team
can use this aggregated version of those lower-level assessments to get
an overall view of risks.</p>

<p>This document helps synchronize risk assessments across the team. It
also drives the team's decisions about risks and aids in
prioritization of risk-management effort. Risk management is still
handled by the individual team roles responsible for the given risk,
because it is difficult to manage risks from the level of the Master
Risk Assessment Document.</p>

</BODY>
</HTML>


