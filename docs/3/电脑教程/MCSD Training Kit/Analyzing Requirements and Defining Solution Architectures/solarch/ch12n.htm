<HTML>
<HEAD>
<TITLE>Testing Report</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12m.htm", "ch12o.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="624"><H1>Testing Report</H1></A>

<p>He looked at his notes. &quot;I saved Testing for last, because I
wanted to take some time to share with everyone else what we are doing
here. Marta, why don't you outline what we are doing about testing
RMS?&quot;</p>

<p>Marta pulled some notes from her bag. &quot;As most of you know,
writing software is not something I have done a great deal of in the
past, she said. &quot;So, it was with some trepidation that I agreed to
accept the Testing role on this team.&quot;</p>

<p>&quot;We remember,&quot; Tim said dryly.</p>

<p>Marta continued, &quot;Dan has given me some excellent coaching, and
has also helped coordinate the relationship between the Testing role
and the Development role. Additionally, Bill has been a big help, even
though I'm not sure he has always agreed with my being on the
team.&quot;</p>

<p>&quot;Nothing personal, Marta,&quot; said Bill quickly.
&quot;You're a competent and intelligent worker, best as I can
tell. I just think usability testing should be the responsibility of
the development folks. But, since Dan sees it differently, I figured we
might as well make the most of it.&quot;</p>

<p>&quot;So what did the old curmudgeon do to help you out,
Marta?&quot; asked Tim with a grin.</p>

<p>&quot;He and Dan came up with the idea of assigning a programmer to
help me with the Testing role. This person is not one of the people
working on building RMS, but is another member of the staff who acts as
a technical assistant to me. I draw up the plans and am responsible for
tracking the results and reporting to the team, while
Mike&#8212;that's his name&#8212;helps with the actual testing. Or at
least, the part of the testing that falls to us.&quot;</p>

<p>&quot;I thought all testing was done by you,&quot; said Jane.</p>

<p>&quot;Actually, no,&quot; said Marta. She turned to Dan.
&quot;I've prepared some transparencies that explain more of the
process, if you don't mind.&quot;</p>

<p>&quot;Not at all,&quot; said Dan. &quot;It's all
yours.&quot;</p>

<p>Marta described the difference between usage testing and coverage
testing, and the subtypes of each. She explained that unit testing was
the developers' responsibility, and that the developers were also
doing functional tests. &quot;Once they complete a feature set, though,
they give it to us to validate that the function works,&quot; she
said.</p>

<p>&quot;How can they do that if not all the objects are
complete?&quot; asked Tim.</p>

<p>&quot;They use stub procedures in the objects, which simply return
without causing an error,&quot; Marta replied. &quot;Sometimes they put
in a message box, just so we know the stub actually got called.
It's not as critical in RMS as it might be in a much larger
project, because we'll be retesting everything when we do usage
testing, and if we find anything then, the application is small enough
that it won't be difficult to track down the offending object or
component.&quot;</p>

<p>Tim looked at Bill. &quot;Marta's got 'Build verification
tests' listed, but I don't remember you or the others talking
about doing daily builds. Are you?&quot;</p>

<p>&quot;Nope,&quot; said Bill, leaning back in his chair.
&quot;That's one of those ivory-tower things you read about, but
very few development teams actually do. We tried it earlier this year
on another project, and it became obvious very quickly that you have to
adjust the frequency of builds to fit your project. For RMS, we're
doing a build about every three days.&quot;</p>

<p>&quot;And again,&quot; said Marta, &quot;because the project is so
small, we're not doing regression testing, either.&quot;</p>

<p>&quot;Then what, exactly, is it that you and Mike are working
on?&quot; asked Jane. &quot;I mean, it sounds like the developers are
doing most of the work right now.&quot;</p>

<p>&quot;They are,&quot; said Marta, smiling. &quot;That's the
approach we all decided on. If you remember, the Testing role
doesn't really come to the forefront until the Stabilizing Phase.
For now, we are preparing our test scripts as best we can, as well as
running everything the developers give us through our test harness so
we can get a head start on stress and performance testing. Mike and I
are also working on our bug database.&quot;</p>

<p>Bill sat up straight. &quot;Bug database? You hadn't mentioned
that to me. What's that about?&quot;</p>

<p>&quot;Wait a minute, Bill, before we talk about bugs,&quot; said
Dan. &quot;I want to hear more about the test harness. Marta mentioned
it in passing one day, but I want to hear the details. Then we'll
learn about all the bugs in RMS.&quot;</p>

<p>&quot;The test harness is pretty cool, I think,&quot; said Marta
with a smile. &quot;Mike wrote it over a weekend, and I was impressed,
but he said it was not much different from others that were available.
Basically, it is an automated component tester. We simply enter the
name of the DLL, the method we want, any parameters it is expecting,
and how many times we want it to be called in a row, and the test
harness calls the component that many times and logs the results to a
file. It also keeps track of things like memory usage, disk activity,
and some other stuff, and writes those to the file after whatever
number of repetitions we set. As long as we know the interface
contract, we can test any object we want, automatically. Mike wants to
expand it to test entire feature sets, but he hasn't had time yet.
We've been testing all the components as the developers give them
to us.&quot;</p>

<p>&quot;Any problems yet?&quot; asked Marilou.</p>

<p>&quot;No, Bill's people seems to write pretty error-free
code,&quot; said Marta.</p>

<p>&quot;That's exactly right, and that's why you don't
need any bug-tracking database!&quot; said Bill heatedly. Glaring at
Dan, he continued, &quot;I think it's an insult to Sam, Beth, and
the others working on RMS for Marta and Mike to even mention tracking
bugs, much less to build a database to track them. Why, she herself
said that she's getting error-free code!&quot;</p>

<p>&quot;Yes, but it's possible for code to be error-free and still
contain bugs,&quot; said Dan.</p>

<p>Bill looked at the others as if to see whether they agreed that
their leader had gone crazy. Then he turned back to Dan.
&quot;That's impossible! How can you have bugs in error-free
code?&quot;</p>

<p>&quot;What's the definition of a bug?&quot; Dan asked Marta.</p>

<p>&quot;Any issue arising from the use of the product,&quot; Marta
replied without hesitation.</p>

<p>&quot;Is it necessarily a defect?&quot;</p>

<p>&quot;No, although it might be.&quot;</p>

<p>&quot;What should be done about all such issues arising from the use
of the product?&quot;</p>

<p>&quot;They should be reviewed and addressed prior to the release of
the product.&quot;</p>

<p>&quot;What are some examples of bugs that are not defects?&quot;</p>

<p>Marta ticked the statements on her fingers as she spoke.
&quot;Enhancement requests; suggestions that are out of scope for the
release; issues that arise over user preferences; and unavoidable
design consequences.&quot;</p>

<p>&quot;So you see, Bill,&quot; said Dan as he moved to the
whiteboard, &quot;you can write perfect, but not bug-free, code. It is
the job of the Testing role, along with you and the rest of the RMS
team, to deal with all issues in one way or another.&quot; Dan drew a
circle on the board. &quot;Here's the bug-tracking process.
It's a lot like the risk-tracking process. It begins with the
tester&#8212;Marta, Mike, one of us, one of the beta
testers&#8212;reporting an issue. The issue gets entered into the
database. As the development lead, Bill, you give it a priority rating
and severity rating. You then assign the bug to a developer to resolve.
Once the developer thinks the bug is resolved, he sends it back to the
tester to see if it truly is resolved. If it is, the bug is retired. If
it isn't, the tester reports it again and starts the process
over.&quot; Dan turned to Marta. &quot;Do you have the transparency
that shows the priority and severity classifications?&quot; She nodded
and handed it to Dan, who put it on the overhead projector.</p>

<p>&quot;As you can see, we classify all issues according to these
ratings.&quot; He wrote the words <i>quality bar</i> on the board.
&quot;The quality bar is what the Testing role deems an acceptable
quality for us to release the product. What is our quality bar for RMS,
Marta?&quot;</p>

<p>&quot;No Severity 1 or 2 bugs and no Priority 1 or 2 bugs,&quot;
said Marta without hesitation.</p>

<p>&quot;So, as you can see,&quot; said Dan as he sat back down,
&quot;ultimately the Testing role determines whether or not we ship on
time, or even at all. If the Testing folks say we haven't hit the
mark, then we go back and do it again. It's a big responsibility,
but it is the key to a quality product. That work begins during
Developing, but finishes during Stabilizing. Any questions?&quot;</p>

<p>&quot;Just one,&quot; said Bill in a low tone. &quot;What if we
disagree with what Testing says? What if my people feel like
they've hit the mark?&quot;</p>

<p>&quot;Then we bring it to the project team and we work it out
here,&quot; said Dan evenly. &quot;And remember, Bill, Testing's
goal is the same as yours, and mine, and all of ours&#8212;to produce
the very best application we can given the constraints we set in the
beginning.&quot;</p>

</BODY>
</HTML>


