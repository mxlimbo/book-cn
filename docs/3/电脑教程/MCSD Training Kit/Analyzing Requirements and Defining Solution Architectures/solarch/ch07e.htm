<HTML>
<HEAD>
<TITLE>Connecting the User and Business Service Layers</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="375"><H1>Connecting the User and Business Service Layers</H1></A>

<p>In multi-layer application design, each layer must be able to
communicate with its neighbors. Thus, the user service layer and
business service layer must be able to pass control to each other, as
well as pass information and data. Objects can be used within a user
service layer as well as within the business service layer.
Additionally, many mistakenly think the UI and user service layer are
the only portions of an application that can affect the desktop
computer. Often business objects are distributed to the desktop client
computers along with the user service layer.</p>

<A NAME="376"><H2>Making Business Objects Available to Client Computers</H2></A>

<p>Components must be properly configured for object creation to work.
To start with, developers must either provide a CLSID and the remote
server name in a call to <b>CoCreateInstanceEx</b>  to create the object
or install some information in the client computer's registry. To
access components using Visual Basic and most scripting languages, this
information would include the object's <b>ProgID</b>, <b>CLSID</b>,
and <b>RemoteServerName</b>  registry entries.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> For business objects running in MTS
environments, the easiest way to provide this information is to run the
client install program on each client computer. (For additional
information on MTS see <A HREF="ch08a.htm">Chapter 8</A>.) The client install program also
takes care of installing and registering any type libraries or
proxy/stub DLLs required to use vtable-binding or late-binding to
access components during development.</blockquote></div>
</p>

<p>The &lt;OBJECT&gt; tag is used on a Web page to automatically
download the client install program, using the Internet Component
Download service. The &lt;OBJECT&gt; tag CODEBASE parameter points the
browser to the location of the program. To automatically install
required remote component registry entries from a Web page using
Internet Component Download, the &lt;OBJECT&gt; tag must be used to
create the object; script code cannot download and install component
information.</p>

<p>In addition to the general registration process for Internet
components, code safety issues must be considered when using ActiveX
controls or business objects from Web pages. Internet Component
Download install programs should be digitally signed. Depending on the
users' particular browser settings, a browser may prevent unsigned
install programs from being downloaded. The digital signature lets
browsers determine the install program's origin, and detect whether
or not the install program has been violated.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> The Platform SDK contains information about, as
well as tools for, creating signed packages for download. Some
development tools, such as Visual 
Basic, also provide packaging and deployment tools used for signing
packages.</blockquote></div>
</p>

<p>ActiveX Components should be marked as:</p>

<ul>
<p><li> <b>Safe for scripting</b>  Users are notified that client-side
scripts won't use the application's components to harm user
computers or obtain unauthorized information.</li></p>

<p><li> <b>Safe for initializing</b>  Users are notified that the Web
page's controls will not harm the user's computer.</li></p>
</ul>



<p>The easiest way to perform this action for both scripting and
initializing is to add the following subkeys to the registry under a
component's CLSID:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
Implemented Categories\{7DD95801-9882-11CF-9FA9-00AA006C42C4}
Implemented Categories\{7DD95802-9882-11CF-9FA9-00AA006C42C4}
</pre>
</td></tr></table>
</p> 

<p>If components aren't marked as safe for scripting and
initializing, a browser can't create objects or make method calls
to objects, depending on individual browser settings.</p>

<A NAME="377"><H2>Accessing Business Objects in Native Applications</H2></A>

<p>For native Win32 applications, the mechanics of accessing remote
business objects with DCOM really aren't much different from those
for accessing any other COM component. (We discuss DCOM is further
detail in <A HREF="ch08a.htm">Chapter 8</A>.) Developers simply call <b>CoCreateInstance</b>,
<b>CoCreateInstanceEx</b>, or the equivalent object creation mechanism
provided by the development language being used. After a DCOM-based
object is created, method calls can be made as usual.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> The object context's <b>CreateInstance</b> method should be used only to create MTS-hosted objects from within the MTS environment. <b>CreateInstance</b> should not be used to create remote business objects from applications running on users'
computers. Such applications are base clients, running outside the MTS
environment.</blockquote></div>
</p>

<p>Native client applications should acquire and hold interface
pointers to MTS-based business objects rather than recreate objects
each time they are needed, largely to avoid the expense of locating
remote servers and establishing communication sessions between
computers. Typically, an application creates objects during its
initialization, or when a specific portion of the application is first
accessed.</p>

<p>Interface pointers returned from object creation should be stored in
application variables for future use. These pointers don't need to
be released until the application in which they are stored shuts down,
unless the application receives a communication error during a method
call. Such a communication error could indicate that the remote server
computer is unavailable. Releasing and reacquiring the interface
pointers allows the application to take advantage of MTS fail-over
support on the server.</p>

<A NAME="378"><H2>Accessing Business Objects in Web-Based Applications</H2></A>

<p>COM objects can be created on a Web page using:</p>

<ul>
<p><li> <b>The HTML &lt;OBJECT&gt; tag</b> Objects are created during page
rendering. This technique is normally used for visual objects, such as
ActiveX controls.</li></p>

<p><li> <b>Script code</b> Objects are created only when the script is
executed.</li></p>
</ul>



<p>These two methods of creating COM objects work for both client-side
and remote COM objects. Client-side script code is used to call methods
on objects, regardless of how the objects were created. The script code
provides access to the methods and properties exposed by the
objects' <b>IDispatch</b>  interfaces.</p>

<p>When using the &lt;OBJECT&gt; tag, the business object's ClassID
can be specified and given an ID so that the object can be accessed
from client-side script code. The following &lt;OBJECT&gt; tag can be
used to create an instance of a component:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
&lt;OBJECT ID=&quot;objCustomer&quot;
   CLASSID=&quot;clsid:6FED8869-EAC5-11D1-80F4-00C04FD61196&quot;&gt;
&lt;/OBJECT&gt;
</pre>
</td></tr></table>
</p> 

<p>The exact script code used to create objects depends on the
scripting language used. In VBScript, the <b>CreateObject</b>  function
is called, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Dim objCustomer
   Set objCustomer = CreateObject(&quot;bus_CustomerC.Customer&quot;)
Do other program logic.
   Set objCustomer = Nothing
&lt;/SCRIPT&gt;
</pre>
</td></tr></table>
</p> 

<p>In JScript, the <b>ActiveXObject</b>  object is used, as shown
here:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
   var objCustomer;
   objCustomer = new ActiveXObject(&quot;bus_CustomerC.Customer&quot;);
Do other program logic.
   objCustomer = &quot;&quot;;
&lt;/SCRIPT&gt;
</pre>
</td></tr></table>
</p> 

<p>After the object is created, the object methods can be accessed
through script code, using the object ID as the variable's name, as
shown in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Dim rsCustomer
   Set rsCustomer = objCustomer.GetByEmail(&quot;someone@microsoft.com&quot;)
&lt;/SCRIPT&gt;
</pre>
</td></tr></table>
</p> 

<A NAME="379"><H2>Accessing Remote Objects Using RDS</H2></A>

<p>Another option for accessing remote objects from client computers is
to use RDS to call objects via DCOM or HTTP. RDS can be helpful for
accessing remote objects from Web pages. However, like most scripting
languages used in Web page development, it can access methods only on
an <b>IDispatch</b>  interface exposed by a set of components.</p>

<p>To use business objects with RDS over DCOM, they must be marked as
safe for scripting and initializing, as described earlier. The client
computer needs only a registry entry mapping the component's <b>
ProgID</b>  to its CLSID.</p>

<p>To use business objects with RDS over HTTP, their <b>ProgIDs</b> 
must be added to the <b>ADCLaunch</b>  registry key on the server
computer, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\Parameters\ADCLaunch
</pre>
</td></tr></table>
</p> 

<p>The <b>RDS.Dataspace</b>  object is used to invoke business objects.
The following code fragment shows how a Web page could create a remote
object and call its <b>GetByEmail</b>  method using RDS over HTTP:</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Dim rdsds, objCustomer, rsCustomer
   Set rdsds = CreateObject(&quot;RDS.Dataspace&quot;)
   Set objCustomer = rdsds.CreateObject(&quot;bus_CustomerC.Customer&quot;, _
                                        &quot;http://webservername&quot;)
   Set rsCustomer = objCustomer.GetByEmail(&quot;someone@microsoft.com&quot;)
&lt;/SCRIPT&gt;
</pre>
</td></tr></table>
</p> 

<p>The <b>DataSpace CreateObject</b>  method generates a client-side
proxy that calls methods on an object using <b>IDispatch</b>  over DCOM
or HTTP. One parameter specifies the <b>ProgID</b>  of the object to be
created. Another parameter specifies the object's server name. This
parameter controls whether the object is called over DCOM or HTTP. If
the server name is specified using the form \\machineName, DCOM is
used. However, if the server name is specified using the form 
http://machineName, HTTP is used. HTTP over the Secure Sockets Layer
(HTTPS) is also supported.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> For more information about using RDS, including
sample code, refer to the Microsoft Data Access SDK documentation
included in the Platform SDK. The white paper <i>Remote Data Service in
MDAC 2.0</i> by Kamaljit Bath is another 
excellent source of information; this white paper is available from the
MSDN Web site at <a href="http://msdn.microsoft.com" target="_window2">http://msdn.microsoft.com</a>.</blockquote></div>
</p>

<A NAME="380"><H3>Using Data Binding</H3></A>

<p>RDS can also be used to return disconnected ADO <b>Recordset</b> 
objects to client computers. In Internet Explorer 4.0 and later
versions, DHTML data binding can be used to connect these <b>
Recordset</b>  objects to HTML elements on Web pages in development.
Using data binding and client-side scripting allows users to browse
through the <b>Recordset</b>  objects without reconnecting directly to
the to the Web server to retrieve additional records.</p>

<p>The data-binding support in Internet Explorer 4.x and later versions
is not specific to any particular type of data. Internet Explorer will
bind to any type of data for which there is a data source object (DSO).
The DSO is responsible for transporting data between client and server
computers, manipulating the data, and providing an object model for
script access. The DHTML attributes DATASRC, DATAFLD, DATAFORMATAS, and
DATAPAGESIZE are used to determine data origin, data fields bound to
particular HTML elements, treatment of data as text or otherwise, and
the number of records to be displayed on a page.</p>

<p>The <b>RDS.DataControl</b>  object is a DSO for OLE DB <b>Rowset</b> 
objects and ADO <b>Recordset</b>  objects. The <b>RDS.DataControl</b> 
object supports both two-tier and three-tier models of data access. In
the two-tier model, data source information is embedded in the Web
page, and each client gets its own connection to this data source. In
the three-tier model, business objects are used to return a
disconnected <b>Recordset</b>  to the client, which is in turn attached
to a <b>DataControl</b>  object.</p>

<p>Visual Studio 6.0 supports data binding to ADO <b>Recordset</b> 
objects. Developers can use the ADO <b>Data Control</b>  object to
establish a connection between data-bound controls and a <b>
Recordset</b>  object. First, an ADO <b>Data Control</b>  object is
created. This object's <b>Recordset</b>  property is then set to a
<b>Recordset</b>  object returned from business objects. The <b>
DataSource</b>  property of each data-bound control on a form or in a
dialog box is set to the ADO <b>Data Control</b>  object. The <b>
Recordset</b>  object can also be attached directly to each data-bound
control using the <b>DataSource</b>  property.</p>

</BODY>
</HTML>


