<HTML>
<HEAD>
<TITLE>Packaging with MTS</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08e.htm", "ch08g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="411"><H1>Packaging with MTS</H1></A>

<p><i>Packages</i> are a set of COM classes that perform related
application functions. They are also the primary administrative units
in MTS that define process and security boundaries.</p>

<p>Two types of packages are available in MTS: <i>library packages</i>
and <i>server</i> <i>packages</i>. A library package runs in the
process of the client that uses its COM classes. A server package runs
as a separate MTS-managed process. Each COM class can be installed in
only one package on a given computer. A package can be installed on
multiple computers to distribute the workload for large numbers of
clients.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr> It is possible for a component to include
multiple COM classes installed in different packages. In general, this
practice should be avoided. COM classes in a single component usually
have interdependencies that may work only if the classes' objects
run in the same process. In addition, splitting classes across packages
complicates administration and maintenance.</blockquote></div>
</p>

<p>By default, the MTS administrative tools install all COM classes in
a component into a single MTS package. The MTS administrative tools
also use the term &quot;component&quot; synonymously with COM's
definition of &quot;COM class.&quot; For consistency with the MTS
administrative tools (UI) and documentation, we'll assume that,
when discussing packaging, all COM classes in a component are installed
in the same package. Furthermore, we'll refer to performing
administrative tasks on components rather than on COM classes.</p>

<p>In physical terms, a package is a collection of DLLs and MTS catalog
entries. The MTS catalog stores configuration information for packages,
components, interfaces, roles, and so on. This information supplements
the registry entries defined by COM. In MTS 2.0, the catalog is
implemented using the Windows system registry. When developers create a
package and add components to it using MTS administrative tools, they
are adding information to the MTS catalog.</p>

<p>To facilitate moving packages from one computer to another, MTS
allows all information about a package to be saved to a file, as shown
in Figure 8.3. Such package files, which have the extension .pak, are
text files containing all catalog entries for a package and its roles,
components, and interfaces. Package files do not contain the
components' DLLs, but they do contain references to all DLLs so
that MTS administrative tools can locate and register the DLLs
appropriately.</p>

<p>To enable MTS to use packaged components, each component must be
implemented as a DLL. The component must implement the <b>
DllRegisterServer</b>  function, registering the component's CLSIDs,
ProgIDs, interfaces, type library, and any other registry entries the
component requires for proper operation. MTS will call this function to
register the component when the package is installed on a server
computer. A type library must describe all COM classes and interfaces
in the component. Most programming tools that support COM produce
components meeting these requirements.</p>

<P><A HREF="javascript:fullSize('f08ar03x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f08ar03.jpg" WIDTH=404 HEIGHT=297 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 8.3</b> <i> Exported MTS package file</i><!-- /caption --></P>

</BODY>
</HTML>


