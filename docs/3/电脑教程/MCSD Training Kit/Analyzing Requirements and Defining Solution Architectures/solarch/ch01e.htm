<HTML>
<HEAD>
<TITLE>Creating an Enterprise Architecture</title>
<link rel="STYLESHEET" type="text/css" href="library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01d.htm", "ch01f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="56"><H1>Creating an Enterprise Architecture</H1></A>

<p>We have examined the four perspectives of the MSF Enterprise
Architecture Model (Business, Application, Information, and
Technology), and we have looked at some of the difficulties
organizations encounter when using an enterprise architecture process.
We have looked at the four enterprise architecture objectives (to be
integrated, iterative, actionable, and prioritized), and we have
pointed out the artificial walls that business and IT people often
construct around themselves. At this point, these questions often
arise: &quot;How do we accomplish these goals? What steps do we need to
take, and in what order?&quot; As one exasperated IT manager exclaimed,
&quot;Just tell me where to download the Project file and Excel
templates so I can get started!&quot;</p>

<p>Unfortunately, it's not that simple. The enterprise architecture
process is more than just a list of steps for achieving a goal. Rather,
enterprise architecture is built on certain <i>key principles</i> that
allow organizations to tailor the architecture to their unique business
needs. Keeping the following principles in mind ensures that an
enterprise architecture design will be both valued and valuable.</p>

<A NAME="57"><H2>The Myth of an Enterprise-Wide, Project-Deep Architecture</H2></A>

<p>It is not reasonable to expect to put in one massive, collective
effort to produce an enterprise architecture that:</p>

<ul>
<p><li> Specifies all levels of detail, from business processes through
technology selections and application functionality.</li></p>

<p><li> Covers all individual projects (project-deep).</li></p>

<p><li> Spans the entire enterprise (enterprise-wide).</li></p>
</ul>



<p>Despite how unreasonable these expectations are, many approaches to
enterprise architecture attempt the impossible. They use a horde of
architects and consultants who closet themselves away for years at a
time and then deliver &quot;the answer.&quot; The problem with this
approach is that by the time the answer is delivered, it is out of
date. In attempting to define all things for all people, this approach
severely compromises the value of any decisions.</p>

<p>We recommend recognizing these limitations when going into the
process and taking appropriate measures to build the enterprise
architecture in <i>successive 
iterations</i>. This approach allows the architecture to provide
business value quickly, allows the gathering of feedback from actual
use, and allows adjustments to be made through subsequent
iterations.</p>

<A NAME="58"><H2>Milestone-Driven Process</H2></A>

<p>The MSF Enterprise Architecture Model promotes an iterative,
milestone-driven process based upon a series of versioned releases to
advance the organization to the desired future state. As shown in
Figure 1.3, the organization can pass through different stages, which
we will discuss in more detail later, as it adopts an enterprise
architecture for development projects.</p>

<P><A HREF="javascript:fullSize('f01ar03x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f01ar03.jpg" WIDTH=404 HEIGHT=264 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 1.3</b> <i> Stages of enterprise architecture adoption</i><!-- /caption --></P>

<A NAME="59"><H2>Getting from Current State to Future State</H2></A>

<p>Organizations are constantly forced to re-create their business
processes and rewrite their business rules. Business application
systems must be equally adaptable and responsive to these changes.
Successful architectural teams must move beyond the &quot;big
bang&quot; approach to enterprise architecture. We have found that
teams employing an ongoing, iterative approach&#8212;implicitly assuming
that the architecture is never finished but remains a
work-in-progress&#8212;have greater long-term success.</p>

<p>The enterprise architecture is established by framing the definition
of an organization's current state (as-is) and where it wants to be
in the future (to-be). Teams establish priorities and then undertake
individual projects in order to 
incrementally move toward that future state. As they deliver systems
and services, they constantly update the enterprise architecture plan
based on feedback and an ongoing assessment of business and technology
changes (see Figure 1.4).</p>

<P><A HREF="javascript:fullSize('f01ar04x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f01ar04.jpg" WIDTH=404 HEIGHT=281 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 1.4</b> <i> Evolution through multiple versions</i><!-- /caption --></P>

<p><div class="caution"><blockquote><b>CAUTION</b><hr> Stating that the enterprise architecture is
never finished can kill both 
the hope of ever reaching implementation and the satisfaction of
reaching a 
milestone. Applying the concept of versioned releases prevents this
from happening. Each release is a part of, or a continual improvement
in, the overall capabilities of the organization, and each release is a
logically coherent and achievable milestone.</blockquote></div>
</p>

<A NAME="60"><H3>Value of an Iterative Enterprise Architecture</H3></A>

<p>The concept of versioned releases recognizes that most enterprise
architectures are too big to effectively produce at one time. It is
better to prioritize the implementation of successive product versions
based on business needs and then deliver completely working subsets of
the envisioned future state in rapid succession.</p>

<p>The versioned release approach has several advantages:</p>

<ul>
<p><li> <b>Elimination of unnecessary requirements from the
plan</b> Because business units and individual project teams know that
there will be subsequent releases, they do not feel compelled to
&quot;throw in everything but the kitchen sink&quot; into the first
version. Each version can remain tightly focused on key issues while
rapidly delivering value to the organization.</li></p>

<p><li> <b>Ability to respond to feedback on each release</b> Requirements
and priorities for the &quot;complete&quot; architecture often change
once a working version of the architecture is in place and some of the
infrastructure and business application development issues are
solved.</li></p>

<p><li> <b>Discovery of answers</b> Many organizations abhor uncertainty
so intensely that they attempt to magically convert ignorance to
knowledge by stating something as fact, when in reality it is unknown.
This self-deception can lead to poor decisions. It can be avoided by
using versioned releases and by operating under the principle of
&quot;Get it out there; get it validated; don't make it
up.&quot;</li></p>
</ul>



<A NAME="61"><H3>Value of a Dynamic Process</H3></A>

<p>An enterprise architecture is never static. It is an organic system
in which each element has the following life cycle:</p>

<ul>
<p><li> Creation (some functionality, low stability).</li></p>

<p><li> Development (growing quickly, not fully realized).</li></p>

<p><li> Maturity (running smoothly, stable).</li></p>

<p><li> Decline (struggling to maintain pace).</li></p>

<p><li> Death (retirement, disposition).</li></p>
</ul>



<p>To make appropriate changes to an enterprise architecture, constant
attention must be paid to changes in the business and technology
environment so that teams can respond accordingly by:</p>

<ul>
<p><li> Understanding which elements of the enterprise architecture must
be changed.</li></p>

<p><li> Recognizing where those elements are located in the architecture
life cycle.</li></p>
</ul>



<p>Versioned releases allow adjustment over time, responding in a
controlled manner to changes in the environment. Implementing small
elements of the overall architecture in successive releases allows for
better management and budgeting, while still providing something useful
at each release.</p>

<A NAME="62"><H3>Philosophy of Versioned Releases</H3></A>

<p>For versioned releases to work, the team must produce a first
release of the architecture and then frequently produce subsequent
releases that are directly responsive to the changing needs of the
organization.</p>

<p>We can summarize the approach of versioned releases as follows:</p>

<ul>
<p><li> Smaller is better than larger.</li></p>

<p><li> Understood is better than unknown.</li></p>

<p><li> Progress is better than promises.</li></p>
</ul>



<A NAME="63"><H2>Reactive and Proactive Flows</H2></A>

<p>One of the most significant problems that IT may encounter in
developing an enterprise architecture is that all of the fundamental
business processes have been defined and established by the time IT
becomes involved. As a result, the business may miss significant
opportunities to use existing technology more effectively or in new
ways.</p>

<p>Developing an enterprise architecture is not just a reactive
activity. A reactive flow is a one-way flow of decisions and input that
determines how technology will be implemented in the organization. As
shown in Figure 1.5, a reactive flow includes the following steps:</p>

<ul>
<p><li> Define business processes.</li></p>

<p><li> Identify applications and information.</li></p>

<p><li> Implement technology.</li></p>
</ul>



<P><A HREF="javascript:fullSize('f01ar05x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f01ar05.jpg" WIDTH=404 HEIGHT=290 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 1.5</b> <i> A reactive flow of decisions and input</i><!-- /caption --></P>

<p>Reactive flow is important, but it should be coupled with a
proactive flow of input from the technology side to the definition of
business processes. As shown in Figure 1.6, a proactive flow includes
the following steps:</p>

<ul>
<p><li> Analyze technology.</li></p>

<p><li> Identify applications and information.</li></p>

<p><li> Define business processes.</li></p>
</ul>



<P><A HREF="javascript:fullSize('f01ar06x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f01ar06.jpg" WIDTH=404 HEIGHT=355 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 1.6</b> <i> A proactive flow of decisions and input</i><!-- /caption --></P>

<p><div class="note"><blockquote><b>NOTE</b><hr> Technology by itself doesn't provide value,
but applying technology in innovative ways to business opportunities
can provide important value. Deciding where and how to apply technology
is another area where business and IT cooperation is essential.
Electronic commerce is a good example of a proactive flow beginning
with the Technology Perspective.</blockquote></div>
</p>

<A NAME="64"><H2>Maintaining Focus</H2></A>

<p>The MSF Enterprise Architecture Model focuses IT efforts on defining
and prioritizing core processes that drive the business and that are
therefore critical to the organization. Support for these processes
should form the foundation of the enterprise architecture. Many
architectures existing today have grown without proper focus. The
result is an increase in activities that are more supportive of
peripheral and administrative processes than of the core processes that
truly drive the business. Core processes are left languishing and are
often never adequately addressed.</p>

<p>By focusing first on the core processes of critical areas, the MSF
Enterprise Architecture Model maintains the proper perspective as the
architecture is first established and then begins to evolve. Each
versioned release is driven by the need to be implementable. This
requirement reduces the time spent on &quot;ivory tower&quot; dreaming,
and recognizes the need to look to the future and plan accordingly.</p>

<A NAME="65"><H2>Enterprise Architecture and Individual Projects</H2></A>

<p>The enterprise architecture, as illustrated in Figure 1.7,
coordinates every project the organization undertakes. The enterprise
architecture defines opportunities and constraints that:</p>

<ul>
<p><li> Achieve consistency.</li></p>

<p><li> Leverage resources.</li></p>

<p><li> Align infrastructure and application systems with business goals
across the enterprise.</li></p>
</ul>



<p>The enterprise architecture should therefore be the basis for IT
strategic planning. It helps define the domain of application systems
and infrastructure development by addressing core business processes
and the technologies available to automate them. This big-picture view
is especially critical when applications will run concurrently or share
resources.</p>

<P><A HREF="javascript:fullSize('f01ar07x.htm')" onMouseOver="window.status='Click to view at full size';return true;" onMouseOut="window.status='';return true;"><IMG SRC="images/f01ar07.jpg" WIDTH=404 HEIGHT=233 BORDER=0 ALT="Click to view at full size"></A></P>
<P><!-- caption --><b>Figure 1.7</b> <i> Coordination of individual projects by the enterprise architecture</i><!-- /caption --></P>

<p>The enterprise architecture is more than a planning tool. It also
defines the development and operation of applications and the
deployment of infrastructure. This can greatly benefit the organization
by assuring that:</p>

<ul>
<p><li> Proposed applications are aligned with broader business
objectives.</li></p>

<p><li> The targeted technology is among those supported.</li></p>

<p><li> Applications can be operated efficiently after a technology is
deployed.</li></p>
</ul>



<p>The enterprise architecture establishes the business and
technological domains within which individual projects should be
designed and deployed.</p>

<A NAME="66"><H2>Planning While Building and Building While Planning</H2></A>

<p>Organizations by their very nature often dictate top-down
decision-making, especially where it relates to establishing business
policy or strategic planning. When developing an enterprise
architecture, the organization can impose standards from above, but as
shown in Figure 1.8, the architecture should also be refined and
expanded from below, using input from specific individual projects.</p>

<P>
<IMG SRC="images/f01ar08.jpg" WIDTH=369 HEIGHT=248 BORDER=0>
</P><P>
<!-- caption --><b>Figure 1.8</b> <i> The enterprise architecture planning structure</i><!-- /caption -->
</P>

<p>It was once conventional wisdom to construct a model of the entire
enterprise before proceeding with individual IT projects. To assure
consistency of data definitions, interfaces, and business processes
across the enterprise, each project would be neatly carved out of the
enterprise model. However, this approach to architecture planning often
broke down because it assumed that all the details were attainable and
known at the start of the planning process. We now know from experience
that this assumption is false. The enterprise architecture should not
be defined in a vacuum, but should reflect information discovered by
actually building solutions. Using versioned releases that incorporate
feedback from teams and users must result in progressive refinement of
the architecture. Otherwise, a rapidly changing business environment
could quickly overtake an organization's ability to both complete
models at the enterprise level and deploy projects before business
changes make the models invalid.</p>

</BODY>
</HTML>


