<HTML>
<HEAD>
<TITLE>Lab 9: Creating the STUpload Database Access Component</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch09e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="375"><H1>Lab 9: Creating the STUpload Database Access Component</H1></A>

<p>In this lab you will return to the STUpload project. You will create an in-process
COM server called STLoadData.dll, which hosts the <b>UploadStockData</b> component.
This component exposes the <b>IUploadStockData</b> interface, which contains three
methods: <b>ConnectToDatabase()</b>, <b>Disconnect()</b>, and 
<b>UploadRecord()</b>.</p>

<p>Start by creating the STLoadData project within the STUpload workspace.</p>

<p><li><b>To create the STLoadData project</b></li></p>

<ol>
<p><li>Open the STUpload workspace. From the <b>File</b> menu, select <b>New</b>.</li></p>

<p><li>In the <b>New</b> dialog box, click the <b>Projects</b> tab. Select the <b>ATL
COM AppWizard</b> project category.</li></p>

<p><li>Type <b>STLoadData</b> in the <b>Project name</b> box. Select <b>Add to current
workspace</b> and click <b>OK</b>.</li></p>

<p><li>In Step 1 of the ATL COM AppWizard click <b>Finish</b>, and then click <b>OK</b>
to create the new project.</li></p>

<p><li>The STLoadData project appears in ClassView. The project name appears in bold
text, signifying that STLoadData is the active project. Make sure that you have the
full <b>Build</b> toolbar displayed rather than the <b>Build</b> minibar. This enables
you to switch between projects easily by using the project drop-down list box.</li></p>

<p><li>Right-click the <b>STLoadData</b> project in ClassView. On the shortcut menu,
select <b>New ATL Object</b>.</li></p>

<p><li>In the <b>ATL Object Wizard</b> dialog box, select the <b>Objects</b> item in
the <b>Category</b> list. In the <b>Objects</b> box, select the <b>Simple Object</b>
icon, and then click <b>Next</b>.</li></p>

<p><li>In the <b>ATL Object Wizard Properties</b> dialog box select the <b>Names</b>
tab. In the <b>Short Name</b> box, type <b>UploadStockData</b>.</li></p>

<p><li>On the <b>Attributes</b> page, set the following attributes:</li></p>

<ul>
<p><li>Under <b>Threading Model</b>, select <b>Apartment</b>.</li></p>

<p><li>Under <b>Interface</b>, select <b>Dual</b>.</li></p>

<p><li>Under <b>Aggregation</b>, select <b>No</b>.</li></p>
</ul>

<p><li>Ensure that all check boxes are cleared, and then click <b>OK</b> to add the
<b>UploadStockData</b> object.</li></p>
</ol>

<p><li><b>To add the IUploadStockData methods</b></li></p>

<ol>
<p><li>In ClassView, expand the <b>STLoadData classes</b> item. Right-click the <b>
IUploadStockData</b> interface.</li></p>

<p><li>On the shortcut menu, click <b>Add Method</b>.</li></p>

<p><li>In the <b>Return Type</b> box, select <b>HRESULT</b>.</li></p>

<p><li>In the <b>Method Name</b> box, type <b>UploadRecord</b>.</li></p>

<p><li>In the <b>Parameters</b> box, enter the following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>[in] BSTR fund, [in] DATE date, [in] double price, [in] BSTR uplBy, 
[in] DATE uplDate</pre>
</td></tr>
</table>
</p>

<p><li>Repeat the procedure to add methods with the following signatures:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>HRESULT ConnectToDatabase()</pre>
</td></tr>
</table>
</p>

<p>and</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>HRESULT Disconnect()</pre>
</td></tr>
</table>
</p>
</ol>

<p>You will implement these methods in Lab 11 because they themselves are clients of
other COM components (the ADO library).</p>

<p>Take a look at the STLoadData.idl file. Note particularly the interface
definition:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>[
     object,
     uuid(241A7771-6888-11D3-934F-0080C7FA0C3E),
     dual,
     helpstring(&quot;IUploadStockData Interface&quot;),
     pointer_default(unique)
]
interface IUploadStockData : Idispatch
{
     [id(1), helpstring(&quot;method UploadRecord&quot;)] 
     HRESULT UploadRecord([in] BSTR fund, [in] DATE date, 
          [in] double price, [in] BSTR uplBy, 
          [in] DATE uplDate);
     [id(2), helpstring(&quot;method ConnectToDatabase&quot;)] 
     HRESULT ConnectToDatabase();
     [id(3), helpstring(&quot;method Disconnect&quot;)] 
     HRESULT Disconnect();
};</pre>
</td></tr>
</table>
</p>

<p>Note how the <b>IUploadStockData</b> interface inherits from the <b>IDispatch</b>
interface. This is how ATL implements a dual interface. Scripting clients will be able
to use the <b>UploadStockData</b> component through the dispatch interface. Visual C++
and Visual Basic clients will be able to connect directly to the component's
vtable.</p>

</BODY>
</HTML>







