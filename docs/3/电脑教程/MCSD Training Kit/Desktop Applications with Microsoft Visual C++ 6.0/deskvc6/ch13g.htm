<HTML>
<HEAD>
<TITLE>Lesson 6: Using Spy++</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13f.htm", "ch13h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="516"><H1>Lesson 6: Using Spy++</H1></A>

<p>In this lesson, you will learn how to use Spy++, another Visual C++ utility. This
useful, popular utility can display information about all current processes, their
threads, and all open windows&#8212;even hidden windows.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Execute the Spy++ utility and use it to display a graphical tree of relationships
among system objects, including processes, threads, and windows.</li></p>

<p><li> Use Spy++ to search for specified windows, threads, processes, or messages.</li></p>

<p><li> View the properties of selected windows, threads, and processes.</li></p>

<p><li> Use the Spy++ Finder tool to select a window for monitoring.</li></p>

<p><li> View a real-time record of messages that a window sends and receives.</li></p>
</ul>


<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>


<A NAME="517"><H2>Spy++ Views</H2></A>

<p>Start Spy++ the same way as you would the Dependency Walker, by selecting it from
the <b>Microsoft Visual Studio 6.0 Tools</b> menu. The utility displays four main
views:</p>

<ul>
<p><li> <b>Windows view</b> shows a list of open windows.</li></p>

<p><li> <b>Processes view</b> lists current processes.</li></p>

<p><li> <b>Threads view</b> lists all current threads.</li></p>

<p><li> <b>Message log</b> lists the messages that a window receives.</li></p>
</ul>


<p>These four views are activated by commands in the <b>Spy</b> menu, or by the first
four buttons on the toolbar. Each time a command is invoked, it creates a view as a new
child window, so the tool buttons do not toggle between existing views. Instead, you
should create a view only once, and thereafter switch between views by making a
selection in the <b>Window</b> menu. Like the Dependency Walker, Spy++ is an MDI
program, so you can tile views within the client area.</p>

<p>Figure 13.10 shows how the Windows and Processes views might look when arranged in the Spy++ window. The views show that Visual C++ is currently running (named <b>MSDEV</b> in the Processes view) and has created several child windows.</p>

<p>
<A HREF="javascript:fullSize('F13DA10x.htm')"> <img src="images/F13DA10.JPG" width=404 height=223 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 13.10</b> <i>Windows and Processes views in the Spy++ window</i><!-- /caption -->
</p>

<p>A Spy++ view represents a snapshot, so applications that begin running after Spy++ are
not automatically added to the lists. Similarly, applications that terminate while Spy++ is executing are not automatically removed from the list. To update a view, give the view focus and click the <b>Refresh</b> command on the <b>Window</b> menu.</p>

<A NAME="518"><H3>Windows View</H3></A>

<p>The Windows view displays a list of all windows currently open. It does not matter
if the window is hidden or not; many open windows in a typical Windows session are
invisible, serving their various applications only as message receivers. When Spy++
begins or when the view is refreshed, the utility compiles a list of all windows and
displays the list in the Windows view.</p>

<p>The list is a normal tree view with small plus and minus icons that collapse or expand
the list into levels. The tree's hierarchy indicates window parentage&#8212;that is,
the relation between windows in which one window can create others as child windows.
Click any plus icon adjacent to a window to expand the list to include that
window's children. If the plus icon does not appear next to a window, it means that
the window does not have any children.</p>

<p>A typical list in the Windows view can include many windows, so it's sometimes
difficult to locate the entry for a particular window. In these cases, use the Window
Finder tool.</p>

<p><li><b>To use the Window Finder tool</b></li></p>

<ol>
<p><li>Arrange the screen so that Spy++ and the window you want to investigate are both
visible on the screen.</li></p>

<p><li>On the Spy++ toolbar, click <b>Find Window</b>, or choose <b>Find Window</b>
from the <b>Search</b> menu.</li></p>

<p><li>Drag the <b>Finder Tool</b> icon (shown in Figure 13.11) out of the <b>Find
Window</b> dialog box. As the dragged icon passes over an exposed window, the window
appears framed in thick black lines, and the <b>Find Window</b> dialog box notes the
window's handle. Drop the icon over the window you want, and close the <b>Find
Window</b> dialog box. You can then locate the window's entry in the list by
scanning for its window handle.</li></p>


<p>
<img src="images/f13DA11.jpg" width=317 height=289>
</p><p>
<!-- caption --><b>Figure 13.11</b> <i>The <b>Finder Tool</b> icon</i><!-- /caption -->
</p>
</ol>

<A NAME="519"><H3>Processes View and Threads View</H3></A>

<p>Each process running in the Windows multitasking environment creates one or more
threads; each thread can create any number of windows. Use the Processes view to
examine a particular process, which usually corresponds to an executing program.
Processes are identified by module names, or are designated <i>system
processes</i>.</p>

<p>The Threads view lists all currently executing threads along with the names of their
owner processes. Expand a thread entry to see a list of its associated windows.</p>

<A NAME="520"><H3>Message Log</H3></A>

<p>For debugging purposes, the message log is perhaps the most useful of Spy++'s
capabilities. It keeps a record in real-time of all messages that a window sends or
receives. This allows you to examine a list of messages to see in what order they
arrive, which is particularly useful for capturing window initialization messages.</p>

<p>A convenient way to begin message logging for a window is by using the Window Finder tool described earlier.</p>

<p><li><b>To log messages using Window Finder</b></li></p>

<ol>
<p><li>Drag and drop the <b>Finder Tool</b> icon over a target window as you did
previously. In this instance, click the <b>Messages</b> radio button at the bottom of
the <b>Find Window</b> dialog box before closing the dialog box.</li></p>

<p>As you work in the target window, Spy++ compiles a list of messages the window sends
and receives, as shown in Figure 13.12.</p>

<p>
<A HREF="javascript:fullSize('F13DA12x.htm')"> <img src="images/F13DA12.JPG" width=404 height=223 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 13.12</b> <i>Spy++ message log</i><!-- /caption -->
</p>

<p>The Spy++ message log is divided into four columns, which are described in Table
13.6.</p>

<p><b>Table 13.6</b> <i>The Four Columns of the Spy++ Message Log</i></p>

<table cellpadding=5 width="95%">
<tr><th>Column</th> <th>Description</th></tr>

<tr><td valign="top">1</td> <td valign="top">Index number showing the message count</td></tr>

<tr><td valign="top">2</td> <td valign="top">Window handle</td></tr>

<tr><td valign="top">3</td> <td valign="top">Message code: either S (sent), R (received), P (posted), or s (message was sent, but security prevents access to the return value)</td></tr>

<tr><td valign="top">4</td> <td valign="top">Message, parameters, and return values</td></tr>
</table>

<p>By default, the list includes all messages, including mouse movement and keystroke
messages such as WM_KEYDOWN and WM_KEYUP. This means the list can get crowded in a
hurry, but Spy++ can filter the log to only those messages that interest you most.</p>

<p><li>On the <b>Messages</b> menu, click <b>Options</b>, then click the <b>
Messages</b> tab.</li></p>

<p><li>Click the <b>Clear All</b> button to clear all the check boxes, then select only
those check boxes for the messages you want to investigate.</li></p>

<p><li>End message tracking either by clicking the button with the stoplight icon on
the <b>Spy++</b> toolbar, or by clicking <b>Stop Logging</b> on the <b>Messages</b>
menu.</li></p>
</ol>

<A NAME="521"><H2>Viewing Window Messages in Spy++</H2></A>

<p>In this practice exercise, you will launch the Spy++ utility and use it to spy on
another application. By turning on the utility's message logging feature, you can
view in real time the messages belonging to a selected window.</p>

<p><li><b>To start Spy++</b> </li></p>

<ol>
<p><li>On the <b>Programs</b> menu, click <b>Start</b>.</li></p>

<p><li> Click <b>Microsoft Visual Studio 6.0</b>, click <b>Microsoft Visual Studio 6.0
Tools</b>, and then click <b>Spy++</b>.</li></p>

<p><li> When the utility appears, click the <b>Find Window</b> tool on the toolbar and
drag the <b>Finder Tool</b> icon and drop it onto another window. If no other
application is running, drop the <b>Finder Tool</b> icon onto the desktop.</li></p>

<p><li> Click the <b>Messages</b> radio button at the bottom of the <b>Find Window</b>
dialog box, and then close the dialog box.</li></p>

<p><li>Experiment by moving the mouse pointer over the selected window. You
will see the many messages that the window sends and receives pertaining to mouse
movement, such as WM_MOUSEMOVE and WM_SETCURSOR.</li></p>
</ol>

<A NAME="522"><H2>Lesson Summary</H2></A>

<p>This lesson described Spy++, a Visual C++ utility that reports information about
executing programs. Spy++ can provide invaluable insight into an application's
behavior that is not available through the Visual C++ debugger.</p>

<p>Spy++ displays four main views that show a list of windows, processes, threads, and
messages pertaining to a particular window. The Window Finder tool aids in associating any exposed window with the list of windows that Spy++ displays. The
message tracking feature intercepts and logs all messages that enter and leave a
window, showing chronological order and the values of message parameters. The message log can be filtered to monitor messages of particular
interest only.</p>

</BODY>
</HTML>







