<HTML>
<HEAD>
<TITLE>Lab 14: Packaging and Deploying the STUpload Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14f.htm", "ch14h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="577"><H1>Lab 14: Packaging and Deploying the STUpload Application</H1></A>

<p>This lab finishes the STUpload project, bundling it into an installation program
named Setup. When executed on the client's system, the Setup program decompresses
data stored in a .cab file, copies STUpload's executable files to the hard disk,
and registers the application's components. In this lab, you will:</p>

<ul>
<p><li> Create a release version of STUpload.</li></p>

<p><li> Create an InstallShield project for the installation program.</li></p>

<p><li> Add dependencies to the installation project.</li></p>

<p><li> Build and test a Setup program and .cab files.</li></p>
</ul>


<p>The exercises assume that the customer, StockWatch Data Services Inc., maintains a
large network connecting members of its staff. The deployed package will therefore be
copied to the network, allowing users to run the Setup program and install STUpload on
their individual computers.</p>

<p>As mentioned in <a href="ch14c.htm#547">Lesson 2</a> of this chapter, the Learning and Standard Editions of
Visual C++ do not include the InstallShield tool, but you can purchase the tool
separately. If you do not have access to InstallShield, you should still follow along
with the text, but you will not be able to complete Exercises 2 through 4.</p>

<p><b>Estimated lesson time: 15 minutes</b></p>


<A NAME="578"><H2>Building a Release Version of STUpload</H2></A>

<p>Now that STUpload has been debugged and thoroughly tested, you are ready to create a
release version of the program. The release version is smaller and faster than the
debug version created in the previous chapter, because the compiler does not add symbol
information to the object files, and also because the compiler optimizes the code to
reduce its size.</p>

<p><li> <b>To create a release build optimized for size</b></li></p>

<ol>
<p><li> Open the STUpload project in Visual C++.</li></p>

<p><li> On the <b>Build</b> toolbar, select the <b>Win32 Release</b> build context as
shown in Figure 14.10.</li></p>


<p>
<A HREF="javascript:fullSize('f14DA10x.htm')"> <img src="images/f14DA10.jpg" width=404 height=43 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.10</b> <i>Select Win32 Release on the <b>Build</b> toolbar prior to creating a  release build</i><!-- /caption -->
</p>


<p><li> On the <b>Project</b> menu, click <b>Settings</b>.</li></p>

<p><li> In the <b>Project Settings</b> dialog box, click the <b>C/C++</b> tab and select
<b>Minimize Size</b> in the <b>Optimizations</b> box.</li></p>

<p><li> Click <b>OK</b> to close the dialog box.</li></p>

<p><li> On the <b>Build</b> toolbar, click <b>Build</b> to build a release version of
STUpload.</li></p>
</ol>

<A NAME="579"><H2>Creating the InstallShield Project</H2></A>

<p>Now that you have built a release executable for STUpload, you will create an
InstallShield project for the application. The InstallShield project builds the
required Setup program that deploys the STUpload application and its auxiliary
executable files.</p>

<p><li> <b>To create an InstallShield project for STUpload</b></li></p>

<ol>
<p><li> With the STUpload project still open in Visual C++, click <b>
InstallShield Wizard</b> on the <b>Tools</b> menu.</li></p>


<p><li> If the STUpload project is not listed in the wizard's <b>Visual C++
Project</b> box, click <b>Browse</b> and browse to the STUpload.dsw file in the
STUpload project folder. Double-click STUpload.dsw to add it to the wizard's <b>
Visual C++ Project</b> box.</li></p>

<p><li> Click <b>Next</b> to proceed to the wizard's next step.</li></p>

<p><li> Check the accuracy of the application information, and then click <b>Next</b> to
proceed.</li></p>

<p>The wizard shows a summary of information gleaned from the STUpload.dsw workspace
file. As shown in Figure 14.11, the information includes the names
of the two ActiveX controls, msadodc.ocx and msdatgrd.ocx, which were added to the
STUpload project in <A HREF="ch07a.htm">Chapter 7</A>. msadodc is the Microsoft ADO Data Control, and msdatgrd
is the Microsoft DataGrid control. The wizard read the controls' class identifiers
stored in STUpload.dsw, and then consulted the system registry to find the locations of
the .ocx files.</p>



<p>
<A HREF="javascript:fullSize('f14DA11x.htm')"> <img src="images/f14DA11.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.11</b> <i>Summary page of the InstallShield Wizard</i><!-- /caption -->
</p>

<p><li> Click <b>Finish</b> to launch InstallShield, which automatically opens the new
STUpload installation project.</li></p>
</ol>

<A NAME="580"><H2>Adding Dependencies to the Project</H2></A>

<p>STUpload requires the services of another dependency, the STLoadData.dll component
added to the project in Chapter 9. STLoadData is not an ActiveX control, but is
nevertheless self-registering because it exports the <b>DllRegisterServer()</b> and <b>
DllUnregisterServer()</b> functions. The component should therefore be added to a file
group for which the <b>Self-Registered</b> flag is set to <b>Yes</b>.</p>

<p>Such a file group already exists in the project, so it's not necessary to create
a new group. To contain the project's ActiveX controls, InstallShield has created
the OCXs file group and has set the <b>Self-Registered</b> flag for the group. This
exercise adds the STLoadData component to the OCXs file group.</p>

<p><li> <b>To add STLoadData to the OCXs file group</b></li></p>

<ol>
<p><li> In the InstallShield workspace window, click the <b>File Groups</b> tab and
expand the list for the OCXs group.</li></p>

<p><li> Right-click the <b>Links</b> entry under OCXs, and then click <b>Insert
Files</b> on the shortcut menu.</li></p>

<p><li> Browse to the folder containing STLoadData.dll, select the file, and click <b>
Open</b>. The list of files in the OCXs group now includes STLoadData.dll.</li></p>
</ol>

<p>You will also need to package the data link file used by the StloadData.dll to
conncect to the database.</p>

<p><li> <b>To add Data Links file group and the data link file</b></li></p>

<ol>
<p><li> On the <b>File Groups</b> tab, right-click the <b>STUpload File Groups</b> item.
Add a new file group named <b>Data Links</b>.</li></p>

<p><li> Add the <b>\DataLinks\STLink.udl</b> file that you created for the lab in
<A HREF="ch10a.htm">Chapter 10</A> to the Data Links file group.</li></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
These exercises assume that the Microsoft Data Access Components
(MDAC) have been installed on the client machines. For a discussion of the
issues surrounding the redistribution of MDAC see the Technical Article
&quot;Redistributing Microsoft Data Access Components&quot; in Visual C++
Help.</blockquote></div>
</p>

<A NAME="581"><H2>Building and Testing the Setup Program</H2></A>

<p>This exercise invokes InstallShield's Media Build Wizard to create the Setup
program. In addition to the Setup file, the resulting installation package includes
various information files and a .cab file containing compressed copies of the
four executable files that are installed on the client's network. The executable
files are STUpload.exe and its components MSAdodc.ocx, MSDatGrd.ocx, and
STLoadData.dll.</p>

<p><li> <b>To build the Setup program for STUpload</b></li></p>

<ol>
<p><li> On InstallShield's <b>Build</b> menu, click <b>Media Build Wizard</b>.</li></p>

<p><li> In the Media Build Wizard's first step, type <b>STUpload</b> in the <b>Media
Name</b> box, and then click <b>Next</b>.</li></p>

<p><li> In the list of media types, select the entry for 1.44-MB 3.5-inch disks. This
selection determines how you will send the finished installation package to StockWatch
Data Services, which will then copy it to a network share visible to all users.</li></p>

<p><li> Click <b>Next</b> four times to move past the Build Type, Tag File, and Platform
steps, accepting their default settings.</li></p>

<p><li> At the wizard's Summary step, click <b>Finish</b> to build the project.</li></p>

<p><li> When the Media Build Wizard finishes, click <b>Finish</b> to terminate the
wizard.</li></p>
</ol>

<p>The Disk Images folder in the C:\MyInstallations\STUpload\Media\STUpload
subdirectory now contains a folder named Disk1. Disk1 contains all the files
required to install the STUpload application on another computer. You need only copy
Disk1 to a single 3.5-inch disk and ship the disk to your client.</p>

<p>To test the installation, place the disk in another computer and run Add/Remove
Programs to start the Setup program. If the Setup program asks for a serial number,
simply type any text to continue. When you have finished, run the installed STUpload
application to make sure all files have been correctly decompressed from the .cab file,
and that the three COM components have been correctly registered on the test computer.
To remove the program and test the uninstaller, run Add/Remove Program<b>s</b> again
and remove STUpload.</p>

</BODY>
</HTML>







