<HTML>
<HEAD>
<TITLE>Lesson 3: Registering COM Components on the Client燙omputer</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14c.htm", "ch14e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="553"><H1>Lesson 3: Registering COM Components on the Client燙omputer</H1></A>

<p>During installation, a Setup program must register on a user's computer any
ActiveX controls or other COM components that the application requires to run. The
registry entry for an ActiveX control includes:</p>

<ul>
<p><li> The control's class identifier GUID.</li></p>

<p><li> The location of the control's executable file.</li></p>

<p><li> Characteristics such as the component's threading model.</li></p>

<p><li> Various flags that specify how the component operates&#8212;for example, whether
the control is visible or invisible, whether it can be activated inside a
container's window, and so forth.</li></p>
</ul>


<p>ActiveX controls are <i>self-registering</i>, meaning they contain their own
registry information and can write it to the system registry. By taking on the task of
registering themselves, ActiveX controls remove most of the burden from the Setup
program. In this lesson, you will also learn how to configure an InstallShield pro-ject
to correctly install ActiveX controls on a user's system.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Describe the self-registration feature possessed by many COM components,
including ActiveX controls.</li></p>

<p><li> Describe how exported functions write and remove COM information from the
registry.</li></p>

<p><li> Add self-registering components to an InstallShield project.</li></p>
</ul>


<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>


<A NAME="554"><H2>Self-Registering Components</H2></A>

<p>To update the user's system registry for installed COM components, a Setup
program can use registry files as described in <a href="ch14b.htm#537">Lesson 1</a> of this chapter. However,
ActiveX controls do not require registry files because they are self-registering.</p>

<p><A HREF="ch10a.htm">Chapter 10</A> explained that an ActiveX control executes as either a stand-alone
program or, much more commonly, as a DLL. The latter is known as an <i>in-process</i>
(or <i>in-proc</i>) ActiveX control. An in-process ActiveX control exports a function
named <b>DllRegisterServer()</b> that, when called, writes to the registry all the
information the control requires. The only obstacle is that some other application must
load the control and specifically call the <b>DllRegisterServer()</b> function.</p>

<p>This task generally falls to either a Web browser (if the ActiveX control is
downloaded from a Web page) or to a Setup program. Because users generally acquire
ActiveX controls only over the Internet or by installing an application, registration
takes place invisibly&#8212;thus, most users never have to worry about registering an
ActiveX control.</p>

<p>Control files acquired through other means&#8212;e-mail, for example&#8212;require
manual registration to operate. Windows provides a utility named RegSvr32 that handles
this task. RegSvr32 loads a requested ActiveX control or any other self-registering COM
component and calls the component's <b>DllRegisterServer()</b> function: </p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>regsvr32 <i>path</i>\MyControl.ocx</pre>
</td></tr>
</table>
</p>

<p>where <i>path</i> represents where the component is stored. The command:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>regsvr32 /u <i>path</i>\MyControl.ocx</pre>
</td></tr>
</table>
</p>

<p>causes the program to call the component's <b>DllUnregisterServer()</b>
function, which removes from the registry everything that <b>DllRegisterServer()</b>
wrote. The <i>/u</i> switch included in the command stands for uninstall. </p>

<A NAME="555"><H2>Adding Self-Registering Components to an InstallShield Project</H2></A>

<p>If your application files include ActiveX controls or other self-registering
components, the Setup program you create must call the components' <b>
DllRegisterServer()</b> function during installation. Likewise, the uninstaller
program must call the <b>DllUnregisterServer()</b> function for each component if users
uninstall your application.</p>

<p>The Setup and Uninst programs created by InstallShield will register and unregister
your application's ActiveX components. To configure your installation project to
correctly handle self-registering controls, you must create a file group that contains
the component files, and then specify the <b>Self Registered</b> property for the
group.</p>

<p><li> <b>To create a group of self-registering components</b></li></p>

<ol>
<p><li> Open the installation project in InstallShield, as shown in Figure