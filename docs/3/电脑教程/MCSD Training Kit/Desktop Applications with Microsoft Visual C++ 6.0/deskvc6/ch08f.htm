<HTML>
<HEAD>
<TITLE>Lesson 5: ActiveX Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08e.htm", "ch08g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="343"><H1>Lesson 5: ActiveX Controls</H1></A>

<p>An ActiveX control is a COM object that is designed to be placed in an ActiveX
control container, such as an application dialog box or on a Web page, to perform a
self-contained function. ActiveX controls frequently present a graphical user
interface.</p>

<p>This lesson gives a brief introduction to ActiveX controls and some of the
considerations faced by the control developer.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<ul>
<p><li>Describe the interaction between ActiveX controls and ActiveX control
containers.</li></p>

<p><li>Describe the interfaces that an ActiveX control must implement to meet the
requirements of commonly used control containers.</li></p>

<p><li>Describe some common features of ActiveX controls.</li></p>
</ul>

<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>


<A NAME="344"><H2>ActiveX Controls and Containers</H2></A>

<p>An ActiveX control is any COM object that implements the <b>IUnknown</b> interface
and is hosted by a self-registering server that can be a DLL or an .exe file. We refer
to the client of an ActiveX control as a <i>container</i>. ActiveX controls are
located, or <i>sited</i>, within an ActiveX control container. Figure 8.12 shows the 
Microsoft Chart ActiveX control located within the ActiveX
Control Test Container.</p>

<p>ActiveX controls usually display a user interface. In fact, many people consider the
implementation of a user interface to be a defining characteristic of an ActiveX
control. As we move into an age of distributed applications, there are good reasons why
regular COM components should not display a user interface. For example, if your COM
component displays a message box to alert you of an error condition, and the component
happens to be installed on a remote server in the next building, you will not be aware
that an error occurred. Most ActiveX controls, on the other hand, are tightly coupled
to a container that implements a user interface. The container expects the control to
participate as part of the user interface.</p>

<p>
<A HREF="javascript:fullSize('f08DA12x.htm')"> <img src="images/f08DA12.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 8.12</b> <i>The ActiveX Control Test Container</i><!-- /caption -->
</p>

<p>Although the definition of ActiveX controls requires only that the control supports
the <b>IUnknown</b> interface, different containers have different requirements. Some
containers require certain interfaces for a control to work, while others do not. If
you want your control to work with a particular container, your control must implement
the interfaces required by the container.</p>

<p>Most of the commonly used control containers expect a control to maintain a set of
data, fire events, and support enough interfaces so that a client application can
successfully interact with it. Table 8.2 defines the minimum set
of interfaces that the ActiveX Control Test Container (and most other user-interface
containers) expects an ActiveX control to support.</p>

<p>Although the number of interfaces listed might imply that implementing an ActiveX
control involves a lot of hard work, both MFC and ATL provide wizards that generate the
basic framework of an ActiveX control. Such wizards allow you to concentrate on 
the implementation of the functionality specific to your control.</p>

<p><b>Table 8.2</b> <i>Minimum set of interfaces to be supported by the ActiveX control</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
	<th>Interface</th>
	<th>Description</th>
</tr>
<tr>
	<td valign="top">IOleObject</td>
	<td valign="top">Required for communication with a control's client site, except through 
	events. Events are handled through the <b>IConnectionPointContainer</b> interface described later.
	 </td>
</tr>
<tr>
<td valign="top">IOleInPlaceObject</td>
<td valign="top">Implemented by controls that can be activated in place and provide
	their own user interface. Requires support for <b>IOleObject</b>.</td>
</tr>
<tr>
	<td valign="top">IOleInPlaceActiveObject</td>
	<td valign="top">Required only by controls that provide a user interface and
	that support <b>IOleInPlaceObject</b>.</td>
</tr>
<tr>
	<td valign="top">IDataObject</td>
	<td valign="top">Required by controls that transfer data to a container in some way, as
	through shared memory or a file. <b>IDataObject</b> provides the means for COM's
	Uniform Data Transfer, a protocol that sets the rules for the exchange of data of any
	type.</td>
</tr>
<tr>
<td valign="top">IViewObject2</td>
<td valign="top">Implemented by visible controls that display a window.</td>
</tr>
<tr>
	<td valign="top">IDispatch</td>
	<td valign="top">Required by controls with custom methods or properties that a client can
	access through <b>IDispatch</b>::<b>Invoke()</b></td>
</tr>
<tr>
	<td valign="top">IConnectionPointContainer</td>
	<td valign="top">Required by controls that fire events. This interface
enumerates for a client the events that a control object can fire.
	 </td>
</tr>
<tr>
<td valign="top">IConnectionPoint</td>
<td valign="top">Required by controls that support 
<b>IConnectionPointContainer</b>.</td>
</tr>
<tr>
	<td valign="top">IProvideClassInfo</td>
	<td valign="top">Implemented by controls that contain type library information,
which means most ActiveX controls. Through its <b>GetClassInfo()</b> method, the interface
provides a pointer to an <b>ITypeInfo</b> implementation from which a client can extract the control's type information.
</td>
</tr>
<tr>
<td valign="top">IPersistStorage</td>
<td valign="top">Required by controls that can save and load from an <b>IStorage</b>
instance provided by the container.</td>
</tr>
<tr>
	<td valign="top">IClassFactory</td>
	<td valign="top">Instantiates a requested class object and returns a pointer to it. The
	object is identified by a CLSID registered in the system registry.</td>
</tr>
<tr>
	<td valign="top">IClassFactory2</td>
	<td valign="top">Same as <b>IClassFactory</b>, but adds support for licensing.</td>
</tr>
</table>
</p>

<A NAME="345"><H2>Features of ActiveX Controls</H2></A>

<p>ActiveX controls support properties, methods, and events to make the control
programmable. ActiveX controls usually support a dispatch interface to enable a wide
variety of programming languages and scripting languages to work programmatically with
the control.</p>

<A NAME="346"><H3>Stock Properties</H3></A>

<p>The ActiveX standards define a set of stock properties that are common to many
controls. Examples of stock properties include the font used for text displayed by the
control, and its foreground and background colors. Stock properties are distinguished
from <i>custom</i> properties: custom properties are specific to the functionality of a
control.</p>

<A NAME="347"><H3>Ambient Properties</H3></A>

<p>Ambient properties provide information to the control about the appearance of the
control container. A control's properties should be set so that it appears
integrated with the environment of the container. For example, the <b>BackColor</b>
ambient property represents the background color of the container. The control can set
its own <b>BackColor</b> stock property to this color so that the control appears to be
part of the container. Control developers are encouraged to write ActiveX controls that
detect and respond to the ambient properties of the container.</p>

<A NAME="348"><H3>Events</H3></A>

<p>Controls can also respond to actions by generating <i>events</i>. Events are
notifications from the control to the container. The event interface is defined by the
control, but is implemented by the container, which makes the event interface an
outgoing interface.</p>

<p>As with properties, a distinction is made between stock events and custom events.
Stock events result from common actions such as mouse clicks or key presses. Custom
events are control-specific.</p>

<A NAME="349"><H3>Property Pages</H3></A>

<p>Most ActiveX controls implement property pages to provide users with a graphical
interface to change the properties of a control. Figure 8.12 shows the property page of
the Microsoft Chart ActiveX control. Each property page is based on a dialog box
template resource, and is a separate COM object with its own CLSID.</p>

<A NAME="350"><H3>Property Persistence</H3></A>

<p>One capability of ActiveX controls is <i>property persistence</i> (or
serialization), which allows the ActiveX control to read or write property values to
and from a file or stream. A container application can use serialization to store a
control's property values even after the application has destroyed the control. The
property values of the ActiveX control can then be read from the file or stream when a
new instance of the control is created at a later time.</p>

<A NAME="351"><H2>Lesson Summary</H2></A>

<p>ActiveX controls are regular COM objects located within an ActiveX control
container. ActiveX controls implement interfaces to meet the requirements of 
the container. This usually involves implementing a user interface, so that the
control can participate as part of the container's user interface.</p>

<p>ActiveX controls typically support properties, methods, and events to make the control
programmable.</p>

</BODY>
</HTML>







