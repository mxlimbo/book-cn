<HTML>
<HEAD>
<TITLE>Lesson 2: Using InstallShield</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14b.htm", "ch14d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="547"><H1>Lesson 2: Using InstallShield</H1></A>

<p>As a shortcut for developing setup and uninstall programs, the Professional and
Enterprise Editions of Visual C++ include the SDK edition of Stirling Software's
InstallShield. (The Learning and Standard Editions don't include this tool, but you
can purchase it separately. If you don't have access to this tool, you can still
benefit from reading the information in this lesson.)</p>

<p>This lesson introduces the InstallShield toolkit, which enables you to write a
script that specifies the steps you want performed during installation. InstallShield
then builds a Setup program that installs your product on a user's computer.</p>

<p>With InstallShield, you don't have to write a separate script for
uninstallation. InstallShield creates an uninstall program named Uninst that reads a
log file created during the setup process. The log file enables Uninst to reverse the
steps performed during setup.</p>

<p>InstallShield creates a Setup program for your project that looks and acts much like
the Setup program you used to install Visual C++. Microsoft creates Setup programs for
many of its products using InstallShield.</p>

<p>An exhaustive description of InstallShield is beyond the scope of this lesson, which
is intended only as an introduction to the product. Setup programs today can be
surprisingly sophisticated, capable of handling a wide variety of file types,
accommodating different operating systems, and handling a bewildering number of
potential problems. They must work not only with traditional distribution media such as
disks and CD-ROMs, but also across networks and the Internet. InstallShield is not
difficult to use, but it offers such a wide array of
options designed to address installation issues that gaining familiarity with it can
take a while. Furthermore, complete control over the product requires learning its
scripting language, InstallScript. As with most programs, practice is the only true
teacher.</p>

<p>InstallShield treats your Setup program as a <i>project</i>, the same term applied
to normal Visual C++ projects. To avoid confusion, this lesson employs the phrases <i>
Setup project</i> or <i>installation project</i> when referring to work done inside
InstallShield, and <i>application project</i> when referring to the Visual C++ files
that the Setup program deploys in their compressed state.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Configure InstallShield to run as a Visual C++ tool.</li></p>

<p><li> Step through the InstallShield tutorial.</li></p>

<p><li> Create a simple Setup program using InstallShield.</li></p>
</ul>


<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>


<A NAME="548"><H2>Installing InstallShield</H2></A>

<p>If you selected InstallShield when installing Visual C++, the Visual C++ <b>
Tools</b> menu already contains a command for starting the InstallShield Wizard.
However, if the command does not appear in the Visual C++ <b>Tools</b> menu and you are
not using the Learning or Standard Edition of Visual C++, you should install
InstallShield now.</p>

<p><li> <b>To install InstallShield</b></li></p>

<ol>
<p><li> Place the Visual C++ CD-ROM #1 in your CD-ROM drive.</li></p>

<p><li> In Control Panel, start the Add/Remove Programs applet.</li></p>

<p><li> Browse to the IShield folder on the CD-ROM and double-click <b>Setup</b>.</li></p>
</ol>

<p>The Setup program installs InstallShield, places a command on the <b>Start\
Programs</b> menu, and adds the <b>InstallShield Wizard</b> command to the Visual C++
<b>Tools</b> menu.</p>

<A NAME="549"><H2>Running the InstallShield Tutorial</H2></A>

<p>The InstallShield program provides a good tutorial that demonstrates how to develop
a sample Setup program for the familiar Notepad utility. The tutorial walks you through
various steps, eventually creating a Setup program that places an icon and command on
the <b>Programs</b> menu. When selected, the command
invokes Notepad.</p>

<p>The tutorial shows how InstallShield categorizes your application files into
different groups, allowing you to work on different parts of an installation project.
Each group contains files with similar characteristics, such as system DLLs,
executable files, and Help files.</p>

<p><li> <b>To run the InstallShield tutorial</b></li></p>

<ol>
<p><li> Click <b>Start</b>, point to <b>Programs</b>, and then click <b>InstallShield
for Microsoft Visual C++ 6</b>. InstallShield opens.</li></p>

<p><li> On the <b>Help</b> menu, click <b>Getting Started</b>.</li></p>

<p><li> In the <b>Help Topics</b> dialog box, expand the list by double-clicking <b>
Welcome to InstallShield</b>, <b>Tutorials</b>, and <b>Use the Project Wizard</b>.</li></p>

<p><li> Double-click the first entry, <b>Outline: Use the Project Wizard</b>.</li></p>

<p><li> Move through the six steps, following the tutorial's instructions.</li></p>
</ol>

<p>After running the completed Setup demonstration, be sure to uninstall it by running
the Add/Remove Programs applet, as suggested in the tutorial's last step.</p>

<p>The preceding example shows how to start InstallShield from the <b>Programs</b>
menu, activating the Project Wizard to create a new project or to open an existing
project. You can also run InstallShield from inside Visual C++ by clicking the <b>
InstallShield Wizard</b> command on the <b>Tools</b> menu. This alternative is
convenient for creating a Setup program for an existing Visual C++ application project,
because it fills in information that you would otherwise have to enter manually. When
you click the <b>InstallShield Wizard</b> command, the wizard
appears as shown in Figure 14.3. Select the desired Visual C++ project, click <b>
Next</b>, and follow the wizard's remaining instructions.</p>

<p>
<A HREF="javascript:fullSize('f14DA03x.htm')"> <img src="images/f14DA03.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.3</b> <i>The InstallShield Wizard, invoked from the Visual C++ <b>Tools</b> menu</i><!-- /caption -->
</p>

<A NAME="550"><H2>Including and Removing Program Files</H2></A>

<p>InstallShield scans the application folder and locates all necessary executable
files, adding them to the installation project. Figure 14.4 shows how
the wizard lists the application's dependency files. In this case, the demo.exe
application links dynamically to MFC, so InstallShield adds MFC42.DLL to the Setup
project. Because MFC42.DLL in turn uses the C run-time library, the MSVCRT.DLL module
is also added to the installation project.</p>

<p>
<A HREF="javascript:fullSize('f14DA04x.htm')"> <img src="images/f14DA04.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14.4</b> <i>Listing an application's dependency files in the InstallShield Wizard</i><!-- /caption -->
</p>

<p>If you intend to distribute your application only to sites where you know the files
already exist, you might not want to include dependencies such as MFC42.DLL and
MSVCRT.DLL in your Setup program. The InstallShield Wizard does not allow you to alter
the list, but you can remove the files from the installation project later. After the
wizard finishes, it starts InstallShield automatically.</p>

<A NAME="551"><H2>Creating the Setup.exe Program</H2></A>

<p>After your installation project compiles and runs correctly, the last step is to
build the project. This step enables you to create the Setup.exe program and the
associated .cab files to distribute to your users. InstallShield provides the Media
Build Wizard to walk you through the steps of creating the Setup program. The following
list assumes you have created an installation project and are ready to build a Setup
program for it.</p>

<p><li> <b>To create a Setup program</b></li></p>

<ol>
<p><li> On the InstallShield <b>Build</b> menu, click the <b>Media Build Wizard</b>
command.</li></p>

<p><li> In the wizard's first step (titled <b>Media Name</b>), type the name of the
application project in the <b>Media Name</b> box.</li></p>

<p><li> In the second step, choose the type and size of the media you intend to use for
your application's deployment. The wizard offers the choice of various disk
formats, a CD-ROM, a customizable size, and an option named <b>InstallFromTheWeb</b>
that creates a Setup program that is installable over the Internet.</li></p>

<p><li> In the third step, choose either <b>Full Build</b> or <b>Quick Build</b>. The
<b>Full Build</b> option creates the compressed files required for distribution to
users. The <b>Quick Build</b> option is intended only for testing purposes, allowing
you to quickly build a Setup project and test it without creating actual compressed
files. The disk images created by the <b>Quick Build</b> option contain links to the
application files instead of compressed data. The resultant Setup program will run only
on the development computer where the application project is stored.</li></p>

<p><li> The wizard's third step includes an <b>Advanced</b> button. Click this
button to expose a dialog box that allows you to enter various settings and to establish a
password for the Setup program. You can also specify the folder to which the Setup
files will be written. If you do not specify a folder, the wizard writes the disk image
files to C:\MyInstallations\<i>project</i>\Media\<i>project</i> , where <i>project</i>
represents the name of the installation project.</li></p>

<p><li> Click <b>Next</b> to skip the wizard's fourth step.</li></p>

<p><li> In the wizard's fifth step, select the operating systems under which
your application can run. InstallShield includes files required for the selected
operating systems.</li></p>

<p><li> The wizard's sixth and final step is titled <b>Summary</b>. Click <b>Finish</b> to build the Setup program.</li></p>

<p><li> InstallShield shows the <b>Building Media</b> dialog box in which an animated
display tracks its progress. When the build process is complete, simply click <b>
Finish</b> again.</li></p>
</ol>

<p>You now have a folder named Disk Images in your chosen installation project folder.
The Disk Images folder contains at least one nested folder named Disk1, which holds the
disk image for the first disk of the series. If the Setup requires additional disks,
their images are contained in folders Disk2, Disk3, and so forth. The contents of each
Disk folder must be copied to disks or other media of the type selected in the Media
Build Wizard's second step. If the installation creates more than one Disk folder,
each receiving medium must be labeled with the disk number to ensure that users can
insert disks in the correct order when prompted to do so.</p>

<p>As a final test before shipping your application, run the Setup package on a
machine other than your development computer. Test the installed application to ensure
that all components have been correctly copied and registered, then uninstall the
application to ensure that it is correctly removed.</p>

<A NAME="552"><H2>Lesson Summary</H2></A>

<p>This lesson introduced the InstallShield program, a tool that creates sophisticated
installation programs for Visual C++ projects. InstallShield largely automates the
entire process of building a Setup program by scanning for dependencies, generating
cabinet files, and creating disk images. InstallShield even provides an uninstaller
program named Uninst.</p>

<p>Through the Media Build Wizard, InstallShield is accessible from inside the
Visual C++ environment where it automatically reads information for the cur-rent
application project. InstallShield encourages the sorting of project files into
distinct categories referred to as file groups, allowing you to specify different
characteristics for each group. InstallShield generates a script that governs the
installation process, using its own InstallScript language. Complete control
over installation is possible by editing the script.</p>

</BODY>
</HTML>







