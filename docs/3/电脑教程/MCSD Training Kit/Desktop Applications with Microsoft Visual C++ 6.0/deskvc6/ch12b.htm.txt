<HTML>
<HEAD>
<TITLE>Lesson 1: Working with Dynamic HTML</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm", "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="432"><H1>Lesson 1: Working with Dynamic HTML</H1></A>

<p>Hypertext Markup Language (HTML) is a system of marking up, or tagging, a document
so that it can be published on the World Wide Web. Dynamic HTML (DHTML) is an extension
of HTML supported by Internet Explorer 4.0 that exposes a Web page and all the elements
on it as scriptable objects. In this lesson, you will learn how you can display HTML
documents and work with the DHTML object model from within your Visual C++
applications.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<ul>
<p><li>Describe some of the benefits of using DHTML as an application user interface.</li></p>

<p><li>Describe the DHTML object model and how you can access DHTML objects from within
your code.</li></p>

<p><li>Describe how to use the <b>DHTMLView</b> class to display HTML documents in an
MFC application.</li></p>

<p><li>Describe how to use the ATL HTML control to display HTML documents.</li></p>

<p><li>Describe the function of DHTML scriptlets and how they can be incorporated into a
Visual C++ application.</li></p>
</ul>

<b>Estimated lesson time: 50 minutes</b>
</blockquote></div>
</p>

<A NAME="433"><H2>Review of the Internet, Intranets, and HTML</H2></A>

<p>The Internet is a global, distributed network of computers that use the TCP/IP
protocol. An intranet is also a network of computers operating on the TCP/IP protocol,
but it is not global. Generally, an intranet is restricted to a particular set of
users. An organization might run an intranet to provide information to employees only,
and run a separate Internet site for the general public. Employees of
the company can access both, but non-employees can access only the company's
Internet site.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
In this chapter, we will use the term Internet to include both
the global network of computers and intranet networks.</blockquote></div>
</p>

<p>Most people's experience of the Internet comes from browsing the <i>World Wide
Web</i> (the Web). The Web is the portion of the Internet that uses the Hypertext
Transfer Protocol (HTTP) to connect pages and resources in a way that lets you reach
any page from any other page. If you are connected to the Internet, a Web browser like
Internet Explorer lets you explore the Web to view pages on Web servers across the
world.</p>

<p>The Web operates on a client/server model. The browser running on a desktop computer
acts as the client, and a Web server acts as the server by providing the HTTP pages in
response to a user's request.</p>

<p>Web pages viewed in a Web browser appear as a collection of text, pictures, sounds,
digital movies; and as links to other Web pages. Web pages are created
using HTML, which tags an ASCII document so that it includes formatting tags;
references to graphics, sound, or animation files; and hyperlinks to Web pages
or other resources.</p>

<p>Users of an intranet also use a Web browser to browse Web pages located on the
company's Web servers. Additionally, users can use a Web browser to access
resources or run applications on remote servers on your local area network (LAN), or on
your desktop computer. You can use HTML to develop applications that present a rich and
consistent interface and provide seamless access to resources on a desktop computer, on
remote company servers, and on global Web servers.</p>

<A NAME="434"><H3>HTML Documents</H3></A>

<p>HTML defines a standard set of formatting tags that all Web browsers recognize. For
example, this is the code for a simple HTML page:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!&#8212; MyPage.htm &#8212;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;
A basic HTML Page
&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;H1&gt; This is some text with H1
&lt;/H1&gt;
&lt;H3&gt; This is some text with H3
&lt;/H3&gt;
&lt;P&gt;Here is a new paragraph with normal text in
&lt;B&gt;Bold&lt;/B&gt; and &lt;I&gt;Italic&lt;/I&gt;
&lt;/P&gt;
&lt;P&gt;Here is a &lt;A HREF= &quot;SecondPage.htm&quot;&gt;
link to a local page &lt;/A&gt;
&lt;/P&gt;
&lt;/P&gt;
&lt;P&gt;Here is a &lt;A HREF= &quot;http://msdn.microsoft.com/visualc/&quot;&gt;
link to a page on the World Wide Web &lt;/A&gt;
&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>HTML formatting tags divide a document into discrete sections known as
<i>elements</i>. The HTML document just shown is composed of two main elements enclosed
by the &lt;HEAD&gt; and &lt;BODY&gt; tag pairs. The &lt;HEAD&gt; element contains
header information that does not affect the rendering of the document, but might be of
use to the browser. The &lt;BODY&gt; element specifies the content of the page that is
displayed by the browser. Our example demonstrates some simple tags that define
elements of the document. These tags specify whether text is to be displayed in one of
the pre-defined heading formats such as &lt;H1&gt; or &lt;H3&gt;, or as bold or italic
text. The &lt;A&gt; (anchor) element specifies a hypertext link.</p>

<p>Most of the HTML tags define attributes that are used to supply additional
information about the element. In the example just shown, the elements defined within
&lt;A&gt; tags contain <i>HREF</i> attributes, which are assigned strings that specify
the link destination as a Uniform Resource Locator (URL) address. You can also assign
the name of a local file to the HREF attribute by prefacing the path with
&quot;file:\\&quot;.</p>

<p>The MyPage.htm file can be found in the Chapter 12\Exercises folder that is
installed from the companion CD. Double-click the MyPage.htm file so that it displays
in Internet Explorer, as shown in Figure 12.1. You can experiment by following the link
to the SecondPage.htm file and, if you have a live Internet connection, to the Visual
C++ home page at <A HREF="http://msdn.microsoft.com/visualc/" TARGET="_window2">msdn.microsoft.com/visualc/</A>.</p>

<p>
<A HREF="javascript:fullSize('f12DA01x.htm')"> <img src="images/f12DA01.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.1</b> <i>MyPage.htm, as displayed by Internet Explorer 5</i><!-- /caption -->
</p>

<A NAME="435"><H2>Dynamic HTML</H2></A>

<p>DHTML is an exciting technology that was introduced as part of Internet
Explorer 4.0. Using DHTML, you can create dynamic, interactive Web pages, thereby
presenting users of your Web site with the kind of user interface they have come to
expect from desktop applications.</p>

<p>For example, with DHTML you can:</p>

<ul>
<p><li>Modify the text of your Web page.</li></p>

<p><li>Modify elements of a style sheet that specify how text is displayed (the font or
the text color, for example).</li></p>

<p><li>Animate text and images on your Web page.</li></p>

<p><li>Respond to user-initiated actions such as mouse movements or clicks.</li></p>

<p><li>Validate user input to a form before it is submitted to a server.</li></p>
</ul>

<p>DHTML achieves these effects by automatically reformatting and redisplaying the
current document to show changes. It does not need to reload the document or load a new
document, nor does it require a distant server to generate new content, as HTML would
require. Instead, it uses the power of the user's computer to calculate and carry
out changes. This means a user does not have to wait for text and data to complete
potentially time-consuming round-trips to and from a server before seeing results.</p>

<p>Furthermore, DHTML does not require additional support from applications
or embedded controls to carry out changes. Typically, DHTML documents are
self-contained, using HTML styles to specify the format and appearance of
the document; and using small blocks of script to process user input and directly
manipulate the HTML tags, attributes, styles, and text in the document.</p>

<p>The HTML elements, attributes, and styles in DHTML are based on existing HTML
specifications. Microsoft is working with the World Wide Web Consortium (W3C) toward a
DHTML standard. Some of the dynamic and interactive features that you add to your
documents might not be fully functional when viewed with a browser that does not
support DHTML. However, by following some basic guidelines, you can ensure that the
content of your document will still be viewable in other browsers.</p>

<A NAME="436"><H3>DHTML Object Model</H3></A>

<p>When Internet Explorer 4.0 (or later versions) loads an HTML page, it creates an
internal representation of the page that is accessible through the DHTML object
model.</p>

<p>Using the DHTML object model, you can access and manipulate virtually anything
within a document. The HTML elements in the document are available as individual
objects, which means you can examine and modify an element and its attributes by
reading and setting properties and by calling methods. Elements of a document are
contained in <i>collections</i>&#8212;similar to the MFC collections or the linked lists
you use in C++ programming. You can iterate across a DHTML collection to gain access to
the elements it contains.</p>

<p>Figure 12.2 shows several sub-objects of the document object. Most of these
are collections, including the <i>all</i> collection that contains all of the
document's HTML elements.</p>

<p>
<img src="images/f12DA02.jpg" width=277 height=784>
</p><p>
<!-- caption --><b>Figure 12.2</b> <i>The DHTML object model</i><!-- /caption -->
</p>

<p>The object model also makes user actions, such as pressing a key or clicking the
mouse, available as events. You can intercept and process these and other events by
creating event handler functions and routines.</p>

<p>As an example, consider the following simple DHTML document:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!&#8212; MyDynPage.htm &#8212;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;Welcome!&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
function changeMe() {
     document.bgColor = &quot;hotpink&quot;;
     MyHeading.style.color = &quot;green&quot;;
     MyText.innerText = &quot;Color effects courtesy of DHTML&quot;;
}
&lt;/SCRIPT&gt;
&lt;BODY onclick=&quot;changeMe()&quot;&gt;
&lt;H3 ID=MyHeading&gt;Welcome to Dynamic HTML!&lt;/H3&gt;
&lt;P ID=MyText&gt;Click anywhere in this document.&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>This document changes the color of the background and heading font, and also changes
a line of text when the user clicks the mouse in the document. You can test this
behavior by viewing the page (Chapter 12\Exercises\MyDynPage.htm) in Internet
Explorer.</p>

<p>Note that you can identify individual elements on a page by setting the ID attribute
inside the element tag. In the example, the heading is named <i>MyHeading</i> and the
paragraph is named <i>MyText</i>. You can use these IDs to access the page elements,
and then write scripts to get and set the element properties. Scripts are defined with
the &lt;SCRIPT&gt; tag.</p>

<p>In the example, notice that the JavaScript scripting language is used to define the
<b>changeMe()</b> handler function, which is associated with the <b>onClick</b> event
inside the document's &lt;BODY&gt; tag. The function sets the <b>bgColor</b>
property of the <b>document</b> object's <b>body</b> object to change the
document's background color. The function also changes the color of the heading by
setting the <b>color</b> property of the <b>style</b> object of the <b>MyHeading</b>
element. It replaces the text in the paragraph element by setting the <b>innerText</b>
property of the <b>MyText</b> element.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The scripting examples in this chapter will use the JavaScript
language. Because it is syntactically very similar to C++, it will probably be your scripting
language of choice. Most browsers use JavaScript as their default language, but it is
good practice to always specify the language used in the LANGUAGE attribute of the
&lt;SCRIPT&gt; tag. In the MSDN documentation and in other books, you might see 
<i>JScript</i> used. JScript is Microsoft's version of JavaScript, and it includes
some Internet Explorer-specific extensions.</blockquote></div>
</p>

<p>It is not the intention of this book to give you more than a brief introduction
to DHTML. If you would like to know more about DHTML, refer to one of
the several books available on the subject, such as <i>Inside Dynamic HTML</i> by Scott
Isaacs (Microsoft Press, 1997). This brief introduction to the capabilities
of DHTML is intended to help you appreciate that HTML&#8212;a simple markup language
used to render hypertext documents&#8212;is evolving into a powerful
development tool capable of providing a dynamic, interactive user interface for
applications.</p>

<A NAME="437"><H2>Microsoft WebBrowser Control</H2></A>

<p>To help you incorporate Web browser elements into your applications, Microsoft
provides the WebBrowser ActiveX control. This control is the component of Internet
Explorer that implements the Internet Explorer main window. The WebBrowser control
supports Web browsing through hyperlinks and URL navigation and maintains a history
list that allows the user to browse forward and backward through previously browsed
sites, folders, and documents. The control also handles security and lists of
&quot;favorite&quot; Web sites. The WebBrowser
control is itself an ActiveX control container that can host any ActiveX control.</p>

<p>The following sections show you how you can use the MFC <b>CHtmlView</b> class
(which encapsulates the WebBrowser control) to create a Web browser-style
application that uses HTML as the primary interface. You will learn how to use ATL to
create an ActiveX control that hosts the WebBrowser control.</p>

<p>You will also learn how you can access the DHTML object model from within your C++
code to access and manipulate elements of the HTML document displayed by your
application or control.</p>

<A NAME="438"><H2>MFC Web Browser-Style Applications</H2></A>

<p>The Microsoft WebBrowser control is a standard ActiveX control, which means you can
insert the control into your MFC project using the Components and Controls Gallery.
Inserting the control will create the <b>CWebBrowser2</b> class, which wraps the 
<b>IWebBrowser2 Automation</b> interface exposed by the WebBrowser control. You can use
the <b>CWebBrowser2</b> class to get and set properties and call methods using C++
types rather than Automation types.</p>

<p>However, the preferred method of creating a Web browser-style application is
to use the MFC AppWizard and specify <b>CHtmlView</b> as the view class. The 
<b>CHtmlView</b> class is derived from <b>CView</b> and provides the functionality of the
WebBrowser control within the context of MFC's document/view architecture. 
<b>CHtmlView</b> provides member functions to allow you to access the browser
functionality from within your code.</p>

<p>Note that you must have installed Internet Explorer 4.0 (or a later version)
before you can use the <b>CHtmlView</b> class or the WebBrowser control.</p>

<p>The following exercise shows you how to create a Web browser-style application using
the MFC AppWizard.</p>

<p><li><b>To create the MyHtmlApp application</b></li></p>

<ol>
<p><li>On the <b>File</b> menu, click <b>New</b> to create a new <b>MFC AppWizard
(exe)</b> project named <b>MyHtmlApp</b>.</li></p>

<p><li>In Step 1 of the MFC AppWizard, select the <b>Single document</b> option.</li></p>

<p><li>Select the default options for steps 2 through 5.</li></p>

<p><li>In Step 6, click <b>CHtmlView</b> in the <b>Base class</b> box. Click <b>
Finish</b> and then click <b>OK</b> to create the project.</li></p>
</ol>

<p>After the project is created, expand the <b>CMyHtmlAppView</b> class in ClassView.
Double-click the <b>OnInitialUpdate</b> function to view the code. The code should be
as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyHtmlAppView::OnInitialUpdate()
{
     CHtmlView::OnInitialUpdate();

     // TODO: This code navigates to a popular spot on the Web.
     // Change the code to go where you'd like.
     Navigate2(_T(&quot;msdn.microsoft.com/visualc/&quot;),NULL,NULL);
}</pre>
</td></tr>
</table>
</p>

<p>The <b>OnInitialUpdate</b> function uses the <b>CHtmlView::Navigate2()</b> function
to locate and display Microsoft's Visual燙++ home page in the application main
window. If you do not have a live Internet connection, you might want to alter the 
<b>Navigate2()</b> function call to make the application display the MyPage.htm file
instead. Supposing that MyPage.htm file is located in the c:\DAVC\Chapter 12\Exercises
folder, you might want to alter the line to be as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Navigate2(_T(&quot;c:\\DAVC\\Chapter 12\\Exercises\\MyPage.htm&quot;) ,NULL,NULL);</pre>
</td></tr>
</table>
</p>

<p>Before you build and run the MyHtmlApp application, complete the following exercise
to add <b>Forward</b> and <b>Back</b> navigation options.</p>

<p><li><b>To add navigation menu and toolbar options</b></li></p>

<ol>
<p><li>In ResourceView, open the <b>IDR_MAINFRAME</b> menu resource from the 
<b>Menu</b> folder.</li></p>

<p><li>Delete the <b>Edit</b> menu, and in its place add a new menu with the caption
<b>&amp;Go</b>.</li></p>

<p><li>Add two commands to this menu with the captions <b>&amp;Back</b> and 
<b>&amp;Forward</b>. Add suitable prompt strings for the options. Allow the editor to
create the default IDs <b>ID_GO_BACK</b> and <b>ID_GO_FORWARD</b>.</li></p>

<p><li>Close the menu editor. Open the <b>IDR_MAINFRAME</b> toolbar resource. Delete the <b>Cut</b>, <b>Copy</b>, and <b>Paste</b> toolbar buttons by dragging
them off the toolbar.</li></p>



<p><li>Create toolbar buttons for the <b>ID_GO_BACK</b> and <b>ID_GO_FORWARD</b>
command IDs as shown in Figures 12.3 and 12.4.</li></p>

<p>
<img src="images/f12DA03.jpg" width=97 height=91>
</p><p>
<!-- caption --><b>Figure 12.3</b> <i>The <b>ID_GO_BACK</b> toolbar button</i><!-- /caption -->
</p>

<p>
<img src="images/f12DA04.jpg" width=97 height=91>
</p><p>
<!-- caption --><b>Figure 12.4</b> <i>The <b>ID_GO_FORWARD</b> toolbar button</i><!-- /caption -->
</p>

<p><li>Close the toolbar editor. Open ClassWizard and click the <b>Message Maps</b>
tab.</li></p>

<p><li>To the <b>CMyHtmlAppView</b> class, add command handlers for the 
<b>ID_GO_BACK</b> and <b>ID_GO_FORWARD</b> command IDs, named <b>OnGoBack()</b> and 
<b>OnGoForward()</b>. Click <b>Edit Code</b> to locate the function implementations.</li></p>

<p><li>To each of the handler functions, add the corresponding <b>CHtmlView</b>
navigation member function, as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyHtmlAppView::OnGoBack()
{
     GoBack();
}

void CMyHtmlAppView::OnGoForward()
{
     GoForward();
}</pre>
</td></tr>
</table>
</p>

<p><li>Build and run the application. Figure 12.5 shows the
MyHtmlApp application displaying the Microsoft Visual C++ home page, 
as specified by the default implementation of the <b>CMyHtmlAppView::
OnInitialUpdate()</b> function.</li></p>


<p>
<A HREF="javascript:fullSize('f12DA05x.htm')"> <img src="images/f12DA05.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.5</b> <i>The MyHtmlApp application</i><!-- /caption -->
</p>
</ol>

<p>Explore the browser features that are provided to your application by 
<b>CHtmlView</b>. Notice that the application status bar displays information about the
hyperlinks, and about the progress of a page download operation. After you have moved
to other pages using hyperlinks on the page, you can move through your history
list by using the <b>Go Back</b> and <b>Go Forward</b> menu and toolbar options that
you created.</p>

<A NAME="439"><H3>Accessing the DHTML Object Model</H3></A>

<p>You will remember that access to DHTML objects such as <b>window</b> or 
<b>document</b> is very easy when you are writing a piece of script in an HTML document.
You can simply refer to objects by name, as shown in the following piece of
JavaScript:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>document.bgColor = &quot;hotpink&quot;;</pre>
</td></tr>
</table>
</p>

<p>This ability is made possible by the fact that the Internet Explorer script
interpreter is parsing your lines of script and converting them into calls to the
Internet Explorer Automation interfaces. In C++, you access the DHTML object model by
using the Automation interfaces directly.</p>

<p>The DHTML object model is exposed through a set of COM interfaces with the prefix
IHTML (<b>IHTMLDocument</b>, <b>IHTMLWindow</b>, <b>IHTMLElement</b>, and so on). The
<b>CHtmlView</b> class provides the <b>GetHtmlDocument()</b> function, which returns an
<b>IDispatch</b> pointer of the HTML document that is currently displayed. You can call
<b>QueryInterface()</b> on this <b>IDispatch</b> pointer to obtain pointers to the
IHTML interfaces. After you have obtained pointers to these interfaces, you can use the
properties and methods they provide to manipulate the document.</p>

<p>The following exercise demonstrates how you can access elements of an HTML page
displayed in the MyHtmlApp application. You will write code to retrieve 
all of the anchor elements (links) in the current page, and display their HREF
attribute values (URLs or file paths) in a dialog box. The user will be able to
select a link to view in the browser.</p>

<p><li><b>To create the View Links dialog box</b></li></p>

<ol>
<p><li>Using the dialog editor, create the <b>View Links</b> dialog box as illustrated
in Figure 12.6. This dialog box should be given the resource ID 
<b>IDD_LINK_DIALOG</b>, and it should contain a large list box control named 
<b>IDC_LINK_ LIST</b> as well as the standard <b>OK</b> and <b>Cancel</b> buttons. The 
<b>OK</b> button should display the caption <b>Go to link</b>.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA06x.htm')"> <img src="images/f12DA06.jpg" width=404 height=253 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.6</b> <i>The <b>View Links</b> dialog box</i><!-- /caption -->
</p>

<p><li>From within the resource editor, press CTRL+W to create a dialog class named 
<b>CLinkDialog</b> for the <b>View Links</b> dialog box. On the <b>Member Variables</b>
page of ClassWizard, add the variables listed in Table 12.1.</li></p>

<p><b>Table 12.1</b> <i>Variables for the View Links Dialog Box</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
	<th>Resource ID</th>
	<th>Category</th>
	<th>Variable type</th>
	<th>Variable name</th>
</tr>
<tr>
	<td valign="top">IDC_LINK_LIST</td>
	<td valign="top">Value</td>
	<td valign="top">CString</td>
	<td valign="top">m_strLink</td>
</tr>
<tr>
	<td valign="top">IDC_LINK_LIST</td>
	<td valign="top">Control</td>
	<td valign="top">CListBox</td>
	<td valign="top">m_lbLinkList</td>
</tr>
</table>
</p>

<p><li>On the <b>Message Maps</b> tab of ClassWizard, create an overload of the 
<b>OnInitDialog()</b> function for the <b>CLinkDialog</b> class (to handle the 
WM_INITDIALOG message). Click <b>Edit Code</b> to locate the function implementation.</li></p>

<p><li>Replace the stub function with the following code, which can be found in the
InitLnkDlg.cpp file in the Chapter 12\Exercises folder.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
BOOL CLinkDialog::OnInitDialog()
{
     CDialog::OnInitDialog();

     // Get pointer to view
     CFrameWnd * pFrame = 
          dynamic_cast&lt;CFrameWnd *&gt;(AfxGetMainWnd());
     ASSERT_VALID(pFrame);

     CHtmlView * pHtmlView = 
          dynamic_cast&lt;CHtmlView *&gt;(pFrame-&gt;GetActiveView());
     ASSERT_VALID(pHtmlView);

     // Get pointer to the document object dispatch interface
     IDispatch * pDisp = pHtmlView-&gt;GetHtmlDocument();

     if(pDisp != NULL)
     {
          // Get pointer to IHTMLDocument2 interface to
          // access document object's properties and methods
          IHTMLDocument2 * pHTMLDocument2;
          HRESULT hr;

          hr = pDisp-&gt;QueryInterface(IID_IHTMLDocument2,
               (void**)&amp;pHTMLDocument2);

          if(hr == S_OK)
          {
               // Get pointer to the anchors collection
               IHTMLElementCollection * pColl = NULL;
               hr = pHTMLDocument2-&gt;get_anchors(&amp;pColl);

               if(hr == S_OK &amp;&amp; pColl != NULL)
               {
                    LONG nElem;
                    hr = pColl-&gt;get_length(&amp;nElem);

                    if(hr == S_OK)
                    {
                         // Iterate across anchors collection
                         for(long i = 0; i &lt; nElem; i++)
                         {
                              _variant_t vIndex(i);
                              _variant_t vName = vIndex;

                              IDispatch * pDisp2;

                              hr = pColl-&gt;item(
                                   vName, vIndex, &amp;pDisp2);
                              if(hr == S_OK)
                              {
                                   // Retrieve pointer to each 
                                   // Anchor element so that you can
                                   // retrieve the URL text and add 
                                   // it to the list box
                                   IHTMLAnchorElement * pAnchElem;

                                   hr = pDisp2-&gt;QueryInterface(
                                        IID_IHTMLAnchorElement,
                                        (void**) &amp;pAnchElem);
                                   if(hr == S_OK)
                                   {
                                        BSTR bstrHref = 0;
                                        pAnchElem-&gt;get_href(&amp;bstrHref);

                                        CString strLink(bstrHref);

                                        if(!strLink.IsEmpty())
                                             m_lbLinkList.AddString(strLink);
                                        SysFreeString(bstrHref);
                                        pAnchElem-&gt;Release();
                                   }
                                   pDisp2-&gt;Release();
                              }
                         }
                    }
                    pColl-&gt;Release();
               }
               pHTMLDocument2-&gt;Release();
          }
          pDisp-&gt;Release();
     }
     return TRUE; // return TRUE unless you set the focus to a control
          // EXCEPTION: OCX Property Pages should return FALSE
}

</pre>
</td></tr>
</table>
</p>

<p>Look through this function to understand how it really works. A pointer
to the HTML document's dispatch interface is obtained by calling the 
<b>CHtmlView::GetHtmlDocument()</b> function. This pointer is used to obtain an 
<b>IHTMLDocument2</b> interface pointer, and the <b>IHTMLDocument2:: get_anchors()</b>
function is called to get a pointer to the DHTML anchors
collection. The <b>InitDialog()</b> function iterates across the <i>anchors</i>
collection and, on each iteration, retrieves an <b>IHTMLAnchorElement</b> pointer to
the current element. From this element, the value of the HREF attribute is obtained and
inserted into the list box.</p>

<p><li>To the top of LinkDialog.cpp, along with the other #include statements, add the
following lines:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &lt;mshtml.h&gt;
#include &lt;comdef.h&gt;</pre>
</td></tr>
</table>
</p>

<p>The mshtml.h file contains the definitions for the IHTML interfaces. Comdef.h
contains the definition of the <b>_variant_t</b> COM helper class.</p>

<p><li>Create a new menu command with the caption <b>Links</b> under the <b>View</b>
menu. This should have the default command ID <b>ID_VIEW_LINKS</b>. Using ClassWizard,
create a command handler function for this ID in the <b>CMyHtmlAppView</b> class. This
function should be named <b>OnViewLinks</b>.</li></p>

<p><li>To the body of the <b>CMyHtmlAppView::OnViewLinks()</b> function, add the
following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CLinkDialog aDlg;
if(aDlg.DoModal() == IDOK)     // (&quot;Go to link&quot; button)
{
     // If a link was selected, go there!
     if(!aDlg.m_strLink.IsEmpty())
          Navigate2(aDlg.m_strLink, NULL, NULL);
}</pre>
</td></tr>
</table>
</p>

<p><li>To the top of the MyHtmlAppView.cpp file, with the other #include statements,
add the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;LinkDialog.h&quot;</pre>
</td></tr>
</table>
</p>

<p><li>You can now build and run the application. Using the Web or the local HTML
files, test to see that all of the links on a particular page are displayed in the
dialog box when the <b>Links</b> option is selected from the <b>View</b> menu. Select a
link from the list and click <b>Go to link</b> to check that you moved to the
destination successfully. Figure 12.7 shows the <b>View Links</b> dialog box displaying
all the URLs for links on the Microsoft Visual C++ home page.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA07x.htm')"> <img src="images/f12DA07.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.7</b> <i>The <b>View Links</b> dialog box in action</i><!-- /caption -->
</p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You will find that URLs containing spaces, such as
c:\DAVC\Chapter 12\ Exercises\MyPage.htm, will appear in the <b>View Links</b> dialog
box with escape sequences in place of the spaces. This is because Internet Explorer
uses the <b>InternetCanonicalizeUrl()</b> API function to convert the URLs into a safe
format for resolution. You can use the <b>InternetCanonicalizeUrl()</b> function to
decode the URLs for display purposes. See the Internet Explorer Platform SDK for more
information.</blockquote></div>
</p>

<A NAME="440"><H3>HTML Resources</H3></A>

<p>You can include HTML pages as resources in your project, just as you can include
bitmaps or dialog templates. HTML resources can be stored as .htm files in your
project's res subfolder, or defined inline in your project's resource script
(.rc) file. In either case, you edit the HTML resource using the Visual C++
editor. Because HTML resources are compiled into your program executable, their use
provides a safe and convenient way to distribute HTML pages used by your
application.</p>

<p>In the following exercise, you will include the MyPage.htm and SecondPage.htm files,
which you saw earlier in this chapter, as resources in your application.</p>

<p><li><b>To add HTML resources to the MyHtmlApp project</b></li></p>

<ol>
<p><li>In ResourceView, right-click the top-level <b>MyHtmlApp Resources</b> folder. On
the shortcut menu, click <b>Import</b>.</li></p>

<p><li>Using the <b>Import Resource</b> dialog box, click <b>HTML files (.htm;
.html)</b> in the <b>Files of type</b> box. Locate the Chapter 12\Exercises\MyPage.htm
file and click <b>Import</b>.</li></p>

<p><li>The HTML source opens in the editor window. Note the HTML-aware color syntax
highlighting.</li></p>

<p><li>Right-click the <b>IDR_HTML1</b> resource that has been added and then click 
<b>Properties</b>.</li></p>

<p><li>Rename the resource <b>IDR_MYPAGE</b>. Note the <b>External file</b> check box,
which allows you to specify whether the resource is stored as a file in your
project's res folder or in your .rc file. Leave this check box selected.</li></p>

<p><li>Repeat the process to add the Chapter 12\Exercises\SecondPage.htm file as an
application resource. Name the resource <b>IDR_SECONDPAGE</b>.</li></p>
</ol>

<p>To make your application display an HTML resource, use the <b>CHtmlView::
LoadFromResource()</b> function as shown in the following exercise.</p>

<p><li><b>To display an HTML resource</b></li></p>

<ol>
<p><li>Locate the <b>CMyHtmlAppView::OnInitialUpdate()</b> function. Comment out the
following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Navigate2(_T(&quot;msdn.microsoft.com/visualc/&quot;),NULL,NULL);</pre>
</td></tr>
</table>
</p>

<p>Beneath this line, add the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>LoadFromResource(IDR_TITLEPAGE);</pre>
</td></tr>
</table>
</p>

<p><li>Build and run the MyHtmlApp application. Check that the <b>IDR_TITLEPAGE</b>
HTML resource displays as expected.</li></p>
</ol>

<p>Note that what you are seeing is a compiled version of the TitlePage.htm file. This
means that any changes you make to the HTML code in the TitlePage.htm file will not
display unless you rebuild the application. This also means that your <b>View Links</b>
dialog box will not be able to retrieve and display the link on this page.</p>

<p>Additionally, you will notice that you are not able to follow the <i>local page</i>
link. This is because the link is defined as follows to point to an external .htm
file:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF= &quot;SecondPage.htm&quot;&gt; link to a local page &lt;/A&gt;</pre>
</td></tr>
</table>
</p>

<p>You will need to redefine this link to point to the <b>IDR_SECONDPAGE</b> resource.
Internet Explorer provides the <i>res:</i> protocol, which is similar to the HTTP
protocol. It allows you to define a URL to locate a resource that is bound to an
executable or DLL file. The res: protocol has the following format:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>res://resource_file/[resource_type]/resource_id</pre>
</td></tr>
</table>
</p>

<p>In this protocol, <i>resource_file</i> indicates the name of the executable or DLL
file that contains the resource, and <i>resource_type</i> is an optional numeric value
that indicates the type of the resource&#8212;two values most commonly used here are 23
(an HTML page) and 2 (a bitmap). The numeric identifier of the resource is indicated by
<i>resource_id</i>. The winuser.h file in the Microsoft Visual Studio\Vc98\Include
folder gives a complete list of resource types as a list of constants with the RT_
prefix. If you do not specify the type, the default value 23 is used.</p>

<p>In the following exercise, you will amend the links on your HTML resource pages to
use the res: protocol.</p>

<p><li><b>To create a link to another resource</b></li></p>

<ol>
<p><li>In ResourceView, right-click the <b>MyHtmlApp resources</b> folder. On the
shortcut menu, click <b>Resource Symbols</b>. The <b>Resource Symbols</b> dialog box
will appear.</li></p>

<p><li>Write down the numeric values assigned to the <b>IDR_MYPAGE</b> and the 
<b>IDR_SECONDPAGE</b> resource IDs. Close the <b>Resource Symbols</b> dialog box.</li></p>

<p><li>Double-click the <b>IDR_MYPAGE</b> resource to edit the HTML source. Replace the
following hyperlink definition:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF= &quot;SecondPage.htm&quot;&gt; link to a local page &lt;/A&gt;</pre>
</td></tr>
</table>
</p>

<p>with the new hyperlink definition:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF= &quot;res://MyHtmlApp.exe/<i>n</i>&quot;&gt;</pre>
</td></tr>
</table>
</p>

<p>where <i>n</i> is the number assigned to the <b>IDR_SECONDPAGE</b> resource ID.</p>

<p><li>Edit the <b>IDR_SECONDPAGE</b> resource. Replace the following hyperlink
definition:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF=&quot;MyPage.htm&quot;&gt; Here &lt;/A&gt;</pre>
</td></tr>
</table>
</p>

<p>with the new hyperlink definition:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF=&quot;res://MyHtmlApp.exe/<i>n</i>&quot;&gt; Here &lt;/A&gt;</pre>
</td></tr>
</table>
</p>

<p>where <i>n</i> is the number assigned to the <b>IDR_MYPAGE</b> resource ID.</p>

<p><li>Build and run the MyHtmlApp application. Check that you can use the links to
move between the MyPage and the SecondPage pages.</li></p>
</ol>

<A NAME="441"><H2>Creating HTML Controls with ATL</H2></A>

<p>Using ATL, you can create a control that is capable of displaying HTML pages. An ATL
<i>HTML control</i> hosts the WebBrowser control and provides a pointer to the 
<b>IWebBrowser2 Automation</b> interface, which gives you access to the DHTML object
model.</p>

<p>As with any other control created with ATL, the HTML control provides an empty
dispatch interface to which you can add methods and properties to define how your
control will interact with a container. In addition, the HTML control provides another
dispatch interface that is used to communicate between the C++ code and the HTML user
interface. The HTML user interface calls into燙++ code using this interface, enabling
you to write C++ methods that are callable from script within your HTML page.</p>

<p>The ATL HTML control provides an HTML resource as an example user interface for the
control, and a method that demonstrates how you can write functions that are callable
from the HTML user interface.</p>

<p>The following exercises show you how to create a simple HTML control using ATL.</p>

<p><li><b>To create the MyHtmlControl project</b></li></p>

<ol>
<p><li>On the Visual C++ <b>File</b> menu, click <b>New</b>. Create an <b>ATL COM
AppWizard</b> project named <b>MyHtmlControl</b>.</li></p>

<p><li>In Step 1 of the ATL COM AppWizard, accept the default settings and click 
<b>Finish</b>. Click <b>OK</b> to create the project.</li></p>
</ol>

<p><li><b>To insert an HTML control</b></li></p>

<ol>
<p><li>In ClassView, right-click <b>MyHtmlControl classes</b> and then click <b>New ATL
Object</b>. In the ATL Object Wizard, click the <b>Controls</b> category and the 
<b>HTML Control</b>, as shown in Figure 12.8.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA08x.htm')"> <img src="images/f12DA08.jpg" width=404 height=251 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.8</b> <i>The ATL Object Wizard</i><!-- /caption -->
</p>

<p><li>Click <b>Next</b>. On the <b>Names</b> page of the <b>ATL Object Wizard
Properties</b> dialog box, type <b>MyHtmlCtrl</b> in the <b>Short Name</b> box. The
other boxes will be filled automatically and will appear as shown in Figure 12.9.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA09x.htm')"> <img src="images/f12DA09.jpg" width=404 height=268 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.9</b> <i>The <b>ATL Object Wizard Properties dialog</b> box</i><!-- /caption -->
</p>

<p><li>Click <b>OK</b> to add the HTML control to the project.</li></p>

<p><li>In ResourceView, double-click the <b>IDH_MYHTMLCTRL</b> resource in the HTML
resources folder to view the source code for the example HTML page that is created as
the user interface for the MyHtmlCtrl control. The HTML code displays as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;BODY id=theBody&gt;
&lt;BUTTON onclick='window.external.OnClick(theBody, &quot;red&quot;);'&gt;Red
&lt;/BUTTON&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;BUTTON onclick='window.external.OnClick(theBody, &quot;green&quot;);'&gt;Green
&lt;/BUTTON&gt;
&lt;BR&gt;
&lt;BR&gt;
&lt;BUTTON onclick='window.external.OnClick(theBody, &quot;blue&quot;);'&gt;Blue
&lt;/BUTTON&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>This simple piece of DHTML defines three buttons on the page that all
respond to the <b>onclick</b> event by calling a function named <b>OnClick()</b>. The
<b>OnClick()</b> function takes two parameters; the name of an element ID, and
a string that specifies one of the colors in the Internet Explorer color table.</p>

<p>The <b>OnClick()</b> function is not part of the DHTML object model. It is a method of
the <b>IMyHtmlCtrlUI</b> interface defined for your project by the ATL Object Wizard.
You define properties and methods for the <b>IMyHtmlCtrlUI</b> interface that are
callable from your control's DHTML code via the <i>window.external</i> object.</p>

<p>If you look in MyHtmlCtrl.h, you will find the implementation of 
<b>IMyHtmlCtrlUI::OnClick()</b> as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>// Example method called by the HTML to change the &lt;BODY&gt; 
     background color
STDMETHOD(OnClick)(IDispatch* pdispBody, VARIANT varColor)
{
     CComQIPtr&lt;IHTMLBodyElement&gt; spBody(pdispBody);
     if (spBody != NULL)
          spBody-&gt;put_bgColor(varColor);
     return S_OK;
}</pre>
</td></tr>
</table>
</p>

<p>The <b>OnClick()</b> function takes the <b>IDispatch</b> pointer of the DHTML
page element and a VARIANT that contains the color string. The function uses the ATL 
<b>CComQIPtr</b> class to obtain a smart pointer to the <b>IHTMLBodyElement</b> interface
from the element's dispatch interface. If the <b>IHTMLBodyElement</b> interface
pointer is obtained correctly (a BODY element has been passed as expected), then the 
<b>put_bgColor()</b> method is called to set the background color of the document body.</p>

<p><li>Build the MyHtmlControl project to create the MyHtmlControl.dll and to register
the MyHtmlCtrl ActiveX control. Take the steps below to test the
operation of the MyHtmlCtrl control.</li></p>
</ol>

<p><li><b>To test the MyHtmlCtrl control</b></li></p>

<ol>
<p><li>On the Visual C++ <b>Tools</b> menu, click <b>ActiveX Control Test
Container</b>.</li></p>

<p><li>On the <b>Edit</b> menu of the ActiveX Control Test Container, click <b>Insert
New Control</b>. In the <b>Insert Control</b> dialog box, click <b>MyHtmlCtrl Class</b>
and then click <b>OK</b> to place the control in the container.</li></p>

<p><li>Experiment with the control buttons to see that they change the background color
as expected.</li></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
This control does not function properly with some versions of Internet
Explorer 5. You may need to install Internet Explorer 4.0 to see the correct
behavior.</blockquote></div>
</p>

<p>
In the following exercises, you will add a button and a handler function that will move
to and display a Web page in your HTML control.</p>

<p><li><b>To add the WWW button</b></li></p>

<ol>
<p><li>Open the <b>IDH_MYHTMLCONTROL</b> HTML resource in the editor.</li></p>

<p><li>Add the following lines to the bottom of the BODY section of the document:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BR&gt;
&lt;BR&gt;
&lt;BUTTON onclick='window.external.GoToWeb();'&gt;WWW&lt;/BUTTON&gt;</pre>
</td></tr>
</table>
</p>
</ol>

<p><li><b>To add the GoToWeb() method</b></li></p>

<ol>
<p><li>In ClassView, expand the <b>CMyHtmlCtrl</b> item.</li></p>

<p><li>Right-click the <b>IMyHtmlCtrlUI</b> interface item that is a sub-item of the
<b>CMyHtmlCtrl</b> item. Select <b>Add Method</b>.</li></p>

<p><li>In the <b>Add Method to Interface</b> dialog box, add <b>GoToWeb</b> to the 
<b>Method Name</b> box. Leave the <b>Parameters</b> box blank and click <b>OK</b> to add
the method.</li></p>

<p><li>Expand the <b>IMyHtmlCtrlUI</b> interface item and double-click the 
<b>GoToWeb()</b> function to open the MyHtmlCtrl.cpp file and edit the <b>GoToWeb()</b>
function implementation.</li></p>

<p><li>Replace the //TODO comment in the <b>GoToWeb()</b> function with the following
line of code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_spBrowser-&gt;Navigate(CComBSTR(&quot;msdn.microsoft.com/visualc/&quot;),
     NULL, NULL, NULL, NULL);</pre>
</td></tr>
</table>
</p>

<p><b>CMyHtmlCtrl::m_spBrowser</b> is a smart pointer to the <b>IWebBrowser2</b>
interface, the Automation interface of the WebBrowser control. This member variable is
supplied for your control class by the ATL Object Wizard.</p>

<p><li>Build the MyHtmlControl project and test the MyHtmlCtrl control by loading it
into the ActiveX Control Test Container. Check that when you click the <b>WWW</b>
button, the control displays the Visual C++ home page, as illustrated in Figure
12.10.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA10x.htm')"> <img src="images/f12DA10.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.10</b> <i>The MyHtmlCtrl ActiveX control</i><!-- /caption -->
</p>
</ol>

<A NAME="442"><H2>Dynamic HTML Scriptlets</H2></A>

<p>DHTML scriptlets were introduced in Internet Explorer 4.0 to allow you to 
develop simple user interface controls using DHTML. Scriptlets are reusable DHTML
objects that expose a well-defined public interface&#8212;a list of properties and
methods that are accessible to clients. Scriptlets are also capable of firing
events.</p>

<p>One of the most interesting features of scriptlets is that they can be used like 
an ActiveX control. For example, they can be placed on a Web page or on a 
form in a desktop application. This behavior is made possible by the fact that
scriptlets are run inside the <i>Microsoft Scriptlet Component</i>, an ActiveX control
that is installed along with Internet Explorer. Internally, the Scriptlet Component
hosts an instance of the DHTML parsing engine to interpret the scriptlet code.
Externally, it presents a standard ActiveX control interface to allow interaction with
a control container.</p>

<p>The Scriptlet Component exposes the scriptlet's public interface to the control
container. It acts as a bridge so that the container application can access the public
properties and methods defined in the scriptlet's DHTML code.</p>

<p>The Scriptlet Component provides an internal interface, which is accessible from the
scriptlet code. Scriptlet code can query the <b>window.external</b> object to gain
run-time information about the current state of its host; and to access services of the
Scriptlet Component, such as the forwarding of events fired by the scriptlet to the
containing application.</p>

<p>Because scriptlets run as interpreted DHTML, they execute more slowly than compiled
ActiveX controls. But if all you need is a simple lightweight control, scriptlets
provide you with an easy way of developing reusable components.</p>

<A NAME="443"><H3>Elements of a DHTML Scriptlet</H3></A>

<p>A DHTML scriptlet is a normal DHTML document that contains &lt;BODY&gt; and
&lt;SCRIPT&gt; elements. The &lt;BODY&gt; element defines the visual interface of the
control, which you create as you would for a regular Web page.</p>

<p>Within the &lt;SCRIPT&gt; element, you define the properties, methods, and events
that allow you to use the scriptlet as a control. By following certain naming
conventions, you can distinguish between the public properties and methods that are
exposed to clients through the control interface; and the private properties and
methods that are used only internally by the scriptlet.</p>

<A NAME="444"><H3>Declaring Scriptlet Properties and Methods</H3></A>

<p>Within a scriptlet, all properties and methods that are not explicitly declared
public are considered private. As with any other HTML document, the &lt;SCRIPT&gt;
elements are local to the document in which they are defined.</p>

<p>There are two ways of declaring public properties and methods. The first way simply
involves adding the <i>public_</i> prefix to the names of all public properties and
methods. You can also specify properties by declaring them as functions with the 
<i>public_get_</i> and <i>public_put_</i> prefixes. This allows you finer control over the
property&#8212;for example, you could make a property read-only by specifying a 
<b>public_get()</b> function and not a <b>public_put()</b> function.</p>

<p>The following example shows a simple scriptlet containing a paragraph named <i>p1</i>.
The script block following the paragraph exposes a property called <b>text</b> and
another called <b>color</b>, which is defined using <b>get</b> and <b>set</b>
functions. The scriptlet also exposes a function called <b>animate()</b>.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FONT ID=&quot;f1&quot; color=&quot;black&quot;&gt;
&lt;P ID=&quot;p1&quot;&gt;This is a paragraph of text.&lt;/P&gt;
&lt;/FONT&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
var public_text = p1.innerText;
function public_get_color()
{
     return f1.color;
}
function public_put_color(color)
{
     f1.color = color;
}
function public_animate()
{
     // Code to perform animation
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>If a client page were to declare an instance of this scriptlet object (you will see
how this is done later), naming it <b>MyScriptlet</b>, any of the following JavaScript
operations would be legal:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>MyScriptlet.text = &quot;Hello&quot;;
&#8230;
MyScriptlet.animate();
&#8230;
var OldColor = MyScriptlet.color;
&#8230;
MyScriptlet.color =&quot;blue&quot;;</pre>
</td></tr>
</table>
</p>

<p>The second method of defining the public interface of a scriptlet is to use the
JavaScript <b>public_description</b> object. You create a JavaScript constructor
function that declares your scriptlet's public properties and methods, and you
assign this function to the scriptlet's <b>public_description</b> object.
Properties and methods within the scriptlet document that are not declared within the
constructor function are private.</p>

<p>Using the <b>public_description</b> method, the scriptlet from our previous example
would look as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;FONT ID=&quot;f1&quot; color=&quot;black&quot;&gt;
&lt;P ID=&quot;p1&quot;&gt;This is a paragraph of text.&lt;/P&gt;
&lt;/FONT&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
public_description = new CreateScriptlet();
function CreateScriptlet()
{
this.text = p1.innerText;     // text property
this.put_color = putcolor;     // color property (write)
this.get_color = getcolor;     // color property (read)
this.animate = doAnimation;     // animate() method
}
function getcolor()
{
     return f1.color;
}
function putcolor(color)
{
     f1.color = color;
}
function doAnimation()
{
     // Code to perform animation
}
&lt;/SCRIPT&gt;
&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>The name of the constructor function (it can have any name) is assigned to the 
<b>public_description</b> object. In the example just given, the <b>CreateScriptlet()</b>
constructor function specifies the <b>text</b> and <b>color</b> properties, assigning a
value for the text property and specifying the names of the private functions 
<b>getcolor()</b> and <b>putcolor()</b> used to get and set the color property values. The
function also specifies the <b>animate()</b> method and the name of the private
function <b>doAnimation()</b> that implements the method.</p>

<p>Using the <b>public_description</b> object is the preferred method of seasoned
object-oriented software developers. This technique creates a clear distinction between
interface and implementation, and it allows you to neatly define the interface of the
scriptlet in a single location&#8212;usually at the beginning of a &lt;SCRIPT&gt;
block.</p>

<A NAME="445"><H3>Scriptlet Events</H3></A>

<p>An application containing a scriptlet can be notified about events that occur in the
scriptlet. A DHTML scriptlet can expose two types of events:</p>

<ul>
<p><li><b>Standard DHTML events</b> include the <b>onclick</b> event and the 
<b>onkeypress</b> event.</li></p>

<p><li><b>Custom events</b> are events that you define or DHTML events not provided as
standard events. For example, the scriptlet can fire an event when a property value
changes.</li></p>
</ul>


<p><li><b> Handling Standard Events</b></li></p>

<p>A DHTML scriptlet can expose any of these standard DHTML events:</p>

<ul>

<p><li>onclick</li></p>

<p><li>ondblclick</li></p>

<p><li>onkeypress</li></p>

<p><li>onkeydown</li></p>

<p><li>onkeyup</li></p>

<p><li>onmousemove</li></p>

<p><li>onmousedown</li></p>

<p><li>onmouseup</li></p>
</ul>


<p>You will recall from our introduction to DHTML scriptlets that one of the services
provided by the Scriptlet Component is to forward events fired by the scriptlet to the
control container. For example, suppose a user double-clicks the mouse in the scriptlet
body. The DHTML <b>ondblclick</b> event is intercepted by the Scriptlet Component, and
it might react by passing on a corresponding event of the appropriate type to its
container. However it is important to understand that it will do this <i>only if</i> it 
is specifically instructed to do so by an element of the scriptlet code.</p>

<p>To pass an event from the scriptlet to the container application, you must provide
an event handler for the event you want to pass, and call the <b>bubbleEvent</b> method
from the event handler. The <b>bubbleEvent</b> method is provided by the Scriptlet
Component, and is accessed through the <b>window.external</b> object.</p>

<p>To continue with our example, you would handle mouse double-clicks in the scriptlet
body by specifying the body as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY ondblclick = passthru()&gt;
...
&lt;/BODY&gt;</pre>
</td></tr>
</table>
</p>

<p>To forward the event to the container, you would define the <b>passthru()</b>
function as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>function passthru()
{
     if(!window.external.frozen)
          window.external.bubbleEvent();
}</pre>
</td></tr>
</table>
</p>

<p>Note that before it attempts to forward the event, the routine checks the Scriptlet
Component's <i>frozen</i> property to ensure that it is ready to handle events.</p>

<p><li><b> Creating and Handling Custom Events</b></li></p>

<p>In addition to handling the standard DHTML events, you can make your scriptlet fire
custom events. You can use custom events to:</p>

<ul>
<p><li>Send more detail about a standard event that occurred&#8212;for example, which of
several buttons in the scriptlet was clicked.</li></p>

<p><li>Notify the host application about non-standard changes in the scriptlet, such as
when the value of a property changes.</li></p>

<p><li>Notify the host application about DHTML events that are not among the standard
events handled by the <b>bubbleEvent</b> method.</li></p>
</ul>


<p>You can fire custom events from anywhere in your scriptlet code by using the 
<b>raiseEvent</b> method. The following example shows how you can use a custom event to
notify the container application that the scriptlet's background color has been changed:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
function public_put_backgroundColor(value)
{
     window.document.bgColor = value;
     if(!window.external.frozen)

     window.external.raiseEvent(&quot;onbgcolorchange&quot;,
          value);
}
&lt;/SCRIPT&gt;</pre>
</td></tr>
</table>
</p>

<p>You will notice that the <b>raiseEvent</b> method takes two parameters. The
first parameter specifies a name for the event so that it can provide a standard interface
to its container. The Scriptlet Component routes all custom scriptlet events through a
single event named <b>onscriptletevent</b>. You can query the <i>name</i> parameter to
identify which event has been fired. The second parameter can be used to pass data 
associated with the event.</p>

<p>The following code below illustrates how Internet Explorer could handle the 
<b>onbgcolorchange</b> event raised in the previous example:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot; 
     FOR=&quot;MyScriptlet&quot; 
     EVENT=&quot;onscriptletevent (event, obj)&quot;&gt;
     if(event == &quot;onbgcolorchange&quot;)
     {
          msg = &quot;Scriptlet background changed to &quot; + obj;
          alert(msg);
     }
&lt;/SCRIPT&gt;</pre>
</td></tr>
</table>
</p>

<A NAME="446"><H3>Scriptlet Example</H3></A>

<p>To help you understand how scriptlets work, and how you can use them in your
applications, we have included the <b>ColorSelector</b> scriptlet&#8212;a simple control
that allows you to browse through a set of colors and select one. The source code for
the scriptlet is available from Chapter 12\Exercises\ColorSelector.htm on the companion
CD:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;!&#8212; ColorSelector.htm &#8212;&gt;
&lt;HTML&gt;&lt;HEAD&gt;&lt;/HEAD&gt;
&lt;BODY style=&quot;border:2px solid black;
     color:white; background-color:white &quot;
     ondblclick = passthru()&gt;

&lt;DIV ID=d1 style=&quot;position:relative; border:1px solid black;
top:5; left:5; width:130; height:50&quot;&gt;
&lt;/DIV&gt;

&lt;P ID=p1 style=&quot;position:relative; left:13&quot;&gt;
&lt;BUTTON ID=BackButton onclick = cycle(&quot;back&quot;)&gt; &lt; &lt;/BUTTON&gt;.
&lt;BUTTON ID=ForwardButton onclick = cycle(&quot;forward&quot;)&gt; &gt; &lt;/BUTTON&gt;
&lt;BUTTON ID=SelectButton onclick = doSelect()&gt; Select &lt;/BUTTON&gt;
&lt;/P&gt;
&lt;/BODY&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
public_description = new colorselector();
var colors = new Array(&quot;white&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;black&quot;) ;
var numcolors = colors.length;
var curcolor = 0;

// Object description
function colorselector()
{
     this.get_color = getcolor;
}

// Public property access function
function getcolor()
{
     return colors[curcolor];
}

// Events
// Standard
function passthru()
{
     if(!window.external.frozen)
          window.external.bubbleEvent();
}

// Custom
function doSelect()
{
     if(!window.external.frozen)
          window.external.raiseEvent(&quot;onClickSelect&quot;, colors[curcolor]);
}

// Private methods
function cycle(direction)
{
     if(direction == &quot;back&quot;)
     {
          curcolor &#8212; ;
          if(curcolor &lt; 0)
               curcolor = numcolors-1;
     }
     if(direction == &quot;forward&quot;)
     {
          curcolor++;
          if(curcolor &gt;= numcolors)
               curcolor = 0;
     }
     d1.style.backgroundColor = colors[curcolor];
}
&lt;/SCRIPT&gt;
&lt;/HTML&gt;</pre>
</td></tr>
</table>
</p>

<p>By examining the <b>colorselector()</b> function assigned to the scriptlet's 
<b>public_description</b> object, you will be able to see that the scriptlet exposes a single
read-only property named <b>color</b>. Note that the scriptlet exposes the standard 
<b>ondblclick</b> event and raises a custom event named <b>onClickSelect</b>.</p>

<A NAME="447"><H3>Hosting Scriptlets in a Web Page</H3></A>

<p>Like regular ActiveX controls, scriptlets can be placed in a Web page by using the
HTML &lt;OBJECT&gt; tag. Unlike regular ActiveX controls, scriplets are not identified
using a ClassID. Instead, you assign the scriptlet <b>MIME</b> type to the <b>TYPE</b>
attribute, and a URL that points to the scriptlet source file to the <b>DATA</b>
attribute. MIME (Multipurpose Internet Mail Extensions) is an Internet protocol that
allows a Web browser to identify the type of file that it is displaying. The
<b>b</b> type that identifies a scriptlet is <i>text/x-scriptlet</i>.</p>

<p>The following example shows you how to place a scriptlet defined in the MyScriptlet.htm
file.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT ID=&quot;MyScriptlet&quot; TYPE=&quot;text/x-scriptlet&quot;DATA=&quot;MyScriptlet.htm&quot;&gt;
&lt;/OBJECT&gt;</pre>
</td></tr>
</table>
</p>

<p>This code assumes that the MyScriptlet.htm file can be found in the same directory
as the current file.</p>

<p>With the <b>ColorSelector</b> scriptlet, we have included a simple HTML page that
allows you to test the scriptlet. <i>TestScriptlet.htm</i> is located in the
Chapter