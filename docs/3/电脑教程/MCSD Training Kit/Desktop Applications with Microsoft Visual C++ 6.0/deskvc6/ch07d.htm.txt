<HTML>
<HEAD>
<TITLE>Lesson 3: Introduction to ADO</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm", "ch07e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="297"><H1>Lesson 3: Introduction to ADO</H1></A>

<p>Microsoft now recommends the use of ADO as a standard interface to all kinds of
external data. Because ADO is based on COM technology, you will not learn how to use
the ADO API directly until you have learned more about COM. <A HREF="ch10a.htm">Chapter 10</A>, <i>COM
Clients</i>, shows you how to create and use ADO objects within your C++ application
code.</p>

<p>As an introduction to using ADO technology, this lesson shows you how to use the ADO
Data Control to display records from an OLE DB data provider in a dialog-based
application.</p>

<p>
<div class="sidebar"><blockquote>

<b>After this lesson, you will be able to:</b>

<ul>

<p><li> Describe the advantages of using ADO objects.</li></p>

<p><li> Describe the components and the structure of the ADO object model.</li></p>

<p><li> Describe how to use the ADO Data Control and data-bound ActiveX controls to
display records from an OLE DB data provider.</li></p>

</ul>

<b>Estimated lesson time: 30 minutes</b>

</blockquote></div>
</p>


<A NAME="298"><H2>Advantages of Using ADO</H2></A>

<p>ADO is designed as an easy-to use application interface to OLE DB. ADO is easy to
use because it exposes Automation objects that abstract the OLE DB interfaces. This
allows the programmer to focus on the tasks to accomplish rather than the complexity of
OLE DB. Any development platform that supports COM and Automation, which includes
scripting languages such as Microsoft Visual Basic Scripting Edition (VBScript) and
Microsoft JScript, can use ADO objects. This means that ADO can be used in Web-based
development, using technologies such as Active Server Pages (ASP); as well as in
desktop application development environments such as Visual C++ and Visual Basic.</p>

<p>For more information about Automation technology, see <a href="ch08d.htm#327">Lesson 3</a> of Chapter 8.</p>

<p>ADO recordsets are unique because they can be disconnected from the data source.
Disconnected recordsets can be passed to other applications; and updates can be made to
the data in the recordset, without requiring any network trips or connections to the
data source. This feature is particularly useful in Web-based applications.</p>

<p>The ADO object model has fewer objects and is easier to use when compared to other
data access objects such as DAO or RDO.</p>


<A NAME="299"><H2>ADO Object Model</H2></A>

<p>The ADO object model is designed to present the most commonly used features of OLE
DB. As illustrated in Figure 7.14, the ADO object model has three main components, the
<b>Connection</b> object, the <b>Command</b> object, and the <b>Recordset</b>
object:</p>

<ul>

<p><li> The <b>Connection</b> object makes a connection between your application and an
external data source, such as SQL Server. The <b>Connection</b> object also provides a
mechanism for initializing and establishing the connection, executing queries, and
using transactions. It is the highest-level object in the ADO object model.</li></p>

<p><li> The <b>Command</b> object builds queries, including user-specific parameters, to
access records from a data source. Typically, these records are returned in a <b>
Recordset</b> object. <b>Command</b> objects are created from a database table, or an
SQL query. You can also create relationships between <b>Command</b> objects to retrieve
a set of related data in the form of a hierarchy.</li></p>

<p><li> The <b>Recordset</b> object accesses records returned from an SQL query. You
can use <b>Recordset</b> objects to permit users to edit, add, or delete records in
the data source.</li></p>

<p>
<A HREF="javascript:fullSize('F07DA14x.htm')"> <img src="images/F07DA14.JPG" width=404 height=296 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 7.14</b> <i>The ADO object model</i><!-- /caption -->
</p>
</ul>

<p>The ADO object model differs from the DAO and RDO object models in that many of the
objects can be created independently of one another. ADO objects are stored in a
hierarchical format, but the hierarchy is de-emphasized so that you create only the
objects that you need for your solution. You can create a <b>Recordset</b>, <b>
Connection</b>, or <b>Command</b> object directly, without having to create their
parent objects. For example you can create a <b>Recordset</b> object without first
explicitly creating a <b>Connection</b> object. ADO implicitly creates the required <b>
Connection</b> object for you.</p>


<A NAME="300"><H3>ADO Collections</H3></A>

<p>In addition to the three main objects, ADO supports three collections that can
provide additional functionality to your applications:</p>

<ul>

<p><li> <b>Errors Collection</b>  Any operation involving ADO objects can generate
one or more provider errors. As each error occurs, one or more error objects are placed
in the <b>Errors</b> collection of the <b>Connection</b> object. Each <b>Error</b>
object represents a specific provider error, not an ADO error.</li></p>

<p><li> <b>Parameters Collection</b> A <b>Command</b> object has a <b>Parameters</b>
collection made up of <b>Parameter</b> objects. The <b>Parameters</b> collection is
used to pass specific data to the parameterized query or stored procedure encapsulated
by the <b>Command</b> object. It is particularly useful if you need to retrieve the
value of output parameters from a stored procedure.</li></p>

<p><li> <b>Fields Collection</b> A <b>Recordset</b> object has a <b>Fields</b> collection
made up of <b>Field</b> objects. Each <b>Field</b> object corresponds to a column in
the recordset. You use the <b>Fields</b> collection to access specific fields in an
existing <b>Recordset</b> object.</li></p>

</ul>

<p>In addition to their inherent object properties, ADO objects support the 
<b><i>Properties</i></b> collection. This is a collection of <b>Property</b>
objects, which contain provider- specific information about the object. For example,
the <b>Properties</b> collection of the <b>Connection</b> object contains <b>
Property</b> objects that specify the maximum number of columns or the maximum row size
of the current provider.</p>


<A NAME="301"><H2>Using the ADO Data Control</H2></A>

<p>The ADO Data Control is a graphical ActiveX control, complete with record navigation
buttons, which provides an easy-to-use interface to help you create database
applications with a minimum of code. The ADO Data Control uses ADO to quickly create
connections between data-bound controls and data providers. Data-bound controls are
ActiveX user-interface controls that have two important characteristics:</p>

<ul>

<p><li> A <i>DataSource</i> property, which can be set to the ID of an ADO Data
Control</li></p>

<p><li> The ability to display data retrieved by the ADO Data Control to which they are
bound</li></p>

</ul>

<p>When you bind controls to an ADO Data Control, each field is automatically displayed
and updated when navigating through records. This behavior is implemented by the
controls themselves&#8212;you do not have to write any code.</p>

<p>Visual C++ includes several data-bound ActiveX controls such as the Microsoft
DataGrid and Microsoft DataList Controls. You can also create your own data-bound
controls or purchase controls from other vendors.</p>

<p>In the following exercises, you will create a simple dialog-based application, which
uses the ADO Data Control and the DataGrid Control to display records from the <i>
authors</i> table of the <i>pubs</i> database. You will also learn how to set the
properties of these controls from within your application source code.</p>

<p><li> <b>To create the ViewDB Application</b></li></p>

<ol>

<p><li> Start a new <b>MFC AppWizard (.exe)</b> project to create an application named
<b>ViewDB</b>.</li></p>

<p><li> In Step 1 of the AppWizard, select <b>Dialog based</b>, and then click <b>
Finish</b>.</li></p>

<p><li> Click <b>OK</b> to confirm the selection.</li></p>

</ol>

<p>A dialog-based application is the simplest form of application that can be created
by the AppWizard; such an application is not a document/view application. The
application main window is a modal dialog box, and the application terminates when this
dialog box is closed.</p>

<p>The AppWizard creates a dialog template and a dialog class for the main window
dialog box. For the ViewDB application it has created the <b>IDD_VIEWDB_ DIALOG</b>
template and the <b>CViewDBDlg</b> class. The <b>IDD_VIEWDB_DIALOG</b> template
resource should be currently open in the dialog editor.</p>

<p>The ADO Data Control and the DataGrid Control are installed as part of a standard
installation of Visual C++. However, before you can place them in your application
dialog box, you must use the Components and Controls Gallery to insert the controls
into your project.</p>

<p>Inserting an ActiveX control into your project makes it available for you to use
by:</p>

<ul>

<p><li> Placing an icon on your <b>Controls</b> toolbar so that you can use the mouse to
place the control when editing a dialog template.</li></p>

<p><li> Creating C++ classes for your project that wrap the Automation interfaces exposed
by the control. You can use these classes to get and set the control properties, and to
call the methods that the control provides.</li></p>

</ul>

<p><li> <b>To insert ActiveX controls into a project</b></li></p>

<ol>

<p><li> From the <b>Add to Project</b> option on the <b>Project</b> menu, select <b>
Components and Controls</b>.</li></p>

<p><li> In the <b>Components and Controls Gallery</b>, double-click the <b>Registered
ActiveX Controls</b> folder to display all ActiveX controls registered on your
system.</li></p>

<p><li> Click <b>Microsoft ADO Data Control, version 6.0 (OLE DB)</b> and then
click <b>Insert</b>.</li></p>

<p><li> Click <b>OK</b> to insert the component. Click <b>OK</b> to confirm that you
want to generate classes for the control.</li></p>

<p><li> Repeat the process to insert the <b>Microsoft DataGrid Control, Version 6.0 (OLE
DB)</b> into the project.</li></p>

<p><li> Click <b>Close</b> to close the Components and Controls Gallery.</li></p>

</ol>

<p>You will now see that icons for the ADO Data Control and the DataGrid Control have
been added to your <b>Controls</b> toolbar.</p>

<p>Using Figure 7.15 as a guide, edit the IDD_VIEWDB_ DIALOG
template by taking the following steps:</p>

<p><li> <b>To edit the IDD_VIEWDB_DIALOG template</b></li></p>

<ol>

<p><li> Remove the static text control that reads <b>TODO: Place dialog controls
here</b>.</li></p>

<p><li> Set the dialog box caption to read <b>View Database</b>.</li></p>

<p><li> Place an ADO Data Control as shown in Figure 7.15. Edit the properties to remove
the caption. Leave the control ID as <b>IDC_ADODC1</b>.</li></p>

<p><li> Place a DataGrid Control as shown in Figure 7.15. Change the caption to read <b>
Authors</b>. Leave the control ID as <b>IDC_DATAGRID1</b>. On the Control page of the
DataGrid Control <b>Properties</b>, clear the <b>AllowUpdate</b> checkbox to make the
control read-only.</li></p>

<p><li> Add a static text control that displays the text <b>Order by:</b>. Next to this
add a list box control that is tall enough to take two lines of text, as shown in
Figure 7.15. Assign the list box the ID <b>IDC_ORDERLIST</b>.</li></p>

<p><li> Reorganize the <b>OK</b> and <b>Cancel</b> buttons as shown in Figure 7.15.</li></p>

<p>
<A HREF="javascript:fullSize('F07DA15x.htm')"> <img src="images/F07DA15.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 7.15</b> <i>Editing the IDD_VIEWDB_DIALOG template</i><!-- /caption -->
</p>

</ol>

<p><li> <b>To connect the ADO Data Control to the data source</b></li></p>

<ol>

<p><li> Edit the properties of the <b>IDC_ADODC1</b> ADO Data Control. On the <b>
Control</b> page, make sure that <b>Use Connection String</b> is selected. Click <b>
Build</b> to create a connection string.</li></p>

<p><li> The <b>Data Link Properties</b> dialog box appears. On the <b>Provider</b> page,
select <b>Microsoft OLE DB Provider for SQL Server</b>. Click <b>Next</b> to proceed to
the <b>Connection</b> page.</li></p>

<p><li> Type <b>(local)</b> as the server name. Select <b>Use Windows NT integrated
security</b>, or enter a SQL Server account name and password, as appropriate.</li></p>

<p><li> Select the <b>pubs</b> database on the server.</li></p>

<p><li> Click <b>Test Connection</b>. If the test is successful, click <b>OK</b> to save
the <b>Data Link</b> properties.</li></p>

<p><li> Reopen the <b>ADO Data Control</b> <b>Properties</b> dialog box. Select the <b>
RecordSource</b> page.</li></p>

<p><li> From the <b>Command Type</b> drop-down list select <b>1 - adCmdText</b>, which
is an ADO-defined constant that specifies that you will supply a textual definition of
an SQL command. Notice the other options that indicate that you will specify a table
name or a stored procedure name.</li></p>

<p><li> In the <b>Command Text (SQL)</b> box, type the following command:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
SELECT au_fname,au_lname,state FROM authors
</pre></td></tr></table>
</p>

<p><li> Close the <b>ADO Data Control</b> <b>Properties</b> dialog box.</li></p>

</ol>

<p><li> <b>To bind the DataGrid Control to the ADO Data Control</b></li></p>

<ol>

<p><li> Edit the properties of the <b>IDC_DATAGRID1</b> DataGrid Control. Select the <b>
All</b> page, which displays a list of all available control properties. To see this
page, you might have to scroll to the right by using the arrow key to the top right of
the <b>Properties</b> dialog box.</li></p>

<p><li> Click in the <b>Value</b> column of the <b>DataSource</b> property (currently
displaying the text <b>&lt;Not bound to a DataSource&gt;</b>). As you click here, a
drop-down list control appears. From this list, select the ID of the ADO Data Control:
<b>IDC_ADODC1</b>.</li></p>

<p>You can test your dialog box by pressing CTRL+T or by clicking the light-switch icon
to the left of the <b>Dialog</b> toolbar. The dialog box should appear
as shown in Figure