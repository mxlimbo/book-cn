<HTML>
<HEAD>
<TITLE>Lab 13: Debugging the STUpload Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13h.htm", "ch13j.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="529"><H1>Lab 13: Debugging the STUpload Application</H1></A>

<p>In this section, you will use the Visual C++ debugger to investigate the STUpload
application as it runs. The lab exercises implement the debugger's Variables,
Watch, Call Stack, and Disassembly windows, and demonstrate how these windows all
contribute to the debugging effort. You will also set breakpoints at various locations
and examine the effects of data breakpoints.</p>

<p><b>Estimated lesson time: 15 minutes</b></p>


<A NAME="530"><H2>Running STUpload in the Debugger</H2></A>

<p>In this exercise, you will run STUpload in the debugger until the MFC framework
calls the application's <b>CMainFrame::OnCreate()</b> function. This function
executes early in the application's run cycle, before documents and views are
created and before the STUpload window appears on the screen. This process provides the
opportunity to single-step through <b>OnCreate()</b> for an inside view of how an MFC
program begins life.</p>

<p>The first step of the exercise is to build a debug version of the program, which is
necessary to run the debugger. If you have already created a debug version of STUpload
for labs in earlier chapters, skip to the second procedure.</p>

<p><li> <b>To build a debug version</b></li></p>

<ol>
<p><li> Open the STUpload project.</li></p>

<p><li> In the larger of the two text boxes on the <b>Build</b> toolbar, select <b>Win32
Debug</b>. Alternatively, you can click the <b>Set Active Configuration</b> command on
the <b>Build</b> menu and select <b>Win32 Debug</b>.</li></p>

<p><li>Click the <b>Build</b> button on the <b>Build</b> toolbar, or click the
<b>Build</b> command on the <b>Build</b> menu to compile and link the
application.</li></p>
</ol>

<p><li> <b>To stop execution at CMainFrame::OnCreate()</b></li></p>
<ol>
<p><li>On the <b>FileView</b> tab of the Visual C++ Workspace window, expand the list
of source files. Double-click <b>MainFrm.cpp</b> in the list to open the file.</li></p>

<p><li>Scroll down to find the beginning of the <b>OnCreate()</b> function, which looks
like this in the source code:</li></p>


<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)</pre>
</td></tr>
</table>
</p>


<p><li>Click the function's opening brace to set the insertion point there. This
action identifies the line at which the program should stop.</li></p>


<p><li>Launch the debugger by choosing <b>Start Debug</b> from the <b>Build</b>
menu and clicking the <b>Run to Cursor</b> command.</li></p>

</ol>

<p>The debugger begins first, then automatically runs the STUpload program. When <b>
CMainFrame::OnCreate()</b> gains control, execution halts at the line containing the
insertion point. The instruction has not yet executed, but is next in line to do so
when the program resumes.</p>

<p>Although no C++ code appears associated with the function's opening brace, code
nevertheless exists before the first C++ instruction, as you can see by clicking the
<b>Disassembly</b> tool in the debugger toolbar. The assembly language instructions
that appear in the source window are the function's prologue code, in which a stack frame is created and the class's <b>this</b> pointer is stored as a local variable. Click the <b>Disassembly</b> tool again to restore the normal Source window.</p>

<A NAME="531"><H2>Stepping Through Code</H2></A>

<p>This exercise demonstrates how to single-step through the <b>OnCreate()</b> function
using the <b>Step Into</b>, <b>Step Over</b>, and <b>Step Out</b> tools. The exercise
also shows how to read information in the debugger's Variables and Call Stack
windows while stepping through code.</p>

<p><li> <b>To see the Variables and Call Stack windows</b></li></p>

<ol>
<p><li> If the Variables window does not appear on your screen, click the <b>
Variables</b> tool on the debugger toolbar to expose the window. In its undocked state,
it appears as shown in Figure