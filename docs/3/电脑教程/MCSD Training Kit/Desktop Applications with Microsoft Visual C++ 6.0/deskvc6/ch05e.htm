<HTML>
<HEAD>
<TITLE>Lesson 4: Context-Sensitive Help</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05d.htm", "ch05f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="211"><H1>Lesson 4: Context-Sensitive Help</H1></A>

<p>Windows applications usually provide context-sensitive Help, allowing the user to
get help on a particular feature of an application, such as a dialog box, a command, or
a toolbar button.</p>

<p>Currently, Windows provides two distinct Help authoring environments: the traditional
Windows Help system <i>WinHelp</i>, based on rich text format (RTF) documents; and the
newer <i>HTML Help</i> system, based on compiled HTML documents.</p>

<p>In this chapter, you will learn how to provide context-sensitive Help for your
applications using application framework features provided by the MFC AppWizard. You
will also learn the basic steps required to implement HTML Help for an application.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<ul>
<p><li> Describe how a Windows application implements context-sensitive Help.</li></p>

<p><li> Describe how to add context-sensitive Help to an MFC AppWizard application.</li></p>

<p><li> Describe the components of WinHelp development.</li></p>

<p><li> Describe how to display HTML-based Help for an application.</li></p>
</ul>


<b>Estimated lesson time: 40 minutes</b>
</blockquote></div>
</p>


<A NAME="212"><H2>WinHelp</H2></A>

<p>Applications that use the Windows Help system respond to user requests for Help by
loading the WinHelp application (Winhlp32.exe) located in the system folder.</p>

<p>WinHelp displays pages from the application Help file. The application Help file
resides in the same directory as the application executable file and has the same file
name but with an .hlp extension. The page that is displayed is determined by the <i>
help context</i>, a parameter passed to WinHelp by the application.</p>

<p>The user can access the application Help in the following ways:</p>

<ul>
<p><li> <b>Pressing the F1 key</b> The user can press the F1 key from an active window,
dialog box, or message box, or with a command or toolbar button selected, to invoke a
Help topic relevant to the selected item. For commands, Help is summoned for the item
currently selected.</li></p>

<p>Note that although you can define any key as a Help key, the F1 key is the accepted
standard.</p>

<p><li> <b>Entering Help mode</b> From within an active application, the user can press
SHIFT+F1 or click the <b>Help</b> button to activate &quot;Help mode.&quot;</li></p>

<p>In Help mode, the mouse pointer changes to an arrow with a question mark. While the
application is in this mode, the user can click any window, dialog box, message box,
command, or toolbar button to summon Help specific to the item. Help mode ends when
Help is displayed. Pressing ESC or switching away from the application and then back to
the application ends Help mode.</p>

<p><li> <b>Using the Help menu</b> Most applications provide Help support through one or
more commands. For instance, most Windows applications include a <b>Help</b> command
that invokes the application's Help file when chosen. Additional commands on the
<b>Help</b> menu might display a <b>Search</b> dialog box or provide a link to a Web
site for more information.</li></p>
</ul>

<A NAME="213"><H3>AppWizard Support for Context-Sensitive Help</H3></A>

<p>The MFC application framework provides extensive support for the implementation of WinHelp. Selecting the context-sensitive Help option when using the MFC
AppWizard will set up your project with everything you need to create WinHelp for your
application with minimal effort.</p>

<p>The following exercises show you how to use the AppWizard to create a project that
provides support for context-sensitive Help, and they demonstrate how application Help
pages are displayed.</p>

<p><li> <b>To create the MyHelpApp project</b></li></p>

<ol>
<p><li> Use the <b>New</b> command on the <b>File</b> menu to create a new MFC AppWizard
(exe) project named <b>MyHelpApp</b>.</li></p>

<p><li> On the Step 1 screen of the MFC AppWizard, select <b>Single document</b>.</li></p>

<p><li> Select the default options for Steps 2 and 3. For Step 4, select the <b>
Context-sensitive Help</b> check box as shown in Figure 5.9.</li></p>

<p>
<A HREF="javascript:fullSize('f05DA09x.htm')"> <img src="images/f05DA09.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!--caption --><b>Figure 5.9</b> <i>The AppWizard context-sensitive Help option</i><!-- /caption -->
</p>

<p><li> Select the default options for the remaining AppWizard steps and create the
MyHelpApp project.</li></p>
</ol>

<p>In the following exercises, you will view the default Help application that is created for your application.</p>

<p><li> <b>To view MyHelpApp Help</b></li></p>

<ol>
<p><li> Press F7 to build the MyHelpApp application.</li></p>

<p><li> Press CTRL+F5 to run the application.</li></p>

<p><li> On the <b>Help</b> menu, click <b>Help Topics</b>. The MyHelpApp application
Help appears.</li></p>

<p><li> Click the <b>Contents</b> tab. Double-click <b>Menus</b> so that the Help screen appears as shown in Figure 5.10.</li></p>

<p>
<A HREF="javascript:fullSize('f05DA10x.htm')"> <img src="images/f05DA10.jpg" width=404 height=398 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.10</b> <i>The MyHelpApp application Help window</i><!-- /caption -->
</p>

<p><li> Select the <b>File</b> <b>menu</b> Help topic. The <b>Close</b> button changes
to the <b>Display</b> button.</li></p>

<p><li> Click <b>Display</b> to view the Help topic about the <b>File</b> menu. The <b>
File</b> menu Help page appears as shown in Figure 5.11.</li></p>

<p>
<A HREF="javascript:fullSize('f05DA11x.htm')"> <img src="images/f05DA11.jpg" width=404 height=371 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.11</b> <i>The <b>File</b> menu Help page</i><!-- /caption -->
</p>
</ol>

<p>Take some time to explore the Help system. Try selecting some of the hyperlinks and
experiment with some of the toolbar and menu options. When you have finished, close the
Help application.</p>

<p><li> <b>To invoke context-sensitive Help</b></li></p>

<ol>
<p><li> Click <b>File</b> in the MyHelpApp application to open the <b>File</b> menu.
Highlight the <b>Print</b> command with the mouse, but do not select it.</li></p>

<p><li> Press the F1 key. The Help application will open and display the <b>Print</b>
command topic.</li></p>

<p><li> Close the Help application. Click in the application window client area to close
the <b>File</b> menu. Position the pointer over the <b>Context Help</b> button so that
the button appears raised and the ToolTip text is displayed. The <b>Context Help</b>
button, which is on the far right of the toolbar, depicts a black cursor arrow next to
a blue question mark.</li></p>

<p><li> Press the F1 key. The Help application will open and display the <b>Context
Help</b> command topic.</li></p>

<p><li> Close the Help application.</li></p>
</ol>

<p><li> <b>To view Help-mode Help</b></li></p>

<ol>
<p><li> Click the <b>Context Help</b> button. Notice how the pointer changes to inform
you that you are in Help mode.</li></p>

<p><li> Click any command or toolbar button to view its Help information.</li></p>

<p><li> Close the Help application.</li></p>
</ol>

<A NAME="214"><H2>Help Development Components</H2></A>

<p>When you choose the context-sensitive Help option for your application, AppWizard
creates an extra subfolder named <i>hlp</i> beneath your main project folder. This
subfolder contains files that are used in the development of your application's
Help file. Figure 5.12 shows Windows Explorer displaying the contents of the hlp folder
for the MyHelpApp project (after the project has been built).</p>

<p>
<A HREF="javascript:fullSize('f05DA12x.htm')"> <img src="images/f05DA12.jpg" width=404 height=254 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.12</b> <i>The MyHelpApp\hlp folder</i><!-- /caption -->
</p>

<p>The following sections explain how these files are used in the Help file development
process.</p>

<A NAME="215"><H3>.hpj Files</H3></A>

<p>A .hpj file is a <i>Help project</i> file that provides the information the Windows
Help compiler needs to build a Help file for your application. Help project files are
maintained by the Microsoft Help Workshop, which is an application that allows you to
visually develop application Help&#8212;.hpj files are to Help Workshop what .dsw files
are to Visual Studio. Like Visual Studio, Help Workshop is capable of hosting several
different types of files.</p>

<p>The Microsoft Help Workshop (<i>hcw.exe</i>) is installed in the \Program Files\
Microsoft Visual Studio\Common\Tools folder as part of a standard installation of
Visual Studio. You can launch Help Workshop by double-clicking a Help project file.
Figure 5.13 shows the MyHelpApp.hpj file open in Help
Workshop.</p>

<p>
<A HREF="javascript:fullSize('f05DA13x.htm')"> <img src="images/f05DA13.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.13</b> <i>Help Workshop displaying MyHelpApp.hpj</i><!-- /caption -->
</p>

<p>The .hpj file contains several sections that can be modified by using the buttons on
the right side of the pane. Options used by the Help compiler are specified in the
Options section displayed in Figure 5.13. Other sections contain references to other
types of files that can be included in the Help project build.</p>

<A NAME="216"><H3>.rtf Files</H3></A>

<p>An .rtf file is a rich text format file that forms the pages in the Help file. The
.rtf files that are to be included in a Help file are listed in the [FILES] section of
the project's .hpj file.</p>

<p>AppWizard supplies skeleton .rtf files that contain Help topics for common elements
of the Windows user interface, such as the <b>File</b> and <b>Edit</b> menus. You can
edit these files to revise the supplied text and add your own application-specific Help
information. To edit .rtf files, you will need to install a word processor, such as
Microsoft Word, that is capable of editing the rich text format.</p>

<A NAME="217"><H3>.bmp Files</H3></A>

<p>The .rtf files can contain references to .bmp files to be used as illustrations.</p>

<A NAME="218"><H3>.hm Files</H3></A>

<p>An .hm file is created by the MakeHm tool. MakeHm reads your Resource.h file and
creates Help context IDs to correspond to the application resource IDs so that each
dialog box, command, or other resource has a Help context ID associated with it. Be
aware that MakeHm is not guaranteed to generate unique IDs and that this can sometimes
result in name collisions.</p>

<p>Your project's .hpj file contains a statement in its [MAP] section that includes
the project's .hm file, as well as the standard .hm file included with MFC. The
Help compiler uses the Help context IDs in these .hm files to determine which Help
topic is associated with each dialog box, command, or other resource.</p>

<p>When adding new resource IDs, you should be careful to use the standard prefixes for
resource IDs so that MakeHm can create the mappings correctly. The names suggested for
your resources by the Visual C++ resource editor use the correct prefixes. For more
information, search for &quot;Preferred Resource ID Prefixes&quot; in the Visual C++
Help file.</p>

<p>Whenever you add new resources to your project, you must add new Help topics for
those resources to your .rtf files. AppWizard creates custom build rules for your
project to so that your Help file is rebuilt when its source files are changed. This
includes a call to MakeHm.exe when the Resource.h file is changed.</p>

<A NAME="219"><H3>.cnt Files</H3></A>

<p>A .cnt file contains the information needed to create the Help file's Contents
screen. You use Help Workshop to visually edit a .cnt file, as shown in Figure
5.14.</p>

<p>
<A HREF="javascript:fullSize('f05DA14x.htm')"> <img src="images/f05DA14.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.14</b> <i>Help Workshop displaying MyHelpApp.cnt</i><!-- /caption -->
</p>

<A NAME="220"><H3>.ph Files</H3></A>

<p>A .ph file is a key-phrase table file created by the Help compiler when the
compression option is specified.</p>

<A NAME="221"><H3>.hlp Files</H3></A>

<p>As mentioned earlier, .hlp files are the application Help files, the output of the Windows Help compiler. The Help compiler creates the .hlp file in your
application's main source code folder. If an output folder (i.e. a Debug or Release
folder) exists, the .hlp file is copied there so that an up-to-date copy of the
application Help is always available when you run the application.</p>

<A NAME="222"><H3>.log Files</H3></A>

<p>A .log file contains messages generated by the Help compiler. They can be viewed
with Help Workshop.</p>

<A NAME="223"><H2>Source Code Components</H2></A>

<p>In addition to creating the files required to build a Help file for your
application, AppWizard adds features to your application source code to implement
context-sensitive Help. The <b>Help Topics</b> option (resource <b>ID_HELP_FINDER</b>)
is added to the <b>Help</b> menu, and the <b>Context Help</b> button (help-mode help, which
has the resource <b>ID_CONTEXT_HELP</b>) is added to the application toolbar. The
ap-plication's accelerator table defines F1 as the context-sensitive help key
(resource <b>ID_HELP</b>), and SHIFT+F1 as the help-mode help key.</p>

<p>These resource IDs are mapped to base class handler functions in the main frame
window's message map, as illustrated by the following code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
     //{{AFX_MSG_MAP(CMainFrame)
     ON_WM_CREATE()
     //}}AFX_MSG_MAP
     // Global Help commands
     ON_COMMAND(ID_HELP_FINDER, CFrameWnd::OnHelpFinder)
     ON_COMMAND(ID_HELP, CFrameWnd::OnHelp)
     ON_COMMAND(ID_CONTEXT_HELP, CFrameWnd::OnContextHelp)
     ON_COMMAND(ID_DEFAULT_HELP, CFrameWnd::OnHelpFinder)
END_MESSAGE_MAP()</pre>
</td></tr>
</table>
</p>

<p>The handler functions all eventually call the <b>CWnd::WinHelp()</b> function, which starts the WinHelp application. <b>OnContextHelp()</b> generates a Help
context ID from the resource ID, which it passes to WinHelp as a parameter to the <b>
WinHelp()</b> function. If the framework fails to generate a valid Help context ID, an
<b>ID_DEFAULT_HELP</b> command message is sent to the application.</p>

<A NAME="224"><H2>Creating Help Topics</H2></A>

<p>In the following exercises, you will add a new menu to the MyHelpApp application
menu and add Help topics for the menu and its item. You will learn how to add Help
context information so that the context-sensitive Help features function correctly.</p>

<p>To complete these exercises, you will need to install a word processor that is capable
of editing rich text format files. In our examples, we have used Microsoft Word.</p>

<p><li> <b>To add the ID_IMPORT_TEXTFILE command</b></li></p>

<ol>
<p><li> From the ResourceView of the MyHelpApp project, open the <b>IDR_MAINFRAME</b> menu in the menu editor. Add a new menu title with the caption <b>&amp;Import</b>. Under this title, create a command with the
caption <b>&amp;Text File</b>. Close and re-open the Menu Item Properties to ensure that
the editor has created the ID <b>ID_IMPORT_TEXTFILE</b> for the command.</li></p>

<p><li> Build the MyHelpApp application. Note that the following messages appear in the
output window:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Making Help include file...
Making Help file...</pre>
</td></tr>
</table>
</p>

<p><li> Locate the MyHelpApp.hm file in the hlp subfolder. Use Notepad to view this
file, and confirm that the MakeHm utility has added the Help context ID <b>
HID_IMPORT_TEXTFILE</b>. Close the MyHelpApp.hm file.</li></p>
</ol>

<p>In the next exercise, you will add topics to the application's .rtf file. To
help you understand the file format, open AfxCore.rtf in your rich text editor. If the
editor contains an option that allows you view hidden text, make that option available.
In Word, this is achieved by choosing <b>Options</b> from the <b>Tools</b> menu and
selecting the <b>Hidden text</b> check box on the <b>View</b> tab. Also, make footnote
editing available&#8212;in Word, choose <b>Footnotes</b> from the <b>View</b> menu.</p>

<p>Figure 5.15 shows how AfxCore.rtf looks in Word's Normal view.</p>


<p>
<A HREF="javascript:fullSize('f05DA15x.htm')"> <img src="images/f05DA15.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.15</b> <i>Microsoft Word displaying AfxCore.rtf</i><!-- /caption -->
</p>

<p>Each Help topic in the .rtf file begins with a hard page break. Each topic might
contain hypertext links to other Help topics. Links are formatted as double-underlined
text and are followed immediately by the link destinations formatted as hidden text.
The link destinations are signified by a pound (#) footnote mark. The footnote text
contains the context name, which can either be a name internal to the Help file or one
of the context IDs specified in the Help project's .hm file. Help uses embedded
context IDs to locate the correct Help topic for context-sensitive Help.</p>

<p>The other special footnote marks identify keywords for searching (K) and for topic
names ($).</p>

<p>The text in double angle-brackets (for example, &lt;&lt;YourApp&gt;&gt; in Figure
5.15) is generic placeholder text generated by the AppWizard, which you replace with
text specific to your application.</p>

<p>In the following exercise, you will create a Help topic for the <b>Import</b> menu
that you added to the MyHelpApp application.</p>

<p><li> <b>To create the Import menu Help topic</b></li></p>

<ol>
<p><li> In the AfxCore.rtf file, replace all instances of &lt;&lt;YourApp&gt;&gt; with
<b>MyHelpApp</b>.</li></p>

<p><li> In the Help Index topic (the first in the file), change the hypertext link item
<b>Record menu</b> to <b>Import menu</b>. (The <b>Record</b> menu is not implemented by
MyHelpApp, so there is no Help topic for it.)</li></p>

<p><li> Change the associated link destination text (the hidden text immediately after
the link text) to <b>menu_import</b>.</li></p>

<p><li> At an appropriate location, add a new topic titled <b>Import Menu Commands</b>.
Ensure that the topic is on its own page. The title should be marked with a # footnote
that points to the text <b>menu_import</b>. The topic page should contain a hypertext
link named <b>Text File</b>, followed by a reference to the jump location <b>
HID_IMPORT_TEXTFILE</b>. The hyperlink should be followed by a brief explanation
formatted as plain text, as shown in Figure 5.16.</li></p>

<p>
<A HREF="javascript:fullSize('f05DA16x.htm')"> <img src="images/f05DA16.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.16</b> <i>The <b>Import</b> menu Help topic</i><!-- /caption -->
</p>

<p><li> At an appropriate location, add another topic titled <b>Text Files command
(Import menu)</b>. The title should be marked with a # footnote that points to the text
<b>HID_IMPORT_TEXTFILE</b>. Add a K footnote that points to the text <b>Text Files</b>,
and a $ footnote that points to the text <b>Importing Text Files.</b> Add a brief
explanation of the topic. Use Figure 5.17 as a
guide.</li></p>

<p>
<A HREF="javascript:fullSize('F05DA17x.htm')"> <img src="images/F05DA17.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.17</b> <i>The Importing Text Files Help topic</i><!-- /caption -->
</p>

<p><li> Save and close the AfxCore.rtf file.</li></p>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><HR>
In a real-world development situation, you would probably want to rename
the AfxCore.rtf and AfxPrint.rtf files once they become specific to your application.
You'd then need to alter the file references in the Visual Studio and the Microsoft
Help Workshop projects. We have omitted this step from the exercises for the sake of
brevity.</blockquote></div></p>

<ol>
<p><li value="7"> Rebuild and run the MyHelpApp application. Press F1 to view your modified
MyHelpApp index page. Search for &quot;Import menu&quot;, and then &quot;Text
files&quot; to locate the Importing Text Files topic. Close the MyHelpApp application Help
file.</li></p>

<p><li> Check that the context-sensitive Help feature works properly for the <b>Text
Files</b> option on the <b>Import</b> menu.</li></p>

<p><li> Open the <b>Help Topics</b> dialog box and search for the &quot;Text files&quot;
topic on the <b>Index</b> tab, and perform a keyword search for the topic on the <b>
Find</b> tab.</li></p>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><HR>
You are able to do this because of the K and $ footnotes you added to the
AfxCore.rtf file.</blockquote></div></p>

<A NAME="225"><H2>HTML Help</H2></A>

<p>HTML Help, Microsoft's next-generation Help development platform, uses the
underlying components of Microsoft Internet Explorer to display Help content. You can
use HTML, ActiveX, Java, scripting (JavaScript and Microsoft Visual Basic Scripting
Edition), and HTML image formats (.jpeg, .gif) to give your application Help system the power and appearance of a fully featured Web site. Your
Help system can provide your customers with links to external resources such as your
company's technical support Web site.</p>

<p>The viewer used by HTML Help contains a toolbar and a contents/index control to help
the user navigate through the Help pages. You should be very familiar with the HTML
Help interface by now, as it is used by the Visual C++ 6.0 Help system.</p>

<p>At some point, Microsoft will likely provide the same kind of support in the MFC
application framework for HTML Help as it has already provided for WinHelp. In the
meantime, if you require an HTML Help system for your application, you will need to
implement it manually. However, your task is made easier because the HTML Help
Workshop, the development environment used to develop HTML Help files, bears a strong
resemblance to WinHelp's Help Workshop. Best of all, the HTML Help Workshop allows
you to convert a WinHelp project (a .hpj file) into an HTML Help project (a <i>.hhp</i>
file). The WinHelp project's rich text files are converted to HTML files, .bmp
files are converted to .gif files, and the WinHelp contents files (.cnt files) are
converted to the HTML Help equivalent <i>.hhc</i> files. The output of the HTML Help
compiler is a <i>.chm</i> file&#8212;a compressed HTML file format.</p>

<p>It is not our intention for this book to cover HTML Help development in depth.
However, we have provided a couple of exercises to get you started. The first exercise
shows you how to use the HTML Help Workshop to convert the WinHelp project that you
created for MyHelpApp into an HTML Help project named MyHHelp.hhp. You will then build
the MyHHelp Help file and add code to the MyApp application to display it.</p>

<p>Before you can complete these exercises, you will need to install HTML Help on your
computer.</p>

<p><li> <b>To install HTML Help</b></li></p>

<ol>
<p><li> Run <b>Htmlhelp.exe</b>, which is located in the \HtmlHelp subfolder on Disc 1
of your Visual C++ or Visual Studio CDs.</li></p>

<p><li> Follow the setup instructions to install HTML Help to this default location: <b>
c:\Program Files\HTML Help Workshop</b>.</li></p>
</ol>

<p><li> <b>To convert the MyHelpApp WinHelp project</b></li></p>

<ol>
<p><li> Close any Visual Studio projects that you have open. Using Windows Explorer,
create a subfolder named <b>hlp</b> inside your MyApp development folder.</li></p>

<p><li> On the <b>Start</b> menu, point to <b>Programs</b>, point to <b>HTML Help
Workshop</b>, and click <b>HTML Help Workshop</b>.</li></p>

<p><li> On the <b>File</b> menu of HTML Help Workshop, click <b>New</b>.</li></p>

<p><li> Specify that you want to create a new project by clicking <b>OK</b>.</li></p>

<p><li> On the first screen of the New Project Wizard, select the <b>Convert WinHelp
Project</b> check box and click <b>Next</b>.</li></p>

<p><li> On the second screen of the New Project Wizard, type the full path to the
MyHelpApp.hpj WinHelp project file into the first edit box (for example, <b>c:\Program
Files\Microsoft Visual Studio\MyProjects\MyHelpApp\hlp\ MyHelpApp.hpj</b>).</li></p>

<p><li> In the second edit box, type the full path of the new <b>hlp</b> folder that you
created in Step 1. Use <b>MyHHelp</b> as the name of the HTML Help project file that
you want to create (for example, <b>c:\Program Files\Microsoft Visual
Studio\MyProjects\MyApp\hlp\MyHHelp</b>).</li></p>

<p><li> Click <b>Next</b> to continue and then click <b>Finish</b>. The MyHHelp.hhp file
is created and opened in HTML Help Workshop, as shown in Figure 5.18.</li></p>

<p>
<A HREF="javascript:fullSize('f05DA18x.htm')"> <img src="images/f05DA18.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.18</b> <i>HTML Help Workshop</i><!-- /caption -->
</p>

<p><li> Click the <b>Save all project files and compile</b> button to create the Help
file. This is the bottom button on the vertical toolbar to the left of the project
information window.</li></p>
</ol>

<p>When the Help compiler has finished, close the HTML Help Workshop. Using Windows
Explorer, locate the MyHHelp.chm file from the ..\MyApp\hlp folder. Double click the
MyHHelp.chm file to run it inside the HTML Help application. You will see how the
WinHelp file that you created for MyHelpApp has been nicely converted into the HTML
Help format, as shown in Figure 5.19.</p>

<p>
<A HREF="javascript:fullSize('f05DA19x.htm')"> <img src="images/f05DA19.jpg" width=404 height=331 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.19</b> <i>The MyHHelp.chm file</i><!-- /caption -->
</p>

<p>In the next exercise, you will learn how to use the HTML Help API to call the
MyHHelp.chm Help file from within the MyApp application. To be able to do this, you
will need to link the HTML Help library to your application.</p>

<p><li> <b>To invoke HTML Help from the MyApp application</b></li></p>

<ol>
<p><li> In Visual C++, open the MyApp project. On the <b>Project</b> menu, click <b>
Settings</b>.</li></p>

<p><li> Click the <b>Link</b> tab. In the <b>Category</b> box, click <b>Input</b>.</li></p>

<p><li> In the <b>Object/library modules</b> box, type <b>htmlhelp.lib</b>.</li></p>

<p><li> In the <b>Additional library path</b> box, type the path to the directory where
the htmlhelp.lib file is installed (for example, <b>c:\Program Files\HTML Help
Workshop\lib</b>).</li></p>

<p><li> Click the <b>C/C++</b> tab. In the <b>Category</b> box, click <b>
Preprocessor</b>.</li></p>

<p><li> In the <b>Additional include directories</b> box, type the path to the directory
where the htmlhelp.h file is installed (for example, <b>c:\Program Files\HTML Help
Workshop\include</b>).</li></p>

<p><li> Click <b>OK</b> to save the settings.</li></p>

<p><li> In FileView, locate and open the StdAfx.h file. Add the following line of code
after the other #include statements:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &lt;htmlhelp.h&gt;</pre>
</td></tr>
</table>
</p>

<p><li> Open the <b>IDR_MAINFRAME</b> menu in the menu editor. Add a new item with the
caption <b>&amp;Help Topics</b> to the <b>Help</b> menu. Close and re-open the <b>Menu
Item Properties</b> dialog box to ensure that the command has been created with the ID
<b>ID_HELP_HELPTOPICS</b>.</li></p>

<p><li> Use ClassWizard to create an <b>OnHelpHelptopics()</b> handler function for the
<b>ID_HELP_HELPTOPICS</b> command message in the <b>CMainFrame</b> class.</li></p>

<p><li> Add the following line of code to the function implementation:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>::HtmlHelp(NULL, 
     C:\\Program Files\\Microsoft Visual           
     Studio\\MyProjects\\MyApp\\hlp\\MyHHelp.chm&quot;,
     HH_DISPLAY_TOPIC, 0);     </pre>
</td></tr>
</table>
</p>

<p>Your code will differ slightly if the path to the .chm file is not the same. Notice that backslash characters embedded in strings need to be represented by the
escape character sequence <b>\\</b>. If you break the string across a line, make sure
that you add a <b>\</b> continuation character.</p>

<p>The <b>HtmlHelp()</b> function is the core of the HTML API. You can use it to
display .chm files, HTML files, URL destinations, or plain text inside a pop-up window.
There are many parameters to the <b>HtmlHelp()</b> function that specify the features
of the display window and what should be displayed, For more information, see
&quot;HTML Help API reference&quot; in the Visual C++ Help files.</p>

<p><li> Build the MyApp application. Don't worry if you get a linker warning
message about library conflicts&#8212;this is a side effect of linking to the
htmlhelp.lib library and will not affect your application. Run the application and
choose <b>Help Topics</b> from the <b>Help</b> menu. The HTML Help application should
appear, displaying the MyHHelp.chm Help file.</li></p>
</ol>

<A NAME="226"><H2>Lesson Summary</H2></A>

<p>Applications written in Windows usually provide context-sensitive Help, which you
can use to get help on features of the application user interface.</p>

<p>Windows applications are now moving from the WinHelp traditional Windows Help
system, which is based on RTF documents, to the newer HTML Help, which is based on
compiled HTML documents. Although Visual C++ ships with a development environment for
producing HTML Help files, the automatic features of the MFC AppWizard, which provide
Help systems for your programs, still employ the WinHelp system.</p>

<p>By convention, users access context-sensitive Help by pressing the F1 key. If a
feature of the user interface, such as a command, toolbar button, or dialog box
control, is currently selected when F1 is pressed, the application should display
context-sensitive Help for the selected feature. An application should also implement
Help mode Help. An application is put into Help mode when the user presses SHIFT+F1 or
selects <b>Help</b> from the toolbar. When in Help mode, the user can gain information
about a user interface element simply by clicking it with the mouse.</p>

<p>The MFC application framework provides extensive support for the implementation of WinHelp. Selecting <b>Context-sensitive Help</b> in Step 4 of the MFC
AppWizard will set up your project with everything you need to create WinHelp for your
application with a minimum of effort. The AppWizard creates a folder named hlp beneath
your project folder and generates a Help project file and source files for your
application Help file. These source files include .rtf files that contain Help topics
for the common elements of the Windows user interface, such as the <b>File</b> and <b>
Edit</b> menus. You can edit these files to revise the supplied text and add your own
application-specific Help information.</p>

<p>Help project files are managed by the Microsoft Help Workshop, which is installed in
the \Program Files\Microsoft Visual Studio\Common\Tools folder as part of a standard
installation of Visual Studio. AppWizard creates custom build rules for your project to
so that your Help file is rebuilt when its source files are changed.</p>

<p>User interface features are linked to topics in the application's Help file by
Help context IDs. These are created from the application resource IDs by the MakeHm
tool and stored in files with the .hm extension as part of the Help project.</p>

<p>An application's Help file is distributed with an <i>.</i>hlp extension. Help is
invoked from within an application source code with a call to the <b>
CWnd::WinHelp()</b> function. The application framework generates an appropriate Help
context ID that it passes to the Help system as a parameter to the <b>WinHelp()</b>
function.</p>

<p>HTML Help is Microsoft's next-generation Help development platform, which uses the
underlying components of Microsoft Internet Explorer to display Help content. You can
use the power of HTML, ActiveX, Java, scripting, and HTML image formats to implement
your application's Help system, which can include links to intranet and
Internet-based resources.</p>

<p>Currently, the AppWizard cannot automatically generate an HTML Help system for your
application. You can manually create a system using the HTML Help development
environment that ships with Visual C++ 6.0. This includes the HTML Help Workshop, which
bears a strong resemblance to the Microsoft Help Workshop, and which allows you to
convert a WinHelp project into an HTML Help project. The WinHelp project's rich
text files are converted to HTML files. An application's HTML Help is contained in
a .chm file&#8212;a compressed HTML file format. HTML Help is invoked from within the
application source code
with a call to the HTML Help API function <b>HTMLHelp()</b>.</p>

</BODY>
</HTML>







