<HTML>
<HEAD>
<TITLE>Lab 10: Implementing the UploadStockData Component</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10c.htm", "ch10e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="396"><H1>Lab 10: Implementing the UploadStockData Component</H1></A>

<p>In this lab, you will provide the implementation for UploadStockData, the
component you created for <a href="ch09d.htm#375">Lab 9</a>. You will add code to implement the <b>
ConnectToDatabase()</b>, <b>Disconnect()</b>, and <b>UploadRecord()</b> methods of the
IUploadStockData interface. These methods use the ADO library to connect
to the Stocks database. To refresh your memory about ADO, refer back to
<a href="ch07d.htm#297">Lesson 3</a> of Chapter 7.</p>

<p>In this Lab, you will also write code to implement the <b>Upload</b> command on the
<b>Data</b> menu of the STUpload application. The user will select this command to
upload the data in the currently loaded document to the Stocks database.</p>

<p>This Lab assumes that you have installed SQL Server and have set up the Stocks
database as directed in the &quot;<A HREF="abouta.htm#8">Getting Started</A>&quot; section of the
introduction.</p>


<A NAME="397"><H2>Creating a Data Link File</H2></A>

<p>The UploadStockData component creates an ADO <b>Connection</b> object to
connect to the Stocks database. You provide the <b>Connection</b> object with
information about which provider, database, and security settings to use by specifying
the details in a connection string. For example, the connection string used by the ADO
data control in my version of the STUpload application is as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security 
Info=False;Initial Catalog=Stocks;Data Source=(local)</pre>
</td></tr>
</table>
</p>

<p>When distributing an application, it is not advisable to hard-code connection
information into the application source code because this might mean that changes to
the database and network configuration will require you to recompile and redistribute
your application. To avoid problems of this kind, you can specify the connection
information in a special disk file known as a <i>data link file</i>. A data link file
has a .udl extension. When OLE DB is installed on your computer, you can configure the
data link file using a simple user interface. After the data link file has been
configured, you simply set the connection string to refer to the file as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>File Name=C:\DataLinks\STLink.udl</pre>
</td></tr>
</table>
</p>

<p>The configuration in the data link file can easily be redistributed or reconfigured
on the client computer if the database or network configuration changes.</p>

<p><li> <b> To create a data link file</b></li></p>

<ol>

<p><li> Using Windows Explorer, create a new folder beneath the root of your hard drive.
Name the folder <b>DataLinks</b>.</li></p>

<p><li> Click the <b>DataLinks</b> folder in the left pane of Windows Explorer.
Right-click in the right pane and on the <b>New</b> menu, click <b>Microsoft Data
Link</b>.</li></p>

<p><li> Rename the new data link file <b>STLink.udl</b>.</li></p>

<p><li> Double-click the <b>STLink.udl</b> file to edit the configuration
information.</li></p>

<p><li> On the <b>Provider</b> page of the <b>Data Link Propertie</b>s dialog box,
click <b>Microsoft OLE DB Provider for SQL Server</b>.</li></p>

<p><li> On the <b>Connection</b> page (shown in Figure 10.4), select your local computer
name as the Server name. Click <b>Use Windows NT Integrated security</b>,
or enter a SQL Server account name and password as appropriate.</li></p>

<p>
<img src="images/F10DA04.JPG" width=367 height=460 border=0>
</p><p>
<!-- caption --><b>Figure 10.4</b> <i>Editing the data link file</i><!-- /caption -->
</p>

<p><li> Click the <b>Stocks</b> database on the server. Test your connection by clicking
<b>Test Connection</b>.</li></p>

<p><li> Click <b>OK</b> to close the message box, and <b>OK</b> again to save the
connection information to the data link file.</li></p>

</ol>


<A NAME="398"><H2>Implementing the IUploadStockData Interface Methods</H2></A>

<p>In this section of the lab, you will return to the STLoadData project and implement
the <b>ConnectToDatabase()</b>, <b>Disconnect()</b>, and <b>UploadRecord()</b> methods
of the <b>IUploadStockData</b> interface exposed by the UploadStockData component. In
the course of completing these exercises, you will learn how a client
can use the COM interfaces supplied by ADO to work with an OLE DB data provider.</p>

<p>The first step is to import the ADO type library to make the GUID definitions
available to the project, and to generate smart pointers for the ADO interfaces.</p>

<p><li> <b> To import the ADO type library</b></li></p>

<ol>

<p><li> Open the <b>STUpload.dsw</b> workspace file in Visual Studio. Make sure
that the full <b>Build</b> toolbar is displayed and then click the <b>STLoadData</b>
project in the drop-down list.</li></p>

<p><li> In FileView, expand the Header Files folder under the <b>STLoadData Files</b>
item. Double-click the <b>StdAfx.h</b> file.</li></p>

<p><li> At the end of the file, just before the //{{AFX_INSERT_LOCATION}}
comment, add the following line:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#import &quot;C:\Program Files\Common Files\System\ado\msado15.dll&quot; \
    no_namespace rename(&quot;EOF&quot;, &quot;adoEOF&quot;)</pre>
</td></tr>
</table>
</p>

<p>The path to the msado15.dll file might be different on your computer. Check that the
version in your code points to the correct location. Note, also, that in the example
just given, a continuation character \ is used to break the statement over two
lines.</p>

<p><li> Save and close the StdAfx.h file.</li></p>

<p><li> In FileView, right-click the <b>StdAfx.cpp</b> file in the Source Files folder.
On the shortcut menu, click <b>Compile StdAfx.cpp</b>.</li></p>

</ol>

<p>The compiler processes the #import statement in the StdAfx.h file and creates the
msado15.tlh and msado15.tli files in your Debug folder. These files contain the GUID
definitions and smart pointer declarations for the ADO interfaces, which are now
available for use in the STLoadData project.</p>

<p>The UploadStockData component will connect to the database through a single ADO <b>
Connection</b> object, which will be used by successive calls to the <b>
UploadRecord()</b> method. This <b>Connection</b> object will be implemented as a
member variable of the component class and will be opened and closed by the <b>
ConnectToDatabase()</b> and <b>Disconnect()</b> methods.</p>

<p><li> <b> To implement the Connection object</b></li></p>

<ol>

<p><li> Add the following <b>protected</b> data member to the definition of the <b>
CUploadStockData</b> class in the UploadStockData.h file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>_ConnectionPtr m_pConnection;</pre>
</td></tr>
</table>
</p>

<p><li> In the same file, add the following line to the <b>CUploadStockData</b>
class constructor:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_pConnection = NULL;</pre>
</td></tr>
</table>
</p>

<p><li> In the UploadStockData.cpp file, locate the <b>CUploadStockData::
ConnectToDatabase()</b> function. Add code to the function so that it
appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>STDMETHODIMP CUploadStockData::ConnectToDatabase()
{
    // Test to see if we're connected already
    if(m_pConnection) return S_OK;

    HRESULT hr = m_pConnection.CreateInstance(__uuidof(Connection));
    if(FAILED(hr)) return hr;

    hr = m_pConnection-&gt;Open(L&quot;File Name=C:\\STLink.UDL&quot;, 
        L&quot;&quot;, L&quot;&quot;, -1);

    if(FAILED(hr)) return hr;

    return S_OK;
}</pre>
</td></tr>
</table>
</p>

<p>Remember that the m_pConnection variable is a <b>_com_ptr_t</b> smart pointer type
that points to the interface exposed by the ADO <b>Connection</b> object.</p>

<p><li> Locate the <b>CUploadStockData::Disconnect()</b> function. Add code to the
function so that it appears as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>STDMETHODIMP CUploadStockData::Disconnect()
{
    if(m_pConnection)
    {
        m_pConnection-&gt;Close();
        m_pConnection = NULL;
    }
    return S_OK;
}</pre>
</td></tr>
</table>
</p>

</ol>

<p>You can now add code to implement the <b>IUploadStockData::UploadRecord()</b>
method.</p>

<p><li> <b> To implement the UploadRecord() method</b></li></p>

<ol>

<p><li> On the <b>Project</b> menu, click <b>Settings</b>. Make sure the STLoadData
project is selected in the left pane. On the <b>C/C++</b> page of the <b>Project
Settings</b> dialog box, click <b>C++ Language</b> in the <b>Category</b> drop-down
list. Click the <b>Enable exception handling</b> option and click <b>OK</b>.</li></p>

<p><li> In the UploadStockData.cpp file, locate the <b>CUploadStockData::
UploadRecord()</b> function. Add code to the function so that it appears
as follows:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH10_03.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>STDMETHODIMP CUploadStockData::UploadRecord(BSTR fund, DATE date, 
     double price, BSTR uplBy, DATE uplDate)
{
     // Test for live connection to data source
     if(m_pConnection == NULL)
          return E_FAIL;

     // Create recordset
     _RecordsetPtr pRecordset;

     HRESULT hr = pRecordset.CreateInstance(__uuidof(Recordset));
     if(FAILED(hr)) return hr;

     try
     {
          // Open recordset
          _variant_t vConnection = m_pConnection.GetInterfacePtr();
          hr = pRecordset-&gt;Open(L&quot;pricehistory&quot;, vConnection, 
               adOpenForwardOnly, adLockOptimistic, adCmdTableDirect);

          if(FAILED(hr)) return hr;

          // Add new record, set fields to new values and update
          hr = pRecordset-&gt;AddNew();
          if(FAILED(hr)) throw_com_error(hr);

          pRecordset-&gt;Fields-&gt;GetItem(L&quot;ph_fund&quot;)-&gt;Value = fund;
          pRecordset-&gt;Fields-&gt;GetItem(L&quot;ph_date&quot;)-&gt;Value = date;
          pRecordset-&gt;Fields-&gt;GetItem(L&quot;ph_price&quot;)-&gt;Value = price;
          pRecordset-&gt;Fields-&gt;GetItem(L&quot;ph_uploadedby&quot;)-&gt;Value = uplBy;
          pRecordset-&gt;Fields-&gt;GetItem(L&quot;ph_uploaddate&quot;)-&gt;
               Value = uplDate;

          hr = pRecordset-&gt;Update();
          if(FAILED(hr)) throw_com_error(hr);
     }
          catch(_com_error e)
          {
               // very unsophisticated error handling
               try
          {
               pRecordset-&gt;Close();
          }
          catch(...) // Close() may throw another exception
          {
          }
          return E_FAIL;
     }
     pRecordset-&gt;Close();

     return S_OK;
}</pre>
</td></tr>
</table>
</p>

<p>Note that the existing Connection object <b>m_pConnection</b> is passed as an
argument to the Recordset <b>Open()</b> method. For details of the other arguments to
<b>Open()</b>, look up &quot;<i>ADO</i>&quot; in the Visual C++ Help file.</p>

<p>Note, too, that the <b>AddNew()</b> and <b>Update()</b> methods of the ADO <b>
Recordset</b> object are used together to add a new record. A new record is added to
the recordset with <b>AddNew()</b>, the field values (accessed through the <b>
Recordset</b> object's <i>Fields</i> collection) are set to the new values, and the
<b>Update()</b> method is called to update the database.</p>

<p><li> You can now build the STLoadData project to re-create and re-register the
STLoadData.dll COM server.</li></p>

</ol>


<A NAME="399"><H2>Implementing the Upload Data Command for the STUpload Application</H2></A>

<p>In the next section of the lab, you will implement the <b>Upload</b> command on the
<b>Data</b> menu of the STUpload application. You will also add a user-interface update
command handler to make the menu and toolbar command available when
a document is currently loaded into the application.</p>

<p><li> <b> To implement the Upload Data command</b></li></p>

<ol>

<p><li> Close all documents currently displayed in the Visual Studio editor.</li></p>

<p><li> On the <b>Build</b> toolbar, click the <b>STUpload</b> project in the drop-down
list.</li></p>

<p><li> Press CTRL+W to open ClassWizard. On the <b>Message Maps</b> tab, click the <b>
CSTUploadDoc</b> class in the <b>Class name</b> drop-down list.</li></p>

<p><li> Create COMMAND and UPDATE_COMMAND_UI handlers named <b>OnDataUpload()</b> and
<b>OnUpdateDataUpload()</b> for the <b>ID_DATA_UPLOAD</b> ID. Click the <b>
OnUpdateDataUpload()</b> function in the <b>Member functions</b> list and click <b>Edit
Code</b> to jump to the function implementation.</li></p>

<p><li> Implement the <b>CSTUploadDoc::OnUpdateDataUpload()</b> function
as follows:</li></p>

<p>
<img src="images/cd.gif" width=45 height=45 border="0">
</p>

<p>(This code can be found in CH10_04.cpp, installed from the companion CD.)</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CSTUploadDoc::OnUpdateDataUpload(CCmdUI* pCmdUI)
{
    // Enable the UploadData command only if there is
    // data on file and a fund currently selected for viewing

    BOOL bEnable = GetCurrentFund().IsEmpty() ? FALSE : TRUE;

    pCmdUI-&gt;Enable(bEnable);
}</pre>
</td></tr>
</table>
</p>

<p><li> At the top of the STUploadDoc.cpp file, add the following directives:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &lt;comdef.h&gt;   // for Compiler COM support
#include &lt;lmcons.h&gt;   // for the UNLEN constant
#include &quot;.\STLoadData\STLoadData.h&quot;
#include &quot;.\STLoadData\STLoadData_i.c&quot;</pre>
</td></tr>
</table>
</p>

<p><li> Locate the <b>CSTUploadDoc::OnDataUpload()</b> function and add code to
implement the function as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CSTUploadDoc::OnDataUpload()
{
     if(AfxMessageBox(&quot;Upload current file to database?&quot;, 
          MB_OKCANCEL) == IDCANCEL)
          return;

     ::CoInitialize(NULL);

     _COM_SMARTPTR_TYPEDEF(IUploadStockData, 
          __uuidof(IUploadStockData));

     IUploadStockDataPtr pServer;

     HRESULT hr = pServer.CreateInstance(CLSID_UploadStockData);

     if(SUCCEEDED(hr))
          hr = pServer-&gt;ConnectToDatabase();

     if(SUCCEEDED(hr))
     {
          try
          {
               POSITION pos = m_DocList.GetHeadPosition();

               while(pos)
               {
                    CStockData sd = m_DocList.GetNext(pos);

                    BSTR fund = sd.GetFund().AllocSysString();
                    DATE date = sd.GetDate().m_dt;
                    double price = sd.GetPrice();

                    DWORD dwLen = UNLEN + 1;
                    TCHAR cUser[UNLEN + 1];
                    ::GetUserName(cUser, &amp;dwLen);
                    CString strUser(cUser);

                    BSTR uplBy = (strUser.Left(10)).AllocSysString();
                    COleDateTime dtToday = 
                         COleDateTime::GetCurrentTime();
                    DATE uplDate = dtToday.m_dt;

                    HRESULT hr = pServer-&gt;UploadRecord(fund,
                         date, price, uplBy, uplDate);

                    ::SysFreeString(fund);
                    ::SysFreeString(uplBy);

                    if(FAILED(hr))
                    {
                         CString strPrompt = &quot;Upload of:\n&quot;;
                         strPrompt += sd.GetAsString();
                         strPrompt += &quot;\nfailed&quot;;

                         if(AfxMessageBox(strPrompt, 
                              MB_OKCANCEL) == IDCANCEL)
                              break;
                    }
               }
               if(!pos) // We got to the end of the loop
                    AfxMessageBox(&quot;Upload completed successfully&quot;);
          }
          catch(_com_error e)
          {
               ::MessageBox(NULL, e.ErrorMessage(), NULL, MB_OK);
          }
          pServer-&gt;Disconnect();
     }
     ::CoUninitialize();
}</pre>
</td></tr></table>
</p>

</ol>

<p>Look through the code to make sure you understand how the code creates
and uses an instance of the UploadStockData component to add to the database 
records contained in the document's <b>m_DocList</b> member. Note that the
Windows API function <b>GetUserName()</b> is used to get the name of the currently 
logged-on user. The first 10 characters of this name are placed in the <b>
ph_uploadedby</b> field in the pricehistory table of the Stocks database.</p>

<p>You can now build the STUpload application.</p>

<p><li> <b> To test the Upload Data command</b></li></p>

<ol>

<p><li> Run the STUpload application. On the <b>Data</b> menu, click <b>Import</b>, and
load the Ch10Test.dat file from the Chapter 10\Data folder.</li></p>

<p><li> Click any fund in the Select Fund window to make the <b>Upload Data</b> command
available.</li></p>

<p><li> On the <b>Data</b> menu, click <b>Upload</b>. Click <b>OK</b> to upload the data
in the file to the pricehistory table of the Stocks database. When the upload has
completed, click <b>OK</b>.</li></p>

<p><li> Re-run the <b>Upload</b> command from the <b>Data</b> menu. Notice now that each
record in the file will fail. This is because the Primary Key constraint on the
pricehistory table will not allow duplicate records to be added. Click <b>Cancel</b> to
abort the upload process. Close the STUpload application.</li></p>

<p><li> Click the <b>Start</b> menu, point to <b>Programs</b>, point to <b>Microsoft SQL
Server 7.0</b>, and open the Query Analyzer application. Connect to your <b>(local)</b>
database.</li></p>

<p><li> Click <b>Stocks</b> in the <b>DB</b> drop-down list on the toolbar.</li></p>

<p><li> In the Query Analyzer main window, type the following:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>select * from pricehistory</pre>
</td></tr>
</table>
</p>

<p><li> Press CTRL+E to execute the SQL query.</li></p>

</ol>

<p>The results of the query will appear in the lower half of the Query Analyzer window
as shown in Figure 10.5. Check to see that the rows that you added appear at the bottom
of the table with your user name and the current date in the ph_uploadedby and
ph_uploaddate columns.</p>

<p>
<A HREF="javascript:fullSize('f10DA05x.htm')"> <img src="images/f10DA05.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 10.5</b> <i>The Query Analyzer displaying the pricehistory table</i><!-- /caption -->
</p>


</BODY>
</HTML>







