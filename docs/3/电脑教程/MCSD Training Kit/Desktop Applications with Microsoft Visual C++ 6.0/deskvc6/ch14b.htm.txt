<HTML>
<HEAD>
<TITLE>Lesson 1: Windows Setup Programs</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14a.htm", "ch14c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="537"><H1>Lesson 1: Windows Setup Programs</H1></A>

<p>Deployment consists of two steps. The first step is to transfer all necessary files
to the users' hard disks. The second step, which is potentially more complicated,
involves configuring the host system so that it recognizes and correctly runs the
installed application. To help ensure proper deployment, you should automate the
process of getting an application up and running as much as possible. Windows users are
accustomed to an installation program that does most of the work for them.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Describe how an application is installed on and removed from a user's
system.</li></p>

<p><li> List the services provided by a typical installation program.</li></p>

<p><li> Describe various entries that an installation program places in a user's
registry.</li></p>

<p><li> Create cabinet and registry files.</li></p>
</ul>


<b>Estimated lesson time: 20 minutes</b>
</blockquote></div>
</p>


<A NAME="538"><H2>Setup Program Conventions</H2></A>

<p>An installation program should always be named Setup for two reasons:</p>

<ul>
<p><li> To conform to convention.</li></p>

<p><li> To be recognizable to the Add/Remove Programs applet in Control Panel.</li></p>
</ul>


<p>Consistent use of the Setup file name has become standard practice for application
deployment programs, which helps to minimize confusion among users. The standard
Windows user knows how to work with programs named Setup, though the programs can
differ in individual style and methods. For purposes of discussion, this lesson refers
to installation programs generically as Setup programs.</p>

<p>If your application distribution requires several disks or CD-ROMs, the Setup
program should exist on the first disk or CD-ROM of the series to ensure that it is
easily located by the Windows Add/Remove Programs applet.</p>

<p>A number of installation services can be provided to users. A typical setup program
will:</p>

<ul>
<p><li> Prompt for selected program options.</li></p>

<p><li> Create folders on a user's hard disk as required.</li></p>

<p><li> Copy files from the distribution media to the hard disk.</li></p>

<p><li> Add registry information for shared DLLs.</li></p>

<p><li> Register an application's ActiveX controls and other COM components.</li></p>

<p><li> Add information to the system registry specifying the command needed to remove the application. This allows the Add/Remove Programs applet to identify
the application's uninstall program.</li></p>

<p><li> Record the extension used for the application's document files in the system
registry to allow users to launch the application from Windows Explorer by
double-clicking a document in a file list.</li></p>

<p><li> Add an entry to the Windows <b>Programs</b> menu, or a desktop shortcut if
stipulated.</li></p>

<p><li> Execute &quot;run-once code&quot; to minimize installation size if the Setup
program is not copied to the hard disk.</li></p>

<p><li> Add or make unavailable selected options from the installed application when the
Setup program is run again.</li></p>
</ul>


<p>The user should need only to select an installation option and insert any additional
disks or CD-ROMs as prompted. Microsoft recommends that an installation program include
the following four options:</p>

<ul>
<p><li> <i>Compact</i> for laptops and systems with limited disk space.</li></p>

<p><li> <i>Custom</i> to give users control over what is installed.</li></p>

<p><li> <i>Typical</i> to provide a common default suitable for most users.</li></p>

<p><li> <i>Silent</i> for unattended installation.</li></p>
</ul>


<p>Silent installation is necessary for systems managers who want to install an
application across a network. While running in silent mode, the Setup program should
not query or display error messages, and must assume intelligent default settings for
all cases.</p>

<A NAME="539"><H2>Guidelines for Writing a Setup Program</H2></A>

<p>Keep the following points in mind when you plan a Setup program for your
application's deployment. An intelligent Setup program should:</p>

<ul>
<p><li> Store private initialization (.ini) files in the application directory if the
application is running locally, or in the directory returned by the <b>
GetWindowsDirectory()</b> API function if the application is shared.</li></p>

<p><li> Avoid inappropriately copying files to the Windows, WinNT, System, or System32 directories. If your application package includes font files, they should
be copied to the system's Fonts folder.</li></p>

<p><li> Check that a file does not already exist on the hard disk before copying it. If
the Setup program finds a conflict, it should decide which file is most recent and
avoid overwriting a newer file.</li></p>

<p><li> Supply defaults. In particular, the Setup program should provide a common
response to every option so users press only the ENTER key at each prompt for a
successful default installation.</li></p>

<p><li> Avoid prompting users to insert the same disk more than once.</li></p>

<p><li> Inform users about required disk space.</li></p>

<p><li> Display a progress indicator.</li></p>

<p><li> Store intermediate files in the Temp directory. However, if the Setup program
must restart Windows before reading intermediate files, it should confirm that the Temp
directory exists on a hard disk and not on a RAM disk. This procedure ensures that the
necessary files will still exist after restarting.</li></p>

<p><li> Give users a chance to cancel installations before finishing. The Setup program
should keep a log of files that have been copied and settings that have been registered
so that it can clean up canceled installations.</li></p>
</ul>


<p>A user installs your application either by running the Setup program directly or by
running the Add/Remove Programs applet in Control Panel. Add/Remove Programs
automatically searches the disk or CDROM drive for a program named Setup.exe. If the
file is found and the user agrees to finish the installation, Add/Remove Programs
starts the Setup program and closes. After Add/Remove Programs closes, the Setup
program is responsible for guiding the user through the rest of the installation
process.</p>

<A NAME="540"><H2>Uninstall Program Conventions</H2></A>

<p>An installed product should be able to safely, and as completely as possible,
remove all traces of itself. This operation, sometimes known as <i>de-installing</i> or
<i>uninstalling</i>, is typically carried out by a separate program with a descriptive
name such as Uninstall or Uninst. Alternatively, the Setup program itself can be
written to act as the uninstaller. You have much more flexibility when choosing a name
for your uninstall program because the location and file name of the uninstall program
are identified in the Setup program and written to the system registry during the
installation process. This action assures that Add/Remove Programs can locate the
correct uninstaller executable regardless of its name.</p>

<p>Uninstalling is an important feature for users, and also is one of the prerequisites
for an application to be approved for the Windows compliance logo. Uninstalling
includes deleting application files (but not documents) and removing entries added to
the system registry.</p>

<p>Because many applications share resources and make modifications throughout the
system, deleting an application is rarely a matter of simply deleting files in a single
subdirectory. Users must be able to uninstall cleanly and reinstall to correct
problems, change configurations, or upgrade applications. The uninstall feature also
allows users to free disk space and to abide by licensing agreements when deleting an
application from one computer before installing it on others.</p>

<p>Uninstalling a Windows application must be done carefully. A potential problem
arises when deleting a program's dependency modules such as DLLs and ActiveX
controls. (Dependencies are described in <a href="ch13f.htm#512">Lesson