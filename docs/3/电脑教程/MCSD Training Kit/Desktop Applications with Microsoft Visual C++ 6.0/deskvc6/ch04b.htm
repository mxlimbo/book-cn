<HTML>
<HEAD>
<TITLE>Lesson 2: Creating Dialog Boxes</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04a2.htm", "ch04c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="162"><H1>Lesson 2: Creating Dialog Boxes</H1></A>

<p>In this lesson, you will learn about the different types of dialog boxes used within
a Windows application. You will learn how you can visually design and edit a dialog box
using the Visual C++ dialog editor, and how to create an instance of a dialog box
within your application.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>
<p><li> Describe the types of dialog boxes used in a Windows application.</li></p>
<p><li> Describe how to use the Visual C++ dialog editor to create a dialog box
template.</li></p>
<p><li> Describe how to edit the properties and controls of a dialog box.</li></p>
<p><li> Describe how to use ClassWizard to create a dialog box class from a
template.</li></p>
<p><li> Describe how to use the dialog box class to create an instance of a dialog box
within your code.</li></p>
</ul>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>


<A NAME="163"><H2>Dialog Boxes</H2></A>

<p>Anyone who has ever used a Windows application should be familiar with the concept
of a dialog box. A dialog box is a child window of the main application window that is
used to display application status information or to get input from the user. A dialog
box contains <i>controls</i>, which are small standardized window objects that can be
manipulated by the user to perform an action, or used by the application to display
information to the user. For example, a user can enter text into an <i>edit</i>
control, or set a simple on/off option through a <i>check box</i> control. The user can
select from a predefined list of options in a <i>list box</i> control. The application
can relay information to a user through a static <i>text</i> control or with a dynamic
<i>progress bar</i> control. <i>Button</i> controls are generally used to start an
application procedure or close the currently open dialog box.</p>

<A NAME="164"><H2>Types of Dialog Boxes</H2></A>

<p>There are two types of dialog boxes that accept user input. <i>Modal</i> dialog
boxes take control of an application interface and require the user to supply
information or cancel the dialog box before continuing with the application. Each
AppWizard-generated application provides an <b>About</b> dialog box, which is a good
example of a simple modal dialog box. Select the <b>About</b> command from the <b>
Help</b> menu in your MyApp application to see how a modal dialog box operates.</p>

<p>Modal dialog boxes are used everywhere; <i>modeless</i> dialog boxes are less
common. Modeless dialog boxes do not take control of an application interface, but
allow you to work on other areas of the application without closing the dialog box. You
can switch between application windows and a modeless dialog box as required.</p>

<p>A good example of a modeless dialog box is the <b>Menu Item Properties</b> dialog
box that you used in the previous lesson to set the command ID and command text of the
application menu commands. Try opening the menu editor and editing the properties of
one of the menu commands. If you keep the <b>Menu Item Properties</b> dialog box open
by clicking on the thumbtack icon in the upper-left corner, the dialog box will remain
open as you move between menu commands in the editor. You can even add and delete menu
commands while the <b>Menu Item Properties</b> dialog box is open.</p>

<p>The <b>Menu Item Properties</b> dialog box is actually a special type of dialog box
known as a <i>property sheet</i>. A property sheet presents the user with a tabbed,
index card_like selection of property pages, each of which features standard dialog
box_style controls. Property sheets are usually used to configure options or settings
for objects or applications. They can be modal or modeless in operation.</p>

<A NAME="165"><H2>Creating a Dialog Box Template</H2></A>

<p>The first stage in creating a dialog box is to use the Visual C++ dialog editor to
create a <i>dialog box template</i>. A dialog box template is a reusable application
resource that is a binary description of a dialog box and the controls it contains. The
dialog editor (shown in Figure 4.11) is a visual tool that allows you to lay out the
template of a dialog box and its controls on screen, edit their properties, and test
their operations.</p>

<p>
<A HREF="javascript:fullSize('f04DA11x.htm')"> <img src="images/f04DA11.jpg" width=404 height=240 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 4.11</b> <i>The Visual C++ dialog editor</i><!-- /caption -->
</p>

<p>Note the <b>Controls</b> toolbar, which might be docked. You place a control on the
dialog box template by selecting the appropriate tool on the <b>Controls</b> toolbar.
This action turns your pointer into a control placement tool (usually a crosshair
pointer) of the appropriate type.</p>

<p>In the following exercises, you will use the dialog editor to create a template
for a dialog box belonging to the MyApp application, which will allow the user to
connect to a data source. The user will use a list box control to select a data source
name. A read-only edit control will convey information about each
data source as its corresponding list item is selected. The dialog box will contain
edit controls to allow the user to enter logon information consisting of a user ID, a
password, and a numeric privilege level. A check box option will allow users to
indicate whether subsequent sessions of the application should attempt to
connect to the current data source. The dialog box will contain two buttons, <b>
Connect</b> and <b>Cancel</b>. <b>Connect</b> will allow the user to try and connect to
the currently selected data source, and <b>Cancel</b> will cancel the operation.</p>

<p>The <b>Connect to Data Source</b> dialog box is shown in Figure 4.12. You can use this
illustration as a guide when working through the following exercise.</p>

<p>
<img src="images/f04DA12.jpg" width=353 height=334>
</p><p>
<!-- caption --><b>Figure 4.12</b> <i>The <b>Connect to Data Source</b> dialog box</i><!-- /caption -->
</p>

<p><li><b>To create the Connect to Data Source dialog box template</b></li></p>
<ol>
<p><li> In the MyApp workspace pane, click <b>ResourceView</b> and expand the MyApp
resources folder.</li></p>
<p><li> Right-click the Dialog folder. Click <b>Insert Dialog</b>. A new blank dialog
box appears with default <b>OK</b> and <b>Cancel</b> command buttons.</li></p>
<p><li> Click the title bar of the dialog box to select it. Don't click one of the
command buttons, because doing so would select the button rather than the entire dialog
box.</li></p>
<p><li> Use the resize handle on the bottom-right corner of the dialog box to stretch it
to 230 pixels wide by 200 pixels tall. The size of the dialog box in pixels is
displayed on the status bar when the dialog editor is open.</li></p>
</ol>

<p><li><b>To edit the dialog box properties</b></li></p>
<ol>
<p><li> With the dialog box selected, press ENTER.</li></p>
<p><li> On the <b>General</b> tab, change the dialog resource ID by typing <b>IDD_
CONNECTDIALOG</b> in the <b>ID</b> box. IDD_ is the standard prefix used for dialog
resource IDs.</li></p>
<p><li> In the <b>Caption</b> box, type <b>Connect to Data Source</b>.</li></p>
<p><li> Close the <b>Dialog Properties</b> dialog box.</li></p>
</ol>

<p><li><b>To add a caption for the list box control</b></li></p>
<ol>
<p><li> On the <b>Controls</b> toolbar, click the <b>Static Text</b> tool.</li></p>
<p><li> With the crosshair pointer, draw a static text box against the top left corner
of the drawing guide.</li></p>
<p><li> With the static text box selected, start typing the text <b>&amp;Data
Source:</b> The <b>Text Properties</b> sheet will appear automatically, and your typing
will be entered into the <b>Caption</b> box.</li></p>
</ol>

<p><li><b>To add a list box control to the dialog box</b></li></p>
<ol>
<p><li> On the <b>Controls</b> toolbar, click the <b>List Box</b> button.</li></p>
<p><li> Use the crosshair pointer to draw a list box beneath the list box caption that
you just created. (Refer to Figure 4.12 for a guide to the correct size and
position.)</li></p>
<p><li> Select the list box and press ENTER to edit the properties.</li></p>
<p><li> On the <b>General</b> tab, type <b>IDC_DSNLIST</b> in the <b>ID</b> box.</li></p>
<p><li> Explore the other pages on the property sheet. (Press F1 for context-sensitive
help.) When you are done, close the list box property sheet.</li></p>
</ol>

<p><li><b>To add a read-only edit control to the dialog box</b></li></p>
<ol>
<p><li> On the <b>Controls</b> toolbar, click the <b>Edit</b> <b>Box</b> tool.</li></p>
<p><li> With the crosshair pointer, draw an edit control box beneath the list box.
Position it as shown in Figure 4.12.</li></p>
<p><li> Click the edit control to select it, and press ENTER.</li></p>
<p><li> On the <b>General</b> tab, change the control ID by typing <b>
IDC_DESCRIPTION</b> in the <b>ID</b> box.</li></p>
<p><li> On the <b>Styles</b> tab, select the <b>Multiline</b> and <b>Read Only</b> check
boxes.</li></p>
<p><li> Close the <b>Edit Properties</b> dialog box.</li></p>
</ol>

<p><li> <b>To add the logon information edit controls to the dialog box</b></li></p>
<ol>
<p><li> Using the <b>Static Text</b> tool, create captions for the logon information
edit controls shown in Figure 4.12. Type the captions <b>User &amp;ID:</b>, <b>
&amp;Password:</b>, and <b>&amp;Access Level:</b>.</li></p>
<p><li> Using the <b>Edit Box</b> tool, create an input box for the User ID command
(shown in Figure 4.12). Set the control ID to <b>IDC_USERID</b>.</li></p>
<p><li> Create an input box for the Password. Set the Control ID to <b>IDC_PASSWORD</b>.
On the <b>Styles</b> tab of the property sheet, select the <b>Password</b> check box.
This style displays the characters typed by the user as asterisks to preserve the
privacy of the user password.</li></p>
<p><li> Create an input box for the <b>Access Level</b> command. As shown in Figure
4.10, this should be smaller than the other two input boxes. Set the control ID to <b>
IDC_ACCESS</b>. On the <b>Styles</b> tab of the property sheet, select the <b>
Number</b> check box so that the edit control will accept only numeric input.</li></p>
</ol>

<p><li> <b>To add a check box control to the dialog box</b></li></p>
<ol>
<p><li> On the <b>Controls</b> toolbar, select the <b>Check</b> <b>Box</b> tool.</li></p>
<p><li> With the crosshair pointer, draw a check box control beneath the read-only edit
control, as shown in Figure 4.12. Extend the control far enough to the right to
accommodate the text shown in the illustration.</li></p>
<p><li> Click the check box control to select it.</li></p>
<p><li> Press ENTER to edit the properties.</li></p>
<p><li> On the <b>General</b> tab, change the control ID by typing <b>
IDC_CHECKCONTROL</b> in the <b>ID</b> box.</li></p>
<p><li> In the <b>Caption</b> box, type <b>Attempt to connect at application &amp;
startup</b>.</li></p>
<p><li> Close the <b>Edit Properties</b> dialog box. If the entire caption text is not
showing, use the resize handle to extend the control to the right.</li></p>
</ol>

<p><li> <b>To reorganize the button layout</b></li></p>
<ol>
<p><li> Click <b>OK</b>. Type <b>Connec&amp;t</b>. The <b>Push Button Properties</b>
sheet will appear automatically and your typing will be entered in the <b>Caption</b>
box. Do not change the control ID.</li></p>
<p><li> Close the <b>Push Button Properties</b> sheet. Reorganize the <b>Connect</b>
button and the <b>Cancel</b> button as shown in Figure 4.12.</li></p>
</ol>

<p>Often, users need to be able to select values from some controls in a dialog box and
alter values in others. For example, they might need to make a selection from a list
box or enter text in a text box. They usually need to make a selection between two
command buttons. To facilitate this movement, the controls need to be selectable. When
a particular control is selected, it is said to have the <i>focus</i>.</p>

<p>When a control has the focus, the user is able to interact with that control. The
control with the focus is readily apparent. It looks different from the other controls
because it appears with an outline or contains the insertion point or is distinguished
in some other way. This provides a clear signal about which control will be affected by
the user's actions.</p>

<p>A user can navigate through the controls displayed on a dialog box by using the TAB
key. When the user presses the TAB key, the focus changes from one control to the next.
Not all of the controls on a dialog box can necessarily receive the focus. For example,
a static text control cannot. But each control capable of receiving the focus gets a
turn. The order in which their turns come is known as the <i>tab order</i>.</p>

<p>The tab order of the controls in a dialog box is set by the developer. The tab order
provides a means for navigating among the controls using only the keyboard. This order
can be an important aspect of a heavily used application, where the thousands of times
a month a user might need to move a hand from the keyboard to manipulate the mouse can
add up to lost productivity and increased fatigue.</p>

<p>Pressing the TAB key moves forward through the tab order. Pressing SHIFT+TAB moves
backward through the tab order. When a dialog box is initially displayed, the first
selectable control receives the focus.</p>

<p>On a dialog box with numerous controls, the user may need to press the TAB key many
times to reach the control of interest. Access keys are handy in these cases. To
provide an access key for a selectable control, place a static text control in the tab
order immediately prior to the control to which it is to be assigned and include an
ampersand in the displayed text for the static text control.</p>

<p>When the user presses the access key for the static text control, focus goes to the
first selectable control in the tab order after the static text control to which that
access key was assigned.</p>

<p><li><b>To set the tab order</b></li></p>
<ol>
<p><li> On the <b>Layout</b> menu of the Visual Studio main window, click <b>Tab
Order</b>. Numbers representing the current tab order will appear in the upper left
corner of each control in the dialog box.</li></p>
<p><li> Click the <b>Data Source</b> caption, then the list box control, then each of
the input box captions, and then each of the associated input boxes. Next, select the
<b>Attempt to connect at application startup</b> check box, then click <b>Connect</b>,
and finally click <b>Cancel</b>. The order in which you click determines the tab
order.</li></p>
<p><li> Click outside the dialog box to finish setting the tab order.</li></p>
</ol>

<p><li> <b>To test the dialog box</b></li></p>
<ol>
<p><li> Click the <b>Test</b> button or press CTRL+T. An instance of your dialog box
appears.</li></p>
<p><li> Try testing the tab order. Test the access keys to ensure the tab order was set
correctly to permit moving among controls using the access keys. Try selecting the
different sample commands in the list box, and then try closing the dialog box with the
<b>Continue</b> or <b>Cancel</b> button.</li></p>
</ol>

<A NAME="166"><H2>Creating and Using a Dialog Box Class</H2></A>

<p>Once you have created a dialog box template, you need to create a class to represent
the dialog box in your code. The dialog box class should be derived from the MFC class
<b>CDialog</b>. This class might contain member variables to represent controls and
data items in the dialog box, and methods to handle events arising from user
interaction with the controls. The task of creating a dialog box class, and the binding
of controls to class data members, is greatly simplified by automatic features of
ClassWizard.</p>

<p>In this lesson, you will use ClassWizard to create a class for your <b>Connect to
Data Source</b> dialog box and you will learn how to display the dialog box in your
application. You will learn how to work with dialog data and with dialog box controls
in <A HREF="ch05a.htm">Chapter 5</A>.</p>

<p><li><b>To create the CConflictDialog class</b></li></p>
<ol>
<p><li> With the <b>IDD_CONNECTDIALOG</b> dialog box open in the dialog editor, press
CTRL+W to open ClassWizard. You will see the <b>Adding a Class</b> dialog box shown in
Figure 4.13.</li></p>
<p>
<img src="images/f04DA13.jpg" width=353 height=192>
</p><p>
<!-- caption --><b>Figure 4.13</b> <i>Adding a new dialog class</i><!-- /caption -->
</p>
<p><li> With the <b>Create a new class</b> option selected, click <b>OK</b>. The <b>New
Class</b> dialog box appears.</li></p>
<p><li> In the <b>Name</b> text box, type <b>CConnectDialog</b>. Note the file name that
is created by default.</li></p>
<p><li> Click <b>OK</b>. The <b>CConnectDialog</b> dialog class is created and selected
in the <b>Class Name</b> box of ClassWizard.</li></p>
<p><li> Click <b>OK</b> to close ClassWizard.</li></p>
</ol>

<A NAME="167"><H3>Displaying the Dialog Box</H3></A>

<p>Once you have created a dialog class, displaying a modal dialog box is simply a
matter of creating an instance of the dialog class in your code and calling the base
class method <b>CDialog::DoModal()</b>. The base class functions <b>CDialog::
OnOK()</b> and <b>CDialog::OnCancel()</b> provide default handling of the IDOK and
IDCANCEL messages generated (by default) by the <b>OK</b> and <b>Cancel</b> buttons.
Both of these functions call the <b>CDialog::EndDialog()</b> method to close the dialog
box. The <b>DoModal()</b> function returns the ID of the button used to close the
dialog box.</p>

<p>An application generated by the MFC AppWizard provides a dialog template and a
dialog class for the <b>About</b> dialog box. The code to display the <b>About</b>
dialog box is located within the <b>OnAppAbout()</b> member function of the application
object, which is the handler function for the <b>ID_APP_ABOUT</b> command ID. The
following code snippet illustrates how the <b>OnAppAbout()</b> function in your MyApp
application displays the <b>About</b> dialog box:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyAppApp::OnAppAbout()
{
     CAboutDlg aboutDlg;
     aboutDlg.DoModal();
}</pre>
</td></tr>
</table>
</p>

<p>Modeless dialog boxes are handled differently. Rather than calling <b>DoModal()</b>
to activate a modeless dialog box, you call the <b>CDialog::Create()</b> function and
pass the resource ID of the dialog box template as a parameter. If the dialog resource
has the property <b>WS_VISIBLE</b>, the dialog box appears immediately. If it does not,
you must call the base class member function <b>CWnd::ShowWindow()</b> to display the
dialog box. The <b>ShowWindow()</b> function accepts a single parameter, which can be
any of a number of predefined values, that specifies how the window is to be shown. The
values generally used with a modeless dialog box are SW_SHOW to display the dialog box,
and SW_HIDE to hide it.</p>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
If you need to remind yourself of the inheritance hierarchy of
the <b>CDialog</b> class, refer to Figure 3.1 in <A HREF="ch03a.htm">Chapter 3</A>.
</blockquote></div>
</p>

<p>Because modal dialog boxes take control of an application interface, they are
usually created as they are needed. An object that represents a modal dialog box will
be declared just before it is used, and will be allowed to go out of scope once the
dialog box has been closed and the user responses have been processed.</p>

<p>Modeless dialog boxes tend to exist for the lifetime of the application and are
simply shown or hidden in response to user commands. Modeless dialog boxes are often
created early on in the application, usually as members of one of the application
classes. SW_SHOW and SW_HIDE are used to show or hide the dialog box as the application
demands. Modeless dialog boxes are similar to application toolbars in this respect.
Toolbar objects are created at application startup as members of the <b>CMainFrame</b>
class and are always available to be shown or hidden as the user selects or clears the
<b>Toolbar</b> menu option.</p>

<p>You will learn more about how to use modal and modeless dialog boxes in <A HREF="ch05a.htm">Chapter 5</A>.
In the following exercise, you will see how to make the <b>Connect</b> menu option of
the MyApp application display the <b>Connect to Data Source</b> dialog box.</p>

<p><li><b>To display the Connect to Data Source dialog box</b></li></p>
<ol>
<p><li> In the MyApp project, click the <b>ClassView</b> tab and expand the <b>
CMyAppApp</b> class icon.</li></p>
<p><li> Double-click the <b>OnUpdateConnect()</b> function icon to locate the user-
interface update command handler.</li></p>
<p><li> Remove the single line of implementation code that reads:</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>pCmdUI-&gt;SetCheck(m_isDatabaseConnected);</pre>
</td></tr>
</table>
</p>
<p><li> Locate the <b>OnConnect()</b> handler function. Replace the current line of
implementation code that reads</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>m_isDatabaseConnected = m_isDatabaseConnected ? FALSE : TRUE;</pre>
</td></tr>
</table>
</p>
<p>with the following lines:</p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CConnectDialog aCD;
aCD.DoModal();</pre>
</td></tr>
</table>
</p>
<p><li> At the top of the MyApp.cpp file, along with the other #include statements, add
the following line:</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;ConnectDialog.h&quot;</pre>
</td></tr>
</table>
</p>
<p><li> Build and run the MyApp application. On the <b>Data</b> menu, click <b>
Connect</b>, and verify that the <b>Connect to Data Source</b> dialog box appears. Note
that although we have changed the <b>OK</b> command button caption to <i>Connect</i>,
it retains the <b>IDOK</b> ID and will therefore call the default <b>OnOK()</b> handler
to close the dialog box.</li></p>
</ol>

<p>At present, you cannot do much with this dialog box. In the next chapter, you will
add code to set and retrieve dialog box data and process messages from controls.</p>

<A NAME="168"><H2>Common Dialog Classes</H2></A>

<p>MFC supplies several classes derived from <b>CDialog</b> that encapsulate the
&quot;common dialog boxes&quot; supplied as part of the Windows common dialog library
COMMDLG.DLL. These dialog boxes simplify common Windows application tasks such as
locating and opening files or specifying print job information. Common dialog boxes
should always be used where appropriate to ensure that your application presents a
standard interface to the users and complies with the Windows Logo requirements.</p>

<p>The five common dialog classes provided by MFC are listed in Table 4.2.</p>

<p><b>Table 4.2</b> <i>Windows Common Dialog Boxes</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Dialog Class</th><th>Description</th>
</tr>
<tr>
<td valign="top">CColorDialog</td><td valign="top">Used to select colors.</td>
</tr>

<tr>
<td valign="top">CFileDialog</td> <td valign="top">Used to select a filename to open or save.</td>
</tr>

<tr>
<td valign="top">CFindReplaceDialog</td><td valign="top">Used to initiate a find or replace operation in a text file.</td>
</tr>

<tr>
<td valign="top">CFontDialog </td><td valign="top">Used to specify a font.</td>
</tr>

<tr>
<td valign="top">CPrintDialog</td><td valign="top">Used to specify information for a print job.</td>
</tr>
</table>
</p>

<p>For more information on these classes, refer to the MFC class documentation in the
Visual C++ online Help.</p>

<A NAME="169"><H2>Lesson Summary</H2></A>

<p>A dialog box is a child window of the main application. It is used to display
application status information or to get input from the user. A dialog box contains
controls, which are small, standardized window objects that can be manipulated by the
user to perform an action, or used by the application to display information to the
user.</p>

<p>There are two types of dialog boxes. Modal dialog boxes require the user to supply
information or cancel the dialog box before returning control to the application.
Modeless dialog boxes do not take control of an application interface, but allow you to
work on other areas of the application without closing the dialog box. A property sheet
is a special kind of dialog box that presents the user with a tabbed, index card-like
selection of property pages. Property sheets can be modal or modeless.</p>

<p>The first stage in creating a dialog box is to use the Visual C++ dialog editor to
create a <i>dialog box template</i>. A dialog box template is a reusable application
resource that is a binary description of a dialog box and the controls it contains. The
next stage is to create a class, derived from the MFC class <b>CDialog</b>, to
represent the dialog box in your code. The task of creating a dialog box class is
greatly simplified by automatic features of ClassWizard.</p>

<p>Once you have created a dialog class, you can display a modal dialog box by creating
an instance of the dialog class in your code and calling the <b>CDialog::DoModal()</b>
function. To display a modeless dialog box, you call the <b>CDialog::Create()</b>
function, passing the resource ID of the dialog box template as a parameter. Use the
<b>CWnd::ShowWindow()</b> with a parameter of SW_SHOW or SW_HIDE to display or hide the
modeless dialog box.</p>

<p>MFC supplies several classes derived from <b>CDialog</b> that encapsulate common
Windows dialog boxes. These dialog boxes simplify common Windows application tasks and
should always be used where appropriate to ensure that your application presents a
consistent interface to the users.</p>

</BODY>
</HTML>







