<HTML>
<HEAD>
<TITLE>Lesson 5: Using the Dependency Walker</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13e.htm", "ch13g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="512"><H1>Lesson 5: Using the Dependency Walker</H1></A>

<p>Visual C++ provides other utilities in addition to the debugger that can help you
look inside an application or DLL module. In this lesson, you will learn how to use the
Dependency Walker utility, sometimes referred to by its file name Depends.exe.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>
<p><li> Explain why Windows programs depend on other modules to run.</li></p>
<p><li> Execute the Dependency Walker utility to examine a program's
dependencies.</li></p>
</ul>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div>
</p>

<A NAME="513"><H2>What Is a Dependency?</H2></A>

<p>A Windows program is not as self-sufficient as it might appear on the surface. Even
the simplest &quot;Hello, world&quot; program requires the presence of several DLLs
provided by the system, such as Kernel32 and GDI32. Because the elementary MyApp
program (seen in examples throughout this book) links to MFC, the program depends on the help of other module files, such as MFC42.dll. In turn, MFC
cannot run without other files, such as the C run-time library MSVCRT.dll. This string
of required modules must all be present and available to the operat-ing system before a
program can execute. Together, they form a program's <i>dependencies</i>.</p>

<p>Each executing Windows module, whether application or DLL, keeps a list of
its dependencies in a header area within the executable file. When the operating system
loads a module, it reads the list of dependencies and loads each required module. Only
when all dependencies are loaded does the original program run.</p>

<A NAME="514"><H2>Dependency Information</H2></A>

<p>Ordinarily, a program's dependencies are invisible to users. A dependency
usually makes itself known to users only when it is missing. In that case, Windows
displays a message explaining that the requested program cannot run because a required
file cannot be found.</p>

<p>The Dependency Walker utility reads the dependency list in a program's header and
displays information about each dependency. The results are illustrated in Figure 13.9, which shows the dependencies for a typical program named
Demo.exe.</p>

<p>
<A HREF="javascript:fullSize('F13DA09x.htm')"> <img src="images/F13DA09.JPG" width=404 height=371 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 13.9</b> <i>The Dependency Walker utility</i><!-- /caption -->
</p>

<p>The Dependency Walker reveals such information as:</p>
<ul>
<p><li>The name and location of each file required to run an application or DLL.</li></p>
<p><li>The base address of each dependency module.</li></p>
<p><li>Version information about each dependency module.</li></p>
<p><li>Whether each dependency module contains debug information.</li></p>
</ul>


<p><li><b>To start the Dependency Walker</b></li></p>

<ol>
<p><li> On the <b>Start</b> menu, click <b>Programs</b>.</li></p>

<p><li> Click <b>Microsoft Visual Studio 6.0</b>, click <b>Microsoft Visual Studio 6.0
Tools</b>, and then click <b>Depends</b>. As with any utility, you can also add a
command to the Visual C++ <b>Tools</b> menu to invoke the Dependency Walker.</li></p>

<p><li>When the utility appears, click <b>Open</b> on the <b>File</b> menu and
browse to the application or DLL that you would like to examine.</li></p>
</ol>

<p>The Dependency Walker is an MDI application, so you can open several views, each
showing the dependencies for a different executable file. As Figure 13.9 reveals, the
Dependency Walker displays four panes separated by split bars. Table 13.5 describes the
four panes identified in Figure 13.9.</p>

<p><b>Table 13.5</b> <i>The Four Panes Displayed in the Dependency Walker</i></p>

<table cellpadding=5 width="95%">
<tr><th>Pane</th> <th>Description</th></tr>

<tr><td valign="top">Module dependency tree</td> 
<td valign="top">A hierarchical tree showing the program's dependencies.
The tree often contains duplicate names because several modules can have the same
dependencies.</td></tr>

<tr><td valign="top">Parent import function list</td> 
<td valign="top">A list of parent import functions for the module
selected in the Module dependency tree. Parent import functions are those functions (in
the selected module) that are called by its parent module. The selected module must
export every function that the parent is importing from it. If the selected module does
not export one of the functions that the parent module expects to call, an unresolved 
external error occurs when the module is loaded.</td></tr>

<tr><td valign="top">Export function list</td> 
<td valign="top">A list of functions exported by the module selected in the
Module dependency tree. Export functions are functions that a module exposes to other
modules.</td></tr>

<tr><td valign="top">Module list</td> <td valign="top">A list of all required dependencies for the opened program. This list defines the minimum set of files needed for the program to execute.</td></tr>
</table>

<A NAME="515"><H2>Lesson Summary</H2></A>

<p>This lesson introduced the Dependency Walker, a utility that provides information
about the modules a Windows program requires to run. Such modules are known as
dependencies. The Dependency Walker displays:</p>

<ul>
<p><li> A tree view of modules forming a program's dependencies.</li></p>

<p><li> A list of import functions called by a module's parent.</li></p>

<p><li> A list of functions that a module exports.</li></p>

<p><li> A list of a program's dependencies.</li></p>
</ul>


</BODY>
</HTML>







