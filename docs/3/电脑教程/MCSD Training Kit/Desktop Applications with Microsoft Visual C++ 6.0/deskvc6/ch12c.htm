<HTML>
<HEAD>
<TITLE>Lesson 2: Creating ActiveX Documents</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="450"><H1>Lesson 2: Creating ActiveX Documents</H1></A>

<p>ActiveX documents, also known as <i>Active documents,</i> are document files created
by <i>ActiveX document server</i> applications. ActiveX documents can be viewed 
and edited not only by the server application that created them, but also by any 
<i>ActiveX document container</i> application.</p>

<p>Microsoft Word documents are an example of ActiveX documents. Users of Internet
Explorer (an ActiveX document container application) can view and
edit Word documents using the full functionality of Word (an ActiveX document server
application) from within the Internet Explorer browser window.</p>

<p>ActiveX documents have come to be a powerful feature of Web sites for users of
Microsoft applications, extending the functionality of the Internet Explorer browser to
provide a versatile, feature-rich alternative to simple HTML Web pages.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<ul>
<p><li>Describe how to use ActiveX documents.</li></p>

<p><li>Describe some of the advantages of using ActiveX documents on your Web site.</li></p>

<p><li>Describe how to use the MFC AppWizard to create an ActiveX document server.</li></p>

<p><li>Describe how to deploy an ActiveX document on a Web site, and how to view the
ActiveX document using Internet Explorer.</li></p>
</ul>

<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>

<A NAME="451"><H2>Using ActiveX Documents</H2></A>

<p>In <A HREF="ch06a.htm">Chapter 6</A>, you learned how a document/view application can save its data to disk
as a document file. Generally speaking, you can view or edit a document file only by
launching the application that created it. However, with very little extra work, you
can make your application into an ActiveX document server so that any ActiveX document
container application can be used to view or edit your documents using the
functionality of the server application.</p>

<p>When a container application loads an ActiveX document, it also loads menu, toolbar,
and status bar resources from the associated server application. The menus and toolbars
are merged with those of the container frame window to make the functionality of the
server application available from within the container application. In effect, the
server temporarily &quot;takes over&quot; the container when an ActiveX document is
displayed.</p>

<p>If you have Internet Explorer and Word installed, you can easily try out ActiveX
document technology.</p>

<p><li><b>To view an ActiveX document located on your local hard drive</b></li></p>

<ol>
<p><li>Start Internet Explorer.</li></p>

<p><li>Start Windows Explorer and use it to locate a Word .doc file.</li></p>

<p><li>Move the Word document file from Windows Explorer to the Internet Explorer
window using a drag-and-drop operation. Your Word document should open in Internet
Explorer as an ActiveX document, as shown in Figure 12.13.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA13x.htm')"> <img src="images/f12DA13.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.13</b> <i>Viewing an ActiveX document using Internet Explorer 5</i><!-- /caption -->
</p>
</ol>

<p>Notice that Internet Explorer displays the Word menus and toolbars in addition to
its own. Try editing the Word document from within Internet Explorer, and try using
some of the features provided by the Word menus. Click the <b>Back</b> button to return
to the previously displayed page. Note that Internet Explorer asks whether you want to
save the edited ActiveX document before proceeding.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
There are some differences between the way that versions 4.0 and
5 of Internet Explorer handle ActiveX documents. In Internet Explorer 4.0, you can load
an ActiveX document by specifying it as a <i>file://</i> URL in the address bar.
Internet Explorer 5, however, will load a separate instance of the Word application to
view the document rather than loading it as an ActiveX document.</blockquote></div>
</p>

<A NAME="452"><H2>Using ActiveX Documents on a Web Site</H2></A>

<p>Internet Explorer is not the only ActiveX document container application (the
Microsoft Office Binder is another), but it is the container that is of interest 
to us in this chapter because we are demonstrating Internet programming. The
example just given portrays a somewhat artificial situation. Internet Explorer is
not generally used to view an ActiveX document on your local computer&#8212;it
is much more efficient to use the document's parent application to do this.</p>

<p>Internet Explorer uses its ActiveX container capabilities to view ActiveX documents
that are deployed on a Web server. This means that Word documents, Microsoft Excel
spreadsheets, and any of your custom-built ActiveX documents can be included on your
Web site and made available for viewing and editing by anyone who has the corresponding 
ActiveX document server applications installed on their computer. An ActiveX document 
server won't let you save any changes you make to the document back to the Internet host, 
but it will let you save them in a new version on your own hard disk. In other words, the
<b>Save</b> command on the <b>File</b> menu is unavailable, but the <b>Save As</b>
command is available.</p>

<p>A common use for ActiveX documents is to create a &quot;forms&quot; center on a
company intranet site. An area of the intranet site can contain Word or Excel versions
of forms&#8212;such as training request forms or expense claim forms&#8212;that are
regularly submitted by employees. This means that employees, whether they are in the
office, at home, or halfway across the world, can browse to the intranet site and load
a blank form into their Web browser. Using ActiveX document technology, they can fill
out the form online, and then save a local copy that can be faxed or e-mailed to the
personnel department.</p>

<p>You can provide a much richer interface to Web site data using ActiveX document
technology than you can using standard HTML pages. When you view an Excel spreadsheet
over the Web, you have access to all of the powerful features of Excel to organize 
and display your data. The fact that you need to have the ActiveX
document server application installed on your local computer before you can view
ActiveX documents on a remote Web site could be perceived as a limitation. To 
address this issue, you could develop different versions of your
server application. You could, for example, create a fully featured version that 
is used to create and maintain ActiveX documents deployed on your Web site, and a
lightweight viewer application that can be downloaded to Internet clients for use in
conjunction with the Web browser. Microsoft takes this approach with its Word document
viewer application, which allows you to view Word documents deployed on a Web site
without having a full version of Word installed on your computer.</p>

<p>One potential drawback of using ActiveX document technology on your Web site is that
users of your site are compelled to use a browser that supports ActiveX documents. They
must also have a copy of your ActiveX document server application installed on their
computer, which assumes that they are running Windows. This means that ActiveX
documents are best used in a situation where you are in a position to specify the 
platform and configuration of the client computers. When you want to create a public 
Web site that is accessible from many different unknown clients, you should use HTML.</p>

<A NAME="453"><H2>Creating an ActiveX Document Server</H2></A>

<p>Visual C++ 6.0 makes creating ActiveX documents extremely easy. Selecting 
the appropriate option in the AppWizard will generate all the code and resources
necessary to make your application an ActiveX document server.</p>

<p><li><b>To create an ActiveX document server application</b></li></p>

<ol>
<p><li>Use AppWizard to create a new .exe project named <b>MyADSApp</b>. In Step 1,
click the <b>Single document</b> option.</li></p>

<p><li>Accept the default options for Step 2. In Step 3, click the <b>Full-server</b>
and the <b>Active document server</b> options, as shown in Figure 12.14.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA14x.htm')"> <img src="images/f12DA14.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.14</b> <i>MFC AppWizard compound document options</i><!-- /caption -->
</p>

<p><li>In Step 4, click <b>Advanced</b> and enter <b>ads</b> as the file extension.
Close the <b>Advanced Options</b> dialog box.</li></p>

<p><li>Click <b>Finish</b> and then click <b>OK</b> to create the project.</li></p>
</ol>

<p>In the following exercises, you will create a simple application that displays
a line of text in the application's main window. First you will create a dialog box
to allow the user to specify the text to be displayed.</p>

<p><li><b>To create the Set Display String dialog box</b></li></p>

<ol>
<p><li>Create a dialog template containing a single edit control, as shown in Figure
12.15. The dialog ID should be <b>IDD_EDITSTRING</b> and the edit control ID should be
<b>IDC_NEWSTRING</b>.</li></p>

<p>
<img src="images/f12DA15.jpg" width=285 height=179>
</p><p>
<!-- caption --><b>Figure 12.15</b> <i>The <b>Set Display String</b> dialog box</i><!-- /caption -->
</p>

<p><li>Create a dialog class named <b>CEditStringDlg</b>. On the ClassWizard <b>Member
Variables</b> page, create a <b>Value</b> category <b>CString</b> member variable named
m_newstring.</li></p>
</ol>

<p>Next you will create the application data (the string to be displayed) by adding 
a data member to the document class. You will also implement the <b>Serialize()</b>
function to store and retrieve this data member to the ActiveX document file.</p>

<p><li><b>To create the CMyADSApp application data</b></li></p>

<p>Add a public <b>CString</b> member variable named m_strDisplay to the <b>
CMyADSAppDoc</b> class. Modify the <b>CMyADSAppDoc::Serialize()</b> function 
to serialize the m_strDisplay variable, as shown in the following code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyADSAppDoc::Serialize(CArchive&amp; ar)
{
     if (ar.IsStoring())
     {
          ar &lt;&lt; m_strDisplay;
     }
     else
     {
          ar &gt;&gt; m_strDisplay;
     }
}</pre>
</td></tr>
</table>
</p>

<p>Now you will modify the application menu and toolbar to create the <b>Edit
String</b> command. You will also create a handler function for this command.</p>

<p><li><b>To create and implement the Edit String menu command</b></li></p>

<ol>
<p><li>Edit the <b>IDR_MAINFRAME</b> menu resource. On the <b>Edit</b> menu, delete the
<b>Undo</b> command. Replace it with a new command with the caption <b>&amp;String</b>.
Provide a suitable prompt string. Accept the default command ID <b>ID_EDIT_STRING</b>
for the command.</li></p>

<p><li>Edit the <b>IDR_MAINFRAME</b> toolbar. Create a simple toolbar button to
represent text entry. Assign the <b>ID_EDIT_STRING</b> command ID to the new toolbar
button.</li></p>

<p><li>Add the following line to the top of the MyADSAppDoc.cpp file:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;EditStringDlg.h&quot;</pre>
</td></tr>
</table>
</p>

<p><li>Create a command handler in the <b>CMyADSAppDoc</b> class for the <b>ID_EDIT_STRING</b> 
command ID. Name the function <b>OnEditString()</b> and implement the
function as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CMyADSAppDoc::OnEditString()
{
     CEditStringDlg myDialog;
     myDialog.m_newstring = m_strDisplay;
     
	 if(myDialog.DoModal() == IDOK &amp;&amp;
          myDialog.m_newstring != m_strDisplay)
     {
          m_strDisplay = myDialog.m_newstring;
          UpdateAllViews(NULL);
          SetModifiedFlag();
     }
}</pre>
</td></tr>
</table>
</p>
</ol>

<p>This function displays the <b>Set Display String</b> dialog box to allow the user to
specify the string displayed by the application. The string is stored in the
CMyADSAppDoc::m_strDisplay variable.</p>

<p><li><b>To implement the application drawing function</b></li></p>

<p>Locate the <b>CMyADSAppView::OnDraw()</b> function. Replace the //TODO comment line
with the following code:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CFont HeadingFont;
if(HeadingFont. CreateFont(64, 0, 0, 
     0, FW_NORMAL, 1, 0, 0, 0, 0, 0, 0, FF_DECORATIVE, 0))

     pDC-&gt;SelectObject(&amp;HeadingFont);

pDC-&gt;TextOut(10, 10, pDoc-&gt;m_strDisplay);</pre>
</td></tr>
</table>
</p>

<p>If you build and run the CMyADSApp application at this point, it will function
perfectly well as a stand-alone application. You will be able to choose the 
<b>String</b> command from the <b>Edit</b> menu and add a string to be displayed in the
application main window. You will be able to save the string in a document file with an
.ads extension.</p>

<p>If you try and load the saved .ads file into an ActiveX document container such as
Internet Explorer, you will be able to see the string displayed, but you will 
not be able to access the <b>String</b> command on the <b>Edit</b> menu. This is
because an ActiveX document container does not load menu commands and toolbar buttons
from the <b>IDR_MAINFRAME</b> resources.</p>

<p>When you use AppWizard to create an ActiveX document server, additional menu and
toolbar resources, both with the ID <b>IDR_SRVR_INPLACE</b>, are created for the
project. The commands on the <b>IDR_SRVR_INPLACE</b> menu are merged into the container
menu; and the <b>IDR_SRVR_INPLACE</b> toolbar is added to the toolbars displayed by the 
container application.</p>

<p>You will need to edit the <b>IDR_SRVR_INPLACE</b> menu and toolbar to make the the
<b>String</b> command on the <b>Edit</b> menu available from the menu of the ActiveX
document container.</p>

<p><li><b>To edit the IDR_SRVR_INPLACE menu and toolbar resources</b></li></p>

<ol>
<p><li>In ResourceView, double-click the <b>IDR_SRVR_INPLACE</b> menu item. 
Edit the menu item properties for the <b>Undo</b> command on the <b>Edit</b> menu.
Change the menu item caption to <b>&amp;String</b> and the ID to <b>ID_EDIT_STRING</b>.
The prompt string will change automatically when the <b>Menu Item Properties</b> dialog
box is closed.</li></p>

<p><li>Edit the <b>IDR_SRVR_INPLACE</b> toolbar resource. Create a new button identical
to the button you created for the <b>IDR_MAINFRAME</b> resource (you can copy and paste
from one edit window to another). Assign the button the <b>ID_EDIT_STRING</b> ID.</li></p>

<p><li>Build and run the CMyADSApp application. Use the <b>String</b> command on 
the <b>Edit</b> menu to display the string &quot;Hello World!&quot; in the
application's main window. Close the application and, when prompted, save the file
as <b>Hello.ads</b>.</li></p>

<p><li>Start Internet Explorer. Use Windows Explorer to locate the Hello.ads file and
drag the file onto the Internet Explorer window. If the <b>File Download</b> message
box appears, click <b>Open this file from the current location</b> and click <b>OK</b>.
The file should appear as shown in Figure 12.16.</li></p>

<p>
<A HREF="javascript:fullSize('F12DA16x.htm')"> <img src="images/F12DA16.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.16</b> <i>The Hello.ads document hosted in Internet Explorer 5</i><!-- /caption -->
</p>

<p><li>Check that you can use the <b>String</b> command on the <b>Edit</b> menu to
change the string displayed in the document. Click the Internet Explorer <b>Back</b>
button to go back to the previous page that was displayed in the browser. In the
message box that asks whether you want to save your changes, click <b>No</b>.</li></p>
</ol>

<A NAME="454"><H2>Deploying an ActiveX Document on a Web Site</H2></A>

<p>The following exercises show you how to deploy the Hello.ads file on a Web site so
that it can be accessed across the Internet using HTTP. Instructions are provided for
IIS 4.0 and PWS.</p>

<A NAME="455"><H3>Web Site Organization</H3></A>

<p>A new installation of IIS 4.0 or PWS will create a default Web site for your
computer, which is accessible by specifying your computer name as a URL. For 
example, if you enter the following URL into your Internet Explorer <b>Address</b>
box, the browser will display the Web server's default welcome page:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://[<i>your computer name</i>]/</pre>
</td></tr>
</table>
</p>

<p>The trailing slash after the computer name (which will be added by the browser if
you do not type it yourself) signifies that you wish to go to your home directory. The
Windows NT Option Pack welcome page appears because it is designated as the default
document for the home directory.</p>

<p>You can organize your Web site into a hierarchy of <i>virtual directories</i>, which
are organizational subdivisions of your Web site that are conceptually similar to the
subdirectories, or folders, of your hard disk's file system. All virtual
directories are subdirectories of the Web site's home directory. They are known as
virtual directories because the structure you define is not directly related to the
organization of folders on your hard disk. Each virtual directory points to a folder
on a hard disk that stores the Web pages, ActiveX documents, and other files that make
up the <i>content</i> of the virtual directory. These content folders do not even need
to be on the same computer as the Web server.</p>

<p>When specifying virtual directories in a URL, use the UNIX-style forward slash. For
example, entering the following URL into your Web browser's <b>Address</b> box will
take you to the visualc virtual directory on Microsoft's Web site:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>msdn.microsoft.com/visualc/</pre>
</td></tr>
</table>
</p>

<p>If you do not name a specific Web page in the URL, as just shown, the Web server
will display the default document specified for the virtual directory.</p>

<A NAME="456"><H4>Deploying Content on a Microsoft IIS 4.0 Web Server</H4></A>

<p>The Microsoft Internet Service Manager is a utility installed with IIS that is used
to administrate a Web server, as well as the other Internet services that IIS provides,
such as mail and FTP servers. Using the Internet Service Manager, you can configure the
content, security and performance of a Web site.</p>

<p>In the following exercise, you will use the Internet Service Manager to create the
<i>docs</i> virtual directory on the default Web site. The docs virtual directory will
host the Hello.ads ActiveX document.</p>

<p><li><b>To deploy the Hello.ads ActiveX document</b></li></p>

<ol>
<p><li>Using Windows Explorer, create a new folder under the \InetPub\WWWRoot folder
and name it <b>MyActiveXDocs</b>. Then place a copy of the Hello.ads file in this
folder.</li></p>

<p><li>On the <b>Start</b> menu, point to <b>Programs</b>, point to <b>NT 4.0 Option
Pack</b>, point to <b>Microsoft Internet Information Server</b>, and click <b>Internet
Service Manager</b>.</li></p>

<p><li>In the left pane, expand the <b>Internet Information Server</b> item. Expand the
item that is labeled with your computer name so that the application looks similar to
Figure 12.17.</li></p>

<p>
<A HREF="javascript:fullSize('F12DA17x.htm')"> <img src="images/F12DA17.JPG" width=404 height=292 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.17</b> <i>Internet Service Manager</i><!-- /caption -->
</p>

<p><li>Right-click <b>Default Web Site</b>. On the <b>New</b> submenu, click <b>Virtual
Directory</b>.</li></p>

<p><li>In the New Virtual Directory Wizard, type the name <b>docs</b> and then click
<b>Next</b>.</li></p>

<p><li>Click <b>Browse</b> and then locate the \InetPub\WWWRoot\MyActiveXDocs folder.
Click <b>OK</b> to specify that this folder will contain the content for the docs
virtual directory. Click <b>Next</b>.</li></p>

<p><li>Accept the default options on the last page of the wizard by clicking 
<b>Finish</b>. If you click <b>Default Web Site</b> in the left pane, you will see the
docs virtual directory displayed in the right pane.</li></p>

<p><li>Close the Internet Service Manager. Open Internet Explorer and enter the
following URL into the address box:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://[<i>your computer name</i>]/docs/hello.ads</pre>
</td></tr>
</table>
</p>
</ol>

<p>The Hello.ads file should display in the browser as shown in Figure 12.16.</p>

<A NAME="457"><H4>Deploying Content on a Microsoft IIS Personal Web Server</H4></A>

<p>PWS provides the Personal Web Manager utility, which you use to administer a Web
site.</p>

<p>In the following exercise, you will use the Personal Web Manager to create the 
<i>docs</i> virtual directory on the default Web site. The docs virtual directory will
host the Hello.ads ActiveX document.</p>

<p><li><b>To deploy the Hello.ads ActiveX document</b></li></p>

<ol>
<p><li>Using Windows Explorer, create a new folder under the \InetPub\WWWRoot folder
named <b>MyActiveXDocs</b>. Place a copy of the Hello.ads file in this folder.</li></p>

<p><li>On the <b>Start</b> menu, click <b>Programs</b> and then click <b>Microsoft
Personal Web Server</b> to start the Personal Web Manager.</li></p>

<p><li>Personal Web Manager appears with the <b>Main</b> page displayed. Click 
<b>Advanced</b> in the left pane so that the application looks similar to Figure
12.18.</li></p>

<p>
<A HREF="javascript:fullSize('f12DA18x.htm')"> <img src="images/f12DA18.jpg" width=404 height=284 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 12.18</b> <i>Personal Web Manager</i><!-- /caption -->
</p>

<p><li>With the home directory item selected, as shown in Figure 12.18, click 
<b>Add</b>.</li></p>

<p><li>The Add Directory Wizard appears. In the <b>Alias</b> box, type <b>docs</b>.
Click <b>Browse</b> to locate the \InetPub\WWWRoot\MyActiveXDocs folder. Click 
<b>OK</b> to add this folder to the <b>Directory</b> box. Click <b>OK</b> to create the
virtual directory.</li></p>

<p><li>Check that the docs virtual directory has been added beneath the home directory
in the Virtual Directories window. Close the Personal Web Manager.</li></p>

<p><li>Launch Internet Explorer and enter the following URL into the address box:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>http://[<i>your computer name</i>]/docs/hello.ads</pre>
</td></tr>
</table>
</p>
</ol>

<p>The Hello.ads file should display in the browser as shown in Figure 12.16.</p>

<A NAME="458"><H2>Lesson Summary</H2></A>

<p>ActiveX documents are created by an ActiveX document server application. ActiveX
documents can be viewed and edited by the server application that created them, and by
any ActiveX document container application. When a container application loads an
ActiveX document, it loads resources from the associated server application. The menus
and toolbars are merged with those of the container frame window to make the
functionality of the server application available from within the container
application.</p>

<p>Internet Explorer is the most widely used ActiveX document container application.
Internet Explorer is frequently used to view and edit ActiveX documents deployed on Web
sites. You can use ActiveX documents to provide a much richer interface to Web site
data than you can with standard HTML pages.</p>

<p>You are required to have the ActiveX document server application installed on your
local computer before you can view ActiveX documents over the Internet. This means that
ActiveX documents are best used in a situation where you are in a position to specify 
the platform and configuration of the client computers, such as on a corporate intranet.</p>

<p>The MFC AppWizard that comes with Visual C++ 6.0 provides options that make it easy
to create an ActiveX server application.</p>

</BODY>
</HTML>







