<HTML>
<HEAD>
<TITLE>Lab 3: Displaying Application Data</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03e.htm", "ch03g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="147"><H1>Lab 3: Displaying Application Data</H1></A>

<p>In this lab, you will learn how to use the classes generated by the MFC AppWizard to
implement the basic document/view architecture. Using the STUpload project that you
created for Lab 2, you will learn how to:</p>

<ul>
<p><li> Use the document class to store the application data.</li></p>

<p><li> Use the <b>OnDraw()</b> function of your view class to display the application
data on screen.</li></p>
</ul>

<p>You will recall from the discussion of the STUpload application in Lab 1 that your
client, StockWatch Data Services, requires that the data be loaded into the application
from an ASCII data file. Each of the data rows in the text file will contain three
values: a fund name, a date, and a closing price. Your first task should be to
establish an appropriate structure for the data that you are trying to model. You can
then implement this structure as part of the application's document class.</p>

<p>A data file can be thought of as a collection of data rows. Therefore, an
appropriate way to proceed would be to:</p>

<ol>
<p><li> Create a class that represents a data row.</li></p>

<p><li> Create a collection of these data row classes.</li></p>
</ol>

<p>To save you time and effort, we have implemented the data row class and a class that
encapsulates a collection of these data row classes. The data row class, <b>
CStockData</b>, is implemented with the following data members:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>double m_dblPrice;
COleDateTime m_date;
CString m_strFund;</pre>
</td></tr>
</table>
</p>

<p>The <b>COleDateTime</b> class is an MFC class that encapsulates date and time
values. The <b>CString</b> class is MFC's variable length string class. Information
on both of these classes is available in the Visual C++ Help file.</p>

<p>We have supplied the definition and implementation of the <b>CStockData</b> class in
the StockData.h and StockData.cpp files in the \Chapter 3\Code directory on the
companion CD. The files also define constructors, accessor functions, and comparison
operators for the class, as well as the <b>GetAsString()</b> function to display the
object's data as a string.</p>

<p>We have supplied the <b>CStockDataList</b> class, declared in \Chapter 3\
Code\StockDataList.h as follows:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>class CStockDataList : public CList&lt;CStockData, CStockData &amp;&gt;</pre>
</td></tr>
</table>
</p>

<p>The <b>CStockDataList</b> class is derived from the MFC template-based collection
class <b>CList</b>. The template takes two parameters: the first specifies the type of
object to be contained in the list and the second specifies the type used to reference
objects stored in the list.</p>

<p>MFC provides a number of template-based classes to implement data collections, such
as <b>CArray</b> and <b>CMap</b>. We have chosen to use the <b>CList</b> class because
it provides the facility to insert items at any location in the list. You can find out
more about MFC collection classes by searching for &quot;MFC collection classes&quot;
in the Visual C++ Help file.</p>

<p>You are going to import the source files into your project so that you can use the
<b>CStockData</b> and the <b>CStockDataList</b> classes.</p>

<p><li> <b>To import the source files into your project</b></li></p>

<ol>
<p><li> Using Windows Explorer, copy the files StockData.h, StockData.cpp,
StockDataList.h, and StockDataList.cpp from the \Chapter 3\ Code directory to your
STUpload working directory.</li></p>

<p><li> Open the STUpload project that you created in Lab 2.</li></p>

<p><li> In the Workspace window, switch to FileView.</li></p>

<p><li> Right-click the <b>STUpload Files</b> icon. On the shortcut menu, click <b>Add
Files to Project</b>.</li></p>

<p><li> Browse to the <b>STUpload</b> directory (you are probably already there). Select
the StockData.h, StockData.cpp, StockDataList.h, and StockDataList.cpp files and click
<b>OK</b>. The files will be inserted into the project.</li></p>

<p><li> In the Workspace window, switch to Class View. The STUpload classes tree now
contains the <b>StockData</b> and <b>StockDataList</b> classes. Expand the class icons
and look at the member data and functions that are provided.</li></p>
</ol>

<p>Now you have a class that can be used to represent the application data. The <b>
CStockDataList</b> class represents all the records loaded from one of the ASCII data
files used by StockWatch Data Services. The next task is to create an instance of your
application data class inside your document class, so that your document class contains
your application data. You can achieve this by creating a variable of the <b>
CStockDataList</b> type as a member of the <b>CSTUploadDoc</b> class.</p>

<p><li> <b>To add the m_DocList data member to the CSTUploadDoc class</b></li></p>

<ol>
<p><li> In ClassView, right-click the <b>CSTUploadDoc</b> class icon.</li></p>

<p><li> On the shortcut menu, click <b>Add Member Variable</b>.</li></p>

<p><li> In the <b>Add Member Variable</b> dialog box, type <b>CStockDataList</b> in the
<b>Variable Type</b> box.</li></p>

<p><li> Type <b>m_DocList</b> into the <b>Variable Name</b> box.</li></p>

<p><li> Set the access specifier to <b>Protected</b>. Press <b>OK</b> to add the
variable.</li></p>

<p><li> Double-click the <b>CSTUploadDoc</b> class icon in ClassView to open the
CSTUploadDoc.h file and jump to the top of the class declaration.</li></p>

<p><li> Check that ClassView has added the line</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>#include &quot;StockDataList.h&quot;</pre>
</td></tr>
</table>
</p>

<p>to the top of the CSTUploadDoc.h file.</p>
</ol>

<p>Because you have added m_DocList as a protected member variable, you will need to
add a function that will provide read-only access to the list.</p>

<p><li> <b>To add an accessor function for the protected m_DocList member</b></li></p>

<p>Add the following line to the <b>public</b> section of the <b>CSTUploadDoc</b>
class declaration:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>const CStockDataList &amp; GetDocList() { return m_DocList; }</pre>
</td></tr>
</table>
</p>

<p>You are not going to add functions to load records from a text file in this lab.
However, you are going to add a few <b>CStockData</b> items to the <b>CSTUploadDoc::
m_DocList</b> member so that you can learn how to display the document data in the application's view. As a temporary measure, you will add a few fake <b>
CStockData</b> records in the <b>CSTUploadDoc</b> constructor. We have provided an
implementation of the constructor in the file \Chapter 3\Code\Ch3_01.cpp on the
companion CD.</p>

<p><li> <b>To add the fake CStockData records</b></li></p>

<ol>
<p><li> Using Windows Explorer, locate the \Chapter 3\Code directory on the companion
CD.</li></p>

<p><li> Double-click the Ch3_01.cpp file to open it in Visual C++. The new <b>
CSTUploadDoc</b> constructor function displays as shown below.</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CSTUploadDoc::CSTUploadDoc()
{
     m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
          COleDateTime(1999, 4, 1, 0, 0, 0), 
          22.33));
     m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
          COleDateTime(1999, 4, 2, 0, 0, 0),
          23.44));
     m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
          COleDateTime(1999, 4, 3, 0, 0, 0),
          24.55));
     m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
          COleDateTime(1999, 4, 4, 0, 0, 0),
          25.66));
     m_DocList.AddTail(CStockData(_T(&quot;ARSC&quot;), 
          COleDateTime(1999, 4, 5, 0, 0, 0),
          26.77));
}</pre>
</td></tr>
</table>
</p>

<p>The code adds five <b>CStockData</b> objects to the <b>CSTUploadDoc::m_DocList</b>
member. Select the entire function and press CTRL+C to copy the code to the
clipboard.</p>

<p><li> Close the Ch3_01.cpp file.</li></p>

<p><li> In ClassView, double-click the <b>CSTUploadDoc</b> constructor icon to jump to
the constructor implementation. The default blank constructor should display as
follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CSTUploadDoc::CSTUploadDoc()
{
     // TODO: add one-time construction code here
}</pre>
</td></tr>
</table>
</p>

<p><li> Select and delete the entire blank constructor. Press CTRL+V to paste in the
replacement constructor.</li></p>
</ol>

<p>For the purposes of illustration, you will provide a simple implementation of the
<b>CSTUploadView::OnDraw()</b> function. You will implement a much more sophisticated
drawing function in <A HREF="ch05a.htm">Chapter 5</A>, <i>Implementing Application Behaviors</i>.</p>

<p><li> <b>To implement the CSTUploadView::OnDraw() function</b></li></p>

<ol>
<p><li> Using Windows Explorer, locate the \Chapter 3\Code directory on the companion CD.</li></p>

<p><li> Double-click the Ch3_02.cpp file to edit it in Visual C++. The new <b>
OnDraw()</b> function displays as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CSTUploadView::OnDraw(CDC* pDC)
{
     CSTUploadDoc* pDoc = GetDocument();
     ASSERT_VALID(pDoc);

     // Save the current state of the device context
     int nDC = pDC-&gt;SaveDC();
     
     // Create font for axis labels
     CFont aFont;

     if(aFont.CreateFont(16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
          FF_MODERN, 0))   
          pDC-&gt;SelectObject(&amp;aFont);

     else
     {
          AfxMessageBox(&quot;Unable to create font&quot;);
          return;
     }

     const CStockDataList &amp; pData = pDoc-&gt;GetDocList();

     int yPos = 10;
     int nTextHeight = pDC-&gt;GetTextExtent(&quot;A&quot;).cy;

     POSITION pos = pData.GetHeadPosition();

     while(pos)
     {
          CStockData sd = pData.GetNext(pos);

          pDC-&gt;TextOut(10, yPos, sd.GetAsString());
          yPos += nTextHeight;
     }

     // Restore the original device context
     pDC-&gt;RestoreDC(nDC);
}</pre>
</td></tr>
</table>
</p>

<p>The code uses functions of the <b>CList</b> class to iterate across the <b>
CSTUploadDoc:: m_DocList</b> member, and uses the <b>CStockData::GetAsString()</b>
function to provide a string version of the data that can be displayed using the <b>
CDC::TextOut()</b> function. Note how the CDC functions <b>SaveDC()</b> and <b>
RestoreDC()</b> are used to save and restore the state of the device context at the
beginning and end of the function. This is recommended practice whenever you make calls
to functions that modify the device context. This function modifies the device context
by selecting a new font with the <b>CDC::SelectObject()</b> function.</p>

<p><li> Select the entire function and press CTRL+C to copy the code to the
clipboard.</li></p>

<p><li> Close the Ch3_02.cpp file.</li></p>

<p><li> In ClassView, double-click the <b>CSTUploadView::OnDraw()</b> icon to jump to
the function implementation. The default function should display as follows:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>void CSTUploadView::OnDraw(CDC* pDC)
{
     CSTUploadDoc* pDoc = GetDocument();
     ASSERT_VALID(pDoc);
     // TODO: add draw code for native data here
}</pre>
</td></tr>
</table>
</p>

<p><li> Select and delete the entire <b>OnDraw()</b> function. Press CTRL+V to paste in
the new version.</li></p>
</ol>

<p>You can now build and run your STUpload application. The five stock records should
display as shown in Figure 3.9.</p>

<p>
<A HREF="javascript:fullSize('f03DA09x.htm')"> <img src="images/f03DA09.jpg" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3.9</b> <i>STUpload at the end of Lab 3</i><!-- /caption -->
</p>

</BODY>
</HTML>







