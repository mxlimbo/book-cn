<HTML>
<HEAD>
<TITLE>Lab 4: Creating the STUpload User Interface</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="170"><H1>Lab 4: Creating the STUpload User Interface</H1></A>

<p>In this lab, you will develop the user interface for the STUpload application. You
will create menu commands, edit the toolbar, and create dialog box templates. It is
assumed that you have completed the exercises in this chapter and are familiar with the
operation of the resource editors.</p>

<p>We have provided application icons and toolbar button bitmaps for you. To ensure
that your project corresponds to this lab, replace your current development folder with
a copy of the Chapter4\Lab\Partial\STUpload folder (and its subfolders) found on the
companion CD.</p>

<A NAME="171"><H2>Editing the STUpload Application Menu</H2></A>

<p>In the first part of this lab, you will design the STUpload application menu in
accordance with the customer requirements, as described in Lab 1. At this point, you
should think about the functionality that the application is going to offer. Use the
AppWizard-generated menus as a basis to plan how that functionality will be presented
to the user as a set of menu choices.</p>

<p>You will recall that the user is able to load ASCII text files into the application
and can save the data that these files contain in the application's document
format. You will also implement the standard printing facilities offered by an MFC
document/view application. Therefore, you will want to retain the <b>File</b> menu in
the STUpload application interface.</p>

<p>The STUpload application will display a graph of the data that is loaded in from the
text file. Users will not be able to interact with the data, and the graph will not
contain selectable elements; therefore, you do not need to implement the <b>Edit</b>
menu.</p>

<p><li> <b>To remove the Edit menu</b></li></p>

<ol>

<p><li> Open the STUpload project in Visual C++.</li></p>

<p><li> Click the <b>ResourceView</b> tab and expand the STUpload resources.</li></p>

<p><li> Expand the Menu folder.</li></p>

<p><li> Double-click the <b>IDR_MAINFRAME</b> menu resource to open the menu
editor.</li></p>

<p><li> On the menu bar, click <b>Edit</b>, press DELETE, and then press ENTER to
confirm removal of the <b>Edit</b> menu.</li></p>
</ol>

<p>In place of the <b>Edit</b> menu you will create the <b>Data</b> menu, which
provides options for importing data from a text file, uploading imported data to the
central database, and querying and browsing the central database.</p>

<p><li> <b>To add the Data menu</b></li></p>

<ol>

<p><li> Click the blank menu command to the right of the title bar.</li></p>

<p><li> Drag the blank command and drop it between the <b>File</b> and <b>View</b> menu
commands.</li></p>

<p><li> Double-click the blank menu command to display its properties. Type <b>
&amp;Data</b> as the <b>Caption</b> property.</li></p>
</ol>

<p><li> <b>To add the Import menu command to the Data menu</b></li></p>
<ol>
<p><li> Click the blank command under the <b>Data</b> menu title.</li></p>

<p><li> Type the string <b>&amp;Import&#8230;\tCTRL+I</b> . As you start typing, the <b>
Menu Item Properties</b> dialog box will appear, and your text will be entered into the
<b>Caption</b> box.</li></p>

<p><li> In the <b>Prompt</b> box, type <b>Import data from file\nImport from
file</b>.</li></p>

<p><li> Click the thumbtack icon in the upper-left corner of the <b>Menu Item
Properties</b> dialog box to keep the dialog box open while you edit different menu
commands.</li></p>

<p><li> Click on another command, then click again on the <b>Import</b> menu command.
Confirm that the editor has constructed the menu command ID <b>ID_DATA_IMPORT</b>.</li></p>

<p><li> Repeat the process just outlined to add the commands listed in Table 4.3 below
the <b>Import</b> command on the <b>Data</b> menu.</li></p>
</ol>

<p><b>Table 4.3</b> <i>Data Menu Commands</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Caption</th><th>Prompt</th><th>ID (Generated by editor)</th>
</tr>

<tr>
<td valign="top">&amp;Upload\tCTRL+U</td><td valign="top">Upload data to central database\nUpload Data</td>
<td valign="top">ID_DATA_UPLOAD</td>
</tr>

<tr>
<td valign="top">&amp;Query Database...\tCTRL+Q</td><td valign="top">Query the central database\nQuery Database</td>
<td valign="top">ID_DATA_QUERYDATABASE</td>
</tr>
</table>
</p>

<p>Recall that the application loads text files that contain data from a number of
different funds, and that the user should be able to select which fund to view.
In a subsequent exercise, you will be implementing a Select Fund window&#8212;a modeless
dialog box that contains a list of funds from which the user can select. In this
exercise, you will create a menu command to allow the user to show or hide the Select
Fund window. You will create this command on the <b>View</b> menu because this command
is similar in function to the standard <b>Toolbar</b> and <b>Status Bar</b> options
provided for the <b>View</b> menu by default.</p>

<p><li> <b>To add the Select Fund command to the View menu</b></li></p>

<ol>

<p><li> Select the <b>View</b> menu title.</li></p>

<p><li> Drag the empty command at the bottom of the menu to the top of the menu, above
the <b>Toolbar</b> command.</li></p>

<p><li> Type the caption and prompt as indicated in Table 4.4.</li></p>
</ol>

<p><b>Table 4.4</b> <i> Select Fund Caption and Prompt ID</i></p>

<p>
<table valign="top" cellpadding="5" width="95%"><tr>
<th>Caption</th><th> Prompt</th><th>ID (Generated by editor)</th>
</tr>

<tr>
<td valign="top">&amp;FundSelection</td><td valign="top">View Select Fund window\nFund Selection</td> 
<td valign="top">ID_VIEW_FUNDSELECTION</td>
</tr>
</table>
</p>

<A NAME="172"><H2>Adding New Shortcut Keys</H2></A>

<p>You will now add shortcut keys for your new menu commands.</p>

<p><li> <b>To define shortcut keys</b></li></p>

<ol>

<p><li> In ResourceView, expand the Accelerator folder.</li></p>

<p><li> Double-click the IDR_MAINFRAME accelerator resource to open the accelerator
editor.</li></p>

<p><li> Double-click the blank entry at the bottom of the list of accelerator entries.
The <b>Accelerator Properties</b> property page should appear.</li></p>

<p><li> In the <b>ID</b> list, click <b>ID_DATA_IMPORT</b>.</li></p>

<p><li> Type <b>I</b> in the <b>Key</b> box and select the <b>Ctrl</b> modifier check
box. Clear the <b>Shift</b> check box if it is selected.</li></p>

<p><li> Close the property page. The accelerator is added to the table.</li></p>

<p><li> Repeat this process to add the two shortcut keys in Table 4.5.</li></p>


<p><b>Table 4.5</b> <i>Accelerator Table Entries</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>ID </th><th>Shortcut Key</th>
</tr>

<tr>
<td valign="top">ID_DATA_UPLOAD</td><td valign="top"> CTRL+U</td>
</tr>

<tr>
<td valign="top">ID_DATA_QUERYDATABASE</td><td valign="top"> CTRL+Q</td>
</tr>
</table>
</p>
</ol>

<A NAME="173"><H2>Editing the STUpload Application Toolbar</H2></A>

<p>If you open the <b>IDR_MAINFRAME</b> toolbar resource for the STUpload application,
you will see that we have supplied a new toolbar bitmap for your use. The bitmap
contains icons for the <b>Import</b>, <b>Upload</b>, and <b>Query Database</b>
commands. The new toolbar is illustrated in Figure 4.14.</p>

<p>
<A HREF="javascript:fullSize('F04DA14x.htm')"> <img src="images/F04DA14.JPG" width=404 height=118 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 4.14</b> <i>The STUpload application toolbar</i><!-- /caption -->
</p>

<p>Your next task will be to associate the toolbar buttons with the command IDs that
you created for the new menu commands.</p>

<p><li> <b>To associate a toolbar button with a command ID</b></li></p>

<ol>

<p><li> In ResourceView, expand the Toolbar folder.</li></p>

<p><li> Double-click the IDR_MAINFRAME toolbar resource to open the toolbar editor.</li></p>

<p><li> Click the <b>Import</b> toolbar button.</li></p>

<p><li> Press ENTER to open the <b>Toolbar Button Properties</b> dialog box. You will
see that the button is still associated with the <b>ID_EDIT_CUT</b> ID.</li></p>

<p><li> In the <b>ID</b> list, click <b>ID_DATA_IMPORT</b>. This is the ID that was
generated when you created the <b>Import</b> menu command.</li></p>

<p><li> Click the thumbtack icon to keep the <b>Properties</b> dialog box open.
Following the procedure just outlined, change the command IDs of the other new buttons
as specified in Table 4.6.</li></p>


<p><b>Table 4.6</b> <i>Toolbar Button Command IDs</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Button</th><th>Old ID</th><th>New ID</th>
</tr>

<tr>
<td valign="top">Upload</td><td valign="top"> ID_EDIT_COPY</td><td valign="top"> ID_DATA_UPLOAD</td>
</tr>

<tr>
<td valign="top">Query </td><td valign="top">ID_EDIT_PASTE </td><td valign="top">ID_DATA_QUERYDATABASE</td>
</tr>

<tr>
<td valign="top">Select Fund </td><td valign="top">ID_APP_ABOUT </td><td valign="top">ID_VIEW_FUNDSELECTION</td>
</tr>
</table>
</p>
</ol>

<A NAME="174"><H2>Creating STUpload Application Dialog Boxes</H2></A>

<p>In this portion of the lab, you will be creating two dialog boxes for the STUpload
application: the <b>Conflicting Record</b> dialog box and the <b>Select</b> <b>Fund</b>
dialog box.</p>

<A NAME="175"><H3>Conflicting Record Dialog Box</H3></A>

<p>The <b>Conflicting Record</b> dialog box will contain a <i>rich edit</i>
control&#8212;an edit control that can display rich text format (RTF) text, and three
buttons labeled <b>Yes</b>, <b>No</b>, and <b>Abort</b>. The dialog box will warn the
user of conflicting data records during the import process. The edit control will
display details of the existing and new records, which have the same fund and date
values, but different price values. The user will decide whether to replace the
existing record, leave the existing record and discard the new record, or abort the
import process altogether.</p>

<p>The <b>Conflicting Record</b> dialog box is shown in Figure 4.15. You can use this
illustration as a guide when following through this section of the lab.</p>

<p>
<img src="images/f04DA15.jpg" width=327 height=236>
</p><p>
<!-- caption --><b>Figure 4.15</b> <i>The <b>Conflicting Record</b> dialog box</i><!-- /caption -->
</p>

<p><li> <b>To create the Conflicting Record dialog box</b></li></p>

<ol>

<p><li> In ResourceView, expand the STUpload resources folder.</li></p>

<p><li> Right-click the Dialog folder. Click <b>Insert Dialog</b>. A new blank dialog
box appears.</li></p>

<p><li> Resize the dialog box so that it measures 3 inches tall by 4 inches wide.</li></p>

<p><li> Press ENTER to edit the properties.</li></p>

<p><li> On the <b>General</b> tab, change the dialog resource ID by typing <b>
IDD_CONFLICT_DIALOG</b> in the <b>ID</b> box.</li></p>

<p><li> In the <b>Caption</b> box, type <b>Conflicting Record</b>.</li></p>

<p><li> Change the <b>OK</b> button caption to read <b>Yes</b>, but do not change the
IDOK command ID. Change the <b>Cancel</b> button caption to read <b>No</b>, but do not
change the IDCANCEL command ID.</li></p>

<p><li> Copy the <b>Cancel</b> button to create a new button. Click the new button and
type <b>Abort</b> to set the caption. In the <b>ID</b> list, click <b>IDABORT</b>.
Close the <b>Properties</b> dialog box.</li></p>

<p><li> Reorganize the buttons so that they appear as in Figure 4.15.</li></p>
</ol>

<p><li> <b>To add a static text control to the dialog box</b></li></p>
<ol>
<p><li> Locate and click the <b>Static Text</b> drawing tool.</li></p>

<p><li> Just above the <b>Yes</b> button, draw a static text box that extends across the
dialog box but is no deeper than a single line of text.</li></p>

<p><li> With the static text box selected, type <b>Replace with new record?</b></li></p>

<p><li> Close the <b>Text Properties</b> dialog box that has appeared. Using Figure
4.15 as a guide, ensure that the text item is in an appropriate position and the text
displays fully.</li></p>
</ol>

<p><li> <b>To add a rich edit control to the dialog box</b></li></p>
<ol>

<p><li> Using the ToolTips feature, click the <b>Rich Edit</b> tool on the <b>
Controls</b> toolbar. Do not confuse this with the regular Edit Box tool.</li></p>

<p><li> With the crosshair pointer, draw a rich edit control box as shown in Figure
4.15. This should be as wide as the dashed drawing guides in the editor and deep enough
to take six lines of text.</li></p>

<p><li> Press ENTER to edit the properties.</li></p>

<p><li> On the <b>General</b> tab, change the control ID by typing <b>
IDC_CONFLICT_RICHEDIT</b> in the <b>ID</b> box.</li></p>

<p><li> On the <b>Styles</b> tab, select the <b>Multiline</b> and <b>Read Only</b> check
boxes.</li></p>

<p><li> Close the <b>Rich Edit Properties</b> dialog box.</li></p>

<p><li> From the <b>Layout</b> menu of the Visual Studio main window, click <b>Tab
Order</b>.</li></p>

<p><li> Click first on the <b>Yes</b> button, then on the <b>No</b> button, and then on
the <b>Abort</b> button to set the tab order.</li></p>

<p><li> Press CTRL+T to test the operation of the dialog box.</li></p>
</ol>

<A NAME="176"><H3>Select Fund Window</H3></A>

<p>As mentioned in the <i>Editing the STUpload Application Menu</i> section earlier in
this lab, the Select Fund window will be implemented as a modeless dialog box. This
dialog box will contain a list box control that allows the user to select from all the
fund names currently loaded into the application.</p>

<p>The <b>Select Fund</b> dialog box is shown in Figure 4.16.</p>

<p>
<img src="images/f04DA16.jpg" width=285 height=146>
</p><p>
<!-- caption --><b>Figure 4.16</b> <i>The <b>Select Fund</b> dialog box</i><!-- /caption -->
</p>

<p><li> <b>To create the Select Fund dialog box</b></li></p>

<ol>

<p><li> In ResourceView, right-click the Dialog folder.</li></p>

<p><li> Click <b>Insert Dialog</b>. A new blank dialog box appears. Use the center
bottom resize handle to shrink the height of the dialog box to about 1.75 inches.</li></p>

<p><li> Press ENTER to edit the properties.</li></p>

<p><li> Type <b>IDD_FUNDDIALOG</b> in the <b>ID</b> text box.</li></p>

<p><li> Type <b>Select Fund</b> in the <b>Caption</b> text box.</li></p>

<p><li> On the <b>Styles</b> tab, clear the <b>System menu</b> check box.</li></p>

<p><li> On the <b>Extended Styles</b> tab, select the <b>Tool window</b> check box.</li></p>

<p><li> Close the <b>Dialog</b> <b>Properties</b> sheet.</li></p>
</ol>

<p><li> <b>To add a list box control</b></li></p>
<ol>
<p><li> Click <b>List Box</b> on the <b>Controls</b> toolbar.</li></p>

<p><li> Use the crosshair pointer to draw a list box to fit the height of the drawing
guides. The list box should be about 1 inch wide, as shown in Figure 4.14.</li></p>

<p><li> Press ENTER to edit the properties.</li></p>

<p><li> On the <b>General</b> tab, type <b>IDC_FUNDLIST</b> in the <b>ID</b> box.</li></p>

<p><li> Close the list box property sheet.</li></p>
</ol>

<p>You will now add dialog classes for your <b>Conflicting Record</b> and <b>Select
Fund</b> dialog boxes. In <a href="ch04b.htm#162">Lesson 2</a> of this chapter, you learned that you could create
dialog classes automatically by invoking ClassWizard from within the dialog editor. In
the following exercises, you will use ClassWizard to create the class without having
the dialog editor open. This will demonstrate how ClassWizard automates the creation of
<i>any</i> class that is derived from an MFC class.</p>

<p><li> <b>To create the dialog classes</b></li></p>

<ol>

<p><li> On the <b>Window</b> menu, click <b>Close All</b>.</li></p>

<p><li> On the <b>ClassView</b> tab, press CTRL+W to open ClassWizard.</li></p>

<p><li> Click <b>Add Class</b>. Select <b>New</b> from the pop-up menu.</li></p>

<p><li> The <b>New Class</b> dialog box appears as shown in Figure 4.17.</li></p>

<p>
<img src="images/f04DA17.jpg" width=404 height=366>
</p><p>
<!-- caption --><b>Figure 4.17</b> <i>The <b>New Class</b> dialog box</i><!-- /caption -->
</p>

<p><li> In the <b>Name</b> box, type <b>CConflictDialog</b>.</li></p>

<p><li> In the <b>Base Class</b> list, click <b>CDialog</b>. Note that you can derive
your class from any MFC class. Note, too, that the selection of the <b>CDialog</b>
class enables the <b>Dialog ID</b> list box.</li></p>

<p><li> In the <b>Dialog ID</b> list, click <b>IDD_CONFLICT_DIALOG</b>.</li></p>

<p><li> Click <b>OK</b> to create the new class.</li></p>

<p><li> Repeat the procedure to add a dialog class for the <b>Select Fund</b> dialog
box. The class name should be <b>CFundDialog</b>, the class should be derived from the
<b>CDialog</b> class, and the class should be based on the <b>IDD_FUNDDIALOG</b> dialog
ID.</li></p>

<p><li> Click <b>OK</b> to close ClassWizard. Note that the new classes have been added
to the <b>MyApp classes</b> tree.</li></p>
</ol>

<A NAME="177"><H2>Using Common Dialog Boxes</H2></A>

<p>In the final part of this lab, you will learn how to use a Windows common file
dialog box by creating an instance of the MFC class <b>CFileDialog</b>. The <b>
Import</b> command of the STUpload application is used to locate and open a text file
to import into the application. You will create a handler for the <b>Import</b> command
that will (for now) simply display a Windows common file dialog box with the file type
filter set to show only files with a .dat extension. Because the task of the handler
function is to load the application data, you will create the function as a member of
the application's document object <b>CSTUploadDoc</b>.</p>

<p><li> <b>To create the Import command handler function</b></li></p>

<ol>

<p><li> Press CTRL+W to open ClassWizard.</li></p>

<p><li> In the <b>Class Name</b> list, click <b>CSTUpload</b>.</li></p>

<p><li> In the <b>Object IDs</b> list, click <b>ID_DATA_IMPORT</b>.</li></p>

<p><li> In the <b>Messages</b> list, click <b>COMMAND</b>.</li></p>

<p><li> Click <b>Add Function</b>, and then click <b>OK</b> to accept the name <b>
OnDataImport</b>.</li></p>
</ol>

<p><li> <b>To implement the OnDataImport() function</b></li></p>
<ol>
<p><li> Click <b>Edit Code</b> to edit the function implementation.</li></p>

<p><li> In Windows Explorer, locate the \Chapter 4\Code folder on the companion CD.</li></p>

<p><li> Double-click the CH4_01.cpp file to edit it in Visual C++. The file contains the
following code:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>// String to customize File Dialog
CString strFilter = Data Files (*.dat)|*.dat|All Files (*.*)|*.*||&quot;;
CFileDialog aFileDialog(TRUE, NULL, NULL,
     OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, strFilter);
int nID = aFileDialog.DoModal();</pre>
</td></tr>
</table>
</p>

<p>This code creates an object of the MFC class <b>CFileDialog</b>. The filter string
passed to the constructor specifies that the Windows common file dialog box will be
created with a filter set to show only files with a .dat extension, although the user
will also be able to select the &quot;all files&quot; *.* filter. The dialog box is
activated by a call to the base class method <b>CDialog::DoModal()</b>.</p>

<p><li> Select all the text in the CH4_01.cpp file and press CTRL+C to copy the code to
the clipboard. Close the CH4_01.cpp file.</li></p>

<p><li> Return to the implementation of the <b>OnDataImport()</b> function. Select the
entire // TODO comment line.</li></p>

<p><li> Press CTRL+V to replace this line with the code on the clipboard.</li></p>
</ol>

<p>You can now build and run the STUpload application. Test the menu and toolbar prompt
and ToolTip features. Click <b>Import</b> on the <b>Data</b> menu to ensure that the
common file dialog box appears as expected. You can browse to find the file Ch4Test.dat
in the \Chapter 4\Data folder on the companion CD. You will provide further
implementation of the <b>Import</b> command in Lab 5.</p>

<p>You will not be able to see the dialog boxes that you have created at this point.
Although you have created templates and classes for them, you have not yet created
instances of those classes within your application code. We will create these instances
in <a href="ch05f.htm#227">Lab 5</a>.</p>

</BODY>
</HTML>







