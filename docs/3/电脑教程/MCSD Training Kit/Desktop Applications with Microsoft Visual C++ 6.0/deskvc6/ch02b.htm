<HTML>
<HEAD>
<TITLE>Lesson 1: Creating an MFC Project</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02a.htm", "ch02c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="65"><H1>Lesson 1: Creating an MFC Project</H1></A>

<p>This lesson introduces you to Visual C++ development projects and shows you how to
use the AppWizard to create projects based on the Microsoft Foundation Classes (MFC).
You will use the AppWizard to generate a framework of code and resources that can be
compiled into a working executable program. This program can be used as a basis for the
development of an application to suit your specific requirements.</p>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<ul>
<p><li>Describe how projects and workspaces are organized in Visual C++.</li></p>

<p><li>Describe the types of projects you can create with the AppWizard.</li></p>

<p><li>Understand the steps involved in using the AppWizard to create an MFC executable
application.</li></p>
</ul>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>

<A NAME="66"><H2>Projects, Configurations, and Workspaces</H2></A>

<p>In Visual Studio, application source code files and the files that specify
application resources, such as menus, toolbars and dialog boxes, are grouped together
into <i>projects</i>. A project allows you to edit your files and manage the
relationships&#8212;such as build dependencies&#8212;between them.</p>

<p>In a Visual C++ project, settings for the build tools such as the compiler, resource
compiler, and linker are centrally controlled through the <b>Project Settings</b>
dialog box. You can specify any number of independent <i>configurations</i> of settings
for your project. When you use the AppWizard to create a project, both Debug and
Release configurations are created for you automatically.</p>

<p>Projects are always contained within a <i>workspace</i>. By default, a single
project will be created inside a workspace, and both configurations will have the same
name. To organize your development more effectively, you can group related projects
together into a single workspace. You can also set dependency relationships between
them to ensure build consistency between projects that share files.</p>

<p>Although your workspace might contain more than one project, you work on only one
project at a time, known as the <i>active project</i>. Figure 2.1 is
an illustration of a workspace that includes three projects. Note that the active
project is displayed in bold type.</p>

<p>
<img src="images/f02DA01.jpg" width=271 height=333>
</p><p>
<!-- caption --><b>Figure 2.1</b> <i>Workspace window (FileView)</i><!-- /caption -->
</p>

<A NAME="67"><H2>Creating a New Project</H2></A>

<p>The starting point for any development in Visual C++ is the Visual C++ 
<b>New Project</b> dialog box (shown in Figure 2.2), which lists project types.</p>


<p><li><b>To show the New dialog box</b> </li></p>

<p>Start Visual C++ by clicking <b>Start</b>, pointing to <b>Programs</b>, pointing
to <b>Microsoft Visual C++ 6.0</b>, and then clicking <b>Visual C++</b>. On the 
<b>File</b> menu, click <b>New</b>.</p>

<p>
<A HREF="javascript:fullSize('f02DA02x.htm')"> <img src="images/f02DA02.jpg" width=404 height=288 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.2</b> <i>Visual C++ <b>New</b> dialog box (Enterprise Edition)</i><!-- /caption -->
</p>

<p>You use the <b>New</b> command to create new workspaces, projects, source files, or
resource files. You can also create blank documents for other Microsoft applications
such as Microsoft Word or Microsoft Excel.</p>

<A NAME="68"><H3>Visual C++ Project Types</H3></A>

<p>The Visual C++ <b>New Project</b> dialog box gives you the option of creating a
project for the development of applications, components, or libraries using the
following methods:</p>

<ul>
<p><li><b>MFC development</b> The MFC development option generates a framework based on
MFC, which you can use to develop applications, DLLs, or ActiveX controls. Other
project types, such as those generated by the Internet Server API (ISAPI) Extension
Wizard, are also based on an MFC framework.</li></p>

<p>Although MFC saves you time and effort in the creation of Windows programs, simple
programs might not justify the code size and performance overhead of MFC. To use MFC in
an application, you need to link the MFC static libraries to your code or ensure that
the MFC DLLs are installed on each computer that will run your application. Consider
whether your application needs the types of application framework created by the MFC
project options.</p>

<p><li><b>Win32 development</b> The Win32 options allow you to create simple
Windows-based programs without the overhead of MFC. You can choose to create an empty
project configured with the appropriate settings for generating Windows programs, which
allows you to start developing a Windows application from scratch. Alternatively, you
may choose to have the wizard implement the basic architecture of a Windows
application. The wizard will handle basic tasks such as registering your window
classes, setting up a message loop to process user input to the program, and
implementing a basic window procedure to perform actions based on messages generated by
the user input. You also have an option to create a Windows DLL. Here, too, you may
create a completely empty project or create a project with sample code that shows you
how to export classes, functions, and variables from a DLL. You can also choose to
create a simple console application that will run without a graphical user interface
from the command prompt, or choose an option to create a static library for linking to
an executable program at build time. These options allow you to include support for
MFC, which you might do if you want to take advantage of the MFC string or collection
classes.</li></p>

<p><li><b>ATL development</b> The ActiveX Template Library (ATL) is a set of
template-based C++ classes that helps you create small, fast COM objects. We will be
covering ATL in depth in Chapters 9 through 11. The ATL COM AppWizard allows you to
create a COM server, a DLL, or an .exe file that can host COM components. Once you have
used the wizard to create your ATL project, you can add a number of different types of
ATL-based COM objects. These can include simple COM objects, objects that can be used
with Microsoft Transaction Services or in Active Server Pages, Microsoft Management
Console SnapIns, ActiveX user-interface controls, and OLE DB data providers and
consumers. Other project types, such as those generated by the DevStudio Add-in Wizard,
are also based on ATL templates.</li></p>

<p><li><b>Miscellaneous projects</b> A number of C++ development options do not fall into
the above categories. These include options that allow you to create DLL resources to
run on Microsoft Internet Information Server (IIS) or on Microsoft Cluster Server. You
can also write your own Visual Studio add-ins, create general-purpose utility projects, 
and develop your own custom AppWizards.</li></p>
</ul>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Enterprise edition of Visual C++ contains some project options not
found in the Standard or Professional editions. These allow you to work with DEFINTION
(ODBC) databases directly from Visual Studio and to create SQL Server extended stored
procedures.
</blockquote></div>
</p>

<A NAME="69"><H2>Using the AppWizard</H2></A>

<p>In this exercise, you will use the AppWizard to create an MFC executable
project.</p>

<p><li><b>To launch the AppWizard</b></li></p>

<ol>
<p><li>Select the <b>MFC AppWizard (exe)</b> option (shown in Figure 2.2).</li></p>

<p><li>Type <b>MyApp</b> in the <b>Project name</b> box and click OK.</li></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
AppWizard will create your project in the default location in the
directory: C:\Program Files\Microsoft Visual Studio\MyProjects. If you want, you can
enter a different location in the <b>Location</b> edit box.
</blockquote></div>
</p>

<ol>
<p>The first dialog box of the MFC AppWizard, shown in Figure 2.3, appears.</p>

<p>
<A HREF="javascript:fullSize('f02DA03x.htm')"> <img src="images/f02DA03.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.3</b> <i>MFC AppWizard&#8212;Step 1</i><!-- /caption -->
</p>
</ol>

<p>Step 1 of the MFC AppWizard gives you the option to choose whether your project is
to produce a single-document interface (SDI) application (the <b>Single document</b>
option); a multiple-document interface (MDI) application (the <b>Multiple documents</b>
option); or an application that is based around a dialog box (<b>Dialog based</b>
option). SDI applications permit only one document, displayed within the
application's main window, to be open at a time. MDI applications allow multiple
documents, displayed in multiple child windows, to be opened within a single instance
of an application. Dialog-based applications use a dialog box as their main application
window rather than the style of window that displays a client area inside a frame.
<a href="ch03e.htm#133">Lesson 4</a> in Chapter 3 discusses these application types in more detail.</p>

<p>You can get help on any of the options in the AppWizard by selecting the appropriate
option and pressing F1.</p>

<p>The following steps show you how to make MyApp.exe an SDI application.</p>

<p><li><b>To create a project using AppWizard</b></li></p>

<ol>

<p><li>Change the application type option from <b>Multiple documents</b> to <b>Single
document</b>. Click <b>Next</b> to proceed to the next dialog box (shown in Figure 2.4).</li></p>

<p>
<A HREF="javascript:fullSize('f02DA04x.htm')"> <img src="images/f02DA04.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.4</b> <i>MFC AppWizard&#8212;Step 2</i><!-- /caption -->
</p>

<p><li>A discussion of MFC database support can be found in <A HREF="ch07a.htm">Chapter 7</A>, <i>Adding
Database Support</i>. Leave <b>None</b> selected and click <b>Next</b> to proceed to
the next dialog box (shown in Figure 2.5).</li></p>

<p>
<A HREF="javascript:fullSize('f02DA05x.htm')"> <img src="images/f02DA05.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.5</b> <i>MFC AppWizard&#8212;Step 3</i><!-- /caption -->
</p>

<p><li>This dialog box presents you with options associated with ActiveX technologies.
ActiveX technologies use COM to enable software components to interact with one
another, regardless of the language in which they were created. OLE is another
COM-based technology used for creating and working with compound
documents&#8212;documents that can contain data of different formats, created by
different applications. We cover COM and the ActiveX technologies in depth in 
Chapters 8 through 12. Leave the default options selected, and click <b>Next</b> to 
move to Step 4 (shown in Figure 2.6).</li></p>

<p>
<A HREF="javascript:fullSize('f02DA06x.htm')"> <img src="images/f02DA06.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.6</b> <i>MFC AppWizard&#8212;Step 4</i><!-- /caption -->
</p>

<p><li>The AppWizard options presented allow you to specify the features your
application will support. Leave the default options selected and click 
<b>Advanced</b>.</li></p>

<p><li>The <b>Advanced Options</b> dialog box has two tabs. The <b>Document Template
Strings</b> tab (shown in Figure 2.7) allows you to set options for the document type
associated with your application. This is useful so that Windows can associate a
document type with an application. A user can then double-click a filename and have
Windows automatically start the application appropriate for using that file. The 
<b>Window Styles</b> tab (shown in Figure 2.8) provides settings that allow you to specify
display characteristics of the application window.</li></p>

<p>
<img src="images/f02DA07.jpg" width=335 height=387>
</p><p>
<!-- caption --><b>Figure 2.7</b> <i>The <b>Document Template Strings</b> tab of the <b>Advanced Options</b> dialog box</i><!-- /caption -->
</p>

<p>
<img src="images/f02DA08.jpg" width=335 height=387>
</p><p>
<!-- caption --><b>Figure 2.8</b> <i>The <b>Window Styles</b> tab of the <b>Advanced Options</b> dialog box</i><!-- /caption -->
</p>

<p><li>On the <b>Document Template Strings</b> tab, type <b>mya</b> in the <b>File
extension</b> box and click <b>Close</b>. Click <b>Next</b> to move to the next dialog
box (shown in Figure 2.9).</li></p>

<p>
<A HREF="javascript:fullSize('f02DA09x.htm')"> <img src="images/f02DA09.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.9</b> <i>MFC AppWizard&#8212;Step 5</i><!-- /caption -->
</p>

<p><li>The first option on this dialog box allows you to create an application with an
interface similar to that provided by Windows Explorer&#8212;essentially a tree control
view and a list control view side by side in a split window. Leave <b>MFC Standard</b>
selected. Leave the second option set to the default. The last option deals with how
the MFC Libraries are to be distributed with your application. Leave the <b>As a shared
DLL</b> option selected, and click <b>Next</b> to continue to proceed to the final
AppWizard dialog box, shown in Figure 2.10.</li></p>

<p>
<A HREF="javascript:fullSize('f02DA10x.htm')"> <img src="images/f02DA10.jpg" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.10</b> <i>MFC AppWizard&#8212;Step 6</i><!-- /caption -->
</p>

<p><li>The final AppWizard dialog box (shown in Figure 2.10) provides information about
the classes and files that will be created for you. You can change the automatically 
generated names if you are not happy with the defaults. Notably, it
allows you to change the base class from which your view class is derived. The view
class is used in an MFC application to display the application data. Click the <b>Base
class</b> drop-down list to see the options available.</li></p>

<p>Powerful features are available from this drop-down list. Many of the base classes
listed incorporate functionality based on Windows common controls, which you can use to
help you organize the display of your application data. If you select 
<b>CRichEditView</b>, you can construct an application based on a full-featured text
editor. With <b>CHtmlView</b>, your application would be based on an HTML browser. The
default <b>CView</b> provides your application with a blank window where you can
display your application data in any form you choose. <b>CScrollView</b> is similar to
<b>CView</b>, but it creates a scrollable view that enables you to display more data
than can be shown in a single screen window.</p>

<p><li>In the <b>Base Class</b>, click <b>CScrollView</b>. Click <b>Finish</b> to
proceed to the <b>New Project Information</b> dialog box. The AppWizard presents a
summary of the project so that you can double-check the selections you've
specified. The AppWizard cannot be rerun (against the same project) once the project
has been generated. For this lesson, simply read the summary and click <b>OK</b>. The
project is created and opened for you in a new workspace.</li></p>

<p><li>The <b>MyApp Classes</b> icon will appear in the Workspace window. Click the
icon's plus sign to view the classes that the AppWizard has created. In the next
lesson, you will compile these classes into a working application. Double-click the 
<b>CMyAppApp Class</b> icon to view the source code for the class declaration.</li></p>
</ol>

<A NAME="70"><H2>Lesson Summary</H2></A>

<p>The source code and resource files that make up an application or component are
grouped together in <i>projects</i>. Projects enable you to easily manage your files
and build settings. You can specify any number of independent <i>configurations</i> of
settings for your project. Related projects may be grouped together into a single 
<i>workspace</i>.</p>

<p>Visual C++ provides a number of project wizards that provide frameworks from which
you can develop different types of applications and components, using a variety of
technologies.</p>

<p>The MFC AppWizard allows you to quickly and easily create a set of classes and
resources that can be compiled to produce a complete MFC executable application. By
using the AppWizard you can:</p>

<ul>
<p><li>Create SDI, MDI, or dialog-based applications.</li></p>

<p><li>Add database, ActiveX, or OLE support to your application.</li></p>

<p><li>Specify application features such as toolbars or context-sensitive help.</li></p>

<p><li>Choose from a number of specialized base classes for your application view.</li></p>
</ul>


</BODY>
</HTML>







