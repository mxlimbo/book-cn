<HTML>
<HEAD>
<TITLE>Lesson 2: Win32 Application Architecture</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">

</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03b.htm", "ch03d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="110"><H1>Lesson 2: Win32 Application Architecture</H1></A>

<p>To understand how MFC implements a Windows application, you need to understand the
architecture of the Win32 platform and the applications that run on it. In this lesson,
you will learn about the basic structure and operation of a Win32 application.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>


<ul>
<p><li> Describe the relationship between processes, threads, and applications.</li></p>

<p><li> Describe the role of messages within the Windows operating system.</li></p>

<p><li> Describe the essential steps required to create a basic Win32 application.</li></p>
</ul>


<b>Estimated lesson time: 30 minutes</b>
</blockquote></div>
</p>


<A NAME="111"><H2>Windows Application Fundamentals</H2></A>

<p>A proper understanding of the target platform is essential to developing effective
applications. This section explains the architectural elements of the Win32 operating
systems that will enable you to write well-behaved applications and take full advantage
of the operating system services.</p>

<A NAME="112"><H3>Processes and Threads</H3></A>

<p>An application written for Windows consists of one or more processes. A <i>
process</i>, in the simplest terms, is an instance of an executing program. A process
has an address space and resources assigned to it, and one or more threads run in the
context of the process.</p>

<p>A <i>thread</i> is the basic unit to which the operating system allocates processor
time and is the smallest piece of code that can be scheduled for execution. A thread
runs in the address space of the process and uses resources allocated to the
process.</p>

<p>A process always has at least one thread of execution, known as the <i>primary
thread</i>. You can create additional <i>secondary threads</i> to carry out background
tasks, to take advantage of the multitasking capabilities of Windows 32-bit operating
systems. Using more than one thread in an application is known as <i>
multithreading</i>.</p>

<A NAME="113"><H3>Application Startup</H3></A>

<p>When an application is started, the operating system creates a process and begins
executing the primary thread of that process. When this thread terminates, so does the
process. This primary thread is supplied to the operating system by the startup code in
the form of a function address. All Windows applications define an entry-point function
named <b>WinMain()</b>. The address of the <b>WinMain()</b> function is supplied as the
primary thread.</p>

<p>The application then proceeds to create windows, which will constitute the user
interface. Before windows can be displayed on the screen, the different types of <i>
window classes</i> need to be registered with the operating system. Window classes are
templates that supply the details of how windows are to be created. In the window class
registration process, windows are associated with a <i>window procedure</i> through
which you can specify what the window displays and how the window is to respond to user
input by determining how the window will respond to system messages.</p>

<A NAME="114"><H3>Windows Messages</H3></A>

<p>Whereas a window is the primary form of communication between the user and the
application, internal communications between the operating system, applications, and
application components are conducted through various types of <i>system messages</i>.
For example, when creating an instance of an application, the operating system sends a
series of messages to the application, which responds by initializing itself. Keyboard
and mouse activity cause the operating system to generate messages and send them to the
proper application. The primary task of a Windows-based application can be seen as the
processing of the messages that it receives. This processing involves the routing of
messages to their intended target windows and the execution of expected responses to
those messages according to the messages' types and parameters. It is the task of
the application developer to map these messages to the functions that will handle them
and to provide an appropriate response to the message.</p>

<A NAME="115"><H3>How an Application Processes Messages</H3></A>

<p>Each thread of execution that creates a window is associated with a <i>message
queue</i>. A message queue is a data structure in which the operating system will store
messages for a window. All Windows applications have a main application window and all
main application windows have a <i>message loop</i>. A message loop is program code
that retrieves messages from the message queue and dispatches the messages to the
appropriate window procedure. The window procedure might provide application-specific
handling for the message or pass the message on to the <i>default window
procedure</i>&#8212;a system-defined function that provides default processing for
messages. For example, a message sent to notify the application that the user minimized
the application's main window will be handled in the same way by virtually all
applications. In such a case, the default window procedure handling is appropriate.</p>

<p>Figure 3.3 shows how messages are queued in the system
and processed by the application. Notice how messages might be generated by the
<b>PostMessage()</b> and <b>SendMessage()</b> functions as well as by hardware events.
You might use these Win32 API functions or, more likely, their MFC counterparts <b>
CWnd::PostMessage()</b> and <b>CWnd::SendMessage()</b> to send Windows messages to or
from your application. The <b>PostMessage()</b> function places a message in the
message queue associated with a window, and returns without waiting for the window to
process the message. <b>SendMessage()</b> sends a message to a window and does not
return until the window procedure has processed the message.</p>

<p>
<A HREF="javascript:fullSize('f03DA03x.htm')"> <img src="images/f03DA03.jpg" width=404 height=270 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3.3</b> <i>Windows NT message processing</i><!-- /caption -->
</p>

<A NAME="116"><H3>Essential Elements of a Windows Application</H3></A>

<p>Our discussion of Windows application architecture can be summarized by the
following essential tasks that you must perform when creating a Win32 application:</p>

<ul>
<p><li> Implement a <b>WinMain()</b> function to serve as the entry-point to the
program.</li></p>

<p><li> Register each window class and declare an associated window procedure.</li></p>

<p><li> Create an instance of the application's main window.</li></p>

<p><li> Implement a message loop to relay messages to the appropriate window
procedure.</li></p>

<p><li> Implement the window procedure to handle the messages.</li></p>
</ul>

<A NAME="117"><H2>Creating a Win32 Application</H2></A>

<p>This practice exercise will show you how to use Visual C++ to create a simple,
non-MFC Windows application that illustrates how to implement the preceding five
tasks.</p>

<p><li> <b>To create a Win32 application</b></li></p>

<ol>
<p><li> Start Visual C++.</li></p>

<p><li> On the <b>File</b> menu, click <b>New</b>.</li></p>

<p><li> Select the <b>Win32 Application</b> option.</li></p>

<p><li> Type <b>MyWin32App</b> as the project name.</li></p>

<p><li> Click <b>OK</b>. The Win32 AppWizard appears. Select <b>A typical &quot;Hello
World&quot; application</b>, and then click <b>Finish</b>.</li></p>

<p><li> In the <b>New Project Information</b> dialog box, click <b>OK</b> to create the
project.</li></p>

<p><li> When the project has been created, click the <b>FileView</b> tab of the <b>
Workspace</b> pane. Click the plus sign to expand MyWin32App files. In a similar
fashion, expand the Source Files folder.</li></p>

<p><li> Double-click the <b>MyWin32App.cpp</b> file icon in order to view the generated
source code.</li></p>

<p><li> Look through this code and find the following items:</li></p>
	<ul>
	<p><li> A <b>WinMain()</b> function that calls the initialization functions and
	implements the main message loop.</li></p>
	
	<p><li> A function named <b>MyRegisterClass()</b> that registers the window class of the
	application's main window.</li></p>
	
	<p><li> A window procedure function <b>WndProc()</b> that is associated with the
	main window in the <b>MyRegisterClass()</b> function. This window procedure handles
	the WM_COMMAND message (messages from menu items, controls, or accelerator keys); the
	WM_PAINT message (sent when the system makes a request to paint a portion of an
	application's window); and the WM_DESTROY message (sent when a window is being
	destroyed). All other messages are passed to the default window procedure.</li></p>
	
	<p><li> A function named <b>InitInstance()</b> that creates and displays an instance of
	the main application window.</li></p>
	</ul>
</ol>

<A NAME="118"><H2>Lesson Summary</H2></A>

<p>In this lesson, you learned about the basic architecture of an application running
on the Win32 platform and the basic steps required to implement a simple Windows
application using the Win32 API.</p>

<p>A process can be defined as an instance of an executing program. Each process has at
least one thread of execution known as the primary thread. When an application is run,
a new process is created, and the address of the application's <b>WinMain()</b>
function is passed to the operating system. The <b>WinMain()</b> code is run on the
primary thread of the process.</p>

<p>A Windows application waits for messages generated by hardware events, 
system events, or other applications and components. Messages are processed by
procedures associated with the application window objects. The developer provides these
procedures in order to supply an application with its desired behavior.</p>

</BODY>
</HTML>







