<HTML>
<HEAD>
<TITLE>Chapter 4</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chaad.htm", "chaaf.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="711"><H1>Chapter 4</H1></A>

<A NAME="712"><H2>Review Questions</H2></A>
<OL>

<p><LI><A NAME="CH0401">What are the three types of errors that can occur in a Visual Basic program and when does each occur?</A></LI></p>

<A NAME="713"><H3>The types of errors include syntax, run-time, and logic errors.</H3></A>

<A NAME="714"><H3>Syntax errors occur when code in a statement is constructed incorrectly. </H3></A>

<A NAME="715"><H3>Run-time errors occur while the application is running and a statement attempts an operation that is impossible to carry out.</H3></A>

<A NAME="716"><H3>Logic errors occur when code does not perform as you intended.</H3></A>

<p><LI><A NAME="CH0402">What is the purpose of break mode in the debugging process?</A></LI></p>

<A NAME="717"><H3>Break mode stops the application and lets you check your code one statement at a time. In addition, usiong the various Visual Basic debugging tools, you can also wlak through your code in large blocks, such as by procedure or run to the point where you have placed the insertion point. This can be useful when you wish to "step over" many lines of code that you already know run correctly.</H3></A>

<p><LI><A NAME="CH0403">What is the difference between the Step Into, Step Over and Step Out debugging tools?</A></LI></p>

<A NAME="718"><H3>Step Into runs the code one statement at a time, advances to the next statement and enters break mode.</H3></A>

<A NAME="719"><H3>Step Over executes a called procedure while Step Into enters break mode after calling the procedure.</H3></A>

<A NAME="720"><H3>Step Out moves past the remainder of the code in the current procedure.</H3></A>

<p><LI><A NAME="CH0404">What tasks can you perform using the Immediate window?</A></LI></p>

<A NAME="721"><H3>The Immediate window lets you evaluate expressions, change the value of variables, and execute different procedures. You use the Immediate window when in break mode and manually interact with the application to test for logic errors.</H3></A>

<p><LI><A NAME="CH0405">Identify and explain the two methods of the Debug object.</A></LI></p>

<A NAME="722"><H3>The Debug object's Print method lets you send output from the program to the Immediate window without entering break mode. It lets you track variable values at full execution speed and creates a history list of the values in the Immediate window.</H3></A>

<A NAME="723"><H3>The Debug object's Assert method forces a run-time break when an expression evaluates to False. You only use this method in the Design environment.</H3></A>

<P><LI><A NAME="CH0406">Why do you use the Locals window?</A></LI></P>

<A NAME="724"><H3>You use the Locals window to monitor how your variables change as the code runs.</H3></A>

<p><LI><A NAME="CH0407">What is a watch expression and when do you use it?</A></LI></p>

<A NAME="725"><H3>A watch expression is an expression whose value you want to "watch" or monitor as the code runs. You define them and Visual Basic automatically monitors them. You use a watch expression when you can't trace a problem to a specific statement.</H3></A>
</OL>

</BODY>
</HTML>





