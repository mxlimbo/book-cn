<HTML>
<HEAD>
<TITLE>Lesson 1: Introducing the ADO Object Model</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08a.htm", "ch08c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="397"><H1>Lesson 1: Introducing the ADO Object Model</H1></A>

<P>In <a href="ch07a.htm">Chapter 7</a> you learned that there are two types of OLE DB applications: consumers and providers. An OLE DB consumer is any application that uses OLE DB, such as a Visual Basic application that connects to a database server. You can use the ADO object model to access OLE DB interfaces indirectly through the ADO objects. </P>

<P>The ADO object model provides an easy-to-use set of objects, properties, and methods for writing code to access data. ADO objects can be used in Microsoft Visual C++, Microsoft Visual Basic, Microsoft Visual Basic Scripting Edition, Java, and any platform that supports both COM and Automation. The ADO object model has fewer objects and is easier to use when compared to other data access objects such as Remote Data Objects (RDO) or Data Access Objects (DAO). The ADO object model is sometimes referred to as a &quot;flat&quot; object model.</P>

<P>You can use ADO objects to create more powerful and flexible applications than you can create with the ADO Data control. Although the ADO Data control gives you record navigation and update abilities, using ADO objects allows you to implement all of the data access and manipulation features needed by most applications.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the format of the ADO object model.</li></p>

<p><li>Explain the three main components of the ADO object model.</li></p>

<p><li>Explain the advantages of using ADO objects.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="398"><H2>ADO Objects</H2></A>

<P>The ADO object model is designed to present the most commonly used features of OLE DB. ADO objects provide you with fast and easy access to all types of data. As illustrated in Figure 8.1, the ADO object model has three main components: the Connection object, the Command object, and the Recordset object.</P>

<UL>
<p><li>The Connection object makes a connection between your application and an external data source, such as Microsoft SQL Server. The Connection object also provides a mechanism for initializing and establishing the connection, executing queries, and using transactions. It is the highest-level object in the ADO object model.</li></p>

<p><li>The Command object is used to build queries, including user-specific parameters, to access records from a data source. Typically, these records are returned in a Recordset object. Command objects are created from a database table, stored query, or a Structured Query Language (SQL) query. You can also create relationships between Command objects to retrieve a set of related data in the form of a hierarchy.</li></p>

<p><li>The Recordset object is used to access records returned from an SQL query. You use Recordset objects to present records to the user. A Recordset object can also be used to edit, add, or delete records in the data source.</li></p>
</UL>

<P>
<A HREF="javascript:fullSize('F08xx01x.htm')"> <img src="images/F08xx01.JPG" width=404 height=296 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 8.1</B> <i>ADO object model</i>  <!--/caption-->
</P>


<P>The ADO object model differs from the RDO and DAO object models in that many of the objects can be created independently of one another. ADO objects are stored in a hierarchical format, which is de-emphasized so that you create only the objects that you need for your solution. You can create a Recordset, Connection, or Command object directly without having to create parent objects. For example, you can create a Recordset object without first explicitly creating a Connection object. ADO implicitly creates the required Connection object for you.</P>

<A NAME="399"><H2>ADO Collections</H2></A>

<P>In addition to the three main objects, ADO supports three collections that can provide additional functionality to your applications: </P>

<UL>
<p><li>Errors collection</li></p>

<P>Any operation involving ADO objects can generate one or more provider errors. As each error occurs, one or more Error objects are placed in the Errors collection of the Connection object. Each Error object represents a specific provider error, not an ADO error. In Visual Basic, the occurrence of an ADO-specific error will use the normal Visual Basic Err object.</P>

<p><li>Parameters collection</li></p>

<P>A Command object has a Parameters collection made up of Parameter objects. A Parameters collection contains all the Parameter objects of a Command object. You use it to pass specific data to a parameterized query in a Microsoft Access database. For example, if you want to call a stored query that returns all customers that live in a specified country, you would use a Parameter object to pass the name of the country to the stored query.</P>

<p><li>Fields collection</li></p>

<P>A Recordset object has a Fields collection made up of Field objects. Each Field object corresponds to a column in the Recordset. You use the Fields collection to access specific fields in an existing Recordset object.</P></UL>

<A NAME="400"><H2>Lesson Summary</H2></A>

<P>The ADO object model provides you with a set of objects for writing code to access data. The ADO object model has three main components: the Connection object, the Command object, and the Recordset object.</P>

<UL>
<p><li>The Connection object lets you initialize and establish a connection to a data source, execute queries, and use transactions.</li></p>

<p><li>The Command object lets you issue commands to a database using the Parameters collection. </li></p>

<p><li>The Recordset object lets you manipulate result sets using various methods. Using a Recordset object, you can add, update, delete, and scroll through records. You can also retrieve and update each record using the Fields collection and the Field object. In addition, the ADO object model exposes the Error object that is used by data providers to return more detailed error information to a Visual Basic application.</li></p></UL>

</BODY>
</HTML>





