<HTML>
<HEAD>
<TITLE>Lesson 6: Using the Data Environment</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08f.htm", "ch08h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="433"><H1>Lesson 6: Using the Data Environment</H1></A>

<P>An alternative technique for accessing data is to use the Data Environment, which is new in Visual Basic 6. The Data Environment provides a graphical way to connect to a data source. However, like the ADO Data control, you need to eventually write code to support all of the basic features that a database front-end application normally provides.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Connect to a data source using a Data Environment.</li></p>

<p><li>Return records using an SQL command.</li></p>

<p><li>Use a Command object with a Data Environment.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="434"><H2>Creating a Connection</H2></A>

<P>Before you can use a Data Environment, you need to add one to your project. This is similar to adding a form or module. Once added, you use the Data Environment designer at design time. From within the designer, you first set property values for a Connection object. When you add a Data Environment to your Visual Basic project, the Data Environment designer automatically includes a new connection, called Connection1. At design time, the Data Environment opens the connection and obtains data from the connection, including database object names, table structures, and procedure parameters.</P>

<P><LI><B>To create a database connection</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, point to <B>More ActiveX Designers</B>, and click <B>Data Environment</B>.</LI></P>

<P><LI>Right-click on <B>Connection1</B> and click <B>Properties</B>.</LI></P>

 <P>The <B>Data Link Properties</B> dialog box appears to allow you to specify data source connection information, as illustrated in Figure 8.3.</P>

<UL>
  <P><LI> Provider tab</LI></P>

   <P>In the Provider tab, select an OLE DB provider.</P>

  <P><LI> Connection tab</LI></P>

   <P>The Connection tab contains different settings depending on the OLE DB provider you have chosen. For ODBC data providers, the Connection tab lets you select or enter the ODBC data source name (DSN) that you want to access, enter or build an ODBC connection string rather than using an existing DSN, enter information to log on to the server, and test the connection. For the Jet provider, the Connection tab lets you enter a database name, a username and password, and test the connection.</P>

  <P><LI> Advanced tab</LI></P>

   <P>The Advanced tab lets you view and set other initialization properties for your data.</P>

  <P><LI> All tab</LI></P>

  <P>The All tab lets you view and edit all of the OLE DB initialization properties that are available for your OLE DB provider. Properties may vary, depending on the OLE DB provider that you are using.</P>
</UL>

<P><LI>After you have set connection properties, click <B>OK</B> to close the <B>Data Link Properties</B> dialog box.</LI></P></OL>

<P>
<img src="images/F08xx03.GIF" width=367 height=460 border="0">
</P><P>
<!--caption--><B>Figure 8.3</B> <i>Setting Connection properties through the Data Link Properties dialog box</i>  <!--/caption-->
</P>


<A NAME="435"><H2>Presenting Records to the User</H2></A>

<P>Once a connection has been designed, you can add Command objects to the connection. A Command object can reference a stored query or you can build it from a custom SQL string. Using an existing Command object, you can drag the Command object from the Data View window onto a form. All the fields associated with the object are automatically represented on the form.</P>

<P><LI><B>To create a Command object</B></LI></P>

<OL>
<P><LI>Open the <B>Data Environment Designer</B> and select the appropriate connection.</LI></P>

<P><LI>Right-click the connection and click the <B>Add Command</B>.</LI></P>

<P>A new <B>Command1</B> appears under the selected connection.</P>

<P><LI>Right-click <B>Command1</B> and select <B>Properties</B>.</LI></P>

<P><LI>In the <B>Command1 Properties</B> sheet, enter the appropriate information about the records that should be returned.</LI></P>

<P>When using a Microsoft Access database, you can choose a stored query by selecting <B>View </B>for the <B>Database Object</B>.</P>

<P><LI>Click <B>OK </B>when finished.</LI></P></OL>

<P><LI><B>To display records on a form</B></LI></P>

<OL>
<P><LI>From the <B>Data Environment Designer</B>, select the Command object that will be presented to the user.</LI></P>

<P><LI>Drag the Command object to the appropriate form.</LI></P>

<P>When you drop the command onto the form, all the fields associated with this command are added as text boxes to the form. In addition, labels are added automatically to describe the field to the user.</P></OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
A new recordset object is created automatically. It will have the prefix &quot;rs&quot; added to the Command object name so that you can reference it from within your code.
</blockquote></div></p>

<P>In order to navigate the recordset or modify records, you need to add the appropriate code. However, all the text boxes that were created are automatically bound to the Data Environment's rsCommand1 object.</P>

<P>The following example calls the MoveNext method on the Recordset object created by the data environment:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>DataEnvironment1.rsCommand1.MoveNext</PRE>
</TD></TR></TABLE>
</P>

<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="436"><H2>Practice: Presenting Records Using a Data Environment</H2></A>

<P>In this practice, you will connect to the Northwind database, present records using a Command object, and add navigation controls to the form.</P>

<P><LI><B>To create a Data Environment</B></LI></P>

<OL>
<P><LI>Start Visual Basic and create a new <B>Standard EXE</B> project.</LI></P>

<P><LI>On the <B>Project </B>menu, point to <B>Move ActiveX Designers</B>, and click <B>Data Environment</B>.</LI></P>

<P><LI>Select the data environment in the <B>Project Explorer</B> window and rename it <B>deNorthwind</B>.</LI></P></OL>

<P><LI><B>To connect to the Northwind database</B></LI></P>

<OL>
<P><LI>In the <B>Data Environment Designer</B>, rename <B>Connection1</B> to <B>conCustomers</B>.</LI></P>

<P><LI>Right-click <B>conCustomers</B> and click <B>Properties</B>.</LI></P>

<P><LI>Click <B>Microsoft Jet 3.51 OLE DB Provider </B>and click <B>Next</B>.</LI></P>

<P><LI>Enter the full path and filename of the nwind.mdb database.</LI></P>

<P>If you do not know the path, use the ellipses next to the text box to browse your hard drive. Nwind.mdb should be located in your C:\Program Files\Microsoft Visual Studio\Vb98 folder.</P>

<P><LI>Click <B>Test Connection </B>to verify the data environment can access the Northwind database.</LI></P>

<P><LI>Click <B>OK </B>when finished.</LI></P></OL>

<P><LI><B>To create a Command object</B></LI></P>

<OL>
<P><LI>In the <B>Data Environment Designer</B>, right-click <B>conCustomers </B>and click <B>Add Command</B>.</LI></P>

<P>A new <B>Command1</B> object is added to <B>conCustomers</B>.</P>

<P><LI>Rename <B>Command1</B> to <B>comCustomerDetails</B>.</LI></P>

<P><LI>Right-click <B>comCustomerDetails </B>and click <B>Properties</B>.</LI></P>

<P><LI>Under <B>Database Object</B>, click <B>View</B>.</LI></P>

<P><LI>Under <B>Object Name</B>, click <B>Customers and Suppliers by City</B>.</LI></P>

<P><LI>Click <B>OK</B>.</LI></P></OL>

<P><LI><B>To bind the Command object to a form</B></LI></P>

<OL>
<P><LI>Open <B>Form1</B>'s designer and resize and position it so both the form and data environment designers are in view.</LI></P>

<P><LI>From the <B>Data Environment Designer</B>, drag the <B>comCustomerDetails</B> object to <B>Form1</B>.</LI></P>

<P><LI>Resize the form and move the fields so all text boxes are in view.</LI></P>

<P><LI>Add two command buttons to the bottom of the form.</LI></P>

<P><LI>Name them <B>cmdPrevious</B> and <B>cmdNext</B>,<B> </B>respectively, and add the appropriate caption.</LI></P>

<P><LI>Add the following code to the Click event in <B>cmdPrevious</B>:</LI></P>

 <P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
deNorthwind.rscomCustomerDetails.MovePrevious
If deNorthwind.rscomCustomerDetails.BOF Then
     deNorthwind.rscomCustomerDetails.MoveFirst
End If</PRE>
</TD></TR></TABLE>
</P>

<P><LI>Add the following code to the Click event in <B>cmdNext</B>:</LI></P>

 <P><table cellpadding=5 width="95%"><TR><TD>
<PRE>deNorthwind.rscomCustomerDetails.MoveNext
If deNorthwind.rscomCustomerDetails.EOF Then
     deNorthwind.rscomCustomerDetails.MoveLast
End If</PRE>
</TD></TR></TABLE>
</P>

<P><LI>Save your application to the \Practice\Ch08 folder and test your work.</LI></P></OL>

<A NAME="437"><H2>Lesson Summary</H2></A>

<P>As an alternative to writing all the code to connect to a data source and retrieve records, Visual Basic 6 includes a tool called the Data Environment. Using a Data Environment, you can graphically set many of the Connection properties at design time and then automatically use them when the application runs. In addition, you can create Command objects and drag them to a form, creating a simple user interface. Another benefit of the Data Environment is that it requires less code to be written and lowers the chance of coding errors. However, the Data Environment relies heavily on binding and can reduce the overall efficiency of an application. Depending on you application needs, database support, and client computer, you will have to choose between using the Data Environment or manually writing all the necessary code.</P>

</BODY>
</HTML>





