<HTML>
<HEAD>
<TITLE>Lesson 5: Coding the ADO Data Control</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07e.htm", "ch07g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="373"><H1>Lesson 5: Coding the ADO Data Control</H1></A>

<P>So far you have learned how to set the ADO Data control's properties to connect to a database and bind controls to the ADO Data control. In this lesson, you will learn about manipulating data with the ADO Data control. The ADO Data control allows you to view and edit records without writing any code. However, to support more advanced features, you will need to write some code. Using the ADO Data control, and a bound control's properties, methods, and events, you can gain more control over how your application interacts with external data.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how a Recordset object relates to the ADO Data control.</li></p>

<p><li>Add new records to a Recordset.</li></p>

<p><li>Update existing records in a Recordset.</li></p>

<p><li>Delete records from a Recordset.</li></p>

<p><li>Find records within a Recordset. </li></p>

</UL>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div></P>

<A NAME="374"><H2>Creating a Recordset</H2></A>

<P>The ADO Data control has a property called a Recordset, which is a group of records. The Recordset property of the ADO Data control is an object itself, and has its own properties and methods. A Recordset object represents the records in a base table or the records that result from running a query. Recordset objects are constructed using records (rows) and fields (columns). You can use Recordset objects to manipulate the data in a database. At any time, the Recordset object refers to only a single record within the set as the <I>current</I> <I>record</I>.</P>

<P>To retrieve a set of records, you set the RecordSource property of the ADO Data control. The RecordSource property is a string value that can be a query or table name within a database from which to retrieve records.</P>

<P>You can also use the Filter property to selectively screen out records in a Recordset object. For example, you can set the recordset to contain only records where the CusomerID value is greater than ten.</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcCustomers.Recordset.Filter = &quot;CustomerID &gt; 10&quot;
</pre></td></tr></table></p>

<A NAME="375"><H3>Checking the Recordset Position</H3></A>

<P>After you have set the RecordSource property, you can check the Recordset object's BOF and EOF properties. These properties indicate if you are at the beginning or end of the Recordset. If there are no records in the Recordset, the value of both BOF and EOF is True.</P>

<A NAME="376"><H2>Modifying Records in a Recordset</H2></A>

<P>Although the ADO Data control can automatically modify and update records without you having to add any code, you can use the Update method to modify the data instead of using the arrows on the ADO Data control.</P>

<P>The ADO Data control automatically changes a record in the database when you:</P>

<OL>
<P><LI>Move to the record that you want to modify.</LI></P>

<P><LI>Change any of the information displayed in the bound controls.</LI></P>

<P><LI>Click any arrow on the ADO Data control to move to another record.</LI></P>
</ol>

<P>However, using a command button allows you to add code to the Click event to perform tasks, such as validating fields on the form before updating a record. To perform an update to the current record, use the Update method. For example, in the Click event for the Update button, you can add the following code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcCustomers.Recordset.Update
</pre></td></tr></table></p>


<P>If you want to cancel any changes made to the current record, or to a new record prior to calling the Update method, you can use the CancelUpdate method. The syntax for the CancelUpdate method is shown in the following example:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcEmployees.Recordset.CancelUpdate
</pre></td></tr></table></p>

<A NAME="377"><H2>Adding Records to a Recordset</H2></A>

<P>New records can be added to a Recordset by calling the AddNew method. The AddNew method initializes the bound controls and the new record becomes the current record. If you call AddNew while editing another record, ADO automatically calls the Update method to save any changes and then creates the new record. The following example code will add a new record to the adcCustomers recordset:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcCustomers.Recordset.AddNew
</pre></td></tr></table></p>

<P>To save changes to the new record, you can either call the Update method of the Recordset object, or you can click any one of the navigation buttons on the ADO Data control. You can use the CancelUpdate method to cancel any changes made to a new record prior to navigating with the ADO Data control, or calling the Update method.</P>

<A NAME="378"><H2>Deleting Records from a Recordset</H2></A>

<P>Using the Delete method, you can delete the current record or a group of records in a recordset. The Delete method has an AffectRecords parameter that is used to set how many records the Delete method will affect.</P>

<P>
<TABLE cellpadding=5 width="95%">
<tr>
<Th>AffectRecords value</th>
<Th>Definition</th></TR>
<TR>
<TD VALIGN="TOP">adAffectCurrent
</TD>
<TD VALIGN="TOP">This option will delete only the current record and is the default option.
</TD></TR>
<TR>
<TD VALIGN="TOP">adAffectGroup
</TD>
<TD VALIGN="TOP">This option can be used to delete all records that satisfy the current Filter property setting. You must set the Filter property in order to use this option.
</TD></TR></TABLE></p>

<P>Retrieving field values from the deleted record generates an error. After deleting the current record, the deleted record remains current until you move to a different record. Once you move away from the deleted record, it is no longer accessible.</P>

<P>To invoke the Delete method, use the following syntax:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Recordset.Delete AffectRecords
</pre></td></tr></table></p>

<P>You can check the EOF property to see if you have deleted the last record. If EOF is True, move to the last record in the Recordset, as shown in the following example code:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcCustomers.Recordset.Delete
adcCustomers.Recordset.MoveNext
If adcCustomers.Recordset.EOF = True Then
     adcCustomers.Recordset.MoveLast
End If
</pre></td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The Northwind database has referential integrity rules defined that prevent you from deleting certain records from the Recordset. For example, you cannot delete a Customer if they have records in the Orders table.
</blockquote></div></p>

<A NAME="379"><H2>Searching for Records</H2></A>

<P>To add a search feature to your application, use the Find method for the ADO Data control's recordset. The Find method searches an existing recordset for the record that satisfies the specified criteria. If the criteria is met, the recordset is positioned on that record; otherwise, the position is set on the end of the recordset (EOF).</P>

<P>The Find method has one required parameter, Criteria, and three optional parameters: SkipRows, SearchDirection, and Start.</P>

<P>The Criteria parameter is a string containing a statement that specifies the column name, comparison operator, and value to use in the search. The comparison operator in criteria may be &quot;&gt;&quot; (greater than), &quot;&lt;&quot; (less than), &quot;=&quot; (equal), or &quot;like&quot; (pattern matching).</P>

<P>In the following example, the first customer that resides in the state of Washington will be returned:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
adcCustomers.Find &quot;State = 'WA'&quot;
</pre></td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The Find method can be slow unless you have limited the total number of records in the recordset. Another method for finding records is to use a SQL statement when setting the RecordSource property of the ADO Data control. You can also set the ADO Data control's Filter property to limit the number of records in a recordset.
</blockquote></div></p>

<A NAME="380"><H3>Verifying Find Results</H3></A>

<P>When you search for records using the Find method, you can use the EOF or BOF properties of the Recordset object to determine whether a particular record was found. If the search fails to find the record, you should return to the record where the search began. The following example code shows how to use the EOF and BOF properties:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
'If the record isn't found
If .EOF Or .BOF Then
     'Return to the starting record
     .Bookmark = varBookmark
     MsgBox &quot;Record not found.&quot;
End If
</pre></td></tr></table></p>


<A NAME="381"><H3>Building Criteria with Partial Values</H3></A>

<P>When you add searching capabilities to an application, offering the user the ability to search on a partial value is typically preferable than requiring a complete value. For example, a user may not know the exact name of a company and may only provide a portion of the company name. You can perform a search based on a partial name.</P>

<P>To search based on a partial string, you can use the <B>Like</B> keyword in SQL. Remember, when searching on a string, you must add single quotes around the string. If the comparison operator is LIKE, the string value may contain &quot;%&quot; (one or more occurrences of any character) or &quot;_&quot; (one occurrence of any character). The following example code shows the use of the <B>Like</B> keyword:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
'Match states such as Maine and Massachusetts
adcStates.Find &quot;State LIKE 'M%'&quot;
</pre></td></tr></table></p>

<P>The value in criteria may be a string, floating point number, or date. String values are delimited with single quotes (for example, state = 'WA').</P>

<P>There are three optional parameters for a recordset object's Find method:</P>

<ul>
<p><li>SkipRows</li></p>

<P>SkipRows is an optional Long data type value, whose default value is zero. It is used to specify the offset from the current row or start bookmark to begin the search.</P>

<p><li>SearchDirection </li></p>

<p>SearchDirection specifies whether the search should begin on the current row or the next available row in the direction of the search. The search stops at the start or end of the recordset, depending on the value of searchDirection. It can be one of the following enumerated values:</p> 

<ul>
  <P><LI> adSearchForward (0)&#8212;search forward from the current record </LI></P>

  <P><LI> adSearchBackward (1)&#8212;search backward from the current record.</LI></P>

</UL>

<p><li>Start</li></p>

<p> The Start parameter is a Variant bookmark to use as the starting position for the search. This argument is a Variant and can be either a bookmark or one of the following enumerated values:</p> 

<ul>
  <P><LI> adBookmarkCurrent (0)&#8212;the current record</LI></P>

  <P><LI> adBookmarkFirst (1)&#8212;the first record or adBookmarkLast (2)&#8212;the last record.</LI></P>
</ul>
</UL>

<P>The following example implements the Find method of a recordset object using all four parameters:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim varBookmark As Variant

With adcFood.Recordset
     'Mark the current record
     varBookmark = .Bookmark
     'Specify the search criteria, start and direction
     .Find &quot;CategoryName = 'Condiments'&quot;, 0, adSearchForward, _
          adBookmarkCurrent
     'If the record isn't found
     If .EOF Or .BOF Then
          'Return to the starting record
          .Bookmark = varBookmark
          MsgBox &quot;Record not found.&quot;
     End If
End With
</pre></td></tr></table></p>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>


<A NAME="382"><H2>Practice: Searching for Records in a Recordset</H2></A>

<P>In this practice, you will continue to build on the project you created in the two practices earlier in this chapter. You will add functionality to your application to search for company names.</P>

<P><LI><B>To add search functionality to your application</B></LI></P>

<OL>
<P><LI>Open the prjADO.vbp project you saved in the Binding Controls practice located in the \Practice\Ch07 folder.</LI></P>

<P><LI>Add a command button to your form between Text2 and Adodc1.</LI></P>

<P><LI>On the Properties window, set the Name property of Command1 to cmdSearch.</LI></P>

<P><LI>Set the Caption property of cmdSearch to &amp;Search.</LI></P>

<P><LI>In the Click event of cmdSearch, type the following code:</LI></P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Adodc1.Recordset.MoveFirst
Adodc1.Recordset.Find &quot;CompanyName = 'Frankenversand'&quot;
If Adodc1.Recordset.EOF Then MsgBox &quot;Record not found.&quot;
</pre></td></tr></table></p>

<P><LI>On the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P><LI>Click the <B>Search</B> button on your form.</LI></P>

<P>Notice that the record containing the company name Frankenversand is the current record. Your application should look like the illustration in Figure 7.16.</P>
<P>
<img src="images/F07xx16.GIF" width=222 height=203 border=0>
</P><P>
<!--caption--><B>Figure 7.16</B> <i>Using the Find method to search for the Frankenversand company name</i>  <!--/caption-->
</P>


<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>

<P><LI>To save your project, click <B>Save</B> <B>Project</B> on the <B>File</B> menu.</LI></P>
</ol>

<A NAME="383"><H2>Lesson Summary</H2></A>

<P>The ADO Data control has a property called a Recordset, which is a group of records. The Recordset property of the ADO Data control is an object itself and has its own properties and methods. After you have set the RecordSource property, you can check the Recordset object's BOF and EOF properties. These properties indicate if you are at the beginning or end of the Recordset. </P>

<P>Although the ADO Data control can automatically modify and update records without you having to add any code, you can use the Update method instead of using the arrows on the ADO Data control. New records can be added to a Recordset by calling the AddNew method. Using the Delete method, you can delete the current record or a group of records in a recordset. You can check the EOF property to see if you have deleted the last record. </P>

<P>To add a search feature to your application, you use the Find method for the ADO Data control's recordset. The Find method searches an existing recordset for the record that satisfies the specified criteria. If the criteria is met, the recordset is positioned on that record; otherwise, the position is set on the end of the recordset (EOF).</P>

</BODY>
</HTML>





