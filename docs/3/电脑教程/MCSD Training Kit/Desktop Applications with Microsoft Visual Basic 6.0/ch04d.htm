<HTML>
<HEAD>
<TITLE>Chapter 4 -- Summary</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04c.htm", "ch04e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="250"><H1>Summary</H1></A>

<A NAME="251"><H3>Debugging Your Application</H3></A>

<P>Three types of errors may occur in a Visual Basic program:</P>
<UL>
<p><li>Syntax errors are due to incorrectly constructed statements. Visual Basic can help you fix these errors by alerting you to incorrect syntax as you enter code.</li></p>

<p><li>Run-time errors occur when a statement attempts an operation that is impossible to carry out. Users can detect these errors and therefore, run-time errors should be carefully planned for using error handlers. Using error handlers will be discussed in the next chapter, &quot;<A HREF="ch05a.htm#255">Implementing Error Handling</A>.&quot;</li></p>

<p><li>Logic errors occur when the code does not perform as you intended. The application will run, but will produce incorrect results. These errors are generally the most difficult to resolve. Using the debugging tools included with Visual Basic can make this process easier.</li></p>
</UL>

<P>Working in break mode halts the application so you can check the program at a specific moment; it is critical in the debugging process.</P>

<P>Helpful tools available from the Debug menu or toolbar are:</P>
<UL>
<p><li>Step Into</li></p>

<p><li>Step Over</li></p>

<p><li>Step Out</li></p>

<p><li>Set Next Statement</li></p>

<p><li>Show Next Statement</li></p>
</UL>

<P>Each of these tools can be used to help fix logic errors that have been introduced into a project.</P>

<A NAME="252"><H3>Testing Your Application</H3></A>

<P>Visual Basic includes several tools to help you debug your program by testing various aspects of the application while it is running.</P>
<UL>
<p><li>The Immediate window lets you evaluate any valid Visual Basic expression. It does not accept data declarations, but will allow you to set the value of variables.</li></p>

<p><li>The Debug object has two methods: </li></p>
<UL>
<P><LI> Print sends output from your program to the Immediate window without entering break mode. It creates a history list of the values in the Immediate window.</LI></P>

<P><LI> Assert forces a run-time break when the specified expression evaluates to False.</LI></P>
</UL>
<p><li>The Locals window shows the value of all variables within the scope of the current procedure.</li></p>

<p><li>Watch expressions are those expressions whose value you wish to monitor. Use the Watch window when a problem is not immediately traceable to a statement.</li></p>
</UL>

</BODY>
</HTML>






