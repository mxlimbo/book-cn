<HTML>
<HEAD>
<TITLE>Lesson 3: Creating IIS Applications Using WebClasses</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11c.htm", "ch11e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="602"><H1>Lesson 3: Creating IIS Applications Using WebClasses</H1></A>

<P>An IIS application is a server-side Web application created in Visual Basic. It utilizes one of the new features in Microsoft Visual Basic 6.0: the capability to include WebClasses in projects. A WebClass represents code that can run on an Internet server, and gives you the ability to put code behind URLs. WebClasses provide a way for you to create server-side applications that are hosted by IIS and can be viewed on client Web browsers.</P>

<P>Because Web development emphasizes separating the components of an application into logic, presentation style, navigational structure, and content or state, you can use WebClasses to separate application logic from the presentation (user interface) of the application. This helps you create multitier, distributed applications by including Web components to deliver part of functionality through Web browsers.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the structure of an IIS application.</li></p>

<p><li>Describe how to use WebClasses to create Web-based applications.</li></p>

<p><li>Explain the difference between form-based and Web-based applications.</li></p>

<p><li>Create WebClasses using the WebClass Designer.</li></p>

</UL>
<b>Estimated lesson time: 40 minutes</b>
</blockquote></div></P>

<A NAME="603"><H2>Overview of IIS Applications</H2></A>

<P>An IIS application lives on a Web server and responds to requests from the browser. The application uses HTML to present its user interface and compiled Visual Basic code to process requests and respond to events in the browser. </P>

<P>A user sees an IIS application as a series of HTML pages. A developer sees it as a WebClass that is made up of WebItems. A WebClass is a Visual Basic component that resides on a Web server and responds to input from the browser. A WebItem is an element that can be returned to the browser as part of a response to an HTTP request. A WebItem is usually an HTML page, but it could also be a MIME-type file, such as an image, a .wav file, etc.</P>

<P>In an IIS application, you do not use Visual Basic to create the HTML pages that make up the application's user interface. A Web designer or a developer creates the pages using an HTML editor, a word processing package, or a text editor, and you link the finished pages into your WebClass. </P>

<P>The following table summarizes the differences between forms-based applications and Web-based applications:</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Element</th>
<Th>Forms-based application</th>
<Th>Web-based application</th></TR>
<TR>
<TD VALIGN="TOP">User Interface
</TD>
<TD VALIGN="TOP">Visual Basic forms
</TD>
<TD VALIGN="TOP">HTML pages
</TD></TR>
<TR>
<TD VALIGN="TOP">User Interface Elements
</TD>
<TD VALIGN="TOP">Controls
</TD>
<TD VALIGN="TOP">Elements
</TD></TR>
<TR>
<TD VALIGN="TOP">File Format
</TD>
<TD VALIGN="TOP">.frm files
</TD>
<TD VALIGN="TOP">.htm files
</TD></TR>
<TR>
<TD VALIGN="TOP">Creator
</TD>
<TD VALIGN="TOP">Developer
</TD>
<TD VALIGN="TOP">Web designer and/or Visual Basic developer 
</TD></TR>
<TR>
<TD VALIGN="TOP">Run Time
</TD>
<TD VALIGN="TOP">Visual Basic IDE, Windows
</TD>
<TD VALIGN="TOP">Web browser
</TD></TR></TABLE></p>

<A NAME="604"><H3>Structure of IIS Applications</H3></A>

<P>IIS applications are structured differently from standard, forms-based Visual Basic applications. The user interface consists of a series of HTML pages rather than traditional Visual Basic forms. An HTML page is like a Visual Basic form in that it contains all the visual elements that make up your application's user interface. You can place some of the same items onto a page as you do a form, including text, buttons, check boxes, and option buttons.</P>

<P>An IIS application consists of several pieces. Many of these are generated automatically when you build your project. The pieces include: </P>

<ul>
<p><li>One or more WebClasses, which are generated automatically when you create a WebClass project.</li></p>

<p><li>One or more HTML templates and their events.</li></p>

<p><li>One or more custom WebItems and their events.</li></p>

<p><li>An .asp (Active Server Pages) file that hosts the WebClass in IIS. The .asp is generated automatically when you create a WebClass project; Visual Basic gives it the name you specify in the NameInURL property. </li></p>

<p><li>A WebClass run-time component, Mswcrun.dll, which helps process requests.</li></p>

<p><li>A project DLL (generated automatically on compile) that contains your Visual Basic code and is accessed by the run-time component.</li></p>
</ul>

<p><div class="note"><blockquote><b>NOTE</b><HR>
A WebClass may contain a mixture of templates and custom WebItems, only templates, or only custom WebItems. You do not necessarily have to have both templates and custom WebItems in your WebClasses. 
</blockquote></div></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
To use the IIS Application project template, you must have Internet Information Server or Personal Web Server installed on your computer. You can obtain either of these services by installing the NT Option Pack that is included on the Visual Basic CD.
</blockquote></div></p>

<P>Figure 11.8 shows how the server portions of an IIS application work together.</P>

<P>
<A HREF="javascript:fullSize('F11xx08x.htm')"> <img src="images/F11xx08.JPG" width=404 height=243 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 11.8</B> <i>Structure of an IIS application</i>  <!--/caption-->
</P>


<P>Like other Visual Basic applications, an IIS application has code modules and a visual designer. IIS application objects are stored in plain text files that contain the source code of the WebClass, events, property settings, and the WebItems for the WebClass. Visual Basic uses the .dsr extension for these files. In addition to the .dsr file, Visual Basic generates a .dsx file that contains a binary version of the application. </P>

<A NAME="605"><H2>Using a WebClass to Respond to Client Requests</H2></A>

<P>A WebClass is a Visual Basic COM component that sends information to a Web browser from an Internet server. It is the central unit of the application, processing data from the browser and sending information to the users. You define a series of procedures that determine how the WebClass responds to these requests. A WebClass typically contains WebItems that it uses to provide content to the browser in response to a request, and to expose events. A WebItem can be one of two things: </P>

<ul>
<p><li>An HTML template file </li></p>

<P>An HTML template file is an HTML page that you associate with your WebClass. When the WebClass receives a request, it can send the HTML page to the browser for display. Templates differ from regular HTML pages only in that they often contain replacement areas that the WebClass can process before sending the page to the browser. This allows you to customize your response.</P>
<p><li>A custom WebItem</li></p>

<P>A custom WebItem does not have an associated HTML page it can return to the user. Instead, a custom WebItem is a programmatic resource that consists of one or more event handlers that are logically grouped together to help organize your Web application. These event handlers are called from the browser, either when the page loads or when a user selects an HTML element. The event handlers can generate a response to the browser or pass processing to another of the WebClass's WebItems. </P>
</ul>

<A NAME="606"><H3>Writing Code to Respond to Events</H3></A>

<P>Both templates and custom WebItems make the events available that the WebClass processes when certain actions occur in the browser. You can write event procedures for these events using standard Visual Basic code, thus linking the actions that occur on a Web page to Visual Basic processing.</P>

<P>Each WebClass can contain multiple templates and WebItems. In most applications, you only need one WebClass.You might, however, want to use multiple WebClasses if you want to break up your application into parts that can be reused in other applications.</P>

<A NAME="607"><H3>WebClasses and .asp Files</H3></A>

<P>Each WebClass in an IIS application has an associated .asp file that Visual Basic generates automatically during the compile or debug process. The .asp file hosts the WebClass on the Web server. In addition, it generates the WebClass' run-time component when the application is first started, and launches the first event in the WebClass' life cycle.</P>

<P>A WebClass is associated with only one client for its entire life cycle. Visual Basic creates a logical instance of the WebClass for each client that accesses it. For each client, however, the WebClass is capable of maintaining state between requests. Figure 11.9 shows the relationship between .asp files, WebClasses, and WebClass contents.</P>

<P>For more information about storing state information for an IIS application, search on &quot;Storing State in Objects&quot; in the MSDN Online Help.</P>

<P>
<img src="images/F11xx09.GIF" width=374 height=268 border=0>
</P><P>
<!--caption--><B>Figure 11.9</B> <i>How a WebClass relates to ASP and WebItems</i>  <!--/caption-->
</P>


<A NAME="608"><H2>Using the WebClass Designer</H2></A>

<P>The WebClass designer is a design-time tool in Visual Basic that lets you quickly create and modify the WebItems that represent the pages in your application. You use the designer to: </P>

<ul>
<p><li>Define the contents of the WebClass. A WebClass contains WebItems, which are the HTML pages and other items that the WebClass can send to the browser in response to a user request.</li></p>

<p><li>Add events to the WebItems in the WebClass.</li></p>

<p><li>Write code for each event in the WebClass.</li></p>
</ul>

<P>The WebClass designer contains two panels. The Treeview panel on the left displays the WebItems that make up the WebClass. The WebItems represent the pages on your IIS server. These pages are entry points into the server's <I>namespace</I>. The server's namespace is a collection of symbols, such as filenames, folder names, or database keys, stored in a hierarchical structure. The Details panel on the right displays information about the currently selected item in the Treeview panel. Figure 11.10 illustrates WebItems within a WebClass.</P>

<P>
<A HREF="javascript:fullSize('F11xx10x.htm')"> <img src="images/F11xx10.JPG" width=404 height=191 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B><B>Figure 11.10</B><i> The WebClass designer </i></B> <i></i>  <!--/caption-->
</P>


<P><LI><B>To create an IIS application in Visual Basic</B></LI></P>

<OL>
<P><LI>Create a new project in Visual Basic using the <B>IIS Application</B> project template.</LI></P>

<P>The project contains a WebClass designer and a code module by default. A reference is automatically set to the Microsoft Active Server Page Object Library.</P>
<P><LI>Create custom WebItems to represent each page in your application, or import existing HTML pages as WebItems.</LI></P>

<P><LI>Define the functionality of your application by adding code to the WebItems and the Start event of your WebClass.</LI></P>

<P><LI>Test and debug your application as you would any other Visual Basic application.</LI></P>

<P>When you start your IIS application from Visual Basic, it will run in Internet Explorer, but you will still debug your code in the Visual Basic IDE.</P>
<P><LI>Compile your application, and use the <B>Package and Deployment Wizard</B> to package the .dll and supporting files for distribution.</LI></P>
</ol>

<P><LI><B>To create a custom WebItem</B></LI></P>

<OL>
<P><LI>On the <B>WebClass</B> toolbar, click <B>Add Custom WebItem</B>, as illustrated in Figure 11.11.</LI></P>

<P>A new WebItem appears at the end of the list of custom WebItems in the Treeview panel of the WebClass designer.</P>

<P>
<A HREF="javascript:fullSize('F11xx11x.htm')"> <img src="images/F11xx11.JPG" width=404 height=228 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 11.11</B> <i>The Add Custom WebItem toolbar button</i>  <!--/caption-->
</P>


<P><LI>Type the name of the new WebItem.</LI></P>
</ol>

<P><LI><B>To import an existing HTML page as a WebItem</B></LI></P>

<OL>
<P><LI>On the <B>WebClass</B> toolbar, click <B>Add HTML Template WebItem</B>.</LI></P>

<P>The <B>Add HTML Template</B> dialog box appears.</P>
<P><LI>Select the HTML page you want to add as a WebItem, then click <B>Open</B>.</LI></P>

<P>A new WebItem appears at the end of the list of HTML template WebItems in the Treeview panel of the WebClass designer. In the Details panel, the tags in the HTML page are listed as objects you can use in your code.</P>
<P><LI>Type the name for the new WebItem.</LI></P>
</ol>

<A NAME="609"><H2>Writing Code for a WebClass</H2></A>

<P>Since a WebClass is a COM component, you use the built-in events of the WebClass and the Active Server Pages object model to respond to Web browser requests. WebItems in your WebClass also have events, properties, and methods that you can use to define the functionality of your application. You can also add custom events to WebItems. You use the Active Server Page object model in your COM component to communicate with the Web browser. When the WebClass processes a request from the browser, it must send the browser a response. Generally, that response is a stream of HTML that the browser displays to the user. You can return HTML to the browser in two ways: </P>

<ul>
<p><li>Send the contents of an HTML template file directly to the browser using the WriteTemplate method.</li></p>

<p><li>Produce the HTML stream with Visual Basic code.</li></p>
</ul>

<P>In custom WebItems, you use the Write method of the Response object to write string information to the Web browser. The following example writes a heading to the Web browser:</P>

<P><TABLE Cellpadding=5 width="95%"><TR><TD><PRE>
Response.Write &quot;&lt;H1&gt;Welcome to My Web Site!&lt;/H1&gt;&quot;
</pre></td></tr></table></p>

<P>In HTML template WebItems, you use the WriteTemplate method of the WebItem to write the entire contents of the WebItem to the Web browser. The WriteTemplate method is the simplest way to send HTML to the browser in response to a user action. When the WebClass launches an event procedure for a template event that contains this method, it sends the template's HTML back to the browser. The resulting page displays to the user. The following example writes the contents of the WebItem named Welcome to the Web browser:</P>

<P><TABLE Cellpadding=5 width="95%"><TR><TD><PRE>
Welcome.WriteTemplate
</pre></td></tr></table></p>

<A NAME="610"><H2>Debugging and Deploying Your IIS Application</H2></A>

<P>Just as with DHTML documents and ActiveX documents, you debug your IIS application using the standard Visual Basic debugging tools. When you run your application from the Visual Basic environment, the HTML pages that act as the user interface are opened in Internet Explorer. However, you will still debug your code using the Visual Basic Integrated Development Environment (IDE).</P>

<P>When you compile your application, Visual Basic generates a .dll file and a simple .asp file that instantiates your COM component on the Internet server. You can use the Package and Deployment Wizard to package your application for distribution. The wizard compresses the COM component and any supporting files into a .cab file, and provides you the opportunity to mark the component as safe. You can use the same wizard to deploy your .cab file and .asp file to a server on a network or to a folder. When you mark a control safe for scripting, you guarantee that no script can cause the control to damage the users' computers or data. Controls marked safe for scripting should not be able to obtain unauthorized information from the users' computers nor corrupt their systems.</P>

<A NAME="611"><H2>Integration Between Visual Basic and Other Web Tools</H2></A>

<P>You have learned how Visual Basic can be used to create middle tier components through WebClasses. Now let's review Web programming and how your component fits in.</P>

<P>Web programming has two parts. One is programming the HTML or DHTML that the browser displays. The other is programming the server. You can use Visual Basic 6.0 along with Microsoft FrontPage or Microsoft Visual InterDev to create Web pages. You can then import the Web pages directly into the WebClass designer in Visual Basic, and write code in the Web pages that access the server. You can use DHTML as a front-end to WebClasses. DHTML uses HTTP as its mechanism for communicating with the Web server.</P>

<P>Tools like FrontPage and Visual InterDev are very good at managing and building an entire site, while Visual Basic is better suited for building applications that can include Web client access as part of their functionality. Visual Basic adds value in Web development because it lets you create database applications and access COM components and services such as Microsoft Message Queue Server. </P>

<A NAME="612"><H3>Using Web Classes to Create Distributed Applications</H3></A>

<P>The middle tier in a three-tiered model is the component tier, where application logic is stored, as explained in Chapter 1, &quot;<A HREF="ch01a.htm#31">Planning the Design of an Application</A>.&quot; WebClasses populate the middle tier with application logic that can be accessed via HTTP, Microsoft Message Queue Server (MSMQ), or Distributed Component Object Model (DCOM). In addition, WebClasses can use ADO to connect to OLE DB data sources, including both structured sources of data such as SQL Server and unstructured sources of data such as Microsoft Index Server. </P>

<P>With Visual Basic 6.0, you can build very scalable applications, such as Web sites with more than one machine on the back end as servers and thousands of clients communicating with them on the front end through Web browsers.</P>

<P>Visual Basic 6.0 supports creating objects on remote computers via DCOM, communicating with servers via HTTP through WebClasses, and supports communication between computers using low-level protocols such as Winsock. In addition, Visual Basic can use MSMQ for communication between computers. With MSMQ, you can take class modules created in Visual Basic 6.0 and persist them directly onto a queue for delivery now or later to another computer.</P>

<A NAME="613"><H2>Lesson Summary</H2></A>

<P>An IIS application is a server-side Web application in Visual Basic that utilizes WebClasses, a new feature in Visual Basic 6.0. An IIS application has several components:</P>

<ul>
<p><li>One or more WebClasses, which are components that represent code that can run on an Internet server. They are generated automatically when you create a WebClass project.</li></p>

<p><li>One or more HTML templates and their events.</li></p>

<p><li>One or more custom WebItems and their events.</li></p>

<p><li>An .asp (Active Server Pages) file that hosts the WebClass in IIS. It is generated automatically when you create a WebClass project.</li></p>

<p><li>A WebClass run-time component.</li></p>

<p><li>A project DLL that contains your Visual Basic code and is accessed by the run-time component. It is generated automatically on compile.</li></p>
</ul>

<P>The WebClass designer enables you to quickly create and/or modify the WebItems that represent the pages in your application.</P>

<P>You use the standard Visual Basic debugging tools to debug IIS applications. </P>

</BODY>
</HTML>






