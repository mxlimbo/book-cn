<HTML>
<HEAD>
<TITLE>Lesson 1: Creating an Error Handler</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05a.htm", "ch05c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="258"><H1>Lesson 1: Creating an Error Handler</H1></A>

<P>Sometimes it is impossible to create an error-free application. For example, suppose your program offers the user the ability to save data to a file on a floppy disk. Even though your code may work as expected, you cannot guarantee that the user has first inserted a floppy disk into the drive. In this case, a run-time error will occur even though the code itself is accurate. Visual Basic's error-handling capability provides a technique for dealing with problems like this. To implement error handling, you create special statements called <I>error handlers</I>. Error handlers are also useful to control mistakes that you may have made when writing the code. Error handlers execute only if a run-time error is encountered.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how Visual Basic manages run-time errors.</li></p>

<p><li>Create an error handler in your application.</li></p>

<p><li>Describe the errors-calling chain used by Visual Basic.</li></p>

</UL>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div></P>

<A NAME="259"><H2>How Visual Basic Handles a Run-Time Error</H2></A>

<P>When Visual Basic encounters a run-time error, it checks to see whether an error handler has been enabled. If it has not, Visual Basic automatically presents the user with a message box showing the error number and a brief description. Unfortunately, when the user clicks OK to this message, the Visual Basic program immediately terminates. Code in an Unload event that might have queried the user to first save their changes is ignored. For this reason, allowing Visual Basic to automatically handle run-time errors is not recommended. </P>

<A NAME="260"><H2>Implementing a Local Error Handler</H2></A>

<P>Error handlers are specific to individual procedures. This means that each event or general procedure you create should have its own error handler. There are three basic steps in creating an error handler:</P>

<ol><P><LI>Enable an error handler.</li></p>

<P><LI>Add code to handle the possible errors.</li></p>

<P><LI>Resume normal execution of the program.</li></p></ol>

<A NAME="261"><H3>Enabling an Error Handler</H3></A>

<P>The first step in controlling run-time errors is to enable an error handler. Each procedure that contains code should include an error handler of some kind. To enable an error handler, use the On Error GoTo statement and provide the name of a label in your procedure. The label marks a point in code that you want Visual Basic to jump to when a run-time error occurs. Labels follow the same naming rules as variables. However, you must add a colon to the end of the name.</P>

<P>The following example enables an error handler called OpenError:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdOpen_Click()
     On Error GoTo OpenError
     '[code that opens a database]

     Exit Sub
OpenError:
     '[Code to handle an error goes here]
End Sub
</pre></td></tr></table></p>

<P>Visual Basic does not stop executing when it reaches a label. If you do not tell Visual Basic to exit the procedure, the error handler code executes even when there is no run-time error. Use the Exit Sub or Exit Function statement before the start of an error handler to avoid this problem.</P>

<A NAME="262"><H3>Handling Errors</H3></A>

<P>The second step in creating an error handler is to add code under the label to manage the potential errors that could occur. Visual Basic's Err object can be used to determine the specific error. The Err object's Number property provides the Visual Basic error code. Use this property to have your application prompt the user to take corrective action, such as when a floppy disk is not present, or to proceed with an orderly shutdown when a critical error occurs. If you want the user to see a description of the error, use the Description property of the Err object.</P>

<P>The following example uses the Err object to determine what error occurred:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
ErrorHandler:
Select Case Err.Number
  Case 53
       'File not found
        MsgBox Err.Description
        MsgBox &quot;Please enter a valid filename.&quot;
  Case Else
       'An unplanned error occurred
        MsgBox &quot;The following error occurred: &quot; &amp; Err.Description
End Select
</pre></td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When writing error handlers that use a Select Case, consider including the Case Else statement to handle errors that you did not plan for.
</blockquote></div></p>

<A NAME="263"><H3>Resuming Execution</H3></A>

<P>When the error has been handled, the final step is to resume execution of the application. There are three ways to return control:</P>

<ul><p><li>Retry the line of code that caused the initial error.</li></p>

<p><li>Start from the line immediately following the one that caused the error.</li></p>

<p><li>Terminate the application.</li></p></ul>

<P>If the error handler prompted the user to correct the problem, such as asking the user to insert a floppy disk into the drive, you may want the application to retry the operation that initially failed. To cause Visual Basic to retry the line of code that failed, use the Resume keyword. To skip the line of code that caused the error and continue executing your program, use the Resume Next statement. The final option is to close the form and exit the program by calling Unload Me, which ensures an orderly shutdown.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Avoid using the End keyword. End will not run code associated with Unload or QueryUnload events and data could be lost.
</blockquote></div></p>

<P>In the following example, the error handler prompts the user to retry the operation, ignore the problem, or exit the application:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim Answer As Integer
ErrorHandler:
Answer = MsgBox(&quot;An error occurred.&quot;, vbAbortRetryIgnore)
Select Case Answer
     Case vbRetry
          Resume
     Case vbIgnore
          Resume Next
     Case vbAbort
          Unload Me
End Select
</pre></td></tr></table></p>


<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="264"><H2>Practice: Creating an Error Handler</H2></A>

<P>In this practice, you will create an error handler that runs when a file cannot be opened.</P>

<p>
<img src="images/video.gif" width=78 height=54 border=0>
</p>

<P>To see a demonstration, run the Chap05.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To create the file open procedure</B></LI></P>

<ol>
<P><LI>Start Visual Basic and open a new <B>Standard EXE</B> project.</li></p>

<P><LI>Add a Command button to the form.</li></p>

<P><LI>In the Click event for the Command button, add the following code:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Dim filename As String
Dim answer as integer
filename = InputBox(&quot;Please enter the file name to open:&quot;)
Open filename For Input As #1
Close #1
</pre></td></tr></table></p>
</ol>

<P><LI><B>To create an error handler</B></LI></P>

<ol>
<P><LI>In the Click event for the Command button, add the following statement after the variable declarations:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
On Error GoTo MyHandler
</pre></td></tr></table></p>

<P>This enables the error handler.</P>

<P><LI>In the same event, add the following code before the <B>End Sub </B>statement:</li></p>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Exit Sub
MyHandler:
Select Case Err.Number
    Case 53
        'The file was not found
               Answer = MsgBox(&quot;The file was not found.&quot;, _
                   vbAbortRetryIgnore)
               Select Case Answer
                 Case vbRetry
                        filename = InputBox(&quot;Please enter the filename&quot; &amp;_
                             &quot; to open:&quot;)
                        Resume
                 Case vbIgnore
                          Resume Next
                 Case vbAbort
                          Unload Me
               End Select
End Select
</pre></td></tr></table></p>

<P><LI>Save this application to the \Practice\Ch05 directory, then test your work. Be sure to try entering a valid filename and an invalid filename.</li></P>
</ol>

<A NAME="265"><H2>Errors-Calling Chain</H2></A>

<P>If the procedure that generates a run-time error does not have an error trap, Visual Basic checks the calling procedure to see whether <I>it</I> has an error trap. If it does not, Visual Basic repeats the process until the first procedure is checked. If an error handler is not present in any of the procedures, the default message box is displayed to the user and the application terminates. This process is called the <I>errors-calling chain</I>.</P>

<P>Figure 5.1 illustrates an example of the errors-calling chain. The following sequence of steps occur:</P>

<P>Step 1: ProcedureA, which contains an error handler, calls ProcedureB.</P>

<P>Step 2: ProcedureB, which does not have an error handler, calls ProcedureC. An error occurs in ProcedureC and since there is no local error handler in ProcedureC, the errors-calling chain is invoked.</P>

<P>Step 3: Visual Basic halts execution of code in ProcedureC and checks ProcedureB, the calling procedure, for an error trap.</P>

<P>Step 4: Since no error trap is found in ProcedureB, Visual Basic checks with the originating procedure, ProcedureA. An error handler is found in ProcedureA and the code in this error handler is executed.</P>

<P>
<A HREF="javascript:fullSize('F05xx01x.htm')"> <img src="images/F05xx01.JPG" width=404 height=355 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 5.1</B> <i>Example of an errors-calling chain</i>  <!--/caption-->
</P>


<A NAME="266"><H3>Resuming Execution from the Calling Chain</H3></A>

<P>Visual Basic automatically uses the calling chain to resolve a run-time error, which does not require any additional coding on your part. However, resuming execution of the program is more complex and requires the developer to add specific code statements. The Resume and Resume Next statements are used to continue execution of your program and apply only to the line of code that called the procedure that caused the error, not the actual line of code where the error occurred. Figure 5.2 illustrates the Resume and Resume Next statements when used with a calling chain. Depending on which statement is used, the application may retry the entire procedure, or may skip the line and continue running the application on the next executable line of code. When creating an error handler, the developer will need to decide how the application needs to resume after an error has been encountered.</P>

<P>
<A HREF="javascript:fullSize('F05xx02x.htm')"> <img src="images/F05xx02.JPG" width=404 height=311 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 5.2</B> <i>Resume and Resume Next in a calling chain</i>  <!--/caption-->
</P>


<P>The recommended practice is to place local error-handling code in each procedure rather than relying on the calling chain for error handling.</P>

<A NAME="267"><H2>Disabling an Error Handler</H2></A>

<P>Depending on the needs of your application, you may have to disable an error handler from within your code. To do this, use the On Error GoTo 0 statement. This statement disables only a local error handler and has no effect on the errors-calling chain. The following example enables an error handler and then later disables it:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Private Sub cmdOpen_Click()
     Dim Answer As Integer
 
     'Enable the error handler
     On Error GoTo ErrorHandler
  
     '[code that opens a database]
  
     'Disable the error handler
     On Error GoTo 0
  
     Exit Sub
  
ErrorHandler:
     Answer = MsgBox(&quot;An error occurred.&quot;, vbAbortRetryIgnore)
     Select Case Answer
          Case vbAbort
               Unload Me
          Case vbRetry
               Resume
          Case vbIgnore
               Resume Next
     End Select
End Sub
</pre></td></tr></table></p>

<A NAME="268"><H2>Visual Basic Error Handling Options</H2></A>

<P>When testing error handlers, you may want to control how Visual Basic manages errors at design time. There are three error trapping options:</P>

<ul>
<p><li>Break on All Errors</li></p>

<P>Any error causes the project to enter break mode, whether or not an error handler is active and whether or not the code is in a class module. You will learn more about using class modules in Chapter 6, &quot;<A HREF="ch06a.htm#287">Introduction to Class Modules</A>.&quot;</P>
<p><li>Break in Class Module</li></p>

<p> Any unhandled error produced in a class module causes the project to enter break mode at the line of code in the class module that produced the error. </p>

  <P>When you debug an ActiveX component project by running an ActiveX client test program in another project, use this option. Set it in the ActiveX component project to break on errors in its class modules instead of always returning the error to the client test program. You will learn more about creating ActiveX components in Chapter 10, &quot;<A HREF="ch10a.htm#489">Creating and Managing COM Components</A>.&quot;</P>

<p><li>Break on Unhandled Errors</li></p>

<P>If an error handler is active, the error is trapped without entering break mode. If there is no active error handler, the error causes the project to enter break mode. An unhandled error in a class module, however, causes the project to enter break mode on the line of code that invoked the offending procedure of the class. </P>
</ul>

<P><LI><B>To access the Visual Basic options for error handling</B></LI></P>

<ol>
<P><LI>On the <B>Tools </B>menu, click <B>Options</B>.</li></p>

<P><LI>Click the <B>General</B> tab.</li></p>

<P><LI>Select the appropriate error-handling option.</li></p>
</ol>

<A NAME="269"><H2>Lesson Summary</H2></A>

<P>You can not always plan for every possible error in an application. Visual Basic includes a default error handler that presents a message to the user, then terminates the application. However, this solution does not allow the user to save any work or properly close the application. Therefore, you should implement your own error handlers to resolve run-time errors. An error handler is associated with a specific procedure and should be added to every event or general procedure that you have included in your code.</P>

<P>Use these steps to create an error handler:</P>

<ul>
<p><li>Retry the line of code that caused the initial error.</li></p>

<p><li>Start from the line immediately following the one that caused the error.</li></p>

<p><li>Terminate the application.</li></p>
</ul>

<P>Although it is best to add an error handler to each procedure, Visual Basic will automatically check the calling chain to find an error handler before it displays the default error message box. If an error handler is found in a parent procedure, that error-handler code will be used. This may allow the user to resolve the problem or at least save changes before the application terminates.</P>

<P>Visual Basic also provides various options for managing run-time errors at design time. Your application can enter break mode when any error occurs, when the error occurs in a class module, or when any unhandled error occurs.</P>

</BODY>
</HTML>






