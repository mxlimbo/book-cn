<HTML>
<HEAD>
<TITLE>Lesson 4: Using Menus</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02d.htm", "ch02f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="134"><H1>Lesson 4: Using Menus</H1></A>

<P>Menus provide a structured way for users to access the commands and tools contained in an application. Proper planning and design of menus and toolbars is essential and ensures proper functionality and accessibility of your application to users.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Explain the importance of menus in interface design.</li></p>

<p><li>Describe the process of creating a menu using the Menu Editor, including separator bars, and access and shortcut keys.</li></p>

<p><li>Describe the process for creating a pop-up menu.</li></p>

<p><li>Explain how to enable or disable a menu control.</li></p>

<p><li>Explain how to display a check mark on a menu.</li></p>

<p><li>Explain how to make menu items invisible.</li></p>

<p><li>Explain how to use a control array to add menu controls at run time.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="135"><H2>Creating Menus at Design Time</H2></A>

<P>Well-designed menus help users understand and use your application. With the Visual Basic Menu Editor, you can create menus that enhance the quality of your applications.</P>

<A NAME="136"><H3>Using the Menu Editor</H3></A>

<P>The Menu Editor (see Figure 2.16) lets you do the following: </P>

<ul><p><li>Create new menus and menu bars.</li></p>

<p><li>Add new commands to existing menus.</li></p>

<p><li>Modify menu properties.</li></p></ul>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Menu properties can also be set in the Properties window. To access the  Properties window, press F4 and click the name of the menu item from the drop-down Object list box.
</blockquote></div></p>

<P>A menu control has many properties such as Name, Caption, and Index.</P>

<ul><p><li>The Name property identifies the menu control in code. </li></p>

<p><li>The Index property identifies controls that share the same name. </li></p>

<p><li>The Description property is the text that appears on the menu bar at run time.</li></p>
</ul>

<P>
<A HREF="javascript:fullSize('F02xx16x.htm')"> <img src="images/F02xx16.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.16</B> <i>The Menu Editor window</i>  <!--/caption-->
</P>


<P>The lower portion of the Menu Editor window lists all the menu controls for the current form, as illustrated in Figure 2.16. Select a menu item from the list box to edit the properties for that item.</P>

<P>The position of the menu control in the menu control list box determines whether the control is a menu title, a menu item, a submenu title, or a submenu item:</P>

<ul><p><li>A menu control that appears flush left in the list box displays on the menu bar as a menu title; Figure 2.17 illustrates the menu's appearance.</li></p>

<p><li>A menu control that is indented once in the list box displays on the menu when the user clicks the menu title.</li></p>

<p><li>An indented menu control, followed by menu controls that are further indented, becomes a submenu title. Menu controls indented below the submenu title become items of that submenu.</li></p>
</ul>

<P>
<img src="images/F02xx17.GIF" width=192 height=78 border=0>
</P><P>
<!--caption--><B>Figure 2.17</B> <i>Displaying your menus</i>  <!--/caption-->
</P>


<P><LI><B>To create menu controls in the Menu Editor</B></LI></P>

<OL>
<P><LI>Click the form.</LI></P>

<P><LI>On the <B>Tools</B> menu, click <B>Menu Editor</B>, or click the <B>Menu Editor</B> button on the toolbar.</LI></P>

<P><LI>In the <B>Caption</B> text box, enter the text for the first menu's title. This title will appear on the menu bar. </LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Using an ampersand (&amp;) in the caption enables access keys in a menu item.</blockquote></div></p>
<OL>
<P><LI value="4">In the <B>Name</B> text box, enter the name that you will use to refer to the menu control in code.</LI></P>

<P><LI>Click the left or right arrow button to decrease or increase, respectively, the indentation level of the control.</LI></P>

<P><LI>Set the other properties as necessary.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
You can do this in the Menu Editor or, later, in the Properties window.
</blockquote></div></p>
<OL>
<P><LI value="7">Click <B>Next</B> to create another menu control, or click <B>Insert</B> to add a menu control between existing controls.</LI></P>

<P><LI>When you have created all the menu controls for the form, click <B>OK</B> to close the <B>Menu Editor</B>.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Click the up arrow and down arrow buttons to move the item in the existing menu structure.</blockquote></div></p>

<A NAME="137"><H3>Separating Menu Items</H3></A>

<P>A separator bar is a horizontal line between items on a menu. You can use a hyphen (-) as the Caption property for a menu control to create a separator bar. On menus that contain multiple items, you can use separator bars to divide items into logical groups. </P>

<P>In the following example, the File menu uses a separator bar between the Close and Exit commands to divide the menu items into two separate groups, as illustrated in Figure 2.18. </P>

<P>
<img src="images/F02xx18.GIF" width=176 height=161 border=0>
</P><P>
<!--caption--><B>Figure 2.18</B> <i>Menu separators</i>  <!--/caption-->
</P>


<P><LI><B>To create a separator bar in the Menu Editor </B></LI></P>

<OL>
<P><LI>Click <B>Insert</B> to insert a menu item between the menu items you want to separate.</LI></P>

<P><LI>If necessary, click the right arrow button to indent the new menu item to the same level as the menu items it will separate.</LI></P>

<P><LI>Enter a hyphen (<B>-</B>) in the <B>Caption</B> text box.</LI></P>

<P><LI>Set the <B>Name</B> property.</LI></P>

<P><LI>Click <B>OK</B> to close the <B>Menu Editor</B>.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Although separator bars are created as menu items, they do not respond to the Click event, and users cannot choose them. A menu item cannot be a separator bar if it is a menu title, has submenu items, is checked or disabled, or has a shortcut key.
</blockquote></div></p>

<A NAME="138"><H3>Menu Access and Shortcut Keys</H3></A>

<P>You can improve keyboard access to menu items by defining access keys and shortcut keys.</P>

<A NAME="139"><H3>Access Keys</H3></A>

<P>Access keys allow the user to open a menu by pressing the ALT key and typing a designated letter. When a menu is open, the user can choose a command by pressing the letter (the access key) assigned to it. For example, ALT+E opens the Edit menu, and P selects the Paste menu item. An access-key assignment appears as an underlined letter in the menu control's caption, as illustrated in Figure 2.18.</P>

<P><LI><B>To assign an access key to a menu control in the Menu Editor</B></LI></P>

<OL>
<P><LI>Click the menu item that you want to assign an access key. </LI></P>

<P><LI>In the <B>Caption</B> box, enter an ampersand (<B>&amp;</B>) in front of the desired letter for the access key.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Do not use duplicate access keys on menus. If you use the same access key for more than one menu item, the key will not work. For example, if C is the access key for both Cut and Copy, when you select the Edit menu and press C, the Copy command will be selected, but the application will not carry out the command until the user presses ENTER. The Cut command cannot be selected with an access key.
</blockquote></div></p>

<A NAME="140"><H3>Shortcut Keys</H3></A>

<P>Shortcut keys run a menu item immediately when pressed. Frequently used menu items may be assigned a keyboard shortcut. The shortcut provides a single-step method of keyboard access. Without a shortcut, you must press ALT, a menu title access character, and then a menu item access character. Shortcut key assignments include function key and control key combinations, such as CTRL+F1 or CTRL+A. Shortcut keys appear on the menu to the right of the corresponding menu item, as shown in Figure 2.19.</P>

<P>
<img src="images/F02xx19.GIF" width=195 height=77 border=0>
</P><P>
<!--caption--><B>Figure 2.19</B> <i>Using shortcut keys</i>  <!--/caption-->
</P>


<P><LI><B>To assign a shortcut key to a menu item</B></LI></P>

<OL>
<P><LI>Open the <B>Menu</B> <B>Editor</B> and click the menu item.</LI></P>

<P><LI>Select the name of a function key or key combination in the <B>Shortcut</B> combo box.</LI></P>

<P><LI>To remove a shortcut key assignment, click <B>(none)</B> from the top of the list.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When a shortcut key is added to a menu item, the shortcut keys appear automatically on the menu. Therefore, you do not have to enter CTRL+key in the Caption box of the Menu Editor.</blockquote></div></p>

<A NAME="141"><H3>Creating Pop-up Menus</H3></A>

<P>Pop-up menus are a convenient way to provide access to common, contextual commands. You can use the PopupMenu method to display a Menu created in the Menu Editor. This method displays a pop-up menu on top of a form or control at the current mouse location. The menu can also be displayed at specified coordinates. If a menu has at least one menu item, it can be displayed as a pop-up menu at run time.</P>

<P>The following example displays a pop-up menu at the cursor location when the user clicks the right mouse button on a form.</P>

<p><li><b>Creating Pop-upMenus</b></li>

<OL>
<P><LI>Create a form that includes a menu control named <B>mnuFile</B>, with at least one submenu.</LI></P>

<P><LI>Add the following code to the Form_MouseDown event.</LI></P>

<table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub Form_MouseDown (Button As Integer,  _
           Shift As, X As Single, Y As Single)
      If Button = vbRightButton Then
           PopupMenu mnuFile
      End If
 End Sub
</PRE>
</td></tr></table> 
 
<P>The PopupMenu method displays the mnuFile menu when the user right clicks the form.</P>
</OL>

<A NAME="143"><H2>Modifying Menus at Run Time</H2></A>

<P>The menus that you create at design time can respond dynamically to run-time conditions. For example, if a menu item action becomes inappropriate at some point, you can disable that menu item to prevent users from selecting it. You can also use a check mark next to a menu item that indicates which command was last selected. Other menu control features described in this section include code that makes a menu item visible or invisible and that adds or deletes menu items. You can also dynamically add menu items if you have a menu control array. This is described in &quot;<A HREF="ch02e.htm#148">Adding Menu Items at Run Time</A>&quot; later in this lesson.</P>

<A NAME="144"><H3>Enabling and Disabling Menu Commands</H3></A>

<P>All menu controls have an Enabled property. When this property is set to False, the menu is disabled and does not respond to user actions, and shortcut key access is disabled. A disabled menu control appears dimmed to the user. For example, the following statement disables the Paste menu item on the Edit menu:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>mnuEditPaste.Enabled = False</PRE>
</td></tr></table></P>

<P>Disabling a menu title disables the entire menu and the user will not be able to activate that menu. For example, the following code will disable the entire Edit menu:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>mnuEdit.Enabled = False</PRE>
</td></tr></table></P>

<A NAME="145"><H3>Displaying a Check Mark on a Menu Item</H3></A>

<P>Use the Checked property to place a check mark next to a menu item. This tells the user the status of an on/off condition. To use this feature, set the initial value of the Checked property in the Menu Editor by selecting the check box labeled Checked. To add or remove a check mark from a menu control at run time, set its Checked property from code. For example, the following code demonstrates using the Checked property:</P>

<table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub mnuOptions_Click ()
      'Set the state of the check mark based on 
      'the property's current value.
      mnuOptionsToolbar.Checked = Not mnuOptionsToolbar.Checked
End Sub
</PRE>
</td></tr></TABLE>

<A NAME="146"><H3>Making Menu Items Invisible</H3></A>

<P>In the Menu Editor, click the Visible check box to set the initial value of the Visible property for a menu control. To make a menu item visible or invisible at run time, set its Visible property from code. For example, the following code demonstrates adding and removing a menu by assigning a value to the menu's Visible property:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
mnuFile.Visible = True 'Make the menu visible.
mnuFile.Visible = False 'Make the menu invisible.
</PRE>
</td></tr></table></p>

<P>When a menu item is invisible, the rest of the items in the menu move up to fill the empty space. If the item is on the main menu bar, the rest of the items move left to fill the space.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Making a menu item invisible removes it from the menu bar. If the menu title's Visible property is set to False, all submenus on that menu will also be unavailable to the user.
</blockquote></div></p>

<A NAME="147"><H3>Using a Menu Control Array</H3></A>

<P>In Lesson 3 you worked with control arrays. You can also create a menu control array. A menu is defined as a menu control array when each submenu item shares the same name. When submenu items share the same name, they must each have a unique Index property. The items in a menu control array don't have to be contiguous (for example, 2, 3, 4), but they must be in ascending order according to their location on the menu. Figure 2.20 illustrates using the Menu Editor and menu control arrays.</P>

<P>
<A HREF="javascript:fullSize('F02xx20x.htm')"> <img src="images/F02xx20.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.20</B> <i>The Menu Editor window</i>  <!--/caption-->
</P>


<A NAME="148"><H3>Adding Menu Items at Run Time</H3></A>

<P>For example, you can add menu items dynamically to display the path names of the most recently opened files. You must use a menu control array to create a menu item at run time. Because the menu item is assigned a value for the Index property at design time, it automatically becomes an element of the array even though no other elements have been created.</P>

<P><LI><B>To create a menu control array in the Menu Editor</B></LI></P>

<OL>
<P><LI>Click the form.</LI></P>

<P><LI>From the <B>Tools</B> menu, click <B>Menu Editor</B>,<B> </B>or click the <B>Menu Editor</B> button on the toolbar.</LI></P>

<P><LI>In the <B>Caption</B> text box, type the text for the first menu title that you want appearing on the menu bar.</LI></P>

<P>The menu title text appears in the menu control list box.</P>

<P><LI>In the <B>Name</B> text box, type the name that you will use to refer to the menu control in code. Leave the <B>Index</B> box empty.</LI></P>

<P><LI>At the next indentation level, create the menu item that will become the first element in the array by setting its <B>Caption</B> and <B>Name</B>.</LI></P>

<P><LI>Set the <B>Index</B> for the first element in the array to 0.</LI></P>

<P><LI>Create a second menu item at the same level of indentation as the first. Set the <B>Name</B> of the second element to the same name as the first element and set its <B>Index</B> to 1.</LI></P>

<P><LI>Repeat steps 5&#8212;8 for subsequent elements of the array. </LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Elements of a menu control array must be contiguous in the menu control list box and must be at the same level of indentation. When you're creating menu control arrays, be sure to include any separator bars that you want appearing on the menu.
</blockquote></div></p>

<P>When you create an item such as mnuFile(0), you actually create a separator bar that is invisible at run time. The first time a user saves a file at run time, the separator bar becomes visible, and the first filename is added to the menu. Each time you save a file at run time, additional menu items are loaded into the array, making the menu grow.</P>

<P>To hide menu items created at run time, use the Hide method or set the control's Visible property to False. To remove an item in a control array from memory, use the Unload statement. You can also determine the number of items in the array by using a control array's Ubound property. The following code demonstrates adding items to a menu control array and using the Ubound property to determine the next available index. Figure 2.21 illustrates the result of the following code.</P>

<table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim i As Integer
'Add 5 new items to the mnuFile menu
For i = 1 To 5
      'Use the Ubound property to find the next available index number
      Load mnuFile(mnuFile.UBound + 1)
      'Give the new menu item a caption
      mnuFile(mnuFile.UBound).Caption = &quot;This is new item &quot; &amp; _
          mnuFile.UBound
Next i
</PRE>
</td></tr></TABLE>

<P>
<img src="images/F02xx21.GIF" width=203 height=283 border=0>
</P><P>
<!--caption--><B>Figure 2.21</B> <i>Dynamically adding new items to a menu</i>  <!--/caption-->
</P>


<A NAME="149"><H2>Lesson Summary</H2></A>

<P>You can easily create a Visual Basic menu with the Menu Editor. Features to consider in designing menus include separator bars, access keys, and shortcut keys. </P>

<P>Pop-up menus are useful in contextual command situations.</P>

<P>Other characteristics of menus that you may wish to use in your application are enabling and disabling menu commands, displaying check marks on menu items, and making menu controls invisible. You can also add menu controls at run time by using a control array.</P>

</BODY>
</HTML>






