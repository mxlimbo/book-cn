<HTML>
<HEAD>
<TITLE>Lesson 3: Using the Package and Deployment Wizard</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12c.htm", "ch12e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="647"><H1>Lesson 3: Using the Package and Deployment Wizard</H1></A>

<P>When you have finished writing, debugging, and testing your application, you're ready to distribute it to your users. The Visual Basic Package and Deployment Wizard helps you determine which files need to be distributed; it also compresses the files into a Cabinet file (.cab file) and creates a Setup program. After creating your installation files, you can distribute your application on disk, on CDs, across networks, or over an Internet or intranet site.</P>

<P>In most cases, you will package your applications using the Package and Deployment Wizard, which is provided with Visual Basic. It provides valuable shortcuts and automates some of the tasks you would otherwise have to perform yourself.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the components of an installation package.</li></p>

<p><li>Name the two kinds of installation packages.</li></p>

<p><li>Explain the three options of the Package and Deployment Wizard.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="648"><H2>Installing a Desktop Application</H2></A>

<P>Application packaging means creating a package that installs your application onto the user's computer. A package consists of the .cab file or files that contain your compressed project files, and any other files that the user needs to install and run your application. These files may include setup programs, secondary .cab files, or other needed files. The additional files vary based on the type of package you create.</P>

<P>You can create two kinds of packages: standard packages or Internet packages. If you plan to distribute on CD, floppy disk, or via a network share, you should create a standard package for your application. If you plan to distribute via an Internet or intranet site, you should create an Internet package.</P>

<P>The Package and Deployment Wizard and the Setup Toolkit are the two Visual Basic tools that you can use to package and distribute your applications. The Package and Deployment Wizard automates many of the steps by presenting you with choices about how to configure your Cabinet files. The Setup Toolkit, on the other hand, lets you customize what happens during the main installation process.</P>

<A NAME="649"><H3>The Package and Deployment Wizard</H3></A>

<P>The Visual Basic Package and Deployment Wizard, shown in Figure 12.3, helps you gather all the files needed for your installation by creating one or more Cabinet files. The Wizard automates the creation and deployment of these files. </P>

<P>
<A HREF="javascript:fullSize('F12xx03x.htm')"> <img src="images/F12xx03.JPG" width=404 height=340 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 12.3</B> <i>Package and Deployment Wizard</i>  <!--/caption-->
</P>


<P>The Package and Deployment Wizard opening window has three options: </P>
<UL>
<p><li>Package</li></p>

<P>The Package option packages your files into a Cabinet file that can be deployed, and creates a setup program that installs the Cabinet files. The wizard determines the files you need and walks you through choices to create the installation package for your project.</P>
<p><li>Deploy</li></p>

<P>The Deploy option helps you deliver your packaged applications to the appropriate distribution media, such as floppies, a network share, or a Web site.</P>
<p><li>Manage Scripts</li></p>

<P>The Manage Scripts option lets you view and manipulate the scripts you have saved from previous packaging and deployment sessions in the wizard. Each time you use the wizard, you save a script that contains all the choices you made. You can reuse these scripts again for a different application if you want to use similar settings and choices.</P>
</UL>

<P><LI><B>To start the Package and Deployment Wizard </B></LI></P>

<OL>
<P><LI>Click the <B>Start</B> menu. </LI></P>

<P><LI>Click <B>Programs</B>. </LI></P>

<P><LI>Click <B>Microsoft Visual Basic 6.0</B>. </LI></P>

<P><LI>Click <B>Microsoft Visual Basic 6.0 Tools</B>.</LI></P>

<P><LI>Click <B>Package &amp; Deployment Wizard</B>.</LI></P>
</OL>

<P>You can also add the wizard to the Add-Ins menu. If you start the Package and Deployment Wizard from the Add-Ins menu, it uses the active project.</P>

<P><LI><B>To add the Package and Deployment Wizard to the Add-Ins menu</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</LI></P>

<P><LI>In the list of available add-ins, click <B>Package and Deployment Wizard</B>.</LI></P>

<P><LI>Under <B>Load Behavior</B>, select the <B>Loaded/Unloaded</B> check box.</LI></P>

<P><LI>Click <B>OK</B>.</LI></P>
</OL>

<A NAME="650"><H3>Deploying to the Web</H3></A>

<P>You can deploy any installation package, whether it is a standard or Internet package, to the Web. When you choose Web Publishing as your deployment method, the wizard uses the project folder to determine how the files and directories should be copied to the Web site; files and directories that are within the project folder are deployed to the Web server with the same directory structure.</P>

<P><LI><B>To deploy your installation package to a Web server.</B></LI></P>

<OL>
<P><LI>Start the <B>Package and Deployment Wizard</B>.</LI></P>

<P><LI>Click the <B>Deploy</B> button.</LI></P>

<P><LI>If you have previously saved deployment scripts, you can choose one, or you can choose <B>None</B> in the <B>Deployment script</B> drop-down list. Click <B>Next</B>.</LI></P>

<P><LI>Click the package that you want to deploy, then click <B>Next</B>.</LI></P>

<P><LI>Click <B>Web Publishing</B> in the <B>Deployment method</B> list box, then click <B>Next</B>.</LI></P>

<P><LI>Clear the check boxes next to the files and folders that you do not want to include with your deployment, then click <B>Next</B>.</LI></P>

<P><LI>Select the check boxes next to the files and folders that you want to include with your deployment, then click <B>Next</B>.</LI></P>

<P><LI>Type the destination URL and choose the appropriate protocol in the Web publishing protocol drop-down list, then click <B>Next</B>.</LI></P>

<P><LI>Type a name for this deployment script, then click <B>Finish</B>.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
By default, the wizard does not deploy source files from within the project directory or the \Support subdirectory. The packaging portion of the wizard creates the \Support directory and places files in it that you can use to recreate your .cab files.
</blockquote></div></p>

<A NAME="651"><H2>The Setup Toolkit</H2></A>

<P>The Setup Toolkit is a project called Setup1.vbp that is installed with Visual Basic. It contains the forms and code that your application's setup program uses to install files onto the user's computer. This project creates the two setup programs that are used in the installation process:</P>
<UL>
<p><li>Setup.exe, which performs pre-installation processing on the user's computer, including installing the setup1.exe program and any other files needed for the main installation program to run.</li></p>

<p><li>Setup1.exe, which is an application's main installation file; it can be customized through the Setup Toolkit. The Package and Deployment Wizard uses the setup1.exe file to create the setup programs. </li></p>
</UL>

<P>You use the Setup Toolkit by loading the Setup1.vbp file into Visual Basic and making modifications to the appearance or functionality of the project. You can use the Setup Toolkit to modify the screens seen in the installation process, or to create a setup program directly. You might create a custom setup program if you need to add additional functionality not supported by the wizard to your installation sequence.</P>

<P>The Setup Toolkit project is located in the \Microsoft Visual Studio\vb98\Wizards\PDWizard\Setup1 directory.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Do not modify the Setup Toolkit files without making a backup copy in another directory first. If you modify setup1.exe, subsequent setup programs created by the Package and Deployment Wizard will use the modified version.
</blockquote></div></p>

<A NAME="652"><H2>Allowing for Uninstall</H2></A>

<P>When the user installs your application, the setup program copies the removal utility St6unst.exe to the \Windows or \Winnt directory. Each time you use the Visual Basic setup program to install an application, Visual Basic generates a removal log file (St6unst.log) in the application's installation directory. The .log file contains the following information: </P>
<UL>
<p><li>Directories created during installation.</li></p>

<p><li>Files installed and their locations. </li></p>

<P>This list contains all of the files in the setup program, even if some files were not installed on the user's machine because a newer version of the same file already existed. The log file indicates whether the file was a shared file and, if so, whether it replaced the existing file.</P>
<p><li>Registry entries created or modified.</li></p>

<p><li>Links and Start menu entries created with Windows.</li></p>
</UL>

<P>In Windows, the setup program adds the application removal utility to the list of registered applications displayed in the Add/Remove Programs section of Control Panel. Users should use Add/Remove Programs to uninstall the application.</P>

<P>It is important to set the options correctly for any files that should be shared, either by adding the files to the Shared Files screen in the Package and Deployment Wizard, or by indicating the installation location for the file as a shared file directory. If you accidentally install a file that should be shared that does not the correct settings, users will be able to remove it when they uninstall your application. This may cause problems for other applications on the users' systems.</P>

<P>In the event of a failed or canceled installation, the application-removal utility automatically removes all of the directories, files, and registration entries that the setup program created in the installation attempt.</P>

<P>With Windows, shared files are <I>reference-counted</I> in the registry. For example, a shared file that is used by three applications will have a reference count of three. When you remove an application that uses a shared file, the reference count for the shared file decreases by one. When the count for the file reaches zero, the user will be prompted for final removal of that item.</P>

<A NAME="653"><H2>Lesson Summary</H2></A>

<P>An installation package includes the Cabinet (.cab) file(s) with your compressed project files, plus any other files needed to install and run your application.</P>

<P>You create a standard installation package to distribute the application by a CD, a floppy disk, or a network. Create an Internet installation package for Internet/intranet delivery.</P>

<P>The Package and Deployment Wizard automates the creation and deployment of installation files. It has three options:</P>
<UL>
<p><li>Package</li></p>

<p><li>Deploy</li></p>

<p><li>Manage Scripts</li></p>
</UL>
<P>The Setup Toolkit contains the forms and codes that your application's setup program uses to install files on the user's computer.</P>

<P>Uninstall options must be carefully selected to ensure that files used by another application are not removed.</P>

</BODY>
</HTML>





