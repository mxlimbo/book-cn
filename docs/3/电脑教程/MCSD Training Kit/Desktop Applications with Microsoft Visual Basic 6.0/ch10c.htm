<HTML>
<HEAD>
<TITLE>Lesson 2: Creating Activex Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10b.htm", "ch10d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="499"><H1>Lesson 2: Creating ActiveX Controls</H1></A>

<P>ActiveX is based on COM technology. That makes it easy to create, integrate, and reuse software components (controls) in applications and over the Internet or intranets. With ActiveX, developers can create components in any programming language, integrate them with any scripting language, and run those components from any type of application.</P>

<P>An ActiveX control is a COM component with user interface elements, and is an extension to the Visual Basic toolbox. You use ActiveX controls just as you would any of the standard built-in controls, such as the TextBox control. ActiveX controls created in Visual Basic are used in many different container applications, such as other Visual Basic applications, Microsoft Office documents, and Web pages viewed with Microsoft Internet Explorer. Once you have created an ActiveX control, you can use it in your applications to assemble forms and dialog boxes.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>
<p><li>Explain how ActiveX relates to COM.</li></p>
<p><li>Describe the Visual Basic files used in an ActiveX control project.</li></p>
<p><li>Create and compile an ActiveX control. </li></p>
</UL>
<b>Estimated lesson time: 60 minutes</b>
</blockquote></div></P>

<A NAME="500"><H2>What Is an ActiveX Control?</H2></A>

<P>ActiveX controls, previously known as OLE controls or OCX controls, are COM components that provide visual elements (or user interface). An ActiveX control is a software component that can be integrated into Web pages, Microsoft Office, Microsoft Access, Visual Basic, or any host that supports ActiveX controls. Because ActiveX controls are implemented via COM, they have associated methods that can be called from other applications (EXEs), dynamic link libraries (DLLs), Web pages, or other controls. Visual Basic has built-in controls that are visible in the toolbox. It also comes with several ActiveX controls that you can add to the toolbox. For example, Figure 10.1 shows the ADO Data control&#8212;which packages some functionality of ADO into a simple, easy-to-use interface&#8212;added to the toolbox.</P>

<P>
<img src="images/F10xx01.GIF" width=233 height=179 border="0">
</P><P>
<!--caption--><B>Figure 10.1</B> <i>A form acting as a container for an ADO Data control</i>  <!--/caption-->
</P>


<A NAME="501"><H3><LI>To add an ActiveX control to the Visual Basic toolbox</LI></H3></A>
<OL>
<P><LI>On the <B>Project</B> menu, click <B>Components</B>. </LI></P>
<P>The <B>Components</B> dialog box appears. The items listed include all registered ActiveX controls, insertable objects, and ActiveX designers.</P>
<P><LI>On the <B>Controls</B> tab, click the check box to the left of the control name(s) that you want to add.</LI></P>
<P><LI>Click <B>OK</B> to close the <B>Components</B> dialog box. </LI></P>
<P>The ActiveX controls that you selected now appear in the toolbox.</P>
</ol>

<P>ActiveX controls are reusable objects that include visual elements and code that you can use to quickly create forms and dialog boxes. To use ActiveX controls, you must place them in some type of container, such as a form or an application.</P>

<A NAME="502"><H2>Control Classes</H2></A>

<P>In Visual Basic, an ActiveX control is always composed of a UserControl object, plus any controls&#8212;referred to as constituent controls&#8212;that you choose to place on the UserControl. Like Visual Basic forms, UserControl objects have code modules and visual designers, as illustrated in Figure 10.2. Place constituent controls on the UserControl object's designer, just as you would place controls on a form's designer.</P>

<p><div class="note"><blockquote>
<b>NOTE</b><HR>
A <I>designer</I> is the visual design window in the Visual Basic development environment. The forms designer is included in all editions of Visual Basic. The Professional and Enterprise editions also have designers for ActiveX controls and documents.
</blockquote></div></p>

<P>
<A HREF="javascript:fullSize('F10xx02x.htm')"> <img src="images/F10xx02.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.2</B> <i>A UserControl containing two constituent controls</i>  <!--/caption-->
</P>


<P>You can use any standard Visual Basic control on the UserControl object except the OLE container control. You add constituent controls to a UserControl object in the same way that you add controls to a standard Visual Basic form.</P>

<A NAME="503"><H3>Files Associated with a UserControl</H3></A>

<P>A control that you create in Visual Basic is known as a control class. A control class acts as a template for that control. When a control from the Visual Basic toolbox is placed on a form, Visual Basic creates an actual object from the control class&#8212;for example, Text1 or Label1. Like forms, Visual Basic stores user controls in text files that contain the source code and property values of the UserControl and its constituent controls. Visual Basic uses the extension .ctl for these source files. </P>

<P>If a UserControl or its constituent controls use graphical elements, such as bitmaps, Visual Basic cannot store them as plain text. Visual Basic stores those elements in a .ctx file with the same name you gave the .ctl file. This procedure is analogous to the .frx files used to store graphical elements used in forms. The .ctl and .ctx files completely define an ActiveX control's appearance and interface (properties, methods, and events). </P>

<P>You can include .ctl files in any of the project types. When you compile an ActiveX control project, Visual Basic compiles the control class into an .ocx file. A Visual Basic ActiveX control project can contain one or more .ctl files, each of which defines a separate control class. When you compile a control project, Visual Basic creates one .ocx file; it contains all of the controls in the project.</P>

<P>Your ActiveX control consists of a UserControl and its constituent controls; each instance actually contains those objects. Whenever you place an instance of your ActiveX control on a form, Visual Basic creates a UserControl object, along with instances of any constituent controls you placed on the UserControl designer. Visual Basic encapsulates these objects inside your control.</P>

<A NAME="504"><H2>Practice: Creating an ActiveX Control</H2></A>

<P><img src="images/practice.gif" width=67 height=55 border="0"></p>
<P>In this practice, you will create a control that displays the current date and time.</P>
<P><img src="images/video.gif" width=78 height=54 border="0"></p>
<P>To see a demonstration, run the Chap10.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<A NAME="505"><H3><li>To create an ActiveX control</li></H3></A>
<OL>
<P><LI>Start Visual Basic.</LI></P>
<P><LI>On the <B>New</B> <B>Project</B> dialog box, click <B>ActiveX Control</B>, then click <B>OK</B>.</LI></P>
<P>A <B>UserControl</B> designer appears.</P>

<P><LI>Add a Label control and a Timer control to <B>UserControl1</B>.</LI></P>
<P>These are the constituent controls.</P>

<P><LI>Position the controls as illustrated in Figure 10.3.</LI></P>

<P>
<img src="images/F10xx03.GIF" width=372 height=213 border="0">
</P><P>
<!--caption--><B>Figure 10.3</B> <i>Positioning the constituent controls on the UserControl</i>  <!--/caption-->
</P>


<P><LI>On the <B>Project</B> menu, click <B>Project1 Properties</B>.</LI></P>

<P><LI>On the <B>General</B> tab, set the Project Name property to <B>MyTimer</B>.</LI></P>

<P><LI>Click <B>OK</B> to close the <B>Project Properties</B> dialog box.</LI></P>

<P><LI>Set the Name property of <B>UserControl1</B> to <B>ctlTimer</B>.</LI></P>

<P><LI>Change the Name property of the Label control to <B>lblDateAndTime</B>.</LI></P>

<P><LI>Set the Font property of <B>lblDateAndTime</B> to font style <B>Bold</B> and font size <B>18</B>.</LI></P>

<P><LI>Set the Alignment property of <B>lblDateAndTime</B> to <B>2 &#8211;Center</B>.</LI></P>

<P><LI>Set the Interval property of <B>Timer1</B> to <B>1000</B>.</LI></P>

<P><LI>In the Timer event for <B>Timer1</B>, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
lblDateAndTime.Caption = Now()
</PRE>
</TD></TR></TABLE></P>

<P><LI>On the <B>File</B> menu, click <B>Save Project</B>. </LI></P>

<P>Save the .ctl and .vbp files to the \Practice\Ch10 folder.</P>
</ol>

<A NAME="506"><H2>Implementing Your ActiveX Control</H2></A>

<P>To use your new control in an application, place the control on a form. When you put a control on a form at design time, Visual Basic creates an actual instance of the control class. Although you might think of this control as a permanent fixture of the form, it is only a design-time instance of the control. If the form is closed for any reason&#8212;for example, its Close button is clicked, the project is closed, or F5 is pressed to place the project in Run mode&#8212;Visual Basic destroys the design-time instance.</P>

<P>When the project is placed in Run mode, Visual Basic creates a run-time instance of the control when the form is loaded. Visual Basic destroys this run-time instance when the form is unloaded. </P>

<P>Instances of controls are continually created and destroyed, so you must ensure that the property values are preserved. When you create a control, you must include code that saves and retrieves property values of the control. To store and retrieve information each time an object is created or destroyed, use the ReadProperty and WriteProperty methods of the PropertyBag object.</P>

<A NAME="507"><H3>Creating a Property</H3></A>

<P>When you create an ActiveX control in Visual Basic, you can add properties, methods, and events to the control. You can do this manually by writing code such as property procedures, or you can use the ActiveX Control Interface Wizard add-in shown in Figure 10.4.</P>

<P>
<A HREF="javascript:fullSize('F10xx04x.htm')"> <img src="images/F10xx04.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.4</B> <i>Adding a property using the ActiveX Control Interface Wizard</i>  <!--/caption-->
</P>


<A NAME="508"><H3><li>To run the ActiveX Control Interface Wizard</li></H3></A>
<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</LI></P>

<P><LI>On the <B>Add-In Manager</B> dialog box, click <B>VB 6 ActiveX Ctrl Interface Wizard</B>.</LI></P>

<P><LI>Select the <B>Loaded/Unloaded</B> Load Behavior check box, then click <B>OK</B>.</LI></P>

<P><LI>On the <B>Add-Ins</B> menu, click <B>ActiveX Control Interface Wizard</B>.</LI></P>
</ol>

<A NAME="509"><H3>Creating Property Pages</H3></A>

<P>Property pages enable you to define a custom interface for setting properties of an ActiveX control&#8212;providing more flexibility than the Properties window. Property pages look a lot like forms, and designing them is somewhat similar to designing forms. The way property pages work, however, is quite different from the way forms work.</P>

<P>Visual Basic includes a Property Page Wizard that you can use to add a property page for your control:</P>

<ul>
<p><li>Create the user interface for the property page.</li></p>

<p><li>Add code to synchronize the property page with the current state of the control.</li></p>

<p><li>Set up the appropriate property page relationships: associate properties with a property page, and associate a tabbed Property Page dialog box with your control.</li></p>
</ul>

<A NAME="510"><H3><li>To run the Property Page Wizard</li></H3></A>
<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</LI></P>

<P><LI>On the <B>Add-In Manager</B> dialog box, click <B>VB 6 Property Page Wizard</B>.</LI></P>

<P><LI>Select the <B>Loaded/Unloaded</B> Load Behavior check box, then click <B>OK</B>.</LI></P>

<P><LI>On the <B>Add-Ins</B> menu, click <B>Property Page Wizard</B>.</LI></P>

<P><LI>Add a new property page for each grouping of properties in your control.</LI></P>

<P>If you have a property that is a standard data type (like color or font), the wizard will automatically add the standard property page to the list of property pages for your control.</P>

<P><LI>Add the properties of your control to the property pages you've created.</LI></P>

<P><LI>Click <B>Finish</B>.</LI></P>
</ol>

<P>You must let Visual Basic know when a property value changes. To indicate that a property value has changed, you use the PropertyChanged method of the UserControl object within a property procedure. Calling the PropertyChanged method notifies Visual Basic that a property of your control has changed. This is important so that Visual Basic can mark your control as needing to be saved in the project where it is being used. Also, calling PropertyChanged notifies Visual Basic to update the property value in the Properties window and in any property pages for your control.</P>

<A NAME="511"><H3>Saving Property Values</H3></A>

<P>You save property values by calling the WriteProperty method in the WriteProperties event of the UserControl object. Visual Basic calls this event when the design-time control is destroyed.</P>

<P>The WriteProperty method takes three arguments: a string indicating the property to save, a value for the property, and a default value if the developer did not set an initial property. This method writes the data value to the property bag.</P>

<P>The PropertyBag object is a mechanism that allows you to store your control's properties that are set within the Visual Basic development environment. The PropertyBag object is used exclusively for creating ActiveX controls and Active documents. The PropertyBag object saves data to a .vbd, .obd, or some other kind of file, depending on the application.</P>

<P>The PropertyBag has two methods, the WriteProperty method, and the ReadProperty method. The PropertyBag object is exposed as part of the WriteProperties and ReadProperties event declaration.</P>

<P>The following example shows how to save current property values with the WriteProperty method of the PropertyBag object:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
     PropBag.WriteProperty &quot;UpperCase&quot;, mvarUpperCase, vbUpperCase
     PropBag.WriteProperty &quot;Caption&quot;, Label1.Caption, &quot;Username&quot;
End Sub
</PRE>
</TD></TR></TABLE></P>

<P>For more information about the PropertyBag object, search for &quot;Saving Properties to the PropertyBag&quot; in MSDN Online Help.</P>

<A NAME="512"><H3>Reading Property Values</H3></A>

<P>You retrieve property values by calling the ReadProperty method in the ReadProperties event of the UserControl object. Visual Basic calls this event when either the design-time or run-time control is created. The ReadProperty method takes two arguments: a string designating the property name and a default value. If a property value has been saved, the ReadProperty method returns the value. If a property value has not been saved, the method returns the default value. The following example shows how to use the ReadProperty method to return the saved value of the Caption property:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
     'Trap for invalid property values
     On Error Resume Next
     Label1.Caption = PropBag.ReadProperty(&quot;Caption&quot;, &quot;Username&quot;)
End Sub
</PRE>
</TD></TR></TABLE></P>

<A NAME="513"><H3>Default Property Values</H3></A>

<P>When you read and write property values, it is important to provide default values. Visual Basic writes a line of code in the source file (.frm, .dob, .pag, or .ctl) of the control's container only if the property value differs from the default value that you provided. As a result of providing a default value, the file size is reduced and the application's performance is improved.</P>

<A NAME="514"><H3>Initializing Property Values in the InitProperties Event</H3></A>

<P>The first time you place an instance of a control on a container, the container receives the InitProperties event. Thereafter, only the ReadProperties event occurs. In the InitProperties event, you set the initial value for a property by using the same default value that you provide with the WriteProperty and ReadProperty methods when saving and retrieving the property value.</P>

<P>Since mapped properties are already initialized by the constituent control, you need to initialize only those properties that don't map to properties of constituent controls. The following code shows how to initialize the UpperCase property of an ActiveX control:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'Set up storage for the property
Dim mvarUpperCase As Boolean

'Use that default value in the InitProperties event
Private Sub UserControl_InitProperties()
	mvarUpperCase = vbUpperCase
End Sub
</PRE>
</TD></TR></TABLE></P>

<P>Figure 10.5 shows the evolution of the control and related files as it is created by a control developer, used by an application developer in a standard application, and then used by the user of the completed application.</P>

<P>
<A HREF="javascript:fullSize('F10xx05x.htm')"> <img src="images/F10xx05.JPG" width=404 height=135 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.5</B> <i>How an ActiveX control is implemented</i>  <!--/caption-->
</P>


<P>In Visual Basic, you can add a Standard EXE project to your control project group to test the control. When you do this, Visual Basic automatically adds your ActiveX control to the toolbox. You can then add your ActiveX control to a form in your Standard EXE project. However, if the UserControl designer window is open, the control is disabled in the toolbox. When you close the UserControl window, the ActiveX control reappears in the Visual Basic toolbox, which allows you to implement the control on a form, as illustrated in Figure 10.6.</P>

<P>
<img src="images/F10xx06.GIF" width=81 height=361 border="0">
</P><P>
<!--caption--><B>Figure 10.6</B> <i>A UserControl available in the Visual Basic toolbox</i>  <!--/caption-->
</P>


<A NAME="515"><H2>Practice: Testing Your ActiveX Control</H2></A>
<p><img src="images/practice.gif" width=67 height=55 border="0"></p>
<P>In this practice, you will use the ActiveX control that you created in the last practice and implement it in another project. You will see a design-time and a run-time instance of the control.</P>

<A NAME="516"><H3><li>To create a design-time instance of your control</li></H3></A>
<OL>
<P><LI>Start Visual Basic and create a new Standard EXE project.</LI></P>

<P><LI>On the <B>File</B> menu, click <B>Add Project</B>. </LI></P>

<P><LI>On the <B>Add Project</B> dialog box, click the <B>Recent</B> tab, select the <B>MyTimer</B> control project you created in the last practice, then click <B>Open</B>.</LI></P>

<P>Notice that in the Project Explorer you have two projects, as illustrated in Figure 10.7. You will use the Standard EXE project as a container for your custom ActiveX control.</P>

<P>
<img src="images/F10xx07.GIF" width=232 height=179 border="0">
</P><P>
<!--caption--><B>Figure 10.7</B> <i>Adding a project to test an ActiveX control</i>  <!--/caption-->
</P>


<P><LI>Add the <B>ctlTimer</B> control from the Visual Basic toolbox to <B>Form1</B>.</LI></P>

<P>Notice that the time is updated in the ActiveX control every second&#8212;even though the Standard EXE project is not running. This is an example of creating a design-time instance of a control.</P>
</ol>

<A NAME="517"><H3><li>To create a run-time instance of the control</li></H3></A>
<OL>
<P><LI>On the <B>File</B> menu, click <B>Save Project Group</B>. </LI></P>
<P>Save the files to the \Practice\Ch10 folder.</P>

<P><LI>On the <B>Run</B> menu, click <B>Start</B>.</LI></P>
<P>A new, run-time instance of the control is created. (If the MyTimer Project Properties dialog box appears, make sure the Start Component option is selected with the ctlTimer component, then click OK.)</P>

<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>
</ol>

<A NAME="518"><H3><li>To compile your ActiveX control</li></H3></A>
<OL>
<P><LI>Click the <B>MyTimer</B> project in the <B>Project</B> window.</LI></P>

<P><LI>On the <B>File</B> menu, click <B>Make MyTimer.ocx</B>. </LI></P>

<P><LI>On the <B>Make Project</B> dialog box, set the directory to \Practice\Ch10 folder.</LI></P>

<P><LI>Click <B>OK</B> to compile the control into an .ocx file.</LI></P>
</ol>

<A NAME="519"><H3><li>To use your compiled .ocx file</li></H3></A>
<OL>
<P><LI>On the <B>File</B> menu, click <B>New Project</B>. </LI></P>

<P><LI>On the <B>New Project</B> dialog box, click <B>Standard EXE,</B> then click <B>OK</B>.</LI></P>

<P><LI>Right-click on the Visual Basic toolbox, then click <B>Components</B>.</LI></P>

<P><LI>On the Components dialog box, click the <B>Controls</B> tab.</LI></P>

<P><LI>Click the check box to the left of the <B>MyTimer</B> control, as illustrated in Figure 10.8, then click <B>OK</B>. </LI></P>

<P>Your ActiveX control is added to the Visual Basic toolbox. </P>

<P>
<A HREF="javascript:fullSize('F10xx08x.htm')"> <img src="images/F10xx08.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.8</B> <i>Adding MyTimer.ocx to your project</i>  <!--/caption-->
</P>


<P><LI>Place a <B>MyTimer</B> control on <B>Form1</B>.</LI></P>

<P>Visual Basic creates a design-time instance of your control on the form.</P>
</ol>

<A NAME="520"><H2>Making Your ActiveX Control a Data Source</H2></A>

<P>With Visual Basic, you can create an ActiveX control that provides data to other controls, in much the same was as the ADO Data control does. Although you can use the ADO Data control for simple data access, you can create more advanced functionality in your own ActiveX control. For example, you could create a control that is a data source for a computer's file system or for data stored in a proprietary data format. Your custom data source control can then be reused, and data-bound controls can bind to it.</P>

<A NAME="521"><H3><li>To create an ActiveX control that is a data source</li></H3></A>
<OL>
<P><LI>Set the DataSourceBehavior property of your control to <B>vbDataSource</B>.</LI></P>
<P>This creates an event procedure called <B>GetDataMember</B> that occurs when a data consumer requests a new data source</P>

<P><LI>In the Initialize event procedure of your control, establish the data your source will provide.</LI></P>
<P>This process involves creating a Connection object and a Recordset object, setting the connection parameters, and opening the recordset.</P>

<P><LI>Write code in the <B>GetDataMember</B> event procedure to return a data object.</LI></P>

<p>The GetDataMember event procedure has two parameters: DataMember and Data. The DataMember parameter is an optional parameter that specifies the name of the data member used if your control provides multiple data members. The Data parameter is the data object that the procedure returns to the data consumer. The following example returns data from a recordset called rsEmployees:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private Sub UserControl_GetDataMember _
   (DataMember As String, Data As Object)
   'Return the data to the consumer
   Set Data = rsEmployees
End Sub
</PRE>
</TD></TR></TABLE></P>

<P><LI>Add any additional functionality you want your data source control to contain.</LI></P>

<p>For example, you may want to include features to navigate through records or display the current record.</p>
</ol>

<P>Once you have created your data source control, you can place it on a form and add controls that bind to it. The GetDataMember event is invoked when a data consumer requests a new data source. Your control then uses the DataMember parameter, if appropriate, to identify the specific data member the consumer requires and returns data back to the consumer in the form of a Recordset object.</P>

<A NAME="522"><H2>Practice: Creating a Data Source Control</H2></A>
<p><img src="images/practice.gif" width=67 height=55 border="0"></P>
<P>In this practice, you will create an ActiveX control that can be used to bind to data bound controls.</P>

<A NAME="523"><H3><li>To create an ActiveX control</li></H3></A>
<OL>
<P><LI>Start Visual Basic and open a new ActiveX control project. </LI></P>

<P><LI>Click on the UserControl, and set its DataSourceBehavior property to <B>1 &#8211;vbDataSource</B>.</LI></P>

<P><LI>Set the UserControl's Name property to <B>ctlSource</B>. </LI></P>

<P><LI>On the <B>Project</B> menu, click <B>References</B>. </LI></P>

<P><LI>On the <B>References</B> dialog box, click the <B>Microsoft ActiveX Data Objects 2.0 Library</B> check box, then click <B>OK</B>.</LI></P>

<P><LI>In the General Declarations section of the UserControl, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Private CN As Connection
Private RS As Recordset
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the UserControl_Initialize event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim SQL As String

Set CN = New Connection
Set RS = New Recordset

CN.ConnectionString = &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; &amp; _
    &quot;Data Source=C:\Program Files\Microsoft Visual Studio\VB98\Nwind.mdb&quot;
CN.Open

SQL = &quot;SELECT * FROM Customers&quot;
RS.Open SQL, CN, adOpenStatic
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the UserControl_GetDataMember event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>Set Data = RS</PRE>
</TD></TR></TABLE></P>

<P><LI>Add a CommandButton to the UserControl, and set the following properties:</LI></P>

<P><table width="95%" cellpadding="5">
<TR>
<th>Property</th>
<th>Value</th>
</TR>
<tr>
<td>Name</td>
<td>CmdMoveNext</td>
</tr>
<TR>
<td>Caption</td>
<td>Move &amp;Next</td>
</TR>
</TABLE></p>

<P><LI>Add another CommandButton to the UserControl, and set the following properties:</LI></P>

<P><table width="95%" cellpadding="5">
<TR>
<th>Property</th>
<th>Value</th>
</TR>
<TR>
<td>Name</td>
<td>cmdMovePrevious</td>
</TR>
<TR>
<td>Caption</td>
<td>Move &amp;Previous</td>
</TR>
</TABLE></p>

<P>Your control should look like the one shown in Figure 10.9.</P>

<P>
<img src="images/F10xx09.GIF" width=360 height=131 border="0">
</P><P>
<!--caption--><B>Figure 10.9</B> <i>Form with two command buttons</i>  <!--/caption-->
</P>


<P><LI>In the cmdMovePrevious_Click event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
RS.MovePrevious
If RS.BOF Then RS.MoveLast
</PRE>
</TD></TR></TABLE></P>

<P><LI>In the cmdMoveNext_Click event procedure, type the following code:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
RS.MoveNext
If RS.EOF Then RS.MoveFirst
</PRE>
</TD></TR></TABLE></P>
</ol>

<A NAME="524"><H3><li>To test your ActiveX control</li></H3></A>
<OL>
<P><LI>On the <B>File</B> menu, click <B>Add Project</B>. </LI></P>

<P><LI>Click <B>Standard EXE</B>, then click <B>Open</B>.</LI></P>

<P><LI>In order to make your ActiveX control available on the toolbox, you must close the <B>Project 1 - ctlSource</B> (UserControl) design window.</LI></P>

<P><LI>Click your ActiveX control on the toolbox and add it to <B>Form1</B>.</LI></P>
</ol>

<A NAME="525"><H3><li>To bind controls to your ActiveX control</li></H3></A>
<OL>
<P><LI>Put a Label control on <B>Form1,</B> and set the following properties:</LI></P>

<P>
<table width="95%" cellpadding="5">
<TR>
<th>Property</th>
<th>Value</th>
</TR>
<TR>
<td>Name</td>
<td>LblCustomerID</td>
</TR>
<TR>
<td>Caption</td>
<td>&lt;blank&gt;</td>
</TR>
<TR>
<td>DataSource</td>
<td>CtlSource1</td>
</TR>
<TR>
<td>DataField</td>
<td>CustomerID</td>
</TR>
</TABLE></P>

<P><LI>Put another Label control on <B>Form1</B> and set the following properties:</LI></P>

<P>
<table width="95%" cellpadding="5">
<TR>
<th>Property</th>
<th>Value</th>
</TR>
<TR>
<td>Name</td>
<td>LblCompanyName</td>
</TR>
<TR>
<td>Caption</td>
<td>&lt;blank&gt;</td>
</TR>
<TR>
<td>DataSource</td>
<td>CtlSource1</td>
</TR>
<TR>
<td>DataField</td>
<td>CompanyName</td>
</TR>
</TABLE></p>

<P><LI>Set the Caption property of <B>Form1</B> to <B>Customer Information</B>.</LI></P>

<P><LI>On the <B>File</B> menu, click <B>Save Project Group</B>. </LI></P>
<P>Save your project files to the \Practice\Ch10 folder.</P>

<P><LI>Right-click on the <B>Standard EXE</B> project icon in Project Explorer, then click <B>Set as Start Up</B>.</LI></P>

<P><LI>On the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P><LI>Click <B>Move Next</B>, then click <B>Move Previous</B> on the Customer Information form.</LI></P>

<P>As you click the navigation buttons on your ActiveX control, notice that the labels are bound to the ActiveX control and the fields from the recordset are updated. Your form should look similar to the illustration in Figure 10.10.</P>

<P>
<img src="images/F10xx10.GIF" width=305 height=227 border="0">
</P><P>
<!--caption--><B>Figure 10.10</B> <i>Your ActiveX control bound to Label controls</i><!--/caption-->
</P>


<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>
</ol>

<A NAME="526"><H2>Lesson Summary</H2></A>

<P>Creating the user interface for an ActiveX control is similar to creating a standard Visual Basic form. You draw controls and then provide the code that defines the behavior of those controls.</P>

<P>When you design a control, you take advantage of the functionality of existing controls, while also adding your own functionality. As the control developer, you can choose which pieces of functionality from existing controls you wish to make available to the user of your custom control.</P>

<P>When you add an ActiveX control to a program, it becomes part of the development and run-time environment, and provides new functionality for your application.</P>

<P>To use the control in an application, you place the control on a form; this creates a design-time instance of that control. When a user runs the application containing the control, Visual Basic creates a run-time instance of the control.</P>

</BODY>
</HTML>





