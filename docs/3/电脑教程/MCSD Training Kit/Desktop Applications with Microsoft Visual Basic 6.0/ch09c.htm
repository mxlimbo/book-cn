<HTML>
<HEAD>
<TITLE>Lesson 2: Managing COM Components</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm", "ch09d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="459"><H1>Lesson 2: Managing COM Components</H1></A>

<P>COM is a component software architecture that allows applications to communicate with components supplied by different software vendors. This communication provides access to the functionality offered by different applications without exposing the user to different interfaces. For example, suppose a user enters a customer's order into a Visual Basic form. Visual Basic (the ActiveX client) then opens a line of communication with Microsoft Word (the ActiveX server). The customer's order is then sent to a Word document, where the application prints an invoice and an envelope.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how to create a reference to a component object.</li></p>

<p><li>Explain how to control an ActiveX Server.</li></p>

<p><li>Describe how to terminate a reference to a component.</li></p>

<p><li>Describe how to use the Object Browser to access a component's properties and methods.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="460"><H2>Overview of Automation</H2></A>

<P>Automation is a feature that programs use to make their objects available to development tools, macro languages, and other programs. For example, a spreadsheet program may make a worksheet, chart, cell, or range of cells available, each as a different type of object. A word processor might make objects such as an application, a document, a paragraph, a sentence, a bookmark, or a selection available.</P>

<P>When a program supports Automation, you can use Visual Basic to access the objects it provides. You manipulate these objects in Visual Basic by invoking methods on the object or by getting and setting the object's properties.</P>

<P>An Automation operation has two components. One component, the server, contains the objects you want to use. The other component, the client, is the one you are currently working in, and from which you want to control the objects from the server. Many components, including Microsoft Access, Excel, Word, and PowerPoint, can act as either the client or server. Other components can act as one or the other, but not both. </P>

<P><I>Instantiation</I> is the process of creating an instance of a class in memory. An object variable points to that location in memory after it is assigned a value with the Set statement. A component instantiated from within Visual Basic code is bound to the client until the client releases that instance of the object. After the server object has been instantiated and initialized, the client must call the server object's methods by using an object variable that references the ActiveX server.</P>

<P>The basic steps to successfully automate a COM object are: </P>

<OL>
<P><LI>Add a reference to the object library.</LI></P>

<P><LI>Declare a variable as the object type.</LI></P>

<P><LI>Assign the object returned by the CreateObject function, New statement, or GetObject function to the object variable you declared in step 2.</LI></P>

<P><LI>Use the properties and methods of the object variable to automate the component.</LI></P>
</ol>

<A NAME="461"><H2>Declaring Object Variables</H2></A>

<P>Before you create an instance of a component, you must declare an object variable that points to the COM object. You declare an object variable as either specific or generic, depending on how you plan to use the variable. In some cases, you do not know at design time the specific type of object your application will use. In these situations, you can use generic object variables to hold pointers to any type of object. For example, you might want to write a function that acts on any one of several different classes of objects. In this case, you must declare the variable as an Object. The following code uses the Object data type to declare a generic object variable:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyObj As Object</pre>
</td></tr>
</table>
</p>

<P>When you use this type of declaration, no information is known about the object at design time. Visual Basic must do additional work to access the object at run time. This causes a negative impact on the client application's performance. This type of variable declaration is called <I>late binding</I>; use it only if absolutely necessary.</P>

<P>If you know at design time the type of object you will be creating at run time, you should specifically declare the variable. The following code creates a variable that will hold pointers to Microsoft Excel objects only:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Public xlApp As Excel.Application
Private xlChart As Excel.Chart
Static xlSheet As Excel.Worksheet
</pre>
</td></tr>
</table>
</p>

  

<P>The code which follows points to other registered objects, such as a Visual Basic project's Class module:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Static obj1 As Project1.Class1</pre>
</td></tr>
</table>
</p>


<P>Visual Basic checks the syntax of calls that use specific object variables. The compiler can produce more efficient code to access the object at run time. At design time, Visual Basic also provides the Auto List Members, which presents a drop-down list of available members (such as properties and methods). This type of object binding is referred to as <I>early binding</I>.</P>

<A NAME="462"><H2>Instantiating an Object</H2></A>

<P>When you declare an object variable, Visual Basic allocates sufficient memory to hold a pointer to an object. When an object is instantiated, Visual Basic creates the component in memory, and the object variable points to that instance of the component. As discussed in Lesson 1 of this chapter, you must properly register the component before you instantiate it; also, the component's object library must be referenced in the client application.</P>

<P>In Visual Basic, there are three ways to create an instance of a COM server object:</P>
<ul>
<p><li>Use the <B>GetObject</B> function.</li></p>

<p><li>Use the <B>CreateObject</B> function.</li></p>

<p><li>Use the <B>New</B> keyword with a <B>Set</B> statement.</li></p>
</ul>

<A NAME="463"><H3>Using the GetObject Function</H3></A>

<P>Use the GetObject function if there is a current instance of the object or if you want to create the object with a file that already exists. The first argument of the GetObject function, pathname, specifies the full path and name of the file containing the object that you want to retrieve. If you omit the pathname, the second argument, class, is required. The class argument is a string value representing the class of the object. The class acts as the template from which an instance of an object is created at run time. The class defines the properties of the object and the methods used to control the object's behavior. Properties and methods also appear in the Auto List Members drop-down list.</P>

<P>The following example creates an instance of a Microsoft Word document object called MyDocument.doc and displays it in Print<B> </B>Preview mode:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Sub ShowDocument()
    'Creating a specific object variable
    Static wdDoc As Word.Document
    'Opens Microsoft Word and displays MyDocument.doc
    Set wdDoc = GetObject(&quot;C:\MyDocument.doc&quot;, &quot;Word.Document&quot;)
    'By default new objects are not visible
    wdDoc.Parent.Visible = True
    wdDoc.PrintPreview
End Sub
</pre>
</td></tr>
</table>
</p>

<P>The following code creates an instance of the application associated with the .xls extension and activates the object in the specified file:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim xl As Object
'Do not specify a class type
Set xl = GetObject(&quot;C:\MyFiles\Earnings.xls&quot;)
</pre>
</td></tr>
</table>
</p>

<A NAME="464"><H3>Using the CreateObject Function</H3></A>

<P>If there is no current instance, and you don't want to open a file when the object is started, use the CreateObject function. In addition, if you must use a generic variable in your application because you do not know the specific object type until run time (late binding), use CreateObject to instantiate the class. If an object has registered itself as a single-instance object, Visual Basic will only create one instance of the object, no matter how many times you call CreateObject.</P>

<P>The following example uses the CreateObject function to create an instance of Microsoft Excel. It uses the reference to access the Visible property of Microsoft Excel, and then uses the Quit method to close the object. Finally, the reference itself is released by setting it equal to the Nothing keyword.</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Dim xlApp As Object
Set xlApp = CreateObject(&quot;Excel.Application&quot;)

With xlApp
'Set Visible property to True to see the application
.Visible = True
'[statements]
'When you finish, use the Quit method to close the application
.Quit
End With
'Release the reference
Set xlApp = Nothing
</pre>
</td></tr>
</table>
</p>

<A NAME="465"><H3>Using the New Keyword with a Set Statement</H3></A>

<P>If you have set a reference to the type library for the external component, and can use a specific object variable (early binding), then use the New keyword with the Set statement to create an instance of the class you want to use in your application.</P>

<P>The Dim, Private, Public, ReDim, and Static statements only declare a variable that refers to an object. No actual object is instantiated until you use the Set statement to assign a specific object. The following code uses the New keyword with the Set statement to create an instance of Microsoft Word:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim wd As Word.Application
Set wd = New Word.Application
With wd
    .Visible = True
    'Add a new document to the Word application
    .Documents.Add
    'Add text to the active document
    .Selection.TypeText Text:=&quot;This text was added&quot;
    'Print the current document
    .ActiveDocument.PrintOut
End With
</pre>
</td></tr>
</table>
</p>

<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="466"><H2>Practice: Automating Microsoft Excel</H2></A>

<P>In this practice you will first create a reference to the Microsoft Excel 8.0 Object Library. The code displays Microsoft Excel by using the xlApp object variable to reference the Visible property. Then it opens a new workbook and programmatically enters values into a worksheet, printing and then closing the workbook. To close Excel, the code uses the Microsoft Excel Quit method and, finally, releases the Excel reference by using the Nothing keyword.</P>

<P><LI><B>To create a new project </B></LI></P>

<OL>
<P><LI>Start Microsoft Visual Basic.</LI></P>

<P><LI>Open a new <B>Standard EXE</B> project.</LI></P>
</ol>

<P><LI><B>To set a reference to the Microsoft Excel 8.0 Library</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>References</B>.</LI></P>

<P>The <B>References</B> dialog box appears.</P>
<P><LI>Click the <B>Microsoft Excel 8.0 Object Library </B>reference, then click <B>OK</B>.</LI></P>
</ol>

<P><LI><B>To add a control to the project and automate Microsoft Excel</B></LI></P>

<OL>
<P><LI>Add a command button to the form. Set the Name property to <B>cmdRunExcel</B> and the Caption property to <B>&amp;Run Excel</B>. Figure 9.4 illustrates the form layout.</LI></P>

<P>
<img src="images/F09xx04.GIF" width=356 height=188 border="0">
</P><P>
<!--caption--><B>Figure 9.4</B> <i>Practice form layout</i>  <!--/caption-->
</P>


<P><LI>Double-click the command button. In the <B>cmdRunExcel_Click</B> event, declare a variable to hold the pointer to Microsoft Excel by adding the following code:</LI></P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim xlApp As Excel.Application</pre>
</td></tr>
</table>
</p>

<P><LI>Create an instance of Microsoft Excel, and use Microsoft Excel's methods and properties, by adding the following code to the <B>cmdRunExcel_Click</B> event:</LI></P>

 <p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
Set xlApp = New Excel.Application

With xlApp
    'Set Visible property to True to see the application
    .Visible = True
    'Add a new workbook
    .Workbooks.Add

    'Enter data into specific cells
    .Range(&quot;A1&quot;).Value = &quot;Product&quot;
    .Range(&quot;A2&quot;).Value = &quot;Apples&quot;
    .Range(&quot;A3&quot;).Value = &quot;Oranges&quot;
    .Range(&quot;A4&quot;).Value = &quot;Bananas&quot;

    'Print the active worksheet
    .ActiveSheet.PrintOut
    'Close the workbook without saving the changes
    'to the new worksheet
    .ActiveWorkbook.Close SaveChanges:=False

    'When you finish, use the Quit method to close the application
    .Quit
End With
'Release the reference
Set xlApp = Nothing
</pre>
</td></tr>
</table>
</p>

<P><LI>Save your project as XL.vbp, and save your form as frmXL.vbp in the \Practice\Ch09 folder, and then test your application. </LI></P>

<P>Figure 9.5 shows the output from the practice.</P>

<P>
<img src="images/F09xx05.GIF" width=349 height=276 border="0">
</P><P>
<!--caption--><B>Figure 9.5</B> <i>Practice output</i>  <!--/caption-->
</P>

</ol>

<A NAME="467"><H2>Using the Object Browser</H2></A>

<P>Use the Object Browser to display the classes, properties, methods, events, and constants available from various object libraries. You can use the Object Browser to find and use objects you create, as well as objects from other applications. Figure 9.6 illustrates the Object Browser window.</P>

<P>
<img src="images/F09xx06.GIF" width=395 height=384 border="0">
</P><P>
<!--caption--><B>Figure 9.6</B> <i>The Object Browser</i>  <!--/caption-->
</P>


<P><LI><B>To display a procedure in a project or library</B></LI></P>

<ol>
<P><LI> Click the <B>Object Browser</B> button on the <B>Standard</B> toolbar, or press <B>F2</B>. Figure 9.7 shows the <B>Object Browser</B> button.</LI></P>

<P>
<img src="images/F09xx07.GIF" width=26 height=26 border="0">
</P><P>
<!--caption--><B>Figure 9.7</B> <i>The Object Browser button</i>  <!--/caption-->
</P>


<P><LI>In the <B>Project/Library</B> box, click the project or library containing the procedures you want to view.</LI></P>

<P><LI>In the <B>Classes</B> list box, click the class or module name that contains the desired procedure.</LI></P>

<P><LI>Click the procedure name in the <B>Members</B> list box, then click the <B>View Definition</B> button (Figure 9.8) on the <B>Object Browser</B> toolbar.</LI></P>

<P>
<img src="images/F09xx08.GIF" width=24 height=22 border="0">
</P><P>
<!--caption--><B>Figure 9.8</B> <i>The View Definition button</i>  <!--/caption-->
</P>

</ol>

<A NAME="468"><H2>Lesson Summary</H2></A>

<P>The Component Object Model (COM) is a component software architecture that allows applications to communicate with components supplied by different software vendors. This communication, called Automation, provides access to the functionality offered by different applications.</P>

<P>When you perform an Automation operation, two components are involved:</P>

<ul>
<p><li>The ActiveX Client component is the application in which you are currently working and from which you want to control an external object.</li></p>

<p><li>The ActiveX Server component contains the external object you want to use.</li></p>
</ul>

<P>Before you create an instance of a component to use in a client application, you must declare an object variable to refer to the object. You declare an object variable as either specific or generic, depending on how you will use the variable.</P>

<P>In Visual Basic, there are three ways to create an object to access an external component:</P>

<ul>
<p><li>Use the GetObject function.</li></p>

<p><li>Use the CreateObject function.</li></p>

<p><li>Use the New keyword with a Set statement.</li></p>
</ul>

<P>Use the Object Browser to display the classes, properties, methods, events, and constants available from the object libraries.</P>

</BODY>
</HTML>





