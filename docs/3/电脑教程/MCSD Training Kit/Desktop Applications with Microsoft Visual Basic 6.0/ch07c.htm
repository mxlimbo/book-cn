<HTML>
<HEAD>
<TITLE>Lesson 2: Introduction to OLE DB and ADO</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07b.htm", "ch07d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="347"><H1>Lesson 2: Introduction to OLE DB and ADO</H1></A>

<P>You can use ADO in Visual Basic to access data in your applications. The ADO object model provides an easy-to-use set of objects, properties, and methods for creating applications that access and manipulate data. </P>

<P>Because ADO is an interface to OLE DB, Microsoft's newest and most powerful data access technology, ADO provides high-performance access to a variety of information sources (including relational data and nonrelational data). This includes mainframe ISAM (indexed sequential access method)/VSAM (virtual storage access method), hierarchical databases, desktop databases such as Microsoft Access, and remote databases such as Oracle and Microsoft SQL Server. In addition, ADO can access other data such as e-mail servers, file system stores, text files, graphical and geographical data, custom business objects, and more.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the benefit of OLE DB.</li></p>

<p><li>Explain how OLE DB works with ADO.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="348"><H2>What Is OLE DB?</H2></A>

<P>OLE DB is a set of COM interfaces that provide applications with uniform access to data stored in diverse information sources, regardless of location or type. In general, OLE DB attempts to make it easy for applications to access data stored in diverse database management systems (DBMS) and other information sources. DBMS sources can include:</P>

<ul>
<p><li>Mainframe databases such as IMS and DB2</li></p>

<p><li>Server databases such as Oracle and SQL Server</li></p>

<p><li>Desktop databases such as Access, Paradox, and FoxPro</li></p>
</ul>

<P>Other sources can include:</P>

<ul>
<p><li>Information stored in file systems for Windows NT or UNIX</li></p>

<p><li>Indexed-sequential files</li></p>

<p><li>E-mail systems such as Exchange</li></p>

<p><li>Spreadsheets, project management tools, and many other sources</li></p>
</ul>

<A NAME="349"><H2>Components of OLE DB</H2></A>

<P>Conceptually, OLE DB has three types of components: data consumers, service components, and data providers, as illustrated in Figure 7.3.</P>

<P>
<A HREF="javascript:fullSize('F07xx03x.htm')"> <img src="images/F07xx03.JPG" width=404 height=432 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 7.3</B> <i>Components of OLE DB</i>  <!--/caption-->
</P>


<A NAME="350"><H3>Data Consumers</H3></A>

<P>Data consumers are applications that use the data exposed by data providers. ADO is the programmatic interface for using OLE DB data. Examples of consumers include high-level data access models such as ADO, business applications written in development tools such as Visual Basic, C++, or Java, and development tools themselves. Any application that uses ADO is an OLE DB data consumer.</P>

<A NAME="351"><H3>Service Components</H3></A>

<P>Service components are elements that process and transport data and extend the functionality of data providers. For example, a cursor engine is a service component that can consume data from a sequential, forward-only data source to produce scrollable data. Service components are designed to integrate efficiently to help OLE DB component vendors develop high-quality OLE DB components.</P>

<A NAME="352"><H3>Data Providers</H3></A>

<P>Data providers are applications, such as Microsoft SQL Server or Exchange. This includes operating system components, such as a file system, indexed-sequential files, spreadsheets, document stores, and mail files that have data that other applications may need to access. These data providers expose OLE DB interfaces that service components or data consumers can access directly. There is also an OLE DB provider for ODBC. This provider makes any ODBC data available to OLE DB data consumers. However, OLE DB is not dependent on ODBC.</P>

<A NAME="353"><H2>How OLE DB Relates To ADO</H2></A>

<P>ADO provides consistent, high-performance access to data and supports a variety of development needs, including the creation of front-end database clients and middle-tier business objects that use applications, tools, languages, or Internet browsers. ADO is designed to be the one data interface needed for single and multi-tier client/server development, as well as Web-based data-driven solution development. The primary benefits of ADO are ease of use, high speed, low memory overhead, and a small disk footprint. </P>

<P>ADO provides an easy-to-use interface to OLE DB, which provides the underlying access to data. ADO is implemented with minimal network traffic in key scenarios, and a minimal number of layers between the front end and data source&#8212;all to provide a lightweight, high-performance interface. ADO is easy to use because it uses a familiar metaphor&#8212;the COM automation interface, available from all leading Rapid Application Development (RAD) tools, database tools, and languages, including Visual Basic, Java, VBScript, JScript, and C/C++.</P>

<A NAME="354"><H2>Lesson Summary</H2></A>

<ul>
<p><li>OLE DB is a set of COM interfaces that provide applications with uniform access to data stored in diverse information sources, regardless of location or type. </li></p>

<p><li>Because ADO is an interface to OLE DB, Microsoft's newest and most powerful data access technology, ADO provides high-performance access to a variety of information sources (including relational data and nonrelational data). </li></p>

<p><li>Conceptually, OLE DB has three types of components: </li></p>
<ul>
<p><li>Data providers</LI></P>

<p><li>Data consumers</LI></P>

<p><li>Service components</LI></P>
</ul>
</UL>



</BODY>
</HTML>





