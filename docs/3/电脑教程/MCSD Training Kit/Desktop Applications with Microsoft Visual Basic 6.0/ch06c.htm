<HTML>
<HEAD>
<TITLE>Lesson 2: Using Class Modules</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06b.htm", "ch06d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="298"><H1>Lesson 2: Using Class Modules</H1></A>

<P>Just like forms and standard modules, you can use class modules in one or more Visual Basic application. The class module can be contained within a compiled ActiveX EXE or ActiveX DLL. In this case, the class module would not be added to the project. Instead, a reference would be made to the ActiveX EXE or ActiveX DLL. After the reference has been set, you can create objects from classes in the component and write code using the object's properties, methods, and events. In this chapter, you will focus on creating class modules for use within a single Visual Basic project. For information about using class modules in COM components, see <a href="ch08a.htm">Chapter 8</a>.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how create an instance of a class.</li></p>

<p><li>Use an object's properties and methods.</li></p>

<p><li>Write an event procedure to handle object events.</li></p>

</UL>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div></P>

<A NAME="299"><H2>Adding A Class Module to a Project</H2></A>

<P>Before you can use a class module, you must first manually add a new class to the project, or load an existing one.</P>

<P><LI><B>To add an existing class module to a project</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>Add</B> <B>Class</B> <B>Module</B>.</LI></P>

<P>The <B>Add Class Module</B> dialog box appears.</P>

<P><LI>Click the <B>Existing</B> tab.</LI></P>

<P><LI>Browse for the Class Module (.cls file) that you want to add to the project, then click <B>Open</B>.</LI></P>
</ol>

<P>After you add the class to your project, you must declare an object variable to store the object. You declare an object variable in the same way you declare other variables, with Dim, ReDim, Static, Private, or Public.</P>

<A NAME="300"><H3>Declaring Object Variables</H3></A>

<P>In most cases, you know at design time the type of object you want to create and use in your application. It is much more efficient, in these cases, to use specific object variables to point to the objects you create. A specific object variable refers to a particular object type and can only hold pointers to that type. If you try to store a different object type in that variable, an error will result.</P>

<P>For example, you can declare any type of Visual Basic object, such as a form or control and then assign values to these variables: </P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim frm As Form
Dim ctl As Control

Set frm = Form1
Set ctl = Command1
</pre>
</td></tr>
</table>
</p>

<P>However, a run-time error will occur if you try to assign the wrong type of object to the object variables:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>'These two lines of code will cause a run-time error
Set frm = Command1
Set ctl = Form1
</pre>
</td></tr>
</table>
</p>

<P>Once you've added a class module to a project, you can create an object variable based on its type. In the following example, a House object variable is created based on the CHouse class:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim House as CHouse</pre>
</td></tr>
</table>
</p>


<A NAME="301"><H3>Using External Objects</H3></A>

<P>In some cases, you might want to declare object variables from external sources, such as Excel, Word, or Internet Explorer. Before you can use an object external to Visual Basic or your application, you must set a reference to that object's type library. A type library contains standard descriptions of exposed objects, properties, and methods that are available from a software component. The files that contain type libraries are called object library files, which have a .olb extension.</P>

<P>If a reference has been set to the object's type library, Visual Basic detects an object variable at design time when you write code for the client application. Visual Basic can display information about the available methods and properties, as well as check the syntax of each method or property call. Another advantage is that you can use the Visual Basic Object Browser to view information about the object's methods, properties, and events.</P>

<P><LI><B>To set a reference to an object library in Visual Basic</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>References</B>.</LI></P>

<P><LI>Select the object library to reference, then click <B>OK</B>.</LI></P>
</ol>

<P>The following example declares a variable called &quot;ie&quot; in the General Declarations section that will hold a pointer to Microsoft Internet Explorer objects only:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim ie As InternetExplorer</pre>
</td></tr>
</table>
</p>

<A NAME="302"><H3>Generic Object Variables</H3></A>

<P>There are cases when you do not know at design time the specific type of object your application will use. In these situations, you can use generic object variables to hold pointers to any type of object. For example, you might want to write a function that acts on any one of several different classes of objects. In this case, you must declare the variable As Object.</P>

<P>The following example uses the Object data type to declare a generic object variable:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim objGeneric As Object</pre>
</td></tr>
</table>
</p>

<P>Since the specific object to be used will not be known until run time, you cannot set a reference to a library for the object in Visual Basic. You should only use generic variables when absolutely necessary since they have several disadvantages, which are discussed in Chapter 8: <a href="ch09a.htm#449">Connecting to COM Servers</a>.</P>

<A NAME="303"><H2>Creating Objects from Components</H2></A>

<P>Once you have made the component available to your application and have declared an object variable to hold an instance of the component, you can create the object.</P>

<P>In Visual Basic there are three ways to create an object to access an component:</P>

<ul>
<p><li>Use the New keyword with a Set statement.</li></p>

<p><li>Use the GetObject function.</li></p>

<p><li>Use the CreateObject function.</li></p>
</ul>

<P>You <I>instantiate</I>, or create, an object from a class using one of these statements or functions. Therefore, to use an object, you must declare the object variable, then create an instance of the object. An object variable is a pointer to a location in memory where an object will be stored. Once the object variable is instantiated, the memory location will contain a newly created object.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
This chapter will focus on using the New keyword to create instances of a class. The CreateObject and GetObject functions will be covered in detail in <a href="ch08a.htm">Chapter 8</a>.
</blockquote></div></p>

<A NAME="304"><H3>Using the New Keyword with the Set Statement</H3></A>

<P>Whenever you assign a value to an object variable in Visual Basic, you must use the Set statement. The Dim, Private, Public, ReDim, and Static statements only declare a variable that refers to an object. No actual object is referred to until you use the Set statement to assign a specific object. </P>

<P>Generally, when you use the Set statement to assign an object reference to a variable, a new object is not created for that variable. However, when you use the New keyword in the Set statement, you are actually creating an instance of the object. The following example shows how to use the New keyword with the Set statement to create an instance of the CHouse class:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Sub CreateHouseObject()
    Dim House As CHouse
	 
    Set House = New CHouse
End Sub
</pre>
</td></tr>
</table>
</p>

<P>You can also use the New keyword in a Dim statement to declare an object variable. If you use New when declaring the object variable, a new instance of the object is created on first reference to it, so you don't have to use the Set statement to assign the object reference. Avoid using variables declared using the New keyword because it can slow your application. Every time Visual Basic encounters a variable declared using the New keyword, it must test whether or not an object reference has already been assigned to the variable.</P>

<A NAME="305"><H2>Lesson Summary</H2></A>

<ul>
<p><li>Class modules give the capability to create reusable objects through ActiveX EXEs and DLLs. </li></p>

<p><li>You can also use class modules to create objects within a single application. </li></p>

<p><li>If the class module has been included in a compiled ActiveX EXE or DLL, you can set a reference to the component in the Visual Basic IDE. After the reference has been set, you can create objects from classes in the component and write code using to use the object.</li></p>
</ul>

</BODY>
</HTML>





