<HTML>
<HEAD>
<TITLE>Lesson 3: Implementing Field-Level Validation</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03c.htm", "ch03e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="180"><H1>Lesson 3: Implementing Field-Level Validation</H1></A>

<P>You may want to validate data as it is entered into each field. Field-level validation provides immediate direction to the user and gives the developer control over user actions. In this lesson, you will learn how to validate data using field-level validation.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Validate data with control properties.</li></p>

<p><li>Establish a field-level keyboard handler using control events.</li></p>

<p><li>Describe different functions you can use to validate information.</li></p>

<p><li>Implement the MaskedEdit control.</li></p>

</UL>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div></P>


<A NAME="181"><H2>Using the Textbox Control Properties</H2></A>

<P>The TextBox control contains several design-time properties that restrict the type of values users can enter. Some of these properties, which are illustrated in Figure 3.3, include the following:</P>

<UL>

<p><li>MaxLength</li></p>

<p><li>PasswordChar</li></p>

<p><li>Locked</li></p>

</UL>

<P>
<img src="images/F03xx03.GIF" width=320 height=157 border="0">
</P><P>
<!--caption--><B>Figure 3.3</B> <i>Textbox properties</i>  <!--/caption-->
</P>



<A NAME="182"><H3>Setting the MaxLength Property</H3></A>

<P>You use the MaxLength property to set a maximum number of characters that the user can enter into a text box. The system beeps when the user tries to type more characters than specified in the MaxLength property.</P>


<A NAME="183"><H3>Using the PasswordChar Property</H3></A>

<P>The PasswordChar property lets you hide (or mask) characters that are entered into a text box. For example, if you set the PasswordChar property to an asterisk (*), the user will see only asterisk characters in the textbox. This technique is often used to hide passwords in logon dialog boxes.</P>

<P>Although any character can be used, most Windows-based applications use the asterisk (*) character. The PasswordChar property does not affect the Text property; the Text property contains exactly what the user types or what was set.</P>


<A NAME="184"><H3>Setting the Locked Property</H3></A>

<P>The Locked property setting determines whether a user can edit the text in a text box. If the Locked property is set to True, the user can view the text in the text box but cannot edit the text. The Locked property lets you set the text box as read-only for the user; you retain the capability to change the Text property programmatically.</P>


<A NAME="185"><H2>Using Events for Field-Level Validation</H2></A>

<P>Field-level keyboard events let you immediately test keystrokes. You can also check for validity and for the format of the characters as they are entered. Field-level events are specific to the control in which they occurred. The events used to perform validation at the field-level are KeyPress, KeyDown, and KeyUp. Controls such as a TextBox have additional events&#8212;for example, the Change event&#8212;that you can use to validate user input.</P>


<A NAME="186"><H3>Formatting and Validating Characters</H3></A>

<P>The KeyPress event recognizes uppercase and lowercase characters as different characters. For example, if the user types &quot;A&quot;, the KeyAscii value passed to the event is 65, but if the user types &quot;a&quot;, the KeyAscii value passed to the event is 97. You can also use the KeyPress event to convert these characters as they are entered into the control. The following example uses the KeyPress event to convert all of the characters entered into the text box to uppercase characters:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Sub txtSubdivision_KeyPress(KeyAscii As Integer)
     'Use the Chr function to return the character 
     'associated with the specified character code
     'After the character is converted to upper case,
     'convert the uppercase character back into an ASCII value
     KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P>The KeyUp and KeyDown events recognize the actual state of the keyboard. For example, when the user presses a key, the KeyDown event fires. When the user releases that key, the KeyUp event fires. You can also use these events to determine if any special keys (CTRL, ALT, SHIFT, etc.) were used. This allows you to track key combinations such as CTRL+C.</P>

<P>You can use the KeyCode argument to determine which special key was pressed to fire the KeyDown event. The Shift argument indicates whether SHIFT, CTRL, or ALT was pressed. Only by examining this argument can you determine whether an uppercase or a lowercase letter was typed in the KeyDown event. The following code shows how to use the Shift argument to determine whether special keys were used in the KeyDown event:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub Text1_KeyDown(KeyCode As Integer, Shift As Integer)
     Select Case Shift 'Key
          Case 1 
               Print &quot;You pressed the SHIFT key.&quot;
          Case 2 
               Print &quot;You pressed the CTRL key.&quot;
          Case 3
               Print &quot;You pressed both SHIFT and CTRL.&quot;
          Case 4 
               Print &quot;You pressed the ALT key.&quot;
          Case 5
               Print &quot;You pressed both SHIFT and ALT.&quot;
          Case 6
               Print &quot;You pressed both CTRL and ALT.&quot;
          Case 7
               Print &quot;You pressed SHIFT, CTRL, and ALT.&quot;
      End Select
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P>The following code checks both the KeyCode and the Shift arguments to determine whether a capital letter &quot;A&quot; was pressed:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub Text1_KeyDown(KeyCode As Integer, _
    Shift As Integer)
    If KeyCode = 65 And Shift = 1 Then 'or vbKeyA and vbShiftMask
        Print &quot;The user pressed the capital 'A'.&quot;
    End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="187"><H3>Validating Data in the Change Event</H3></A>

<P>Several controls use the Change event, although how and when this event occurs varies with each control. The TextBox control fires the Change event each time the user enters a character into the text box. Figure 3.4 illustrates a form that disables an OK button until all values have been entered. The code that follows the figure shows the procedure EnableOK, which is called from each TextBox's Change event when data is entered.</P>

<P>
<img src="images/F03xx04.GIF" width=320 height=240 border="0">
</P><P>
<!--caption--><B>Figure 3.4</B> <i>Using the TextBox Change event</i>  <!--/caption-->
</P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub EnableOk()
    'Check the value of each control. If all have values,
    'enable the OK button
    If txtFirst.Text &lt;&gt; &quot;&quot; And txtLast.Text &lt;&gt; &quot;&quot; _
           And txtEmail.Text &lt;&gt; &quot;&quot; Then
           cmdOk.Enabled = True
    Else
           cmdOk.Enabled = False
    End If
End Sub

Private Sub txtEmail_Change()
    'Call the EnableOk procedure each time a character is typed
    Call EnableOk
End Sub

Private Sub txtFirst_Change()
    'Call the EnableOk procedure each time a character is typed
    Call EnableOk
End Sub

Private Sub txtLast_Change()
    'Call the EnableOk procedure each time a character is typed
    Call EnableOk
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="188"><H2>Validation Functions</H2></A>

<P>Visual Basic includes several functions that assist in the validation process. These functions are used to verify that correct types data are received. The most frequently used functions are:</P>

<ul>

<p><li>IsNumeric</li></p>

<p><li>IsDate</li></p>

</ul>

<P>The IsNumeric function returns a value of True if the argument is numeric: if the argument is not numeric, False is returned. The IsDate function returns a value of True if the argument is a valid date; if the argument is not a valid date, False is returned. These functions can also be used with the InputBox function. </P>

<P>The InputBox function displays a standard dialog box that prompts the user to enter a string value. The user can type an alphanumeric value into a text box and click OK or Cancel. When the user clicks OK or presses ENTER, the InputBox function returns a string value equal to the contents of the TextBox control within the InputBox dialog box. If the user clicks Cancel, the InputBox function returns an empty string (&quot;&quot;).</P>

<P>The InputBox does not validate the type of data entered into the InputBox. Use the IsNumeric and IsDate functions for this task. In the following code, a value is received from the user and evaluated using the IsNumeric and IsDate functions:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub cmdValueInput_Click()
      Dim strValue As String
      strValue = InputBox(&quot;Enter the value.&quot;)
      If IsDate(strValue) Then
            Print &quot;The value is a valid date.&quot;
      ElseIf IsNumeric(strValue) Then
            Print &quot;The value is a valid number.&quot;
      Else
            Print &quot;Not a correct value.&quot;
      End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="189"><H2>Using the Masked Edit Control</H2></A>

<P>The Masked Edit control is another method for restricting data input. This control supplies visual cues about the type of data being entered or displayed. When you create a Masked Edit control, you use special characters to require entry of only certain types of data, such as a number or character. For example, the area code for a phone number could be required when other data, such as a telephone extension, is optional. Figure 3.5 illustrates the appearance of a Masked Edit control.</P>

<P>
<img src="images/F03xx05.GIF" width=32 height=32 border="0">
</P><P>
<!--caption--><B>Figure 3.5</B> <i>MaskEdit control</i>  <!--/caption-->
</P>


<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B><HR>
The Masked Edit control can be added to Toolbox by selecting Microsoft Masked Edit Control 6.0 from the Components dialog box.
</BLOCKQUOTE></DIV>
</P>

<P>The Masked Edit control has several properties that assist in the validation of user input. Some of the frequently used properties are:</P>

<ul>

<p><li>Mask</li></p>

<p><li>Format</li></p>

<p><li>Text and ClipText</li></p>

<p><li>AutoTab</li></p>

</ul>

<A NAME="190"><H3>Mask Property</H3></A>

<P>To define the Masked Edit control, use the Mask property. The Mask property forces data to be entered into a predefined template. You can set this property at design time or at run time. Although you can use standard formats at design time, and the control will distinguish between numeric and alphabetic characters, you may want to write code to validate content such as the correct month or time of day. Each character position in the Masked Edit control corresponds to either a placeholder of a specified type or to a literal character.</P>

<P>The following code shows how to use the Mask property of the Masked Edit control to create an input mask for entering a United States telephone number, complete with placeholders for area code and local number: </P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
mskPhone.Mask = &quot;(###)###-####&quot;
</PRE>
</TD></TR></TABLE>
</P>

<P>Figure 3.6 illustrates the appearance of the resulting mask.</P>

<P>
<img src="images/F03xx06.GIF" width=155 height=43 border="0">
</P><P>
<!--caption--><B>Figure 3.6</B> <i>MaskEdit control's Mask property</i>  <!--/caption-->
</P>


<P>When the Mask property is an empty string (&quot;&quot;), the control behaves like a standard TextBox control. When you define an input mask, underscores appear beneath every placeholder in the mask. You can replace a placeholder only with a character that is of the same type as the one specified in the input mask.</P>

<P>To clear the Text property when you have a mask defined, set the Text property to the default mask setting. For example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
mskPhoneNumber.Text = &quot;(___)___-____&quot;
</PRE>
</TD></TR></TABLE>
</P>

<A NAME="191"><H3>Format Property</H3></A>

<P>Use the Format property to define the format for displaying and printing the contents of a control, such as numbers, dates, times, and text. You use the same format expressions as defined by the Visual Basic Format function, except that you cannot use named formats such as &quot;Currency.&quot;</P>

<A NAME="192"><H3>Text and ClipText</H3></A>

<P>The Text property returns the data that the user has typed, along with the mask. The ClipText property returns only the data the user has typed. This is particularly important when implementing a Masked Edit control with a database. Figure 3.7 illustrates the text entered into the Masked Edit control, and the code that follows shows the use of these properties.</P>

<P>
<img src="images/F03xx07.GIF" width=149 height=39 border="0">
</P><P>
<!--caption--><B>Figure 3.7</B> <i>The Text and ClipText properties</i>  <!--/caption-->
</P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
'The user entered 4255551212
Print &quot;The user entered &quot; &amp; mskPhoneNumber.ClipText
'The control shows (425)555-1212
Print &quot;The control shows &quot; &amp; mskPhoneNumber.Text
</PRE>
</TD></TR></TABLE>
</P>

<P>The ClipText property of the MaskEdit control shown in Figure 3.7 returns a value of 4255551212, and the Text property returns (425)555-1212.</P>

<A NAME="193"><H3>AutoTab</H3></A>

<P>When the AutoTab property is set to True, and the user enters the maximum number of characters specified by the Mask property for the control, the insertion point automatically moves to the control with the next TabIndex.</P>


<A NAME="194"><H2>The Validate Event</H2></A>

<P>Visual Basic 6.0 includes a Validate event for controls, which occurs before a control loses focus. This event occurs only when the CausesValidation property of the control that is about to receive the focus is set to True. Use both the Validate event and CausesValidation property for a control to evaluate input before allowing the user to move focus away from that control. The Validate event also includes a Cancel argument, which will cause the control to retain focus when set to True.</P>


<A NAME="195"><H3>Using the Validate Event</H3></A>

<P>The simplest way to validate data is to use the Validate event. The Validate event also provides you with control over when focus can be moved to other controls. In previous versions of Visual Basic, you had to use the LostFocus event to Validate data, and then use the SetFocus method to keep focus on the control being validated. Because the LostFocus event occurs after the focus has moved away from the control, it can potentially force your program into an infinite loop. By using the Validate event, you can prevent the focus from ever shifting to another control until all validation rules have been met. Possible uses for the Validate event include:</P>

<UL>

<p><li>A data entry application needs to perform more sophisticated validation than can be provided by the Masked Edit control.</li></p>

<p><li>A form needs to prevent users from moving off a control, by pressing the TAB key or an accelerator key, until data has been entered in a field.</li></p>

</UL>


<A NAME="196"><H3>Setting the CausesValidation Property</H3></A>

<P>The CausesValidation property works in tandem with the Validate event to limit when a control can lose focus. You can set the CausesValidation property to determine whether the Validate event will occur on a second control from which the focus is being shifted. If validation code is contained in the Validate event for a TextBox, and the user clicks on a CommandButton that has its CausesValidation property set to True, the Validate event for the text box will fire. However, if the CausesValidation property for the CommandButton is set to False, the Validate event will not fire. By default, the CausesValidation property is set to True for all controls.</P>

<P><LI><B>To use the Validate event of a TextBox</B></LI></P>

<OL>

<P><LI>Add a TextBox to a form.</LI></P>

<P><LI>In the Code window, click the Validate event from the procedure list, as illustrated in Figure 3.8.</LI></P>

</ol>
<P>
<A HREF="javascript:fullSize('F03xx08x.htm')"> <img src="images/F03xx08.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 3.8</B> <i>Selecting Validate from the procedure list</i>  <!--/caption-->
</P>


<ol>
<P><LI VALUE="3">Type a validation code in the Validate event for the TextBox.</LI></P>

<P><LI>Set the CausesValidation property to <B>False</B> for any controls for which you do not want the Validate event to fire.</LI></P>

</OL>

<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="197"><H2>Practice: Using the Validate Event With the CausesValidation Property</H2></A>

<P>In this practice, you will create a customer information entry form and use the Validate event to validate fields on the form. You will also use set the CausesValidation property of a Help button to avoid running any validation code when this command button is clicked.</P>

<p>
<img src="images/video.gif" width=78 height=54 border=0>
</p>

<P>To see a demonstration, run the Chap03.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To create a data entry form</B></LI></P>

<OL>

<P><LI>Start Visual Basic.</LI></P>

<P><LI>From the <B>New Project</B> dialog box, select <B>Standard</B> <B>EXE,</B> then click <B>OPEN</B>.</LI></P>

<P><LI>Add five TextBox controls, five Label controls, and two CommandButton controls to the form.</LI></P>

<P><LI>Arrange the controls on the form as illustrated in Figure 3.9.</LI></P>

<P>
<A HREF="javascript:fullSize('F03xx09x.htm')"> <img src="images/F03xx09.JPG" width=404 height=189 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 3.9</B> <i>The Customer Information form</i>  <!--/caption-->
</P>

<P><LI>Change the default names of each TextBox to more meaningful names: <B>txtName</B>, <B>txtAddress</B>, <B>txtCity</B>, <B>txtState</B>, <B>txtZipCode</B>, <B>cmdOK</B>, and <B>cmdHelp</B>.</LI></P>

<P><LI>In the Validate event for <B>txtName</B>, type the following code:</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Len(txtName.Text) &lt; 1 Then
     MsgBox &quot;You must type a name.&quot;
     Cancel = True
End If
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="7">In the Validate event of txtAddress, type the following code:</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Len(txtAddress.Text) &lt; 1 Then
     MsgBox &quot;You must type an address.&quot;
     Cancel = True
End If
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="8">In the Validate event of txtCity, type the following code</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Len(txtCity.Text) &lt; 1 Then
     MsgBox &quot;You must type a city.&quot;
     Cancel = True
End If
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="9">In the Validate event of <B>txtState</B>, type the following code:</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Len(txtState.Text) &lt;&gt; 2 Then
     MsgBox &quot;State must be two characters.&quot;
     Cancel = True
End If
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="10">In the Validate event of <B>txtZipCode</B>, type the following code:</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Not IsNumeric(txtZipCode.Text) Then
     MsgBox &quot;Zip code must be numeric&quot;
     Cancel = True
ElseIf Len(txtZipCode.Text) &lt;&gt; 5 Then
     MsgBox &quot;zip code must be 5 digits.&quot;
     Cancel = True
End If
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="11">In the <B>Properties</B> window, set the CausesValidation property of the <B>cmdOK</B> control to <B>False</B>.</LI></P>

<P><LI>From the <B>Project</B> menu, click <B>Add</B> <B>Form</B>.</LI></P>

<P><LI>Select <B>About</B> <B>Dialog</B>, then click <B>Open</B>.</LI></P>

<P>A new pre-made form is added to your project.</P>

<P><LI>In the Click event of <B>cmdHelp</B>, type the following code:</LI></P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
frmAbout.Show vbModal
</PRE>
</TD></TR></TABLE>
</P>

<P><LI VALUE="15">From the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P><LI>Focus will be set to <B>txtName</B>, so press the <B>TAB</B> key to try to move to the address field.</LI></P>

<P>Notice that you receive a message box as you coded in the Validate event for <B>txtName</B>.</P>

<P><LI>Click <B>OK</B> to close the message box.</LI></P>

<P><LI>Click the <B>Help</B> command button on the form.</LI></P>

<P>Notice that <B>frmAbout</B> is now loaded and visible because the Validate event did not fire for <B>txtName</B>. This is because you set the CausesValidation property of <B>cmdHelp</B> to <B>False</B>.</P>

<P><LI>From the <B>Run</B> menu, click <B>End</B>.</LI></P>

<P><LI>Save your project as Validate.vbp, and save Form1 as frmMain.frm.</LI></P>

</OL>


<A NAME="198"><H2>Lesson Summary</H2></A>

<P>Field-level validation provides immediate direction to the user and gives the developer more control over user actions.</P>

<P>The TextBox control contains several design-time properties that restrict the type of values users can enter. Some of these properties are:</P>

<UL>

<p><li>MaxLength</li></p>

<p><li>PasswordChar</li></p>

<p><li>Locked</li></p>

</UL>

<P>Field-level keyboard events let you immediately test keystrokes. Field-level events are specific to the control in which they occur. The field-level events include:</P>

<UL>

<p><li>KeyPress</li></p>

<p><li>KeyDown</li></p>

<p><li>KeyUp</li></p>

</UL>

<P>Visual Basic includes several functions that assist in the validation process. You use these functions to verify that the correct types of data are received. Commonly used functions are:</P>

<UL>

<p><li>IsNumeric</li></p>

<p><li>IsDate</li></p>

</UL>

<P>Another method you can use to restrict data input is the Masked Edit control. This control supplies visual cues about the type of data entered or displayed. The MaskEdit control provides several methods, properties, and events that are useful tools for validating user input.</P>

<P>Visual Basic 6.0 includes a Validate event for controls, which occurs before a control loses focus. This event occurs only when the CausesValidation property of the control that is about to receive the focus is set to True. You use both the Validate event and CausesValidation property for a control to evaluate input before allowing the user to move focus away from that control. Possible uses for the Validate event include:</P>

<UL>

<p><li>A data entry application needs to perform more sophisticated data entry validation than can be provided by the MaskedEdit control.</li></p>

<p><li>A form needs to prevent users from moving off a control by pressing the TAB key or an accelerator key until data has been entered in a field.</li></p>

</UL>


</BODY>
</HTML>





