<HTML>
<HEAD>
<TITLE>Lesson 4: Using the Class Builder</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06d.htm", "ch06f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="317"><H1>Lesson 4: Using the Class Builder</H1></A>

<P>You can create a class module and add methods, properties, and events manually, or you can use the Class Builder Add-In. The Class Builder automates the process of adding properties, methods, and events to a class. </P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Explain how to add a new class using the Class Builder.</li></p>

<p><li>Describe how to create an object model.</li></p>

</UL>
<b>Estimated lesson time: 20 minutes</b>
</blockquote></div></P>

<A NAME="318"><H2>Loading the Class Builder</H2></A>

<P>Before you can use the Class Builder, you must load it into the Visual Basic development environment.</P>

<P><LI><B>To add the Class Builder Add-In</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</LI></P>

<P><LI>In the list of available add-ins, select VB 6 Class Builder Utility.</LI></P>

<P><LI>Under <B>Load</B> <B>Behavior</B>, select the <B>Loaded/Unloaded</B> check box, then click <B>OK</B>.</LI></P>
</ol>

<A NAME="319"><H2>Creating a New Class</H2></A>

<P>With the Class Builder, you can visually define a class and its interface, as shown in Figure 6.2.</P>

<P>
<img src="images/F06xx02x.gif" width=428 height=264 border="0">
</P><P>
<!--caption--><B>Figure 6.2</B> <i>The class builder utility</i>  <!--/caption-->
</P>


<P><LI><B>To use the Class Builder to create a class</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Class Builder Utility</B>.</LI></P>

<P><LI>In the Class Builder, on the <B>File</B> menu, point to <B>New</B>, then click <B>Class</B>.</LI></P>

<P><LI>In the <B>Class Module Builder</B> dialog box, enter a name for the class.</LI></P>

<P><LI>On the <B>Attributes</B> tab, enter a description for the class and a Help context ID if there is an associated Help file.</LI></P>
</ol>

<A NAME="320"><H3>Creating the Class Interface</H3></A>

<P>Once you've created a class, you need to define the properties, methods, and events of the class. Collectively, these are called the interface of the class.</P>

<P><LI><B>To add a property to a class </B></LI></P>

<OL>
<P><LI>Select the class in the Class Builder.</LI></P>

<P><LI>On the <B>File</B> menu, point to <B>New</B>, then click <B>Property</B>.</LI></P>

<P><LI>Type a property name and select a data type.</LI></P>

<P><LI>The Declaration should be set to Public Property (Get, Set, Let). Click <B>OK</B> to close the dialog box.</LI></P>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You can also add descriptive text and associate a Help context ID number for each property, method, and event by selecting the Attributes tab and typing in the relevant information.
</blockquote></div>
</p>
<ol>
<P><LI value=5>On the <B>File</B> menu, click <B>Update Project</B>, then exit the Class Builder.</LI></P>
</ol>

<A NAME="321"><H2>Object Models </H2></A>

<P>As you add more classes to your project, you'll probably discover that the objects you are using have clear relationships to each other. An object model defines a hierarchy of objects that gives structure to an object-based program. By defining the relationships between objects that are part of the program, an object model organizes the objects in a way that makes programming easier. Object models give structure to an object-based program. They define the relationships among the objects you use in your program; this organizes your objects in a way that makes programming easier.</P>

<P>Typically, an object model expresses the fact that some objects are bigger&#8212;or more important&#8212;than others are. These objects can be thought of as containing other objects, or as being made up of other objects. For example, you could create a SmallBusiness object as the core of your program. You might want the SmallBusiness object to have other types of objects associated with it, such as Employee, Customer and Products. An object model for this program is shown in Figure 6.3.</P>

<P>
<img src="images/F06xx03.GIF" width=297 height=287 border="0">
</P><P>
<!--caption--><B>Figure 6.3</B> <i>An object model</i>  <!--/caption-->
</P>


<P>You can define four class modules, named SmallBusiness, Employee, Customer, and Product, and give them each appropriate properties and methods, and then make the connections between objects. You have two tools for this purpose: Object properties and the Collection object. The following code shows one way to implement the hierarchy in Figure 6.3:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>'Code for the Declarations section of the 
'SmallBusiness class module.

Public Name As String
Public Product As New Product
Public Employees As New Collection
Public Customers As New Collection
</pre>
</td></tr>
</table>
</p>

<A NAME="322"><H3>Object Relationship</H3></A>

<P>Objects in a hierarchy are linked together by object properties, that is, properties that return references to objects. An object that contains other objects will have properties that return either references to the objects themselves, or references to collections of objects. Object properties work well when the relationship between objects is one-to-one. However, an object of one type frequently contains a number of objects of another type. In the SmallBusiness object model, the Employees property is implemented as a Collection object, so that the SmallBusiness object can contain multiple Employee objects.</P>

<P>You should use collections when the number of properties is unknown. For example, you have a bicycle object with two wheels, and there is a set of spokes for each wheel. You can easily define the wheels as: FrontWheel and BackWheel. However, Spokes would be better implemented as a collection. In other words, it would be much easier to reference a Spokes collection rather than: Spoke1, Spoke2, Spoke3, etc.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The Class Builder utility, included in the Professional and Enterprise editions of Visual Basic, can generate much of the code you need to implement an object model. Class Builder creates robust object properties and collection classes, and allows you to rearrange your model easily.
</blockquote></div></p>

<A NAME="323"><H2>Lesson Summary</H2></A>

<ul>
<p><li>An object model defines a hierarchy of objects that gives structure to an object-based program. By defining the relationships between objects that are part of the program, an object model organizes the objects in a way that makes programming easier. </li></p>

<p><li>Objects in a hierarchy are linked together by object properties, that is, properties that return references to objects. An object that contains other objects will have properties that return either references to the objects themselves, or references to collections of objects. Although you can create single object properties, you should use collections when the number of properties is unknown.</li></p>
</ul>

</BODY>
</HTML>





