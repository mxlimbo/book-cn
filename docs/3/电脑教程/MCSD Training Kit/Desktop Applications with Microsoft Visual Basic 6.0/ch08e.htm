<HTML>
<HEAD>
<TITLE>Lesson 4: Navigating Records</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08d.htm", "ch08f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="417"><H1>Lesson 4: Navigating Records</H1></A>

<P>When you open a recordset, the current record is positioned to the first record (if any) and the BOF and EOF properties are set to False. If there are no records, the BOF and EOF property settings are set to True.</P>

<P>You can use the Move, MoveFirst, MoveLast, MoveNext, and MovePrevious methods, as well as the AbsolutePosition, AbsolutePage, and Filter properties, to reposition the current record&#8212;assuming the provider supports the relevant functionality. Forward-only Recordset objects support only the MoveNext method. When you use the Move methods to visit each record (or enumerate the recordset), you can use the BOF and EOF properties to see if you've moved beyond the beginning or end of the recordset.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Specify the cursor type used by a recordset.</li></p>

<p><li>Bind controls to a <B>Recordset</B> object.</li></p>

<p><li>Navigate records in a recordset.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="418"><H2>Specifying a Cursor Type</H2></A>

<P>A Recordset object uses a cursor type to determine how records can be navigated and updated. You set the CursorType property prior to opening the recordset, or pass a CursorType argument with the Open method. If you don't specify a cursor type, ADO opens a forward-only cursor by default.</P>

<P>There are four different cursor types defined in ADO:</P>

<UL>
<p><li>Dynamic cursor</li></p>

<P>A dynamic cursor allows you to view additions, changes, and deletions by other users, and allows all types of movement through the recordset.</P>

<p><li>Keyset cursor</li></p>

<P>A keyset cursor behaves like a dynamic cursor, except that it prevents you from seeing records that other users add, and prevents access to records that other users delete. Data changes by other users will still be visible. </P>

<p><li>Static cursor</li></p>

<P>A static cursor provides a fixed copy of a set of records for you to use to find data or generate reports. It allows all types of movement through the recordset. Additions, changes, or deletions by other users are not visible.</P>

<p><li>Forward-only cursor</li></p>

<P>Forward-only recordsets only support the MoveNext navigation method. You cannot use any other navigation technique or a run-time error will occur. In addition, the RecordCount property will always return a value of -1.</P>
</UL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Some OLE DB providers don't support all cursor types. Check the documentation for the provider.
</blockquote></div></p>

<P>In the following example, a new recordset is created using a Dynamic cursor:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer.Open &quot;Select * from Customers&quot;, cnNorthwind, adOpenDynamic</PRE>
</TD></TR></TABLE>
</P>

<A NAME="419"><H3>Using the Resync and Requery Methods</H3></A>

<P>Both the Static and Forward-only cursors do not present updated record information to the user once the recordset has been built. Consider using the Recordset object's Resync method to update the values of the records in the current recordset. Resync does not return new records based on the original query. To do this you must use the Requery method. Requery uses additional resources because the query re-executed.</P>

<A NAME="420"><H2>Presenting Data to the User</H2></A>

<P>One of the benefits of the ADO Data control is the ability to bind controls. For example, when an ADO Data control is added to a form, a text box can be bound to the ADO Data control. Then, as records are navigated in the ADO Data control using the button on the control, the value in the text box automatically updates.</P>

<P>ADO Recordset objects also support the ability to bind controls. Now, when opening a recordset, you can easily present the resulting fields to the user without needing to write code to manually update the controls on a form. To bind a control to a recordset object, you need to specify the control's DataSource and DataField properties. Since the Recordset object is created at run time, you must bind the controls from within code. In the following example, two text boxes are bound to the rsCustomer recordset object:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>'Bind the first text box
Set txtFirstName.DataSource = rsCustomer
txtFirstName.DataField = &quot;FirstName&quot;

'Bind the second text box
Set txtLastName.DataSource = rsCustomer
txtLastName.DataField = &quot;LastName&quot;</PRE>
</TD></TR></TABLE>
</P>

<P>Binding controls to a Recordset object uses less code and is more efficient than manually populating controls each time the record changes. In addition, bound controls also support adding and editing records.</P>

<A NAME="421"><H2>Navigating the Recordset</H2></A>

<P>Once you create the recordset and presented the data to the user, you need to programmatically control how the user navigates the records. There are four primary methods for moving from one record to the next:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Method</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">MoveNext</TD>
<TD VALIGN="TOP">This method will move the user to the next record in the recordset. If they have moved to the end of the recordset, the EOF property is set to True. If the user attempts to move to the next record, past EOF, a run-time error will occur.</TD></TR>
<TR>
<TD VALIGN="TOP">MovePrevious</TD>
<TD VALIGN="TOP">This method will move the user to the previous record in the recordset. If they have moved to the beginning of the recordset, the BOF property is set to True. If the user attempts to move to the previous record, past BOF, a run-time error will occur.</TD></TR>
<TR>
<TD VALIGN="TOP">MoveFirst</TD>
<TD VALIGN="TOP">This method will move the user to the first record in the recordset.</TD></TR>
<TR>
<TD VALIGN="TOP">MoveLast</TD>
<TD VALIGN="TOP">This method will move the user to the last record in the recordset.</TD></TR></TABLE></P>

<P>The Recordset EOF and BOF properties are used to monitor if the current record has moved outside the range of the recordset. If EOF or BOF are True, no record will be presented to the user. However, if the user attempts to navigate past this empty record, a run-time error will occur.</P>

<P>To implement any one of the above methods, use the following syntax:</P>

<P><I>object</I>.method</P>

<P>The following example uses the MoveNext method to navigate to the next record:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub cmdMoveNext_Click()
  rsCustomer.MoveNext

  'Check if they moved past the last record
  If rsCustomer.EOF Then
       'The last record was passed
       rsCustomer.MoveLast

  End If
End Sub</PRE>
</TD></TR></TABLE>
</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Only one record can be the current record in a recordset at one time.
</blockquote></div></p>

<A NAME="422"><H3>Additional Navigation Methods and Properties</H3></A>

<P>You can also use any of the following methods and properties to navigate a recordset object that supports moving forward and backward:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Method/Property</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">Move Method</TD>
<TD VALIGN="TOP">Moves the position of the current record in a Recordset object.</TD></TR>
<TR>
<TD VALIGN="TOP">AbsolutePage Property</TD>
<TD VALIGN="TOP">Specifies in which page the current record resides.</TD></TR>
<TR>
<TD VALIGN="TOP">AbsolutePosition Property</TD>
<TD VALIGN="TOP">Specifies the ordinal position of a Recordset object's current record.</TD></TR>
<TR>
<TD VALIGN="TOP">NextRecordset Method</TD>
<TD VALIGN="TOP">Clears the current Recordset object and returns the next Recordset by advancing through a series of commands.</TD></TR></TABLE></P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The NextRecordset method is issued when returning multiple recordsets. Multiple recordsets are outside the scope of this class.
</blockquote></div></p>

<A NAME="423"><H2>Finding a Record in a Recordset</H2></A>

<P>In addition to navigating a recordset, you may want to allow the user to search for a specific record. There are two general ways to provide this functionality: re-query the database using a specific WHERE clause, or use the Find method. Depending on the size of the recordset, network bandwidth, and server load, you may decide it is more efficient to locate the record in an existing recordset. To do this, use the Find method. Use the following syntax to call the Find method:</P>

<P><I>RecordsetObject</I>.Find (criteria, SkipRows, searchDirection, start)</P>

<P>The following table describes the arguments used by the Find method:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Argument</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">Criteria</TD>
<TD VALIGN="TOP">A string containing a statement that specifies the column name, comparison operator, and value to use in the search. </TD></TR>
<TR>
<TD VALIGN="TOP">SkipRows</TD>
<TD VALIGN="TOP">An optional Long value, whose default value is zero, that specifies the offset from the current row or <I>start </I>bookmark to begin the search. </TD></TR>
<TR>
<TD VALIGN="TOP">searchDirection</TD>
<TD VALIGN="TOP">An optional value that specifies whether the search should begin on the current row or the next available row in the direction of the search. Its value can be adSearchForward or adSearchBackward. The search stops at the start or end of the recordset, depending on the value of <I>searchDirection</I>.</TD></TR>
<TR>
<TD VALIGN="TOP">Start</TD>
<TD VALIGN="TOP">An optional Variant bookmark to use as the starting position for the search.</TD></TR></TABLE></P>

<P>When specifying a criteria, you can use the following comparison operators: &quot;&gt;&quot;(greater than), &quot;&lt;&quot; (less than), &quot;=&quot; (equal), or &quot;like&quot; (pattern matching).</P>

<P>The following example locates a customer record using the Find method:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer.Find &quot;LastName = 'Smith'&quot;</PRE>
</TD></TR></TABLE>
</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When using a string value in a Find, you must surround the value with single quotes.
</blockquote></div></p>

<P>Once the first record has been located, you can use the FindNext method to locate additional records. When the last record in the search has been found, EOF will be set to True. If the search direction was set to adSearchForward, BOF will be True.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
You cannot use the Find method with a forward-only recordset. The recordset you create must be scrollable.
</blockquote></div></p>

<A NAME="424"><H3>Using the Filter Property</H3></A>

<P>ADO also supports the ability to filter the current recordset. Unlike Find, which searches for the first specific record based on a criteria, Filter will allow you to reduce the recordset to just records based on the criteria. Once you have finished with the filter, you can turn it off. This returns the recordset to its original state. The greatest benefit to using the Filter property is you do not have to return to the database to rebuild the recordset; all the processing occurs on the client computer. Like the Find method, the recordset that you create must support a scrollable cursor type (Dynamic, Keyset, or Static). The recordset cannot be forward-only. The following example uses the Filter property to limit the available records:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>'This turns the Filter on
rsCustomer.Filter = &quot;LastName Like 'S*'&quot;</PRE>
</TD></TR></TABLE>
</P>

<P>Use the adFilterNone constant to turn off the filter. The following example returns the recordset to its original state:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>'This turns the Filter off
rsCustomer.Filter = adFilterNone</PRE>
</TD></TR></TABLE>
</P>

<P>The Filter property will accept the same operators as the Find method. In addition, you can build compound Filters which provides a higher level of control over the available records without needing to return to the data source.</P>

<A NAME="425"><H2>Lesson Summary</H2></A>

<P>By default, a Recordset object is set to forward-only. This means that your application can only use the MoveNext method of navigation. In order to use any of the other navigation methods supported by ADO, such as MovePrevious, you must specify a scrollable cursor type. The cursor type controls the level of features that your application can potentially support. Certain cursor types provide greater functionality, but use additional overhead. Therefore, the cursor type should be chosen based on the needs of your application.</P>

<P>In addition to the basic navigation methods, you can also use the ADO Find method to search for records in the current recordset. Using this technique can provide better performance than re-querying the database. However, depending on the size of the recordset and the server load, you may find that using a specific WHERE clause is more efficient.</P>

</BODY>
</HTML>





