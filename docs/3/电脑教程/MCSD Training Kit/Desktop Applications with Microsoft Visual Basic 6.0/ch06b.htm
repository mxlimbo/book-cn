<HTML>
<HEAD>
<TITLE>Lesson 1: Introduction to Com</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06a.htm", "ch06c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="290"><H1>Lesson 1: Introduction to COM</H1></A>

<P>In an effort to create applications that can interact with one another, and to provide developers the ability to resuse code, Microsoft created the Component Object Model (COM). COM provides powerful capabilities to Visual Basic programmers. For example, if you want to use the Microsoft Word spell checker in a custom application, you can use Microsoft Word software components, called objects, to provide spell check functionality to your application. Users of your application do not have to do anything in order for the Microsoft Word spell checker to execute; this is done automatically through your Visual Basic code. This process is made possible by COM technology, which is used by Visual Basic internally. In other words, you do not use COM directly &#8212; Visual Basic uses COM in a way that is transparent to you.</P>

<P>In addition, COM allows you to create software components that can be reused by other Visual Basic applications. These software components provide &quot;services&quot; to client applications. In other words, your application (using Microsoft Word objects) acts as a client that requests services from a component (Microsoft Word). Any custom components that you create in Visual Basic can be used by applications written in other languages that support the COM standard, such as Visual C++.</P>

<P>Originally, COM was designed to work on a single computer. With the introduction of Distributed COM (DCOM) your applications can use objects that are on other computers on a network. For example, you could write code that connects to a remote database server and returns data to client computers across a network. By packaging this code into a COM component, it can be installed on a server and used by client applications. If an update needs to be made to the code, you only need to recompile and install the component on the server. The client computers do not need to be updated.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Define the Component Object Model.</li></p>

<p><li>Explain the difference between code and class modules.</li></p>

<p><li>Describe object-oriented programming and component development.</li></p>

<p><li>Describe how Visual Basic allows you to create COM components.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="291"><H2>Component Object Model</H2></A>

<P>Microsoft has defined an open, extensible standard for software interoperability. The Component Object Model (COM) makes it possible for software components that you create to work with other software components, including software you buy off-the-shelf. </P>

<P>COM allows software components, derived from any combination of pre-existing components you have developed and components from different software vendors, to connect to and communicate with each other.</P>

<P>Because COM enables interoperability among applications written in different languages, a word processor application written by one vendor can connect to a spreadsheet object written by another vendor. The word processor application could then be used to import data from the spreadsheet object. Additionally, the spreadsheet object could receive data through a COM object residing on a mainframe. The word processor, spreadsheet, and mainframe database do not have to know anything about each other's implementation. The word processor only needs to know how to connect to the spreadsheet; the spreadsheet only needs to know how to expose its services for other software components to connect.</P>

<A NAME="292"><H3>Component Development and Object-Oriented Programming</H3></A>

<P>Component-based software development reduces programming time by allowing developers to assemble applications from tested, standardized components. Visual Basic gives you the tools to rapidly create, debug, and deploy software components. It is the easiest way to create ActiveX components such as ActiveX controls, ActiveX documents, and code components (ActiveX DLLs and ActiveX EXEs).</P>

<P>ActiveX is technology based on COM. An ActiveX component is a unit of executable code, such as an .exe, .dll, or .ocx file that follows the ActiveX specification for creating reusable objects. ActiveX technology allows programmers to assemble these reusable software components into objects that provide services to clients.</P>

<P>Component software development using ActiveX technology should not be confused with object-oriented programming (OOP). OOP is a way to build object-based software components. ActiveX is a technology that allows you to combine object-based components created by different development tools or across different applications. To put it another way, an OOP language allows you to create reusable objects for a single development environment, while ActiveX and COM make objects work together in multiple environments.</P>

<A NAME="293"><H3>How Component Development Promotes Reusability</H3></A>

<P>You can use an OOP tool such as Microsoft Visual C++ to construct a set of objects. Other Visual C++ developers can use and further extend these objects. However, if you package your objects in an COM component, they can be used and further extended with any programming tool that supports COM technology, such as Visual Basic.</P>

<P>A client application or component object does not care what language a COM object was written in, only that it can communicate with the object. This allows application and component objects to communicate with each other regardless of the language or development tool in which they were created.</P>

<A NAME="294"><H3>COM and Visual Basic</H3></A>

<P>As you define the functionality required by your application, look for places where you can use pre-existing COM components instead of having to write the code to implement a given functionality yourself. For example, you could create a function procedure that logs a user into a server. In your corporation, you may be required to include this procedure in every application you create. Instead of adding this code to every program, you can implement this logon procedure in a COM component that can be easily reused from project to project.</P>

<P>There are many reasons to use COM components in an application, including:</P>

<ul>
<p><li>Reusability</li></p>

<P>Once you create a COM component, other developers can use it. This enables easy access to your component's features in other applications without requiring developers to write extensive code.</P>

<p><li>Reduced complexity</li></p>

<P>You can create a COM component to hide programming complexity from other programmers. Other programmers need only know what information to provide to your component, and what information to retrieve.</P>

<p><li>Easier updating</li></p>

<P>Components make it easier for you to revise and update your applications. For example, you can create a COM component that encapsulates business rules. If the business rules change, you update just the component, not all the applications that use the component.</P>
</ul>

<P>When you use COM components in a Visual Basic project, you do not have to understand all of the mechanics involved in making these components work together. It is more important to know how to use the component that adds the functionality you need to your application. You can find detailed information about COM at <a href="http://www.microsoft.com/com/default.asp" TARGET="_window2">http://www.microsoft.com/com/default.asp.</a></P>

<A NAME="295"><H2>Class Modules</H2></A>

<P>Class modules (.cls files) are the foundation of object-oriented programming in Visual Basic. They are analogous to a blueprint for a house. Just as a house is built from a blueprint, new objects are created from class modules. These new objects include your own customized properties and methods.</P>

<P>A class module is similar to a standard code module (.bas file) because both contain functionality that can be used by other modules within the application. The difference is that a class module provides functionality in the form of an object:</P>

<ul>
<p><li>Data in a standard module has program scope, which means that it exists for the life of your program.</li></p>

<p><li>Class module data exists for each object that is created from the class. Each object's data exists only for the lifetime of the object; it is created when the object is created, and destroyed when the object is destroyed.</li></p>

<p><li>Variables declared as public in a standard module are visible from anywhere in your project. Variables declared as public in a class module can only be accessed by referencing a particular instance of a class or object.</li></p>
</ul>

<P>Most commonly, class modules exist in code components. A code component can be thought of as a container for multiple classes. For example, you could create a &quot;vehicles&quot; code component that contains multiple classes; these classes can be used to create objects such as cars, trucks, and vans. A client application uses a code component by creating an object from one of the classes the component provides, and invoking the object's properties, methods, and events.</P>

<A NAME="296"><H2>Creating COM Components With Visual Basic</H2></A>

<P>The greatest benefit of COM is the ability to create COM components that can be easily implemented in many applications. A COM component is a unit of executable code, such as an .exe, .dll, or .ocx file that follows the COM specification for creating objects. These are created from class modules in Visual Basic. A COM component exposes objects that can be used by other applications. Visual Basic handles much of the complexity of creating COM .exe and .dll files. You can create three types of COM components with Visual Basic:</P>

<ul>
<p><li>ActiveX Controls</li></p>

<P>ActiveX controls (formerly known as OLE controls) are standard user-interface elements that allow you to rapidly assemble reusable forms and dialog boxes.</P>

<p><li>Active Documents</li></p>

<P>Active documents are COM components that must be hosted and activated within a document container. Active document technology is an extension to OLE documents. It enables generic shell applications, such as Microsoft Internet Explorer, to host different types of documents.</P>

<p><li>ActiveX Code components</li></p>

<P>AcitveX Code components (COM executable programs and DLLs) are groups, called libraries, of classes. Client applications use COM objects by creating instances of classes provided by the COM .exe or .dll file. Client applications call the properties, methods, and events provided by each COM object. In Visual Basic, the project templates you use to create a COM components are referred to as ActiveX EXEs and ActiveX DLLs.</P>
</ul>

<A NAME="297"><H2>Lesson Summary</H2></A>

<ul>
<p><li>You can create ActiveX components that contain class modules that are used to create objects in applications. ActiveX is a technology based on the Component Object Model (COM), which is Microsoft's standard for software interoperability. </li></p>

<p><li>OOP is a way to build object-based software components; ActiveX is a technology that allows you to combine object-based components created by many different tools. </li></p>

<p><li>Visual Basic class modules are the foundation of OOP.</li></p>

<p><li>With Visual Basic you can create three types of COM components:</li></p>
<ul>
 <LI> ActiveX controls</LI>

  <P><LI> Active documents</LI></P>

  <P><LI> ActiveX Code components</LI></P>
</ul>
</UL>

</BODY>
</HTML>





