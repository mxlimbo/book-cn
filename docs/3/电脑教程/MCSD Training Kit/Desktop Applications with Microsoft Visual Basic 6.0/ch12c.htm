<HTML>
<HEAD>
<TITLE>Lesson 2: Creating an Executable </TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="631"><H1>Lesson 2: Creating an Executable </H1></A>

<P>With Visual Basic, you can compile your code into one of two types of executable files: p-code (pseudo code) or native. Both of these types of executable files have advantages and disadvantages; you compile a project into p-code or native code or depending on the tasks that your application performs. </P>

<P>P-code instructions are translated or interpreted by a run-time dynamic-link library (DLL) before executing on the processor chip. Compiling to native code means that the resulting executable file will contain instructions that are native to the processor chip. When you compile to native code, you can use compiler switches (or options) to optimize your application when it runs. In this lesson, you will learn about the various compiler options and their purpose. In addition, you will learn how to implement conditional compilation, which is used to specify what code will be compiled based on a given condition.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Explain the advantage of compiling with the native code option.</li></p>

<p><li>Explain the options for compiling with the native code option.</li></p>

<p><li>Describe when you would use conditional compilation.</li></p>

</UL>
<b>Estimated lesson time: 40 minutes</b>
</blockquote></div></P>

<A NAME="632"><H2>Compiler Options</H2></A>

<P>With the Professional or Enterprise edition of Visual Basic, you can compile your code either in standard Visual Basic pseudo code (p-code) or in native code. In the Standard edition of Visual Basic, you can compile programs only in p-code. Compiling your programs in native code provides several options for optimizing and debugging that are not available with p-code.</P>

<P>Visual Basic p-code is an intermediate step between the high-level instructions in your Basic program and the low-level native code that your computer's processor executes. Visual Basic translates p-code into native code during run time, and then executes the program. By compiling directly to native code format, you eliminate the intermediate p-code step.</P>

<P>When you compile your project with the native code option, your code is compiled to the native instructions of the processor chip, and not compiled in p-code. This speeds up the execution of loops and mathematical calculations, and also speeds up calls to external services.</P>

<P>You can debug programs compiled in native code using standard debugging tools, such as the debugging environment provided by Visual C++. You can also use options for optimizing native code. For example, you can optimize code for speed or for size. Figure 12.2 shows the Compile tab on the Project Properties dialog box. </P>

<P><LI><B>To set the compile option to native code</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> window, click the project you want to compile.</LI></P>

<P><LI>On the <B>Project</B> menu, click <B>Project</B> <B>Properties</B>.</LI></P>

<P>The <B>Project Properties</B> dialog box appears.</P>
<P><LI>Click the <B>Compile</B> tab.</LI></P>

<P><LI>Click <B>Compile to Native Code</B>.</LI></P>

<P><LI>For advanced optimization options, click the <B>Advanced Optimizations</B> button.</LI></P>

<P><LI>Select the options you want, then click <B>OK</B>.</LI></P>
</ol>

<P>
<img src="images/F12xx02x.gif" width=418 height=377 border=0>
</P><P>
<!--caption--><B>Figure 12.2</B> <i>The Compile tab in the Project Properties dialog box </i>  <!--/caption-->
</P>


<P>When compiling in native code, Visual Basic enables several options for customizing and optimizing the executable file. </P>

<P>When the compiler translates Visual Basic statements into machine code, often many different sequences of machine code can correctly represent a given statement or construct. Sometimes these differences offer trade-offs of size versus speed. </P>

<A NAME="633"><H3>Optimize for Fast Code</H3></A>

<P>Use the Optimize for Fast Code option to maximize the speed of compiled executable files. This option instructs the compiler to favor speed over size.</P>

<P>Selecting the Optimize for Fast Code option ensures that when the compiler recognizes such alternatives, it will always generate the fastest code sequence possible, even when that may increase the size of the compiled program.</P>

<A NAME="634"><H3>Optimize for Small Code</H3></A>

<P>Use the Optimize for Small Code option to minimize the size of compiled executable files. This option instructs the compiler to favor size over speed.</P>

<P>Selecting this option ensures that when the compiler recognizes such alternatives it will always generate the smallest code sequence possible, even when that may decrease the execution speed of the compiled program.</P>

<A NAME="635"><H3>No Optimizations</H3></A>

<P>Use the No Optimizations option to turn off all optimizations.</P>

<P>With this option selected, the compiler generates code that is significantly slower and larger than when optimization for fast or small code is selected.</P>

<A NAME="636"><H3>Favor Pentium Pro</H3></A>

<P>Use the Favor Pentium Pro option to optimize code generation in favor of the Pentium Pro (P6) processor. Code generated with this option will still run on earlier processors, but less efficiently.</P>

<P>The Pentium Pro microprocessor architecture allows certain code generation strategies that can substantially improve efficiency. However, code created using these Pentium Pro strategies does not perform as well on 80386-based and 80486-based computers or on Pentium computers. You should use this option only if all or most of the machines your program will run on use the Pentium Pro.</P>

<A NAME="637"><H3>Create Symbolic Debug Info</H3></A>

<P>Use the Create Symbolic Debug Info option to generate symbolic debug information in the compiled executable file.</P>

<P>Programs compiled to native code using this option can be debugged using Visual C++ (5.0 or later) or another compatible debugger. Setting this option will generate a .pdb file with the required symbol information for use with compatible symbolic debuggers.</P>

<A NAME="638"><H3>Assume No Aliasing</H3></A>

<P>Use the Assume No Aliasing option to tell the compiler that your program does not use aliasing. </P>

<P>An alias is a name that refers to a memory location that is already referred to by a different name. This occurs when you use ByRef arguments that refer to the same variable in two ways. For example:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub MyProcedure(x as integer, y as integer)
    x = 5   'Code is referring to the same variable
    '(the local z in Main)
    y = 6   'via two different names, x and y.
End Sub

Sub Main
    Dim z as integer
    MyProcedure z,z
End Sub
</PRE></TD></TR></TABLE></P>


<P>Using the Assume No Aliasing option allows the compiler to apply optimizations it couldn't otherwise use, such as storing variables in registers and performing loop optimizations. However, you should be careful not to check this option if your program passes ByRef arguments, because the optimizations could cause the program to execute incorrectly.</P>

<A NAME="639"><H3>Remove Array Bounds Checks</H3></A>

<P>Use the Remove Array Bounds Checks option to turn off error checking for valid array indexes and the correct number of dimensions of the array.</P>

<P>By default, Visual Basic checks every access to an array to determine whether the index is within the range of the array. If the index is outside the bounds of the array, an error is returned. Selecting the Remove Array Bounds Checks option turns off this error checking, which can speed up array manipulation significantly. However, if your program accesses an array with an index that is out of bounds, the program may access invalid memory locations without warning. This can cause unexpected behavior or program crashes.</P>

<A NAME="640"><H3>Remove Integer-Overflow Checks</H3></A>

<P>Use the Remove Integer-Overflow Checks option to turn off error checking to ensure that numeric values assigned to integer variables are within the correct range for the data types.</P>

<P>By default, Visual Basic checks every calculation of a variable with an integer-style data type (Byte, Integer, Long, and Currency) to be sure that the resulting value is within range of that data type. Selecting the Remove Integer-Overflow Checks option turns off this error checking, which can speed up integer calculations. If a value is out of range for the data type, however, no error is returned and incorrect results may occur.</P>

<A NAME="641"><H3>Remove Floating-Point Error Checks</H3></A>

<P>Use the Remove Floating-Point Error Checks option to turn off error checking to ensure that numeric values assigned to floating-point variables are within the correct range for the data types, and that division by zero or other invalid operations do not occur.</P>

<P>By default, Visual Basic checks every calculation of a variable with a floating point data type (Single and Double) to be sure that the resulting value is within range of that data type. Error checking is also performed to determine if division by zero or other invalid operations are attempted. Selecting this option turns off this error checking, which can speed up floating point calculations. If data type capacities overflow, however, no error is returned and incorrect results may occur.</P>

<A NAME="642"><H3>Remove Safe Pentium FDIV Checks</H3></A>

<P>Use the Remove Safe Pentium FDIV Checks option to turn off the generation of special code to make floating point division safe on Pentium processors with the floating-point division (FDIV) bug.</P>

<P>The native code compiler automatically adds extra code for floating-point operations to make these operations safe when run on Pentium processors that have the FDIV bug. Selecting the Remove Safe Pentium FDIV Checks option produces code that is smaller and faster, but in rare cases, this option might produce slightly incorrect results on Pentium processors with the FDIV bug.</P>

<A NAME="643"><H3>Allow Unrounded Floating-Point Operations</H3></A>

<P>Use the Allow Unrounded Floating-Point Operations option to tell the compiler to compare the results of floating-point expressions without first rounding those results to the correct precision.</P>

<P>Floating-point calculations are normally rounded off to the correct degree of precision (Single or Double) before comparisons are made. Selecting the Allow Unrounded Floating-Point Operations option lets the compiler perform floating-point comparisons before rounding. This is more efficient than comparing after rounding and it also improves the speed of some floating-point operations. A disadvantage of enabling this option is that calculations might be maintained to a higher precision than expected. In addition, two floating-point values that might be expected to compare as equal might not actually do so.</P>

<P>In general, this option should not be used if you perform equality comparisons directly on the results of floating-point computations. For example:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim Q As Single
     Q = &lt;floating-point computation&gt;
     If Q = &lt;floating-point computation&gt; then
End If
</PRE></TD></TR></TABLE></P>

<P>If the Allow Unrounded Floating-Point Operations option is set, the comparison of Q will be made with the result of the floating-point expression. It will likely have higher precision than that of a Single, so the comparison may fail. If the option is not set, the result of the floating-point expression will be rounded to the appropriate precision (Single) before the comparison, then the comparison will succeed.</P>

<A NAME="644"><H2>Using Conditional Compilation</H2></A>

<P>Conditional compilation lets you compile only selected parts of the program. You can include specific features of your program in different versions. For example, you can design an application to run on different platforms or change the date and currency display filters for an application distributed in several different languages.</P>

<P>To conditionally compile a part of your code, enclose it between #If...Then and #EndIf statements, using a Boolean constant as the branching test. To include this code segment in compiled code, set the value of the constant to &#8211;1 (True).</P>

<P>For example, to create French language and German language versions of the same application from the same source code, embed platform-specific code segments in #If...Then statements using the predefined constants conFrenchVersion and conGermanVersion:</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
#If conFrenchVersion Then
     '&lt;code specific to the French language version&gt;.
#ElseIf conGermanVersion then   
     '&lt;code specific to the German language version&gt;.
#Else
     '&lt;code specific to other versions&gt;.
#End If
</PRE></TD></TR></TABLE></P>

<P>If the value of the conFrenchVersion constant is set to True at compile time, the conditional code for the French language version will be compiled. If the value of the conGermanVersion constant is set to True, the compiler uses the German language version.</P>

<A NAME="645"><H3>Declaring Conditional Compilation Constants</H3></A>

<P>You can set the conditional compilation constants in your project in three ways: in the Project Properties dialog box, in a command line argument, or in your code. The way you set a conditional compilation constant depends on the scope you want the constant to have.</P>

<P>Using the Project Properties dialog box or command line to set your conditional compilation constants makes the constants Public to all modules in the project. By using the #Const statement in your code, the constants are Private to the module in which they are declared. </P>

<P><LI><B>To set the conditional compilation constants in the Project Properties dialog box </B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click the <B>Project Properties</B>.</LI></P>

<P><LI>Click the <B>Make</B> tab.</LI></P>

<P><LI>Type an argument, such as <B>conFrenchVersion = &#8211;1</B>, in the <B>Conditional Compilation Arguments</B> field.</LI></P>
</OL>

<P>If you have a complex #If...Then statement, containing one or more #ElseIf statements, you will need to set additional constants. You can set multiple constants by separating them with colons, as in the following example:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
conFrenchVersion=-1:conANSI=0
</PRE></TD></TR></TABLE></P>

<P>If you want to start compilation from a command line, use the /d switch to enter conditional compilation constants, as shown here:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
vb6.exe /make MyProj.vbp /d conFrenchVersion=&#8211;1:conANSI=0
</PRE></TD></TR></TABLE></P>

<P>Command-line declarations override declarations entered on the Project Properties dialog box. Arguments set on the Project Properties dialog box remain in effect for subsequent compilations.</P>

<A NAME="646"><H2>Lesson Summary</H2></A>

<P>You can compile a Visual Basic application as:</P>
<UL>
<p><li>Pseudo code (p-code), which is translated by a run-time DLL before execution.</li></p>

<p><li>Native code, which provides several optimization options:</li></p>
<UL>
<P><LI> Optimize for Fast Code</LI></P>

<P><LI> Optimize for Small Code</LI></P>

<P><LI> No Optimizations</LI></P>

<P><LI> Favor Pentium Pro</LI></P>

<P><LI> Create Symbolic Debug Info</LI></P>

<P><LI> Assume No Aliasing</LI></P>

<P><LI> Remove Array Bounds Checks</LI></P>

<P><LI> Remove Integer-Overflow Checks</LI></P>

<P><LI> Remove Floating-Point Error Checks</LI></P>

<P><LI> Remove Safe Pentium FDIV Checks</LI></P>

<P><LI> Allow Unrounded Floating-Point Operations</LI></P>
</UL>
</UL>

<P>Conditional compilation lets you include specific features of your application for in different versions, such as foreign language versions.</P>

</BODY>
</HTML>





