<HTML>
<HEAD>
<TITLE>Lesson 3: Creating Class Modules</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06c.htm", "ch06e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="306"><H1>Lesson 3: Creating Class Modules</H1></A>

<P>At this point, you have written code to manipulate forms and controls in your Visual Basic projects. A form in Visual Basic is much like a class module that you can create. A form has properties, methods, and events that are used to manipulate form objects when your program executes. When you create your own custom classes, part of the class development includes creating the corresponding properties, methods, and events.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>
<p><li>Create properties for a class.</li></p>

<p><li>Create methods for a class.</li></p>

<p><li>Create events for a class.</li></p>

<p><li>Describe how to handle object events.</li></p>

<p><li>Create event procedures.</li></p>

</UL>
<b>Estimated lesson time: 40 minutes</b>
</blockquote></div></P>

<A NAME="307"><H2>Creating Property Procedures</H2></A>

<P>Properties are attributes or characteristics of an object. For example, a house object could have a color property. At any time, you can change the color of the house by assigning a value to the color property. In addition, you can assign the value of a property to a variable as shown in the following example:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyNewHouse As CHouse
Dim ColorPropertyValue As String

'Create an instance of the house object
Set MyNewHouse = New CHouse

'Get the color property value and display
'the value in a message box
ColorPropertyValue = MyNewHouse.Color
MsgBox &quot;House color is: &quot; &amp; ColorPropertyValue

'Set the house color property to red
MyNewHouse.Color = &quot;RED&quot;
</pre>
</td></tr>
</table>
</p>

<P>You implement properties for a class by creating <I>property</I> <I>procedures</I>. There are three types of property procedures:</P>

<OL>
<P><LI>Property Get</LI></P>

<P>Property Get procedures return the current property value. This is shown in the example above when the ColorPropertyValue variable is set to MyNewHouse.Color.</P>
<P><LI>Property Let</LI></P>

<P>Property Let procedures assign a new value to a property. This is shown in the example above where MyNewHouse.Color is set to RED.</P>
<P><LI>Property Set</LI></P>

 <p>A Property Set procedure is used in lieu of a Property Let procedure when the property itself is an object. When you assign a value to an object, you must use the Visual Basic Set statement. An example of a property which is an object itself would be the Font property of the TextBox control.</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>'The Pen property may be set to different Pen implementations
Property Set Pen(P As Object)
    Set CurrentPen = P   ' Assign Pen to object.
End Property
</pre>
</td></tr>
</table>
</p>

</OL>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="308"><H2>Practice: Designing a Class Module</H2></A>

<P>In the following procedures, you will create a new project, add a new class module, and add a property to the object.</P>

<p>
<img src="images/video.gif" width=78 height=54 border="0">
</p>

<P>To see a demonstration, run the Chap06.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To create a class module</B></LI></P>

<OL>
<P><LI>Start Visual Basic.</LI></P>

<P><LI>In the <B>New Project</B> dialog box, select <B>Standard</B> <B>EXE</B>, then click <B>OK</B>.</LI></P>

<P><LI>On the <B>Project</B> menu, click <B>Add Class Module</B>.</LI></P>

<P><LI>In the <B>Add Class Module</B> dialog box, select <B>Class</B> <B>Module,</B> then click <B>Open</B>.</LI></P>

<P><LI>In the <B>Properties</B> window, set the <B>Name</B> property for the class module to CHouse.</LI></P>
</ol>

<P><LI><B>To create property procedures</B></LI></P>

<OL>
<P><LI>In the <B>Code</B> window, type the following:</LI></P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>'Contains the color property setting
Private mvarColor As String

Public Property Get Color() As String
    'Return the current color setting
    Color = mvarColor
End Property

Public Property Let Color(argColor As String)
    'Set the current color setting
    mvarColor = argColor
End Property
</pre>
</td></tr>
</table>
</p>

<P><LI>Place a command button on <B>Form1</B>.</LI></P>

<P><LI>In the <B>Click</B> event for the command button, type the following:</LI></P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyNewHouse As CHouse
Dim HouseColorValue As String

Set MyNewHouse = New CHouse
MyNewHouse.Color = &quot;RED&quot;

HouseColorValue = MyNewHouse.Color
MsgBox &quot;House color is: &quot; &amp; HouseColorValue
</pre>
</td></tr>
</table>
</p>

<P><LI>On the <B>Run</B> menu in Visual Basic, click <B>Start</B>.</LI></P>

<P><LI>When the program is running, click the <B>Command1</B> button.</LI></P>

<P>Notice that the property value has been set and then assigned to a variable which appears in a message box.</P>

<P><LI>Click <B>OK</B> to close the message box.</LI></P>

<P><LI>On the <B>Run</B> menu in Visual Basic, click <B>Stop</B>.</LI></P>
</ol>

<A NAME="309"><H2>Creating Methods</H2></A>

<P>Methods represent the functionality your class provides. For example, a House class may have a method such as Build. To create a method for an object, you create Public Sub or Function procedures within a class module.</P>

<P>The following example creates a method that builds the House:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Function Build() As Boolean
    'Call procedures to build the house
    LayFoundation sngLength, sngWidth
    ..
    ..
    PlaceCarpetAndTile
    'If successful
    Build = True
End Function
</pre>
</td></tr>
</table>
</p>

<A NAME="310"><H2>Using the CHouse Class</H2></A>

<P>Once you've created an instance of a class, you can use the methods and properties of the class. You can use the Object Browser in Visual Basic to view the properties, methods, and events that are defined for a class.</P>

<P>The following example creates an instance of the CHouse class, and sets and retrieves the Color property:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyHouse As CHouse

Set MyHouse = New CHouse
'Call Property Let procedure
MyHouse.Color = &quot;WHITE&quot;
'Call Property Get procedure
MsgBox MyHouse.Color
</pre>
</td></tr>
</table>
</p>

<P>The following example creates an instance of the CHouse class and calls the Paint method:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim MyHouse As CHouse
Dim bHousePainted As Boolean

Set MyHouse = New CHouse
'Call the Paint Method
bHousePainted = MyHouse.Paint
If bHousePainted Then
      MsgBox &quot;House painted successfully!&quot;
End If
</pre>
</td></tr>
</table>
</p>

<P>When you write code that uses objects, it is good practice to release the memory used by your objects when you are finished with them. Once you have finished using an object, use the Set statement to assign the value Nothing to the variable for the object. The following example releases the memory for the MyHouse object:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Set MyHouse = Nothing</pre>
</td></tr>
</table>
</p>

<A NAME="311"><H2>Creating Events</H2></A>

<P>An object provides notification that some action has occurred through the use of events. Properties and methods are <I>incoming</I> <I>interfaces</I> because they are invoked outside of the object. By contrast, events are <I>outgoing</I> <I>interfaces</I>, because they are initiated within the object and handled outside of the object. For example, when you change the Caption property of a form in Visual Basic, the form object contains the actual code that makes the change; you do not see this code. However, you create and develop event procedures yourself by writing code in Visual Basic.</P>

<P>Class modules have two built-in events: Initialize and Terminate.</P>

<ul>
<p><li>The Initialize event occurs when an instance of a class is created, but before any properties have been set. When you write a class module, you use the Initialize event to initialize any data used by the class. You can also use the Initialize event to load forms used by the class.</li></p>

<p><li>The Terminate event occurs when the object variable goes out of scope or is set to the value Nothing. When you write a class module, you use the Terminate event to save information, unload forms, or perform tasks that should occur when the class terminates.</li></p>
</ul>

<A NAME="312"><H2>Declaring Custom Events</H2></A>

<P>You can also declare custom events for your class. You define the event and then write code to cause the event to occur. When you work with an object that exposes an event, you can write code in an event handler to take action when the event occurs. For example, a command button in Visual Basic has a Click event; you can create a Click event procedure containing code to respond.to that event. Similarly, a Customer object could have an OverDue event that occurs when they have an unpaid invoice for more than 90 days. Events are declared in the General Declarations section of a class module using the Event keyword. The following example shows how to declare an event for a class:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Event Status(ByVal StatusText As String)</pre>
</td></tr>
</table>
</p>

<A NAME="313"><H3>Using the RaiseEvent Keyword</H3></A>

<P>When you want an event for a class to occur, use the RaiseEvent statement within the class module. The RaiseEvent statement is followed by the event name and any arguments for the event procedure. The following example code raises the Status event to provide status information during a method that takes a long time to process:</P>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
Public Sub Build()
     RaiseEvent Status(&quot;Laying foundation...&quot;)
     LayFoundation sngLength, sngWidth
     PlaceCarpetAndTile
     RaiseEvent Status(&quot;Installing carpet and tile...&quot;)
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="314"><H2>Handling Events</H2></A>

<P>In order to support an object's events, you must declare the object variable using the WithEvents keyword. For example, you can use the following code to handle the Build event of a House object:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private WithEvents MyNewHouse As CHouse</pre>
</td></tr>
</table>
</p>


<P>The variable MyNewHouse must be a module-level variable, which is declared in the General Declarations section. After you declare the MyNewHouse object using the WithEvents keyword, MyNewHouse will appear in the code window as an object, along with its associated events, as shown in Figure 6.1.</P>

<P>
<A HREF="javascript:fullSize('F06xx01x.htm')"> <img src="images/F06xx01.JPG" width=404 height=282 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 6.1</B> <i>Object displayed in code window</i>  <!--/caption-->
</P>


<P>The following example shows how to declare an event procedure for the MyHouse object:</P>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MyNewHouse_Status(strStatus As String)
    MsgBox &quot;Current status: &quot; &amp; strStatus
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="315"><H3>Limitations of the WithEvents Keyword</H3></A>

<P>There are several limitations on the use of object variables declared using the WithEvents keyword: </P>

<ul>
<p><li>A variable declared using the WithEvents keyword cannot be a generic object variable. That is, you cannot declare it As Object &#8212; you must specify the class name when you declare the variable.</li></p>

<p><li>You cannot use the WithEvents keyword in conjunction with the New keyword. For example, the following example is invalid:</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private WithEvents MyHouse As New House</pre>
</td></tr>
</table>
</p>

<p><li>You cannot declare variables using the WithEvents keyword in a standard module (.bas file). You can declare them only in class modules, form modules, and other modules that define classes.</li></p>

<p><li>You cannot create arrays of variables using the WithEvents keyword.</li></p>
</ul>

<A NAME="316"><H2>Lesson Summary</H2></A>

<ul>
<p><li>When you create class modules, you can write code to provide properties, methods, and events. </li></p>

<p><li>Properties are characteristics of an object and can be thought of as <I>nouns</I>, such as color, size, or name. </li></p>

<p><li>Methods are procedures that perform services for the object, such as the Show method of a form in Visual Basic. </li></p>

<p><li>An event allows an object to send notifications, such as the Load or Unload event of a form in Visual Basic. </li></p>

<p><li>Event procedures can be written to handle object events. </li></p>
<ul>
<P><LI> When you want to handle an object's events, you must use the WithEvents keyword when declaring the object. </LI></P>
</ul>
</ul>

</BODY>
</HTML>





