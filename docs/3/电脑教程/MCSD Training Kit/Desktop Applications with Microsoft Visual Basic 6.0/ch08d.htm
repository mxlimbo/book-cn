<HTML>
<HEAD>
<TITLE>Lesson 3: Retrieving Data</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08c.htm", "ch08e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="409"><H1>Lesson 3: Retrieving Data</H1></A>

<P>ADO lets you retrieve data from a data source and present the resulting records to the user. These records are called a recordset; they exist in the ADO recordset object. You can create a recordset by itself or by using a Command object. You typically return records from a Command object by calling a stored query or a stored procedure. Depending on the functionality that you provide, these records can then be updated by the user and saved back to the data source.</P>

<P>In addition to returning records, you can also use the Command object to run queries that modify or delete records. These queries are sometimes called action queries. An action query is different from a traditional query because they do not return records. An action query is usually saved in the database in the form of a stored query (Microsoft Access) or a stored procedure (Microsoft SQL Server). In this course, stored queries in Microsoft Access will be presented.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Explain the purpose of a Recordset object.</li></p>

<p><li>Retrieve records from a data source.</li></p>

<p><li>Explain when to use the ADO Command object.</li></p>

<p><li>Describe the relationship between a Command and a Connection object.</li></p>

<p><li>Work with data in a recordset.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="410"><H2>Retrieving Records with a Recordset Object</H2></A>

<P>Once a connection has been established to the data source, you can return records using the Recordset object's Open method. To create a recordset, follow these steps:</P>

<OL>
<P><LI>Declare a recordset object variable.</LI></P>

<P><LI>Instantiate the object variable.</LI></P>

<P><LI>Use the Open method to request records from a data source.</LI></P></OL>

<P>The following syntax is used to access records in a data source:</P>

<P><I>recordset</I>.Open <I>Source</I>, <I>ActiveConnection</I>, <I>CursorType</I>, <I>LockType</I>, <I>Options</I></P>

<P>The following table describes the arguments used by the Open method:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Argument</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">Source</TD>
<TD VALIGN="TOP"><I>Optional</I>. A Variant that evaluates to an SQL statement or table name.</TD></TR>
<TR>
<TD VALIGN="TOP">ActiveConnection</TD>
<TD VALIGN="TOP"><I>Optional</I>. Either a Variant that evaluates to a valid Connection object variable name, or a String containing ConnectionString parameters.</TD></TR>
<TR>
<TD VALIGN="TOP">CursorType</TD>
<TD VALIGN="TOP"><I>Optional</I>. A CursorTypeEnum value that determines the type of cursor that the provider should use when opening the Recordset. Can be one of the following constants (see the CursorType property for definitions of these settings).</TD></TR>
<TR>
<TD VALIGN="TOP">LockType</TD>
<TD VALIGN="TOP"><I>Optional</I>. A LockTypeEnum value that determines what type of locking (concurrency) the provider should use when opening the Recordset. Can be one of the following constants (see the LockType property for more information).</TD></TR>
<TR>
<TD VALIGN="TOP">Options</TD>
<TD VALIGN="TOP"><I>Optional</I>. A Long<B> </B>value that indicates how the provider should evaluate the Source argument if it represents something other than a Command object, or that the Recordset should be restored from a file where it was previously saved.</TD></TR></TABLE></P>

<A NAME="411"><H3>Using an Explicit Connection Object</H3></A>

<P>You can navigate through the records, or present them to the user, using the Recordset object. Depending on the options used when opening the recordset, you can also give the user the ability to edit, delete, or add new records. By default, a read-only recordset is created. In addition, the recordset only supports the MoveNext navigation method by default. This is called a forward-only recordset.</P>

<P>The following example opens a new recordset from an existing connection:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>'Declare the recordset object variable
Dim rsStudents As Recordset

'Instantiate the object
Set rsStudents = New Recordset

'Retrieve records from the data source
rsStudents.Open &quot;Select * from Students&quot;, cnSchool</PRE>
</TD></TR></TABLE>
</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Unless you use a Command object, you can only pass an SQL statement or a table name to the Open method.
</blockquote></div></p>

<A NAME="412"><H3>Using an Implicit Connection Object</H3></A>

<P>An alternative to using an existing Connection object is to open a new recordset using an implicit connection. One of the features of the ADO object model is the ability to call objects directly. When calling a recordset object directly, ADO automatically creates a Connection object in the background. The following example uses an implicit connection to return records from the Customer table:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>'Declare the object variable
Dim rsCustomer As Recordset

'Instantiate the object
Set rsCustomer = New Recordset

'Open a new connection and return the appropriate records
rsCustomer.Open &quot;Select * from Customers&quot;, _
    &quot;Provider=Microsoft.Jet.OLEDB.3.51;&quot; &amp; _
        &quot;Data Source=C:\temp\Nwind.mdb&quot;</PRE>
</TD></TR></TABLE>
</P>

<P>As you can see, using this technique reduces the amount of code that you have to write. However, for each recordset that uses an implicit connection, a new connection will be created on the data source. In most cases, these additional connections use valuable resources. It may be more efficient to create a single Connection object and open the required recordsets from that connection. You can create multiple recordsets from one connection without using additional connection resources.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Using implicit connections can cause scalability problems if you plan to move your Visual Basic application from Microsoft Access to Microsoft SQL Server. Consider using explicit Connection objects when accessing a data source.
</blockquote></div></p>

<A NAME="413"><H3>Accessing Records in a Recordset</H3></A>

<P>Once a recordset has been created, you can access the fields of each record in one of the following ways:</P>

<UL>
<p><li>Reference the name of the field</li></p>

 <P>If you know the name of the field you want to access, you can use the following syntax to access the current value of the field:</P>

  <P><I>RecordsetObject</I>!FieldName</P>

<p><li>Use the Fields collection</li></p>

 <P>If you do not know the name of the field, or you do not want to manually reference the field name, you can use the Recordset object's Fields collection. Use the following syntax to access the value of a field using the Fields collection:</P>

  <P><I>recordsetobject</I>.Fields(0)</P>
</UL>

<P>In the following examples, the CustomerName field is displayed in the Immediate window:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Debug.Print rsCustomer!CustomerName</PRE>
</TD></TR></TABLE>
</P>

<P>  -or-</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Debug.Print rsCustomer.Fields(0)</PRE>
</TD></TR></TABLE>
</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
This assumes the CustomerName field is the first field in the collection.
</blockquote></div></p>

<A NAME="414"><H2>Retrieving Records with a Command Object</H2></A>

<P>In the previous example, records were returned based on an SQL string. Often, the records that will be returned result from a stored query in a Microsoft Access database. You must use a Command object to call a stored query. As with the Connection and Recordset objects, you must declare and then instantiate a Command object variable before using it in code.</P>

<P>Using the Command object's CommandText and CommandType properties, you can associate a stored query with the object variable. The CommandText property must be set to the name of the stored query. In the event the name contains spaces, you must enclose the entire name is square brackets. Stored queries in a Microsoft Access database are not the same as a stored procedure in a Microsoft SQL Server database. Therefore, the CommandType property must be set to the adCmdUnknown constant.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
This course focuses on building desktop applications using a local Microsoft Access database.
</blockquote></div></p>

<P>In order to pass data to the query, you must use the Parameters collection. Each parameter needs to be added to the collection using the Append and CreateParameter methods. The Append method uses the following syntax:</P>

<P><I>CommandObject</I>.Parameters.Append <I>object</I></P>

<P>The object argument uses the CreateParameter method. The CreateParameter method uses the following syntax:</P>

<P><I>command</I>.CreateParameter (<I>Name</I>, <I>Type</I>, <I>Direction</I>, <I>Size</I>, <I>Value</I>)</P>

<P>The following table describes the arguments used by the CreateParameter method:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Argument</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">Name</TD>
<TD VALIGN="TOP">A string representing the name of the Parameter object. You must use the same name as the parameter stored in the Microsoft Access database.</TD></TR>
<TR>
<TD VALIGN="TOP">Type</TD>
<TD VALIGN="TOP">A long value specifying the data type of the Parameter object. You must use the same data type as the parameter in the stored query.</TD></TR>
<TR>
<TD VALIGN="TOP">Direction</TD>
<TD VALIGN="TOP">A long value specifying the type of Parameter object. Parameters can send data to a query, or they can return data from a query. Microsoft Access stored queries only support input data.</TD></TR>
<TR>
<TD VALIGN="TOP">Size</TD>
<TD VALIGN="TOP">A long value specifying the maximum length for the parameter value in characters or bytes. This is required when using string parameters.</TD></TR>
<TR>
<TD VALIGN="TOP">Value</TD>
<TD VALIGN="TOP">A variant specifying the value for the Parameter object.</TD></TR></TABLE></P>

<P>The following example creates an input parameter on the comStudent object:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>comStudent.Parameters.Append comStudent.CreateParameter(&quot;StudentID&quot;, _
   adInteger, adParamInput)</PRE>
</TD></TR></TABLE>
</P>

<P>When calling a Microsoft Access stored query, it is important that you use the same names and data types as the parameters in the database. If you use incorrect names or data types, a run-time error will occur.</P>

<P>The following example creates a Command object and passes two dates to the query:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim cnNorthwind As Connection
Dim comSalesByYear As Command
Dim rsSales As Recordset

'Instantiate the variables
Set cnUniversity = New Connection
Set comEnrollments = New Command

'Open the database connection
cnUniversity.ConnectionString = "Provider=Microsoft.Jet.OLEDB.3.51;" &amp; _
     "Data Source=C:\Databases\University.mdb"
cnNorthwind.Open

'Set up the Command object
comEnrollments.CommandType = adCmdUnknown
comEnrollments.CommandText = "[Student Enrollments]"

'Create the parameters
comEnrollments.Parameters.Append _
     comEnrollments.CreateParameter("BeginningDate", adDate, _
           adParamInput)
comEnrollments.Parameters.Append _
     comEnrollments.CreateParameter("EndingDate", adDate, adParamInput)

'Set the parameter values
comEnrollments.Parameters("BeginningDate").Value = "10/1/97"
comEnrollments.Parameters("EndingDate").Value = "12/1/97"

'Associate the object with an active connection
comEnrollments.ActiveConnection = cnUniversity

'Request the recordset
Set rsStudents = comEnrollments.Execute</PRE>
</TD></TR></TABLE>
</P>

<p>
<img src="images/practice.gif" width=67 height=55 border=0>
</p>

<A NAME="415"><H2>Practice: Returning Records from a Database</H2></A>

<P>In this practice, you will return records from the sample Northwind database that comes with Visual Basic. The following code assumes the nwind.mdb file resides in the C:\Program Files\Microsoft Visual Studio\VB98 folder. You may have to change this path if you installed Visual Basic to a different folder on your computer.</P>

<P><LI><B>To connect to the Northwind database</B></LI></P>

<OL>
<P><LI>Start Visual Basic and create a new <B>Standard EXE</B> project.</LI></P>

<P><LI>Rename <B>Form1</B> to <B>frmMain</B>.</LI></P>

<P><LI>On the <B>Project</B> menu, click <B>References</B>.</LI></P>

<P><LI>Click <B>Microsoft ActiveX Data Objects 2.0 Librar</B>, then click <B>OK</B>.</LI></P>

<P><LI>Create two module-level variables in <B>frmMain</B>: </LI></P>


<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> Dim cnNorthwind as Connection
 Dim rsCustomer as Recordset</PRE>
</TD></TR></TABLE>
</P>

<P><LI>Add a command button called <B>cmdConnect</B> to <B>frmMain</B>.</LI></P>

<P><LI>In the Click event for <B>cmdConnect</B>, enter the following code to connect to the Northwind database and return all records in the <B>Customer</B> table:</LI></P>

 <P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim cnNorthwind As connection
Dim rsCustomer As Recordset
Set cnNorthwind = New connection
Set rsCustomer = New Recordset
cnNorthwind.ConnectionString = "Provider=Microsoft.Jet.OLEDB.3.51;" &amp; _
    "Data Source =" &amp; _
    "C:\Program Files\Microsoft Visual Studio\Vb98\nwind.mdb". +
    cnNorthwind.Open

rsCustomer.Open &quot;Select * from customers&quot;, cnNorthwind

'Display the first customer ID to the debug window
Debug.Print rsCustomer!CustomerID</PRE>
</TD></TR></TABLE>
</P>

<P><LI>Save your application to the \Practice\Ch08 folder and test your work.</LI></P>
</OL>

<A NAME="416"><H2>Lesson Summary</H2></A>

<P>The ADO object model provides the Recordset object for returning and managing records in your application. You can create recordsets from an existing Connection object or as a stand-alone object. However, if you do not specify an active connection, the recordset creates an implicit connection for you. This can use unnecessary server resources and is not recommended.</P>

<P>In addition to the Recordset object, you can also use a Command object to interact with data. The Command object lets you access stored queries in a Microsoft Access database. When calling a stored query, you may have to pass user-supplied data to the query, such as returning all customers that live in a certain state. To pass this data to a query, you need to use the Parameters collection of the Command object.</P>

</BODY>
</HTML>





