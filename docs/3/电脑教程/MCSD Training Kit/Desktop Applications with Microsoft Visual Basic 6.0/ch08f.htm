<HTML>
<HEAD>
<TITLE>Lesson 5: Modifying Data</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08e.htm", "ch08g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="426"><H1>Lesson 5: Modifying Data</H1></A>

<P>When developing solutions that access a database, you usually need to include functionality to modify the records as well as present them to the user. When using ADO, you can programmatically control the Recordset object to edit, add, and delete records. However, to include this functionality in a multi-user environment, you need to implement a locking scheme.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Implement locking when opening a recordset.</li></p>

<p><li>Edit records in a recordset.</li></p>

<p><li>Add a new record to a recordset.</li></p>

<p><li>Delete the current record in a recordset.</li></p>

</UL>
<b>Estimated lesson time: 15 minutes</b>
</blockquote></div></P>

<A NAME="427"><H2>Locking a Recordset</H2></A>

<P>In order to allow the user to edit a record, you must implement locking when you first open the recordset. By default, all ADO recordsets are read-only. You must select a locking scheme before ADO will save user changes back to the data source. The following table lists the options for locking:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Locking Option</TH>
<TH>Description</TH></TR>
<TR>
<TD VALIGN="TOP">adLockReadOnly</TD>
<TD VALIGN="TOP">(Default) Read-only&#8212;you cannot alter the data.</TD></TR>
<TR>
<TD VALIGN="TOP">adLockPessimistic</TD>
<TD VALIGN="TOP">Pessimistic locking, record by record&#8212;the provider does what is necessary to ensure successful editing of the records, usually by locking records at the data source immediately upon editing.</TD></TR>
<TR>
<TD VALIGN="TOP">adLockOptimistic</TD>
<TD VALIGN="TOP">Optimistic locking, record by record&#8212;the provider uses optimistic locking, locking records only when you call the Update method.</TD></TR>
<TR>
<TD VALIGN="TOP">adLockBatchOptimistic</TD>
<TD VALIGN="TOP">Optimistic batch updates&#8212;required for batch update mode, as opposed to immediate update mode.</TD></TR></TABLE></P>

<P>In the following example, a recordset is opened using Pessimistic locking:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer.Open &quot;Select * from Customers&quot;, cnNorthwind, adOpenDynamic, _
  adLockPessimistic</PRE>
</TD></TR></TABLE>
</P>

<A NAME="428"><H2>Editing a Record</H2></A>

<P>If the recordset has been opened for editing, you can allow the user to make changes and save the results back to the data source. In order to edit and post changes to a record, follow these steps:</P>

<OL>
<P><LI>Navigate to the appropriate record.</LI></P>

<P><LI>Change the field values (either programmatically or using bound controls).</LI></P>

<P><LI>Use the Update method to post the changes.</LI></P></OL>

<P>Records in a recordset are always in an edit state. You do not need to call a method to start the edit process. The following example changes the current record and then saves it to the data source:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer!State = &quot;CA&quot;
rsCustomer.Update</PRE>
</TD></TR></TABLE>
</P>

<A NAME="429"><H3>Canceling an Edit</H3></A>

<P>If you want to allow the user to cancel changes before they are posted, use the CancelUpdate method. When you call the CancelUpdate method, all the fields of the current record are restored to their initial values (the values they had when the recordset was first opened).</P>

<A NAME="430"><H2>Adding a New Record</H2></A>

<P>If you open a recordset and use a locking scheme that allows records to be edited, you can also add new records to that recordset. In order to add a new record, you must first call the AddNew method. Unlike an edit, you must tell the Recordset object to start the add process. Once the appropriate data has been entered in each field, use the Update method to save the new record to the data source. Any new records that have been added to the current recordset will appear at the end of the recordset. Use the Refresh method to re-build the recordset to include the new records in the appropriate order.</P>

<P>The following example adds a new customer to the rsCustomer recordset and then saves it to the data source:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer.AddNew
rsCustomer!Name = &quot;Alpine Ski Center&quot;
rsCustomer!State = &quot;AZ&quot;
rsCustomer.Update</PRE>
</TD></TR></TABLE>
</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
To cancel the creation of a new record, use the CancelUpdate method.
</blockquote></div></p>

<A NAME="431"><H2>Deleting a Record</H2></A>

<P>When using a recordset to delete records, only one record can be deleted at a time. In addition, only the current record is affected when the Delete method is called. Consider using the SQL DELETE command to delete multiple records in a data source.</P>

<P>The following example deletes the current record in the rsCustomer recordset:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>rsCustomer.Delete</PRE>
</TD></TR></TABLE>
</P>

<P>Unlike editing or adding a new record, you do not have to use the Update method to save the results to the data source. Therefore, be sure to verify with the user before calling the Delete method.</P>

<A NAME="432"><H2>Lesson Summary</H2></A>

<P>Be default, a recordset object is set to read-only. Before your application can edit, add, or delete records, you must open the recordset using a different locking scheme. The choices for locking are:</P>
<UL>
<p><li>adLockReadOnly</li></p>

<p><li>adLockPessimistic</li></p>

<p><li>adLockOptimistic</li></p>

<p><li>adLockBatchOptimistic</li></p>
</UL>

<P>After you create a recordset that can be edited, you can use the AddNew, Update, or Delete methods to modify the records and save the changes to the data source.</P>

</BODY>
</HTML>





