<HTML>
<HEAD>
<TITLE>Lab: Adding Field and Form Level Validation</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03e.htm", "ch03g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="203"><H1>Lab: Adding Field and Form Level Validation</H1></A>

<P>In this lab, you will add form and field level validation to the Chateau St. Mark hotel reservation system. You will modify control properties and add code to control events to validate data entered into the form. In subsequent labs, you will continue to add to the application and explore each of the tasks you try here in more detail. You can continue to work with the files you created in Lab 2, or use the files provided in the \Labs\Lab03\Partial folder. The solution code is in the \Labs\Lab03\Solution folder. </P>

<p>
<img src="images/video.gif" width=78 height=54 border=0>
</p>

<P>To see a demonstration of the solution, run the Lab03.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>


<b>Estimated lesson time: 45 minutes</b>


<A NAME="204"><H2>Exercise 1: Controlling User Navigation</H2></A>

<P>In this exercise, you will create two procedures that control user navigation by enabling and disabling the form's controls. These procedures will be called from form and control events.</P>

<P><LI><B>To open the hotel reservation application project</B></LI></P>

<UL>

<p><li>Open either the reservation application project that you have been working on or the reservation application project located in the \Labs\Lab03\Partial folder.</li></p>

</UL>

<P><LI><B>To create sub procedures that enable and disable controls</B></LI></P>

<OL>

<P><LI>Open <B>frmReservation's</B> code module. On the Visual Basic <B>Tools</B> menu, click <B>Add Procedure...</B>.</LI></P>

<P><LI>Using the <B>Add</B> <B>Procedure</B> dialog box, create two private Sub procedures named <B>DisableControls</B> and <B>EnableControls</B>.</LI></P>



<P>The following two procedures are displayed in the form's module:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub DisableControls()

End Sub

Private Sub EnableControls()

End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="3">The <B>DisableControls</B> procedures code will loop through the controls collection using the For Each... statement. It will disable all but the Menu and Label controls, and set the MaskEdBox and the Textbox controls' <B>BackColor</B> property to <B>grey</B>. Add the following code to the <B>DisableControls</B> procedure:</LI></P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub DisableControls()
     Dim ctl As Control
     For Each ctl In Controls
          'Leave Labels and Menus enabled
          If TypeOf ctl Is Menu Or TypeOf ctl Is Label Then
               ctl.Enabled = True
          Else
               ctl.Enabled = False
          End If
          If TypeOf ctl Is TextBox Or _
               TypeOf ctl Is MaskEdBox Then _
               ctl.BackColor = &quot;&amp;H8000000F&quot; 'Set the back color to grey
          Next ctl
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<P><LI VALUE="4">At the end of the <B>DisableControls</B> procedure, add code that will also disable the <B>Check-In</B>, <B>Check-Out</B> and the <B>Cancel Reservation</B> menu items. The finished code should look like the following:</LI></P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub DisableControls()
     Dim ctl As Control 'holds the active control object
     For Each ctl In Controls
          If TypeOf ctl Is Menu Or TypeOf ctl Is Label Then
               'Leave Labels and Menus enabled
               ctl.Enabled = True
          Else
               ctl.Enabled = False
          End If
          If TypeOf ctl Is TextBox Or _
               TypeOf ctl Is MaskEdBox Then _
               ctl.BackColor = &quot;&amp;H8000000F&quot; 'Set the back color to grey
     Next ctl

     'Disable the menu items
     mnuGuestReservationCheckIn.Enabled = False
     mnuGuestReservationCheckout.Enabled = False
     mnuGuestReservationCancel.Enabled = False
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<P><LI VALUE="5">The <B>EnableControls</B> procedure will enable all of the controls, including the menu items, and returns the TextBox and MaskEdBox controls' <B>BackColor</B> to <B>white</B>. The finished code should look like the following:</LI></P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub EnableControls()
     Dim ctl As Control
     For Each ctl In Controls
          ctl.Enabled = True
          If TypeOf ctl Is TextBox Or TypeOf ctl Is MaskEdBox _
               Then ctl.BackColor = &quot;&amp;H80000005&quot;
     Next ctl
     mnuGuestReservationCheckIn.Enabled = True
     mnuGuestReservationCheckout.Enabled = True
     mnuGuestReservationCancel.Enabled = True
End Sub
</PRE>
</TD></TR></TABLE>
</P>
</ol>
  
<P><LI><B>To call the DisableControls and EnableControls procedures</B></LI></P>

<OL>

<P><LI>Call the <B>DisableControls</B> procedure from the <B>Form_Load</B> event and the <B>cmdDone_Click</B> event.</LI></P>

<P><LI>From the <B>mnuGuestReservationAdd_Click</B> event, call the <B>EnableControls</B> procedure and set the focus to the <B>txtFirstName</B> TextBox control. The finished code should look like the following:</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub mnuGuestReservationAdd_Click()
     EnableControls
     txtFirstName.SetFocus
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="3">Save and test the application.</LI></P>

</OL>


<A NAME="205"><H2>Exercise 2: Field-Level Validation</H2></A>

<P>In this exercise, you will use the IsNumeric function and the KeyPress event to validate user input on the reservation form.</P>

<P><LI><B>Validating data entry on the reservation form</B></LI></P>

<OL>

<P><LI>In the KeyPress event for the <B>First Name</B>, <B>Last Name</B> and <B>Address </B>text boxes, add code that converts the text to uppercase. For example:</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub txtFirstName_KeyPress(KeyAscii As Integer)
     KeyAscii = Asc(UCase(Chr(KeyAscii)))
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="2">Use the KeyPress event of the <B>Phone Number</B> text box to accept only numbers, parenthesis ( ), hyphens (-) and the Backspace characters. If incorrect values are entered, beep and then display a message to the <B>addinfo</B> panel of the StatusBar control. The finished code should look like the following:</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub txtPhone_KeyPress(KeyAscii As Integer)
     'exit sub for allowable characters
     If Chr(KeyAscii) = vbBack _
          Or Chr(KeyAscii) = &quot;-&quot; _
          Or Chr(KeyAscii) = &quot;(&quot; _
          Or Chr(KeyAscii) = &quot;)&quot; Then Exit Sub
     'check for alpha characters
     If Not IsNumeric(Chr(KeyAscii)) Then
          Beep
          KeyAscii = 0
          staAdditionalInfo.Panels(&quot;addinfo&quot;).Text = _
               &quot;Phone number must be numeric.&quot;
     End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="3">On the <B>txtNumPeople </B>and <B>txtNumDays</B> text boxes, set the MaxLength property to <B>3</B>.</LI></P>

<P>The MaxLength property specifies the maximum number of characters that can be entered. This value limits the users to a three digit number.</P>

<P><LI>Using the KeyPress events of the <B>txtNumPeople</B>, <B>txtNumDays</B>, and <B>txtRate</B> text boxes, verify that a numeric value is typed. Be sure to allow the user to press the Backspace key. This example shows the completed <B>txtNumPeople_KeyPress</B> event.</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub txtNumPeople_KeyPress(KeyAscii As Integer)
     'Allow for the use of the Backspace character
     If Chr(KeyAscii) = vbBack Then Exit Sub
     If Not IsNumeric(Chr(KeyAscii)) Then
          Beep
          KeyAscii = 0 ' Cancel the keystroke
          staAdditionalInfo.Panels(&quot;addinfo&quot;).Text = _
               &quot;Values must be numeric.&quot;
     End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>

<P>Add similar code to the <B>txtNumDays_KeyPress </B>and<B> txtRate_KeyPress</B> events.</P>



<P><LI VALUE="5">Save and test the application.</LI></P>

</OL>


<A NAME="206"><H2>Exercise 3: Using the Validate and LostFocus Events</H2></A>

<P>In this exercise, you will use the Validate and LostFocus events to validate the data entered into the reservation form.</P>

<P><LI><B>To use the Validate and LostFocus events</B></LI></P>

<OL>

<P><LI>In the <B>mskCheckIn_Validate</B> event, add code to verify that a valid date has been entered into the control. For example:</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub mskCheckIn_Validate(Cancel As Boolean)
     If Not IsDate(mskCheckIn.Text) Then
          staAdditionalInfo.Panels(&quot;addinfo&quot;).Text = _
               &quot;Not a valid date format (ex. '07-23-2000')&quot;
          Cancel = True
     End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="2">In the <B>txtNumDays_LostFocus</B> event, add the following code to calculate and format the guest's check-out date:</LI></P>


<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub txtNumDays_LostFocus()
     If mskCheckIn.ClipText &lt;&gt; &quot;&quot; And txtNumDays.Text &lt;&gt; &quot;&quot; Then
          txtCheckOut.Text = Format(DateAdd(&quot;d&quot;, _
               Val(txtNumDays.Text), mskCheckIn.Text), &quot;mm-dd-yyyy&quot;)
     End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="3">Set the Locked property of the <B>Check-out date</B> text box to <B>True</B>.</LI></P>

<P><LI>Save and test the application.</LI></P>

</OL>


<A NAME="207"><H2>Exercise 4: Form-Level Validation</H2></A>

<P>In this exercise, you will check that the required values were entered into the form before letting the user continue.</P>

<P><LI><B>To implement form level checking</B></LI></P>

<OL>

<P><LI>Add code to the <B>Done</B> button so that it loops through all of the controls and displays a message box if the required fields do not have values. The following is the completed code for the <B>cmdDone_Click</B> event:</LI></P>



<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub cmdDone_Click()
     Dim ctl As Control

     For Each ctl In Controls
          If TypeOf ctl Is TextBox Then
               If ctl.Text = &quot;&quot; Then
                    MsgBox &quot;All fields must be entered.&quot;
                    Exit Sub
               End If
          ElseIf TypeOf ctl Is MaskEdBox Then
               If ctl.ClipText = &quot;&quot; Then
                    MsgBox &quot;All fields must be entered.&quot;
                    Exit Sub
               End If
          ElseIf TypeOf ctl Is OptionButton Then
               If ctl.Value = &quot;&quot; Then
                    MsgBox &quot;Payment type is required.&quot;
                    Exit Sub
               End If
          End If
     Next ctl
     DisableControls
End Sub
</PRE>
</TD></TR></TABLE>
</P>



<P><LI VALUE="2">Save and test your application.</LI></P>

</OL>


</BODY>
</HTML>





