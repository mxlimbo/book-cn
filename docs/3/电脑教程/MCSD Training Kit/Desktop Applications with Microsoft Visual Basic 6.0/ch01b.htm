<HTML>
<HEAD>
<TITLE>Lesson 1: Using The Microsoft Solutions Framework</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01a.htm", "ch01c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="34"><H1>Lesson 1: Using the Microsoft Solutions Framework</H1></A>

<P>The Microsoft Solutions Framework (MSF) is a development framework produced by Microsoft Consulting Services (MCS). It is based on Microsoft's internal development methodology. MSF also includes the practices of hundreds of MCS corporate clients. Consider applying some or all of these concepts as you plan a multi-developer project.</P>

<P>This lesson explains the features of MSF and how they relate to planning Visual Basic applications.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the elements of the Microsoft Solutions Framework.</li></p>

<p><li>Explain the role of the Microsoft Solutions Framework in the design and development process.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="35"><H2>Overview of Microsoft Solutions Framework</H2></A>

<P>MSF is a suite of models, principles, and guides for building and deploying software. It is a collection of best practices used by the Microsoft product groups and Microsoft Consulting Services.</P>

<P>MSF helps organizations merge business and technology objectives, reduce the life cycle costs of using new technology, and successfully deploy Microsoft technologies to streamline business processes. MSF exposes critical risks, important planning assumptions, and key interdependencies that are required to successfully plan, build, and manage a technology infrastructure or a business solution. It contains tangible resources, guides, and practices.</P>

<P>By utilizing experience from Microsoft's software development endeavors, MSF helps you to:</P>

<ul>
<p><li>Speed up development cycles.</li></p>

<p><li>Lower the cost of owning technology.</li></p>

<p><li>Improve execution of planned events.</li></p>

<p><li>Improve reaction to unplanned events.</li></p>

<p><li>Create scalable, reliable technology solutions.</li></p>

<p><li>Improve core information technology competencies.</li></p>
</ul>

<A NAME="36"><H2>Microsoft Solutions Framework Models</H2></A>

<P>MSF implements models that contribute to the software development cycle. MSF clarifies the relationship between a company's business objectives and the technology solutions to meet those objectives. As a whole, the MSF models interrelate. For example, the Team Model provides accountability for project tasks; use the Process Model when decisions need to be made.</P>

<P>Each model and its purpose is listed in the following table:</P>

<p><TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Model</th>
<Th>Description</th></TR>
<TR>
<TD VALIGN="TOP">Team Model
</TD>
<TD VALIGN="TOP">Defines a team of peers working in interdependent and cooperating roles.
</TD></TR>
<TR>
<TD VALIGN="TOP">Process Model
</TD>
<TD VALIGN="TOP">Helps your team establish guidelines for planning and controlling results-oriented projects based on project scope, the resources available, and the schedule. 
</TD></TR>
<TR>
<TD VALIGN="TOP">Application Model
</TD>
<TD VALIGN="TOP">Helps your team design distributed applications that take optimum advantage of component reuse.
</TD></TR>
<TR>
<TD VALIGN="TOP">Enterprise Architecture Model
</TD>
<TD VALIGN="TOP">Supports decisions relating to the information, applications, and technology needed to support a business. It is the key to successful long-term use of new technologies.
</TD></TR>
<TR>
<TD VALIGN="TOP">Solutions Design Model
</TD>
<TD VALIGN="TOP">Shows how applications must be designed from a user and business perspective (as opposed to the ideal streamlined development proposed in the Application Model).
</TD></TR>
<TR>
<TD VALIGN="TOP">Infrastructure Model
</TD>
<TD VALIGN="TOP">Establishes MSF principles for managing the people, processes, and technology that support networks in a large enterprise.
</TD></TR>
<TR>
<TD VALIGN="TOP">Total Cost of Ownership Model
</TD>
<TD VALIGN="TOP">Supports the process of assessing, improving, and managing information technology costs and maximizing value.
</TD></TR></TABLE></p>

<A NAME="37"><H3>The Solutions Design Model</H3></A>

<P>In this course, you will focus on key areas of the Solutions Design Model and the design phases involved in the model. Because software development is a creative and complex process, you can apply MSF's Solution Design Model to software development.</P>

<P>The Solutions Design Model provides a step-by-step strategy for designing business-oriented solutions driven by a specific business need. This model ties together the Application, Team, and Process Models, and lets the information system staff focus resources where they can produce the most value.</P>

<P>This model ties together solutions development and business objectives in two key ways: </P>

<ul>
<p><li>Solutions are driven from the context of the business, which is an essential consideration when developing workflow applications.</li></p>

<p><li>End users are brought in to address usability early on to minimize help desk incidents. Also, information systems professionals are brought in to attempt to solve end user concerns without changing the infrastructure.</li></p>
</ul>

<P>The Application, Team, and Process Models help planners identify all business and technical requirements of an application up front, so that resources can be assigned more effectively. Together, these models help organizations recognize the similarities between the process of designing software and the complex process of designing a building. This is why Microsoft gives the title Architect to experts in software design.</P>

<P>You can think of these three perspectives on design&#8212;the Application, Team, and Process Models&#8212;as convenient points along a continuum that help you apply a particular set of techniques and tools, and address the needs of a particular audience. These perspectives describe the design process in a more focused way. At any given point, you can revisit portions of your design. Design is a continuing process of incremental refinement.</P>

<A NAME="38"><H2>Design Phases of the Solution Design Model</H2></A>

<P>The information-system design process is evolutionary. A good analogy of software design is the design of a building. A building design has three phases: the first is an architect's sketches, the second is architectural plans, and the third is the addition of detail to the plans to make adjustments for the physical environment of the building. This last phase also includes the technology and materials available to construct the building. The following describes this analogy to software design:</P>

<ul>
<p><li>Conceptual design</li></p>

<P>The architect's initial sketches provide a view of the building for the client and may contain elements such as floor plans, cutaways, and other figures. This view corresponds to the conceptual design for a software development project, which starts with understanding what the user really needs to do, and then expands to creating a clear set of objectives that capture this understanding.</P>

<p><li>Logical design</li></p>

<P>The second phase in the architectural process combines the client's view with the architect's view and knowledge. The architect uses detailed drawings to communicate with contractors and other parties involved in the construction of the building. This phase corresponds to the logical design phase in a software development process, in which you lay out the structure of the solution and provide a basis for physical design. As a developer, logical design is important to creating the appropriate solution in the physical design phase. The logical design phase is covered in detail in Lesson 2.</P>

<p><li>Physical design</li></p>

<P>The architect draws up the plans for the builder. These plans include details for construction activities, and even finer details for individual subcontractors. This phase corresponds to an application designer's physical design in the software development process.</P>
</ul>

<A NAME="39"><H3>Goals of Conceptual Design</H3></A>

<P>Conceptual design facilitates complete and accurate requirements by involving business sponsors, users, managers, and constituencies. The goal of conceptual design is to understand what the users do and to identify business needs. This process includes:</P>

<ul>
<p><li>Determining the problem that you are trying to solve.</li></p>

<p><li>Determining the needs, and technological capabilities, of the business and users.</li></p>

<p><li>Describing the desired, future state of the work.</li></p>

<p><li>Deciding if there is value in upgrading an existing solution.</li></p>
</ul>

<P>In conceptual design, team members present scenarios to enhance understanding and express the problems and visions for the future state of the solution. The purpose of scenarios is to think of the solution in the business environment, and answer the who, what, when, why, and how questions.</P>

<P>Much of conceptual design is an analysis activity that leads to determining which processes and activities will go into the new system, how the needs of those processes and activities will be met, and what the user's experience will be of those activities.</P>

<A NAME="40"><H3>Goals of Logical Design</H3></A>

<P>Logical design activities are integrated directly with the resulting scenarios from conceptual design, and provide the basis for Physical design. Logical design describes the organization of the elements that make up the solution and how they interact. You assemble the elements for optimum efficiency, performance, and reuse. In Lesson 2, you will learn more about using logical design when planning an application.</P>

<A NAME="41"><H3>Goals of Physical Design</H3></A>

<P>Physical design describes a solution in a way that allows developers to construct the solution. Physical design communicates the necessary details of the solution, including organization, structure, technology, and relationships between elements that you will use to create the solution.</P>

<A NAME="42"><H2>Your Role as a Developer</H2></A>

<P>Business problems are generally identified and direction established at a high organizational level&#8212;for example, strategic management. As a software developer, your role in conceptual design is usually limited at best. For this reason, the conceptual design phase is not discussed further in this course. </P>

<P>Developers are involved not only in the physical design of a solution, which involves creating flow charts, pseudo-code, and object models, but also in logical design. Because logical design provides a basis for physical design, it is important to include developers. Work on the logical design phase will overlap with work on the physical design in an iterative process. This allows development team members to incrementally optimize a system and improve its operation.</P>

<P>The logical design process must promote a greater understanding of the solution by the project team. This is the primary consideration when determining the level of detail that should be included in the design. If too little detail is included, the team runs the risk of missing relevant interactions. If too much detail is included, the design may become overly complicated.</P>

<A NAME="43"><H2>Logical Design Tasks</H2></A>

<P>A technically correct project is not effective if it does not address the stated problems. Conceptual design is all about solving the right problem; you determine the solution based on the description of the business and the users. In logical design, you determine a logical organization for the solution. This provides a coherent view of the entire project. Logical design should encompass the following characteristics:</P>

<ul>
<p><li>Technological independence</li></p>

<P>Logical design should be as independent of physical implementations as possible. Nevertheless, certain physical constraints or opportunities should be considered in logical design in order to validate whether the design can be implemented. Purely technology-dependent decisions should be made later, in the physical design phase.</P>

<p><li>Reduced complexity</li></p>

<P>The primary purpose of logical design is to manage complexity. Complexity leads to incomplete understanding, which leads to confusion, which leads to poorly specified and inadequate designs.The key to managing complexity is organizing the solution and suppressing unnecessary details.</P>

<p><li>Focus on structure</li></p>

<P>The goal in logical design is to lay out the elements in the system, describe how they are connected, and define what can be done with each of them. Logical design describes how the system accomodates each scenario created in conceptual design. Every feature and activity described in each scenario should be addressed by at least one element in the logical design.</P>
</ul>

<A NAME="44"><H3>The Logical Design Process</H3></A>

<P>You start the logical design process by defining the major modules of the system. A module represents some collection of processes that work together to accomplish a task. You must specify each element, the functions of each of these elements, and how each element interacts with other elements. The output includes:</P>

<ul>
<p><li>Core functional areas and elements that are of concern.</li></p>

<p><li>Activities and functions of those areas.</li></p>

<p><li>Connections between areas.</li></p>
</ul>

<P>An architect's drawings contain detailed views of all rooms in a house, how they are laid out, and how they are connected. The architect determines the physical layout by the function and proximity of the activities that occur, which achieves ease-of-use and efficiency. Likewise, in logical design, designers need to determine the functional areas, the services and connections from one module to the next.</P>

<P>As illustrated in Figure 1.1, the house has a subset consisting of three rooms: Kitchen, Dining Room, and Pantry. For each room and any connections to other rooms, you define what functions and activities will take place. On a larger scale, a system could be a hotel. The hotel consists of areas such as the front desk, housekeeping, food services, reservations, and security. Each of these areas can probably be broken down into individual subsystems and applications of the overall hotel system. For example, in this course you will create a hotel reservation system by completing the lab in each chapter. This hotel reservation system could be a subsystem within a hotel system.</P>

<P>
<A HREF="javascript:fullSize('F01xx01x.htm')"> <img src="images/F01xx01.JPG" width=404 height=294 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 1.1</B> <i>Functional modules example</i>  <!--/caption-->
</P>


<A NAME="45"><H2>Lesson Summary</H2></A>

<P>The Microsoft Solutions Framework (MSF) is a suite of models, principles, and guides for building and deploying software. MSF is a collection of best practices used by the Microsoft product groups and Microsoft Consulting Services.</P>

<P>The MSF implements the following models that contribute to the software development cycle:</P>

<ul>
<p><li>Team Model</li></p>

<P>The Team Model defines a team of peers working in interdependent and cooperating roles.</P>
<p><li>Process Model</li></p>

<P>The Process Model helps your team establish guidelines for planning and controlling results-oriented projects based on their scope, the resources available, and the schedule.</P>
<p><li>Application Model</li></p>

<P>The Application Model helps your team design distributed applications that take optimum advantage of component reuse. Together, the Team and Process models form the core of the MSF discipline as it relates to development and infrastructure projects.</P>
<p><li>Enterprise Architecture Model</li></p>

<P>The key to successful long-term use of new technologies is the Enterprise Architecture Model. This model supports decisions relating to the information, applications, and technology needed to support a business.</P>
<p><li>Solutions Design Model</li></p>

<P>The Solutions Design Model shows how applications must be designed from a user and business perspective (as opposed to the ideal streamlined development proposed in the Application Model).</P>
<p><li>Infrastructure Model</li></p>

<P>To establish MSF principles for managing the people, processes, and technology that support networks in a large enterprise, use the Infrastructure Model.</P>
<p><li>Total Cost of Ownership Model</li></p>

<P>The Total Cost of Ownership Model is a process for assessing, improving, and managing information technology costs and maximizing value.</P>
</ul>

<P>In this course, you will focus on key areas of the Solutions Design Model and the design phases involved in the model. Because software development is a creative and complex process, you can apply MSF's Solution Design Model to software development. The Solution Design Model has three phases:</P>

<ol>
<p><li>Conceptual design</li></P>

<P>This phase gives you an understanding of what the user really needs to do, and creates a clear set of objectives that capture this understanding.</P>

<p><li>Logical design</li></P>

<P>In this phase, you lay out the structure of the solution, and provide a basis for physical design. As a developer, logical design is important for creating the appropriate solution in the physical design phase.</P>

<p><li>Physical design</li></P>

<P>The physical design represents the solution from the developer's perspective. It defines the solutions' components, services, and technologies.</P>
</ol>

<P>Sometimes developers participate only in the physical design of a solution. However, logical design should not be neglected; because it provides a basis for physical design, it plays an important role in software development. In logical design, you determine a logical organization for the solution. This provides a coherent view of the entire project. You start the logical design process by defining the major modules of the system. A module represents some collection of processes that work together to accomplish a task. You must specify each element, its responsibilities, and how it interacts with other elements.</P>

</BODY>
</HTML>





