<HTML>
<HEAD>
<TITLE>Lesson 2: Managing Forms</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02b.htm", "ch02d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="95"><H1>Lesson 2: Managing Forms</H1></A>

<P>Forms are the basic element of the user interface in a Visual Basic application. They provide a framework you can use throughout your application to give a consistent look and feel. Differences in user interface design and behavior from one application to another, or within one application, can result in increased training and support costs. In a corporate environment, enforcing a consistent user interface across all of your applications can help reduce those costs.</P>

<P>As your application becomes more complex, you will need to add additional forms to the project. Understanding the capabilities of forms can also aid in the development process of your program.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>State the role of forms in an application.</li></p>

<p><li>Explain how to add forms to a project and set up the startup form.</li></p>

<p><li>Explain the purpose of form events.</li></p>

<p><li>Explain the differences between the four form methods.</li></p>

<p><li>Explain the attributes of a forms collection.</li></p>

</UL>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div></P>

<A NAME="96"><H2>Adding a Form to a Project</H2></A>

<P>Forms serve as a window that you customize to design the interface of your application. When you create a new Standard EXE project, Visual Basic provides one default form. As your application becomes more complex, you will need to add additional forms. You can then add controls, graphics, and pictures to the form to create the look you want. Each form in your application has its own form designer window.</P>

<P><LI><B>To add a new form to the project</B></LI></P>

<OL>
<P><LI>On the Project menu, click Add Form.</LI></P>

<P>The <B>Add Form</B> dialog box appears.</P>

<P><LI>Click <B>Form</B>, and then click <B>Open</B>.</LI></P>

<P>A new form is added to the project and appears in the Visual Basic environment.</P>
</OL>

<A NAME="97"><H3>Setting the Startup Form</H3></A>

<P>Visual Basic uses the first form in a project as the default startup form. However, as you add new forms to a project, you may need to change this default. Visual Basic's Project Properties allow you to specify the startup form. The form name selected in Startup Object will be the form which first appears when the application is run.</P>

<P><LI><B>To change the startup form</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <I>ProjectName</I> Properties. </LI></P>

<P>The <B>Project Properties</B> dialog box appears.</P>
<P><LI>In the <B>Startup Object</B> drop-down list box, click the name of the form you want to set as the default startup form and click <B>OK</B>.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The Startup Object list may contain other options depending on the project type.
</blockquote></div></p>

<A NAME="98"><H2>Using Form Events</H2></A>

<P>After adding the necessary forms to your project and setting the startup form, you must determine which events to use. Forms are code modules that contain procedures called <I>events</I>. Events respond to system or user input by running whatever code you have placed in the particular event. One example is the Click event, which runs whenever the mouse is clicked on the form. When an event is called to execute its code, the request is often referred to as <I>firing </I>or<I> triggering </I>the<I> </I>event.</P>

<P>In some cases, Windows passes parameters to an event. For example, the MouseUp event receives four parameters from Windows, as in the following example:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub Form_MouseUp(Button As Integer, _
      Shift As Integer, X As Single, Y As Single)
	  
End Sub
</PRE>
</td></tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Sometimes you may want to call an event procedures from the application code itself. However, this is possible only if no parameters have to be passed.
</blockquote></div></p>

<P>You can use many types of form events. Depending on how you use a form, some of these events may not fire, while others will always fire. Form events are generally triggered in this order:</P>

<UL>
<p><li>Initialize</li></p>

<p><li>Load</li></p>

<p><li>Activate</li></p>

<p><li>Deactivate</li></p>

<p><li>QueryUnload</li></p>

<p><li>Unload</li></p>

<p><li>Terminate</li></p>
</UL>

<A NAME="99"><H3>Initialize</H3></A>

<P>The Initialize event is typically used to prepare an application for use. Variables are assigned to initial values, and controls may be moved or resized to accommodate initialization data.</P>

<P>The Initialize event occurs when an application creates an instance of a form, but before the form is loaded or displayed. However, the Initialize event will fire only once during the life of the application. In order to have the Initialize event fire again, you must exit and restart the application. Therefore, if you have code that needs to run more than once, you will want to use a different event. The following examples fire the Initialize event:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
frmMyForm.show
</PRE>
</td></tr></table></p>

<p>or</p>

<P><table cellpadding=5 width="95%"><TR><TD><PRE>
Load frmMyForm
</PRE></td></tr></table></p>


<P>The Initialize event also occurs when you set or return a property or apply a method that is defined in a form module. For example, suppose you've defined a general procedure named ListNames within the frmCustomer form. To run this procedure from another module, you must qualify it with the name of the form module. Qualifying the procedure with the name of the form creates an instance of the form, and the Initialize event occurs. The following example shows how to qualify a procedure with the name of the form in which it resides: </P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
FrmCustomer.ListNames
</PRE>
</td></tr></table></p>

<P>Form-level variables are variables that are recognized by all procedures within that form's module. Once these variables are initialized, they are maintained while the application is running, even if the form is unloaded. If the form is redisplayed, the Initialize event will not trigger again.</P>

<A NAME="100"><H3>Load</H3></A>

<P>The Load event is used to perform actions that need to occur prior to the form being displayed. It is also used to assign default values to the form and its controls. </P>

<P>The Load event occurs each time that a form is loaded into memory. The first time that a form is loaded, the Load event is fired after the Initialize event. A form's Load event can run multiple times during an application's life. Load fires when a form starts as the result of the Load statement, Show statement, or when a reference is made to an unloaded form's properties, methods, or controls. This example shows how to fill a ComboBox's default values during the Load event:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub Form_Load ()
    'Add items to list
    Combo1.AddItem &quot;Mozart&quot;
    Combo1.AddItem &quot;Beethoven&quot;
    Combo1.AddItem &quot;Rock 'n Roll&quot;
    Combo1.AddItem &quot;Reggae&quot;
    'Set default selection
    Combo1.ListIndex = 2
End Sub
</PRE>
</td></tr></table></p>

<A NAME="101"><H3>Activate/Deactivate</H3></A>

<P>When the user moves between two or more forms, you can use the Activate and Deactivate events to define the forms' behavior.</P>

<P>The Activate event fires when the form receives focus from another form within the same project. This event fires only when the form is visible. For example, a form loaded using the Load statement isn't visible unless you use the Show method, or set the form's Visible property to True. The Activate event fires before the GotFocus event.</P>

<P>Deactivate fires when the form loses focus to another form. This event fires after the LostFocus event.</P>

<P>Both the Activate and Deactivate events fire only when focus is changing within the same application. If you click a different application and then return to the Visual Basic program, neither event fires.</P>

<A NAME="102"><H3>QueryUnload</H3></A>

<P>The QueryUnload event is useful when you need to know how the user is closing the form.</P>

<P>The QueryUnload event occurs before the form's Unload event. QueryUnload has an additional feature compared to the Unload event. The UnloadMode argument tells you how the form was closed and allows the cancellation of the event. Some things that may cause the QueryUnload event are:</P>

<ul>
<p><li>The user chooses the Close command from the Control menu on the form.</li></p>

<p><li>The Unload statement is invoked from code.</li></p>

<p><li>The current Microsoft Windows operating environment session is ending.</li></p>

<p><li>The Microsoft Windows Task Manager is closing the application.</li></p>

<p><li>An MDI child form is closing because the MDI form is closing.</li></p>
</ul>

<P>To stop the form from unloading, set the Cancel argument to True. For example:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub Form_QueryUnload(Cancel As Integer, _
      UnloadMode As Integer)
     'How was the form closed
     If UnloadMode &lt;&gt; vbFormCode Then
           MsgBox &quot;Use the Exit button to close the form&quot;
           Cancel = True 'The form remains open
     End If
End Sub
</PRE>
</td></tr></table></p>

<A NAME="103"><H3>Unload</H3></A>

<P>The Unload event occurs before the Terminate event. Use the Unload event procedure to verify that the form should be unloaded or to specify actions that take place when unloading the form. You can also include form-level validation code needed for closing the form or saving data to a file. You can add the End statement to this event to verify that all forms have been unloaded before ending the application.</P>

<P>Setting Cancel to any nonzero value prevents the form from being removed, but doesn't stop other events, such as exiting from the Microsoft Windows operating environment. Use the QueryUnload event to stop Windows from shutting down.</P>

<A NAME="104"><H3>Terminate</H3></A>

<P>The Terminate fires when all references to an instance of a Form are removed from memory. To remove the form's variables from memory and free the form's system resources, set the form equal to Nothing. For example:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Set frmMyForm = Nothing
</PRE>
</td></tr></table></p>

<P>For all objects except classes, the Terminate event occurs after the Unload event. The Terminate event will not fire if the instance of the form or class is removed from memory because the application terminated abnormally. For example, if your system crashes before removing all existing instances of the class or form from memory, the Terminate event will not fire for that class or form.</P>

<A NAME="105"><H2>Using Form Methods</H2></A>

<P>A <I>method</I> performs an action on an object. Understanding the form methods that Visual Basic provides enables you to develop an application that efficiently utilizes computer resources, such as memory and processing speed. These are the methods that you can use to manage forms in Visual Basic:</P>

<ul>
<p><li>Load</li></p>

<p><li>Unload</li></p>

<p><li>Hide</li></p>

<p><li>Show</li></p>
</ul>

<P>It is essential that you take into account the systems on which your application will be running in the early stages of the design process. Computer limitations may effect the way in which forms are handled. For example, for slower computers, you might choose to load some of the forms during the start of your application. Once they are loaded into memory, you can use the Show and Hide methods to display the forms as needed.</P>

<A NAME="106"><H3>Load</H3></A>

<P>The<B> </B>Load statement initializes and loads the form into memory without displaying the form on the user's screen. Any reference to a form automatically loads the form's resources, if they are not already loaded. The following example loads the form MyForm into memory but does not display it:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Load frmMyForm
</PRE>
</td></tr></table></p>

<A NAME="107"><H3>Unload</H3></A>

<P>Unload removes a form from memory. Unloading a form may be necessary to free system resources, or to reset form properties to their original values. The Me statement can be used to refer to the current form in code. The following examples show two ways to unload the form MyForm from memory:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Unload frmMyForm
</PRE>
</td></tr></table></p>

<P>or</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Unload Me
</PRE>
</td></tr></table></p>

<A NAME="108"><H3>Hide</H3></A>

<P>Hide removes a form from the screen without removing it from memory. A hidden form's controls are not accessible to the user, but they are available to the running Visual Basic application. When a form is hidden, the user cannot interact with the application until all code in the event procedure that caused the form to be hidden has finished executing.</P>

<P>If the form is not already loaded into memory when the Hide method is called, the Hide method loads the form but doesn't display it. The following examples show two ways to hide the form MyForm from the users without losing the form values:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>frmMyForm.Hide</PRE>
</td></tr></table></p>

<P>or</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Me.Hide</PRE>
</td></tr></table></p>

<A NAME="109"><H3>Show</H3></A>

<P>The Show method includes an implied Load; this means that if the specified form is not already loaded when the Show method is called, Visual Basic automatically loads the form into memory and then displays it to the user. The Show method displays forms either modally or modelessly. A modal window or dialog box requires the user to take some action before the focus can change to another form. A modeless window or dialog box does not require user action before the focus can change to another form. The default argument for the Show method is modeless.</P>

<P>When Show displays a modeless form, subsequent code is executed as it is encountered. When Show displays a modal form, no subsequent code is executed until the form is hidden or unloaded. When Show displays a modal form, no input, such as a keyboard or a mouse click, can occur except to controls on the modal form; the program must hide or unload the modal form, usually in response to some user action, before input to another form can occur. Although other forms in your application are disabled when a modal form is displayed, other applications are not. Here is an example of how the Show method is used:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>frmResults.Show vbModal</PRE>
</td></tr></table></p>

<P>Figure 2.3 illustrates the actions of the four form events:</P>

<ul>
<p><li>The Show method loads the form and then displays it to the screen. </li></p>

<p><li>The Hide method removes the form from the screen and retains its values in memory. </li></p>

<p><li>The Load method initializes and loads the form into memory without displaying it. </li></p>

<p><li>The Unload method removes the form from the screen and from memory. </li></p>
</ul>

<P>
<A HREF="javascript:fullSize('F02xx03x.htm')"> <img src="images/F02xx03.JPG" width=404 height=246 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.3</B> <i>Using methods to manage forms</i>  <!--/caption-->
</P>


<A NAME="110"><H2>Using the Forms Collection</H2></A>

<P>In Visual Basic, a collection is a grouping of related objects. There are many types of collections in Visual Basic. A project can have a collection of forms and a form can have a collection of controls. Some collections are created automatically by Visual Basic, such as when you load forms or controls into your application. You can also create collections of your own using the Collection object.</P>

<P>Collections have an object called an enumerator that you can use to keep track of the items in a collection. Enumeration is the process of navigating through a collection. For example, you can enumerate the Forms collection to set or return the values of properties of individual forms in the collection.</P>

<P>The Forms collection has a single property: Count. The Forms collection is indexed beginning with zero. If you refer to a form by its index, the first form is Forms(0), the second form is Forms(1), and so on. You can refer to an individual Form object in the Forms collection either by referring to the form by name, or by referring to its index within the collection. You can then use the Name property of each individual form variable object to return the name of a form. You can also enumerate the Forms collection to set or return the values of properties of individual forms in the collection.</P>

<P>Sometimes you may need to loop through, sometimes called <I>enumerate</I>, all of the forms in your application. You can use the For&#8230;Next and the For Each&#8230;Next statements to enumerate the items in a collection. You do not need to know the number of items in the collection to use these statements. The following example loops through the Forms collection using a For&#8230;Next statement:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim i As Integer
For i = 0 To Forms.Count - 1
     MsgBox &quot;Form '" &amp; Forms(i).Name &amp; "' is open.&quot;
Next i
</PRE>
</td></tr></table></p>

<P>The following is the syntax used for the For Each&#8230;Next statement:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
For Each element In group
      element.property = expression
      '[statements]
Next element
</PRE>
</td></tr></table></p>

<P>The following example shows enumerating the Forms collection using a For Each&#8230;Next statement:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim frm As Form
'Loop through Forms collection.
For Each frm In Forms
      'Enumerate Controls collection of each form.
      MsgBox &quot;Form '&quot; &amp; Frm.Name &amp; &quot;' is open.&quot;
Next frm
</PRE>
</td></tr></table></p>

<A NAME="111"><H2>Lesson Summary</H2></A>

<P>Forms are the basic element of the user interface in Visual Basic. It is important to manage an application's forms carefully to enhance usability and also to facilitate development of the application. By default, Visual Basic uses the first form as the project's startup form. However, you can specify any form in the project as the startup form.</P>

<P>Form events are private procedures; they are fired in response to user actions such as clicking the mouse or pressing a key on the keyboard. Some common form events are:</P>

<ul>
<p><li>Initialize</li></p>

<p><li>Load</li></p>

<p><li>Activate</li></p>

<p><li>Deactivate</li></p>

<p><li>QueryUnload</li></p>

<p><li>Unload</li></p>

<p><li>Terminate</li></p>
</ul>

<P>Depending on how you want to display or hide a form, you will need to use the following methods:</P>

<ul>
<p><li>Load</li></p>

<p><li>Unload</li></p>

<p><li>Hide </li></p>

<p><li>Show</li></p>

</ul>

<P>The forms collection is a grouping of loaded forms. You can refer to the individual forms in a collection by their names or by their index within the collection. If you do not know which form to access, or need to step through all the forms, you can loop through the collection. This process is called enumeration.</P>

</BODY>
</HTML>





