<HTML>
<HEAD>
<TITLE>Lesson 1: User Interface Design Principles</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02a.htm", "ch02c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="83"><H1>Lesson 1: User Interface Design Principles</H1></A>

<P>The user interface is the link between your audience and the capabilities of your application. This lesson presents guidelines for developing user-friendly, productive, and manageable user interfaces.</P>

<P>The primary users of an application are called the <I>target audience</I>. With a working knowledge of these users, designing the user interface will be simple. A well-designed user interface makes it easy for your audience to learn and to use your application. A poorly designed interface, on the other hand, can result in confusion, frustration, and even lack of use as well as increased training time and costs.</P>

<P>Basic design principles such as composition and color apply to a computer screen just as they do to a sheet of paper or a canvas. You don't need to be an artist to create an effective user interface, but if you apply basic principles, your interface will be easy to use, and the code behind the interface will be more efficient. The way you initially design the interface has a direct impact on the way you create the underlying code.</P>

<P>When creating a Visual Basic application, the form is the basic element of the user interface. Controls and menus are then added to the form to provide specific functionality. Although Visual Basic allows you to quickly develop an interface, a little planning can make a big difference. Consider drafting your forms on paper first, determining which controls and menus are needed, the relative importance of the different elements, and the relationships between them.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the importance of the user interface.</li></p>

<p><li>Explain the roles of forms, controls, and menus in the user interface.</li></p>

<p><li>Explain the significance of the basic design principles of composition and color.</li></p>

<p><li>Explain the use of images, icons, and fonts in interface design.</li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="84"><H2>Composition</H2></A>

<P>Composition is the layout, or look and feel, of an application. It not only influences aesthetic appeal; it also has a tremendous impact on the usability of your application. Composition includes such factors as:</P>

<ul>
<p><li>Simplicity</li></p>

<p><li>Positioning of controls</li></p>

<p><li>Consistency</li></p>

<p><li>Affordances</li></p>

<p><li>White space</li></p>
</ul>

<A NAME="85"><H3>Simplicity</H3></A>

<P>Perhaps the most important principle of composition is simplicity. When it comes to application design, if the interface looks difficult, it probably is. A little forethought can help create an interface that looks, and is, simple to use. Also, from an aesthetic standpoint, a clean, simple design is always preferable.</P>

<P>A common pitfall in interface design is to try to model your interface after real-world objects. Imagine, for instance, that you were asked to create an application for completing insurance forms. A natural reaction would be to design an interface that exactly duplicates the paper form on screen. This creates several problems: the shape and dimensions of a paper form are different than those of the screen; duplicating a form limits you to text boxes and check boxes, which offers no real benefit to the user.</P>

<P>You are better off designing your own interface. By creating groupings of fields and using a tabbed interface, or several linked forms, you can logically present the information. You can also use additional controls, such as a list box preloaded with choices, to reduce the amount of typing required of the user. This reduces the chance of data entry errors made by users.</P>

<P>Providing defaults can sometimes simplify an application. If nine out of ten users select USA as their country, make the country USA the default rather than forcing the user to make a choice each time. Be sure to provide an option to override the default. Implementing wizards can also help to simplify complex or infrequent tasks.</P>

<P>The best test of simplicity is to observe your application in use. If a typical user can't accomplish a desired task without assistance, a redesign may be in order.</P>

<A NAME="86"><H3>Positioning of Controls</H3></A>

<P>In most interface designs, not all controls are of equal importance. Careful design can ensure that the essential controls are readily apparent to the user. Important or frequently accessed controls should be given a position of prominence; less important controls should be relegated to less prominent locations.</P>

<P>In most languages, the user reads from left to right and from the top to the bottom of a page. The same holds true for a computer screen. Most users' eyes will be drawn to the upper left portion of the screen first, so the most important control should go there. For example, if the information on a form is related to a customer, the name field should appear where it will be seen first&#8212;in the upper left corner. Buttons, such as OK or Next, should generally be placed in the lower right portion of the screen because users normally won't access these items until they have finished working with the form.</P>

<P>Another design consideration is to group information logically according to function or relationship. Buttons for navigating a database, for example, should be grouped together because their functions are related. Fields for name and address are generally grouped together, as they are closely related. In many cases, you can use the Frame control to help reinforce the relationships between controls. Figure 2.1 illustrates the grouping of controls that interact with a database.</P>

<P>
<A HREF="javascript:fullSize('F02xx01x.htm')"> <img src="images/F02xx01.JPG" width=404 height=382 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.1</B> <i>A logical grouping of controls on a form</i>  <!--/caption-->
</P>


<A NAME="87"><H3>Consistency</H3></A>

<P>Consistency, or sameness, is a key consideration in user interface design. Keeping a similar design or &quot;look&quot; throughout your application enhances usability. A lack of consistency in the user interface can be confusing and make an application seem chaotic and disorganized, possibly even causing the user to doubt the reliability of it. Consistency across applications is also advisable; conforming to the look and feel of existing client applications, such as Microsoft Word, helps to reduce training costs for the organization.</P>

<P>For visual consistency, establish the design strategy and style conventions before you begin development. Design elements such as the types of controls, standards for size and grouping of controls, and font choices should be established in advance. You can create prototypes of possible designs to help you make design decisions.</P>

<P>The wide variety of controls available in Visual Basic makes it tempting to use them all. Avoid this temptation; choose a subset of controls that best fit your particular application. Whereas list box, combo box, grid, and tree controls can all be used to present lists of information, it's best to be consistent and choose a single style when possible.</P>

<P>Also, try to use controls appropriately. While a text box control can be used to display a title or a caption, a Label control is usually more appropriate for this purpose. Be consistent in setting the properties for your controls. For example, if you use a white background color for editable text in one place, don't use gray in another place unless there's a good reason.</P>

<P>Consistency between different forms in your application is important for usability. If you use a gray background and three-dimensional effects on one form and a white background on another, the forms will appear to be unrelated. Choose a style and remain consistent throughout your application, even if it means redesigning some features.</P>

<A NAME="88"><H3>Affordances</H3></A>

<P>Affordances are visual clues to the function of a user interface. Although the term may be unfamiliar, examples of affordances are all around you. A handgrip on a bicycle has depressions where you place your fingers. This affordance makes the use obvious. Push buttons, knobs, and light switches are all affordances&#8212;just by looking at them you can understand their purpose.</P>

<P>A user interface also makes use of affordances. For instance, the three-dimensional effects used on command buttons make them inviting to click. If you designed a command button with a flat border, the user might not understand that the button is a command button. Flat buttons might be appropriate in some cases, such as in games or in multimedia applications.</P>

<P>Text boxes provide a sort of affordance. For example, users expect that a box with a border and a white background will contain editable text. While you can display a text box with no border (BorderStyle = 0), doing so will make the box look like a label, and it won't necessarily be obvious to the user that the control is editable.</P>

<A NAME="89"><H3>White Space</H3></A>

<P>Including white space in your user interface can help to emphasize elements and improve usability. White space doesn't necessarily have to be white; it refers to the use of blank space between and around controls on a form. Too many controls on a form can lead to a cluttered interface, making it difficult to find an individual field or control. You need to incorporate white space in your design to emphasize particular elements.</P>

<P>Consistent spacing between controls and alignment of vertical and horizontal elements can make your design more usable as well. Just as text in a magazine is arranged in orderly columns with even spacing between lines, an orderly interface makes your interface easy to read. Visual Basic provides several tools that make it easy to adjust the spacing, alignment, and size of controls: Align, Make Same Size, Horizontal Spacing, Vertical Spacing, and Center in Form commands can all be found under the Format menu.</P>

<A NAME="90"><H2>Color</H2></A>

<P>The use of color in your interface can add visual appeal, but color can be easily overused. Color, like the other design principles, can be a problem if not carefully considered in your initial design.</P>

<P>Preference for colors varies widely; the user's taste may not be the same as your own. Color can also evoke strong emotions. If you're designing for international audiences, certain colors may have cultural significance.</P>

<P>Small amounts of contrasting color can be used effectively to emphasize or draw attention to an important area. You should try to limit the number of colors in an application and maintain a consistent color scheme.</P>

<P>Another consideration is color blindness. Many people, for example, are unable to tell the difference between different combinations of primary colors such as red and green. To someone with this condition, red text on a green background would be invisible. For the same reason, you should not use color to indicate the relative importance of elements in your application.</P>

<A NAME="91"><H2>Images and Icons</H2></A>

<P>The use of pictures and icons add visual interest to your application&#8212;but, as with all interface elements, careful design is essential. Images can convey information efficiently without the need for text, but images are often perceived differently by different people. So consider the cultural significance of images. Many programs use a picture of a rural-style mailbox with a flag to represent mail functions. This is primarily an American icon; users in other countries or cultures may not recognize it as a mailbox.</P>

<P>Icons that appear on a toolbar can represent various functions within the application. In designing toolbar icons, look at other applications to see what standards have already been established. For example, many applications use a sheet of paper with a folded corner to represent the New File command, a black X to represent delete, a picture of a printer to print, and the picture of a floppy disk for the save command (see Figure 2.2). There may be other metaphors for these functions, but representing them differently could confuse the user.</P>

<P>
<img src="images/F02xx02.GIF" width=110 height=50 border=0>
</P><P>
<!--caption--><B>Figure 2.2</B> <i>Example of icons on a toolbar</i>  <!--/caption-->
</P>


<P>In designing your own icons and images, try to keep them simple. Complex pictures with a lot of colors don't degrade well when displayed as a 16-by-16 pixel toolbar icon, or when displayed at high screen resolutions.</P>

<A NAME="92"><H2>Fonts</H2></A>

<P>Fonts are also an important part of your user interface. They often communicate important information to the user. Certain fonts can be easily read at different resolutions and on different types of monitors. Choose one or two simple fonts such as Arial or Times New Roman. Script and other decorative fonts often look better in print than on the screen; they can also be difficult to read at smaller point sizes.</P>

<A NAME="93"><H2>Menus</H2></A>

<P>Menus and toolbars provide a structured and accessible organization for the commands and tools contained in your applications. Proper planning and design of menus and toolbars ensures that users will understand the purpose and features of your application. Users often browse menus before looking elsewhere for information about your application. If your menus are well designed, users can organize their understanding of the application by developing a mental model based on the menu organization and content alone. The Visual Basic Menu Editor lets you create menus that enhance the quality of your applications.</P>

<P>Each part of a Visual Basic application can have its own menu system or set of menus. Consistency across applications holds true for menus. Keep the same look and feel of existing client application menus (such as MS Word) and control the menu structure as users navigate through the application. Dynamically enabling, checking, or adding menus facilitates movement throughout the application without a loss of control. How to create a menu system is discussed in Lesson 4.</P>

<A NAME="94"><H2>Lesson Summary</H2></A>

<P>Interface design is important for two reasons:</P>

<ul>
<p><li>Users can quickly understand and learn applications that have a well-designed interface, thus saving training time and costs as well as encouraging use of the application.</li></p>

<p><li>Programming is easier with a properly designed interface.</li></p>
</ul>

<P>A good application begins with a carefully planned design and attention to the following principles:</P>

<ul><p><li>Simplicity: </li></p>

  <ul>
  <p><LI>Be original.</LI></p>
  <P><LI> Don't just copy paper forms.</LI></P>
  <P><LI> Make the most common choices defaults.</LI></P>
  </ul>
<p><li>Positioning of controls: </li></p>

  <ul> 
  <p><LI>Importance of each control,</LI></p>
  <P><LI> Relationship between controls</LI></P>
  <P><LI> Order of use of controls</LI></P>
  </ul>

<p><li>Consistency: fewer, carefully chosen controls; standardized color, font, size; and similarity of groupings.</li></p>

<p><li>Affordances: choose what the average user would expect for buttons, toolbar icons, etc.</li></p>

<p><li>Color and images: keep the user in mind, especially cultural issues.</li></p>

<p><li>Images and icons: consider the user's expectations.</li></p>

<p><li>Choosing fonts: simplicity and consistency.</li></p>

<p><li>Menus: well-planned commands and tools.</li></p>
</ul>

</BODY>
</HTML>





