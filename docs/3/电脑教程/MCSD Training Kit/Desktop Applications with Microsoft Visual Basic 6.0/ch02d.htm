<HTML>
<HEAD>
<TITLE>Lesson 3: Using Controls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02c.htm", "ch02e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="112"><H1>Lesson 3: Using Controls</H1></A>

<P>Controls (also referred to as ActiveX controls) are the second element of the user interface. They are graphical tools used to create and/or enhance the functionality of an application. The Visual Basic toolbox includes several controls. Some controls are useful for working with large amounts of data contained in an external database. Other controls can be used to access the Windows file system. Like forms, each control has properties, methods and events that you can use for a specific purpose in the user interface.</P>

<P>This lesson provides information on using controls when building a user interface.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Define the role of controls in Visual Basic.</li></p>

<p><li>Explain the difference between standard controls, custom controls, and inherent objects.</li></p>

<p><li>Describe the process for adding controls to the Visual Basic toolbox, including the role of the Components dialog box.</li></p>

<p><li>State the advantages of control arrays.</li></p>

<p><li>Explain three ways to create control arrays.</li></p>

<p><li>Describe the purpose and procedure for creating controls dynamically.</li></p>

<p><li>Explain the value of four particularly useful custom controls.</li></p>

</UL>
<b>Estimated lesson time: 45 minutes</b>
</blockquote></div></P>

<A NAME="113"><H2>Working with Controls</H2></A>

<P>There are two categories of ActiveX controls, inherent and custom. The Visual Basic toolbox includes inherent controls, sometimes called standard controls, by default. This includes controls such as the command button and text box. Custom controls are optional. You must add them to the toolbox before you can use them in a project. </P>

<P>ActiveX controls are available for almost any function imaginable. These controls are contained in files that have an .ocx extension. ActiveX controls, like forms, contain properties, methods, and events. The Professional and Enterprise editions of Visual Basic let you build your own custom controls.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Controls with the .vbx filename extension use older technology and are found in applications written in earlier versions of Visual Basic. When Visual Basic opens a project containing a .vbx control, it replaces the .vbx control with an .ocx control, but only if an .ocx version of the control is available.
</blockquote></div></p>

<A NAME="114"><H3>Adding Custom Controls</H3></A>

<P>Some custom controls are included with Visual Basic and others are available from third-party vendors. To use these controls in a project, select them in the Components dialog box (see Figure 2.4) and add them to the Visual Basic toolbox. </P>

<P>
<A HREF="javascript:fullSize('F02xx04x.htm')"> <img src="images/F02xx04.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.4</B> <i>The Components dialog box</i>  <!--/caption-->
</P>


<P>If the control you want is not listed in the Components dialog box, it means that the control is not registered on your computer. You must first install it using the vendor's installation program. It will then appear in the Components dialog box and you can add it to a project. After you add a control to a project, or instantiate it, the control remains a part of the project's workspace. The control cannot be removed from the toolbox until it is removed from the application. When you open a different project, the toolbox appears as it was prior to adding the ActiveX control.</P>

<P><LI><B>To add an ActiveX control to a project's toolbox</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>Components</B>. </LI></P>

 <p>You can also right-click on the toolbox and click <B>Components</B>.</p> 

 <P>The <B>Components</B> dialog box appears; the <B>Controls</B> tab is the default.</P>

<P><LI>Click the check box to the left of the name of the appropriate control.</LI></P>

<P><LI>Click <B>OK</B> to close the <B>Components</B> dialog box. </LI></P>

<P>The new control appears in the toolbox.</P>
</OL>

<P><LI><B>To add an ActiveX control to the Components dialog box</B></LI></P>
<OL>
<P><LI>In the <B>Components</B> dialog box, click the <B>Browse</B> button.</LI></P>

<P>The <B>Add ActiveX Control</B> dialog box appears.</P>
<P><LI>Locate and open the control you want by searching directories for files with an .ocx filename extension. </LI></P>

<P><LI>Add an ActiveX control to the list of available controls.</LI></P>

<P>The new control appears in the <B>Components</B> dialog box.</P>
</OL>

<P>After you add the control to the toolbox, you can add it to your form. You can then set properties for the control. Setting the Name property of a control is important because it determines how you refer to the control in code. You should follow standard naming conventions when naming a control. For more information on this topic, search for &quot;Visual Basic Coding Conventions&quot; in the MSDN Online Help.</P>

<A NAME="115"><H3>Removing Controls</H3></A>

<P>Be sure to remove any unused controls in a project. When you package your application for distribution, Visual Basic will not verify that all controls listed in the Components dialog box are required by the application. If you fail to remove unused controls, they will be included in the setup files. This makes the distribution size larger and adds unnecessary overhead to the application. You cannot remove a control from the toolbox if an instance of that control is used on any form in the project.</P>

<P><LI><B>To remove a control from a project</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>Components</B>.</LI></P>

 <p>You can also right-click on the toolbox and click <B>Components</B>.</p>

  <P>The <B>Components</B> dialog box appears.</P>

<P><LI>Clear the check box next to each control you want to remove.</LI></P>

<P><LI>Click <B>OK</B> to close the <B>Components</B> dialog box. </LI></P>

<P>The control icons are removed from the toolbox.</P>
</OL>

<A NAME="116"><H3>Setting Control Properties</H3></A>

<P>You can set Control properties at design time or at run time. Properties set at design time allow the developer to set default values used in the application. To set these properties, you can use the Properties window, which is illustrated in Figure 2.5. You can set properties for a single control or for multiple controls.</P>

<P>
<img src="images/F02xx05.GIF" width=254 height=360 border=0>
</P><P>
<!--caption--><B>Figure 2.5</B> <i>The Properties window</i>  <!--/caption-->
</P>


<P><LI><B>To set control properties at design time</B></LI></P>

<OL>
<P><LI>Right-click a control and click Properties, or left-click the control and click F4.</LI></P>

<P><LI>Type the value in the appropriate property box.</LI></P>
</OL>

<P><LI><B>To set properties for multiple controls at design time</B></LI></P>
<OL>
<P><LI>Click and drag the mouse over the controls you want to select, or click <B>CTRL+SHIFT</B> and click the controls.</LI></P>

<P>The <B>Properties</B> window displays those properties that are common to the selected controls.</P>
<P><LI>Type the value in the appropriate property's box.</LI></P>
</OL>

<p><div class="note"><blockquote><b>NOTE</b><HR>
When you work with properties for multiple controls, any change you make to a property applies to all of the controls.
</blockquote></div></p>

<P>You can also set control properties at run time. This allows you to programmatically control objects as the application is running. Use the following syntax to set control properties at run time:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE><I>objectname.property</I> = <I>expression</I></PRE>
</td></tr></table></P>

<P>The following example sets the Font.Bold property to True for the txtData<B> </B>text box:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>txtData.Font.Bold = True     'Set text to bold.</PRE>
</td></tr></table></P>

<P>The following example sets the Text property of the text box txtData:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>txtData.Text = &quot;Hello World&quot; 'Set value of text.</PRE>
</td></tr></table></P>

<P>Some controls have default properties. This allows you to omit the property name when you set the control's default property. For example, the default property of a text box is the Text property. The default property of a label is the Caption property.</P>

<P>The following code sets the default Text and Caption properties for a text box and a Label control:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
txtData = &quot;Set the Text property of this text box&quot;
lblData = &quot;Set the Caption property of this label&quot;
</PRE>
</td></tr></table></P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
For consistency and readability, always include the object's property name.
</blockquote></div></p>

<A NAME="117"><H2>Using Control Arrays</H2></A>

<P>Microsoft Visual Basic 6.0 provides several additional tools that help you create efficient and flexible applications. One of these is the control array, a group of controls that share the same name, type, and event procedures. However, elements of a control array retain their individual property settings. For example, you can use the Index, Caption, or Tag properties to distinguish one control from another. Figure 2.6 shows an example of a form containing a control array.</P>

<P>A control array has at least one element with an Index property that is greater than or equal to zero. The Index can grow to a maximum of 32,767 elements if your system resources and memory permit. Its size also depends on how much memory and Windows resources each control requires. Common uses for control arrays include menu controls and option button groupings.</P>

<P>Control arrays offer three advantages: </P>
<ul>
<p><li>Control arrays allow you to add new controls at run time. This is the most significant advantage. It is especially useful when you do not know how many controls you will need at run time. Adding controls at run time is also more fficient because you use fewer resources than you would by adding multiple controls at design time. Controls added at run time are often called dynamic controls.</li></p>

<p><li>Each new element you add to a control array inherits the common event procedures of the array. This can facilitate development.</li></p>

<p><li>Controls in a control array can share code. For example, if your form has several text boxes that receive a date value, a control array can be set up so that all of the text boxes share the same validation code.</li></p>
</ul>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Visual Basic limits you to 254 control names on a form. Each control array counts once toward this limit.
</blockquote></div></p>

<P>
<A HREF="javascript:fullSize('F02xx06x.htm')"> <img src="images/F02xx06.JPG" width=404 height=239 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.6</B> <i>Control array</i>  <!--/caption-->
</P>


<A NAME="118"><H3>Creating Control Arrays at Design Time</H3></A>

<P>You can create control arrays at design time in three ways:</P>

<ul><p><li>Give two controls the same name. They must be the same type.</li></p>

<p><li>Copy and paste a control.</li></p>

<p><li>Set the Index property by using the Properties window.</li></p>
</ul>
<P>Visual Basic automatically creates a control array and gives these controls the index values.</P>

<P><LI><B>To create a control array at design time</B></LI></P>

<OL>
<P><LI>Add the first control to a form and set the initial properties that all the controls in the control array will share. </LI></P>

<P><LI>Set the Name property for the control.</LI></P>

<P><LI>Do one of the following:</LI></P>
<ul>
<P><LI> Click the control, copy it, then paste it on the form.</LI></P>
<P><LI> Place two controls of the same type on a form. Set the Name property of the second control to the name selected for the first control.</LI></P>
<P><LI> Click <B>Yes</B> when Visual Basic asks if you want to create a control array.</LI></P>
</ul>
<P><LI>Repeat Step 3 until all controls have been added to the form.</LI></P>
</OL>

<A NAME="119"><H3>Coding a Control Array</H3></A>

<P>You refer to a control with the following syntax: </P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE><I>controlname</I>(<I>index</I>)</PRE>
</td></tr></table></P>

<P>You specify the index of a control when you create it. For example, when the control chkPreferences(2) recognizes the Click event, Visual Basic invokes the event procedure chkPreferences_Click and passes the index value 2 as an argument. The following code demonstrates using the Select Case statement to evaluate the index value passed to the chkPreferences_Click procedure. The Index value determines which box the user selected to display the appropriate message box:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub chkPreferences_Click(Index As Integer)
     If chkPreferences(Index).Value = vbChecked Then
           Select Case Index
                 Case 0
                      MsgBox &quot;You will be notified by mail&quot;
                 Case 1
                      MsgBox &quot;You will be notified by phone&quot;
                 Case 2
                      MsgBox &quot;You will not be notified&quot;
           End Select
      End If
End Sub
</PRE>
</td></tr></table></p>

<A NAME="120"><H3>Creating Controls at Run Time</H3></A>

<P>Visual Basic lets you create controls at run time. This gives you the flexibility to customize the interface according to the needs of the user. The Load statement and Add method are used to create controls dynamically. </P>

<A NAME="121"><H3>Adding Controls with the Load Statement</H3></A>

<P>Once a control array is established, the Load statement copies all the property settings except Visible, Index, and TabIndex from the lowest existing element in the array. When you want to display a control, set the Visible property to True.</P>

<P>If you try to load a control that already exists, a run-time error will occur.</P>

<P>In the following example, the code creates a new text box every time the user clicks the cmdAddTextBox button:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub cmdAddTextBox_Click ( )
      Dim intNextVal As Integer
      
      'Find the next available Index (indexes begin with 0)
      intNextVal = txtArray( ).Count
      'Add the new text box to the form
      Load txtArray(intNextVal)
      'Position the text box on the form
      txtArray(intNextVal).Top = txtArray(intNextVal - 1).Top + 400
      'By default the control is not visible
      txtArray(intNextVal).Visible = True
End Sub
</PRE>
</td></tr></table></p>

<A NAME="122"><H3>Removing Controls with the Unload Statement </H3></A>

<P>If you have dynamically created controls, you can use the Unload statement to remove these controls. If you try to unload a control that was created at design time or that has already been unloaded, a run-time error occurs. In the following code, each time the user clicks the cmdRemoveTextBox button, the textbox index is checked. If this control was created at run time, it is removed from the form:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>Private Sub cmdRemoveTextBox_Click ()
      Dim intTopIndex As Integer
      
      'The variable holds the top index value
      intTopIndex = txtArray().Count - 1
      'Do not remove the original control with index 0
      If intTopIndex &gt; 0 Then
             'Remove the control
             Unload txtArray(intTopIndex)
      End If
End Sub
</PRE>
</td></tr></table></p>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="123"><H2>Practice: Using Controls Arrays</H2></A>

<P>In this practice you will create control arrays, add controls to your form at run time using the Load statement, and remove them with the Unload statement. </P>

<p>
<img src="images/video.gif" width=78 height=54 border="0">
</p>

<P>To see a demonstration, run the Chap02.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>

<P><LI><B>To add control arrays to a form</B></LI></P>
<OL>
<P><LI>Open a new <B>Standard EXE</B> project.</LI></P>

<P><LI>Add three CommandButton controls and one TextBox control to <B>Form1</B>. </LI></P>

<P><LI>Set the properties for the controls as specified in the following table: </LI></P>

<P>
<table cellpadding=5 width="95%">
<TR>
<TH Valign="top">Control</TH>
<TH Valign="top">Property</TH>
<TH Valign="top">Value</TH>
</TR>

<TR>
<TD>Command1</TD>
<TD>Name</TD>
<TD>CmdButtons </TD></TR>

<TR>
<TD> </TD>
<TD>Caption</TD>
<TD>&amp;Add Textbox</TD></TR>

<TR>
<TD>Command2</TD>
<TD>Name</TD>
<TD>CmdButtons</TD></TR>

<TR>
<TD> </TD>
<TD>Caption</TD>
<TD>&amp;Remove Textbox</TD></TR>

<TR>
<TD>Command3</TD>
<TD>Name</TD>
<TD>cmdButtons</TD></TR>

<TR>
<TD> </TD>
<TD>Caption</TD>
<TD>&amp;Close</TD></TR>

<TR>
<TD>Text1</TD>
<TD>Name</TD>
<TD>txtData</TD></TR>

<TR>
<TD> </TD>
<TD>Index</TD>
<TD>0</TD></TR>
</TABLE></P>

<P><LI>Click <B>Yes</B> when Visual Basic asks if you want to create a control array.</LI></P>

<P>Figure 2.7 illustrates the form layout.</P>

<P>
<img src="images/F02xx07.GIF" width=321 height=240 border=0>
</P><P>
<!--caption--><B>Figure 2.7</B> <i>Practice form layout</i>  <!--/caption-->
</P>

</OL>

<P><LI><B>To add code to a control array</B></LI></P>

<OL>
<P><LI>Open the Click event for any of the command buttons. </LI></P>

 <p>The following Event procedure appears.</p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
  Private Sub cmdButtons_Click( Index As Integer )

  End Sub
</PRE>
</td></tr></table></p>


<P>The Index argument between parentheses indicates that the command button is part of a control array. Use this argument to determine which control was clicked.</P>

<P><LI>Add the following code to the cmdButton's_Click event:</LI></P>

 <table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim intNextVal As Integer, intTopIndex As Integer

Select Case Index
      Case 0  'Add textbox button
           intNextVal = txtData().Count
           'Limit 5 controls on the form
           If intNextVal &lt; 5 Then
                 Load txtData(intNextVal)
                 txtData(intNextVal).Top =  _
                      txtData(intNextVal - 1).Top + 400
                 txtData(intNextVal).Visible = True
           End If

      Case 1  'Remove textbox button
           intTopIndex = txtData().Count - 1
           'Remove all but the original control from the form
           If intTopIndex &gt; 0 Then 
                  Unload txtData(intTopIndex)
           End If

      Case 2  'Close the form
                  Unload Me
 End Select
</PRE>
</td></tr></table>
<P><LI>On the <B>File</B> menu, click <B>Save</B>.</LI></P>

<P>Save your form as frmControlArrays and your project file as ControlArrays to the \Practice\Ch02 folder.</P>
<P><LI>Test your application.</LI></P>
</OL>

<A NAME="124"><H3>Adding Controls Using the Add Method</H3></A>

<P>Visual Basic 6.0 has the capability to add controls dynamically without using a control array. The Add method lets you add controls to an application at run time. This gives you greater flexibility because you can create new controls during run time and avoid the overhead of design-time controls. The following example uses the Add method to dynamically add a command button to the form frmCustomers:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub Form_Load()
      frmCustomers.Controls.Add &quot;VB.CommandButton&quot;, &quot;cmdObj1&quot;, Frame1
      With frmCustomers!cmdObj1
           .Visible = True
           .Width = 2000
           .Caption = &quot;Dynamic Button&quot;
      End With
End Sub
</PRE>
</td></tr></TABLE></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The preceding code uses an exclamation mark (!) as a syntax element. You can also use standard collection syntax such as frmCustomers.Controls("cmdObj1") to reference the control. For more information on the Add method, search for "What's New in Controls" in the MSDN Online Help.
</blockquote></div></p>

<A NAME="125"><H2>Using the Controls Collection</H2></A>

<P>Visual Basic provides an array that contains all the controls on a form. This array is known as the Controls collection. The Controls collection has one property, Count, which returns the number of controls on the form. </P>

<P>There are two ways to identify a control in the Controls collection. You can reference its index value or its name as shown in the following example:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Controls(1).Top
Controls("cmdObject1").Top
</PRE>
</td></tr></TABLE></p>

<P>You can use the Controls collection to perform an action on a group of controls, such as changing a particular property value for several controls. You can use the TypeOf keyword with the If statement, or the TypeName function to determine the type of a control in the Controls collection. In the following code, Visual Basic scans the Controls collection, identifies all text boxes, then sets the font size to 12:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Sub cmdChangeFont_Click()
     Dim i As Integer
     For i = 0 To Controls.Count &#8212; 1
           If TypeOf Controls(i) Is TextBox Then
                 Controls(i).FontSize = 12
           End If
     Next I
End Sub
</PRE>
</td></tr></TABLE></p>

<P>You can also use the For Each statement to loop through collections:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim ctl As Control
For Each ctl In Controls
     If TypeName(ctl) = &quot;TextBox&quot; Then
          ctl.Text=&quot;&quot;
     End If
Next ctl
</PRE>
</td></tr></TABLE></p>
<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="126"><H2>Practice: Using the Add Method with a Controls Collection</H2></A>

<P>In this practice you will dynamically add a label to the form using the Add method. You will also navigate through the Controls collection and clear all of the text boxes.</P>

<P><LI><B>To add a label using the Add method</B></LI></P>

<OL>
<P><LI>Open a new <B>Standard EXE </B>project.</LI></P>

<P><LI>Add the following code to the <B>Form_Load</B> event:</LI></P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Form1.Controls.Add &quot;VB.Label&quot;, &quot;lblTitle&quot;, Form1
With Form1!lblTitle
    .Visible = True
    .Top = 0 
    .Left = 0
    .Width = 4000
    .Height = 500
    .Font.Size = 18
    .Caption = &quot;This is a Dynamic label!&quot;
End With
</PRE>
</td></tr></TABLE></p>

<P>This code dynamically adds, sizes, and positions a new label in the top left corner of the form. The new label will have the caption, &quot;This is a Dynamic label!&quot;</P>

<P><LI>Save and test your application.</LI></P>

<P>Save your form as frmControls and your project as ControlsCollection to the \Practice\Ch02 folder. Figure 2.8 illustrates the practice form at run time.</P>

<P>
<img src="images/F02xx08.GIF" width=320 height=240 border=0>
</P><P>
<!--caption--><B>Figure 2.8</B> <i>Results of the practice form</i>  <!--/caption-->
</P>

</OL>

<P><LI><B>To navigate the Controls collection</B></LI></P>

<OL>
<P><LI>Add a CommandButton control to the form. </LI></P>

<P><LI>Set the Name property to <B>cmdClear</B> and the Caption property to <B>&amp;ClearForm</B>.</LI></P>

<P><LI>Add two textboxes to the form.</LI></P>

<P>Figure 2.9 illustrates the form.</P>

<P>
<img src="images/F02xx09.GIF" width=321 height=241 border=0>
</P><P>
<!--caption--><B>Figure 2.9</B> <i>Appearance of the practice form</i>  <!--/caption-->
</P>


<P><LI>Declare an object variable in the <B>cmdClear_Click</B> event that will hold the value of the current control:</LI></P>


<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim ctl As Control</PRE>
</td></tr></TABLE></p>


<P><LI>Add the following code to the <B>cmdClear_Click</B> event</LI></P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
For Each ctl In Controls
     If TypeOf ctl Is TextBox Then
           ctl.Text = ""
     End If
Next ctl
</PRE>
</td></tr></TABLE></P>

<P><LI>Save and test your application.</LI></P>
</OL>

<A NAME="127"><H2>Enhancing the User Interface</H2></A>

<P>Additional ActiveX controls are included with the Professional and Enterprise editions of Visual Basic. These controls increase functionality and can dramatically enhance the user interface. Some examples of these ActiveX controls, which are shown in Figure 2.10, are: ImageList, TreeView, ListView, ToolBar, and Status Bar.</P>

<P>
<img src="images/F02xx10x.gif" width=426 height=109 border=0>
</P><P>
<!--caption--><B>Figure 2.10</B> <i>Controls added using the Windows Common Controls 6.0</i>  <!--/caption-->
</P>


<p><div class="note"><blockquote><b>NOTE</b><HR>
These controls are part of a group of ActiveX controls that are found in the mscomctl.ocx file. To use these controls in your application, add this file to the project.
</blockquote></div></p>

<A NAME="128"><H3>ImageList</H3></A>

<P>The ImageList control is a storehouse for images. It contains a collection of ListImage objects, each of which can be referred to by its index or key. It is a companion control in that it acts as a central repository to supply images to other controls. The ImageList's companion control is any control that can display an image's Picture object, or it is one of the Windows Common Controls specifically designed to bind to the ImageList control. These Common Controls include the ListView, ToolBar, TabStrip, Header, ImageCombo, and TreeView. </P>

<P>Other controls must be bound to the ImageList control to access the stored images: </P>

<ul>
<p><li>For the ListView control, set the Icons and SmallIcons properties to ImageList controls. </li></p>

<p><li>For the TreeView, TabStrip, ImageCombo, and Toolbar controls, set the ImageList property to an ImageList control.</li></p>
</ul>

<P>At design time, you can add images using the Images tab of the ImageList Control Property Pages dialog box, shown in Figure 2.11. The ImageList is not visible to the user interface at run time, but you can dynamically add images using the Add method for the ListImages collection.</P>

<P>
<img src="images/F02xx11x.gif" width=419 height=315 border=0>
</P><P>
<!--caption--><B>Figure 2.11</B> <i>ImageList Control Property Pages dialog box</i>  <!--/caption-->
</P>


<A NAME="129"><H3>TreeView</H3></A>

<P>A TreeView control displays a hierarchical list of Node objects, each of which consists of a label and an optional bitmap. You typically use a TreeView to display the headings in a document, the entries in an index, the files and directories on a disk, or any other kind of information that might be useful displayed as a hierarchy. Figure 2.12 illustrates the Window Explorer, an example of the TreeView control.</P>

<P>
<A HREF="javascript:fullSize('F02xx12x.htm')"> <img src="images/F02xx12.JPG" width=404 height=332 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.12</B> <i>The Windows Explorer, which is a TreeView control</i>  <!--/caption-->
</P>


<P>After you create a TreeView control, you can add, remove, arrange, and otherwise manipulate Node objects by setting properties and invoking methods. You can programmatically expand and collapse Node objects to display or hide all child nodes. The following example creates a TreeView control; Figure 2.13 shows the results of the code on the TreeView control:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim nodTreeView As Node

'Set the style.
TreeView1.Style = tvwTreelinesPlusMinusText

'Add the root node with key M1 and Caption January
Set nodTreeView = TreeView1.Nodes.Add(, , &quot;M1&quot;, &quot;January&quot;)

'Add Child (Week1) and Sub Child Nodes(Monday,Tuesday...)
Set nodTreeView = TreeView1.Nodes.Add(&quot;M1&quot;, tvwChild, &quot;W1&quot;, &quot;Week1&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W1&quot;, tvwChild, &quot;W1WD1&quot;, &quot;Monday&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W1&quot;, tvwChild, &quot;W1WD2&quot;, _
      &quot;Tuesday&quot;)
	  
Set nodTreeView = TreeView1.Nodes.Add(&quot;M1&quot;, tvwChild, &quot;W2&quot;, &quot;Week2&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W2&quot;, tvwChild, &quot;W2WD1&quot;, &quot;Monday&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W2&quot;, tvwChild, &quot;W2WD2&quot;, _
      &quot;Tuesday&quot;)

Set nodTreeView = TreeView1.Nodes.Add(&quot;M1&quot;, tvwChild, &quot;W3&quot;, &quot;Week3&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W3&quot;, tvwChild, &quot;W3WD1&quot;, &quot;Monday&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W3&quot;, tvwChild, &quot;W3WD2&quot;, _
      &quot;Tuesday&quot;)

Set nodTreeView = TreeView1.Nodes.Add(&quot;M1&quot;, tvwChild, &quot;W4&quot;, &quot;Week4&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W4&quot;, tvwChild, &quot;W4WD1&quot;, &quot;Monday&quot;)
Set nodTreeView = TreeView1.Nodes.Add(&quot;W4&quot;, tvwChild, &quot;W4WD2&quot;, _
      &quot;Tuesday&quot;)
</PRE>
</td></tr></table></p>

<P>
<img src="images/F02xx13.GIF" width=277 height=349 border=0>
</P><P>
<!--caption--><B>Figure 2.13</B> <i>Example of the TreeView control</i>  <!--/caption-->
</P>


<P>The TreeView control includes three primary events: Collapse, Expand, and NodeClick. An example of the NodeClick event is:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub TreeView1_NodeClick(ByVal Node As MSComctlLib.Node)
      'Place the selected nodes text into a label control
      lblNodeClicked.Caption = Node.Text
End Sub
</PRE>
</td></tr></TABLE></P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
The TreeView control uses the ImageList control, specified by the ImageList property, to store the bitmaps and icons that are displayed in Node objects. A TreeView control can use only one ImageList at a time.
</blockquote></div></p>

<A NAME="130"><H3>ListView</H3></A>

<P>The ListView control displays items, called ListItem objects, in one of four different views: Large (standard) icons, Small icons, List, and Report.</P>

<P>You can arrange items into columns with or without column headings. You can also display accompanying icons and text.</P>

<P>The View property determines which view the control uses to display the items in the list. You can also control whether the labels associated with items in the list wrap to more than one line using the LabelWrap property. Use the Sorted property to determine how the data is organized. In addition, you can manage how items in the list are sorted and how selected items appear. The following example fills a ListView control:</P>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>
Dim itmX As ListItem

'Set the view to report.
ListView1.View = lvwReport
ListView1.Sorted = True

'Add ColumnHeaders and set their width.
ListView1.ColumnHeaders.Add , , &quot;Product&quot;, ListView1.Width / 3
ListView1.ColumnHeaders.Add , , &quot;Description&quot;, ListView1.Width / 3
ListView1.ColumnHeaders.Add , , &quot;Price&quot;, ListView1.Width / 3

'Add the items and sub items to the list.
Set itmX = ListView1.ListItems.Add(, , &quot;Tires&quot;)
'Sub items appear in the middle column.
itmX.SubItems(1) = &quot;Radial&quot;
'Set the third column value
itmX.SubItems(2) = &quot;$100.00&quot;

'Add a new item and sub items to the list.
Set itmX = ListView1.ListItems.Add(, , &quot;Engine&quot;)
itmX.SubItems(1) = &quot;Rebuild&quot;
itmX.SubItems(2) = &quot;$2,000.00&quot;

'Add a new item and sub items to the list.
Set itmX = ListView1.ListItems.Add(, , &quot;Seats&quot;)
itmX.SubItems(1) = &quot;Bucket&quot;
itmX.SubItems(2) = &quot;$800.00&quot;

'Add a new item and sub items to the list.
Set itmX = ListView1.ListItems.Add(, , &quot;Paint&quot;)
itmX.SubItems(1) = &quot;2 Coats&quot;
itmX.SubItems(2) = &quot;$550.00&quot;
</PRE>
</td></tr></TABLE></P>

<P>The ListView control uses several events to handle user actions. The following is an example of the ItemClick event:</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub ListView1_ItemClick(ByVal Item As MSComctlLib.ListItem)
  'Display the selected row's data to a label control.
  lblLastItemClicked.Caption = Item.Text &amp; &quot;, &quot; &amp; _
       Item.ListSubItems(1).Text &amp; &quot;, &quot; &amp; Item.ListSubItems(2).Text
End Sub
</PRE>
</td></tr></TABLE></P>

<A NAME="131"><H3>ToolBar</H3></A>

<P>A ToolBar control contains a collection of Button objects. A toolbar typically contains buttons that correspond to items in an application's menu. This provides a graphic interface for the user to access the most frequently used functions and commands.</P>

<P>The ToolBar control lets you create toolbars by adding Button objects to a Buttons collection. Each Button object can have optional text, an image, or both, supplied by an associated ImageList control. For each Button object, you display an image on a button with the Image property, or display text with the Caption property, or both. At design time, you can add Button objects to the control using the Properties Page of the ToolBar control. At run time, you can add or remove buttons from the Buttons collection with the Add and Remove methods. Figure 2.14 illustrates the use of a toolbar on a form.</P>

<P>
<A HREF="javascript:fullSize('F02xx14x.htm')"> <img src="images/F02xx14.JPG" width=404 height=158 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.14</B> <i>Toolbar on a form</i>  <!--/caption-->
</P>


<P>The toolbar buttons share the same event. The buttons can be identified by their Key or Index properties. For example:</P>

<table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub tlbDataEntry_ButtonClick(ByVal Button As MSComctlLib.Button)
      Select Case Button.Index
            Case 1
                 'Navigate back a record.
            Case 2
                 'Navigate forward a record.
            Case 3
                 'Used a separator.
            Case 4
                 'Save the record.
            Case 5
                 'Activate help.
      End Select
End Sub
</PRE>
</td></tr></TABLE>

<A NAME="132"><H3>StatusBar</H3></A>

<P>A StatusBar control provides a window, usually at the bottom of a parent form, through which an application can display status data.  A StatusBar control consists of up to 16 Panel objects that are contained in a Panels collection. Each Panel object can contain text and/or a picture. Properties that control the appearance of individual panels include Width, Alignment (of text and pictures), and Bevel. Additionally, you can use one of seven values of the Style property to automatically display common data such as date, time, and keyboard states. Figure 2.15 illustrates a status bar.</P>

<P>
<A HREF="javascript:fullSize('F02xx15x.htm')"> <img src="images/F02xx15.JPG" width=404 height=331 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 2.15</B> <i>Form with StatusBar control</i>  <!--/caption-->
</P>


<P>At design time, you can create panels and customize their appearance by setting values in the Panel tab of the Properties Page of the StatusBar control. At run time, the Panel objects can be reconfigured to reflect different functions depending on the state of the application.</P>

<P>To change the text that appears in a status bar panel, set the Text property of one of the panels in the StatusBar control. The following code displays the Customer ID in the third pane of the StatusBar that was shown in Figure 2.15:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
staDataEntry.Panels(1).Text = &quot;You are on record: &quot; &amp; txtFields(0).Text
</PRE>
</td></tr></table></P>

<P>If the status bar contains only one pane (the Style property is set to sbrSimple), you can set the text using the SimpleText property. For example:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>
staDataEntry.SimpleText = &quot;Processing, please wait...&quot;
</PRE>
</td></tr></table></P>

<P>One of the events the StatusBar uses is the PanelClick event. It is generated when a click occurs on a StatusBar control's Panel object. When the StatusBar control's Style property is set to Simple style, panels are hidden and the PanelClick event is not generated.</P>

<P>You can use a reference to the Panel object to set properties for that panel. For example, the following code resets the Bevel property of a clicked Panel:</P>

<table cellpadding=5 width="95%"><TR><TD>
<PRE>
Private Sub staDataEntry_PanelClick(ByVal Panel As MSComctlLib.Panel)
      'Determine the key property of the panel clicked
      Select Case Panel.Key
            Case &quot;time&quot;
                 Panel.Bevel = sbrRaised
              <I>'[statements]</I>
            Case &quot;date&quot;
                 Panel.Bevel = sbrRaised
              <I>'[statements]</I>
            Case &quot;record&quot;
                 Panel.Bevel = sbrRaised
              <I>'[statements]</I>
     End Select
     MsgBox &quot;The panel's index is: &quot; &amp; Panel.Index
End Sub
</PRE>
</td></tr></TABLE>

<A NAME="133"><H2>Lesson Summary</H2></A>

<P>Inherent (standard) controls, such as the text box and command button, are included in the Visual Basic toolbox.</P>

<P>Custom controls have an .ocx extension and are optional. They are available from three sources:</P>

<ul><p><li>Visual Basic</li></p>

<p><li>The Professional and Enterprise editions</li></p>

<p><li>Third-party developers </li></p>
</ul>

<P>To use custom controls in a project, add them to the toolbox. If they are not registered on your system, add them first to the Components dialog box.</P>

<P>You can set control properties at design time; doing so establishes default values. You can also set the properties at run time; this controls objects as the application runs.</P>

<P>A control array is a group of controls that share the same name, type, and event procedures, but retain individual properties. Control arrays allow you to add controls to an application at run time. This minimizes the use of system resources.</P>

<P>Custom controls that are especially useful include:</P>

<ul><p><li>ListView</li></p>

<p><li>ImageList</li></p>

<p><li>ToolBar</li></p>

<p><li>StatusBar</li></p></ul>

</BODY>
</HTML>





