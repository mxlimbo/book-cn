<HTML>
<HEAD>
<TITLE>Chapter 9 -- Summary</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09d.htm", "ch09f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="479"><H1>Summary</H1></A>

<A NAME="480"><H3>Connecting to COM Components</H3></A>

<P>Component Object Model (COM) components are units of code that provide specific functionality. They are either: </P>

<ul>
<p><li>Internal components, which are compiled into a project and are available only to that project. </li></p>

<p><li>External components, which are compiled into an executable (.exe) or dynamic-link library (.dll).</li></p>
</ul>

<P>An external component must be available and registered on your computer. Use Regsvr32 to register both ActiveX DLLs and Active EXEs. </P>

<P>A type library is a description of all objects, methods, events, and properties for a COM component. Set a reference to the component's type library to make it available to your application. To ensure more efficient compiling, remove any components and library references that your application does not need.</P>

<A NAME="481"><H3>Managing COM Components</H3></A>

<P>Automation supports accessing the functionality of different applications. The two components involved are:</P>

<ul>
<p><li>The ActiveX client&#8212;the application in which you are working, and from which you want to control an external object.</li></p>

<p><li>The ActiveX server&#8212;the application that contains the external object you want to use.</li></p>
</ul>

<P>Before creating an instance of a component in a client application, declare an object variable as either specific or generic.</P>

<P>To create an object to access an external component:</P>

<ul>
<p><li>Use the GetObject function.</li></p>

<p><li>Use the CreateObject function.</li></p>

<p><li>Use the New keyword with a Set statement.</li></p>
</ul>

<P>Use the Object Browser to display the classes, properties, methods, events, and constants available from object libraries.</P>

<A NAME="482"><H3>Calling Win32 APIs</H3></A>

<P>You can include functionality that is not directly provided by Visual Basic by accessing the standard DLLs of the Windows Application Programming Interface (Win32 API). These DLLs let you:</P>

<ul>
<p><li>Accomplish tasks that are not possible in Visual Basic.</li></p>

<p><li>Improve the performance of your application.</li></p>

<p><li>Update independently of the application.</li></p>
</ul>

<P>You can create standard DLLs with third party development tools such as Microsoft C++.</P>

<P>The 32-bit versions of the Windows operating system (Windows 95 and Windows NT) include the User32, GDI32, and Kernel32 DLLs.</P>

<P>To use these Win32 APIs in your Visual Basic code:</P>

<OL>
<P><LI>Declare the DLL function.</LI></P>

<P><LI>Call the DLL function.</LI></P>
</ol>

<P>Some Windows API functions require a function pointer to be passed to them as an argument. These Visual Basic procedures are referred to as callback procedures. A callback procedure is a procedure that will be called by the external DLL. Visual Basic uses the AddressOf operator to pass a callback procedure to a DLL. </P>

</BODY>
</HTML>





