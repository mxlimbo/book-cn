<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Validation</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03a.htm", "ch03c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="163"><H1>Lesson 1: Overview of Validation</H1></A>

<P>Whether you're writing a simple calculator application or a complex database front end, you'll need to validate information entered by a user. This lesson examines several ways to validate input, ranging from trapping individual keystrokes to validating all fields on a form simultaneously.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the purpose of data validation.</li></p>

<p><li>Explain the two data validation techniques.</li></p>

</UL>
<b>Estimated lesson time: 10 minutes</b>
</blockquote></div></P>


<A NAME="164"><H2>The Importance of Validation</H2></A>

<P>In most applications, a user enters information for the application to process. Data validation ensures that every data value entered into your application is accurate and of a valid data type. You can use several different approaches to implement data validation in your application: user interface code, database constraints, or business rules. In this chapter, you will focus on data validation in user interface code.</P>

<P>Verifying the data type is one of the most common tasks in data validation. Data type validation answers simple questions, such as &quot;Is the string alphabetic?&quot; and &quot;Is the number numeric?&quot; Usually you can handle such simple validations with your application's user interface.</P>

<P>A well-designed application can prevent most data-entry errors. For example, when you require a numeric value, create a field that only accepts numbers; the user will be unable to enter non-numeric values. You could create an application that calculates the cost of goods sold based on income and expense values entered by a user; a field for inventory cost would require a numeric value. You would want to prevent users from entering alphabetic characters in this case. Setting up your application to accept the proper information from the user can prevent logic errors in calculations, and can even prevent run-time errors such as type mismatch (Visual Basic run-time error number 13).</P>


<A NAME="165"><H2>Types of Validation</H2></A>

<P>In Visual Basic, you can choose two different methods to handle data validation:</P>

<UL>

<p><li>Form-level validation</li></p>

<P>Form-level validation verifies data after all fields on a form have been completely filled in by a user. For example, a customer entry form requires a user to fill in a name, an address, a phone number, a city, a state, and a zip code. The user must fill in all fields and then click an OK button before validation verifies the data in each field.</P>

<p><li>Field-level validation</li></p>

<P>Field-level validation verifies the data in each field one at a time, as each field is filled in. For example, a user types in a value for a zip code field on a customer entry form. The moment the user types in the information or before the user moves to another field on the form, validation of the zip code field takes place. In in this example, you could use the Change event for the TextBox control to verify that the zip code value was numeric.</P>

</UL>


<A NAME="166"><H2>Providing User Feedback</H2></A>

<P>When users type invalid data into fields on your form, give them an audio and/or visual cue to notify them of the invalid entry. How you handle this depends on the validation technique you choose to implement. If you use form-level validation, you can display a custom form that lists any data entry errors. For example, if a user enters an invalid zip code and forgets to type a value for a city field on a customer entry form, you could display a separate form that lists the two data entry errors.</P>

<P>With field-level validation, you can use audio cues to communicate errors. For example, if a user enters alpha characters into a zip code field that requires a numeric value, you can use the Visual Basic Beep statement as an audio cue. In addition, you can display a message box or use a StatusBar control to display the error description, as shown in the following example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Not IsNumeric(txtZipCode.Text) Then
     'Audio cue
     Beep
     'Visual cue
     StatusBar1.Panels(&quot;ErrorDescription&quot;).Text = _
          &quot;Zip code must be numeric.&quot;
End If
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="167"><H2>Using the SetFocus Method</H2></A>

<P>Focus is an object's ability to receive user input through a mouse or keyboard. In Microsoft Windows, although several applications can be running simultaneously, only one application has focus; it has an active title bar and can receive user input. On a Visual Basic form with several text boxes, only the text box with focus can receive input through the keyboard. When you set focus to a control, the GotFocus event for that control fires, and the LostFocus event fires for the control that previously had focus. Forms and most controls support these events.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE>
<B>NOTE</B><HR>
Some controls, such as the Frame, Line, Image, and Label controls, cannot receive focus. Additionally, controls that are invisible at run time, such as the Timer control, cannot receive focus.
</BLOCKQUOTE></DIV>
</P>

<P>With both form-level and field-level validation, always set focus back to the field that contains invalid data. For example, if a user types an invalid zip code into a TextBox, use the SetFocus method to place the cursor on the TextBox to allow the user to make corrections, as in the following example:</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
If Not IsNumeric(txtZipCode.Text) Then
     Beep
     StatusBar1.Panels(&quot;ErrorDescription&quot;).Text = _
          &quot;Zip code must be numeric.&quot;

     'Set the focus back to the zip code field
     txtZipCode.SetFocus
End If
</PRE>
</TD></TR></TABLE>
</P>

<P>If more than one field contains invalid data, set focus to the field that was entered incorrectly first. For example, suppose a form is to be filled out by a user in this order:</P>

<OL>

<P><LI>Name</LI></P>

<P><LI>Phone number</LI></P>

<P><LI>City</LI></P>

<P><LI>State</LI></P>

<P><LI>Zip code</LI></P>

</OL>

<P>If both the phone number and zip code contain invalid data, focus should be set to the phone number first. This will allow the user to review all input in the appropriate order.</P>


<A NAME="168"><H2>Using the LostFocus Event </H2></A>

<P>The LostFocus event occurs when an object loses focus. Losing focus is a result of a user action, such as tabbing to another field or clicking another object. Furthermore, you can change focus between controls programmatically by using the SetFocus method. It is possible to use the LostFocus event procedure to validate the data in a field. However, this validation technique can result in an infinite loop where one or more controls are using the SetFocus method in the LostFocus event. The following code uses the LostFocus event to validate the data contained in the txtZipCode field.</P>

<P>
<TABLE CELLPADDING=5 WIDTH ="95%">
<TR><TD>
<PRE>
Private Sub txtZipCode_LostFocus()
     If Not IsNumeric(txtZipCode.Text) Then
          'Audio cue
          Beep
          'Visual cue
          StatusBar1.Panels(&quot;ErrorDescription&quot;).Text = _
               &quot;Zip code must be numeric.&quot;
          txtZipCode.SetFocus
     End If
End Sub
</PRE>
</TD></TR></TABLE>
</P>


<A NAME="169"><H2>Lesson Summary</H2></A>

<P>Data validation ensures that every value that the user enters into your application is accurate. Visual Basic provides two data validation methods:</P>

<UL>

<p><li>Form-level validation takes place after a user has filled in all fields on a form.</li></p>

<p><li>Field-level validation takes place as each field on a form is filled in.</li></p>

</UL>

<P>When a user types invalid data into fields on your form, you should provide an audio and/or visual notification of the invalid data entry. With either form-level or field-level validation, you should always set focus back to the field that contains invalid data. For example, if a user types an invalid zip code into a TextBox use the SetFocus method to place the cursor in the zip code TextBox to allow the user to make corrections.</P>


</BODY>
</HTML>





