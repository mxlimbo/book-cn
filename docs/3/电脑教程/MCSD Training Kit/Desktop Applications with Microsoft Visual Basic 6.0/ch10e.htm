<HTML>
<HEAD>
<TITLE>Lesson 4: Using the Visual Component Manager</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10d.htm", "ch10f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="548"><H1>Lesson 4: Using the Visual Component Manager</H1></A>

<P>Component-based software development is a popular methodology used to build complex business applications. Instead of having to re-develop similar code routines for every application, developers of component-based applications can simply utilize existing components that contain the needed functionality. If a component does not already exist, it can be written once and then cataloged for future reuse and sharing with other applications.</P>

<P>With Visual Component Manager you can publish components to a repository-based catalog, where they can easily be located, inspected, retrieved, and reused. In this lesson you will learn the basic features of the Visual Component Manager.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>

<UL>
<p><li>Explain the purpose the Visual Component Manager.</li></p>
<p><li>Describe how to add a component from the Visual Component Manager into your Visual Basic Project.</li></p>
</UL>

<b>Estimated lesson time: 45 minutes</b>
</BLOCKQUOTE></DIV></P>

<A NAME="549"><H2>Overview of Visual Component Manager </H2></A>

<P>The biggest challenge of component-based development is managing all the separate components. Within a single application you may have hundreds or even thousands of separate components. Furthermore, you can use each of these components in various places in the program. You can also reuse many components in other applications. Locating the right component when you need it can save enormous development time and effort. </P>

<P>Visual Component Manager addresses the three main requirements for storing and organizing components: publishing, finding, and reusing them. It provides a single source to organize, find, and insert components into your project. It can also be the centralized location for approved project programming conventions, functional specifications, and architectural models and diagrams.</P>

<P>Visual Component Manager provides a single location for anything that can be added to a project. It allows you to catalog components, find them easily using flexible search criteria, and insert them into your project with point-and-click ease.</P>

<P>For example, you might create a template for a standard form used in all the accounting applications at the company, or a standard tax-calculation object that can be used in many applications. Cataloging these components on a shared repository database provides an easy way for all of the organization's developers to find and use the components. It also provides a convenient method of documenting information about components. </P>

<P>In addition to single components, Visual Component Manager can also store component libraries, templates, models, and complete application frameworks. For example, a tool developer might create a set of forms and basic modules that are the starting point for new forms and modules of the same type. By creating a template and storing it in Visual Component Manager, any developer can get a copy of the forms or modules, then add to them or change them without affecting the original. </P>

<P>Programmers often create modules that contain &quot;utility&quot; functions, which are used frequently. Storing such modules in Visual Component Manager provides an easy way to find and reuse such modules.</P>

<P>You can also associate additional files with components. A particular component may require the presence of additional support files such as .dll files, Help files, or documentation. With Visual Component Manager, you can associate multiple files with any component. This association becomes a part of the component item's properties in Visual Component Manager, and the associated files can be loaded along with the item.</P>

<P>When you use it in this way, Visual Component Manager can also be the central location for approved project programming conventions, functional specifications, architectural models, and diagrams.</P>

<P>Visual Component Manager provides a simple user interface to navigate through its contents, as well as a toolbar to quickly select the most common Visual Component Manager tasks. By default, it presents the three panes (the explorer, and the contents and properties panes) as illustrated in Figure 10.13. </P>

<P>
<A HREF="javascript:fullSize('F10xx13x.htm')"> <img src="images/F10xx13.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.13</B> <i>The three panes of the Visual Component Manager Explorer</i>  <!--/caption-->
</P>


<A NAME="550"><H3>The Explorer Pane</H3></A>

<P>The explorer pane shows a hierarchical view of the repository databases currently loaded into Visual Component Manager, along with the folders and subfolders within each. Clicking on the small plus (+) sign to the left of any repository or folders expands the view to show the folders it contains. </P>

<P>You can hide the explorer and properties panes by clicking the toolbar buttons. The contents pane is always visible.</P>

<A NAME="551"><H3>The Contents Pane</H3></A>

<P>The contents pane displays the folders and items contained within the database or folder that is currently selected in the explorer pane. At the lowest level, the items displayed are components that have been published to Visual Component Manager.</P>

<A NAME="552"><H3>The Properties Pane</H3></A>

<P>The properties pane displays a list of all the properties and values assigned to the folder or item currently selected in the contents pane. At the component level, these properties include the component name, description, search keywords, and other identifying information about the component. The properties pane also doubles as a browse pane to display object hierarchies for COM objects when you click Browse Details on the shortcut menu.</P>

<A NAME="553"><H2>Installing and Starting Visual Component Manager</H2></A>

<P>Visual Component Manager is automatically installed when you install Microsoft Visual Basic. However, you must first add Visual Component Manager to the toolbar to access it.</P>

<A NAME="554"><H3><li>To add Visual Component Manager to the Visual Basic toolbar</li></H3></A>
<OL>
<P><LI>On the Visual Basic <B>Add-ins</B> menu, click <B>Add-in Manager</B>.</LI></P>

<P><LI>In the add-ins list, scroll down and click <B>Visual Component Manager</B>. </LI></P>

<P><LI>Under <B>Load Behavior</B>, click the <B>Load on Startup</B> check box.</LI></P>

<P><LI>Click <B>OK</B> to add Visual Component Manager to the Visual Basic toolbar. </LI></P>
</OL>

<A NAME="555"><H3><li>To start Visual Component Manager from Visual Basic</li></H3></A>
<ul>
<p><li>On the Visual Basic toolbar, click the <B>Visual Component Manager</B> icon, as illustrated in Figure 10.14.</li></p>

<P>
<img src="images/F10xx14.GIF" width=395 height=109 border="0">
</P><P>
<!--caption--><B>Figure 10.14</B> <i>Accessing Visual Component Manager from the Visual Basic toolbar</i><!--/caption-->
</P>


<P>&#8211;or &#8211;</P>
<p><li>On the <B>View</B> menu, click <B>Visual Component Manager</B>.</li></p>
</ul>

<A NAME="556"><H2>Publishing Components</H2></A>

<P>Publishing a component means storing it in a Visual Component Manager repository database, along with attributes and search keywords that will make it easy for others to find and reuse it.</P>

<P>When you publish a component, you add it to a Microsoft Repository database. This can be a local (Microsoft Access) database on your own workstation, or it can be a shared Microsoft SQL Server database on a network server. A shared database gives everyone who has access to that server the ability to find and reuse your component.</P>

<P>To optimize Visual Component Manager's search capability, use careful thought and consideration when you publish a component. Enter the keywords most likely to describe the component to someone looking for it, such as describing its functionality.</P>

<P>The keyword scheme also lets you group and categorize components hierarchically. For example, Accounting components might be further subdivided with keywords such as Accounts Receivable, Payroll, etc. If you define keywords to match both the larger category and the subcategories, a user can find either all items with the Accounting keyword, or just a subset&#8212;with the Payroll keyword, for example.</P>

<P>To provide good examples of well-indexed component entries, Visual Component Manager allows you to install entries for all controls, templates, forms, and other components supplied by Microsoft Visual Basic. You have this option when you first run Visual Component Manager from within Visual Basic. Useful descriptions and keywords already exist, letting you find the component or tool you are looking for; you can then launch it or add it to your project with a click of the mouse.</P>

<P>Visual Component Manager provides three ways to publish items to the repository database: </P>
<ul>
<p><li>Select a component in the Windows Explorer and drag it to a folder in the Visual Component Manager.</li></p>

<p><li>Select a project in your development environment and click Publish on the project's shortcut menu.</li></p>

<p><li>Click New on the Visual Component Manager shortcut menu.</li></p>
</ul>

<P>Each of these methods opens the Visual Component Manager Publish Wizard, which takes you step by step through the process of publishing a component for reuse. By filling in the requested information, you tell Visual Component Manager where and how to store the component. In addition, you tell Visual Component Manager how to manage its interaction with the Visual Studio and other development environments, and how to identify it with keywords and search attributes so it can be easily located by other developers who wish to reuse it.</P>

<P>When you use the Visual Component Manager Publish Wizard to publish your components, you enter the following information:</P>

<ul>
<p><li>Component Name</li></p>
<P>Type the name that will appear in the contents pane to identify the component.</P>

<p><li>Primary File Name</li></p>
<P>Type the name of the primary component file. For example, if you are publishing an ActiveX control, the primary filename will be the .ocx file that encapsulates the control.</P>

<p><li>Type</li></p>
<P>Select the type of component you are publishing. This determines the handler assigned to the component for purposes of interacting with the tools environment and operating system, as well as providing a useful search criterion.</P>

<p><li>Author</li></p>
<P>Type the name of the person who wrote the component being published.</P>

<p><li>The component includes</li></p>
<p>Select the check box next to each kind of additional support file you want to publish along with the component. The options include:</p>

<ul>
<P><LI>Sample code</LI></P>
<P><LI>Source code</LI></P>
<P><LI>Documentation</LI></P>
<P><LI>Help file</LI></P>
</ul>

<p><li>More Properties</li></p>
<p>Type a verbal description and search keywords for the component you are publishing. A clear description and well-chosen keywords makes it easier for others to find your component and thus use your component.</p>
<ul>
<P><LI>Description</LI></P>
<p>Type a textual description of the component. The more detail you enter here, the better. A description of the component's suggested use, interfaces, inputs and outputs, and similar information make it easier for other developers to reuse the component.</p>

<P><LI>Keywords</LI></P>
<p>Type the keywords or click Add to insert keywords from a list of keywords that have previously been used in your database. To insert new keywords, click on the plus (+) sign in the Add a Keyword dialog box.</p>
</ul>

<p><li>Select Additional File(s)</li></p>
<P>Type the names of all the files that will be published as a part of the component, in addition to the primary file already listed. If the Publish Wizard has been launched from a project, the project files will be automatically included in the list, and you may add other files as well.</P>

<p><li>COM Registration</li></p>
<P>Specify which files, if any, Visual Component Manager must register for COM on the user's computer when this component is reused.</P>
</UL>

<P>When you click Finish, the wizard publishes the component to Visual Component Manager.</P>

<A NAME="557"><H2>Finding Components</H2></A>

<P>Visual Component Manager's flexible keyword and search mechanism helps organize and cross-reference components. You can search for components by the component name, type, description, keywords, and annotations. With full text search capability, you can find components even if you don't know the exact component name.</P>

<A NAME="558"><H3><li>To find an item in Visual Component Manager </li></H3></A>
<OL>
<P><LI>Click the <B>Find</B> button on the <B>Visual Component Manager</B> toolbar.</LI></P>

<P><LI>In the <B>Find Items</B> in <B>Visual Component Manager</B> dialog box, click the <B>Description</B> tab.</LI></P>

<P><LI>In the <B>Named</B> box, type the name of the component you want to find.</LI></P>
<P>You can also use the * wildcard character to represent any string. For example, ACCT* will find all components with names that begin with ACCT.</P>

<P><LI>In the <B>Containing</B> text box, type one or more keywords or search strings.</LI></P>
<P>If you enter more than one word, Visual Component Manager finds all components containing one or more of the keywords. You can also place quotation marks around one or more words to use the entire string as a search criterion. You can use the wildcard character * to represent any character string.</P>

<P><LI>In the <B>Of Type</B> list, specify the type of item you wish to search for.</LI></P>

<P><LI>Click the appropriate check box to select the areas to search for the specified text: <B>Keywords</B>, <B>Description</B>, and/or <B>Annotations</B>.</LI></P>

<P><LI>Click the <B>History</B> tab to narrow the search by specifying the author or person who last updated the component, publication dates, and history.</LI></P>

<P><LI>Click the <B>Related Files</B> tab to specify components that include sample code, source code, documentation, or Help files, as well as items with a specific name.</LI></P>

<P><LI>Click <B>Find Now</B> to begin the search.</LI></P>

<P>All items in the repository database that meet the search criteria are listed in the dialog box's <B>Results</B> pane as illustrated in Figure 10.15. See the <B>Description</B> tab (<B>Find Items</B> in the <B>Visual Component Manager</B> dialog box) for detailed information about each of the search options.</P>
</ol>

<P>
<A HREF="javascript:fullSize('F10xx15x.htm')"> <img src="images/F10xx15.JPG" width=404 height=308 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.15</B> <i>The Find dialog box's Results pane</i>  <!--/caption-->
</P>


<A NAME="559"><H2>Reusing Components</H2></A>

<P>The Visual Component Manager provides several ways to reuse files and components in your Visual Basic projects. You can also reuse components, documents, specifications, and other items, although you will not directly interact with these tools. In these cases, the components are copied from the Visual Component Manager database to your local hard disk, and COM components are registered in your system registry. </P>

<P>When you locate a component you need, reusing it in your current project is usually as simple as clicking Add to project on the component's shortcut menu. When you select components that must be registered, Visual Component Manager automatically registers the component for you when adding it to your project.</P>

<A NAME="560"><H3><li>To add a Visual Component Manger item to your Visual Basic project</li></H3></A>
<OL>
<P><LI>With Visual Basic running, locate and select the desired component item in the Visual Component Manager explorer or contents pane.</LI></P>

<P><LI>Right-click on the component, then click <B>Add to Project Group</B> as illustrated in Figure 10.16</LI></P>
</ol>
<P>
<A HREF="javascript:fullSize('F10xx16x.htm')"> <img src="images/F10xx16.JPG" width=404 height=268 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 10.16</B> <i>Adding a component to a project using the Visual Component Manager</i>  <!--/caption-->
</P>


<A NAME="561"><H2>Lesson Summary</H2></A>

<P>You can reuse many components in other applications. You can save significant development time and effort if you can locate the right component when you need it. With Visual Component Manager, you can publish components to a repository-based catalog, where they can easily be located, inspected, retrieved, and reused. Visual Component Manager addresses the three main requirements for storing and organizing components: publishing, finding, and reusing them. It provides a single source to organize, find, and insert components into your project. It can also be the centralized location for approved project programming conventions, functional specifications, and architectural models and diagrams. </P>

<P>The Visual Component Manager Publish Wizard takes you step by step through the process of publishing a component for reuse. By filling in the requested information, you let Visual Component Manager know where and how to store the component. In addition, you let Visual Component Manager know how to manage its interaction with the Visual Studio and other development environments, and how to identify it with keywords and search attributes so it can be easily located by other developers who wish to reuse it.</P>

</BODY>
</HTML>





