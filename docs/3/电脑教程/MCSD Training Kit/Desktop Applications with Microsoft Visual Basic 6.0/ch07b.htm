<HTML>
<HEAD>
<TITLE>Lesson 1: How Visual Basic Accesses Data</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07a.htm", "ch07c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="336"><H1>Lesson 1: How Visual Basic Accesses Data</H1></A>

<P>Almost all applications require some form of data access. For stand-alone desktop applications, local data access is typically easy to implement with little or no programming effort. For enterprise applications, data access is considerably more complex, often involving remote databases with different data formats and storage mechanisms.</P>

<P>As a developer, you will have to decide which data access technology you should use to build an application. The data access technologies provided by Visual Basic typically reduce development time, simplify code, and yet still provide high performance while exposing many features.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe the three data access interfaces available in Visual Basic.</li></p>

<p><li>Explain the difference between using Jet and using ODBCDirect in DAO.</li></p>

<p><li>Explain why you should use ADO as your data access method.</li></p>

</UL>
<b>Estimated lesson time: 25 minutes</b>
</blockquote></div></P>

<A NAME="337"><H2>Data Access Interfaces</H2></A>

<P>A data access interface is an object model that represents various facets of accessing data. In Visual Basic, three data access interfaces are available to you: ActiveX Data Objects (ADO), Remote Data Objects (RDO), and Data Access Objects (DAO). Using Visual Basic, you can programmatically control connecting to the database, retrieving records, and changing the value of records.</P>

<P>While you may use any of the three data access technologies to interact with a database, ADO is the newest and most powerful. However, it is important to understand where DAO and RDO fit in the overall Visual Basic data access strategy. For example, you may be required to upgrade an existing RDO-based application to use ADO for data access. Likewise, many Visual Basic programs still use the original DAO technology. These applications will eventually need to migrate to ADO in order to provide more advanced functionality.</P>

<A NAME="338"><H3>Data Access Objects</H3></A>

<P>The first data access technology introduced in Visual Basic was DAO. DAO lets you access and manipulate data in local or remote databases and manage the structure of certain types of databases. DAO provides a hierarchical object model, which makes using DAO easy. DAO supports two basic ways to access data. You choose between these ways based on the type of database your application will connect to.</P>

<ul>
<p><li>Microsoft Joint Engine Technology (Jet) allows you to access data in desktop data sources, such as Microsoft Access, FoxPro, Paradox, or Lotus 1-2-3.</li></p>

<p><li>ODBCDirect allows you to access remote database servers without using the Microsoft Jet database engine. This provides better performance and also requires less memory.</li></p>
</ul>

<P>ODBCDirect is part of the DAO 3.5 object library, and is an extension to DAO, not a separate technology. ODBCDirect actually uses RDO to access remote databases. DAO 3.5 ships with Microsoft Access 97, Visual Basic 5.0 or later, Microsoft Office 97, and Visual C++ 5.0 or later.</P>

<P>The biggest limitation to DAO is the fact it was not designed to connect to remote databases, such as in a client/server environment. While ODBCDirect provides this functionality, it is not very efficient. In addition, DAO was only designed to work with databases, and cannot access other sources, such as an e-mail system.</P>

<A NAME="339"><H3>Remote Data Objects</H3></A>

<P>Unlike DAO, which is designed to access desktop databases, RDO provides an object model for accessing remote data. The RDO programming model is similar to the DAO model, except that it is designed to work with client/server databases rather than desktop databases. RDO takes advantage of intelligent database servers that use sophisticated query engines, such as SQL Server and Oracle. More emphasis is therefore placed on using compiled queries that are stored in the database and utilizing server functionality.</P>

<P>RDO was designed to give Visual Basic developers the ability to access remote data without having to code to the open database connectivity (ODBC) application programming interface (API).</P>

<P>The ODBC API is a component of Microsoft Windows implemented to provide a standard, open, vendor-neutral way of accessing data stored in a variety of proprietary personal computer, minicomputer, and mainframe computer databases. RDO is a programming interface to the ODBC API and provides most of the functionality of ODBC in the form of an object model. RDO ships with the Enterprise Editions of Visual Basic, Visual C++, and Microsoft Visual Studio.</P>

<P>RDO is limited in that it does not access desktop databases very efficiently and can access relational databases only through existing ODBC drivers. In addition, RDO does not meet the needs of Internet developers, who must access special types of data in addition to traditional relational sources, as ADO does. </P>

<A NAME="340"><H3>ActiveX Data Objects</H3></A>

<P>ADO is Microsoft's newest data access technology and is an interface to OLE DB. OLE DB is Microsoft's strategic low-level interface to all types of data. This concept is called Universal Data Access (UDA). For example, OLE DB and ADO provide developers the same interface to not only access data from relational and nonrelational databases, but also other data sources, such as e-mail, file systems, project management tools, spreadsheets, and custom business objects. OLE DB has been designed to build on the success of ODBC by providing an open standard for accessing all kinds of data. However, OLE DB does not use, nor require, ODBC. It effectively replaces the ODBC layer. Because of OLE DB, you can build solutions that span desktop, midrange, mainframe, and Internet technologies using a variety of data stores.</P>

<P>With the release of Visual Basic 6, and ADO version 2.0, Microsoft now recommends the use of ADO for all data access. If you are developing a new application, you should definitely use ADO. If you're considering migration to ADO, you have to decide if characteristics and benefits of ADO are enough to justify the cost of converting existing software. Older code written in RDO and DAO will not automatically convert to ADO code. However, whatever solutions you previously developed using other data access strategies, it can definitely be implemented using ADO. Eventually, you should convert to ADO because it features a simpler&#8212;yet more flexible&#8212;object model than either RDO or DAO. In addition, other development tools can use ADO. For example, if you want to build a Web-based front-end to a database using the Active Server Pages (ASP) technology, the same code you would use in a Visual Basic application can be used in ASP.</P>

<A NAME="341"><H2>Relational Database Concepts</H2></A>

<P>In this chapter, you will use ADO to work with a relational desktop database. In order to do this, you must have a basic understanding of a relational database model. The relational model is the standard for database design. The database stores and presents data as a collection of tables. A structure is defined by establishing relationships between tables; this links data in the database instead of modeling the relationships of the data according to the way it is physically stored. The relational database model offers the following benefits:</P>

<ul>
<p><li>Organizes data in a collection of tables making the design easy to understand.</li></p>

<p><li>Provides a relationally complete language for data definition, retrieval, and update. It is nonprocedural and criteria-based. </li></p>

<p><li>Provides data integrity rules that define consistent states of the database to improve data reliability. </li></p>
</ul>

<P>A relational database management system (RDBMS) is software that allows you to represent your data according to the relational model. Relational databases support a standard language called Structured Query Language (SQL). SQL has evolved into a comprehensive language for controlling and interacting with a database management system (DBMS). SQL is a standard approved by the American National Standards Institute (ANSI). The Northwind database (Nwind.mdb) is a sample relational database that is included with Microsoft Access and Visual Basic.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Structured Query Language is discussed in detail in <a href="ch07d.htm">Lesson 3</a>.
</blockquote></div></p>

<A NAME="342"><H3>Tables</H3></A>

<P>The relational database model presents data as a collection of tables. A table is a logical grouping of related information. For example, the Northwind database has a table that lists all of the employees and another table that lists all the customer orders. Tables are made up of rows and columns. Rows are often referred to as records and columns are referred to as fields. Figure 7.1 shows the Employees table from the Northwind database.</P>

<P>
<img src="images/F07xx01x.gif" width=426 height=249 border=0>
</P><P>
<!--caption--><B>Figure 7.1</B> <i>The Employees table from the Northwind database</i>  <!--/caption-->
</P>


<A NAME="343"><H3>Records</H3></A>

<P>A record contains information about a single entry in a table. For example, a record in an Employees table would contain information on a particular employee. </P>

<A NAME="344"><H3>Fields</H3></A>

<P>A record is composed of multiple fields. Each field in a record contains a single piece of information about the record. For example, an Employee record has fields for Employee ID, Last Name, First Name, and so forth.</P>

<A NAME="345"><H3>Keys</H3></A>

<P>To uniquely identify a row, each table should have a primary key. The primary key is a field, or combination of fields, whose value is unique for each row, or record, in the table. For example, the Employee ID field is the primary key for the Employees table. No two employees can have the same ID.</P>

<P>A table can also contain fields that are foreign keys. A foreign key &quot;points to&quot; a primary key field in a related table. For example, in the Northwind database, the Orders table contains a Customer ID field. Each Customer ID in the Orders table identifies which customer made the order.</P>

<P>The relationship between the Orders and Customers table is a one-to-many relationship&#8212;that is, each customer may have more than one order. Figure 7.2 illustrates how one customer can have many orders.</P>

<P>
<img src="images/F07xx02.GIF" width=305 height=239 border=0>
</P><P>
<!--caption--><B>Figure 7.2</B> <i>Relationship between an Orders and Customers table</i>  <!--/caption-->
</P>


<A NAME="346"><H2>Lesson Summary</H2></A>

<P>As a developer, you will have to decide which data access technology you should use to build an application. The data access technologies provided by Visual Basic typically:</P>

<ul>
<p><li>Reduce development time </li></p>

<p><li>Simplify code </li></p>

<p><li>Provide high performance while exposing many features</li></p>
</ul>

<P>A data access interface is an object model that represents various facets of accessing data. In Visual Basic, three data access interfaces are available to you: </P>

<ul>
<p><li>ActiveX Data Objects (ADO) </li></p>

<p><li>Remote Data Objects (RDO)</li></p>

<p><li>Data Access Objects (DAO)</li></p>
</ul>

<P>Visual Basic uses a relational database model. The relational database model presents data as a collection of tables. A table is a logical grouping of related information.</P>

<ul>
<p><li>Each record in a table contains information about a single entry in the table. A record is composed of multiple fields. </li></p>

<p><li>Each field in a record contains a single piece of information about the record. </li></p>

<p><li>To uniquely identify a row, each table should have a primary key. The primary key is a field or combination of fields whose value is unique for each record in the table. </li></p>

<p><li>A table can also contain fields that are foreign keys. A foreign key &quot;points to&quot; a primary key field in a related table.</li></p>
</ul>


</BODY>
</HTML>





