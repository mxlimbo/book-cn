<HTML>
<HEAD>
<TITLE>Lesson 1: Debugging Your Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04a.htm", "ch04c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="212"><H1>Lesson 1: Debugging Your Application</H1></A>

<P>Because programs today are large and complex, a certain number of errors are inevitable. Even very careful programmers have errors once in a while. Program errors are referred to as bugs, and finding and removing these bugs is called debugging. In this lesson we discuss the kinds of errors that your program can have and ways to step through the lines of code to discover where these errors occur. </P>


<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>
<p><li>Describe the types of errors that can occur in a Visual Basic application.</li></p>

<p><li>Explain the three modes in which you work while developing a Visual Basic application.</li></p>

<p><li>Explain the use of these tools from the <B>Debug</B> menu and toolbar:</li></p>
<ul>
<P><LI>Step Into</LI></P>

<P><LI>Step Over</LI></P>

<P><LI>Step Out</LI></P>

<P><LI>Set Next Statement</LI></P>

<P><LI>Show Next Statement</LI></P>

</UL></UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="213"><H2>Types of Errors</H2></A>

<P>In a Visual Basic program, three different types of errors can occur: syntax errors, run-time errors, and logic errors. When you encounter a syntax error or a run-time error, you can use the Visual Basic online Help resource to aid you in determining the cause. When a run-time error dialog box appears, you can click the button to bring up online Help. With a syntax error, simply place the insertion point on the statement, or keyword, that you need help with and press F1. Finding and fixing logic errors, however, can be much more complicated.</P>

<A NAME="214"><H3>Syntax Errors</H3></A>

<P>A syntax error occurs in code when a statement is constructed incorrectly. Examples of syntax errors include an incorrectly typed keyword, omission of required punctuation, or an incorrect construct (such as an If keyword on a line without a conditional operator).</P>

<P>The following example shows a syntax error in an If&#8230;Then statement:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim intCount As Integer
If intCount = 0 MsgBox &quot;Bad number&quot;
</PRE></TD></TR></TABLE></P>
<P>If is a valid word in the Visual Basic language, but without a then, it doesn't meet the syntax requirements.</P>

<P>Visual Basic includes an Auto Syntax Check option that can detect syntax errors as you type in a statement. With this option enabled, Visual Basic interprets your code as you enter it. When an expected part of the syntax is not found, Visual Basic highlights the incorrect statement and displays a message box explaining the error. </P>

<P><LI><B>To set or clear the Auto Syntax Check option</B></LI></P>

<OL>
<P><LI>On the <B>Tools</B> menu, click <B>Options</B>.</LI></P>

<P><LI>On the <B>Options</B> dialog box, click the <B>Editor</B> tab.</LI></P>

<P><LI>Click <B>Auto Syntax Check</B>.</LI></P>
</OL>

<P>If you have selected the Auto Syntax Check option when you have a syntax error, Visual Basic displays an error message as soon as you move to a new line in the Code window, as shown in Figure 4.1.</P>

<P>
<img src="images/F04xx01.GIF" width=194 height=126 border="0">
</P><P>
<!--caption--><B>Figure 4.1</B> <i>Compile error message box</i>  <!--/caption-->
</P>


<A NAME="215"><H3>Run-Time Errors</H3></A>

<P>Another type of error is the run-time error. Run-time errors occur while the application is running and are detected by Visual Basic when the statement attempts an operation that is impossible to carry out. Run-time errors are especially important to plan for since they can be detected by the user.</P>

<P>An example of this is division by zero:</P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim sngYearlyWage As Single
Dim sngHourlyWage As Single
Dim sngHours As Single
sngYearlyWage = 55000
sngHours = 0
sngHourlyWage = sngYearlyWage / sngHours
</PRE></TD></TR></TABLE></P>

<P>The variable sngHours contains zero, making the division an invalid operation, even though the statement itself is syntactically correct. The application must run before it can detect this error.</P>

<P>You can include code in your application to trap and handle run-time errors when they occur. Chapter 5 discusses the methods available for trapping these types of errors.</P>

<A NAME="216"><H3>Logic Errors</H3></A>

<P>The third type of error is the logic error. Logic errors occur when your code does not perform the way that you intended. These errors can be especially difficult to find because an application can run without performing any invalid operations and still produce incorrect results. The way to verify that your application does not have logic errors is to run test data through the program and analyze the results. Logic errors, like run-time errors, can occur when the user is interacting with the application.</P>

<A NAME="217"><H2>The Debug Menu (Toolbar)</H2></A>

<P>Visual Basic has primarily three modes that you work in when developing an application: design mode, run mode, and break mode. </P>
<UL>
<p><li>Design mode lets you customize forms and write code. The program has not been compiled yet and is not running. </li></p>

<p><li>Run mode lets you check the execution of your program's code, but no statements can be changed in this mode. </li></p>

<p><li>Break mode halts the application, and gives you an opportunity to check the condition of your program at that moment. However, the program has not terminated. It is only suspended, allowing you to look around at the current &quot;frozen&quot; state of the application. Break mode is critical when debugging an application.</li></p>
</UL>

<A NAME="218"><H3>Using Break Mode</H3></A>

<P>To aid you in identifying logical errors, Visual Basic allows you to execute your code one statement at a time. You can also view the value of one or more variables or control properties. To do this you must first enter into break mode to get to your code window. </P>

<P>Visual Basic switches to break mode under the following circumstances:</P>

<UL>
<p><li>You choose one of the Step options from the Debug menu or toolbar.</li></p>

<p><li>Execution reaches a line that contains a breakpoint. You set a breakpoint by selecting the line where the break should occur and clicking the Toggle Breakpoint button. </li></p>

<p><li>Execution reaches a Stop statement. </li></p>

<p><li>A break expression defined in the Add Watch dialog box changes or becomes true. </li></p>

<p><li>An untrapped run-time error occurs. </li></p>
</UL>

<P>Once your program is placed in break mode, you can use the debugging tools to step through your code either one statement at a time or in blocks of code. The following table lists features of the Debug menu and toolbar:</P>
<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH>Feature</TH>
<TH>Action</TH>
<TH>Shortcut key</TH>
<TH>Description</TH></TR>
<TR>

<TD VALIGN="TOP"><img src="images/F04xxStart.GIF" width=30 height=30 border="0"> 
</TD>
<TD VALIGN="TOP">Start
</TD>
<TD VALIGN="TOP">F5
</TD>
<TD VALIGN="TOP">Runs the application from the startup form (or Sub Main) specified on the General tab of the Project Properties dialog box. If in break mode, the Start button changes to Continue.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxBreak.GIF" width=30 height=30  border="0"> 
</TD>
<TD VALIGN="TOP">Break
</TD>
<TD VALIGN="TOP">CTRL+BREAK
</TD>
<TD VALIGN="TOP">Stops execution of a program temporarily. Click the Continue button to resume running the program.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxEnd.GIF" width=30 height=30 border="0"> 
</TD>
<TD VALIGN="TOP">End
</TD>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Stops running the program and returns to design mode.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxToggBreakPnt.GIF" width=30 height=30  border="0"> 
</TD>
<TD VALIGN="TOP">Toggle Breakpoint
</TD>
<TD VALIGN="TOP">F9
</TD>
<TD VALIGN="TOP">Creates or removes a breakpoint.  
  A breakpoint is a place in the code where Visual Basic automatically halts execution and enters break mode.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxStepInto.GIF" width=30 height=30  border="0"> 
</TD>
<TD VALIGN="TOP">Step Into
</TD>
<TD VALIGN="TOP">F8
</TD>
<TD VALIGN="TOP">Runs the next executable line of code, stopping at the next executable line of code that follows. If the next executable line of code calls another procedure, Step Into stops at the beginning of that procedure.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxStepOver.GIF" width=30 height=30  border="0"> 
</TD>
<TD VALIGN="TOP">Step Over
</TD>
<TD VALIGN="TOP">SHIFT+F8
</TD>
<TD VALIGN="TOP">Runs the next executable line of code, stopping at the next executable line of code that follows. If the next executable line of code calls another procedure, the procedure runs completely before stopping at the next executable line of code in the first procedure.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxStepOut.GIF" width=30 height=30  border="0">
</TD>
<TD VALIGN="TOP">Step Out
</TD>
<TD VALIGN="TOP">CTRL+SHIFT+F8
</TD>
<TD VALIGN="TOP">Executes the remainder of the current procedure and breaks at the next executable line of code in the calling procedure.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxLocalWind.GIF" width=30 height=30  border="0">
</TD>
<TD VALIGN="TOP">Locals Window
</TD>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Displays the Locals window.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxImmediateWin.GIF" width=30 height=30   border="0">
</TD>
<TD VALIGN="TOP">Immediate Window
</TD>
<TD VALIGN="TOP">CTRL+G
</TD>
<TD VALIGN="TOP">Displays the Immediate window.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxWatchWind.GIF" width=30 height=30  border="0"> 
</TD>
<TD VALIGN="TOP">Watch Window
</TD>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Displays the Watches window.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxQuickWatch.GIF" width=30 height=30  border="0">
</TD>
<TD VALIGN="TOP">Quick Watch
</TD>
<TD VALIGN="TOP">SHIFT+F9
</TD>
<TD VALIGN="TOP">Displays the Quick Watch dialog box with the current value of the selected expression.
</TD></TR>
<TR>
<TD VALIGN="TOP"><img src="images/F04xxCall%20Stack.GIF" width=30 height=30  border="0">
</TD>
<TD VALIGN="TOP">Call Stack
</TD>
<TD VALIGN="TOP">CTRL+L
</TD>
<TD VALIGN="TOP">Displays the Calls dialog box, which lists the currently active procedure calls&#8212;procedures in the application that have started but are not completed.
</TD></TR>
<TR>
<TD VALIGN="TOP">(Menu Item)
</TD>
<TD VALIGN="TOP">Run to Cursor
</TD>
<TD VALIGN="TOP">CTRL+F8
</TD>
<TD VALIGN="TOP">When your application is in break mode, use Run To Cursor to select a statement further down in your code where you want execution to stop. Your application will run from the current statement to the selected statement.
</TD></TR>
<TR>
<TD VALIGN="TOP">(Menu Item)
</TD>
<TD VALIGN="TOP">Edit Watch
</TD>
<TD VALIGN="TOP">CTRL+W
</TD>
<TD VALIGN="TOP">Displays the Edit Watch dialog box in which you can edit or delete a watch expression.
</TD></TR>
<TR>
<TD VALIGN="TOP">(Menu Item)
</TD>
<TD VALIGN="TOP">Set Next Statement
</TD>
<TD VALIGN="TOP">CTRL+F9
</TD>
<TD VALIGN="TOP">Sets the execution point to the line of code you choose (in the current procedure).
</TD></TR>
<TR>
<TD VALIGN="TOP">(Menu Item)
</TD>
<TD VALIGN="TOP">Show Next Statement
</TD>
<TD VALIGN="TOP"> 
</TD>
<TD VALIGN="TOP">Highlights the next statement to be executed.
</TD></TR></TABLE></p>

<A NAME="219"><H3>Using Step Into</H3></A>

<P>You can use Step Into to execute code in your application one statement at a time. When you use Step Into to step through your code, Visual Basic temporarily switches to run time, executes the current statement, and advances to the next statement. Then it switches back to break mode. After you have stepped through a statement, you can see its effect by looking at your application's forms or the debugging windows. </P>

<P><LI><B>To use Step Into </B></LI></P>
<UL>
<p><li>Select one of the following methods:</li></p>
<UL>
<P><LI>On the <B>Debug</B> menu, click <B>Step Into</B>.</LI></P>

<P><LI> On the <B>Debug</B> toolbar, click <B>Step</B> <B>Into</B>.</LI></P>

<P><LI> Press <B>F8</B>.</LI></P>
</UL>
</UL>
<A NAME="220"><H3>Using Step Over</H3></A>

<P>Step Over functions the same as Step Into except when the statement contains a call to another procedure. Step Into steps to the beginning of the called procedure, whereas Step Over executes the called procedure as a unit and then steps to the next statement in the present procedure. Use Step Over if you want to stay at the same level of code and don't need to analyze the called procedure.</P>

<P>Suppose, for example, that you are stepping through the statements in a procedure named PrintInvoice, and PrintInvoice contains a procedure call to GetPrinterList. </P>

<P>If you use Step Over, the Code window continues to display the PrintInvoice procedure. The code in the GetPrinterList procedure is executed, and the application is placed back in break mode on the statement immediately after the call to GetPrinterList. </P>

<P><LI><B>To use Step Over</B></LI></P>
<UL>
<p><li>Select one of the following methods:</li></p>
<UL>
<P><LI> On the <B>Debug</B> menu, click <B>Step Over.</B></LI></P>

<P><LI> On the <B>Debug</B> toolbar, click <B>Step Over</B>.</LI></P>

<P><LI> Press <B>SHIFT+F8</B>.</LI></P>
</UL>
</UL>
<A NAME="221"><H3>Using Step Out</H3></A>

<P>Step Out advances past the remainder of the code in the current procedure. If the procedure was called from another procedure, execution advances to the statement immediately following the statement that called the procedure.</P>

<P><LI><B>To use Step Out </B></LI></P>
<UL>
<p><li>Select one of the following methods:</li></p>
<UL>
<P><LI> On the <B>Debug</B> menu, click <B>Step Out</B>.</LI></P>

<P><LI> On the <B>Debug</B> toolbar, click <B>Step Out</B>.</LI></P>

<P><LI> Press <B>CTRL+SHIFT+F8</B>.</LI></P>
</UL>
</UL>
<A NAME="222"><H3>Using Run to Cursor</H3></A>

<P>While your application is in break mode, you can place the insertion point on a statement further down in your code. Then use Run To Cursor to execute the statements preceding your cursor. This lets you &quot;step over&quot; uninteresting sections of code, such as large loops.</P>

<P><LI><B>To use Run To Cursor </B></LI></P>

<OL>
<P><LI>Put your application in break mode.</LI></P>

<P><LI>Place the cursor where you want to stop.</LI></P>

<P><LI>Press <B>CTRL+F8</B>, or, on the <B>Debug</B> menu, click <B>Run To Cursor</B>.</LI></P>
</OL>
<A NAME="223"><H3>Using Set Next Statement</H3></A>

<P>While debugging your application, you can use Set Next Statement to skip over a section of your code. Unlike the way the Run To Cursor command handles code, the Set Next Statement command does not execute the code between the present break point and your cursor. With the Set Next Statement command, you can set a different line of code to execute next, provided it falls within the same procedure. This is helpful, for instance, when a section in your code contains a known bug. You can jump over that section of code and continue tracing other problems. Also, you may want to return to an earlier statement to test part of the application using different values for properties or variables.</P>

<P><LI><B>To use Set Next Statement </B></LI></P>

<OL>
<P><LI>Put your application in break mode.</LI></P>

<P><LI>Place the cursor on the line of code that you want to execute next.</LI></P>

<P><LI>On the <B>Debug</B> menu, click <B>Set</B> <B>Next</B> <B>Statement</B>.</LI></P>
</OL>
<A NAME="224"><H3>Using Show Next Statement</H3></A>

<P>The Show Next Statement command is used to place the cursor on the line of code that will be executed next. This feature is convenient if you've been executing code in an error handler and aren't sure where execution will resume.</P>

<P><LI><B>To use Show Next Statement </B></LI></P>

<OL>
<P><LI>Put your application in break mode.</LI></P>

<P><LI>On the <B>Debug</B> menu, click <B>Show Next Statement</B>.</LI></P>
</OL>
<A NAME="225"><H2>Lesson Summary</H2></A>

<P>Three types of errors may occur in a Visual Basic program:</P>
<UL>
<p><li>Syntax errors, which are due to incorrectly constructed statements.</li></p>

<p><li>Run-time errors, which occur when a statement attempts an operation that is impossible to carry out. The user of your application can detect these errors.</li></p>

<p><li>Logic errors, which occur when the code does not perform as you intended. The application will run, but will produce incorrect results.</li></p>
</UL>
<P>While developing an application, you work in design mode, run mode, or break mode. Break mode halts the application so you can check your program at a particular moment; it is therefore critical in the debugging process.</P>

<P>There are several tools you can use to debug your application. They are accessed from the Debug menu or toolbar, or by a shortcut key. The most useful tools are:</P>
<UL>
<p><li>Step Into</li></p>

<p><li>Step Over</li></p>

<p><li>Step Out</li></p>

<p><li>Set Next Statement</li></p>

<p><li>Show Next Statement</li></p>
</UL>

</BODY>
</HTML>




