<HTML>
<HEAD>
<TITLE>Lesson 4: the ADO Data Control</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07d.htm", "ch07f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="362"><H1>Lesson 4: The ADO Data Control</H1></A>

<P>Although you can use ADO directly in your applications, the ADO Data control has the advantage of being a graphical control complete with record navigation buttons. It is also an easy-to-use interface that allows you to create database applications with a minimum of code.</P>

<P>The ADO Data control uses Microsoft ADO to quickly create connections between data-bound controls and data providers. Data-bound controls are any controls that feature a DataSource property, including the CheckBox, ComboBox, Image, Label, ListBox, PictureBox, and TextBox controls. Additionally, Visual Basic includes several data-bound ActiveX controls such as the DataGrid, DataCombo, Chart, and DataList controls. You can also create your own data-bound ActiveX controls, or purchase controls from other vendors. When you bind controls to an ADO Data control, each field is automatically displayed and updated when navigating through records. This is done internally by Visual Basic; you do not have to write any code.</P>

<P>Previous versions of Visual Basic included Data controls based on the DAO and RDO technologies. The older DAO Data control is presented in the Visual Basic toolbox by default. Both controls are still included with Visual Basic for backward compatibility. However, because of the flexibility of ADO, it's recommended that new database applications, that may require a data control, be created using the ADO Data control.</P>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to:</b>
<UL>

<p><li>Describe how to connect the ADO Data control to a data source.</li></p>

<p><li>Add the ADO Data control to the Visual Basic toolbox.</li></p>

<p><li>Use the ADO Data control in an application. </li></p>

</UL>
<b>Estimated lesson time: 30 minutes</b>
</blockquote></div></p>

<A NAME="363"><H2>Using the ADO Data Control</H2></A>

<P>The ADO Data control is similar to the intrinsic data control and the Remote Data control (RDC). The ADO Data control allows you to quickly create a connection to a database using ADO. The data control that appears in the Visual Basic toolbox by default is the older, DAO Data control. You must manually add the ADO Data control to the toolbox.</P>

<P><LI><B>To add the ADO Data control to the toolbox</B></LI></P>

<OL>
<P><LI>On the <B>Project</B> menu, click <B>Components</B>.</LI></P>

<P><LI>On the <B>Components</B> dialog box, click the <B>Microsoft ADO Data control 6.0</B> (OLE DB), as illustrated in Figure 7.6.</LI></P>

<P><LI>Click <B>OK</B>.</LI></P>
</ol>

<P>
<A HREF="javascript:fullSize('F07xx06x.htm')"> <img src="images/F07xx06.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 7.6</B> <i>The Components dialog box</i>  <!--/caption-->
</P>


<A NAME="364"><H2>Connecting to a Data Source</H2></A>

<P>At design time, you can create a connection to a data source by setting the ConnectionString property of the ADO Data control to a valid connection string. Then, set the RecordSource property to a table (or SQL statement) from which to retrieve records. Setting these properties is an easy process because Visual Basic provides Property Pages to set the values. When setting the ConnectionString property of the ADO Data control, you have three data source options.</P>

<ul>
<p><li>Use Data Link File</li></p>

<P>This option specifies that you are using a custom connection string that connects to the data source. When this is selected, you can click Browse to access the Organize Data Sources dialog box, from which you can select your Data Link file.</P>
<p><li>Use ODBC Data Source Name</li></p>

<P>This option specifies that you are using a system-defined data source name (DSN) for the connection string. You can access a list of all system-defined DSNs through the combo box in the Property Page dialog box, as illustrated in Figure 7.7. When this option is selected, you can click New to access the Create New Data Source Wizard dialog box to add to or modify DSNs on the system.</P>

<P>
<img src="images/F07xx07.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure 7.7</B> <i>Using the ODBC data source name option</i>  <!--/caption-->
</P>


<p><li>Use Connection String</li></p>

<P>This option specifies that you are using a connection string to access data. If the Use Connection String text box is empty, the wizard appears, or you can click Build to access the Data Link Properties dialog box. Use this dialog box to specify the connection, authentication, and advanced information required to access data using an OLE DB provider.</P>
</ul>

<A NAME="365"><H3>Setting a Connection String</H3></A>

<P>In the following procedure, we will focus on using a connection string to connect to a data source. In this process, you will choose an OLE DB provider, specify a database name and location, and test the connection.</P>

<P><LI><B>To set the ConnectionString property value</B></LI></P>

<OL>
<P><LI>Place an ADO Data control on a form.</LI></P>

<P><LI>On the <B>Properties</B> window, click the <B>ConnectionString</B> property, then click the ellipsis (<B>&#8230;</B>) to open the <B>Property Pages</B>.</LI></P>

<P><LI>Click on the ellipsis located on the right side of the ConnectionString property within the <B>Properties</B> window.</LI></P>

<P><LI>Click the <B>Use Connection String</B> option, then click <B>Build</B>.</LI></P>

<P><LI>Select the <B>Microsoft Jet 3.51 OLE DB Provider</B>, then click <B>Next</B>.</LI></P>

<P><LI>Click the ellipsis to the right of the <B>Select or enter database name</B> text box to browse the database name.</LI></P>

<P><LI>On the <B>Select Access Database</B> dialog box, click Nwind.mdb, then click <B>Open</B>.</LI></P>

<P><LI>Click <B>Test</B> <B>Connection</B> in the Data Link Properties window.</LI></P>

<P>A message box will appear notifying you whether or not the connection succeeded.</P>
<P><LI>Click <B>OK</B> to close the message box, then click <B>OK</B> to close the Data Link Properties window.</LI></P>

<P>A string value will be automatically generated for the Use Connection String value as illustrated in Figure 7.8.</P>
<P><LI>Click <B>OK</B> to close the ConnectionString Property Pages window.</LI></P>
</ol>

<P>
<img src="images/F07xx08.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure 7.8</B> <i>A ConnectionString value</i>  <!--/caption-->
</P>


<A NAME="366"><H3>Setting the RecordSource Property</H3></A>

<P>After you set the ConnectionString property of the ADO Data control to connect to a database, you can set the RecordSource property to establish where the records will come from. The RecordSource property can be set to either a database table name, a stored query name, or a Structured Query Language (SQL) statement. To improve performance, avoid setting the RecordSource property to an entire table. Set the RecordSource to a n SQL string that retrieves only the necessary records. An SQL query must use syntax appropriate for the data source. In other words, Microsoft Access and Microsoft SQL Server use different SQL syntax; therefore, you must use the appropriate syntax for the particular database.</P>

<P>The RecordSource property can be set at design time by using the Property Pages in Visual Basic as shown in Figure 7.9.</P>

<P>
<img src="images/F07xx09.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure 7.9</B> <i>RecordSource property page</i>  <!--/caption-->
</P>


<P>In the RecordSource property page dialog box, you set the command type parameter that tells ADO which type of command object to use. The following table explains the different command type options.</P>

<P>
<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<Th>Value</th>
<Th>Description</th></TR>
<TR>
<TD VALIGN="TOP">adCmdUnknown
</TD>
<TD VALIGN="TOP">The type of command in the CommandText property is not known. This is the default value.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdText
</TD>
<TD VALIGN="TOP">Evaluates CommandText as a textual definition of a command or stored procedure call.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdTable
</TD>
<TD VALIGN="TOP">Evaluates CommandText as a table name whose columns are all returned by an internally generated SQL query.
</TD></TR>
<TR>
<TD VALIGN="TOP">adCmdStoredProc
</TD>
<TD VALIGN="TOP">Evaluates CommandText as a stored procedure name. This can be a stored procedure in a SQL Server database or a query in an Access database.
</TD></TR></TABLE></p>

<P>If you select either adCmdTable or adCmdStoredProc, you set the table or stored procedure name in the Table or Stored Procedure Name drop-down list box below the command type drop-down list box, as illustrated in Figure 7.10.</P>

<P>
<img src="images/F07xx10.GIF" width=401 height=312 border=0>
</P><P>
<!--caption--><B>Figure 7.10</B> <i>Selecting a stored procedure as a RecordSource</i>  <!--/caption-->
</P>


<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="367"><H2>Practice: Connecting an ADO Data Control to a Data Source</H2></A>

<P>In this practice you will add an ADO Data control to the Visual Basic toolbox, add the control to a form, and connect it to a data source. The data source will be the Northwind sample database (Nwind.mdb), included with Visual Basic.</P>

<p>
<img src="images/video.gif" width=78 height=54 border="0">
</p>

<P>To see a demonstration, run the Chap07.exe animation located in the Animations folder on the Supplemental Course Materials CD-ROM that accompanies this book.</P>



<P><LI><B>To add an ADO Data control to your project</B></LI></P>

<OL>
<P><LI>Start Visual Basic, click Standard EXE in the <B>New Project</B> dialog box, then click <B>OK</B>.</LI></P>

<P><LI>On the <B>Project</B> menu, click <B>Components</B>.</LI></P>

<P><LI>In the <B>Controls</B> tab of the <B>Components</B> dialog box, click the Microsoft ADO Data control 6.0 (OLE DB), then click <B>OK</B>.</LI></P>

<P>The ADO Data control will be added to the Visual Basic toolbox.</P>
</ol>

<P><LI><B>To connect the ADO Data control to a data source</B></LI></P>

<OL>
<P><LI>Select the ADO Data control on the Visual Basic toolbox and add it to Form1.</LI></P>

<P><LI>Right-click on the ADO Data control and click <B>ADODC Properties</B>.</LI></P>

<P>The ADO Data control <B>Property Pages</B> dialog box appears. In the <B>General</B> tab, make sure the Use Connection String option is selected.</P>
<P><LI>To set the connection string, click <B>Build</B>.</LI></P>

<P><LI>Highlight Microsoft Jet OLE DB Provider and click <B>Next</B>.</LI></P>

<P>You are using the Jet OLE DB provider because you will connect to a Microsoft Access database.</P>
<P><LI>The <B>Connection</B> tab is used to select or type a database name. Click the ellipsis to the right of the <B>Select or enter database name</B> text box to browse the database name.</LI></P>

<P><LI>On the <B>Select Access Database</B> dialog box, click Nwind.mdb and click <B>Open</B>.</LI></P>

<P><LI>Click <B>Test</B> <B>Connection</B> in the Data Link Properties window.</LI></P>

<P>A message box appears notifying you whether or not the connection succeeded.</P>
<P><LI>Click <B>OK</B> to close the <B>Data Link Properties</B> dialog box.</LI></P>

<P><LI>Now that the connection string value has been built, click the <B>RecordSource</B> tab on the <B>Property Pages</B> dialog box.</LI></P>

<P><LI>For the <B>Command Type</B>, click 1 &#8211; adCmdText.</LI></P>

<P><LI>For the <B>Command Text (SQL)</B> value, type the following SQL statement:</LI></P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
SELECT * FROM Customers;
</pre></td></tr></table></p>

  <P>Your screen should look like Figure 7.11.</P>

<P><LI>Click <B>OK</B> to close the ADO Data control's <B>Property Pages</B> dialog box.</LI></P>

<P>Your ADO Data control is bound to a data source. Now you can use it to retrieve information from the Customers table in the Nwind.mdb database.</P>
<P><LI>On the <B>File</B> menu in Visual Basic, click <B>Save</B> <B>Project</B>.</LI></P>

<P>Save your project as prjADO.vbp in the \Practice\Ch07 folder. You will use this project in the Binding Controls to the ADO Data control practice in the next section.</P>
</ol>

<P>
<img src="images/F07xx11x.gif" width=419 height=315 border=0>
</P><P>
<!--caption--><B>Figure 7.11</B> <i>The Property Pages dialog box</i>  <!--/caption-->
</P>


<A NAME="368"><H2>Binding Controls</H2></A>

<P>After you set the ConnectionString and RecordSource properties for the ADO Data control, you can add a bound control to display data on your form.</P>

<P>A bound control is one that is &quot;<A HREF="glossa.htm#852">data-aware</A>.&quot; When an ADO Data control moves from one record to the next, either through code or when the user clicks the ADO Data control arrows, all bound controls connected to the ADO Data control change to display data from fields in the current record. In addition, if the user changes the data in the bound control, those changes are automatically posted to the database as the user moves to another record. The benefit of using bound controls is that it minimizes the amount of code you must write. Because the value of the bound control is automatically retrieved from and written to the database, there is little or no programming involved.</P>

<A NAME="369"><H3>Setting the DataSource and DataField Properties</H3></A>

<P>In order to bind a control to an ADO Data control, you must set the DataSource and DataField properties of the bound control. The DataSource property specifies the source through which the control is bound to the database (for example, an ADO Data control).</P>

<P>The DataField property specifies a valid field name in the Recordset object created by the data source. This value determines which field is displayed in the bound control. The DataSource and DataField properties can be set at design time in the Properties window, as illustrated in Figure 7.12.</P>

<P>
<img src="images/F07xx12.GIF" width=232 height=277 border=0>
</P><P>
<!--caption--><B>Figure 7.12</B> <i>Setting the DataSource and DataField properties</i>  <!--/caption-->
</P>


<P>You can also set the DataSource and DataField properties at run time. If you set the DataSource property at run time using code, you must use the Set keyword because the DataSource property is an object. The following example sets the DataSource and DataField properties:</P>

<P><TABLE CELLPADDING=5 WIDTH="95%"><TR><TD><PRE>
Set txt1.DataSource = Adodc1
txt1.DataField = &quot;CompanyName&quot;
</pre></td></tr></table></p>

<p>
<img src="images/practice.gif" width=67 height=55 border="0">
</p>

<A NAME="370"><H2>Practice: Binding Controls</H2></A>

<P>In this practice, you will use the project you created in the Connecting an ADO Data control to a Data Source practice.</P>

<P><LI><B>To bind controls to an ADO Data control</B></LI></P>

<OL>
<P><LI>Open the prjADO.vbp project you saved in the Connecting an ADO Data control to a Data Source practice located in the \Practice\Ch07 folder.</LI></P>

<P><LI>Add two textboxes to your form above the ADO Data control.</LI></P>

<P><LI>On the Properties window, set the DataSource property of Text1 to Adodc1.</LI></P>

<P><LI>Set the DataField property to CompanyName.</LI></P>

<P><LI>Set the DataSource property of Text2 to Adodc1.</LI></P>

<P><LI>Sey the DataField property of Text2 to Phone.</LI></P>

<P><LI>On the <B>Run</B> menu, click <B>Start</B>.</LI></P>

<P>You can move through the records viewing company names and phone numbers by clicking the navigational arrows on the ADO Data control. Your program should look like the illustration in Figure 7.13.</P>
<P><LI>On the <B>Run</B> menu, click <B>End</B>.</LI></P>

<P><LI>To save your project, click <B>Save</B> <B>Project</B> on the <B>File</B> menu.</LI></P>
</ol>

<P>
<img src="images/F07xx13.GIF" width=315 height=133 border=0>
</P><P>
<!--caption--><B>Figure 7.13</B> <i>Company name and phone numbers displayed in bound controls</i>  <!--/caption-->
</P>


<A NAME="371"><H2>Using the Data Form Wizard</H2></A>

<P>Although you can bind controls to the ADO Data control manually, you can also use the Data Form Wizard to create forms containing bound controls. The Data Form Wizard is an add-in that you can use to create database viewer applications.</P>

<P>Using the Data Form Wizard, you can create a form that displays, adds, deletes, and edits data in a database. The wizard reduces the task of adding the controls and setting properties to a few easy steps. The Data Form Wizard:</P>

<ul>
<p><li>Creates and adds a new form to the current project.</li></p>

<p><li>Adds an ADO Data control and sets the RecordSource property to your specification.</li></p>

<p><li>Automatically sets the ADO Data control's ConnectionString property.</li></p>

<p><li>Performs the following tasks for each field selected in a table:</li></p>

<ul>
<p><li>Adds a label with the field name.</LI></p>

<P><LI> Adds a bound control. The type of control depends on the type of data stored in the field.</LI></P>
</UL>
</UL>
<P>
<TABLE cellpadding=5 width="95%">
<TR>
<Th>Data Type
</Th>
<Th>Control
</Th></TR>
<TR>
<TD VALIGN="TOP">String, date, and numeric
</TD>
<TD VALIGN="TOP">TextBox
</TD></TR>
<TR>
<TD VALIGN="TOP">Boolean
</TD>
<TD VALIGN="TOP">CheckBox
</TD></TR>
<TR>
<TD VALIGN="TOP">Memo fields
</TD>
<TD VALIGN="TOP">Multi-line TextBox
</TD></TR>
<TR>
<TD VALIGN="TOP">Binary data
</TD>
<TD VALIGN="TOP">OLE Container
</TD></TR>
<TR>
<TD VALIGN="TOP">Picture
</TD>
<TD VALIGN="TOP">PictureBox
</TD></TR></TABLE></P>
<UL><UL>
<p><LI> Adds command buttons to perform various data-access functions, including Add, Delete, Refresh, Update, and Close.</LI></p>

  <P><LI> Adds code behind the command buttons and ADO Data control, including comments.</LI></P>
</ul>
</UL>

<P><LI><B>To install the Data Form Wizard add-in</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Add-In Manager</B>.</LI></P>

<P><LI>On the <B>Add-In Manager</B> dialog box, click VB 6 Data Form Wizard, select the Loaded/Unloaded check box for the load behavior, then click <B>OK</B>.</LI></P>

<P>Your screen should look similar to the illustration shown in Figure 7.14.</P>


<P>
<A HREF="javascript:fullSize('F07xx14x.htm')"> <img src="images/F07xx14.JPG" width=404 height=309 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!--caption--><B>Figure 7.14</B> <i>Adding the Data Form Wizard from the Add-In Manager dialog box</i>  <!--/caption-->
</P>
</ol>

<P><LI><B>To use the Data Form Wizard to connect to the Nwind.mdb database</B></LI></P>

<OL>
<P><LI>On the <B>Add-Ins</B> menu, click <B>Data Form Wizard</B>.</LI></P>

<P><LI>Click <B>Next</B> to accept the default profile.</LI></P>

<P><LI>Click <B>Access</B> on the <B>Database Type</B> list, then click <B>Next</B>.</LI></P>

<P><LI>Click <B>Browse</B>, click the Nwind.mdb file, then click <B>Open</B>.</LI></P>

<P>The Database Name should be set to C:\Program Files\Microsoft Visual Studio\VB98\Nwind.mdb. If you cannot find the Nwind.mdb file in C:\Program Files\Microsoft Visual Studio\VB98, run Visual Basic setup to add this component.</P>
<P><LI>Click <B>Next</B> to accept the database name.</LI></P>

<P><LI>Set the <B>Form Layout</B> to Single Record, set the <B>Binding Type</B> to ADO Data control, and then click <B>Next</B>.</LI></P>

<P><LI>Click <B>Customers</B> for the <B>Record Source</B>, click the fields of your choice, and then click <B>Next</B>.</LI></P>

<P><LI>Select from the <B>Add</B>, <B>Update</B>, <B>Delete</B>, <B>Refresh</B>, and <B>Close</B> check boxes, then click <B>Finish</B>.</LI></P>

<P>The form created for you by the Data Form Wizard should look like the illustration in Figure 7.15.</P>


<P>
<img src="images/F07xx15.GIF" width=376 height=138 border=0>
</P><P>
<!--caption--><B>Figure 7.15</B> <i>A form with bound control created by the Data Form Wizard</i>  <!--/caption-->
</P>
</ol>

<A NAME="372"><H2>Lesson Summary</H2></A>

<ul>
<p><li>The ADO Data control is a graphic control (with record navigation buttons) and an easy-to-use interface that allows you to create database applications with a minimum of code. To use the ADO Data control in Visual Basic 6.0, you must add it to the toolbox.</li></p>

<p><li>At design time, you can create a connection to a data source by setting the ConnectionString property of the ADO Data control to a valid connection string. After you set the ConnectionString property of the ADO Data control to connect to a database, you can set the RecordSource property to establish where the records will come from. </li></p>

<p><li>Once you have set the ConnectionString and RecordSource properties for the ADO Data control, you can add a bound control to display data on your form.</li></p>
</ul>




</BODY>
</HTML>






