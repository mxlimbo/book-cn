<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>DELPHI中的消息处理机制</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><big><big><big>DELPHI中的消息处理机制</big></big></big></p>

<p>发信人: strayli (stray), 信区: Delphi <br>
标 题: DELPHI 中 的 消 息 处 理 机 制 (转) <br>
发信站: BBS 水木清华站 (Sun Oct 4 18:29:01 1998) <br>
<br>
<br>
DELPHI 中 的 消 息 处 理 机 制 <br>
<br>
<br>
( 南 京 理 工 大 学 自 控 系 研96 马 勇 <br>
邮 编:210094 电 话：025-4315309 ) <br>
<br>
<br>
Delphi 是Borland 公 司 提 供 的 一 种 全 新 的WINDOWS 编 程 开 发 工 具. 
由 于 它 采 用 了 具 有 弹 性 的 和 可 重 用 的 面 向 对 象Pascal(object-oriented 
pascal) 语 言, 并 有 强 大 的 数 据 库 引 擎(BDE), 快 速 的 代 码 编 译 
器, 同 时 又 提 供 <br>
了 <br>
众 多 出 色 的 构 件. 受 到 广 大 编 程 人 员 的 青 睐. 在 众 多 的 
编 程 语 言( 如VB,PowerBuilder,Powerpoint 等) 中 脱 颖 而 出. <br>
<br>
其 中 一 个DELPHI 强 于 其 他 编 程 语 言( 如VB4.0) 的 地 方 就 是 在DELPHI 
中 可 自 定 义 消 息, 并 可 直 接 处 理 消 息. 这 对 于 那 些 希 望 
编 写 自 己 的 构 件(Component), 或 者 希 望 截 获. 过 滤 消 息 的 用 
户 来 说 是 必 不 可 少 的. 因 为 <br>
编 写 构 件 一 般 要 对 相 应 的 消 息 进 行 处 理. 下 面 就 对Delphi 
中 消 息 处 理 机 制 进 行 一 下 介 绍。 <br>
<br>
一.DELPHI VCL 中 消 息 的 传 递 <br>
<br>
Delphi 中 每 一 个VCL(Visual Component Library) 构 件( 如Tbutton,Tedit 等) 都 有 
一 内 在 的 消 息 处 理 机 制， 其 基 本 点 就 是 构 件 类 接 收 到 
某 些 消 息 并 把 它 们 发 送 给 适 当 的 处 理 方 法, 如 果 没 有 
特 定 的 处 理 方 法， 则 调 用 <br>
缺 省 的 消 息 处 理 句 柄。 <br>
<br>
其 中mainwndproc 是 定 义 在Twincontrol 类 中 的 一 个 静 态 方 法， 不 
能 被 重 载(Override)。 它 不 直 接 处 理 消 息， 而 是 交 由wndproc 方 
法 处 理， 并 为wndproc 方 法 提 供 一 个 异 常 处 理 模 块。Mainwndproc 
方 法 声 明 如 下: <br>
<br>
procedure MainWndProc(var Message: TMessage); <br>
<br>
Wndproc 是 在Tcontrol 类 中 定 义 的 一 个 虚 拟 方 法, 由 它 调 用dispatch 
方 法 来 进 行 消 息 的 分 配, wndproc 方 法 声 明 如 下: <br>
<br>
procedure WndProc(var Message: TMessage); virtual; <br>
<br>
dispatch 方 法 是 在Tobject 根 类 中 定 义 的, 其 声 明 如 下: <br>
<br>
procedure Tobject.dispatch(var Message); 传 递 给dispatch 的 消 息 参 数 必 须 
是 一 个 记 录 类 型, 且 这 个 记 录 中 第 一 个 入 点 必 须 是 一 
个cardinal 类 型 的 域(field), 它 包 含 了 要 分 配 的 消 息 的 消 息 
号 码. 例 如: <br>
<br>
type <br>
<br>
Tmessage=record <br>
<br>
Msg:cardinal; <br>
<br>
wparam:word; <br>
<br>
lparam:longint; . <br>
<br>
result:longint; <br>
<br>
end; <br>
<br>
<br>
而Dispatch 方 法 会 根 据 消 息 号 码 调 用 构 件 的 最 后 代 类 中 
处 理 此 消 息 的 句 柄 方 法. 如 果 此 构 件 和 它 的 祖 先 类 中 
都 没 有 对 应 此 消 息 的 处 理 句 柄,Dispatch 方 法 便 会 调 用Defaulthandler 
方 法.Defaulthandler 方 法 是 定 <br>
义 于Tobject 中 的 虚 拟 方 法, 其 声 明 如 下: <br>
<br>
procedure Defaulthandler(var Message);virtual; <br>
<br>
Tobject 类 中 的Defaulthandler 方 法 只 是 实 现 简 单 的 返 回 而 不 对 
消 息 进 行 任 何 的 处 理. 我 们 可 以 通 过 对 此 虚 拟 方 法 的 
重 载, 在 子 类 中 实 现 对 消 息 的 缺 省 处 理. 对 于VCL 中 的 构 
件 而 言, 其Defaulthandler 方 法 会 启 <br>
动 windows API 函 数Defwindowproc 对 消 息 进 行 处 理. <br>
<br>
二.DELPHI 中 的 消 息 处 理 句 柄 <br>
<br>
在DELPHI 中 用 户 可 以 自 定 义 消 息 及 消 息 处 理 句 柄. 消 息 处 
理 句 柄 的 定 义 有 如 下 几 个 原 则: <br>
<br>
1.消 息 处 理 句 柄 方 法 必 须 是 一 个 过 程, 且 只 能 传 递 一 个Tmessage 
型 变 量 参 数. 2.方 法 声 明 后 要 有 一 个message 命 令, 后 接 一 个 
在0 到32767 之 间 的 消 息 标 号( 整 型 常 数). 3.消 息 处 理 句 柄 方 
法 不 需 要 用override 命 令 来 <br>
显 式 指 明 重 载 祖 先 的 一 个 消 息 处 理 句 柄, 另 外 它 一 般 
声 明 在 构 件 的protected 或private 区. 4.在 消 息 处 理 句 柄 中 一 般 
先 是 用 户 自 己 对 消 息 的 处 理, 最 后 用inherited 命 令 调 用 祖 
先 类 中 对 应 此 消 息 的 处 理 句 柄（ <br>
有 些 情 况 下 可 能 正 相 反）. 由 于 可 能 对 祖 先 类 中 对 此 
消 息 的 处 理 句 柄 的 名 字 和 参 数 类 型 不 清 楚, 而 调 用 命 
令inherited 可 以 避 免 此 麻 烦, 同 样 如 果 祖 先 类 中 没 有 对 应 
此 消 息 的 处 理 句 柄,inherited 就 会 自 动 调 <br>
用Defaulthandler 方 法.（ 当 然 如 果 要 屏 蔽 掉 此 消 息, 就 不 用inherited 
命 令 了）。 <br>
<br>
消 息 处 理 句 柄 方 法 声 明 为： <br>
procedure Mymsgmethod(var message:Tmessage); message Msgtype; <br>
<br>
同 样 用 户 也 可 以 定 义 自 己 的 消 息, 用 户 自 定 义 消 息 应 
从WM_USER 开 始. <br>
<br>
自 定 义 消 息 及 消 息 处 理 句 柄 举 例 如 下: <br>
<br>
const my_paint=Wm_user+1; <br>
<br>
type <br>
<br>
Tmypaint=record <br>
<br>
msgid:cardinal; <br>
<br>
msize:word; <br>
<br>
mcolor:longint; <br>
<br>
msgresult:longint; <br>
<br>
end; <br>
<br>
type <br>
<br>
Tmycontrol=class(TCustomControl) <br>
<br>
protected <br>
<br>
procedure change(var message:Tmypaint); message my_paint; <br>
<br>
..... <br>
<br>
end; <br>
<br>
...... <br>
<br>
procedure Tmycontrol.change(var message:Tmypaint); <br>
<br>
begin <br>
<br>
size:=message.msize; { 设 置Tmybutton 尺 寸 属 性} <br>
<br>
color:=message.mcolor; { 设 置Tmybutton 颜 色 属 性} <br>
<br>
{do something else} <br>
<br>
inherited; { 交 由Tcustomcontrol 处 理} <br>
<br>
end; <br>
<br>
<br>
<br>
<br>
三. 过 滤 消 息 <br>
<br>
过 滤 消 息 又 称 消 息 陷 阱。 在 一 定 情 况 下， 用 户 可 能 需 
要 屏 蔽 某 些 消 息. 或 者 截 获 某 些 消 息 进 行 处 理。 由 以 
上 介 绍 可 以 看 出 过 滤 消 息 一 般 有 三 种 途 径：(1). 重 载 构 
件 继 承 的 虚 拟 方 法wndproc. (2). 针 对 某 <br>
消 息 编 写 消 息 处 理 句 柄. (3). 重 载 构 件 继 承 的 虚 拟 方 法Defhandler， 
在 其 中 对 消 息 进 行 处 理。 其 中 常 用 的 方 法 是 方 法(2), 在 
上 节 中 已 介 绍 过 了， 方 法(1) 与 方 法(3) 相 似， 这 里 只 简 
单 介 绍 一 下 方 法(1)。 <br>
<br>
重 载 虚 拟 方 法wndproc 的 一 般 过 程 如 下： <br>
<br>
procedure Tmyobject.wndproc(var message:Tmessage); <br>
<br>
begin <br>
<br>
{... 判 断 此 消 息 是 否 该 处 理..} <br>
<br>
inherited wndproc(message); <br>
<br>
{ 未 处 理 的 消 息 交 由 父 辈wndproc 方 法 处 理} <br>
<br>
end; <br>
<br>
<br>
由 此 可 以 看 出 在wndproc 方 法 中 处 理 消 息 的 优 势 是 可 以 过 
滤 整 个 范 围 内 的 消 息， 而 不 必 为 每 个 消 息 指 定 一 个 处 
理 句 柄， 事 实 上Tcontrol 构 件 中 就 是 利 用 它 来 过 滤 并 处 理 
所 有 的 鼠 标 消 息 的( <br>
从WM_mousefirst 到WM_mouselast， 如 下 代 码 示). 同 样 利 用 它 也 可 以 
阻 止 某 些 消 息 被 发 送 给 处 理 句 柄。 <br>
<br>
procedure TControl.WndProc(var Message: TMessage); <br>
<br>
begin <br>
<br>
if (Message.Msg&gt;=WM_MOUSEFIRST) and <br>
<br>
(Message.Msg &lt;= WM_MOUSELAST) <br>
<br>
then <br>
<br>
if Dragging then { 处 理 拖 曳 事 件} <br>
<br>
DragMouseMsg(TWMMouse(Message)) <br>
<br>
else <br>
<br>
... { 处 理 其 他 鼠 标 消 息} <br>
<br>
end; <br>
<br>
Dispatch(Message); <br>
<br>
{ 否 则 正 常 发 送 消 息} <br>
<br>
end; <br>
<br>
<br>
下 例 为 一 简 单 的 自 定 义 构 件 例 子 ： <br>
<br>
Tmyedit 类 是 从Tedit 类 派 生 出 的 一 个 新 类， 它 的 特 点 是 在 
运 行 中 不 能 获 得 焦 点， 不 能 由 键 盘 输 入（ 有 点 类 似Tlabel 
构 件）. 我 们 可 在 其wndproc 方 法 中 过 滤 出WM_setfocus,WM_mousemove 消 
息 并 进 行 处 理 来 达 到 上 述 <br>
要 求， 源 程 序 如 下： <br>
<br>
unit myedit; <br>
<br>
interface <br>
<br>
uses <br>
<br>
Windows, Messages, SysUtils, Classes, Graphics, <br>
<br>
Controls, Forms, Dialogs, <br>
<br>
StdCtrls; <br>
<br>
type <br>
<br>
Tmyedit = class(TEdit) <br>
<br>
private <br>
<br>
{ Private declarations } <br>
<br>
protected <br>
<br>
{ Protected declarations } <br>
<br>
{ other fields and methods} <br>
<br>
procedure wndproc(var message:Tmessage);override; <br>
<br>
public <br>
<br>
{ Public declarations } <br>
<br>
published <br>
<br>
{ Published declarations } <br>
<br>
end; <br>
<br>
procedure Register; <br>
<br>
implementation <br>
<br>
procedure Register; <br>
<br>
begin <br>
<br>
RegisterComponents('Samples', [Tmyedit]); <br>
<br>
end; <br>
<br>
procedure Tmyedit.wndproc(var message:tmessage); <br>
<br>
begin <br>
<br>
if message.msg=wm_mousemove then <br>
<br>
begin <br>
<br>
cursor:=crarrow; <br>
<br>
{ 设 置 光 标 为crarrow, 而 不 是 缺 省 的crBeam 光 标} <br>
<br>
exit; <br>
<br>
end; <br>
<br>
if message.msg=wm_SetFocus then exit; <br>
<br>
{屏蔽掉WM_setfocus消息,不让Tmyedit控件获得输入焦点} <br>
<br>
inherited wndproc(message); <br>
<br>
{其他消息交父辈wndproc处理} <br>
<br>
end; <br>
<br>
end. <br>
<br>
<br>
您 可 以 将Tmyedit 加 到Component Palette 中 检 验 其 性 能。 <br>
<br>
由 以 上 介 绍 可 以 看 出， 只 有 清 楚 了Delphi VCL 中 的 消 息 处 
理 机 <br>
制， 掌 握 好 处 理 各 种 消 息 的 方 法 和 时 机（ 必 要 时 要 借 
助 各 种 工 <br>
具， 如winsight32,spy 等）， 并 结 合OOP 语 言 的 特 点， 我 们 才 可 
能 编 <br>
出 高 质 量 的 构 件。 这 当 然 要 靠 读 者 在 实 践 中 不 断 摸 
索， 积 累 经 <br>
验。 </p>
</body>
</html>
