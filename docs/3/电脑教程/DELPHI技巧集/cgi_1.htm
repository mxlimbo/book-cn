<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>CGI技术及其开发</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><big><big>CGI技术及其开发(一)</big></big></p>

<p>发信人: pitts (痛并快乐着), 信区: Delphi <br>
标 题: CGI技术及其开发 <br>
发信站: BBS 水木清华站 (Tue Oct 13 10:00:13 1998) <br>
<br>
作为Internet上最主要的信息管理和组织手段，WWW由一系列相应的技术及应用构<br>
成，其组成技术包括HTTP、HTML、URL以及CGI等。WWW服务器本身提供一些基本功<br>
能，以完成客户端的请求和自身的管理。但不同的用户有不同的功能要求，其中许<br>
多功能是WWW服务器本身 
不能提供的（比如在线查询等），它必须提供一种扩展手<br>
段，以允许用户编写扩展应用程序来扩展服务器的功能。CGI（CommonGatewayInterface，<br>
即通用网关接口）就是这样的一种标准扩展技术。下面就CGI的基本技术及其开发<br>
进行讨论。 <br>
<br>
一、CGI技术 <br>
1．1CGI的提出 <br>
CGI是外部扩展应用程序与WWW服务器交互的一个标准接口。按照CGI标准编写的外<br>
部扩展应用程序可以处理客户端（一般是WWW浏览器）输入的协同工作数据，完成<br>
客户端与服务器的交互操作。这在实际应用中非常有用，如可以编写CGI外部扩展<br>
程序来访问外部数据库，客户端用户可以通过它和WWW服务器来进行数据查询。CGI<br>
一般分两种：标准CGI和缓冲CGI。所有的WWW服务器均应支持标准CGI，按标准CGI<br>
编写的程序与具体的WWW服务器无关。而按缓冲CGI编写的程序与WWW服务器有关。 
<br>
1．2CGI的工作原理 <br>
1．标准CGI <br>
客户端、服务器、CGI接口与外部程序间的关系可用图1－1表示：如上图所示，服<br>
务器是客户端（如浏览器）与扩展程序之间的通道。当客户端的用户完成了一定<br>
输入工作（比如填充完HTML文档中的FORM表）之后向服务器发出HTTP请求（称为CGI<br>
请求），服务器守护进程接收到该请求后，就创建一个子进程（称为CGI进程）。<br>
该CGI子进程将CGI请求的有关数据设置成环境变量，在外部CGI程序与服务器间建<br>
立两条数据通道（标准I／O），然后启动URL指定的CGI程序，并与该子进程保持同<br>
步，以监测CGI程序的执行状态。子进程通过标准输出流将处理结果传递给服务器<br>
守护进程，守护进程再将处理结果作为应答消息回送到客户端。外部CGI程序通过<br>
环境变量、命令行参数、标准输入输出与WWW服务器进行通讯，传递有关参数和处<br>
理结果。＊环境变量：当服务器守护进程创建子进程运行CGI程序时，设置相应的<br>
环境变量和命令行参数，以传递客户端和服务器的有关信息给该子进程。＊命令行<br>
参数：命令行参数仅在有HTML文档中有ISINDEX查询的情况下使用。＊标准输入输<br>
出：当HTTP请求模式采用POST方式时，CGI程序通过标准输入流和有关环境变量来<br>
获取客户端传输数据；如采用GET方式时，CGI程序直接通过环境变量获取客户端传<br>
输数据。当CGI程序要返回处理结果（一般为HTML文档）给客户端时，它通过标准<br>
输出流将该结果数据传递给服务器守护进程。 <br>
2．缓冲CGI <br>
标准CGI使用Stdin／Stdout来进行数据通讯，这是由其最初开发环境（Unix操作<br>
系统）所决定的。但是许多Windows环境下的编程工具（如VB和Delphi等）是不支<br>
持这种I／O方式的，这时就不能用它们来开发基于标准CGI的应用程序。于是有些<br>
服务器提出了缓冲CGI的概念。缓冲CGI亦称为WinCGI。此时CGI扩展程序与服务器<br>
间通过缓冲CGI而不是标准CGI进行通讯，而缓冲CGI与服务器间的通讯还是通过标<br>
准CGI接口。后者由WWW服务器的内置缓冲处理程序实现。这几部分的关系可用图<br>
1－2表示：缓冲CGI的工作原理与标准CGI相似，不同的是当服务器守护进程接收<br>
到客户端的CGI请求时，所建立的CGI子进程将CGI请求的有关数据设置成环境变量<br>
外，还将它们保存在输入缓冲区中；通过缓冲处理程序在外部CGI程序与服务器间<br>
建立两条数据通道（输入／输出缓冲区）。CGI子进程通过输出缓冲区将处理结果<br>
传递给服务器守护进程。此处外部CGI程序通过环境变量和输入／输出缓冲区与WWW<br>
服务器进行通讯，传递有关参数和处理结果。此处环境变量的意义同上，不过这<br>
些环境变量及其相应值保存在输入缓冲区中。此外，输入缓冲区中还存放客户端<br>
的传输数据（如采用POST模式的话）。输出缓冲区用来存放扩展程序的处理结果。 
<br>
3．标准CGI与缓冲CGI的区别 <br>
对CGI扩展程序而言，最主要差别在于数据的I／O不同：对缓冲CGI，服务器与CGI<br>
扩展程序间的数据交换是通过缓冲区；而标准CGI是通过标准I／O。使用缓冲CGI可<br>
选择更多的开发工具，可以开发Windows95和WindowsNT下的GUI扩展程序；而使用<br>
标准CGI所选用的开发工具必须支持标准I／O。只有少数几种WWW服务器支持缓冲CGI，<br>
因此基于它的扩展程序兼容性不如标准CGI好。 <br>
1．3CGI与其他WWW技术的关系 <br>
CGI作为WWW服务器的标准扩展技术，由上面CGI的基本原理可知，它和许多其它的<br>
WWW技术密切相关，如HTTP、HTML、MIME和URL等，下面主要就它与前两种技术的关<br>
系进行研究。<br>
1．CGI与HTTP协议 <br>
CGI通过HTTP协议在客户端和服务端进行通讯：＊客户端用户代理向服务器发送的<br>
请求是HTTP请求消息。该消息中含有处理用户输入的CGI扩展程序的URL值。＊CGI<br>
扩展程序在处理结束后，返回给客户端的应答是HTTP应答消息。因此CGI程序的输<br>
出数据必须符合HTTP应答消息的语法格式，这在基于CGI标准的开发中非常重要。 
<br>
2．CGI与HTML语言 <br>
CGI扩展程序的输出数据（HTTP应答消息）一般有两种：符合MIME类型的文档（最<br>
普遍的是HTML文档，表示为text／html）；指向其它文档的URL链接。这两种方式<br>
都与HTML语言有关，数据的组织须符合HTML语法格式。 <br>
1．4CGI开发的几个问题 <br>
基于WWW的人机交互一般有两种情况：本地交互和通过网络传输的交互。前者是指<br>
客户端用户的输入数据在客户端本地进行处理，然后将处理结果返回给用户，常<br>
见的开发工具有JavaScript（Netscape开发）和VBScript（Microsoft开发）；后<br>
者是指客户端用户输入的数据通过网络传输到WWW服务器，服务器处理结束后将处<br>
理结果返回给客户端用户，常见的开发技术是WWW服务器扩展技术（如CGI，API等）。<br>
此处主要讨论基于标准CGI技术的通过网络进行数据传输的交互实现。对这种人机<br>
交互的实现，主要有三个环节需要解决：如何获取客户端传输的数据，如何提取有<br>
效数据并处理这些数据，如何向客户端返回应答。下面分别结合有关技术，谈谈这<br>
三方面问题的解决。<br>
1．客户端传输数据的获取 <br>
由第三章CGI的原理可知，当服务端守护进程接收到客户端用户代理（如浏览器）<br>
提交的CGI请求时，所创建的CGI子进程会设置与CGI请求内容有关的环境变量，并<br>
建立服务器与外部CGI程序之间通讯的通道（即标准I／O）。CGI程序可以通过环境<br>
变量，标准I／O或命令行参数获取客户端用户输入的数据。数据的获取与请求所采<br>
用的HTTP方法（Method）和用户所使用的请求方式有关。用户通过CGI请求数据一<br>
般有三种方式：HTMLFORM表，ISINDEX，可点击图片（ISMAP或Imagemaps）。后两<br>
种方式是通过命令行参数传递用户的输入数据；在C语言中（下面的举例亦然）， 
<br>
CGI程序可以用argc和argv［int］获得这些参数值。而前一种方式则取决于HTTP请<br>
求方法；但不管采用何种方法，都将用到环境变量来传递有关请求内容。 
<br>
●获取环境变量 <br>
环境变量的类别很多，包含客户端和服务端的详细信息。在一般CGI程序开发中，<br>
下述几个环境变量在数据传递中起着重要作用。 <br>
＊GATEWAY—INTERFACE <br>
CGI程序所使用的CGI标准接口的版本号。如使用的CGI1．1版，该变量表示为<br>
“CGI／1．1” <br>
＊REQUEST—METHOD <br>
HTTP请求方法。根据该变量值可判断CGI请求所采用的请求方法，以决定是通过Stdin<br>
还是通过环境变量QUERY—STRING获取客户端传输数据。 <br>
＊QUERY—STRING <br>
QUERY—STRING是CGI程序URL中″？″之后的数据。当使用ISINDEX查询或FORM表使<br>
用GET方法时，客户端传输数据可以通过读取该变量而获得。 <br>
＊CONTENT—LENGTH <br>
CONTENT—LENGTH表示客户端传输数据的字节数。 <br>
＊CONTENT—TYPE <br>
CONTENT—TYPE表示客户端传输数据的数据编码类型。 <br>
利用—environ（int）函数可以获得所有的环境变量及其值； <br>
利用getenv（constchar＊）函数可以获得指定环境变量的相应值。 <br>
●HTTP请求方法 <br>
客户端用户代理提交的CGI请求是HTTP请求，其中包括HTTP请求方法。HTTP协议定义<br>
的请求方法中常用的主要有GET和POST。 <br>
客户端FORM表的METHOD属性用来设置请求方法，其缺省值为GET。如果在FORM中使用<br>
GET方法，CGI程序通过环境变量QUERY—STRING获取客户端传输数据。如果在FORM中<br>
使用POST方法，CGI程序通过通过CONTENT—LENGTH获取客户端传输数据的字节数，<br>
通过Stdin读取客户端传输数据。 <br>
2．有效数据的提取和处理 <br>
通过上述方式获取的客户端传输数据的一般格式为： <br>
name［1］=value［1］＆name［2］=value［2］＆．．．name［i］ <br>
=value［i］．．．name［n］=value［n］ <br>
（1Ι=iΙ=n） <br>
其中name［i］表示变量名，它是在FORM表中某输入域的名字；value［i］表示变量<br>
值，它是用户在FORM表中某输入域中输入的值。客户端传输数据的每对″Name=Value″<br>
串由′＆′字符分隔，其数据编码类型可以从环境变量CONTENT—TYPE获取。CGI／1．1 
<br>
版仅支持“application／x－www－form－urlencoded”编码方式。这种编码方式和<br>
URL的编码方式一样，遵循两个规则：数据中的空格（ASCII码值32）编码成′＋′号；<br>
保留字符编码成″％XX″形式，″XX″是该字符ASCII值的十六进制表示，比如″＄″<br>
的编码为″％24″，″？″的编码为″％3F″。因此，要获取客户端用户的输入数据，<br>
必须对上述获取的数据进行分离和解码等处理。利用函数strtok（）、strchr（）等<br>
可以实现数据分离处理，而数据的解码则需要对整个数据串进行扫描，将数据串中的<br>
″％XX″复原为对应的ASCII码。在提取到有效数据后，还可能进行许多其他的处理，<br>
如数据库查询等。这种处理与普通编程相同。 <br>
3．向客户端返回应答 <br>
CGI程序处理结束后，通过标准输出流将应答信息传递给服务器，再由服务器返回给发<br>
出请求的客户端。其输出的应答信息是HTTP应答消息，它一般由两部分组成：应答头<br>
和应答数据。常见的应答头包括三种头域：Content—Type（数据编码类型，用MIME类<br>
型表示），Location（特定文档的URL，这种情况不直接向客户端输出内容而输出该URL）<br>
和Status（处理结果的状态码和状态描述）。HTTP应答头由几行格式相同的文本构成，<br>
每行的基本格式为：″头域名：该域内容″。应答头和应答体之间用一空行加LF（或<br>
CR／LF）分隔。应答体为CGI扩展程序的输出数据，其数据类型应该与Content—Type<br>
值相一致。CGI程序的输出可以用printf（）、puts（）等标准I／O函数来实现。 
<br>
4．CGI程序的开发及其一般流程 <br>
在开发CGI程序过程中，可根据实际情况（服务器提供的接口、实际需求和程序员经验<br>
等）选择编程语言，如C／C＋＋，Perl，TCL，AnyUnixshell，VB，AppleScript。如<br>
果选用C／C＋＋等语言，必须编译成可执行文件；如果选用Perl等解释语言，服务器<br>
必须安装相应的解释器。 <br>
<br>
二、CGI与其它扩展技术的比较 <br>
除CGI标准扩展技术外，常见的扩展技术还有API（ApplicationProgrammingInterface）<br>
和SSI（ServerSideIncludes），这两种技术都与具体的WWW服务器有关。下面先对这两<br>
种技术简要说明，然后再对这三种技术作比较。SSI技术：当服务器守护进程接收到客<br>
户端请求时，其子进程扫描客户端所请求的文档，以获取数据插入标志，再插入相关动<br>
态数据，然后返回给客户端。这种技术简单，但效率不高。API技术：不同的WWW服务器<br>
提供的API可能不同，比如O′ReillyWebsite提供的是WSAPI；PurveyorWebserver和Microsoft 
<br>
IIS提供的是ISAPI。利用这些API编写程序的流程和最后生成的文件类型也不一样；比<br>
如用ISAPI，编写程序时必须依照它的特定框架，最后建立的文件可以是EXE文件和DLL<br>
文件。下表（图3－3）列出了CGI、SSI和API三种技术在主要性能方面的比较：SSI 
CGI API <br>
实现的灵活性 差 好 好 可实现的功能 差 强大 强大对程序员的要求 
低 一般 较高 <br>
开发与测试时间 短 一般 较长 花费 低 一般 较高操作的风险性 低 低 
较大移植性<br>
较好 较好 差 CPU的负载 高 高 较低CGI和API都需要编程实现，利用它们可访问更<br>
多的数据源；而SSI不需编程。利用API开发的扩展软件，其运行速度比CGI快，功能也<br>
较CGI强；但其操作有一定的风险，出现错误时可能使系统崩溃（CGI程序不会），并<br>
且它非常依赖于具体的服务器而移植性太差，开发周期较长。CGI在操作的风险性、软<br>
件移植性、软件开发难度等方面较API有优势；其缺点在于CPU负载较高，特别是同时<br>
发生的CGI请求很多时，将影响服务器的综合性能。综合比较而言，CGI比其它两种技<br>
术更优秀，在实际应用中也最为普遍。 </p>
</body>
</html>
