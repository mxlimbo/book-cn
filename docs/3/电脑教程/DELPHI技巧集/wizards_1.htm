<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>怎样编写DELPHI向导(一)</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><big><big><big>怎样编写DELPHI向导(一)</big></big></big></p>

<p>发信人:&nbsp;strayli&nbsp;(stray),&nbsp;信区:&nbsp;Delphi&nbsp;<br>
标&nbsp;&nbsp;题:&nbsp;&nbsp;How&nbsp;To&nbsp;Write&nbsp;Delphi&nbsp;Wizards(1)&nbsp;<br>
发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Thu&nbsp;Nov&nbsp;&nbsp;5&nbsp;21:59:25&nbsp;1998)&nbsp;<b><font
color="#00ff00">WWW-POST</font></b>&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;How&nbsp;To&nbsp;Write&nbsp;Delphi&nbsp;Wizards &nbsp;<br>
------------------------------------------------------------------------------&nbsp;<br>
-- &nbsp;<br>
&nbsp;Delphi&nbsp;and&nbsp;C++Builder&nbsp;are&nbsp;truly&nbsp;open&nbsp;development&nbsp;environments,&nbsp;in&nbsp;that&nbsp;they&nbsp;&nbsp;<br>
have&nbsp;interfaces&nbsp;to&nbsp;enable&nbsp;us&nbsp;to&nbsp;integrate&nbsp;our&nbsp;own&nbsp;tools&nbsp;and&nbsp;experts&nbsp;within&nbsp;&nbsp;<br>
their&nbsp;IDE.&nbsp;This&nbsp;article&nbsp;will&nbsp;focus&nbsp;on&nbsp;writing&nbsp;and&nbsp;integrating&nbsp;Wizards&nbsp;&nbsp;<br>
(previously&nbsp;called&nbsp;Experts)&nbsp;with&nbsp;Delphi.&nbsp;The&nbsp;resulting&nbsp;(32-bits)&nbsp;Wizards&nbsp;will&nbsp;&nbsp;<br>
be&nbsp;compatible&nbsp;with&nbsp;Delphi&nbsp;2.0x,&nbsp;Delphi&nbsp;3&nbsp;and&nbsp;C++Builder. 
&nbsp;&nbsp; &nbsp;<br>
Delphi&nbsp;has&nbsp;four&nbsp;kinds&nbsp;of&nbsp;Wizards:&nbsp;Project&nbsp;Experts,&nbsp;Form&nbsp;Experts,&nbsp;Standard&nbsp;&nbsp;<br>
Experts&nbsp;and&nbsp;(32-bits&nbsp;only)&nbsp;AddIn&nbsp;Experts.&nbsp;The&nbsp;first&nbsp;two&nbsp;can&nbsp;be&nbsp;found&nbsp;in&nbsp;the&nbsp;&nbsp;<br>
Repository,&nbsp;Standard&nbsp;Experts&nbsp;can&nbsp;be&nbsp;found&nbsp;under&nbsp;the&nbsp;Help&nbsp;menu&nbsp;(like&nbsp;the&nbsp;&nbsp;<br>
Database&nbsp;Form&nbsp;Expert),&nbsp;while&nbsp;AddIn&nbsp;Experts&nbsp;have&nbsp;to&nbsp;provide&nbsp;their&nbsp;own&nbsp;&nbsp;<br>
menu-interface&nbsp;with&nbsp;the&nbsp;Delphi&nbsp;IDE&nbsp;(typicaly&nbsp;anywhere&nbsp;in&nbsp;the&nbsp;menu&nbsp;except&nbsp;for&nbsp;&nbsp;<br>
the&nbsp;Help&nbsp;Menu,&nbsp;which&nbsp;seems&nbsp;to&nbsp;be&nbsp;reserved&nbsp;for&nbsp;Standard&nbsp;Experts&nbsp;only). 
&nbsp;&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;<br>
&nbsp; &nbsp;<br>
Project&nbsp;and&nbsp;Form&nbsp;Experts&nbsp;can&nbsp;be&nbsp;activated&nbsp;whenever&nbsp;you&nbsp;create&nbsp;a&nbsp;new&nbsp;Project&nbsp;&nbsp;<br>
or&nbsp;Form&nbsp;(just&nbsp;like&nbsp;Project&nbsp;and&nbsp;Form&nbsp;Templates).&nbsp;Standard&nbsp;and&nbsp;AddIn&nbsp;Experts&nbsp;&nbsp;<br>
are&nbsp;the&nbsp;other&nbsp;kind&nbsp;of&nbsp;Wizards&nbsp;that&nbsp;generally&nbsp;do&nbsp;not&nbsp;create&nbsp;a&nbsp;new&nbsp;project&nbsp;or&nbsp;&nbsp;<br>
form,&nbsp;but&nbsp;provide&nbsp;some&nbsp;kind&nbsp;of&nbsp;information,&nbsp;or&nbsp;only&nbsp;create&nbsp;a&nbsp;new&nbsp;file&nbsp;or&nbsp;&nbsp;<br>
unit.&nbsp; &nbsp;<br>
If&nbsp;you've&nbsp;ever&nbsp;tried&nbsp;an&nbsp;Wizard,&nbsp;you&nbsp;know&nbsp;what&nbsp;power&nbsp;and&nbsp;ease&nbsp;they&nbsp;can&nbsp;bring&nbsp;&nbsp;<br>
to&nbsp;you.&nbsp;The&nbsp;Project&nbsp;Expert&nbsp;develops&nbsp;an&nbsp;entire&nbsp;project&nbsp;for&nbsp;you&nbsp;based&nbsp;on&nbsp;your&nbsp;&nbsp;<br>
specific&nbsp;preferences&nbsp;(like&nbsp;for&nbsp;example&nbsp;the&nbsp;Application&nbsp;Wizard).&nbsp;The&nbsp;Form&nbsp;&nbsp;<br>
Experts&nbsp;develop&nbsp;custom&nbsp;forms&nbsp;that&nbsp;are&nbsp;added&nbsp;to&nbsp;your&nbsp;current&nbsp;project.&nbsp;The&nbsp;&nbsp;<br>
Database&nbsp;Form&nbsp;Expert,&nbsp;for&nbsp;example,&nbsp;generates&nbsp;a&nbsp;form&nbsp;that&nbsp;displays&nbsp;data&nbsp;from&nbsp;&nbsp;<br>
an&nbsp;external&nbsp;database.&nbsp;These&nbsp;example&nbsp;Wizards&nbsp;are&nbsp;not&nbsp;just&nbsp;external&nbsp;tools&nbsp;that&nbsp;&nbsp;<br>
can&nbsp;be&nbsp;started&nbsp;from&nbsp;Delphi,&nbsp;they&nbsp;actually&nbsp;communicate&nbsp;with&nbsp;Delphi&nbsp;and&nbsp;are&nbsp;an&nbsp;&nbsp;<br>
integrated&nbsp;part&nbsp;of&nbsp;the&nbsp;development&nbsp;environment.&nbsp;While&nbsp;this&nbsp;is&nbsp;not&nbsp;so&nbsp;strange&nbsp;&nbsp;<br>
for&nbsp;the&nbsp;existing&nbsp;Delphi&nbsp;Experts&nbsp;(after&nbsp;all,&nbsp;they&nbsp;were&nbsp;developed&nbsp;and&nbsp;added&nbsp;by&nbsp;&nbsp;<br>
the&nbsp;same&nbsp;team&nbsp;that&nbsp;developed&nbsp;Delphi&nbsp;in&nbsp;the&nbsp;first&nbsp;place,&nbsp;and&nbsp;we&nbsp;all&nbsp;know&nbsp;&nbsp;<br>
Delphi's&nbsp;IDE&nbsp;is&nbsp;written&nbsp;in&nbsp;Delphi),&nbsp;it&nbsp;sounds&nbsp;intriguing&nbsp;at&nbsp;least&nbsp;to&nbsp;know&nbsp;&nbsp;<br>
that&nbsp;we,&nbsp;too,&nbsp;can&nbsp;write&nbsp;a&nbsp;Delphi&nbsp;Wizard&nbsp;that&nbsp;is&nbsp;able&nbsp;to&nbsp;communicate&nbsp;with&nbsp;&nbsp;<br>
Delphi&nbsp;in&nbsp;the&nbsp;same&nbsp;way.&nbsp;Could&nbsp;we&nbsp;actually&nbsp;write&nbsp;an&nbsp;Wizard&nbsp;that&nbsp;also&nbsp;opens&nbsp;&nbsp;<br>
files&nbsp;in&nbsp;the&nbsp;IDE,&nbsp;that&nbsp;can&nbsp;be&nbsp;used&nbsp;to&nbsp;start&nbsp;a&nbsp;new&nbsp;project&nbsp;from&nbsp;scratch?&nbsp;Yes,&nbsp;all&nbsp;this&nbsp;is&nbsp;possible,&nbsp;and&nbsp;more,&nbsp;as&nbsp;we&nbsp;will&nbsp;see&nbsp;&nbsp;<br>
shortly!&nbsp; &nbsp;<br>
&nbsp;<br>
1.&nbsp;TIExpert&nbsp;Interface &nbsp;<br>
The&nbsp;major&nbsp;reason&nbsp;why&nbsp;everybody&nbsp;thinks&nbsp;writing&nbsp;custom&nbsp;Wizards&nbsp;is&nbsp;difficult,&nbsp;is&nbsp;&nbsp;<br>
because&nbsp;they&nbsp;are&nbsp;not&nbsp;documented.&nbsp;Not&nbsp;in&nbsp;the&nbsp;manuals&nbsp;or&nbsp;on-line&nbsp;Help,&nbsp;that&nbsp;is&nbsp;&nbsp;<br>
(they&nbsp;are&nbsp;documented&nbsp;in&nbsp;my&nbsp;book&nbsp;The&nbsp;Revolutionary&nbsp;Guide&nbsp;to&nbsp;Delphi&nbsp;2&nbsp;and&nbsp;in&nbsp;my&nbsp;&nbsp;<br>
column&nbsp;in&nbsp;The&nbsp;Delphi&nbsp;Magazine).&nbsp;If&nbsp;you&nbsp;take&nbsp;a&nbsp;look&nbsp;at&nbsp;the&nbsp;documentation&nbsp;and&nbsp;&nbsp;<br>
source&nbsp;code&nbsp;on&nbsp;your&nbsp;harddisk,&nbsp;you'll&nbsp;find&nbsp;some&nbsp;important&nbsp;files&nbsp;and&nbsp;even&nbsp;two&nbsp;&nbsp;<br>
example&nbsp;Wizards&nbsp;that&nbsp;are&nbsp;installed&nbsp;automatically&nbsp;by&nbsp;Delphi&nbsp;itself.&nbsp;The&nbsp;&nbsp;<br>
important&nbsp;example&nbsp;files&nbsp;can&nbsp;be&nbsp;found&nbsp;in&nbsp;the&nbsp;DOC,&nbsp;SOURCE\VCL&nbsp;or&nbsp;&nbsp;<br>
SOURCE\TOOLSAPI&nbsp;subdirectories,&nbsp;and&nbsp;the&nbsp;main&nbsp;files&nbsp;are&nbsp;EXPTINTF.PAS,&nbsp;&nbsp;<br>
TOOLINTF.PAS,&nbsp;VIRTINTF.PAS&nbsp;and&nbsp;SHAREMEM.PAS.&nbsp;The&nbsp;first&nbsp;one&nbsp;shows&nbsp;how&nbsp;to&nbsp;&nbsp;<br>
derive&nbsp;and&nbsp;register&nbsp;our&nbsp;own&nbsp;Wizard,&nbsp;while&nbsp;the&nbsp;second&nbsp;one&nbsp;shows&nbsp;how&nbsp;to&nbsp;use&nbsp;the&nbsp;&nbsp;<br>
tool-services&nbsp;of&nbsp;Delphi&nbsp;to&nbsp;make&nbsp;the&nbsp;integration&nbsp;with&nbsp;the&nbsp;IDE&nbsp;complete. 
&nbsp;&nbsp; &nbsp;<br>
&nbsp;<br>
In&nbsp;order&nbsp;to&nbsp;start&nbsp;working&nbsp;on&nbsp;a&nbsp;custom&nbsp;wizard,&nbsp;we&nbsp;have&nbsp;to&nbsp;take&nbsp;a&nbsp;look&nbsp;at&nbsp;the&nbsp;&nbsp;<br>
abstract&nbsp;base&nbsp;class&nbsp;definition&nbsp;TIExpert&nbsp;in&nbsp;EXPTINTF.PAS,&nbsp;which&nbsp;is&nbsp;as&nbsp;follows&nbsp;&nbsp;<br>
for&nbsp;the&nbsp;32-bits&nbsp;versions&nbsp;of&nbsp;Delphi:&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;<br>
Type &nbsp;<br>
&nbsp;&nbsp;TExpertStyle&nbsp;=&nbsp;(esStandard,&nbsp;esForm,&nbsp;esProject,&nbsp;esAddIn); 
&nbsp;<br>
&nbsp;&nbsp;TExpertState&nbsp;=&nbsp;set&nbsp;of&nbsp;(esEnabled,&nbsp;esChecked); &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;TIExpert&nbsp;=&nbsp;class(TInterface) &nbsp;<br>
&nbsp;&nbsp;public &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Expert&nbsp;UI&nbsp;strings&nbsp;} &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetIDString:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetName:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetAuthor:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetStyle:&nbsp;TExpertStyle;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetMenuText:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetState:&nbsp;TExpertState;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetGlyph:&nbsp;HICON;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetComment:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetPage:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Launch&nbsp;the&nbsp;Expert&nbsp;} &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;Execute;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;end; &nbsp;<br>
&nbsp;<br>
2.&nbsp;TGenericExpert:&nbsp;Hello,&nbsp;World! &nbsp;<br>
If&nbsp;we&nbsp;want&nbsp;to&nbsp;derive&nbsp;our&nbsp;own&nbsp;Wizard,&nbsp;say&nbsp;TGenericExpert,&nbsp;we&nbsp;have&nbsp;to&nbsp;derive&nbsp;it&nbsp;&nbsp;<br>
from&nbsp;the&nbsp;abstract&nbsp;base&nbsp;class&nbsp;TIExpert,&nbsp;which&nbsp;has&nbsp;seven&nbsp;or&nbsp;nine&nbsp;abstract&nbsp;&nbsp;<br>
member&nbsp;functions&nbsp;(GetStyle,&nbsp;GetName,&nbsp;GetComment,&nbsp;GetGlyph,&nbsp;GetState,&nbsp;&nbsp;<br>
GetIDString&nbsp;and&nbsp;GetMenuText,&nbsp;and&nbsp;for&nbsp;the&nbsp;32-bits&nbsp;versions&nbsp;of&nbsp;Delphi&nbsp;also&nbsp;&nbsp;<br>
GetAuthor&nbsp;and&nbsp;GetPage)&nbsp;and&nbsp;one&nbsp;member&nbsp;procedure&nbsp;Execute.&nbsp;Since&nbsp;TIExpert&nbsp;is&nbsp;an&nbsp;&nbsp;<br>
abstract&nbsp;base&nbsp;class,&nbsp;we&nbsp;need&nbsp;to&nbsp;override&nbsp;every&nbsp;function&nbsp;we&nbsp;need&nbsp;for&nbsp;any&nbsp;&nbsp;<br>
particular&nbsp;Wizard.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;<br>
unit&nbsp;Generic; &nbsp;<br>
interface &nbsp;<br>
uses &nbsp;<br>
&nbsp;&nbsp;Windows,&nbsp;ExptIntf; &nbsp;<br>
&nbsp;<br>
Type &nbsp;<br>
&nbsp;&nbsp;TGenericExpert&nbsp;=&nbsp;class(TIExpert) &nbsp;<br>
&nbsp;&nbsp;public &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Expert&nbsp;Style&nbsp;} &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetStyle:&nbsp;TExpertStyle;&nbsp;override; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Expert&nbsp;Strings&nbsp;} &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetIDString:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetName:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetAuthor:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetMenuText:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetState:&nbsp;TExpertState;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetGlyph:&nbsp;HICON;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetComment:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetPage:&nbsp;string;&nbsp;override; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;Expert&nbsp;Action&nbsp;} &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;Execute;&nbsp;override; &nbsp;<br>
&nbsp;&nbsp;end; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;Register; &nbsp;<br>
&nbsp;<br>
implementation &nbsp;<br>
uses &nbsp;<br>
&nbsp;&nbsp;Dialogs; &nbsp;<br>
&nbsp;<br>
{&nbsp;The&nbsp;implementation&nbsp;details&nbsp;of&nbsp;TGenericExpert&nbsp;will&nbsp;follow&nbsp;in&nbsp;the&nbsp;text&nbsp;} 
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;Register; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;RegisterLibraryExpert(TGenericExpert.Create) &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{Register}; &nbsp;<br>
end. &nbsp;<br>
&nbsp;<br>
Let's&nbsp;have&nbsp;a&nbsp;closer&nbsp;look&nbsp;at&nbsp;our&nbsp;generic&nbsp;Wizard&nbsp;from&nbsp;this&nbsp;listing.&nbsp;Since&nbsp;&nbsp;<br>
TIExpert&nbsp;is&nbsp;an&nbsp;abstract&nbsp;base&nbsp;class,&nbsp;we&nbsp;need&nbsp;to&nbsp;override&nbsp;every&nbsp;function&nbsp;we&nbsp;&nbsp;<br>
need&nbsp;for&nbsp;our&nbsp;TGenericExpert.&nbsp;First&nbsp;of&nbsp;all,&nbsp;we&nbsp;need&nbsp;to&nbsp;specify&nbsp;the&nbsp;style&nbsp;of&nbsp;&nbsp;<br>
the&nbsp;Wizard&nbsp;with&nbsp;the&nbsp;GetStyle&nbsp;method&nbsp;that&nbsp;can&nbsp;return&nbsp;one&nbsp;of&nbsp;three&nbsp;(or&nbsp;four)&nbsp;&nbsp;<br>
possible&nbsp;values:&nbsp;esStandard&nbsp;to&nbsp;tell&nbsp;the&nbsp;IDE&nbsp;to&nbsp;treat&nbsp;the&nbsp;interface&nbsp;to&nbsp;this&nbsp;&nbsp;<br>
Wizard&nbsp;as&nbsp;a&nbsp;menu&nbsp;item&nbsp;on&nbsp;the&nbsp;Help&nbsp;menu,&nbsp;esForm&nbsp;to&nbsp;tell&nbsp;the&nbsp;IDE&nbsp;to&nbsp;treat&nbsp;this&nbsp;&nbsp;<br>
Wizard&nbsp;interface&nbsp;in&nbsp;a&nbsp;fashion&nbsp;similar&nbsp;to&nbsp;form&nbsp;templates,&nbsp;or&nbsp;esProject&nbsp;to&nbsp;tell&nbsp;&nbsp;<br>
the&nbsp;IDE&nbsp;to&nbsp;treat&nbsp;this&nbsp;interface&nbsp;in&nbsp;a&nbsp;fashion&nbsp;similar&nbsp;to&nbsp;project&nbsp;templates.&nbsp;&nbsp;<br>
For&nbsp;32-bits&nbsp;Delphi&nbsp;Wizards&nbsp;only,&nbsp;we&nbsp;can&nbsp;also&nbsp;return&nbsp;esAddIn&nbsp;here,&nbsp;to&nbsp;indicate&nbsp;&nbsp;<br>
that&nbsp;this&nbsp;is&nbsp;a&nbsp;special&nbsp;klind&nbsp;of&nbsp;Wizard&nbsp;that&nbsp;handles&nbsp;all&nbsp;its&nbsp;own&nbsp;interfaceing&nbsp;&nbsp;<br>
to&nbsp;the&nbsp;IDE&nbsp;through&nbsp;the&nbsp;TIToolServices&nbsp;interface.&nbsp;For&nbsp;our&nbsp;TGenericExpert,&nbsp;a&nbsp;&nbsp;<br>
Standard&nbsp;type&nbsp;Wizard&nbsp;that&nbsp;only&nbsp;shows&nbsp;a&nbsp;MessageDlg&nbsp;to&nbsp;say&nbsp;hello&nbsp;to&nbsp;the&nbsp;world,&nbsp;&nbsp;<br>
we&nbsp;can&nbsp;use&nbsp;the&nbsp;esStandard&nbsp;style.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetStyle:&nbsp;TExpertStyle; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;esStandard &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetStyle}; &nbsp;<br>
&nbsp;<br>
The&nbsp;GetIDString&nbsp;should&nbsp;be&nbsp;unique&nbsp;to&nbsp;all&nbsp;Wizards&nbsp;that&nbsp;could&nbsp;be&nbsp;installed.&nbsp;By&nbsp;&nbsp;<br>
convention,&nbsp;the&nbsp;format&nbsp;of&nbsp;the&nbsp;string&nbsp;is:&nbsp;CompanyName.ExpertFunction,&nbsp;like&nbsp;&nbsp;<br>
Borland.Expert&nbsp;or&nbsp;DrBob.GenericExpert.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetIDString:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;'DrBob.TGenericExpert' &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetIDString}; &nbsp;<br>
&nbsp;<br>
After&nbsp;we've&nbsp;set&nbsp;the&nbsp;style&nbsp;of&nbsp;the&nbsp;Wizard,&nbsp;all&nbsp;we&nbsp;need&nbsp;to&nbsp;do&nbsp;is&nbsp;fill&nbsp;the&nbsp;other&nbsp;&nbsp;<br>
options&nbsp;accordingly.&nbsp;The&nbsp;GetName&nbsp;must&nbsp;return&nbsp;a&nbsp;unique&nbsp;descriptive&nbsp;name&nbsp;&nbsp;<br>
identifying&nbsp;this&nbsp;Wizard,&nbsp;like&nbsp;'Generic&nbsp;Wizard'.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetName:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;'Generic&nbsp;Wizard' &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetName}; &nbsp;<br>
&nbsp;<br>
If&nbsp;the&nbsp;style&nbsp;is&nbsp;esForm&nbsp;or&nbsp;esProject,&nbsp;then&nbsp;-&nbsp;for&nbsp;32-bits&nbsp;versions&nbsp;of&nbsp;Delphi&nbsp;&nbsp;<br>
only&nbsp;-&nbsp;we&nbsp;need&nbsp;to&nbsp;return&nbsp;a&nbsp;valid&nbsp;name&nbsp;for&nbsp;the&nbsp;Author.&nbsp;In&nbsp;this&nbsp;case,&nbsp;the&nbsp;style&nbsp;&nbsp;<br>
is&nbsp;esStandard,&nbsp;so&nbsp;we&nbsp;can&nbsp;return&nbsp;an&nbsp;empty&nbsp;string&nbsp;instead.&nbsp;For&nbsp;an&nbsp;esForm&nbsp;or&nbsp;&nbsp;<br>
esProject&nbsp;style&nbsp;Wizard&nbsp;the&nbsp;name&nbsp;would&nbsp;be&nbsp;displayed&nbsp;in&nbsp;the&nbsp;Object&nbsp;Repository&nbsp;&nbsp;<br>
of&nbsp;the&nbsp;32-bits&nbsp;versions&nbsp;of&nbsp;Delphi.&nbsp; &nbsp;<br>
&nbsp;<br>
{$IFDEF&nbsp;WIN32} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetAuthor:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;'Bob&nbsp;Swart&nbsp;(aka&nbsp;Dr.Bob)'&nbsp;{&nbsp;although&nbsp;not&nbsp;needed&nbsp;for&nbsp;esStandard&nbsp;&nbsp;<br>
} &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetAuthor}; &nbsp;<br>
{$ENDIF} &nbsp;<br>
&nbsp;<br>
If&nbsp;style&nbsp;is&nbsp;esForm&nbsp;or&nbsp;esProject&nbsp;then&nbsp;GetGlyph&nbsp;should&nbsp;return&nbsp;a&nbsp;handle&nbsp;to&nbsp;a&nbsp;&nbsp;<br>
bitmap&nbsp;(for&nbsp;Delphi&nbsp;1)&nbsp;or&nbsp;icon&nbsp;(for&nbsp;Delphi&nbsp;2.0x&nbsp;and&nbsp;3)&nbsp;to&nbsp;be&nbsp;displayed&nbsp;in&nbsp;the&nbsp;&nbsp;<br>
form&nbsp;or&nbsp;project&nbsp;list&nbsp;boxes&nbsp;or&nbsp;dialogs.&nbsp;This&nbsp;bitmap&nbsp;should&nbsp;have&nbsp;a&nbsp;size&nbsp;of&nbsp;&nbsp;<br>
60x40&nbsp;pixels&nbsp;in&nbsp;16&nbsp;colours.&nbsp;The&nbsp;icon&nbsp;should&nbsp;be&nbsp;32x32&nbsp;in&nbsp;16&nbsp;colours.&nbsp;Again,&nbsp;&nbsp;<br>
since&nbsp;the&nbsp;style&nbsp;is&nbsp;just&nbsp;esStandard&nbsp;for&nbsp;our&nbsp;TGenericExpert,&nbsp;we&nbsp;can&nbsp;return&nbsp;0&nbsp;&nbsp;<br>
here.&nbsp;We&nbsp;can&nbsp;even&nbsp;combine&nbsp;the&nbsp;16-&nbsp;and&nbsp;32-bit&nbsp;version&nbsp;of&nbsp;GetGlyph&nbsp;here&nbsp;(0&nbsp;is&nbsp;a&nbsp;&nbsp;<br>
valid&nbsp;value&nbsp;to&nbsp;indicate&nbsp;that&nbsp;an&nbsp;icon&nbsp;or&nbsp;bitmap&nbsp;is&nbsp;empty).&nbsp;Note&nbsp;that&nbsp;if&nbsp;we&nbsp;&nbsp;<br>
return&nbsp;a&nbsp;0&nbsp;when&nbsp;a&nbsp;bitmap&nbsp;or&nbsp;icon&nbsp;is&nbsp;needed,&nbsp;Delphi&nbsp;will&nbsp;use&nbsp;the&nbsp;default&nbsp;&nbsp;<br>
image.&nbsp; &nbsp;<br>
&nbsp;<br>
{$IFDEF&nbsp;WIN32} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetGlyph:&nbsp;HICON; &nbsp;<br>
{$ELSE} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetGlyph:&nbsp;HBITMAP; &nbsp;<br>
{$ENDIF} &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;0&nbsp;{&nbsp;not&nbsp;needed&nbsp;for&nbsp;esStandard&nbsp;} 
&nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetGlyph}; &nbsp;<br>
&nbsp;<br>
If&nbsp;style&nbsp;is&nbsp;esForm&nbsp;or&nbsp;esProject&nbsp;then&nbsp;GetComment&nbsp;should&nbsp;return&nbsp;a&nbsp;1&nbsp;or&nbsp;2&nbsp;line&nbsp;&nbsp;<br>
sentence&nbsp;describing&nbsp;the&nbsp;function&nbsp;of&nbsp;this&nbsp;Wizard.&nbsp;Since&nbsp;the&nbsp;style&nbsp;is&nbsp;&nbsp;<br>
esStandard,&nbsp;we&nbsp;can&nbsp;return&nbsp;an&nbsp;empty&nbsp;string.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetComment:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;''&nbsp;{&nbsp;not&nbsp;needed&nbsp;for&nbsp;esStandard&nbsp;} 
&nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetComment}; &nbsp;<br>
&nbsp;<br>
If&nbsp;style&nbsp;is&nbsp;esForm&nbsp;or&nbsp;esProject&nbsp;then&nbsp;-&nbsp;only&nbsp;for&nbsp;32-bits&nbsp;versions&nbsp;of&nbsp;Delphi&nbsp;-&nbsp;&nbsp;<br>
using&nbsp;GetPage&nbsp;we&nbsp;can&nbsp;specify&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;page&nbsp;in&nbsp;the&nbsp;Object&nbsp;Repository&nbsp;&nbsp;<br>
where&nbsp;to&nbsp;place&nbsp;our&nbsp;Wizard.&nbsp;If&nbsp;we&nbsp;don't&nbsp;specify&nbsp;a&nbsp;name&nbsp;here,&nbsp;then&nbsp;the&nbsp;Wizard&nbsp;&nbsp;<br>
just&nbsp;gets&nbsp;added&nbsp;to&nbsp;the&nbsp;Default&nbsp;Form&nbsp;or&nbsp;Project&nbsp;page.&nbsp;Since&nbsp;we're&nbsp;writing&nbsp;an&nbsp;&nbsp;<br>
esStandard&nbsp;Expert,&nbsp;we&nbsp;don't&nbsp;need&nbsp;to&nbsp;supply&nbsp;a&nbsp;page&nbsp;name,&nbsp;so&nbsp;we&nbsp;can&nbsp;return&nbsp;an&nbsp;&nbsp;<br>
empty&nbsp;string&nbsp;again.&nbsp; &nbsp;<br>
&nbsp;<br>
{$IFDEF&nbsp;WIN32} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetPage:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;''&nbsp;{&nbsp;not&nbsp;needed&nbsp;for&nbsp;esStandard&nbsp;} 
&nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetPage}; &nbsp;<br>
{$ENDIF} &nbsp;<br>
&nbsp;<br>
If&nbsp;style&nbsp;is&nbsp;esStandard&nbsp;then&nbsp;GetMenuText&nbsp;should&nbsp;return&nbsp;the&nbsp;actual&nbsp;text&nbsp;to&nbsp;&nbsp;<br>
display&nbsp;for&nbsp;the&nbsp;menu&nbsp;item,&nbsp;like&nbsp;'Generic&nbsp;Wizard'.&nbsp;Since&nbsp;this&nbsp;function&nbsp;is&nbsp;&nbsp;<br>
called&nbsp;each&nbsp;time&nbsp;the&nbsp;parent&nbsp;menu&nbsp;is&nbsp;pulled-down,&nbsp;it&nbsp;is&nbsp;even&nbsp;possible&nbsp;to&nbsp;&nbsp;<br>
provide&nbsp;context&nbsp;sensitive&nbsp;text.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetMenuText:&nbsp;String; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;'&amp;Generic&nbsp;Wizard...' &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetMenuText}; &nbsp;<br>
&nbsp;<br>
If&nbsp;the&nbsp;style&nbsp;is&nbsp;esStandard&nbsp;then&nbsp;GetState&nbsp;returning&nbsp;esChecked&nbsp;will&nbsp;cause&nbsp;the&nbsp;&nbsp;<br>
menu&nbsp;to&nbsp;display&nbsp;a&nbsp;checkmark.&nbsp;This&nbsp;function&nbsp;is&nbsp;called&nbsp;each&nbsp;time&nbsp;the&nbsp;Wizard&nbsp;is&nbsp;&nbsp;<br>
shown&nbsp;in&nbsp;a&nbsp;menu&nbsp;or&nbsp;listbox&nbsp;in&nbsp;order&nbsp;to&nbsp;determine&nbsp;how&nbsp;it&nbsp;should&nbsp;be&nbsp;displayed.&nbsp;&nbsp;<br>
We&nbsp;just&nbsp;leave&nbsp;it&nbsp;esEnabled&nbsp;for&nbsp;now.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;function&nbsp;TGenericExpert.GetState:&nbsp;TExpertState; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;[esEnabled] &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{GetState}; &nbsp;<br>
&nbsp;<br>
Finally,&nbsp;the&nbsp;Execute&nbsp;method&nbsp;is&nbsp;called&nbsp;whenever&nbsp;this&nbsp;Wizard&nbsp;is&nbsp;invoked&nbsp;via&nbsp;the&nbsp;&nbsp;<br>
menu,&nbsp;form&nbsp;gallery&nbsp;dialog,&nbsp;or&nbsp;project&nbsp;gallery&nbsp;dialog.&nbsp;Note&nbsp;that&nbsp;Execute&nbsp;is&nbsp;&nbsp;<br>
never&nbsp;called&nbsp;for&nbsp;an&nbsp;esAddIn&nbsp;style&nbsp;Wizard&nbsp;(this&nbsp;kind&nbsp;of&nbsp;Wizard&nbsp;will&nbsp;handle&nbsp;all&nbsp;&nbsp;<br>
its&nbsp;own&nbsp;interfacing&nbsp;to&nbsp;the&nbsp;IDE&nbsp;through&nbsp;the&nbsp;upcoming&nbsp;TIToolServices&nbsp;&nbsp;<br>
interface).&nbsp;The&nbsp;style&nbsp;will&nbsp;determine&nbsp;how&nbsp;the&nbsp;Wizard&nbsp;was&nbsp;invoked.&nbsp;In&nbsp;this&nbsp;&nbsp;<br>
case,&nbsp;we&nbsp;just&nbsp;call&nbsp;a&nbsp;MessageDlg&nbsp;in&nbsp;the&nbsp;Execute&nbsp;method&nbsp;to&nbsp;indicate&nbsp;that&nbsp;the&nbsp;&nbsp;<br>
Wizard&nbsp;is&nbsp;actually&nbsp;alive.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;TGenericExpert.Execute; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;MessageDlg('Hello&nbsp;Nashville!',&nbsp;mtInformation,&nbsp;[mbOk],&nbsp;0) 
&nbsp;<br>
&nbsp;&nbsp;end&nbsp;{Execute}; &nbsp;<br>
&nbsp;<br>
To&nbsp;install&nbsp;our&nbsp;first&nbsp;Wizard,&nbsp;all&nbsp;we&nbsp;need&nbsp;to&nbsp;do&nbsp;is&nbsp;act&nbsp;like&nbsp;it's&nbsp;a&nbsp;new&nbsp;&nbsp;<br>
component:&nbsp;For&nbsp;Delphi&nbsp;1.0,&nbsp;pick&nbsp;Options&nbsp;|&nbsp;Install,&nbsp;for&nbsp;Delphi&nbsp;2.0x&nbsp;and&nbsp;3&nbsp;&nbsp;<br>
select&nbsp;Component&nbsp;|&nbsp;Install,&nbsp;and&nbsp;add&nbsp;it&nbsp;to&nbsp;the&nbsp;list&nbsp;of&nbsp;installed&nbsp;components. 
&nbsp;&nbsp; &nbsp;<br>
Delphi&nbsp;1&nbsp;and&nbsp;2&nbsp;simply&nbsp;add&nbsp;the&nbsp;Wizard&nbsp;the&nbsp;the&nbsp;Component&nbsp;Library,&nbsp;but&nbsp;Delphi&nbsp;3&nbsp;&nbsp;<br>
needs&nbsp;to&nbsp;add&nbsp;it&nbsp;to&nbsp;a&nbsp;package&nbsp;-&nbsp;the&nbsp;DCLUSR30&nbsp;package&nbsp;by&nbsp;default: 
&nbsp;&nbsp; &nbsp;</p>
</body>
</html>
