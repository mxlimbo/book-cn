<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>在DELPHI中用线程排序</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<table>
  <tr>
    <td bgColor="#55002b" vAlign="top" width="672"><p align="center"><font color="#ffffff"
    face="黑体"><strong>在DELPHI中用线程排序</strong></font></td>
  </tr>
  <tr align="left" vAlign="bottom">
    <td width="672"><p align="left">　　在数据处理量很大的情况下，如何在数据处理的同时响应用户操作？Windows95/98和WindowsNT作为多线程的多任务操作系统，其调度单元是线程，即线程是系统分配处理器时间资源的基本单元，所以我们可以利用线程实现在处理大批量数据的同时响应用户操作。<br>
    　　DELPHI作为一个优秀的开发平台，对开发多线程应用程序提供了强有力的支持，即可直接利用32位Windows环境提供的Win32API接口函数CreateThread，也可利用DELPHI中提供的BeginThread函数。在下面例子中，正是使用了DELPHI提供的TThread类。<br>
    　　<strong>一．基本的方法如下：</strong><br>
    　　1．从Tthread类派生一个新类。(创建TSortThread类)<br>
    　　2．定义新类的Create方法。<br>
    　　3．定义新类的Execute方法，并在Execute方法中插入线程运行时执行的代码。<br>
    　　4．引用类方法创建实例。<br>
    　　<strong>二．例子的详细代码及说明：</strong><br>
    　　首先，新建一个单元，保存为mysort.pas.在此单元中，我们创建了一个TSortThread类，它从TThread类中继承而来，所以当我们在程序中创建这个类的一个实例时，也就是创建了一个新的线程。<br>
    　　接着，在该类中定义一个Sort方法，用来对数组进行排序，同时TSortThread类超越了TThread类的构造方法Create和Execute，在execute方法中，调用了对数组进行排序的Sort方法。具体代码如下：<br>
    　　unitmysort;<br>
    　　interface<br>
    　　usesClasses;//TThread类在Classes中被定义。<br>
    　　type<br>
    　　PSortArray=TSortArray;<br>
    TSortArray=array.[0..MaxIntdivSize<br>
    Of(Integer)－1]ofInteger;<br>
    　　{此处定义了TsortThread类}<br>
    　　TSortThread=class(TThread)<br>
    　　Private<br>
    　　{在TSortThread类中定义了如下几个私有变元}<br>
    　　FSortArray:PSortArray;<br>
    　　FSize:Integer;<br>
    　　FA,FB,FI,FJ:Integer;<br>
    　　Protected<br>
    　　{类TSortThread超越了类Tthread的Execute方法}<br>
    　　procedure Execute;override;<br>
    　　{类TsortThread添加了一个Sort方法}<br>
    　　procedure Sort(varA:arrayofInteger);<br>
    　　public<br>
    　　{类TSortThread超越了类Tthread的构造方法}<br>
    　　constructorCreate(varSortArray:arrayofInteger);<br>
    　　end;<br>
    　　implementation<br>
    　　constructorTSortThread.Create(varSortArray:arrayofInteger);<br>
    　　begin<br>
    　　FSortArray:=@SortArray;<br>
    　　FSize:=High(SortArray)－Low(SortArray)＋1;<br>
    　　FreeOn Terminate:=True;<br>
    　　inheritedCreate(False);<br>
    　　end;<br>
    　　{当线程开始时，Execute方法将被调用。}<br>
    　　procedure TSortThread.Execu<br>
    te;<br>
    　　begin<br>
    　　Sort(Slice(FSortArray,FSize));<br>
    　　end;<br>
    　　{下面实现了冒泡法排序}<br>
    　　procedure TSortThread.Sort(varA:arrayofInteger);<br>
    　　var<br>
    　　I,J,T:Integer;<br>
    　　begin<br>
    　　for I:=High(A)downto Low(A) do<br>
    　　for J:=Low(A)to High(A)－1 do<br>
    　　if A[J]&gt;A[J＋1] then<br>
    　　begin<br>
    　　T:=A[J];<br>
    　　A[J]:=A[J＋1];<br>
    　　A[J＋1]:=T;<br>
    　　if Terminated then Exit;<br>
    　　end;<br>
    　　end;<br>
    　　end<br>
    　　最后，在用户应用程序的implementation处加入usesmysort,在执行排序的地方加入TQuickSortthread.Create(SortArray)，其中SortArray为一实际的数组。这样就可以用线程实现排序，在排序过程中，用户不必等到排序结束就可以执行其它操作。这种用多线程实时响应用户操作方法在涉及大量数据处理的应用程序中显得尤为重要。<br>
    <strong>(湖南 刘一帆)</strong></td>
  </tr>
</table>
</body>
</html>
