<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>DELPHI与INTERNET</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><big><big><strong>DELPHI&nbsp;AND&nbsp;THE&nbsp;INTERNET&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;by&nbsp;Charlie&nbsp;Calvert&nbsp;&nbsp;</strong></big></big></p>

<p><br>
&nbsp;&nbsp;<br>
由Boen翻译，转载请注明：&nbsp;Translate&nbsp;by&nbsp;Boen.&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
中文译稿版权属Boen所有，使用权归&nbsp;CNM&nbsp;编程版&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
《第二》&nbsp;&nbsp;<br>
------------------------------------------------------------------------------&nbsp;&nbsp;<br>
--&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
FTP&nbsp;使用&nbsp;WININET&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;现在您阅读的是本文的第二部分，它包含了WININET的内容。正如前文提及的那样，&nbsp;&nbsp;<br>
这个部分与第一部分完全无关。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;让我们先来对您在FTP部分使用WININET&nbsp;DLL时需要编写的代码作一个做一个概括的了&nbsp;&nbsp;<br>
解。这并不是一个详尽的学习，但却能够让您进门。为了知晓这项技术，您要做的第一件&nbsp;&nbsp;<br>
事情是明白&nbsp;WININET.PAS&nbsp;中的一些函数返回的是一个叫做&nbsp;HINTERNET&nbsp;类的指针变量：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;HINTERNET:&nbsp;Pointer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这个指针扮演一个您正在使用的不同的因特网服务的句柄的角色。获得了这个句柄之&nbsp;&nbsp;<br>
后，你应当把它作为第一个参数传递给在这个进程周期[注：指FTP的整个存在时间（译者&nbsp;&nbsp;<br>
）]中调用的其他WININET函数。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;您要记住的适当您在使用它的时间内要把句柄返回给系统，通常是通过调用&nbsp;&nbsp;&nbsp;<br>
WININET&nbsp;函数&nbsp;InternetCloseHandle&nbsp;来实现：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetCloseHandle(hInet:&nbsp;HINTERNET):&nbsp;BOOL;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了让一个WININET进程开始，您调用&nbsp;InternetOpen&nbsp;:&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetOpen(lpszCallerName:&nbsp;PChar;&nbsp;dwAccessType:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszServerName:&nbsp;PChar;&nbsp;nServerPort:&nbsp;INTERNET_PORT;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;dwFlags:&nbsp;DWORD):&nbsp;HINTERNET;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;第一个参数时打开这个进程的应用程序的名字。您可以在这个参数中传递任何您所要&nbsp;&nbsp;<br>
的任意符串。微软公司的文献声称&quot;这个名字作为HTTP协议中的用户代理器的名字而被使&nbsp;&nbsp;<br>
用&quot;。这个保留的参数可以设为0或空。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;MyHandle:&nbsp;HINTERNET;&nbsp;&nbsp;<br>
…&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;MyHandle&nbsp;:=&nbsp;InternetOpen('MyApp',&nbsp;0,&nbsp;nil,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果您想要关于这个函数的更多信息，从&nbsp;www.microsoft.com&nbsp;那里下载&nbsp;&nbsp;&nbsp;<br>
WININET.HLP&nbsp;。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;打开了这这个进程之后，下一步是通过&nbsp;InternetConnect&nbsp;函数来连接到服务器上。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetConnect(&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;hInet:&nbsp;HINTERNET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Handle&nbsp;from&nbsp;InternetOpen&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszServerName:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Server:&nbsp;i.e.,&nbsp;www.borland.com&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;nServerPort:&nbsp;INTERNET_PORT;&nbsp;//&nbsp;Usually&nbsp;0&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszUsername:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;usually&nbsp;anonymous&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszPassword:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;usually&nbsp;your&nbsp;email&nbsp;address&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwService:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;FTP,&nbsp;HTTP,&nbsp;or&nbsp;Gopher?&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwFlags:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Usually&nbsp;0&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwContext:&nbsp;DWORD):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;User&nbsp;defined&nbsp;number&nbsp;for&nbsp;callback&nbsp;&nbsp;<br>
HINTERNET;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这里有三个可能的可以通过&nbsp;dwService&nbsp;参数传递的自说明旗标，它们是互斥的：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
INTERNET_SERVICE_FTP&nbsp;&nbsp;<br>
INTERNET_SERVICE_GOPHER&nbsp;&nbsp;<br>
INTERNET_SERVICE_HTTP&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;下面是&nbsp;dwFlags&nbsp;参数的选择：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
INTERNET_CONNECT_FLAG_PASSIVE&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这个选项仅当您在前一个参数中传递了&nbsp;INTERNET_SERVER_FTP&nbsp;才有效。这时候这个&nbsp;&nbsp;<br>
参数没有其他有效的选项。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果这个进程成功的话会返回一个有效的指针，否则它返回空。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
连接上之后&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;当您连接上之后，您可以调用来&nbsp;GetCurrentDirectory&nbsp;获得当前的路径的名字：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.GetCurrentDirectory:&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len:&nbsp;Integer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len&nbsp;:=&nbsp;0;&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(S,&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
这个函数声明如下：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;FtpGetCurrentDirectory(&nbsp;&nbsp;<br>
&nbsp;&nbsp;hFtpSession:&nbsp;HINTERNET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;handle&nbsp;from&nbsp;InternetConnect&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszCurrentDirectory:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;directory&nbsp;returned&nbsp;here&nbsp;&nbsp;<br>
&nbsp;&nbsp;var&nbsp;lpdwCurrentDirectory:&nbsp;DWORD):&nbsp;//&nbsp;buf&nbsp;size&nbsp;of&nbsp;2nd&nbsp;parameter&nbsp;&nbsp;<br>
BOOL;&nbsp;stdcall;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;True&nbsp;on&nbsp;success&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果您把最后一个参数设为0，那么WININET会使用这个参数来返回路径字符串的长度&nbsp;&nbsp;<br>
。接着您可以为您的字符串分配内存，也可以在调用一次这个函数来获得路径的名字。这&nbsp;&nbsp;<br>
个过程在上面的方法中已经演示过了。（注意到*设定长度*的那个调用，Delphi&nbsp;&nbsp;&nbsp;<br>
要求您在类似这样的情况下为新的长字符串分配内存！这是因为这个字符串必须在操作系&nbsp;&nbsp;<br>
统中指定值，而不是在&nbsp;Delphi&nbsp;应用程序中指定。结果就是&nbsp;Delphi&nbsp;不能在类似的情况下&nbsp;&nbsp;<br>
像它通常那样悄悄地为字符串分配内存）&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;下面是返回在特定路径下当前可用的文件的一系列函数：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;GetFindDataStr(FindData:&nbsp;TWin32FindData):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;case&nbsp;FindData.dwFileAttributes&nbsp;of&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_ARCHIVE:&nbsp;S&nbsp;:=&nbsp;'A';&nbsp;&nbsp;<br>
//&nbsp;&nbsp;FILE_ATTRIBUTE_COMPRESSED:&nbsp;S&nbsp;:=&nbsp;'C';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_DIRECTORY:&nbsp;S&nbsp;:=&nbsp;'D';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_HIDDEN:&nbsp;S&nbsp;:=&nbsp;'H';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_NORMAL:&nbsp;S&nbsp;:=&nbsp;'N';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_READONLY:&nbsp;S&nbsp;:=&nbsp;'R';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_SYSTEM:&nbsp;S&nbsp;:=&nbsp;'S';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_TEMPORARY:&nbsp;S&nbsp;:=&nbsp;'T';&nbsp;&nbsp;<br>
&nbsp;&nbsp;else&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;:=&nbsp;IntToStr(FindData.dwFileAttributes);&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;S&nbsp;+&nbsp;GetDots(75);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(FindData.CFilename[0],&nbsp;S[6],&nbsp;StrLen(FindData.CFileName));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp&nbsp;:=&nbsp;IntToStr(FindData.nFileSizeLow);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(Temp[1],&nbsp;S[25],&nbsp;Length(Temp));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.FindFiles:&nbsp;TStringList;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindData:&nbsp;TWin32FindData;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindHandle:&nbsp;HInternet;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FindHandle&nbsp;:=&nbsp;FtpFindFirstFile(FFtphandle,&nbsp;'*.*',&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindData,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;if&nbsp;FindHandle&nbsp;=&nbsp;nil&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;nil;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Clear;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;while&nbsp;InternetFindnextFile(FindHandle,&nbsp;@FindData)&nbsp;do&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;InternetCloseHandle(Findhandle);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;GetCurrentDirectory;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;FCurFiles;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里需要注意的关键函数是&nbsp;ftpFindFirstFile,&nbsp;InternetFindNextFile&nbsp;&amp;&nbsp;&nbsp;&nbsp;<br>
InternetCloseHandle&nbsp;。您可以像调用&nbsp;Delphi&nbsp;函数&nbsp;FindFirst、FindNext&nbsp;&amp;&nbsp;FinClose&nbsp;&nbsp;&nbsp;<br>
一样调用这些函数。特别的是，您使用函数&nbsp;ftpFindFirstFile&nbsp;来取得这个路径下的第一&nbsp;&nbsp;<br>
个函数。您可以不断地调用&nbsp;&nbsp;&nbsp;<br>
InternetFindNextFile&nbsp;，直到函数返回&quot;False&quot;为止。当这个进程结束时，调用&nbsp;&nbsp;&nbsp;<br>
InternetCloseHandle&nbsp;来通知操作系统回收与这个进程相关的内存。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我不准备在这里进一步解析这个进程。如果您想要更多的信息，您可以在&nbsp;Delphi&nbsp;&nbsp;&nbsp;<br>
帮助中查找&nbsp;FindFirst&nbsp;。最后提醒一句：并不向前文提及的函数，TWin32FindData&nbsp;并不&nbsp;&nbsp;<br>
是在&nbsp;&nbsp;WININET.PAS&nbsp;中定义的，&nbsp;但可以在随&nbsp;Delphi&nbsp;分发的&nbsp;WIN32&nbsp;帮助文件中找到它。&nbsp;&nbsp;<br>
它在随&nbsp;Delphi&nbsp;&nbsp;&nbsp;<br>
分发的&nbsp;WINDOWS.PAS&nbsp;文件中被定义。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
FTP&nbsp;使用&nbsp;WININET&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;现在您阅读的是本文的第二部分，它包含了WININET的内容。正如前文提及的那样，&nbsp;&nbsp;<br>
这个部分与第一部分完全无关。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;让我们先来对您在FTP部分使用WININET&nbsp;DLL时需要编写的代码作一个做一个概括的了&nbsp;&nbsp;<br>
解。这并不是一个详尽的学习，但却能够让您进门。为了知晓这项技术，您要做的第一件&nbsp;&nbsp;<br>
事情是明白&nbsp;WININET.PAS&nbsp;中的一些函数返回的是一个叫做&nbsp;HINTERNET&nbsp;类的指针变量：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;HINTERNET:&nbsp;Pointer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这个指针扮演一个您正在使用的不同的因特网服务的句柄的角色。获得了这个句柄之&nbsp;&nbsp;<br>
后，你应当把它作为第一个参数传递给在这个进程周期[注：指FTP的整个存在时间（译者&nbsp;&nbsp;<br>
）]中调用的其他WININET函数。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;您要记住的适当您在使用它的时间内要把句柄返回给系统，通常是通过调用&nbsp;&nbsp;&nbsp;<br>
WININET&nbsp;函数&nbsp;InternetCloseHandle&nbsp;来实现：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetCloseHandle(hInet:&nbsp;HINTERNET):&nbsp;BOOL;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了让一个WININET进程开始，您调用&nbsp;InternetOpen&nbsp;:&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetOpen(lpszCallerName:&nbsp;PChar;&nbsp;dwAccessType:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszServerName:&nbsp;PChar;&nbsp;nServerPort:&nbsp;INTERNET_PORT;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;dwFlags:&nbsp;DWORD):&nbsp;HINTERNET;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;第一个参数时打开这个进程的应用程序的名字。您可以在这个参数中传递任何您所要&nbsp;&nbsp;<br>
的任意符串。微软公司的文献声称&quot;这个名字作为HTTP协议中的用户代理器的名字而被使&nbsp;&nbsp;<br>
用&quot;。这个保留的参数可以设为0或空。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;MyHandle:&nbsp;HINTERNET;&nbsp;&nbsp;<br>
…&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;MyHandle&nbsp;:=&nbsp;InternetOpen('MyApp',&nbsp;0,&nbsp;nil,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果您想要关于这个函数的更多信息，从&nbsp;www.microsoft.com&nbsp;那里下载&nbsp;&nbsp;&nbsp;<br>
WININET.HLP&nbsp;。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;打开了这这个进程之后，下一步是通过&nbsp;InternetConnect&nbsp;函数来连接到服务器上。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;InternetConnect(&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;hInet:&nbsp;HINTERNET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Handle&nbsp;from&nbsp;InternetOpen&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszServerName:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Server:&nbsp;i.e.,&nbsp;www.borland.com&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;nServerPort:&nbsp;INTERNET_PORT;&nbsp;//&nbsp;Usually&nbsp;0&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszUsername:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;usually&nbsp;anonymous&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;lpszPassword:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;usually&nbsp;your&nbsp;email&nbsp;address&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwService:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;FTP,&nbsp;HTTP,&nbsp;or&nbsp;Gopher?&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwFlags:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Usually&nbsp;0&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;dwContext:&nbsp;DWORD):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;User&nbsp;defined&nbsp;number&nbsp;for&nbsp;callback&nbsp;&nbsp;<br>
HINTERNET;&nbsp;stdcall;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这里有三个可能的可以通过&nbsp;dwService&nbsp;参数传递的自说明旗标，它们是互斥的：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
INTERNET_SERVICE_FTP&nbsp;&nbsp;<br>
INTERNET_SERVICE_GOPHER&nbsp;&nbsp;<br>
INTERNET_SERVICE_HTTP&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;下面是&nbsp;dwFlags&nbsp;参数的选择：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
INTERNET_CONNECT_FLAG_PASSIVE&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这个选项仅当您在前一个参数中传递了&nbsp;INTERNET_SERVER_FTP&nbsp;才有效。这时候这个&nbsp;&nbsp;<br>
参数没有其他有效的选项。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果这个进程成功的话会返回一个有效的指针，否则它返回空。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
连接上之后&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;当您连接上之后，您可以调用来&nbsp;GetCurrentDirectory&nbsp;获得当前的路径的名字：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.GetCurrentDirectory:&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len:&nbsp;Integer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len&nbsp;:=&nbsp;0;&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(S,&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
这个函数声明如下：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;FtpGetCurrentDirectory(&nbsp;&nbsp;<br>
&nbsp;&nbsp;hFtpSession:&nbsp;HINTERNET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;handle&nbsp;from&nbsp;InternetConnect&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszCurrentDirectory:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;directory&nbsp;returned&nbsp;here&nbsp;&nbsp;<br>
&nbsp;&nbsp;var&nbsp;lpdwCurrentDirectory:&nbsp;DWORD):&nbsp;//&nbsp;buf&nbsp;size&nbsp;of&nbsp;2nd&nbsp;parameter&nbsp;&nbsp;<br>
BOOL;&nbsp;stdcall;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;True&nbsp;on&nbsp;success&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果您把最后一个参数设为0，那么WININET会使用这个参数来返回路径字符串的长度&nbsp;&nbsp;<br>
。接着您可以为您的字符串分配内存，也可以在调用一次这个函数来获得路径的名字。这&nbsp;&nbsp;<br>
个过程在上面的方法中已经演示过了。（注意到*设定长度*的那个调用，Delphi&nbsp;&nbsp;&nbsp;<br>
要求您在类似这样的情况下为新的长字符串分配内存！这是因为这个字符串必须在操作系&nbsp;&nbsp;<br>
统中指定值，而不是在&nbsp;Delphi&nbsp;应用程序中指定。结果就是&nbsp;Delphi&nbsp;不能在类似的情况下&nbsp;&nbsp;<br>
像它通常那样悄悄地为字符串分配内存）&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;下面是返回在特定路径下当前可用的文件的一系列函数：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;GetFindDataStr(FindData:&nbsp;TWin32FindData):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;case&nbsp;FindData.dwFileAttributes&nbsp;of&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_ARCHIVE:&nbsp;S&nbsp;:=&nbsp;'A';&nbsp;&nbsp;<br>
//&nbsp;&nbsp;FILE_ATTRIBUTE_COMPRESSED:&nbsp;S&nbsp;:=&nbsp;'C';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_DIRECTORY:&nbsp;S&nbsp;:=&nbsp;'D';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_HIDDEN:&nbsp;S&nbsp;:=&nbsp;'H';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_NORMAL:&nbsp;S&nbsp;:=&nbsp;'N';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_READONLY:&nbsp;S&nbsp;:=&nbsp;'R';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_SYSTEM:&nbsp;S&nbsp;:=&nbsp;'S';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_TEMPORARY:&nbsp;S&nbsp;:=&nbsp;'T';&nbsp;&nbsp;<br>
&nbsp;&nbsp;else&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;:=&nbsp;IntToStr(FindData.dwFileAttributes);&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;S&nbsp;+&nbsp;GetDots(75);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(FindData.CFilename[0],&nbsp;S[6],&nbsp;StrLen(FindData.CFileName));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp&nbsp;:=&nbsp;IntToStr(FindData.nFileSizeLow);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(Temp[1],&nbsp;S[25],&nbsp;Length(Temp));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.FindFiles:&nbsp;TStringList;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindData:&nbsp;TWin32FindData;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindHandle:&nbsp;HInternet;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FindHandle&nbsp;:=&nbsp;FtpFindFirstFile(FFtphandle,&nbsp;'*.*',&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindData,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;if&nbsp;FindHandle&nbsp;=&nbsp;nil&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;nil;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Clear;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;while&nbsp;InternetFindnextFile(FindHandle,&nbsp;@FindData)&nbsp;do&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;InternetCloseHandle(Findhandle);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;GetCurrentDirectory;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;FCurFiles;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里需要注意的关键函数是&nbsp;ftpFindFirstFile,&nbsp;InternetFindNextFile&nbsp;&amp;&nbsp;&nbsp;&nbsp;<br>
InternetCloseHandle&nbsp;。您可以像调用&nbsp;Delphi&nbsp;函数&nbsp;FindFirst、FindNext&nbsp;&amp;&nbsp;FinClose&nbsp;&nbsp;&nbsp;<br>
一样调用这些函数。特别的是，您使用函数&nbsp;ftpFindFirstFile&nbsp;来取得这个路径下的第一&nbsp;&nbsp;<br>
个函数。您可以不断地调用&nbsp;&nbsp;&nbsp;<br>
InternetFindNextFile&nbsp;，直到函数返回&quot;False&quot;为止。当这个进程结束时，调用&nbsp;&nbsp;&nbsp;<br>
InternetCloseHandle&nbsp;来通知操作系统回收与这个进程相关的内存。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
I'm&nbsp;not&nbsp;going&nbsp;to&nbsp;explain&nbsp;this&nbsp;process&nbsp;further&nbsp;in&nbsp;this&nbsp;newsletter.&nbsp;If&nbsp;you&nbsp;want&nbsp;&nbsp;&nbsp;<br>
more&nbsp;information,&nbsp;you&nbsp;might&nbsp;look&nbsp;up&nbsp;FindFirst&nbsp;in&nbsp;the&nbsp;Delphi&nbsp;help.&nbsp;One&nbsp;final&nbsp;&nbsp;&nbsp;<br>
note:&nbsp;Unlike&nbsp;the&nbsp;functions&nbsp;mentioned&nbsp;in&nbsp;the&nbsp;previous&nbsp;paragraph,&nbsp;&nbsp;&nbsp;<br>
TWin32FindData&nbsp;is&nbsp;not&nbsp;defined&nbsp;in&nbsp;&nbsp;&nbsp;<br>
WININET.PAS,&nbsp;but&nbsp;instead&nbsp;can&nbsp;be&nbsp;found&nbsp;in&nbsp;the&nbsp;WIN32&nbsp;help&nbsp;file&nbsp;that&nbsp;ships&nbsp;with&nbsp;&nbsp;&nbsp;<br>
Delphi.&nbsp;It&nbsp;is&nbsp;declared&nbsp;in&nbsp;the&nbsp;WINDOWS.PAS&nbsp;file&nbsp;that&nbsp;ships&nbsp;with&nbsp;Delphi.&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我不准备在这里进一步解析这个进程。如果您想要更多的信息，您可以在&nbsp;Delphi&nbsp;&nbsp;&nbsp;<br>
帮助中查找&nbsp;FindFirst&nbsp;。最后提醒一句：并不向前文提及的函数，TWin32FindData&nbsp;并不&nbsp;&nbsp;<br>
是在&nbsp;&nbsp;WININET.PAS&nbsp;中定义的，&nbsp;但可以在随&nbsp;Delphi&nbsp;分发的&nbsp;WIN32&nbsp;帮助文件中找到它。&nbsp;&nbsp;<br>
它在随&nbsp;Delphi&nbsp;&nbsp;&nbsp;<br>
分发的&nbsp;WINDOWS.PAS&nbsp;文件中被定义。&nbsp;&nbsp;<br>
==============================================================================&nbsp;&nbsp;<br>
====&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
接受一个文件&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
您可以使用&nbsp;WININET.PAS&nbsp;文件中的&nbsp;ftpGetFile&nbsp;函数来从FTP取回一个文件:&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;FtpGetFile(&nbsp;&nbsp;<br>
&nbsp;&nbsp;hFtpSession:&nbsp;HINTERNET;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Returned&nbsp;by&nbsp;InternetConnect&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszRemoteFile:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;File&nbsp;to&nbsp;get&nbsp;&nbsp;<br>
&nbsp;&nbsp;lpszNewFile:&nbsp;PChar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Where&nbsp;to&nbsp;put&nbsp;it&nbsp;on&nbsp;your&nbsp;PC&nbsp;&nbsp;<br>
&nbsp;&nbsp;fFailIfExists:&nbsp;BOOL;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Overwrite&nbsp;existing&nbsp;files?&nbsp;&nbsp;<br>
&nbsp;&nbsp;dwFlagsAndAttributes:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;//&nbsp;File&nbsp;attribute-See&nbsp;CreateFile.&nbsp;&nbsp;<br>
&nbsp;&nbsp;dwFlags:&nbsp;DWORD;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Binary&nbsp;or&nbsp;ASCII&nbsp;transfer&nbsp;&nbsp;<br>
&nbsp;&nbsp;dwContext:&nbsp;DWORD):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Usually&nbsp;zero&nbsp;&nbsp;<br>
BOOL&nbsp;stdcall;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;True&nbsp;on&nbsp;success&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
下面是一个如何使用该函数的例子：&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.GetFile(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;FtpGetFile(FFTPHandle,&nbsp;PChar(FTPFile),&nbsp;PChar(NewFile),&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False,&nbsp;File_Attribute_Normal,&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ftp_Transfer_Type_Binary,&nbsp;0);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;如果要知道&nbsp;dwFlagsAndAttributes&nbsp;参数中的变量是怎样传递的，请查阅随&nbsp;Delphi&nbsp;&nbsp;&nbsp;<br>
附送的&nbsp;WIN32&nbsp;帮助文件。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
典型控制&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;下面的&nbsp;Delphi&nbsp;控制给了你一个通过&nbsp;WININET&nbsp;FTP&nbsp;部分建立可视工具的起点。只是因&nbsp;&nbsp;<br>
为，这个控制可以让您是用&nbsp;Object&nbsp;Inspector&nbsp;来定义远程服务器(RemoteServer)、用户&nbsp;&nbsp;<br>
身份(UserID)和密码(Password)。&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
unit&nbsp;Ftp1;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
{&nbsp;FTP&nbsp;example&nbsp;using&nbsp;WININET.PAS&nbsp;rather&nbsp;than&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;an&nbsp;ACTIVEX&nbsp;control.&nbsp;Requires&nbsp;WININET.PAS&nbsp;and&nbsp;&nbsp;<br>
&nbsp;&nbsp;WININET.DLL.&nbsp;WININET.DLL&nbsp;you&nbsp;can&nbsp;get&nbsp;from&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Microsoft,&nbsp;WININET.PAS&nbsp;is&nbsp;available&nbsp;from&nbsp;&nbsp;<br>
&nbsp;&nbsp;www.borland.com,&nbsp;or&nbsp;with&nbsp;some&nbsp;versions&nbsp;of&nbsp;&nbsp;<br>
&nbsp;&nbsp;Delphi&nbsp;2.0.&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;You&nbsp;might&nbsp;Respond&nbsp;to&nbsp;OnNewDir&nbsp;events&nbsp;as&nbsp;follows:&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;TForm1.FTP1NewDir(Sender:&nbsp;TObject);&nbsp;&nbsp;<br>
&nbsp;&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ListBox1.Items&nbsp;:=&nbsp;MyFtp1.FindFiles;&nbsp;//&nbsp;Get&nbsp;the&nbsp;directory&nbsp;list&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
}&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
interface&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
uses&nbsp;&nbsp;<br>
&nbsp;&nbsp;Windows,&nbsp;Classes,&nbsp;WinINet,&nbsp;&nbsp;<br>
&nbsp;&nbsp;SysUtils;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<br>
type&nbsp;&nbsp;<br>
&nbsp;&nbsp;TMyFtp&nbsp;=&nbsp;class(TComponent)&nbsp;&nbsp;<br>
&nbsp;&nbsp;private&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FContext:&nbsp;Integer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FINet:&nbsp;HInternet;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FFtpHandle:&nbsp;HInternet;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FCurFiles:&nbsp;TStringList;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FServer:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FOnNewDir:&nbsp;TNotifyEvent;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FCurDir:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FUserID:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FPassword:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetCurrentDirectory:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;procedure&nbsp;SetUpNewDir;&nbsp;&nbsp;<br>
&nbsp;&nbsp;protected&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;destructor&nbsp;Destroy;&nbsp;override;&nbsp;&nbsp;<br>
&nbsp;&nbsp;public&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;constructor&nbsp;Create(AOwner:&nbsp;TComponent);&nbsp;override;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Connect:&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;FindFiles:&nbsp;TStringList;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;ChangeDirExact(S:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;ChangeDirCustom(S:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;BackOneDir:&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;GetFile(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;SendFile1(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;SendFile2(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;CustomToFileName(S:&nbsp;string):&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;published&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;CurFiles:&nbsp;TStringList&nbsp;read&nbsp;FCurFiles;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;CurDir:&nbsp;string&nbsp;read&nbsp;FCurDir;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;UserID:&nbsp;string&nbsp;read&nbsp;FUserID&nbsp;write&nbsp;FUserID;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;Password:&nbsp;string&nbsp;read&nbsp;FPassword&nbsp;write&nbsp;FPassword;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;Server:&nbsp;string&nbsp;read&nbsp;FServer&nbsp;write&nbsp;FServer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;property&nbsp;OnNewDir:&nbsp;TNotifyEvent&nbsp;read&nbsp;FOnNewDir&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write&nbsp;FOnNewDir;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
procedure&nbsp;Register;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
implementation&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
uses&nbsp;&nbsp;<br>
&nbsp;&nbsp;Dialogs;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
//&nbsp;A&nbsp;few&nbsp;utility&nbsp;functions&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;GetFirstToken(S:&nbsp;string;&nbsp;Token:&nbsp;Char):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Index:&nbsp;INteger;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Index&nbsp;:=&nbsp;Pos(Token,&nbsp;S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;Index&nbsp;&lt;&nbsp;1&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;GetFirstToken&nbsp;:=&nbsp;'';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Dec(Index);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(Temp,&nbsp;Index);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(S[1],&nbsp;Temp[1],&nbsp;Index);&nbsp;&nbsp;<br>
&nbsp;&nbsp;GetFirstToken&nbsp;:=&nbsp;Temp;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;StripFirstToken(S:&nbsp;string;&nbsp;Ch:&nbsp;Char):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;i,&nbsp;Size:&nbsp;Integer;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;i&nbsp;:=&nbsp;Pos(Ch,&nbsp;S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;i&nbsp;=&nbsp;0&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;StripFirstToken&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Size&nbsp;:=&nbsp;(Length(S)&nbsp;-&nbsp;i);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(S[i&nbsp;+&nbsp;1],&nbsp;S[1],&nbsp;Size);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(S,&nbsp;Size);&nbsp;&nbsp;<br>
&nbsp;&nbsp;StripFirstToken&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;ReverseStr(S:&nbsp;string):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len:&nbsp;Integer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;String;&nbsp;&nbsp;<br>
&nbsp;&nbsp;i,j:&nbsp;Integer;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len&nbsp;:=&nbsp;Length(S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(Temp,&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;j&nbsp;:=&nbsp;Len;&nbsp;&nbsp;<br>
&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;1&nbsp;to&nbsp;Len&nbsp;do&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Temp[i]&nbsp;:=&nbsp;S[j];&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;dec(j);&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;ReverseStr&nbsp;:=&nbsp;Temp;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;StripLastToken(S:&nbsp;string;&nbsp;Token:&nbsp;Char):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Index:&nbsp;INteger;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(Temp,&nbsp;Length(S));&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;ReverseStr(S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Index&nbsp;:=&nbsp;Pos(Token,&nbsp;S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Inc(Index);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(S[Index],&nbsp;Temp[1],&nbsp;Length(S)&nbsp;-&nbsp;(Index&nbsp;-&nbsp;1));&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(Temp,&nbsp;Length(S)&nbsp;-&nbsp;(Index&nbsp;-&nbsp;1));&nbsp;&nbsp;<br>
&nbsp;&nbsp;StripLastToken&nbsp;:=&nbsp;ReverseStr(Temp);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
procedure&nbsp;Register;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;RegisterComponents('Unleash',&nbsp;[TMyFtp]);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
constructor&nbsp;TMyFtp.Create(AOwner:&nbsp;TComponent);&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;inherited&nbsp;Create(AOwner);&nbsp;&nbsp;<br>
&nbsp;&nbsp;FCurFiles&nbsp;:=&nbsp;TStringList.Create;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FINet&nbsp;:=&nbsp;InternetOpen('WinINet1',&nbsp;0,&nbsp;nil,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
destructor&nbsp;TMyFtp.Destroy;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;FINet&nbsp;&lt;&gt;&nbsp;nil&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;InternetCloseHandle(FINet);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;FFtpHandle&nbsp;&lt;&gt;&nbsp;nil&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;InternetCloseHandle(FFtpHandle);&nbsp;&nbsp;<br>
&nbsp;&nbsp;inherited&nbsp;Destroy;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.Connect:&nbsp;Boolean;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;FContext&nbsp;:=&nbsp;255;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FftpHandle&nbsp;:=&nbsp;InternetConnect(FINet,&nbsp;PChar(FServer),&nbsp;0,&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;PChar(FUserID),&nbsp;PChar(FPassWord),&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;Internet_Service_Ftp,&nbsp;0,&nbsp;FContext);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;FFtpHandle&nbsp;=&nbsp;nil&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;False&nbsp;&nbsp;<br>
&nbsp;&nbsp;else&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;SetUpNewDir;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.GetCurrentDirectory:&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len:&nbsp;Integer;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Len&nbsp;:=&nbsp;0;&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(S,&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;ftpGetCurrentDirectory(FFTPHandle,&nbsp;PChar(S),&nbsp;Len);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
procedure&nbsp;TMyFtp.SetUpNewDir;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;FCurDir&nbsp;:=&nbsp;GetCurrentDirectory;&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;Assigned(FOnNewDir)&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FOnNewDir(Self);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;GetDots(NumDots:&nbsp;Integer):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;i:&nbsp;Integer;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;'';&nbsp;&nbsp;<br>
&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;1&nbsp;to&nbsp;NumDots&nbsp;do&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;:=&nbsp;S&nbsp;+&nbsp;'&nbsp;';&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;GetFindDataStr(FindData:&nbsp;TWin32FindData):&nbsp;string;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;case&nbsp;FindData.dwFileAttributes&nbsp;of&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_ARCHIVE:&nbsp;S&nbsp;:=&nbsp;'A';&nbsp;&nbsp;<br>
//&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_COMPRESSED:&nbsp;S&nbsp;:=&nbsp;'C';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_DIRECTORY:&nbsp;S&nbsp;:=&nbsp;'D';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_HIDDEN:&nbsp;S&nbsp;:=&nbsp;'H';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_NORMAL:&nbsp;S&nbsp;:=&nbsp;'N';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_READONLY:&nbsp;S&nbsp;:=&nbsp;'R';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_SYSTEM:&nbsp;S&nbsp;:=&nbsp;'S';&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FILE_ATTRIBUTE_TEMPORARY:&nbsp;S&nbsp;:=&nbsp;'T';&nbsp;&nbsp;<br>
&nbsp;&nbsp;else&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;S&nbsp;:=&nbsp;IntToStr(FindData.dwFileAttributes);&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;S&nbsp;+&nbsp;GetDots(75);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(FindData.CFilename[0],&nbsp;S[6],&nbsp;StrLen(FindData.CFileName));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp&nbsp;:=&nbsp;IntToStr(FindData.nFileSizeLow);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(Temp[1],&nbsp;S[25],&nbsp;Length(Temp));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;S;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.FindFiles:&nbsp;TStringList;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindData:&nbsp;TWin32FindData;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindHandle:&nbsp;HInternet;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FindHandle&nbsp;:=&nbsp;FtpFindFirstFile(FFtphandle,&nbsp;'*.*',&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FindData,&nbsp;0,&nbsp;0);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;if&nbsp;FindHandle&nbsp;=&nbsp;nil&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;nil;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Clear;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;while&nbsp;InternetFindnextFile(FindHandle,&nbsp;@FindData)&nbsp;do&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FCurFiles.Add(GetFindDataStr(FindData));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;InternetCloseHandle(Findhandle);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;GetCurrentDirectory;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;FCurFiles;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.CustomToFileName(S:&nbsp;string):&nbsp;string;&nbsp;&nbsp;<br>
const&nbsp;&nbsp;<br>
&nbsp;&nbsp;PreSize&nbsp;=&nbsp;6;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp:&nbsp;string;&nbsp;&nbsp;<br>
&nbsp;&nbsp;TempSize:&nbsp;Integer;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp&nbsp;:=&nbsp;'';&nbsp;&nbsp;<br>
&nbsp;&nbsp;TempSize&nbsp;:=&nbsp;Length(S)&nbsp;-&nbsp;PreSize;&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetLength(Temp,&nbsp;TempSize);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Move(S[PreSize],&nbsp;Temp[1],&nbsp;TempSize);&nbsp;&nbsp;<br>
&nbsp;&nbsp;Temp&nbsp;:=&nbsp;GetFirstToken(Temp,&nbsp;'&nbsp;');&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;Temp;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.BackOneDir:&nbsp;Boolean;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;FCurDir;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;StripLastToken(S,&nbsp;'/');&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;S&nbsp;=&nbsp;'/'&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;False;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Exit;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;S&nbsp;&lt;&gt;&nbsp;''&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ChangeDirExact(S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end&nbsp;else&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ChangeDirExact('/');&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
//&nbsp;Changes&nbsp;to&nbsp;specific&nbsp;directory&nbsp;in&nbsp;S&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.ChangeDirExact(S:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;S&nbsp;&lt;&gt;&nbsp;''&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FtpSetCurrentDirectory(FFTPHandle,&nbsp;PChar(S));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindFiles;&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetUpNewDir;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
//&nbsp;Assumes&nbsp;S&nbsp;has&nbsp;been&nbsp;returned&nbsp;by&nbsp;GetFindDataString;&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.ChangeDirCustom(S:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;S&nbsp;:=&nbsp;CustomToFileName(S);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;S&nbsp;&lt;&gt;&nbsp;''&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FtpSetCurrentDirectory(FFTPHandle,&nbsp;PChar(S));&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
&nbsp;&nbsp;FindFiles;&nbsp;&nbsp;<br>
&nbsp;&nbsp;SetUpNewDir;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.GetFile(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;FtpGetFile(FFTPHandle,&nbsp;PChar(FTPFile),&nbsp;PChar(NewFile),&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;False,&nbsp;File_Attribute_Normal,&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ftp_Transfer_Type_Binary,&nbsp;0);&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.SendFile1(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
const&nbsp;&nbsp;<br>
&nbsp;&nbsp;Size:DWord&nbsp;=&nbsp;3000;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;Transfer:&nbsp;Bool;&nbsp;&nbsp;<br>
&nbsp;&nbsp;Error:&nbsp;DWord;&nbsp;&nbsp;<br>
&nbsp;&nbsp;S:&nbsp;string;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;Transfer&nbsp;:=&nbsp;FtpPutFile(FFTPHandle,&nbsp;PChar(FTPFile),&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PChar(NewFile),&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ftp_Transfer_Type_Binary,&nbsp;0);&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;not&nbsp;Transfer&nbsp;then&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;:=&nbsp;GetLastError;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage(Format('Error&nbsp;Number:&nbsp;%d.&nbsp;Hex:&nbsp;%x',&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Error,&nbsp;Error]));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;SetLength(S,&nbsp;Size);&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;not&nbsp;InternetGetLastResponseInfo(Error,&nbsp;PChar(S),&nbsp;Size)&nbsp;then&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error&nbsp;:=&nbsp;GetLastError;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage(Format('Error&nbsp;Number:&nbsp;%d.&nbsp;Hex:&nbsp;%x',&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Error,&nbsp;Error]));&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage(Format('Error&nbsp;Number:&nbsp;%d.&nbsp;Hex:&nbsp;%x&nbsp;Info:&nbsp;%s',&nbsp;&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Error,&nbsp;Error,&nbsp;S]));&nbsp;&nbsp;<br>
&nbsp;&nbsp;end&nbsp;else&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage('Success');&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;Transfer;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
function&nbsp;TMyFtp.SendFile2(FTPFile,&nbsp;NewFile:&nbsp;string):&nbsp;Boolean;&nbsp;&nbsp;<br>
var&nbsp;&nbsp;<br>
&nbsp;&nbsp;FHandle:&nbsp;HInternet;&nbsp;&nbsp;<br>
begin&nbsp;&nbsp;<br>
&nbsp;&nbsp;FHandle&nbsp;:=&nbsp;&nbsp;FtpOpenFile(FFTPHandle,&nbsp;'sam.txt',&nbsp;GENERIC_READ,&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FTP_TRANSFER_TYPE_BINARY,&nbsp;0);&nbsp;&nbsp;<br>
&nbsp;&nbsp;if&nbsp;FHandle&nbsp;&lt;&gt;&nbsp;nil&nbsp;then&nbsp;&nbsp;<br>
&nbsp;&nbsp;InternetCloseHandle(FHandle)&nbsp;&nbsp;<br>
&nbsp;&nbsp;else&nbsp;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;ShowMessage('Failed');&nbsp;&nbsp;<br>
&nbsp;&nbsp;Result&nbsp;:=&nbsp;True;&nbsp;&nbsp;<br>
end;&nbsp;&nbsp;<br>
&nbsp;&nbsp;<br>
end.&nbsp;&nbsp;&nbsp;&nbsp;</p>
</body>
</html>
