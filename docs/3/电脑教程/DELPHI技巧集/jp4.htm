<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Delphi使用技巧四则</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<h3 align="center"><font face="宋体" color="#000000" size="6"><strong>Delphi使用技巧四则</strong></font></h3>

<h3><br>
<big>　　一、定制Speedbar</big></h3>

<p><br>
　　在Delphi的可视化设计界面中，使用最频繁的地方要数位于屏幕左上角的加速按钮栏（Speedbar）了。在实践过程中，笔者无意中发现了Speedbar的定制方法，这在我用过的四本Delphi参考书中均未提及到。步骤如下：</p>

<p>　　右键点击Speedbar，在弹出菜单中选Properties，这时会出现一个名为Speedbar 
Editor的对话框。假设想要增设一项“语法检查”的功能，可在左边Categories列表框中选Project，再把右侧的Syntax 
Check图标拖放到Speedbar的合适的位置上，这项功能就已经加上了。如果speedbar上没有多余的空间来容纳新的按钮，可将鼠标停在speedbar右框处，变为双向箭头的形状时，向右拖动一段距离，就可腾出空间。如想删除speedbar上的某个按钮，可简单地把它拖出speedbar的范围，就能删除。操作十分方便。建议把Syntax 
Check、Project Options（工程选项）、WindowsApi Help加到Speedbar中，可以提高开发效率。</p>

<p>　<big></p>

<p><br>
　　二、设计Form时的快捷键</big></p>

<p><br>
　　使用快捷键可以加快设计速度。下面列出的快捷键，可根据实际情况，有选择地熟练掌握。</p>

<p>　　Del :删除所选组件；</p>

<p>　　Esc :选择当前组件的容器（通常是Panel,Group或Form）；</p>

<p>　　F11 :在Form或Unit和对象检查器之间切换；</p>

<p>　　F12 :在Form和代码编辑器间切换；</p>

<p>　　Ctrl＋F12 :显示“查看Unit”对话框；</p>

<p>　　Shift＋F12 :显示“查看Form”对话框；</p>

<p>　　TAB :下一个组件;</p>

<p>　　Shift＋TAB :上一个组件;</p>

<p>　　方向键 :选中此方向上最近的组件;</p>

<p>　　Ctrl＋方向键 :将所选组件移动一个点;</p>

<p>　　Shift＋方向键 :将所选组件改变一个点的大小;</p>

<p>　　Ctrl＋Shift＋方向键 :将所选组件移动一个格;</p>

<p>　　Shift＋click :按住Shift键再用鼠标点击组件，可以选择多个组件。</p>

<p>　　下面这条是我摸索出来的：</p>

<p>　　Ctrl＋drag :按住Ctrl键在一个容器组件（如Panel,QReport,Groupbox等）里拖动鼠标，可强制选择鼠标拖过的矩形框中的所有属于此容器的可视组件（不包括该容器组件）。</p>

<p>　<big></p>

<p><br>
　　三、命令行参数的使用</big></p>

<p><br>
　　Delphi提供了访问命令行参数的方便的方式，那就是使用ParamStr和ParamCount函数。其中ParamStr(0)返回的是当前程序名，如C:\TEST\MYPROG.EXE，ParamStr(1)返回第一个参数，以此类推；ParamCount则是参数个数。示例如下:</p>

<p>　　var </p>

<p>　　I: Word;</p>

<p>　　Y: Integer;</p>

<p>　　begin</p>

<p>　　 Y := 10;</p>

<p>　　 for I := 1 to ParamCount do begin</p>

<p>　　 Canvas.TextOut(5, Y, ParamStr(I));</p>

<p>　　 Y := Y ＋ Canvas.TextHeight(ParamStr(I)) ＋ 5;</p>

<p>　　 end;</p>

<p>　　end;</p>

<p>　<big></p>

<p><br>
　　四、DCU文件（编译的库单元）的重用</big></p>

<p><br>
　　(1)在interface里的uses子句中引用。如Windows,Dialogs等，要求被引用的DCU一定要放在Delphi 
3\Lib子目录中。</p>

<p>　　(2)在implementation里的uses子句中引用。如果是自行编写的DCU文件，应采用这一方式，并将被引用的DCU文件放入当前工程所在的子目录中。</p>

<p>　<small><E></p>
<E>
<p></small></p>
</body>
</html>
