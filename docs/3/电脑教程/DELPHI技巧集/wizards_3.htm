<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>怎样编写DELPHI向导(三)</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<p align="center"><big><big><big>怎样编写DELPHI向导(三)</big></big></big></p>

<p>发信人:&nbsp;strayli&nbsp;(stray),&nbsp;信区:&nbsp;Delphi&nbsp;<br>
标&nbsp;&nbsp;题:&nbsp;How&nbsp;to&nbsp;write&nbsp;Delphi&nbsp;wizard(3)&nbsp;<br>
发信站:&nbsp;BBS&nbsp;水木清华站&nbsp;(Thu&nbsp;Nov&nbsp;&nbsp;5&nbsp;22:02:23&nbsp;1998)&nbsp;<b><font
color="#00FF00">WWW-POST</font></b>&nbsp;<br>
&nbsp;<br>
returns&nbsp;True&nbsp;if&nbsp;the&nbsp;named&nbsp;file&nbsp;is&nbsp;currently&nbsp;open.&nbsp; 
&nbsp;<br>
GetNewModuleName &nbsp;<br>
Automatically&nbsp;generates&nbsp;a&nbsp;valid&nbsp;Filename&nbsp;and&nbsp;Unit&nbsp;identifier.&nbsp;Uses&nbsp;the&nbsp;same&nbsp;&nbsp;<br>
mechanism&nbsp;as&nbsp;used&nbsp;by&nbsp;the&nbsp;IDE.&nbsp; &nbsp;<br>
Component&nbsp;library&nbsp;interface&nbsp; &nbsp;<br>
&nbsp;<br>
GetModuleCount &nbsp;<br>
Returns&nbsp;the&nbsp;number&nbsp;of&nbsp;currently&nbsp;installed&nbsp;modules&nbsp;in&nbsp;the&nbsp;component&nbsp;library.&nbsp; 
&nbsp;<br>
GetModuleName &nbsp;<br>
Returns&nbsp;then&nbsp;name&nbsp;of&nbsp;the&nbsp;module&nbsp;given&nbsp;its&nbsp;index.&nbsp; 
&nbsp;<br>
GetComponentCount &nbsp;<br>
Returns&nbsp;the&nbsp;number&nbsp;of&nbsp;components&nbsp;installed&nbsp;in&nbsp;a&nbsp;particular&nbsp;module.&nbsp; 
&nbsp;<br>
GetComponentName &nbsp;<br>
Returns&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;component&nbsp;given&nbsp;its&nbsp;module&nbsp;index&nbsp;and&nbsp;index&nbsp;in&nbsp;that&nbsp;&nbsp;<br>
module.&nbsp; &nbsp;<br>
Error&nbsp;handling&nbsp; &nbsp;<br>
&nbsp;<br>
RaiseException &nbsp;<br>
This&nbsp;will&nbsp;cause&nbsp;an&nbsp;Exception&nbsp;to&nbsp;be&nbsp;raised&nbsp;with&nbsp;the&nbsp;IDE&nbsp;with&nbsp;the&nbsp;string&nbsp;passed&nbsp;&nbsp;<br>
to&nbsp;this&nbsp;function.&nbsp;NOTE:&nbsp;This&nbsp;will&nbsp;cause&nbsp;the&nbsp;stack&nbsp;to&nbsp;unwind&nbsp;and&nbsp;control&nbsp;will&nbsp;&nbsp;<br>
NOT&nbsp;return&nbsp;to&nbsp;this&nbsp;point.&nbsp;It&nbsp;is&nbsp;the&nbsp;resposibility&nbsp;of&nbsp;the&nbsp;Library&nbsp;to&nbsp;be&nbsp;sure&nbsp;&nbsp;<br>
it&nbsp;has&nbsp;correctly&nbsp;handled&nbsp;the&nbsp;error&nbsp;condition&nbsp;before&nbsp;calling&nbsp;this&nbsp;procedure.&nbsp; 
&nbsp;<br>
TIToolInterface&nbsp;for&nbsp;Delphi&nbsp;2.0x&nbsp;and&nbsp;3 &nbsp;<br>
Delphi&nbsp;2.0x&nbsp;and&nbsp;3&nbsp;have&nbsp;an&nbsp;expanded&nbsp;Open&nbsp;Tools&nbsp;API&nbsp;(compared&nbsp;to&nbsp;Delphi&nbsp;1.x),&nbsp;&nbsp;<br>
which&nbsp;is&nbsp;not&nbsp;only&nbsp;reflected&nbsp;in&nbsp;a&nbsp;few&nbsp;new&nbsp;methods&nbsp;for&nbsp;TIExpert,&nbsp;but&nbsp;especially&nbsp;&nbsp;<br>
for&nbsp;TIToolServices.&nbsp;The&nbsp;following&nbsp;additional&nbsp;methods&nbsp;are&nbsp;new&nbsp;and&nbsp;for&nbsp;the&nbsp;&nbsp;<br>
32-bits&nbsp;versions&nbsp;of&nbsp;Delphi&nbsp;only&nbsp;(methods&nbsp;that&nbsp;are&nbsp;shared&nbsp;with&nbsp;Delphi&nbsp;1.0&nbsp;have&nbsp;&nbsp;<br>
been&nbsp;left&nbsp;out&nbsp;for&nbsp;now):&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;<br>
TIToolServices&nbsp;=&nbsp;class(TInterface) &nbsp;<br>
public &nbsp;<br>
&nbsp;&nbsp;{&nbsp;Action&nbsp;interfaces&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;CreateModuleEx(const&nbsp;ModuleName,&nbsp;FormName,&nbsp;AncestorClass, 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;FileSystem:&nbsp;string;&nbsp;Source,&nbsp;Form:&nbsp;TIStream; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;CreateFlags:&nbsp;TCreateModuleFlags):&nbsp;TIModuleInterface;&nbsp;virtual; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Project/UI&nbsp;information&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;EnumProjectUnits(EnumProc:&nbsp;TProjectEnumProc;&nbsp;Param:&nbsp;Pointer):&nbsp;&nbsp;<br>
Boolean; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Virtual&nbsp;File&nbsp;system&nbsp;interfaces&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;RegisterFileSystem(AVirtualFileSystem:&nbsp;TIVirtualFileSystem):&nbsp;&nbsp;<br>
Boolean; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;&nbsp;function&nbsp;UnRegisterFileSystem(const&nbsp;Ident:&nbsp;string):&nbsp;Boolean;&nbsp;virtual; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;&nbsp;function&nbsp;GetFileSystem(const&nbsp;Ident:&nbsp;string):&nbsp;TIVirtualFileSystem;&nbsp;virtual; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Editor&nbsp;Interfaces&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;GetModuleInterface(const&nbsp;FileName:&nbsp;string):&nbsp;TIModuleInterface; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;&nbsp;function&nbsp;GetFormModuleInterface(const&nbsp;FormName:&nbsp;string):&nbsp;TIModuleInterface; 
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Menu&nbsp;Interfaces&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;GetMainMenu:&nbsp;TIMainMenuIntf;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Notification&nbsp;registration&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;AddNotifier(AddInNotifier:&nbsp;TIAddInNotifier):&nbsp;Boolean; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;&nbsp;function&nbsp;RemoveNotifier(AddInNotifier:&nbsp;TIAddInNotifier):&nbsp;Boolean; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Pascal&nbsp;string&nbsp;handling&nbsp;functions&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;NewPascalString(Str:&nbsp;PChar):&nbsp;Pointer;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;FreePascalString(var&nbsp;Str:&nbsp;Pointer);&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;ReferencePascalString(var&nbsp;Str:&nbsp;Pointer);&nbsp;virtual;&nbsp;stdcall;&nbsp;&nbsp;<br>
abstract; &nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;AssignPascalString(var&nbsp;Dest,&nbsp;Src:&nbsp;Pointer);&nbsp;virtual; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;stdcall;&nbsp;abstract; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;{&nbsp;Configuration&nbsp;Access&nbsp;} &nbsp;<br>
&nbsp;&nbsp;function&nbsp;GetBaseRegistryKey:&nbsp;string;&nbsp;virtual;&nbsp;stdcall;&nbsp;abstract; 
&nbsp;<br>
end; &nbsp;<br>
&nbsp;<br>
The&nbsp;following&nbsp;ToolServices&nbsp;functions&nbsp;are&nbsp;available&nbsp;to&nbsp;the&nbsp;client&nbsp;for&nbsp;32-bits&nbsp;&nbsp;<br>
versions&nbsp;of&nbsp;Delphi&nbsp;only:&nbsp; &nbsp;<br>
Actions&nbsp; &nbsp;<br>
CreateModuleEx &nbsp;<br>
New&nbsp;extended&nbsp;form&nbsp;of&nbsp;CreateModule.&nbsp;This&nbsp;will&nbsp;return&nbsp;a&nbsp;TIModuleInterface.&nbsp;All&nbsp;&nbsp;<br>
CreateModes&nbsp;from&nbsp;CreateModule&nbsp;are&nbsp;supported&nbsp;with&nbsp;only&nbsp;the&nbsp;following&nbsp;&nbsp;<br>
differences:&nbsp; &nbsp;<br>
cmExisting:&nbsp;Will&nbsp;create&nbsp;an&nbsp;existing&nbsp;module&nbsp;from&nbsp;the&nbsp;given&nbsp;file&nbsp;system.&nbsp; 
&nbsp;<br>
AncestorClass:&nbsp;This&nbsp;must&nbsp;specify&nbsp;an&nbsp;existing&nbsp;base&nbsp;class&nbsp;in&nbsp;the&nbsp;project.&nbsp;(use&nbsp;&nbsp;<br>
the&nbsp;cmAddToProject&nbsp;flag&nbsp;to&nbsp;add&nbsp;a&nbsp;module&nbsp;to&nbsp;the&nbsp;project&nbsp;first).&nbsp; 
&nbsp;<br>
Informational&nbsp; &nbsp;<br>
&nbsp;<br>
EnumProjectUnits &nbsp;<br>
Calls&nbsp;EnumProc&nbsp;once&nbsp;for&nbsp;each&nbsp;unit&nbsp;in&nbsp;the&nbsp;project.&nbsp; 
&nbsp;<br>
Editor&nbsp; &nbsp;<br>
&nbsp;<br>
GetModuleInterface &nbsp;<br>
Return&nbsp;an&nbsp;module&nbsp;interface&nbsp;associated&nbsp;with&nbsp;the&nbsp;given&nbsp;file.&nbsp;This&nbsp;function&nbsp;&nbsp;<br>
returns&nbsp;the&nbsp;same&nbsp;interface&nbsp;instance&nbsp;for&nbsp;a&nbsp;given&nbsp;module,&nbsp;only&nbsp;the&nbsp;reference&nbsp;&nbsp;<br>
count&nbsp;is&nbsp;adjusted.&nbsp;The&nbsp;user&nbsp;of&nbsp;this&nbsp;interface&nbsp;owns&nbsp;it&nbsp;and&nbsp;must&nbsp;call&nbsp;release&nbsp;&nbsp;<br>
when&nbsp;finished.&nbsp; &nbsp;<br>
GetFormModuleInterface &nbsp;<br>
returns&nbsp;an&nbsp;module&nbsp;interface&nbsp;associated&nbsp;with&nbsp;the&nbsp;given&nbsp;form.&nbsp; 
&nbsp;<br>
Menu&nbsp; &nbsp;<br>
&nbsp;<br>
GetMainMenu &nbsp;<br>
Returns&nbsp;an&nbsp;interface&nbsp;to&nbsp;the&nbsp;IDE's&nbsp;main&nbsp;menu.&nbsp;See&nbsp;TIMainMenuIntf&nbsp;for&nbsp;details.&nbsp;&nbsp;<br>
&nbsp;<br>
Notification&nbsp; &nbsp;<br>
&nbsp;<br>
AddNotifier &nbsp;<br>
Registers&nbsp;an&nbsp;instance&nbsp;of&nbsp;a&nbsp;descendant&nbsp;to&nbsp;TIAddIn-&nbsp;Notifier.&nbsp; 
&nbsp;<br>
RemoveNotifier &nbsp;<br>
Removes&nbsp;a&nbsp;registered&nbsp;instance&nbsp;of&nbsp;a&nbsp;TIAddInNotifier.&nbsp; 
&nbsp;<br>
Configuration&nbsp;Access&nbsp; &nbsp;<br>
&nbsp;<br>
GetBaseRegistryKey &nbsp;<br>
returns&nbsp;a&nbsp;string&nbsp;representing&nbsp;the&nbsp;full&nbsp;path&nbsp;to&nbsp;Delphi's&nbsp;base&nbsp;registry&nbsp;key.&nbsp;&nbsp;<br>
This&nbsp;key&nbsp;is&nbsp;relative&nbsp;to&nbsp;HKEY_CURRENT_USER.&nbsp; &nbsp;<br>
Virtual&nbsp;File&nbsp;System&nbsp; &nbsp;<br>
&nbsp;<br>
The&nbsp;RegisterFileSystem&nbsp;and&nbsp;UnRegisterFileSystem&nbsp;methods&nbsp;seem&nbsp;to&nbsp;be&nbsp;present&nbsp;to&nbsp;&nbsp;<br>
prepare&nbsp;for&nbsp;future&nbsp;porting&nbsp;and&nbsp;operating/filesystem&nbsp;specific&nbsp;issues.&nbsp;Nice&nbsp;to&nbsp;&nbsp;<br>
know&nbsp;Borland&nbsp;is&nbsp;working&nbsp;on&nbsp;that&nbsp;as&nbsp;well!&nbsp; &nbsp;<br>
Pascal&nbsp;String&nbsp;Handling&nbsp; &nbsp;<br>
&nbsp;<br>
The&nbsp;Pascal&nbsp;string&nbsp;handling&nbsp;functions&nbsp;are&nbsp;provided&nbsp;for&nbsp;IDE&nbsp;add-in&nbsp;writers&nbsp;to&nbsp;&nbsp;<br>
use&nbsp;a&nbsp;language&nbsp;other&nbsp;than&nbsp;Pascal.&nbsp;(C&nbsp;or&nbsp;C++,&nbsp;for&nbsp;example).&nbsp;Add-in&nbsp;writers&nbsp;&nbsp;<br>
using&nbsp;Delphi&nbsp;will&nbsp;never&nbsp;need&nbsp;to&nbsp;use&nbsp;these&nbsp;functions,&nbsp;but&nbsp;we'll&nbsp;focus&nbsp;on&nbsp;them&nbsp;&nbsp;<br>
for&nbsp;the&nbsp;sake&nbsp;of&nbsp;completeness:&nbsp; &nbsp;<br>
NewPascalString:&nbsp;Allocates&nbsp;and&nbsp;returns&nbsp;a&nbsp;pascal&nbsp;long&nbsp;string&nbsp;from&nbsp;the&nbsp;provided&nbsp;&nbsp;<br>
PChar&nbsp;(char*,&nbsp;in&nbsp;C).&nbsp;Passing&nbsp;an&nbsp;empty&nbsp;string&nbsp;or&nbsp;nil&nbsp;for&nbsp;the&nbsp;PChar&nbsp;will&nbsp;return&nbsp;&nbsp;<br>
nil&nbsp;for&nbsp;the&nbsp;string&nbsp;(Pascal's&nbsp;equivalent&nbsp;of&nbsp;an&nbsp;empty&nbsp;string).&nbsp; 
&nbsp;<br>
FreePascalString:&nbsp;Attempts&nbsp;to&nbsp;free&nbsp;the&nbsp;given&nbsp;Pascal&nbsp;string&nbsp;by&nbsp;decrementing&nbsp;&nbsp;<br>
the&nbsp;internal&nbsp;reference&nbsp;count&nbsp;and&nbsp;releasing&nbsp;the&nbsp;memory&nbsp;if&nbsp;the&nbsp;count&nbsp;returns&nbsp;to&nbsp;&nbsp;<br>
zero.&nbsp; &nbsp;<br>
ReferencePascalString:&nbsp;Increments&nbsp;the&nbsp;reference&nbsp;count&nbsp;of&nbsp;the&nbsp;given&nbsp;Pascal&nbsp;&nbsp;<br>
string.&nbsp;This&nbsp;allows&nbsp;the&nbsp;calling&nbsp;function&nbsp;to&nbsp;manually&nbsp;extend&nbsp;the&nbsp;lifetime&nbsp;of&nbsp;&nbsp;<br>
the&nbsp;string.&nbsp;A&nbsp;corresponding&nbsp;call&nbsp;to&nbsp;FreePascalString&nbsp;must&nbsp;be&nbsp;made&nbsp;in&nbsp;order&nbsp;to&nbsp;&nbsp;<br>
actually&nbsp;release&nbsp;the&nbsp;string's&nbsp;memory.&nbsp; &nbsp;<br>
AssignPascalString:&nbsp;Assigns&nbsp;one&nbsp;Pascal&nbsp;string&nbsp;to&nbsp;another.&nbsp;Never&nbsp;directly&nbsp;&nbsp;<br>
assign&nbsp;Pascal&nbsp;strings&nbsp;to&nbsp;each&nbsp;other.&nbsp;Doing&nbsp;so&nbsp;will&nbsp;orphan&nbsp;memory&nbsp;and&nbsp;cause&nbsp;a&nbsp;&nbsp;<br>
memory&nbsp;leak.&nbsp;The&nbsp;destination&nbsp;may&nbsp;be&nbsp;referencing&nbsp;another&nbsp;string,&nbsp;so&nbsp;the&nbsp;&nbsp;<br>
reference&nbsp;count&nbsp;of&nbsp;that&nbsp;string&nbsp;must&nbsp;be&nbsp;decremented.&nbsp;Likewise,&nbsp;the&nbsp;reference&nbsp;&nbsp;<br>
count&nbsp;of&nbsp;the&nbsp;source&nbsp;string&nbsp;must&nbsp;be&nbsp;incremented.&nbsp; 
&nbsp;<br>
5.&nbsp;TFileOpenDialogExpert &nbsp;<br>
Well,&nbsp;with&nbsp;the&nbsp;TIToolServices&nbsp;class&nbsp;we&nbsp;sure&nbsp;have&nbsp;a&nbsp;lot&nbsp;of&nbsp;information&nbsp;and&nbsp;&nbsp;<br>
power&nbsp;at&nbsp;our&nbsp;disposal,&nbsp;don't&nbsp;we!?&nbsp;Let's&nbsp;try&nbsp;to&nbsp;do&nbsp;something&nbsp;easy&nbsp;that&nbsp;doesn't&nbsp;&nbsp;<br>
get&nbsp;us&nbsp;into&nbsp;trouble&nbsp;right&nbsp;away.&nbsp;The&nbsp;API&nbsp;that&nbsp;I'm&nbsp;looking&nbsp;for&nbsp;that&nbsp;will&nbsp;allow&nbsp;&nbsp;<br>
me&nbsp;to&nbsp;open&nbsp;any&nbsp;file&nbsp;as&nbsp;a&nbsp;new&nbsp;project&nbsp;seems&nbsp;to&nbsp;be&nbsp;OpenProject,&nbsp;which&nbsp;takes&nbsp;a&nbsp;&nbsp;<br>
fully&nbsp;qualified&nbsp;filename&nbsp;as&nbsp;only&nbsp;argument.&nbsp; &nbsp;<br>
&nbsp;<br>
The&nbsp;engine&nbsp;for&nbsp;the&nbsp;first&nbsp;version&nbsp;of&nbsp;the&nbsp;TFileOpenExpert&nbsp;is&nbsp;as&nbsp;follows:&nbsp; 
&nbsp;<br>
&nbsp;<br>
&nbsp;<br>
TFileOpenExpert&nbsp; &nbsp;<br>
GetStyle:&nbsp;esStandard&nbsp; &nbsp;<br>
GetIDString:&nbsp;DrBob.TFileOpenExpert.standard&nbsp; &nbsp;<br>
GetName:&nbsp;FileOpen&nbsp;Wizard&nbsp; &nbsp;<br>
GetAuthor&nbsp;(win32):&nbsp;Bob&nbsp;Swart&nbsp;(aka&nbsp;Dr.Bob)&nbsp; &nbsp;<br>
GetMenuText:&nbsp;&amp;FileOpen&nbsp;Wizard...&nbsp; &nbsp;<br>
GetState:&nbsp;[esEnabled]&nbsp; &nbsp;<br>
GetGlyph:&nbsp;0&nbsp; &nbsp;<br>
GetPage&nbsp;(win32):&nbsp;&nbsp;&nbsp; &nbsp;<br>
GetComment:&nbsp;&nbsp;&nbsp; &nbsp;<br>
&nbsp;<br>
So,&nbsp;all&nbsp;we&nbsp;need&nbsp;to&nbsp;do&nbsp;in&nbsp;the&nbsp;Execute&nbsp;procedure,&nbsp;is&nbsp;somehow&nbsp;get&nbsp;the&nbsp;fully&nbsp;&nbsp;<br>
qualified&nbsp;filename,&nbsp;and&nbsp;call&nbsp;ToolServices.OpenProject&nbsp;with&nbsp;it.&nbsp;The&nbsp;easiest&nbsp;&nbsp;<br>
way&nbsp;seems&nbsp;to&nbsp;be&nbsp;using&nbsp;a&nbsp;TOpenDialog,&nbsp;which&nbsp;we&nbsp;can&nbsp;create&nbsp;and&nbsp;execute&nbsp;on&nbsp;the&nbsp;&nbsp;<br>
fly,&nbsp;so&nbsp;the&nbsp;code&nbsp;of&nbsp;Execute&nbsp;looks&nbsp;as&nbsp;follows&nbsp;now:&nbsp; 
&nbsp;<br>
&nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;TFileOpenExpert.Execute; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;TOpenDialog.Create(nil)&nbsp;do &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Execute&nbsp;then &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToolServices.OpenProject(FileName); &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;end &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{Execute}; &nbsp;<br>
&nbsp;<br>
Well,&nbsp;it's&nbsp;almost&nbsp;what&nbsp;we&nbsp;want.&nbsp;We&nbsp;forgot&nbsp;to&nbsp;initialise&nbsp;the&nbsp;filter&nbsp;of&nbsp;the&nbsp;&nbsp;<br>
TOpenDialog,&nbsp;so&nbsp;we&nbsp;need&nbsp;to&nbsp;do&nbsp;that&nbsp;as&nbsp;well.&nbsp;Other&nbsp;than&nbsp;that,&nbsp;we&nbsp;can&nbsp;indeed&nbsp;&nbsp;<br>
open&nbsp;up&nbsp;new&nbsp;projects,&nbsp;but&nbsp;we&nbsp;don't&nbsp;close&nbsp;the&nbsp;files&nbsp;of&nbsp;any&nbsp;previous&nbsp;projects&nbsp;&nbsp;<br>
that&nbsp;were&nbsp;loaded.&nbsp;So,&nbsp;we&nbsp;need&nbsp;to&nbsp;call&nbsp;SaveProject&nbsp;and&nbsp;CloseProject&nbsp;prior&nbsp;to&nbsp;&nbsp;<br>
calling&nbsp;our&nbsp;OpenProject.&nbsp; &nbsp;<br>
&nbsp;<br>
&nbsp;&nbsp;procedure&nbsp;TFileOpenExpert.Execute; &nbsp;<br>
&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;with&nbsp;TOpenDialog.Create(nil)&nbsp;do &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Title&nbsp;:=&nbsp;GetName;&nbsp;{&nbsp;name&nbsp;of&nbsp;Wizard&nbsp;as&nbsp;OpenDialog&nbsp;caption&nbsp;} 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Filter&nbsp;:=&nbsp;'All&nbsp;Files&nbsp;(*.*)|*.*'; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Options&nbsp;:=&nbsp;Options&nbsp;+&nbsp;[ofShowHelp,&nbsp;ofPathMustExist,&nbsp;ofFileMustExist]; 
&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelpContext&nbsp;:=&nbsp;0; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;Execute&nbsp;then &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;begin &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToolServices.SaveProject; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToolServices.CloseProject; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToolServices.OpenProject(FileName) &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end; &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free &nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;end &nbsp;<br>
&nbsp;&nbsp;end&nbsp;{Execute}; &nbsp;<br>
</p>
</body>
</html>
