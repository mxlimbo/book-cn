<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Fonts</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="102"><H1>Fonts</H1></A><P>Old-fashioned character-mode applications could display only the boring system font on the screen. Windows provides multiple device-independent fonts in variable sizes. The effective use of these Windows fonts can significantly energize an application with minimum programming effort. TrueType fonts, first introduced with Windows version 3.1, are even more effective and are easier to program than the previous device-dependent fonts. You'll see several example programs that use various fonts later in this chapter.
<A NAME="103"><H2>Fonts Are GDI Objects</H2></A><P>Fonts are an integral part of the Windows GDI. This means that fonts behave the same way other GDI objects do. They can be scaled and clipped, and they can be selected into a device context as a pen or a brush can be selected. All GDI rules about deselection and deletion apply to fonts.
<A NAME="104"><H2>Choosing a Font</H2></A><P>Choosing a Windows font used to be like going to a fruit stand and asking for &quot;a piece of reddish-yellow fruit, with a stone inside, that weighs about 4 ounces.&quot; You might have gotten a peach or a plum or even a nectarine, and you could be sure that it wouldn't have weighed exactly 4 ounces. Once you took possession of the fruit, you could weigh it and check the fruit type. Now, with TrueType, you can specify the fruit type, but you still can't specify the exact weight.
<P>Today you can choose between two font types&#151;device-independent 
TrueType fonts and device-dependent fonts such as the Windows display System 
font and the LaserJet LinePrinter font&#151;or you can specify a font category and size and let Windows select the font for you. If you let Windows select the font, it will choose a TrueType font if possible. The MFC library provides a font selection dialog box tied to the currently selected printer, so there's little need for printer font guesswork. You let the user select the exact font and size for the printer, and then you approximate the display the best you can.
<A NAME="105"><H2>Printing with Fonts</H2></A><P>For text-intensive applications, you'll probably want to specify printer font sizes in points (1 point = <SUP>1</SUP>/<SUB>72</SUB> inch). Why? Most, if not all, built-in printer fonts are defined in terms of points. The LaserJet LinePrinter font, for example, comes in one size, 8.5 point. You can specify TrueType fonts in any point size. If you work in points, you need a mapping mode that easily accommodates points. That's what <I>MM_TWIPS</I> is for. An 8.5-point font is 8.5 &#215; 20, or 170, twips, and that's the character height you'll want to specify.
<A NAME="106"><H2>Displaying Fonts</H2></A><P>If you're not worried about the display matching the printed output, you have a lot of flexibility. You can choose any of the scalable Windows TrueType fonts, or you can choose the fixed-size system fonts (stock objects). With the TrueType fonts, it doesn't much matter what mapping mode you use; simply choose a font height and go for it. No need to worry about points.
<P>Matching printer fonts to make printed output match the screen presents some problems, but TrueType makes it easier than it used to be. Even if you're printing with TrueType fonts, however, you'll never quite get the display to match the printer output. Why? Characters are ultimately displayed in pixels 
(or dots), and the width of a string of characters is equal to the sum of the 
pixel widths of its characters, possibly adjusted for kerning. The pixel width of the characters depends on the font, the mapping mode, and the resolution of 
the output device. Only if both the printer and the display were set to 
<I>MM_TEXT</I> mode (1 pixel or dot = 1 logical unit) would you get an exact 
correspondence. If you're using the <I>CDC::GetTextExtent</I> function to calculate line breaks, the screen breakpoint will occasionally be different from the printer breakpoint.<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
In the MFC Print Preview mode, which we'll examine closely in <A HREF="ch19a.htm">Chapter 19</A>, line breaks occur exactly as they do on the printer, but the print quality in the preview window suffers in the process.
</BLOCKQUOTE></DIV>
<P>If you're matching a printer-specific font on the screen, TrueType again makes the job easier. Windows substitutes the closest matching TrueType font. For the 8.5-point LinePrinter font, Windows comes pretty close with its Courier New font.
<A NAME="107"><H2>Logical Inches and Physical Inches on the Display</H2></A>
<P>The <I>CDC</I> member function <I>GetDeviceCaps</I> returns various display measurements that are important to your graphics programming. The six described below provide information about the display size. The values listed are for 
a typical display card configured for a resolution of 640-by-480 pixels with Microsoft Windows NT 4.0.
<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<tr><td valign="top"><B>Index</B></td><td valign="top"><B>Description</B></td><td valign="top"><B>Value</B></td></tr>
<tr><td valign="top"><I>HORZSIZE</I></td><td valign="top">Physical width in millimeters</td><td valign="top">320</td></tr>
<tr><td valign="top"><I>VERTSIZE</I></td><td valign="top">Physical height in millimeters</td><td valign="top">240</td></tr>
<tr><td valign="top"><I>HORZRES</I></td><td valign="top">Width in pixels</td><td valign="top">640</td></tr>
<tr><td valign="top"><I>VERTRES</I></td><td valign="top">Height in raster lines</td><td valign="top">480</td></tr>
<tr><td valign="top"><I>LOGPIXELSX</I></td><td valign="top">Horizontal dots per logical inch</td><td valign="top">96</td></tr>
<tr><td valign="top"><I>LOGPIXELSY</I></td><td valign="top">Vertical dots per logical inch</td><td valign="top">96</td></tr>
</TABLE>

<P>The indexes <I>HORZSIZE</I> and <I>VERTSIZE</I> represent the physical 
dimensions of your display. (These indexes might not be true since Windows 
doesn't know what size display you have connected to your video adapter.) You can also calculate a display size by multiplying <I>HORZRES</I> and <I>VERTRES</I> by <I>LOGPIXELSX </I>and <I>LOGPIXELSY</I>, respectively. The size calculated this way is known as the <U>logical</U> <U>size</U> of the display. Using the values above and the fact that there are 25.4 millimeters per inch, we can quickly calculate the two display sizes for a 640-by-480 pixel display under Windows NT 4.0. The physical display size is 12.60-by-9.45 inches, and the logical size is 6.67-by-5.00 inches. So the physical size and the logical size need not be the same.
<P>For Windows NT 4.0, it turns out that <I>HORZSIZE</I> and <I>VERTSIZE</I> are independent of the display resolution, and <I>LOGPIXELSX</I> and <I>LOGPIXELSY</I> are always 96. So the logical size changes for different display resolutions, but the physical size does not. For Windows 95, the logical size and the physical size are equal, so both change with the display resolution. (At a resolution of 640-by-480 pixels with Windows 95, <I>HORZSIZE</I> is 169 and <I>VERTSIZE</I> is 127.)
<P>Whenever you use a fixed mapping mode such as <I>MM_HIMETRIC</I> or <I>MM_TWIPS</I>, the display driver uses the physical display size to do the mapping.
<P>So, for Windows NT, text is smaller on a small monitor; but that's not what you want. Instead, you want your font sizes to correspond to the logical display size, not the physical size.
<P>You can invent a special mapping mode, called <U>logical</U> <U>twips</U>, for which one logical unit is equal to <SUP>1</SUP>/<SUB>1440</SUB> logical inch. This mapping mode is independent of the operating system and display resolution and is used by programs such as Microsoft Word. Here is the code that sets the mapping mode to logical twips:<P>
<PRE>pDC-&gt;SetMapMode(MM_ANISOTROPIC);
pDC-&gt;SetWindowExt(1440, 1440);
pDC-&gt;SetViewportExt(pDC-&gt;GetDeviceCaps(LOGPIXELSX),
                    -pDC-&gt;GetDeviceCaps(LOGPIXELSY));
</PRE>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
From the Windows Control Panel, you can adjust both the display font size and the display resolution. If you change the display font size from the default 100 percent to 200 percent, <I>HORZSIZE</I> becomes 160, <I>VERTSIZE</I> becomes 120, and the dots-per-inch value becomes 192. In that case, the logical size is divided by 2, and all text drawn with the logical twips mapping mode is doubled in size.
</BLOCKQUOTE></DIV>
<P>
<A NAME="108"><H2>Computing Character Height</H2></A><P>Five font height measurement parameters are available through the <I>CDC</I> function <I>GetTextMetrics</I>, but only three are significant. Figure 5-1 shows the important font measurements. The <I>tmHeight</I> parameter represents the full 
height of the font, including descenders (for the characters g, j, p, q, and y) and any diacritics that appear over capital letters. The <I>tmExternalLeading</I> parameter is the distance between the top of the diacritic and the bottom of the descender from the line above. The sum of <I>tmHeight </I>and <I>tmExternalLeading</I> is the total character height. The value of <I>tmExternalLeading </I>can be 0.
<P><A HREF="javascript:fullSize('F05OG01x.htm')"> <img src="F05OG01.JPG" width=404 height=278 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 5-1.</B> <I>Font height measurements.</I>
<!-- /caption -->
<P>You would think that <I>tmHeight</I> would represent the font size in points. Wrong! Another <I>GetTextMetrics </I>parameter, <I>tmInternalLeading</I>, comes into play. The point size corresponds to the difference between <I>tmHeight </I>and <I>tmInternalLeading</I>. With the <I>MM_TWIPS</I> mapping mode in effect, a selected 12-point font might have a <I>tmHeight</I> value of 295 logical units and a <I>tmInter-nalLeading</I> value of 55. The font's net height of 240 corresponds to the point size of 12.
</BODY>
</HTML>



