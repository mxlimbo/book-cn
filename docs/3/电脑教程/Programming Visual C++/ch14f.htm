<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX14A Toolbar Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="286"><H1>The EX14A Toolbar Example</H1></A>
<P>In this example, you will replace the standard application framework Edit Cut, Copy, and Paste toolbar buttons with three special-purpose buttons that control drawing in the view window. You will also construct a Draw menu with three corresponding menu items, as follows.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Menu Item</b></TD><TD VALIGN="TOP"><b>Function</b></TD></TR>
<TR><TD VALIGN="TOP">Circle</TD><TD VALIGN="TOP">Draws a circle in the view window</TD></TR>
<TR><TD VALIGN="TOP">Square</TD><TD VALIGN="TOP">Draws a square in the view window</TD></TR>
<TR><TD VALIGN="TOP">Pattern</TD><TD VALIGN="TOP">Toggles a diagonal line fill pattern for new squares 
and circles</TD></TR>
</TABLE>
<P>The menu and toolbar options force the user to alternate between drawing circles and squares. After the user draws a circle, the Circle menu item and toolbar button are disabled; after the user draws a square, the Square menu item and toolbar button are disabled.
<P>On the application's Draw menu, the Pattern menu item gets a check mark when pattern fill is active. On the toolbar, the corresponding button is a check box button that is down when pattern fill is active and up when it is not active.
<P>Figure 14-2 shows the application in action. The user has just drawn a square with pattern fill. Notice the states of the three drawing buttons.
<P><A HREF="javascript:fullSize('F14OG02x.htm')"> <img src="F14OG02.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-2.</B> <I>The EX14A program in action.</I>
<!-- /caption -->
<P>The EX14A example introduces the resource editor for toolbars. You'll need to do very little C++ coding. Simply follow these steps:<P>
<OL>
<B><LI>Run AppWizard to generate \vcpp32\ex14a\ex14a.</B> Accept all default settings but two: select Single Document and deselect Printing and Print Preview. The options and the default class names are shown here.

<P> <img src="G14OG01x.GIF" width=414 height=423 border=0 ><P></OL>
<OL START="2">
<B><LI>Use the resource editor to edit the application's main menu.</B> In ResourceView, double-click on <I>IDR_MAINFRAME</I> under Menu. Edit the 
<I>IDR_MAINFRAME</I> menu resource to create a menu that looks like this (which means you'll need to change the Edit menu).

<P><IMG SRC="G14OG02.GIF" width=350 height=196 BORDER=0>
<P>Use the following command IDs for your new menu items.<P>



<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><b>Menu</b></TD><TD VALIGN="TOP"><b>Caption</b></TD><TD VALIGN="TOP"><b>Command ID</b></TD></TR>
<TR><TD VALIGN="TOP">Draw</TD><TD VALIGN="TOP"> Circle</TD><TD VALIGN="TOP"><I>ID_DRAW_CIRCLE</I></TD></TR>
<TR><TD VALIGN="TOP">Draw</TD><TD VALIGN="TOP"> Square</TD><TD VALIGN="TOP"><I>ID_DRAW_SQUARE</I></TD></TR>
<TR><TD VALIGN="TOP">Draw</TD><TD VALIGN="TOP"> Pattern</TD><TD VALIGN="TOP"><I>ID_DRAW_PATTERN</I></TD></TR>
</TABLE>
<P>

<P>When you're in the Menu Item Properties dialog, add some appropriate prompt strings and ToolTips (following a newline character). The string for <I>ID_DRAW_CIRCLE</I> might be &quot;Draw a circle\nCircle.&quot;</OL>
<OL START="3">
<P><B><LI>Use the resource editor to update the application's toolbar.</B> Edit 
the <I>IDR_MAINFRAME</I> toolbar resource to create a bitmap that looks like this.<P>

<P><IMG SRC="G14OG03.GIF" width=270 height=203 BORDER=0><P>

<P>You'll be erasing the Edit Cut, Copy, and Paste tiles (fourth, fifth, and sixth from the left) and replacing them with new tiles. The toolbar editor is fairly intuitive. You simply move the buttons around with the mouse. The Delete key erases a button's pixels. If you want to eliminate a button entirely, just drag it off the toolbar. Use the rectangle and ellipse tools from the graphics toolbar. Experiment with different line widths. Save the resource file when you're done&#151;just in case.
<P>Assign the IDs <I>ID_DRAW_CIRCLE</I>, <I>ID_DRAW_SQUARE</I>, and <I>ID_DRAW_PATTERN</I> to the three new buttons.</OL>

<OL START="4"><P><B><LI>Use ClassWizard to add <I>CEx14aView</I> view class message handlers.</B> Add message handlers for the following command and update command UI messages, and accept the default function names shown in the following table.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Object ID</B></TD><TD VALIGN="TOP"><B>Message</B></TD><TD VALIGN="TOP"><B>Member Function</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_CIRCLE</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnDrawCircle</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_CIRCLE</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP">
<I>OnUpdateDrawCircle</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_PATTERN</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnDrawPattern</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_PATTERN</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP">
<I>OnUpdateDrawPattern</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_SQUARE</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnDrawSquare</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_DRAW_SQUARE</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP">
<I>OnUpdateDrawSquare</I></TD></TR>
</TABLE>
<P></OL>
<OL START="5">
<P><B><LI>Add three data members to the <I>CEx14aView</I> class.</B> Edit the file ex14aView.h, or use ClassView.
<P><PRE><B>private:
    CRect m_rect;
    BOOL  m_bCircle;
    BOOL  m_bPattern;
</b></PRE>
<P><LI><b>Edit the ex14aView.cpp file.</B> The <I>CEx14aView</I> constructor simply initializes the class data members. Add the following boldface code:
<P><PRE>CEx14aView::CEx14aView() <B>: m_rect(0, 0, 100, 100)</B>
{<B>
    m_bCircle = TRUE;
    m_bPattern = FALSE;</B>
}
</PRE>
<P>The <I>OnDraw</I> function draws an ellipse or a rectangle, depending on the value of the <I>m_bCircle</I> flag. The brush is plain white or a diagonal pattern, depending on the value of <I>m_bPattern</I>.
<P><PRE>void CEx14aView::OnDraw(CDC* pDC)
{
    <B>CBrush brush(HS_BDIAGONAL, 0L); // brush with diagonal pattern

    if (m_bPattern) {
        pDC-&gt;SelectObject(&amp;brush);
    }
    else {
        pDC-&gt;SelectStockObject(WHITE_BRUSH);
    }
    if (m_bCircle) {
        pDC-&gt;Ellipse(m_rect);
    }
    else {
        pDC-&gt;Rectangle(m_rect);
    }
    pDC-&gt;SelectStockObject(WHITE_BRUSH); // Deselects brush
                                         //  if selected</B>
}
</PRE>
<P>The <I>OnDrawCircle </I>function handles the <I>ID_DRAW_CIRCLE</I> command message, and the <I>OnDrawSquare</I> function handles the <I>ID_DRAW_SQUARE</I> command message. These two functions move the drawing rectangle down and to the right, and then they invalidate the rectangle, causing the <I>OnDraw</I> function to redraw it. The effect of this invalidation strategy is a diagonal cascading of alternating squares and circles. Also, the display is not buffered, so when the window is hidden or minimized, previously drawn items are not redisplayed.
<P><PRE>void CEx14aView::OnDrawCircle()
{
    <B>m_bCircle = TRUE;
    m_rect += CPoint(25, 25);
    InvalidateRect(m_rect);</B>
}

void CEx14aView::OnDrawSquare()
{
    <B>m_bCircle = FALSE;
    m_rect += CPoint(25, 25);
    InvalidateRect(m_rect);</B>
}
</PRE><P>The following two update command UI functions alternately enable and disable the Circle and Square buttons and corresponding menu items. Only one item can be enabled at a time.
<P><PRE>void CEx14aView::OnUpdateDrawCircle(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(!m_bCircle);</B>
}

void CEx14aView::OnUpdateDrawSquare(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(m_bCircle);</B>
}
</PRE>
<P>The <I>OnDrawPattern</I> function toggles the state of the <I>m_bPattern</I> flag.
<P><PRE>void CEx14aView::OnDrawPattern()
{
<B>    m_bPattern ^= 1;</B>
}</PRE>
<P>The <I>OnUpdateDrawPattern</I> function updates the Pattern button and menu item according to the state of the <I>m_bPattern</I> flag. The toolbar button appears to move in and out, and the menu item check mark appears and disappears.
<P><PRE>void CEx14aView::OnUpdateDrawPattern(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;SetCheck(m_bPattern);</B>
}
</PRE>
<P><B><LI>Build and test the EX14A application.</B> Notice the behavior of the toolbar buttons. Try the corresponding menu items, and notice that they too are enabled, disabled, and checked as the application's state changes. Observe the ToolTip when you stop the mouse pointer on one of the new toolbar buttons.
</OL>

</BODY>
</HTML>



