<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX13A Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="268"><H1>The EX13A Example</H1></A>
<P>This example illustrates the routing of menu and keyboard accelerator commands to both documents and views. The application's view class is derived from <I>CView</I> and contains a rich edit control. View-directed menu commands, originating from a new pop-up menu named Transfer, move data between the view object and the document object, and a Clear Document menu item erases the document's contents. On the Transfer menu, the Store Data In Document item is grayed when the view hasn't been modified since the last time the data was transferred. The Clear Document item, located on the Edit menu, is grayed when the document is empty. Figure 13-4 shows the first version of the EX13A program in use.
<P><img src="F13OG04x.gif" width=413 height=272 border=0 ><P>
<!-- caption -->
<B>Figure 13-4.</B> <I>The EX13A program in use.</I>
<!-- /caption -->
<P>If we exploited the document-view architecture fully, we would tell the rich edit control to keep its text inside the document, but that's rather difficult to do. Instead, we'll define a document <I>CString</I> data member named <I>m_strText</I>, the contents of which the user can transfer to and from the control. The initial value of <I>m_strText</I> is a Hello message; choosing Clear Document from the Edit menu sets it to empty. By running this example, you'll start to understand the separation of the document and the view.
<P>The first part of the EX13A example exercises Visual C++'s wysiwyg menu editor and keyboard accelerator editor together with ClassWizard. You'll need to do very little C++ coding. Simply follow these steps:
<OL>
<P><B><LI>Run AppWizard to generate \vcpp32\ex13a\ex13a.</B> Accept all the default settings but two: select Single Document and deselect Printing and Print Preview. 
<P><B><LI>Use the resource editor to edit the application's main menu.</B> 
Click on the ResourceView tab in the Workspace window. Edit the <I>IDR_MAINFRAME</I> menu resource to add a separator and a Clear Document item to the Edit menu, as shown here.


<P><IMG SRC="G13OG01.GIF" width=197 height=136 BORDER=0><P>

<DIV CLASS=tip>
<BLOCKQUOTE>
<IMG SRC="tip.jpg" width=123 height=18 BORDER=0><P>
The resource editor's menu resource editor is intuitive, but you might need some help the first time you insert an item in the middle of a menu. A blank item is present at the bottom of each menu. Using the mouse, drag the blank item to the insertion position to define a new item. A new blank item will appear at the bottom when you're finished.
</BLOCKQUOTE></DIV>
<P>
<P>Now add a Transfer menu, and then define the underlying items.<P>
<P><IMG SRC="G13OG02.GIF" width=264 height=77 BORDER=0><P>
<P>Use the following command IDs for your new menu items.<P>
<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Menu</B></TD><TD VALIGN="TOP"><B>Caption</B></TD><TD VALIGN="TOP"><B>Command ID</B></TD></TR>
<TR><TD VALIGN="TOP">Edit</TD><TD VALIGN="TOP">Clear &amp;Document</TD><TD VALIGN="TOP"><I>ID_EDIT_CLEAR_ALL</I></TD></TR>
<TR><TD VALIGN="TOP">Transfer</TD><TD VALIGN="TOP">&amp;Get Data From Document\tF2</TD><TD VALIGN="TOP">
<I>ID_TRANSFER_GETDATA</I></TD></TR>
<TR><TD VALIGN="TOP">Transfer</TD><TD VALIGN="TOP">&amp;Store Data In Document\tF3</TD><TD VALIGN="TOP">
<I>ID_TRANSFER_STOREDATA</I></TD></TR>
</TABLE>

<P>The MFC library has defined the first item, <I>ID_EDIT_CLEAR_ALL</I>. (Note: \t is a tab character&#151;but type \<I>t</I>; don't press the Tab key.)
<P>When you add the menu items, type appropriate prompt strings in the Menu Item Properties dialog. These prompts will appear in the application's status bar window when the menu item is highlighted.
<P><B><LI>Use the resource editor to add keyboard accelerators.</B> Open the <I>IDR_MAINFRAME</I> accelerator table, and then use the insert key to add the following items.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><b>Accelerator ID</b></TD><TD VALIGN="TOP"><b>Key</b></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_TRANSFER_GETDATA</I></TD><TD VALIGN="TOP">VK_F2</TD></TR>
<TR><TD VALIGN="TOP"><I>ID_TRANSFER_STOREDATA</I></TD><TD VALIGN="TOP">VK_F3</TD></TR>
</TABLE>
<P>Be sure to turn off the Ctrl, Alt, and Shift modifiers. The Accelerator edit screen and Accel Properties dialog are shown in the illustration below.<P>
<P><A HREF="javascript:fullSize('G13OG03x.htm')"> <img src="G13OG03.JPG" width=404 height=306 border=0 ALT = "Click to view at full size."> </A><P>

<B><LI>Use ClassWizard to add the view class command and update command UI message handlers.</B> Select the <I>CEx13aView</I> class, and then add the following member functions.<P>

<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Object ID</B></TD><TD VALIGN="TOP"><B>Message</B></TD><TD VALIGN="TOP"><B>Member Function</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_TRANSFER_GETDATA</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnTransferGetData</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_TRANSFER_STOREDATA</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnTransferStoreData</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_TRANSFER_STOREDATA</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP">
<I>OnUpdateTransferStoreData</I></TD></TR>
</TABLE>
<P>

<B><LI>Use ClassWizard to add the document class command and update command UI message handlers.</B> Select the <I>CEx13aDoc</I> class, and then add the following member functions.
<P>

<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Object ID</B></TD><TD VALIGN="TOP"><B>Message</B></TD><TD VALIGN="TOP"><B>Member Function</B></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_EDIT_CLEAR_ALL</I></TD><TD VALIGN="TOP">COMMAND</TD><TD VALIGN="TOP"><I>OnEditClearDocument</I></TD></TR>
<TR><TD VALIGN="TOP"><I>ID_EDIT_CLEAR_ALL</I></TD><TD VALIGN="TOP">UPDATE_COMMAND_UI</TD><TD VALIGN="TOP"><I>OnUpdateEditClearDocument</I></TD></TR>
</TABLE>
<P>

<B><LI>Add a <I>CString</I> data member to the <I>CEx13aDoc</I> class.</B> Edit the file ex13aDoc.h or use ClassView.
<P><PRE><B>public:
    CString m_strText</B>;
</PRE>
<P><B><LI>Edit the document class member functions in ex13aDoc.cpp.</B> The <I>OnNewDocument</I> function was generated by ClassWizard. As you'll see in <A HREF="ch16a.htm">Chapter 16</A>, the framework calls this function after it first constructs the document and when the user chooses New from the File menu. Your version sets some text in the string data member. Add the following boldface code:
<P><PRE>BOOL CEx13aDoc::OnNewDocument()
{
    if (!CDocument::OnNewDocument())
        return FALSE;
<B>    m_strText = &quot;Hello (from CEx13aDoc::OnNewDocument)&quot;;</B>
    return TRUE;
}</PRE>
<P>The Edit Clear Document message handler sets <I>m_strText</I> to empty, and the update command UI handler grays the menu item if the string is already empty. Remember that the framework calls <I>OnUpdateEditClearDocument</I> when the Edit menu pops up. Add the following boldface code:
<P><PRE>void CEx13aDoc::OnEditClearDocument()
{
<B>    m_strText.Empty();</B>
}

void CEx13aDoc::OnUpdateEditClearDocument(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(!m_strText.IsEmpty());</B>
}</PRE>
<P><B><LI>Add a <I>CRichEditCtrl</I> data member to the <I>CEx13aView</I> class.</B> Edit the file ex13aView.h or use ClassView.
<P><PRE><B>public:
    CRichEditCtrl m_rich;
</B></PRE>
<P><B><LI>Use ClassWizard to map the WM_CREATE and WM_SIZE messages in the <I>CEx13aView</I> class.</B> The <I>OnCreate</I> function creates the rich edit 
control. The control's size is 0 here because the view window doesn't have a size yet. The code for the two handlers is shown below.
<P><PRE>int CEx13aView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
<B>    CRect rect(0, 0, 0, 0);</B>
    if (CView::OnCreate(lpCreateStruct) == -1)
        return -1;
<B>    m_rich.Create(ES_AUTOVSCROLL | ES_MULTILINE | ES_WANTRETURN |
                  WS_CHILD | WS_VISIBLE | WS_VSCROLL, rect, this, 1);</B>
    return 0;
}
</PRE>
<P>Windows sends the WM_SIZE message to the view as soon as the view's initial size is determined and again each time the user changes the frame size. This handler simply adjusts the rich edit control's size to fill the view client area. Add the following boldface code:<P>
<PRE>void CEx13aView::OnSize(UINT nType, int cx, int cy)
{
<B>    CRect rect;</B>
    CView::OnSize(nType, cx, cy);
<B>    GetClientRect(rect);
    m_rich.SetWindowPos(&amp;wndTop, 0, 0, rect.right - rect.left,
                        rect.bottom - rect.top, SWP_SHOWWINDOW);</B>
}</PRE>
<P><B><LI>Edit the menu command handler functions in ex13aView.cpp.</B> ClassWizard generated these skeleton functions when you mapped the menu commands in step 4. The <I>OnTransferGetData</I> function gets the text from the document data member and puts it in the rich edit control. The function then clears the control's modified flag. There is no update command UI handler. Add the following boldface code:
<P><PRE>void CEx13aView::OnTransferGetData()
{
<B>    CEx13aDoc* pDoc = GetDocument();
    m_rich.SetWindowText(pDoc-&gt;m_strText);
    m_rich.SetModify(FALSE);</B>
}
</PRE><P>The <I>OnTransferStoreData</I> function copies the text from the view's rich edit control to the document string and resets the control's modified flag. The corresponding update command UI handler grays the menu item 
if the control has not been changed since it was last copied to or from the document. Add the following boldface code:
<P><PRE>void CEx13aView::OnTransferStoreData()
{
<B>    CEx13aDoc* pDoc = GetDocument();
    m_rich.GetWindowText(pDoc-&gt;m_strText);
    m_rich.SetModify(FALSE);</B>
}

void CEx13aView::OnUpdateTransferStoreData(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(m_rich.GetModify());</B>
}</PRE>
<P><B><LI>Build and test the EX13A application.</B> When the application starts, the Clear Document item on the Edit menu should be enabled. Choose Get Data From Document from the Transfer menu. Some text should appear. Edit the text, and then choose Store Data In Document. That menu item should now appear gray. Try choosing the Clear Document command, and then choose Get Data From Document again.
</OL>

</BODY>
</HTML>



