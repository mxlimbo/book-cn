<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>An OLE Embedding Container Application</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="679"><H1><B>An OLE Embedding Container Application</B></H1></A>
<P>Now that we've got a working mini-server that supports embedding (EX28A), we'll write a container program to run it. We're not going to use the MFC container support, however, because you need to see what's happening at the OLE interface level. We will use the MFC document-view architecture and the 
MFC interface maps, and we'll also use the MFC data object classes.

<A NAME="680"><H2><B>MFC Support for OLE Containers</B></H2></A>
<P>If you did use AppWizard to build an MFC OLE container application, you'd get a class derived from <I>COleDocument</I> and a class derived from <I>COleClientItem</I>. These MFC base classes implement a number of important OLE container interfaces for embedding and in-place activation. The idea is that you have one <I>COleClientItem</I> object for each embedded object in a single container document. Each <I>COleClientItem</I> object defines a site, which is where the component object lives in the window.

<P>The <I>COleDocument</I> class maintains a list of client items, but it's up to you to specify how to select an item and how to synchronize the metafile's position with the in-place frame position. AppWizard generates a basic container application with no support for linking, clipboard processing, or drag and drop. If you want those features, you might be better off looking at the MFC 
DRAWCLI and OCLIENT samples.

<P>We will use one MFC OLE class in the container&#151;<I>COleInsertDialog</I>. This class wraps the 
<I>OleUIInsertObject</I> function, which invokes the standard Insert Object dialog box. This Insert Object dialog enables the user to select from a list of registered component programs.

<A NAME="681"><H2><B>Some Container Limitations</B></H2></A>
<P>Because our container application is designed for learning, we'll make some simplifications to reduce the bulk of the code. First of all, this container won't support in-place activation&#151;it allows the user to edit embedded objects only in a separate window. Also, the container supports only one embedded item per document, and that means there's no linking support. The container uses a structured storage file to hold the document's embedded item, but it handles the storage directly, bypassing the framework's serialization system. Clipboard support is provided; drag-and-drop support is not. Outside these limitations, however, it's a pretty good container!

<A NAME="682"><H2><B>Container Features</B></H2></A>
<P>So, what does the container actually do? Here's a list of features:

<UL>
<P><LI>As an MFC MDI application, it handles multiple documents.
<P><LI>Displays the component's metafile in a sizeable, moveable tracker rectangle in the view window.
<P><LI>Maintains a temporary storage for each embedded object.
<P><LI>Implements the Insert Object menu option, which allows the user to select a registered component. The selected component program starts in its own window.
<P><LI>Allows embedded objects to be copied (and cut) to the clipboard and pasted. These objects can be transferred to and from other containers such as Microsoft Word and Microsoft Excel.
<P><LI>Allows an embedded object to be deleted.
<P><LI>Tracks the component program's loaded-running transitions and hatches the tracker rectangle when the component is running or active.
<P><LI>Redraws the embedded object's metafile on receipt of component change notifications.
<P><LI>Saves the object in its temporary storage when the component updates the object or exits.
<P><LI>Copies the embedded object's temporary storage to and from named storage files in response to Copy To and Paste From commands on the Edit menu.
</UL>

</BODY>
</HTML>



