<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX19B Example -- A Multipage Print Program</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="420"><H1>The EX19B Example&#151;A Multipage Print Program</H1></A>
<P>In this example, the document contains an array of 50 <I>CRect</I> objects that define circles. The circles are randomly positioned in a 6-by-6-inch area and have random diameters of as much as 0.5 inch. The circles, when drawn on the display, look like two-dimensional simulations of soap bubbles. Instead of drawing the circles on the printer, the application prints the corresponding <I>CRect</I> coordinates in numeric form, 12 to a page, with headers and footers.
<OL>
<B><LI>Run AppWizard to generate \vcpp32\ex19b\ex19b.</B> Select Single Document, and accept the defaults for all the other settings. The options and the default class names are shown here.

<P><img src="g19og05x.gif" width=414 height=423 border=0><P>

<P><B><LI>Edit the StdAfx.h header file.</B> You'll need to bring in the 
declarations for the MFC template collection classes. Add the following statement:
<P><PRE><B>#include &lt;afxtempl.h&gt;</b></PRE>
<P><LI><b>Edit the ex19bDoc.h header file.</B> In the EX19A example, the 
document data consists of strings stored in a <I>CStringArray</I> collection. Because we're using a template collection for ellipse rectangles, we'll need a <I>typedef</I> statement outside the class declaration, as shown here:
<P><PRE><B>typedef CArray&lt;CRect, CRect&amp;&gt; CRectArray;</B></PRE>
<P>Next add the following public data members to the ex19bDoc.h header file:
<P><PRE><B>public:
    enum { nLinesPerPage = 12 };
    enum { nMaxEllipses = 50 };
    CRectArray m_ellipseArray;</B></PRE>
<P>The two enumerations are object-oriented replacements for 
<I>#define</I>s.
<P><B><LI>Edit the ex19bDoc.cpp implementation file.</B> The overridden <I>OnNew Document</I> function initializes the ellipse array with some random 
values, and the <I>Serialize</I> function reads and writes the whole array. 
AppWizard generated the skeletons for both functions. You don't need a 
<I>DeleteContents</I> function because the <I>CArray</I> subscript operator writes a new <I>CRect</I> object on top of any existing one. Add the following boldface code:
<P><PRE>BOOL CEx19bDoc::OnNewDocument()
{
    if (!CDocument::OnNewDocument())
        return FALSE;

    <B>int n1, n2, n3;
    // Make 50 random circles
    srand((unsigned) time(NULL));
    m_ellipseArray.SetSize(nMaxEllipses);

    for (int i = 0; i &lt; nMaxEllipses; i++) {
        n1 = rand() * 600 / RAND_MAX;
        n2 = rand() * 600 / RAND_MAX;
        n3 = rand() * 50  / RAND_MAX;
        m_ellipseArray[i] = CRect(n1, -n2, n1 + n3, -(n2 + n3));
    }

    </B>return TRUE;
}

void CEx19bDoc::Serialize(CArchive&amp; ar)
{
    <B>m_ellipseArray.Serialize(ar);</B>
}</PRE>
<P><B><LI>Edit the ex19bView.h header file.</B> Use ClassView to add the member variable and two function prototypes listed below. ClassView will also generate skeletons for the functions in ex19bView.cpp.
<P><PRE><B>public:
    int m_nPage;
private:
    void PrintPageHeader(CDC *pDC);
    void PrintPageFooter(CDC *pDC);</B></PRE>
<P>The <I>m_nPage</I> data member holds the document's current page number for printing. The private functions are for the header and footer subroutines.
<P><B><LI>Edit the <I>OnDraw</I> function in ex19bView.cpp.</B> The overridden <I>OnDraw</I> function simply draws the bubbles in the view window. Add the 
boldface code shown here:
<P><PRE>void CEx19bView::OnDraw(CDC* pDC)
{
    <B>int i, j;

    </B>CEx19bDoc* pDoc = GetDocument();
    <B>j = pDoc-&gt;m_ellipseArray.GetUpperBound();
    for (i = 0; i &lt; j; i++) {
        pDC-&gt;Ellipse(pDoc-&gt;m_ellipseArray[i]);
    }</B>
}</PRE>
<P><B><LI>Insert the <I>OnPrepareDC</I> function in ex19bView.cpp.</B> The view class is not a scrolling view, so the mapping mode must be set in this function. Use ClassWizard to override the <I>OnPrepareDC</I> function, and then add the following boldface code:
<P><PRE>void CEx19bView::OnPrepareDC(CDC* pDC, CPrintInfo* pInfo)
{
  <B>  pDC-&gt;SetMapMode(MM_LOENGLISH);</B>
}</PRE>
<P><B><LI>Insert the <I>OnPrint</I> function in ex19bView.cpp.</B> The <I>CView</I> default <I>OnPrint</I> function calls <I>OnDraw</I>. In this example, we want the printed output to be entirely different from the displayed output, so the <I>OnPrint</I> function must take care of the print output without calling <I>OnDraw</I>. <I>OnPrint</I> first sets the mapping mode to 
<I>MM_TWIPS</I>, and then it creates a fixed-pitch font. After printing the numeric contents of 12 <I>m_ellipseArray</I> elements, <I>OnPrint</I> deselects the font. You could have created the font once in <I>OnBeginPrinting</I>, but you wouldn't have noticed the increased efficiency. Use ClassWizard to override the <I>OnPrint</I> function, and then add the following boldface code:
<P><PRE>void CEx19bView::OnPrint(CDC* pDC, CPrintInfo* pInfo)
{
    <B>int        i, nStart, nEnd, nHeight;
    CString    str;
    CPoint     point(720, -1440);
    CFont      font;
    TEXTMETRIC tm;</B>

    <B>pDC-&gt;SetMapMode(MM_TWIPS);
    CEx19bDoc* pDoc = GetDocument();
    m_nPage = pInfo-&gt;m_nCurPage; // for PrintPageFooter's benefit
    nStart = (m_nPage - 1) * CEx19bDoc::nLinesPerPage;
    nEnd = nStart + CEx19bDoc::nLinesPerPage;
     // 14-point fixed-pitch font
    font.CreateFont(-280, 0, 0, 0, 400, FALSE, FALSE,
                    0, ANSI_CHARSET, OUT_DEFAULT_PRECIS,
                    CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
                    DEFAULT_PITCH | FF_MODERN, &quot;Courier New&quot;);
                    // Courier New is a TrueType font</B>
    <B>CFont* pOldFont = (CFont*) (pDC-&gt;SelectObject(&amp;font));
    PrintPageHeader(pDC);
    pDC-&gt;GetTextMetrics(&amp;tm);
    nHeight = tm.tmHeight + tm.tmExternalLeading;
    for (i = nStart; i &lt; nEnd; i++) {
        if (i &gt; pDoc-&gt;m_ellipseArray.GetUpperBound()) {
            break;
        }
        str.Format(&quot;%6d %6d %6d %6d %6d&quot;, i + 1,
                   pDoc-&gt;m_ellipseArray[i].left,
                   pDoc-&gt;m_ellipseArray[i].top,
                   pDoc-&gt;m_ellipseArray[i].right,
                   pDoc-&gt;m_ellipseArray[i].bottom);
        point.y -= nHeight;
        pDC-&gt;TextOut(point.x, point.y, str);
    }
    PrintPageFooter(pDC);</B>
   <B> pDC-&gt;SelectObject(pOldFont);</B>
}</PRE>
<P><B><LI>Edit the <I>OnPreparePrinting</I> function in ex19bView.cpp.</B> The <I>OnPreparePrinting</I> function (whose skeleton is generated by AppWizard) computes the number of pages in the document and then communicates that value to the application framework through the <I>SetMaxPage</I> function. Add the following boldface code:
<P><PRE>BOOL CEx19bView::OnPreparePrinting(CPrintInfo* pInfo)
{
    <B>CEx19bDoc* pDoc = GetDocument();
    pInfo-&gt;SetMaxPage(pDoc-&gt;m_ellipseArray.GetUpperBound() /
                      CEx19bDoc::nLinesPerPage + 1);
    </B>return DoPreparePrinting(pInfo);
}</PRE>
<P><B><LI>Insert the page header and footer functions in ex19bView.cpp.</B>
These private functions, called from <I>OnPrint</I>, print the page headers and the page footers. The page footer includes the page number, stored by <I>OnPrint</I> in the view class data member <I>m_nPage</I>. The <I>CDC::GetTextExtent</I> function provides the width of the page number so that it can be right-justified. Add the boldface code shown here:
<P><PRE>void CEx19bView::PrintPageHeader(CDC* pDC)
{
    <B>CString str;

    CPoint point(0, 0);
    pDC-&gt;TextOut(point.x, point.y, &quot;Bubble Report&quot;);
    point += CSize(720, -720);
    str.Format(&quot;%6.6s %6.6s %6.6s %6.6s %6.6s&quot;,
               &quot;Index&quot;, &quot;Left&quot;, &quot;Top&quot;, &quot;Right&quot;, &quot;Bottom&quot;);
    pDC-&gt;TextOut(point.x, point.y, str);</B>
}

void CEx19bView::PrintPageFooter(CDC* pDC)
{
    <B>CString str;

    CPoint point(0, -14400); // Move 10 inches down
    CEx19bDoc* pDoc = GetDocument();
    str.Format(&quot;Document %s&quot;, (LPCSTR) pDoc-&gt;GetTitle());
    pDC-&gt;TextOut(point.x, point.y, str);
    str.Format(&quot;Page %d&quot;, m_nPage);
    CSize size = pDC-&gt;GetTextExtent(str);
    point.x += 11520 - size.cx;
    pDC-&gt;TextOut(point.x, point.y, str); // right-justified</B>
}</PRE>
<P><B><LI>Build and test the application.</B> For one set of random numbers, the bubble view window looks like this.

<P><A HREF="javascript:fullSize('g19og06x.htm')"> <img src="g19og06.jpg" width=404 height=303 border=0 ALT = "Click to view at full size."> </A><P>

<P>Each time you choose New from the File menu, you should see a different picture. In Print Preview, the first page of the output should look like this.

<P><A HREF="javascript:fullSize('g19og07x.htm')"> <img src="g19og07.jpg" width=404 height=303 border=0 ALT = "Click to view at full size."> </A><P>
<P>With the Print dialog, you can specify any range of pages to print.
</OL>
</BODY>
</HTML>



