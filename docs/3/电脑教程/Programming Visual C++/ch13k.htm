<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The CMenu Class</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="274"><H1>The <I>CMenu</I> Class</H1></A>
<P>Up to this point, the application framework and the menu editor have shielded you from the menu class, <I>CMenu</I>. A <I>CMenu</I> object can represent each Windows menu, including the top-level menu items and associated pop-up menus. Most of the time, the menu's resource is directly attached to a frame window when the window's <I>Create</I> or <I>LoadFrame</I> function is called, and a <I>CMenu</I> object is never explicitly constructed. The <I>CWnd</I> member function <I>GetMenu</I> returns a temporary <I>CMenu</I> pointer. Once you have this pointer, you can freely access and update the menu object.
<P>Suppose you want to switch menus after the application starts. <I>IDR_MAINFRAME</I> always identifies the initial menu in the resource script. If you want a second menu, you use the menu editor to create a menu resource with your own ID. Then, in your program, you construct a <I>CMenu</I> object, use the <I>CMenu::LoadMenu</I> function to load the menu from the resource, and call the <I>CWnd::SetMenu</I> function to attach the new menu to the frame window. Then you call the <I>Detach</I> member function to separate the object's <I>HMENU</I> handle so that the menu is not destroyed when the <I>CMenu</I> object goes out of scope.
<P>You can use a resource to define a menu, and then your program can modify the menu items at runtime. If necessary, however, you can build the whole menu at runtime, without benefit of a resource. In either case, you can use <I>CMenu</I> member functions such as <I>ModifyMenu</I>, <I>InsertMenu</I>, and 
<I>DeleteMenu</I>. Each of these functions operates on an individual menu item identified by ID or by a relative position index.
<P>A menu object is actually composed of a nested structure of submenus. You can use the <I>GetSubMenu</I> member function to get a <I>CMenu</I> pointer to a pop-up menu contained in the main <I>CMenu</I> object. The <I>CMenu::GetMenuString</I> function returns the menu item string corresponding to either a zero-based index or a command ID. If you use the command ID option, the menu is searched, together with any submenus.
</BODY>
</HTML>



