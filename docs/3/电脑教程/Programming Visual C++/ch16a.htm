<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Chapter Sixteen -- Separating the Document from Its View</TITLE>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>

<FONT SIZE="+3">Chapter Sixteen</FONT>
<A NAME="309"><H1>Separating the Document from Its View</H1></A><P>Now you're finally going to see the interaction between documents and views. <A HREF="ch13a.htm">Chapter 13</A> gave you a preview of this interaction when it showed the routing of command messages to both view objects and document objects. In this chapter, you'll see how the document maintains the application's data and how the view presents the data to the user. You'll also learn how the document and view objects talk to each other while the application executes.
<P>The two examples in this chapter both use the <I>CFormView</I> class as the base class for their views. The first example is as simple as possible, with the document holding only one simple object of class <I>CStudent</I>, which represents a single student record. The view shows the student's name and grade and allows editing. With the <I>CStudent</I> class, you'll get some practice writing classes to represent real-world entities. You'll also get to use the Microsoft Foundation Class (MFC) Library version 6.0 diagnostic dump functions.
<P>The second example goes further by introducing pointer collection 
classes&#151;the <I>CObList</I> and <I>CTypedPtrList</I> classes in particular. Now the document holds a collection of student records, and the view allows the sequencing, insertion, and deletion of individual records.
</BODY>
</HTML>



