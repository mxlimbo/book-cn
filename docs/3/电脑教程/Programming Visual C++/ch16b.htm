<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Document-View Interaction Functions</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>

<A NAME="310"><H1>Document-View Interaction Functions</H1></A><P>You already know that the document object holds the data and that the view object displays the data and allows editing. An SDI application has a document class derived from <I>CDocument</I>, and it has one or more view classes, each ultimately derived from <I>CView</I>. A complex handshaking process takes place among 
the document, the view, and the rest of the application framework. To understand this process, you need to know about five important member functions in the document and view classes. Two are nonvirtual base class functions that you call in your derived classes; three are virtual functions that you often override in your derived classes. Let's look at these functions one at a time.
<A NAME="311"><H2>The <I>CView::GetDocument</I> Function</H2></A><P>A view object has one and only one associated document object. The <I>GetDocument</I> function allows an application to navigate from a view to its document. Suppose a view object gets a message that the user has entered new data into an edit control. The view must tell the document object to update its internal data accordingly. The <I>GetDocument</I> function provides the document pointer that 
can be used to access document class member functions or public data embers.<P>
<DIV CLASS=note>

<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The <I>CDocument::GetNextView</I> function navigates from the document to the view, but because a document can have more than one view, it's necessary to call this member function once for each view, inside a loop. You'll seldom call 
<I>GetNextView</I> because the application framework provides a better method of iterating through a document's views.
</BLOCKQUOTE></DIV>
<P>When AppWizard generates a derived <I>CView</I> class, it creates a special 
<U>type-safe</U> version of the <I>GetDocument</I> function that returns not a 
<I>CDocument</I> pointer but a pointer to an object of your derived class. This function is an inline function, and it looks something like this:
<P><PRE>CMyDoc* GetDocument()
{
    return (CMyDoc*) 
m_pDocument;
}</PRE>
<P>When the compiler sees a call to <I>GetDocument</I> in your view class code, it uses the derived class version instead of the <I>CDocument</I> version, so you do not have to cast the returned pointer to your derived document class. Because the <I>CView::GetDocument</I> function is <U>not</U> a virtual function, a statement such as
<P><PRE>pView-&gt;GetDocument(); // pView is declared CView*</PRE>
<P>calls the base class <I>GetDocument</I> function and thus returns a pointer to a <I>CDocument</I> object.
<A NAME="312"><H2>The <I>CDocument::UpdateAllViews</I> Function</H2></A><P>If the document data changes for any reason, all views must be notified so 
that they can update their representations of that data. If <I>UpdateAllViews</I> is called from a member function of a derived document class, its first parameter, <I>pSender</I>, is <I>NULL</I>. If 
<I>UpdateAllViews</I> is called from a member function of a derived view class, set the <I>pSender</I> parameter to the current view, like this:
<P><PRE>GetDocument()-&gt;UpdateAllViews(this);</PRE>
<P>The non-null parameter prevents the application framework from notifying the 
current view. The assumption here is that the current view has already updated itself.
<P>The function has optional <U>hint</U> parameters that can be used to give 
view-specific and application-dependent information about which parts of the view to update. This is an advanced use of the function.
<P>How exactly is a view notified when <I>UpdateAllViews</I> gets called? Take a look at the next function, <I>OnUpdate</I>.
<A NAME="313"><H2>The <I>CView::OnUpdate</I> Function</H2></A><P>This virtual function is called by the application framework in response to your application's call to the <I>CDocument::UpdateAllViews</I> function. You can, of course, call it directly within your derived <I>CView</I> class. Typically, your derived view class's <I>OnUpdate</I> function accesses the document, gets the document's data, and then updates the view's data members or controls to reflect the changes. Alternatively, <I>OnUpdate</I> can invalidate a portion of the view, causing the view's <I>OnDraw</I> function to use document data to draw in the window. The <I>OnUpdate</I> function might look something like this:
<PRE>void CMyView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint)
{
    CMyDocument* pMyDoc = GetDocument();
    CString lastName = pMyDoc-&gt;GetLastName();
    m_pNameStatic-&gt;SetWindowText(lastName); // m_pNameStatic is
                                            //  a CMyView data member
}</PRE>
<P>The hint information is passed through directly from the call to 
<I>UpdateAllViews</I>. The default <I>OnUpdate</I> implementation invalidates the entire window rectangle. In your overridden version, you can choose to define a smaller invalid rectangle as specified by the hint information.
<P>If the <I>CDocument</I> function <I>UpdateAllViews</I> is called with the 
<I>pSender</I> parameter pointing to a specific view object, <I>OnUpdate</I> is called for all the document's views <U>except</U> the specified view.
<A NAME="314"><H2>The <I>CView::OnInitialUpdate</I> Function</H2></A><P>This virtual <I>CView</I> function is called when the application starts, when the 
user chooses New from the File menu, and when the user chooses Open from the File menu. The <I>CView</I> base class version of <I>OnInitialUpdate</I> does nothing but call <I>OnUpdate</I>. If you override <I>OnInitialUpdate</I> in your derived view class, be sure that the view class calls the base class's 
<I>OnInitialUpdate</I> function or the derived class's <I>OnUpdate</I> function.
<P>You can use your derived class's <I>OnInitialUpdate</I> function to initialize your view object. When the application starts, the application framework calls <I>OnInitialUpdate</I> immediately after <I>OnCreate</I> (if you've mapped <I>OnCreate</I> in your view class). <I>OnCreate</I> is called once, but <I>OnInitialUpdate</I> can be called many times.
<A NAME="315"><H2>The <I>CDocument::OnNewDocument</I> Function</H2></A><P>The framework calls this virtual function after a document object is first 
constructed and when the user chooses New from the File menu in an SDI application. This is a good place to set the initial values of your document's data members. AppWizard generates an overridden <I>OnNewDocument</I> function in your derived document class. Be sure to retain the call to the base class function.
</BODY>
</HTML>



