<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The VARIANT Type</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="537"><H1><B>The <I>VARIANT</I>  Type</B></H1></A>
<P>No doubt you've noticed the <I>VARIANT</I> type used in both Automation client and component functions in the previous example. <I>VARIANT</I> is an all-purpose data type that <I>IDispatch::Invoke</I> uses to transmit parameters and return values. The <I>VARIANT</I> type is the natural type to use when exchanging data with VBA. Let's look at a simplified version of the <I>VARIANT</I> definition in the Windows header files.

<P><pre>
struct tagVARIANT {
    VARTYPE vt; // unsigned short integer type code
    WORD wReserved1, wReserved2, wReserved3;
    union {
        short      iVal;                 // VT_I2  short integer
        long       lVal;                 // VT_I4  long integer
        float      fltVal;               // VT_R4  4-byte float
        double     dblVal;               // VT_R8  8-byte IEEE float
        DATE       date;                 // VT_DATE stored as dbl
                                         //  date.time
        CY         vtCY                  // VT_CY 64-bit integer
        BSTR       bstrVal;              // VT_BSTR
        IUnknown*  punkVal;              // VT_UNKNOWN
        IDispatch* pdispVal;             // VT_DISPATCH
        short*     piVal;                // VT_BYREF | VT_I2
        long*      plVal;                // VT_BYREF | VT_I4
        float*     pfltVal;              // VT_BYREF | VT_R4
        double*    pdblVal;              // VT_BYREF | VT_R8
        DATE*      pdate;                // VT_BYREF | VT_DATE
        CY*        pvtCY;                // VT_BYREF | VT_CY
        BSTR*      pbstrVal;             // VT_BYREF | VT_BSTR
    }
};

typedef struct tagVARIANT VARIANT;
</pre>

<P>As you can see, the <I>VARIANT</I> type is a C structure that contains a type code <I>vt</I>, some reserved bytes, and a big <U>union</U> of types that you already know about. If <I>vt</I> is VT<I>_</I>I2, for example, you would read the <I>VARIANT</I>'s value from <I>iVal</I>, which contains a 2-byte integer. If <I>vt</I> is VT<I>_</I>R8, you would read this value from <I>dblVal</I>, which contains an 8-byte real value.

<P>A <I>VARIANT</I> object can contain actual data or a pointer to data. If <I>vt</I> has the VT_BYREF bit set, you must access a pointer in <I>piVal</I>, <I>plVal</I>, and so on. Note that a <I>VARIANT </I>object can contain an <I>IUnknown</I> pointer or an <I>IDispatch</I> pointer. This means that you can pass a complete COM<I> </I>object using an Automation call, but if you want VBA to process that object, its class should have an <I>IDispatch</I> interface.

<P>Strings are special. The <I>BSTR</I> type is yet another way to represent character strings. A <I>BSTR</I> variable is a pointer to a zero-terminated character array with a character count in front. A <I>BSTR</I> variable could, therefore, contain binary characters, including zeros. If you had a <I>VARIANT</I> object with <I>vt</I> = VT_BSTR, memory would look like this.

<P><img src="g25og02x.gif" width=423 height=175 border=0> 

<P>Because the string has a terminating 0, you can use <I>bstrVal</I> as though it were an ordinary 
<I>char</I> pointer, but you have to be very, very careful about memory cleanup. You can't simply delete the string pointer, because the allocated memory begins with the character count. Windows provides the <I>SysAllocString</I> and <I>SysFreeString</I> functions for allocating and deleting 
<I>BSTR</I> objects.

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0>
<P><I>SysAllocString</I> is another COM function that takes a wide string pointer as a parameter. This means that all <I>BSTR</I>s contain wide characters, even if you haven't defined <I>_UNICODE</I>. <U>Be</U> <U>careful</U>.</blockquote></div>

<P>Windows supplies some useful functions for <I>VARIANT</I>s, including those shown in the following table. If a <I>VARIANT</I> contains a <I>BSTR</I>, these functions ensure that memory is allocated and cleared properly. The <I>VariantInit</I> and <I>VariantClear</I> functions set<I> vt</I> to VT<I>_</I>EMPTY. All the variant functions are global functions and take a <I>VARIANT* </I>parameter.

<p><table cellpadding=5 width="95%">
<tr><td valign="top"><b>Function</b></td>
<td valign="top"><b>Description</b></td></tr>
<tr><td valign="top"><I>VariantInit</I></td>
<td valign="top">Initializes a <I>VARIANT</I></td></tr>
<tr><td valign="top"><I>VariantClear</I></td>
<td valign="top">Clears a <I>VARIANT</I></td></tr>
<tr><td valign="top"><I>VariantCopy</I></td>
<td valign="top">Frees memory associated with the destination <I>VARIANT</I> and copies the source <I>VARIANT</I></td></tr>
<tr><td valign="top"><I>VariantCopyInd</I></td>
<td valign="top">Frees the destination <I>VARIANT</I> and performs any indirection necessary to copy the source <I>VARIANT</I></td></tr>
<tr><td valign="top"><I>VariantChangeType</I></td>
<td valign="top">Changes the type of the <I>VARIANT</I></td></tr>
</table>

</BODY>
</HTML>



