<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX20C Example -- Switching View Classes Without a Splitter</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="432"><H1>The EX20C Example&#151;Switching View Classes Without a Splitter</H1></A><P>Sometimes you just want to switch view classes under program control and you don't want to be bothered with a splitter window. The EX20C example is an SDI application that switches between <I>CStringView</I> and <I>CHexView</I> in response to selections on the View menu. Starting with what AppWizard generates, all you need to do is add two new menu commands and then add some code to the <I>CMainFrame</I> class. You also need to change the 
<I>CStringView</I> and <I>CHexView</I> constructors from protected to public.
<A NAME="433"><H2>Resource Requirements</H2></A><P>The following two items have been added to the View menu in the <I>IDR_MAINFRAME</I> menu resource.
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Caption</B></TD><TD VALIGN="TOP"><B>Command ID</B></TD><TD VALIGN="TOP"><B><I>CMainFrame </I>Function</B></TD></TR>
<TR><TD VALIGN="TOP">St&amp;ring View</TD><TD VALIGN="TOP"><I>ID_VIEW_STRINGVIEW</I></TD><TD VALIGN="TOP">
<I>OnViewStringView</I></TD></TR>
<TR><TD VALIGN="TOP">&amp;Hex View</TD><TD VALIGN="TOP"><I>ID_VIEW_HEXVIEW</I></TD><TD VALIGN="TOP">
<I>OnViewHexView</I></TD></TR>
</TABLE>
<P>ClassWizard was used to add the command-handling functions (and corresponding update command UI handlers) to the <I>CMainFrame</I> class.
<A NAME="434"><H2><I>CMainFrame</I></H2></A><P>The <I>CMainFrame</I> class gets a new private helper function, <I>SwitchToView</I>, which is called from the two menu command handlers. The <I>enum</I> parameter tells the function which view to switch to. Here are the two added items in the MainFrm.h header file:
<P><PRE><B>private:
    enum eView { STRING = 1, HEX = 2 };
    void SwitchToView(eView nView);</B></PRE>
<P>The <I>SwitchToView</I> function (in MainFrm.cpp) makes some low-level MFC calls to locate the requested view and to activate it. Don't worry about how it works. Just adapt it to your own applications when you want the view-
switching feature. Add the following code:
<P><PRE><B>void CMainFrame::SwitchToView(eView nView)
{
    CView* pOldActiveView = GetActiveView();
    CView* pNewActiveView = (CView*) GetDlgItem(nView);
    if (pNewActiveView == NULL) {
        switch (nView) {
        case STRING:
            pNewActiveView = (CView*) new CStringView;
            break;
        case HEX:
            pNewActiveView = (CView*) new CHexView;
            break;
        }
        CCreateContext context;
        context.m_pCurrentDoc = pOldActiveView-&gt;GetDocument();
        pNewActiveView-&gt;Create(NULL, NULL, WS_BORDER,
            CFrameWnd::rectDefault, this, nView, &amp;context);
        pNewActiveView-&gt;OnInitialUpdate();
    }
    SetActiveView(pNewActiveView);
    pNewActiveView-&gt;ShowWindow(SW_SHOW);
    pOldActiveView-&gt;ShowWindow(SW_HIDE);
    pOldActiveView-&gt;SetDlgCtrlID(
        pOldActiveView-&gt;GetRuntimeClass() == 
        RUNTIME_CLASS(CStringView) ? STRING : HEX);
    pNewActiveView-&gt;SetDlgCtrlID(AFX_IDW_PANE_FIRST);
    RecalcLayout();
}</B></PRE>
<P>Finally, here are the menu command handlers and update command UI handlers that ClassWizard initially generated (along with message map entries and prototypes). The update command UI handlers test the current view's class.
<P><PRE>void CMainFrame::OnViewStringView()
{
<B>    SwitchToView(STRING);</B>
}

void CMainFrame::OnUpdateViewStringView(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(
        !GetActiveView()-&gt;IsKindOf(RUNTIME_CLASS(CStringView)));</B>
}

void CMainFrame::OnViewHexView()
{
<B>    SwitchToView(HEX);</B>
}

void CMainFrame::OnUpdateViewHexView(CCmdUI* pCmdUI)
{
<B>    pCmdUI-&gt;Enable(
        !GetActiveView()-&gt;IsKindOf(RUNTIME_CLASS(CHexView)));</B>
}</PRE>
<A NAME="435"><H2>Testing the EX20C Application</H2></A><P>The EX20C application initially displays the <I>CStringView</I> view of the document. You can toggle between the <I>CStringView</I> and <I>CHexView</I> views by choosing 
the appropriate command from the View menu. Both views of the document are shown side by side in Figure 20-2.
<P><A HREF="javascript:fullSize('F20OG02x.htm')"> <img src="F20OG02.JPG" width=404 height=262 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption --><B>Figure 20-2.</B> <I>The </I>CStringView<I> view and the </I>CHexView<I> view of the document.</I>
<!-- /caption -->

</BODY>
</HTML>



