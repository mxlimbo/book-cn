<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Visual C++ for Windows CE</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="993"><H1>Visual C++ for Windows CE</H1></A><P>Visual C++ for Windows CE is an add-on to Visual 
C++. When you install C++ for Windows CE, it extends the Visual 
C++ environment by adding several Windows CE-specific features:
<UL>
<LI>An Intel-based Windows CE emulation environment
<P><LI>New targets for each of the Windows CE supported 
processors (MIPS/SH and the emulation environment)
<P><LI>New AppWizards for Windows CE applications

<P><LI>A Windows CE compatible port of MFC
<P><LI>A Windows CE compatible port of ATL
<P><LI>Tools for remote execution and debugging of Windows CE 
applications on actual devices
<P></UL>
<P>One interesting aspect of Visual C++ for Windows CE is the fact that 
it also supports the older 1.0 and 1.01 versions of Windows CE. Figure 38-5 
shows the Windows CE operating system and processor configuration bars that 
have been added to Visual C++.
<P>While the environment lets you remotely run and debug your 
applications on a connected Windows CE device, it also includes a very powerful 
Windows CE emulation environment. The Windows CE emulator (WCE) is an 
Intel-based software-only version of Windows CE that runs on your desktop and gives 
you the convenience of being able to run and test your applications on your 
development machine. Of course, to ensure that your applications work correctly, 
you still need to test on real devices, but the emulator takes much of the pain 
out of the early compile and debug stages of Windows CE development. Figure 
38-6 shows the emulation environment in action.
<P>There are four Windows-CE-specific AppWizards that ship with Visual 
C++ for WCE:
<UL>
<LI><B>WCE ATL COM AppWizard</B>&#151;An ATL-based COM object project<P>
<LI><B>WCE MFC ActiveX ControlWizard</B>&#151;An MFC ActiveX control project<P>
<LI><B>WCE MFC AppWizard (dll)</B>&#151;An MFC DLL project<P>
<LI><B>WCE MFC AppWizard (exe)</B>&#151;An MFC executable project<P>
</UL>
<P><A HREF="javascript:fullSize('f38og05x.htm')"> <img src="f38og05.jpg" width=404 height=377 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 38-5.</B> <I>Visual C++ for the Windows CE environment.</I>
<!-- /caption -->
<P><A HREF="javascript:fullSize('f38og06x.htm')"> <img src="f38og06.jpg" width=404 height=152 border=0 ALT = "Click to view at full size."> </A><P>
<B>Figure 38-6.</B> <I>The Windows CE emulator.</I>
<P>The WCE AppWizards are basically the same as their big brother 
Win32 counterparts, except that they have different features that take advantage of 
the Windows CE operating system, such as the Windows CE help 
environment. Figure 38-7 shows the first three steps of the Windows CE MFC 
executable AppWizard. Notice that there are only two project types: SDI and 
dialog-based. Notice also the variety of Windows-CE-specific options that you 
can choose from.
<P><A HREF="javascript:fullSize('f38og07ax.htm')"><IMG SRC="f38og07a.jpg" width=404 height=325 BORDER="0" ALT = "Click to view at full size."></A>
<P><A HREF="javascript:fullSize('f38og07bx.htm')"><IMG SRC="f38og07b.jpg" width=404 height=325 BORDER="0" ALT = "Click to view at full size."></A>
<P><A HREF="javascript:fullSize('f38og07cx.htm')"><IMG SRC="f38og07c.jpg" width=404 height=325 BORDER="0" ALT = "Click to view at full size."></A>
<P>
<!-- caption -->
<B>Figure 38-7.</B> <I>The Windows CE MFC AppWizard.</I>
<!-- /caption -->

<A NAME="994"><H2>MFC for Windows CE</H2></A><P>Visual C++ for Windows CE ships with a smaller version of MFC named 
Mini MFC. To get a feel for which MFC classes are and are not supported, see 
Figure 38-8&#151;the MFC for Windows CE hierarchy chart. The grayed out 
classes are not supported on Windows CE.
<P>Several classes have been added to Mini MFC, including classes for 
command bars, object store, and socket classes. Windows CE functions provide 
the command bars in the Mini MFC <I>CFrameWnd</I> class.
<P>Instead of implementing a file metaphor, Windows CE provides an 
object store. Several new MFC classes were added to give the Windows CE 
developer access to the object store:
<UL>
<LI><B><I>CCeDBDatabase</I></B>&#151;Encapsulates a database in the object store
<P><LI><B><I>CCeDBEnum</I></B>&#151;Enumerates the databases in the object store
<P><LI><B><I>CCeDBProp</I></B>&#151;Encapsulates a database property (Database 
properties are data items consisting of an application-defined property 
identifier, a data-type identifier, and the data value.)
<P><LI><B><I>CCeDBRecord</I></B>&#151;Provides access to a record in the database
</UL>
<P>In addition to these data store classes, a new class 
<I>CCeSocket</I> is provided. <I>CCeSocket</I> implements an asynchronous 
<I>CSocket</I> derivative.
<P>
<P><A HREF="javascript:fullSize('f38og08ax.htm')"><IMG SRC="F38OG08A.JPG" WIDTH=404 HEIGHT=492 BORDER=0 ALT="Click to view at full size."></A>
<P><A HREF="javascript:fullSize('f38og08bx.htm')"><IMG SRC="F38OG08B.JPG" WIDTH=404 HEIGHT=397 BORDER="0" ALT="Click to view at full size."></A>

<!-- caption -->
<P><B>Figure 38-8.</B> <I>MFC for Windows CE hierarchy chart.</I>
<!-- /caption -->

<A NAME="995"><H2>Using Mini MFC</H2></A><P>Let's look at a couple of examples to get a feel for the Mini version of MFC. 
In example EX38A, we will create a basic SDI application that draws some text 
in the view and displays a dialog when the user presses the left mouse button 
(or taps the screen on a Windows CE machine). EX38A is similar to the 
EX06A example, so you can compare the steps in creating a similar application 
for Windows 98, Windows NT, and Windows CE. For this example, you will 
create a simulated expense-tracking application for Windows CE&#151;a perfect 
candidate for portable computing. For demonstration purposes, we will focus 
on creating a dialog that allows the user to enter expense information. Figure 
38-9 shows the application running in the emulation environment.
<P><A HREF="javascript:fullSize('F38OG09x.htm')"> <img src="F38OG09.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 38-9.</B> <I>The EX38A expense-tracking application.</I>
<!-- /caption -->
<P>Here are the steps to create the EX38A example:<P>
<OL>
<B><LI>Run the MFC Executable for Windows CE AppWizard to 
produce \vcpp32\ex38a\ex38a.</B> Select the WCE MFC AppWizard project 
type and accept all the defaults. The options and the default class names 
are shown here.
<P><B><LI>Select the WCE x86em Debug 
configuration.</B> Choose the Set Active Configuration command from the Set menu and then select 
Ex38a-Win32 (WCE x86em) Debug from the list. Click OK. This 
configuration will allow you to work with the desktop emulator instead of working 
remotely with a connected Windows CE device. (If you have a 
connected Windows CE device you can select its configuration instead. For 
example, select Ex38a&#151;Win32 [WCE SH] Debug if you have a connected 
HP 620LX.)

<P><img src="G38OG01x.GIF" width=413 height=418 border=0 ALT = "Click to view at full size."><P>

<B><LI>Use the dialog editor to create a dialog 
resource.</B> Choose Resource from the Insert menu, select Dialog, and then click New. The dialog 
editor assigns the ID <I>IDD_DIALOG1</I> to the new dialog. Change the 
dialog caption to <I>The Dialog that Ate Windows 
CE!</I> You can resize the dialog to be wider but not much taller. (Windows CE displays are much wider 
than they are tall.)
<P><B><LI>Remove the OK and CANCEL buttons and add an OK caption 
button.</B> Since screen real estate is at a premium in Windows CE, we can save 
a good deal of space in our dialog by deleting the OK and CANCEL 
buttons. For Cancel functionality, users can use the close button that is 
part of the dialog caption. Windows CE also supports an OK caption 
button that you can create by setting the dialog's property bar. To set the 
property, open the properties editor for the dialog, click the Extended 
Styles tab, and then check the Caption Bar OK (WCE Only) option as 
shown here.

<P><IMG SRC="G38OG02.GIF" width=403 height=162 BORDER=0><P>

<P>(You might also need to set the dialog's Visible property on the 
More Styles tab.)
<P><B><LI>Add the dialog's controls.</B> Add the following controls shown in 
Figure 38-9 and accept the default names:
<UL>
<LI>A static control and an edit control for a name
<P><LI>A static control and an edit control for an amount
<P><LI>A static control and a drop-down combo box with for an 
expense type
<P><LI>A City group box with three radio buttons labeled Atlanta, 
Detroit, and Chicago
<P><LI>A Payment Option group box with three check boxes labeled 
Check, Credit Card, and Cash.<P>
</UL>
<P><B><LI>Add the <I>CEx38aDialog</I> 
class.</B> After adding the controls, double-click on the dialog. ClassWizard detects that you have created a dialog 
resource and asks whether you want to create a class for the dialog. Click OK 
and accept the defaults to create the 
<I>CEx06aDialog</I> class.
<P><B><LI>Program the controls.</B> Use ClassWizard to create the following 
member variables in the dialog class:
<UL>
<LI><B><I>m_pComboBox</I>&#151;</B>a member variable used to configure the 
expense type combo box
<P><LI><B><I>m_pProgressCtrl</I>&#151;</B>A member variable for the progress control
</UL>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
If you need a refresher on how to program modal 
dialogs, please refer to <A HREF="ch06a.htm">Chapter 6</A>.
</BLOCKQUOTE></DIV>
<P>Next, add the following code to the 
<I>CEx38aDialog::OnInitDialog</I> handler to initialize the controls:
<P><PRE><B>BOOL CWindowsCEDlg::OnInitDialog() 
{
    CDialog::OnInitDialog();
    m_pComboBox.AddString(_T(&quot;Travel&quot;));
    m_pComboBox.AddString(_T(&quot;Meal&quot;));
    m_pComboBox.AddString(_T(&quot;Cab Fare&quot;));
    m_pComboBox.AddString(_T(&quot;Entertainment&quot;));
    m_pComboBox.AddString(_T(&quot;Other&quot;));
    m_pProgressCtrl.SetPos(50);

    return TRUE;  
}</B></PRE>
<P>Notice that you must use the <I>_T</I> macro whenever you have 
inline strings.
<P><B><LI>Connect the dialog to the View.</B> In ClassWizard, select the 
<I>CEx38aView</I> class and use ClassWizard to add the 
<I>OnLButtonDown</I> member function.
<P><B><LI>Write the code for the 
<I>OnLButtonDown</I> handler.</B> Add the boldface code below:
<P><PRE>void CEx38aView::OnLButtonDown(UINT nFlags, CPoint point) 
{
    <B>CWindowsCEDlg dlg;
    dlg.DoModal();
    CView::OnLButtonDown(nFlags, point);</B>
}</PRE>
<P><B><LI>Add code to the virtual <I>OnDraw</I> function in file 
ex38aView.cpp.</B> The <I>CDC::TextOut</I> function used in previous examples is not supported 
on Windows CE, so we need to use the 
<I>CDC::DrawText</I> function as shown here:
<P><PRE>void CEx38aView::OnDraw(CDC* pDC)
{
    <B>CRect rect;
    GetClientRect(rect);

    pDC-&gt;SetTextColor(::GetSysColor(COLOR_WINDOWTEXT));
    pDC-&gt;SetBkMode(TRANSPARENT);

    pDC-&gt;DrawText(_T(&quot;Press the left mouse button here.&quot;), 
        rect, DT_SINGLELINE);</B>
}</PRE>
<P><B><LI>Add the ex38aDialog.h header file to 
ex38aView.cpp.</B> Insert the include statement
<P><PRE><B>#include &quot;ex38aDialog.h&quot;</B></PRE>
<P>at the top of the ex38aView.cpp source file, after the statement
<P>#include &quot;ex38aView.h&quot;
<P><B><LI>Build and run the application.</B> The EX38A application should 
appear as shown in Figure 38-10. If everything works satisfactorily, you 
can change the configuration for a real Windows CE device. Then you 
can run (or debug) the application remotely on the device to ensure it 
works in a real-world situation.

<P><A HREF="javascript:fullSize('F38OG10x.htm')"> <img src="F38OG10.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 38-10.</B> <I>The EX 38A application running in the Windows CE emulator.</I>
<!-- /caption -->
</OL>
<P>As you can tell from the EX38A application, programming for 
Windows CE is very similar to programming for Windows 98 and Windows.
<P>Many Windows CE developers are interested in porting existing 
applications to the Windows CE environment. The next section shows you how 
to tackle this problem.
<A NAME="996"><H2>Porting an Existing MFC Application to Windows CE</H2></A><P>In example EX38B we will port an existing application (EX06B from 
<A HREF="ch06a.htm">Chapter 6</A>) from Windows 98 and Windows NT to Windows CE.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
We chose the EX06B sample because it is an SDI 
application. If you are porting an MDI application to Windows CE, 
we recommend that you first convert it into an SDI application (or a 
series of SDI applications, if you have several views) and then port it to 
Windows CE.
</BLOCKQUOTE></DIV>
<P>Here are the steps for converting EX06B:<P>
<OL>
<B><LI>Run the MFC AppWizard to produce 
\vcpp32\ex38b\ex38b.</B> Select the WCE MFC AppWizard project type and accept all defaults. 
(You might have thought that we could copy the EX06B workspace and 
then add a Windows CE configuration. However, it is actually easier to 
start with a WCE MFC AppWizard project instead because there are 
many complicated build settings that the wizard automatically sets up for you.)
<P><B><LI>Using Windows Explorer, copy the EX06B files to the EX38B 
directory.</B> Be sure to copy the following files: Ex06bDialog.h, 
Ex06bDialog.cpp, Ex06bDoc.h, Ex06bDoc.cpp, ex06bView.h, and ex06bView.cpp.
<P><B><LI>Insert the new files into the 
project.</B> Choose the Add To Project/Files command from the Project menu and insert the files from step 2 into the project.
<P><B><LI>Copy the dialog and Icon resources from 
EX06B.</B> Choose Open from the File menu and select 
\vcpp32\ex06b\ex06b\ex06b.rc. Drag and drop IDD_DIALOG1 from ex06b.rc into the EX38B project. Next, drag 
and drop the color icon resources (IDI_BLACK, IDI_BLUE, and so on) 
from the ex06b.rc file into the EX38B project.
<P><B><LI>Build the application and repair any compiler errors or 
warnings.</B> Now that you have moved the key files that you need (the 
document, view, and dialog classes) from the EX06B application to the Windows 
CE EX38B application, try to build the project. You should see a number 
of errors that can be fixed with the following steps:
<UL>
<LI>Change all references to the file ex06b.h to ex38b.h
<P><LI>Make sure that all inline strings use the 
<I>_T</I> macro. For example, in Ex06bDialog.cpp the line
<P><PRE>TRACE(&quot;updating trackbar data members\n&quot;);</PRE>
<P>should be changed to use the <I>_T</I> macro as follows:
<P><PRE>TRACE(<B>_T(&quot;</B>updating trackbar data members\n&quot;));</PRE>
<P><LI>Convert any other non-Unicode strings to Unicode. (This is 
the most frequently encountered porting problem.)
<P><LI><I>Ex06bView::OnDraw</I> uses the unsupported 
<I>CDC::TextOut</I> member function. Change it to use 
<I>DrawText</I> as follows:
<P><PRE>    <B>CRect rect;
    GetClientRect(rect);

    pDC-&gt;SetTextColor(::GetSysColor(COLOR_WINDOWTEXT));
    pDC-&gt;SetBkMode(TRANSPARENT);

    pDC-&gt;DrawText(_T(&quot;Press the left mouse button here.&quot;), 
        rect, DT_SINGLELINE);</B></PRE>
</UL>
<P><LI><B>Replace the wizard-generated view with the real 
view.</B> Open the ex38b.cpp file and do a global search and replace:
<UL>
<LI>Change CEx38bDoc to CEx06bDoc
<P><LI>Change CEx38bView to CEx06bView
<P></UL>
<P>Also, make sure that ex38b.cpp #includes both the ex06bView.h 
and ex06bDoc.h header files.
<P><B><LI>Using the dialog editor, adjust the dialog's layout for Windows CE.</B> 
As it stands, the dialog is far too tall for Windows CE. You can 
rearrange it by following these steps:
<UL>
<LI>Remove the OK and CANCEL buttons and use the OK 
window button (see step 4 in the EX38A example).
<P><LI>Move the progress bar controls, sliders, and spinners closer 
together at the top of the dialog.
<P><LI>Move the list control and tree control closer together. To 
save vertical space, move the current selection static controls to the 
left of both the tree and list control.
<P><LI>Size the dialog to fit on a smaller screen.<P>
</UL>
<P><B><LI>Clean up the project.</B> Now you can remove the document and 
view classes created by the MFC AppWizard by selecting the files in 
FileView and pressing the Delete key.
<P><B><LI>Build and test.</B> In eight easy steps, you have converted a small 
MFC application from Windows 98 and Windows NT to Windows CE.
<P>Figure 38-11 shows EX38B running in emulation mode for 
Window CE.
</OL>
<P><A HREF="javascript:fullSize('F38OG11x.htm')"> <img src="F38OG11.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 38-11.</B> <I>The EX38B application running in the Windows CE emulator.</I>
<!-- /caption -->
<A NAME="997"><H2>ATL and Windows CE</H2></A><P>In addition to Mini MFC, Visual C++ for Windows CE also provides a 
Windows CE-friendly version of ATL. ATL is already a lightweight framework, 
so Microsoft didn't need to reduce the feature set for size constraints. 
However, there are some areas of COM not covered by Windows CE 2.0 that impact 
the feature set of ATL for Windows CE.
<P>Windows CE doesn't support the apartment-threading model, so ATL 
for Windows CE doesn't implement the 
<I>CComApartment</I>, <I>CComAutoThreadModule</I>, 
<I>CComClassFactoryAutoThread</I>, or 
<I>CComSimpleThreadAllocator</I> classes.
<P>Windows CE also doesn't support asynchronous monikers, so ATL 
for Windows CE doesn't implement the 
<I>IBindStatusCallbackImpl</I> or 
<I>CBindStatusCallback</I> classes. A variety of other ATL class member functions that 
behave differently on Windows CE are documented in the Visual 
C++ for Windows CE documentation.
<P>In addition to ATL, a Windows CE version of the ATL Wizard is 
provided. Figure 38-12 shows the wizard that has only one option: to use MFC or not.
<P><A HREF="javascript:fullSize('F38OG12x.htm')"> <img src="F38OG12.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 38-12.</B> <I>The WCE ATL COM AppWizard.</I>
<!-- /caption -->
<P>When you write ActiveX controls for Windows CE, remember that 
they are binary objects and therefore processor-dependent. Depending on the 
devices you plan to support, you might have to provide several versions of 
the control (MIPS or SH, for example).
</BODY>
</HTML>



