<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>A Help Command Processing Example -- EX21B</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="461"><H1><B>A Help Command Processing Example&#151;EX21B</B></H1></A>
<P>EX21B is based on example EX20D from <A HREF="ch20a.htm">Chapter 20</A>. It's a two-view 
MDI application with view-specific help added. Each of the two view classes has an <I>OnCommandHelp</I> message handler to process F1 help requests and an <I>OnHelpHitTest</I> message handler to process Shift-F1 help requests.

<A NAME="462"><H2><B>Header Requirements</B></H2></A>
<P>The compiler recognizes help-specific identifiers only if the following <I>#include</I> statement is present:

<P><B><pre>
#include &lt;afxpriv.h&gt;
</pre></B>

<P>In EX21B, the statement is in the StdAfx.h file.

<A NAME="463"><H2><B><I>CStringView</I></B></H2></A>
<P>The modified string view in StringView.h needs message map function prototypes for both F1 help and Shift-F1 help, as shown here:

<P><B><pre>
afx_msg LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
afx_msg LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
</pre></B>

<P>Here are the message map entries in StringView.cpp:

<P><B><pre>
ON_MESSAGE(WM_COMMANDHELP, OnCommandHelp)
ON_MESSAGE(WM_HELPHITTEST, OnHelpHitTest)
</pre></B>

<P>The <I>OnCommandHelp</I> message handler member function in 
StringView.cpp processes F1 help requests. It responds to the message sent from the MDI main frame and displays the help topic for the string view window, as shown here:

<P><B><pre>
LRESULT CStringView::OnCommandHelp(WPARAM wParam, LPARAM lParam)
{
    if (lParam == 0) { // context not already determined
        lParam = HID_BASE_RESOURCE + IDR_STRINGVIEW;
    }
    AfxGetApp()-&gt;WinHelp(lParam);
    return TRUE;
}
</pre></B>

<P>Finally the <I>OnHelpHitTest</I> member function handles Shift-F1 help, as shown here:

<P><B><pre>
LRESULT CStringView::OnHelpHitTest(WPARAM wParam, LPARAM lParam)
{
    return HID_BASE_RESOURCE + IDR_STRINGVIEW;
}
</pre></B>

<P>In a more complex application, you might want <I>OnHelpHitTest</I> to set the help context ID based on the mouse cursor position.

<A NAME="464"><H2><B><I>CHexView</I></B></H2></A>
<P>The <I>CHexView</I> class processes help requests the same way as the <I>CStringView</I> class does. Following is the necessary header code in HexView.h:

<P><B><pre>
afx_msg LRESULT OnCommandHelp(WPARAM wParam, LPARAM lParam);
afx_msg LRESULT OnHelpHitTest(WPARAM wParam, LPARAM lParam);
</pre></B>

<P>Here are the message map entries in HexView.cpp:

<P><B><pre>
ON_MESSAGE(WM_COMMANDHELP, OnCommandHelp)
ON_MESSAGE(WM_HELPHITTEST, OnHelpHitTest)
</pre></B>

<P>And here is the implementation code in HexView.cpp:

<P><B><pre>
LRESULT CHexView::OnCommandHelp(WPARAM wParam, LPARAM lParam)
{
    if (lParam == 0) { // context not already determined
        lParam = HID_BASE_RESOURCE + IDR_HEXVIEW;
    }
    AfxGetApp()-&gt;WinHelp(lParam);
    return TRUE;
}

LRESULT CHexView::OnHelpHitTest(WPARAM wParam, LPARAM lParam)
{
    return HID_BASE_RESOURCE + IDR_HEXVIEW;
}
</pre></B>

<A NAME="465"><H2><B>Resource Requirements</B></H2></A>
<P>Two new symbols were added to the project's Resource.h file. Their values and corresponding help context IDs are shown here.

<p><table cellpadding=5 width="95%">
<tr><td valign="top"><b>Symbol</b></td>
<td valign="top"><b>Value</b></td>
<td valign="top"><b>Help Context ID</b></td>
<td valign="top"><b>Value</b></td></tr>
<tr><td valign="top"><I>IDR_STRINGVIEW</I></td>
<td valign="top">101</td>
<td valign="top"><I>HIDR_STRINGVIEW</I></td>
<td valign="top">0x20065</td></tr>
<tr><td valign="top"><I>IDR_HEXVIEW</I></td>
<td valign="top">102</td>
<td valign="top"><I>HIDR_HEXVIEW</I></td>
<td valign="top">0x20066</td></tr>
</table>

<A NAME="466"><H2><B>Help File Requirements</B></H2></A>
<P>Two topics were added to the AfxCore.rtf file with the help context IDs <I>HIDR_STRINGVIEW</I> and <I>HIDR_HEXVIEW</I>, as shown here.

<P><A HREF="javascript:fullSize('g21og14x.htm')"> <img src="g21og14.jpg" width=404 height=261 border=0 ALT = "Click to view at full size."> </A>

<P>The generated ex21b.hm file, in the project's \hlp subdirectory, should look like this:

<P><pre>
// MAKEHELP.BAT generated Help Map file.  Used by EX21B.HPJ.

// Commands (ID_* and IDM_*)
HID_WINDOW_NEW_STRING                   0x18003
HID_WINDOW_NEW_HEX                      0x18005

// Prompts (IDP_*)


// Resources (IDR_*)
HIDR_STRINGVIEW                         0x20065
HIDR_HEXVIEW                            0x20066
HIDR_MAINFRAME                          0x20080
HIDR_EX21BTYPE                          0x20081

// Dialogs (IDD_*)
HIDD_ABOUTBOX                           0x20064

// Frame Controls (IDW_*)
</pre>

<A NAME="467"><H2><B>Testing the EX21B Application</B></H2></A>
<P>Open a string child window and a hexadecimal child window. Test the 
action of F1 help and Shift-F1 help within those windows. If the help file didn't compile correctly, follow the instructions in step 1 of the help example in &quot;<A HREF="ch21d.htm#456">A Help Example&#151;No Programming Required</A>.&quot;

</BODY>
</HTML>



