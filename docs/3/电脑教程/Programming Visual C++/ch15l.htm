<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX15A Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="307"><H1>The EX15A Example</H1></A><P>The EX15A program illustrates the use of a persistent frame window class, <I>CPersistentFrame</I>. Figure 15-1 shows the contents of the files Persist.h and Persist.cpp, which are included in the EX15A project on the companion CD-ROM. In this example, you'll insert the new frame class into an AppWizard-generated SDI application. EX15A is a &quot;do-nothing&quot; application, but you can insert the persistent frame class into any of your own SDI &quot;do-something&quot; applications.<P>



<TABLE cellpadding=5 width="95%"><TR><TD>
<P><B>PERSIST.H</B>
<P>
<PRE>// Persist.h

#ifndef _INSIDE_VISUAL_CPP_PERSISTENT_FRAME
#define _INSIDE_VISUAL_CPP_PERSISTENT_FRAME

class CPersistentFrame : public CFrameWnd
{ // remembers where it was on the desktop
    DECLARE_DYNAMIC(CPersistentFrame)
private:
    static const CRect s_rectDefault;
    static const char s_profileHeading[];
    static const char s_profileRect[];
    static const char s_profileIcon[];
    static const char s_profileMax[];
    static const char s_profileTool[];
    static const char s_profileStatus[];
    BOOL m_bFirstTime;
protected: // Create from serialization only
    CPersistentFrame();
    ~CPersistentFrame();
//{{AFX_VIRTUAL(CPersistentFrame)
    public:
    virtual void ActivateFrame(int nCmdShow = -1);
    protected:
    //}}AFX_VIRTUAL

    //{{AFX_MSG(CPersistentFrame)
    afx_msg void OnDestroy();
    //}}AFX_MSG

    DECLARE_MESSAGE_MAP()
};

#endif // _INSIDE_VISUAL_CPP_PERSISTENT_FRAME</PRE>
<P><B>PERSIST.CPP</B><P>
<PRE>// Persist.cpp Persistent frame class for SDI apps

#include &quot;stdafx.h&quot;
#include &quot;persist.h&quot;

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
///////////////////////////////////////////////////////////////
// CPersistentFrame

const CRect CPersistentFrame::s_rectDefault(10,  10,
                                            500, 400);  // static
const char CPersistentFrame::s_profileHeading[] = &quot;Window size&quot;;
const char CPersistentFrame::s_profileRect[] = &quot;Rect&quot;;
const char CPersistentFrame::s_profileIcon[] = &quot;icon&quot;;
const char CPersistentFrame::s_profileMax[] = &quot;max&quot;;
const char CPersistentFrame::s_profileTool[] = &quot;tool&quot;;
const char CPersistentFrame::s_profileStatus[] = &quot;status&quot;;
IMPLEMENT_DYNAMIC(CPersistentFrame, CFrameWnd)

BEGIN_MESSAGE_MAP(CPersistentFrame, CFrameWnd)
    //{{AFX_MSG_MAP(CPersistentFrame)
    ON_WM_DESTROY()
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////
CPersistentFrame::CPersistentFrame(){
    m_bFirstTime = TRUE;
}

///////////////////////////////////////////////////////////////
CPersistentFrame::~CPersistentFrame()
{
}

///////////////////////////////////////////////////////////////
void CPersistentFrame::OnDestroy()
{
    CString strText;
    BOOL bIconic, bMaximized;

    WINDOWPLACEMENT wndpl;
    wndpl.length = sizeof(WINDOWPLACEMENT);
    // gets current window position and
    //  iconized/maximized status
    BOOL bRet = GetWindowPlacement(&amp;wndpl);
    if (wndpl.showCmd == SW_SHOWNORMAL) {
        bIconic = FALSE;
        bMaximized = FALSE;
    }
    else if (wndpl.showCmd == SW_SHOWMAXIMIZED) {
        bIconic = FALSE;
        bMaximized = TRUE;
    } 
    else if (wndpl.showCmd == SW_SHOWMINIMIZED) {
        bIconic = TRUE;
        if (wndpl.flags) {
            bMaximized = TRUE;
        }
        else {
            bMaximized = FALSE;
        }
    }
    strText.Format(&quot;%04d %04d %04d %04d&quot;,
                   wndpl.rcNormalPosition.left,
                   wndpl.rcNormalPosition.top,
                   wndpl.rcNormalPosition.right,
                   wndpl.rcNormalPosition.bottom);
    AfxGetApp()-&gt;WriteProfileString(s_profileHeading,
                                    s_profileRect, strText);
    AfxGetApp()-&gt;WriteProfileInt(s_profileHeading,
                                 s_profileIcon, bIconic);
    AfxGetApp()-&gt;WriteProfileInt(s_profileHeading,
                                 s_profileMax, bMaximized);
    SaveBarState(AfxGetApp()-&gt;m_pszProfileName);
    CFrameWnd::OnDestroy();
}

///////////////////////////////////////////////////////////////
void CPersistentFrame::ActivateFrame(int nCmdShow)
{
    CString strText;
    BOOL bIconic, bMaximized;
    UINT flags;
    WINDOWPLACEMENT wndpl;
    CRect rect;

    if (m_bFirstTime) {
        m_bFirstTime = FALSE;
        strText = AfxGetApp()-&gt;GetProfileString(s_profileHeading,
                                                s_profileRect);
        if (!strText.IsEmpty()) {
            rect.left = atoi((const char*) strText);
            rect.top = atoi((const char*) strText + 5);
            rect.right = atoi((const char*) strText + 10);
            rect.bottom = atoi((const char*) strText + 15);
        }
        else {
            rect = s_rectDefault;
        }
       bIconic = AfxGetApp()-&gt;GetProfileInt(s_profileHeading,
                                             s_profileIcon, 0);
        bMaximized = AfxGetApp()-&gt;GetProfileInt(s_profileHeading,
                                                s_profileMax, 0);
        if (bIconic) {
            nCmdShow = SW_SHOWMINNOACTIVE;
            if (bMaximized) {
                flags = WPF_RESTORETOMAXIMIZED;
            }
            else {
                flags = WPF_SETMINPOSITION;
            }
        }
        else {
            if (bMaximized) {
                nCmdShow = SW_SHOWMAXIMIZED;
                flags = WPF_RESTORETOMAXIMIZED;
            }
            else {
                nCmdShow = SW_NORMAL;
                flags = WPF_SETMINPOSITION;
            }
        }
        wndpl.length = sizeof(WINDOWPLACEMENT);
        wndpl.showCmd = nCmdShow;
        wndpl.flags = flags;
        wndpl.ptMinPosition = CPoint(0, 0);
        wndpl.ptMaxPosition =
            CPoint(-::GetSystemMetrics(SM_CXBORDER),
                   -::GetSystemMetrics(SM_CYBORDER));
        wndpl.rcNormalPosition = rect;
        LoadBarState(AfxGetApp()-&gt;m_pszProfileName);
        // sets window's position and minimized/maximized status
        BOOL bRet = SetWindowPlacement(&amp;wndpl);
    }
    CFrameWnd::ActivateFrame(nCmdShow);
}</PRE>
</TD></TR></TABLE>

<B>Figure 15-1.</B> <I>The </I>CPersistentView<I> class listing.</I>

<P>Here are the steps for building the EX15A example program.
<OL>
<B><P><LI>Run AppWizard to generate \vcpp32\ex15a\ex15a.</B> Accept all default settings but two: select Single Document and deselect Printing and Print Preview. The options and the default class names are shown in the following illustration.<P>
<P><img src="G15og01x.GIF" width=414 height=423 border=0><P>
</OL>
<OL START="2">
<B><P><LI>Modify MainFrm.h.</B> You must change the base class of 
<I>CMainFrame</I>. To do this, simply change the line
<P><PRE>class CMainFrame : public CFrameWnd</PRE>
<P>to
<P><PRE>class CMainFrame : public <B>CPersistentFrame</B></PRE>
<P>Also, add the line
<P><PRE><B>#include &quot;persist.h&quot;</B></PRE>
<B><P><LI>Modify MainFrm.cpp.</B> Globally replace all occurrences of <I>CFrameWnd</I> with <I>CPersistentFrame</I>.
<B><P><LI>Modify ex15a.cpp.</B> Replace the line
<P><PRE>SetRegistryKey(_T(&quot;Local AppWizard-Generated Applications&quot;));</PRE>
<P>with the line
<P><PRE>SetRegistryKey(<B>&quot;Programming Visual C++&quot;</B>);</PRE>
<B><P><LI>Add the Persist.cpp file to the project.</B> You can type in the Persist.h and Persist.cpp files from Figure 15-1, or you can copy the files from the companion CD-ROM. Having the files in the \vcpp32\ex15a directory is not sufficient. You must add the names of the files to the project's project 
(DSP) file. Choose Add To Project from Visual C++'s Project menu, and choose Files from the submenu. Select Persist.h and Persist.cpp from the list.
<B><P><LI>Rebuild the ClassWizard file to include the new 
<I>CPersistentFrame</I> class.</B> Use Windows Explorer to delete the ClassWizard file ex15a.clw. Back in Visual C++, choose ClassWizard from the View menu. Follow Visual C++'s instructions if it asks you to close any files. Click Yes when asked if you would like to rebuild the CLW file. The Select Source Files dialog box will appear. Make sure all of the header and source files are listed in the Files In Project box, as shown in the following illustration.<P>

<P><img src="G15og02x.GIF" width=410 height=348 border=0><P>
<P>Then click OK to regenerate the CLW file. Notice that <I>CPersistentFrame</I> is now integrated into ClassWizard. You'll now be able to map messages and override virtual functions in the <I>CPersistentFrame</I> class.
</OL>
<OL START="7">
<B><P><LI>Build and test the EX15A application.</B> Size and move the application's frame window, and then close the application. When you restart the application, does its window open at the same location at which it was 
closed? Experiment with maximizing and minimizing, and then change the status and position of the control bars. Does the persistent frame remember its settings?
<B><P><LI>Save the <I>CPersistentFrame</I> class as a Gallery component for 
future use.</B> In the ClassView window, right-click on <I>CPersistentFrame</I> and select Add To Gallery. Bring up the Components And Controls Gallery by 
choosing Add To Project from the Project menu and then choosing Components And Controls. Notice that Visual C++ created the file Persistent Frame.ogx in a folder named \ex15a. Change this folder's name to Persistent Frame. Now you can add the <I>CPersistentFrame</I> class to any project by simply adding Persistent Frame.ogx. We will add <I>CPersistentFrame</I> to EX22A this way.
<B><P><LI>Examine the Windows Registry.</B> Run the Windows regedit.exe 
program. Navigate to the HKEY_CURRENT_USER\Software\Programming Visual C++\ex15a key. You should see data values similar to those shown in the following illustration.

<P><A HREF="javascript:fullSize('G15og03x.htm')"> <img src="G15og03.JPG" width=404 height=264 border=0 ALT = "Click to view at full size."> </A><P>

<P>Notice the relationship between the Registry key and the <I>SetRegistryKey</I> function parameter, &quot;<I>Programming Visual C++.&quot; </I>If you supply an empty string as the <I>SetRegistryKey</I> parameter, the program name (ex15a, in this case) is positioned directly below the Software key.
</OL>
</BODY>
</HTML>



