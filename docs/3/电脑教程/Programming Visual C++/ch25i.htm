<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>An MFC Automation Component</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="534"><H1><B>An MFC Automation Component</B></H1></A>
<P>Let's look at what happens in an MFC Automation component&#151;in this case, a simplified version of the EX25C alarm clock program that is discussed later in this chapter. In the MFC library, the 
<I>IDispatch</I> implementation is part of the <I>CCmdTarget</I> base class, so you don't need 
<I>INTERFACE_MAP</I> macros. You write an Automation component class&#151;<I>CClock</I>, for example&#151;derived from <I>CCmdTarget</I>. This class's CPP file contains <I>DISPATCH_MAP</I> macros:

<P><pre>
BEGIN_DISPATCH_MAP(CClock, CCmdTarget)
    DISP_PROPERTY(CClock, &quot;Time&quot;, m_time, VT_DATE)
    DISP_PROPERTY_PARAM(CClock, &quot;Figure&quot;, GetFigure,
                        SetFigure, VT_VARIANT, VTS_I2)
    DISP_FUNCTION(CClock, &quot;RefreshWin&quot;, Refresh, VT_EMPTY, VTS_NONE)
    DISP_FUNCTION(CClock, &quot;ShowWin&quot;, ShowWin, VT_BOOL, VTS_I2)
END_DISPATCH_MAP()
</pre>

<P>Looks a little like an MFC message map, doesn't it? The <I>CClock</I> class header file contains related code, shown here:

<P><pre>
public:
    DATE m_time;
    afx_msg VARIANT GetFigure(short n);
    afx_msg void SetFigure(short n, const VARIANT&amp; vaNew);
    afx_msg void Refresh();
    afx_msg BOOL ShowWin(short n);
    DECLARE_DISPATCH_MAP()
</pre>

<P>What does all this stuff mean? It means that the <I>CClock</I> class has the following properties and methods.

<p><table cellpadding=5 width="95%">
<tr><td valign="top"><b>Name</b></td>
<td valign="top"><b>Type</b></td>
<td valign="top"><b>Description</b></td></tr>
<tr><td valign="top">Time</td>
<td valign="top">Property</td>
<td valign="top">Linked directly to class data member <I>m_time</I></td></tr>
<tr><td valign="top">Figure</td>
<td valign="top">Property</td>
<td valign="top">Indexed property, accessed through member functions <I>GetFigure</I> and <I>SetFigure</I>: first parameter is the index; second (for <I>SetFigure</I>) is the string value (The figures are the &quot;XII,&quot; &quot;III,&quot; &quot;VI,&quot; and &quot;IX&quot; that appear on the clock face.)</td></tr>
<tr><td valign="top"><I>RefreshWin</I></td>
<td valign="top">Method</td>
<td valign="top">Linked to class member function <I>Refresh</I>&#151;no parameters or return value</td></tr>
<tr><td valign="top"><I>ShowWin</I></td>
<td valign="top">Method</td>
<td valign="top">Linked to class member function <I>ShowWin</I>&#151;short integer parameter, Boolean return value</td></tr>
</table>

<P>How does the MFC dispatch map relate to <I>IDispatch</I> and the <I>Invoke</I> member function? The dispatch-map macros generate static data tables that the MFC library's <I>Invoke</I> implementation can read. A controller gets an <I>IDispatch</I> pointer for <I>CClock</I> (connected through the 
<I>CCmdTarget</I> base class), and it calls <I>Invoke</I> with an array of pointers as a parameter. The MFC library's implementation of <I>Invoke</I>, buried somewhere inside <I>CCmdTarget</I>, uses the <I>CClock</I> dispatch map to decode the supplied pointers and either calls one of your member functions or accesses <I>m_time</I> directly.

<P>As you'll see in the examples, ClassWizard can generate the Automation component class for you and help you code the dispatch map.

</BODY>
</HTML>



