<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX20B Example -- A Double View Class SDI Static Splitter</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="428"><H1>The EX20B Example&#151;A Double View Class SDI Static Splitter</H1></A><P>In EX20B, we'll extend EX20A by defining a second view class and allowing a static splitter window to show the two views. (The H and CPP files are cloned from the original view class.) This time the splitter window works a little differently. Instead of starting off as a single pane, the splitter is initialized with two panes. The user can move the bar between the panes by dragging it with the mouse or by choosing the Window Split menu item.
<P>The easiest way to generate a static splitter application is to let 
AppWizard generate a dynamic splitter application and then edit the 
generated<I> CMainFrame::OnCreateClient</I> function.
<A NAME="429"><H2><I>CHexView</I></H2></A><P>The <I>CHexView</I> class was written to allow programmers to appreciate poetry. It is essentially the same code used for <I>CStringView</I> except for the <I>OnDraw</I> member function:
<P><PRE>void C<B>Hex</B>View::OnDraw(CDC* pDC)
{
<B>    // hex dump of document strings</B>
    int        i, j, <B>k, l, n,</B> nHeight;
    CString    <B>outputLine,</B> str;
    CFont      font;
    TEXTMETRIC tm;

    CPoemDoc* pDoc = GetDocument();
<B>    font.CreateFont(-160, 80, 0, 0, 400, FALSE, FALSE, 0,
        ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
        DEFAULT_QUALITY, DEFAULT_PITCH | FF_SWISS, &quot;Arial&quot;);</B>
    CFont* pOldFont = pDC-&gt;SelectObject(&amp;font);
    pDC-&gt;GetTextMetrics(&amp;tm);
    nHeight = tm.tmHeight + tm.tmExternalLeading;

    j = pDoc-&gt;m_stringArray.GetSize();
    for (i = 0; i &lt; j; i++) {
<B>        outputLine.Format(&quot;%02x   &quot;, i);
        l = pDoc-&gt;m_stringArray[i].GetLength();
        for (k = 0; k &lt; l; k++) {
            n = pDoc-&gt;m_stringArray[i][k] &amp; 0x00ff;
            str.Format(&quot;%02x &quot;, n);
            outputLine += str;
        }</B>
        pDC-&gt;TextOut(720, -i * nHeight - 720, <B>outputLine</B>);
    }
    pDC-&gt;SelectObject(pOldFont);
}</PRE>
<P>This function displays a hexadecimal dump of all strings in the document's <I>m_stringArray</I> collection. Notice the use of the subscript operator to 
access individual characters in a <I>CString</I> object.
<A NAME="430"><H2><I>CMainFrame</I></H2></A><P>As in EX20A, the EX20B application's main frame window class needs a splitter window data member and a prototype for an overridden <I>OnCreateClient</I> function. You can let AppWizard generate the code by specifying Use Split Window, as in EX20A. You won't have to modify the MainFrm.h file.
<P>The implementation file, MainFrm.cpp, needs both view class headers (and the prerequisite document header), as shown here:
<P><PRE><B>#include &quot;PoemDoc.h&quot;
#include &quot;StringView.h&quot;
#include &quot;HexView.h&quot;</B></PRE>
<P>AppWizard generates dynamic splitter code in the <I>OnCreateClient</I> function, so you'll have to do some editing if you want a static splitter. Instead of calling <I>CSplitterWnd::Create</I>, you'll call the <I>CSplitterWnd::CreateStatic</I> function, which is tailored for multiple view classes. The following calls to <I>CSplitterWnd::CreateView</I> attach the two view classes. As the second and third <I>CreateStatic</I> parameters (2, 1) dictate, this splitter window contains only two panes. The horizontal split is initially 100 device units from the top of the window. The top pane is the string view; the bottom pane is the hex dump view. The user can change the splitter bar position but the view configuration cannot be changed.
<P><PRE>BOOL CMainFrame::OnCreateClient( LPCREATESTRUCT /*lpcs*/,
    CCreateContext* pContext)
{
<B>    VERIFY(m_wndSplitter.CreateStatic(this, 2, 1));
    VERIFY(m_wndSplitter.CreateView(0, 0, RUNTIME_CLASS(CStringView),
                                    CSize(100, 100), pContext));
    VERIFY(m_wndSplitter.CreateView(1, 0, RUNTIME_CLASS(CHexView),
                                    CSize(100, 100), pContext));
    return TRUE;</B>
}</PRE>
<A NAME="431"><H2>Testing the EX20B Application</H2></A><P>When you start the EX20B application, the window should look like the one shown below. Notice the separate horizontal scroll bars for the two views.
<P><A HREF="javascript:fullSize('G20OG02x.htm')"> <img src="G20OG02.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A><P>
</BODY>
</HTML>



