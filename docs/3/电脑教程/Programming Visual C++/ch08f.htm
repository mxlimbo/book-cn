<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX08A Example -- An ActiveX Control Dialog Container</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="184"><H1>The EX08A Example&#151;An ActiveX Control Dialog Container</H1></A>
<P>Now it's time to build an application that uses a Calendar control in a 
dialog. Here are the steps to create the EX08A example:<P>
<OL>
<B><LI>Verify that the Calendar control is registered.</B> If the control does 
not appear in the Visual C++ Gallery's Registered ActiveX Controls page, copy the files MSCal.ocx, MSCal.hlp, and MSCal.cnt to your system directory and register the control by running the REGCOMP program.
<P><B><LI>Run AppWizard to produce \vcpp32\ex08a\ex08a.</B> Accept all of the default settings but two: select Single Document and deselect Printing And Print Preview. In the AppWizard Step 3 dialog, make sure the ActiveX Controls option is selected, as shown below.

<P><A HREF="javascript:fullSize('G08OG05x.htm')"> <img src="G08OG05.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A><P>

<B><LI>Install the Calendar control in the EX08A project.</B> Choose Add To Project from Visual C++'s Project menu, and then choose Components And Controls. Choose Registered ActiveX Controls, and then choose Calendar Control 8.0. ClassWizard generates two classes in the EX08A directory, as shown here.

<P><IMG SRC="G08OG06.GIF" width=335 height=353 BORDER=0><P>

<B><LI>Edit the Calendar control class to handle help messages.</B> Add 
Calendar.cpp to the following message map code:
<P><PRE><B>BEGIN_MESSAGE_MAP(CCalendar, CWnd)
    ON_WM_HELPINFO()
END_MESSAGE_MAP()</B></PRE>
<P>In the same file, add the <I>OnHelpInfo</I> function:
<P><PRE><B>BOOL CCalendar::OnHelpInfo(HELPINFO* pHelpInfo) 
{    
    // Edit the following string for your system
    ::WinHelp(GetSafeHwnd(), &quot;c:\\winnt\\system32\\mscal.hlp&quot;,
              HELP_FINDER, 0);
    return FALSE;
}</B></PRE>
<P>In Calendar.h, add the function prototype and declare the message map:
<P><PRE><B>protected:
    afx_msg BOOL OnHelpInfo(HELPINFO* pHelpInfo);
    DECLARE_MESSAGE_MAP()</B></PRE>
<P>The <I>OnHelpInfo</I> function is called if the user presses the F1 key when 
the Calendar control has the input focus. We have to add the message map code by hand because ClassWizard doesn't modify generated ActiveX classes.<P>

<P><DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The <I>ON_WM_HELPINFO</I> macro maps the WM_HELP message, which is new to Microsoft Windows 95 and Microsoft Windows NT 4.0. You can use <I>ON_WM_HELPINFO</I> in any view or dialog class and then code the handler to activate any help system. <A HREF="ch21a.htm">Chapter 21</A> describes the MFC context-sensitive help system, some of which predates the WM_HELP message.
</BLOCKQUOTE></DIV>

<P><B><LI>Use the dialog editor to create a new dialog resource.</B> Choose 
Resource from Visual C++'s Insert menu, and then choose Dialog. The dialog editor assigns the ID <I>IDD_DIALOG1</I> to the new dialog. Next change the ID to <I>IDD_ACTIVEXDIALOG</I>, change the dialog caption to <I>ActiveX Dialog</I>, and set the dialog's Context Help property (on the More Styles page). Accept the default OK and Cancel buttons with the IDs <I>IDOK</I> and <I>IDCANCEL</I>, and then add the other controls as shown in Figure 8-1. Make the Select Date button the default button. Drag the Calendar control from the control palette. Then set an appropriate tab order. Assign control IDs as shown in the following table.<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD><B>Control</B></TD><TD><B>ID</B></TD></TR>
<TR><TD>Calendar control</TD><TD><I>IDC_CALENDAR1</I></TD></TR>
<TR><TD>Select Date button</TD><TD><I>IDC_SELECTDATE</I></TD></TR>
<TR><TD>Edit control</TD><TD><I>IDC_DAY</I></TD></TR>
<TR><TD>Edit control</TD><TD><I>IDC_MONTH</I></TD></TR>
<TR><TD>Edit control</TD><TD><I>IDC_YEAR</I></TD></TR>
<TR><TD>Next Week button</TD><TD><I>IDC_NEXTWEEK</I></TD></TR>
</TABLE>
<P>

<P><B><LI>Use ClassWizard to create the <I>CActiveXDialog</I> class.</B> If you run ClassWizard directly from the dialog editor window, it will know that you want to create a <I>CDialog</I>-derived class based on the <I>IDD_ACTIVEXDIALOG</I> template. Simply accept the default options, and name the class <I>CActiveXDialog</I>.
<P>Click on the ClassWizard Message Maps tab, and then add the message handler functions shown in the table below. To add a message handler function, click on an object ID, click on a message, and click the Add Function button. If the Add Member Function dialog box appears, type the function name and click the OK button.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD><B>Object ID</B></TD><TD><B>Message</B></TD><TD><B>Member Function</B></TD></TR>
<TR><TD><I>CActiveXDialog</I></TD><TD>WM_INITDIALOG</TD><TD><I>OnInitDialog </I>(virtual function)</TD></TR>
<TR><TD><I>IDC_CALENDAR1</I></TD><TD>NewMonth (event)</TD><TD><I>OnNewMonthCalendar1</I></TD></TR>
<TR><TD><I>IDC_SELECTDATE</I></TD><TD>BN_CLICKED</TD><TD><I>OnSelectDate</I></TD></TR>
<TR><TD><I>IDC_NEXTWEEK</I></TD><TD>BN_CLICKED</TD><TD><I>OnNextWeek</I></TD></TR>
<TR><TD><I>IDOK</I></TD><TD>BN_CLICKED</TD><TD><I>OnOK</I> (virtual function)</TD></TR>
</TABLE>
<P>

<P><B><LI>Use ClassWizard to add data members to the <I>CActiveXDialog</I> class.</B> Click on the Member Variables tab, and then add the data members as shown in the illustration below.

<P><DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
You might think that the ClassWizard ActiveX Events tab is for mapping ActiveX control events in a container. That's not true: it's for ActiveX control developers who are <U>defining</U> events for a control.
</BLOCKQUOTE></DIV>
<P><A HREF="javascript:fullSize('G08OG07x.htm')"> <img src="G08OG07.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A><P>

<B><LI>Edit the <I>CActiveXDialog</I> class.</B> Add the <I>m_varValue</I> and 
<I>m_BackColor</I> data members, and then edit the code for the five handler 
functions <I>OnInitDialog</I>, <I>OnNewMonthCalendar1</I>, <I>OnSelectDate</I>, 
<I>OnNextWeek</I>, and <I>OnOK</I>. Figure 8-2 shows all the code for the dialog class, with new code in boldface.



<TABLE cellpadding=5 width="95%"><TR><TD>
<P><B>ACTIVEXDIALOG.H</B>
<P><PRE>//{{AFX_INCLUDES()
#include &quot;calendar.h&quot;
//}}AFX_INCLUDES
#if !defined(AFX_ACTIVEXDIALOG_H__1917789D_6F24_11D0_8FD9_00C04FC2A0C2__INCLUDED_)
#define AFX_ACTIVEXDIALOG_H__1917789D_6F24_11D0_8FD9_00C04FC2A0C2__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

// ActiveXDialog.h : header file
//

//////////////////////////////////////////////////////////////////////
// CActiveXDialog dialog
class CActiveXDialog : public CDialog

{
// Construction
public:
    CActiveXDialog(CWnd* pParent = NULL);   // standard constructor

// Dialog Data
    //{{AFX_DATA(CActiveXDialog)
    enum { IDD = IDD_ACTIVEXDIALOG };
    CCalendar    m_calendar;
    short    m_sDay;
    short    m_sMonth;
    short    m_sYear;
    //}}AFX_DATA
<B>    COleVariant m_varValue;
    unsigned long m_BackColor;</B>

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CActiveXDialog)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX); // DDX/DDV
                                                     //  support
    //}}AFX_VIRTUAL

// Implementation
protected:

    // Generated message map functions
    //{{AFX_MSG(CActiveXDialog)
    virtual BOOL OnInitDialog();
    afx_msg void OnNewMonthCalendar1();
    afx_msg void OnSelectDate();
    afx_msg void OnNextWeek();
    virtual void OnOK();
    DECLARE_EVENTSINK_MAP()
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional
//  declarations immediately before the previous line.

#endif // !defined(AFX_ACTIVEXDIALOG_H__1917789D_6F24_11D0_8FD9_00C04FC2A0C2__INCLUDED_)
</PRE>
<P><B>ACTIVEXDIALOG.CPP</B>
<P><PRE>// ActiveXDialog.cpp : implementation file
//

#include &quot;stdafx.h&quot;
#include &quot;ex08a.h&quot;
#include &quot;ActiveXDialog.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

//////////////////////////////////////////////////////////////////////
// CActiveXDialog dialog


CActiveXDialog::CActiveXDialog(CWnd* pParent /*=NULL*/)
    : CDialog(CActiveXDialog::IDD, pParent)
{
    //{{AFX_DATA_INIT(CActiveXDialog)
    m_sDay = 0;
    m_sMonth = 0;
    m_sYear = 0;
    //}}AFX_DATA_INIT
<B>    m_BackColor = 0x8000000F;</B>
}

void CActiveXDialog::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CActiveXDialog)
    DDX_Control(pDX, IDC_CALENDAR1, m_calendar);
    DDX_Text(pDX, IDC_DAY, m_sDay);
    DDX_Text(pDX, IDC_MONTH, m_sMonth);
    DDX_Text(pDX, IDC_YEAR, m_sYear);
    //}}AFX_DATA_MAP
<B>    DDX_OCColor(pDX, IDC_CALENDAR1, DISPID_BACKCOLOR, m_BackColor);</B>
}

BEGIN_MESSAGE_MAP(CActiveXDialog, CDialog)
    //{{AFX_MSG_MAP(CActiveXDialog)
    ON_BN_CLICKED(IDC_SELECTDATE, OnSelectDate)
    ON_BN_CLICKED(IDC_NEXTWEEK, OnNextWeek)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

//////////////////////////////////////////////////////////////////////
// CActiveXDialog message handlers

BEGIN_EVENTSINK_MAP(CActiveXDialog, CDialog)
    //{{AFX_EVENTSINK_MAP(CActiveXDialog)
    ON_EVENT(CActiveXDialog, IDC_CALENDAR1, 3 /* NewMonth */, OnNewMonthCalendar1, VTS_NONE)
    //}}AFX_EVENTSINK_MAP
END_EVENTSINK_MAP()

BOOL CActiveXDialog::OnInitDialog() 
{
    CDialog::OnInitDialog();
<B>    m_calendar.SetValue(m_varValue); // no DDX for VARIANTs</B>
    return TRUE;  // return TRUE unless you set the focus to a control
                  // EXCEPTION: OCX Property Pages should return FALSE

}
void CActiveXDialog::OnNewMonthCalendar1() 
{
<B>    AfxMessageBox(&quot;EVENT:  CActiveXDialog::OnNewMonthCalendar1&quot;);</B>
}

void CActiveXDialog::OnSelectDate() 
{
<B>    CDataExchange dx(this, TRUE);
    DDX_Text(&amp;dx, IDC_DAY, m_sDay);
    DDX_Text(&amp;dx, IDC_MONTH, m_sMonth);
    DDX_Text(&amp;dx, IDC_YEAR, m_sYear);
    m_calendar.SetDay(m_sDay);
    m_calendar.SetMonth(m_sMonth);
    m_calendar.SetYear(m_sYear);</B>
}

void CActiveXDialog::OnNextWeek() 
{
<B>    m_calendar.NextWeek();    </B>
}

void CActiveXDialog::OnOK() 
{    
    CDialog::OnOK();
<B>    m_varValue = m_calendar.GetValue(); // no DDX for VARIANTs</B>
}</PRE>
</TD></TR></TABLE>

<P><B>Figure 8-2.</B> <I>Code for the </I>CActiveXDialog<I> class.</I>


<P>The <I>OnSelectDate</I> function is called when the user clicks the Select 
Date button. The function gets the day, month, and year values from the three edit controls and transfers them to the control's properties. ClassWizard can't add DDX code for the BackColor property, so you must add it by hand. In addition, there's no DDX code for <I>VARIANT</I> types, so you must add code to the <I>OnInitDialog</I> and <I>OnOK</I> functions to set and retrieve the date with the control's Value property.
<P><B><LI>Connect the dialog to the view.</B> Use ClassWizard to map the 
WM_LBUTTONDOWN message, and then edit the handler function as follows:
<P><PRE>void CEx08aView::OnLButtonDown(UINT nFlags, CPoint point) 
{
    <B>CActiveXDialog dlg;
    dlg.m_BackColor = RGB(255, 251, 240); // light yellow
    COleDateTime today = COleDateTime::GetCurrentTime();
    dlg.m_varValue = COleDateTime(today.GetYear(), today.GetMonth(),
                                  today.GetDay(), 0, 0, 0);
    if (dlg.DoModal() == IDOK) {
        COleDateTime date(dlg.m_varValue);
        AfxMessageBox(date.Format(&quot;%B %d, %Y&quot;));
    }</B>
}</PRE>
<P>The code sets the background color to light yellow and the date to today's date, displays the modal dialog, and reports the date returned by the Calendar control. You'll need to include ActiveXDialog.h in ex08aView.cpp.
<P><B><LI>Edit the virtual <I>OnDraw</I> function in the file ex08aView.cpp.</B> To prompt the user to press the left mouse button, replace the code in the view class <I>OnDraw</I> function with this single line:
<P><PRE><B>pDC-&gt;TextOut(0, 0, &quot;Press the left mouse button here.&quot;);</B></PRE>
<P><LI><B>Build and test the EX08A application.</B> Open the dialog, enter a date in the three edit controls, and then click the Select Date button. Click the Next Week button. Try moving the selected date directly to a new month, and observe the message box that is triggered by the NewMonth event. Watch for the final date in another message box when you click OK. Press the F1 key for help on the Calendar control.

<P>
</OL>

<DIV CLASS=note>
<BLOCKQUOTE>
<B>For Win32 Programmers</B><P>
If you use a text editor to look inside the ex08a.rc file, you might be quite mystified. Here's the entry for the Calendar control in the ActiveX Dialog template:
<P>
<PRE>CONTROL         &quot;&quot;,IDC_CALENDAR1,
                &quot;{8E27C92B-1264-101C-8A2F-040224009C02}&quot;,
                WS_TABSTOP,7,7,217,113
</PRE>
<P>There's a 32-digit number sequence where the window class name should be. What's going on? Actually, the resource template isn't the one that Windows sees. The <I>CDialog::DoModal</I> function &quot;preprocesses&quot; the resource template before passing it on to the dialog box procedure within Windows. It strips out all the ActiveX controls and creates the dialog window without them. Then it loads the controls (based on their 32-digit identification numbers, called CLSIDs) and activates them in place, causing them to create their own windows in the correct places. The initial values for the properties you set in the dialog editor are stored in binary form inside the project's custom DLGINIT resource.
<P>When the modal dialog runs, the MFC code coordinates the messages sent to the dialog window both by the ordinary controls and by the ActiveX controls. This allows the user to tab between all the controls in the dialog, even though the ActiveX controls are not part of the actual dialog template.
<P>When you call the member functions for the control object, you might think you're calling functions for a child window. The control window is quite far removed, but MFC steps in to make it seem as if you're communicating with a real child window. In ActiveX terminology, the container owns a <U>site</U>, which is not a window. You call functions for the site, and ActiveX and MFC make the connection to the underlying window in the ActiveX control.
<P>The container window is an object of a class derived from <I>CWnd</I>. The control site is also an object of a class derived from <I>CWnd</I>&#151;the ActiveX control wrapper class. That means that the <I>CWnd</I> class has built-in support for both containers and sites.
<P>What you're seeing here is MFC ActiveX control support grafted onto regular Windows. Maybe some future Windows version will have more direct support for ActiveX Controls. As a matter of fact, ActiveX versions of the Windows common controls already exist.
</BLOCKQUOTE></DIV>
</BODY>
</HTML>



