<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>WWW Authentication</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="949"><H1>WWW Authentication</H1></A><P>Up to now, your IIS has been set to allow anonymous logons, which means 
that anyone in the world can access your server without supplying a user name 
or password. All users are logged on as IUSR_MYMACHINENAME and 
can access any files for which that user name has permissions.
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
As stated in <A HREF="ch34a.htm">Chapter 34</A>, you should be using NTFS 
on your server for maximum security.
</BLOCKQUOTE></DIV>
<A NAME="950"><H2>Basic Authentication</H2></A><P>The simplest way to limit server access is to enable 
<U>basic</U> <U>authentication</U>. Then, if a client makes an anonymous request, the server sends back the response
<P><PRE>HTTP/1.0 401 Unauthorized</PRE>
<P>together with a response header like this:
<P><PRE>WWW-Authenticate: Basic realm=&quot;xxxx&quot;</PRE>
<P>The client prompts the user for a user name and password, and then it 
resends the request with a request header something like this:
<P><PRE>Authorization: Basic 2rc234ldfd8kdr</PRE>
<P>The string that follows Basic is a pseudoencrypted version of the user 
name and password, which the server decodes and uses to impersonate the client.
<P>The trouble with basic authentication is that intruders can pick up the 
user name and password and use it to gain access to your server. IIS and most 
browsers support basic authentication, but it's not very effective.
<A NAME="951"><H2>Windows NT Challenge/Response Authentication</H2></A><P><U>Windows</U> <U>NT</U> 
<U>challenge/response</U> <U>authentication</U> is often used for 
intranets running on Microsoft networks, but you can use it on the Internet as well. 
IIS supports it (see Figure 35-2), but not all browsers do.
<P>If the server has challenge/response activated, a client making an 
ordinary request gets this response header:
<P><PRE>WWW-Authenticate: NTLM
Authorization: NTLM T1RMTVNTUAABAAAAA5IAA ...</PRE>
<P>The string after <I>NTLM </I>is the well-encoded user 
name&#151;the password is never sent over the network. The server issues a 
<U>challenge</U>, with a response header like this:
<P><PRE>WWW-Authenticate: NTLM RPTUFJTgAAAAAA ...</PRE>
<P>The client, which knows the password, does some math on the 
challenge code and the password and then sends back a response in a request header 
like this:
<P><PRE>Authorization: NTLM AgACAAgAAAAAAAAAA ...</PRE>
<P>The server, which has looked up the client's password from the user 
name, runs the same math on the password and challenge code. It then compares 
the client's response code against its own result. If the client's and the server's 
results match, the server honors the client's request by impersonating the 
client's user name and sending the requested data.
<P>When the client resends the request, the 
challenge/response dialog is performed over a single-socket connection with keep-alive capability as 
specified in the Connection request header.
<P>WinInet fully supports Windows NT challenge/response 
authentication. Thus, Internet Explorer 4.0 and the EX34A WinInet clients support it. If 
the client computer is logged on to a Windows NT domain, the user name 
and password are passed through. If the client is on the Internet, WinInet 
prompts for the user name and password. If you're writing WinInet code, you must 
use the <I>INTERNET_FLAG_KEEP_CONNECTION</I> flag in all 
<I>CHttpConnection::OpenRequest</I> and 
<I>CInternetSession::OpenURL</I> calls, as EX34A illustrates.
<A NAME="952"><H2>The Secure Sockets Layer</H2></A><P>Windows NT challenge/response authentication controls only who logs on 
to a server. Anyone snooping on the Net can read the contents of the 
TCP/IP segments. The secure sockets layer (SSL) goes one step further and encodes 
the actual requests and responses (with a performance hit, of course). Both 
IIS and WinInet support SSL. (The secure sockets layer is described in the IIS 
documentation.)
</BODY>
</HTML>



