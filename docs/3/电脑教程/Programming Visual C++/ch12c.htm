<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>On-Idle Processing</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="242"><H1>On-Idle Processing</H1></A>
<P>Before multithreaded programming came along, Windows developers used on-idle processing for &quot;background&quot; tasks such as pagination. On-idle processing is no longer as important, but it's still useful. The application framework calls a virtual member function <I>OnIdle</I> of class <I>CWinApp</I>, and you can override this function to do background processing. 
<I>OnIdle</I> is called from the framework's message processing loop, which is actually a little more complicated than the simple <I>GetMessage/TranslateMessage/DispatchMessage</I> sequence you've seen. Generally, once the <I>OnIdle</I> function completes its work, it is not called 
again until the next time the application's message queue has been emptied. If 
you override this function, your code will be called, but it won't be called 
continuously unless there is a constant stream of messages. The base class <I>OnIdle</I> updates the toolbar buttons and status indicators, and it cleans up various temporary object pointers. It makes sense for you to override 
<I>OnIdle</I> to update the user interface. The fact that your code won't be executed when no messages are coming is not important because the user interface shouldn't be changing.
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0>
<P>If you do override <I>CWinApp::OnIdle</I>, don't forget to call the base class <I>OnIdle</I>. Otherwise, your toolbar buttons won't be updated and temporary objects won't be deleted.
</BLOCKQUOTE></DIV>
<P><I>OnIdle</I> isn't called at all if the user is working in a modal dialog or is using a menu. If you need to use background processing for modal dialogs 
and menus, you'll have to add a message handler function for the WM_ENTERIDLE message, but you must add it to the <U>frame</U> class rather than to the view class. That's because pop-up dialogs are always &quot;owned&quot; by the application's main frame window, not by the view window. <A HREF="ch15a.htm">Chapter 15</A> explores the relationship between the frame window and the view window.
</BODY>
</HTML>



