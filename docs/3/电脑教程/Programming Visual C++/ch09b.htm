<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>An Introduction to the New Internet Explorer 4 Common Controls</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="193"><H1>An Introduction to the New Internet Explorer 4 Common Controls</H1></A><P>Example EX09A uses each of the new IE4 common controls. Figure 9-1 shows the dialog from that example. Refer to it when you read the control descriptions that follow.
<P><A HREF="javascript:fullSize('F09OG01x.htm')"> <img src="F09OG01.JPG" width=404 height=270 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 9-1.</B> <I>The new Internet Explorer 4 Common Controls dialog.</I>
<!-- /caption -->
<A NAME="194"><H2>The Date and Time Picker</H2></A><P>A common field on a dialog is a place for the user to enter a date and time. Before IE4 controls provided the date and time picker, developers had to either use a third-party control or subclass an MFC edit control to do significant data validation to ensure that the entered date was valid. Fortunately, the new date and time picker control is provided as an advanced control that prompts the user for a date or time while offering the developer a wide variety of styles and options. For example, dates can be displayed in short formats (8/14/68) or long formats (August 14, 1968). A time mode lets the user enter a time using a familiar hours/minutes/seconds AM/PM format.
<P>The control also lets you decide if you want the user to select the date via in-place editing, a pull-down calendar, or a spin button. Several selection options are available including single and multiple select (for a range of dates) and the ability to turn on and off the &quot;circling&quot; in red ink of the current date. The control even has a mode that lets the user select &quot;no date&quot; via a check box. In Figure 9-1, the first four controls on the left illustrate the variety of configurations available with the date and time picker control.
<P>The new MFC 6.0 class <I>CDateTimeCtrl </I>provides the MFC interface to the IE4 date and time picker common control. This class provides a variety of notifications that enhance the programmability of the control. <I>CDateTimeCtrl</I> provides member functions for dealing with either <I>CTime</I> or <I>COleDateTime</I> time structures.
<P>You set the date and time in a <I>CDateTimeCtrl</I> using the <I>SetTime</I> member function. You can retrieve the date and time via the <I>GetTime</I> function. You can create custom formats using the <I>SetFormat</I> member function and change a variety of other configurations using the <I>CDateTimeCtrl</I> interface.
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<B><I>CTime</I> vs. <I>COleDateTime</I></B><P>
Most &quot;longtime&quot; MFC developers are accustomed to using the <I>CTime</I> class. However, since <I>CTime</I>'s valid dates are limited to dates between January 1, 1970, and January 18, 2038, many developers are 
looking for an alternative. One popular alternative is <I>COleDateTime,</I> which is provided for OLE automation support and handles dates from 1 January 100 through 31 December 9999. Both classes have various pros and cons. For example, <I>CTime</I> handles all the issues of daylight savings time, while <I>COleDateTime</I> does not.
<P>With the Year 2000 crisis looming ahead, many developers choose <I>COleDateTime</I> because of its much larger range. Any application that uses <I>CTime</I> will need to be reworked in approximately 40 years, since the maximum value is the year 2038. To see this limitation in action, select a date outside the <I>CTime</I> range in EX09A. The class you decide to use will depend on your particular needs and the potential longevity of your application.
</BLOCKQUOTE></DIV>
<P>
<A NAME="195"><H2>The Month Calendar</H2></A><P>The large display at the bottom left of Figure 9-1 is a Month Calendar. Like the date and time picker control, the month calendar control lets the user choose a date. However, the month calendar control can also be used to implement a small Personal Information Manager (PIM) in your applications. You can show as many months as room provides&#151;from one month to a year's worth of months, if you want. EX09A uses the month calendar control to show only two months.
<P>The month calendar control supports single or multiple selection and allows you to display a variety of different options such as numbered months and a circled &quot;today's date.&quot; Notifications for the control let the developer specify which dates are in boldface. It is entirely up to the developer to decide what boldface dates might represent. For example, you could use the bold feature to indicate holidays, appointments, or unusable dates. The MFC 6.0 class <I>CMonthCalCtrl </I>implements this control.
<P>To initialize the <I>CMonthCalCtrl</I> class, you can call the <I>SetToday()</I> member function. <I>CMonthCalCtrl</I> provides members that deal with both <I>CTime</I> and <I>COleDateTime, </I>including<I> SetToday().</I>
<A NAME="196"><H2>The Internet Protocol Address Control</H2></A><P>If you write an application that uses any form of Internet or TCP/IP functionality, you might need to prompt the user for an Internet Protocol (IP) Address. The IE4 common controls include an IP address edit control as shown in the top right of Figure 9-1. In addition to letting the user enter a 4-byte IP address, this control performs an automatic validation of the entered IP address. <I>CIPAddressCtrl</I> provides MFC support for the IP address control.
<P>An IP address consists of four &quot;fields&quot; as shown in Figure 9-2. The fields are numbered from left to right.
<P><IMG SRC="F09OG02.GIF" width=266 height=148 BORDER=0><P>
<!-- caption -->
<B>Figure 9-2.</B> <I>The fields of an IP address control.</I>
<!-- /caption -->
<P>To initialize an IP address control, you call the <I>SetAddress</I> member function in your <I>OnInitDialog</I> function. <I>SetAddress</I> takes a DWORD, with each BYTE in the DWORD representing one of the fields. In your message 
handlers, you can call the <I>GetAddress</I> member function to retrieve a DWORD or a series of BYTES to retrieve the various values of the four IP address fields.
<A NAME="197"><H2>The Extended Combo Box</H2></A><P>The &quot;old-fashioned&quot; combo box was developed in the early days of Windows. Its age and inflexible design have been the source of a great deal of developer confusion. With the IE4 controls, Microsoft has decided to release a much more flexible version of the combo box called the extended combo box.
<P>The extended combo box gives the developer much easier access to and control over the edit-control portion of the combo box. In addition, the extended combo box lets you attach an image list to the items in the combo box. You can display graphics in the extended combo box easily, especially when compared with the old days of using owner-drawn combo boxes. Each item in the extended combo box can be associated with three images: a selected image, an unselected image, and an overlay image. These three images can be used to provide a variety of graphical displays in the combo box, as we'll see in the EX09A sample. The bottom two combo boxes in Figure 9-1 are both extended combo boxes. The MFC <I>CComboBoxEx</I> class provides comprehensive extended combo box support.
<P>Like the list control introduced in <A HREF="ch06a.htm">Chapter 6</A>, <I>CComboBoxEx</I> can be attached to a <I>CImageList</I> that will automatically display graphics next to the text in the extended combo box. If you are already familiar with 
<I>CComboBox</I>, <I>CComboBoxEx</I> might cause some confusion: instead of containing strings, the extended combo box contains items of type 
<I>COMBOBOXEXITEM</I>, a structure that consists of the following fields:
<UL>
<LI><B><I>UINT mask</I></B>&#151;A set of bit flags that specify which operations are to be performed using the structure. For example, set the <I>CBEIF_IMAGE</I> flag if the image field is to be set or retrieved in an operation.
<P><LI><B><I>int iItem</I></B>&#151;The extended combo box item number. Like the older style of combo box, the extended combo box uses zero-based indexing.
<P><LI><B><I>LPSTR pszText</I></B>&#151;The text of the item.
<P><LI><B><I>int cchTextMax</I></B>&#151;The length of the buffer available in pszText.
<P><LI><B><I>int iImage</I></B>&#151;Zero-based index into an associated image list.
<P><LI><B><I>int iSelectedImage</I></B>&#151;Index of the image in the image list to be used to represent the &quot;selected&quot; state.
<P><LI><B><I>int iOverlay</I></B>&#151;Index of the image in the image list to be used to overlay the current image.
<P><LI><B><I>int iIndent</I></B>&#151;Number of 10-pixel indentation spaces.
<P><LI><B><I>LPARAM lParam</I></B>&#151;32-bit parameter for the item.
<P></UL>
<P>You will see first-hand how to use this structure in the EX09A example.
</BODY>
</HTML>



