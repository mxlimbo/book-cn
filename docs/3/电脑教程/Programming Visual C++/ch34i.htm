<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Building a Web Client with the MFC WinInet Classes</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<H1>Building a Web Client with the MFC WinInet Classes</H1>
<P>There are two ways to build a Web client with WinInet. The first method, 
using the <I>CHttpConnection</I> class, is similar to the simplified WinInet client on 
the preceding page. The second method, using 
<I>CInternetSession::OpenURL</I>, is even easier. We'll start with the 
<I>CHttpConnection</I> version.
<A NAME="912"><H2>The EX34A WinInet Client #1&#151;Using <I>CHttpConnection</I></H2></A><P>The EX34A program implements a WinInet client in the file 
\vcpp32\ex34a\ClientInetThread.cpp on the CD-ROM. Besides allowing the use of an 
IP address as well as a host name, the program uses a status callback function. 
That function, <I>CCallbackInternetSession::OnStatusCallback</I> in the file 
\vcpp32\ex34a\utility.cpp, puts a text string in a global variable 
<I>g_pchStatus</I>, using a critical section for synchronization. The function then posts a user-defined message to the application's main window. The message triggers an Update Command 
UI handler (called by <I>CWinApp::OnIdle</I>), which displays the text in the 
second status bar text pane.
<A NAME="913"><H2>Testing the WinInet Client #1</H2></A><P>To test the WinInet client #1, you can follow the same procedure you used 
to test the Winsock client. Note the status bar messages as the connection is 
made. Note that the file appears more quickly the second time you request it.
<A NAME="914"><H2>The EX34A WinInet Client #2&#151;Using <I>OpenURL</I></H2></A><P>The EX34A program implements a different WinInet client in the file 
ClientUrlThread.cpp on the companion CD-ROM. This client uses the 
&quot;Address&quot; URL (that you type to access the Internet site). Here's the actual code:
<P><PRE>CString g_strURL = &quot;http:// &quot;;

UINT ClientUrlThreadProc(LPVOID pParam)
{
    char* buffer = new char[MAXBUF];
    UINT nBytesRead = 0;

    CInternetSession session; // can't get status callbacks for OpenURL
    CStdioFile* pFile1 = NULL; // could call ReadString to get 1 line
    try {
        pFile1 = session.OpenURL(g_strURL, 0, INTERNET_FLAG_TRANSFER_BINARY
            |INTERNET_FLAG_KEEP_CONNECTION);
         // If OpenURL fails, we won't get past here
        nBytesRead = pFile1-&gt;Read(buffer, MAXBUF - 1);
        buffer[nBytesRead] = `\0'; // necessary for message box
        char temp[100];
        if(pFile1-&gt;Read(temp, 100) != 0) { 
            // makes caching work if read complete
            AfxMessageBox(&quot;File overran buffer &#151; not cached&quot;);
        }
        ::MessageBox(::GetTopWindow(::GetDesktopWindow()), buffer, 
            &quot;URL CLIENT&quot;, MB_OK);
    }
    catch(CInternetException* e) {
        LogInternetException(pParam, e);
        e-&gt;Delete();
    }
    if(pFile1) delete pFile1;
    delete [] buffer;
    return 0;
}</PRE>
<P>Note that <I>OpenURL</I> returns a pointer to a 
<I>CStdioFile</I> object. You can use that pointer to call 
<I>Read</I> as shown, or you can call 
<I>ReadString</I> to get a single line. The file class does all the buffering. As in the previous WinInet client, 
it's necessary to call <I>Read</I> a second time to cache the file. The 
<I>OpenURL</I> 
<I>INTERNET_FLAG_KEEP_CONNECTION</I> parameter is necessary for Windows 
NT challenge/response authentication, which is described in <A HREF="ch35a.htm">Chapter 35</A>. If 
you added the flag <I>INTERNET_FLAG_RELOAD</I>, the program would bypass 
the cache just as the browser does when you click the Refresh button.
<A NAME="915"><H2>Testing the WinInet Client #2</H2></A><P>You can test the WinInet client #2 against any HTTP server. You run this 
client by typing in the URL address, not by using the menu. You must 
include the protocol (http:// or ftp://) in the URL address. Type 
<I>http://localhost</I>. 
You should see the same HTML code in a message box. No status 
messages appear here because the status callback doesn't work with 
<I>OpenURL</I>.
</BODY>
</HTML>



