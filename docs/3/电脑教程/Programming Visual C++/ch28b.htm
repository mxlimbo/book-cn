<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Embedding vs. In-Place Activation (Visual Editing)</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="636"><H1><B>Embedding vs. In-Place Activation (Visual Editing)</B></H1></A>
<P>Visual Editing is Microsoft's name for in-place activation. A component that supports in-place activation also supports embedding. Both in-place activation and embedding store their data in a container's document, and the container can activate both. An in-place-capable component can run inside the container application's main window, taking over the container's menu and toolbar, 
and it can run in its own top-level window if necessary. An embedded component can run only in its own window, and that window has a special menu that does not include file commands. Figure 28-1 shows a Microsoft Excel spreadsheet in-place activated inside a Microsoft Word document. Notice the Excel 
menus and toolbars.

<P>Some container applications support only embedded components; others support both in-place and embedded components. Usually, an in-place container program allows the user to activate in-place components either in place or in their own windows. You should be getting the idea that embedding is a 
subset of in-place activation. This is true not only at the user level but also at the OLE implementation level. Embedding relies on two key interfaces, <I>IOleObject</I> and <I>IOleClientSite</I>, which are used for in-place activation as well.

<P><A HREF="javascript:fullSize('f28og01x.htm')"> <img src="f28og01.jpg" width=404 height=373 border=0 ALT = "Click to view at full size."> </A>

<P><!-- caption --><B>Figure 28-1.</B> <I>An Excel spreadsheet activated inside a Word document.</I><!-- /caption -->

</BODY>
</HTML>



