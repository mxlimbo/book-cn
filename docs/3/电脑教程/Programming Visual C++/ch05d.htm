<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Windows Color Mapping</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="97"><H1>Windows Color Mapping</H1></A><P>The Windows GDI provides a hardware-independent color interface. Your program supplies an &quot;absolute&quot; color code, and the GDI maps that code to a suitable color or color combination on your computer's video display. Most programmers of applications for Windows try to optimize their applications' color display for a few common video card categories.
<A NAME="98"><H2>Standard Video Graphics Array Video Cards</H2></A><P>A standard Video Graphics Array (VGA) video card uses 18-bit color registers and thus has a palette of 262,144 colors. Because of video memory constraints, however, the standard VGA board accommodates 4-bit color codes, which means it can display only 16 colors at a time. Because Windows needs fixed colors for captions, borders, scroll bars, and so forth, your programs can use only 16 &quot;standard&quot; pure colors. You cannot conveniently access the other colors that the board can display.
<P>Each Windows color is represented by a combination of 8-bit &quot;red,&quot; &quot;green,&quot; and &quot;blue&quot; values. The 16 standard VGA &quot;pure&quot; (nondithered) colors are shown in the table below.
<P>Color-oriented GDI functions accept 32-bit <I>COLORREF</I> parameters that contain 8-bit color codes each for red, green, and blue. The Windows RGB macro converts 8-bit red, green, and blue values to a <I>COLORREF</I> parameter. The following statement, when executed on a system with a standard 
VGA board, constructs a brush with a dithered color (one that consists of a 
pattern of pure-color pixels):<P>
<PRE>CBrush brush(RGB(128, 128, 192));</PRE>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<tr><td valign="top"><B>Red</B></td><td valign="top"><B>Green</B></td><td valign="top"><B>Blue</B></td><td valign="top"><B>Color</B></td></tr>
<tr><td valign="top">0</td><td valign="top">0</td><td valign="top">0</td><td valign="top">Black</td></tr>
<tr><td valign="top">0</td><td valign="top">0</td><td valign="top">255</td><td valign="top">Blue</td></tr>
<tr><td valign="top">0</td><td valign="top">255</td><td valign="top">0</td><td valign="top">Green</td></tr>
<tr><td valign="top">0</td><td valign="top">255</td><td valign="top">255</td><td valign="top">Cyan</td></tr>
<tr><td valign="top">255</td><td valign="top">0</td><td valign="top">0</td><td valign="top">Red</td></tr>
<tr><td valign="top">255</td><td valign="top">0</td><td valign="top">255</td><td valign="top">Magenta</td></tr>
<tr><td valign="top">255</td><td valign="top">255</td><td valign="top">0</td><td valign="top">Yellow</td></tr>
<tr><td valign="top">255</td><td valign="top">255</td><td valign="top">255</td><td valign="top">White</td></tr>
<tr><td valign="top">0</td><td valign="top">0</td><td valign="top">128</td><td valign="top">Dark blue</td></tr>
<tr><td valign="top">0</td><td valign="top">128</td><td valign="top">0</td><td valign="top">Dark green</td></tr>
<tr><td valign="top">0</td><td valign="top">128</td><td valign="top">128</td><td valign="top">Dark cyan</td></tr>
<tr><td valign="top">128</td><td valign="top">0</td><td valign="top">0</td><td valign="top">Dark red</td></tr>
<tr><td valign="top">128</td><td valign="top">0</td><td valign="top">128</td><td valign="top">Dark magenta</td></tr>
<tr><td valign="top">128</td><td valign="top">128</td><td valign="top">0</td><td valign="top">Dark yellow</td></tr>
<tr><td valign="top">128</td><td valign="top">128</td><td valign="top">128</td><td valign="top">Dark gray</td></tr>
<tr><td valign="top">192</td><td valign="top">192</td><td valign="top">192</td><td valign="top">Light gray</td></tr>
</TABLE>


<P>The following statement (in your view's <I>OnDraw</I> function) sets the text background to red:
<P>
<PRE>pDC-&gt;SetBkColor(RGB(255, 0, 0));</PRE>
<P>The <I>CDC</I> functions <I>SetBkColor</I> and <I>SetTextColor</I> don't display dithered colors as the brush-oriented drawing functions do. If the dithered color pattern is too complex, the closest matching pure color is displayed.
<A NAME="99"><H2>256-Color Video Cards</H2></A><P>Most video cards can accommodate 8-bit color codes at all resolutions, 
which means they can display 256 colors simultaneously. This 256-color mode is 
now considered to be the &quot;lowest common denominator&quot; for color programming.
<P>If Windows is configured for a 256-color display card, your programs 
are limited to 20 standard pure colors unless you activate the Windows color 
palette system as supported by the MFC library <I>CPalette</I> class and the Windows API, in which case you can choose your 256 colors from a total of more 
than 16.7 million. Windows color palette programming is discussed in <A HREF="ch11a.htm">Chapter 11</A>. In this chapter, we'll assume that the Windows default color mapping is in effect.
<P>With an SVGA 256-color display driver installed, you get the 16 VGA colors listed in the previous table plus 4 more, for a total of 20. The 
following table lists the 4 additional colors.<P>

<TABLE WIDTH="95%" CELLPADDING="5">
<tr><td valign="top"><B>Red</B></td><td valign="top"><B>Green</B></td><td valign="top"><B>Blue</B></td><td valign="top"><B>Color</B></td></tr>
<tr><td valign="top">192</td><td valign="top">220</td><td valign="top">192</td><td valign="top">Money green</td></tr>
<tr><td valign="top">166</td><td valign="top">202</td><td valign="top">240</td><td valign="top">Sky blue</td></tr>
<tr><td valign="top">255</td><td valign="top">251</td><td valign="top">240</td><td valign="top">Cream</td></tr>
<tr><td valign="top">160</td><td valign="top">160</td><td valign="top">164</td><td valign="top">Medium gray</td></tr>
</TABLE>

<P>The RGB macro works much the same as it does with the standard VGA. If you specify one of the 20 standard colors for a brush, you get a pure color; otherwise, you get a dithered color. If you use the <I>PALETTERGB</I> macro instead, you don't get dithered colors; you get the closest matching standard 
pure color as defined by the current palette.
<A NAME="100"><H2>16-Bit-Color Video Cards</H2></A><P>Most modern video cards support a resolution of 1024-by-768 pixels, and 1 MB of video memory can support 8-bit color at this resolution. If a video card has 2 MB of memory, it can support 16-bit color, with 5 bits each for red, green, and blue. This means that it can display 32,768 colors simultaneously. That sounds like a lot, but there are only 32 shades each of pure red, green, and blue. Often, a picture will look better in 8-bit-color mode with an appropriate palette selected. A forest scene, for example, can use up to 236 shades of green. Palettes are not supported in 16-bit-color mode.
<A NAME="101"><H2>24-Bit-Color Video Cards</H2></A><P>High-end cards (which are becoming more widely used) support 24-bit color. This 24-bit capability enables the display of more than 16.7 million pure colors. If you're using a 24-bit card, you have direct access to all the colors. The RGB macro allows you to specify the exact colors you want. You'll need 2.5 MB of video memory, though, if you want 24-bit color at 1024-by-768-pixel resolution.
</BODY>
</HTML>




