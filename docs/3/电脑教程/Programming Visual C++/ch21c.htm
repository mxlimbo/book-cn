<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Application Framework and WinHelp</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="446"><H1><B>The Application Framework and WinHelp</B></H1></A>
<P>You've seen WinHelp running as a stand-alone program. The application framework and WinHelp cooperate to give you context-sensitive help. Here are some of the main elements:

<p><OL>
<LI>You select the Context-Sensitive Help option when you run AppWizard.

<P><LI>AppWizard generates a Help Topics item on your application's 
Help menu, and it creates one or more generic RTF files together with 
an HPJ file and a batch file that runs the Help Compiler.

<P><LI>AppWizard inserts a keyboard accelerator for the F1 key, and it maps the F1 key and the Help Topics menu item to member functions in the main frame window object.

<P><LI>When your program runs, it calls WinHelp when the user presses 
F1 or chooses the Help Topics menu item, passing a context ID that determines which help topic is displayed.
</ol>

<P>You now need to understand how WinHelp is called from another 
application and how your application generates context IDs for WinHelp.

<A NAME="447"><H2><B>Calling WinHelp</B></H2></A>
<P>The <I>CWinApp</I> member function <I>WinHelp</I> activates WinHelp from within your application. If you look up <I>WinHelp</I> in the online documentation, you'll see a long list of actions that the optional second parameter controls. Ignore the second parameter and pretend that <I>WinHelp</I> has only one unsigned long integer parameter, <I>dwData</I>. This parameter corresponds to a help topic. Suppose that the SIMPLE help file is available and that your program contains the statement

<P><pre>
AfxGetApp()-&gt;WinHelp(HID_TOPIC1);
</pre>

<P>When the statement is executed in response to the F1 key or some 
other event the Help Topic 1 screen appears, as it would if the user had clicked on Topic 1 in the Help Table Of Contents screen.

<P>&quot;Wait a minute,&quot; you say. &quot;How does WinHelp know which help file to use?&quot; The name of the help file matches the application name. If the executable program name is Simple.exe, the help file is named Simple.hlp.

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
You can force <I>WinHelp</I> to use a different help file by setting the <I>CWinApp</I> data member <I>m_pszHelpFilePath.</I></blockquote>
</div>

<P>&quot;And how does WinHelp match the program constant <I>HID_TOPIC1</I> to the help file's context ID?&quot; you ask. The help project file must contain a MAP section that maps context IDs to numbers. If your application's resource.h file defines <I>HID_TOPIC1</I> as <I>101</I>, the Simple.hpj MAP section looks like this:

<P><pre>
[MAP]
HID_TOPIC1        101
</pre>

<P>The program's <I>#define</I> constant name doesn't have to match the help context ID; only the numbers must match. Making the names correspond, however, is good practice.

<A NAME="448"><H2><B>Using Search Strings</B></H2></A>
<P>For a text-based application, you might need help based on a keyword rather than a numeric context ID. In that case, use the WinHelp <I>HELP_KEY</I> or <I>HELP_PARTIALKEY</I> option as follows:

<P><pre>
CString string(&quot;find this string&quot;);
AfxGetApp()-&gt;WinHelp((DWORD) (LPCSTR) string, HELP_KEY);
</pre>

<P>The double cast for <I>string</I> is necessary because the first 
<I>WinHelp</I> parameter is multipurpose; its meaning depends on the value of the second parameter.

<A NAME="449"><H2><B>Calling WinHelp from the Application's Menu</B></H2></A>
<P>AppWizard generates a Help Topics option on the Help menu, and it maps that option to <I>CWnd::OnHelpFinder</I> in the main frame window, which calls WinHelp this way:

<P><pre>
AfxGetApp()-&gt;WinHelp(0L, HELP_FINDER);
</pre>

<P>With this call, WinHelp displays the Help Table Of Contents screen, 
and the user can navigate the help file through jumps and searches.

<P>If you want the old-style table of contents, call WinHelp this way instead:

<P><pre>
AfxGetApp()-&gt;WinHelp(0L, HELP_INDEX);
</pre>

<P>And if you want a &quot;help on help&quot; item, make this call:

<P><pre>
AfxGetApp()-&gt;WinHelp(0L, HELP_HELPONHELP);
</pre>

<A NAME="450"><H2><B>Help Context Aliases</B></H2></A>
<P>The ALIAS section of the HPJ file allows you to equate one context ID with another. Suppose your HPJ file contained the following statements:

<P><pre>
[ALIAS]
HID_TOPIC1 = HID_GETTING_STARTED

[MAP]
HID_TOPIC1        101
</pre>

<P>Your RTF files could use <I>HID_TOPIC1</I> and <I>HID_GETTING_STARTED</I> interchangeably. Both would be mapped to the help context 101 as generated by your application.

<A NAME="451"><H2><B>Determining the Help Context</B></H2></A>
<P>You now have enough information to add a simple context-sensitive help system to an MFC program. You define F1 (the standard MFC library Help key) as a keyboard accelerator, and then you write a command handler that maps the program's help context to a <I>WinHelp</I> parameter. You could invent your own method for mapping the program state to a context ID, but why not take advantage of the system that's already built into the application framework?

<P>The application framework determines the help context based on the 
ID of the active program element. These identified program elements include menu commands, frame windows, dialog windows, message boxes, and control bars. For example, a menu item might be identified as 
<I>ID_EDIT_CLEAR_ALL.</I> The main frame window usually has the 
<I>IDR_MAINFRAME</I> identifier. You might expect these identifiers to map directly to help context IDs. <I>IDR_MAINFRAME</I>, for example, would map to a help context ID of the same name. But what if a frame ID and a command ID had the same numeric value? Obviously, you need a way to prevent these overlaps.

<P>The application framework solves the overlap problem by defining a 
new set of help <I>#define</I> constants that are derived from program element IDs. These help constants are the sum of the element ID and a base value, as shown in the following table.

<p><table cellpadding=5 width="95%">
<tr><td valign="top"><b>Program Element</b></td>
<td valign="top"><b>Element ID Prefix</b></td>
<td valign="top"><b>Help Context ID Prefix</b></td>
<td valign="top"><b>Base (Hexadecimal)</b></td></tr>
<tr><td valign="top">Menu Item or toolbar button</td>
<td valign="top"><I>ID_</I>, <I>IDM_</I></td>
<td valign="top"><I>HID_</I>, <I>HIDM_</I></td>
<td valign="top">10000</td></tr>
<tr><td valign="top">Frame or dialog</td>
<td valign="top"><I>IDR_</I>, <I>IDD_</I></td>
<td valign="top"><I>HIDR_</I>, <I>HIDD</I></td>
<td valign="top">20000</td></tr>
<tr><td valign="top">Error message box</td>
<td valign="top"><I>IDP_</I></td>
<td valign="top"><I>HIDP_</I></td>
<td valign="top">30000</td></tr>
<tr><td valign="top">Nonclient area</td>
<td valign="top"></td>
<td valign="top"><I>H&#133;</I></td>
<td valign="top">40000</td></tr>
<tr><td valign="top">Control bar</td>
<td valign="top"><I>IDW_</I></td>
<td valign="top"><I>HIDW_</I></td>
<td valign="top">50000</td></tr>
<tr><td valign="top">Dispatch error messages</td>
<td valign="top">&nbsp;</td>
<td valign="top">&nbsp;</td>
<td valign="top">60000</td></tr>
</table>

<P><I>HID_EDIT_CLEAR_ALL</I> (0x1E121) corresponds to <I>ID_EDIT_CLEAR_ALL</I> (0xE121), and <I>HIDR_MAINFRAME</I> (0x20080) corresponds to <I>IDR_MAINFRAME</I> (0x80).

<A NAME="452"><H2><B>F1 Help</B></H2></A>
<P>Two separate context-sensitive help access methods are built into an MFC application and are available if you have selected the AppWizard Context-Sensitive Help option. The first is standard F1 help. The user presses F1; the program makes its best guess about the help context and then calls WinHelp. In this mode, it is possible to determine the currently selected menu item or the currently selected window (frame, view, dialog, or message box).

<A NAME="453"><H2><B>Shift-F1 Help</B></H2></A>
<P>The second context-sensitive help mode is more powerful than the F1 
mode. With Shift-F1 help, the program can identify the following help contexts:

<P><UL>

<P><LI>     A menu item selected with the mouse cursor

<P><LI>     A toolbar button

<P><LI>     A frame window

<P><LI>     A view window

<P><LI>     A specific graphics element within a view window

<P><LI>     The status bar

<P><LI>     Various nonclient elements such as the system menu control
</UL>

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
Shift-F1 help doesn't work with modal dialogs or message boxes.</blockquote>
</div>

<P>The user activates Shift-F1 help by pressing Shift-F1 or by clicking the Context Help toolbar button, shown here.

<P><img src="g21og09.gif" width=24 height=23 border="0">

<P>In either case, the mouse cursor changes to

<P><img src="g21og10.gif" width=22 height=19 border="0">

<P>On the next mouse click, the help topic appears, with the position of the mouse cursor determining the context.

<A NAME="454"><H2><B>Message Box Help&#151;The <I>AfxMessageBox</I> Function</B></H2></A>
<P>The global function <I>AfxMessageBox</I> displays application framework error messages. This function is similar to the <I>CWnd::MessageBox</I> member function except that it has a help context ID as a parameter. The application framework maps this ID to a WinHelp context ID and then calls WinHelp when the user presses F1. If you can use the <I>AfxMessageBox</I> help context parameter, be sure to use prompt IDs that begin with <I>IDP_</I>. In your RTF file, use help context IDs that begin with <I>HIDP_</I>.

<P>There are two versions of <I>AfxMessageBox</I>. In the first version, the prompt string is specified by a character-array pointer parameter. In the second version, the prompt ID parameter specifies a string resource. If you use the second version, your executable program will be more efficient. Both <I>AfxMessageBox</I> versions take a style parameter that makes the message box display an exclamation point, a question mark, or another graphics symbol.

<A NAME="455"><H2><B>Generic Help</B></H2></A>
<P>When context-sensitive help is enabled, AppWizard assembles a series of default help topics that are associated with standard MFC library program elements. Following are some of the standard topics:

<UL>
<LI>Menu and toolbar commands (File, Edit, and so forth)

<P><li>Nonclient window elements (maximize box, title bar, and so forth)

<P><li>Status bar

<P><li>Error message boxes
</UL>

<P>These topics are contained in the files AfxCore.rtf and AfxPrint.rtf, which are copied, along with the associated bitmap files, to the application's \hlp subdirectory. Your job is to customize the generic help files.

<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
AppWizard generates AfxPrint.rtf only if you specify the Printing And Print Preview option.</blockquote>
</div>

</BODY>
</HTML>



