<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>OLE Helper Functions</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="674"><H1><B>OLE Helper Functions</B></H1></A>
<P>A number of global OLE functions encapsulate a sequence of OLE interface calls. Following are some that we'll use in the EX28B example:

<A NAME="675"><H3><B>HRESULT OleCreate(REFCLSID <I>rclsid</I>, REFIID <I>riid</I>, &#133;, IOleClientSite* <I>pClientSite</I>, IStorage* <I>pStg</I>, void** <I>ppvObj</I>);</B></H3></A>
<P>The <I>OleCreate</I> function first executes the COM creation sequence using the specified class ID. This loads the component program. Then the function calls <I>QueryInterface</I> for an <I>IPersistStorage</I> pointer, which it uses to call <I>InitNew</I>, passing the <I>pStg</I> parameter. It also calls <I>QueryInterface</I> to get an <I>IOleObject</I> pointer, which it uses to call <I>SetClientSite</I> using the <I>pClientSite</I> parameter. Finally it calls <I>QueryInterface</I> for the interface specified by <I>riid</I>, which is usually <I>IID_IOleObject</I>.

<A NAME="676"><H3><B>HRESULT OleCreateFromData(IDataObject* <I>pSrcDataObj</I>, REFIID <I>riid</I>, &#133;, IOleClientSite* <I>pClientSite</I>, IStorage* <I>pStg</I>, void** <I>ppvObj</I>);</B></H3></A>
<P>The <I>OleCreateFromData</I> function creates an embedded object from a data object. In the EX28B example, the incoming data object has the <I>CF_EMBEDDEDOBJECT</I> format with an <I>IStorage</I> pointer. The function then loads the component program based on the class ID in the storage, and then it calls <I>IPersistStorage::Load</I> to make the component load the object's native data. Along the way, it calls <I>IOleObject::SetClientSite</I>.

<A NAME="677"><H3><B>HRESULT OleDraw(IUnknown* <I>pUnk</I>, DWORD <I>dwAspect</I>, HDC <I>hdcDraw</I>, LPCRECT <I>lprcBounds</I>);</B></H3></A>
<P>This function calls <I>QueryInterface</I> on <I>pUnk</I> to get an <I>IViewObject</I> pointer, 
and then it calls <I>IViewObject::Draw</I>, passing the <I>lprcBounds</I> parameter.

<H3><B>HRESULT OleLoad(IStorage* <I>pStg</I>, REFIID <I>riid</I>, IOleClientSite* 
<I>pClientSite</I>, void** <I>ppvObj</I>);</B></H3>

<P>The <I>OleLoad</I> function first executes the COM creation sequence by using the class ID in the specified storage. Then it calls <I>IOleObject::SetClientSite</I> and <I>IPersistStorage::Load</I>. Finally, it calls <I>QueryInterface</I> for the interface specified by <I>riid</I>, which is usually 
<I>IID_IOleObject</I>.

<A NAME="678"><H3><B>HRESULT OleSave(IPersistStorage* <I>pPS</I>, IStorage* <I>pStg</I>, &#133;);</B></H3></A>
<P>This function calls <I>IPersistStorage::GetClassID</I> to get the object's class ID, and then it writes that class ID in the storage specified by <I>pStg</I>. Finally it calls <I>IPersistStorage::Save</I>.

</BODY>
</HTML>



