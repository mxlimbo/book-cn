<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The MFC CRuntimeClass Structure and the RUNTIME_CLASS Macro</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="1002"><H1>The MFC <I>CRuntimeClass</I> Structure and the <I>RUNTIME_CLASS</I> Macro</H1></A><P>In a real MFC program, an instance of the 
<I>CRuntimeClass</I> structure replaces the static 
<I>s_lpszClassName</I> data member shown above. This structure has 
data members for the class name and the object size; it also contains a pointer to 
a special static function, <I>CreateObject</I>, that's supposed to be implemented in 
the target class. Here's a simplified version of 
<I>CRuntimeClass</I>:
<P><PRE>struct CRuntimeClass
{
    char m_lpszClassName[21];
    int m_nObjectSize; // used for memory validation
    CObject* (*m_pfnCreateObject)();
    CObject* CreateObject();
};</PRE>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The real MFC <I>CRuntimeClass</I> structure has 
additional data members and functions that navigate through the class's 
hierarchy. This navigation feature is not supported by the official 
C++ RTTI implementation.
</BLOCKQUOTE>
</DIV>
<P>This structure supports not only class name retrieval but also 
dynamic creation. Each class you derive from 
<I>CObject</I> has a <U>static</U> <I>CRuntimeClass</I>
data member, provided that you use the MFC 
<I>DECLARE_DYNAMIC</I>, <I>DECLARE_DYNCREATE</I>, or 
<I>DECLARE_SERIAL</I> macro in the declaration and the corresponding 
<I>IMPLEMENT</I> macro in the implementation file. 
The name of the static data member is, by convention, 
<I>class&lt;class_name&gt;</I>. If your class were named 
<I>CMyClass</I>, the <I>CRuntimeClass</I> data member would be 
named <I>classCMyClass</I>.
<P>If you want a pointer to a <U>class's</U> static 
<I>CRuntimeClass</I> object, you use the MFC 
<I>RUNTIME_CLASS</I> macro, defined as follows:
<P><PRE>#define RUNTIME_CLASS(class_name) (&amp;class_name::class##class_name)</PRE>
<P>Here's how you use the macro to get the name string from a class name:
<P><PRE>ASSERT(RUNTIME_CLASS(CMyClass)-&gt;m_lpszClassName == &quot;CMyClass&quot;);</PRE>
<P>If you want the class name string from an 
<U>object</U>, you call the virtual 
<I>CObject::GetRuntimeClass</I> function. The function simply returns a pointer 
to the class's static <I>CRuntimeClass</I> object, just as earlier the 
<I>GetClassName</I> function returned the name string. Here's the function you'd write for 
<I>CMyClass</I>:
<P><PRE>virtual CRuntimeClass* GetRuntimeClass() 
    const { return &amp;classCMyClass; }</PRE>
<P>And here's how you'd call it:
<P><PRE>ASSERT(pMyObject-&gt;GetRuntimeClass()-&gt;m_lpszClassName == &quot;CMyClass&quot;);</PRE>
</BODY>
</HTML>



