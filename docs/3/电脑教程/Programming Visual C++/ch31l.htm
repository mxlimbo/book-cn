<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX31B Record View Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="782"><H1>The EX31B Record View Example</H1></A><P>The EX31B example is an &quot;add-change-delete&quot; application that's different 
from the Access model. The user must explicitly add, update, and delete records. 
Even if you prefer the Access-style behavior, you can learn a lot about the 
<I>CRecordView</I> class by going through the steps in the EX31B example.
<P>Here are the steps for building the EX31B example:<P>
<OL>
<B><LI>Run AppWizard to produce 
\vcpp32\ex31b.</B> As you move through the AppWizard steps, select Single Document Interface (Step 1 dialog box) and Database View Without File Support (Step 2). In the Step 2 
dialog box, also click the Data Source button and choose the ODBC 
datasource named Student Registration. Choose Dynaset as the Recordset Type, 
then select the Instructor table. Finally, deselect Printing And Print 
Preview (Step 4). The options and the default class names are shown below.<P>

<P><img src="g31og08x.gif" width=414 height=423 border=0><P>

<B><LI>Add edit controls to the <I>IDD_EX31B_FORM</I> template.</B>
Use the IDs <I>IDC_ID</I>, <I>IDC_NAME</I>, and 
<I>IDC_ROOM</I>, and position the controls as shown here.

<P><IMG SRC="G31OG09.GIF" width=402 height=332 BORDER=0><P>

<B><LI>Use ClassWizard to link the edit controls to the recordset 
data members.</B> To add a data member, click on the Member Variables 
tab and choose the ID corresponding to the edit box for each variable. 
Click the Add Variable button, and click the arrow in the Member 
Variable Name combo box to display a list of variables. Select only the 
appropriate variable, as shown here.

<P><IMG SRC="g31og10.gif" width=320 height=288 BORDER="0"><P>

<P>When you're finished adding variable names for each edit box, 
you'll see a screen like the one shown here.

<P><A HREF="javascript:fullSize('g31og11x.htm')"> <img src="g31og11.jpg" width=404 height=290 border=0 ALT = "Click to view at full size."> </A><P>

<B><LI>Build and test the EX31B 
application.</B>You should have a working read-only database application that looks like Figure 
31-4. Use the toolbar buttons to sequence through the instructor records.
<P><B><LI>Back up your database.</B> Now you're going to include the logic to 
add, change, and delete records. It's a good idea to make a copy of the 
STDREG32.MDB file first. That way you have something to refer back to 
after you delete all the records.
<P><B><LI>Add menu commands.</B> Add the following items to the Record 
pop-up menu in the <I>IDR_MAINFRAME</I> menu. Also, use ClassWizard to 
map the commands to the specified <I>CEx31bView</I> class members.

<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Menu Command</B></TD><TD VALIGN="TOP"><B>Command ID</B></TD><TD VALIGN="TOP"><B>Command Handler</B></TD><TD VALIGN="TOP"><B>Update Command UI Handler</B></TD></TR>
<TR><TD VALIGN="TOP">Add Record</TD><TD VALIGN="TOP"><I>ID_RECORD_ADD</I></TD><TD VALIGN="TOP">
<I>OnRecordAdd</I></TD><TD VALIGN="TOP">&nbsp;</TD></TR>
<TR><TD VALIGN="TOP">Clear Fields</TD><TD VALIGN="TOP"><I>ID_RECORD_CLEARFIELDS</I></TD><TD VALIGN="TOP">
<I>OnRecordClearfields</I></TD><TD VALIGN="TOP">&nbsp;</TD></TR>
<TR><TD VALIGN="TOP">Delete Record</TD><TD VALIGN="TOP"><I>ID_RECORD_DELETE</I></TD><TD VALIGN="TOP">
<I>OnRecordDelete</I></TD><TD VALIGN="TOP"><I>OnUpdateRecordDelete</I></TD></TR>
<TR><TD VALIGN="TOP">Update Record</TD><TD VALIGN="TOP"><I>ID_RECORD_UPDATE</I></TD><TD VALIGN="TOP"><I>OnRecordUpdate</I></TD><TD VALIGN="TOP"><I>OnUpdateRecordUpdate</I></I></TD></TR>
</TABLE>
<P>

<B><LI>Add and override the <I>OnMove </I>function in the 
<I>CEx31bView</I> class.</B> The <I>CRecordView::OnMove</I> function does the work of updating the 
database when the user moves out of a record. Because we don't want this 
behavior, we must override the function as follows:
<P><PRE><B>BOOL CEx31bView::OnMove(UINT nIDMoveCommand) 
{
    switch (nIDMoveCommand)
    {
    case ID_RECORD_PREV:
        m_pSet-&gt;MovePrev();
        if (!m_pSet-&gt;IsBOF())
            break;

    case ID_RECORD_FIRST:
        m_pSet-&gt;MoveFirst();
        break;

    case ID_RECORD_NEXT:
        m_pSet-&gt;MoveNext();
        if (!m_pSet-&gt;IsEOF())
            break;
        if (!m_pSet-&gt;CanScroll()) {
            // Clear screen since we're sitting on EOF
            m_pSet-&gt;SetFieldNull(NULL);
            break;
        }

    case ID_RECORD_LAST:
        m_pSet-&gt;MoveLast();
        break;

    default:
        // unexpected case value
        ASSERT(FALSE);
    }

    // Show results of Move operation
    UpdateData(FALSE);
    return TRUE;
}</B></PRE>
<P>Also, add the declaration for this overridden function to 
the ex31bView.h header file.
<P><B><LI>Edit the menu command handlers.</B>The following functions call 
various <I>CRecordset</I> member functions to edit the database. To add a 
record, you must call <I>CRecordset::AddNew</I>, followed by 
<I>Update</I>. To modify a record, you must call 
<I>CRecordset::Edit</I>, followed by <I>Update</I>. When 
you add a new record to the database, you should call 
<I>CRecordset::MoveLast</I> because the new record is always added to the end of the dynaset.

<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
If you have a sorted recordset (or if your ODBC 
driver doesn't put added records in the recordset), you should call 
<I>CRecordset::Requery</I> to completely regenerate the recordset. In that case, 
there's no convenient way to position the cursor on the newly added 
record, and that's a basic problem with SQL.
</BLOCKQUOTE></DIV>

<P>Add the following boldface code:
<P><PRE>void CEx31bView::OnRecordAdd()
{
    <B>m_pSet-&gt;AddNew();
    UpdateData(TRUE);
    if (m_pSet-&gt;CanUpdate()) {
        m_pSet-&gt;Update();
    }
    if (!m_pSet-&gt;IsEOF()) {
        m_pSet-&gt;MoveLast();
    }</B>
    <B>m_pSet-&gt;Requery(); // for sorted sets
    UpdateData(FALSE);</B>
}

void CEx31bView::OnRecordClearfields() 
{
    <B>m_pSet-&gt;SetFieldNull(NULL);
    UpdateData(FALSE);</B>
}

void CEx31bView::OnRecordDelete() 
{
    <B>CRecordsetStatus status;
    try {
        m_pSet-&gt;Delete();
    }
    catch(CDBException* e) {
        AfxMessageBox(e-&gt;m_strError);
        e-&gt;Delete();
        m_pSet-&gt;MoveFirst(); // lost our place!
        UpdateData(FALSE);
        return;
    }
    m_pSet-&gt;GetStatus(status);
    if (status.m_lCurrentRecord == 0) {
        // We deleted last of 2 records
        m_pSet-&gt;MoveFirst();
    }
    else {
        m_pSet-&gt;MoveNext();
    }
    UpdateData(FALSE);</B>
}

void CEx31bView::OnUpdateRecordDelete(CCmdUI* pCmdUI) 
{
    <B>pCmdUI-&gt;Enable(!m_pSet-&gt;IsEOF());</B>
}

void CEx31bView::OnRecordUpdate() 
{
    <B>m_pSet-&gt;Edit();
    UpdateData(TRUE);
    if (m_pSet-&gt;CanUpdate()) {
        m_pSet-&gt;Update();
    }
// should requery if key field changed</B>
}

void CEx31bView::OnUpdateRecordUpdate(CCmdUI* pCmdUI) 
{
    <B>pCmdUI-&gt;Enable(!m_pSet-&gt;IsEOF());</B>
}</PRE>
<P><B><LI>Build and test the EX31B application 
again.</B> Now you can add, change, and delete records. Observe what happens if you try to add 
a record with a duplicate key. You get an error message that comes from 
an exception handler inside the framework. You can add 
try/catch logic in <I>OnRecordAdd</I> to customize the error processing.
</OL>
</BODY>
</HTML>



