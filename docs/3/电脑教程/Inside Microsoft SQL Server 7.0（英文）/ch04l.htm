<HTML>
<HEAD>
<link rel="STYLESHEET" type="text/css" href="squeal7.css">
<TITLE>Basic Configuration After Installation</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch04k.htm">[Previous]</A> <A HREF="ch04m.htm">[Next]</A><P>

<A NAME="158"><H1>Basic Configuration After Installation</H1></A>

<P>After the installation, you should verify the basic operation of SQL Server. 
SQL Server 7 is mostly self-configuring. Many options are available to fine-tune 
the configuration, but these are necessary only for specialized purposes. We'll 
discuss configuration in <a href="ch15a.htm">Chapter 15.</a> Initially, you should leave the default 
configuration alone until you have a particular reason to change it.</P>

<A NAME="159"><H2>Starting the SQL Server Service</H2></A>

<P>After a successful installation, start SQL Server. The most common way to 
do this is by using the SQL Server Service Manager (from the Start menu). 
Choose Programs, Microsoft SQL Server 7.0, and then Service Manager. (The 
installation program also puts the SQL Server Service Manager in the startup 
group for the operating system, so after rebooting your machine, an icon for the 
SQL Server Service Manager appears on the taskbar, in the corner near the clock. 
You can also use the Services applet of the Windows NT Control Panel or SQL 
Server Enterprise Manager or issue a NET START MSSQLSERVER command 
from a Windows NT console (DOS prompt). You can also configure SQL Server 
to start automatically, either through the Services applet of the Windows NT 
Control Panel or by editing the properties of SQL Server in the Enterprise Manager.</P>

<P>After SQL Server is running (the icon on the taskbar will have a 
green arrow), use one of the most basic applications, SQL Server Query Analyzer, 
to ensure that you can connect. Initially, the only available SQL Server login 
name (sa) has a null password, so you can leave 
<I>sa</I> in the Login Name box and leave the password field blank. Or you can select the Use Windows NT 
Authentication option so that no Login Name or Password is required. Then change 
your database to the <I>pubs</I> sample database and run a couple of simple queries 
(for example, <I>SELECT * FROM authors ORDER BY 
au_lname</I>) to be sure that SQL Server is running correctly.</P>

<A NAME="160"><H2>Changing the System Administrator Password</H2></A>

<P>After you verify that SQL Server is running and responding to queries, 
you should change the password for the System Administrator (sa) account. 
From the Query Analyzer, use <I>sp_password </I>to change the 
<I>sa </I>password. As mentioned earlier, initially the password is null (no password). Be sure to pick a 
password you'll remember, because by design there is no way to read a password (it 
is stored encrypted) it can only be changed to something else. Using 
Query Analyzer from the <I>master</I> database to change the password to 
<I>Banks_14</I>, you'd issue the following command:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
sp_password NULL, 'Banks_14', sa
</pre>
</td></tr></table></p>

<P>Using SQL Server Enterprise Manager, you can change the password 
from the server's Security folder. Select Logins, and then double-click 
<I>sa</I> in the  
right pane.</P>

<P>Note that the actual password is stored in a table as SQL Server data. 
So if you've chosen a case-sensitive sort order, passwords will also be case 
sensitive and must be entered exactly as defined.</P>

<p><div class="sidebar"><blockquote>
<B>SQL Server Enterprise Manager vs. SQL Statements</B>
<P>You can do nearly any task with SQL Server. At the lowest level, 
you can issue an SQL statement or a stored procedure. However, it's 
usually simpler to use SQL Server Enterprise Manager, which provides 
a front end for these commands and frees you from needing to 
know exact steps and syntax. Administrators who are proficient with 
Microsoft Visual Basic for Applications (VBA) might choose to use simple 
VBA scripts that use the SQL Server database administration object model, 
 known as SQL-DMO (SQL Distributed Management Objects).</P>
 
<P>Since this book is geared toward database developers and 
administrators, we'll typically show the SQL statements and stored 
procedures that are used to accomplish a task and simply reference the easier 
methods, assuming that this will provide the best explanation of what's 
going on. We'll also tell you what to do without providing step-by-step 
directions. You can consult the SQL Server documentation for 
exact syntax of all options and so on. This book is meant to complement, 
but not replace, the product documentation.</P>
</blockquote></div></p>

<A NAME="161"><H2>Configuring SQL Server's Error Log</H2></A>

<P>A new error log is created each time the SQL Server service is started. 
(The online documentation says you have to stop and start the computer running 
SQL Server to start a new error log, but this is not true.) If you want to start a 
new error log without stopping and restarting SQL Server, you can use the 
<I>sp_cycle_ 
errorlog</I> system stored procedure. Keep in mind that the new error log 
created when you execute this procedure will not contain all the normal boot 
messages that are put in the error log when SQL Server starts up. You'll have to refer 
to an older copy of the error log to see these messages. However, if you 
execute <I>sp_cycle_errorlog</I> too many times, you might not have any copies that 
contain the boot messages. By default, SQL Server retains copies of the previous six 
error logs and gives the most recent copy (prior to the currently active error log)  
the extension .1, the second most recent copy the extension .2, and so on.  
The current error log has no extension. You can change the number of 
error logs maintained by editing the registry. Find the key HKEY_LOCAL_MACHINE\ 
SOFTWARE\Microsoft\MSSQLServer\MSSQLServer, and edit that key by 
adding a new value. Define the value with the name 
<I>NumErrorLogs</I> and the type REG_DWORD. Supply any initial value desired, but keep in mind that the 
value you enter when editing the registry will be in hexadecimal.</P>

</BODY>
</HTML>



