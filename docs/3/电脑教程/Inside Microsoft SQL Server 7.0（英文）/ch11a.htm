<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="squeal7.css">
<TITLE>Chapter 11 -- Cursors</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch10j.htm">[Previous]</A> <A HREF="ch11b.htm">[Next]</A><P>


<font size="+3">Chapter 11</font>

<A NAME="416"><H1>Cursors</H1></A>

<P>A relational database such as Microsoft SQL Server is naturally 
<I>set oriented</I>. This means that a given statement, such as SELECT, returns a set of 
results&#8212;often more than one row of data. On the other hand, most programming 
languages and many applications tend to be ultimately 
<I>record based</I>. For example, in an application that displays a list of customers, users scroll through the 
list and periodically drill down to get more detail about a customer and perhaps 
make some modifications. Then they might proceed to the next customer and do 
the operation again, and so on, one record at a time.</P>

<P>The incongruity between the set-oriented approach and the 
record-based approach is sometimes referred to as an 
<I>impedance mismatch</I>. To deal with this mismatch, SQL Server provides a significant bridge between the two 
models: cursors.</P>
<P>You can think of a cursor as a named result set in which a current 
position is always maintained as you move through the result set. For example, as 
you visually scan names in a printed phone book, you probably run your finger 
down the entries. Your finger acts like a cursor&#8212;it maintains a pointer to the 
current entry. You can think of the entries on the current page of the phone book 
as the result set from your query. The action of moving your finger through 
the listings on that page is similar to the action 
of a <I>scrollable</I> <I>cursor</I>&#8212;it moves 
forward and backward or up and down at different times, but it always maintains 
a current position on a particular row.</P>

<P>SQL Server has different types of cursors that you can choose based 
on your scrolling requirements and on how insulated you want the cursor to be 
from data changes made by others. Special cursor libraries in ODBC, OLE DB, 
and DB-Library have network optimizations that prevent each row fetched in a 
cursor from incurring the overhead of its own network conversation. Figure 11-1 shows how a cursor works.</P>

<P>
<A HREF="javascript:fullSize('f11wh01x.htm')"> <img src="f11wh01.JPG" width=404 height=565 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- caption --><B>Figure 11-1.</B> <I>SQL Server cursors bridge set-based and record-based models.</I><!-- /caption -->
</P>
 


</BODY>
</HTML>



