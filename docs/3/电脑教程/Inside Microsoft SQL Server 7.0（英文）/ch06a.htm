<html>
<head><link rel="STYLESHEET" type="text/css" href="squeal7.css">
<title>Chapter 6 -- Tables</title>


<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05l.htm">[Previous]</A> <A HREF="ch06b.htm">[Next]</A><P>


<font size="+3">Chapter 6</font>

<A NAME="200"><H1>Tables</H1></A>

<p>In this chapter, we'll look at some in-depth implementation examples. But 
let's start with a basic introduction to tables. Simply put, a 
<i>table</i> is a collection of data about a specific 
<i>entity</i> (person, place, or thing) that has a discrete number of 
named <i>attributes</i> (for example, quantity or type). Tables are at the heart of Microsoft SQL Server and the relational model in general. Tables are easy to understand&#8212;they're just like the everyday lists you make for yourself. In SQL Server, a table is often referred to as a <i>base table</i> to emphasize where data is stored. Calling it a base table also distinguishes the table from a <i>view,</i> a virtual table that's an internal query referencing one or more base tables.</p>

<p>Attributes of a table's data (such as color, size, quantity, order date, 
and supplier's name) take the form of named 
<i>columns </i>in the table. Each instance 
of data in a table is represented as a single entry, or 
<i>row</i> (formally called a <i>tuple</i>). In a true relational database, every row in a table is unique, and each row has 
a unique identifier called the <i>primary key</i>. (SQL Server, in accordance with the ANSI SQL standard, doesn't require that you make a row unique or declare 
a primary key. However, because both of these concepts are central to the 
relational model, you should always implement them.)</p>

<p>Most tables will have some relationship to other tables. For example, 
in an order-entry system, the <i>orders</i> table likely has a 
<i>customer_number</i> column in which it keeps track of the customer number for an order; <i>customer_number</i> also appears in the <i>customer</i> table. Assuming that <i>customer_number</i> is a unique identifier, or the primary key, of the <i>customer</i> table, a foreign key relationship is established by which the <i>orders</i> and <i>customer</i> tables can subsequently be joined.</p>

<p>So much for the 30-second database design primer. You can find 
plenty of books that discuss logical database and table design, but this isn't one of them. We assume that you understand basic database theory and design and that you generally know what your tables will look like. The rest of this chapter discusses the internals of tables in SQL Server and implementation considerations.</p>

</BODY>
</HTML>



