<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=GB_2312-80">
<title>事件处理程序如何共同工作</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h2><a name="mdmschoweventhandlersworktogether"></a>事件处理程序如何共同工作</h2>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:请参阅">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscHowEventHandlersWorkTogether_C">
</object></p>
<p>
无论是否实际使用事件，都必须执行 <b>ConnectionEvent</b> 和 <b>RecordsetEvent</b> 类中的所有事件处理程序。必须执行的工作量取决于所用的编程语言。某些语言，如 Microsoft Visual Basic 可以为您完成所有工作。其他语言如 Microsoft&reg; Visual C++&reg; 则需要您做所有工作。而 Microsoft&reg; Visual J++&trade; with ADO/WFC 则介于两者之间，该语言为您处理大部分工作。详细信息，请参阅<a href="mdmscadoeventinstantiation.htm">不同语言的 ADO 事件实例</a>。</p>
<p>
虽然由您自己实现事件处理程序的工作量较大，但可以完成用 Visual Basic 这类语言无法进行的工作。例如，在 Microsoft Visual C++ 中，一个 <b>RecordsetEvent</b> 处理程序可以处理在操作多个 <b>Recordset</b> 对象时所产生的通知。</p>
<p>
<b>Will </b>和 <b>Complete </b>事件处理程序可以成对或分开使用。</p>
<h3>成对的事件处理程序</h3>
<ul type=disc>
<li>
如下设定说明 <b>Will</b> 事件成功时会出现什么情况。<p class=tl>
<b>Recordset</b> 对象拥有成对事件 <b>WillChangeField</b> 和 <b>FieldChangeComplete</b>。在应用程序中开始更改字段值时，将调用 <b>WillChangeField</b> 事件处理程序；可以返回一个用于更改字段的标志。操作完成时，<b>FieldChangeComplete</b> 事件将通知应用程序操作已经结束，而事件处理程序状态参数则报告操作成功。</P></li>
<li>
如下设定说明 <b>Will </b>事件将操作取消时会出现什么情况。<p class=tl>
在同一应用程序中，更改另一个字段。将调用 <b>WillChangeField </b>事件处理程序。可能因为某种原因您决定不接受更改字段，所以您在状态参数中返回 <b>adStatusCancel</b>。结果，操作未能完成。</P><p class=tl>
<b>FieldChangeComplete</b> 事件通知您操作已经结束。事件处理程序状态参数被设为 <b>adStatusErrorsOccurred</b>；错误参数引用 <b>Error </b>对象，而 <b>Error </b>对象的 <b>Number </b>属性被设为 ADO 值或提供者，从而指示操作已被取消。</P></li>
<li>
多个 <b>Will </b>和 <b>Complete </b>事件处理程序可被同一操作调用。如下设定说明当多个 <b>will </b>事件成功时会出现了什么情况。<p class=tl>
<b>Recordset </b>对象拥有成对事件 <b>WillChangeField</b>、<b>FieldChangeComplete</b>、<b>WillChangeRecord </b>和 <b>RecordChangeComplete</b>。开始更改字段值时将调用 <b>WillChangeField</b> 事件处理程序；可以返回一个用于更改字段的标志。</P><p class=tl>
下一步，调用 <b>WillChangeRecord </b>事件处理程序，再次指示操作应该结束。</P><p class=atl>
<B><b>注意&nbsp;&nbsp;&nbsp;</b></B>所有从属于 ADO 对象的特定实例的 <b>will </b>事件处理程序通常都将被调用。但是，调用过程没有特定次序。</p><p class=tl>
操作结束时，将调用 <b>FieldChangeComplete</b> 和 <b>RecordChangeComplete</b> 事件处理程序。</P></li>
<li>
多个 <b>Will</b> 和 <b>Complete</b> 事件处理程序可被同一操作调用，但是可以取消挂起的操作。如下设定说明在多个 <b>will </b>事件的最后一个取消操作时，将出现什么情况。<p class=tl>
再一次，<b>Recordset</b> 拥有成对的 <b>WillChangeField</b>、<b>FieldChangeComplete</b>、<b>WillChangeRecord</b> 和 <b>RecordChangeComplete</b> 事件。开始更改字段值时将调用 WillChangeField 事件处理程序；可以返回一个用于更改字段的标志。</P><p class=tl>
下一步，将调用 <b>WillChangeRecord</b> 事件处理程序。也许您认为字段更改本身没有问题，但是它将在记录中创建一个整体错误。您返回 <b>adStatusCancel</b>，指示不接受更改字段。<b>WillChangeField</b> 事件处理程序已经允许进行操作。</P><p class=tl>
操作被 <b>WillChangeRecord </b>事件处理程序取消，因此未能完成。调用 <b>FieldChangeComplete </b>事件处理程序，将状态参数设置为 <b>adStatusErrorsOccurred</b>；并对错误参数进行适当的设置。</P><p class=tl>
下一步，<b>RecordChangeComplete </b>事件处理程序被设置为 <b>adStatusErrorsOccurred </b>的状态参数调用。匹配的 <b>Complete </b>事件被 <b>will </b>事件调用。</P></li>
<li>
多个 <b>Will</b> 和 <b>Complete</b> 事件处理程序可被同一个操作调用，但是可以取消挂起操作。如下设定说明当操作被事件处理程序、而不是多个 will 事件的最后一个事件取消时，会出现什么情况。<p class=tl>
再一次，<b>Recordset</b> 拥有成对的 <b>WillChangeField</b>、<b>FieldChangeComplete</b>、<b>WillChangeRecord</b> 和 <b>RecordChangeComplete</b> 事件。在开始更改字段值时将调用 <b>WillChangeField </b>事件处理程序，返回 <b>adStatusCancel</b>，从而指示更改字段是不可接受的。操作没有完成；<b>FieldChangeComplete</b> 事件处理程序通知您操作已经结束，状态和错误参数设置正确。</P><p class=tl>
然而，由于第一个 <b>will </b>事件取消操作，<b>WillChangeRecord</b>（还有 <b>RecordChangeComplete</b>）事件处理程序未被调用。通常，如果 <b>will</b> 事件取消操作，其他 <b>will</b> 事件处理程序将不会被调用。</P></li>
</ul>
<p>
<b>不成对的事件处理程序</b></p>
<p>
通过返回 <b>status</b> 参数的 <b>adStatusUnwantedEvent</b> 可以关闭任何事件的事件通知。例如，第一个 <b>Complete</b> 事件处理程序被调用时，将返回 <b>adStatusUnwantedEvent</b>，并且您随后只收到 <b>will</b> 事件。</p>
<p>
检查操作中将要使用的参数时，单个 <b>will</b> 事件处理程序会很有帮助。您可以修改这些操作参数或者取消操作。</p>
<p>
另外一种情况是，打开 <b>Complete</b> 事件通知，当第一个 <b>will</b> 事件处理程序被调用时，返回 <b>adStatusUnwantedEvent</b>。您随后将只收到 <b>Complete</b> 事件。</p>
<p>
单个 <b>Complete</b> 事件处理程序是管理异步操作的有效工具。每个异步操作都具有相应的 <b>Complete</b> 事件。</p>
<p>
例如，充填很大的 <b>Recordset</b> 对象要花很长时间。如果应用程序编写恰当，则可以启动 Recordset.Open(...,adAsyncExecute) 操作并继续其他处理程序。最终您一定会在 <b>ExecuteComplete</b> 事件充填 <b>Recordset</b> 时收到通知。</p>
<p>
<b>单个事件处理程序和多个对象</b></p>
<p>
Microsoft Visual C++ 这类程序语言的灵活性使得一个事件处理程序可以处理多个对象的事件。例如，应用一个 <b>Disconnect</b> 事件处理程序可以处理多个 <b>Connection</b> 对象的事件。如果一个连接结束，<b>Disconnect</b> 事件处理程序即会被调用。因为事件处理程序参数 <b>object</b> 被设置到相应的 <b>Connection</b> 对象，您可以判断出引起事件的连接。</p>
<p class=indent>
<B><b>注意</b></B>&nbsp;&nbsp;&nbsp;因为 Visual Basic 只能使一个对象与一个事件相关联，此技术不能应用于该语言。</p>
<p>
<b>多个事件处理程序和单个操作</b></p>
<p>
要让一个 ADO 对象及其操作与多组事件相关联是可能的，但是不太有用。例如，每次执行专门的字段有效性编辑时，可以创建多个 <b>WillChangeField</b> 事件。如果字段将要更改，某个 <b>will</b> 事件可能会使字段值的某个部分有效，而另一个 <b>will</b> 事件则会使另一部分有效。 </p>
<p>
此技术之所以不太有用，是因为通过单个事件处理程序易于执行或调用所有的编辑程序。但为了完整起见，才在此提到它。</p>
</BODY>
</HTML>
