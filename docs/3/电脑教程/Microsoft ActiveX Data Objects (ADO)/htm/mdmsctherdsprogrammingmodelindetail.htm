<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=GB_2312-80">
<title>RDS 编程模型详细资料</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="mdmsctherdsprogrammingmodelindetail"></a>RDS 编程模型详细资料</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:请参阅">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheRDSProgrammingModelInDetail_C">
</object></p>
<p>
下列元素是 RDS 编程模型中的关键部分：
<ul type=disc>
<li>
RDS.DataSpace<br><br></li>
<li>
RDSServer.DataFactory<br><br></li>
<li>
RDS.DataControl<br><br></li>
<li>
事件</li>
</ul>
<p class=label>
<b>RDS.DataSpace</b></p>
<p>
客户端应用程序必需指定服务器和要调用的服务器程序。相应的，应用程序接收对服务器程序的引用，并且将此引用当作实际的服务器程序。</p>
<p>
RDS 对象模型通过 <a href="mdobjdataspace.htm">RDS.DataSpace</a> 对象来体现该功能。</p>
<p>
使用程序标识符（即 ProgID）来指定服务器程序。服务器使用 ProgID 和服务器计算机的注册表来定位需初始化的程序的信息。</p>
<p>
根据服务器程序是在由 Internet 或 Intranet 连接的远程服务器上，还是在连接局域网的服务器上，或者根本不在服务器而在本地动态连接库 (DLL) 上，RDS 可在内部进行划分。该划分决定在客户与服务器之间交换数据的方式，并对于返回给客户端应用程序的“引用”类型中有着实际的区别。然而，从用户的角度来看，该划分没有特殊的意义。所有这些只是令您接收到可用的程序引用。</p>
<p class=label>
<b>RDSServer.DataFactory</b></p>
<p>
RDS 提供的默认服务器程序可对数据源执行 SQL 查询并返回 <b>Recordset</b> 对象，或获得 <b>Recordset</b> 对象并更新数据源。</p>
<p>
RDS 对象模型用 <a href="mdobjdatafactory.htm">RDSServer.DataFactory</a> 对象来体现该功能。</p>
<p>
此外，该对象具有创建空的 <b>Recordset</b> 对象的方法，可用编程的方式对该空<b> Recordset</b> 进行填写。它还有另一种方法可将 <b>Recordset</b> 转换为文本串来建立 Web 页。</p>
<p>
使用 ADO，可以利用 <b>DataFactory </b>处理程序和包含连接、命令和安全参数的自定义文件覆盖一些标准连接和 <b>RDSServer.DataFactory</b> 的命令行为。</p>
<p class=label>
服务器程序有时可称作“业务对象”。您可以编写自己的自定义业务对象，它可以执行复杂数据访问，有效性检查等。甚至在编写自己的自定义业务对象时，可创建 <b>RDSServer.DataFactory</b> 对象的实例并且使用它的一些方法完成自己的任务。</p>
<p class=label>
<b>RDS.DataControl</b></p>
<p>
RDS 提供了可将 <b>RDS.DataSpace</b> 和 <b>RDSServer.DataFactory</b> 的功能结合在一起的方法。RDS 也能让可视化控件容易地使用查询数据源所返回的 <b>Recordset </b>对象。大多数情况下，RDS 总是尽可能多的自动访问服务器上的信息，并且将信息显示在可视化控件中。</p>
<p>
RDS 对象模型用 <a href="mdobjdatacontrol.htm">RDS.DataControl</a> 对象来体现该功能。</p>
<p>
<b>RDS.DataControl </b>有两个方面。一个方面与数据源有关。如果设置 <b>RDS.DataControl </b>的命令和连接属性，它将会自动使用 <b>RDS.DataSpace</b> 创建对默认 <b>RDSServer.DataFactory </b>对象的引用。然后<b> RDSServer.DataFactory </b>将使用连接属性的值连接到数据源，并使用命令属性的值从数据源获得<b> Recordset</b>，最后将 <b>Recordset </b>对象返回到 <b>RDS.DataControl。</b></p>
<p>
第二个方面涉及在可视化控件中显示被返回的 <b>Recordset</b> 信息。可以使可视控件与 <b>RDS.DataControl </b>相关联（在称为绑定的过程中），并访问关联的 <b>Recordset</b> 对象中的信息，查询结果显示在 Internet Explorer 的 Web 页上。每个 <b>RDS.DataControl </b>对象将一个表示单个查询结果的 <b>Recordset</b> 对象绑定到一个或多个可视控件（例如文本框、组合框和网格控件等）上。在每页上可以有多个<b> RDS.DataControl </b>对象。每个 <b>RDS.DataControl</b> 对象都可连接不同的数据源，并且包含各自的查询结果。</p>
<p>
<b>RDS.DataControl </b>对象也有其自己的方法用于定位、排序和筛选相关联的 <b>Recordset </b>对象的行。这些方法虽然相似，但与 ADO<b> Recordset</b> 对象所用的方法不同。</p>
<p class=label>
<b>事件</b></p>
<p>
RDS 支持两个独立于 ADO 事件模型的自身事件。无论 <b>RDS.DataControl </b><a href="mdproreadystate.htm">ReadyState</a> 属性何时更改均调用 <a href="mdevtonreadystatechange.htm">onReadyStateChange</a> 事件，以此对异步操作的完成、结束或出现错误等发出通知。无论何时发生错误，即使发生在异步操作执行的过程中，均调用 <a href="mdevtonerror.htm">onError</a> 事件。</p>
<p class=indent>
<b>注意 <B>&nbsp;&nbsp;&nbsp;</B></b>Microsoft Internet Explorer 环境提供给 RDS 两个附加事件：<b>onDataSetChanged</b>（<b>Recordset</b> 在起作用但还在检索行）和 <b>onDataSetComplete</b>（ <b>Recordset</b> 已结束检索行）。</p>
<p>
<B><b>下一页</b></B>&nbsp;&nbsp;&nbsp;<a href="mdmscrdsprogrammingmodelwithobjects.htm">使用对象的 RDS 编程模型</a>。</p>
</BODY>
</HTML>
