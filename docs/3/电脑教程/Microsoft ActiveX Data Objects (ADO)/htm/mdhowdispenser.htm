<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=GB_2312-80">
<title>Microsoft Transaction Server 资源分配器</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h4><a name="mdhowdispenser"></a>Microsoft Transaction Server 资源分配器</h4>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:请参阅">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdhowDispenser_C">
</object></p>
<p>
在三层环境中，如果在中间层上使用 Microsoft Transaction Server，那么客户可以共享数据库连接。可以使用 <a href="mdobjdatafactory.htm">RDSServer.DataFactory</a> 对象或创建可为客户端共享设置 ODBC 连接的 ActiveX 组件 DLL。在 Transaction Server 运行时环境中运行 <b>RDSServer.DataFactory </b>或自定义业务对象时，共享机制产生作用。只使用数百个而不是上千个数据库连接仍然可以支持上千个客户端。这是 Microsoft Transaction Server 中 ODBC 资源分配器的功能。</p>
<p>
<b>在 Microsoft Transaction Server 中运行业务对象</b></p>
<p>
业务对象可以是可执行文件 (.exe) 或动态链接库 (.dll)。用于运行业务对象的配置取决于对象是 .dll 还是 .exe 文件：
<ul type=disc>
<li>
创建为 .exe 文件的业务对象可以通过 <a href="mddefdcom.htm">DCOM</a> 调用。如果通过 Internet Information Server (IIS) 使用这些业务对象，那么它们将受到附加数据<a href="mddefmarshal.htm">调度</a>的限制，这将降低客户端性能。<br><br></li>
<li>
创建为 .dll 文件的业务对象可以通过 IIS（从而通过 HTTP）使用，并且只能通过 <a href="mddefmicrosofttransactionserver.htm">Microsoft Transaction Server</a> 在 DCOM 上使用。业务对象 DLL 需要在 IIS 计算机上注册以便用户可通过 IIS 获得访问权限。<a href="mdobjdatafactory.htm">RDSServer.DataFactory</a> 对象是远程数据服务提供的默认业务对象的 DLL，并且受到本节中的条件限制。（关于如何配置 DLL 以便在 DCOM 上运行的步骤，请参阅下一节“<a href="mdhowdllmts.htm">使 DLL 在 DCOM 上运行</a>”。）</li>
</ul>
<p>
通过在 MTS 运行时环境中运行 <b>RDSServer.DataFactory </b>或自定义业务对象，也可以使用 MTS 资源分配器提高性能和缩放性。由于这些业务对象调用 ADO，而 ADO 间接调用 ODBC，因此可以使用 MTS ODBC 资源分配器。</p>
<p>
资源分配器自动汇集和重复利用资源。因此，当 <b>RDSServer.DataFactory </b>或者自定义业务对象释放数据库连接时，连接将返回到缓冲池中。当再次调用方法创建连接时，将会请求相同的数据库连接。ODBC 资源分配器可重复利用缓冲池中的连接，而不用创建新的连接，这样可以节省时间和服务器资源。</p>
<p class=indent>
<B><b>注意&nbsp;&nbsp;&nbsp;</b></B>当中间层上的业务对象作为 Microsoft Transaction Server 组件实现时（使用 <b>GetObjectContext</b>、<b>SetComplete </b>和 <b>SetAbort</b>），通过多个客户端调用，该业务对象可以使用 Transaction Server 上下文对象来维护自身状态。使用 DCOM 可以实现这个方案，并且通常在委托的客户端和服务器 (Intranet) 之间实现。在这种情况下，客户端的 <b>RDS.DataSpace </b>对象和 <b>CreateObject</b> 方法由事务的上下文对象和 <b>CreateInstance</b> 方法（由 <b>ITransactionContext</b> 接口提供）代替，并通过 Microsoft Transaction Server 实现。</p>
</BODY>
</HTML>
