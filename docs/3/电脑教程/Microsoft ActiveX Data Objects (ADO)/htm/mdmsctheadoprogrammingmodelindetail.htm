<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML dir=ltr>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=GB_2312-80">
<title>ADO 编程模型详细资料</title>
<style>@import url(/stylesheets/msdn_ie4.css);</style>
<link disabled rel="stylesheet" href="/stylesheets/msdn_ie3.css"></HEAD>
<BODY>

<h1><a name="mdmsctheadoprogrammingmodelindetail"></a>ADO 编程模型详细资料</h1>
<p>
<object id=alink_1 type="application/x-oleobject"
	classid="clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11">
<PARAM name="Command" value="ALink,MENU">
<PARAM name="Text" value="Text:请参阅">
<PARAM name="Flags" value=",,1">
<PARAM name="Item1" value="">
<PARAM name="Item2" value="mdmscTheADOProgrammingModelInDetail_C">
</object></p>
<p>
以下元素是 ADO 编程模型中的关键部分： </p>
<ul type=disc>
<li>
连接<br><br></li>
<li>
命令<br><br></li>
<li>
参数<br><br></li>
<li>
记录集<br><br></li>
<li>
字段<br><br></li>
<li>
错误<br><br></li>
<li>
属性<br><br></li>
<li>
集合<br><br></li>
<li>
事件</li>
</ul>
<p>
<b>连接</b></p>
<p>
通过“连接”可从应用程序访问数据源，连接是交换数据所必需的环境。通过如 Microsoft&reg; Internet Information Server 作为媒介，应用程序可直接（有时称为双层系统）或间接（有时称为三层系统）访问数据源。</p>
<p>
对象模型使用 <a href="mdobjconnection.htm">Connection</a> 对象使连接概念得以具体化。</p>
<p>
“事务”用于界定在连接过程中发生的一系列数据访问操作的开始和结束。ADO 可明确事务中的操作造成的对数据源的更改或者成功发生，或者根本没有发生。</p>
<p>
如果取消事务或它的一个操作失败，则最终的结果将仿佛是事务中的操作均未发生，数据源将会保持事务开始以前的状态。</p>
<p>
对象模型无法清楚地体现出事务的概念，而是用一组 <b>Connection</b> 对象方法来表示。</p>
<p>
ADO 访问来自 OLE DB <a href="mdrefadoprovinfo.htm">提供者</a>的数据和服务。<b>Connection</b> 对象用于指定专门的提供者和任意参数。例如，可对远程数据服务 (RDS) 进行显式调用，或通过“<a href="mdrefmsremote.htm">Microsoft OLE DB Remoting Provider</a>”进行隐式调用。（请参阅 <a href="mdhowrdstutorial.htm">RDS 教程</a>通过“MS Remote Provider”调用 RDS 第二步的范例）</p>
<p>
<b>命令</b></p>
<p>
通过已建立的连接发出的“命令”可以某种方式来操作数据源。一般情况下，命令可以在数据源中添加、删除或更新数据，或者在表中以行的格式检索数据。</p>
<p>
对象模型用 <a href="mdobjcommand.htm">Command</a> 对象来体现命令概念。<b>Command</b> 对象使 ADO 能够优化对命令的执行。</p>
<p class=label>
<b>参数</b></p>
<p>
通常，命令需要的变量部分即“参数”可以在命令发布之前进行更改。例如，可重复发出相同的数据检索命令，但每一次均可更改指定的检索信息。</p>
<p>
参数对执行其行为类似函数的命令非常有用，这样就可知道命令是做什么的，但不必知道它如何工作。例如，可发出一项银行过户命令，从一方借出贷给另一方。可将要过户的款额设置为参数。</p>
<p>
对象模型用 <a href="mdobjparameter.htm">Parameter</a> 对象来体现参数概念。</p>
<p>
<b>记录集</b></p>
<p>
如果命令是在表中按信息行返回数据的查询（行返回查询），则这些行将会存储在本地。</p>
<p>
对象模型将该存储体现为 <a href="mdobjodbrec.htm">Recordset</a> 对象。但是，不存在仅代表单独一个 <b>Recordset </b>行的对象。</p>
<p>
记录集是在行中检查和修改数据最主要的方法。<b>Recordset</b> 对象用于：
<ul type=disc>
<li>
指定可以检查的行。<br><br></li>
<li>
移动行。<br><br></li>
<li>
指定移动行的顺序。<br><br></li>
<li>
添加、更改或删除行。<br><br></li>
<li>
通过更改行更新数据源。<br><br></li>
<li>
管理 <b>Recordset</b> 的总体状态。</li>
</ul>
<p class=label>
<b>字段</b></p>
<p>
一个记录集行包含一个或多个“字段”。如果将记录集看作二维网格，字段将排列构成“列”。每一字段（列）都分别包含有名称、数据类型和值的属性，正是在该值中包含了来自数据源的真实数据。</p>
<p>
对象模型以 <a href="mdobjfield.htm">Field</a> 对象体现字段。 </p>
<p>
要修改数据源中的数据，可在记录集行中修改 <b>Field</b> 对象的值，对记录集的更改最终被传送给数据源。作为选项，<b>Connection</b> 对象的事务管理方法能够可靠地保证更改要么全部成功，要么全部失败。</p>
<p class=label>
<b>错误</b></p>
<p>
错误随时可在应用程序中发生，通常是由于无法建立连接、执行命令或对某些状态（例如，试图使用没有初始化的记录集）的对象进行操作。</p>
<p>
对象模型以 <a href="mdobjerror.htm">Error</a> 对象体现错误。</p>
<p>
任意给定的错误都会产生一个或多个 <b>Error</b> 对象，随后产生的错误将会放弃先前的 <b>Error</b> 对象组。</p>
<p class=label>
<b>属性</b></p>
<p>
每个 ADO 对象都有一组唯一的“属性”来描述或控制对象的行为。</p>
<p>
属性有两种类型：<a href="mdproadoproperties.htm">内置</a>和<a href="mdmscadodynamicproperties.htm">动态</a>。内置属性是 ADO 对象的一部分并且随时可用。动态属性则由特别的数据提供者添加到 ADO 对象的属性集合中，仅在提供者被使用时才能存在。</p>
<p>
对象模型以 <a href="mdobjproperty.htm">Property</a> 对象体现属性。</p>
<p class=label>
<b>集合</b></p>
<p>
ADO 提供“集合”，这是一种可方便地包含其他特殊类型对象的对象类型。使用集合方法可按名称（文本字符串）或序号（整型数）对集合中的对象进行检索。</p>
<p>
ADO 提供四种类型的集合： 
<ul type=disc>
<li>
<b>Connection </b>对象具有 <a href="mdcolerrors.htm">Errors</a> 集合，包含为响应与数据源有关的单一错误而创建的所有 <b>Error</b> 对象。<br><br></li>
<li>
<b>Command </b>对象具有 <a href="mdcolparameters.htm">Parameters</a> 集合，包含应用于 <b>Command</b> 对象的所有 <b>Parameter</b> 对象。<br><br></li>
<li>
<b>Recordset </b>对象具有 <a href="mdcolfields.htm">Fields</a> 集合，包含所有定义 <b>Recordset</b> 对象列的 <b>Field</b> 对象。<br><br></li>
<li>
另外，<b>Connection</b>、<b>Command</b>、<b>Recordset</b> 和 <b>Field</b> 对象都具有 <a href="mdcolproperties.htm">Properties</a> 集合。它包含所有属于各个包含对象的 <b>Property</b> 对象。</li>
</ul>
<p>
ADO 对象拥有可在其上使用的诸如“整型”、“字符型”或“布尔型”这样的普通数据类型来设置或检索值的属性。然而，有必要将某些属性看成是数据类型“COLLECTION OBJECT”的返回值。相应的，集合对象具有存储和检索适合该集合的其他对象的方法。</p>
<p>
例如，可认为<b> Recordset</b> 对象具有能够返回集合对象的 <b>Properties</b> 属性。该集合对象具有存储和检索描述 <b>Recordset</b> 性质的 <b>Property</b> 对象的方法。</p>
<p class=label>
<b>事件</b></p>
<p>
“事件”是对将要发生或已经发生的某些操作的通知。一般情况下，可用事件高效地编写包含几个异步任务的应用程序。</p>
<p>
对象模型无法显式体现事件，只能在调用<a href="mdmscadoevents.htm">事件处理程序</a>例程时表现出来。</p>
<p>
在操作开始之前调用的事件处理程序便于对操作参数进行检查或修改，然后取消或允许操作完成。</p>
<p>
操作完成后调用的事件处理程序在异步操作完成后进行通知。多个操作经过增强可以有选择地异步执行。例如，用于启动异步 <b>Recordset.Open</b> 操作的应用程序将在操作结束时得到执行完成事件的通知。
<ul type=disc>
<li>
有关事件的详细信息，请参阅 <a href="mdmscadoeventmodelasynchronousoperations.htm">ADO 事件模型和异步操作</a>。</li>
</ul>
<p>
<B><b>下一页</b></B>&nbsp;&nbsp;&nbsp;<a href="mdmscadoprogrammingmodelwithobjects.htm">使用对象的 ADO 编程模型</a>。 </p>
</BODY>
</HTML>
