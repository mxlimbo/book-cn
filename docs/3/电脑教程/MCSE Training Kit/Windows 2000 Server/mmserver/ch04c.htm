<HTML>
<HEAD>
<TITLE>Lesson 2: File Allocation Table (FAT)</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmserver.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="158"><h1>Lesson 2: File Allocation Table (FAT)</h1></A>
<p>Windows 2000 supports two versions of the FAT file system: FAT16 and FAT32. This lesson provides an overview of both file system versions and their use within the Windows 2000 operating system.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b> 

<ul>
<p><li>Describe the Windows 2000 FAT16 file system</li></p>

<p><li>Describe the Windows 2000 FAT32 file system</li></p>
</ul>

<b>Estimated lesson time: 25 minutes</b> 
</blockquote></div>
</p>

<A NAME="159"><h2>Introduction to the FAT File System</h2></A>
<p>The FAT file system was designed when disks were smaller and folder structures were simple. To protect the file system, two copies of the file allocation table are stored on the volume. In the event that one copy of the table is corrupted, the other table is used. The file allocation table is stored in a specified byte offset so that the files needed to start the system can be located.</p>

<p>FAT16 works the same in Windows 2000 as it does in MS-DOS, Windows 3.<i>x</i>, Windows 95, and Windows 98. FAT32 works the same in Windows 2000 as it does in Windows 95 OSR2 and Windows 98. You can install Windows 2000 on an existing FAT primary partition or logical drive. When running Windows 2000, you can move or copy files between FAT and NTFS volumes.</p>

<p>You cannot use Windows 2000 with any compression or partitioning software that requires disk drivers to be loaded by MS-DOS. Therefore, you cannot use MS-DOS 6.0 DoubleSpace or MS-DOS 6.22 DiskSpace on a FAT primary partition or logical drive that you want to access when running Windows 2000.</p>

<A NAME="160"><h2>The FAT16 File System</h2></A>
<p>The FAT disk format is organized into sectors. Each sector can store 512 bytes of data. This is the smallest unit that is used when reading or writing to or from the disk.</p>

<p>Although the sector is the smallest unit used when transferring data to and from a FAT partition, the cluster (also called an allocation unit) is the smallest unit the operating system uses when allocating file storage space on a FAT partition. The size of the cluster varies from drive to drive, depending on the size of the partition. The default cluster size is determined by the partition size and can be as large as 64 KB.</p>

<p>The file allocation table identifies each cluster in the partition as one of the following:</p>

<ul>
<p><li>Unused</li></p>

<p><li>Cluster in use by a file</li></p>

<p><li>Bad cluster</li></p>

<p><li>Last cluster in a file</li></p>
</ul>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
Volumes less than 16 MB will usually be formatted for 12-bit FAT, but the exact size depends on the disk geometry. FAT12 was the original implementation of FAT. It is intended for very small media. By taking less space for each FAT entry, the space consumed by the FAT itself is smaller. Therefore, more space is available for data as opposed to on-disk file system structures. Currently, users might see FAT12 on very small or old media. For example, 3.5-inch floppies are FAT16, whereas 5.25-inch floppies are FAT12.
</blockquote></div>
</p>

<p>Figure 4.7 illustrates the structure of a FAT16 volume. The root folder contains an entry for each file and folder on the volume. The only difference between the root folder and other folders is that the root folder is on a specified location on the disk and has a fixed size of 512 table entries per disk drive. The number of entries on a floppy disk depends on the size of the disk.</p>

<p>
<A HREF="javascript:fullSize('f04xx07gx.htm')"> <img src="images/f04xx07g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.7</b> <i>Structure of a FAT16 volume</i><!--/caption-->
</p>

<p>Folders have a 32-byte entry for each file and folder contained in the folder. The following table lists the components of the file and folder entries:</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Entry component</th>
			<th>Bits</th>
		</tr>

		<tr>
			<td valign="top">Name</td>
			<td valign="top">8.3 format</td>
		</tr>

		<tr>
			<td valign="top">Attribute</td>
			<td valign="top">8</td>
		</tr>

		<tr>
			<td valign="top">Create time</td>
			<td valign="top">24</td>
		</tr>

		<tr>
			<td valign="top">Create date</td>
			<td valign="top">16</td>
		</tr>

		<tr>
			<td valign="top">Last access date</td>
			<td valign="top">16</td>
		</tr>
		
		<tr>
			<td valign="top">Last modified time</td>
			<td valign="top">16</td>
		</tr>

		<tr>
			<td valign="top">Last modified date</td>
			<td valign="top">16</td>
		</tr>

		<tr>
			<td valign="top">Starting cluster number in FAT</td>
			<td valign="top">16</td>
		</tr>

		<tr>
			<td valign="top">File size</td>
			<td valign="top">32</td>
		</tr>
		
	</table>
</p>

<p>There is no organization to the FAT folder structure. Files are given the first available location on the volume. The starting cluster number is the address of the first cluster used by the file. Each cluster contains a pointer to the next cluster in the file or a hex indicator (0xFFFF) that this cluster is the end of the file.</p>

<p>The information in the folder is used by all operating systems that support the FAT file system. Windows NT operating systems can store additional time stamps in a FAT folder entry. These time stamps show when the file was created or last accessed; they are used principally by portable operating system interface standard (POSIX) applications.</p>

<p>Because all entries in a folder are the same size, the attribute byte for each entry in a folder describes what kind of entry it is. For example, one bit indicates that the entry is for a subfolder, and another bit marks the entry as a volume label. Normally, only the operating system controls the settings of these bits.</p>

<p>The attribute byte includes four bits that can be turned on or off by the user:</p>

<ul>
<p><li>Archive file</li></p>

<p><li>System file</li></p>

<p><li>Hidden file</li></p>

<p><li>Read-only file</li></p>
</ul>

<p>The FAT16 file system is included in Windows 2000 to support backward compatibility with previous Windows products. In addition, FAT16 offers widespread compatibility with many other non-Microsoft operating systems.</p>

<p>As in previous versions, the maximum FAT16 partition size in Windows 2000 is 4 gigabytes (GB). The default cluster size is determined by the size of the partition. The following table shows the default cluster sizes for FAT16 volumes:</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Partition size</th>
			<th>Sectors per cluster</th>
			<th>Cluster size</th>
		</tr>
		
		<tr>
			<td valign="top">0 MB-32 MB</td>
			<td valign="top">1</td>			
			<td valign="top">512 bytes (equivalent to the partition sector size)</td>
		</tr>

		<tr>
			<td valign="top">33 MB-64 MB</td>
			<td valign="top">2</td>			
			<td valign="top">1024 bytes</td>
		</tr>

		<tr>
			<td valign="top">65 MB-128 MB</td>
			<td valign="top">4</td>			
			<td valign="top">2048 bytes</td>
		</tr>

		<tr>
			<td valign="top">129 MB-256 MB</td>
			<td valign="top">8</td>			
			<td valign="top">4096 bytes</td>
		</tr>

		<tr>
			<td valign="top">256 MB-512 MB</td>
			<td valign="top">16</td>			
			<td valign="top">8192 bytes</td>
		</tr>
		
		<tr>
			<td valign="top">512 MB-1024 MB</td>
			<td valign="top">32</td>			
			<td valign="top">16 KB</td>
		</tr>

		<tr>
			<td valign="top">1024 MB-2048 MB</td>
			<td valign="top">64</td>			
			<td valign="top">32 KB</td>
		</tr>

		<tr>
			<td valign="top">2048 MB-4096 MB</td>
			<td valign="top">128</td>			
			<td valign="top">64 KB</td>
		</tr>
		
	</table>
</p>

<p>You can specify a different cluster size if you use the Format utility with the /a:<i>size</i> switch from the command prompt to format the partition. However, default settings are strongly recommended for general use.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
Disks that can support sector sizes greater than 512 bytes can create 128 KB and 256 KB clusters. However, the larger the cluster size the greater the potential for wasting disk space. Large cluster sizes are ideal for very large files like databases.
</blockquote></div>
</p>

<A NAME="161"><h2>The FAT32 File System</h2></A>
<p>The main benefit of FAT32 is its ability to support partitions larger than those handled by FAT16. FAT16 supports partitions up to 4 GB in size, while FAT32 supports partitions up to 2047 GB. However, Windows 2000 FAT32 implementations are limited to creating 32-GB volumes, although existing FAT32 volumes greater than 32 GB can be mounted. Except for this partition-formatting limit, the FAT32 on-disk format and features are the same on Windows 2000 as they are on Windows 95 OSR2 and Windows 98.</p>

<p>To maintain the greatest compatibility possible with existing programs, networks, and device drivers, FAT32 is implemented with as little change as possible to existing FAT16 architecture, internal data structures, application programming interfaces (APIs), and on-disk format.</p>

<p>However, because 4 bytes are now required in the table to store cluster values, many internal and on-disk data structures and published APIs have been revised or expanded. In some cases, existing APIs have been disabled to prevent legacy disk utilities from damaging the FAT32 drive. However, most programs will be unaffected by these changes. Existing FAT tools and drivers should continue to work on FAT32 partitions. MS-DOS operating system disk tools must be revised to support FAT32 drives.</p>

<A NAME="162"><h3>FAT32 Partition Structure</h3></A>
<p>The major benefit of FAT32 over FAT16 is the larger partition sizes it can support. FAT32 breaks the 4-GB partition limit by extending partition capacity. If you format a partition with FAT16, you have to specify at least a 32-KB cluster to support a 4-GB or larger partition.</p>

<p>The largest possible file for a FAT32 drive is 4 GB minus 2 bytes. FAT32 includes 4 bytes per cluster within the file allocation table. This differs from the FAT16 file system, which contains 2 bytes per cluster.</p>

<p>A FAT32 partition must have at least 65,527 clusters, and the partition cluster size cannot be increased. Figure 4.8 illustrates the structure of a FAT32 partition.</p>

<p>
<A HREF="javascript:fullSize('f04xx08gx.htm')"> <img src="images/f04xx08g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.8</b> <i>Structure of a FAT32 volume</i><!--/caption-->
</p>

<p>FAT16 and FAT32 file systems do not scale well. As the volume gets bigger, the file allocation table gets bigger. One disadvantage of a large file allocation table is that it dramatically increases the amount of time it takes the operating system to compute how much free space is on the boot volume upon reboot.</p>

<p>The file allocation table is a packed list of 32-bit entries that have a one-to-one mapping with the data clusters. The folder structure of FAT32 is used in the same way that Windows 95 implements long file names. The only difference is the addition of the cluster high-word field in directory entries that access cluster numbers.</p>

<A NAME="163"><h3>File System Limits</h3></A>
<p>The maximum size of a FAT32 volume is limited by the maximum number of FAT entries, the number of sectors per cluster, and the 32-bit sector count in the partition record. (Sectors of 512 bytes each are assumed.)</p>

<p>The following table maps the maximum partition size possible per cluster size:</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th>Cluster size</th>
			<th>Maximum volume size</th>
		</tr>

		<tr>
			<td valign="top">512 bytes</td>
			<td valign="top">127.9 GB</td>
		</tr>

		<tr>
			<td valign="top">1 KB</td>
			<td valign="top">255.9 GB</td>
		</tr>

		<tr>
			<td valign="top">2 KB</td>
			<td valign="top">511.9 GB</td>
		</tr>

		<tr>
			<td valign="top">4 KB</td>
			<td valign="top">1023.9 GB or 1 Terabyte (TB)</td>
		</tr>

		<tr>
			<td valign="top">8 KB</td>
			<td valign="top">2047 GB (2 TB)</td>
		</tr>
		
		<tr>
			<td valign="top">16 KB</td>
			<td valign="top">2047 GB (2 TB)</td>
		</tr>

		<tr>
			<td valign="top">32 KB</td>
			<td valign="top">2047 GB (2 TB)</td>
		</tr>
		
	</table>
</p>

<p>Keep in mind that Windows 2000 limits partition size to 32 GB but will mount larger FAT32 partitions created in other operating systems such as Windows 98.</p>

<A NAME="164"><h2>Lesson Summary</h2></A>
<p>The FAT file system was designed for small disks and simple folder structures. Windows 2000 supports two versions of the FAT file system: FAT16 and FAT32. A partition formatted with FAT16 is divided into 512 byte sectors and files are written to the disk in clusters, also known as allocation units. The default cluster size is determined by the partition size, and it can be as small as 4 KB, or 8 sectors, or as large as 64 KB, or 128 sectors. The main benefit of FAT32 is its ability to support partitions larger than those handled by FAT16. FAT16 supports partitions up to 4 GB in size, while FAT32 can handle partitions as large as 2047 GB in size. Windows 2000 will format a partition with FAT32 only up to 32 GB in size, but it can mount FAT32 partitions that are 2047 GB in size. FAT32 was implemented with as little change as possible to existing FAT16 architecture, internal data structures, application programming interfaces (APIs), and on-disk format.</p>

</BODY>
</HTML>



