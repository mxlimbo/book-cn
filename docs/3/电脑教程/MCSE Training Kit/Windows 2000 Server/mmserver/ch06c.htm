<HTML>
<HEAD>
<TITLE>Lesson 2: Planning Active Directory Implementation</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmserver.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06b.htm", "ch06d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="243"><h1>Lesson 2: Planning Active Directory Implementation</h1></A>
<p>Before you implement a Windows 2000 network environment, you should first consider how to implement Active Directory services. Your planning should take into account the business structure and operation of your organization, such as physical office locations, future growth and reorganization, and access to network resources. There are several aspects of the Active Directory implementation that are part of the planning process. First, you must plan the DNS namespace. The namespace includes a domain hierarchy, the global catalog, trust relationships, and replication. In addition, the namespace includes OUs, which must also be considered in the planning process. In a single domain, users and resources can be organized by using a hierarchy of OUs to reflect the structure of the company. Finally, the planning process for the Active Directory implementation must include a plan to establish sites that can effectively facilitate the management of replication and logon traffic over links in your enterprise.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b> 

<ul>
<p><li>Plan a namespace, a site, and organizational units in preparation for an Active Directory implementation</li></p>
</ul>

<b>Estimated lesson time: 75 minutes</b> 
</blockquote></div>
</p>

<A NAME="244"><h2>Planning a Namespace</h2></A>
<p>Similar to DNS, the Active Directory namespace is the top-level fully qualified domain name for a company consisting of Windows 2000 domains, domain controllers, OUs, trust relationships, and domain trees. One of the decisions you will need to make when implementing Active Directory services is whether the internal namespace (inside the firewall) or the external namespace (outside the firewall) will be the same or separate. Simply put, will the Active Directory namespace match the DNS namespace (typically the Internet domain name) that might already be defined for your organization?</p>

<p>For example, the existing, external DNS namespace for your company might be microsoft.com. You can choose an Active Directory namespace that matches microsoft.com, or you can choose a different internal namespace. Each has its advantages and disadvantages, as will be discussed later in this lesson.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
This is not to say that DNS is an external namespace only. The point is that, if the namespaces are separate, Active Directory services will be administered separately from the external namespace.
</blockquote></div>
</p>

<A NAME="245"><h3>Internal and External Namespaces</h3></A>
<p>A namespace is the top-level Active Directory domain name for an organization. To implement Active Directory services, there are primarily two choices for namespace design. The Active Directory namespace can be either the same or separate from the established, registered external DNS namespace.</p>

<p>This section provides two scenarios, one in which the namespaces are the same and another in which they are different. In the first scenario, where the internal and external namespaces are the same, the same top-level domain appears on both sides of the firewall. Private users of the corporate network and public users of the Internet see microsoft.com. In the second scenario, in which the internal and external namespaces are separate, the top-level domain name inside the firewall is different from the top-level registered DNS domain name seen by the Internet. The internal namespace is expedia.com, and the external namespace is microsoft.com.</p>

<p><b>Scenario 1: Same Internal and External Namespaces</b></p>

<p>In this scenario, the company uses the same name for the internal and external namespaces. microsoft.com is used both inside and outside the company. To implement this scenario, the following requirements must be met:</p>

<ul>
<p><li>Clients on the company's internal, private network must be able to access both internal and external servers (both sides of the firewall).</li></p>

<p><li>Clients accessing resources from the outside must not be able to access internal company resources or resolve names.</li></p>
</ul>

<p>For this scenario to work, two separate DNS zones must exist. One zone will exist outside the firewall, providing name resolution for public resources. This zone is not configured to resolve internal resources, thereby making internal company resources unreachable to external clients.</p>

<p>The challenge in this configuration is making publicly available resources accessible to internal clients, since the external DNS zone is not configured to resolve internal resources. One suggestion is to duplicate the external zone on an internal DNS for internal clients to resolve resources. If a proxy is being used, the proxy client should be configured to treat microsoft.com as an internal resource.</p>

<p><b>Advantages</b></p>

<p>Using the same name for an internal and external namespace has the following advantages:</p>

<ul>
<p><li>The tree name, microsoft.com, is consistent both on the private network and on the public Internet.</li></p>

<p><li>This scenario extends the idea of a single logon name to the public Internet, allowing users to use the same logon name both internally and externally. For example, username@microsoft.com would serve as both the logon and e-mail ID.</li></p>
</ul>

<p><b>Disadvantages</b></p>

<p>Using the same name for an internal and external namespace has the following disadvantages:</p>

<ul>
<p><li>The configuration is more complex. Proxy clients must be configured to know the difference between internal and external resources.</li></p>

<p><li>Care must be taken not to publish internal resources on the public Internet.</li></p>

<p><li>There will be duplication of efforts in managing resources. For example, maintaining duplicate zone records for internal and external name resolution.</li></p>

<p><li>Even though the namespace is the same, users will get a different view of internal and external resources.</li></p>
</ul>

<p><b>Scenario 2: Separate Internal and External Namespaces</b></p>

<p>In this scenario, the company uses separate internal and external namespaces. As a result, the names are different on either side of the firewall. Separate names are used inside and outside the corporation. microsoft.com is the name that the Internet community sees and uses. expedia.com is the name that the private network sees and uses. The two namespaces must be registered with the Internet DNS. Registering both names prevents duplication of the internal name by another public network. If the internal name is not reserved and is used by another organization, internal clients cannot distinguish between the internal name and the publicly registered DNS namespace.</p>

<p>Two zones will be established. One zone will resolve microsoft.com and the other zone will resolve expedia.com. Clients can clearly distinguish between internal and external resources.</p>

<p><b>Advantages</b></p>

<p>Using the separate names for internal and external namespaces has the following advantages:</p>

<ul>
<p><li>Based on different domain names, the difference between internal and external resources is clear.</li></p>

<p><li>There is no overlap or duplication of effort, resulting in a more easily managed environment.</li></p>

<p><li>Configuration of proxy clients is simpler since exclusion lists need to contain only expedia.com when identifying external resources.</li></p>
</ul>

<p><b>Disadvantages</b></p>

<p>Using the separate names for internal and external namespaces has the following disadvantages:</p>

<ul>
<p><li>Logon names are different from e-mail names. For example, if someone logs on as username@microsoft.com but his e-mail address is username@expedia.com, he must remember and maintain separate user names.</li></p>

<p><li>Multiple names must be registered with an Internet DNS.</li></p>
</ul>

<p><div class="tip"><blockquote><b>TIP</b><HR>
In this scenario, logon names are different by default. An administrator can use the Microsoft Management Console (MMC) to change the UPN suffix properties of users so that the user logon will match the email address of the user.
</blockquote></div>
</p>

<A NAME="246"><h3>Defining a Namespace Architecture</h3></A>
<p>In addition to determining whether or not to use similar or separate internal and external namespaces, other variables will affect the overall namespace architecture. Of major consideration is the impact that replication traffic will have over wide area network (WAN) links. Additionally, organizations and their structure change constantly. Besides having the ability to create a Windows 2000 forest, administrators must be able to change the namespace structure without great expense and by being as unobtrusive as possible. The goal is to have a namespace architecture that is scalable, can adapt to change, can distinguish between internal and external resources, and can protect company data at the same time.</p>

<p>The namespace architecture should represent the structure of the organization but simultaneously provide the administrative granularity required to manage an enterprise-wide, global network based on Active Directory services. Additionally, the design must be scalable and extensible to accommodate organizational changes and shifts in management.</p>

<p>One way to accomplish this is to have three layers of domains:</p>

<ul>
<p><li>Root domain</li></p>

<p><li>First-layer domain</li></p>

<p><li>Second-layer domain</li></p>
</ul>

<p>This structure provides a granular replication topology and the ability to limit the scope of administrators as necessary.</p>

<p><b>Root Domain</b></p>

<p>A <i>root domain</i> is the first domain in the namespace, like expedia.com. The root domain in Active Directory services maps to the company namespace. All internal domains are a part of this domain, creating a contiguous, jointed namespace in the form of a domain tree. Additionally, servers containing the namespace root will not exist on the public side of the firewall and therefore will not be visible to the Internet.</p>

<p><b>First-Layer Domains</b></p>

<p>The objective at this layer in the model is to create domain names that don't change, even in the event of internal company reorganization. The easiest way to do this is to name domains at this level based on continental, geographical, or political boundaries, for example, noamer.expedia.com or europe.microsoft.com. Additionally, this will help minimize direct service replication, since a user in North America does not have to exist in Active Directory services of a server located in Europe. However, global catalog servers still make it possible for a user in North America to find a resource in Europe as needed.</p>

<p>The trust relationships between the root and all first-layer domains make resources available to all branches of the domain tree. Therefore, a user in noamer.expedia.com can access a resource in europe.microsoft.com.</p>

<p>Domain names at this layer should be at least three characters long so that they do not conflict with the ISO 3166 standard. This is the standard that specifies two-character country codes for second-layer domains and OUs.</p>

<p>
<img src="images/cd.JPG" border="0">
</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
For a review of ISO 3166 two-letter country codes, see the Supplemental Course Materials CD-ROM (\chapt06\articles\ iso3166.txt) that accompanies this book.For the most current information on country codes, access an Internet search engine and enter the keyword ISO3166 or ISO +3166.
</blockquote></div>
</p>

<p>The assumption is that the first-layer domain is stable and does not change.</p>

<p>The following table provides suggested naming conventions:</p>

<p><table cellpadding=5 width="95%"><tr>
<th>Domain</th><th>Definition</th>
</tr><tr>
<td valign="top">CORPIT</td> <td valign="top">Company IT Headquarters</td></tr><tr>
<td valign="top">NOAMER</td> <td valign="top">United States of America and Canada</td></tr><tr>
<td valign="top">SOAMER</td> <td valign="top">Mexico, Central America, and South America</td></tr><tr>
<td valign="top">NOPAC</td> <td valign="top">Hong Kong and sites north of Hong Kong (Japan, China, Korea, Taiwan)</td></tr><tr>
<td valign="top">SOPAC</td> <td valign="top">Sites south of Hong Kong, including the India subcontinent over to but not including Afghanistan</td></tr><tr>
<td valign="top">EUROPE</td> <td valign="top">Austria, Belgium, Switzerland, Czech Republic, Denmark, Spain, Finland, Greece, Croatia, Hungary, Ireland, Italy, Holland, Norway, Poland, Portugal, Romania, Russia, Sweden, Slovakia, Slovenia</td></tr><tr>
<td valign="top">MEAST</td> <td valign="top">United Arab Emirates, Israel, Saudi Arabia, Turkey</td></tr><tr>
<td valign="top">AFRICA</td> <td valign="top">Africa</td></tr><tr>
<td valign="top">PARTNERS</td> <td valign="top">Business partners and companies to which work is outsourced</td></tr><tr>
<td valign="top">JVT</td> <td valign="top">Joint ventures</td></tr></table></p>

<p>
<div class="warning"><blockquote><b>IMPORTANT</b><hr>
These naming conventions are merely suggestions that do not conflict with the ISO 3166 naming standard. Organizations can choose any naming convention that suits their policies and needs.
</blockquote></div>
</p>

<p><b>Second-Layer Domains</b></p>

<p>Ideally, domains at this layer should be countries only and branch off of their corresponding first-layer domains. The benefit of this method is that child-level domains can be created below the second-layer domains.</p>

<p>Use the same naming convention when creating OUs within a domain. This allows an OU to be promoted to a domain, if necessary, with minimal user impact.</p>

<p>When naming sites internal to the United States, the ISO 3166 standard is <i>not</i> used. Instead use the two-letter postal codes when naming locations. The only exception to this rule is California, which conflicts with the ISO code for Canada. So, use CALIF when creating domains for California.</p>

<p>For example, usa.noamer.microsoft.com is a second-layer domain, and ny.usa.noamer.microsoft.com is a child-level domain.</p>

<A NAME="247"><h2>Planning Organizational Units</h2></A>
<p>OUs should reflect the details of the organization's business structure. Create OUs to delegate administrative control over smaller groups of users, groups, and resources. The administrative control granted can be complete (creating users, changing passwords, managing account policies, and so on) or limited (as minor as maintaining print queues). Because top-level OUs can hold additional levels of OUs, one can extend the level of detail as far as necessary. Organize these objects into a logical structure that maps to the way you work and organize your business.</p>

<p>OUs eliminate the need to provide users with administrative access at the domain level to perform tasks such as creating computer accounts and setting passwords. One can now give users administrative control at the OU level, thereby freeing domain administrators from these tasks. OUs add a level of security by allowing restricted visibility (through the use of ACLs) of published resources; users can view only those objects they have been granted access to.</p>

<p>OUs inherit security policies from the parent domain and parent OU unless they are specifically disabled.</p>

<A NAME="248"><h3>Creating the OU Structure</h3></A>
<p>It is a good idea to begin your OU design by creating an OU structure for the first domain in the namespace. Use that domain and OU structure as a model for any domains added to the enterprise. Additionally, the OU structure created should be able to facilitate future reorganizations with minimal object movement.</p>

<p>Any time an OU is created, it is important to determine who will be able to view and control certain objects and what level of administration each administrator will have over the objects. In addition, it is necessary to determine which administrators will be granted global access to certain OUs and objects, which administrators will be restricted, and what will be the extent of that restriction.</p>

<A NAME="249"><h3>OU Design Guidelines</h3></A>
<p>Use the following guidelines when creating OUs for your enterprise:</p>

<ul>
<p><li>Create OUs to delegate administration.</li></p>

<p><li>Create a logical and meaningful OU structure that allows OU administrators to complete their tasks efficiently.</li></p>

<p><li>Create OUs to apply security policies.</li></p>

<p><li>Create OUs to provide or restrict visibility of published resources from certain users.</li></p>

<p><li>Create OU structures that are relatively static. OUs also give the namespace flexibility to adapt to changing needs of the enterprise.</li></p>

<p><li>Avoid allocating too many child objects to any OU.</li></p>
</ul>

<p>As you begin to design the OU structure, remember to create OU and object names that are hierarchical, uniform, static, and general enough to use in any domain in the enterprise. Try to keep any OU from having too many child objects, because it could cause bottlenecks during search and navigation queries.</p>

<p>One method to creating the OU structure for the first domain is to name the top-level OUs, which become headers that define the more detailed OUs and objects beneath them. Another approach to creating a consistent OU structure is to start by determining the natural hierarchy of the objects. Once you have the detailed objects separated hierarchically into groups, they can be labeled with appropriate top-level OU names.</p>

<p>If there are multiple domains in the design, determine whether the OU structure can be used across all domains. If not, rethink the design.</p>

<A NAME="250"><h3>Structure the OU Hierarchy</h3></A>
<p>It is crucial to determine what concept will be used as a base for the OU hierarchy. Many organizations base their domain structure on a model that mirrors their business. The following categories provide different ways to classify your OU hierarchy.</p>

<p><b>Administration or Object-Based OUs</b></p>

<p>When the OU structure is based on the administrative model, this benefits all administrators who own the OUs. In Active Directory services, you can create OUs based on objects, such as users, computers, applications, groups, printers, security policies, and more. When administration-based OUs are created in a logical and meaningful manner, it helps administrators do their jobs quickly and easily. Under most circumstances, this would be the best way to organize OUs because it will ensure the least number of changes.</p>

<p><b>Geographical-Based OUs</b></p>

<p>You can create OUs that contain all business functions in each geographical location. Again, this will tend to be a stable structure over time. However, if you envision major changes in the company's organizational structure, consider a different basis for an OU design.</p>

<p><b>Business Function-Based OUs</b></p>

<p>If it makes sense for the organization, OUs can be created that are based on various business functions within the organization, such as marketing, IT, and operations. These functions are likely to be stable even if the specific organizations that perform them are not.</p>

<p><b>Department-Based OUs</b></p>

<p>Another approach is to create OUs that mirror a department's cost center association. This method will map to the current organization but will tend to be quite unstable as the enterprise undergoes reorganizations.</p>

<p><b>Project-Based OUs</b></p>

<p>Use this type of OU model to align a cost center with a project rather than with a department. Some organizations' business is project-driven, for example, software developers, the airline industry, and more. This is why an organization might want to create project-based OUs. This is not typically a recommended OU structure because it is not considered static. Typically, this type of OU will be a child of other more stable OUs. Remember to determine who will administer this OU.</p>

<A NAME="251"><h2>Planning a Site</h2></A>
<p>Up to this point in the lesson, you have considered the logical structure of the domain and OU. Attention to the physical design is also critical to a successful implementation of a Windows 2000 Server network supporting Active Directory services. The physical design of a Windows 2000 Server-based network is demarcated by site. A site is a combination of one or more IP subnets connected by a high-speed link. Often, a site has the same boundaries as a local area network (LAN) or a very high-bandwidth WAN like an OC3 SONET (155 Mbps) or T3 (45 Mbps) WAN.</p>

<p>The Active Directory replication engine allows you to differentiate between replication that takes place over a local network connection and replication that takes place over a low-bandwidth WAN connection. Network traffic within a site will generally be greater than traffic between sites. How you set up your sites affects Windows 2000 in two key ways:</p>

<ul>
<p><li><b>Workstation logon</b> When a user logs on, Active Directory services-enabled clients will try to find a domain controller in the same site as the user's computer to service the user's logon request and subsequent requests for network information.</li></p>

<p><li><b>Directory replication</b> The schedule and path for replication of a domain's directory can be configured differently for intersite replication, as opposed to replication within a site. Generally, set replication between sites tends to be less frequent than replication within a site.</li></p>
</ul>

<p>In Active Directory services, sites are not part of the namespace. When browsing the logical namespace, you will see computers and users grouped into domains and OUs&#8212;not sites. The site structure is kept in a separate part of the directory. Sites contain only computer objects and connection objects used to configure intersite replication.</p>

<p>Properly planned sites ensure that network links are not saturated by replication traffic, that Active Directory services stays current, and that client computers access resources which are closest to them.</p>

<p>When planning how to group subnets into sites, consider the connection speed between the subnets. Use the following guidelines when planning to combine subnets into sites:</p>

<ul>
<p><li>Combine only those subnets that share fast, inexpensive, and reliable network connections. &quot;Fast&quot; network connections have at least 512 Kbps of unused bandwidth that can be dedicated to replication traffic. It is prudent to consider much higher bandwidth connections only for a single site.</li></p>

<p><li>Configure your sites so that replication occurs at times that will not interfere with network performance.</li></p>
</ul>

<p>Domain structure and site structure are maintained separately in Active Directory services. A single domain can span multiple sites, and a single site can include multiple domains or parts of multiple domains (Figure 6.4).</p>

<p>
<A HREF="javascript:fullSize('f06xx04gx.htm')"> <img src="images/f06xx04g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 6.4</b> <i>A single domain with a single site, a single domain with multiple sites, and multiple sites with multiple domains</i><!--/caption-->
</p>

<A NAME="252"><h3>Optimizing Workstation Logon Traffic</h3></A>
<p>When planning sites, consider which domain controllers that workstations on each subnet should use. To have a particular workstation log on to a specific set of domain controllers, define the sites so that only those domain controllers are in the same site as that workstation.</p>

<A NAME="253"><h3>Optimizing Directory Replication</h3></A>
<p>When planning sites, consider where the domain controllers will be located. Because each domain controller must participate in directory replication with the other domain controllers in its domain, you must configure sites so that replication occurs at times or intervals that will not interfere with network performance.</p>

<p>The following table shows when to implement sites in branch offices based on the size of the branch office.</p>

<p><table cellpadding=5 width="95%"><tr>
<th>Workstations</th><th>Create a Site?</th><th>Notes</th>
</tr><tr>
<td valign="top">One to five</td> <td valign="top">No</td> <td valign="top">Users are authenticated across a slow link. The slow link will not be subjected to domain replication traffic.</td></tr><tr>
<td valign="top">More than five</td> <td valign="top">Yes</td> <td valign="top">Locate domain controllers locally to speed up authentication of users in the local site. Replication traffic can be set to occur on slow links at off peak times and at less frequent intervals.</td></tr></table></p>

<A NAME="254"><h2>Lesson Summary</h2></A>
<p>When preparing for the implementation of Active Directory services, you should carefully plan how you will structure the namespace, the OUs, and the sites. You will need to determine if the internal namespace and the external namespace will be the same or separate. If the namespace is the same, the same top-level domain name appears on both sides of the firewall. If the namespaces are different, the top-level domain name inside the firewall is different from the top-level domain name outside the firewall. In addition to the namespace, you must plan your OUs. The OUs should reflect the details of the organization's business structure and map to the way you work and organize your business. Your sites must also be carefully planned before you implement Active Directory services. When planning a site, combine only those subnets that share high-bandwidth, inexpensive, and reliable network connections. Sites should be configured so that replication occurs at times that will not interfere with network performance.</p>

</BODY>
</HTML>



