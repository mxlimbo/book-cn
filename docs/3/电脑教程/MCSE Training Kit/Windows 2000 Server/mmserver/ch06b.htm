<HTML>
<HEAD>
<TITLE>Lesson 1: Overview of Active Directory Services</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmserver.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06a.htm", "ch06c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="232"><h1>Lesson 1: Overview of Active Directory Services</h1></A>
<p>Active Directory services is the directory service included with Windows 2000 Server. It extends the functionality of previous Windows-based directory services and adds new features. Active Directory services is secure, distributed, partitioned, and replicated. It is designed to work well in any size installation, from a single server with a few hundred objects to thousands of servers with millions of objects. Active Directory services adds many new features that make it easy to navigate and manage large amounts of information, saving time for both administrators and end users.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b> 

<ul>
<p><li>Describe the concepts and architecture of Active Directory services</li></p>
</ul>

<b>Estimated lesson time: 40 minutes</b> 
</blockquote></div>
</p>

<A NAME="233"><h2>Introduction to Active Directory Services</h2></A>
<p>Active Directory services is completely integrated with Windows 2000 Server and offers the hierarchical view, extensibility, scalability, and distributed security required by all business customers. Active Directory services allows administrators, developers, and end users to gain access to a directory service that is seamlessly integrated with both Internet and intranet environments. Active Directory services is a critical part of the distributed system. It allows administrators and end users to use the directory service as a source of information as well as an administrative service.</p>

<p>Active Directory services integrates the Internet concept of namespace with the operating system's directory service. A <i>namespace</i> is a structured collection of information in which names can be used to symbolically represent another type of information, such as a host name representing an IP address, and in which specific rules are established that determine how names can be created and used. The integration of the concept of namespace with the directory services allows enterprises to unify and manage the multiple namespaces that now exist in the heterogeneous software and hardware environments of corporate networks. Active Directory services uses the Lightweight Directory Access Protocol (LDAP) as its core protocol and can work across operating system boundaries, integrating multiple namespaces. It can manage application-specific directories, as well as other NOS-based directories, to provide a general-purpose directory that can reduce the administrative burden and costs associated with
maintaining multiple namespaces.</p>

<p>Active Directory services is not an X.500 directory. Instead, it uses LDAP as the access protocol and supports the X.500 information model without requiring systems to host the entire X.500 overhead. The result is a high level of interoperability that supports real-world heterogeneous networks.</p>

<p>
<img src="images/cd.JPG" border="0">
</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
For information on how LDAP uses X.500, see the Supplemental Course Materials CD-ROM (\chapt01\articles\RFC 1777.txt) that accompanies this book.
</blockquote></div>
</p>

<p>Active Directory services allows a single point of administration for all published resources, such as files, peripheral devices, host connections, databases, Web access, users, services, and other objects. It uses the Internet Domain Name System (DNS) as its locator service, organizes objects in domains into a hierarchy of organizational units (OUs), and allows multiple domains to be connected to a tree structure. Administration is further simplified because there is no primary domain controller (PDC)/backup domain controller (BDC) structure, as was implemented in Windows NT Server. Instead, Active Directory services uses domain controllers only, and all domain controllers are peers. An administrator can make changes to any domain controller, and the updates will be replicated to all other domain controllers.</p>

<p>
<img src="images/cd.JPG" border="0">
</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
For further information about Active Directory features, concepts, and architecture, see the Supplemental Course Materials CD-ROM that accompanies this book. The \chapt06\articles folder includes three articles that expand on this material: Managing the Active Directory.doc, Active_Directory_Technical_Summary.doc, and Active_Directory_DS_Strategy.doc.
</blockquote></div>
</p>

<A NAME="234"><h2>Understanding Active Directory Concepts</h2></A>
<p>There are several new concepts introduced with Active Directory services. Some of these concepts might be familiar, while others have meanings that differ from traditional usage. This section describes several of these concepts, including extensible schema, the global catalog, namespace, and naming conventions.</p>

<A NAME="235"><h3>Extensible Schema</h3></A>
<p>The Active Directory schema contains a formal definition of the contents and structure of the Active Directory store, including all attributes, classes, and class properties. For each object class, the <i>schema</i> defines what attributes an instance of the class must have, what additional attributes it can have, and what object class can be a parent of the current object class.</p>

<p>Installing Active Directory services on the first domain controller in a network creates a default schema. The default schema contains definitions of commonly used objects and properties, such as users, computers, printers, and groups. The default schema also contains definitions of objects and properties that Active Directory services uses internally to function.</p>

<p>The Active Directory schema is extensible, which means that you can define new directory object types and attributes and new attributes for existing objects. The schema is implemented and stored within the Active Directory store itself (in the global catalog) and can be updated dynamically. Therefore, an application can extend the schema with new attributes and classes, and it can use the extensions immediately.</p>

<p><b>Extending the Schema</b></p>

<p>Extending the Active Directory schema is an advanced operation intended to be performed by experienced programmers and system administrators. Before modifying the schema, see Windows 2000 Server Help and the <i>Active Directory Programmer's Guide</i> at <i><a href="http://msdn.microsoft.com/developer/windows2000/adsi/actdirguide.asp" target="_window2">http://msdn.microsoft.com/developer/windows2000/adsi/actdirguide.asp</a></i>. If this URL doesn't access the Active Directory Programmer's Guide, visit <i><a href="http://msdn.microsoft.com" target="_window2">http://msdn.microsoft.com</a></i> and search for the title <i>Active Directory Programmer's Guide</i>. The <i>Active Directory Programmer's Guide</i> includes detailed information about each method of extending Active Directory schema as well as sample scripts and examples of programming code.</p>

<p>
<div class="warning"><blockquote><b>WARNING</b> <hr>
Extending the schema is a highly sensitive operation, with implications potentially throughout your network. Schema extension is best handled programmatically and only when absolutely necessary. Improper schema modifications can impair or disable Windows 2000 Server and possibly your entire network.
</blockquote></div>
</p>

<A NAME="236"><h3>Global Catalog</h3></A>
<p>The <i>global catalog</i> is the central repository of information about objects in a domain tree (a collection of domains that form a domain hierarchy) or forest (a collection of domain trees that are part of different hierarchies). Active Directory services generates the contents of the global catalog from the domains that are part of the directory via the normal replication process. The Active Directory replication system automatically builds the global catalog and generates the replication topology.</p>

<p>The global catalog is a service as well as a physical storage location that contains a replica of selected attributes of every object in the Active Directory store. The process of partial replication allows many common queries to be resolved from the global catalog without requiring a lookup in the source domain. By default, the attributes stored in the global catalog are those most frequently used in search operations (such as a user's first and last names, login name, and so forth) and those necessary to locate a full replica of the object. Consequently, you can use the global catalog to locate objects anywhere in the network without replicating all domain information between domain controllers.</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
You can use the Active Directory Schema snap-in to define which attributes are included in the global catalog replication process. This snap-in is contained in %systemroot%\system32 and is named Schmmgmt.msc. Caution should be exercised when using this tool. Only experienced programmers or advanced administrators who understand the schema and how it functions should use this tool.
</blockquote></div>
</p>

<p>When you are installing Active Directory services on the first domain controller, that domain controller is, by default, a global catalog server. A global catalog server is a domain controller that stores a copy of the global catalog. The configuration of the initial global catalog server should have the capacity to support several hundred thousand to one million objects, with the potential for growth.</p>

<p>Additional domain controllers can also be designated as global catalog servers by using the Active Directory Sites and Services snap-in. When considering which domain controllers to designate as global catalog servers, you should base the decision on the ability of the network structure to handle replication and query traffic. The more global catalog servers, the greater the replication traffic. However, the availability of additional servers can provide quicker responses to user inquiries. It is recommended that every major site in the enterprise have a global catalog server.</p>

<A NAME="237"><h3>Namespace</h3></A>
<p>Active Directory services, like all directory services, is primarily a namespace. A namespace is any bounded area in which a name can be resolved. Name resolution is the process of translating a name into some object or information that the name represents. The Active Directory namespace is based on the DNS naming scheme, which allows for interoperability with Internet technologies. An example namespace is shown in Figure 6.1.</p>

<p>
<A HREF="javascript:fullSize('f06xx01gx.htm')"> <img src="images/f06xx01g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 6.1</b> <i>Namespace diagram of a sample domain</i><!--/caption-->
</p>

<p>Using a common namespace allows you to unify and manage multiple hardware and software environments in your network. There are two types of namespaces:</p>

<ul>
<p><li><b>Contiguous namespace</b> The name of the child object in an object hierarchy always contains the name of the parent domain. A tree is a contiguous namespace.</li></p>

<p><li><b>Disjointed namespace</b> The names of a parent object and a child of the same parent object are not directly related to each other. A forest is a disjointed namespace.</li></p>
</ul>

<A NAME="238"><h3>Naming Conventions</h3></A>
<p>Every object in the Active Directory store is identified with a name. Active Directory services uses a variety of naming conventions: distinguished names, relative distinguished names, globally unique identifiers, and user principal names. Active Directory services is an LDAP-compliant directory service, which means that all access to directory objects occurs through LDAP. LDAP requires that names of directory objects are Request for Comments (RFC)-compliant, which defines the standard for object names in an LDAP directory service.</p>

<p><b>Distinguished Name</b></p>

<p>Objects are located within Active Directory domains according to a hierarchical path, which includes the labels of the Active Directory domain name and each level of container objects. Every object in the Active Directory store has a <i>distinguished name</i> (DN). The DN uniquely identifies an object and contains sufficient information for a client to retrieve the object from the directory. The DN includes the name of the domain that holds the object, as well as the complete path through the container hierarchy to the object.</p>

<p>The following example is a DN that identifies the James Smith user object in the microsoft.com domain:</p>

<p><blockquote>DC=COM/DC=Microsoft/CN=Users/CN=James Smith</blockquote></p>

<p>The delimiters and values used in the DN for James Smith are identified in the following table:</p>

<p><table cellpadding=5 width="95%"><tr>
<th>LDAP Delimiter</th><th>Value</th><th>Represents</th>
</tr><tr>
<td valign="top">DC</td> <td valign="top">COM</td> <td valign="top">Domain component</td></tr><tr>
<td valign="top">DC</td> <td valign="top">Microsoft</td> <td valign="top">Domain component</td></tr><tr>
<td valign="top">CN</td> <td valign="top">Users</td> <td valign="top">Common name</td></tr><tr>
<td valign="top">CN</td> <td valign="top">James Smith</td> <td valign="top">Common name</td></tr></table></p>

<p>Note that the Active Directory snap-in tools do not display the LDAP abbreviations (O=, DC=, CN=). These abbreviations are shown only to illustrate how LDAP recognizes the portions of the distinguished name. Some of the naming attributes described in the RFCs, such as O= for Organization Name and C= for Country Name, are not used in Active Directory services, although they are recognized by LDAP.</p>

<p>
<img src="images/cd.JPG" border="0">
</p>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
To read more about distinguished names, see the Supplemental Course Materials CD-ROM (\chapt06\articles\rfc1779.txt) that accompanies this book.
</blockquote></div>
</p>

<p><b>Relative Distinguished Name</b></p>

<p>In Active Directory services, you can search for an object even if you don't know the exact DN or if the DN has changed. This can be accomplished by querying an object's attributes. One of an object's attributes is its <i>relative distinguished name</i> (RDN), which is a part of the full DN name. In the preceding example, the RDN of the James Smith user object is CN=James Smith. The RDN of the parent object is CN=Users.</p>

<p>Active Directory services allows duplicate RDNs for objects, but no two objects with the same RDN can exist within the same OU. For example, if the Users OU contains a James Smith user account, you could not add another James Smith user to it. However, if the Users OU contains two smaller OUs, such as Managers and Sales, the Managers OU can contain a James Smith user account and the Sales OU can contain a James Smith user account because each of these accounts would have a different DN.</p>

<p><b>Globally Unique Identifier</b></p>

<p>In addition to its distinguished name, every object in the Active Directory store has a unique identity. Objects might be moved or renamed, but their identity never changes. The identity of an object is defined by a <i>globally unique identifier</i> (GUID), a 128-bit number that is assigned by the Directory System Agent (DSA) when the object is created. Unlike a distinguished name or a relative distinguished name, a GUID never changes, even if you move or rename the object. Applications can store the GUID of an object and be assured of retrieving that object regardless of its current DN.</p>

<p>In Windows NT, domain resources were associated to a security identifier (SID), which was generated within the domain. This meant that the SID was guaranteed to be unique only within the domain. A GUID is unique across all domains; you can move objects from domain to domain, and they will still have a unique identifier.</p>

<p>The GUID is stored in an attribute, objectGUID, that is present on every object. The objectGUID attribute is protected so that it cannot be altered or removed. When you store a reference to an Active Directory object in an external store (for example, a Microsoft SQL Server database), the objectGUID value should be used. Figure 6.2 shows the properties of the objectGUID attribute.</p>

<p>
<A HREF="javascript:fullSize('f06xx02gx.htm')"> <img src="images/f06xx02g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 6.2</b> <i>The objectGUID attribute as it appears in the Active Directory Schema Management snap-in</i><!--/caption-->
</p>

<p><b>User Principal Name</b></p>

<p>A <i>user principal name</i> (UPN) is a friendly name that is shorter than the DN and easier to remember. The UPN consists of a shorthand name that represents the user and usually the DNS name of the domain where the user object resides. The UPN format is the user name, the &quot;@&quot; character, plus a user principal name suffix. For example, user James Smith in the microsoft.com tree might have a UPN of username@microsoft.com. The user principal name is independent of the distinguished name of the user object, so a user object can be moved or renamed without affecting the user logon name. The user principal name is an attribute (userPrincipalName) of the security principal object.</p>

<A NAME="239"><h2>Active Directory Architecture</h2></A>
<p>The structure of Active Directory services can be broken into several primary architectural components: the data model, schema, security model, and administration model.</p>

<p><b>Data Model</b></p>

<p>The Active Directory data model is derived from the X.500 data model. The directory holds objects that represent various components of the network, and each of the objects is described by attributes. The collection of objects that can be stored in the directory is defined in the schema.</p>

<p><b>Schema</b></p>

<p>The Active Directory schema is implemented as a set of object class instances stored in the directory. The schema can be updated dynamically. That is, an application can extend the schema with new attributes and classes and can use the extensions immediately. Schema updates are accomplished by creating or modifying the schema objects stored in the directory. Like every object in the Active Directory store, schema objects are protected by access control lists (ACLs), so only authorized users may alter the schema.</p>

<p><b>Security Model</b></p>

<p>The directory is part of the Windows 2000 Trusted Computing Base and is a full participant in the Windows 2000 security infrastructure. The <i>Trusted Computing Base</i> is the set of operating system components responsible for enforcing the security policies of the operating system. ACLs protect all objects in the Active Directory store. The Windows 2000 access validation routines use the ACL to validate any attempt to access an object or attribute in the Active Directory store.</p>

<p><b>Administration Model</b></p>

<p>Authorized users perform administration in Active Directory services. A user is authorized by a higher authority to perform a specified set of actions on a specified set of object instances and object classes in some identified subtree of the directory. This is called delegated administration. Delegated administration allows granular control over who can do what and enables delegation of authority without granting elevated privileges.</p>

<p>The DSA is the process that manages the directory's physical storage. Clients use one of the supported interfaces to connect to the DSA and then search for read and write directory objects and their attributes. The DSA provides client isolation from the physical storage format of the directory data. This provides convenient access while enhancing system security.</p>

<A NAME="240"><h3>Access to Active Directory services</h3></A>
<p>Access to Active Directory services is via wire protocols. Wire protocols define the formats of messages and interactions of client and server. Various application programming interfaces (APIs) give developers access to these protocols.</p>

<p><b>Protocol Support</b></p>

<p>Active Directory services supports the following protocols:</p>

<ul>
<p><li><b>LDAP</b> The Active Directory core protocol is the LDAP. LDAP version 2 and version 3 are supported.</li></p>

<p><li><b>MAPI-RPC</b> Active Directory services supports the remote procedure call (RPC) interfaces supporting the Messaging Application Program Interface (MAPI) interfaces.</li></p>

<p><li><b>X.500</b> The Active Directory information model is derived from the X.500 information model. X.500 defines several wire protocols that Active Directory services does not implement, in part because of their dependence on the OSI network protocol:</li></p>

<ul>
<p><li>Directory Access Protocol (DAP)</li></p>

<p><li>Directory System Protocol (DSP)</li></p>

<p><li>Directory Information Shadowing Protocol (DISP)</li></p>

<p><li>Directory Operational Binding Management Protocol (DOP)</li></p>
</ul>

</ul>

<p><b>Application Programming Interfaces</b></p>

<p>Active Directory services provides powerful, flexible, and easy-to-use APIs. The availability of a rich set of APIs for the directory service encourages the development of applications and tools that make use of the directory's services.</p>

<p><b>Active Directory Service Interfaces</b></p>

<p>To make it easier to write directory-enabled applications that access Active Directory services and other LDAP-enabled directories, Microsoft developed Active Directory Service Interfaces (ADSI). ADSI is a set of extensible, easy-to-use programming interfaces that can be used to write applications to access and manage the following:</p>

<ul>
<p><li>Active Directory services</li></p>

<p><li>Any LDAP-based directory</li></p>

<p><li>Other directory services in a customer's network, including Novell Directory Services (NDS)</li></p>
</ul>

<p>ADSI is part of the Open Directory Services Interfaces (ODSI) and Windows Open Services Architecture (WOSA). ADSI objects are available for Windows NT 4.0, Novell NetWare 3.<i>x</i> and 4.<i>x,</i> and Active Directory services, as well as any other directory service that supports the LDAP protocol.</p>

<p>ADSI extracts the capabilities of directory services from different network providers to present a single set of directory service interfaces for managing network resources. This greatly simplifies the development of distributed applications as well as the administration of distributed systems. Developers and administrators use this single set of directory service interfaces to enumerate and manage the resources in a directory service, no matter which network environment contains the resource. Thus, ADSI makes it easier to perform common administrative tasks, such as adding new users, managing printers, and locating resources throughout the distributed computing environment. ADSI also makes it easy for developers to make their applications directory-enabled.</p>

<p>ADSI objects are designed to meet the needs of three main audiences:</p>

<ul>
<p><li><b>Developers</b> Typically, this audience will use ADSI with a compiled language such as C++, although Microsoft Visual Basic can be used for prototyping the application. For example, a developer could write an application to manage multiple directories, network printing, back up databases, and so on.</li></p>

<p><li><b>System administrators</b> Typically, this audience will access ADSI through a scripting language, such as Microsoft Visual Basic, although C/C++ can also be used to enhance performance. For example, with Active Directory services an administrator could write a script to add 100 new users to the system and establish them as members of selected security groups.</li></p>

<p><li><b>Users</b> Like the system administrators, this audience will access ADSI through a scripting language. For example, a user might write a script to locate all print jobs in a group of print queues and display the status of each.</li></p>
</ul>

<p><b>LDAP C API</b></p>

<p>The LDAP C API provides a lowest common denominator solution for developers who need their applications to work on many different client types. Similarly, existing LDAP applications will run against Active Directory services with little or no modification beyond extending the application to support object types unique to Active Directory services. Developers of LDAP applications are encouraged to migrate to ADSI, which supports any LDAP-enabled directory services.</p>

<p><b>Windows Messaging API</b></p>

<p>Active Directory services provides support for MAPI so that legacy MAPI applications will continue to work with Active Directory services. However, developers of new applications are encouraged to use ADSI to build their directory-enabled applications.</p>

<p><b>Virtual Containers</b></p>

<p>Active Directory services supports virtual containers, which allow any LDAP-compliant directory to be accessed transparently via Active Directory services. The virtual container is implemented via location information stored in the Active Directory store. The location information describes where in the Active Directory store the foreign directory should appear and contains the DNS name of a server holding a copy of the actual directory and the DN at which to begin search operations in the foreign DS.</p>

<A NAME="241"><h3>Directory Service Architecture</h3></A>
<p>Active Directory functionality can be illustrated as a layered architecture in which the layers represent the server processes that provide directory services to client applications (see Figure 6.3). The Active Directory architecture consists of three service layers and several interfaces and protocols that work together to provide directory services. The three service layers (DSA, Database Layer, and Extensible Storage Engine) accommodate the different types of information that are required to locate records in the directory database. Above the service layers in this architecture are the protocols and APIs that enable communication between clients and the directory service.</p>

<p>
<A HREF="javascript:fullSize('f06xx03gx.htm')"> <img src="images/f06xx03g.jpg" border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 6.3</b> <i>Active Directory services architecture</i><!--/caption-->
</p>

<p>Active Directory services architecture includes the following key service components:</p>

<ul>
<p><li><b>Directory System Agent (DSA)</b> Builds a hierarchy from the parent-child relationships stored in the directory. Provides APIs for directory access calls.</li></p>

<p><li><b>Database Layer</b> Provides an abstraction layer between applications and the database. Calls from applications are never made directly to the database; they go through the database layer.</li></p>

<p><li><b>Extensible Storage Engine (ESE)</b> Communicates directly with individual records in the directory data store on the basis of the object's RDN attribute.</li></p>

<p><li><b>Data store (the database file Ntds.dit)</b> This file is manipulated only by the Extensible Storage Engine (ESE) database engine. You can administer the file by using the Ntdsutil tool.</li></p>
</ul>

<p>
<div class="note"><blockquote><b>NOTE</b> <hr>
Ntdsutil.exe is installed in %systemroot%\system32 when Windows 2000 Server is installed.
</blockquote></div>
</p>

<p><b>The Interfaces</b></p>

<p>Clients obtain access to Active Directory services by using mechanisms that are supported by the DSA. The following table provides a description of each of these mechanisms:</p>

<p><table cellpadding=5 width="95%"><tr>
<th>Interface</th><th>Description</th>
</tr><tr>
<td valign="top">LDAP</td> <td valign="top">Provides the API for LDAP clients and exposes the ADSI so that additional applications can be written that can talk to the Active Directory services. Clients that support LDAP use it to connect to the directory system agent. Active Directory services supports LDAP version 3 and LDAP version 2. Windows 2000 clients, as well as Windows 9<i>x</i> clients that have the Active Directory client components installed, use LDAP version 3 to connect to the DSA. ADSI is a means of abstracting the LDAP API; however, only LDAP is used by Active Directory services.</td></tr><tr>
<td valign="top">REPL</td> <td valign="top">Used by the replication service to facilitate Active Directory replication via RPC over IP or Simple Mail Transport Protocol (SMTP), a part of the TCP/IP protocol suite. SMTP can be used only for intersite replication (between sites); RPC over IP replication is used for both intrasite and intersite replication.</td></tr><tr>
<td valign="top">SAM</td> <td valign="top">Provides down-level compatibility to facilitate communication between Windows 2000 and Windows NT 4.0 domains. Windows clients that use Windows NT 4.0 or earlier use the SAM interface to connect to the DSA. Replication from backup domain controllers in a mixed-mode domain goes through the SAM interface as well.</td></tr><tr>
<td valign="top">MAPI</td> <td valign="top">Legacy MAPI clients, such as Microsoft Outlook messaging and collaboration client, connect to the DSA by using the MAPI RPC address book provider interface.</td></tr></table></p>

<p><b>Directory System Agent</b></p>

<p>The DSA is the Active Directory process that runs on each domain controller and manages all the directory service functions. This process manages the directory's physical storage. Clients use one of the supported interfaces to connect to the DSA and then search for read and write directory objects and their attributes. The DSA provides client isolation from the physical storage format of the directory data.</p>

<p>The DSA provides access to the store, which is the database file containing directory information located on a hard disk. DSA is an X.500 term that describes the server-side process that creates an instance of a directory service, that is, applications binding to a DSA.</p>

<p>The DSA layer exposes interfaces to support the following set of core operations:</p>

<p><b>Object Identification</b></p>

<p>Every object in the Active Directory store has a permanent GUID associated with a string form of the object name. The object name is not permanent; it can be changed. All permanent references to the object are kept in terms of the GUID; the object name is used for hierarchy navigation and for display. The DSA maintains the GUID association with an object when the object's DN changes.</p>

<p><b>Transaction Processing</b></p>

<p>Transactions are processed automatically. A write request either commits, and all of its effects are durable, or it fails before completion and has no effect. Transactions are written synchronously to the transaction log file and then to the database.</p>

<p><b>Schema Enforcement of Updates</b></p>

<p>The duplication and synchronization of directory information is known as <i>multimaster replication</i>. In a multimaster system, a change to a schema object in one replica might conflict with existing objects in that replica and also with objects in other replicas. The schema is a formal definition of every object class that can be created in the directory, the attributes of each object class, and the possible parents for every object class. In Windows 2000, schema change is a <i>single-master operation</i>, which means that any change you make on the master is updated on all other replicas. Replicated updates do not perform any schema checks. Making the replicas of an object consistent with one another is the primary goal; making them consistent with a changing schema is secondary.</p>

<p><b>Access Control Enforcement</b></p>

<p>The DSA enforces security limitations in the directory. The DSA layer reads SIDs on the access token.</p>

<p><b>Support for Replication</b></p>

<p>The DSA contains the hooks for replication notifications. All object updates ultimately must go through the appropriate function for the directory service to work properly.</p>

<p><b>Referrals</b></p>

<p>DSA manages the directory hierarchy information (referred to as knowledge), that it receives from the database layer. DSA is responsible for cross-references of Active Directory domain objects up and down the hierarchy and also out to other domain hierarchies.</p>

<p><b>Database Layer</b></p>

<p>The database layer provides an object view of database information by applying schema semantics to database records, thereby isolating the upper layers of the directory service from the underlying database system. The database layer is an internal interface that is not exposed to the public. No database access calls are made directly to the ESE; instead, all database access is routed through the database layer.</p>

<p>Active Directory services provides a hierarchical namespace. Each object is uniquely identified in the database by its individual naming attribute, called the RDN. The RDN and the chain of successive parent object names make up the object's DN. The database stores the RDN for each object as well as a reference to the parent object. The database layer follows these parent references and concatenates the successive RDNs to form DNs.</p>

<p>A major function of the database layer is to translate each DN into an integer structure called the DN tag, which is used for all internal accesses. The database layer guarantees the uniqueness of the DN tag for each database record.</p>

<p>All data that describes an object is held as a set of attributes, which are stored as columns in the database. The database layer is responsible for the creation, retrieval, and deletion of individual records, attributes within records, and values within attributes. To carry out these functions, the database layer uses the schema cache (an in-memory structure in the DSA) to get information about the attributes that it needs.</p>

<p><b>Extensible Storage Engine</b></p>

<p>Active Directory services is implemented on top of an Indexed Sequential Access Method (ISAM) table manager. An earlier version of this table manager, called the JET database, is used by Microsoft Exchange Server version 5.5 client-server messaging and groupware, the File Replication Service, the security configuration editor, the certificate server, Windows Internet Name Service (WINS), and various other Windows components. Windows 2000 has a new and improved version of the JET database, the ESE.</p>

<p>The ESE (Esent.dll) implements a transacted database system that uses log files to ensure that committed transactions are indeed safe. Thus, the directory service uses both data files (Ntds.dit) and log files. By default, Esent.dll and Ntds.dit are stored in the %systemroot%\system32 folder.</p>

<p>The ESE stores all Active Directory objects. The ESE can support a database of up to 16 TB in size, which can theoretically hold many millions of objects per domain.</p>

<p>The ESE is well suited to the storage needs of Active Directory services:</p>

<ul>
<p><li>The ESE update operations are transacted for stability and integrity across system failures.</li></p>

<p><li>The ESE handles sparse rows well, that is, rows in which many of the properties do not have values.</li></p>
</ul>

<p>Active Directory services comes with a predefined schema that defines all the attributes required and allowed for a given object. The ESE reserves storage only for the space used&#8212;that is, only for the attributes assigned to an object, not for all possible attributes. For example, if a user object already has 50 attributes defined in the schema and you create a user with only four attributes; storage space is allocated only for those four attributes. If more attributes are added later, more storage is allocated for them.</p>

<p>Also, the ESE is able to store attributes that can have multiple values. For example, the database can store multiple phone numbers for a single user without requiring a different phone number attribute for each phone number.</p>

<p>Active Directory services is a functional superset of the Exchange Server directory service; it offers additional functionality, such as rename-safe objects, a dynamically extensible schema, and per-attribute replication and reconciliation. Esent.dll implements the search and retrieval functionality of the underlying database.</p>

<A NAME="242"><h2>Lesson Summary</h2></A>
<p>Active Directory services offers the hierarchical view, extensibility, scalability, and distributed security required by all business customers. Active Directory services integrates the Internet concept of namespace with the operating system's directory service. It uses the LDAP as its core protocol and can work across operating system boundaries, integrating multiple namespaces. The Active Directory schema contains a formal definition of the contents and structure of the Active Directory store, including all attributes, classes, and class properties. The global catalog, which is the central repository of information about objects in a tree or a forest, is a service and a physical storage location that contains a replica of selected attributes of every object in the Active Directory store. Active Directory services, like all directory services, is primarily a namespace, and every object in the Active Directory store is identified with a name. The structure of Active Directory services can be broken into several primary architectural components, namely the data model, schema, security model, and administration model. Access to Active Directory services is via wire protocols that define the formats of messages and interactions of client and server. Active Directory architecture consists of three service layers and several interfaces and protocols that work together to provide directory services.</p>

</BODY>
</HTML>



