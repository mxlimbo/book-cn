<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Memory Paging</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>

<A NAME="234"><H2>Memory Paging</H2></A><P>
Each process is allocated a unique virtual address space that is divided into equal blocks called <I>pages</I>. Code and data are moved in pages from physical memory to the swap file on the hard disk. As the data is needed by a process, it is paged back into RAM. This process is called <I>demand</I> <I>paging</I>.
<P>
The Memory Pager maps virtual addresses from the process space to physical pages in memory. This hides the physical organization of memory from the process threads to ensure that the thread can access the memory of its process as needed, but not the memory belonging to other processes. As shown in Figure 5.2, the virtual memory (shown on the left) of a thread process is much simpler than the real arrangement of pages in physical memory.
<P>
<A HREF="javascript:fullSize('F05XX02x.htm')"> <img src="F05XX02.JPG" width=360 height=265 border=0 ALT = "Click to view at full size."> </A>
<P>
<CAPTION><b>Figure 5.2</b><I> Memory mapping with the Memory Pager</I></CAPTION>
<P>
Windows&#160;98 uses the 32-bit capabilities of the processor to support a flat, linear memory model for 32-bit operating system functionality and Win32-based applications. A linear addressing model simplifies the development process for application vendors, and removes performance penalties imposed by the memory architecture implemented in 16-bit operating environments such as MS-DOS and Windows 3.1<I>x</I>.
<P>
With this addressing model, Windows&#160;98 allows full use of the 4&#160;GB of addressable memory space for all 32-bit operating system components and applications. Each 32-bit application can access up to 2&#160;GB of addressable memory space, which is large enough to support even the largest desktop application.
<P>
<A NAME="235"><H3>Support for MS-DOS Mode</H3></A><P>
While most MS-DOS-based applications run well in Windows&#160;98, and can run concurrently with other Win32-based and Win16-based applications, a small number of MS-DOS-based applications require exclusive access to system resources in order to run. In this case, the Virtual Memory Manager creates an exclusive operating environment for the application called <I>MS-DOS Mode</I>.
<P>
When an MS-DOS-based application runs in MS-DOS Mode, no other applications or processes are allowed to compete for system resources&#151;all resources are at the exclusive access of the MS-DOS-based application.
<P>
<IMG SRC="F05XX03.GIF" width=347 height=379 BORDER="0">
<P>
<CAPTION><B>Figure 5.3</B> <I>Running an application in MS-DOS Mode</I></CAPTION>
<P>
If you have a shortcut to an MS-DOS-based application that you want to run in MS-DOS Mode, perform the following procedure:
<P>
<OL>
<LI>	Right-click on the shortcut.
<P>
<LI>	Click the <B>Program</B> tab, and then click <B>Advanced</B>.
<P>
<LI>	Put a check mark next to the<B> MS-DOS mode</B> option.
<P>
In this dialog you can also modify configuration settings and toggle the MS-DOS Mode warning option, as illustrated in Figure 5.3.
<P>
<LI>	Click <B>OK</B> to close the Advanced Program Settings dialog box.
<P>
<LI>	Click <B>OK</B> to close the shortcut's Properties window.
</OL>
<P>
</BODY>
</HTML>





