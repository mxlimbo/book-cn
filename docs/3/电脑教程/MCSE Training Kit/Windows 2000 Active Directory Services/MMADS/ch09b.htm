<html>
<head>
<title>Lesson 1: Understanding NTFS Permissions</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09a.htm", "ch09c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="411"><h1>Lesson 1: Understanding NTFS Permissions</h1></A>
<p>NTFS permissions are rules associated with objects that regulate which users can gain access to an object and in what manner. This lesson introduces standard NTFS folder and file permissions. It also explores the effects of combining user account and group permissions with file and folder permissions.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li> Define standard NTFS folder and file permissions</li></p>

<p><li> Describe the result when multiple NTFS permissions are applied to a resource</li></p>

<p><li> Describe the result when you combine user account and group permissions for a resource</li></p>
</ul>

<p><b>Estimated lesson time: 10 minutes</b></p>
</blockquote></div>
</p>

<A NAME="412"><h2>NTFS Permissions</h2></A>
<p>Use NTFS permissions to specify which users and groups can gain access to files and folders, and what they can do with the contents of the file or folder. NTFS permissions are only available on NTFS volumes. NTFS permissions are not available on volumes that are formatted with the file allocation table (FAT) or FAT32 file systems. NTFS security is effective whether a user gains access to the file or folder at the computer or over the network. The permissions you assign for folders are different from the permissions you assign for files.</p>

<A NAME="413"><h2>NTFS Folder Permissions</h2></A>
<p>You assign folder permissions to control the access that users have to folders and to the files and subfolders that are contained within the folder.</p>

<p>Table 9.1 lists the standard NTFS folder permissions that you can assign and the type of access that each provides.</p>

<p><b>Table 9.1</b> <i>NTFS Folder Permissions</i></p>

<p>
<table cellpadding=5 width="95%">
<tr>
<th>NTFS Folder Permission </th>
<th>Allows the User To</th></tr>

<tr><td valign="top">Full Control</td>
<td valign="top">Change permissions, take ownership, and delete subfolders and files, plus perform actions permitted by all other NTFS folder permissions</td></tr>

<tr><td valign="top">Modify</td>
<td valign="top">Delete the folder plus perform actions permitted by the Write permission and the Read &amp; Execute permission</td></tr>

<tr><td valign="top">Read &amp; Execute</td>
<td valign="top">Move through folders to reach other files and folders, even if the users do not have permission for those folders, and perform actions permitted by the Read permission and the List Folder Contents permission</td></tr>

<tr><td valign="top">List Folder Contents</td>
<td valign="top">See the names of files and subfolders in the folder</td></tr>

<tr><td valign="top">Read</td>
<td valign="top">See files and subfolders in the folder and view folder ownership, permissions, and attributes (such as Read-only, Hidden, Archive, and System)</td></tr>

<tr><td valign="top">Write</td>
<td valign="top">Create new files and subfolders within the folder, change folder attributes, and view folder ownership and permissions</td></tr>
</table>
</p>

<p>You can deny folder permission to a user account or group. To deny all access to a user account or group for a folder, deny the Full Control permission.</p>

<A NAME="414"><h2>NTFS File Permissions</h2></A>
<p>You assign file permissions to control the access that users have to files. Table 9.2 lists the standard NTFS file permissions that you can assign and the type of access that each provides.</p>

<p><b>Table 9.2</b> <i>NTFS File Permissions</i></p>

<p><table cellpadding=5 width="95%">
<tr><th>NTFS File Permission</th>
<th>Allows the User To</th></tr>

<tr><td valign="top">Full Control</td>
<td valign="top">Change permissions and take ownership, plus perform the actions permitted by all other NTFS file permissions</td></tr>

<tr><td valign="top">Modify</td>
<td valign="top">Modify and delete the file plus perform the actions 
permitted by the Write permission and the Read &amp; 
Execute permission</td></tr>

<tr><td valign="top">Read &amp; Execute</td>
<td valign="top">Run applications plus perform the actions permitted by the Read permission</td></tr>

<tr><td valign="top">Read</td>
<td valign="top">Read the file, and view file attributes, ownership, and permissions</td></tr>

<tr><td valign="top">Write</td>
<td valign="top">Overwrite the file, change file attributes, and view file ownership and permissions</td></tr>
</table></p>

<A NAME="415"><h2>Access Control List</h2></A>
<p>NTFS stores an <i>access control list</i> (ACL) with every file and folder on an NTFS volume. The ACL contains a list of all user accounts and groups that have been granted access for the file or folder, as well as the type of access that they have been granted. When a user attempts to gain access to a resource, the ACL must contain an entry, called an <i>access control entry</i> (ACE), for the user account or a group to which the user belongs. The entry must allow the type of access that is requested (for example, Read access) for the user to gain access. If no ACE exists in the ACL, the user cannot gain access to the resource.</p>

<A NAME="416"><h2>Multiple NTFS Permissions</h2></A>
<p>You can assign multiple permissions to a user account by assigning permissions for a resource to an individual user account and to each group of which the user is a member. You need to understand the rules and priorities that are associated with how NTFS assigns and combines multiple permissions. You also need to understand NTFS permission inheritance.</p>

<A NAME="417"><h3>Permissions Are Cumulative</h3></A>
<p>A user's <i>effective permissions</i> for a resource are the sum of the NTFS permissions that you assign to the individual user account and to all of the groups to which the user belongs. If a user has Read permission for a folder and is a member of a group with Write permission for the same folder, the user has both Read and Write permission for that folder.</p>

<A NAME="418"><h3>File Permissions Override Folder Permissions</h3></A>
<p>NTFS file permissions take priority over NTFS folder permissions. A user with access to a file will be able to gain access to the file even if he or she does not have access to the folder containing the file. A user can gain access to the files for which he or she has permissions by using the full Universal Naming Convention (UNC) or local path to open the file from its respective application, even though the folder in which it resides will be invisible if the user has no corresponding folder permission. In other words, if you do not have permission to access the folder containing the file you want to access, you must know the full path to the file to access it. Without permission to access the folder, you cannot see the folder, so you cannot browse for the file you want to access.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Traverse Folder/Execute File special permission allows or denies moving through folders to reach other files or folders, even if the user has no permissions for the traversed folders. This permission takes effect only when the group or user is not granted the Bypass Traverse Checking user right in the Group Policy snap-in. For more information on special permissions, see Lesson 3. For more information on user rights, see <A HREF="ch13a.htm">Chapter 13</A>, &quot;Administering a Security Configuration.&quot;</blockquote></div>
</p>

<A NAME="419"><h3>Deny Overrides Other Permissions</h3></A>
<p>You can deny permission to a user account or group for a specific file, although this is not the recommended way to control access to resources. Denying permission overrides all instances where that permission is allowed. Even if a user has permission to gain access to the file or folder as a member of a group, denying permission to the user blocks any other permission that the user might have (see Figure 9.1).</p>

<p>
<A HREF="javascript:fullSize('09wtk01x.htm')"> <img src="images/09wtk01.JPG" width=404 height=225 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.1</b> <i>Multiple NTFS permissions</i><!-- /caption -->
</p>


<p>In Figure 9.1, User1 has Read permission for FolderA and is a member of Group A and Group B. Group B has Write permission for FolderA. Group A has been denied Write permission for File2.</p>

<p>User1 can read and write to File1. The user can also read File2, but she cannot write to File2 because she is a member of Group A, which has been denied Write permission for File2.</p>

<A NAME="420"><h2>NTFS Permissions Inheritance</h2></A>
<p>By default, permissions that you assign to the parent folder are inherited by and propagated to the subfolders and files that are contained in the parent folder. However, you can prevent permissions inheritance, as shown in Figure 9.2.</p>

<p>
<A HREF="javascript:fullSize('09wtk02x.htm')"> <img src="images/09wtk02.JPG" width=404 height=309 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.2</b> <i>Permissions inheritance</i><!-- /caption -->
</p>


<A NAME="421"><h3>Understanding Permissions Inheritance</h3></A>
<p>Files and subfolders can inherit permissions from their parent folder. Whatever permissions you assign to the parent folder can also apply to subfolders and files that are contained within the parent folder, depending on the inheritance option set for a given object. When you assign NTFS permissions to give access to a folder, you assign permissions for the folder and for any existing files and sub folders, as well as any new files and subfolders that are created in the folder.</p>

<A NAME="422"><h3>Preventing Permissions Inheritance</h3></A>
<p>You can prevent permissions that are assigned to a parent folder from being 
inherited by subfolders and files that are contained within the folder by setting an inheritance option set for a given object. That is, the subfolders and files will not inherit permissions that have been assigned to the parent folder containing them.</p>

<p>If you prevent permissions inheritance for a folder, that folder becomes the top parent folder. Permissions assigned to this folder will be inherited by the subfolders and files that it contains.</p>

<A NAME="423"><h2>Lesson Summary</h2></A>
<p>In this lesson you learned how NTFS permissions are used to specify which users and groups can gain access to files and folders, and what these permissions allow users to do with the contents of the files or folders. NTFS permissions are only available on NTFS volumes. You also learned that the folder permissions are Full Control, Modify, Read &amp; Execute, List Folder Contents, Read, and Write. The file permissions are similar to the folder permissions. The file permissions are Full Control, Modify, Read &amp; Execute, Read, and Write.</p>

<p>You learned about applying NTFS permissions. NTFS stores an ACL with every file and folder on an NTFS volume. The ACL contains a list of all user accounts and groups that have been granted access for the file or folder, as well as the type of access that they have been granted.</p>

<p>You also learned that you can assign multiple permissions to a user account by assigning permissions to the individual user account and to each group of which the user is a member. You learned that NTFS file permissions take priority over NTFS folder permissions.</p>

<p>Finally, you learned how permissions that you assign to the parent folder are 
inherited by and propagated to the subfolders and files that are contained in the parent folder by setting an inheritance option set for a given object. When permissions inheritance is prevented for a folder, the folder at which you prevent inheritance becomes the new parent folder. Permissions assigned to this folder will be inherited by the subfolders and files that are contained within it. Permissions inheritance can also be prevented for a file.</p>

</BODY>
</HTML>







