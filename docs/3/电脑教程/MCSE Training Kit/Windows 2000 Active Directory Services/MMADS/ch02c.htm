<html>
<head>
<title>Lesson 2: Understanding Active Directory Concepts</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch02b.htm", "ch02d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="86"><h1>Lesson 2: Understanding Active Directory Concepts</h1></A>
<p>There are several new concepts introduced with Active Directory, including the global catalog, replication, trust relationships, DNS namespaces, and naming conventions. It is important that you understand the meaning of these concepts as applied to Active Directory.</p>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li> Explain the purpose of the global catalog in Active Directory</li></p>

<p><li> Explain Active Directory replication</li></p>

<p><li> Explain the security relationships between domains in a tree (trusts)</li></p>

<p><li> Describe the DNS namespace used by Active Directory</li></p>

<p><li> Describe the naming conventions used by Active Directory</li></p>
</ul>

<b>Estimated lesson time: 20 minutes</b>
</blockquote></div></p>

<A NAME="87"><h2>Global Catalog</h2></A>
<p>The global catalog is the central repository of information about objects in a tree or forest, as shown in Figure 2.6. By default, a global catalog is created automatically on the initial domain controller in the forest, known as the <i>global catalog server.</i> It stores a full replica of all object attributes in the directory for its host domain and a partial replica for all object attributes contained in the directory of every domain in the forest. The partial replica stores attributes most frequently used in search operations (such as a user's first and last names, logon name, and so on). Object attributes replicated to the global catalog inherit the same permissions as in source domains, ensuring that data in the global catalog is secure.</p>

<p>
<A HREF="javascript:fullSize('02wtk06x.htm')"> <img src="images/02wtk06.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.6</b> <i>The global catalog is the central repository of information</i><!-- /caption -->
</p>


<p>The global catalog performs two key directory roles:</p>

<ul>
<p><li> It enables network logon by providing universal group membership information to a domain controller when a logon process is initiated.</li></p>

<p><li> It enables finding directory information regardless of which domain in the forest actually contains the data.</li></p>
</ul>

<p>When a user logs on to the network, the global catalog provides universal group membership information for the account to the domain controller processing the user logon information. If there is only one domain controller in the domain, the domain controller and the global catalog are the same server. If there are multiple domain controllers in the network, the global catalog is the domain controller configured as such. If a global catalog is not available when a user initiates a 
network logon process, the user is only able to log on to the local computer.</p>

<p>
<div class="warning"><blockquote><b>IMPORTANT</b><hr>
If a user is a member of the Domain Admins group, he or she is able to log on to the network even when the global catalog is not available.</blockquote></div>
</p>

<p>The global catalog is designed to respond to user and programmatic queries about objects anywhere in the domain tree or forest with maximum speed and minimum network traffic. Because a single global catalog contains information about all objects in all domains in the forest, a query about an object can be 
resolved by a global catalog in the domain in which the query is initiated. Thus, finding information in the directory does not produce unnecessary query traffic across domain boundaries.</p>

<p>You can optionally configure any domain controller or designate additional 
domain controllers as global catalog servers. When considering which domain controllers to designate as global catalog servers, base your decision on the ability of your network structure to handle replication and query traffic. However, the availability of additional servers can provide quicker responses to user inquiries, as well as redundancy. It is recommended that every major site in your enterprise have at least one global catalog server.</p>

<A NAME="88"><h2>Replication</h2></A>
<p>Users and services should be able to access directory information at any time from any computer in the domain tree or forest. Replication ensures that changes to a domain controller are reflected in all domain controllers within a 
domain. Directory information is replicated to domain controllers both within and among sites.</p>

<A NAME="89"><h3>What Information Is Replicated</h3></A>
<p>The information stored in the directory is partitioned into three categories. Each of these information categories is referred to as a <i>directory partition.</i> These 
directory partitions are the units of replication. The following information is 
contained in each directory:</p>

<ul>
<p><li> <b>Schema information.</b> This defines the objects that can be created in the directory and what attributes those objects can have. This information is common to all domains in the domain tree or forest.</li></p>

<p><li> <b>Configuration information.</b> This describes the logical structure of your deployment, containing information such as domain structure or replication topology. This information is common to all domains in the domain tree or forest.</li></p>

<p><li> <b>Domain data.</b> This describes all of the objects in a domain. This data is domain-specific and is not distributed to any other domains. For the purpose of finding information throughout the domain tree or forest, a subset of the properties for all objects in all domains is stored in the global catalog.</li></p>
</ul>

<p>Schema and configuration information is replicated to all domain controllers in the domain tree or forest. All of the domain data for a particular domain is replicated to every domain controller in that domain. All of the objects in every domain, and a subset of the properties of all objects in a forest, are replicated to the global catalog.</p>

<p>A domain controller stores and replicates:</p>

<ul>
<p><li> The schema information for the domain tree or forest.</li></p>

<p><li> The configuration information for all domains in the domain tree or forest.</li></p>

<p><li> All directory objects and properties for its domain. This data is replicated to any additional domain controllers in the domain. For the purpose of finding information, a subset of the properties of all objects in the domain is replicated to the global catalog.</li></p>
</ul>

<p>A global catalog stores and replicates:</p>

<ul>
<p><li> The schema information for a forest</li></p>

<p><li> The configuration information for all domains in a forest</li></p>

<p><li> A subset of the properties for all directory objects in the forest (replicated between global catalog servers only)</li></p>

<p><li> All directory objects and all their properties for the domain in which the global catalog is located</li></p>
</ul>

<p><div class="caution"><blockquote><b>CAUTION</b><HR>
Extensions to schema can have disastrous effects on large networks due to full synchronization of all of the domain data.</blockquote></div></p>

<A NAME="90"><h3>How Replication Works</h3></A>
<p>Active Directory replicates information within a site more frequently than across sites, balancing the need for up-to-date directory information with the limitations imposed by available network bandwidth.</p>

<p><b>Replication Within a Site</b></p>

<p>Within a site, Active Directory automatically generates a topology for replication among domain controllers in the same domain using a ring structure. The topology defines the path for directory updates to flow from one domain controller to another until all domain controllers receive the directory updates (see Figure 2.7).</p>

<p>
<A HREF="javascript:fullSize('02wtk07x.htm')"> <img src="images/02wtk07.JPG" width=404 height=338 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.7</b> <i>Replication topology</i><!-- /caption -->
</p>


<p>The ring structure ensures that there are at least two replication paths from one domain controller to another; if one domain controller is down temporarily, replication still continues to all other domain controllers.</p>

<p>Active Directory periodically analyzes the replication topology within a site to ensure that it is still efficient. If you add or remove a domain controller from the network or a site, Active Directory reconfigures the topology to reflect the change.</p>

<p><b>Replication Between Sites</b></p>

<p>To ensure replication between sites, you must customize how Active Directory replicates information using site links to represent network connections. Active Directory uses the network connection information to generate connection 
objects that provide efficient replication and fault tolerance.</p>

<p>You provide information about the replication protocol used, cost of a site link, times when the link is available for use, and how often the link should be used. Active Directory uses this information to determine which site link will be used to replicate information. Customizing replication schedules so replication occurs during specific times, such as when network traffic is light, will make replication more efficient.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
When operating in Native Mode, Windows 2000 domain controllers do not replicate with pre-Windows 2000 domain controllers.</blockquote></div>
</p>

<A NAME="91"><h2>Trust Relationships</h2></A>
<p>A <i>trust relationship</i> is a link between two domains in which the trusting domain honors the logon authentication of the trusted domain. Active Directory supports two forms of trust relationships:</p>

<ul>
<p><li> <b>Implicit two-way transitive trust.</b> A relationship between parent and child domains within a tree and between the top-level domains in a forest. This is the default; trust relationships among domains in a tree are established and maintained implicitly (automatically). Transitive trust is a feature of the Kerberos authentication protocol, which provides the distributed authentication and authorization in Windows 2000.</li></p>

<p>For example, in Figure 2.8 a Kerberos transitive trust simply means that if 
Domain A trusts Domain B, and Domain B trusts Domain C, then Domain A trusts Domain C. As a result, a domain joining a tree immediately has trust 
relationships established with every domain in the tree. These trust relationships make all objects in the domains of the tree available to all other domains in the tree.</p>

<p>Transitive trust between domains eliminates the management of interdomain trust accounts. Domains that are members of the same tree automatically participate in a transitive, bidirectional trust relationship with the parent domain. As a result, users in one domain can access resources to which they have been granted permission in all other domains in a tree.</p>

<p>
<A HREF="javascript:fullSize('02wtk08x.htm')"> <img src="images/02wtk08.JPG" width=404 height=252 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.8</b> <i>Active Directory supports two types of trust relationships</i><!-- /caption -->
</p>


<p><li> <b>Explicit one-way nontransitive trust.</b> A relationship between domains that are not part of the same tree. A nontransitive trust is bounded by the two domains in the trust relationship and does not flow to any other domains in the forest. In most cases, you must explicitly (manually) create nontransitive trusts. For example, in Figure 2.8, a one-way, nontransitive trust is shown where Domain C trusts Domain 1, so users in Domain 1 can access resources in Domain C. Explicit one-way nontransitive trusts are the only form of trust possible with</li></p>
<ul>
<p><li>A Windows 2000 domain and a Windows NT domain</li></p>

<p><li>A Windows 2000 domain in one forest and a Windows 2000 domain in another forest</li></p>

<p><li>A Windows 2000 domain and an MIT Kerberos V5 realm, allowing a client in a Kerberos realm to authenticate to an Active Directory domain in order to access network resources in that domain</li></p>
</ul></ul>

<A NAME="92"><h2>DNS Namespace</h2></A>
<p>Active Directory, like all directory services, is primarily a namespace. A <i>namespace</i> is any bounded area in which a name can be resolved. <i>Name resolution</i> is the process of translating a name into some object or information that the name represents. The Active Directory namespace is based on the DNS naming scheme, which allows for interoperability with Internet technologies. Private networks use DNS extensively to resolve computer names and to locate computers within their local networks and the Internet. DNS provides the following benefits:</p>

<ul>
<p><li> DNS names are user-friendly, which means they are easier to remember than IP addresses.</li></p>

<p><li> DNS names remain more constant than IP addresses. An IP address for a server can change, but the server name remains the same.</li></p>

<p><li> DNS allows users to connect to local servers using the same naming convention as the Internet.</li></p>
</ul>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
For more information on DNS, see RFCs 1034 and 1035. To read the text of these Requests for Comment (RFCs), use your Web browser to search for <b>RFC 1034</b> and <b>RFC 1035</b>.</blockquote></div>
</p>

<p>Because Active Directory uses DNS as its domain naming and location service, Windows 2000 domain names are also DNS names. Windows 2000 Server uses Dynamic DNS (DDNS), which enables clients with dynamically assigned 
addresses to register directly with a server running the DNS service and update the DNS table dynamically. DDNS eliminates the need for other Internet naming 
services, such as Windows Internet Name Service (WINS), in a homogeneous environment.</p>

<p>
<div class="warning"><blockquote><b>IMPORTANT</b><hr>
For Active Directory and associated client software to function 
correctly, you must have installed and configured the DNS service.</blockquote></div>
</p>

<A NAME="93"><h3>Domain Namespace</h3></A>
<p>The <i>domain namespace</i> is the naming scheme that provides the hierarchical structure for the DNS database. Each node represents a partition of the DNS 
database. These nodes are referred to as <i>domains</i>.</p>

<p>The DNS database is indexed by name; therefore, each domain must have a name. As you add domains to the hierarchy, the name of the parent domain is 
appended to its child domain (called a <i>subdomain</i>). Consequently, a domain's name identifies its position in the hierarchy. For example, in Figure 2.9, the 
domain name <i>sales.microsoft.com</i> identifies the sales domain as a subdomain of the <i>microsoft.com</i> domain and <i>microsoft</i> as a subdomain of the <i>com</i> domain.</p>

<p>
<A HREF="javascript:fullSize('02wtk09x.htm')"> <img src="images/02wtk09.JPG" width=404 height=319 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.9</b> <i>Hierarchical structure of a domain namespace</i><!-- /caption -->
</p>


<p>The hierarchical structure of the domain namespace typically consists of a root domain, top-level domains, second-level domains, and host names.</p>

<p>There are two types of namespaces:</p>

<ul>
<p><li> <b>Contiguous namespace.</b> The name of the child object in an object hierarchy always contains the name of the parent domain. A tree is a contiguous namespace.</li></p>

<p><li> <b>Disjointed namespace.</b> The names of a parent object and a child of the same parent object are not directly related to one another. A forest is a disjointed namespace. For example, consider the domain names</li></p>
<ul>
<p><li>www.microsoft.com</li></p>

<p><li>msdn.microsoft.com</li></p>

<p><li>www.msn.com</li></p>
</ul></ul>

<p>The first two domain names create a contiguous namespace within microsoft.com, but the third domain is part of a disjointed namespace.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The term <i>domain,</i> in the context of DNS, is not related to domain as used 
in Windows 2000 directory services. A Windows 2000 domain is a group of 
computers and devices that are administered as a unit.</blockquote></div>
</p>

<p><b>Root Domain</b></p>

<p>The root domain is at the top of the hierarchy and is represented as a period (.). The Internet root domain is managed by several organizations, including 
Network Solutions, Inc.</p>

<p><b>Top-Level Domains</b></p>

<p>Top-level domains are organized by organization type or geographic location. Table 2.1 provides some examples of top-level domain names.</p>


<p><b>Table 2.1</b> <i>Examples of Top-Level Domains</i></p>
<p><table cellpadding=5 width="95%"><tr>
<th>Top-Level Domain</th><th>Description</th>
</tr><tr>
<td valign="top">gov</td> <td valign="top">Government organizations</td>
</tr><tr>
<td valign="top">com</td> <td valign="top">Commercial organizations</td>
</tr><tr>
<td valign="top">edu</td> <td valign="top">Educational institutions</td>
</tr><tr>
<td valign="top">org</td> <td valign="top">Noncommercial organizations</td>
</tr><tr>
<td valign="top">net</td> <td valign="top">Commercial sites or networks</td>
</tr></table></p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Individual country names may also be a part of top-level domains. Examples of country domain names are &quot;au&quot; for Australia or &quot;fr&quot; for France.</blockquote></div></p>


<p>Top-level domains can contain second-level domains and host names.</p>

<p><b>Second-Level Domains</b></p>

<p>Organizations, such as Network Solutions, Inc. and others, assign and register second-level domains to individuals and organizations for the Internet. A second-level name has two name parts: a top-level name and a unique second-level name. Table 2.2 provides some examples of second-level domains.</p>


<p><b>Table 2.2</b> <i>Examples of Second-Level Domains</i></p>
<p><table cellpadding=5 width="95%"><tr>
<th>Second-Level Domain</th><th>Description</th>
</tr><tr>
<td valign="top">ed.gov</td> <td valign="top">United States Department of Education</td>
</tr><tr>
<td valign="top">microsoft.com</td> <td valign="top">Microsoft Corporation</td>
</tr><tr>
<td valign="top">stanford.edu</td> <td valign="top">Stanford University</td>
</tr><tr>
<td valign="top">w3.org</td> <td valign="top">World Wide Web Consortium</td>
</tr><tr>
<td valign="top">pm.gov.au</td> <td valign="top">Prime Minister of Australia</td>
</tr></table></p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
In the case of country names, &quot;gov.au&quot;, &quot;edu.au&quot;, and &quot;com.au&quot; are 
top-level domains. If the name is structured as &quot;company.au&quot;, however (and in this case only), &quot;.au&quot; is top-level.</blockquote></div>
</p>

<p><b>Host Names</b></p>

<p>Host names refer to specific computers on the Internet or a private network. For example, in Figure 2.9, Computer1 is a host name. A host name is the leftmost portion of a <i>fully qualified domain name (FQDN)</i>, which describes the exact 
position of a host within the domain hierarchy. In Figure 2.9, Computer1.sales. microsoft.com. (including the end period, which represents the root domain) is an FQDN.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The host name does not have to be the same as the computer name, NetBios, or any other naming protocol.</blockquote></div>
</p>

<p><b>Zones</b></p>

<p>A zone represents a discrete portion of the domain namespace. Zones provide a way to partition the domain namespace into manageable sections.</p>

<p>Multiple zones in a domain namespace are used to distribute administrative tasks to different groups. For example, Figure 2.10 depicts the microsoft.com domain namespace divided into two zones. The two zones allow one administrator to manage the microsoft and sales domains and another administrator to manage the development domain.</p>

<p>A zone must encompass a contiguous domain namespace. For example, in Figure 2.10, you could not create a zone that consists of only the sales.microsoft.com and development.microsoft.com domains because the sales and development 
domains are not contiguous.</p>

<p>The name-to-IP-address mappings for a zone are stored in the zone database file. Each zone is anchored to a specific domain, referred to as the zone's <i>root 
domain.</i> The zone database file does not necessarily contain information for all subdomains of the zone's root domain, only those subdomains within the zone.</p>

<p>
<A HREF="javascript:fullSize('02wtk10x.htm')"> <img src="images/02wtk10.JPG" width=404 height=227 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.10</b> <i>Domain namespace divided into zones</i><!-- /caption -->
</p>


<p>In Figure 2.10, the root domain for Zone1 is microsoft.com and its zone file 
contains the name-to-IP-address mappings for the microsoft and sales domains. The root domain for Zone2 is development, and its zone file contains the name-to-IP-address mappings for the development domain only. The zone file for Zone1 does not contain the name-to-IP-address mappings for the development domain, although development is a subdomain of the microsoft domain.</p>

<A NAME="94"><h2>Name Servers</h2></A>
<p>A DNS name server stores the zone database file. Name servers can store data for one zone or multiple zones. A name server is said to have authority for the domain namespace that the zone encompasses.</p>

<p>One name server contains the master zone database file, referred to as the 
<i>primary zone database file,</i> for the specified zone. As a result, there must be at least one name server for a zone. Changes to a zone, such as adding domains or hosts, are performed on the server that contains the primary zone database file.</p>

<p>Multiple name servers act as a backup to the name server containing the primary zone database file. Multiple name servers provide the following advantages:</p>

<ul>
<p><li> They perform zone transfers. The additional name servers obtain a copy of the zone database file from the name server that contains the primary database zone file. This is called a <i>zone transfer.</i> These name servers periodically query the name server containing the primary zone database file for updated zone data.</li></p>

<p><li> They provide redundancy. If the name server containing the primary zone database file fails, the additional name servers can provide service.</li></p>

<p><li> They improve access speed for remote locations. If there are a number of clients in remote locations, use additional name servers to reduce query traffic across slow wide area network (WAN) links.</li></p>

<p><li> They reduce the load on the name server containing the primary zone database file.</li></p>
</ul>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
You can find information on configuring DNS for Active Directory in <A HREF="ch05a.htm">Chapter 5</A>, &quot;DNS and Active Directory Integration.&quot;</blockquote></div>
</p>

<A NAME="95"><h2>Naming Conventions</h2></A>
<p>Every object in Active Directory is identified by a name. Active Directory uses a variety of naming conventions: distinguished names, relative distinguished names, globally unique identifiers, and user principal names.</p>

<A NAME="96"><h3>Distinguished Name</h3></A>
<p>Every object in Active Directory has a distinguished name (DN) that uniquely identifies an object and contains sufficient information for a client to retrieve the object from the directory. The DN includes the name of the domain that holds the object, as well as the complete path through the container hierarchy to the object.</p>

<p>For example, the following DN identifies the Firstname Lastname user object in the microsoft.com domain (where <i>Firstname</i> and <i>Lastname</i> represent the actual first and last name of a user account):</p>

<p>/DC=COM/DC=microsoft/OU=dev/CN=Users/CN=<i>Firstname Lastname</i></p>

<p>Table 2.3 describes the attributes in the example.</p>

<p><b>Table 2.3</b> <i>Distinguished Name Attributes</i></p>

<p><table cellpadding=5 width="95%"><tr>
<th>Attribute</th><th>Description</th>
</tr><tr>
<td valign="top">DC</td> <td valign="top">Domain Component Name</td>
</tr><tr>
<td valign="top">OU</td> <td valign="top">Organizational Unit Name</td>
</tr><tr>
<td valign="top">CN</td> <td valign="top">Common Name</td>
</tr></table></p>

<p>DNs must be unique. Active Directory does not allow duplicate DNs.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
For more information on distinguished names, see RFC 1779. To read the text of this Request for Comment (RFC), use your Web browser to search for <b>RFC 1779</b>.</blockquote></div>
</p>

<A NAME="97"><h3>Relative Distinguished Name</h3></A>
<p>Active Directory supports querying by attributes, so you can locate an object even if the exact DN is unknown or has changed. The <i>relative distinguished name</i> (RDN) of an object is the part of the name that is an attribute of the object itself. In the preceding example, the RDN of the <i>Firstname Lastname</i> user object is Firstname Lastname. The RDN of the parent object is Users.</p>

<p>You can have duplicate RDNs for Active Directory objects, but you cannot have two objects with the same RDN in the same OU. For example, if a user account is named Jane Doe, you cannot have another user account called Jane Doe in the same OU. However, objects with duplicate RDN names can exist in separate OUs because they have different DNs (see Figure 2.11).</p>

<p>
<A HREF="javascript:fullSize('02wtk11x.htm')"> <img src="images/02wtk11.JPG" width=404 height=296 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 2.11</b> <i>Distinguished names and relative distinguished names</i><!-- /caption -->
</p>


<A NAME="98"><h3>Globally Unique Identifier</h3></A>
<p>A <i>globally unique identifier</i> (GUID) is a 128-bit number that is guaranteed to be unique. GUIDs are assigned to objects when the objects are created. The GUID never changes, even if you move or rename the object. Applications can store the GUID of an object and use the GUID to retrieve that object 
regardless of its current DN.</p>

<p>In earlier versions of Windows NT, domain resources were associated to a security identifier (SID) that was generated within the domain. This meant that the SID was only guaranteed to be unique within the domain. A GUID is unique across all domains, meaning that you can move objects from domain to domain and they will still have a unique identifier.</p>

<p><b>User Principal Name</b></p>

<p>User accounts have a &quot;friendly&quot; name, the <i>user principal name</i> (UPN). The UPN is composed of a &quot;shorthand&quot; name for the user account and the DNS name of the tree where the user account object resides. For example, <i>Firstname Lastname</i> (substitute the first and last names of the actual user) in the microsoft.com tree might have a UPN of FirstnameL@microsoft.com (using the full first name and the first letter of the last name).</p>

<A NAME="99"><h2>Lesson Summary</h2></A>
<p>In this lesson you learned about several new concepts introduced with Active 
Directory, including the global catalog, replication, trust relationships, DNS namespaces, and naming conventions.</p>

<p>You learned that the global catalog is a service and a physical storage location that contains a replica of selected attributes for every object in Active Directory. You can use the global catalog to locate objects anywhere in the network without replication of all domain information between domain controllers.</p>

<p>Active Directory includes replication to ensure that changes to a domain controller are reflected in all domain controllers within a domain. Within a site, Active Directory automatically generates a ring topology for replication among domain controllers in the same domain. Between sites, you must customize how Active Directory replicates information using site links to specify how your sites are connected.</p>

<p>A trust relationship is a link between two domains in which the trusting domain honors the logon authentication of the trusted domain. Active Directory supports two forms of trust relationships: implicit two-way transitive trusts and explicit 
one-way nontransitive trusts.</p>

<p>In this lesson you also learned that Active Directory uses DNS as its domain naming and location service; therefore, Windows 2000 domain names are also DNS names. Windows 2000 Server uses DDNS, so clients with dynamically 
assigned addresses can register directly with a server running the DNS service and dynamically update the DNS table. There are contiguous namespaces and disjointed namespaces.</p>

<p>Finally, you learned about the naming conventions employed by Active 
Directory: DNs, RDNs, GUIDs, and UPNs.</p>

</BODY>
</HTML>







