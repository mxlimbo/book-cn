<html>
<head>
<title>Lesson 1: Understanding DNS Name Resolution</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05a.htm", "ch05c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="208"><h1>Lesson 1: Understanding DNS Name Resolution</h1></A>
<p>The DNS service provides name resolution for clients running Windows 2000. With name resolution, users can access servers by name rather than having to use IP addresses that are difficult to remember. This lesson introduces you to the name resolution process.</p>

<p>
<div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li> Explain the name resolution process</li></p>
</ul>

<b>Estimated lesson time: 10 minutes</b>
</blockquote></div>
</p>

<A NAME="209"><h2>Name Resolution</h2></A>
<p>Name resolution is the process of resolving DNS names to IP addresses. Name resolution is similar to looking up a name in a telephone book, where the name 
is associated with a telephone number. For example, when you connect to the Microsoft Web site, you use the name <i>www.microsoft.com</i>. DNS resolves <i>www.microsoft.com</i> to its associated IP address, 207.46.130.149. The mapping 
of names to IP addresses is stored in the DNS distributed database.</p>

<A NAME="210"><h3>IP Addressing</h3></A>
<p>An IP address identifies each host that communicates by using TCP/IP. Each 32-bit IP address is separated internally into two parts&#8212;a network ID and a host ID.</p>

<ul>
<p><li> The network ID, also known as a network address, identifies a single network segment within a larger TCP/IP internetwork (a network of networks). All the systems that attach and share access to the same network have a common network ID within their full IP address. This ID is also used to uniquely identify each network within the larger internetwork.</li></p>

<p><li> The host ID, also known as a host address, identifies a TCP/IP node (a workstation, server, router, or other TCP/IP device) within each network. The host ID for each device identifies a single system uniquely within its own network.</li></p>
</ul>

<p>Here is an example of a 32-bit IP address:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
10000011 01101011 00010000 11001000
</pre>
</td></tr>
</table>
</p>

<p>To make IP addressing easier, IP addresses are expressed in dotted decimal 
notation. The 32-bit IP address is segmented into four 8-bit octets. The octets 
are converted to decimal (base-10 numbering system) and separated by periods. Therefore, the previous IP address example is 131.107.16.200 when converted 
to dotted decimal notation.</p>

<p>Continuing with the sample IP address (131.107.16.200), if the network ID 
portion (131.107) is indicated by the first two numbers of the IP address, then the host ID portion (16.200) is indicated by the last two numbers of the IP address.</p>

<A NAME="211"><h3>Lookup Queries</h3></A>
<p>DNS name servers resolve forward and reverse lookup queries. A <i>forward lookup query</i> resolves a name to an IP address. A <i>reverse lookup query</i> resolves an IP address to a name. A name server can only resolve a query for a zone for which it has authority. If a name server cannot resolve the query, it passes the query to other name servers that can resolve the query. The name server caches the query results to reduce the DNS traffic on the network.</p>

<A NAME="212"><h2>Forward Lookup Query</h2></A>
<p>The DNS service uses a client/server model for name resolution. To resolve a 
forward lookup query, a client passes a query to a local name server. The local name server either resolves a query or queries another name server for resolution.</p>

<p>Figure 5.1 represents a client from outside of the microsoft.com zone, querying the name server for an IP address of <i>www.microsoft.com</i>.</p>

<p>
<A HREF="javascript:fullSize('05wtk01x.htm')"> <img src="images/05wtk01.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.1</b> <i>Resolving a forward lookup query</i><!-- /caption -->
</p>


<p>The numbers in the figure depict the following activities:</p>

<ol>
<p><li> The client passes a forward lookup query for <i>www.microsoft.com</i> to its local name server.</li></p>

<p><li> The local name server checks its zone database file to determine whether it contains the name-to-IP-address mapping for the client query. The local name server does not have authority for the micrososft.com domain, so it passes the query to one of the DNS root servers, requesting resolution of the host name. The root name server sends back a referral to the com name servers.</li></p>

<p><li> The local name server sends a request to a com name server, which responds with a referral to the Microsoft name servers.</li></p>

<p><li> The local name server sends a request to the Microsoft name server. The Microsoft name server receives the request. Because the Microsoft name server has authority for that portion of the domain namespace, it returns the IP address for <i>www.microsoft.com</i> to the local name server.</li></p>

<p><li> The name server sends the IP address for <i>www.microsoft.com</i> to the client.</li></p>

<p><li> The name resolution is complete, and the client can access <i>www.microsoft.com</i>.</li></p>
</ol>

<A NAME="213"><h2>Name Server Caching</h2></A>
<p>When a name server is processing a query, it might be required to send out several queries to find the answer. With each query, the name server discovers other name servers that have authority for a portion of the domain namespace. The name server caches these query results to reduce network traffic (see Figure 5.2).</p>

<p>
<A HREF="javascript:fullSize('05wtk02x.htm')"> <img src="images/05wtk02.JPG" width=404 height=247 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.2</b> <i>Caching query results</i><!-- /caption -->
</p>


<p>When a name server receives a query result the following actions take place:</p>

<ol>
<p><li> The name server caches the query result for a specified amount of time, referred to as Time To Live (TTL).</li></p>
</ol>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The zone that provided the query results specifies the TTL. TTL is 
configured using the DNS console. The default TTL value is 60 minutes.</blockquote></div>
</p>

<ol>
<p><li value="2"> Once the name server caches the query result, TTL starts counting down from its original value.</li></p>

<p><li> When TTL expires, the name server deletes the query result from its cache.</li></p>
</ol>

<p>Caching query results enables the name server to resolve other queries to the same portion of the domain namespace quickly.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Use shorter TTL values to help ensure that data about the domain namespace is more current across the network. Shorter TTL values, however, <i>increase</i> the load on name servers. A longer TTL value decreases the time required to 
resolve information. However, if a change does occur (for example, a change in the subnet), the client will not receive the updated information until the TTL 
expires and a new query to that portion of the domain namespace is resolved.</blockquote></div>
</p>

<A NAME="214"><h2>Reverse Lookup Query</h2></A>
<p>A reverse lookup query maps an IP address to a name. Troubleshooting tools, such as the NSLOOKUP command-line utility, use reverse lookup queries to 
report back host names. Additionally, certain applications implement security based on the ability to connect to names, not IP addresses.</p>

<p>Because the DNS distributed database is indexed by name and not by IP address, a reverse lookup query would require an exhaustive search of every domain name. To solve this problem, a special second-level domain called <i>in-addr.arpa</i> was created.</p>

<p>The in-addr.arpa domain follows the same hierarchical naming scheme as 
the rest of the domain namespace; however, it is based on IP addresses, not 
domain names:</p>

<ul>
<p><li> Subdomains are named after the numbers in the dotted-decimal representation of IP addresses.</li></p>

<p><li> The order of the IP address octets is reversed.</li></p>

<p><li> Companies administer subdomains of the in-addr.arpa domain based on their assigned IP addresses and subnet mask.</li></p>
</ul>

<p>For example, Figure 5.3 shows the in-addr.arpa domain representation of the IP address 169.254.16.200. A company that has an assigned IP address range of 169.254.16.0 to 169.254.16.255 with a subnet mask of 255.255.255.0 will have authority over the 16.254.169.in-addr.arpa domain.</p>

<p>
<A HREF="javascript:fullSize('05wtk03x.htm')"> <img src="images/05wtk03.JPG" width=404 height=286 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 5.3</b> <i>The in-addr.arpa domain</i><!-- /caption -->
</p>


<A NAME="215"><h2>Lesson Summary</h2></A>
<p>In this lesson you learned that name resolution is the process of resolving names to IP addresses and that mapping of names to IP addresses is stored in the DNS distributed database. You learned that DNS name servers resolve forward lookup queries, and what actually happens when a client queries the name server for an IP address. You also learned about name server caching and that the name server caches the query results to reduce the DNS traffic on the network.</p>

<p>In addition to forward lookup queries, DNS name servers resolve reverse lookup queries. A reverse lookup query resolves an IP address to a name. Because the DNS distributed database is indexed by name and not by IP address, a special second-level domain called in-addr.arpa was created. The in-addr.arpa domain follows the same hierarchical naming scheme as the rest of the domain namespace; however, it is based on IP addresses instead of domain names.</p>

</BODY>
</HTML>







