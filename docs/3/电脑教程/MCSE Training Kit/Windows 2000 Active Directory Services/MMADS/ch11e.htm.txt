<html>
<head>
<title>Lesson 4: Moving Active Directory Objects</title>
<link rel="STYLESHEET" type="text/css" href="mmads.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11d.htm", "ch11f.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="542"><h1>Lesson 4: Moving Active Directory Objects</h1></A>
<p>You move objects from one location to another when organizational or administrative functions change&#8212;for example, when an employee moves from one department to another. This lesson shows you how to move Active Directory objects within and between domains.</p>

<p>
<div class="sidebar"><blockquote>

<b>After this lesson, you will be able to</b>

<ul>

<p><li> Move objects within a domain</li></p>

<p><li> Move objects between domains</li></p>

<p><li> Move workstations or member servers between domains</li></p>

<p><li> Move domain controllers between sites</li></p>

</ul>

<p><b>Estimated lesson time: 20 minutes</b></p>

</blockquote></div>
</p>


<A NAME="543"><h2>Moving Objects</h2></A>
<p>In the logical environment, you can move objects within and between domains in Active Directory. In the physical environment, you can move domain controllers between sites.</p>


<A NAME="544"><h2>Moving Objects Within a Domain</h2></A>
<p>To reduce administrative overhead, you can move objects with identical security requirements into an OU or container within a domain. You can then assign access permissions to the OU or container and all objects in it.</p>

<p><li><b>To move objects within a domain</b></li></p>

<ol>

<p><li> In Active Directory Users and Computers, select the object to move, then from the Action menu, click Move.</li></p>

<p><li> In the Move dialog box (see Figure 11.6), select the OU or container to which you want the object to move, then click OK.</li></p>

</ol>

<p>The following conditions apply when you move objects between OUs or containers:</p>

<ul>

<p><li> Permissions that are assigned directly to objects remain the same.</li></p>

<p><li> The objects inherit permissions from the new OU or container. Any permissions that were previously inherited from the old OU or container no longer affect the objects.</li></p>

<p><li> You can move multiple objects at the same time.</li></p>

<p>
<A HREF="javascript:fullSize('11wtk06x.htm')"> <img src="images/11wtk06.JPG" width=404 height=254 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 11.6</b> <i>The Move dialog box</i><!-- /caption -->
</p>


</ul>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
To simplify assignment of permissions for printers, move printers on different print servers that require identical permissions to the same OU or container. Printers are located in the Computer object for the print server. To view a printer, click View, then click Users, Groups, And Computers As Containers.
</blockquote></div>
</p>


<A NAME="545"><h2>Moving Objects Between Domains</h2></A>
<p>To support domain consolidation or organizational restructuring operations, Windows 2000 allows you to move objects between domains. The MOVETREE command-line utility is used to move Active Directory objects such as organizational units, users, and groups between domains in a single forest, with some exceptions. This tool is available in Windows 2000 Support Tools. The Windows 2000 Support Tools are included on the Windows 2000 CD-ROM in the \SUPPORT\TOOLS folder. For information on installing the Windows 2000 Support Tools, see <A HREF="ch03a.htm">Chapter 3</A>, &quot;Active Directory Administration Tasks and Tools.&quot;</p>

<p>The procedure for moving an object (whether it be a leaf object or the root object) involves taking an existing object and moving it below an existing parent. The distinguished name of the moved object reflects its new position in the hierarchy. The object's globally unique identifier (GUID) is unchanged by a move or rename.</p>

<p>As users and groups are migrated from one domain to another, they are given a new security identifier (SID). To preserve the security credentials of an account when it is moved from one domain to another, Windows 2000 supports SIDHistory, a security attribute available only in Windows 2000 native mode. As users and groups are moved from one domain to another, to reduce the administrative overhead of resetting ACLs and ownership of resources, the old SID is added to the SIDHistory attribute for the new object. Whenever users log on, any SIDs present in their SID history, or any SIDs present in the SIDHistory of a group of which the users are members, are added to their access token, and they are given permissions and ownership to any resources that they previously had.</p>

<p>MOVETREE allows an OU to be moved to another domain, keeping all of the linked group policy objects (GPOs) in the old domain intact. The GPO link is moved and continues to work, although clients receive their group policy settings from the GPOs located in the old domain. For more information on group policy, see <A HREF="ch12a.htm">Chapter 12</A>, &quot;Administering Group Policy.&quot;</p>


<A NAME="546"><h3>Supported MOVETREE Operations</h3></A>
<p>The following operations are supported with the MOVETREE utility:</p>

<ul>

<p><li> Move an object or a nonempty container to a different domain. Valid only within the same forest.</li></p>

<p><li> Move Domain Local and Global groups <i>between</i> domains without members and <i>within</i> domains with members. Valid only within the same forest.</li></p>

<p><li> Move Universal groups with members <i>within</i> and <i>between</i> domains. Valid only within the same forest.</li></p>

</ul>


<A NAME="547"><h3>Unsupported MOVETREE Operations</h3></A>
<p>Some objects and information are not moved. Objects that are not moved are classified as <i>orphaned objects</i> and are placed in an &quot;orphan&quot; container in the LostAndFound container in the source domain. The LostAndFound container is visible in the Active Directory Users and Computers console in Advanced View. The orphan container is named using the GUID of the parent container being moved and it contains the objects that were selected for the MOVETREE operation. Specifically, objects and information that cannot be moved by using the MOVETREE utility are:</p>

<ul>

<p><li> Local and Domain Global groups that contain members. Universal group memberships remain intact so that security is not compromised.</li></p>

<p><li> The domain join information for computer objects. The MOVETREE utility can move a computer object from one domain to another, along with its subordinate objects. However, the MOVETREE utility does not disjoin a computer from its source domain and rejoin it to the target domain. For this reason, the NETDOM utility is recommended to move computer objects.</li></p>

<p><li> Associated object data. This includes group policies, user profiles, logon scripts, users' personal data, encrypted files, smart cards, and public key certificates. Group policies would need to be applied to the users, groups, or computers. New smart cards and certificates would need to be issued from the Certificate Authority in the new domain. Use additional scripts or management tools, such as the Remote Administration Scripts, in conjunction with MOVETREE, to perform these additional steps.</li></p>

<p><li> System objects. Those objects identified by the objectClass being marked as systemOnly.</li></p>

<p><li> Objects in the configuration or schema naming contexts.</li></p>

<p><li> Objects in the special containers in the domain. Objects in the Builtin, ForeginSecurityPrincipals, System, and LostAndFound containers.</li></p>

<p><li> Domain controllers or any object whose parent is a domain controller.</li></p>

<p><li> Any object with the same name as an object that already exists in the target domain.</li></p>

</ul>

<p>MOVETREE may fail due to some of the following error conditions:</p>

<ul>

<p><li> The source domain controller cannot transfer the relative identifier master role owner.</li></p>

<p><li> The source object is locked due to another operation in progress. For example, if another user is currently creating child objects under the source object that is selected for the move operation.</li></p>

<p><li> Either the source or destination domain has invalid credentials.</li></p>

<p><li> The destination knows the source object is deleted but the source does not. For example, the source object has been deleted on a different domain controller, but due to replication latency the source domain controller has not yet received the deletion event.</li></p>

<p><li> There is a failure at the destination domain controller. For example, Disk Full.</li></p>

<p><li> The source and destination have a schema mismatch.</li></p>

</ul>


<A NAME="548"><h3>Moving Users</h3></A>
<p>Moving users between domains is supported with the following restrictions:</p>

<ul>

<p><li> If the user object contains any objects, the move operation fails. The user object must be a leaf object.</li></p>

<p><li> If a security accounts manager (SAM) constraint is met, the move operation fails. SAM constraints include when the user's <i>samAccountName</i> already exists in the destination domain, or if the user's password length does not meet the password restrictions in the target domain.</li></p>

<p><li> If the user object belongs to a Global group from the source domain, its membership is voided and the move operation fails. This is because a Global group can only have a member in the same domain, thereby preventing movement of any member of a Global group.</li></p>

</ul>

<p>However, there is one exception: If the user object belongs to the Domain Users group (without belonging to any other Global groups) and the Domain Users group is this user object's Primary group, then the move operation succeeds. It succeeds because when a user object is created, the system automatically places it into the Domain Users group and assigns the Domain Users group as its Primary group.</p>


<A NAME="549"><h3>Moving Groups</h3></A>
<p>Like users, groups can be moved between domains, with similar restrictions:</p>

<ul>

<p><li> If the group object contains any object, the move operation fails.</li></p>

<p><li> If its membership and its reverse memberships do not fulfill the requirements of its type, the operation fails.</li></p>

<p><li> If the group's <i>samAccountName</i> exists on the destination domain, the move operation fails.</li></p>

</ul>


<A NAME="550"><h3>Moving Objects Between Domains Using MOVETREE</h3></A>
<p>Before using the MOVETREE utility, verify that you have the necessary privileges to perform this operation. For example, make sure that you are authorized to move and create objects in both the source and destination domains. The MOVETREE utility can be used from the command line and can be called from a batch file to script user and group creation.</p>

<p><li><b>To move objects between domains using MOVETREE</b></li></p>

<ol>

<p><li> Open a command prompt and type <b>MOVETREE {/start | /startnocheck | /continue | /check} /s <i>SrcDSA</i> /d <i>DstDSA</i> /sdn <i>SrcDN</i> /ddn <i>DstDN</i>[/u [<i>Domain</i>\]<i>Username</i> /p <i>Password</i>] [/verbose] [{/? | /help}]</b></li></p>

<p>where:</p>

<ul>

<p><li> <b>/start</b> initiates a MOVETREE operation. This command includes a /check operation by default. To start a MOVETREE operation with no check, use /startnocheck.</li></p>

<p><li> <b>/continue</b> continues the execution of a previously paused or failed MOVETREE operation.</li></p>

<p><li> <b>/check</b> performs a test run of the MOVETREE operation, checking the whole tree without moving any objects.</li></p>

<p><li> <b>/s <i>SrcDSA</i></b> is the source server's fully qualified primary DNS name.</li></p>

<p><li> <b>/d <i>DstDSA</i></b> is the destination server's fully qualified primary DNS name.</li></p>

<p><li> <b>/sdn <i>SrcDN</i></b> is the distinguished name of the leaf, container, or subtree you are moving from the source domain.</li></p>

<p><li> <b>/ddn <i>DstDN</i></b> is the distinguished name of the leaf, container, or subtree you are moving to the destination domain.</li></p>

<p><li> <b>/u [<i>Domain</i>\]<i>Username</i> /p <i>Password</i></b> runs MOVETREE under the credentials of a valid <i>Username</i> and <i>Password</i>. Optionally, a <i>Domain</i> can be specified as well. If these optional arguments are not provided, MOVETREE uses the credentials of the currently logged-on user.</li></p>

<p><li> <b>/verbose</b> runs MOVETREE in verbose mode, which displays more details about the operation as it runs (optional).</li></p>

<p><li> <b>/?</b> or <b>/help</b> displays syntax information.</li></p>

</ul>

 </ol>


<A NAME="551"><h3>MOVETREE Command Example</h3></A>
<p>In the Marketing domain, there is a server called Server1 and an OU called Promotions. In the Sales domain, there is a server called Server2. The desired operation is to move the Promotions OU from Marketing to Sales and rename the new OU Sales Promotions. The MOVETREE command performs a test run, and then, if no errors are encountered, performs the move operation.</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
MOVETREE