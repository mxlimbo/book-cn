<!DOCTYPE html SYSTEM "msxhtml1-strict.dtd">
<html lang="en" xml:lang="en">
<head>
<link rel="stylesheet" type="text/css" href="styles.css" />
<script type="text/javascript" language="JavaScript" src="expando.js"></script>
<title>Lesson 3: The Kerberos Protocol in Windows 2000</title>


</head>
<body>
<div class="prevnext"><p><a href="ch27c.htm">3</a> <a href="ch27e.htm">4</a></p></div>

<h1><a name="1876">Lesson 3: The Kerberos Protocol in Windows 2000</a></h1>


<p>A standard process within computer security is to include a function that requires users to prove that they are who they claim to be. This affirmation of identity is accomplished when the user supplies the correct password for the user account. For example, when User1 attempts to connect to a server to access a file, the server must be sure that it is really User1 sending the request. Traditionally, the server assumes that it is User1 because the correct password was supplied when the connection was established. Stronger security is accomplished by having a trusted third party verify the identity of the user. This is a core function of the Kerberos authentication protocol.</p>

<hr />
<p><b>After this lesson, you will be able to</b></p>

<ul>
<li>Describe the Kerberos protocol and how it works in Windows 2000</li>
</ul>

<p><b>Estimated lesson time: 35 minutes</b></p>
<hr />

<h2><a name="1877">Overview of the Kerberos Protocol</a></h2>


<p>The Kerberos protocol is the default authentication provider in Windows 2000 and the primary security protocol. It allows users to use a single logon to access all resources. The Kerberos protocol verifies both the identity of the user and the integrity of the session data. This is accomplished by having a Kerberos protocol service installed on each domain controller and a Kerberos client installed on all computers running Windows 2000.</p>

<blockquote><div class="note"><b>NOTE</b><hr />
The Active Directory client for Windows 95 and Windows 98 allows users to log on by using the Kerberos v5 authentication protocol.</div></blockquote>

<p>When the Kerberos authentication protocol is used, a trusted Kerberos service on a server verifies the user's identity. Before connecting to the server the user requests a ticket from the Kerberos service, called the Kerberos Key Distribution Center service, to confirm the user's identity. The user then sends this ticket to the target server. Because the server trusts the Kerberos service to vouch for user identities, the server accepts the ticket as proof of the authenticity of the user.</p>

<p>When using the Kerberos authentication protocol, users can no longer log on and then access resources simply by providing a valid user ID and the correct password. Instead of trusting the source, the resource must contact the Kerberos service to obtain a ticket that vouches for the user. The Kerberos service operates as a trusted third party to generate session keys and grant tickets for specific client/server sessions.</p>

<p>When the Kerberos service issues a ticket, it contains the following components:</p>

<ul>
<li>Session key</li>

<li>Name of the user to whom the session key was issued</li>

<li>Expiration period of the ticket</li>

<li>Any additional data fields or settings that may be required</li>
</ul>

<p>The expiration period of a ticket is defined by the domain policy. If a ticket expires during an active session, the Kerberos service notifies the client and the server to refresh the ticket. The Kerberos service then generates a new session key and the session is resumed.</p>

<h3><a name="1878">Kerberos Protocol Terms</a></h3>


<p>To better understand the Kerberos protocol, you should review the following terms used to describe the various components of the Kerberos protocol.</p>

<p><b>Principal</b></p>

<p>A <i>principal</i> is a uniquely named user, client, or server that participates in a network communication.</p>

<p><b>Realm</b></p>

<p>A <i>realm</i> is an authentication boundary, which can be compared to a Windows 2000 domain. Each organization wishing to run a Kerberos server establishes its own realm. A Windows 2000 domain is a Kerberos realm but is named domain to maintain naming conventions established previously for Windows NT.</p>

<p><b>Secret Key</b></p>

<p>A <i>secret key</i> is an encryption key that is shared by a client or a server and a trusted third party to encrypt the information that is to be moved between them. In the case of the Kerberos protocol, the trusted third party is the Kerberos service. In the case of a principal, the secret key is typically based upon a hash or encryption of the principal's password. Secret keys are never transmitted on the network; only the encrypted information is transmitted.</p>

<p><b>Session Key</b></p>

<p>The <i>session key</i> is a temporary encryption key used between two principals, with a lifetime limited to the duration of a single login session. The session key is exchanged between the communication partners and is therefore known as a shared secret. The session key is always sent encrypted.</p>

<p><b>Authenticator</b></p>

<p>An <i>authenticator</i> is a record that is used to verify that a request actually originated from the principal. An authenticator contains information that verifies the identity of the sender and the time the request was initiated. This information is encrypted with the shared session key that is known only by the communicating principals. An authenticator is typically sent along with a ticket to allow the receiver to verify that the intended client recently initiated a request.</p>

<p><b>Key Distribution Center</b></p>

<p>The key distribution center (KDC) provides two functions: acting as the authentication server (AS) and the ticket granting service (TGS). The TGS distributes tickets to clients that wish to connect to services on the network. However, before a client can use the TGS to obtain tickets, it must first obtain a special ticket (the ticket granting ticket [TGT]) from the AS.</p>

<p><b>Privilege Attribute Certificate</b></p>

<p>The privilege attribute certificate (PAC) is a structure that contains the user's security ID (SID).</p>

<p><b>Tickets</b></p>

<p>In a basic Kerberos protocol exchange, the client contacts the TGS and requests a ticket for the target server before contacting the target server. A <i>ticket</i> is a record that allows a client to authenticate itself to a server; it is simply a certificate issued by the Kerberos service. The ticket is encrypted so that only the target server is able to decrypt and read it. Tickets contain the identity of the requesting client, the timestamp, the servers session key, the lifetime of the ticket, and other information (such as the PAC) that helps verify the identity of the client to the target server. Tickets are reusable within their life span, which is usually 8 hours.</p>

<p><b>Ticket Granting Tickets</b></p>

<p>One method for using the Kerberos protocol is to simply request a ticket for each target server from the TGS portion of the Kerberos service whenever the user wants to access the specified target server. Using this method, the response from the request would contain a session key and other information that is encrypted with the user's secret key. This method results in a component of the user's secret key being exposed on the network every time a new ticket request is made.</p>

<p>In Windows 2000, the Kerberos protocol protects the secret key by initially authenticating the user and then requesting a ticket granting ticket (TGT). A TGT is a request for a ticket and a random session key to be used with the TGS portion of the Kerberos service. After obtaining the ticket, the user can contact a service at any time; the requested ticket does not come from the AS, but from the TGS. The reply is encrypted not with the user's secret key, but with the session key that the AS provided for use with the TGS.</p>

<h3><a name="1879">Features of the Kerberos Protocol</a></h3>


<p>The Kerberos protocol has several advantages over traditional challenge/response authentication systems.</p>

<p><b>Mature Open Standard</b></p>

<p>The Windows 2000 implementation of the Kerberos protocol complies with RFC 1510 and RFC 1964. It can interoperate with other implementations of the Kerberos protocol that also comply with the RFCs. Therefore, Kerberos protocol clients on other platforms, such as UNIX, can be authenticated by Windows 2000. In some cases, however, implementation-dependent values do not exist or are unavailable. In the absence of required data, the Windows 2000 Kerberos service attempts to match the principal name in the ticket either to a Windows 2000 user account or to a default account created for this purpose.</p>

<p><b>Faster Connection Authentication</b></p>

<p>When using the Kerberos protocol, servers do not need to do pass-through authentication. A server running Windows 2000 can verify the client credentials by using the client-supplied ticket, without having to query the Kerberos service. This is because the client will have already obtained a Kerberos protocol ticket from a domain controller, which the server can then use to build the client's access token. Since the server is required to do less work when establishing a connection, it can more easily accommodate a large number of simultaneous connection requests.</p>

<p><b>Mutual Authentication</b></p>

<p>The Kerberos protocol provides mutual authentication of both the client and server. The Windows NTLM authentication protocol provides only client authentication, and it assumes that all servers are trusted. It does not verify the identity of the server that a client connects to. The assumption that all servers can be trusted is no longer valid. Mutual authentication of both client and server is an important foundation for secure networks.</p>

<p><b>Delegation of Authentication</b></p>

<p>Delegation of authentication allows a user to connect to an application server, which in turn can connect to one or more additional servers on the client's behalf, by using the client's credentials.</p>

<p><b>Transitive Trusts</b></p>

<p>Authentication credentials issued by one Kerberos service are accepted by all Kerberos services within the domain.</p>

<h3><a name="1880">Kerberos Authentication Process</a></h3>


<p>The Kerberos authentication process involves the client computer negotiating exchanges between the target server and the KDC. Figure 27.12 provides an overview of the authentication process. The numbered steps shown in the illustration are described below.</p>

<div class="figure">
<a href="javascript:fullSize('F27cc12x.htm')"><img src="images/F27cc12.JPG" /></a>
<div class="caption"><b>Figure 27.12</b> <i>Kerberos authentication process</i>
</div>
</div>

<p>The Kerberos authentication process works as follows:</p>

<ol>
<li>The client sends an initial AS request to the AS portion of the Kerberos service. The AS includes the client's principal name and the principal name of the target server for which it is requesting a ticket.</li>

<li>The Kerberos service generates an AS reply and sends it to the client. The reply contains the following:

<ul>
<li>A TGT for the TGS portion of the Kerberos service. The TGT is encrypted with the TGS secret key. The TGT contains the user's SID. By encrypting the TGT with the TGS secret key, the client is unable to change the SID properties.</li>

<li>A session key for exchanges with the TGS portion of the Kerberos service. The session key is encrypted with the client's secret key. The client's secret key is a computation of the client's password. It is similar to the session key used in NTLM challenge/response. The encryption here makes it difficult for someone to steal the session key.</li>
</ul></li>

<li>The client generates and sends a TGS request that contains the client's and target server's principal names, realms, and the TGT that identifies the client.</li>

<li>The TGS portion of the Kerberos service generates and sends a TGS reply to the client. This reply contains a ticket for the target server. The ticket is encrypted with the server's secret key. The server's secret key is a computation of the password generated when the server joined the domain. The reply also includes other information, including the session key.</li>

<li>The client extracts the session key for the target server and generates a request for the server. This request contains the target server and an authenticator encrypted with the session key. The client sends this request to the target server by using an established transport path.</li>

<li>The target server decrypts the ticket by using its secret key to obtain the session key. The server then uses the session key to decrypt the authenticator to verify the client. If the client has requested mutual authentication, the target server generates a reply encrypted with the session key and sends it to the client. Mutual authentication not only authenticates the client to the target server, but also authenticates the target server to the client.</li>
</ol>

<blockquote><div class="note"><b>NOTE</b><hr />
The AS and TGS exchanges with the Kerberos service operate over UDP port 88. The exchanges between the client and target server are dependent on the protocol in use between the two principals.</div></blockquote>

<h3><a name="1881">Kerberos Protocol Delegation</a></h3>


<p>Occasionally, it is necessary for an application server to connect to another server on behalf of a client. Like impersonation, delegation is used to ensure that proper security permissions are applied against the application server's request.</p>

<p>The Kerberos authentication protocol supports delegated authentication. This type of authentication is used when a client transaction involves multiple servers. In this case, each of the verifying servers obtains another ticket and authenticates the ticket to the requested server on behalf of the client. There is no restriction on the number of consecutive servers that can delegate authentication. This is different than impersonation, in that the server accesses remote resources on the behalf of the client instead of local resources.</p>

<p>Figure 27.13 provides an overview of the Kerberos protocol delegation process. The numbered steps in the diagram are described below.</p>

<div class="figure">
<a href="javascript:fullSize('F27cc13x.htm')"><img src="images/F27cc13.JPG" /></a>
<div class="caption"><b>Figure 27.13</b> <i>Kerberos protocol delegation process</i>
</div>
</div>


<p>The following steps describe the access of resources involving two servers:</p>

<ol>
<li>The client requests and receives a ticket for target Server A from the Kerberos service.</li>

<li>The client sends the ticket directly to Server A.</li>

<li>Server A sends a request, impersonating the client, to the Kerberos service for a ticket for target Server B. The Kerberos service responds with a ticket that allows the client to access Server B.</li>

<li>Server A can send the ticket to Server B, accessing Server B as the client.</li>
</ol>

<h2><a name="1882">Kerberos Protocol Logon Processes</a></h2>


<p>The addition of the Kerberos protocol as an authentication package in Windows 2000 affects various aspects of the logon process. However, the portions of the logon process that run before an authentication package becomes involved remain unchanged in Windows 2000.</p>

<h3><a name="1883">Local Interactive Logon</a></h3>


<p>When a local interactive logon occurs, the user logs on with a user account that exists on the local computer rather than with a domain user account. Figure 27.14 provides an overview of the local interactive logon process in Windows 2000. The numbered steps in the diagram are described below.</p>

<div class="figure">
<a href="javascript:fullSize('F27cc14x.htm')"><img src="images/F27cc14.JPG" /></a>
<div class="caption"><b>Figure 27.14</b> <i>Local interactive logon process</i>
</div>
</div>


<p>For local user accounts, the following takes place in Windows 2000:</p>

<ol>
<li>When the Graphical Identification and Authentication (GINA) DLL receives the logon request, it forwards the request to the Local Service Authority (LSA). This request specifies the Kerberos protocol as the authentication package to use because this is the default package in Windows 2000.</li>

<li>LSA processes the request and sends it to the Kerberos authentication package.</li>

<li>When the Kerberos protocol receives the logon request. The Kerberos protocol returns an error because it is used only when authenticating logon requests for domain user accounts, not local user accounts.</li>

<li>LSA receives the error and returns an error to the GINA.</li>

<li>The GINA resubmits the logon request to LSA specifying the &quot;MSV1_0&quot; authentication package. The logon process then takes place as it would for a local interactive logon under Windows NT 4.0.</li>
</ol>

<h3><a name="1884">Domain Interactive Logon</a></h3>


<p>The exchange that occurs when a user logs on to Windows 2000 with a domain user account is similar to the basic Kerberos protocol exchange. Figure 27.15 provides an overview of this logon process. The number steps in the diagram are described below.</p>

<div class="figure">
<a href="javascript:fullSize('F27cc15x.htm')"><img src="images/F27cc15.JPG" /></a>
<div class="caption"><b>Figure 27.15</b> <i>Domain interactive logon process</i></div></div>

<p>The following are the steps in the domain interactive logon process:</p>

<ol>
<li>When the logon request reaches the LSA, it passes the request to the Kerberos authentication package. The client sends an initial AS request to the Kerberos service, providing the user name and domain name. This is a request for authentication and a TGT. The request is made by using the principal name of krbtgt@&lt;<i>domain_name&gt;</i>, where &lt;<i>domain_name&gt;</i> is the name of the domain in which the user account is located. The first domain controller in the domain automatically generates the krbtgt@<i>&lt;domain_name&gt;</i> account.</li>

<li>The Kerberos service generates an AS reply containing a TGT (encrypted with the Kerberos secret key) and a session key for the TGS exchanges (encrypted with the client's secret key). This response is sent back to the client. The authorization data portion of the TGT contains the SID for the user account and SIDs for any global groups to which the user belongs. The SIDs are returned to the LSA for inclusion in the user's access token. The SIDs are copied by the Kerberos service from the TGT into subsequent tickets obtained from the Kerberos service.</li>

<li>The client generates and sends a TGS request containing the client's principal name and realm, the TGT to identify the client, and the local workstation name as the target server. This is done to request access to the local computer for the user.</li>

<li>The Kerberos service generates and sends a TGS reply. This reply contains a ticket for the workstation and other information, including the session key (encrypted by using the session key from the TGT). Also included in the authorization data portion of the TGS reply are the SIDs for the user account and any global groups copied by the Kerberos service from the original TGT.</li>

<li>The Kerberos authentication package returns the list of SIDs to the LSA.</li>
</ol>

<p>Windows 2000 services use the Kernel Mode SSPI to perform authentication. Instead of communicating directly with the Kerberos authentication package, both services access the Kerberos protocol through an authentication package built into LSA. This authentication package is called the Negotiate package.</p>

<p>During startup, both the Server and Workstation services initialize their interface with the Negotiate package in LSA by using SSPI. During this process, the server service obtains a credential handle for its default credentials.</p>

<p>The network communication occurs in two segments: protocol negotiation and session setup. Before a user can establish a session with the server, the client computer and the server must agree on the security protocol to use by determining which version of security they both support. Once the client has been authenticated and has a ticket, it can establish a session with the server.</p>

<h3><a name="1885">Kerberos Protocol Public Key Support</a></h3>


<p>Windows 2000 extends the functionality of the Kerberos protocol to allow it to interact with the Active Directory service. Windows 2000 includes extensions to the Kerberos v5 authentication protocol to support public key-based authentication. The public key extensions allow clients to request an initial TGT by using a private key. The Kerberos service verifies such a request by using the user's public key that is obtained from the user's X.509 certificate published to the Active Directory store. In order to obtain a ticket, the user's X.509 certificate must be stored in their user object. If the Kerberos service finds the certificate, the Kerberos service issues a ticket for the client and the standard Kerberos authentication procedure is followed thereafter. This replaces the secret key that is known only to the principal and the KDC. Smart cards, for example, use public key extensions provided by the Kerberos protocol.</p>

<h2><a name="1886">Lesson Summary</a></h2>


<p>The Kerberos protocol is the default authentication provider in Windows 2000 and the primary security protocol. To better understand the Kerberos protocol, you should be familiar with the terms common to the Kerberos protocol, including principal, realm, secret key, session key, authenticator, KDC, AS, TGS, PAC, ticket, and TGT. The Kerberos authentication process involves the client computer negotiating exchanges between the target server and the KDC. The Kerberos authentication protocol supports delegated authentication. When a local interactive logon occurs, the user logs on with a user account that exists on the local computer rather than with a domain user account. The exchange that occurs when a user logs on to Windows 2000 with a domain user account is similar to the basic Kerberos protocol exchange. Windows 2000 services use the Kernel Mode SSPI to perform authentication. In addition, Windows 2000 extends the functionality of the Kerberos protocol to allow it to interact with Active Directory
services. Windows 2000 includes extensions to the Kerberos v5 authentication protocol to support public key-based authentication.</p>

</body>
</html>



