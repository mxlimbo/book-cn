<HTML>
<HEAD>
<TITLE>Lesson 3: Active Directory Concepts</TITLE>
<link rel="STYLESHEET" type="text/css" href="upwin2k.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04c.htm", "ch04e.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="185"><H1>Lesson 3: Active Directory Concepts</H1></A>

<p>Several new concepts are introduced with Active Directory directory
services. It is important that you understand their meaning as applied
to Active Directory directory services.</p>

<p>
<div class="sidebar"><blockquote>
<p><b>After this lesson, you will be able to</b></p>

<ul>
<p><li>Explain concepts associated with Active Directory directory
services.</li></p>
</ul>


<p><b>Estimated lesson time: 15 minutes</b></p>
</blockquote></div>
</p>

<A NAME="186"><H2>Schema</H2></A>

<p>The schema contains a formal definition of the contents and
structure of Active Directory directory services, including all
attributes, classes, and class properties, as shown in Figure 4.7. For
each object class, the schema defines what attributes an instance of
the class must have, what additional attributes it can have, and what
object class can be a parent of the current object class.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
All domains within a single tree and all trees
in a forest share a common schema.
</blockquote></div>
</p>

<p>
<A HREF="javascript:fullSize('f04up07x.htm')"> <img src="images/f04up07.JPG" width=404 height=294 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.7</b> <i>Schema is extensible.</i><!--/caption-->
</p>


<p>Installing Active Directory directory services on the first domain
controller in a network creates a default schema. The default schema
contains definitions of commonly used objects and properties (such as
user accounts, computers, printers, groups, and so on). The default
schema also contains definitions of objects and properties that Active
Directory directory services use internally to function.</p>

<p>The Active Directory schema is extensible, which means that you can
define new directory object types and attributes and new attributes for
existing objects (see Figure 4.7). You can extend the schema by using
the Active Directory Schema Manager snap-in or the Active Directory
Services Interface (ADSI). Both of these tools are available in the
Windows 2000 Resource Kit.</p>

<p>The schema is implemented and stored in the global catalog, and it
can be updated dynamically. As a result, an application can extend the schema
with new attributes and classes and then can use the extensions
immediately.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Write access to the schema is limited to members
of the Administrators group, by default.
</blockquote></div>
</p>

<A NAME="187"><H2>Global Catalog</H2></A>

<p>The global catalog is the central repository of information about
objects in a tree or forest, as shown in Figure 4.8. Active Directory
directory services automatically generate the contents of the global
catalog from the domains that make up the directory through the normal
replication process.</p>

<p>
<A HREF="javascript:fullSize('f04up08x.htm')"> <img src="images/f04up08.JPG" width=404 height=312 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.8</b> <i>The global catalog contains information about objects.</i><!--/caption-->
</p>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
All domains within a single tree and all domains
in a forest share a common global catalog.
</blockquote></div>
</p>

<p>The global catalog is a service and a physical storage location that
contains a replica of selected attributes for every object in Active
Directory directory services. By default, the attributes stored in the
global catalog are those most frequently used in search operations
(such as a user's first and last names, logon name, and so forth),
and those necessary to locate a full replica of the object. As a
result, you can use the global catalog to locate objects anywhere in
the network without replication of all domain information between
domain controllers.</p>

<p>When you install Active Directory directory services on the first
domain controller in a new forest, that domain controller is, by
default, a global catalog server. A <i>global catalog server</i> is a
domain controller that stores a copy of the global catalog and
processes queries to the global catalog (see Figure 4.8). Global
catalog servers improve the performance of forestwide searches in
Active Directory directory services. For example, if you search for all
of the printers in a forest, a global catalog server processes the query against the global catalog
and then returns the results. Without a global catalog server, this
query would require a search of every domain controller in every domain
in the forest.</p>

<p>The configuration of the initial global catalog server should have
the capacity to support several hundred thousand to one million
objects, with the potential for growth beyond those numbers. You can
designate additional domain controllers as global catalog servers by
using the Active Directory Sites and Services snap-in. When considering
which domain controllers to designate as global catalog servers, base
your decision on the ability of your network structure to handle replication and query traffic. The more global catalog servers that you
have, the greater the replication traffic. However, the availability of
additional servers can provide quicker responses to user inquiries. It
is recommended that every major site in your enterprise have a global
catalog server.</p>

<A NAME="188"><H2>Trust Relationships</H2></A>

<p>A <i>trust relationship</i> is a link between two domains such that
the trusting domain honors logon authentications of the trusted
domain.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Authentication with Windows 2000 trust
relationships supports the Kerberos 5 protocol, which is an industry
standard for authentication across different operating systems.
</blockquote></div>
</p>

<p>Active Directory directory services support two forms of trust
relationships: one-way, nontransitive trusts and two-way, transitive
trusts.</p>

<A NAME="189"><H3>One-Way, Nontransitive Trusts</H3></A>

<p>In a one-way trust relationship, if DomainA trusts DomainB, DomainB
does not automatically trust DomainA (see bottom portion of Figure
4.9).</p>

<p>In a nontransitive trust relationship, if DomainA trusts DomainB and
DomainB trusts DomainC, then DomainA does not automatically trust
DomainC.</p>

<p>Networks running Windows NT 4.0 and earlier versions of Windows NT
use one-way, nontransitive trust relationships. You manually create
one-way, nontransitive trust relationships between existing domains. As
a result, a Windows NT 4.0 (or earlier Windows NT) network with several
domains requires the creation of many trust relationships.</p>

<p>Active Directory directory services support this type of trust for
connections to existing Windowsç‡¦T 4<i>.</i>0 and earlier domains and
to allow the configuration of trust relationships with domains in other
trees.</p>

<p>
<A HREF="javascript:fullSize('f04up09x.htm')"> <img src="images/f04up09.JPG" width=404 height=248 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.9</b> <i>Trust relationships</i><!--/caption-->
</p>


<A NAME="190"><H3>Two-Way, Transitive Trusts</H3></A>

<p>A two-way, transitive trust is the relationship between parent and
child domains within a tree and between the top-level domains in a
forest. This is the default; trust relationships among domains in a
tree are established and maintained <i>automatically</i>. Transitive trust is a feature of the Kerberos
authentication protocol, which provides the distributed authentication and
authorization in Windows 2000 (see top portion of Figure 4.9).</p>

<p>In a two-way trust relationship, if DomainA trusts DomainB, then
DomainB trusts DomainA. In a transitive trust relationship, if DomainA
trusts DomainB and DomainB trusts DomainC, then DomainA trusts DomainC.
Therefore in a two-way, transitive trust relationship, if DomainA
trusts DomainB and DomainB trusts DomainC, then DomainA trusts DomainC
and DomainC trusts DomainA.</p>

<p>If a two-way, transitive trust exists between two domains, you can
assign permissions to resources in one domain to user and group
accounts in the other domain, and vice versa.</p>

<p>Two-way, transitive trust relationships are the default in Windows
2000. When you create a new child domain, a trust relationship is
established automatically with its parent domain, which imparts a trust
relationship with every other domain in the tree. As a result, users in one domain can access
resources to which they have been granted permission in all other
domains in a tree.</p>

<A NAME="191"><H2>Naming Conventions</H2></A>

<p>Every object in Active Directory directory services is identified by
a name. Active Directory directory services use a variety of naming
conventions: distinguished names, relative distinguished names,
globally unique identifiers, and user principal names.</p>

<A NAME="192"><H3>Distinguished Name</H3></A>

<p>Every object in Active Directory directory services has a <i>
distinguished name (DN),</i> which uniquely identifies an object and
contains sufficient information for a client to retrieve the object
from the directory. The DN includes the name of the domain that holds
the object, as well as the complete path through the container
hierarchy to the object.</p>

<p>For example, the following DN identifies the James Smith user object
in the microsoft.com domain:</p>

<p>/DC=COM/DC=Microsoft/OU=Dev/CN=Users/CN=James Smith</p>

<p>Table 4.2 describes the attributes in the example.</p>

<p><b>Table 4.2</b> <i>Distinguished Name Attributes</i></p>

<P>
<table cellpadding=5 width="95%">
<tr> 
<th>Attribute  </th>
<th>Description  </th></tr>
<tr>
<td valign="top">DC  </td>
<td valign="top">DomainComponentName  </td></tr>
<tr>
<td valign="top">OU  </td>
<td valign="top">OrganizationalUnitName  </td></tr>
<tr>
<td valign="top">CN  </td>
<td valign="top">CommonName  </td></tr>
</table></p>

<p>DNs must be unique. Active Directory directory services do not allow
duplicate DNs.</p>

<A NAME="193"><H3>Relative Distinguished Name</H3></A>

<p>Active Directory directory services support querying by attributes,
so you can locate an object even if the exact DN is unknown or has
changed. The <i>relative distinguished name (RDN)</i> of an object is
the part of the name that is an attribute of the object itself. In the
preceding example, the RDN of the James Smith user object is James
Smith. The RDN of the parent object is Users.</p>

<p>You can have duplicate RDNs for Active Directory objects, but you
cannot have two objects with the same RDN in the same OU. For example,
if a user account is named Amy Jones, you cannot have another user
account called Amy Jones in the same OU. However, objects with
duplicate RDN names can exist in separate OUs because they have
different DNs (see Figure 4.10).</p>

<p>
<A HREF="javascript:fullSize('f04up10x.htm')"> <img src="images/f04up10.JPG" width=404 height=347 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 4.10</b> <i>Distinguished names and relative distinguished names</i><!--/caption-->
</p>


<A NAME="194"><H3>Globally Unique Identifier</H3></A>

<p>A <i>globally unique identifier</i> (GUID) is a 128-bit number that
is guaranteed to be unique. GUIDs are assigned to objects when the
objects are created. The GUID never changes, even if you move or rename
the object. Applications can store the GUID of an object and use the GUID to retrieve that object
regardless of its current DN.</p>

<A NAME="195"><H3>User Principal Name</H3></A>

<p>User accounts have a &quot;friendly&quot; name, the user principal
name (UPN). The UPN is composed of a &quot;shorthand&quot; name for the
user account and the DNS name of the tree where the user account object
resides. For example, user James Smith in the microsoft.com tree might
have a UPN of JamesS@microsoft.com.</p>

<A NAME="196"><H2>Lesson Summary</H2></A>

<p>The schema contains a formal definition of the contents and
structure of Active Directory directory services, including all
attributes, classes, and class properties. For each object class, the
schema defines what attributes an instance of the class must have, what
additional attributes it can have, and what object class can be a
parent of the current object class. The schema is extensible, and
installing Active Directory directory services on the first domain
controller in a network creates a default schema.</p>

<p>The global catalog is a service and a physical storage location that
contains a replica of selected attributes for every object in Active
Directory directory services. Active Directory directory services
automatically generate the contents of the global catalog from the
domains that make up the directory through the normal replication
process. By default, the attributes stored in the global catalog are
those most frequently used in search operations (such as a user's
first and last names, logon name, and so forth), and those necessary to
locate a full replica of the object. As a result, you can use the
global catalog to locate objects anywhere in the network without
replication of all domain information between domain controllers.</p>

<p>There are two types of namespaces: contiguous namespaces and
disjointed namespaces. In a contiguous namespace, the name of the child
object in an object hierarchy always contains the name of the parent
domain. A tree is an example of a contiguous namespace. In a disjointed
namespace, the names of a parent object and of a child of the same
parent object are not directly related to one another. A forest is an
example of a disjointed namespace.</p>

</BODY>
</HTML>



