<HTML>
<HEAD>
<TITLE>Lesson 1: Introducing the Software Installation and Maintenance Technology</TITLE>
<link rel="STYLESHEET" type="text/css" href="upwin2k.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07a.htm", "ch07c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>

<A NAME="335"><H1>Lesson 1: Introducing the Software Installation and Maintenance Technology</H1></A>

<p>Windows 2000 ships with Microsoft Windows Installer and the Software
Installation and Maintenance technology. Both are designed to help you
deploy and manage software throughout an organization. This lesson
helps you to understand the differences between them.</p>

<p>
<div class="sidebar"><blockquote>
<p><b>After this lesson, you will be able to</b></p>

<ul>
<p><li>Explain how the Microsoft Windows 2000 Software Installation
and Maintenance technology uses Group Policy and its Software Installer
node to manage software.</li></p>

<p><li>Explain the four phases of the software life cycle:
preparation, deployment, maintenance, and removal.</li></p>
</ul>


<p><b>Estimated lesson time: 10 minutes</b></p>
</blockquote></div>
</p>

<A NAME="336"><H2>Windows Installer Technologies</H2></A>

<p>Windows Installer Technologies are divided into a client side,
Msiexec.exe, and a file format, the Windows Installer package or .MSI file, which
replaces the Setup.exe file. It also introduces a higher level of
sophistication to software installation and maintenance. The benefits
of Windows Installer include the following:</p>

<ul>
<p><li><b>Custom installations that can be performed only when they
are required.</b> For example, optional features in an application,
such as clip art or a thesaurus, can be visible in a program without
being installed. Although the menu commands will be accessible, the
feature itself will not be installed until the user accesses the menu
command. This method of installation helps reduce both the complexity
of the application and the amount of hard disk space used by the
application.</li></p>

<p><li><b>Resilient applications.</b> If a critical file is deleted
or becomes corrupt, the application will automatically return to the installation source
and acquire a new copy of the file, without the need for user
intervention.</li></p>

<p><li><b>Clean removal.</b> Applications are uninstalled without
leaving orphaned files and without inadvertently breaking another
application (for example, by deleting a shared file required by another program).</li></p>
</ul>


<p>These benefits are not limited to Windows 2000. Versions of Windows
Installer will also be available for Windows NT 4.0, Windows 95, and
Windows 98. However, using Windows 2000 does give administrators one
major advantage: by combining the Windows Installer package files with
the Software Installation and Maintenance technology, administrators
can easily deploy and manage software throughout their entire
organization.</p>

<p>The Software Installation and Maintenance technology uses Group
Policy to deploy and manage software that has been packaged in the Windows
Installer package file format.</p>

<A NAME="337"><H2>Software Installation and Maintenance Technology</H2></A>

<p>The Windows 2000 Software Installation and Maintenance technology
allows you to deploy and manage software with Group Policy and Active
Directory directory services. After an organization has obtained a Windows
Installer package file, an administrator can create Group Policy
Objects (GPOs) that are associated with the package file. These GPOs
can do the following:</p>

<ul>
<p><li>Install applications on user computers. This can be done
automatically, when a user logs on or a computer is turned on, or these
applications can be made available for users to install when they need
them.</li></p>

<p><li>Upgrade a previous version of the application, or
automatically apply software patches or service packs.</li></p>

<p><li>Remove applications.</li></p>
</ul>


<p>Most important, you can manage and deploy software without visiting
the computer of every user in the organization. By working with Windows
Installer package files, administrators can handle most software
deployment and management tasks through the use of Group Policy.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Software Installation and Maintenance
technology operates using Group Policy. Therefore, these deployment and
management features are only available for Windows 2000 clients. If you
have client computers running other operating systems, you will need to
replace or supplement the Software Installation and Maintenance
technology with another deployment solution.
</blockquote></div>
</p>

<A NAME="338"><H2>Software Life Cycle</H2></A>

<p>The Software Installation and Maintenance technology allows the
distribution of software in a manner that more closely aligns with the
typical software life cycle. Instead of managing software manually,
Group Policy can be used to install, modify, repair, and remove
software more efficiently. To better understand how these new software
deployment and management technologies function, it is useful to examine the four phases of the software life cycle:
preparation, deployment, maintenance, and removal.</p>

<A NAME="339"><H3>Preparation Phase</H3></A>

<p>The preparation phase occurs before software is actually deployed to
users or computers. For Windows 2000, this involves two key processes:
package acquisition and package modification.</p>

<p><b>Package Acquisition</b></p>

<p>The Software Installation and Maintenance technology can only deploy
and manage Windows Installer package files. This means you must have a
package file for an application before that application can be deployed
using Group Policy. Administrators have the following three options for
acquiring package files:</p>

<ul>
<p><li>Obtain a package file from a software vendor.</li></p>

<p><li>Repackage an application (create a package file using
repackaging software).</li></p>

<p><li>Create a text file with the .ZAP extension. These text files
enable you to publish an application using Group Policy and are
discussed later in this chapter.</li></p>
</ul>


<p><b>Package Modifications</b></p>

<p>Modifications are similar to Windows Installer package files but
have an .MST file extension. Modifications allow you to take one
product (for example, Microsoft Excel), and create any number of custom
installations. For example, you might create a version of Excel that leaves out the statistical analysis
components for a human resource department and a second version that
includes the statistical analysis components for an accounting
department. You can then create GPOs, assign these different versions
to different users, and install the software without requiring a
technician to sit at each computer and specify the installation
options.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
Package modifications made using .MST files are
applied at initial application installation and cannot be applied to an
already installed application.
</blockquote></div>
</p>

<A NAME="340"><H3>Deployment Phase</H3></A>

<p>In the deployment phase, software is actually installed on
computers. Windows 2000 provides the following options for software
deployment:</p>

<ul>
<p><li><b>Assigning applications.</b> When an application is
assigned to a user, that application is advertised on the computer desktop. Since the application is assigned to the user, the assigned application appears on the
computer desktop, no matter which computer the user logs on to.
Advertised applications aren't actually installed, but they <i>
appear</i> as though they have been installed. A Start menu shortcut, desktop icons, and registry entries (for
example, file associations) are created.</li></p>



<p>The user can install the software by clicking the Start menu
shortcut, double-clicking the desktop icon, or double-clicking a
document type associated with that application (document invocation).
Unless the user activates the installation, the application is not
installed, which saves valuable hard disk space and administration
time.</p>


<p><li><b>Publishing applications.</b> When an application is
published, it is not advertised on the user desktop. However, users can
install the application either through Add/Remove Programs or through
document invocation.</li></p>
</ul>


<A NAME="341"><H3>Maintenance Phase</H3></A>

<p>Windows 2000 makes it easy to upgrade or redeploy software. For
example, suppose a service pack has been issued for your organization's word
processing program. As an administrator, you place the service pack on
the network, and modify a GPO to redeploy the application. The next
time a user activates the program, the service pack will automatically be applied. There is no
need to individually visit each workstation and install the service
pack.</p>

<A NAME="342"><H3>Removal Phase</H3></A>

<p>Windows 2000 offers two methods for automatically removing
applications:</p>

<ul>
<p><li><b>Forced removal.</b> With a forced removal, software is
automatically deleted from a computer, either the next time the
computer is turned on (in the case of a computer policy), or the next time a user logs on (in the case
of a user policy).</li></p>

<p><li><b>Optional removal.</b> With an optional removal, software
is not automatically uninstalled from computers. For example, if a user
already has Microsoft Word 97 installed, the user will be able to
continue running that application. However, no new users will be able
to install Word 97.</li></p>
</ul>


<A NAME="343"><H2>Lesson Summary</H2></A>

<p>Microsoft Windows 2000 includes a new technology called Software
Installation and Maintenance. It uses Group Policy and the new Windows
Installer to reduce the amount of time you spend deploying and managing
software. The Windows Installer package replaces the Setup.exe file and
provides custom installations that can be performed only when they are
required. It also makes applications resilient; if a critical file is
deleted or becomes corrupt, the application will automatically return
to the installation source and acquire a new copy of the file, without
the need for user intervention. Applications are uninstalled without
leaving orphaned files and without inadvertently breaking another
application (for example, by deleting a shared file required by another
program).</p>

<p>After you obtain a Windows Installer package file, you can create
Group Policy objects (GPOs) that are associated with the package file.
The Windows 2000 Software Installation and Maintenance technology
allows you to deploy and manage software with Group Policy and Active
Directory directory services. You can automatically install
applications on user computers, upgrade previous versions of the
application or apply software patches or service packs, and remove
applications. Most important, you can manage and deploy software
without visiting the computer of every user in the organization.</p>

<p>To help you understand how these new software deployment and
management technologies function, this lesson examined the four phases
of the software life cycle: preparation, deployment, maintenance, and
removal. All of these four phases are handled by the Windows 2000
Software Installation and Maintenance technology.</p>

</BODY>
</HTML>



