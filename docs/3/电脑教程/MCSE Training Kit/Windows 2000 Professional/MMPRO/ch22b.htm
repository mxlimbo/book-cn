<html>
<head>
<title>Lesson 1: The Boot Process</title>
<link rel="STYLESHEET" type="text/css" href="mmpro.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch22a.htm", "ch22c.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>




<A NAME="738"><H1>Lesson 1: The Boot Process</H1></A>

<p>In this lesson, you will learn that the Windows 2000 boot process occurs in five stages: the preboot sequence, boot sequence, kernel load, kernel initialization, and logon. You will be able to troubleshoot more effectively by learning about the phases in the Windows 2000 boot process and the files used in each phase.</p>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li>Explain the boot process for Intel-based computers.</li></p>
</ul>

<p><b>Estimated lesson time: 25 minutes</b></p>
</blockquote></div></p>

<A NAME="739"><H2>Files Used in the Boot Process</H2></A>

<p>An Intel-based boot sequence requires certain files. Table 22.1 lists the files 
used in the Windows 2000 Intel-based boot process, the appropriate location of each file, and the stages of the boot process associated with each file. <i>Systemroot</i> represents the path to your Windows 2000 installation folder, which will be C:\Winnt if you've followed the installation instructions in <A HREF="ch02a.htm">Chapter 2</A>, &quot;Installing Windows 2000 Professional.&quot;</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>To view the files listed in Table 22.1, open Windows Explorer and click Folder Options on the Tools menu. On the View tab of the Folder Options dialog box, click Show Hidden Files And Folders, and clear (remove the check mark from) the Hide Protected Operating System Files (Recommended) check box. A Warning box appears indicating that it is not a good idea to display the protected operating system files. Click Yes to display them.</blockquote></div></p>

<p><b>Table 22.1</b> <i>Files Used in the Windows 2000 Boot Process</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>File</th>
<th>Location</th>
<th>Boot stage</th>
</tr>
<tr>
<td valign="top">Ntldr </td>
<td valign="top">System partition root (C:\ )</td>
<td valign="top">Preboot and boot</td>
</tr>
<tr>
<td valign="top">Boot.ini</td>
<td valign="top">System partition root</td>
<td valign="top">Boot</td>
</tr>
<tr>
<td valign="top">Bootsect.dos</td>
<td valign="top">System partition root</td>
<td valign="top">Boot (optional)</td>
</tr>
<tr>
<td valign="top">Ntdetect.com </td>
<td valign="top">System partition root</td>
<td valign="top">Boot</td>
</tr>
<tr>
<td valign="top">Ntbootdd.sys</td>
<td valign="top">System partition root</td>
<td valign="top">Boot (optional)</td>
</tr>
<tr>
<td valign="top">Ntoskrnl.exe</td>
<td valign="top"><i>systemroot</i>\System32</td>
<td valign="top">Kernel load</td>
</tr>
<tr>
<td valign="top">Hal.dll</td>
<td valign="top"><i>systemroot</i>\System32</td>
<td valign="top">Kernel load</td>
</tr>
<tr>
<td valign="top">System</td>
<td valign="top"><i>systemroot</i>\System32\Config</td>
<td valign="top">Kernel initialization</td>
</tr>
<tr>
<td valign="top"><i>Device drivers</i> (*.sys)</td>
<td valign="top"><i>systemroot</i>\System32\Drivers</td>
<td valign="top">Kernel initialization</td>
</tr>
</table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>The string <i>systemroot</i> (typed as <i>%</i>systemroot<i>%</i>) is a placeholder for the folder in the boot partition that contains the Windows 2000 system files.</blockquote></div></p>

<A NAME="740"><H2>Preboot Sequence</H2></A>

<p>During startup, a Windows 2000-based computer initializes and then locates the boot portion of the hard disk.</p>

<p>The following four steps occur during the preboot sequence:</p>

<ol>
<p><li> The computer runs power-on self test (POST) routines to determine the amount of physical memory, whether the hardware components are present, and so on. If the computer has a Plug and Play basic input/output system (BIOS), enumeration and configuration of hardware devices occurs at this stage.</li></p>

<p><li> The computer BIOS locates the boot device and loads and runs the master boot record (MBR).</li></p>

<p><li> The MBR scans the partition table to locate the active partition, loads the boot sector on the active partition into memory, and then executes it.</li></p>

<p><li> The computer loads and initializes the Ntldr file, which is the operating system loader.</li></p>
</ol>

<p><div class="note"><blockquote><b>NOTE</b><HR>Windows 2000 modifies the boot sector during installation so that Ntldr loads during system startup.</blockquote></div></p>

<A NAME="741"><H2>Boot Sequence</H2></A>

<p>After the computer loads Ntldr into memory, the boot sequence gathers information about hardware and drivers in preparation for the Windows 2000 load phases. The boot sequence uses the following files: Ntldr, Boot.ini, Bootsect.dos (optional), Ntdetect.com, and Ntoskrnl.exe.</p>

<p>The boot sequence has four phases: initial boot loader, operating system selection, hardware detection, and configuration selection.</p>

<A NAME="742"><H3>Initial Boot Loader</H3></A>

<p>During the initial boot loader phase, Ntldr switches the microprocessor from 
real mode to 32-bit flat memory mode, which Ntldr requires to carry out any 
additional functions. Next, Ntldr starts the appropriate minifile system drivers. The minifile system drivers are built into Ntldr so that Ntldr can find and load Windows 2000 from partitions formatted with either FAT or Microsoft Windows 2000 File System (NTFS).</p>

<A NAME="743"><H3>Operating System Selection</H3></A>

<p>During the boot sequence, Ntldr reads the Boot.ini file. If more than one operating system selection is available in the Boot.ini file, then the Please Select The Operating System To Start screen appears, listing the operating systems specified in the Boot.ini file. If you don't select an entry before the timer reaches zero, Ntldr loads the operating system specified by the default parameter in the Boot.ini file. Windows 2000 Setup sets the default parameter to the most recent Windows 2000 installation. If only one entry is in the Boot.ini file, the Please Select The Operating System To Load screen doesn't appear, and the default 
operating system is automatically loaded.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>If the Boot.ini file isn't present, Ntldr attempts to load Windows 2000 from the Winnt folder on the first partition of the first disk, typically C:\Winnt.</blockquote></div></p>

<A NAME="744"><H3>Hardware Detection</H3></A>

<p>On Intel-based computers, Ntdetect.com and Ntoskrnl.exe perform hardware 
detection. Ntdetect.com executes after you select Windows 2000 on the Please Select The Operating System To Start screen (or after the timer times out).</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>If you select an operating system other than Windows 2000, such as Microsoft Windows 98, Ntldr loads and executes Bootsect.dos. Bootsect.dos 
is a copy of the boot sector that was on the system partition at the time that 
Windows 2000 was installed. Passing execution to Bootsect.dos starts the boot process for the selected operating system.</blockquote></div></p>

<p>Ntdetect.com collects a list of currently installed hardware components 
and returns this list to Ntldr for later inclusion in the registry under the HKEY_LOCAL_MACHINE\HARDWARE key.</p>

<p>Ntdetect.com detects the following components:</p>

<ul>
<p><li>Bus/adapter type</li></p>

<p><li>Communication ports</li></p>

<p><li>Floating-point coprocessor</li></p>

<p><li>Floppy disks</li></p>

<p><li>Keyboard</li></p>

<p><li>Mouse/pointing device</li></p>

<p><li>Parallel ports</li></p>

<p><li>SCSI adapters</li></p>

<p><li>Video adapters</li></p>
</ul>

<A NAME="745"><H3>Configuration Selection</H3></A>

<p>After Ntldr starts loading Windows 2000 and collects hardware information, the operating system loader process presents you with the Hardware Profile/Configuration Recovery Menu screen. The Hardware Profile/Configuration Recovery Menu screen contains a list of the hardware profiles that are set up on the computer. The first hardware profile is highlighted. You can press the Down arrow key to select another profile. You can also press L to invoke the Last Known Good Configuration option.</p>

<p>If there is only a single hardware profile, Ntldr doesn't display the Hardware 
Profile/Configuration Recovery Menu screen and loads Windows 2000 using the default hardware profile configuration.</p>

<A NAME="746"><H2>Kernel Load</H2></A>

<p>After configuration selection, the Windows 2000 kernel (Ntoskrnl.exe) loads and initializes. Ntoskrnl.exe also loads and initializes device drivers and loads services. If you press Enter when the Hardware Profile/Configuration Recovery Menu screen displays, or if Ntldr makes the selection automatically, the computer enters the kernel load phase. The screen clears and a series of white rectangles appears across the bottom of the screen.</p>

<p>During the kernel load phase, Ntldr does the following:</p>

<ul>
<p><li>Loads Ntoskrnl.exe but doesn't initialize it.</li></p>

<p><li>Loads the hardware abstraction layer file (Hal.dll).</li></p>

<p><li>Loads the HKEY_LOCAL_MACHINE\SYSTEM registry key from <i>systemroot</i>\System32\Config\System.</li></p>

<p><li>Selects the control set it will use to initialize the computer. A <i>control set</i> contains configuration data used to control the system, such as a list of the device drivers and services to load and start.</li></p>

<p><li>Loads device drivers with a value of 0x0 for the Start entry. These are typically low-level hardware device drivers, such as those for a hard disk. The value 
for the List entry, specified in the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ServiceGroupOrder subkey of the registry, defines the order in which Ntldr loads these device drivers.</li></p>
</ul>
 
<A NAME="747"><H2>Kernel Initialization</H2></A>

<p>When the kernel load phase is complete, the kernel initializes, and then Ntldr passes control to the kernel. At this point, the system displays a graphical screen with a status bar indicating load status. Four tasks are accomplished during the kernel initialization stage:</p>

<ol>
<p><li> <b>The Hardware key is created.</b> Upon successful initialization, the kernel uses the data collected during hardware detection to create the registry key HKEY_LOCAL_MACHINE\HARDWARE. This key contains information about hardware components on the system board and the interrupts used by specific hardware devices.</li></p>

<p><li> <b>The Clone control set is created.</b> The kernel creates the Clone control set by copying the control set referenced by the value of the Current entry in the HKEY_LOCAL_MACHINE\SYSTEM\Select subkey of the registry. The Clone control set is never modified, as it is intended to be an identical copy of the data used to configure the computer and should not reflect changes made during the startup process.</li></p>

<p><li> <b>Device drivers are loaded and initialized.</b> After creating the Clone control set, the kernel initializes the low-level device drivers that were loaded during the kernel load phase. The kernel then scans the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services subkey of the registry for device drivers with a value of 0x1 for the Start entry. As in the kernel load phase, a device driver's value for the Group entry specifies the order in which it loads. Device drivers initialize as soon as they load.</li></p>

<p>If an error occurs while loading and initializing a device driver, the boot 
process proceeds based on the value specified in the ErrorControl entry 
for the driver.</p>

<p>Table 22.2 describes the possible ErrorControl values and the resulting boot sequence actions.</p>

<p>ErrorControl values appear in the registry under the subkey HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\<i>name_of_service_or_driver</i>\ErrorControl.</p>

<p><li> <b>Services are started.</b> After the kernel loads and initializes device drivers, Session Manager (Smss.exe) starts the higher-order subsystems and services for Windows 2000. Session Manager executes the instructions in the BootExecute data item, and in the Memory Management, DOS Devices, and SubSystems keys.</li></p>

<p>Table 22.3 describes the function of each instruction set and the resulting 
Session Manager action.</p>
</ol>

<p><b>Table 22.2</b> <i>ErrorControl Values and Resulting Action</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>ErrorControl value</th>
<th>Action</th>
</tr>
<tr>
<td valign="top">0x0 (Ignore)</td>
<td valign="top">The boot sequence ignores the error and proceeds without 
 displaying an error message.</td>
</tr>
<tr>
<td valign="top">0x1 (Normal)</td>
<td valign="top">The boot sequence displays an error message but ignores the 
 error and proceeds.</td>
</tr>
<tr>
<td valign="top">0x2 (Severe)</td>
<td valign="top">The boot sequence fails and then restarts using the 
 LastKnownGood control set. If the boot sequence is currently 
 using the LastKnownGood control set, the boot sequence 
 ignores the error and proceeds.</td>
</tr>
<tr>
<td valign="top">0x3 (Critical)</td>
<td valign="top">The boot sequence fails and then restarts using the 
 LastKnownGood control set. However, if the LastKnownGood control set is causing the critical error, 
 the boot sequence stops and displays an error message.</td>
</tr>
</table>
</p>

<p><b>Table 22.3</b> <i>Instruction Sets Read and Executed by Session Manager</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Data item or key</th>
<th>Action</th>
</tr>
<tr>
<td valign="top">BootExecute data item</td>
<td valign="top">Session Manager executes the commands specified in 
 this data item before it loads any services.</td>
</tr>
<tr>
<td valign="top">Memory Management key</td>
<td valign="top">Session Manager creates the paging file information 
 required by Virtual Memory Manager.</td>
</tr>
<tr>
<td valign="top">DOS Devices key</td>
<td valign="top">Session Manager creates symbolic links that direct 
 certain classes of commands to the correct component 
 in the file system.</td>
</tr>
<tr>
<td valign="top">SubSystems key</td>
<td valign="top">Session Manager starts the Win32 subsystem, which 
 controls all I/O and access to the video screen and starts 
 the WinLogon process.</td>
</tr>
</table>
</p>

<A NAME="748"><H2>Logon</H2></A>

<p>The logon process begins at the conclusion of the kernel initialization phase. The Win32 subsystem automatically starts Winlogon.exe, which starts Local Security Authority (Lsass.exe) and displays the Logon dialog box. You can log on at this time, even though Windows 2000 might still be initializing network device drivers.</p>

<p>Next, the Service Controller executes and makes a final scan of the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services subkey, looking for services with a value of 0x2 for the Start entry. Services with a value of 0x2 for the Start entry are marked to load automatically. These include the Workstation service and the Server service.</p>

<p>The services that load during this phase do so based on their values for the DependOnGroup or DependOnService entries in the registry subkey HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services.</p>

<p>Windows 2000 startup is not considered good until a user successfully logs on to the system. After a successful logon, the system copies the Clone control set to the LastKnownGood control set.</p>

<A NAME="749"><H2>Lesson Summary</H2></A>

<p>In this lesson, you learned that the Windows 2000 Intel-based boot process 
occurs in five stages: preboot sequence, boot sequence, kernel load, kernel 
initialization, and logon. You also learned about the files that are used in the 
boot process, where these files are stored, and which stage of the boot process uses them.</p>

</BODY>
</HTML>

