<HTML>
<HEAD>
<TITLE>Lesson 2: Active Directory Structure and Replication</TITLE>
<link rel="STYLESHEET" type="text/css" href="mmpro.css"><SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm", "ch09d.htm", "images/unit_p_a1.gif", "images/unit_p_a2.gif", "images/unit_p_b1.gif", "images/unit_p_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#aa22aa", "2");
//--></SCRIPT><P>



<A NAME="322"><H1>Lesson 2: Active Directory Structure and Replication</H1></A>

<p>Active Directory directory services provide a method for designing a directory structure that meets your organization's needs. As a result, before installing 
Active Directory directory services, examine your organization's business structure and operations. Active Directory directory services completely separate the logical structure of the domain hierarchy from the physical structure.</p>

<p>Many companies have a centralized structure. Typically, these companies have strong IT departments that define and implement the network structure down 
to the smallest detail. Other organizations, especially large enterprises, are 
decentralized. These companies have multiple businesses, each of which is quite 
focused. They need decentralized approaches to managing their business relationships and networks.</p>

<p><div class="sidebar"><blockquote>
<b>After this lesson, you will be able to</b>

<ul>
<p><li>Explain Active Directory structure and replication.</li></p>
</ul>



<p><b>Estimated lesson time: 15 minutes</b></p>
</blockquote></div></p>

<A NAME="323"><H2>Logical Structure</H2></A>

<p>In Active Directory directory services, you organize resources in a logical structure. Grouping resources logically enables you to find a resource by its name rather than by its physical location. Since you group resources logically, Active Directory directory services make the network's physical structure transparent to users.</p>

<A NAME="324"><H3>Object</H3></A>

<p>An <i>object</i> is a distinct, named set of attributes that represents a network resource. Object <i>attributes</i> are characteristics of objects in the Directory. For example, the attributes of a user account might include the user's first and last names, department, and e-mail address (see Figure 9.1).</p>

<p>In Active Directory directory services, you can organize objects in <i>classes</i>, which are logical groupings of objects. For example, an object class might be user 
accounts, groups, computers, domains, or organizational units.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Some objects, known as <i>containers,</i> can contain other objects. For example, a domain is a container object.</blockquote></div></p>

<p>
<A HREF="javascript:fullSize('F09tk01x.htm')"> <img src="images/F09tk01.JPG" width=404 height=204 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.1</b> <i>Active Directory objects and attributes</i><!-- /caption -->
</p>

<A NAME="325"><H3>Organizational Units</H3></A>

<p>An <i>organizational unit</i> <i>(OU)</i> is a container that you use to organize objects within a domain into logical administrative groups. An OU can contain objects such as user accounts, groups, computers, printers, applications, file shares, and other OUs (see Figure 9.2).</p>

<p>
<A HREF="javascript:fullSize('F09tk02x.htm')"> <img src="images/F09tk02.JPG" width=404 height=293 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.2</b> <i>Resources organized in a logical hierarchical structure</i><!-- /caption -->
</p>

<p>The OU hierarchy within a domain is independent of the OU hierarchy structure of other domains&#8212;each domain can implement its own OU hierarchy. The depth of the OU hierarchy is unrestricted. However, a shallow hierarchy performs better than a deep one, so you should not create an OU hierarchy any deeper than necessary.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>You can delegate administrative tasks by assigning permissions to OUs.</blockquote></div></p>

<A NAME="326"><H3>Domain</H3></A>

<p>The core unit of logical structure in Active Directory directory services is the 
<i>domain</i>. Grouping objects into one or more domains allows your network to 
reflect your company's organization. Domains share these characteristics:</p>

<ul>
<p><li>All network objects exist within a domain, and each domain stores information only about the objects that it contains. Theoretically, a domain directory can contain up to 10 million objects, but 1 million objects per domain is more practical.</li></p>

<p><li>A domain is a security boundary. Access to domain objects is controlled by <i>access control lists (ACLs).</i> ACLs contain the permissions associated with objects that control which users can gain access to an object and which type of access users can gain to the objects. In Windows 2000, objects include files, folders, shares, printers, and Active Directory objects. All security policies and settings&#8212;such as administrative rights, security policies, and ACLs&#8212;do not cross from one domain to another. The domain administrator has absolute rights to set policies only within that domain.</li></p>
</ul>



<A NAME="327"><H3>Tree</H3></A>

<p>A <i>tree</i> is a grouping or hierarchical arrangement of one or more Windows 2000 domains that share a contiguous namespace:</p>

<ul>
<p><li>Following DNS standards, the domain name of a child domain is the relative name of that child domain appended with the name of the parent domain.</li></p>

<p><li>All domains within a single tree share a common <i>schema,</i> which is a formal definition of all object types that you can store in an Active Directory deployment.</li></p>

<p><li>All domains within a single tree share a common <i>global catalog,</i> which is the central repository of information about objects in a tree.</li></p>
</ul>



<A NAME="328"><H3>Forest</H3></A>

<p>A <i>forest</i> is a grouping or hierarchical arrangement of one or more domain trees that form a disjointed namespace. As such, forests have the following characteristics:</p>

<ul>
<p><li>All trees in a forest share a common schema.</li></p>

<p><li>Trees in a forest have different naming structures, according to their domains.</li></p>

<p><li>All domains in a forest share a common global catalog.</li></p>

<p><li>Domains in a forest operate independently, but the forest enables communication across the entire organization.</li></p>
</ul>



<A NAME="329"><H2>Sites</H2></A>

<p>The physical structure of Active Directory directory services is based on sites. A <i>site</i> is a combination of one or more IP subnets, which should be connected by a high-speed link. Typically, a site has the same boundaries as a LAN. When you group subnets on your network, you should combine only those subnets that have fast, cheap, and reliable network connections with one another. Fast network connections are at least 512 kilobits per second (Kbps). An available bandwidth of 128 Kbps and higher is sufficient.</p>

<p>With Active Directory directory services, sites are not part of the namespace. When you browse the logical namespace, you see computers and users grouped into domains and OUs, not sites. Sites contain only computer objects and connection objects used to configure replication between sites.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>A single domain can span multiple geographical sites, and a single site can include user accounts and computers belonging to multiple domains.</blockquote></div></p>

<A NAME="330"><H2>Replication Within a Site</H2></A>

<p>Active Directory directory services also include a replication feature. Replication ensures that changes to a domain controller are reflected in all domain controllers within a domain. To understand replication, you must understand domain controllers. A domain controller is a computer running Windows 2000 Server that stores a replica of the domain directory. A domain can contain one or more 
domain controllers.</p>

<p>The following list describes the functions of domain controllers:</p>

<ul>
<p><li>Each domain controller stores a complete copy of all Active Directory information for that domain, manages changes to that information, and replicates those changes to other domain controllers in the same domain.</li></p>

<p><li>Domain controllers in a domain automatically replicate all objects in the domain to each other. When you perform an action that causes an update to Active Directory directory services, you are actually making the change at one of the domain controllers. The domain controller then replicates the change to all other domain controllers within the domain. You can control replication of traffic between domain controllers in the network by specifying how often replication occurs and the amount of data that Windows 2000 replicates at one time.</li></p>

<p><li>Domain controllers immediately replicate certain important updates, such as a user account being disabled.</li></p>

<p><li>Active Directory directory services use multimaster replication, in which no one domain controller is the master domain controller. Instead, all domain controllers within a domain are peers, and each domain controller contains a copy of the Directory database that can be written to. Domain controllers can hold different information for short periods of time until all domain controllers have synchronized changes to Active Directory directory services.</li></p>

<p><li>Domain controllers affect fault tolerance. Having more than one domain controller in a domain provides fault tolerance. If one domain controller is offline, another domain controller can provide all required functions, such as recording changes to Active Directory directory services.</li></p>

<p><li>Domain controllers manage all aspects of user domain interaction, such as locating Active Directory objects and validating user logon attempts.</li></p>
</ul>



<p>Within a site, Active Directory directory services automatically generate a ring topology for replication among domain controllers in the same domain. The 
topology defines the path for directory updates to flow from one domain con- 
troller to another until all domain controllers receive the directory updates 
(see Figure 9.3).</p>

<p>
<A HREF="javascript:fullSize('F09tk03x.htm')"> <img src="images/F09tk03.JPG" width=404 height=319 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 9.3</b> <i>Replication topology among domain controllers (DC)</i><!-- /caption -->
</p>

<p>The ring structure ensures that at least two replication paths flow from one 
domain controller to another; if one domain controller is down temporarily, 
replication still continues to all other domain controllers.</p>

<p>Active Directory directory services periodically analyze the replication topology within a site to ensure that it is still efficient. If you add or remove a domain controller from the network or a site, Active Directory directory services reconfigure the topology to reflect the change.</p>

<A NAME="331"><H2>Lesson Summary</H2></A>

<p>In this lesson you learned that Active Directory directory services offer you a method for designing a directory structure to meet the needs of your organization's business structure and operations. Active Directory directory services completely separate the logical structure of the domain hierarchy from the physical structure. Grouping resources logically enables you to find a resource by its name rather than by its physical location. Since you group resources logically, Active Directory directory services make the network's physical structure transparent to users.</p>

<p>You learned that the core unit of logical structure in Active Directory directory services is the domain. All network objects exist within a domain, and each 
domain stores information only about the objects that it contains. An OU is a container that you use to organize objects within a domain into logical administrative groups, and an OU can contain objects such as user accounts, groups, computers, printers, applications, file shares, and other OUs. A tree is a grouping or hierarchical arrangement of one or more Windows 2000 domains that share a contiguous namespace. A forest is a grouping or hierarchical arrangement of one or more trees that form a disjointed namespace.</p>

<p>You also learned that the physical structure of Active Directory directory services is based on sites. A site is a combination of one or more IP subnets, connected by a high-speed link. Active Directory directory services also include replication to ensure that changes to a domain controller are reflected in all domain controllers within a domain. Within a site, Active Directory directory services automatically generate a ring topology for replication among domain controllers in the same domain. The ring structure ensures that at least two replication paths exist from one domain controller to another; if one domain controller is down temporarily, replication still continues to all other domain controllers. If you add or remove a domain controller from the network or a site, Active Directory directory services reconfigure the topology to reflect the change.</p>

</BODY>
</HTML>






