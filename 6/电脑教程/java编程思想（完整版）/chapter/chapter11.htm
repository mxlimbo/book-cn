<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<title>Thinking in Java | Chinese Version by Trans Bot</title>

<meta name="Microsoft Theme" content="inmotion 111, default"></head>

<body background="../_themes/inmotion/inmtextb.gif" bgcolor="#FFFFCC" text="#000000" link="#800000" vlink="#996633" alink="#FF3399">
<center>
-------------------------------------------------<br>
<br>
<font color=blue><b>本教程由<a href="../about/index.htm">yyc,spirit</a>整理</b></font><br>
<br>
-------------------------------------------------
</center><br><br>

<p>第11章 运行期类型鉴定<br>
<br>
运行期类型鉴定（RTTI）的概念初看非常简单――手上只有基础类型的一个句柄时，利用它判断一个对象的正确类型。<br>
然而，对RTTI的需要暴露出了面向对象设计许多有趣（而且经常是令人困惑的）的问题，并把程序的构造问题正式摆上了桌面。<br>
本章将讨论如何利用Java在运行期间查找对象和类信息。这主要采取两种形式：一种是“传统”RTTI，它假定我们已在编译和运行期拥有所有类型；另一种是Java1.1特有的“反射”机制，利用它可在运行期独立查找类信息。首先讨论“传统”的RTTI，再讨论反射问题。<br>
<br>
11.1 对RTTI的需要<br>
请考虑下面这个熟悉的类结构例子，它利用了多形性。常规类型是Shape类，而特别衍生出来的类型是Circle，Square和Triangle。<br>
<img src="../11-1.gif">
<br>
这是一个典型的类结构示意图，基础类位于顶部，衍生类向下延展。面向对象编程的基本目标是用大量代码控制基础类型（这里是Shape）的句柄，所以假如决定添加一个新类（比如Rhomboid，从Shape衍生），从而对程序进行扩展，那么不会影响到原来的代码。在这个例子中，Shape接口中的动态绑定方法是draw()，所以客户程序员要做的是通过一个普通Shape句柄调用draw()。draw()在所有衍生类里都会被覆盖。而且由于它是一个动态绑定方法，所以即使通过一个普通的Shape句柄调用它，也有表现出正确的行为。这正是多形性的作用。<br>
所以，我们一般创建一个特定的对象（Circle，Square，或者Triangle），把它上溯造型到一个Shape（忽略对象的特殊类型），以后便在程序的剩余部分使用匿名Shape句柄。<br>
作为对多形性和上溯造型的一个简要回顾，可以象下面这样为上述例子编码（若执行这个程序时出现困难，请参考第3章3.1.2小节“赋值”）：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: Shapes.java</font>
<font color=#0000ff>package</font> c11;
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>interface</font> Shape {
  <font color=#0000ff>void</font> draw();
}

<font color=#0000ff>class</font> Circle <font color=#0000ff>implements</font> Shape {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> draw() {
    System.out.println(<font color=#004488>"Circle.draw()"</font>);
  }
}

<font color=#0000ff>class</font> Square <font color=#0000ff>implements</font> Shape {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> draw() {
    System.out.println(<font color=#004488>"Square.draw()"</font>);
  }
}

<font color=#0000ff>class</font> Triangle <font color=#0000ff>implements</font> Shape {
  <font color=#0000ff>public</font> <font color=#0000ff>void</font> draw() {
    System.out.println(<font color=#004488>"Triangle.draw()"</font>);
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> Shapes {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Vector s = <font color=#0000ff>new</font> Vector();
    s.addElement(<font color=#0000ff>new</font> Circle());
    s.addElement(<font color=#0000ff>new</font> Square());
    s.addElement(<font color=#0000ff>new</font> Triangle());
    Enumeration e = s.elements();
    <font color=#0000ff>while</font>(e.hasMoreElements())
      ((Shape)e.nextElement()).draw();
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
基础类可编码成一个interface（接口）、一个abstract（抽象）类或者一个普通类。由于Shape没有真正的成员（亦即有定义的成员），而且并不在意我们创建了一个纯粹的Shape对象，所以最适合和最灵活的表达方式便是用一个接口。而且由于不必设置所有那些abstract关键字，所以整个代码也显得更为清爽。<br>
每个衍生类都覆盖了基础类draw方法，所以具有不同的行为。在main()中创建了特定类型的Shape，然后将其添加到一个Vector。这里正是上溯造型发生的地方，因为Vector只容纳了对象。由于Java中的所有东西（除基本数据类型外）都是对象，所以Vector也能容纳Shape对象。但在上溯造型至Object的过程中，任何特殊的信息都会丢失，其中甚至包括对象是几何形状这一事实。对Vector来说，它们只是Object。<br>
用nextElement()将一个元素从Vector提取出来的时候，情况变得稍微有些复杂。由于Vector只容纳Object，所以nextElement()会自然地产生一个Object句柄。但我们知道它实际是个Shape句柄，而且希望将Shape消息发给那个对象。所以需要用传统的&quot;(Shape)&quot;方式造型成一个Shape。这是RTTI最基本的形式，因为在Java中，所有造型都会在运行期间得到检查，以确保其正确性。那正是RTTI的意义所在：在运行期，对象的类型会得到鉴定。<br>
在目前这种情况下，RTTI造型只实现了一部分：Object造型成Shape，而不是造型成Circle，Square或者Triangle。那是由于我们目前能够肯定的唯一事实就是Vector里充斥着几何形状，而不知它们的具体类别。在编译期间，我们肯定的依据是我们自己的规则；而在编译期间，却是通过造型来肯定这一点。<br>
现在的局面会由多形性控制，而且会为Shape调用适当的方法，以便判断句柄到底是提供Circle，Square，还是提供给Triangle。而且在一般情况下，必须保证采用多形性方案。因为我们希望自己的代码尽可能少知道一些与对象的具体类型有关的情况，只将注意力放在某一类对象（这里是Shape）的常规信息上。只有这样，我们的代码才更易实现、理解以及修改。所以说多形性是面向对象程序设计的一个常规目标。<br>
然而，若碰到一个特殊的程序设计问题，只有在知道常规句柄的确切类型后，才能最容易地解决这个问题，这个时候又该怎么办呢？举个例子来说，我们有时候想让自己的用户将某一具体类型的几何形状（如三角形）全都变成紫色，以便突出显示它们，并快速找出这一类型的所有形状。此时便要用到RTTI技术，用它查询某个Shape句柄引用的准确类型是什么。<br>
<br>
11.1.1 Class对象<br>
为理解RTTI在Java里如何工作，首先必须了解类型信息在运行期是如何表示的。这时要用到一个名为“Class对象”的特殊形式的对象，其中包含了与类有关的信息（有时也把它叫作“元类”）。事实上，我们要用Class对象创建属于某个类的全部“常规”或“普通”对象。<br>
对于作为程序一部分的每个类，它们都有一个Class对象。换言之，每次写一个新类时，同时也会创建一个Class对象（更恰当地说，是保存在一个完全同名的.class文件中）。在运行期，一旦我们想生成那个类的一个对象，用于执行程序的Java虚拟机（JVM）首先就会检查那个类型的Class对象是否已经载入。若尚未载入，JVM就会查找同名的.class文件，并将其载入。所以Java程序启动时并不是完全载入的，这一点与许多传统语言都不同。<br>
一旦那个类型的Class对象进入内存，就用它创建那一类型的所有对象。<br>
若这种说法多少让你产生了一点儿迷惑，或者并没有真正理解它，下面这个示范程序或许能提供进一步的帮助：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: SweetShop.java</font>
<font color=#009900>// Examination of the way the class loader works</font>

<font color=#0000ff>class</font> Candy {
  <font color=#0000ff>static</font> {
    System.out.println(<font color=#004488>"Loading Candy"</font>);
  }
}

<font color=#0000ff>class</font> Gum {
  <font color=#0000ff>static</font> {
    System.out.println(<font color=#004488>"Loading Gum"</font>);
  }
}

<font color=#0000ff>class</font> Cookie {
  <font color=#0000ff>static</font> {
    System.out.println(<font color=#004488>"Loading Cookie"</font>);
  }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> SweetShop {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    System.out.println(<font color=#004488>"inside main"</font>);
    <font color=#0000ff>new</font> Candy();
    System.out.println(<font color=#004488>"After creating Candy"</font>);
    <font color=#0000ff>try</font> {
      Class.forName(<font color=#004488>"Gum"</font>);
    } <font color=#0000ff>catch</font>(ClassNotFoundException e) {
      e.printStackTrace();
    }
    System.out.println(
      <font color=#004488>"After Class.forName(\"</font>Gum\<font color=#004488>")"</font>);
    <font color=#0000ff>new</font> Cookie();
    System.out.println(<font color=#004488>"After creating Cookie"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
对每个类来说（Candy，Gum和Cookie），它们都有一个static从句，用于在类首次载入时执行。相应的信息会打印出来，告诉我们载入是什么时候进行的。在main()中，对象的创建代码位于打印语句之间，以便侦测载入时间。<br>
特别有趣的一行是：<br>
Class.forName(&quot;Gum&quot;);<br>
该方法是Class（即全部Class所从属的）的一个static成员。而Class对象和其他任何对象都是类似的，所以能够获取和控制它的一个句柄（装载模块就是干这件事的）。为获得Class的一个句柄，一个办法是使用forName()。它的作用是取得包含了目标类文本名字的一个String（注意拼写和大小写）。最后返回的是一个Class句柄。<br>
该程序在某个JVM中的输出如下：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>inside main
Loading Candy
After creating Candy
Loading Gum
After Class.forName(<font color=#004488>"Gum"</font>)
Loading Cookie
After creating Cookie</PRE></FONT></BLOCKQUOTE>
<br>
可以看到，每个Class只有在它需要的时候才会载入，而static初始化工作是在类载入时执行的。<br>
非常有趣的是，另一个JVM的输出变成了另一个样子：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Loading Candy
Loading Cookie
inside main
After creating Candy
Loading Gum
After Class.forName(<font color=#004488>"Gum"</font>)
After creating Cookie</PRE></FONT></BLOCKQUOTE>
<br>
看来JVM通过检查main()中的代码，已经预测到了对Candy和Cookie的需要，但却看不到Gum，因为它是通过对forName()的一个调用创建的，而不是通过更典型的new调用。尽管这个JVM也达到了我们希望的效果，因为确实会在我们需要之前载入那些类，但却不能肯定这儿展示的行为百分之百正确。<br>
<br>
1. 类标记<br>
在Java 1.1中，可以采用第二种方式来产生Class对象的句柄：使用“类标记”。对上述程序来说，看起来就象下面这样：<br>
Gum.class;<br>
这样做不仅更加简单，而且更安全，因为它会在编译期间得到检查。由于它取消了对方法调用的需要，所以执行的效率也会更高。<br>
类标记不仅可以应用于普通类，也可以应用于接口、数组以及基本数据类型。除此以外，针对每种基本数据类型的封装器类，它还存在一个名为TYPE的标准字段。TYPE字段的作用是为相关的基本数据类型产生Class对象的一个句柄，如下所示：<br>
<br>
……等价于……<br>
<TABLE BORDER>
<TR VALIGN="TOP">
<TH WIDTH=185 COLSPAN=2 ROWSPAN=1 VALIGN="TOP">
<DIV ALIGN="CENTER"><FONT FACE="Georgia">... is equivalent to
...</FONT><BR></P></DIV>
</TH>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">boolean.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Boolean.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">char.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Character.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">byte.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Byte.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">short.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Short.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">int.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Integer.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">long.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Long.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">float.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Float.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">double.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Double.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<TR VALIGN="TOP">
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">void.class</FONT></TT><BR></P></DIV>
</TD>
<TD>
<DIV ALIGN="LEFT"><P><TT><FONT FACE="Courier New">Void.TYPE</FONT></TT><BR></P></DIV>
</TD>
</TR>
<A NAME="_Toc375545408"></A><A NAME="_Toc408018647"></A></TABLE>
<br>
11.1.2 造型前的检查<br>
迄今为止，我们已知的RTTI形式包括：<br>
(1) 经典造型，如&quot;(Shape)&quot;，它用RTTI确保造型的正确性，并在遇到一个失败的造型后产生一个ClassCastException违例。<br>
(2) 代表对象类型的Class对象。可查询Class对象，获取有用的运行期资料。<br>
<br>
在C++中，经典的&quot;(Shape)&quot;造型并不执行RTTI。它只是简单地告诉编译器将对象当作新类型处理。而Java要执行类型检查，这通常叫作“类型安全”的下溯造型。之所以叫“下溯造型”，是由于类分层结构的历史排列方式造成的。若将一个Circle（圆）造型到一个Shape（几何形状），就叫做上溯造型，因为圆只是几何形状的一个子集。反之，若将Shape造型至Circle，就叫做下溯造型。然而，尽管我们明确知道Circle也是一个Shape，所以编译器能够自动上溯造型，但却不能保证一个Shape肯定是一个Circle。因此，编译器不允许自动下溯造型，除非明确指定一次这样的造型。<br>
RTTI在Java中存在三种形式。关键字instanceof告诉我们对象是不是一个特定类型的实例（Instance即“实例”）。它会返回一个布尔值，以便以问题的形式使用，就象下面这样：<br>
if(x instanceof Dog)<br>
((Dog)x).bark();<br>
将x造型至一个Dog前，上面的if语句会检查对象x是否从属于Dog类。进行造型前，如果没有其他信息可以告诉自己对象的类型，那么instanceof的使用是非常重要的――否则会得到一个ClassCastException违例。<br>
我们最一般的做法是查找一种类型（比如要变成紫色的三角形），但下面这个程序却演示了如何用instanceof标记出所有对象。<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: PetCount.java</font>
<font color=#009900>// Using instanceof</font>
<font color=#0000ff>package</font> c11.petcount;
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>class</font> Pet {}
<font color=#0000ff>class</font> Dog <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Pug <font color=#0000ff>extends</font> Dog {}
<font color=#0000ff>class</font> Cat <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Rodent <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Gerbil <font color=#0000ff>extends</font> Rodent {}
<font color=#0000ff>class</font> Hamster <font color=#0000ff>extends</font> Rodent {}

<font color=#0000ff>class</font> Counter { <font color=#0000ff>int</font> i; }

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PetCount {
  <font color=#0000ff>static</font> String[] typenames = {
    <font color=#004488>"Pet"</font>, <font color=#004488>"Dog"</font>, <font color=#004488>"Pug"</font>, <font color=#004488>"Cat"</font>,
    <font color=#004488>"Rodent"</font>, <font color=#004488>"Gerbil"</font>, <font color=#004488>"Hamster"</font>,
  };
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Vector pets = <font color=#0000ff>new</font> Vector();
    <font color=#0000ff>try</font> {
      Class[] petTypes = {
        Class.forName(<font color=#004488>"c11.petcount.Dog"</font>),
        Class.forName(<font color=#004488>"c11.petcount.Pug"</font>),
        Class.forName(<font color=#004488>"c11.petcount.Cat"</font>),
        Class.forName(<font color=#004488>"c11.petcount.Rodent"</font>),
        Class.forName(<font color=#004488>"c11.petcount.Gerbil"</font>),
        Class.forName(<font color=#004488>"c11.petcount.Hamster"</font>),
      };
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 15; i++)
        pets.addElement(
          petTypes[
            (<font color=#0000ff>int</font>)(Math.random()*petTypes.length)]
            .newInstance());
    } <font color=#0000ff>catch</font>(InstantiationException e) {}
      <font color=#0000ff>catch</font>(IllegalAccessException e) {}
      <font color=#0000ff>catch</font>(ClassNotFoundException e) {}
    Hashtable h = <font color=#0000ff>new</font> Hashtable();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; typenames.length; i++)
      h.put(typenames[i], <font color=#0000ff>new</font> Counter());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++) {
      Object o = pets.elementAt(i);
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Pet)
        ((Counter)h.get(<font color=#004488>"Pet"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Dog)
        ((Counter)h.get(<font color=#004488>"Dog"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Pug)
        ((Counter)h.get(<font color=#004488>"Pug"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Cat)
        ((Counter)h.get(<font color=#004488>"Cat"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Rodent)
        ((Counter)h.get(<font color=#004488>"Rodent"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Gerbil)
        ((Counter)h.get(<font color=#004488>"Gerbil"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Hamster)
        ((Counter)h.get(<font color=#004488>"Hamster"</font>)).i++;
    }
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++)
      System.out.println(
        pets.elementAt(i).getClass().toString());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; typenames.length; i++)
      System.out.println(
        typenames[i] + <font color=#004488>" quantity: "</font> +
        ((Counter)h.get(typenames[i])).i);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
在Java 1.0中，对instanceof有一个比较小的限制：只可将其与一个已命名的类型比较，不能同Class对象作对比。在上述例子中，大家可能觉得将所有那些instanceof表达式写出来是件很麻烦的事情。实际情况正是这样。但在Java 
1.0中，没有办法让这一工作自动进行――不能创建Class的一个Vector，再将其与之比较。大家最终会意识到，如编写了数量众多的instanceof表达式，整个设计都可能出现问题。<br>
当然，这个例子只是一个构想――最好在每个类型里添加一个static数据成员，然后在构建器中令其增值，以便跟踪计数。编写程序时，大家可能想象自己拥有类的源码控制权，能够自由改动它。但由于实际情况并非总是这样，所以RTTI显得特别方便。<br>
<br>
1. 使用类标记<br>
PetCount.java示例可用Java 1.1的类标记重写一遍。得到的结果显得更加明确易懂：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: PetCount2.java</font>
<font color=#009900>// Using Java 1.1 class literals</font>
<font color=#0000ff>package</font> c11.petcount2;
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>class</font> Pet {}
<font color=#0000ff>class</font> Dog <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Pug <font color=#0000ff>extends</font> Dog {}
<font color=#0000ff>class</font> Cat <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Rodent <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Gerbil <font color=#0000ff>extends</font> Rodent {}
<font color=#0000ff>class</font> Hamster <font color=#0000ff>extends</font> Rodent {}

<font color=#0000ff>class</font> Counter { <font color=#0000ff>int</font> i; }

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PetCount2 {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Vector pets = <font color=#0000ff>new</font> Vector();
    Class[] petTypes = {
      <font color=#009900>// Class literals work in Java 1.1+ only:</font>
      Pet.<font color=#0000ff>class</font>,
      Dog.<font color=#0000ff>class</font>,
      Pug.<font color=#0000ff>class</font>,
      Cat.<font color=#0000ff>class</font>,
      Rodent.<font color=#0000ff>class</font>,
      Gerbil.<font color=#0000ff>class</font>,
      Hamster.<font color=#0000ff>class</font>,
    };
    <font color=#0000ff>try</font> {
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 15; i++) {
        <font color=#009900>// Offset by one to eliminate Pet.class:</font>
        <font color=#0000ff>int</font> rnd = 1 + (<font color=#0000ff>int</font>)(
          Math.random() * (petTypes.length - 1));
        pets.addElement(
          petTypes[rnd].newInstance());
      }
    } <font color=#0000ff>catch</font>(InstantiationException e) {}
      <font color=#0000ff>catch</font>(IllegalAccessException e) {}
    Hashtable h = <font color=#0000ff>new</font> Hashtable();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; petTypes.length; i++)
      h.put(petTypes[i].toString(),
        <font color=#0000ff>new</font> Counter());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++) {
      Object o = pets.elementAt(i);
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Pet)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Pet"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Dog)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Dog"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Pug)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Pug"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Cat)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Cat"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Rodent)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Rodent"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Gerbil)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Gerbil"</font>)).i++;
      <font color=#0000ff>if</font>(o <font color=#0000ff>instanceof</font> Hamster)
        ((Counter)h.get(
          <font color=#004488>"class c11.petcount2.Hamster"</font>)).i++;
    }
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++)
      System.out.println(
        pets.elementAt(i).getClass().toString());
    Enumeration keys = h.keys();
    <font color=#0000ff>while</font>(keys.hasMoreElements()) {
      String nm = (String)keys.nextElement();
      Counter cnt = (Counter)h.get(nm);
      System.out.println(
        nm.substring(nm.lastIndexOf('.') + 1) + 
        <font color=#004488>" quantity: "</font> + cnt.i);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
在这里，typenames（类型名）数组已被删除，改为从Class对象里获取类型名称。注意为此而额外做的工作：例如，类名不是Getbil，而是c11.petcount2.Getbil，其中已包含了包的名字。也要注意系统是能够区分类和接口的。<br>
也可以看到，petTypes的创建模块不需要用一个try块包围起来，因为它会在编译期得到检查，不会象Class.forName()那样“掷”出任何违例。<br>
Pet动态创建好以后，可以看到随机数字已得到了限制，位于1和petTypes.length之间，而且不包括零。那是由于零代表的是Pet.class，而且一个普通的Pet对象可能不会有人感兴趣。然而，由于Pet.class是petTypes的一部分，所以所有Pet（宠物）都会算入计数中。<br>
<br>
2. 动态的instanceof<br>
Java 1.1为Class类添加了isInstance方法。利用它可以动态调用instanceof运算符。而在Java 
1.0中，只能静态地调用它（就象前面指出的那样）。因此，所有那些烦人的instanceof语句都可以从PetCount例子中删去了。如下所示：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: PetCount3.java</font>
<font color=#009900>// Using Java 1.1 isInstance()</font>
<font color=#0000ff>package</font> c11.petcount3;
<font color=#0000ff>import</font> java.util.*;

<font color=#0000ff>class</font> Pet {}
<font color=#0000ff>class</font> Dog <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Pug <font color=#0000ff>extends</font> Dog {}
<font color=#0000ff>class</font> Cat <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Rodent <font color=#0000ff>extends</font> Pet {}
<font color=#0000ff>class</font> Gerbil <font color=#0000ff>extends</font> Rodent {}
<font color=#0000ff>class</font> Hamster <font color=#0000ff>extends</font> Rodent {}

<font color=#0000ff>class</font> Counter { <font color=#0000ff>int</font> i; }

<font color=#0000ff>public</font> <font color=#0000ff>class</font> PetCount3 {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Vector pets = <font color=#0000ff>new</font> Vector();
    Class[] petTypes = {
      Pet.<font color=#0000ff>class</font>,
      Dog.<font color=#0000ff>class</font>,
      Pug.<font color=#0000ff>class</font>,
      Cat.<font color=#0000ff>class</font>,
      Rodent.<font color=#0000ff>class</font>,
      Gerbil.<font color=#0000ff>class</font>,
      Hamster.<font color=#0000ff>class</font>,
    };
    <font color=#0000ff>try</font> {
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; 15; i++) {
        <font color=#009900>// Offset by one to eliminate Pet.class:</font>
        <font color=#0000ff>int</font> rnd = 1 + (<font color=#0000ff>int</font>)(
          Math.random() * (petTypes.length - 1));
        pets.addElement(
          petTypes[rnd].newInstance());
      }
    } <font color=#0000ff>catch</font>(InstantiationException e) {}
      <font color=#0000ff>catch</font>(IllegalAccessException e) {}
    Hashtable h = <font color=#0000ff>new</font> Hashtable();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; petTypes.length; i++)
      h.put(petTypes[i].toString(),
        <font color=#0000ff>new</font> Counter());
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++) {
      Object o = pets.elementAt(i);
      <font color=#009900>// Using isInstance to eliminate individual</font>
      <font color=#009900>// instanceof expressions:</font>
      <font color=#0000ff>for</font> (<font color=#0000ff>int</font> j = 0; j &lt; petTypes.length; ++j)
        <font color=#0000ff>if</font> (petTypes[j].isInstance(o)) {
          String key = petTypes[j].toString();
          ((Counter)h.get(key)).i++;
        }
    }
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; pets.size(); i++)
      System.out.println(
        pets.elementAt(i).getClass().toString());
    Enumeration keys = h.keys();
    <font color=#0000ff>while</font>(keys.hasMoreElements()) {
      String nm = (String)keys.nextElement();
      Counter cnt = (Counter)h.get(nm);
      System.out.println(
        nm.substring(nm.lastIndexOf('.') + 1) + 
        <font color=#004488>" quantity: "</font> + cnt.i);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
可以看到，Java 1.1的isInstance()方法已取消了对instanceof表达式的需要。此外，这也意味着一旦要求添加新类型宠物，只需简单地改变petTypes数组即可；毋需改动程序剩余的部分（但在使用instanceof时却是必需的）。<br>
<br>
11.2 RTTI语法<br>
Java用Class对象实现自己的RTTI功能――即便我们要做的只是象造型那样的一些工作。Class类也提供了其他大量方式，以方便我们使用RTTI。<br>
首先必须获得指向适当Class对象的的一个句柄。就象前例演示的那样，一个办法是用一个字串以及Class.forName()方法。这是非常方便的，因为不需要那种类型的一个对象来获取Class句柄。然而，对于自己感兴趣的类型，如果已有了它的一个对象，那么为了取得Class句柄，可调用属于Object根类一部分的一个方法：getClass()。它的作用是返回一个特定的Class句柄，用来表示对象的实际类型。Class提供了几个有趣且较为有用的方法，从下例即可看出：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: ToyTest.java</font>
<font color=#009900>// Testing class Class</font>

<font color=#0000ff>interface</font> HasBatteries {}
<font color=#0000ff>interface</font> Waterproof {}
<font color=#0000ff>interface</font> ShootsThings {}
<font color=#0000ff>class</font> Toy {
  <font color=#009900>// Comment out the following default</font>
  <font color=#009900>// constructor to see </font>
  <font color=#009900>// NoSuchMethodError from (*1*)</font>
  Toy() {} 
  Toy(<font color=#0000ff>int</font> i) {} 
}

<font color=#0000ff>class</font> FancyToy <font color=#0000ff>extends</font> Toy 
    <font color=#0000ff>implements</font> HasBatteries, 
      Waterproof, ShootsThings {
  FancyToy() { <font color=#0000ff>super</font>(1); }
}

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ToyTest {
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    Class c = <font color=#0000ff>null</font>;
    <font color=#0000ff>try</font> {
      c = Class.forName(<font color=#004488>"FancyToy"</font>);
    } <font color=#0000ff>catch</font>(ClassNotFoundException e) {}
    printInfo(c);
    Class[] faces = c.getInterfaces();
    <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; faces.length; i++)
      printInfo(faces[i]);
    Class cy = c.getSuperclass();
    Object o = <font color=#0000ff>null</font>;
    <font color=#0000ff>try</font> {
      <font color=#009900>// Requires default constructor:</font>
      o = cy.newInstance(); <font color=#009900>// (*1*)</font>
    } <font color=#0000ff>catch</font>(InstantiationException e) {}
      <font color=#0000ff>catch</font>(IllegalAccessException e) {}
    printInfo(o.getClass());
  }
  <font color=#0000ff>static</font> <font color=#0000ff>void</font> printInfo(Class cc) {
    System.out.println(
      <font color=#004488>"Class name: "</font> + cc.getName() +
      <font color=#004488>" is interface? ["</font> +
      cc.isInterface() + <font color=#004488>"]"</font>);
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
从中可以看出，class FancyToy相当复杂，因为它从Toy中继承，并实现了HasBatteries，Waterproof以及ShootsThings的接口。在main()中创建了一个Class句柄，并用位于相应try块内的forName()初始化成FancyToy。<br>
Class.getInterfaces方法会返回Class对象的一个数组，用于表示包含在Class对象内的接口。<br>
若有一个Class对象，也可以用getSuperclass()查询该对象的直接基础类是什么。当然，这种做会返回一个Class句柄，可用它作进一步的查询。这意味着在运行期的时候，完全有机会调查到对象的完整层次结构。<br>
若从表面看，Class的newInstance()方法似乎是克隆（clone()）一个对象的另一种手段。但两者是有区别的。利用newInstance()，我们可在没有现成对象供“克隆”的情况下新建一个对象。就象上面的程序演示的那样，当时没有Toy对象，只有cy――即y的Class对象的一个句柄。利用它可以实现“虚拟构建器”。换言之，我们表达：“尽管我不知道你的准确类型是什么，但请你无论如何都正确地创建自己。”在上述例子中，cy只是一个Class句柄，编译期间并不知道进一步的类型信息。一旦新建了一个实例后，可以得到Object句柄。但那个句柄指向一个Toy对象。当然，如果要将除Object能够接收的其他任何消息发出去，首先必须进行一些调查研究，再进行造型。除此以外，用newInstance()创建的类必须有一个默认构建器。没有办法用newInstance()创建拥有非默认构建器的对象，所以在Java 
1.0中可能存在一些限制。然而，Java 1.1的“反射”API（下一节讨论）却允许我们动态地使用类里的任何构建器。<br>
程序中的最后一个方法是printInfo()，它取得一个Class句柄，通过getName()获得它的名字，并用interface()调查它是不是一个接口。<br>
该程序的输出如下：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE>Class name: FancyToy is <font color=#0000ff>interface</font>? [<font color=#0000ff>false</font>]
Class name: HasBatteries is <font color=#0000ff>interface</font>? [<font color=#0000ff>true</font>]
Class name: Waterproof is <font color=#0000ff>interface</font>? [<font color=#0000ff>true</font>]
Class name: ShootsThings is <font color=#0000ff>interface</font>? [<font color=#0000ff>true</font>]
Class name: Toy is <font color=#0000ff>interface</font>? [<font color=#0000ff>false</font>]</PRE></FONT></BLOCKQUOTE>
<br>
所以利用Class对象，我们几乎能将一个对象的祖宗十八代都调查出来。<br>
<br>
11.3 反射：运行期类信息<br>
如果不知道一个对象的准确类型，RTTI会帮助我们调查。但却有一个限制：类型必须是在编译期间已知的，否则就不能用RTTI调查它，进而无法展开下一步的工作。换言之，编译器必须明确知道RTTI要处理的所有类。<br>
从表面看，这似乎并不是一个很大的限制，但假若得到的是一个不在自己程序空间内的对象的句柄，这时又会怎样呢？事实上，对象的类即使在编译期间也不可由我们的程序使用。例如，假设我们从磁盘或者网络获得一系列字节，而且被告知那些字节代表一个类。由于编译器在编译代码时并不知道那个类的情况，所以怎样才能顺利地使用这个类呢？<br>
在传统的程序设计环境中，出现这种情况的概率或许很小。但当我们转移到一个规模更大的编程世界中，却必须对这个问题加以高度重视。第一个要注意的是基于组件的程序设计。在这种环境下，我们用“快速应用开发”（RAD）模型来构建程序项目。RAD一般是在应用程序构建工具中内建的。这是编制程序的一种可视途径（在屏幕上以窗体的形式出现）。可将代表不同组件的图标拖曳到窗体中。随后，通过设定这些组件的属性或者值，进行正确的配置。设计期间的配置要求任何组件都是可以“例示”的（即可以自由获得它们的实例）。这些组件也要揭示出自己的一部分内容，允许程序员读取和设置各种值。此外，用于控制GUI事件的组件必须揭示出与相应的方法有关的信息，以便RAD环境帮助程序员用自己的代码覆盖这些由事件驱动的方法。“反射”提供了一种特殊的机制，可以侦测可用的方法，并产生方法名。通过Java 
Beans（第13章将详细介绍），Java 1.1为这种基于组件的程序设计提供了一个基础结构。<br>
在运行期查询类信息的另一个原动力是通过网络创建与执行位于远程系统上的对象。这就叫作“远程方法调用”（RMI），它允许Java程序（版本1.1以上）使用由多台机器发布或分布的对象。这种对象的分布可能是由多方面的原因引起的：可能要做一件计算密集型的工作，想对它进行分割，让处于空闲状态的其他机器分担部分工作，从而加快处理进度。某些情况下，可能需要将用于控制特定类型任务（比如多层客户／服务器架构中的“运作规则”）的代码放置在一台特殊的机器上，使这台机器成为对那些行动进行描述的一个通用储藏所。而且可以方便地修改这个场所，使其对系统内的所有方面产生影响（这是一种特别有用的设计思路，因为机器是独立存在的，所以能轻易修改软件！）。分布式计算也能更充分地发挥某些专用硬件的作用，它们特别擅长执行一些特定的任务――例如矩阵逆转――但对常规编程来说却显得太夸张或者太昂贵了。<br>
在Java 1.1中，Class类（本章前面已有详细论述）得到了扩展，可以支持“反射”的概念。针对Field，Method以及Constructor类（每个都实现了Memberinterface――成员接口），它们都新增了一个库：java.lang.reflect。这些类型的对象都是JVM在运行期创建的，用于代表未知类里对应的成员。这样便可用构建器创建新对象，用get()和set()方法读取和修改与Field对象关联的字段，以及用invoke()方法调用与Method对象关联的方法。此外，我们可调用方法getFields()，getMethods()，getConstructors()，分别返回用于表示字段、方法以及构建器的对象数组（在联机文档中，还可找到与Class类有关的更多的资料）。因此，匿名对象的类信息可在运行期被完整的揭露出来，而在编译期间不需要知道任何东西。<br>
大家要认识的很重要的一点是“反射”并没有什么神奇的地方。通过“反射”同一个未知类型的对象打交道时，JVM只是简单地检查那个对象，并调查它从属于哪个特定的类（就象以前的RTTI那样）。但在这之后，在我们做其他任何事情之前，Class对象必须载入。因此，用于那种特定类型的.class文件必须能由JVM调用（要么在本地机器内，要么可以通过网络取得）。所以RTTI和“反射”之间唯一的区别就是对RTTI来说，编译器会在编译期打开和检查.class文件。换句话说，我们可以用“普通”方式调用一个对象的所有方法；但对“反射”来说，.class文件在编译期间是不可使用的，而是由运行期环境打开和检查。<br>
<br>
11.3.1 一个类方法提取器<br>
很少需要直接使用反射工具；之所以在语言中提供它们，仅仅是为了支持其他Java特性，比如对象序列化（第10章介绍）、Java 
Beans以及RMI（本章后面介绍）。但是，我们许多时候仍然需要动态提取与一个类有关的资料。其中特别有用的工具便是一个类方法提取器。正如前面指出的那样，若检视类定义源码或者联机文档，只能看到在那个类定义中被定义或覆盖的方法，基础类那里还有大量资料拿不到。幸运的是，“反射”做到了这一点，可用它写一个简单的工具，令其自动展示整个接口。下面便是具体的程序：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: ShowMethods.java</font>
<font color=#009900>// Using Java 1.1 reflection to show all the </font>
<font color=#009900>// methods of a class, even if the methods are </font>
<font color=#009900>// defined in the base class.</font>
<font color=#0000ff>import</font> java.lang.reflect.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShowMethods {
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> String usage =
    <font color=#004488>"usage: \n"</font> +
    <font color=#004488>"ShowMethods qualified.class.name\n"</font> +
    <font color=#004488>"To show all methods in class or: \n"</font> +
    <font color=#004488>"ShowMethods qualified.class.name word\n"</font> +
    <font color=#004488>"To search for methods involving 'word'"</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(args.length &lt; 1) {
      System.out.println(usage);
      System.exit(0);
    }
    <font color=#0000ff>try</font> {
      Class c = Class.forName(args[0]);
      Method[] m = c.getMethods();
      Constructor[] ctor = c.getConstructors();
      <font color=#0000ff>if</font>(args.length == 1) {
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; m.length; i++)
          System.out.println(m[i].toString());
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; ctor.length; i++)
          System.out.println(ctor[i].toString());
      } 
      <font color=#0000ff>else</font> {
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; m.length; i++)
          <font color=#0000ff>if</font>(m[i].toString()
             .indexOf(args[1])!= -1)
            System.out.println(m[i].toString());
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; ctor.length; i++)
          <font color=#0000ff>if</font>(ctor[i].toString()
             .indexOf(args[1])!= -1)
          System.out.println(ctor[i].toString());
      }
    } <font color=#0000ff>catch</font> (ClassNotFoundException e) {
      System.out.println(<font color=#004488>"No such class: "</font> + e);
    }
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
Class方法getMethods()和getConstructors()可以分别返回Method和Constructor的一个数组。每个类都提供了进一步的方法，可解析出它们所代表的方法的名字、参数以及返回值。但也可以象这样一样只使用toString()，生成一个含有完整方法签名的字串。代码剩余的部分只是用于提取命令行信息，判断特定的签名是否与我们的目标字串相符（使用indexOf()），并打印出结果。<br>
这里便用到了“反射”技术，因为由Class.forName()产生的结果不能在编译期间获知，所以所有方法签名信息都会在运行期间提取。若研究一下联机文档中关于“反射”（Reflection）的那部分文字，就会发现它已提供了足够多的支持，可对一个编译期完全未知的对象进行实际的设置以及发出方法调用。同样地，这也属于几乎完全不用我们操心的一个步骤――Java自己会利用这种支持，所以程序设计环境能够控制Java 
Beans――但它无论如何都是非常有趣的。<br>
一个有趣的试验是运行java ShowMehods ShowMethods。这样做可得到一个列表，其中包括一个public默认构建器，尽管我们在代码中看见并没有定义一个构建器。我们看到的是由编译器自动合成的那一个构建器。如果随之将ShowMethods设为一个非public类（即换成“友好”类），合成的默认构建器便不会在输出结果中出现。合成的默认构建器会自动获得与类一样的访问权限。<br>
ShowMethods的输出仍然有些“不爽”。例如，下面是通过调用java 
ShowMethods java.lang.String得到的输出结果的一部分：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#0000ff>public</font> <font color=#0000ff>boolean</font> 
  java.lang.String.startsWith(java.lang.String,<font color=#0000ff>int</font>)
<font color=#0000ff>public</font> <font color=#0000ff>boolean</font> 
  java.lang.String.startsWith(java.lang.String)
<font color=#0000ff>public</font> <font color=#0000ff>boolean</font>
  java.lang.String.endsWith(java.lang.String)</PRE></FONT></BLOCKQUOTE>
<br>
若能去掉象java.lang这样的限定词，结果显然会更令人满意。有鉴于此，可引入上一章介绍的StreamTokenizer类，解决这个问题：<br>
<BLOCKQUOTE><FONT SIZE = "+1"><PRE><font color=#009900>//: ShowMethodsClean.java</font>
<font color=#009900>// ShowMethods with the qualifiers stripped</font>
<font color=#009900>// to make the results easier to read</font>
<font color=#0000ff>import</font> java.lang.reflect.*;
<font color=#0000ff>import</font> java.io.*;

<font color=#0000ff>public</font> <font color=#0000ff>class</font> ShowMethodsClean {
  <font color=#0000ff>static</font> <font color=#0000ff>final</font> String usage =
    <font color=#004488>"usage: \n"</font> +
    <font color=#004488>"ShowMethodsClean qualified.class.name\n"</font> +
    <font color=#004488>"To show all methods in class or: \n"</font> +
    <font color=#004488>"ShowMethodsClean qualif.class.name word\n"</font> +
    <font color=#004488>"To search for methods involving 'word'"</font>;
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> <font color=#0000ff>void</font> main(String[] args) {
    <font color=#0000ff>if</font>(args.length &lt; 1) {
      System.out.println(usage);
      System.exit(0);
    }
    <font color=#0000ff>try</font> {
      Class c = Class.forName(args[0]);
      Method[] m = c.getMethods();
      Constructor[] ctor = c.getConstructors();
      <font color=#009900>// Convert to an array of cleaned Strings:</font>
      String[] n = 
        <font color=#0000ff>new</font> String[m.length + ctor.length];
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; m.length; i++) {
        String s = m[i].toString();
        n[i] = StripQualifiers.strip(s);
      }
      <font color=#0000ff>for</font>(<font color=#0000ff>int</font> i = 0; i &lt; ctor.length; i++) {
        String s = ctor[i].toString();
        n[i + m.length] = 
          StripQualifiers.strip(s);
      }
      <font color=#0000ff>if</font>(args.length == 1)
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; n.length; i++)
          System.out.println(n[i]);
      <font color=#0000ff>else</font>
        <font color=#0000ff>for</font> (<font color=#0000ff>int</font> i = 0; i &lt; n.length; i++)
          <font color=#0000ff>if</font>(n[i].indexOf(args[1])!= -1)
            System.out.println(n[i]);
    } <font color=#0000ff>catch</font> (ClassNotFoundException e) {
      System.out.println(<font color=#004488>"No such class: "</font> + e);
    }
  }
}

<font color=#0000ff>class</font> StripQualifiers {
  <font color=#0000ff>private</font> StreamTokenizer st;
  <font color=#0000ff>public</font> StripQualifiers(String qualified) {
      st = <font color=#0000ff>new</font> StreamTokenizer(
        <font color=#0000ff>new</font> StringReader(qualified));
      st.ordinaryChar(' '); <font color=#009900>// Keep the spaces</font>
  }
  <font color=#0000ff>public</font> String getNext() {
    String s = <font color=#0000ff>null</font>;
    <font color=#0000ff>try</font> {
      <font color=#0000ff>if</font>(st.nextToken() !=
            StreamTokenizer.TT_EOF) {
        <font color=#0000ff>switch</font>(st.ttype) {
          <font color=#0000ff>case</font> StreamTokenizer.TT_EOL:
            s = <font color=#0000ff>null</font>;
            <font color=#0000ff>break</font>;
          <font color=#0000ff>case</font> StreamTokenizer.TT_NUMBER:
            s = Double.toString(st.nval);
            <font color=#0000ff>break</font>;
          <font color=#0000ff>case</font> StreamTokenizer.TT_WORD:
            s = <font color=#0000ff>new</font> String(st.sval);
            <font color=#0000ff>break</font>;
          <font color=#0000ff>default</font>: <font color=#009900>// single character in ttype</font>
            s = String.valueOf((<font color=#0000ff>char</font>)st.ttype);
        }
      }
    } <font color=#0000ff>catch</font>(IOException e) {
      System.out.println(e);
    }
    <font color=#0000ff>return</font> s;
  }
  <font color=#0000ff>public</font> <font color=#0000ff>static</font> String strip(String qualified) {
    StripQualifiers sq = 
      <font color=#0000ff>new</font> StripQualifiers(qualified);
    String s = <font color=#004488>""</font>, si;
    <font color=#0000ff>while</font>((si = sq.getNext()) != <font color=#0000ff>null</font>) {
      <font color=#0000ff>int</font> lastDot = si.lastIndexOf('.');
      <font color=#0000ff>if</font>(lastDot != -1)
        si = si.substring(lastDot + 1);
      s += si;
    }
    <font color=#0000ff>return</font> s;
  }
} <font color=#009900>///:~</font></PRE></FONT></BLOCKQUOTE>
<br>
ShowMethodsClean方法非常接近前一个ShowMethods，只是它取得了Method和Constructor数组，并将它们转换成单个String数组。随后，每个这样的String对象都在StripQualifiers.Strip()里“过”一遍，删除所有方法限定词。正如大家看到的那样，此时用到了StreamTokenizer和String来完成这个工作。<br>
假如记不得一个类是否有一个特定的方法，而且不想在联机文档里逐步检查类结构，或者不知道那个类是否能对某个对象（如Color对象）做某件事情，该工具便可节省大量编程时间。<br>
第17章提供了这个程序的一个GUI版本，可在自己写代码的时候运行它，以便快速查找需要的东西。<br>
<br>
11.4 总结<br>
利用RTTI可根据一个匿名的基础类句柄调查出类型信息。但正是由于这个原因，新手们极易误用它，因为有些时候多形性方法便足够了。对那些以前习惯程序化编程的人来说，极易将他们的程序组织成一系列switch语句。他们可能用RTTI做到这一点，从而在代码开发和维护中损失多形性技术的重要价值。Java的要求是让我们尽可能地采用多形性，只有在极特别的情况下才使用RTTI。<br>
但为了利用多形性，要求我们拥有对基础类定义的控制权，因为有些时候在程序范围之内，可能发现基础类并未包括我们想要的方法。若基础类来自一个库，或者由别的什么东西控制着，RTTI便是一种很好的解决方案：可继承一个新类型，然后添加自己的额外方法。在代码的其他地方，可以侦测自己的特定类型，并调用那个特殊的方法。这样做不会破坏多形性以及程序的扩展能力，因为新类型的添加不要求查找程序中的switch语句。但在需要新特性的主体中添加新代码时，就必须用RTTI侦测自己特定的类型。<br>
从某个特定类的利益的角度出发，在基础类里加入一个特性后，可能意味着从那个基础类衍生的其他所有类都必须获得一些无意义的“鸡肋”。这使得接口变得含义模糊。若有人从那个基础类继承，且必须覆盖抽象方法，这一现象便会使他们陷入困扰。比如现在用一个类结构来表示乐器（Instrument）。假定我们想清洁管弦乐队中所有适当乐器的通气音栓（Spit 
Valve），此时的一个办法是在基础类Instrument中置入一个ClearSpitValve()方法。但这样做会造成一个误区，因为它暗示着打击乐器和电子乐器中也有音栓。针对这种情况，RTTI提供了一个更合理的解决方案，可将方法置入特定的类中（此时是Wind，即“通气口”）――这样做是可行的。但事实上一种更合理的方案是将prepareInstrument()置入基础类中。初学者刚开始时往往看不到这一点，一般会认定自己必须使用RTTI。<br>
最后，RTTI有时能解决效率问题。若代码大量运用了多形性，但其中的一个对象在执行效率上很有问题，便可用RTTI找出那个类型，然后写一段适当的代码，改进其效率。<br>
<br>
11.5 练习<br>
(1) 
写一个方法，向它传递一个对象，循环打印出对象层次结构中的所有类。<br>
(2) 在ToyTest.java中，将Toy的默认构建器标记成注释信息，解释随之发生的事情。<br>
(3) 新建一种类型的集合，令其使用一个Vector。捕获置入其中的第一个对象的类型，然后从那时起只允许用户插入那种类型的对象。<br>
(4) 写一个程序，判断一个Char数组属于基本数据类型，还是一个真正的对象。<br>
(5) 根据本章的说明，实现clearSpitValve()。<br>
(6) 实现本章介绍的rotate(Shape)方法，令其检查是否已经旋转了一个圆（若已旋转，就不再执行旋转操作）。</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/inmotion/inmhorsa.gif" width="300" height="10"></p>

<p align="center"><a href="http://www.bruceeckel.com">英文版主页</a> | <a href="../index.htm">中文版主页</a> |  <a href="../index.htm">详细目录</a> 
| <a href="../about/index.htm">关于译者</a></p>
</body>
</html>
