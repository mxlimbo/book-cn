<html>
<head>
<title>网络编程基础篇之ASP</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="ebook.css" type="text/css">
</head>
<body leftmargin="0" topmargin="0" background="bg.jpg">
<table width="100%" cellspacing="0">
  <tr>
    <td valign="top" bgcolor="#FFD26A">
      <table width="180" height="100%">
        <tr align="center" valign="top">
          <td>
            <p><img src="image.jpg"></p>
            <p><a href="list.htm"><img src="bd.gif" border="0"></a><br>
              <a href="08.htm"><img src="ap.gif" border="0"></a></p>
          </td>
        </tr>
        <tr align="center" valign="bottom">
          <td><a href="10.htm"><img src="np.gif" border="0"></a></td>
        </tr>
      </table>
    </td>
    <td valign="top">
      <blockquote>
        <div align="center"><img src="title.gif"></div>
        <!--正文开始-->
<p><font color="#0000FF">9、包含文件</font></p>   
    <p>SSI 指令为用户提供在 Web    
    服务器处理之前将一个文件的内容插入到另一个文件的方法。ASP    
    只使用这一机制的 #include 指令。要在 .asp    
    文件中插入一个文件，使用下面的语法：</p>   
    <p>&lt;!--#include virtual | file ="filename"--&gt; </p>   
    <p>virtual 和 file    
    关键字指示用来包含该文件的路径的类型，filename    
    是您想包含的文件的路径和名称。</p>   
    <p>被包含文件不要求专门的文件扩展名；但是，为被包含文件赋予    
    .inc 扩展名以便和其他类型文件相区分是一个良好的编程习惯。</p>   
    <p>使用 Virtual 关键字</p>   
    <p>使用 Virtual    
    关键字指出路径开始于虚拟目录。例如，如果一个被命名为 Footer.inc    
    的文件属于一个名为 /Myapp 的虚拟目录，则下面的一行将把 Footer.inc    
    的内容插入到包含该行的文件中：</p>   
    <p>&lt;!--#include virtual ="/myapp/footer.inc"--&gt; </p>   
    <p>使用 File 关键字</p>   
    <p>使用 file    
    关键字指示使用相对路径。相对路径开始于含有该包含文件的目录。例如，如果您的文件位于目录    
    Myapp 中，而文件 Header1.inc 在 Myapp\Headers 中，下面的一行将把    
    Header1.inc 插入到您的文件中：</p>   
    <p>&lt;!--#include file ="headers/header1.inc"--&gt;</p>   
    <p>注意，到被包含文件 Headers/header1.inc    
    的路径是相对于包含文件的；如果包含 #include 语句的脚本不在 /Myapp    
    目录中，那么该语句将不起作用。</p>   
    <p>如果在 Internet 
    服务管理器中的选项被选中，则也可以使用 file    
    关键字和 ../    
    语法包含父目录即上一层目录中的文件。有关命令，请参阅 配置 ASP    
    应用程序。</p>   
    <p>被包含文件的位置</p>   
    <p>被包含文件可以在您的 Web    
    站点内的某个目录中，也可以在您的 Web    
    站点之外。通常，您应该使被包含文件位于 Web    
    站点的目录中。如果一个被包含文件位于您的 Web    
    站点内，则当浏览器下次请求包含文件时，将显示对被包含文件的改变。但是，如果被包含文件位于您的    
    Web 站点之外，直到 ASP 应用程序重新启动或 Web    
    服务器重新启动时，这种改变才能体现出来。ASP    
    检测在应用程序命名空间中（在应用程序的起始目录下）的任何包含文件的改变。</p>   
    <p>包含文件：提示和警告</p>   
    <p>一个被包含文件也可以包含其他的文件。如果 #include    
    指令没有导致循环，一个 .asp    
    文件可以多次包括同一个文件。例如，如果文件 First.asp 包含文件    
    Second.inc，则 Second.inc 一定不能再包含 First.asp。一个文件也不能包含自身。ASP    
    检测此类循环或嵌套错误，并在检测到时产生一个错误消息，同时停止处理被请求的    
    .asp 文件。</p>   
    <p>ASP    
    在执行脚本命令之前包含文件。因此，不能用脚本命令去创建被包含文件的名称。例如，下面的脚本将不能打开    
    Header1.inc，因为 ASP 会在它分配一个文件名给变量 name 之前先执行    
    #include 指令。</p>   
    <p>&lt;!-- This script will fail --&gt;</p>   
    <p>&lt;% name=(header1 &amp; ".inc") %&gt; </p>   
    <p>&lt;!--#include file="&lt;%= name %&gt;"--&gt;</p>   
    <p>脚本命令和过程必须完全包含在脚本定界符 &lt;% 和    
    %&gt; 、HTML 标记 &lt;SCRIPT&gt; 和 &lt;/SCRIPT&gt; 或 HTML 标记 &lt;OBJECT&gt; 和    
    &lt;/OBJECT&gt; 中。也就是说，不能在一个 .asp    
    包含文件中打开一个脚本定界符，然后在一个被包含的文件中才关闭该定界符；脚本或脚本命令必须是一个完整的单元。例如，下面的脚本将无法运行：</p>   
    <p>&lt;!-- This script will fail --&gt;</p>   
    <p>&lt;%</p>   
    <p>For i = 1 To n</p>   
    <p>statements in main file</p>   
    <p>&lt;!--#include file="header1.inc" --&gt;</p>   
    <p>Next</p>   
    <p>%&gt; </p>   
    <p>下面的脚本将正常运行：</p>   
    <p>&lt;% </p>   
    <p>For i = 1 to n</p>   
    <p>statements in main file</p>   
    <p>%&gt; </p>   
    <p>&lt;!--#include file="header1.inc" --&gt;</p>   
    <p>&lt;% Next %&gt; </p>   
        <p>-----------------------------------------------------------------------</p>   
    <p>使用 HTML 表格</p>   
    <p>使用 ASP Request    
    对象，您可以创建一个简单而功能强大的脚本来收集和处理 HTML    
    表格数据。在本主题中，您将不仅学会如何创建基本的表格处理脚本，而且还将获得用于验证    
    Web 服务器和用户浏览器上的表格信息的一些有用技术。</p>   
    <p>关于 HTML 表格</p>   
    <p>HTML 表格是收集 Web 信息最常用的方法，是在 Web    
    页上提供用户界面控件的特殊的 HTML    
    标记的排列。文本框、按钮和复选框都是典型的控件，这些控件使用户和    
    Web 页实现交互，并且将信息提交给 Web 服务器。</p>   
    <p>下面的 HTML    
    示例产生一个表格，在表格中，用户可以输入姓名、年龄并包含一个将这些信息提交给    
    Web 服务器的按钮。该表格也包含了一个隐含的控件（Web    
    浏览器不显示），可以用该控件向 Web 浏览器传递附加信息。</p>   
    <p>&lt;FORM METHOD="POST" ACTION="myfile.asp"&gt;</p>   
    <p>&lt;INPUT TYPE="text" NAME="firstname"&gt; </p>   
    <p>&lt;INPUT TYPE="text" NAME="lastname"&gt;</p>   
    <p>&lt;INPUT TYPE="text" NAME="age"&gt;</p>   
    <p>&lt;INPUT TYPE="hidden" NAME="userstatus" VALUE=    
    "new"&gt;</p>   
    <p>&lt;INPUT TYPE="submit" VALUE="Enter"&gt;</p>   
    <p>&lt;/FORM&gt;</p>   
    <p>处理 ASP 输入的表格</p>   
    <p>在表格向 Web 服务器提交信息时，用户的 Web    
    浏览器请求用 HTML &lt;FORM &gt; 标记的 ACTION 属性所指定的 .asp    
    文件（在前面的例子中，该文件被称为 Myfile.asp）。.asp    
    文件包含了处理表格值（如显示结果表或从数据库查询信息）的脚本。</p>   
    <p>可以通过三种途径用 .asp 文件收集 HTML 表格的值</p>   
    <p>静态的 .htm 文件可以包含一个将其数值邮送给 .asp    
    文件的表格。 </p>   
    <p>.asp 文件可以创建一个将其信息邮送给另一个 .asp    
    文件的表格。 </p>   
    <p>.asp    
    文件可以创建一个将其信息邮送给自身的表格，即包含该表格的文件。    
    </p>   
    <p>前两个方法的操作方式相同，当表格与网关程序交互时，除    
    ASP 之外，可以包含读取和响应用户选择的命令。</p>   
    <p>创建一个包含表格定义且传送信息给自身的 .asp    
    文件较复杂，但却是有很强功能的处理表格的方法。这一过程在    
    验证表格输入 中演示。</p>   
    <p>获得表格输入</p>   
    <p>ASP Request    
    对象提供了两种集合，在很大程度上简化了检索附加在 URL    
    请求上的表格信息的任务。</p>   
    <p>QueryString 集合</p>   
    <p>QueryString 集合获取作为跟在请求的 URL    
    的问号后面的文本传递给 Web 服务器的值。通过使用 HTTP GET    
    方法或手工将表格的值添加到 URL，表格的值可以被附加在请求的 URL    
    之后。</p>   
    <p>例如，如果先前的表格示例使用 GET 方法 (ACTION =    
    "GET") 且用户键入 Jeff、Smith 和 30，那么下面的 URL    
    请求将被发送给服务器：</p>   
    <p>http://scripts/Myfile.asp?firstname=Jeff&amp;lastname=Smith&amp;age=30&amp;userstatus=new</p>   
    <p>Myfile.asp 包含下面的表格处理脚本：</p>   
    <p>Hello, &lt;%= Request.QueryString("firstname") %&gt; &lt;%=    
    Request.QueryString("lastname") %&gt;. </p>   
    <p>You are &lt;%= Request.QueryString("age") %&gt; years old.</p>   
    <p>&lt;%</p>   
    <p>If Request.QueryString("userstatus") = "new user"    
    then </p>   
    <p>Response.Write"This is your first visit to this Web site!"</p>   
    <p>End if </p>   
    <p>%&gt; </p>   
    <p>在这种情况下，Web 服务器将返回下面的文本给用户的    
    Web 浏览器：</p>   
    <p>Hello, Jeff Smith. You are 30 years old. This is your first visit to    
    this Web site!</p>   
    <p>QueryString    
    集合有一个可选参数，可用来访问显示在请求正文中的多个值中的一个。也可以使用    
    Count 属性计算一个特殊类型的值的出现次数。</p>   
    <p>例如，表格包含一个多项目的列表框可以提交下面的请求：</p>   
    <p>http://list.asp?food=apples&amp;food=olives&amp;food=bread</p>   
    <p>您也可以使用下面的命令去对多个值计数：</p>   
    <p>Request.QueryString("food").Count</p>   
    <p>如果想显示多个值的类型，List.asp    
    应包含下面的脚本；</p>   
    <p>&lt;%Total = Request.QueryString("food").Count%&gt;</p>   
    <p>&lt;%For i = 1 to Total%&gt;</p>   
    <p>&lt;%= Request.QueryString("food")(i) %&gt; &lt;BR&gt;</p>   
    <p>&lt;%Next%&gt;</p>   
    <p>上述脚本将显示： </p>   
    <p>apples</p>   
    <p>olives</p>   
    <p>bread</p>   
    <p>Form 集合</p>   
    <p>当使用 HTTP GET 方法去向 Web    
    服务器传递长而复杂的表格值时，将可能丢失信息。大多数的 Web    
    服务器倾向于严格控制 URL 查询字符串的长度，以便用 GET    
    方法传送的冗长的表格值被截断。如果您需要从表格发送大量信息到    
    Web 服务器，就必须使用 HTTP POST 方法。此法用于在 HTTP    
    请求正文中发送表格数据，而且发送的字符的个数可以无限多。也可以使用    
    ASP Request 对象的 Form 集合检索用 POST 方法发送的值。</p>   
    <p>Form 集合与 QueryString    
    集合存储数值的方式相同。例如，如果用户用一长串名称填充表格，您就可以用下面的脚本检索这些名称：</p>   
    <p>&lt;% For i = 1 to Request.Form.Count %&gt;</p>   
    <p>&lt;% =Request.Form("names")(i) %&gt;</p>   
    <p>&lt;% Next %&gt;</p>   
    <p>验证表格输入</p>   
    <p>一个好的表格处理脚本在处理数据前，应先验证输入表格的信息是否有效。验证脚本可以检验用户输入到表格的信息类型是否正确。例如，如果您的    
    Web    
    站点包含一个表格，该表格允许用户计算财务信息，那么在处理结果之前，需要验证用户确实输入了数值信息而不是文本。</p>   
    <p>一个非常方便的验证表格输入的方法是创建一个向自身传递信息的表格。在这种情况下，.asp    
    文件包含可获取信息的表格。例如，下面的脚本通过向自身传递信息来验证用户是否在    
    "age" 表格字段中输入了数值：</p>   
    <p>&lt;% If Isnumeric(Request.QueryString("Age")) then %&gt; </p>   
    <p>&lt;p&gt;Hello, your age is    
    &lt;%=Request.QueryString("age")%&gt;</p>   
    <p>&lt;%Else %&gt;</p>   
    <p>&lt;p&gt;Please enter a numerical age.</p>   
    <p>&lt;%End If %&gt; </p>   
    <p>&lt;FORM METHOD= "POST" ACTION="verify.asp" &gt; </p>   
    <p>Name: &lt;INPUT TYPE="text" NAME="Name" &gt;</p>   
    <p>Age: &lt;INPUT TYPE="text" NAME="Age" &gt;</p>   
    <p>&lt;INPUT TYPE="submit" VALUE="Enter"&gt; </p>   
    <p>&lt;/FORM&gt;</p>   
    <p>在这个例子中，脚本也在包含表格的同一 Verify.asp    
    文件中。表格通过在 ACTION 属性中指定 Verify.asp 向自身传送信息。</p>   
    <p>您也可以创建客户端脚本来检验用户是否输入了有效的信息。验证用户在    
    Web    
    浏览器上的输入除了更迅速地向用户提示表格项错误外，还可以减少    
    Web 服务器的网络流量。下面的脚本运行在用户的 Web    
    浏览器上，在将信息提交到 Web 服务器之前，验证用户信息。</p>   
    <p>&lt;SCRIPT LANGUAGE="VBScript"&gt;</p>   
    <p>&lt;!--</p>   
    <p>Sub btnEnter_OnClick</p>   
    <p>Dim TheForm</p>   
    <p>Set TheForm = Document.MyForm</p>   
    <p>If IsNumeric(TheForm.Age.Value) Then </p>   
    <p>TheForm.submit </p>   
    <p>Else</p>   
    <p>Msgbox "Please enter a numerical age." </p>   
    <p>End if</p>   
    <p>End Sub</p>   
    <p>//--&gt;</p>   
    <p>&lt;/SCRIPT&gt;</p>   
    <p>&lt;FORM METHOD= "POST" NAME= MyForm    
    ACTION="myfile.asp" &gt; </p>   
    <p>Name: &lt;INPUT TYPE="text" NAME="Name" &gt;</p>   
    <p>Age: &lt;INPUT TYPE="text" NAME="Age" &gt;</p>   
    <p>&lt;INPUT TYPE="button" NAME="btnEnter"    
    VALUE="Enter"&gt; </p>   
    <p>&lt;/FORM&gt;</p>   
        <!--正文结束-->
      <center>
      <hr>
      <p>本书由<a href="http://www.huiniao.com/">【灰鸟资讯】</a>免费制作<br>
          想要更多的免费电子图书，请光临<br>
          <a href="http://www.huiniao.com">http://www.huiniao.com</a></p>
      </center>
      </blockquote>
    </td>
  </tr>
</table>
</body>
</html>
