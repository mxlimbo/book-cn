<html>
<head>
<title>网络编程基础篇之PERL</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="ebook.css" type="text/css">
</head>
<body leftmargin="0" topmargin="0" background="bg.jpg">
<table width="100%" cellspacing="0">
  <tr>
    <td valign="top" bgcolor="#FFD26A">
      <table width="180" height="100%">
        <tr align="center" valign="top">
          <td>
            <p><img src="image.jpg"></p>
            <p><a href="list.htm"><img src="bd.gif" border="0"></a><br>
              <a href="14.htm"><img src="ap.gif" border="0"></a></p>
          </td>
        </tr>
        <tr align="center" valign="bottom">
          <td></td>
        </tr>
      </table>
    </td>
    <td valign="top"> 
      <blockquote>
        <div align="center"><img src="title.gif"></div>
        <!--正文开始-->
        <font color="#0000FF"> 函数集</font> 
        <p> <font color="#0000FF">一、进程处理函数</font><br>
          <br>
          <font color="#0000FF">1、进程启动函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr> 
            <td width="65">函数名</td>
            <td>system</td>
          </tr>
          <tr> 
            <td width="65">调用语法</td>
            <td>system(list)</td>
          </tr>
          <tr> 
            <td width="65">解说</td>
            <td>list中第一个元素为程序名，其余为参数。<br>
              system启动一个进程运行程序并等待其结束，程序结束后错误代码左移八位成为返回值。</td>
          </tr>
          <tr> 
            <td width="65">例子</td>
            <td>@proglist = ("echo", "hello,world!");<br>
              system(@proglist);</td>
          </tr>
          <tr> 
            <td width="65">结果输出</td>
            <td>hello, world!</td>
          </tr>
        </table><br>
        <table border="1" cellspacing="1" width="512">
          <tr>
        <td>函数名</td>
        <td>eval</td>
    </tr>
    <tr>
        <td>调用语法</td>
        <td>eval(string)</td>
    </tr>
    <tr>
        <td>解说</td>
        <td>将string看作Perl语句执行。<br>正确执行后，系统变量$@为空串，如果有错误，$@中为错误信息。</td>
    </tr>
    <tr>
        <td>例子</td>
        <td>$print = "print (\"hello,world\\n\");";<br>eval ($print);</td>
    </tr>
    <tr>
        <td>结果输出</td>
        <td>hello, world</td>
    </tr>
</table>
<p>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>fork</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>procid = fork();</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>创建程序的两个拷贝--父进程和子进程--同时运行。子进程返回零，父进程返回非零值，此值为子程序的进程ID号。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>$retval = fork();<br>if ($retval == 0) {<br> &nbsp; # this is the child process<br> &nbsp;  exit;   # this terminates the child process<br>} else {<br> &nbsp; # this is the parent process<br>}</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>无</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>pipe</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>pipe (infile, outfile);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与fork合用，给父进程和子进程提供通信的方式。送到outfile文件变量的信息可以通过infile文件变量读取。步骤：<br>1、调用pipe<br>2、用fork将程序分成父进程和子进程<br>3、一个进程关掉infile，另一个关掉outfile</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>pipe (INPUT, OUTPUT);<br>$retval = fork();<br>if ($retval != 0) {<br> &nbsp; # this is the parent process <br> &nbsp; close (INPUT);<br> &nbsp; print ("Enter a line of input:\n");<br> &nbsp; $line = &lt;STDIN&gt;;<br> &nbsp; print OUTPUT ($line);<br>} else {<br> &nbsp; # this is the child process<br> &nbsp; close (OUTPUT);<br> &nbsp; $line = &lt;INPUT&gt;;<br> &nbsp; print ($line);<br> &nbsp; exit (0);<br>}<br></td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>$<br>program<br>Enter a line of input:<br>Here is a test line<br>Here is a test line<br>$</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>exec</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>exec (list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与system类似，区别是启动新进程前结束当前程序。常与fork合用，当fork分成两个进程后，子进程用exec启动另一个程序。</td>
    </tr>
    <tr>
	        <td width="65">例子</td>
<td>&nbsp;
</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>syscall</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>syscall (list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>调用系统函数，list第一个元素是系统调用名，其余为参数。<br>如果参数是数字，就转化成C的整型数(type int)。否则传递字符串的指针。详见UNIX的帮助或Perl文档。<br>使用syscall必须包含文件syscall.pl，即：<br> require ("syscall.ph"); </td>
    </tr>
    <tr>
            <td width="65">例子</td>
<td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        2、进程终止函数</font><br>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr> 
            <td width="65">函数名</td>
            <td>die</td>
          </tr>
          <tr> 
            <td width="65">调用语法</td>
            <td>die (message);</td>
          </tr>
          <tr> 
            <td width="65">解说</td>
            <td>终止程序并向STDERR输出错误信息。message可以为字符串或列表。如果最后一个参数不包含换行符，则程序文件名和行号也被输出。</td>
          </tr>
          <tr> 
            <td width="65">例子</td>
            <td>die ("Cannot open input file");</td>
          </tr>
          <tr> 
            <td width="65">结果输出</td>
            <td>Cannot open input file at myprog line 6.</td>
          </tr>
        </table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
            <td>warn</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
            <td>warn (message);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
            <td>与die类似，区别是不终止程序。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
            <td>warn("Danger! Danger!\n");</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
            <td>Danger! Danger!</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>exit</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>exit (retcode);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>终止程序并指定返回值。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>exit(2);</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>无</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>kill</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>kill (signal, proclist);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>给一组进程发送信号。<br>signal是发送的数字信号，9为杀掉进程。<br>proclist是进程ID列表。详见kill的UNIX帮助。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        3、进程控制函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>sleep</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>sleep (time);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将程序暂停一段时间。time是停止的秒数。返回值为实际停止的秒数。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>sleep (5);</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>无</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>wait</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>procid = wait();</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>暂停程序执行，等待子进程终止。<br>不需要参数，返回值为子进程ID，如果没有子进程，返回-1。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>waitpid</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>waitpid (procid, waitflag);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>暂停程序执行，等待特定的子进程终止。procid为等待的进程ID</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>$procid = fork();<br>if ($procid == 0) {<br> &nbsp;  # this is the child process<br> &nbsp;  print ("this line is printed first\n");<br> &nbsp;  exit(0);<br>} else {<br> &nbsp;  # this is the parent process<br> &nbsp;  waitpid ($procid, 0);<br> &nbsp;  print ("this line is printed last\n");<br>}</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>$ program<br>this line is printed first<br>this line is printed last<br>$</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        4、其它控制函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>caller</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>subinfo = caller();</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回调用者的程序名和行号，用于Perl Debugger。<br>返回值为三元素的列表：<br>1、调用处的包名<br>2、调用者文件名<br>3、调用处的行号</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>chroot</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>chroot (dir);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>改变程序的根目录，详见chroot帮助。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>local</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>local($variable);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>在语句块(由大括号包围的语句集合)中定义局域变量，仅在此语句块中起作用，对其的改变不对块外同名变量造成影响。<br><b>千万不要在循环中使用，否则每次循环都定义一个新的局域变量！</b></td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>times</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>timelist = times</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回该程序及所有子进程消耗的工作时间。<br>返回值为四个浮点数的列表：<br>1、程序耗用的用户时间<br>2、程序耗用的系统时间<br>3、子进程耗用的用户时间<br>4、子进程耗用的系统时间</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>&nbsp;</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>&nbsp;</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        二、数学函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
            <td>sin</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
            <td>retval = sin (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
            <td>参数为弧度值。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
            <td>cos</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
            <td>retval = cos (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
            <td>参数为弧度值。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
        <td>函数名</td>
        <td>atan2</td>
    </tr>
    <tr>
        <td>调用语法</td>
        <td>retval = atan2 (value1, value2);</td>
    </tr>
    <tr>
        <td>解说</td>
        <td>运算并返回value1除以value2结果的arctan值，单位为弧度，范围在-PI~PI。</td>
    </tr>
    <tr>
        <td>应用例：<br>角度转化成弧度子程序。</td>
        <td>sub degrees_to_radians {<br> &nbsp; local ($degrees) = @_;<br> &nbsp; local ($radians);11: <br> &nbsp; $radians = atan2(1,1) * $degrees / 45;<br>}</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>sqrt</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = sqrt (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>平方根函数。value为非负数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>exp</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = exp (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回e的value次方。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>log</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = log (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>以e为底的自然对数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr> 
            <td width="65">函数名</td>
            <td>abs</td>
          </tr>
          <tr> 
            <td width="65">调用语法</td>
            <td>retval = abs (value);</td>
          </tr>
          <tr> 
            <td width="65">解说</td>
            <td>绝对值函数。(Perl 4中没有)</td>
          </tr>
        </table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>rand</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = rand (num);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>随机数函数，返回0和整数num之间的一个浮点数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>srand</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>srand (value);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>初始化随机数生成器。保证每次调用rand真正随机。</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        三、字符串处理函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>index</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>position = index (string, substring, position);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回子串substring在字符串string中的位置，如果不存在则返回-1。参数position是可选项，表示匹配之前跳过的字符数，或者说从该位置开始匹配。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>rindex</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>position = rindex (string, substring, position);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与index类似，区别是从右端匹配。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>length</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>num = length (string);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回字符串长度，或者说含有字符的数目。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>pos</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>offset = pos(string);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回最后一次模式匹配的位置。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>substr</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>substr (expr, skipchars, length)</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>抽取字符串（或表达式生成的字符串）expr中的子串，跳过skipchars个字符，或者说从位置skipchars开始抽取子串（第一个字符位置为0），子串长度为length，此参数可忽略，意味着取剩下的全部字符。<br>当此函数出现在等式左边时，expr必须为变量或数组元素，此时其中部分子串被等式右边的值替换。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>study</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>study (scalar);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>用一种内部格式提高变量的访问速度，同一时刻只对一个变量起作用。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>lc<br>uc</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = lc(string);<br>retval = uc(string);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将字符串全部转换成小/大写字母。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>lcfirst<br>ucfirst</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = lcfirst(string);<br>retval = ucfirst(string);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将第一个字母转换成小/大写。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>quotameta</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>newstring = quotemeta(oldstring);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将非单词的字母前面加上反斜线(\)。<br>语句 ： $string = quotemeta($string);<br>等效于：$string =~ s/(\W)/\\$1/g;<br>常用于模式匹配操作中，确保字符串中没有字符被看作匹配操作符。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>join</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>join (joinstr, list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>把字符串列表(数组)组合成一个长的字符串，在每两个列表元素间插入串joinstr。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>sprintf</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>sprintf (string, fields);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与printf类似，区别是结果不输出到文件，而作为返回值赋给变量。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>$num = 26;<br>$outstr = sprintf("%d = %x hexadecimal or %o octal\n",$num, $num, $num);<br>print ($outstr);</td>
    </tr>
    <tr>
            <td width="65">结果输出</td>
        <td>26 = 1a hexadecimal or 32 octal</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        四、标量转换函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>chop</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>$lastchar = chop (var);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>var可为变量或数组，当var为变量时，最后一个字符被删除并赋给$lastchar，当var为数组/列表时，所有元素的最后一个字符被删除，最后一个元素的最后一个字母赋给$lastchar。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>chomp</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>result = chomp(var);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>检查字符串或字符串列表中元素的最后一个字符是否为由系统变量$/定义的行分隔符，如果是就删除。返回值为实际删除的字符个数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>crypt</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>result = crypt (original, salt);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>用DES算法加密字符串，original是将要加密的字符串，salt是两个字符的字符串，定义如何改变DES算法，以使更难解码。返回值为加密后的串。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>hex</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>decnum = hex (hexnum);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将十六进制数(字符串形式)转化为十进制数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>int</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>intnum = int (floatnum);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将浮点数舍去小数部分转化为整型数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>oct</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>decnum = oct (octnum);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>将八进制数(字符串形式)或十六进制数("0x.."形式)转化为十进制数。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>ord</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>asciival = ord (char);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回单个字符的ASCII值，与PASCAL中同名函数类似。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>chr</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>$char = chr (asciival);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回ASCII值的相应字符，与PASCAL中同名函数类似。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
            <td width="487">pack</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
            <td width="487">formatstr = pack(packformat, list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
            <td width="487">把一个列表或数组以在实际机器存贮格式或C等编程语言使用的格式转化（包装）到一个简单变量中。参数packformat包含一个或多个格式字符，列表中每个元素对应一个，各格式字符间可用空格或tab隔开，因为pack忽略空格。<br>
&nbsp;&nbsp;除了格式a、A和@外，重复使用一种格式多次可在其后加个整数，如：<br>
&nbsp;&nbsp; $twoints = pack ("i2", 103, 241);<br>
&nbsp;&nbsp;把同一格式应用于所有的元素则加个*号，如：<br>
&nbsp;&nbsp; $manyints = pack ("i*", 14, 26, 11, 83);<br>
&nbsp;&nbsp;对于a和A而言，其后的整数表示要创建的字符串长度，重复方法如下：<br>
&nbsp;&nbsp; $strings = pack ("a6" x 2, "test1", "test2");<br>
&nbsp;&nbsp;格式@的情况比较特殊，其后必须加个整数，该数表示字符串必须的长度，如果长度不够，则用空字符(null)补足，如：<br>
&nbsp;&nbsp; $output = pack ("a @6 a", "test", "test2");<br>
&nbsp;&nbsp;pack函数最常见的用途是创建可与C程序交互的数据，例如C语言中字符串均以空字符(null)结尾，创建这样的数据可以这样做：<br>
&nbsp;&nbsp; $Cstring = pack ("ax", $mystring);<br>
&nbsp;&nbsp;下表是一些格式字符与C中数据类型的等价关系：<br>
<center><table BORDER="1" >
  <tr>
                    <td width="33">字符 &nbsp; </td>
                    <td width="183">等价C数据类型</td>
  </tr>
  <tr>
                    <td width="33">C</td>
                    <td width="183">char</td>
  </tr>
  <tr>
                    <td width="33">d</td>
                    <td width="183">double</td>
  </tr>
  <tr>
                    <td width="33">f</td>
                    <td width="183">float</td>
  </tr>
  <tr>
                    <td width="33">i</td>
                    <td width="183">int</td>
  </tr>
  <tr>
                    <td width="33">I</td>
                    <td width="183">unsigned int (or unsigned)</td>
  </tr>
  <tr>
                    <td width="33">l</td>
                    <td width="183">long</td>
  </tr>
  <tr>
                    <td width="33">L</td>
                    <td width="183">unsigned long</td>
  </tr>
  <tr>
                    <td width="33">s</td>
                    <td width="183">short</td>
  </tr>
  <tr>
                    <td width="33">S</td>
                    <td width="183">unsigned short</td>
  </tr>
</table></center>
&nbsp;&nbsp;完整的格式字符见下表。
        </td>
    </tr>
</table>
        <p>
        <table border="1" width="512">
          <tr>
            <td width="65">格式字符 &nbsp; </td>
      <td>描述</td>
    </tr>
    <tr>
            <td width="65">a</td>
      <td>用空字符(null)补足的字符串</td>
    </tr>
    <tr>
            <td width="65">A</td>
      <td>用空格补足的字符串</td>
    </tr>
    <tr>
            <td width="65">b</td>
      <td>位串，低位在前</td>
    </tr>
    <tr>
            <td width="65">B</td>
      <td>位串，高位在前</td>
    </tr>
    <tr>
            <td width="65">c</td>
      <td>带符号字符（通常-128~127）</td>
    </tr>
    <tr>
            <td width="65">C</td>
      <td>无符号字符（通常8位）</td>
    </tr>
    <tr>
            <td width="65">d</td>
      <td>双精度浮点数</td>
    </tr>
    <tr>
            <td width="65">f</td>
      <td>单精度浮点数</td>
    </tr>
    <tr>
            <td width="65">h</td>
      <td>十六进制数串，低位在前</td>
    </tr>
    <tr>
            <td width="65">H</td>
      <td>十六进制数串，高位在前</td>
    </tr>
    <tr>
            <td width="65">i</td>
      <td>带符号整数</td>
    </tr>
    <tr>
            <td width="65">I</td>
      <td>无符号整数</td>
    </tr>
    <tr>
            <td width="65">l</td>
      <td>带符号长整数</td>
    </tr>
    <tr>
            <td width="65">L</td>
      <td>无符号长整数</td>
    </tr>
    <tr>
            <td width="65">n</td>
      <td>网络序短整数</td>
    </tr>
    <tr>
            <td width="65">N</td>
      <td>网络序长整数</td>
    </tr>
    <tr>
            <td width="65">p</td>
      <td>字符串指针</td>
    </tr>
    <tr>
            <td width="65">s</td>
      <td>带符号短整数</td>
    </tr>
    <tr>
            <td width="65">S</td>
      <td>无符号短整数</td>
    </tr>
    <tr>
            <td width="65">u</td>
      <td>转化成uuencode格式</td>
    </tr>
    <tr>
            <td width="65">v</td>
      <td>VAX序短整数</td>
    </tr>
    <tr>
            <td width="65">V</td>
      <td>VAX序长整数</td>
    </tr>
    <tr>
            <td width="65">x</td>
      <td>一个空字节</td>
    </tr>
    <tr>
            <td width="65">X</td>
      <td>回退一个字节</td>
    </tr>
    <tr>
            <td width="65">@</td>
      <td>以空字节(null)填充</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>unpack</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@list = unpack (packformat, formatstr);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>unpack与pack功能相反，将以机器格式存贮的值转化成Perl中值的列表。其格式字符与pack基本相同（即上表），不同的有：A格式将机器格式字符串转化为Perl字符串并去掉尾部所有空格或空字符；x为跳过一个字节；@为跳过一些字节到指定的位置，如@4为跳过4个字节。下面看一个@和X合同的例子：
&nbsp;&nbsp; $longrightint = unpack ("@* X4 L", $packstring);<br>
&nbsp;&nbsp;此语句将最后四个字节看作无符号长整数进行转化。下面看一个对uuencode文件解码的例子：<br>
<blockquote>
1 :  #!/usr/local/bin/perl<br>
2 :  <br>
3 :  open (CODEDFILE, "/u/janedoe/codefile") ||<br>
4 :          die ("Can't open input file");<br>
5 :  open (OUTFILE, "&gt;outfile") ||<br>
6 :          die ("Can't open output file");<br>
7 :  while ($line = &lt;CODEDFILE>) {<br>
8 :          $decoded = unpack("u", $line);<br>
9 :          print OUTFILE ($decoded);<br>
10: }<br>
11: close (OUTFILE);<br>
12: close (CODEDFILE);
</blockquote>
&nbsp;&nbsp;当将pack和unpack用于uuencode时，要记住，虽然它们与UNIX中的uuencode、uudecode工具算法相同，但并不提供首行和末行，如果想用uudecode对由pack的输出创建的文件进行解码，必须也把首行和末行输出（详见UNIX中uuencode帮助）。<br>
        
        
        </td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>vec</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = vec (vector, index, bits);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>顾名思义，vec即矢量(vector)函数，它把简单变量vector的值看作多块(维)数据，每块含一定数目的位，合起来即一个矢量数据。每次的调用访问其中一块数据，可以读取，也可以写入。参数index就象数组下标一样，提出访问哪一块，0为第一块，依次类推，要注意的是访问次序是从右到左的，即第一块在最右边。参数bits指定每块中的位数，可以为1,2,4,8,16或32。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
      <td>
1 :  #!/usr/local/bin/perl<br>
2 :  <br>
3 :  $vector = pack ("B*", "11010011");<br>
4 :  $val1 = vec ($vector, 0, 4);<br>
5 :  $val2 = vec ($vector, 1, 4);<br>
6 :  print ("high-to-low order values: $val1 and $val2\n");<br>
7 :  $vector = pack ("b*", "11010011");<br>
8 :  $val1 = vec ($vector, 0, 4);<br>
9 :  $val2 = vec ($vector, 1, 4);<br>
10: print ("low-to-high order values: $val1 and $val2\n");

</td>
    </tr>
    <tr>
            <td width="65">结果</td>
      <td>high-to-low order values: 3 and 13<br>low-to-high order values: 11 and 12</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>defined</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = defined (expr);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>判断一个变量、数组或数组的一个元素是否已经被赋值。expr为变量名、数组名或一个数组元素。<br>如果已定义，返回真，否则返回假。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>undef</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>retval = undef (expr);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>取消变量、数组或数组元素甚至子程序的定义，回收其空间。返回值始终为未定义值，此值与空串等效。</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        五、数组和列表函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>grep</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@foundlist = grep (pattern, @searchlist);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与同名的UNIX查找工具类似，grep函数在列表中抽取与指定模式匹配的元素，参数pattern为欲查找的模式，返回值是匹配元素的列表。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>@list = ("This", "is", "a", "test");<br>@foundlist = grep(/^[tT]/, @list);</td>
    </tr>
    <tr>
            <td width="65">结果</td>
        <td>@foundlist = ("This", "test");</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>splice</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@retval = splice (@array, slipelements, length, @newlist);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>&nbsp;&nbsp;拼接函数可以向列表（数组）中间插入元素、删除子列表或替换子列表。参数skipelements是拼接前跳过的元素数目，length是被替换的元素数，newlist是将要拼接进来的列表。当newlist的长度大于length时，后面的元素自动后移，反之则向前缩进。因此，当length=0时，就相当于向列表中插入元素，而形如语句<br>&nbsp;&nbsp;splice (@array, -1, 0, "Hello");<br>则向数组末尾添加元素。而当newlist为空时就相当于删除子列表，这时，如果length为空，就从第skipelements个元素后全部删除，而删除最后一个元素则为：splice (@array, -1);这种情况下，返回值为被删去的元素列表。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>shift</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>element = shift (@arrayvar);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>删去数组第一个元素，剩下元素前移，返回被删去的元素。不加参数时，缺省地对@ARGV进行操作。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>unshift</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>count = unshift (@arrayver, elements);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>作用与shift相反，在数组arrayvar开头增加一个或多个元素，返回值为结果(列表)的长度。等价于splice (@array, 0, 0, elements);</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>push</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>push (@arrayvar, elements);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>在数组末尾增加一个或多个元素。等价于slice (@array, @array, 0, elements);</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>pop</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>element = pop (@arrayvar);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>与push作用相反，删去列表最后一个元素，并将其作为返回值，当列表已空，则返回“未定义值”(即空串)。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
            <td>split</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
            <td>@list = split (pattern, string, maxlength);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
            <td>将字符串分割成一组元素的列表。每匹配一次pattern，就开始一个新元素，但pattern本身不包含在元素中。maxlength是可选项，当指定它时，达到该长度就不再分割。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>sort</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@sorted = sort (@list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>按字母次序给列表排序。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>reverse</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@reversed = reverse (@list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>按字母反序给列表排序。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>map</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@resultlist = map (expr, @list);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>此函数在Perl5中定义，可以把列表中的各个元素作为表达式expr的操作数进行运算，其本身不改变，结果作为返回值。在表达式expr中，系统变量$_代表各个元素。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>1、@list = (100, 200, 300);<br> &nbsp; &nbsp;@results = map ($_+1, @list);<br>2、@results = map (&mysub($_), @list);</td>
    </tr>
    <tr>
            <td width="65">结果</td>
        <td>1、(101, 201, 301)<br>2、无</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>wantarray</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>result = wantarray();</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>Perl中，一些内置函数的行为根据其处理简单变量还是数组有所不同，如chop。自定义的子程序也可以定义这样两种行为。当子程序被期望返回列表时，此函数返回值为非零值(真)，否则为零值(假)。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>
1 :  #!/usr/local/bin/perl<br>
2 : <br>
3 :  @array = &mysub();<br>
4 :  $scalar = &mysub();<br>
5 :<br>
6 :  sub mysub {<br>
7 :          if (wantarray()) {<br>
8 :                  print ("true\n");<br>
9 :          } else {<br>
10:                 print ("false\n");<br>
11:         }<br>
12: }  
</td>
    </tr>
    <tr>
            <td width="65">结果</td>
        <td>$program<br>true<br>false<br>$</td>
    </tr>
</table>
        <font color="#0000FF"><br>
        六、关联数组函数</font><br>
<p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>keys</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@list = keys (%assoc_array);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回关联数组无序的下标列表。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>values</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@list = values (%assoc_array);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回关联数组无序的值列表。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>each</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>@pair = each (%assoc_array);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>返回两个元素的列表--键值对（即下标和相应的值），同样无序。当关联数组已空，则返回空列表。</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>delete</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>element = delete (assoc_array_item);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>删除关联数组中的元素，并将其值作为返回值。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>%array = ("foo", 26, "bar", 17");<br>$retval = delete ($array{"foo"});</td>
    </tr>
    <tr>
            <td width="65">结果</td>
        <td>$retval = 26;</td>
    </tr>
</table>
        <p>
        <table border="1" cellspacing="1" width="512">
          <tr>
            <td width="65">函数名</td>
        <td>exists</td>
    </tr>
    <tr>
            <td width="65">调用语法</td>
        <td>result = exists (element);</td>
    </tr>
    <tr>
            <td width="65">解说</td>
        <td>在Perl5中定义，判断关联数组中是否存在某元素，若存在，返回非零值(真)，否则返回零值(假)。</td>
    </tr>
    <tr>
            <td width="65">例子</td>
        <td>$result = exists ($myarray{$mykey});</td>
    </tr>
</table>
        <br>
        <!--正文结束-->
        <center>
      <hr>
      <p>本书由<a href="http://www.huiniao.com/">【灰鸟资讯】</a>免费制作<br>
          想要更多的免费电子图书，请光临<br>
            <a href="http://www.huiniao.com">http://www.huiniao.com</a></p>
      </center>
      </blockquote>
    </td>
  </tr>
</table>
</body>
</html>
