<html>
<head>
<title>网络编程基础篇之PERL</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="ebook.css" type="text/css">
</head>
<body leftmargin="0" topmargin="0" background="bg.jpg">
<table width="100%" cellspacing="0">
  <tr>
    <td valign="top" bgcolor="#FFD26A">
      <table width="180" height="100%">
        <tr align="center" valign="top">
          <td>
            <p><img src="image.jpg"></p>
            <p><a href="list.htm"><img src="bd.gif" border="0"></a><br>
              <a href="13.htm"><img src="ap.gif" border="0"></a></p>
          </td>
        </tr>
        <tr align="center" valign="bottom">
          <td><a href="end.htm"><img src="np.gif" border="0"></a></td>
        </tr>
      </table>
    </td>
    <td valign="top">
      <blockquote>
        <div align="center"><img src="title.gif"></div>
        <!--正文开始-->
        <font color="#0000FF"> Perl5的包和模块 </font>
        <p> <font color="#0000FF">一、require函数</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;用require函数可以把程序分割成多个文件并创建函数库。例如，在myfile.pl中有定义好的Perl函数，可用语句require ("myfile.pl"); 在程序中包含进来。当Perl解释器看到这一语句，就在内置数组变量@INC指定的目录中寻找文件myfile.pl。如果找到了，该文件中的语句就被执行，否则程序终止并输出错误信息：<br>
&nbsp;&nbsp;&nbsp;&nbsp;Can't find myfile.pl in @INC<br>
&nbsp;&nbsp;&nbsp;&nbsp;作为子程序调用参数，文件中最后一个表达式的值成为返回值，require函数查看其是否为零，若为零则终止。例如myfile.pl最后的语句是：<br>
&nbsp;&nbsp;&nbsp;&nbsp;print ("hello, world!\n");<br>
&nbsp;&nbsp;&nbsp;&nbsp;$var = 0;<br>
&nbsp;&nbsp;&nbsp;&nbsp;因为最后的语句值为零，Perl解释器输出下列错误信息并推出：<br>
&nbsp;&nbsp;&nbsp;&nbsp;myfile.pl did not reture true value<br>
&nbsp;&nbsp;&nbsp;&nbsp;可以用简单变量或数组元素等向require传递参数，如：<br>
<blockquote>
@reqlist = ("file1.pl", "file2.pl", "file3.pl");<br>
require ($reqlist[$0]);<br>
require ($reqlist[$1]);<br>
require ($reqlist[$2]);
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;还可以不指定文件名，即：<br>
&nbsp;&nbsp;&nbsp;&nbsp;require;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这时，变量$_的值即作为文件名传递给require。<br>
&nbsp;&nbsp;&nbsp;&nbsp;注：如果@INC中有多个目录中含有同一个文件，则只有第一个被包含。<br>
        <font color="#0000FF">1、require函数和子程序库</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;用require函数可以创建可用于所有Perl程序的子程序库，步骤如下：<br>
<blockquote>
a、确定存贮子程序库的目录<br>
b、将子程序抽取放到单独的文件中，将文件放到子程序库目录<br>
c、每个文件末尾加一句非零值的语句，最简单的办法是语句  1;<br>
d、在主程序中用require包含一个或多个所需的文件。<br>
e、运行主程序时，用 -I 选项指定子程序库目录，或者在调用require前将该目录添加到@INC数组中。
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;例如：假设目录/u/perldir中存有你的Perl子程序库，子程序mysub存贮在文件mysub.pl中。现在来包含上该文件：<br>
&nbsp;&nbsp;&nbsp;&nbsp;unshift (@INC, "/u/perldir");<br>
&nbsp;&nbsp;&nbsp;&nbsp;require ("mysub.pl");<br>
&nbsp;&nbsp;&nbsp;&nbsp;对unshift的调用把目录/u/perldir添加到@INC数组，对require的调用将mysub.pl文件的内容包含进来作为程序的一部分。<br>
注意：<br>
<blockquote>
1、应该使用unshift来向@INC中添加目录，而不是push。因为push增加到@INC的末尾，则该目录将被最后搜寻。<br>
2、如果你的库文件名与/usr/local/lib/perl中的某文件同名，则不会被包含进来，因为require只包含同名文件中的第一个。
</blockquote>
        <font color="#0000FF">2、用require指定Perl版本</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;Perl 5中，可以用require语句来指定程序运行所需的Perl版本。当Perl解释器看到require后跟着数字时，则只有其版本高于或等于该数字时才运行该程序。例如，下面语句表明只有Perl解释器为5.001版或更高时才运行该程序：<br>
&nbsp;&nbsp;&nbsp;&nbsp;require 5.001;<br>
        <font color="#0000FF">二、包</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;Perl程序把变量和子程序的名称存贮到符号表中，perl的符号表中名字的集合就称为包(package)。<br>
        <font color="#0000FF">1、包的定义</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;在一个程序中可以定义多个包，每个包有一个单独的符号表，定义语法为：<br>
&nbsp;&nbsp;&nbsp;&nbsp;package mypack;<br>
&nbsp;&nbsp;&nbsp;&nbsp;此语句定义一个名为mypack的包，从此以后定义的所有变量和子程序的名字都存贮在该包关联的符号表中，直到遇到另一个package语句为止。<br>
&nbsp;&nbsp;&nbsp;&nbsp;每个符号表有其自己的一组变量、子程序名，各组名字是不相关的，因此可以在不同的包中使用相同的变量名，而代表的是不同的变量。如：<br>
<blockquote>
$var = 14;<br>
package mypack;<br>
$var = 6;
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;第一个语句创建变量$var并存贮在main符号表中，第三个语句创建另一个同名变量$var并存贮在mypack包的符号表中。<br>
        <font color="#0000FF">2、在包间切换</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;在程序里可以随时在包间来回切换，如：<br>
<blockquote>
1:  #!/usr/local/bin/perl<br>
2:  <br>
3:  package pack1;<br>
4:  $var = 26;<br>
5:  package pack2;<br>
6:  $var = 34;<br>
7:  package pack1;<br>
8:  print ("$var\n");
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;运行结果如下：<br>
<blockquote>
$ program<br>
26<br>
$
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;第三行定义了包pack1，第四行创建变量$var，存贮在包pack1的符号表中，第五行定义新包pack2，第六行创建另一个变量$var，存贮在包pack2的符号表中。这样就有两个独立的$var，分别存贮在不同的包中。第七行又指定pack1为当前包，因为包pack1已经定义，这样，所有变量和子程序的定义和调用都为该包的符号表中存贮的名字。因此第八行对$var的调用为pack1包中的$var，其值为26。<br>
        <font color="#0000FF">3、main包</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;存贮变量和子程序的名字的缺省符号表是与名为main的包相关联的。如果在程序里定义了其它的包，当你想切换回去使用缺省的符号表，可以重新指定main包：<br>
&nbsp;&nbsp;&nbsp;&nbsp;package main;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这样，接下来的程序就好象从没定义过包一样，变量和子程序的名字象通常那样存贮。<br>
        <font color="#0000FF">4、包的引用</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;在一个包中可以引用其它包中的变量或子程序，方法是在变量名前面加上包名和一个单引号，如：<br>
<blockquote>
package mypack;<br>
$var = 26;<br>
package main;<br>
print ("$mypack'var\n");
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;这里，$mypack'var为mypack包中的变量$var。<br>
&nbsp;&nbsp;&nbsp;&nbsp;注意：在Perl 5中，包名和变量名用双冒号隔开，即$mypack::var。单引号引用的方式仍然支持，但将来的版本中未必支持。<br>
        <font color="#0000FF">5、指定无当前包</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;在Perl 5中，可以用如下语句指定无当前包：<br>
&nbsp;&nbsp;&nbsp;&nbsp; package;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这时，所有的变量必须明确指出所属包名，否则就无效--错误。<br>
&nbsp;&nbsp;&nbsp;&nbsp; $mypack::var = 21; #ok<br>
&nbsp;&nbsp;&nbsp;&nbsp; $var = 21; &nbsp; #error - no current package<br>
&nbsp;&nbsp;&nbsp;&nbsp;这种情况直到用package语句指定当前包为止。<br>
        <font color="#0000FF">6、包和子程序</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;包的定义影响到程序中的所有语句，包括子程序，如：<br>
<blockquote>
package mypack;<br>
subroutine mysub {<br>
 &nbsp;  local ($myvar);<br>
 &nbsp; # stuff goes here<br>
}
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;这里，mysub和myvar都是包mypack的一部分。在包mypack外调用子程序mysub，则要指定包：$mypack'mysub。<br>
&nbsp;&nbsp;&nbsp;&nbsp;可以在子程序中切换包：<br>
<blockquote>
package pack1;<br>
subroutine mysub {<br>
 &nbsp;  $var1 = 1;<br>
 &nbsp;  package pack2;<br>
 &nbsp;  $var1 = 2;<br>
}
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;这段代码创建了两个变量$var1，一个在包pack1中，一个在包pack2中，包中的局域变量只能在其定义的子程序等语句块中使用，像普通的局域变量一样。<br>
        <font color="#0000FF">7、用包定义私有数据</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;包最通常的用途是用在含有子程序和子程序所使用的全局变量的文件中，为子程序定义这样的包，可以保证子程序使用的全局变量不可在其它地方使用，这样的数据即为私有数据。更进一步，可以保证包名不可在其它地方使用。私有数据例：<br>
<blockquote>
1 :  package privpack;<br>
2 :  $valtoprint = 46;<br>
3 :  <br>
4 :  package main;<br>
5 :  # This function is the link to the outside world.<br>
6 :  sub printval {<br>
7 :  &nbsp;   &privpack'printval();<br>
8 :  }<br>
9 :<br>
10: package privpack;<br>
11: sub printval {<br>
12: &nbsp;  print ("$valtoprint\n");<br>
13: }<br>
14:<br>
15: package main;<br>
16: 1;   # return value for require
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;此子程序只有在调用printval后才能产生输出。<br>
&nbsp;&nbsp;&nbsp;&nbsp;该文件分为两个部分：与外界联系的部分和私有部分。前者为缺省的main包，后者为包privpack。第6~8行定义的子程序printval可被其它程序或子程序调用。printval输出变量$valtoprint的值，此变量仅在包privpack中定义和使用。第15、16行确保其被其它程序用require语句包含后工作正常，15行将当前包设置回缺省包main，16行返回非零值使require不报错。<br>
        <font color="#0000FF">8、包和系统变量</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;下列变量即使从其它包中调用，也在main包中起作用：<br>
<blockquote>
<li>文件变量STDIN, STDOUT, STDERR 和 ARGV </li>
<li>变量%ENV, %INC, @INC, $ARGV 和 @ARGV </li>
<li>其它含有特殊字符的系统变量</li>
</blockquote>
        <font color="#0000FF">9、访问符号表</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;在程序中查找符号表可用数组%_package，此处package为想访问的符号表所属的包名。例如%_main含有缺省的符号表。<br>
&nbsp;&nbsp;&nbsp;&nbsp;通常不需要亲自查找符号表。<br><br>
        <font color="#0000FF">三、模块</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;多数大型程序都分割成多个部件，每一部件通常含有一个或多个子程序及相关的变量，执行特定的一个或多个任务。集合了变量和子程序的部件称为程序模块。<br>
        <font color="#0000FF">1、创建模块</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;Perl 5中用包来创建模块，方法是创建包并将之存在同名的文件中。例如，名为Mymodult的包存贮在文件Mymodult.pm中（扩展名.pm表示Perl Module）。下例的模块Mymodult含有子程序myfunc1和myfunc2及变量$myvar1和$myvar2。<br>
<blockquote>
1 :  #!/usr/local/bin/perl<br>
2 :<br>
3 :  package Mymodule;<br>
4 :  require Exporter;<br>
5 :  @ISA = qw(Exporter);<br>
6 :  @EXPORT = qw(myfunc1 myfunc2);<br>
7 :  @EXPORT_OK = qw($myvar1 $myvar2);<br>
8 :<br>
9 :  sub myfunc1 {<br>
10: &nbsp;    $myvar1 += 1;<br>
11: }<br>
12:<br>
13: sub myfunc2 {<br>
14: &nbsp;    $myvar2 += 2; <br>
15: }
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;第3~7行是标准的Perl模块定义方式。第3行定义包，第4行包含内置Perl模块Exporter，6、7行进行子程序和变量的输出以与外界联系。第6行创建名为@EXPORT的特殊数组，该数组中的子程序可以被其它程序调用，这里，myfunc1和myfunc2可以被访问。其它任何在模块中定义但没有赋给数组@EXPORT的子程序都是私有的，只能在模块内部调用。第7行创建另一个名为@EXPORT_OK的特殊数组，其中含有可被外部程序访问的变量，这里含有$myvar1和$myvar2。<br>
        <font color="#0000FF">2、导入模块</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;将模块导入你的Perl程序中使用use语句，如下句导入了Mymodule模块：<br>
&nbsp;&nbsp;&nbsp;&nbsp; use Mymodule;<br>
&nbsp;&nbsp;&nbsp;&nbsp;这样，模块Mymodule中的子程序和变量就可以使用了。<br>
&nbsp;&nbsp;&nbsp;&nbsp;取消导入模块使用no语句，如下句取消了Mymodule模块的导入：<br>
&nbsp;&nbsp;&nbsp;&nbsp; no Mymodule;<br>
&nbsp;&nbsp;&nbsp;&nbsp;下面看一个导入模块和取消导入的例子，使用integer模块要求所有数字运算基于整数，浮点数在运算前均被转化为整数。<br>
<blockquote>
1:  #!/usr/local/bin/perl<br>
2:<br>
3:  use integer;<br>
4:  $result = 2.4 + 2.4;<br>
5:  print ("$result\n");<br>
6:<br>
7:  no integer;<br>
8:  $result = 2.4 + 2.4;<br>
9:  print ("$result\n");
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;程序输出如下：<br>
<blockquote>
$ program<br>
4<br>
4.8<br>
$
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;如果use或no语句出现在语句块中，则只在该块的有效范围内起作用，如：<br>
<blockquote>
use integer;<br>
$result1 = 2.4 + 2.4;<br>
if ($result1 == 4) {<br>
no integer;<br>
$result2 = 3.4 + 3.4;<br>
}<br>
$result3 = 4.4 + 4.4; 
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;结果输出如下：<br>
<blockquote>
4<br>
6.8<br>
8
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;这里，no语句只在if语句中有效，出了if语句仍使用integer模块，因此4.4在做加法前被转化成了4。<br>
        <font color="#0000FF">3、预定义模块</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;Perl 5提供了许多有用的预定义模块，可以用use导入和no语句取消。下面是库中最有用的一些模块：<br>
<p><center>
<TABLE border="1">
<TR VALIGN=TOP>
	<TD>integer</TD>
	<TD>使用整数运算</TD>
</TR>
<TR VALIGN=TOP>
	<TD>Diagnostics &nbsp; </TD>
	<TD>输出较多的诊断信息（警告）</TD>
</TR>
<TR VALIGN=TOP>
	<TD>English</TD>
	<TD>允许英文名用作系统变量的别名</TD>
</TR>
<TR VALIGN=TOP>
	<TD>Env</TD>
	<TD>导入环境变量的Perl模块</TD>
</TR>
<TR VALIGN=TOP>
	<TD>POSIX</TD>
	<TD>POSIX标准（IEEE 1003.1）的Perl接口 &nbsp; </TD>
</TR>
<TR VALIGN=TOP>
	<TD>Socket</TD>
	<TD>装载C语言的套接字处理机制</TD>
</TR>
</TABLE></CENTER>
        &nbsp;&nbsp;&nbsp;Perl文档中有完整的预定义模块列表。<br>
        &nbsp;&nbsp;&nbsp;&nbsp;注：世界各地的Perl 5用户写了许多有用的模块，CPAN(Comprehensive Perl 
        Archive Network)的Perl文档有其完整的列表。关于CPAN的更多信息见其网址：<a target="_blank" href="http://www.perl.com/perl/CPAN/README.html">http://www.perl.com/perl/CPAN/README.html</a>。<br>
        <br>
        <!--正文结束-->
      <center>
      <hr>
      <p>本书由<a href="http://www.huiniao.com/">【灰鸟资讯】</a>免费制作<br>
          想要更多的免费电子图书，请光临<br>
          <a href="http://www.huiniao.com">http://www.huiniao.com</a></p>
      </center>
      </blockquote>
    </td>
  </tr>
</table>
</body>
</html>