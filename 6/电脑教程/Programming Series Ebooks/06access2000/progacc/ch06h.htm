<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Dynamically Updating a Report</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06g.htm", "ch06i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="223"><H1>Dynamically Updating a Report</H1></A>

<P>You can use VBA to add a new record source property to a report. While your application causes a report's content to change, you can update the report's title to reflect the new content. If you present the results of a parameter-like 
query in a report, you can also use many formatting options for the result.</P>


<P>Figure 6-16 shows a form and a report. Users can manipulate the form to change the content for the report. The form includes a text box, an option group of five check boxes, and a command button. After entering a number in the 
text box and selecting a comparison, the user can click the command button to open the report on the right in Design view. This view is necessary to add a new record source property and to reset the <I>Caption</I> property for the label that displays 
the report's title. After programmatically updating the two report properties, the application opens the results in Preview mode to display the results of the 
new record source. The instructions below the title explain how to close the form.</P>


<P><A HREF="javascript:fullSize('F06QH16x.htm')"> <img src="Images/F06QH16.JPG" width=404 height=201 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-16.</B> <I>In the form on the left, users can designate a record source and a corresponding title for the report on the right. </I><!-- /CAPTION -->
</P>


<P>The <I>cmdPrintThem_Click</I> event procedure (shown below) for the command button performs three tasks. First, it constructs a SQL string based on selections made in the form. The procedure successively adds clauses to a 
starter statement that lists product name and unit price from the <I>Products</I> table. It initially appends a 
WHERE<I> </I>clause to the core statement based on the 
selected check box and the quantity entered in the text box. After adding the WHERE<I> </I>clause, the procedure appends an ORDER BY<I> </I>clause that sorts the return set from the SQL string by unit price. If a user selects the greater than (&gt;) or the greater than or equal to (&gt;=) operator, the procedure specifies a descending sort order. Otherwise, the return set sorts by unit price in the default ascending order.</P>


<P>The second component of the <I>cmdPrintThem_Click</I> procedure programmatically revises the record source and caption for a label on a report. After opening the report in Design view, it executes a <I>With...End With </I>statement based on the report. To eliminate screen clutter, the second component 
invokes the <I>Echo </I>method with an argument of 
<I>False</I>. This suppresses screen updates until the next statement invokes the <I>Echo </I>method with an argument of <I>True</I>. Inside the <I>With...End With </I>block, the procedure sets the report's <I>RecordSource</I> property to the SQL string in the first part of the procedure. Then it changes 
the caption for the label that displays the report's title. A string expression that draws on the option group value and the amount in the text box facilitates this task.</P>


<P>The third component performs two functions. It opens the report in 
Preview mode so that users can see it. Then the final command restores the 
<I>Echo </I>function, which displays the report. This technique of turning off and 
then restoring the <I>Echo </I>effect leads to crisp screen transitions.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Private Sub cmdPrintThem_Click()
Dim strSQL As String, strOperator As String
Dim strWhere As String

'Set up SQL statement for report record source.
    strSQL = &quot;Select ProductName, UnitPrice &quot; &amp; _
        &quot;from Products&quot;
    strOperator = Choose(optRule, &quot;&gt;&quot;, &quot;&gt;=&quot;, &quot;=&quot;, &quot;&lt;=&quot;, &quot;&lt;&quot;)
    strWhere = &quot;Where UnitPrice&quot; &amp; strOperator &amp; txtAmount
    strSQL = strSQL &amp; &quot; &quot; &amp; strWhere &amp; &quot; Order By UnitPrice&quot;
    If optRule &lt;= 2 Then
        strSQL = strSQL &amp; &quot; Desc&quot;
    End If

'The commented debug.print statement is convenient for debugging
'your SQL statement; remove the comment when you change the
'SQL statement construction.
'    Debug.Print strSQL
    
'Open report in Design view to set the report's record source
'and its label's caption.
    DoCmd.Echo False
    DoCmd.OpenReport &quot;rptProductsfromForm&quot;, acViewDesign
    With Reports(&quot;rptProductsfromForm&quot;)
        .Visible = False
        .RecordSource = strSQL
        .Controls(&quot;lblTitle&quot;).Caption = _
        &quot;Products with a Unit Price &quot; &amp; strOperator &amp; &quot; $&quot; &amp; txtAmount
    End With

'Now show the form to the user.
    DoCmd.OpenReport &quot;rptProductsfromForm&quot;, acViewPreview
    DoCmd.Echo True

End Sub</pre>
</td>
</tr>
</table></P>


</BODY>
</HTML>




