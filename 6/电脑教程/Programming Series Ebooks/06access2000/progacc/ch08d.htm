<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>The Assistant Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08c.htm", "ch08e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="279"><H1>The <I>Assistant </I>Object</H1></A>
<P>The Office Assistant is a friendly help feature in Office. Although 
developers and power users might not like the Assistant, it is appealing to typical 
users. The Assistant is relatively easy to program, so you can easily give your 
custom Office applications the same look and feel as the standard Office applications.
</P>
<P>The <I>Assistant </I>object model is shown in Figure 8-3. The top-level 
<I>Assistant </I>object can appear on the screen with or without its hierarchically 
dependent <I>Balloon </I>object. Because the Assistant can use a wide range of characters 
and animations, it can be entertaining and informative without explanatory text. 
If you want to include explanatory text, you can program 
<I>Balloon </I>objects to appear with the Assistant. Balloons can include explanatory text or even serve as 
a simple data entry device. You use the <I>BalloonCheckBox 
</I>and the <I>BalloonLabel </I>collections with button controls to make your assistants interactive.
</P>

<P><A HREF="javascript:fullSize('F08QH03x.htm')"> <img src="Images/F08qh03.JPG" width=404 height=108 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-3.</B> <I>You use the </I>Assistant <I>object to present an assistant, animate it, and display a balloon.</I><!-- /CAPTION -->
</P>

<A NAME="280"><H2>Assistants</H2></A>

<P>Assistants can add value to an application by conveying visually the 
various actions that your application is performing. You can further distinguish 
your custom application by consistently using a specific assistant or by regularly 
using different assistants but in highly differentiated circumstances. For example, 
use The Genius assistant representation for help pertaining to computations, but 
use the F1 robot when offering help about computer system topics. Your 
development team can adopt a rule to always invoke the working animation for 
any task that takes more than a couple of seconds.</P>

<A NAME="281"><H3>Showing and animating an assistant</H3></A>

<P>You can easily control the display and animation of an assistant by using 
the three short procedures shown here: 
<I>AssistantIdleOn</I>, <I>AssistantNotVisible</I>, 
and <I>AssistantSearchOn</I>. The <I>AssistantIdleOn 
</I>procedure contains a single line that sets the 
<I>Assistant </I>object's <I>Visible </I>property to 
<I>True</I>. Since <I>msoAnimationIdle</I> is the default animation type (the animation character is idle), the line that 
sets the <I>Animation </I>property is not needed and is commented out. In addition, 
this basic animation is part of the core Access library, so you can invoke it 
without referencing the Microsoft Office 9 Object Library. You can also run 
the <I>AssistantNotVisible </I>procedure without referencing the Office Object Library.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub AssistantIdleOn()
'Setting animation for idle is optional.
'    Assistant.Animation = msoAnimationIdle
    Assistant.Visible = True
    
End Sub


Sub AssistantNotVisible()
        Assistant.Visible = False

End Sub


Sub AssistantSearchOn()
        If Assistant.Visible = False Then Assistant.Visible = True
    Assistant.Animation = msoAnimationSearching
    
End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>To change the animation character's behavior to something other than 
idle, your procedure must set the object's <I>Animation 
</I>property as well as its <I>Visible </I>property. The 
<I>AssistantSearchOn </I>procedure causes an <I>Assistant 
</I>object to display its searching animation. Unlike many of the other animations, the 
searching animation repeats until you assign a new 
<I>Animation </I>setting. In addition, your project must have a reference to the Office Object Library for the 
searching animation to appear. (You can set this manually using the Tools menu in VBE.)</P>

<A NAME="282"><H3>Automatically referencing the Office Object Library</H3></A>

<P>One disadvantage of the <I>AssistantSearchOn 
</I>procedure is that it assumes a reference to the Office Object Library. If there is none, the procedure fails 
silently. The assistant appears, but it shows an idle, instead of a searching, 
animation. One way to handle this problem is to verify whether there is a reference to 
the Office Object Library and to add one automatically if necessary. Your 
application can then confidently invoke any animation, or indeed any other 
property of another shared Office object. The <I>AssistantSearchOn2 
</I>and <I>ReferenceOffice </I>procedures below show this solution.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub AssistantSearchOn2()
    ReferenceOffice
    AssistantSearchOn
    
End Sub

Sub ReferenceOffice()
Dim ref1 As Reference
Dim blnOffice9In As Boolean, mso9Library As String

'Enumerate members of References collection to determine
'whether Office Object Library is already referenced.
    blnOffice9In = False
    For Each ref1 In References
        If ref1.name = &quot;Office&quot; Then
            blnOffice9In = True
        End If
    Next ref1
    
'If Office Object Library reference is missing, reference it.
    If blnOffice9In = False Then
        mso9Library = _
            &quot;C:\program files\Microsoft Office\Office\mso9.dll&quot;
        Application.References.AddFromFile mso9Library
    End If
    
End Sub
</pre>
</TD></TR></TABLE>
</P>

<P><I>AssistantSearchOn2 </I>is nearly identical to the original procedure 
for invoking a searching animation. It actually calls 
<I>AssistantSearchOn</I>, but it calls <I>ReferenceOffice 
</I>first. <I>ReferenceOffice </I>ensures that the current project has 
a reference to the Office Object Library. It starts by enumerating all the 
members of the <I>References </I>collection to determine whether any of them have a 
<I>Name </I>property of Office. If yes, then the procedure sets a Boolean variable to 
<I>True</I>. Otherwise, <I>blnOffice9In </I>retains its default setting of 
<I>False</I>. The second segment of <I>ReferenceOffice 
</I>creates a reference to the Office Object Library if the 
Boolean variable is <I>False</I>. Having ensured that the Office Object Library is 
referenced, <I>AssistantSearchOn2 </I>can invoke the 
<I>AssistantSeachOn </I>procedure to finish activating the animation.</P>

<A NAME="283"><H3>Displaying a searching animation</H3></A>

<P>You can use the <I>Assistant</I> object to complement the 
<I>FileSearch </I>object. I already noted that some searches can take a while. In these situations, it is useful 
to present some kind of cue on the screen to show that your application is 
doing something. The Assistant's searching animation serves this purpose well.
</P>
<P>The following procedure searches the entire C drive for .mdb files 
and returns a count of the files. By displaying the searching animation just 
before launching the search and restoring the idle animation just after the search, 
the Assistant informs the user that the search is in progress and then informs 
the user that it's completed. It uses two procedure calls&#8212;one just before invoking 
the <I>Execute </I>method and the other just after. Since the 
<I>FileSearch </I>and <I>Assistant </I>objects depend on the Office Object Library, the procedure calls 
<I>ReferenceOffice </I>as its first step. If a reference to the Office Object Library does not exist, 
the procedure creates one. Without this precaution, the procedure would fail if 
a user inadvertently canceled a reference to the Office Object Library.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub FileSearchAct()
'Reference the Office Object Library before using
'either the FileSearch or the Assistant objects.
    ReferenceOffice

'Search on C drive and its subfolders
'for *.mdb.
    With Application.FileSearch
'Start a new search.
        .NewSearch
'Set search criteria.
        .LookIn = &quot;C:\&quot;
        .SearchSubFolders = True
        .FileName = &quot;*.mdb&quot;
    End With

    With Application.FileSearch
'Execute the search.
'Turn searching assistant on first.
        AssistantSearchOn
        If .Execute() &gt; 0 Then
            AssistantIdleOn
            MsgBox &quot;There were &quot; &amp; .FoundFiles.Count &amp; _
                &quot; file(s) found.&quot;
        Else
'If no files found, say so.
            MsgBox &quot;There were no files found.&quot;
        End If
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="284"><H3>Selecting animation types</H3></A>

<P>The Office Object Library contains over 30 different animation types. 
Figure 84 shows an Object Browser view that enumerates a subset of the animation 
types. Most animations, such as <I>msoAnimationSendingMail 
</I>and <I>msoAnimationPrinting</I>, go through a single cycle and return to idle. Other animations, such 
as <I>msoAnimationSearching </I>and 
<I>msoAnimationThinking</I>, repeat until you 
invoke an alternative animation. Because of IntelliSense, you do not have to recall 
the constant names for referring to animations. You can often simply select one 
from a list.</P>

<P><A HREF="javascript:fullSize('F08qh04x.htm')"> <img src="Images/F08qh04.JPG" width=404 height=418 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-4.</B> <I>The </I>msoAnimationType <I>member of the Office Object Library contains the more than 30 animation constants.</I><!-- /CAPTION -->
</P>

<A NAME="285"><H3>Selecting Assistant characters</H3></A>

<P>Eight Assistant characters ship with Office 2000, but Microsoft might add 
more in the future. You present an Assistant character by setting its 
<I>FileName </I>property to the name of that file. The following table lists the Assistant 
character names and their corresponding files.</P>

<P>
<table valign="top" cellpadding=5 width="95%">
<tr><th valign="top"><I>Assistant Character</I></th>
<th valign="top"><I>Filename</I></th>
</tr>
<tr>
<td valign="top">Clippit</td>
<td valign="top">Clippit.acs</td>
</tr>
<tr>
<td valign="top">Links</td>
<td valign="top">OffCat.acs</td>
</tr>
<tr>
<td valign="top">Rocky</td>
<td valign="top">Rocky.acs</td>
</tr>
<tr>
<td valign="top">Office Logo</td>
<td valign="top">Logo.acs</td>
</tr>
<tr>
<td valign="top">The Dot</td>
<td valign="top">Dot.acs</td>
</tr>
<tr>
<td valign="top">Mother Nature</td>
<td valign="top">MNature.acs</td>
</tr>
<tr>
<td valign="top">The Genius</td>
<td valign="top">Genius.acs</td>
</tr>
<tr>
<td valign="top">F1</td>
<td valign="top">F1.acs</td>
</tr>
</table>
</P>
     
<A NAME="286"><H3>Previewing Assistant animations</H3></A>

<P>Figure 8-5 shows a form in which the assistants act out their animations. 
The same animation can appear differently from one occurrence to the next. For 
example, there are at least three different versions of the goodbye animation 
for the F1 robot. The form offers seven animation types for each of three 
assistants. You can use the form to preview animations by making a selection from 
the Animation option group and then clicking an assistant command button. 
Analyzing the form's code will show you how to incorporate animations and 
change assistants in your applications.</P>

<P><img src="Images/F08QH05.GIF" width=395 height=413 border=0>
</P><P><!-- CAPTION --><B>Figure 8-5.</B> <I>You can use this form to preview the assistant animations.</I><!-- /CAPTION -->
</P>

<P>Figure 8-6 shows a selection of Assistant types and 
animations that you can preview using the form in Figure 8-5. At the top left, 
F1, the robot, executes the goodbye animation by burning to oblivion. Clippit 
rolls up a piece of paper and uses it to portray its searching animation. When 
Rocky performs the saving to disk animation, it holds up the disk before moving it 
to a collar pocket for safekeeping. F1 turns into a printer for the printing animation.</P>

<P><A HREF="javascript:fullSize('F08qh06x.htm')"> <img src="Images/F08qh06.JPG" width=404 height=351 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-6.</B> <I>A selection of animations performed by three different assistants. These were generated with the form shown in Figure 8-5.</I><!-- /CAPTION -->
</P>

<P>The following listing shows the code behind the form in Figure 8-5. 
The declaration area at the top of the module contains the design-time settings 
for the command buttons showing the Assistant types, and the buttons for 
different animation types in the option group. Notice that the buttons store 
the filename corresponding to the assistant on their face in their 
<I>Tag </I>property. Each button also has a simple event procedure for its click event. The buttons in 
the option group each have a value denoting an <I>msoAnimationType 
</I>constant. You use the Object Browser, shown in Figure 8-4, to determine the numerical 
value that matches a constant name. (For example, 
<I>msoAnimationSendingMail </I>equals 25.) As the form loads, it sets a series of properties to ensure that the 
assistant is ready when the user selects a button in the option group and clicks a 
command button.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Option Compare Database
'
'Design-time Command button settings
'    Name: cmdClippit , cmdRocky, cmdF1
'    Picture: c:\My Documents\My Pictures\clippit.bmp,
'        or rocky.bmp, or F1.bmp
'    Picture Type: Embedded
'    Tag: clippit.acs, or rocky.acs, or F1.acs
'    On Click: [Event Procedure]
'
'Design-time Option button settings
'    Idle button's Option Value = 1
'    Hello button's Option Value = 2
'    Goodbye button's Option Value = 3
'    Searching button's Option Value = 13
'    Printing button's Option Value = 18
'    Saving Mail button's Option Value = 25
'    Saving to disk button's Option Value = 112


Private Sub Form_Load()

    With Assistant
        .On = True
        .Sounds = True
        .Visible = True
    End With

End Sub


Private Sub cmdClippit_Click()
    AnimateActor Me.Controls(&quot;cmdClippit&quot;).Tag

End Sub


Private Sub cmdRocky_Click()
    AnimateActor Me.Controls(&quot;cmdRocky&quot;).Tag

End Sub


Private Sub cmdF1_Click()
    AnimateActor Me.Controls(&quot;cmdF1&quot;).Tag

End Sub


Sub AnimateActor(Fname As String)

    With Assistant
        .FileName = Fname
        .Animation = _
            Me.Controls(&quot;optAnimation&quot;)
        .Visible = True
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>The command buttons are central to the process. When you click a 
command button, the event procedure passes its tag value to the 
<I>AnimateActor </I>procedure. This procedure uses its passed argument to set the 
assistant's <I>FileName </I>property. Next, it sets the assistant's 
<I>Visible </I>property to <I>True </I>and sets its 
<I>Animation </I>property to the option group's value. The option group's 
value is, in turn, a function of the button that you clicked. The control has a 
default value of <I>1</I>, in case the user does not make a selection.</P>

<A NAME="287"><H2>Balloons</H2></A>

<P>You can use balloons to present text or graphics as well as to gather 
feedback from users. You can present balloons as modal, modeless, or autodown 
dialog boxes. The balloon's <I>Mode </I>property controls the type of balloon. 
The <I>msoModeAutoDown </I>setting closes the balloon if the user clicks anywhere 
on the screen. The modeless 
(<I>msoModeModeless</I>) and modal 
(<I>msoModeModal</I>) settings are more common. The modeless setting keeps a balloon open 
while users work outside of it. The modal setting forces a response before 
allowing any other behavior to occur. The default value for the 
<I>Mode </I>property is <I>msoModeModal</I>.
</P>

<P>You use the <I>NewBalloon </I>property for the 
<I>Assistant </I>object to create a <I>Balloon 
</I>object. Balloons have heading, text, label, check box, and button 
areas. You can populate these areas using corresponding property settings or 
hierarchical objects such as <I>BalloonCheckBoxes 
</I>and <I>BalloonLabels</I>. You assign text to the check boxes and labels using their 
<I>Text </I>property. You can further customize the content of a balloon using its 
<I>Icon </I>property. Six icons convey various types of message features, such as alerts, questions, information, and tips.</P>

<A NAME="288"><H3>Balloon graphics</H3></A>

<P>The following procedure presents a balloon with a heading, text, and icon. 
It also uses the default button (OK). Escape formatting strings in the 
<I>Heading</I> property's text mark the beginning 
(<I>{ul 1}</I>) and end (<I>{ul 0}</I>) of underlined 
text in the heading area. (The escape formatting strings can also be used to 
designate underlined text in the text area.) The 
<I>Text </I>property setting includes a bitmap image in the text area. Notice that you can wrap text around an image. The 
<I>Icon </I>property setting marks the balloon's content as information. Finally, the 
<I>Show </I>method opens the Assistant and its associated balloon. Figure 8-7 shows 
the Assistant and balloon that appear after you run the 
<I>balloonTextImageIcon </I>procedure.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub balloonTextImageIcon()

    With Assistant.NewBalloon
        .Heading = &quot;This is what {ul 1}F1{ul 0} looks like&quot; &amp; _
            &quot; in a balloon text area&quot;
        .Text = &quot; Some text before it &quot; &amp; _
            &quot;{bmp &quot;&quot;C:\My Documents\My Pictures\F1.bmp&quot;&quot;}&quot; &amp; _
            &quot;and more after it.&quot;
        .Icon = msoIconAlertInfo
        .Show
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P><img src="Images/F08qh07.GIF" width=310 height=259 border=0>
</P><P><!-- CAPTION --><B>Figure 8-7.</B> <I>You can include graphics in your balloons, and you can define the content using </I>Icon<I> property settings (such as the </I>AlertInfo <I>icon setting used for this balloon).</I><!-- /CAPTION -->
</P>

<A NAME="289"><H3>Balloon labels</H3></A>

<P>The two procedures prepare a balloon with labels 
and no buttons. The <I>setLabelCount </I>procedure passes an argument to 
the <I>balloonHeadTextLabel </I>routine. For valid arguments from 1 through 5, the 
called procedure presents an assistant with a balloon that contains as many labels 
as the value passed to it. Each label appears with a simple text string declaring 
the label number. Buttons in the balloon are not necessary with this design 
because clicking a label closes the balloon. The 
<I>Show </I>method opens the balloon and passes the value of the clicked label to the integer variable, 
<I>i</I>. A message box displays the number of the label the user clicked to close the balloon.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub setLabelCount()
    balloonHeadTextLabel 5
End Sub

Sub balloonHeadTextLabel(LabelCount As Integer)
On Error GoTo LabelTrap
Dim b1 As balloon, i As Integer

'Check for 0 or negative label count.
    If LabelCount &lt;= 0 Then
        Err.Raise 9
    End If

    Set b1 = Assistant.NewBalloon

'Create balloon with specified number of labels.
    With b1
        .Heading = &quot;This is my heading&quot;
        .Text = &quot;Select one of these things:&quot;
        For i = 1 To LabelCount
            .Labels(i).Text = &quot;Label &quot; &amp; i
        Next i
        .Button = msoButtonSetNone
        i = .Show
    End With

'Confirm label that user clicked.
    MsgBox i, vbInformation, &quot;Programming Microsoft Access 2000&quot;

LabelExit:
    Exit Sub
    
LabelTrap:
    If Err.Number = 9 Then
        MsgBox &quot;Number of labels more than 5 or less than &quot; &amp; _
            &quot;1. Retry with another number.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    Else
        Debug.Print Err.Number
        MsgBox &quot;Unanticipated error. Error number = &quot; &amp; _
            Err.Number &amp; vbCrLf &amp; &quot;Error Description: &quot; &amp; _
            Err.Description, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    End If
    Resume LabelExit

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>Built-in and custom error-trapping logic detects illegitimate arguments 
for the number of labels. If the passed argument is greater than 5, the 
<I>For&#8230;Next </I>loop that assigns label values fails on the attempt to assign text to the sixth 
label. This error (error number 9) results because balloons can show up to five 
labels only. Zero and negative arguments to the procedure do not generate the 
same error, but they also do not populate the balloon with labels. Therefore, 
the <I>balloonHeadTextLabel </I>procedure traps these values with an 
<I>If&#8230;Then </I>statement and raises a custom error with a number of 9. The procedure's trap for the 
error instructs the user to enter only values from 1 through 5.</P>

<A NAME="290"><H3>Collecting user input with balloons</H3></A>

<P>The <I>BalloonCheckBoxes </I>collection lets you present a suite of options and 
collect user responses. You are again limited to five controls&#8212;in this case, 
the controls are check boxes. Unlike label controls, check box controls do not 
close a balloon after they are selected. Therefore, if you specify a balloon with 
check boxes, you must assign a button set that can close the balloon.</P>

<P>The two procedures below offer a general framework for displaying 
check box controls in a balloon. They do not include error trapping, but in 
practice, you should include error logic like that in the preceding sample. 
The <I>setCheckCount </I>procedure passes an argument in the range of 1 through 5 
to indicate how many check boxes to include. The second procedure starts 
by setting a reference, <I>b1</I>, to a new balloon. It assigns the 
<I>Balloon</I> object's <I>Button </I>property to 
<I>msoButtonSetOkCancel</I> to include OK and Cancel buttons. 
This offers two routes to closing the balloon. After setting values for the heading 
and text in the balloon, it assigns text to each text box. The return value from 
the <I>Show </I>method in this case indicates which button the user clicked.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub setCheckCount()
    
    balloonHeadTextCheck 5

End Sub


Sub balloonHeadTextCheck(CheckCount As Integer)
Dim b1 As balloon, i As Integer
Dim strChecks As String, iChecks As Integer
    
'Set reference to the balloon.
    Set b1 = Assistant.NewBalloon

'Assign text to check box controls.
    With b1
        .Button = msoButtonSetOkCancel
        .Heading = &quot;Here's the Heading&quot;
        .Text = &quot;This is some text in the balloon.&quot;
        For i = 1 To CheckCount
            .Checkboxes(i).Text = &quot;Check box # &quot; &amp; i
        Next
        i = .Show
    End With

'Did user click Cancel button?
    If i = msoBalloonButtonCancel Then
        MsgBox &quot;You cancelled the balloon.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
        Exit Sub
    End If

'Record individual boxes checked and count of
'all checked boxes.
    For i = 1 To CheckCount
        If b1.Checkboxes(i).Checked = True Then
            If strCheck = &quot;&quot; Then
                strCheck = CStr(i)
            Else
                strCheck = strCheck &amp; &quot;, &quot; &amp; CStr(i)
            End If
            iChecks = iChecks + 1
        End If
    Next i

'Present a message box with the results.
    If iChecks = 0 Then
        MsgBox &quot;No boxes checked.&quot;, vbInformation, _
            &quot;Programming Microsoft Access 2000&quot;
    ElseIf iChecks = 1 Then
        MsgBox &quot;You checked box &quot; &amp; strCheck &amp; &quot;.&quot;, _
            vbInformation, &quot;Programming Microsoft Access 2000&quot;
    Else
        MsgBox &quot;You checked &quot; &amp; iChecks &amp; &quot; boxes. &quot; &amp; _
            &quot;These were boxes: &quot; &amp; strCheck &amp; &quot;.&quot;, _
            vbInformation, &quot;Programming Microsoft Access 2000&quot;
    End If

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>The remainder of the <I>balloonHeadTextCheck 
</I>procedure processes the reply to the balloon. First, the procedure checks the return value from the 
<I>Show </I>method. If this value equals the <I>msoBalloonButtonCancel 
</I>constant, the user clicked the Cancel button. After displaying a message announcing this, 
the procedure simply exits.
</P>
<P>Since the only way to close the balloon is by clicking OK or Cancel, 
the user must have clicked OK if he or she did not click Cancel. The next block 
of code performs two tasks: It develops a text string indicating boxes with a 
check, and then it counts the number of boxes with checks. The last block of code 
in the procedure uses the string and count to prepare a message box 
statement that no boxes were checked, only one box was checked, or several boxes 
were checked.</P>

<A NAME="291"><H3>Modeless balloons</H3></A>

<P>The sample below processes modeless balloons, which stay open while the 
user does something in another part of the application. All the samples so far 
have dealt with modal balloons. One feature tailored for working with 
modeless balloons is the <I>Callback </I>property. You set this property to the name of 
another procedure that will do something with the response to the balloon. The 
<I>Callback </I>procedure for a modeless balloon must contain three parameters in a 
set sequence. The first parameter includes a variable that represents the 
balloon reference. The second one includes a variable to pass along the control a 
user clicked. The third one uses a long variable that identifies the 
<I>Private </I>property of the balloon invoking the callback procedure. It is especially important 
with a modeless balloon that you designate a control for closing it. If you do not 
offer the user such a control, the balloon might stay open indefinitely.</P>

<P>The procedure below presents a balloon with four labels. Notice that 
the balloon's <I>Mode </I>property is 
<I>msoModeModeless</I>. This setting requires a 
<I>Callback </I>property setting. Without one, the procedure will generate an error. Notice 
that one of the labels explicitly denotes a close option. You can also represent a 
close option using a <I>Button </I>property setting. Clicking a label does not 
automatically close the balloon; it invokes the 
<I>Callback </I>procedure named <I>answerHelp</I>. 
This procedure appears in Figure 8-8.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub modalCallbackDemo()
Dim b1 As balloon

    Set b1 = Assistant.NewBalloon
    
    With b1
        .Heading = &quot;Balloon to Call for Help with a Process&quot;
        .Text = &quot;Give me more info about:&quot;
        .Labels(1).Text = &quot;Printing&quot;
        .Labels(2).Text = &quot;Saving as mail&quot;
        .Labels(3).Text = &quot;Saving to disk&quot;
        .Labels(4).Text = &quot;Close&quot;
        .Button = msoButtonSetNone
        .Mode = msoModeModeless
        .Callback = &quot;answerHelp&quot;
        .Show
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P><A HREF="javascript:fullSize('F08qh08x.htm')"> <img src="Images/F08qh08.JPG" width=404 height=264 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-8.</B> <I>A modeless balloon and its callback routine.</I><!-- /CAPTION -->
</P>

<P>The <I>answerHelp </I>procedure presents a message box whose content 
is determined by the label that was clicked in the balloon. The 
<I>Select Case </I>statement that processes the reply reads the label clicked from the second 
parameter passed to the callback procedure. After the user closes the message box, 
the balloon remains open. Generally, users can navigate around a form while 
a modeless balloon presents help on how to respond to a field on the form. 
If the user clicks the fourth button, the procedure uses the reference to the 
balloon, <I>b1</I>, to invoke the <I>Close </I>method.</P>

</BODY>
</HTML>




