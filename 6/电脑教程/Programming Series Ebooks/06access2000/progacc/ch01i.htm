<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Macros</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01h.htm", "ch02a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="34"><H1>Macros</H1></A>

<P>Macros are not part of VBA, but they do offer an easy way to automate 
your Access applications. One big attraction of macros is that you do not have 
to remember their syntax ; Access makes it easy to select a macro action from 
a drop-down list box. On the other hand, with macros the debugging 
techniques are not nearly as rich as with VBA. Another disadvantage is that macros 
are stored in their own macro container, not behind forms. Over time, this 
can lead to maintenance problems. Also, Access macros are 
different from the macros in Excel, Word, and PowerPoint. In fact, macros are becoming an 
obsolete technology.</P>

<P>If you have been using an earlier version of Access, you have 
probably had some hands-on experience with macros. In earlier releases of 
Access, macros were the only way to create special startup options and custom 
menus. You can now manage menus using the VBA <I>CommandBars 
</I>collection object. In addition, you can use a Startup dialog box for controlling various aspects 
of starting an Access application, such as displaying a form when the startup 
process concludes, specifying whether users can make changes to menus 
and toolbars, and specifying whether to display the Database window.</P>

<A NAME="35"><H2>Designing Macros</H2></A>

<P>To work with macros, you have to know how to use the macros user 
interface and you need a basic familiarity with macro actions. Figure 1-28 shows the 
Macro window with the Northwind database loaded.</P>

<P>Each Access macro consists of one or more rows in the Macro 
window. Each row specifies an action (such as moving the focus to a control), an 
optional condition for the action, and an optional comment. The Action 
Arguments area at the bottom of the window (visible when you select an action) 
allows you to specify the options for each action and displays help for the selected 
item. In addition, the first row of each macro specifies the macro's name. 
(Choose Macro Names from the Access View menu if you can't see the macro names.)</P>

<P>Many macro actions have options that you can select with a simple 
click. For example, the second row of the Preview macro in Figure 1-28 (the row with the right-pointing triangle in the first column) displays a 
message box. In the Action Arguments area of the window, you can select the 
arguments for a message box from drop-down list boxes. For example, you 
can use the Type drop-down list box to select the icon that is displayed in 
the message box.</P>

<P>In the early days, this point-and-click selection feature gave macros 
a definite usability advantage over VBA code. Now, VBA has IntelliSense. 
Macros are still fairly easy to use&#8212;you still enjoy the ease of selecting 
arguments&#8212;but you do not have a flexible interface in which you can simultaneously 
view the code (including arguments) for multiple macro lines.</P>

<P>The most important column in the Macro window is the Action 
column. You do not have to type actions into this column; you can simply click any 
row in the column for a full menu of macro actions. In the Condition column 
just to the left of the Action column, you can specify criteria that conditionally 
control the execution of the action on a line.</P>

<P><A HREF="javascript:fullSize('F01QH28x.htm')"> <img src="Images/F01QH28.JPG" width=404 height=259 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 1-28.</B> <I>The main user interface elements of the Macro window.</I><!-- /CAPTION -->
</P>

<P>You can store multiple macros in a single macro object. This is an 
efficient way to store multiple macros that share some common function. Use the 
Macro Name column to assign names to the individual macros within a macro 
object. When you assign a macro to an action for a control on a form or a report, 
you specify the macro using a two-part name. The first part is the name 
of the macro object; the second part is the macro's name, as shown in the 
Macro Name column. (Use a period to separate the parts of the name, as 
in <I>MyMacros.DisplayHelp</I>.)</P>

<P>Access features a built-in conversion procedure for translating macros 
to VBA code. You invoke the conversion features slightly differently 
depending on whether your application calls its macros from a form or from the 
Database window. From a form or report, choose Macro from the Tools menu and 
then choose Convert Form's Macros To Visual Basic or Convert Report's Macros 
To Visual Basic. To convert a macro from the Database window, select it on 
the Macro page. Choose File-Save As, and in the Save As dialog box, select 
Module from the As drop-down list box.</P>

<A NAME="36"><H2>VBA vs. Macros</H2></A>

<P>VBA keeps getting dramatically better with each new release, while macros 
have remained basically unchanged. This is the major reason for switching to 
VBA from macros, but there are several other reasons as well:</P>
<UL>
<P><LI>VBA's built-in error trapping and other flexible debugging 
can dramatically reduce the life cycle cost of ownership by 
reducing maintenance costs.</LI></P>
<P><LI>VBA offers many advanced processing features, such as 
looping options, great Internet functionality, and OLE DB links to 
external data sources.</LI></P>
<P><LI>VBA custom form and report classes simplify code reuse.</LI></P>
<P><LI>VBA enables you to view concurrently the arguments for all 
lines&#8212;not just one line.</LI></P>
<P><LI>You can tap into the Windows API from VBA.</LI></P>
</UL>


</BODY>
</HTML>




