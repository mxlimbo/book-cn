<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Traditional Approaches</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13a.htm", "ch13c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="406"><H1>Traditional Approaches</H1></A>

<P>The traditional Access Web technologies are particularly appropriate for 
developing low-volume (around 10,000 visitors per day 
or fewer) Web and database solutions. Since browsers can be incompatible across manufacturers and 
versions, traditional approaches are safe and relatively easy to use.</P>


<p>Access 2000 offers three such approaches:</P>


<UL>
<P>
<LI>Publishing datasheets in HTML, IDC/HTX, and ASP format.
</LI></P>


<P>
<LI>Using HTML forms. There is no built-in development 
environment within Access for HTML forms, but you can adapt your old HTML form solutions to OLE DB/ADO (ActiveX Data Objects) technology.
</LI></P>


<P>
<LI>Publishing reports in snapshot format to an FTP folder. This 
simplifies access to Access reports using Netscape browsers.
</li></P>

</Ul>

<A NAME="407"><H2>Publishing Datasheets</H2></A>

<P>You can choose Export from the File menu in the database window to export an Access datasheet, such as a table. This command (which also publishes datasheets behind forms and reports) offers some of the functionality 
associated with the obsolete Publish To The Web wizard. It publishes datasheets in HTML, IDC/HTX, and ASP formats. The HTML format is static but easy to edit with standard HTML editors. The latter two formats are dynamic. They use the server to write out HTML content to reflect the most recent results in a datasheet.</P>


<P>The IDC/HTX format targets the first two releases of Microsoft Internet Information Server (IIS), but it also works with more recent releases. The 
ASP format works only with more recent releases, but it lets you mix Microsoft Visual Basic Scripting Edition and Microsoft JScript with HTML code. You should not automatically choose one of the dynamic formats. If you have large datasheets or many users, and if the content in a datasheet changes infrequently or if timeliness is not an issue, the static HTML format might be the best choice because static pages publish faster.</P>


<A NAME="408"><H3>Publishing in HTML format</H3></A>

<P>To publish a datasheet in HTML format, select a table, query, form, or report in the database window and then choose Export from the File menu. In the Export dialog box, use the Save In drop-down list box to select a location for the file. If you are publishing to an intranet, this can be a folder at the site. 
If you are publishing to a remote Web server, you can use any local folder to collect your HTML pages and then transfer the pages to a remote server using the 
File-Import command in FrontPage 2000. You can also use another route, such as File Transfer Protocol (FTP).</P>


<P>Figure 13-1 shows the Export dialog box for publishing the datasheet behind the Products form from the Northwind database. The Save As Type drop-down list box shows the HTML format. The Save In box designates the folder CAB_Office_2000, the root folder of a local intranet site with the same name. 
The Autostart check box is selected, so the page will appear as soon as it is published. This can cause a browser session to start with the Products datasheet open.</P>


<P><A HREF="javascript:fullSize('F13qh01x.htm')"> <img src="Images/F13qh01.JPG" width=404 height=260 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 13-1.</B> <I>The Export dialog box.</I><!-- /CAPTION -->
</P>


<P>When you click Save, the HTML Output Options dialog box appears. Here you can specify a template for the page containing the datasheet. If you 
have a theme set for the default.htm page, you can reference that page. Otherwise, you can reference a local file with formatting that you will use at a remote site.</P>


<P>
One of the advantages of the HTML format is that you have an HTML table to edit. Figure 13-2 shows the published Products datasheet in FrontPage 2000 and the Table Properties dialog box, which shows some 
of the formatting options, including cell padding, cell spacing, and background color or image. You can also set properties for cells, rows, and columns to 
specify other formatting options. You can undo any custom formatting in FrontPage, and you can even select individual columns and rows and selectively delete them.</P>


<P><A HREF="javascript:fullSize('F13qh02x.htm')"> <img src="Images/F13qh02.JPG" width=404 height=302 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 13-2.</B> <I>After loading your datasheets into FrontPage, you can edit the resulting HTML table.</I><!-- /CAPTION -->
</P>


<A NAME="409"><H3>Publishing in IDC/HTX format</H3></A>

<P>When you publish a datasheet in either dynamic format, you need an open database connectivity (ODBC) Data Source Name (DSN). The DSN must reside on the Web server along with the database to which it refers. The file 
DSN approach is in theory more flexible since you can send it to the server, but ISPs often impose special rules that make it less than straightforward to run 
them. On the other hand, Internet service providers (ISPs) manage DSNs as a Web site resource. They routinely issue one or more DSNs for each Web site account 
with database usage privileges. Therefore, it's often easier to use system, rather than file, DSNs. In any event, system DSNs offer a performance advantage.</P>


<P>After selecting a datasheet source in the database window and 
choosing File-Export, select Microsoft IIS 1-2(*.htx;*.idc) in the Save As Type list box. Make other selections as you would for an HTML file. Clicking Save opens the 
HTX/IDC Output Options dialog box (shown in Figure 13-3). You can use the Browse button to select a template that formats the page returning the results from 
the IDC file. In order to run, the IDC file needs a DSN name on the server. In the Data Source Name text box, enter the name of the DSN that your Webmaster set up for this task. The dialog box also includes user ID and password 
fields in case the database on the Web server runs with user-level security. (This 
is very rare, particularly in Internet applications.)</P>


<P><A HREF="javascript:fullSize('F13QH03x.htm')"> <img src="Images/F13QH03.JPG" width=404 height=187 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 13-3.</B> <I>The HTX/IDC Output Options dialog box.</I><!-- /CAPTION -->
</P>


<P>The IDC and HTX files complement one another. The IDC file runs a 
query against an Access database on the Web server. The HTX file uses HTML 
extensions to format the return set in HTML for viewing by a browser. While you 
can code the HTX file in an HTML extension, it returns pure HTML to the 
browser so that any browser can read its results. Because the only way that an IDC 
file can expose its return set is through an HTML file, this format 
processes datasheets. However, it is not appropriate for processing forms because the HTML 
return format does not serve as a good input for most HTML forms.</P>


<P>When you run an IDC/HTX pair from a Web server, browsers 
reference the IDC file, which must reside in a Web server folder that can run scripts. 
The IDC file automatically invokes the HTX file, which in turn processes the 
return set from the IDC file and sends HTML-formatted results back to the browser.</P>


<A NAME="410"><H3>Publishing in ASP format</H3></A>

<P>Like IDC and HTX files, ASP files require a reference to a DSN. In the Export dialog box, select Microsoft Active Server Pages (*.asp) in the Save As Type 
list box. In the Microsoft Active Server Pages Output Options dialog box, enter a DSN name. Other fields in the dialog box are optional and depend on your formatting preferences and database security settings. (These fields are 
optional in the IDC/HTX and HTML dialog boxes as well.)</P>


<P>The ASP format differs from the IDC/HTX format in that there is only 
one file. This ASP file performs the query and formats the result for the browser. 
The file runs its query and creates its HTML on the server, and then the Web 
server transports the HTML page back to the browser. The following ASP code 
writes the datasheet behind the Products form in the Northwind database to a browser:</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META HTTP-EQUIV=&quot;Content-Type&quot;
    CONTENT=&quot;text/html;charset=windows-1252&quot;&gt;
&lt;TITLE&gt;Products&lt;/TITLE&gt;
&lt;/HEAD&gt;&lt;BODY&gt;
&lt;%
If IsObject(Session(&quot;Nwind2000_conn&quot;)) Then
    Set conn = Session(&quot;Nwind2000_conn&quot;)
Else
    Set conn = Server.CreateObject(&quot;ADODB.Connection&quot;)
    conn.open &quot;Nwind2000&quot;,&quot;&quot;,&quot;&quot;
    Set Session(&quot;Nwind2000_conn&quot;) = conn
End If
%&gt;
&lt;%
If IsObject(Session(&quot;Products_rs&quot;)) Then
    Set rs = Session(&quot;Products_rs&quot;)
Else
    sql = &quot;SELECT * FROM [Products]&quot;
    Set rs = Server.CreateObject(&quot;ADODB.Recordset&quot;)
    rs.Open sql, conn, 3, 3
    If rs.eof Then
        rs.AddNew
    End If
    Set Session(&quot;Products_rs&quot;) = rs
End If
%&gt;
&lt;TABLE BORDER=1 BGCOLOR=#ffffff CELLSPACING=0 RULES=none&gt;
&lt;FONT FACE=&quot;Arial&quot; COLOR=#000000&gt;&lt;CAPTION&gt;&lt;B&gt;Products&lt;/B&gt;
&lt;/CAPTION&gt;&lt;/FONT&gt;

&lt;THEAD&gt;&lt;TR&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;ProductID&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;ProductName&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;SupplierID&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;CategoryID&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;QuantityPerUnit&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;UnitPrice&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;UnitsInStock&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;UnitsOnOrder&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;ReorderLevel&lt;/FONT&gt;&lt;/TH&gt;
&lt;TH BGCOLOR=#c0c0c0 BORDERCOLOR=#000000 &gt;
&lt;FONT SIZE=2 FACE=&quot;Arial&quot; COLOR=#000000&gt;Discontinued&lt;/FONT&gt;&lt;/TH&gt;
&lt;/TR&gt;&lt;/THEAD&gt;
&lt;TBODY&gt;
&lt;%
On Error Resume Next
rs.MoveFirst
do while Not rs.eof
%&gt;
&lt;TR VALIGN=TOP&gt;
&lt;TD BORDERCOLOR=#808080 &gt;&lt;B&gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;ProductID&quot;).Value)%&gt;&lt;BR&gt;&lt;/FONT&gt;
&lt;/B&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080 &gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;ProductName&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080 &gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;SupplierID&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080 &gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;CategoryID&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080 &gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;QuantityPerUnit&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080  ALIGN=RIGHT&gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;UnitPrice&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080  ALIGN=RIGHT&gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;UnitsInStock&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080  ALIGN=RIGHT&gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;UnitsOnOrder&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#808080  ALIGN=RIGHT&gt;
&lt;FONT SIZE=1 FACE=&quot;MS Sans Serif&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;ReorderLevel&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD BORDERCOLOR=#000000  ALIGN=RIGHT&gt;&lt;B&gt;
&lt;FONT SIZE=2 FACE=&quot;System&quot; COLOR=#000000&gt;
&lt;%=Server.HTMLEncode(rs.Fields(&quot;Discontinued&quot;).Value)%&gt;&lt;BR&gt;
&lt;/FONT&gt;&lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;%
rs.MoveNext
loop
%&gt;
&lt;/TBODY&gt;&lt;TFOOT&gt;&lt;/TFOOT&gt;
&lt;/TABLE&gt;&lt;/BODY&gt;&lt;/HTML&gt;</pre>
</td>
</tr>
</table></P>



<P>Notice that the code mixes HTML with VBScript. It also uses ADO to 
create the connection to a data source, extract a recordset, and insert the 
results into an HTML table. A 
<I>Do</I> loop transfers the recordset contents to an HTML 
table. None of the VBScript code stays in the version that the server sends to 
the browser; the browser receives pure HTML. This makes ASP appropriate 
for many different kinds of browsers. The versatility of composing HTML on 
the fly is the cause for a pause when a browser launches an ASP file. Pages 
with more iterations and field translations require more composing time than 
those with just a few fields and rows. You should plan your ASP page contents 
so that they deliver sufficient information in a single page without 
incurring undue processing delays.</P>


<A NAME="411"><H2>Using HTML Forms</H2></A>

<P>One of the strengths of ASP technology is its support of HTML forms. This is important because all browsers support HTML forms. You can use these 
forms to gather information from site visitors or return database results in a 
record layout (as opposed to a datasheet layout). An HTML form consists of one or 
more controls for displaying or storing information. Typically, the form contains 
at least one button for submitting the form fields to the Web server. If the 
form requires a reply, a program on the server can process the form fields and 
generate a response page.</P>


<P>HTML forms often work like a call-and-response game between a 
browser and a Web server. The browser user fills in the fields and clicks the Submit button for the form. When the browser sends the form to the server, it transmits 
form field values and the name of a program on the server that knows what to do with those field values. This is the 
<I>call</I> part of the game. The Web server sends the form field values to the right processing program on the server. That program can echo the input values, check them for validity, append them to a record source, do a lookup of data from a record source, or more. It typically prepares some kind of return page for the browser. This is the 
<I>response</I>. ASP files can serve as both the initial form that accepts the call and the response 
program that replies to the call.</P>


<P>Figure 13-4 shows a pair of HTML forms that illustrate the 
call-and-response character of HTML form processing. The top form includes a drop-down list 
box with the names of employees in the Northwind database. A user can select 
a name, such as Buchanan, and click Get Extension to submit the form to 
the server. This is the call action. The Web server takes the input form and 
passes it to telereturn.asp, which reads the entry in the list box, looks up the 
telephone number for the employee, and writes a page with the information 
for the browser. The Web server sends the page back to the browser. This is 
the response action.</P>


<P><img SRC="Images/F13qh04.GIF" width=396 height=680 border="0">
</P><P><!-- CAPTION --><B>Figure 13-4.</B> <I>The HTML form on top calls the Web server and invokes the reply page on the bottom.</I><!-- /CAPTION -->
</P>


<P>Access 2000 does not include built-in wizards for building these kinds 
of pages with HTML forms, but the process is straightforward. The main 
challenge is learning the syntax for a few HTML form controls and how to intermix 
HTML and script, such as VBScript, in an ASP file. The following code is all that 
the top page in Figure 13-4 requires. The filename for this code is 
telelookup.asp. Its name appears in the Address list box on the top page.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
&lt;%
set cnn1 = server.createobject(&quot;ADODB.Connection&quot;)
cnn1.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
    &quot;Data Source=C:\Program Files\Microsoft Office\Office\&quot; &amp; _
    &quot;Samples\Northwind.mdb;&quot;
set rs = Server.CreateObject(&quot;ADODB.Recordset&quot;)
rs.open &quot;select * from employees&quot;, cnn1
%&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Extension Lookup Window&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;form name=MyForm method=Post action=telereturn.asp&gt;
Last name: &lt;select name=DCombo&gt;
&lt;%
do while not rs.eof
%&gt;
    &lt;option value=&lt;%=rs.fields(&quot;EmployeeID&quot;)%&gt;&gt;
        &lt;%=rs.Fields(&quot;LastName&quot;)%&gt;
&lt;%
rs.MoveNext
Loop
%&gt;
&lt;/select&gt;
&lt;input type=&quot;Submit&quot; value=&quot;Get Extension&quot;&gt;&lt;br&gt;&lt;br&gt;
&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;
</pre>
</td>
</tr>
</table></P>


<P>Notice that the script is delimited by 
<I>&lt;%</I> and 
<I>%&gt;</I>. The first script segment opens a connection to the Northwind database through OLE DB drivers that do not require a DSN. The first segment also creates a recordset with the 
information to populate the drop-down list box. Next, some HTML code starts a 
page and a form on the page. In the form declaration, the code assigns 
telereturn.asp as the program that processes the form. Just before starting a 
<I>Do </I>loop, the program declares a drop-down list box with the HTML 
<I>select</I> keyword. It names the control dcombo. (Names in HTML are not case sensitive.). The 
<I>Do </I>loop populates the list box with values from the recordset created by the first 
script segment. The form closes with a Submit button that has the label Get 
Extension.</P>


<p>
The telereturn.asp file also starts by opening a connection and creating 
a recordset, as shown below. However, this open action has two important 
differences from the one in telelookup.asp. First, it uses a DSN to help create 
the connection. This is not necessary, but many legacy ASP files are designed 
this way. Second, the code reads the value of dcombo and uses it to form the 
SQL statement for the query that looks up an employee's telephone number.</P>



<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>
&lt;%
set rs = Server.CreateObject(&quot;ADODB.Recordset&quot;)
sql = &quot;select * from employees&quot;
sql = sql &amp; &quot; where employees.employeeid = &quot;
sql = sql &amp; request.form(&quot;dcombo&quot;)
rs.open sql,&quot;DSN=Nwind2000&quot;
%&gt;
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Extension Result Window&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;form&gt;
First Name: &lt;input TYPE=&quot;TEXT&quot; VALUE=&quot;
    &lt;%=rs.fields(&quot;FirstName&quot;)%&gt;&quot;&gt;
&lt;/form&gt;
The extension for &lt;%=rs.fields(&quot;FirstName&quot;)%&gt;&amp;nbsp;
    &lt;%=rs.fields(&quot;LastName&quot;)%&gt;
    is &lt;%=rs.fields(&quot;Extension&quot;)%&gt;.
    &lt;a href=&quot;telelookup.asp&quot;&gt;
    Go back to the combo box form for another extension lookup.
&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</pre>
</td>
</tr>
</table></P>


<P>After creating a recordset with information for the employee selected 
in telelookup.asp, telereturn.asp formats a page. The page contains the 
employee's first name in an HTML text box, a simple HTML string with the name and 
extension, and a hyperlink for returning control to telelookup.asp. When the 
Web server passes this page back to the browser, the call-and-response cycle ends.</P>


<A NAME="412"><H2>Using FTP Snapshots with Netscape Browsers</H2></A>

<P><a href="ch06a.htm">Chapter 6</a> discussed the snapshot format for reports and showed examples 
of its capabilities, but it did not mention using snapshots with FTP. When you 
place snapshots in an FTP folder for a Web server, Netscape browsers can open 
them remotely at the Web server. The user need not download the file and launch 
a separate viewer, as is the case with Hypertext Transfer Protocol (HTTP).</P>


<P>When a Netscape browser opens a snapshot of a report from an FTP 
folder, it automatically creates a new window for the report. This scenario assumes 
that you have installed the Snapshot Viewer and that the workstation has an 
association between .snp file types and that viewer. 
Figure 13-5 shows an excerpt from a snapshot of the Northwind Catalog report. It shows an 
image, multiple fonts, and other formatting touches, such as dividing lines. The order 
entry form at the end of the Catalog report also reproduces 
faithfully.</P>


<P><A HREF="javascript:fullSize('F13qh05x.htm')"> <img src="Images/F13qh05.JPG" width=404 height=360 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 13-5.</B> <I>An excerpt from a snapshot report opened with a Netscape browser.</I><!-- /CAPTION -->
</P>


<P>When you save the snapshot file, you simply place it in the FTPROOT folder for the Web server (or another FTP folder). Type 
<I>ftp://webserver/filename.snp </I>in the Netscape address Location box. Replace 
<I>webserver</I> with the name of your Web server. (For the samples in this chapter, the Web server is cab2200.) Since the FTP protocol is very popular, you can use this publishing mechanism with many different types of Web servers and Web browsers.</P>


</BODY>
</HTML>




