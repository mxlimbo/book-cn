<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>The CommandBar Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08d.htm", "ch09a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="292"><H1>The <I>CommandBar </I>Object</H1></A>
<P>The <I>CommandBar </I>object model (shown in Figure 8-9) is very 
rich&#8212;it includes both built-in and custom command bars. 
C<I>ommand bar </I>is a generic term that refers to a menu bar, a toolbar, or a popup menu bar. 
<I>CommandBar</I> controls enable users to interface with command bars and interact with an 
application. The three broad classes of 
<I>CommandBar</I> controls are 
<I>CommandBarButton</I>, <I>CommandBarComboBox</I>, and 
<I>CommandBarPopup </I>objects.
</P>


<P><A HREF="javascript:fullSize('F08QH09x.htm')"> <img src="Images/F08qh09.JPG" width=404 height=127 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-9.</B> <I>You use the CommandBar object model to customize built-in command bars and create custom command bars.</I><!-- /CAPTION -->
</P>

<A NAME="293"><H2>Enumerating Command Bar Elements</H2></A>

<P>Enumerating command bar elements is critical to working with command 
bars. Enumeration is a vehicle for learning the hierarchy of the 
<I>CommandBar </I>object. The knowledge that you gain through the following samples will help you 
when you modify built-in command bars and develop custom ones.
</P>
<P>The following short procedure gives a count of command bars in 
an application. If there are no custom command bars, the procedure reports a 
count of the built-in command bars, 140. The number would be higher if an 
application had custom command bars.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub countCommandBars()

    MsgBox &quot;There are &quot; &amp; CommandBars.Count &amp; _
        &quot; bars in the CommandBars collection.&quot;

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>There are three types of command bars. The Office Object Library 
includes the <I>msoBarType </I>constants to reference these as 
<I>msoBarTypeNormal</I>, <I>msoBarTypeMenuBar</I>, and 
<I>msoBarTypePopup</I>. You can also distinguish between 
built-in and custom command bars. The following procedure gives the count by 
type of command bar for each built-in toolbar.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub builtinCommandBarCount()
Dim cbr1 As CommandBar
Dim iMbars As Integer, iTbars As Integer
Dim iPbars As Integer, ibuiltin As Integer

    For Each cbr1 In CommandBars
        If cbr1.BuiltIn Then
            ibuiltin = ibuiltin + 1
            If cbr1.Type = msoBarTypeMenuBar Then
                iMbars = iMbars + 1
            ElseIf cbr1.Type = msoBarTypeNormal Then
                iTbars = iTbars + 1
            Else
                iPbars = iPbars + 1
            End If
        End If
    Next
    MsgBox &quot;There are &quot; &amp; ibuiltin &amp; &quot; command bars. &quot; &amp; _
        IMBars &amp; &quot;is a menu bar, &quot; &amp; iTbars &amp; &quot; are toolbars, and &quot; &amp; _
        iPbars &amp; &quot; are popup bars.&quot;s

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="294"><H3>Listing visible command bars</H3></A>

<P>Since there are 140 built-in command bars, you probably will not want to 
enumerate all of them very often. However, subsets of them can be important 
to an application. For example, your application might want to know which 
command bars are visible. The following <I>enumerateVisibleCommandBars 
</I>procedure writes a line to the Immediate window for each visible command bar. The 
lines display three properties for each command bar&#8212; the command bar name, 
type, and count of controls. A pair of nested <I>Immediate If 
</I>functions decode the <I>Type </I>property. Rather than enumerate the controls on command bars to develop 
a count, the procedure simply reports the command bar's 
<I>Count </I>property.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub enumerateVisibleCommandBars()
Dim cbr1 As CommandBar

    For Each cbr1 In CommandBars
        If cbr1.Visible = True Then
            Debug.Print cbr1.name, _
                (IIf(cbr1.Type = msoBarTypeNormal, _
                &quot;toolbar&quot;, _
                IIf(cbr1.Type = msoBarTypeMenuBar, _
                &quot;menu bar&quot;, &quot;popup bar&quot;))), _
                cbr1.Controls.Count
        End If
    Next cbr1

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>It is relatively easy to extend the above code to enumerate the 
individual controls on each visible command bar. Command bars have a 
<I>Controls </I>collection, and the elements of this collection are 
<I>CommandBarControl </I>objects. The following procedure applies a 
<I>CommandBar </I>object and a 
<I>CommandBarControl </I>object while listing the captions for the controls on all visible command bars.
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub enumerateControlCaptions()
Dim cbr1 As CommandBar
Dim ctl1 As CommandBarControl

    For Each cbr1 In CommandBars
        If cbr1.Visible = True Then
            Debug.Print &quot;Command bar name: &quot; &amp; cbr1.name &amp; _
                &quot; and control count: &quot;; cbr1.Controls.Count
                For Each ctl1 In cbr1.Controls
                    Debug.Print cbr1.name, ctl1.Captions
                Next ctl1
        End If
    Next cbr1

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="295"><H3>Listing menu commands</H3></A>

<P>Finally, you might need to list the individual commands on a menu. This 
involves treating the menu as a command bar so that the commands expose 
themselves as controls. You can determine the name for a command bar 
representing a menu using the <I>enumerateControlCaptions 
</I>procedure (or a variation of it). The following pair of procedures loop through the controls on a menu. The 
first procedure passes a command bar name to the second procedure, which 
loops through the controls for that command bar.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub listCommands()
        enumerateCommandsOnMenu (&quot;Help&quot;)

End Sub


Sub enumerateCommandsOnMenu(menuName)s
Dim cbr1 As CommandBars
Dim ctl1 As CommandBarControl

'Set a reference to a command bar.s
    Set cbr1 = CommandBars(menuName)
    
'Loop through the controls for that command bar.s
    For Each ctl1 In cbr1.Controlss
        Debug.Print ctl1.Caption
    Next ctl1

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="296"><H2>Manipulating Built-In Command Bars</H2></A>

<P>You can modify built-in command bars in several ways. The following 
sections explore some of these.</P>

<A NAME="297"><H3>Disabling and reenabling command bars and their controls</H3></A>

<P>You can disable and restore entire command bars. The following two 
procedures disable the built-in menu bar (called Menu Bar) and then reenable it. 
To make this command bar inoperable on a form, you simply set its 
<I>Enable </I>property to <I>False </I>within a form event procedure. Your applications can 
condition the disabling of a command bar on various factors, such as a user ID.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub disableMenuBar()
Dim cbr1 As CommandBar

    For Each cbr1 In CommandBars
        If cbr1.name = &quot;Menu Bar&quot; Then
            cbr1.Enabled = False
        End If
    Next cbr1

End Sub


Sub enableMenuBar()
Dim cbr1 As CommandBar

    For Each cbr1 In CommandBars
        If cbr1.name = &quot;Menu Bar&quot; Then
            cbr1.Enabled = True
        End If
    Next cbr1

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>You can also disable individual commands on a menu bar or toolbar. 
The first procedure in the following pair disables the View command on the 
Menu Bar menu bar and the Form View toolbar. This helps to secure a form's 
design by removing two familiar routes for switching from Form view to Design 
view. In addition to disabling the View control, the first procedure protects the 
change by setting the command bar's <I>Protection 
</I>property to <I>msoBarNoCustomize</I>. This setting grays the Reset button in the Customize dialog box for the Menu Bar 
and Form View command bars. The second procedure reenables the commands 
on both command bars.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub disableViewMenuAndControl()
Dim ctl1 As CommandBarControl

'Disable and protect View Menu.
    Set ctl1 = CommandBars(&quot;Menu Bar&quot;).Controls(&quot;View&quot;)
    ctl1.Enabled = False
    CommandBars(&quot;Menu Bar&quot;).Protection = msoBarNoCustomize

'Disable and protect View Control.
    Set ctl1 = CommandBars(&quot;Form View&quot;).Controls(&quot;View&quot;)
    ctl1.Enabled = False
    CommandBars(&quot;Form View&quot;).Protection = msoBarNoCustomize
   
End Sub


Sub enableViewMenuAndControl()
Dim ctl1 As CommandBarControl

'Enable View Menu.
    Set ctl1 = CommandBars(&quot;Menu Bar&quot;).Controls(&quot;View&quot;)
    ctl1.Enabled = True

'Enable View Control.
    Set ctl1 = CommandBars(&quot;Form View&quot;).Controls(&quot;View&quot;)
    ctl1.Enabled = True
   
End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="298"><H3>Making invisible command bars visible</H3></A>

<P>Another simple but powerful manipulation you can carry out is exposing a 
built-in menu that does not normally show. The following procedure displays 
the name, type, and number of controls on each visible command bar. If the 
Web toolbar is not visible, the procedure resets its 
<I>Visible </I>property and leaves a record of it in the Immediate window by printing its name, type, and control 
count. You can make the Web toolbar disappear by resetting its 
<I>Visible </I>property to <I>False</I>.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub showWebBar()
Dim cbr1 As CommandBar

    For Each cbr1 In CommandBars
        If cbr1.Visible = True Then
            Debug.Print cbr1.name, cbr1.Type, cbr1.Controls.Count
        ElseIf cbr1.name = &quot;Web&quot; Then
            cbr1.Visible = True
            Debug.Print cbr1.name, cbr1.Type, cbr1.Controls.Count
        End If
    Next cbr1

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="299"><H3>Adding commands to built-in command bars</H3></A>

<P>Besides manipulating built-in members of the 
<I>CommandBars </I>collection, you can add custom commands to any built-in toolbar. One simple way to do 
this is to add a <I>CommandBarButton </I>object. You must know the precise name 
of a command bar to add a new button to it with the 
<I>Add </I>method. (Recall that you can run the 
<I>enumerateControlCaptions </I>procedure to list the 
command bar names.) After adding the button, you set properties for the 
new <I>CommandBarButton </I>object so that it points at a custom procedure or function.</P>

<P>The <I>newMenuItem </I>procedure and three related procedures below add 
new menu items. The <I>newMenuItem </I>procedure adds 
<I>CommandBarButton </I>objects to the end of a Tools command bar. The three related procedures let 
users specify whether the Assistant appears as Clippit, Rocky, or F1. The 
new <I>CommandBarButton </I>objects lets users invoke the procedures that control 
which assistant to display.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub newMenuItem()
Dim newItem As CommandBarButton

'Set reference to new control on the Tools command bar.
    Set newItem = CommandBars(&quot;Tools&quot;).Controls. _
        Add(Type:=msoControlButton)
'Start new group with command to invoke showClippit.
    With newItem
        .BeginGroup = True
        .Caption = &quot;Show Clippit&quot;
        .OnAction = &quot;showClippit&quot;
    End With
   
'Set reference to new control on the Tools command bar.
    Set newItem = CommandBars(&quot;Tools&quot;).Controls. _
        Add(Type:=msoControlButton)
'Assign command to invoke showRocky.
    With newItem
        .Caption = &quot;Show Rocky&quot;
        .OnAction = &quot;showRocky&quot;
    End With
    
'Set reference to new control on the Tools command bar.
    Set newItem = CommandBars(&quot;Tools&quot;).Controls. _
        Add(Type:=msoControlButton)
'Assign command to invoke showRocky.
    With newItem
        .Caption = &quot;Show F1&quot;
        .OnAction = &quot;showF1&quot;
    End With

End Sub


Sub showRocky()

    With Assistant
        .Visible = True
        .FileName = &quot;Rocky.acs&quot;
        .On = True
    End With

End Sub


Sub showClippit()

    With Assistant
        .Visible = True
        .FileName = &quot;Clippit.acs&quot;
        .On = True
    End With

End Sub


Sub showF1()

    With Assistant
        .Visible = True
        .FileName = &quot;F1.acs&quot;
        .On = True
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>You use the <I>Add </I>method for the <I>Controls 
</I>collection of a command bar to insert a new control on a built-in menu. This method takes several 
arguments, including a <I>Type </I>parameter. In addition to the button control 
(<I>msoControlButton</I>) in the sample, you can specify a simple text box 
(<I>msoConrolEdit</I>), a combo box 
(<I>msoControlComboBox</I>), and more. By default, the 
<I>Add </I>method inserts your new control at the end of a command bar, but you can override this feature so 
that the control appears elsewhere on the command bar. Another parameter, 
<I>ID</I>, facilitates the addition of built-in commands from other menus to your 
custom command bar.
</P>
<P>After adding a control to a built-in command bar, you can tie it to a 
custom function using the <I>OnAction </I>property. You set the property's value 
equal to the name of a procedure you want your new control to invoke. The 
control's <I>Caption </I>property offers an easy way to label the new control. You can use 
the <I>CopyFace </I>and <I>PasteFace </I>methods to mark your custom controls. When 
the <I>BeginGroup </I>property is set to 
<I>True</I>, a control appears on a command bar 
with a divider line before it. The sample sets this property to 
<I>True </I>for the first of the three custom controls, but it leaves it at the default value of 
<I>False </I>for the remaining two controls.</P>

<A NAME="300"><H3>Restoring command bars</H3></A>

<P>As you refine custom applications, you will sometimes want to remove 
custom controls on built-in menus. You can do this using the 
<I>Reset </I>method. The following procedure clears any custom controls on the Tools command bar.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub removeMenuItem()
    CommandBars(&quot;Tools&quot;).Reset

End Sub
</pre>
</TD></TR></TABLE>
</P>

<A NAME="301"><H2>Creating Custom Command Bars</H2></A>

<P>Creating a custom command bar involves at least three steps:</P>

<OL>
<P><LI>     Adding a new command bar to your application. It will be 
blank when your code initially inserts it.</LI></P>
<P><LI>     Positioning controls on the command bar. This is similar to 
placing controls on a built-in command bar.</LI></P> 

<P><LI>     Setting the <I>Visible </I>property of the command bar to 
<I>True </I>when you want to show it. You can also let users expose your custom 
command bar using standard features (such as the Customize dialog box).</LI></P>
</OL>

<P>The following two procedures add a custom command bar with a 
single button control to make Rocky appear. The 
<I>newCommandBarAndButton </I>procedure passes off the first two steps of creating command bars to the 
procedure <I>addShowAssistantsAndRocky</I>. Placing these steps in a separate procedure 
has advantages for a subsequent sample. The <I>addShowAssistantsAndRocky 
</I>procedure names the new custom command bar Show Assistants. Next, the 
procedure adds a custom control. When you specify controls for custom command 
bars, you must assign a value to the <I>Style </I>property as well as the other property 
values that you set with built-in command bars. Failing to do so in the 
procedure <I>addShowAssistantsAndRocky </I>can cause the button on the command bar 
to appear blank.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub newCommandBarAndButton()
On Error GoTo CBarBtnTrap
Dim cbr1 As CommandBar
Dim cbr1btn1 As CommandBarButton
Dim cbr1Name As String

'Add command bar to show Rocky.
    addShowAssistantsAndRocky

'Make CommandBar visible.
    Set cbr1 = CommandBars(&quot;Show Assistants&quot;)
    cbr1.Visible = True

CBarBtnExit:
    Exit Sub

CBarBtnTrap:
    Debug.Print Err.Number; Err.Description
    Resume CBarBtnExit
End Sub


Sub addShowAssistantsAndRocky()
Dim cbr1 As CommandBar
Dim cbr1btn1 As CommandBarButton

'Add a command bar named Show Assistants.
    Set cbr1 = CommandBars.Add(&quot;Show Assistants&quot;, _
        msoBarTop, , True)
    
'Add a button control to the command bar.
    Set cbr1btn1 = cbr1.Controls _
        .Add(msoControlButton, , , , True)
'Set button properties.
    With cbr1btn1
        .Caption = &quot;Show Rocky&quot;
        .BeginGroup = True
        .OnAction = &quot;showRocky&quot;
        .Style = msoButtonCaption
    End With

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>After the <I>newCommandBarAndButton </I>procedure regains control, it sets 
the control's <I>Visible </I>property to 
<I>True</I>. Without this step, the only way a user can 
view the new custom command bar is by explicitly showing it (for instance, by 
right-clicking a command bar and selecting the name of the command bar you 
want to show). The error-trapping logic in the <I>newCommandBarAndButton 
</I>procedure allows the application to invoke the procedure even when the command bar 
is already present. Without the error-trapping logic, the 
<I>addShowAssistantsAndRocky </I>procedure generates a fatal error when it tries to add a command bar that 
already exists. Since this error is not critical (after all, the command bar is there 
already), it is reasonable to ignore it.</P>

<A NAME="302"><H2>Modifying Custom Command Bars</H2></A>

<P>The following three procedures add new controls to an existing custom 
command bar. They also reveal another approach to handling the problem of 
an existing command bar. The <I>addCbrBtns </I>procedure inserts another pair of 
buttons on the Show Assistants command bar created in the previous sample. 
If that command bar does not already exist, this procedure is smart enough to 
run the <I>addShowAssistantsAndRocky </I>procedure. 
<I>addCbrBtns </I>conditionally calls the procedure that creates the Show Assistants command bar based on the 
return value of the <I>doesCbrExist </I>function procedure. This function procedure 
checks for the existence of a command bar. Whether or not the Show Assistants 
command bar exists, the initial <I>If&#8230;Then&#8230;Else 
</I>statement sets a reference to it. The rest of the procedure adds two more buttons to the command bar. 
<I>addCbrBtns </I>closes by making the command bar visible if it is not already visible.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub moreButtons()
    addCbrBtns &quot;Show Assistants&quot;

End Sub


Sub addCbrBtns(cbrName As String)
Dim cbr1 As CommandBar
Dim cbr1btn1 As CommandBarButton

'Optionally create Show Assistants command bar.
'Reference it with a variable.
    If Not doesCbrExist(cbrName) Then
        addShowAssistantsAndRocky
        Set cbr1 = CommandBars(cbrName)
    Else
        Set cbr1 = CommandBars(cbrName)
    End If
    
'Add a new button to Show Assistants command bar.
    Set cbr1btn1 = cbr1.Controls _
        .Add(msoControlButton, , , , True)
'Set properties for button to show Clippit.
    With cbr1btn1
        .Caption = &quot;Show Clippit&quot;
        .OnAction = &quot;showClippit&quot;
        .Style = msoButtonCaption
    End With

'Add a new button to Show Assistants command bar.
    Set cbr1btn1 = cbr1.Controls _
        .Add(msoControlButton, , , , True)
'Set properties for button to show F1.
    With cbr1btn1
        .Caption = &quot;Show F1&quot;
        .OnAction = &quot;showF1&quot;
        .Style = msoButtonCaption
    End With

'Make the Show Assistants command bar visible.
    If Not cbr1.Visible = True Then cbr1.Visible = True
    
End Sub


Function doesCbrExist(cbrName As String) As Boolean
Dim cbr1 As CommandBar

    doesCbrExist = False
    For Each cbr1 In CommandBars
        If cbr1.name = cbrName Then
            doesCbrExist = True
        End If
    Next cbr1

End Function
</pre>
</TD></TR></TABLE>
</P>

<A NAME="303"><H2>Creating Popup Command Bars</H2></A>

<P>The first sample procedure below enables a combo box 
control on a custom command bar and makes the command bar a popup 
menu bar. Figure 8-10 shows the behavior of the popup menu 
bar on a form. You click anywhere on the form to bring up a custom 
command bar with a single control. This control is a combo box with entries for 
selecting the Clippit, Rocky, or F1 assistant. The process starts with a click event 
for the form's Detail section. The next three procedures code the sample 
depicted in Figure 8-10.</P>

<P><A HREF="javascript:fullSize('F08qh10x.htm')"> <img src="Images/F08qh10.JPG" width=404 height=526 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 8-10.</B> <I>A custom popup menu bar with a combo box control. You click anywhere on the form to open the custom menu bar.</I><!-- /CAPTION -->
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Detail_Click()
    ShowAndProcessComboBox

End Sub


Sub showAndProcessComboBox()
Dim cbr1 As CommandBar

'Call from Click Event in form.

    If doesCbrExist(&quot;Custom1&quot;) Then
        CommandBars(&quot;Custom1&quot;).ShowPopup
    Else
        createAndShowPopUpMenu
    End If

End Sub


Sub createAndShowPopUpMenu()
Dim cbr1 As CommandBar

'Add command bar named Custom1.
    Set cbr1 = CommandBars _
        .Add(name:=&quot;Custom1&quot;, Position:=msoBarPopup, Temporary:=True)

    With cbr1
        .Controls.Add Type:=msoControlComboBoxS
        With .Controls(1)
            .Style = msoComboLabel
            .Caption = &quot;Pick an Assistant.&quot;
            .AddItem &quot;Show Clippit&quot;
            .AddItem &quot;Show Rocky&quot;
            .AddItem &quot;Show F1&quot;
            .OnAction = &quot;processComboBoxChoice&quot;
        End With
    End With

    cbr1.ShowPopup

End Sub


Sub processComboBoxChoice()
Dim caseValue As Integer
   
'Decode selected item and implement corresponding method.
    Select Case _
        CommandBars(&quot;custom1&quot;).Controls(1).ListIndex
        Case 1
            showClippit
        Case 2
            showRocky
        Case 3
            showF1
    End Select
  
End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>The first procedure is the event procedure behind the form. It 
calls <I>showAndProcessComboBox</I>, a procedure that resides in a standard module. 
This procedure determines whether the Custom1 command bar already exists. If 
the command bar exists, the procedure invokes the 
<I>ShowPopup </I>method to display the command bar as a popup menu bar. Otherwise, it creates the 
Custom1 command bar with a call to 
<I>createAndShowPopUpMenu</I>. As the name of this third procedure implies, it creates the custom command bar just before 
displaying it as a popup menu bar.</P>

<P>The <I>createAndShowPopUpMenu </I>procedure is compact, but it uses 
interesting techniques. First, it uses nested <I>With&#8230;End 
</I>statements. The outer one adds a new member to the 
<I>CommandBars </I>collection, and the inner one adds 
a control to that member. The property assignments within the inner 
<I>With&#8230;;End </I>statement specify a combo box style for the control, define the elements in 
the combo box list, and denote a procedure, 
<I>processComboBoxChoice</I>, that fires after a selection from the combo box. This final procedure uses a 
<I>Select Case </I>statement based on the selected element from the combo box list to invoke one 
of three custom procedures that display an assistant.</P>

<A NAME="304"><H2>Deleting Custom Command Bars</H2></A>

<P>If you build custom command bars, you will eventually need to remove 
one or more of them within an application. The following sample does this by 
looping through all the command bars to find the custom ones&#8212;those with a 
<I>Built-in </I>property of <I>False</I>. When the procedure finds a custom command bar, it 
asks the user whether to delete the command bar. If the user replies Yes, it 
deletes that command bar and adds one to the count of deleted command bars. In 
any event, the procedure adds one to a variable that tallies custom command bars.</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<pre>
Sub deleteCustomCbr()
Dim cbr1 As CommandBar, delFlag As Boolean
Dim delBars As Integer, cusBars As Integer
   
'Not necessary to initialize delFlag, delBars, or
'cusBars because their default values (False and 0)
'are OK.
    
'Conditionally delete custom menu bars.
    For Each cbr1 In CommandBars
        If (cbr1.BuiltIn = False) Then
            If MsgBox(&quot;Are you sure that you want to &quot; &amp; _
                &quot;delete the &quot; &amp; cbr1.name &amp; &quot; command bar?&quot;, _
                vbYesNo, &quot;Programming Microsoft Access 2000&quot;) = _
                    vbYes Then
                    cbr1.Delete
                    delFlag = True
                    delBars = delBars + 1
            End If
            cusBars = cusBars + 1
        End If
    Next cbr1
    
'Report outcome of command bar enumeration.
    If Not delFlag Then
        If cusBars &gt; 0 Then
            MsgBox &quot;No custom command bars deleted &quot; &amp; _
                &quot;out of a total of &quot; &amp; cusBars &amp; &quot;.&quot;, _
                vbInformation, &quot;Programming Microsoft Access 2000&quot;
        Else
            MsgBox &quot;No custom command bars.&quot;, vbInformation, _
                &quot;Programming Microsoft Access 2000&quot;
        End If
    Else
        MsgBox delBars &amp; &quot; custom command bar(s) deleted.&quot;, _
            vbInformation, &quot;Programming Microsoft Access 2000&quot;
    End If

End Sub
</pre>
</TD></TR></TABLE>
</P>

<P>The <I>deleteCustomCbr </I>procedure closes by presenting one of three 
possible statements based on the number of deletions and the number of 
custom command bars. A pair of nested <I>If&#8230;Then&#8230;Else 
</I>statements handles the routing to the correct message box statement. If there are no deletions but there is 
at least one custom command bar, the statement displays a message reporting 
that no custom command bars were deleted and displaying the total number 
of custom command bars. If there are no deletions and no custom command 
bars, the procedure presents a message to that effect. Finally, if the procedure 
deleted any command bars, the message box reports that number.</P>

</BODY>
</HTML>




