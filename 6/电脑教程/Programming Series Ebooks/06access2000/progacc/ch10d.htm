<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Sharing Recordsets</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10c.htm", "ch10e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="332"><H1>Sharing Recordsets</H1></A>

<P>For recordsets and SQL statements, Jet uses smart 
defaults to determine which page and record locking settings to use. With ADO 
code that relies on cursors, Jet defaults to record-level locking. With SQL 
statements that can easily affect thousands of rows, Jet switches to page-level 
locking as the default. This, in turn, lets your application benefit from lock 
promotion (if lock promotion is enabled).</P>


<P>
When you use row-level locking with recordsets, you 
achieve concurrency and performance enhancements only if you explicitly wrap 
recordset maintenance tasks in transactions. You use the 
<I>BeginTrans</I>, <I>CommitTrans</I>, and <I>Rollback</I> methods (discussed later in this chapter) to wrap each 
record operation. Without this precaution, locks accumulate until they reach the 
value of the <I>FlushTransactionTimeout </I>registry 
setting.</P>


<P>
When you use record-level locking, you should carefully 
consider the data types for fields and record lengths to control database file 
size growth. Record-level locking writes rows rather than pages; rows that 
extend across a page boundary must be moved to a new page. Using fixed-length 
data types, you can determine the precise length of records; you cannot do this 
with the variable-length character fields for Access tables. (However, Jet SQL's 
data definition language includes a CHAR data type that lets you determine the 
length of string data type fields. This, in turn, can help to control record 
size bloat caused by records that do not fit entirely within one page.)</P>


<A NAME="333"><H2>Row-Level Locking</H2></A>

<P>The following procedure illustrates row locking in a 
multi-user application. It simulates a two-user application by running two 
connections against the same data file. The application also requires a second 
file named TestRowLock.mdb. Run the procedure in step mode to see how the row 
locking succeeds and fails under different circumstances.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>

<PRE>Sub RowLockingPessimistic()

'Use TestRowLocking.mdb to run this demo of 
'row locking; DO NOT HAVE TESTROWLOCK.MDB OPEN 
'WHEN RUNNING THE DEMO.

Dim cnn1 As New ADODB.Connection
Dim cnn2 As New ADODB.Connection
Dim rs As New ADODB.Recordset
Dim rs2 As New ADODB.Recordset
Dim j As Integer

On Error GoTo ErrHandler

'Open two connections against the same database,
'both using row locking mode;
'Jet OLEDB:Database Locking Mode info -
'0 is &quot;page mode&quot;,
'1 is &quot;row mode&quot;

'Open first connection to TestRowLocking.mdb.
cnn1.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data &quot; &amp; _
    &quot;Source=c:\Programming Access\Chap10\TestRowLocking.mdb;&quot; &amp; _
    &quot;Jet OLEDB:Database Locking Mode=1;&quot;

'Open second connection to TestRowLocking.mdb.
cnn2.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
    &quot;Data Source=c:\Programming Access\Chap10\TestRowLocking.mdb;&quot; &amp; _
    &quot;Jet OLEDB:Database Locking Mode=1;&quot;

'Open a recordset in the first connection and
'begin editing the first row.
rs.Open &quot;TestRowLocking&quot;, cnn1, adOpenKeyset, _
    adLockPessimistic, adCmdTableDirect

'Edit first field value.
Debug.Print rs.Fields(&quot;col1&quot;)
rs.Fields(&quot;col1&quot;) = 2
'rs2.Update; putting an update here would
'close the record lock
Debug.Print rs.Fields(&quot;col1&quot;)

'Open a recordset in the second connection.
rs2.Open &quot;TestRowLocking&quot;, cnn2, adOpenKeyset, _
    adLockPessimistic, adCmdTableDirect

'Attempt to edit the first row; even in row locking,
'since we are in the pessimistic
'locking mode, this will fail.
Debug.Print rs2.Fields(&quot;col1&quot;)
rs2.Fields(&quot;col1&quot;) = 3
Debug.Print rs2.Fields(&quot;col1&quot;)

'Move to another row in the same page.
rs2.MoveNext

'Attempt to edit the next row; this works under
'the row locking mode because the lock only applies
'to a single row, not the whole page.
Debug.Print rs2.Fields(&quot;col1&quot;)
'Should not fail (row locking)
rs2.Fields(&quot;col1&quot;) = 4 Debug.Print rs2.Fields(&quot;col1&quot;)

'Update recordsets.
rs.Update
rs2.Update
'Close connections and exit.
cnn1.Close
cnn2.Close
Set cnn1 = Nothing
Set cnn2 = Nothing

Exit Sub

ErrHandler:
For j = 0 To cnn1.Errors.Count - 1
    Debug.Print &quot;Errors from cnn1 connection&quot;
    Debug.Print &quot;Conn Err Num : &quot;; cnn1.Errors(j).Number
    Debug.Print &quot;Conn Err Desc: &quot;; cnn1.Errors(j).Description
Next j

For j = 0 To cnn2.Errors.Count - 1
    Debug.Print &quot;Errors from cnn2 connection&quot;
    Debug.Print &quot;Conn Err Num : &quot;; cnn2.Errors(j).Number
    Debug.Print &quot;Conn Err Desc: &quot;; cnn2.Errors(j).Description
Next j

Resume Next

End Sub
</PRE>
</TD></TR></TABLE></P>


<P>Notice that the second connection's attempt to write to 
the first record in TestRowLocking.mdb fails because the first connection still 
has the first record open. This attempt can succeed if the first connection 
unlocks the record (by, for instance, running a <I>rs.Update 
 </I>statement). The second connection's attempt to write to the second record 
succeeds immediately since there are no locks on that record. The error-handling 
logic displays the entries from the Jet connection's <I>Errors </I>collection.</P>


<A NAME="334"><H2>Page-Level Locking</H2></A>

<P>The following is an excerpt from a similarly designed 
procedure that uses page locking instead of record locking. Notice that the 
Database Locking Mode value, which was <I>1</I> in the 
preceding sample, is 
<I>0</I> in this one. These values 
denote, respectively, row-level and page-level tracking. Both attempts by the 
second connection to update records fail because the first connection has a lock 
open and all the records for this short table fit on a single page.</P>


<P>
<TABLE CELLPADDING=5 WIDTH="95%"><TR><TD>

<PRE>'Open first connection to TestRowLocking.mdb.
cnn1.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;Data &quot; &amp; _
    &quot;Source=c:\Programming Access\Chap10\TestRowLocking.mdb;&quot; &amp; _
    &quot;Jet OLEDB:Database Locking Mode=0;&quot;

'Open second connection to TestRowLocking.mdb.
cnn2.Open &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
    &quot;Data Source=c:\Programming Access\Chap10\TestRowLocking.mdb;&quot; &amp; _
    &quot;Jet OLEDB:Database Locking Mode=0;&quot;

'Open a recordset in the first connection and
'begin editing the first row.
rs.Open &quot;TestRowLocking&quot;, cnn1, adOpenKeyset, _
    adLockPessimistic, adCmdTableDirect

'Edit first field value.
Debug.Print rs.Fields(&quot;col1&quot;)
rs.Fields(&quot;col1&quot;) = 2
Debug.Print rs.Fields(&quot;col1&quot;)

'Open a recordset in the second connection.
rs2.Open &quot;TestRowLocking&quot;, cnn2, adOpenKeyset, _
    adLockPessimistic, adCmdTableDirect

'Attempt to edit the first row; because of
'pessimistic page locking mode setting, this fails.
Debug.Print rs2.Fields(&quot;col1&quot;)
rs2.Fields(&quot;col1&quot;) = 3
Debug.Print rs2.Fields(&quot;col1&quot;)

'Move to another row in the same page.
rs2.MoveNext

'Attempt to edit the next row; this fails too because
'the next row is on the same page.
Debug.Print rs2.Fields(&quot;col1&quot;)
 rs2.Fields(&quot;col1&quot;) = 4
Debug.Print rs2.Fields(&quot;col1&quot;)

'Update recordsets.
rs.Update
rs2.Update
</PRE>
</TD></TR></TABLE></P>


</BODY>
</HTML>




