<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Making a Report Dynamic</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06f.htm", "ch06h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="220"><H1>Making a Report Dynamic</H1></A>

<P>Three report section events&#8212;<I>Format</I>, 
<I>Retreat</I>, and <I>Print</I>&#8212;let you build 
dynamic formatting and content into a report. Other report events that can help you build smart reports include <I>Page</I>, <I>NoData</I>, <I>Close</I>, and <I>Open</I>. These events can also help you manage the application's behavior before, during, and after the opening of a form. You can use combinations of report events to create report 
formatting and special effects.</P>


<P>You use the <I>Open </I>event to programmatically set properties for reports and their controls. This is the first event for a report. If your application can have more than one report open at the same time, you can use the 
<I>Activate </I>and <I>Deactivate </I>events to monitor the flow of focus into and away from a report. 
Use the <I>Close </I>event to perform special actions just before a report closes, such 
as opening a form or presenting a message box.</P>


<P>You use the <I>NoData </I>event to detect a report that has no data in its record source. This event occurs after Access formats a report for printing. Your application can use it to cancel a report that is about to print with no data. 
You can also program event procedures that prompt a user to make data available by entering records or by going to another record source for the report.</P>


<A NAME="221"><H2>Formatting and Adding Content</H2></A>

<P>The following samples format and add content to a report dynamically using the <I>Print </I>and <I>Format </I>events. Figure 6-14 shows a report that uses the 
<I>Print </I>event for three sections to add red rectangles around the Report Header section and the Page Footer section. Note the different thicknesses of the rectangle 
borders. The Detail section shows an oval around all monthly order totals greater than or equal to 30.</P>


<P>While the Report Header <I>Print </I>event occurs a single time per report and the Page Footer <I>Print </I>event occurs just once per page, the Detail section <I>Print </I>event occurs once for each row on a page. This means that the page 
in Figure 614 has 16 Detail section <I>Print 
</I>events. With each event, your application can examine control values for the current record. This means that you 
can selectively display ovals around some monthly order totals.</P>


<P><A HREF="javascript:fullSize('F06QH14x.htm')"> <img src="Images/F06QH14.JPG" width=404 height=331 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><B>Figure 6-14.</B> <I>The</I> Print event <I>in this report draws rectangles around the Report Header and Page Footer sections. Another event selectively draws ovals around the monthly orders totals in the report.</I><!-- /CAPTION -->
</P>


<P>The following three event procedures are the code behind the report in Figure 6-14. Your applications can apply the 
<I>Line </I>method (as in the Report Header and Page Footer event procedures) to draw a rectangle around the 
report section. Four <I>Single</I> variables accept the top, left, width, and height values of the section. A <I>Long </I>variable accepts the color number for the rectangle (red in the sample). Just before invoking the <I>Line 
</I>method to draw the rectangle, the <I>ReportHeader_Print 
</I>procedure sets the line width to 25 pixels. Two pairs 
of coordinates denote points for the <I>Line </I>method. The value in <I>lngColor </I>specifies the line's color. The 
<I>Line </I>method's closing argument, <I>B</I>, instructs the 
method to draw a rectangle, or box, using the two coordinates as diagonally 
opposite end points.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td><pre>
Private Sub ReportHeader_Print(Cancel As Integer, _
    PrintCount As Integer)
Dim sngTop As Single, sngLeft As Single
Dim sngWidth As Single, sngHeight As Single
Dim lngColor as Long

'Set top, left, width, &amp; height.
    sngTop = Me.ScaleTop
    sngLeft = Me.ScaleLeft
    sngWidth = Me.ScaleWidth
    sngHeight = Me.ScaleHeight
    
'Set color.
    lngColor = RGB(255, 0, 0)

'Draw line as a box.
 Me.DrawWidth = 25
    Me.Line (sngTop, sngLeft)-(sngWidth, sngHeight), lngColor, B

End Sub


Private Sub PageFooterSection_Print(Cancel As Integer, _
    PrintCount As Integer)
Dim sngTop As Single, sngLeft As Single
Dim sngWidth As Single, sngHeight As Single
Dim lngColor as Long
    
'Set top, left, width, &amp; height.
    sngTop = Me.ScaleTop
    sngLeft = Me.ScaleLeft
    sngWidth = Me.ScaleWidth
    sngHeight = Me.ScaleHeight
    
'Set color.
    lngColor = RGB(255, 0, 0)

'Draw line as a box.
    Me.Line (sngTop, sngLeft)-(sngWidth, sngHeight), lngColor, B

End Sub


Private Sub Detail_Print(Cancel As Integer, PrintCount As Integer)
Dim sngHCtr As Single, sngVCtr As Single
Dim sngRadius As Single

'Position and size circle.
    sngHCtr = (Me.ScaleWidth / 2) - 3670
    sngVCtr = (Me.ScaleHeight / 2) - 20
    sngRadius = Me.ScaleHeight / 1.5

'Conditionally draw circle; last argument sets aspect ratio.
    If Me.CountOfOrderID.Value &gt;= 30 Then
        Me.Circle (sngHCtr, sngVCtr), sngRadius, , , , 0.5
    End If

End Sub</pre>
</td>
</tr>
</table></P>


<P>The only difference between the <I>ReportHeader_Print 
</I>and <I>PageFooter_Print </I>procedures is the line setting the width of the rectangle's border. The Report Header section uses a width of 25 pixels, but the Page Footer section draws 
a rectangle with the default width of 1 pixel. Both procedures draw a rectangle on a layer in front of the standard report layer. You can tell this because the red border from the <I>Line </I>method appears over the background shading for the 
report title.</P>


<p>
The Detail section event procedure relies on the 
<I>Circle </I>method to draw an oval around the order totals for each row in the Detail section. You 
must empirically determine horizontal and vertical centers as well as the radius of your circle. You use an aspect ratio argument in the <I>Circle </I>method to transform a circle to a long or narrow oval. Like the <I>Line </I>method, the <I>Circle </I>method draws its output on a layer in front of the standard report layer. Embedding the <I>Circle </I>method in an <I>If...Then </I>statement allows the procedure to draw the oval conditionally around some but not all <I>Orders 
</I>field values.</P>


<A NAME="222"><H2>Summing Page Values</H2></A>


<P>If your report requires the sum of the entries on a report page, you must program these page sums using event procedures because Access offers no built-in way to accomplish this task. The book's sample for this task uses a text box with its <I>Running Sum </I>property set to <I>Over All</I>. This causes the text box to sum its <I>Control Source </I>field over the whole report. Figure 6-15 on the next page shows the first and second pages of a report with the extra column for 
computing the running sum. The far right column appears for tutorial purposes, but in practice you set the <I>Visible </I>property for the control with the running 
sum to <I>False</i>.</P>


<P><A HREF="javascript:fullSize('F06QH15x.htm')"> <img src="Images/F06QH15.JPG" width=404 height=335 border=0 ALT="Click to view at full size."> </A>
</P><P><!-- CAPTION --><b>Figure 6-15.</B> <I>This report uses two event procedures and a text box in the Detail section with its </I>Running Sum<I> property set to </I>Over All<I> to compute the sum of the orders on a page.</I><!-- /CAPTION -->
</P>


<p>
You can compute page sums with as few as two event procedures 
(shown below). The <I>PageFooterSection</I>_<I>Format 
</I>event procedure only requires two lines. First it copies the value for the control with the running sum (<I>pagesum</I>) set to <I>lngCurrentRSum</I>. Then it sets another text box in the Page Footer section (<I>txtpagesum</I>) to the difference between <I>lngCurrentRSum </I>and <I>lngLastRSum</I>. The value of <I>lngLastRSum </I>is initially <I>0</I>. After every page finishes formatting, a procedure firing with the report's <I>Page </I>event copies the current value 
of <I>lngCurrentRSum </I>into <I>lngLastRSum</I>, so the difference between <I>lngLastRSum</I> and <I>lngCurrentRSum </I>in the <I>Report_Page</I> event procedure is the page sum for the current page.</P>


<p>
<table cellpadding=5 width="95%">
<tr>
<td><pre>
Public lngLastRSum As Long, lngCurrentRSum As Long
Public lngPageRSum As Long


Private Sub PageFooterSection_Format _
    (Cancel As Integer, FormatCount As Integer)
    lngCurrentRSum = Me.pagesum
    Me.txtpagesum = lngCurrentRSum _ lngLastRSum

End Sub


Private Sub Report_Page()
    lngLastRSum = lngCurrentRSum

End Sub</pre>
</td>
</tr>
</table></P>


<P>Notice that the <I>PageFooterSection_Format 
</I>event procedure in the sample computes and displays page sums by writing a value into a text box within 
the Page Footer section. <I>Print </I>event procedures do not enable this kind of manipulation because the <I>Print </I>event fires after the report is already formatted. The <I>Format </I>event fires as your application is formatting the report.</P>


</BODY>
</HTML>




