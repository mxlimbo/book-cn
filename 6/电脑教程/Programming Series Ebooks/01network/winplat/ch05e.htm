<HTML>
<HEAD>
<TITLE>Windows Sockets</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05d.htm" , "ch05f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="90"><H1>Windows Sockets</H1></A>

<p>Now that you are familiar with the various protocols available and their attributes, we'll take a look at using these protocols from Winsock. If you're familiar with Winsock, you know that the API is based on the concept of a socket. A socket is a handle to a transport provider. In Win32, a socket is not the same thing as a file descriptor and therefore is a separate type, <i>SOCKET</i>. Two functions create a socket:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
SOCKET WSASocket (
    int af,
    int type,
    int protocol,
    LPWSAPROTOCOL_INFO lpProtocolInfo,
    GROUP g,
    DWORD dwFlags
);

SOCKET socket (
    int af,
    int type,
    int protocol
);
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>af</i>, is the address family of the protocol. For example, if you want to create either a UDP or a TCP socket, use the constant <i>AF_INET</i> to indicate the Internet Protocol (IP). The second parameter, <i>type</i>, is the socket type of the protocol. A socket type can be one of five values: <i>SOCK_STREAM</i>, <i>SOCK_DGRAM</i>, <i>SOCK_SEQPACKET</i>, <i>SOCK_RAW</i>, and <i>SOCK_RDM</i>. The third parameter is <i>protocol</i>. This field is used to qualify a specific transport if there are multiple entries for the given address family and socket type. Table 5-4 shows the values used for the address family, socket type, and protocol fields for a given network transport.</p>

<p><b>Table 5-4.</b> <i>Socket parameters</i></p>

<p>
	<table valign="top" cellpadding="5" width="95%">

		<tr>
			<th><i>Protocol</i></th>
			<th><i>Address Family</i></th>
			<th><i>Socket Type</i></th>
			<th></th>
			<th><i>Protocol</i></th>
		</tr>

		<tr>
			<td valign="top" rowspan=3>Internet Protocol (IP)</td>
			<td valign="top" rowspan=3><i>AF_INET</i></td>
			<td valign="top">TCP</td>
			<td valign="top"><i>SOCK_STREAM</i></td>
			<td valign="top"><i>IPPROTO_IP</i></td>
		</tr>

		<tr>
			<td valign="top">UDP</td>
			<td valign="top"><i>SOCK_DGRAM</i></td>
			<td valign="top"><i>IPPROTO_UDP</i></td>
		</tr>

		<tr>
			<td valign="top">Raw sockets</td>
			<td valign="top"><i>SOCK_RAW</i></td>
			<td valign="top"><i>IPPROTO_RAW</i><br>
<i>IPPROTO_ICMP</i></td>
		</tr>

		<tr>
			<td valign="top" rowspan=5>IPX/SPX</td>
			<td valign="top"><i>AF_NS</i></td>
			<td valign="top">MSAFD<br>nwlnkipx [IPX]</td>
			<td valign="top"><i>SOCK_DGRAM</i></td>
			<td valign="top"><i>NSPROTO_IPX</i></td>
		</tr>

		<tr>
			<td valign="top" rowspan=4><i>AF_IPX</i></td>
			<td valign="top">MSAFD<br>nwlnkspx [SPX]</td>
			<td valign="top"><i>SOCK_SEQPACKET</i></td>
			<td valign="top"><i>NSPROTO_SPX</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>nwlnkspx [SPX]<br>[Pseudo-stream]</td>
			<td valign="top"><i>SOCK_STREAM</i></td>
			<td valign="top"><i>NSPROTO_SPX</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>nwlnkspx [SPXII]</td>
			<td valign="top"><i>SOCK_SEQPACKET</i></td>
			<td valign="top"><i>NSPROTO_SPXII</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>nwlnkspx [SPXII]<br>[Pseudo-stream]</td>
			<td valign="top"><i>SOCK_STREAM</i></td>
			<td valign="top"><i>NSPROTO_SPXII</i></td>
		</tr>

		<tr>
			<td valign="top" rowspan=2>NetBIOS</td>
			<td valign="top" rowspan=2><i>AF_NETBIOS</i></td>
			<td valign="top">Sequential<br>Packets</td>
			<td valign="top"><i>SOCK_SEQPACKET</i></td>
			<td valign="top">LANA number</td>
		</tr>

		<tr>
			<td valign="top">Datagrams</td>
			<td valign="top"><i>SOCK_DGRAM</i></td>
			<td valign="top">LANA number</td>
		</tr>

		<tr>
			<td valign="top" rowspan=5>AppleTalk</td>
			<td valign="top" rowspan=5><i>AF_APPLETALK</i></td>
			<td valign="top">MSAFD<br>AppleTalk [ADSP]</td>
			<td valign="top"> <i>SOCK_RDM</i></td>
			<td valign="top"><i>ATPROTO_ADSP</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>AppleTalk [ADSP]<br>[Pseudo-stream]</td>
			<td valign="top"><i>SOCK_STREAM</i></td>
			<td valign="top"><i>ATPROTO_ADSP</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>AppleTalk [PAP]</td>
			<td valign="top"><i>SOCK_RDM</i></td>
			<td valign="top"><i>ATPROTO_PAP</i> </td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>AppleTalk [RTMP]</td>
			<td valign="top"><i>SOCK_DGRAM</i></td>
			<td valign="top"><i>DDPPROTO_RTMP</i></td>
		</tr>

		<tr>
			<td valign="top">MSAFD<br>AppleTalk [ZIP]</td>
			<td valign="top"><i>SOCK_DGRAM</i></td>
			<td valign="top"><i>DDPPROTO_ZIP</i></td>
		</tr>
 
		<tr>
			<td valign="top">ATM</td>
			<td valign="top"><i>AF_ATM</i></td>
			<td valign="top">MSAFD ATM AAL5<br>Native ATM (AAL5)</td>
			<td valign="top"><i>SOCK_RAW</i><br><i>ATMPROTO_AAL5</i></td>
			<td valign="top"><i>SOCK_RAW</i><br><i>ATMPROTO_AAL5</i></td>
		</tr>

		<tr>
			<td valign="top">Infrared<br>Sockets</td>
			<td valign="top"><i>AF_IRDA</i></td>
			<td valign="top">MSAFD Irda [IrDA]</td>
			<td valign="top"><i>_SOCK_STREAM</i></td>
			<td valign="top"><i>SOCK_STREAM IRDA_PROTO</i></td>
		</tr>

	</table>
</p>

<p>The first three parameters for creating a socket are organized in three tiers. The first and most important parameter is the address family. This specifies which protocol is being used. It also dictates the valid options for the second and third parameters. For example, choosing the ATM address family (<i>AF_ATM</i>) limits you to only raw sockets (<i>SOCK_RAW</i>) for the socket type. Likewise, by selecting an address family and a socket type, you are limited as to the protocol you choose. However, it is possible to pass a 0 for the <i>protocol</i> parameter. The system then chooses a transport provider based on the other two parameters, <i>af</i> and <i>type</i>. When enumerating the catalog entries for protocols, check the <i>dwProviderFlags</i> entry of the <i>WSAPROTOCOL_INFO</i> structure. If this field is set to <i>PFL_MATCHES_PROTOCOL_ZERO</i>, this is the default transport that will be used if the protocol parameter to <i>socket</i> or <i>WSASocket</i> is 0.</p>

<p>If you are using the <i>WSASocket</i> function and have enumerated all protocols using <i>WSAEnumProtocols</i>, you can select a <i>WSAPROTOCOL_INFO</i> structure and pass that to the <i>WSASocket</i> as the <i>lpProtocolInfo</i> parameter. If you then specify the constant <i>FROM_PROTOCOL_INFO</i> in all of the first three parameters (<i>af</i>, <i>type</i>, and <i>protocol</i>), the values from the <i>WSAPROTOCOL_INFO</i> structure you supplied are used instead. This is how you specify an exact protocol entry.</p>

<p>The last two flags of <i>WSASocket</i> are simple. The group parameter is always 0 because no version of Winsock supports socket groups. The <i>dwFlags</i> parameter is used to specify one or more of the following flags:</p>

<ul>
<p><li> <i>WSA_FLAG_OVERLAPPED</i></li></p>

<p><li> <i>WSA_FLAG_MULTIPOINT_C_ROOT</i></li></p>

<p><li> <i>WSA_FLAG_MULTIPOINT_C_LEAF</i></li></p>

<p><li> <i>WSA_FLAG_MULTIPOINT_D_ROOT</i></li></p>

<p><li> <i>WSA_FLAG_MULTIPOINT_D_LEAF</i></li></p>
</ul>

<p>The first flag, <i>WSA_FLAG_OVERLAPPED</i>, is used to specify that this socket is capable of overlapped I/O, which is one of the possible communication models available in Winsock. This topic is covered in detail in <a href="ch08a.htm">Chapter 8</A>. If you create a socket using the <i>socket</i> call, <i>WSA_FLAG_OVERLAPPED</i> is set by default. In general, it is a good idea to always set this flag when using <i>WSASocket</i>. The last four flags deal with multicast sockets.</p>

<A NAME="91"><H2>Raw Sockets</H2></A>

<p>When creating a socket with <i>WSASocket</i>, you can pass a <i>WSAPROTOCOL_INFO</i> structure into the call to define the kind of socket you want to create; however, you can create socket types that don't have an entry in the transport provider catalog. The best example of this is raw sockets under IP. Raw sockets are a form of communication that allows you to encapsulate other protocols within the UDP packet, such as the Internet Control Message Protocol (ICMP). ICMP's purpose is to deliver control, error, and informational messages among Internet hosts. Because ICMP does not provide any data transfer facilities, it is not considered to be at the same level as UDP or TCP, but at the same level as IP itself. <A HREF="ch13a.htm">Chapter 13</A> covers raw sockets in further detail.</p>

</BODY>
</HTML>




