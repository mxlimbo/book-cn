<HTML>
<HEAD>
<TITLE>Initializing Winsock</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07a.htm" , "ch07c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="137"><H1>Initializing Winsock</H1></A>

<p>Every Winsock application must load the appropriate version of the Winsock DLL. If you fail to load the Winsock library before calling a Winsock function, the function will return a <i>SOCKET_ERROR</i> and the error will be <i>WSANOTINITIALISED</i>. Loading the Winsock library is accomplished by calling the <i>WSAStartup</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
int WSAStartup(
    WORD<i> </i> wVersionRequested,
    LPWSADATA<i> </i> lpWSAData
);
</pre>
</td></tr></table>
</p>

<p>The <i>wVersionRequested</i> parameter is used to specify the version of the Winsock library you want to load. The high-order byte specifies the minor version of the requested Winsock library, while the low-order byte is the major version. You can use the handy macro <i>MAKEWORD(x, y)</i>, in which <i>x</i> is the high byte and <i>y</i> is the low byte, to obtain the correct value for <i>wVersionRequested</i>.</p>

<p>The <i>lpWSAData</i> parameter is a pointer to a <i>LPWSADATA</i> structure that <i>WSAStartup</i> fills with information related to the version of the library it loads:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct WSAData 
{
    WORD           wVersion;
    WORD           wHighVersion;
    char           szDescription[WSADESCRIPTION_LEN + 1]; 
    char           szSystemStatus[WSASYS_STATUS_LEN + 1];
    unsigned short iMaxSockets;
    unsigned short iMaxUdpDg;
    char FAR *     lpVendorInfo;
} WSADATA, FAR * LPWSADATA; 
</pre>
</td></tr></table>
</p>

<p><i>WSAStartup</i> sets the first field, <i>wVersion</i>, to the Winsock version you will be using. The <i>wHighVersion</i> parameter holds the highest version of the Winsock library available. Remember that in both of these fields, the high-order byte represents the Winsock minor version, while the low-order byte is the major version. The <i>szDescription</i> and <i>szSystemStatus</i> fields are set by the particular implementation of Winsock and aren't really useful. Do not use the next two fields, <i>iMaxSockets</i> and <i>iMaxUdpDg</i>. They are supposed to be the maximum number of concurrently open sockets and the maximum datagram size; however, to find the maximum datagram size you should query the protocol information through <i>WSAEnumProtocols</i>. The maximum number of concurrent sockets isn't some magic number&#8212;it depends more on how much physical memory is available. Finally, the <i>lpVendorInfo</i> field is reserved for vendor-specific information regarding the implementation of
Winsock. This field is not used on any Win32 platforms.</p>

<p>Table 7-1 lists the latest versions of Winsock that the various Microsoft Windows platforms support. What's important to remember is the difference between major versions. Winsock 1.x does not support many of the advanced Winsock features detailed in this section. Additionally, for applications using Winsock 1, the include file Winsock.h is necessary; otherwise, for Winsock 2, Winsock2.h should be included.</p>

<p><b>Table 7-1.</b> <i>Supported Winsock versions</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Platform</i></th>
<th><i>Winsock Version</i></th>
</tr>
<tr>
<td valign="top">Windows 95</td>
<td valign="top">1.1 (2.2)</td>
</tr>
<tr>
<td valign="top">Windows 98</td>
<td valign="top">2.2</td>
</tr>
<tr>
<td valign="top">Windows NT 4.0</td>
<td valign="top">2.2</td>
</tr>
<tr>
<td valign="top">Windows 2000</td>
<td valign="top">2.2</td>
</tr>
<tr>
<td valign="top">Windows CE</td>
<td valign="top">1.1</td>
</tr>
</table>
</p>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
A Winsock 2 upgrade for Windows 95 is available for download from 
<a href="http://www.microsoft.com/windows95/downloads/" target="_window2">http://www.microsoft.com/windows95/downloads/</a>.
</blockquote></div>
</p>

<p>Note that even though a platform supports Winsock 2, you do not have to request the latest version. That is, if you want to write an application that is supported on a majority of platforms, you should write it to the Winsock 1.1 specification. This application will run perfectly well on Windows NT 4.0 because all Winsock 1.1 calls are mapped through the Winsock 2 DLL. Also, if a newer version of the Winsock library becomes available for a platform that you use, it is often in your best interest to upgrade. These new versions contain bug fixes, and your old code should run without a problem&#8212;at least theoretically. In some cases, the behavior of the Winsock stack is different from what the specification defines. As a result, many programmers write their applications according to the behavior of the particular platform they are targeting instead of the specification. For example, under Windows NT 4.0, when a program is using the asynchronous window event model, an <i>FD_WRITE</i> is posted after every
successful <i>send</i> or <i>WSASend</i> to indicate that you can write data. However, the specification says that an <i>FD_WRITE</i> is posted when the system is able to send data, such as when the application starts, and that a posted <i>FD_WRITE</i> means you should keep writing until you receive the error <i>WSAEWOULDBLOCK</i>. In fact, after the system sends all pending data and can process more <i>send</i> and <i>WSASend</i> calls, it will post an <i>FD_WRITE</i> event to your application window, at which time you can resume writing data to the network (Knowledge Base Article Q186245). This problem has been fixed in Service Pack 4 for Windows NT 4.0 as well as in Windows 2000.</p>

<p>For the most part, however, when writing new applications you will load the latest version of the Winsock library currently available. Remember that if, for example, Winsock 3 is released, your application that loads version 2.2 should run as expected. If you request a Winsock version later than that which the platform supports, <i>WSAStartup</i> will fail. Upon return, the <i>wHighVersion</i> of the <i>WSADATA</i> structure will be the latest version supported by the library on the current system.</p>

</BODY>
</HTML>




