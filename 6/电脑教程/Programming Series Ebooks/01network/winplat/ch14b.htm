<HTML>
<HEAD>
<TITLE>SPI Basics</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14a.htm" , "ch14c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="413"><H1>SPI Basics</H1></A>

<p>The Winsock 2 SPI allows you to develop two types of service providers&#8212;transport providers and name space providers. <i>Transport providers</i> (commonly referred to as protocol stacks, such as TCP/IP) are services that supply functions that set up communication, transfer data, exercise data-flow control and error control, and so on. <i>Name</i> <i>space providers</i> are services that associate the addressing attributes of a network protocol with one or more user-friendly names and thus enable protocol-independent name resolution. Service providers are nothing more than Win32 support DLLs that are hooked below Winsock 2's Ws2_32.dll module. They provide the inner workings of many of the calls defined in the Winsock 2 API.</p>

<p>
<A HREF="javascript:fullSize('F14JI01x.htm')"> <img src="images/F14JI01.JPG" width=404 height=258 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 14-1.</b> <i>Winsock 2's WOSA-compliant architecture</i><!-- /caption -->
</p>

<A NAME="414"><H2>SPI Naming Conventions</H2></A>

<p>The Winsock 2 SPI function prototypes use the following function prefix naming conventions:</p>

<ul>
<p><li><b><i>WSP</i> (WinSock Provider)</b> Identifies transport service provider functions</li></p>

<p><li><b><i>NSP</i> (name space provider)</b> Identifies name space provider functions</li></p>

<p><li><b><i>WPU</i> (Winsock provider upcall)</b> Identifies Ws2_32.dll support functions called by service providers</li></p>

<p><li><b><i>WSC</i> (Winsock configuration)</b> Identifies functions for installing service providers in Winsock 2</li></p>
</ul>



<p>For example, a function named <i>WSCInstallProvider</i> is simply an SPI configuration function.</p>

<A NAME="415"><H2>Mapping Between Winsock 2 API and SPI Functions</H2></A>

<p>In most cases, when an application calls a Winsock 2 function, Ws2_32.dll calls a corresponding Winsock 2 SPI function to carry out the requested functionality using a specific service provider. For example, <i>select</i> maps to <i>WSPSelect</i>, <i>WSAConnect</i> maps to <i>WSPConnect</i>, and <i>WSAAccept</i> maps to <i>WSPAccept</i>. However, not all Winsock functions have a corresponding SPI function. The following list details these exceptions.</p>

<ul>
<p><li> Support functions such as <i>htonl</i>, <i>htons</i>, <i>ntohl</i>, and <i>ntohs</i> are implemented within Ws2_32.dll and aren't passed down to a service provider. The same holds true for the WSA versions of these functions.</li></p>

<p><li> IP conversion functions such as <i>inet_addr</i> and <i>inet_ntoa</i> are implemented only within Ws2_32.dll.</li></p>

<p><li> All of the IP-specific name conversion and resolution functions in Winsock 1.1 such as <i>getXbyY, WSAAsyncGetXByY,</i> and <i>WSACancelAsyncRequest</i>, as well as <i>gethostname,</i> are implemented within Ws2_32.dll.</li></p>

<p><li> Winsock service provider enumeration and the blocking hook_related functions are implemented within Ws2_32.dll. Thus <i>WSAEnumProtocols</i>, <i>WSAIsBlocking</i>, <i>WSASetBlockingHook</i>, and <i>WSAUnhookBlockingHook</i> do not appear as SPI functions.</li></p>

<p><li> Winsock error codes are managed within Ws2_32.dll<i>.</i> <i>WSAGetLastError</i> and <i>WSASetLastError</i> aren't needed in the SPI.</li></p>

<p><li> The event object manipulation and wait functions&#8212;including <i>WSACreateEvent</i>, <i>WSACloseEvent</i>, <i>WSASetEvent</i>, <i>WSAResetEvent</i>, and <i>WSAWaitForMultipleEvents&#8212;</i>are mapped directly to native Win32 operating system calls and aren't present in the SPI.</li></p>
</ul>



<p>Now you're ready to learn which Winsock APIs are mapped to Winsock 2 service providers. When you develop a service provider, you will find all SPI function prototypes defined in the include file Ws2spi<i>.</i>h.</p>

</BODY>
</HTML>




