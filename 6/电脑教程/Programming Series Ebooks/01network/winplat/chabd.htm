<HTML>
<HEAD>
<TITLE>Route</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chabc.htm" , "chabe.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="535"><H1>Route</H1></A>

<p>The Route.exe command allows you to print and modify the routing table. The routing table determines which IP interface a connection request or a datagram occurs on. The IP Helper library offers several functions for manipulating the routing table. All of the functions related to routing are available on Windows 98, Windows 2000, and Windows NT 4 Service Pack 4 (or later).</p>

<p>First, let's discuss the capabilities of the Route.exe command. Its most basic function is to print the routing table. A route consists of a destination address, a netmask, a gateway, a local IP interface, and a metric. You also have the ability to add and delete a route. To add a route, you must specify all the parameters we just described. To delete a route, you must specify only the destination address. In this section, we'll look at the IP Helper functions that print the routing table. Then we'll discuss adding and deleting a route.</p>

<A NAME="536"><H2>Getting the Routing Table</H2></A>

<p>The most basic action that Route.exe performs is printing the table. This is accomplished with the <i>GetIpForwardTable</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetIpForwardTable ( 
    PMIB_IPFORWARDTABLE pIpForwardTable, 
    PULONG pdwSize, 
    BOOL bOrder
);
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>pIpForwardTable</i>, contains the routing table information upon return. When you call the function, this parameter should point to a buffer of sufficient size. If you call the function with <i>pIpForwardTable</i> equal to <i>NULL</i> (or if the buffer size is insufficient to begin with), the <i>pdwSize</i> parameter returns the length of the buffer needed for the call to complete successfully. The last parameter, <i>bOrder</i>, indicates whether the results should be sorted upon return. The default sorting order is</p>

<ol>
<p><li> Destination address</li></p>

<p><li> Protocol that generated the route</li></p>

<p><li> Multipath routing policy</li></p>

<p><li> Next-hop address</li></p>
</ol>

<p>The routing information is returned in the form of the <i>MIB_IPFORWARDTABLE</i> structure, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPFORWARDTABLE 
{ 
    DWORD            dwNumEntries; 
    MIB_IPFORWARDROW table[ANY_SIZE];
} MIB_IPFORWARDTABLE, *PMIB_IPFORWARDTABLE;
</pre>
</td></tr></table>
</p>

<p>This structure is a wrapper for an array of <i>MIB_IPFORWARDROW</i> structures. The <i>dwNumEntries</i> field indicates the number of these structures present in the array. The <i>MIB_IPFORWARDROW</i> structure is defined below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPFORWARDROW 
{ 
    DWORD dwForwardDest; 
    DWORD dwForwardMask;
    DWORD dwForwardPolicy;
    DWORD dwForwardNextHop;
    DWORD dwForwardIfIndex;
    DWORD dwForwardType;
    DWORD dwForwardProto;
    DWORD dwForwardAge;
    DWORD dwForwardNextHopAS;
    DWORD dwForwardMetric1;
    DWORD dwForwardMetric2;
    DWORD dwForwardMetric3;
    DWORD dwForwardMetric4;
    DWORD dwForwardMetric5;
} MIB_IPFORWARDROW, *PMIB_IPFORWARDROW;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwForwardDest</i></b> Is the IP address of the destination host.</li></p>

<p><li><b><i>dwForwardMask</i></b> Is the subnet mask for the destination host.</li></p>

<p><li><b><i>dwForwardPolicy</i></b> Specifies a set of conditions that would cause the selection of a multipath route. Usually these conditions are in the form of IP Type of Service (TOS). For more information about TOS, see <a href="ch09a.htm">Chapter 9</A> and the <i>IP_TOS</i> option. For more information on multipath routing, see RFC 1354.</li></p>

<p><li><b><i>dwForwardNextHop</i></b> Is the IP address for the next hop in the route.</li></p>

<p><li><b><i>dwForwardIfIndex</i></b> Indicates the index of the interface for this route.</li></p>

<p><li><b><i>dwForwardType</i></b> Indicates the route type as defined in RFC 1354. Table B-4 lists the possible values and meanings for this field.</li></p>

<p><li><b><i>dwForwardProto</i></b> Is the protocol that generated the route. Table B-5 lists the possible values for this field. The values for IPX protocols are defined in Routprot.h, while the IP entries are included in Iprtrmib.h.</li></p>

<p><li><b><i>dwForwardAge</i></b> Indicates the age of the route in seconds.</li></p>

<p><li><b><i>dwForwardNextHopAS</i></b> Is the autonomous system number of the next hop.</li></p>

<p><li><b><i>dwForwardMetric1</i></b> Is a routing protocol-specific metric value. For more information, see RFC 1354. The field contains the route metric value that you normally see when executing the Route.exe print command. For this and the following four fields, if the entry is unused, the value is <i>MIB_IPROUTE_METRIC_UNUSED</i> (-1).</li></p>

<p><li> <b><i>dwForwardMetric2</i></b> Is a routing protocol-specific metric value. For more information, see RFC 1354.</li></p>

<p><li> <b><i>dwForwardMetric3</i></b> Is a routing protocol-specific metric value. For more information, see RFC 1354.</li></p>

<p><li> <b><i>dwForwardMetric4</i></b> Is a routing protocol-specific metric value. For more information, see RFC 1354.</li></p>

<p><li><b><i>dwForwardMetric5</i></b> Is a routing protocol-specific metric value. For more information, see RFC 1354.</li></p>
</ul>

<p><b>Table B-4.</b> <i>Possible route types for a routing table entry</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th><i>Forward Type</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top"><i>MIB_IPROUTE_TYPE_INDIRECT</i>  </td>
<td valign="top">Next hop is not the final destination (remote route)  </td></tr>
<tr>
<td valign="top"><i>MIB_IPROUTE_TYPE_DIRECT</i>  </td>
<td valign="top">Next hop is the final destination (local route)  </td></tr>
<tr>
<td valign="top"><i>MIB_IPROUTE_TYPE_INVALID</i>  </td>
<td valign="top">Route is invalid  </td></tr>
<tr>
<td valign="top"><i>MIB_IPROUTE_TYPE_OTHER</i>  </td>
<td valign="top">Other route  </td></tr>
</table></p>

<p><b>Table B-5.</b> <i>Routing protocol identifiers </i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th><i>Protocol Identifier</i>  </th>
<th><i>Description</i>  </th></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_OTHER</i>  </td>
<td valign="top">Protocol not listed  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_LOCAL</i>  </td>
<td valign="top">Route generated by the stack  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_NETMGMT</i>  </td>
<td valign="top">Route added by Route.exe utility or SNMP  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_ICMP</i>  </td>
<td valign="top">Route from ICMP redirects  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_EGP</i>  </td>
<td valign="top">Exterior Gateway Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_GGP</i>  </td>
<td valign="top">Gateway Gateway Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_HELLO</i>  </td>
<td valign="top">HELLO routing protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_RIP</i>  </td>
<td valign="top">Routing Information Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_IS_IS</i>  </td>
<td valign="top">IP Intermediate System to Intermediate System Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_ES_IS</i>  </td>
<td valign="top">IP End System to Intermediate System Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_CISCO</i>  </td>
<td valign="top">IP Cisco protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_BBN</i>  </td>
<td valign="top">BBN protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_OSPF</i>  </td>
<td valign="top">Open Shortest Path First routing protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_BGP</i>  </td>
<td valign="top">Border Gateway Protocol  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_NT_AUTOSTATIC</i>  </td>
<td valign="top">Routes that were originally added by a routing protocol but are not static  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_NT_STATIC</i>  </td>
<td valign="top">Routes added by the routing user interface or the Routemon.exe utility  </td></tr>
<tr>
<td valign="top"><i>MIB_IPPROTO_STATIC_NON_DOD</i>  </td>
<td valign="top">Identical to <i>PROTO_IP_NT_STATIC</i> except that these routes will not cause Dial on Demand (DOD)  </td></tr>
<tr>
<td valign="top"><i>IPX_PROTOCOL_RIP</i>  </td>
<td valign="top">Routing Information Protocol for IPX  </td></tr>
<tr>
<td valign="top"><i>IPX_PROTOCOL_SAP</i>  </td>
<td valign="top">Service Advertisement Protocol  </td></tr>
<tr>
<td valign="top"><i>IPX_PROTOCOL_NLSP</i>  </td>
<td valign="top">Netware Link Services Protocol  </td></tr>
</table></p>


<A NAME="537"><H2>Adding a Route</H2></A>

<p>The next function of the route command is adding a route. Remember that to add a route, the destination IP, netmask, gateway, local IP interface, and metric must be specified. When adding a route, you should verify that the given local IP interface is valid. In addition, when adding a route you will need to refer to the local IP interface on which the route is based by its internal index value. You can obtain this information by calling the <i>GetIpAddrTable</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetIpAddrTable ( 
    PMIB_IPADDRTABLE pIpAddrTable,
    PULONG pdwSize, 
    BOOL bOrder
);
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>pIpAddrTable</i>, is a buffer of sufficient size that will return an <i>MIB_IPADDRTABLE</i> structure. The <i>pdwSize</i> parameter is the size of the buffer passed as the first parameter. The last parameter, <i>bOrder</i>, specifies whether to return the local IP interfaces by ascending IP addresses. To find out the required buffer size, you can pass <i>NULL</i> for <i>pIpAddrTable</i>. Upon return, <i>pdwSize</i> will indicate the required buffer size. The <i>MIB_IPADDRTABLE</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPADDRTABLE 
{ 
    DWORD dwNumEntries
    MIB_IPADDRROW table[ANY_SIZE]; 
} MIB_IPADDRTABLE, *PMIB_IPADDRTABLE;
</pre>
</td></tr></table>
</p>

<p>This structure is a wrapper for an array of <i>MIB_IPADDRROW</i> structures. The <i>dwNumEntries</i> field indicates how many <i>MIB_IPADDRROW</i> entries are present in the <i>table</i> field array. The <i>MIB_IPADDRROW</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPADDRROW 
{ 
    DWORD    dwAddr;
    DWORD    dwIndex; 
    DWORD    dwMask; 
    DWORD    dwBCastAddr; 
    DWORD    dwReasmSize;
    unsigned short unused1; 
    unsigned short unused2; 
} MIB_IPADDRROW, *PMIB_IPADDRROW;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwAddr</i></b> Is the IP address for a given interface.</li></p>

<p><li><b><i>dwIndex</i></b> Is the index of the interface associated with the IP address.</li></p>

<p><li><b><i>dwMask</i></b> Is the subnet mask for the IP address.</li></p>

<p><li><b><i>dwBCastAddr</i></b> Is the broadcast address.</li></p>

<p><li><b><i>dwReasmSize</i></b> Is the maximum reassembly size for datagrams received.</li></p>

<p><li><b><i>unused1</i> and <i>unused2</i> </b>Are not currently used.</li></p>
</ul>



<p>Using this function, you can verify that the local IP interface for the given route is valid. The function for adding the route to the routing table is <i>SetIpForwardEntry</i>, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD SetIpForwardEntry ( 
    PMIB_IPFORWARDROW pRoute
);
</pre>
</td></tr></table>
</p>

<p>The only parameter is <i>pRoute</i>, which is a pointer to an <i>MIB_IPFORWARDROW</i> structure. This structure defines the elements needed to establish a new route. We have already discussed this structure and its member fields. To add a route, the values must be specified for the fields <i>dwForwardIfIndex</i>, <i>dwForwardDest</i>, <i>dwForwardMask</i>, <i>dwForwardNextHop</i>, and <i>dwForwardPolicy</i>.</p>

<A NAME="538"><H2>Deleting a Route</H2></A>

<p>The last action for the route utility is deleting a route, which is the easiest command to implement. When invoking the route command to delete a route, you must specify the destination address to delete. Then you can search for the <i>MIB_IPFORWARDROW</i> structure returned from <i>GetIpForwardTable</i> that corresponds to the destination address. The <i>MIB_IPFORWARDROW</i> structure can then be passed to the <i>DeleteIpForwardEntry</i> function to remove the given entry. This function is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD DeleteIpForwardEntry ( 
    PMIB_IPFORWARDROW pRoute
);
</pre>
</td></tr></table>
</p>

<p>Alternatively, you can specify the fields of <i>pRoute</i> yourself. The fields that are required to remove a route are <i>dwForwardIfIndex</i>, <i>dwForwardDest</i>, <i>dwForwardMask</i>, <i>dwForwardNextHop</i>, and <i>dwForwardPolicy</i>.</p>

</BODY>
</HTML>



