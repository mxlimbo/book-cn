<HTML>
<HEAD>
<TITLE>Phonebook</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16e.htm" , "ch16g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="492"><H1>Phonebook</H1></A>

<p>RAS can set up communication to remote servers by using phonebook entries to store and manage properties for establishing a connection. A phonebook is nothing more than a collection of <i>RASENTRY</i> structures that contain phone numbers, data rates, user authentication information, and other connection information. On Windows 95, Windows 98, and Windows CE, the phonebook is stored in the system Registry. On Windows 2000 and Windows NT, the phonebook is stored in files that typically have the file extension .pbk. A <i>RASENTRY</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct tagRASENTRY
{
    DWORD     dwSize;
    DWORD     dwfOptions;
    DWORD     dwCountryID; 
    DWORD     dwCountryCode; 
    TCHAR     szAreaCode[RAS_MaxAreaCode + 1]; 
    TCHAR     szLocalPhoneNumber[RAS_MaxPhoneNumber + 1]; 
    DWORD     dwAlternateOffset;
    RASIPADDR ipaddr;
    RASIPADDR ipaddrDns;
    RASIPADDR ipaddrDnsAlt;
    RASIPADDR ipaddrWins;
    RASIPADDR ipaddrWinsAlt;
    DWORD     dwFrameSize; 
    DWORD     dwfNetProtocols; 
    DWORD     dwFramingProtocol;
    TCHAR     szScript[MAX_PATH];
    TCHAR     szAutodialDll[MAX_PATH]; 
    TCHAR     szAutodialFunc[MAX_PATH];
    TCHAR     szDeviceType[RAS_MaxDeviceType + 1];
    TCHAR     szDeviceName[RAS_MaxDeviceName + 1];
    TCHAR     szX25PadType[RAS_MaxPadType + 1];
    TCHAR     szX25Address[RAS_MaxX25Address + 1]; 
    TCHAR     szX25Facilities[RAS_MaxFacilities + 1]; 
    TCHAR     szX25UserData[RAS_MaxUserData + 1]; 
    DWORD     dwChannels;
    DWORD     dwReserved1; 
    DWORD     dwReserved2;
#if (WINVER &gt;= 0x401)
    DWORD     dwSubEntries; 
    DWORD     dwDialMode; 
    DWORD     dwDialExtraPercent; 
    DWORD     dwDialExtraSampleSeconds; 
    DWORD     dwHangUpExtraPercent; 
    DWORD     dwHangUpExtraSampleSeconds;
    DWORD     dwIdleDisconnectSeconds;

#endif
#if (WINVER &gt;= 0x500)
    DWORD     dwType;
    DWORD     dwEncryptionType;
    DWORD     dwCustomAuthKey;
    GUID      guidId; 
    TCHAR     szCustomDialDll[MAX_PATH]; 
    DWORD     dwVpnStrategy; 
#endif
} RASENTRY;
</pre>
</td></tr></table>
</p>

<p>As you can see, many fields make up this structure. The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Identifies the size (in bytes) of a <i>RASENTRY</i> structure.</li></p>

<p><li><b><i>dwfOptions</i></b> Can be set to one or more flags described in Table 16-4.</li></p>
</ul>

<p><b>Table 16-4.</b> RASENTRY <i>structure option flags</i></p>

<table cellpadding=5 width="95%">
<tr><th><i>Option Flag</i></th> <th><i>Description</i></th></tr>

<tr>
<td valign="top"><i>RASEO_Custom</i></td> 
<td valign="top">On Windows 2000, custom encryption is used.</td>
</tr>

<tr>
<td valign="top"><i>RASEO_DisableLcpExtensions</i></td> 
<td valign="top">RAS disables the PPP LCP extensions defined in RFC 1570.</td>
</tr>

<tr>
<td valign="top"><i>RASEO_IpHeaderCompression</i></td> 
<td valign="top">RAS will negotiate IP header compression over a PPP connection.</td>
</tr>

<tr>
<td valign="top"><i>RASEO_ModemLights</i></td> 
<td valign="top">On Windows 2000, the task bar will display a status monitor.</td>
</tr>

<tr>
<td valign="top"><i>RASEO_NetworkLogon</i></td>
<td valign="top">On Windows 95 and Windows 98, RAS will attempt to log the user on to a domain only after the RAS connection is authenticated.</td>
</tr>

<tr>
<td valign="top"><i>RASEO_PreviewDomain</i></td>
<td valign="top">On Windows 2000, RAS will display the user's domain before dialing.</td>
</tr>

<tr><td valign="top"><i>RASEO_PreviewPhoneNumber</i></td> 
<td valign="top">On Windows 2000, RAS will display the phone number to be dialed.</td></tr>

<tr><td valign="top"><i>RASEO_PromoteAlternates</i></td> 
<td valign="top">RAS can make an alternate number the primary number if the alternate number connects successfully.</td></tr>

<tr><td valign="top"><i>RASEO_RemoteDefaultGateway</i></td> 
<td valign="top">The default route for IP packets is via the dial-up adapter rather than via other network adapters when the RAS connection is active.</td></tr>

<tr><td valign="top"><i>RASEO_RequireCHAP</i></td>
<td valign="top">On Windows 2000, the Challenge Handshake Authentication Protocol (CHAP) will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireDataEncryption</i></td> 
<td valign="top">Data encryption must be negotiated successfully; otherwise, the connection should be dropped. The <i>RASEO_RequireEncryptedPw</i> flag also must be set.</td></tr>

<tr><td valign="top"><i>RASEO_RequireEAP</i></td> 
<td valign="top">On Windows 2000, EAP will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireEncryptedPw</i></td> 
<td valign="top">This flag prevents PPP from using the Password Authentication Protocol (PAP) to authenticate the client. The CHAP and Shiva's Password Authentication Protocol (SPAP) are used instead.</td></tr>

<tr><td valign="top"><i>RASEO_RequireMsCHAP</i></td> 
<td valign="top">On Windows 2000, Microsoft CHAP will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireMsCHAP2</i></td> 
<td valign="top">On Windows 2000, Microsoft CHAP version 2 will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireMsEncryptedPw</i></td> 
<td valign="top">This flag overrides <i>RASEO_RequireEncryptedPw</i> and allows RAS to use Microsoft secure password schemes such as Microsoft CHAP.</td></tr>

<tr><td valign="top"><i>RASEO_RequirePAP</i></td> <td valign="top">On Windows 2000, PAP will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireSPAP</i></td> <td valign="top">On Windows 2000, SPAP will be used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_RequireW95MSCHAP</i></td> <td valign="top">On Windows 2000, an older version of Microsoft CHAP (designed for Windows 95 RAS servers) is used for authentication.</td></tr>

<tr><td valign="top"><i>RASEO_ReviewUserPW</i></td> 
<td valign="top">On Windows 2000, RAS will display the user's name and password before dialing.</td></tr>

<tr><td valign="top"><i>RASEO_SecureLocalFiles</i></td> 
<td valign="top">On Windows 2000 and Windows NT, RAS checks for existing remote file system and remote printer bindings before making a connection with this entry.</td></tr>

<tr><td valign="top"><i>RASEO_SharedPhoneNumbers</i></td> 
<td valign="top">On Windows 2000, phone numbers are shared.</td></tr>

<tr><td valign="top"><i>RASEO_ShowDialingProgress</i></td> 
<td valign="top">On Windows 2000, RAS will display dialing progress.</td></tr>

<tr><td valign="top"><i>RASEO_SpecificIpAddr</i></td> 
<td valign="top">This flag tells RAS to use the IP address specified in the <i>ipaddr</i> field.</td></tr>

<tr><td valign="top"><i>RASEO_SpecificNameServers</i></td> 
<td valign="top">This flag tells RAS to use the IP information specified in the <i>ipaddrDns</i>, <i>ipaddrDnsAlt</i>, <i>ipaddrWins</i>, and <i>ipaddrWinsAlt</i> fields.</td>
</tr>

<tr><td valign="top"><i>RASEO_SwCompression</i></td> 
<td valign="top">This flag lets RAS negotiate software compression of data sent over a connection.</td></tr>

<tr><td valign="top"><i>RASEO_TerminalAfterDial</i></td> 
<td valign="top">RAS displays a terminal window for user input after dialing the connection.</td></tr>

<tr><td valign="top"><i>RASEO_TerminalBeforeDial</i></td> 
<td valign="top">RAS displays a terminal window for user input before dialing the connection.</td></tr>

<tr><td valign="top"><i>RASEO_UseCountryAndAreaCodes</i></td> 
<td valign="top">This flag tells RAS to use the <i>dwCountryID</i>, <i>dwCountryCode</i>, and <i>szAreaCode</i> fields to construct a phone number with the <i>szLocalPhoneNumber</i> field.</td></tr>

<tr><td valign="top"><i>RASEO_UseLogonCredentials</i></td> 
<td valign="top">This flag tells RAS to use the user name, password, and domain of the user who is currently logged on when dialing. This occurs only if the <i>RASEO_RequireMsEncryptedPw</i> flag is set.</td></tr>

</table>

<ul>
<p><li><b><i>dwCountryID</i></b> Specifies a TAPI country identifier if the <i>RASEO_UseCountryAndAreaCodes</i> option flag is set. You can retrieve country identifier information by calling the <i>RasGetCountryInfo</i> function (which we'll describe later).</li></p>

<p><li><b><i>dwCountryCode</i></b> Specifies a country code that is associated with the <i>dwCountryID</i> field if the <i>RASEO_UseCountryAndAreaCodes</i> option flag is set. If this field is 0, the country code associated with <i>dwCountryID</i> in Windows is used.</li></p>

<p><li><b><i>szAreaCode</i></b> Specifies an area code if the <i>RASEO_UseCountryAndAreaCodes</i> flag is set.</li></p>

<p><li><b><i>szLocalPhoneNumber</i></b> Specifies a phone number for dialing. If the <i>RASEO_UseCountryAndAreaCodes</i> flag is set, RAS will combine the values of the <i>dwCountryID</i>, <i>dwCountryCode</i>, and <i>szAreaCode</i> fields with your phone number.</li></p>

<p><li><b><i>dwAlternateOffset</i></b> Specifies an offset in bytes, from the beginning of this structure, where alternate phone numbers are stored for a RAS phonebook entry. Alternate numbers are stored as a consecutive set of null-terminated strings. The last string in the set is terminated by two consecutive null characters.</li></p>

<p><li><b><i>ipaddr</i></b> Specifies an IP address to use for this connection if the <i>RASEO_SpecificIpAddr</i> flag is set.</li></p>

<p><li><b><i>ipaddrDns</i></b> Specifies a DNS server IP address for this connection if the <i>RASEO_SpecificNameServers</i> flag is set.</li></p>

<p><li><b><i>ipaddrDnsAlt</i></b> Specifies a secondary DNS server IP address for this connection if the <i>RASEO_SpecificNameServers</i> flag is set.</li></p>

<p><li><b><i>ipaddrWins</i></b> Specifies a WINS server IP address for this connection if the <i>RASEO_SpecificNameServers</i> flag is set.</li></p>

<p><li><b><i>ipaddrWinsAlt</i></b> Specifies a secondary WINS server IP address for this connection if the <i>RASEO_SpecificNameServers</i> flag is set.</li></p>

<p><li><b><i>dwFrameSize</i></b> Changes the size of the framing protocol to 1006 or 1500 bytes if the <i>RASFP_Slip</i> flag is set in the <i>dwFramingProtocol</i> field.</li></p>

<p><li><b><i>dwfNetProtocols</i></b> Specifies the flags identifying which network protocols will be used over the framing protocol. The protocol flags are <i>RASNP_NetBEUI</i> for NetBEUI, <i>RASNP_Ipx</i> for IPX, and <i>RASNP_Ip</i> for IP.</li></p>

<p><li><b><i>dwFramingProtocol</i></b> Specifies the flags identifying which framing protocol will be used over the RAS connection. The possible flags are <i>RASFP_Ppp</i> for PPP, <i>RASFP_Slip</i> for SLIP, and <i>RASFP_Ras</i> for asynchronous NetBEUI.</li></p>

<p><li><b><i>szScript</i></b> Specifies a full path to a dial-up script that gets executed when starting the connection.</li></p>

<p><li><b><i>szAutodialDll</i></b> Specifies a customizable DLL that can be used to set automatic dialing (autodial) features of RAS. This book does not cover the details of managing RAS autodial features.</li></p>

<p><li><b><i>szAutodialFunc</i></b> Specifies the function name exported from the customized DLL in the <i>szAutodialDll</i> field.</li></p>

<p><li><b><i>szDeviceType</i></b> Specifies a device type that is used for a connection. The value should be identified as a string. Table 16-5 lists the possible values.</li></p>
</ul>

<p><b>Table 16-5.</b>  <i>RAS device types</i></p>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Device Name String</i></th> <th valign="top"><i>Description</i></th></tr>

<tr><td valign="top">&quot;RASDT_Modem&quot;</td> <td valign="top">Modem on a COM port</td></tr>

<tr><td valign="top">&quot;RASDT_Isdn&quot;</td> <td valign="top">ISDN adapter</td></tr>

<tr><td valign="top">&quot;RASDT_X25&quot;</td> <td valign="top">X.25 card</td></tr>

<tr><td valign="top">&quot;RASDT_Vpn&quot;</td> <td valign="top">Virtual private networking (VPN) connection</td></tr>

<tr><td valign="top">&quot;RASDT_Pad&quot;</td> <td valign="top">Packet assembler/disassembler</td></tr>

<tr><td valign="top">&quot;RASDT_Generic&quot;</td> <td valign="top">Generic type</td></tr>

<tr><td valign="top">&quot;RASDT_Serial&quot;</td> <td valign="top">Serial port</td></tr>

<tr><td valign="top">&quot;RASDT_FrameRelay&quot;</td> <td valign="top">Frame relay device</td></tr>

<tr><td valign="top">&quot;RASDT_Atm&quot;</td> <td valign="top">ATM device</td></tr>

<tr><td valign="top">&quot;RASDT_Sonet&quot;</td> <td valign="top">Synchronous Optical Network (Sonet) device</td></tr>

<tr><td valign="top">&quot;RASDT_SW56&quot;</td> <td valign="top">Switched 56-Kbps access</td></tr>

<tr><td valign="top">&quot;RASDT_Irda&quot;</td> <td valign="top">IrDA device</td></tr>

<tr><td valign="top">&quot;RASDT_Parallel&quot;</td> <td valign="top">Parallel port</td></tr>
</table>

<ul>
<p><li><b><i>szDeviceName</i></b> Identifies a TAPI device to use for a connection. You can retrieve TAPI devices using the <i>RasEnumDevices</i> function, which we will describe later.</li></p>

<p><li> <b><i>szX25PadType</i></b> Specifies an X.25 PAD type.</li></p>

<p><li> <b><i>szX25Address</i></b> Specifies an X.25 address.</li></p>

<p><li> <b><i>szX25Facilities</i></b> Specifies facilities to request from the X.25 host.</li></p>

<p><li> <b><i>szX25UserData</i></b> Specifies extra information for an X.25 connection.</li></p>

<p><li> <b><i>dwChannels</i></b> Is not used.</li></p>

<p><li> <b><i>dwReserved1</i></b> Is not used and must be set to 0.</li></p>

<p><li> <b><i>dwReserved2</i></b> Is not used and must be set to 0.</li></p>

<p><li> <b><i>dwSubEntries</i></b> Identifies how many multilink subentries are associated with this phonebook entry. You should set this field to 0 and let the <i>RasSetSubEntryProperties</i> function manage multilink subentries for this field. (More on this function later in this chapter.)</li></p>

<p><li> <b><i>dwDialMode</i></b> Specifies in Windows 2000 how RAS should dial multilink subentries when a connection is made using the defines <i>RASEDM_DialAll</i> and <i>RASEDM_DialAsNeeded</i>. If this field is set to <i>RASEDM_DialAll</i>, all multilink subentries are dialed. If <i>RASEDM_DialAsNeeded</i> is set, RAS uses the <i>dwDialExtraPercent</i>, <i>dwDialExtraSampleSeconds</i>, <i>dwHangUpExtraPercent</i>, and <i>dwHangUpExtraSampleSeconds</i> fields to determine when to dial and disconnect additional multilink subentries.</li></p>

<p><li> <b><i>dwDialExtraPercent</i></b> Specifies in Windows 2000 a percentage of the current total bandwidth of a connection. RAS will dial an additional subentry when the total bandwidth used exceeds this percentage for at least <i>dwDialExtraSampleSeconds</i>.</li></p>

<p><li> <b><i>dwDialExtraSampleSeconds</i></b> Specifies in Windows 2000 the number of seconds by which current bandwidth usage must exceed the bandwidth percentage specified in <i>dwDialExtraPercent</i> before RAS dials an additional subentry.</li></p>

<p><li> <b><i>dwHangUpExtraPercent</i></b> Specifies in Windows 2000 the percentage of total bandwidth available from the connected subentries. RAS will terminate subentry connections when the total bandwidth usage falls below this percentage for <i>dwHangUpExtraSampleSeconds</i>.</li></p>

<p><li> <b><i>dwHangUpExtraSampleSeconds</i></b> Specifies in Windows 2000 the number of seconds by which current bandwidth usage must fall below the bandwidth percentage specified in <i>dwHangUpExtraPercent</i> before RAS disconnects a subentry.</li></p>

<p><li> <b><i>dwIdleDisconnectSeconds</i></b> Specifies how many seconds of idle time are allowed before RAS will terminate the connection. You can also set this field to either <i>RASIDS_Disabled</i> to prevent the connection from terminating or <i>RASIDS_UseGlobalValue</i> to use the system's default value.</li></p>

<p><li> <b><i>dwType</i></b> Specifies in Windows 2000 the type of phonebook entry. Table 16-6 lists the possible values.</li></p>
</ul>

<p><b>Table 16-6.</b> RASENTRY <i>phonebook types</i></p>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Type</i></th> <th valign="top"><i>Description</i></th></tr>

<tr><td valign="top"><i>RASET_Direct</i></td> <td valign="top">Direct serial or parallel connection</td></tr>

<tr><td valign="top"><i>RASET_Internet</i></td> <td valign="top">Internet connection services (ICS)</td></tr>

<tr><td valign="top"><i>RASET_Phone</i></td> <td valign="top">Phone line</td></tr>

<tr><td valign="top"><i>RASET_Vpn</i></td> <td valign="top">Virtual private network</td></tr>
</table>

<ul>
<p><li><b><i>dwEncryptionType</i></b> Specifies in Windows 2000 the type of encryption used on the data passed through the connection. Table 16-7 lists the possible values.</li></p>
</ul>

<p><b>Table 16-7.</b>  <i>Data encryption values used on a RAS connection</i></p>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Value</i></th> <th valign="top"><i>Description</i></th></tr>

<tr><td valign="top"><i>ET_40Bit</i></td> <td valign="top">40-bit data encryption</td></tr>

<tr><td valign="top"><i>ET_128Bit</i></td> <td valign="top">128-bit data encryption</td></tr>
</table>

<ul>
<p><li><b><i>dwCustomAuthKey</i></b> Specifies on Windows 2000 an authentication key provided to the EAP vendor.</li></p>

<p><li> <b><i>guidId</i></b> On Windows 2000, identifies a GUID associated with the phonebook entry.</li></p>

<p><li> <b><i>szCustomDialDll</i></b> Specifies on Windows 2000 a path to a DLL containing custom RAS dialer functions. If this field is <i>NULL</i>, RAS will use the default system dialer. This book does not describe the details of developing a custom dialer for RAS.</li></p>

<p><li> <b><i>dwVpnStrategy</i></b> Specifies on Windows 2000 the VPN dialing strategy to use on VPN connections. Table 16-8 lists the possible values.</li></p>
</ul>

<p><b>Table 16-8.</b>  <i>RAS VPN dialing strategies</i></p>

<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Value</i></th> <th valign="top"><i>Description</i></th></tr>

<tr><td valign="top"><i>VS_Default</i></td> <td valign="top">RAS dials Point-to-Point Tunneling Protocol (PPTP) first. If PPTP fails, Layer 2 Tunneling Protocol (L2TP) is attempted.</td></tr>

<tr><td valign="top"><i>VS_L2tpFirst</i></td> <td valign="top">RAS dials L2TP first.</td></tr>

<tr><td valign="top"><i>VS_L2tpOnly</i></td> <td valign="top">RAS dials only L2TP.</td></tr>

<tr><td valign="top"><i>VS_PptpFirst</i></td> <td valign="top">RAS dials PPTP first.</td></tr>

<tr><td valign="top"><i>VS_PptpOnly</i></td> <td valign="top">RAS dials only PPTP.</td></tr>
</table>

<p>When you call any RAS API that takes a phonebook file as a parameter (<i>lpszPhonebook</i>), you can identify the path to a phonebook file. As we mentioned earlier, this parameter must be <i>NULL</i> on Windows 95, Windows 98, and Windows CE because phonebook entries are stored in the system Registry. On Windows 2000 and Windows NT, this can be a path to a phonebook file. Typically, this phonebook file will have the extension .pbk. Also, the system default phonebook on Windows 2000 and Windows NT is located under %SystemRoot%\System32\Ras\RasPhone.pbk. If you specify <i>NULL</i> as the phonebook, you will use the system default phonebook file.</p>

<p>Three support functions can help you create and manage phonebook entries: <i>RasValidateEntryName</i>, <i>RasEnumDevices</i>, and <i>RasGetCountryInfo</i>. The <i>RasValidateEntryName</i> function, shown below, determines whether a name is properly formatted and whether it already exists in a phonebook.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasValidateEntryName( 
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to a name of a phonebook file. The <i>lpszEntry</i> parameter is a string representing the phonebook entry name you are verifying. This function returns <i>ERROR_SUCCESS</i> if the name is not already in the phonebook and is properly formatted. Otherwise, the function fails&#8212;with <i>ERROR_INVALID_NAME</i> if the name is not correctly formatted; with <i>ERROR_ALREADY_EXISTS</i> if the name is in the phonebook.</p>

<p>The <i>RasEnumDevices</i> function receives the name and type of all RAS-capable devices available on your computer:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasEnumDevices( 
    LPRASDEVINFO lpRasDevInfo,
    LPDWORD lpcb,
    LPDWORD lpcDevices
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpRasDevInfo</i> parameter is a pointer to an application buffer that you must provide to receive an array of <i>RASDEVINFO</i> structures. The <i>RASDEVINFO</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct tagRASDEVINFO {
    DWORD dwSize; 
    TCHAR szDeviceType[RAS_MaxDeviceType + 1]; 
    TCHAR szDeviceName[RAS_MaxDeviceName + 1];
} RASDEVINFOW;
</pre>
</td></tr></table>
</p>

<p>The fields of this parameter are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Must be set to the size (in bytes) of a <i>RASDEVINFO</i> structure before you call <i>RasEnumDevices</i></li></p>

<p><li><b><i>szDeviceType</i></b> Receives a string describing the device type, such as &quot;RASDT_Modem&quot;</li></p>

<p><li><b><i>szDeviceName</i></b> Receives the formal name of a TAPI device</li></p>
</ul>

<p>You must be sure you provide a buffer that is large enough to hold several structures; otherwise, <i>RasEnumDevices</i> will fail with the error <i>ERROR_BUFFER_TOO_SMALL</i>. The next parameter, <i>lpcb</i>, is a pointer to a variable that receives the number of bytes needed to enumerate the devices. You must set this parameter to the size (in bytes) of your <i>lpRasDevInfo</i> buffer. The final parameter, <i>lpcDevices</i>, is a pointer to a variable that receives the number of <i>RASDEVINFO</i> structures written to <i>lpRasDevInfo</i>.</p>

<p>The <i>RasGetCountryInfo</i> function allows you to retrieve country-specific TAPI dialing information from Windows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetCountryInfo(
    LPRASCTRYINFO lpRasCtryInfo,
    LPDWORD lpdwSize
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpRasCtryInfo</i> parameter is a buffer that receives a dialing prefix and other information associated with the country you specify. This buffer must be a <i>RASCTRYINFO</i> structure that is followed by additional bytes that receive a country description string. We recommend allocating at least a 256-byte buffer to hold the <i>RASCTRYINFO</i> structure and the description string. The <i>RASCTRYINFO</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct RASCTRYINFO 
{ 
    DWORD dwSize; 
    DWORD dwCountryID; 
    DWORD dwNextCountryID; 
    DWORD dwCountryCode; 
    DWORD dwCountryNameOffset;
} RASCTRYINFO;
</pre>
</td></tr></table>
</p>

<p>The fields are described as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Must be set to the size (in bytes) of a <i>RASCTRYINFO</i> structure.</li></p>

<p><li><b><i>dwCountryID</i></b> Allows you to specify a TAPI country identifier (which applies to the <i>dwCountryID</i> field of a <i>RASENTRY</i> structure) in the Windows list of countries. If you set this field to 1, you will receive the first entry in the list.</li></p>

<p><li><b><i>dwNextCountryID</i></b> Receives the next TAPI country identifier in the list. If this field is set to 0, you are at the end of the list.</li></p>

<p><li><b><i>dwCountryCode</i></b> Receives the dialing prefix code associated with the country specified in the <i>dwCountryID</i> parameter.</li></p>

<p><li><b><i>dwCountryNameOffset</i></b> Specifies the number of bytes from the start of this structure to the start of the null-terminated string describing the country that follows the <i>RASCTRYINFO</i> structure.</li></p>
</ul>

<p>The other parameter of <i>RasGetCountryInfo</i>, <i>lpdwSize</i>, is a pointer to a variable that receives the number of bytes that <i>RasGetCountryInfo</i> placed in the <i>lpRasCtryInfo</i> buffer. You must set this parameter to the size of your application buffer before calling this function.</p>

<A NAME="493"><H2>Adding Phonebook Entries</H2></A>

<p>RAS provides four functions that allow you to programmatically manage phonebook <i>RASENTRY</i> structures: <i>RasSetEntryProperties</i>, <i>RasGetEntryProperties</i>, <i>RasRenameEntry</i>, and <i>RasDeleteEntry</i>. You can use the <i>RasSetEntryProperties</i> function, which is defined below, to create a new entry or modify an existing entry.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasSetEntryProperties(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry,
    LPRASENTRY lpRasEntry,
    DWORD dwEntryInfoSize,
    LPBYTE lpbDeviceInfo,
    DWORD dwDeviceInfoSize
); 
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lpszEntry</i> parameter is a pointer to a string used to identify an existing entry or a new one. If a <i>RASENTRY</i> structure exists with this name, the properties are modified; otherwise, a new entry is created in the phonebook. The <i>lpRasEntry</i> parameter is a pointer to a <i>RASENTRY</i> structure. You can place a list of null-terminated strings after the <i>RASENTRY</i> structure defining alternate phone numbers. The last string is terminated by two consecutive null characters. The <i>dwEntryInfoSize</i> parameter is the size (in bytes) of the structure in the <i>lpRasEntry</i> parameter. The <i>lpbDeviceInfo</i> parameter is a pointer to a buffer that contains TAPI device configuration information. On Windows 2000 and Windows NT, this parameter is not used and should be set to <i>NULL</i>. The final parameter, <i>dwDeviceInfoSize</i>, represents the size (in bytes) of the <i>lpbDeviceInfo</i> buffer.</p>

<p>The <i>RasGetEntryProperties</i> function, defined below, can be used to retrieve the properties of an existing phonebook entry or the default values for a new phonebook entry.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetEntryProperties(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry,
    LPRASENTRY lpRasEntry,
    LPDWORD lpdwEntryInfoSize,
    LPBYTE lpbDeviceInfo,
    LPDWORD lpdwDeviceInfoSize
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lpszEntry</i> parameter is a pointer to a string identifying an existing phonebook entry. If you set this parameter to <i>NULL</i>, the <i>lpRasEntry</i> and <i>lpbDeviceInfo</i> parameters will receive default values of a phonebook entry. Retrieving the default values is quite useful: when you need to create a new RAS phonebook entry, you can populate the <i>lpRasEntry</i> and <i>lpbDeviceInfo</i> fields with correct information about your system before you call the <i>RasSetEntryProperties</i> function.</p>

<p>The <i>lpRasEntry</i> parameter is a pointer to a buffer that your application supplies to receive a <i>RASENTRY</i> structure. As we described in our discussion of the <i>RasSetEntryProperties</i> function, this structure can be followed by an array of null-terminated strings identifying alternate phone numbers for the requested phonebook entry. Therefore, the size of your receiving buffer should be larger than a <i>RASENTRY</i> structure. If you pass a <i>NULL</i> pointer, the <i>lpdwEntryInfoSize</i> parameter will receive the total number of bytes needed to store all the elements of a <i>RASENTRY</i> structure plus any alternate phone numbers. The <i>lpdwEntryInfoSize</i> parameter is a pointer to a <i>DWORD</i> containing the number of bytes that are in the receiving buffer supplied by your application to the <i>lpRasEntry</i> parameter. When this function completes, it will update <i>lpdwEntryInfoSize</i> to the number of bytes actually received in <i>lpRasEntry</i>. We highly recommend calling this function with <i>lpRasEntry</i> set to <i>NULL</i> and <i>lpdwEntryInfoSize</i> set to 0 to obtain buffer sizing information. Once you have the appropriate size, you can call this function again and retrieve all the information without error.</p>

<p>The <i>lpbDeviceInfo</i> parameter is a pointer to an application-supplied buffer that receives TAPI device-specific information for this phonebook entry. If this parameter is set to <i>NULL</i>, the <i>lpdwDeviceInfoSize</i> parameter will receive the number of bytes needed to retrieve this information. If you are using Windows 2000 and Windows NT, <i>lpbDeviceInfo</i> should be set to <i>NULL</i>. The final parameter, <i>lpdwDeviceInfoSize</i>, is a pointer to a <i>DWORD</i> that should be set to the number of bytes contained in the buffer supplied to <i>lpbDeviceInfo</i>. When <i>RasGetEntryProperties</i> returns, <i>lpdwDeviceInfoSize</i> will return the number of bytes that are returned in the <i>lpbDeviceInfo</i> buffer.</p>

<p>Figure 16-3 demonstrates how an application should use <i>RasGetEntryProperties</i> and <i>RasSetEntryProperties</i> to create a new phonebook entry.</p>

<p><b>Figure 16-3.</b>  <i>Creating a new RAS phonebook entry using default properties</i></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
#include &lt;windows.h&gt;
#include &lt;ras.h&gt;
#include &lt;raserror.h&gt;
#include &lt;stdio.h&gt;

void main(void)
{
    DWORD EntryInfoSize = 0;
    DWORD DeviceInfoSize = 0;
    DWORD Ret;
    LPRASENTRY lpRasEntry;
    LPBYTE lpDeviceInfo;

    // Get buffer sizing information for a default phonebook entry

    if ((Ret = RasGetEntryProperties(NULL, &quot;&quot;, NULL, 
        &amp;EntryInfoSize, NULL, &amp;DeviceInfoSize)) != 0)
    {
        if (Ret != ERROR_BUFFER_TOO_SMALL)
        {
            printf(&quot;RasGetEntryProperties sizing failed &quot;
                &quot;with error %d\n&quot;, Ret);
            return;
        }
    }

    lpRasEntry = (LPRASENTRY) GlobalAlloc(GPTR, EntryInfoSize);

    if (DeviceInfoSize == 0)
        lpDeviceInfo = NULL;
    else
        lpDeviceInfo = (LPBYTE) GlobalAlloc(GPTR, DeviceInfoSize);

    // Get default phonebook entry
    lpRasEntry-&gt;dwSize = sizeof(RASENTRY);

    if ((Ret = RasGetEntryProperties(NULL, &quot;&quot;, lpRasEntry,
        &amp;EntryInfoSize, lpDeviceInfo, &amp;DeviceInfoSize)) != 0)
    {
        printf(&quot;RasGetEntryProperties failed with error %d\n&quot;,
            Ret);
        return;
    }

    // Validate new phonebook name &quot;Testentry&quot;

    if ((Ret = RasValidateEntryName(NULL, &quot;Testentry&quot;)) !=
        ERROR_SUCCESS)
    {
        printf(&quot;RasValidateEntryName failed with error %d\n&quot;,
            Ret);
        return;
    }

    // Install a new phonebook entry, &quot;Testentry&quot;, using 
    // default properties

    if ((Ret = RasSetEntryProperties(NULL, &quot;Testentry&quot;,
        lpRasEntry, EntryInfoSize, lpDeviceInfo, 
        DeviceInfoSize)) != 0)
    {
        printf(&quot;RasSetEntryProperties failed with error %d\n&quot;,
            Ret);
        return;
    }
}
</pre>
</td></tr></table>
</p>

<A NAME="494"><H2>Renaming Phonebook Entries</H2></A>

<p>Now that you have an understanding of what's involved in creating and modifying a phonebook entry, let's look at the <i>RasRenameEntry</i> function. <i>RasRenameEntry</i>, which is defined below, simply allows you to rename a phonebook entry:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasRenameEntry(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszOldEntry,
    LPCTSTR lpszNewEntry
); 
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to a name of a phonebook file. The <i>lpszOldEntry</i> parameter is a pointer to a string identifying an existing phonebook entry that you intend to rename. The <i>lpszNewEntry</i> parameter is a pointer to a string containing the new name for the phonebook entry. Your application should call <i>RasValidateEntryName</i> on the new name before calling <i>RasRenameEntry</i>. If <i>RasRenameEntry</i> succeeds, it will return 0. If it fails, it will return the following types of errors:</p>

<ul>
<p><li><b><i>ERROR_INVALID_NAME</i></b> Indicates that the <i>lpszNewEntry</i> name is invalid</li></p>

<p><li><b><i>ERROR_ALREADY_EXISTS</i></b> Indicates that the <i>lpszNewEntry</i> name already exists in the phonebook</li></p>

<p><li><b><i>ERROR_CANNOT_FIND_PHONEBOOK_ENTRY</i></b> Indicates that the <i>lpszOldEntry</i> name cannot be found in the phonebook</li></p>
</ul>

<A NAME="495"><H2>Deleting Phonebook Entries</H2></A>

<p>Deleting phonebook entries is easy. To do so, you simply call the <i>RasDeleteEntry</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasDeleteEntry(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to a name of a phonebook file. The <i>lpszEntry</i> parameter is a string representing an existing phonebook entry. If this function succeeds, it returns <i>ERROR_SUCCESS</i>; otherwise, it returns <i>ERROR_INVALID_NAME.</i></p>

<A NAME="496"><H2>Enumerating Phonebook Entries</H2></A>

<p>RAS provides a convenient function named <i>RasEnumEntries</i>, which retrieves the phonebook entries available in a phonebook file and is defined as shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasEnumEntries ( 
    LPCTSTR reserved,
    LPCTSTR lpszPhonebook,
    LPRASENTRYNAME lprasentryname,
    LPDWORD lpcb,
    LPDWORD lpcEntries
);
</pre>
</td></tr></table>
</p>

<p>The <i>reserved</i> parameter isn't used and must be set to <i>NULL</i>. The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lprasentryname</i> parameter is a pointer to an application buffer that you must provide to receive an array of <i>RASENTRYNAME</i> structures. The <i>RASENTRYNAME</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _RASENTRYNAME 
{ 
    DWORD dwSize; 
    TCHAR szEntryName[RAS_MaxEntryName + 1];
#if (WINVER &gt;= 0x500)
    DWORD dwFlags;
    CHAR  szPhonebookPath[MAX_PATH + 1];
#endif
} RASENTRYNAME; 
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Must be set to the size (in bytes) of a <i>RASENTRYNAME</i> structure before you call <i>RasEnumEntries</i>.</li></p>

<p><li><b><i>szEntryName</i></b> Receives the name of a phonebook entry.</li></p>

<p><li><b><i>dwFlags</i></b> On Windows 2000, this flag indicates whether the phonebook entry is in the system default phonebook (described earlier) using flag <i>REN_AllUsers</i> or is in a user's profile phonebook using flag <i>REN_User</i>.</li></p>

<p><li><b><i>szPhonebookPath</i></b> On Windows 2000, specifies the full path to the phonebook file.</li></p>
</ul>

<p>You must be sure you provide a buffer large enough to hold several structures; otherwise, <i>RasEnumEntries</i> will fail with the error <i>ERROR_BUFFER_TOO_SMALL</i>. The next parameter, <i>lpcb</i>, is a pointer to a variable that receives the number of bytes needed to enumerate the entries. You must set this parameter to the size (in bytes) of your <i>lprasentryname</i> buffer. The final parameter, <i>lpcEntries</i>, is a pointer to a variable that receives the number of <i>RASENTRYNAME</i> structures written to the <i>lprasentryname</i> buffer.</p>

<A NAME="497"><H2>Managing User Credentials</H2></A>

<p>When a RAS client makes a connection using a phonebook entry through <i>RasDial</i>, it saves the security credentials of the user and associates them with the phonebook entry. The functions <i>RasGetCredentials</i>, <i>RasSetCredentials</i>, <i>RasGetEntryDialParams</i>, and <i>RasSetEntryDialParams</i> allow you to manage user security credentials associated with a phonebook entry. The <i>RasGetCredentials</i> and <i>RasSetCredentials</i> functions were introduced in Windows NT 4. (They are also available on Windows 2000.) These two functions supersede <i>RasGetEntryDialParams</i> and <i>RasSetEntryDialParams</i>. Since <i>RasGetCredentials</i> and <i>RasSetCredentials</i> are not available on Windows 95, Windows 98, and Windows CE, you can use <i>RasGetEntryDialParams</i> and <i>RasSetEntryDialParams</i> for this purpose on all platforms.</p>

<p>The <i>RasGetCredentials</i> function, defined below, retrieves user credentials associated with a phonebook entry:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetCredentials(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry,
    LPRASCREDENTIALS lpCredentials
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lpszEntry</i> parameter is a string representing an existing phonebook entry. The <i>lpCredentials</i> parameter, defined below, is a pointer to a <i>RASCREDENTIALS</i> structure that can receive the user name, password, and domain associated with the phonebook entry:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct {
    DWORD dwSize;
    DWORD dwMask;
    TCHAR szUserName[UNLEN + 1];
    TCHAR szPassword[PWLEN + 1];
    TCHAR szDomain[DNLEN + 1];
} RASCREDENTIALS, *LPRASCREDENTIALS;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Specifies the size (in bytes) of a <i>RASCREDENTIALS</i> structure. You should always set this field to the structure size.</li></p>

<p><li><b><i>dwMask</i></b> Is a bitmask field that identifies which of the next three fields in the structure are valid by using predefined flags. The flag <i>RASCM_UserName</i> applies to <i>szUserName</i>, <i>RASCM_Password</i> applies to <i>szPassword</i>, and <i>RASCM_Domain</i> applies to <i>szDomain</i>.</li></p>

<p><li><b><i>szUserName</i></b> Is a null-terminated string containing a user's logon name.</li></p>

<p><li><b><i>szPassword</i></b> Is a null-terminated string containing a user's password.</li></p>

<p><li><b><i>szDomain</i></b> Is a null-terminated string containing a user's logon domain.</li></p>
</ul>

<p>If <i>RasGetCredentials</i> succeeds, it returns 0. Your application can determine which security credentials are set based on the flags set in the <i>dwMask</i> field of the <i>lpCredentials</i> structure.</p>

<p>The <i>RasSetCredentials</i> function is similar to <i>RasGetCredentials</i> except that it lets you change security credentials associated with a phonebook entry. The parameters are the same except that <i>RasSetCredentials</i> features an additional parameter: <i>fClearCredentials</i>. <i>RasSetCredentials</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasSetCredentials(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry,
    LPRASCREDENTIALS lpCredentials,
    BOOL fClearCredentials
);
</pre>
</td></tr></table>
</p>

<p>The <i>fClearCredentials</i> parameter is a Boolean operator that, if set to <i>TRUE</i>, causes <i>RasSetCredentials</i> to change credentials identified in the <i>dwMask</i> field of the <i>lpCredentials</i> structure to an empty string (&quot;&quot;) value. For example, if <i>dwMask</i> contains the <i>RASCM_Password</i> flag, the password stored is replaced with an empty string. If the <i>RasSetCredentials</i> function succeeds, it returns 0.</p>

<p>You can also use <i>RasGetEntryDialParams</i> and <i>RasSetEntryDialParams</i> to manage user security credentials associated with phonebook entries. <i>RasGetEntryDialParams</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetEntryDialParams(
    LPCTSTR lpszPhonebook,
    LPRASDIALPARAMS lprasdialparams,
    LPBOOL lpfPassword
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lprasdialparams</i> parameter is a pointer to a <i>RASDIALPARAMS</i> structure. The <i>lpfPassword</i> parameter is a Boolean flag that returns <i>TRUE</i> if the user's password was retrieved in the <i>lprasdialparams</i> structure.</p>

<p>The <i>RasSetEntryDialParams</i> function changes the connection information that was last set by the <i>RasDial</i> call on a particular phonebook entry. <i>RasSetEntryDialParams</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasSetEntryDialParams(
    LPCTSTR lpszPhonebook,
    LPRASDIALPARAMS lprasdialparams,
    BOOL fRemovePassword
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> and <i>lprasdialparams</i> parameters are the same as the first two parameters in <i>RasGetEntryDialParams</i>. The <i>fRemovePassword</i> parameter is a Boolean flag that, if set to <i>TRUE</i>, tells <i>RasSetEntryDialParams</i> to remove the password associated with the phonebook entry identified in the <i>lprasdialparams</i> structure.</p>

<A NAME="498"><H2>Multilink Phonebook Subentries</H2></A>

<p>On Windows 2000 and Windows NT, RAS allows you to manage multilink phonebook entries for enhanced communication capability. Multilink entries enable you to have more than one communication device associated with a RAS connection to increase the connection's total bandwidth. RAS allows you to manage multilink phonebook entries by using <i>RasGetSubEntryProperties</i> and <i>RasSetSubEntryProperties</i>. The <i>RasGetSubEntryProperties</i> function is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasGetSubEntryProperties(
    LPCTSTR lpszPhonebook, 
    LPCTSTR lpszEntry,
    DWORD dwSubEntry,
    LPRASSUBENTRY lpRasSubEntry,
    LPDWORD lpdwcb,
    LPBYTE lpbDeviceConfig,
    LPDWORD lpcbDeviceConfig
);
</pre>
</td></tr></table>
</p>

<p>The <i>lpszPhonebook</i> parameter is a pointer to the name of a phonebook file. The <i>lpszEntry</i> parameter is a phonebook entry. The <i>dwSubEntry</i> parameter specifies the index of a subentry contained within the phonebook entry. The <i>lpRasSubEntry</i> parameter is a pointer to a buffer that will receive a <i>RASSUBENTRY</i> structure followed by an optional list of alternate phone numbers. A <i>RASSUBENTRY</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct tagRASSUBENTRY 
{ 
    DWORD dwSize; 
    DWORD dwfFlags;
    TCHAR szDeviceType[RAS_MaxDeviceType + 1]; 
    TCHAR szDeviceName[RAS_MaxDeviceName + 1];
    TCHAR szLocalPhoneNumber[RAS_MaxPhoneNumber + 1]; 
    DWORD dwAlternateOffset;
} RASSUBENTRY;
</pre>
</td></tr></table>
</p>

<p>The fields are defined as follows:</p>

<ul>
<p><li><b><i>dwSize</i></b> Must be set to the size (in bytes) of a <i>RASSUBENTRY</i> structure</li></p>

<p><li><b><i>dwFlags</i></b> Is not used</li></p>

<p><li><b><i>szDeviceType</i></b> Receives a string representing the type of device that is used on the connection</li></p>

<p><li><b><i>szDeviceName</i></b> Receives the actual name of the TAPI device</li></p>

<p><li><b><i>szLocalPhoneNumber</i></b> Identifies the phone number to use for this device</li></p>

<p><li><b><i>dwAlternateOffset</i></b> Specifies the number of bytes from the beginning of the structure to the list of consecutive null-terminated strings that follow the <i>RASSUBENTRY</i> structure</li></p>
</ul>

<p>The <i>lpRasSubEntry</i> buffer must be large enough to contain a <i>RASSUBENTRY</i> structure along with alternate phone number strings; otherwise, the <i>RasGetSubEntryProperties</i> will fail with the error <i>ERROR_BUFFER_TOO_SMALL</i>. The <i>lpdwcb</i> parameter should be set to the number of bytes in your <i>lpRasSubEntry</i> buffer. On return, <i>lpdwcb</i> will receive the total number of bytes needed to contain a <i>RASSUBENTRY</i> structure along with alternate phone numbers. The <i>lpbDeviceConfig</i> and <i>lpcbDeviceConfig</i> parameters are not used and should be set to <i>NULL</i>.</p>

<p>You can create a new subentry or modify an existing subentry of a specified phonebook entry by calling the <i>RasSetSubEntryProperties</i> function, which is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD RasSetSubEntryProperties(
    LPCTSTR lpszPhonebook,
    LPCTSTR lpszEntry,
    DWORD dwSubEntry,
    LPRASSUBENTRY lpRasSubEntry,
    DWORD dwcbRasSubEntry,
    LPBYTE lpbDeviceConfig,
    DWORD dwcbDeviceConfig
);
</pre>
</td></tr></table>
</p>

<p>The parameters are the same as those described by <i>RasGetSubEntryProperties</i> except that <i>lpRasSubEntry</i> specifies the subentry to add to the phonebook.</p>

</BODY>
</HTML>



