<HTML>
<HEAD>
<TITLE>Netstat</title>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</head>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("chabb.htm" , "chabd.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<A NAME="531"><H1>Netstat</H1></A>

<p>The Netstat.exe utility displays the TCP connection table, the UDP listener table, and the IP protocol statistics on your computer. The functions used to retrieve this information not only work on Windows 98 and Windows 2000 but are also available on Windows NT 4 Service Pack 4 (or later).</p>

<A NAME="532"><H2>Retrieving the TCP Connection Table</H2></A>

<p>The <i>GetTcpTable</i> function retrieves the TCP connection table. This is the same information you see when you execute Netstat.exe with the -p tcp -a options. <i>GetTcpTable</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetTcpTable( 
    PMIB_TCPTABLE pTcpTable,
    PDWORD pdwSize,
    BOOL bOrder
);
</pre>
</td></tr></table>
</p>

<p>The <i>pTcpTable</i> parameter is a pointer to an <i>MIB_TCPTABLE</i> application buffer that will receive the TCP connection information. The <i>pdwSize</i> parameter is a pointer to a variable that specifies the size of the buffer you passed in the <i>pTcpTable</i> parameter. If the buffer is not large enough to hold the TCP information, the function sets this parameter to the required buffer size. The <i>bOrder</i> parameter specifies whether the returned information should be sorted.</p>

<p>The <i>MIB_TCPTABLE</i> structure returned from <i>GetTcpTable</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_TCPTABLE 
{ 
    DWORD dwNumEntries;
    MIB_TCPROW table[ANY_SIZE];
} MIB_TCPTABLE, *PMIB_TCPTABLE;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwNumEntries</i></b> Specifies how many entries are in the <i>table</i> field (described next).</li></p>

<p><li><b><i>table</i></b> Is a pointer to an array of <i>MIB_TCPROW</i> structures that contain TCP connection information.</li></p>
</ul>



<p>The <i>MIB_TCPROW</i> structure contains the IP address pair that comprises a TCP connection. This structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_TCPROW 
{ 
    DWORD dwState;
    DWORD dwLocalAddr;
    DWORD dwLocalPort;
    DWORD dwRemoteAddr;
    DWORD dwRemotePort;
} MIB_TCPROW, *PMIB_TCPROW;
</pre>
</td></tr></table>
</p>

<p>Its fields are defined as follows:</p>

<ul>
<p><li><b><i>dwState</i></b> Specifies the state of the TCP connection, as defined in Table B-3.</li></p>
</ul>

<p><b>Table B-3.</b> <i>TCP connection states</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th><i>Connection State</i>  </th>
<th><i>RFC 793 Description</i>  </th></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_CLOSED</i>  </td>
<td valign="top">Known as the &quot;CLOSED&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_CLOSING</i>  </td>
<td valign="top">Known as the &quot;CLOSING&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_CLOSE_WAIT</i>  </td>
<td valign="top">Known as the &quot;CLOSE WAIT&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_DELETE_TCB</i>  </td>
<td valign="top">Known as the &quot;DELETE&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_ESTAB</i>  </td>
<td valign="top"> Known as the &quot;ESTABLISHED&quot; state </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_FIN_WAIT1</i>  </td>
<td valign="top">Known as the &quot;FIN WAIT1&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_FIN_WAIT2</i>  </td>
<td valign="top">Known as the &quot;FIN WAIT2&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_LAST_ACK</i>  </td>
<td valign="top">Known as the &quot;LAST ACK&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_LISTEN</i>  </td>
<td valign="top">Known as the &quot;LISTENING&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_SYN_RCVD</i>  </td>
<td valign="top">Known as the &quot;SYN RCVD&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_SYN_SENT</i>  </td>
<td valign="top">Known as the &quot;SYN SENT&quot; state  </td></tr>
<tr>
<td valign="top"><i>MIB_TCP_STATE_TIME_WAIT</i>  </td>
<td valign="top">Known as the &quot;TIME WAIT&quot; state  </td></tr>
</table></p>


<ul>
<p><li><b><i>dwLocalAddr</i></b> Specifies a local IP address for the connection.</li></p>

<p><li><b><i>dwLocalPort</i></b> Specifies a local port for the connection.</li></p>

<p><li><b><i>dwRemoteAddr</i></b> Specifies the remote IP address for the connection.</li></p>

<p><li><b><i>dwRemotePort</i></b> Specifies the remote port for the connection.</li></p>
</ul>



<A NAME="533"><H2>Retrieving the UDP Listener Table</H2></A>

<p>The <i>GetUdpTable</i> function retrieves the UDP listener table. This is the same information you see if you execute Netstat.exe with the -p udp -a options. <i>GetUdpTable</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetUdpTable( 
    PMIB_UDPTABLE pUdpTable,
    PDWORD pdwSize,
    BOOL bOrder
);
</pre>
</td></tr></table>
</p>

<p>The <i>pUdpTable</i> parameter is a pointer to an <i>MIB_UDPTABLE</i> application buffer that will receive the UDP listener information. The <i>pdwSize</i> parameter is a pointer to a variable that specifies the size of the buffer you passed in the <i>pUdpTable</i> parameter. If the buffer is not large enough to hold the UDP information, the function sets this parameter to the required buffer size. The <i>bOrder</i> parameter specifies whether the returned information should be sorted.</p>

<p>The <i>MIB_UDPTABLE</i> structure returned from <i>GetUdpTable</i> is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_UDPTABLE
{ 
    DWORD dwNumEntries;
    MIB_UDPROW table[ANY_SIZE];
} MIB_UDPTABLE, * PMIB_UDPTABLE;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwNumEntries</i></b> Specifies how many entries are in the <i>table</i> field, described next.</li></p>

<p><li><b><i>table</i></b> Is a pointer to an array of <i>MIB_UDPROW</i> structures that contain UDP listener information.</li></p>
</ul>



<p>The <i>MIB_UDPROW</i> structure contains the IP address in which UDP is listening for datagrams. This structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_UDPROW 
{ 
    DWORD dwLocalAddr;
    DWORD dwLocalPort;
} MIB_UDPROW, * PMIB_UDPROW;
</pre>
</td></tr></table>
</p>

<p>Its fields are defined as follows:</p>

<ul>
<p><li><b><i>dwLocalAddr</i></b> Specifies the local IP address.</li></p>

<p><li><b><i>dwLocalPort</i></b> Specifies the local IP port.</li></p>
</ul>



<A NAME="534"><H2>Retrieving IP Protocol Statistics</H2></A>

<p>Four functions are available for receiving IP statistics: <i>GetIpStatistics</i>, <i>GetIcmpStatistics</i>, <i>GetTcpStatistics</i>, and <i>GetUdpStatistics</i>. These functions produce the same information that is returned from Netstat.exe when you call it with the <i>-</i>s parameter. The first statistics function, <i>GetIpStatistics</i>, retrieves the IP statistics for the current computer and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetIpStatistics( 
    PMIB_IPSTATS pStats
);
</pre>
</td></tr></table>
</p>

<p>The <i>pStats</i> parameter is a pointer to an <i>MIB_IPSTATS</i> structure that receives the current IP statistics for your computer. The <i>MIB_IPSTATS</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_IPSTATS 
{ 
    DWORD dwForwarding; 
    DWORD dwDefaultTTL;
    DWORD dwInReceives;
    DWORD dwInHdrErrors;
    DWORD dwInAddrErrors;
    DWORD dwForwDatagrams;
    DWORD dwInUnknownProtos;
    DWORD dwInDiscards;
    DWORD dwInDelivers;
    DWORD dwOutRequests;
    DWORD dwRoutingDiscards; 
    DWORD dwOutDiscards;
    DWORD dwOutNoRoutes;
    DWORD dwReasmTimeout;
    DWORD dwReasmReqds; 
    DWORD dwReasmOks;
    DWORD dwReasmFails;
    DWORD dwFragOks;
    DWORD dwFragFails;
    DWORD dwFragCreates;
    DWORD dwNumIf;
    DWORD dwNumAddr;
    DWORD dwNumRoutes;
} MIB_IPSTATS, *PMIB_IPSTATS;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwForwarding</i></b> Specifies whether IP forwarding is enabled or disabled on your computer.</li></p>

<p><li><b><i>dwDefaultTTL</i></b> Specifies the initial time-to-live (TTL) value for datagrams originating on your computer.</li></p>

<p><li><b><i>dwInReceives</i></b> Specifies the number of datagrams received.</li></p>

<p><li><b><i>dwInHdrErrors</i></b> Specifies the number of datagrams received with bad headers.</li></p>

<p><li><b><i>dwInAddrErrors</i></b> Specifies the number of datagrams received with bad addresses.</li></p>

<p><li><b><i>dwForwDatagrams</i></b> Specifies the number of datagrams forwarded.</li></p>

<p><li><b><i>dwInUnknownProtos</i></b> Specifies the number of datagrams received with an unknown protocol.</li></p>

<p><li><b><i>dwInDiscards</i></b> Specifies the number of datagrams received that were discarded.</li></p>

<p><li><b><i>dwInDelivers</i></b> Specifies the number of datagrams received that were delivered.</li></p>

<p><li><b><i>dwOutRequests</i></b> Specifies the number of datagrams that IP has requested to transmit.</li></p>

<p><li><b><i>dwRoutingDiscards</i></b> Specifies the number of outgoing datagrams discarded.</li></p>

<p><li><b><i>dwOutDiscards</i></b> Specifies the number of transmitted datagrams discarded.</li></p>

<p><li><b><i>dwOutNoRoutes</i></b> Specifies the number of datagrams that did not have a routing destination.</li></p>

<p><li><b><i>dwReasmTimeout</i></b> Specifies the maximum amount of time for a fragmented datagram to arrive.</li></p>

<p><li><b><i>dwReasmReqds</i></b> Specifies the number of datagrams that require assembly.</li></p>

<p><li><b><i>dwReasmOks</i></b> Specifies the number of datagrams that were successfully reassembled.</li></p>

<p><li><b><i>dwFragFails</i></b> Specifies the number of datagrams that could not be fragmented.</li></p>

<p><li><b><i>dwFragCreates</i></b> Specifies the number of datagrams that were fragmented.</li></p>

<p><li><b><i>dwNumIf</i></b> Specifies the number of IP interfaces available on your computer.</li></p>

<p><li><b><i>dwNumAddr</i></b> Specifies the number of IP addresses identified on your computer.</li></p>

<p><li><b><i>dwNumRoutes</i></b> Specifies the number of routes available in the routing table.</li></p>
</ul>



<p>The second statistics function, <i>GetIcmpStatistics</i>, retrieves Internet Control Message Protocol (ICMP) statistics and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetIcmpStatistics(
   PMIB_ICMP pStats
);
</pre>
</td></tr></table>
</p>

<p>The <i>pStats</i> parameter is a pointer to an <i>MIB_ICMP</i> structure that receives the current ICMP statistics for your computer. The <i>MIB_ICMP</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_ICMP
{
    MIBICMPINFO stats;
} MIB_ICMP,*PMIB_ICMP;
</pre>
</td></tr></table>
</p>

<p>As you can see, <i>MIB_ICMP</i> is a structure containing a <i>MIBICMPINFO</i> structure that is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIBICMPINFO
{ 
    MIBICMPSTATS icmpInStats;
    MIBICMPSTATS icmpOutStats;
} MIBICMPINFO;
</pre>
</td></tr></table>
</p>

<p>The <i>MIBICMPINFO</i> structure receives incoming or outgoing ICMP information through an <i>MIBICMPSTATS</i> structure. The <i>icmpInStats</i> parameter receives incoming data, while <i>icmpOutStats</i> receives outgoing data. The <i>MIBICMPSTATS</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIBICMPSTATS 
{ 
    DWORD dwMsgs;
    DWORD dwErrors;
    DWORD dwDestUnreachs;
    DWORD dwTimeExcds;
    DWORD dwParmProbs;
    DWORD dwSrcQuenchs;
    DWORD dwRedirects;
    DWORD dwEchos;
    DWORD dwEchoReps;
    DWORD dwTimestamps;
    DWORD dwTimestampReps;
    DWORD dwAddrMasks;
    DWORD dwAddrMaskReps;
} MIBICMPSTATS;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwMsgs</i></b> Specifies the number of messages sent or received.</li></p>

<p><li><b><i>dwErrors</i></b> Specifies the number of errors sent or received.</li></p>

<p><li><b><i>dwDestUnreachs</i></b> Specifies the number of &quot;destination unreachable&quot; messages sent or received.</li></p>

<p><li><b><i>dwTimeExcds</i></b> Specifies the number of TTL-exceeded messages sent or received.</li></p>

<p><li><b><i>dwParmProbs</i></b> Specifies the number of messages sent or received that indicate a datagram contains bad IP information.</li></p>

<p><li><b><i>dwSrcQuenchs</i></b> Specifies the number of source quench messages sent or received.</li></p>

<p><li><b><i>dwRedirects</i></b> Specifies the number of redirection messages sent or received.</li></p>

<p><li><b><i>dwEchos</i></b> Specifies the number of ICMP echo requests sent or received.</li></p>

<p><li><b><i>dwEchoReps</i></b> Specifies the number of ICMP echo replies sent or received.</li></p>

<p><li><b><i>dwTimestamps</i></b> Specifies the number of timestamp requests sent or received.</li></p>

<p><li><b><i>dwTimestampReps</i></b> Specifies the number of timestamp replies sent or received.</li></p>

<p><li><b><i>dwAddrMasks</i></b> Specifies the number of address masks sent or received.</li></p>

<p><li><b><i>dwAddrMaskReps</i></b> Specifies the number of address mask replies sent or received.</li></p>
</ul>



<p>The third statistics function, <i>GetTcpStatistics</i>, retrieves TCP statistics on your computer and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetTcpStatistics( 
    PMIB_TCPSTATS pStats
);
</pre>
</td></tr></table>
</p>

<p>The <i>pStats</i> parameter is a pointer to an <i>MIB_TCPSTATS</i> structure that receives the current IP statistics for your computer. The <i>MIB_TCPSTATS</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_TCPSTATS 
{ 
    DWORD dwRtoAlgorithm; 
    DWORD dwRtoMin;
    DWORD dwRtoMax;
    DWORD dwMaxConn;
    DWORD dwActiveOpens;
    DWORD dwPassiveOpens;
    DWORD dwAttemptFails;
    DWORD dwEstabResets;
    DWORD dwCurrEstab;
    DWORD dwInSegs;
    DWORD dwOutSegs;
    DWORD dwRetransSegs;
    DWORD dwInErrs;
    DWORD dwOutRsts;
    DWORD dwNumConns;
} MIB_TCPSTATS, *PMIB_TCPSTATS;
</pre>
</td></tr></table>
</p>

<p>The fields of this structure are defined as follows:</p>

<ul>
<p><li><b><i>dwRtoAlgorithm</i></b> Specifies which retransmission algorithm is being used. The valid values are <i>MIB_TCP_RTO_CONSTANT</i>, <i>MIB_TCP_RTO_RSRE</i>, <i>MIB_TCP_RTO_VANJ</i>, and <i>MIB_TCP_RTO_OTHER</i>, which is for other types.</li></p>

<p><li><b><i>dwRtoMin</i></b> Specifies the minimum retransmission timeout in milliseconds.</li></p>

<p><li><b><i>dwRtoMax</i></b> Specifies the maximum retransmission timeout in milliseconds.</li></p>

<p><li><b><i>dwMaxConn</i></b> Specifies the maximum number of connections allowed.</li></p>

<p><li><b><i>dwActiveOpens</i></b> Specifies how many times the machine is initiating a connection with a server.</li></p>

<p><li><b><i>dwPassiveOpens</i></b> Specifies how many times the machine is listening for a connection from a client.</li></p>

<p><li><b><i>dwAttemptFails</i></b> Specifies how many connection attempts have failed.</li></p>

<p><li><b><i>dwEstabResets</i></b> Specifies the number of established connections that have been reset.</li></p>

<p><li><b><i>dwCurrEstab</i></b> Specifies the number of connections that are currently established.</li></p>

<p><li><b><i>dwInSegs</i></b> Specifies the number of segments received.</li></p>

<p><li><b><i>dwOutSegs</i></b> Specifies the number of segments transmitted (excluding segments that have been retransmitted).</li></p>

<p><li><b><i>dwRetransSegs</i></b> Specifies the number of segments retransmitted.</li></p>

<p><li><b><i>dwInErrs</i></b> Specifies the number of errors received.</li></p>

<p><li><b><i>dwOutRsts</i></b> Specifies the number of segments transmitted with the reset flag set.</li></p>

<p><li><b><i>dwNumConns</i></b> Specifies the total number of connections.</li></p>
</ul>



<p>The last statistics function, <i>GetUdpStatistics</i>, retrieves UDP statistics on your computer and is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
DWORD GetUdpStatistics( 
    PMIB_UDPSTATS pStats
);
</pre>
</td></tr></table>
</p>

<p>The <i>pStats</i> parameter is a pointer to an <i>MIB_UDPSTATS</i> structure that receives the current IP statistics for your computer. The <i>MIB_UDPSTATS</i> structure is defined as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
typedef struct _MIB_UDPSTATS
{ 
    DWORD dwInDatagrams;
    DWORD dwNoPorts;
    DWORD dwInErrors;
    DWORD dwOutDatagrams; 
    DWORD dwNumAddrs;
} MIB_UDPSTATS,*PMIB_UDPSTATS;
</pre>
</td></tr></table>
</p>

<p>This structure's fields are defined as follows:</p>

<ul>
<p><li><b><i>dwInDatagrams</i></b> Specifies the number of datagrams received.</li></p>

<p><li><b><i>dwNoPorts</i></b> Specifies the number of datagrams discarded because the port number was bad.</li></p>

<p><li><b><i>dwInErrors</i></b> Specifies the number of erroneous datagrams received (excluding the datagrams counted in <i>dwNoPorts</i>).</li></p>

<p><li><b><i>dwOutDatagrams</i></b> Specifies the number of datagrams transmitted.</li></p>

<p><li><b><i>dwNumAddrs</i></b> Specifies the total number of UDP entries in the listener table.</li></p>
</ul>



</BODY>
</HTML>



