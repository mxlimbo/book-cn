<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Other Windows Messages</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="80"><H1>Other Windows Messages</H1></A><P>The MFC library directly supports hundreds of Windows 
message-handling functions. In addition, you can define your own messages. You will see 
plenty of message-handling examples in later chapters, including handlers for 
menu items, child window controls, and so forth. In the meantime, five special 
Windows messages deserve special attention: WM_CREATE, WM_CLOSE, 
WM_QUERYENDSESSION, WM_DESTROY, and WM_NCDESTROY.
<A NAME="81"><H2>The WM_CREATE Message</H2></A><P>This is the first message that Windows sends to a view. It is sent when the 
window's <I>Create </I>function is called by the framework, so the window creation is 
not finished and the window is not visible. Therefore, your 
<I>OnCreate</I> handler cannot call Windows functions that depend on the window being completely 
alive. You can call such functions in an overridden 
<I>OnInitialUpdate</I> function, but you must be aware that in an SDI application 
<I>OnInitialUpdate</I> can be called more than once in a view's lifetime.
<A NAME="82"><H2>The WM_CLOSE Message</H2></A><P>Windows sends the WM_CLOSE message when the user closes a window 
from the system menu and when a parent window is closed. If you implement 
the <I>OnClose</I> message map function in your derived view class, you can control 
the closing process. If, for example, you need to prompt the user to save 
changes to a file, you do it in <I>OnClose</I>. Only when you have determined that it is safe 
to close the window do you call the base class 
<I>OnClose</I> function, which continues the close process. The view object and the corresponding window are both still active.<P>
<DIV CLASS=tip>
<BLOCKQUOTE>
<IMG SRC="tip.jpg" width=123 height=18 BORDER=0><P>
When you're using the full application framework, you 
probably won't use the WM_CLOSE message handler. You can 
override the <I>CDocument::SaveModified</I> virtual function instead, as part of 
the application framework's highly structured program exit procedure.
</BLOCKQUOTE></DIV>
<A NAME="83"><H2>The WM_QUERYENDSESSION Message</H2></A><P>Windows sends the WM_QUERYENDSESSION message to all running 
applications when the user exits Windows. The <I>OnQueryEndSession</I>
message map function handles it. If you write a handler for WM_CLOSE, write one for 
WM_QUERYENDSESSION too.
<A NAME="84"><H2>The WM_DESTROY Message</H2></A><P>Windows sends this message after the WM_CLOSE message, and the 
<I>OnDestroy</I> message map function handles it. When your program receives this message, 
it should assume that the view window is no longer visible on the screen but 
that it is still active and its child windows are still active. Use this message 
handler to do cleanup that depends on the existence of the underlying window. Be 
sure to call the base class <I>OnDestroy</I> function. You cannot &quot;abort&quot; the window 
destruction process in your view's 
<I>OnDestroy</I> function. <I>OnClose</I> is the place to do that.
<A NAME="85"><H2>The WM_NCDESTROY Message</H2></A><P>This is the last message that Windows sends when the window is being 
destroyed. All child windows have already been destroyed. You can do final processing 
in <I>OnNcDestroy</I> that doesn't depend on a window being active. Be sure to call 
the base class <I>OnNcDestroy</I> function.<P>
<DIV CLASS=tip>
<BLOCKQUOTE>
<IMG SRC="tip.jpg" width=123 height=18 BORDER=0><P>
Do not try to destroy a dynamically allocated window 
object in <I>OnNcDestroy</I>. That job is reserved for a special 
<I>CWnd </I>virtual function, <I>PostNcDestroy</I>, that the base class 
<I>OnNcDestroy </I>calls. MFC Technical Note #17 in the online documentation gives hints on when 
it's appropriate to destroy a window object.
</BLOCKQUOTE></DIV>
</BODY>
</HTML>



