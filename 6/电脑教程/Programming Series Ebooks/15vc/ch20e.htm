<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX20A Example -- A Single View Class SDI Dynamic Splitter</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<H1>The EX20A Example&#151; A Single View Class SDI Dynamic Splitter</H1>
<P>In this example, the user can dynamically split the view into four panes with four separate view objects, all managed by a single view class. We'll use the document and the view code from EX19A. AppWizard lets you add a dynamic 
splitter window to a new application. Create an SDI project. Click the Advanced 
button in the AppWizard Step 4 dialog. Click on the Window Styles tab, and select Use Split Window as shown here.
<P><IMG SRC="g20og01.gif" width=335 height=387 BORDER="0">
<P>When you check the Use Split Window check box, AppWizard adds code to your <I>CMainFrame</I> class. Of course, you could add the same code to the <I>CMainFrame</I> class of an existing application to add splitter capability.
<A NAME="425"><H2>Resources for Splitting</H2></A><P>When AppWizard generates an application with a splitter frame, it includes a Split option in the project's View menu. The <I>ID_WINDOW_SPLIT</I> command ID is mapped in the 
<I>CView</I> class within the MFC library.
<A NAME="426"><H2><I>CMainFrame</I></H2></A>
<P>The application's main frame window class needs a splitter window data 
member and a prototype for an overridden <I>OnCreateClient</I> function. Here are the additions that AppWizard makes to the MainFrm.h file:
<P><PRE>protected:
    CSplitterWnd m_wndSplitter;
public:
    virtual BOOL OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext);</PRE>
<P>The application framework calls the 
<I>CFrameWnd::OnCreateClient</I> virtual member function when the frame object is created. The base class version creates a single view window as specified by the document template. The AppWizard-generated <I>OnCreateClient</I> override shown here (in MainFrm.cpp) creates a splitter window instead, and the splitter window creates the first view:
<P><PRE>BOOL CMainFrame::OnCreateClient( LPCREATESTRUCT /*lpcs*/,
    CCreateContext* pContext)
{
    return m_wndSplitter.Create( this,
        2, 2,           // TODO: adjust the number of rows, columns
        CSize(10, 10),  // TODO: adjust the minimum pane size
        pContext);
}</PRE>
<P>The <I>CSplitterWnd Create</I> member function creates a dynamic splitter window, and the <I>CSplitterWnd</I> object knows the view class because its name is embedded in the <I>CCreateContext</I> structure that's passed as a parameter to <I>Create</I>.
<P>The second and third <I>Create</I> parameters (2, 2) specify that the window 
can be split into a maximum of two rows and two columns. If you changed the parameters to (2, 1), you would allow only a single horizontal split. The parameters (1, 2) allow only a single vertical split. The <I>CSize</I> parameter specifies the minimum pane size.
<A NAME="427"><H2>Testing the EX20A Application</H2></A>
<P>When the application starts, you can split the window by choosing Split from the View menu or by dragging the splitter boxes at the left and top of the scroll bars. Figure 20-1 shows a typical single view window with a four-way split. Multiple views share the scroll bars.
<P><A HREF="javascript:fullSize('F20OG01x.htm')"> <img src="F20OG01.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 20-1.</B> <I>A single view window with a four-way split.</I>
<!-- /caption -->

</BODY>
</HTML>



