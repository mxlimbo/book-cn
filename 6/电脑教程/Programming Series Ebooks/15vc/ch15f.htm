<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Windows Registry</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="301"><H1>The Windows Registry</H1></A>
<P>If you've used Win16-based applications, you've probably seen INI files. You can still use INI files in Win32-based applications, but Microsoft recommends that you use the Windows Registry instead. The Registry is a set of system files, managed by Windows, in which Windows and individual applications can store and access permanent information. The Registry is organized as a kind of hierarchical database in which string and integer data is accessed by a multipart key.
<P>For example, a text processing application, TEXTPROC, might need to store the most recent font and point size in the Registry. Suppose that the program name forms the root of the key (a simplification) and that the application maintains two hierarchy levels below the name. The structure looks something like this.
<P>
<BLOCKQUOTE>
TEXTPROC<P>
&nbsp;&nbsp;&nbsp;&nbsp;Text formatting<P>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Font = Times Roman<P>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Points = 10<P>
</BLOCKQUOTE>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<B>Unicode</B>
<P>European languages use characters that can be encoded in 8 bits&#151;even characters with diacritics. Most Asian languages require 16 bits for their characters. Many programs use the <U>double-byte</U> <U>character</U> <U>set</U> (DBCS) standard: some characters use 8 bits and others 16 bits, depending on the value of the first 8 bits. DBCS is being replaced by Unicode, in which all characters are 16-bit &quot;wide&quot; characters. No specific Unicode character ranges are set aside for individual languages: if a character 
is used in both the Chinese and the Japanese languages, for example, that character appears only once in the Unicode character set.
<P>When you look at MFC source code and the code that AppWizard generates, you'll see the types <I>TCHAR</I>, <I>LPTSTR</I>, and <I>LPCTSTR</I> 
and you'll see literal strings like<I> _T(&quot;string&quot;)</I>. You are looking at Unicode <U>macros</U>. If you build your project without defining 
<I>_UNICODE</I>, the compiler generates code for ordinary 8-bit ANSI characters 
(<I>CHAR</I>) and pointers to 8-bit character arrays (<I>LPSTR</I>, <I>LPCSTR</I>). If you do define<I> _UNICODE</I>, the compiler generates code for 16-bit Unicode characters (<I>WCHAR</I>), pointers (<I>LPWSTR</I>,<I> LPCWSTR</I>), and literals (<I>L&quot;wide string&quot;)</I>.
<P>The<I> _UNICODE</I> preprocessor symbol also determines which Windows functions your program calls. Many Win32 functions have two versions. When your program calls <I>CreateWindowEx</I>, for example, the compiler generates code to call either <I>CreateWindowExA</I> (with ANSI parameters) or 
<I>CreateWindowExW</I> (with Unicode parameters). In Microsoft Windows NT, which uses Unicode internally, <I>CreateWindowExW</I> passes all parameters straight through, but <I>CreateWindowExA</I> converts ANSI string and character parameters to Unicode. In Microsoft Windows 95, which uses ANSI internally, 
<I>CreateWindowExW</I> is a stub that returns an error and <I>CreateWindowExA</I> passes the parameters straight through.
<P>If you want to create a Unicode application, you should target it for Windows NT and use the macros throughout. You can write Unicode applications for Windows 95, but you'll do extra work to call the &quot;A&quot; versions of the Win32 functions. As shown in <A HREF="ch24a.htm">Chapter 24</A>, <A HREF="ch25a.htm">Chapter 25</A>, <A HREF="ch26a.htm">Chapter 26</A>, <A HREF="ch27a.htm">Chapter 27</A>, <A HREF="ch28a.htm">Chapter 28</A>, <A HREF="ch29a.htm">Chapter 29</A>, and <A HREF="ch30a.htm">Chapter 30</A>, COM calls (except DAO) always use wide characters. Although Win32 functions are available for converting between ANSI and Unicode, if you're using the <I>CString</I> class you can rely on a wide character constructor and the <I>AllocSysString</I> member function to do the conversions.
<P>For simplicity, this book's example programs use ANSI only. The code AppWizard generated uses Unicode macros, but the code I wrote uses 8-bit literal strings and the <I>char</I>, <I>char*</I>, and <I>const char*</I> types.
</BLOCKQUOTE></DIV>
<P>The MFC library provides four <I>CWinApp</I> member functions, holdovers from the days of INI files, for accessing the Registry. Starting with Visual C++ version 5.0, AppWizard generates a call to <I>CWinApp::SetRegistryKey</I> in your application's <I>InitInstance</I> function as shown here.
<P><PRE>SetRegistryKey(_T(&quot;Local AppWizard-Generated Applications&quot;));</PRE>
<P>If you remove this call, your application will not use the Registry but will 
create and use an INI file in the Windows directory. The <I>SetRegistryKey </I>function's string parameter establishes the top of the hierarchy, and the following Registry functions define the bottom two levels: called heading name and entry name.
<UL>
<P><LI>     <I>GetProfileInt</I>

<P><LI>     <I>WriteProfileInt</I>
<P><LI>     <I>GetProfileString</I>
<P><LI>     <I>WriteProfileString</I>
</UL>
<P>These functions treat Registry data as either <I>CString</I> objects or unsigned integers. If you need floating-point values as entries, you must use the string functions and do the conversion yourself. All the functions take a heading name and an entry name as parameters. In the example shown above, the heading name is Text Formatting and the entry names are Font and Points.
<P>To use the Registry access functions, you need a pointer to the application object. The global function <I>AfxGetApp</I> does the job. With the previous 
sample Registry, the Font and Points entries were set with the following code:
<PRE>AfxGetApp()-&gt;WriteProfileString(&quot;Text formatting&quot;, &quot;Font&quot;,
                                &quot;Times Roman&quot;);
AfxGetApp()-&gt;WriteProfileInt(&quot;Text formatting&quot;, &quot;Points&quot;, 10);</PRE>
<P>You'll see a real Registry example in EX15A, and you'll learn to use the Windows Regedit program to examine and edit the Registry.
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The application framework stores a list of most recently used files in the Registry under the heading Recent File List.
</BLOCKQUOTE></DIV>
<P>
</BODY>
</HTML>



