<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Windows Printing</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="408"><H1>Windows Printing</H1></A>
<P>In the old days, programmers had to worry about configuring their applications for dozens of printers. Now Windows makes life easy because it provides all of the printer drivers you'll ever need. It also supplies a consistent user interface for printing.
<A NAME="409"><H2>Standard Printer Dialogs</H2></A>
<P>When the user chooses Print from the File menu of a Windows-based application, the standard Print dialog appears, as shown in Figure 19-1.
<P><A HREF="javascript:fullSize('f19og01x.htm')"> <img src="f19og01.jpg" width=404 height=302 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 19-1.</B> <I>The standard Print dialog.</I>
<!-- /caption -->
<P>If the user chooses Print Setup from the File menu, the standard Print Setup dialog appears, as shown in Figure 19-2.

<P><A HREF="javascript:fullSize('F19OG02x.htm')"> <img src="F19OG02.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 19-2.</B> <I>The standard Print Setup dialog.</I>
<!-- /caption -->
<P>During the printing process, the application displays a standard printer status dialog, as shown in Figure 19-3.
<P><IMG SRC="F19OG03.GIF" width=206 height=179 BORDER=0><P>
<!-- caption -->
<B>Figure 19-3.</B> <I>The standard printer status dialog.</I>
<!-- /caption -->
<A NAME="410"><H2>Interactive Print Page Selection</H2></A>
<P>If you've worked in the data processing field, you might be used to batch-mode printing. A program reads a record and then formats and prints selected information as a line in a report. Let's say, for example, that every time 50 lines have been printed the program ejects the paper and prints a new page heading. The programmer assumes that the whole report will be printed at one time and makes no allowance for interactively printing selected pages.
<P>As Figure 19-1 shows, page numbers are important in Windows-based printing. A program must respond to a user's page selection by calculating which information to print and then printing the selected pages. If you're aware of 
this page selection requirement, you can design your application's data structures accordingly.
<P>Remember the student list from <A HREF="ch17a.htm">Chapter 17</A>? What if the list included 1000 students' names and the user wanted to print page 5 of a student report? If you assumed that each student record required one print line and that a page held 50 lines, page 5 would include records 201 through 250. With an MFC list collection class, you're stuck iterating through the first 200 list elements 
before you can start printing. Maybe the list isn't the ideal data structure. How about an array collection instead? With the <I>CObArray</I> class (or with one of the template array classes), you can directly access the 201st student record.
<P>Not every application has elements that map to a fixed number of print lines. Suppose the student record contained a multi-line text biography field. Because you wouldn't know how many biography lines each record included, you'd have to search through the whole file to determine the page breaks. If your program could remember those page breaks as it calculated them, its efficiency would increase.
<A NAME="411"><H2>Display Pages vs. Printed Pages</H2></A><P>In many cases, you'll want a printed page to correspond to a display page. As you learned in <A HREF="ch05a.htm">Chapter 5</A>, you cannot guarantee that objects will be printed exactly as they are displayed on screen. With TrueType fonts, however, your printed page will be pretty close. If you're working with full-size paper and you want the corresponding display to be readable, you'll certainly want a display window that is larger than the screen. Thus, a scrolling view such as the one that the <I>CScrollView</I> class provides is ideal for your printable views.
<P>Sometimes, however, you might not care about display pages. Perhaps your view holds its data in a list box, or maybe you don't need to display the data 
at all. In these cases, your program can contain stand-alone print logic that 
simply extracts data from the document and sends it to the printer. Of course, 
the program must properly respond to a user's page-range request. If you query 
the printer to determine the paper size and orientation (portrait or landscape), you can adjust the pagination accordingly.
</BODY>
</HTML>



