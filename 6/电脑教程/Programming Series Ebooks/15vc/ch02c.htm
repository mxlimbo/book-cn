<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>What's an Application Framework?</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="30"><H1>What's an Application Framework?</H1></A><P>One definition of  <U>application</U> <U>framework</U> is &quot;an integrated collection of object-oriented software components that offers all that's needed for a generic application.&quot; That isn't a very useful definition, is it? If you really want to know what an application framework is, you'll have to read the rest of this book. The application framework example that you'll familiarize yourself with later in this chapter is a good starting point.
<A NAME="31"><H2>An Application Framework vs. a Class Library</H2></A><P>One reason that C++ is a popular language is that it can be &quot;extended&quot; with class libraries. Some class libraries are delivered with C++ compilers, others are sold by third-party software firms, and still others are developed in-house. A class library is a set of related C++ classes that can be used in an application. A mathematics class library, for example, might perform common mathematics operations, and a communications class library might support the transfer of data over a serial link. Sometimes you construct objects of the supplied classes; sometimes you derive your own classes&#151;it all depends on the design of the particular class library.
<P>An application framework is a superset of a class library. An ordinary 
library is an isolated set of classes designed to be incorporated into any program, but an application framework defines the structure of the program itself. Microsoft didn't invent the application framework concept. It appeared first in the academic world, and the first commercial version was MacApp for the Apple Macintosh. Since MFC 2.0 was introduced, other companies, including 
Borland, have released similar products.
<A NAME="32"><H2>An Application Framework Example</H2></A><P>Enough generalizations. It's time to look at some code&#151;not pseudocode but real code that actually compiles and runs with the MFC library. Guess what? It's the good old &quot;Hello, world!&quot; application, with a few additions. (If you've used version 1.0 of the MFC library, this code will be familiar except for the frame window base class.) It's about the minimum amount of code for a working MFC library application for Windows. (Contrast it with an equivalent pure Win32 application such as you would see in a Petzold book!) You don't have to understand every line now. Don't bother to type it in and test it, because 
EX23B on the CD-ROM is quite similar. Wait for the <A HREF="ch03a.htm">next chapter</A>, where you'll 
start using the &quot;real&quot; application framework.<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><p>
By convention, MFC library class names begin with the letter <I>C</I>.
</BLOCKQUOTE>
</DIV>
<P>Following is the source code for the header and implementation files for our MYAPP application. The classes <I>CMyApp</I> and <I>CMyFrame</I> are each derived from MFC library base classes. First, here is the MyApp.h header file for the MYAPP application:<P>

<PRE>// application class
class CMyApp : public CWinApp
{
public:
    virtual BOOL InitInstance();
};

// frame window class
class CMyFrame : public CFrameWnd
{
public:
    CMyFrame();
protected:
    // &quot;afx_msg&quot; indicates that the next two functions are part
    //  of the MFC library message dispatch system
    afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
    afx_msg void OnPaint();
    DECLARE_MESSAGE_MAP()
};
</PRE>

<P>And here is the MyApp.cpp implementation file for the MYAPP application:<P>

<PRE>#include &lt;afxwin.h&gt; // MFC library header file declares base classes
#include &quot;myapp.h&quot;
 
CMyApp theApp; // the one and only CMyApp object
 
BOOL CMyApp::InitInstance()
{
    m_pMainWnd = new CMyFrame();
    m_pMainWnd-&gt;ShowWindow(m_nCmdShow);
 
    m_pMainWnd-&gt;UpdateWindow();
    return TRUE;
}
 
BEGIN_MESSAGE_MAP(CMyFrame, CFrameWnd)
    ON_WM_LBUTTONDOWN()
    ON_WM_PAINT()
END_MESSAGE_MAP()

CMyFrame::CMyFrame()
{
    Create(NULL, &quot;MYAPP Application&quot;);
}
 
void CMyFrame::OnLButtonDown(UINT nFlags, CPoint point)
{
    TRACE(&quot;Entering CMyFrame::OnLButtonDown - %lx, %d, %d\n&quot;,
          (long) nFlags, point.x, point.y);
}
 
void CMyFrame::OnPaint()
{
    CPaintDC dc(this);
    dc.TextOut(0, 0, &quot;Hello, world!&quot;);
}
</PRE>
<P>Here are some of the program elements:
<P><B>The <I>WinMain</I> function&#151;</B>Remember that Windows requires your 
application to have a <I>WinMain</I> function. You don't see <I>WinMain</I> here because it's hidden inside the application framework.
<P><B>The <I>CMyApp</I> class&#151;</B>An object of class <I>CMyApp</I> represents an application. The program defines a single global <I>CMyApp</I> object, <I>theApp</I>. The <I>CWinApp</I> base class determines most of 
<I>theApp</I>'s behavior.
<P><B>Application startup&#151;</B>When the user starts the application, Windows calls the application framework's built-in <I>WinMain</I> function, and <I>WinMain</I> looks for your globally constructed application object of a class derived from <I>CWinApp</I>. Don't forget that in a C++ program global objects are constructed <U>before</U> the main program is executed.
<P><B>The <I>CMyApp::InitInstance</I> member function&#151;</B>When the <I>WinMain</I> function finds the application object, it calls the virtual 
<I>InitInstance</I> member function, which makes the calls needed to construct and display the application's main frame window. You must override <I>InitInstance</I> in your derived application class because the <I>CWinApp</I> base class doesn't know what kind of main frame window you want.
<P><B>The <I>CWinApp::Run</I> member function&#151;</B>The <I>Run</I> function is hidden in the base class, but it dispatches the application's messages to its windows, thus keeping the application running. <I>WinMain</I> calls 
<I>Run</I> after it calls <I>InitInstance</I>.
<P><B>The <I>CMyFrame</I> class&#151;</B>An object of class <I>CMyFrame</I> represents the application's main frame window. When the constructor calls the 
<I>Create</I> member function of the base class <I>CFrameWnd</I>, Windows creates the actual window structure and the application framework links it to the C++ object. The <I>ShowWindow</I> and <I>UpdateWindow</I> functions, also member functions of the base class, must be called in order to display the window.
<P><B>The <I>CMyFrame::OnLButtonDown</I> function&#151;</B>This function is a sneak preview of the MFC library's message-handling capability. We've elected to &quot;map&quot; the left mouse button down event to a <I>CMyFrame</I> member function. You'll learn the details of the MFC library's message mapping in <A HREF="ch04a.htm">Chapter 4</A>. For the time being, accept that this function gets called when the user presses the left mouse button. The function invokes the MFC library <I>TRACE</I> macro to display a message in the debugging window.
<P><B>The <I>CMyFrame::OnPaint</I> function&#151;</B>The application framework calls this important mapped member function of class <I>CMyFrame</I> every time it's necessary to repaint the window: at the start of the program, when the user resizes the window, and when all or part of the window is newly exposed. The <I>CPaintDC</I> statement relates to the Graphics Device Interface (GDI) and is explained in later chapters. The <I>TextOut</I> function displays &quot;Hello, world!&quot;
<P><B>Application shutdown&#151;</B>The user shuts down the application by closing the main frame window. This action initiates a sequence of events, which ends with the destruction of the <I>CMyFrame</I> object, the exit from 
<I>Run</I>, the exit from <I>WinMain</I>, and the destruction of the <I>CMyApp</I> object.
<P>Look at the code example again. This time try to get the big picture. Most of the application's functionality is in the MFC library base classes <I>CWinApp</I> and <I>CFrameWnd</I>. In writing MYAPP, we've followed a few simple structure rules and we've written key functions in our derived classes. 
C++ lets us &quot;borrow&quot; a lot of code without copying it. Think of it as a partnership between us and the application framework. The application framework provided the structure, and we provided the code that made the application unique.
<P>Now you're beginning to see why the application framework is more than just a class library. Not only does the application framework define the application structure but it also encompasses more than C++ base classes. You've already seen the hidden<I> WinMain</I> function at work. Other elements support message processing, diagnostics, DLLs, and so forth.

</BODY>
</HTML>



