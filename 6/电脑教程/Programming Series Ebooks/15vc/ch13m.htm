<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Extended Command Processing</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="276"><H1>Extended Command Processing</H1></A>
<P>In addition to the <I>ON_COMMAND</I> message map macro, the MFC library provides an extended variation, <I>ON_COMMAND_EX</I>. The extended command message map macro provides two features not supplied by the regular command message&#151;a command ID function parameter and the ability to reject a command at runtime, sending it to the next object in the command route. If the extended command handler returns <I>TRUE</I>, the command goes no further; if it returns <I>FALSE</I>, the application framework looks for another command handler.
<P>The command ID parameter is useful when you want one function to handle several related command messages. You might invent some of your own uses for the rejection feature.
<P>ClassWizard can't help you with extended command handlers, so you'll have to do the coding yourself, outside the <I>AFX_MSG_MAP</I> brackets. Assume that 
<I>IDM_ZOOM_1</I> and <I>IDM_ZOOM_2</I> are related command IDs defined in resource.h. Here's the class code you'll need to process both messages with one function, <I>OnZoom</I>:
<P><PRE>BEGIN_MESSAGE_MAP(CMyView, CView)
    ON_COMMAND_EX(IDM_ZOOM_1, OnZoom)
    ON_COMMAND_EX(IDM_ZOOM_2, OnZoom)
END_MESSAGE_MAP()

BOOL CMyView::OnZoom(UINT nID)
{
    if (nID == IDM_ZOOM_1) {
        // code specific to first zoom command
    }
    else {
        // code specific to second zoom command
    }
    // code common to both commands
    return TRUE; // Command goes no further
}
</PRE><P>Here's the function prototype:
<P><PRE>afx_msg BOOL OnZoom(UINT nID);</PRE>
<P>Other MFC message map macros are helpful for processing ranges of commands, as you might see in dynamic menu applications. These macros include<P>
<BLOCKQUOTE>
<I>ON_COMMAND_RANGE</I><p>
<I>ON_COMMAND_EX_RANGE</I><p>
<I>ON_UPDATE_COMMAND_UI_RANGE</I><p>
</BLOCKQUOTE>
<P>If the values of <I>IDM_ZOOM_1</I> and <I>IDM_ZOOM_2</I> were consecutive, you could rewrite the <I>CMyView</I> message map as follows:
<P><PRE>BEGIN_MESSAGE_MAP(CMyView, CView)
    ON_COMMAND_EX_RANGE(IDM_ZOOM_1, IDM_ZOOM_2, OnZoom)
END_MESSAGE_MAP()</PRE>
<P>Now <I>OnZoom</I> is called for both menu choices, and the handler can determine the choice from the integer parameter.
</BODY>
</HTML>



