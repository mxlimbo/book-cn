<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX14C Rebar Example</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="295"><H1>The EX14C Rebar Example</H1></A>
<P>Let's get familiar with the rebar by jumping into an example. This example creates an SDI application that has a rebar with two bands: a familiar toolbar band and a dialog bar band. Figure 14-6 shows the example in action.
<P><A HREF="javascript:fullSize('F14OG06x.htm')"> <img src="F14OG06.JPG" width=404 height=265 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-6.</B> <I>EX14C rebar example.</I>
<!-- /caption -->

<P>Here are the steps required to create the EX14C example:
<OL>
<B><LI>Run AppWizard to generate \vcpp32\ex14c\ex14c.</B> Select Single Document. In Step 4, be sure you select Internet Explorer ReBars under the How Do You Want Your Toolbars To Look option. Figure 14-7 below shows the correct settings. Accept all other default settings.
<P><B><LI>Compile and run the application.</B> When you run the application, you will see that AppWizard has automatically created a rebar with two bands. One band contains a conventional toolbar and the other contains the text &quot;TODO: layout dialog bar&quot; in the band. Figure 14-8 below shows the initial rebar control.
<P>At this point, you can open the MainFrm.h header file and see the code below, which declares the <I>CReBar</I> data member <I>m_ndReBar</I>.
<P><PRE>protected:  // control bar embedded members
    CStatusBar  m_wndStatusBar;
    CToolBar    m_wndToolBar;
    CReBar      m_wndReBar;
    CDialogBar  m_wndDlgBar;
</PRE>
</OL>
<P><A HREF="javascript:fullSize('F14OG07x.htm')"> <img src="F14OG07.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-7.</B> <I>AppWizard Step 4 settings for the rebar control.</I>
<!-- /caption -->
<P><A HREF="javascript:fullSize('F14OG08x.htm')"> <img src="F14OG08.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-8.</B> <I>Initial windows for EX14C example with the default rebar controls.</I>
<!-- /caption -->
<OL START="3">
<P>In the MainFrm.cpp file, you can see the code that adds the toolbar and the dialog bar to the <I>CReBar</I> object:
<P><PRE>    if (!m_wndReBar.Create(this) ||
        !m_wndReBar.AddBar(&amp;m_wndToolBar) ||
        !m_wndReBar.AddBar(&amp;m_wndDlgBar))
    {
        TRACE0(&quot;Failed to create rebar\n&quot;);
        return -1;      // fail to create
    }
</PRE>
<B><LI>Lay out the Dialog Bar.</B> Open the Visual C++ resource editor. Under the Dialog heading you'll find a dialog resource for the dialog bar with the ID <I>IDR_MAINFRAME</I>. Open <I>IDR_MAINFRAME</I> and you'll see the dialog bar with the text &quot;TODO: layout dialog bar&quot;. Let's follow AppWizard's friendly suggestion and put some real controls into the dialog bar. First delete the static control with the &quot;TODO&quot; text in it. Next place a combo box in the dialog bar and enter some default data items: <I>one</I>, <I>two</I>, <I>buckle</I>, <I>my</I>, <I>shoe!</I> Now place a button on the dialog bar and change the button's text to <I>Increment</I>. Next place a progress bar with the default properties on the dialog bar. Finally place another button with the text <I>Decrement</I> on the dialog bar. When you are done laying out the dialog bar, it should look similar to Figure 14-9.
</OL>
<P><A HREF="javascript:fullSize('F14OG09x.htm')"> <img src="F14OG09.JPG" width=404 height=212 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-9.</B> <I>Edited </I>IDR_MAINFRAME<I> dialog bar.</I>
<!-- /caption -->
<P>
<OL START="4">
<B><LI>Associate the dialog bar with the <I>CMainFrame</I> class.</B> Before we can program the handlers for the Increment and Decrement buttons, we need to attach the dialog bar to a class using ClassWizard. While in the resource editor, bring up ClassWizard by double-clicking on the Increment button. You will now see this dialog.
</OL>
<P><IMG SRC="G14OG06.GIF" width=354 height=192 BORDER=0><P>
<OL>
<P>Choose Select An Existing Class. We choose this option because we want our dialog resource to be a band in the toolbar, not a separate dialog class. Click OK and you will see these choices.
</OL>
<P><IMG SRC="G14OG07.GIF" width=282 height=311 BORDER=0><P>
<OL>
<P>Choose <I>CMainFrame</I> from the list and click Select.
<P>ClassWizard will prompt you with one last dialog.
</OL>
<P><A HREF="javascript:fullSize('G14OG08x.htm')"> <img src="G14OG08.JPG" width=404 height=76 border=0 ALT = "Click to view at full size."> </A><P>
<OL START="5">
<P>Click Yes and then exit ClassWizard. You have successfully associated the IDR_MAINFRAME dialog bar with the <I>CMainFrame</I> class.
<P><B><LI>Program the dialog bar.</B> To program the dialog bar, bring up the 
IDR_MAINFRAME dialog resource in the resource editor again and double-click on the Increment button. ClassWizard will automatically create an <I>ONBUTTON1</I> handler for you&#151;accept the default name for this function. Enter the following boldface code in the <I>OnButton1</I> function:
<P><PRE>void CMainFrame::OnButton1() 
{
<B>    CProgressCtrl * pProgress =   
        (CProgressCtrl*)m_wndDlgBar.GetDlgItem(IDC_PROGRESS1);
    pProgress-&gt;StepIt();</B>
}</PRE>
<P>The <I>OnButton1</I> handler first gets a pointer to the progress control and then calls <I>StepIt</I> to increment the progress control.
<P>Now we need to add similar code to the decrement handler. Double-click on the Decrement button in the resource editor and ClassWizard will automatically create an <I>OnButton2</I> handler. Add the following boldface code to the 
<I>OnButton2</I> member function:
<P><PRE>void CMainFrame::OnButton2() 
{
<B>    CProgressCtrl * pProgress =
             (CProgressCtrl*)m_wndDlgBar.GetDlgItem(IDC_PROGRESS1);

    int nCurrentPos = pProgress-&gt;GetPos();

    pProgress-&gt;SetPos(nCurrentPos-10);</B>

}
</PRE>
<P><B><LI>Compile and test.</B> Now you can compile and run EX14C to see your custom rebar in action. The Increment button increases the progress bar and the Decrement button decreases it.<P>
</OL>
<P>In this chapter, we learned how to use MFC's toolbar, status bar, and the new rebar control. In the next chapter, we'll look at how to extend MFC to implement a frame window that remembers its position.

</BODY>
</HTML>



