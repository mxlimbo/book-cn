<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Status Bar</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="287"><H1>The Status Bar</H1></A>
<P>The status bar window neither accepts user input nor generates command messages. Its job is simply to display text in panes under program control. The status bar supports two types of text panes&#151;message line panes and status indicator panes. To use the status bar for application-specific data, you must first disable the standard status bar that displays the menu prompt and key-board status.
<A NAME="288"><H2>The Status Bar Definition</H2></A>
<P>The static <I>indicators</I> array that AppWizard generates in the MainFrm.cpp file defines the panes for the application's status bar. The constant <I>ID_SEPARATOR</I> identifies a message line pane; the other constants are string resource IDs that identify indicator panes. Figure 14-3 shows the <I>indicators</I> array and its relationship to the standard framework status bar.
<P><A HREF="javascript:fullSize('F14OG03x.htm')"> <img src="F14OG03.JPG" width=404 height=142 border=0 ALT = "Click to view at full size."> </A><P>
<!-- caption -->
<B>Figure 14-3.</B> <I>The status bar and the </I>indicators <I>array.</I>
<!-- /caption -->
<P>The <I>CStatusBar::SetIndicators</I> member function, called in the application's derived frame class, configures the status bar according to the contents of the <I>indicators</I> array.
<A NAME="289"><H2>The Message Line</H2></A>
<P>A message line pane displays a string that the program supplies dynamically. To set the value of the message line, you must first get access to the status bar object and then you must call the <I>CStatusBar::SetPaneText</I> member function with a zero-based index parameter. Pane 0 is the leftmost pane, 1 is the next pane to the right, and so forth.
<P>The following code fragment is part of a view class member function. Note that you must navigate up to the application object and then back down to the main frame window.
<P><PRE>CMainFrame* pFrame = (CMainFrame*) AfxGetApp()-&gt;m_pMainWnd;
CStatusBar* pStatus = &amp;pFrame-&gt;m_wndStatusBar;
pStatus-&gt;SetPaneText(0, &quot;message line for first pane&quot;);
</PRE>
<P>Normally, the length of a message line pane is exactly one-fourth the width of the display. If, however, the message line is the first (index 0) pane, it is a stretchy pane without a beveled border. Its minimum length is one-fourth 
the display width, and it expands if room is available in the status bar.
<A NAME="290"><H2>The Status Indicator</H2></A>
<P>A status indicator pane is linked to a single resource-supplied string that is displayed or hidden by logic in an associated update command UI message handler function. An indicator is identified by a string resource ID, and that same ID is used to route update command UI messages. The Caps Lock indicator is handled in the frame class by a message map entry and a handler function equivalent to those shown below. The <I>Enable</I> function turns on the indicator if the Caps Lock mode is set.
<P><PRE>ON_UPDATE_COMMAND_UI(ID_INDICATOR_CAPS, OnUpdateKeyCapsLock)

void CMainFrame::OnUpdateKeyCapsLock(CCmdUI* pCmdUI)
{
    pCmdUI-&gt;Enable(::GetKeyState(VK_CAPITAL) &amp; 1);
}</PRE>
<P>The status bar update command UI functions are called during idle processing so that the status bar is updated whenever your application receives messages.
<P>The length of a status indicator pane is the exact length of the corresponding resource string.
<A NAME="291"><H2>Taking Control of the Status Bar</H2></A>
<P>In the standard application framework implementation, the status bar has the child window ID <I>AFX_IDW_STATUS_BAR</I>. The application framework looks for this ID when it wants to display a menu prompt. The update command UI handlers for the keyboard state indicators, embedded in the frame window base class, are linked to the following string IDs: <I>ID_INDICATOR_CAPS</I>, <I>ID_INDICATOR_NUM</I>, and <I>ID_INDICATOR_SCRL</I>. To take control of the 
status bar, you must use a different child window ID and you must use different indicator ID constants.<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER=0><P>
The only reason to change the status bar's child window ID is to prevent the framework from writing menu prompts in pane 0. If you like the menu prompts, you can disregard the following instructions.
</BLOCKQUOTE></DIV>
<P>The status bar window ID is assigned in the <I>CStatusBar::Create</I> function called by the derived frame class <I>OnCreate</I> member function. That function is contained in the MainFrm.cpp file that AppWizard generates. The window ID is the third <I>Create</I> parameter, and it defaults to <I>AFX_IDW_STATUS_BAR</I>.
<P>To assign your own ID, you must replace this call
<P><PRE>m_wndStatusBar.Create(this);</PRE>
<P>with this call
<P><PRE>m_wndStatusBar.Create(this, WS_CHILD | WS_VISIBLE | CBRS_BOTTOM, 
                      ID_MY_STATUS_BAR);
</PRE>
<P>You must also, of course, define the <I>ID_MY_STATUS_BAR</I> constant in the resource.h file (using Visual C++'s resource symbol editor).
<P>We forgot one thing. The standard application framework's View menu allows the user to turn the status bar on and off. That logic is pegged to the <I>AFX_IDW_STATUS_BAR</I> window ID, so you'll have to change the menu logic, too. In your derived frame class, you must write message map entries and handlers for the <I>ID_VIEW_STATUS_BAR</I> command and update command UI messages. <I>ID_VIEW_STATUS_BAR</I> is the ID of the Status Bar menu item. The derived class handlers override the standard handlers in the <I>CFrameWnd</I> base class. See the EX14B example for code details.
</BODY>
</HTML>



