<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX20D Example -- A Multiple View Class MDI Application</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="436"><H1>The EX20D Example&#151;A Multiple View Class MDI Application</H1></A>
<P>The final example, EX20D, uses the previous document and view classes to 
create a multiple view class MDI application without a splitter window. The logic is different from the logic in the other multiple view class applications. This time the action takes place in the application class in addition to the main frame class. As you study EX20D, you'll gain more insight into the use of <I>CDocTemplate</I> objects.
<P>This example was generated with the AppWizard Context-Sensitive Help option. In <A HREF="ch21a.htm">Chapter 21</A>, you'll activate the context-sensitive help capability.
<P>If you're starting from scratch, use AppWizard to generate an ordinary MDI application with one of the view classes. Then add the second view class to the project and modify the application class files and main frame class files as described in the following sections.
<A NAME="437"><H2>Resource Requirements</H2></A><P>The two items below have been added to the Window menu in the <I>IDR_EX20DTYPE</I> menu resource.
<P><TABLE WIDTH="95%" CELLPADDING="5">
<TR><TD VALIGN="TOP"><B>Caption</B></TD><TD VALIGN="TOP"><B>Command ID</B></TD><TD VALIGN="TOP"><B><I>CMainFrame</I> Function</B></TD></TR>
<TR><TD VALIGN="TOP">New &amp;String Window (replaces New Window item)</TD><TD VALIGN="TOP"><I>ID_WINDOW_NEW_STRING</I></TD><TD VALIGN="TOP"><I>CMDIFrameWnd::OnWindowNew</I></TD></TR>
<TR><TD VALIGN="TOP">New &amp;Hex Window</TD><TD VALIGN="TOP"><I>ID_WINDOW_NEW_HEX</I></TD><TD VALIGN="TOP">
<I>OnWindowNewHex</I></TD></TR>

</TABLE>

<P>ClassWizard was used to add the command-handling function <I>OnWindowNewHex</I> to the <I>CMainFrame</I> class.
<A NAME="438"><H2><I>CEx20dApp</I></H2></A><P>In the application class header file, ex20d.h, the following data member and function prototype have been added:
<P><PRE><B>public:
    CMultiDocTemplate* m_pTemplateHex;</B></PRE>
<P>The implementation file, ex20d.cpp, contains the <I>#include</I> statements shown here:
<P><PRE>#include &quot;PoemDoc.h&quot;
#include &quot;StringView.h&quot;
<B>#include &quot;HexView.h&quot;</B></PRE>
<P>The <I>CEx20dApp InitInstance</I> member function has the code shown below inserted immediately after the <I>AddDocTemplate</I> function call.
<P><PRE><B>m_pTemplateHex = new CMultiDocTemplate(
    IDR_EX20DTYPE,
    RUNTIME_CLASS(CPoemDoc),
    RUNTIME_CLASS(CChildFrame),
    RUNTIME_CLASS(CHexView));</B></PRE>
<P>The <I>AddDocTemplate</I> call generated by AppWizard established the 
primary document/frame/view combination for the application that is effective 
when the program starts. The template object above is a secondary template that 
can be activated in response to the New Hex Window menu item.
<P>Now all you need is an <I>ExitInstance</I> member function that cleans up 
the secondary template:
<P><PRE>int CEx20dApp::ExitInstance()
{
<B>    delete m_pTemplateHex;</B>
    return CWinApp::ExitInstance();<B> // saves profile settings</B>
}</PRE>
<A NAME="439"><H2><I>CMainFrame</I></H2></A><P>The main frame class implementation file, MainFrm.cpp, has the <I>CHexView</I> class header (and the prerequisite document header) included:
<P><PRE><B>#include &quot;PoemDoc.h&quot;
#include &quot;HexView.h&quot;</B></PRE>
<P>The base frame window class, <I>CMDIFrameWnd</I>, has an <I>OnWindowNew</I> function that is normally connected to the standard New Window menu item on the Window menu. The New String Window menu item is mapped to this function in EX20D. The New Hex Window menu item is mapped to the command handler function below to create new hex child windows. The function is a clone of <I>OnWindowNew</I>, adapted for the hex view-specific template 
defined in <I>InitInstance</I>.
<P><PRE>void CMainFrame::OnWindowNewHex() 
{
<B>    CMDIChildWnd* pActiveChild = MDIGetActive();
    CDocument* pDocument;
    if (pActiveChild == NULL ||
            (pDocument = pActiveChild-&gt;GetActiveDocument()) == NULL) {
        TRACE(&quot;Warning:  No active document for WindowNew command\n&quot;);
        AfxMessageBox(AFX_IDP_COMMAND_FAILURE);
        return; // Command failed
    }

    // Otherwise, we have a new frame!
    CDocTemplate* pTemplate =
        ((CEx20dApp*) AfxGetApp())-&gt;m_pTemplateHex;
    ASSERT_VALID(pTemplate);
    CFrameWnd* pFrame =
        pTemplate-&gt;CreateNewFrame(pDocument, pActiveChild);
    if (pFrame == NULL) {
        TRACE(&quot;Warning:  failed to create new frame\n&quot;);
        AfxMessageBox(AFX_IDP_COMMAND_FAILURE);
        return; // Command failed
    }

    pTemplate-&gt;InitialUpdateFrame(pFrame, pDocument);</B>
}</PRE>
<P>
<DIV CLASS=note>
<BLOCKQUOTE>
<IMG SRC="note.jpg" width=123 height=18 BORDER="0"><P>
The function cloning above is a useful MFC programming technique. You must first find a base class function that does almost what you want, and then copy it from the \VC98\mfc\src subdirectory into your derived class, changing it as required. The only danger of cloning is that subsequent versions of the MFC library might implement the original function differently.
</BLOCKQUOTE></DIV>
<P>
<A NAME="440"><H2>Testing the EX20D Application</H2></A><P>When you start the EX20D application, a text view child window appears. Choose New Hex Window from the Window menu. The application should look like this.
<P><A HREF="javascript:fullSize('G20OG03x.htm')"> <img src="G20OG03.JPG" width=404 height=300 border=0 ALT = "Click to view at full size."> </A><P>
</BODY>
</HTML>



