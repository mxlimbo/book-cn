<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The Problem That Automation Solves</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="530"><H1><B>The Problem That Automation Solves</B></H1></A>
<P>You've already learned that a COM interface is the ideal way for Windows programs to communicate with one another, but you've also learned that designing your own COM interfaces is mostly impractical. Automation's general-purpose interface, <I>IDispatch</I>, serves the needs of both C++ and VBA programmers. As you might guess from your glimpse of Excel VBA, this interface involves 
objects, methods, and properties.

<P>You can write COM interfaces that include functions with any parameter types and return values you specify. <I>IMotion</I> and <I>IVisual</I>, created in <A HREF="ch24a.htm">Chapter 24</A>, are some examples. If you're going to let VBA programmers in, however, you can't be fast and loose anymore. You can solve the communication problem with one interface that has a member function smart enough to accommodate methods and properties as defined by VBA. Needless to say, <I>IDispatch</I> has such a function: <I>Invoke</I>. You use <I>IDispatch::Invoke</I> for COM objects that can be constructed and used in either C++ or VBA programs.

<P>Now you're beginning to see what Automation does. It funnels all intermodule communication through the <I>IDispatch::Invoke</I> function. How does a client first connect to its component? Because 
<I>IDispatch</I> is merely another COM interface, all the registration logic supported by COM comes into play. Automation components can be DLLs or EXEs, and they can be accessed over a network using distributed COM (DCOM).

</BODY>
</HTML>



