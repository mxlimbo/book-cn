<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>Properties, Methods, and Collections</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="529"><H1><B>Properties, Methods, and Collections</B></H1></A>
<P>The distinction between a property and a method is somewhat artificial. Basically, a property is a value that can be both set and retrieved. You can, for example, set and get the Selection property for an Excel application. Another example is Excel's Width property, which applies to many object types. 
Some Excel properties are read-only; most are read/write.

<P>Properties don't officially have parameters, but some properties are <U>indexed</U>. The property index acts a lot like a parameter. It doesn't have to be an integer, and it can have more than one element (row and column, for example). You'll find many indexed properties in Excel's object model, and Excel VBA can handle indexed properties in Automation components.

<P>Methods are more flexible than properties. They can have zero or many parameters, and they can either set or retrieve object data. Most frequently they perform some action, such as showing a window. Excel's <I>Select</I> method is an example of an action method.

<P>The Excel object model supports collection objects. If you use the Worksheets property of the <I>Application</I> object, you get back a <I>Sheets</I> collection object, which represents all the worksheets in the active workbook. You can use the Item property (with an integer index) to get a specific <I>Worksheet</I> object from a Sheets collection, or you can use an integer index directly on the collection.

</BODY>
</HTML>



