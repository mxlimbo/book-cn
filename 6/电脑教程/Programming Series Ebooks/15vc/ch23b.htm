<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="basicIE4.css" TYPE="text/css">
<TITLE>The EX23A Example -- A Dialog-Based Application</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY>
<A NAME="496"><H1><B>The EX23A Example&#151;A Dialog-Based Application</B></H1></A>
<P>For many applications, a dialog provides a sufficient user interface. The 
dialog window immediately appears when the user starts the application. The user can minimize the dialog window, and as long as the dialog is not system modal, the user can freely switch to other applications.

<P>In this example, the dialog functions as a simple calculator, as shown 
in Figure 23-1. ClassWizard takes charge of defining 
the class data members and generating the DDX (Dialog Data Exchange) 
function calls&#151;everything but the coding of the compute function. The 
application's resource script, ex23a.rc, defines an icon as well as the dialog.

<P><IMG SRC="f23og01.gif" width=389 height=166 BORDER="0"><P>

<!-- caption -->
<B>Figure 23-1.</B> <I>The EX23A Calculator dialog.</I>
<!-- /caption -->
<P>AppWizard gives you the option of generating a dialog-based 
application. Here are the steps for building the EX23A example:

<ol>
<P><B><LI>Run AppWizard to produce 
\vcpp32\ex23a\ex23a.</B> Select the Dialog Based option in the AppWizard Step 1 dialog, as shown here.


<P><A HREF="javascript:fullSize('g23og01x.htm')"> <img src="g23og01.jpg" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>


<P>In the next dialog, enter <I>EX23A Calculator</I> as the dialog title.

<P><B><LI>Edit the <I>IDD_EX23A_DIALOG</I> resource.</B> Refer to Figure 23-1 as a guide. Use the dialog editor to assign IDs to the controls shown in 
the table below.

<P>Open the Properties dialog box and click on the Styles tab. Select 
the System Menu and Minimize Box options.


<table cellpadding=5 width="95%">
<tr><td valign="top">Control</td>
<td valign="top">ID</td></tr>
<tr><td valign="top">Left operand edit control</td>
<td valign="top"><I>IDC_LEFT</I></td></tr>
<tr><td valign="top">Right operand edit control</td>
<td valign="top"><I>IDC_RIGHT</I></td></tr>
<tr><td valign="top">Result edit control</td>
<td valign="top"><I>IDC_RESULT</I></td></tr>
<tr><td valign="top">First radio button (group property set)</td>
<td valign="top"><I>IDC_OPERATION</I></td></tr>
<tr><td valign="top">Compute pushbutton</td>
<td valign="top"><I>IDC_COMPUTE</I></td></tr>
</table>


<P><B><LI>Use ClassWizard to add member variables and a command handler.</B> AppWizard has already generated a class <I>CEx23aDlg</I>. Add the following data members.


<table cellpadding=5 width="95%">
<tr><td valign="top"><b>Control ID</b></td>
<td valign="top"><b>Member Variable</b></td>
<td valign="top"><b>Type</b></td></tr>
<tr><td valign="top"><I>IDC_LEFT</I></td>
<td valign="top"><I>m_dLeft</I></td>
<td valign="top"><I>double</I></td></tr>
<tr><td valign="top"><I>IDC_RIGHT</I></td>
<td valign="top"><I>m_dRight</I></td>
<td valign="top"><I>double</I></td></tr>
<tr><td valign="top"><I>IDC_RESULT</I></td>
<td valign="top"><I>m_dResult</I></td>
<td valign="top"><I>double</I></td></tr>
<tr><td valign="top"><I>IDC_OPERATION</I></td>
<td valign="top"><I>m_nOperation</I></td>
<td valign="top"><I>int</I></td></tr>
</table>


<p>Add the message handler <I>OnCompute</I> for the <I>IDC_COMPUTE</I> button.

<P><B><LI>Code the <I>OnCompute</I> member function in the ex23aDlg.cpp file.</B> Add the following boldface code:

<P><pre>
void CEx23aDlg::OnCompute() 
{
<B>    UpdateData(TRUE);
    switch (m_nOperation) {
    case 0:  // add
        m_Result = m_dLeft + m_dRight;
        break;
    case 1:  // subtract
        m_dResult = m_dLeft - m_dRight;
        break;
    case 2:  // multiply
        m_dResult = m_dLeft * m_dRight;
        break;
    case 3:  // divide
        if (m_dRight != 0.0) {
            m_dResult = m_dLeft / m_dRight;
        }
        else {
            AfxMessageBox(&quot;Divide by zero&quot;);
            m_dResult = 0.0;
        }
        break;
    default:
        TRACE(&quot;default; m_nOperation = %d\n&quot;, m_nOperation);
    }
    UpdateData(FALSE);</B>
}
</pre>

<P><B><LI>Build and test the EX23A 
application.</B> Notice that the program's icon appears in the Microsoft Windows taskbar. Verify that you can minimize the dialog window.
</ol>

<A NAME="497"><H2><B>The Application Class <I>InitInstance</I> Function</B></H2></A>
<P>The critical element of the EX23A application is the <I>CEx23aApp::InitInstance</I> function generated by AppWizard. A normal <I>InitInstance</I> function creates a main frame window and returns 
<I>TRUE</I>, allowing the program's message loop to run. The EX23A version constructs a modal dialog object, calls <I>DoModal</I>, and then returns <I>FALSE</I>. This means that the application exits after the user exits the dialog. The <I>DoModal</I> function lets the Windows dialog procedure get and 
dispatch messages, as it always does. Note that AppWizard does not generate a call to <I>CWinApp::SetRegistryKey</I>.

<P>Here is the generated <I>InitInstance</I> code from ex23a.cpp:

<P><pre>
BOOL CEx23aApp::InitInstance()
{
    AfxEnableControlContainer();

    // Standard initialization
    // If you are not using these features and wish to reduce the size
    //  of your final executable, you should remove from the following
    //  the specific initialization routines you do not need.

#ifdef _AFXDLL
    Enable3dControls();       // Call this when using MFC in a shared DLL
#else
    Enable3dControlsStatic(); // Call this when linking to MFC statically
#endif

    CEx23aDlg dlg;
    m_pMainWnd = &amp;dlg;
    int nResponse = dlg.DoModal();
    if (nResponse == IDOK)
    {
        // TODO: Place code here to handle when the dialog is
        //  dismissed with OK
    }
    else if (nResponse == IDCANCEL)
    {
        // TODO: Place code here to handle when the dialog is
        //  dismissed with Cancel
    }

    // Since the dialog has been closed, return FALSE so that we 
    //  exit the application, rather than start the application's 
    //  message pump.
    return FALSE;
}
</pre>

<A NAME="498"><H2><B>The Dialog Class and the Program Icon</B></H2></A>
<P>The generated <I>CEx23aDlg </I>class contains these two message map entries:

<P><pre>
ON_WM_PAINT()
ON_WM_QUERYDRAGICON()
</pre>

<P>The associated handler functions take care of displaying the application's icon when the user minimizes the program. This code applies only to Microsoft Windows NT version 3.51, in which the icon is displayed on the desktop. You don't need the three handlers for Windows 95, Windows 98, or Windows NT 4.0 because those versions of Windows display the program's icon directly on the taskbar.

<P>There is some icon code that you do need. It's in the dialog's handler for WM_INITDIALOG, which is generated by AppWizard. Notice the two <I>SetIcon</I> calls in the <I>OnInitDialog</I> function code below. If you checked the About box option, AppWizard generates code to add an About box to the System 
menu. The variable <I>m_hIcon</I> is a data member of the dialog class that is initialized in the constructor.

<P><pre>
BOOL CEx23aDlg::OnInitDialog()
{
    CDialog::OnInitDialog();

    // Add &quot;About...&quot; menu item to system menu.

    // IDM_ABOUTBOX must be in the system command range.
    ASSERT((IDM_ABOUTBOX &amp; 0xFFF0) == IDM_ABOUTBOX);
    ASSERT(IDM_ABOUTBOX &lt; 0xF000);

    CMenu* pSysMenu = GetSystemMenu(FALSE);
    if (pSysMenu != NULL)
    {
        CString strAboutMenu;
        strAboutMenu.LoadString(IDS_ABOUTBOX);
        if (!strAboutMenu.IsEmpty())
        {
            pSysMenu-&gt;AppendMenu(MF_SEPARATOR);
            pSysMenu-&gt;AppendMenu(MF_STRING, 
                                 IDM_ABOUTBOX, strAboutMenu);
        }
    }

    // Set the icon for this dialog.  The framework does this
    //  automatically when the application's main window
    //  is not a dialog
    SetIcon(m_hIcon, TRUE);         // Set big icon
    SetIcon(m_hIcon, FALSE);        // Set small icon

    // TODO: Add extra initialization here

    return TRUE;  // return TRUE  unless you set the focus to a control
}
</pre>

</BODY>
</HTML>



