<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The MTS Concurrency Model</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch09e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="136"><H1>The MTS Concurrency Model</H1></A>

<P>MTS provides a new concurrency abstraction called an <I>activity</I>. An activity is a logical thread of execution created on behalf of a single base client, as shown in Figure 9-6. Each user owns one or more objects in a single activity, which is isolated from the activities and objects of every other user. To support this concept, the MTS run time creates a new activity whenever a base client creates a new MTS object. Activities keep the programming model fairly simple for MTS programmers. However, behind the scenes the MTS run time maintains a fairly complex thread pooling scheme to accommodate application scalability and increased throughput.

<P>In MTS 2.0, a server application maintains a thread pool that can hold up to 100 single-threaded apartments (STAs). The MTS run time creates a new STA for each new activity until the pool reaches this limit. When the number of activities exceeds the number of STAs, the MTS run time begins to assign multiple activities to each STA. When two activities share the same STA, the MTS run time manages multiplexing STAs (physical threads) in and out of activities (logical threads).


<P>When two activities share the same STA, the code executing on behalf of one user can potentially block the call of another user. However, this should not concern you as an MTS programmer. You should think in terms of logical threads and let the MTS run time manage the physical threads as it sees fit. The designers of MTS have tried to make the threading model as simple as possible. The abstraction of the STA relieves you from worrying about synchronization. The abstraction of the activity builds upon the STA by also relieving you from worrying about the complexities of thread pooling. You need only follow a handful of rules to make the most of the MTS threading model.

<P><A HREF="javascript:fullSize('F09wg06x.htm')"> <img src="images/F09wg06.JPG" width=404 height=307 border=0 ALT = "Click to view at full size."> </A>

<P><!-- caption --><B>Figure 9-6.</b> <i>An activity is a set of MTS objects that belong to a single user. Each activity models a logical thread of execution. The MTS run time manages a physical pool of STAs that are multiplexed in and out of activities on an as-needed basis.</I><!-- /caption -->

<P>Remember that each activity should represent a set of objects that belong to a single user. You can draw two conclusions from this. First, no two users should connect to objects inside the same activity. Second, you should avoid creating objects in different activities when they belong to the same user.

<P>It's not hard to ensure that the objects in any given activity are accessed by a single user only. As you know, the MTS run time creates a new activity when a base client creates an object. This means that a client application must pass a reference to another client to connect two users to objects in the same activity. You should therefore avoid designs that pass MTS object references between users. Also note that the MTS threading model discourages the use of singletons or any other application designs in which multiple users connect to the same physical object.

<P>The most important thing you need to learn about threading in MTS is how to propagate a new MTS object into an existing activity. Once the base client creates an MTS object, this object often creates additional MTS objects in the same server process. When you write the code for one MTS object to create another, you must do it properly or your new object might be placed in a different activity.

<P>Let's look at the correct way to propagate new objects inside the MTS environment. When a base client creates an MTS object, the MTS run time creates it in a new activity. This object is known as the <I>root </I>of the activity. All MTS objects including the root should create additional MTS objects in the same activity by making activation requests through the MTS run time. You do this by calling the <I>CreateInstance</I> method on the object context. <I>CreateInstance </I>takes a single parameter for the ProgID of the new object. The following code demonstrates how to create a second MTS object in the same activity as the root:

<p><pre>
&#39; In a method of the root object
Dim ObjCtx As ObjectContext
Set ObjCtx = GetObjectContext()
Dim Object2 As CMyClass2
Set Object2 = ObjCtx.CreateInstance(&quot;MyServer.CMyClass2&quot;)
</PRE>

<P>When an object in the MTS environment calls <I>CreateInstance</I>, it tells the MTS run time to create the requested object in the same activity. The MTS run time creates the new object and places a context wrapper between it and its creator. You should note two important things here. First, since the two objects live in the same STA, there is no need for a proxy/stub layer between them. Second, the context wrapper is inserted between the two objects, so the MTS interception scheme is set up properly.

<A NAME="137"><H2>Problems with <I>CreateObject </I>and the <I>New</I> Operator</H2></A>
<P>While you should create MTS objects from a Visual Basic base client using the <I>CreateObject </I>function and the <I>New</I> operator, you should be cautious when using these techniques in the code behind your MTS objects. Using them can result in an undesirable situation.

<P>Let's examine what happens when you try to create one MTS object from another using <I>CreateObject</I>. When an MTS object calls <I>CreateObject</I>, the activation request bypasses the MTS run time and is sent down to the SCM. The SCM, in turn, calls back to the MTS run time with the same activation request. The MTS run time assumes that another base client is creating the object and therefore places it in a new activity. This means that the new object and its creator will probably run in different STAs. The two objects are bound together with a proxy/stub layer, which significantly degrades performance and consumes another STA from the thread pool unnecessarily.

<P>You'll also get into trouble if you try to create one MTS object from another using the <I>New</I> operator. In one scenario, the creator component and the component from which the new object is created live in separate DLLs. In this case, a call to <I>New</I> is sent down to the SCM just like a call to <I>CreateObject</I>. This causes the new object to be created in a new activity. As you already know, this is undesirable. In the second scenario, in which the two components involved both live in the same ActiveX DLL, the problem is more subtle but can lead to even greater frustration. When a Visual Basic object calls <I>New</I> on a class name in the same DLL, the Visual Basic run time creates and binds the object on its own without involving either the MTS run time or the SCM. The new object isn't a valid MTS object because it doesn't have its own context wrapper. Your code won't crash, but it can exhibit unexpected behavior. When this invalid MTS object calls <I>GetObjectContext</I>, it's given a reference for the context object of its creator. This can lead to some strange and mysterious results.

<P>As it turns out, sometimes you can and should use the <I>New</I> operator in a method implementation behind an MTS object. You can use the <I>New</I> operator when you create objects that aren't MTS objects. For example, you should use the <I>New</I> operator whenever you want to create ActiveX Data Objects (ADO). ADO components aren't registered with MTS. ADO objects don't need a context wrapper, and they don't use the object context.

<P>You can thus conclude that an MTS application can run a mixture of MTS objects and standard objects. An MTS object requires a context wrapper, but a standard object doesn't. When you create a standard object from an MTS object using the <I>New</I> operator, it's created in the same activity, just like a call to <I>CreateInstance</I>. However, once a component has been programmed against the MTS type library and uses its object context, it must be registered with the MTS Explorer and properly created as an MTS object. As a rule of thumb, one MTS object must always create another MTS object using <I>CreateInstance</I>.

</BODY>
</HTML>






