<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Sharing Global Data Across MTS Objects</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="189"><H1>Sharing Global Data Across MTS Objects</H1></A>

<P>The MTS programming model uses <I>resource dispensers </I>to model plug-in modules that work with the MTS run time. A resource dispenser shares nondurable resources across objects in an MTS application in a way that promotes efficiency and scalability. The MTS SDK details the requirements of writing resource dispensers for MTS applications. As you saw in <a href="ch10a.htm">Chapter 10</a>, the ODBC Driver Manager is an MTS resource dispenser. One other resource dispenser ships with MTS&#8212;the Shared Property Manager (SPM). (Real COM programmers call it &quot;the spam.&quot;)

<P>The SPM is a resource dispenser that facilitates the sharing of global memory among objects running inside the same MTS application (process). This is great news for Visual Basic programmers. As you'll recall from <a href="ch07a.htm">Chapter 7</a>, Visual Basic doesn't provide an easy, reliable way to share global data in a multithreaded application. When you declare a public variable in a BAS module, Visual Basic stores the data in thread local storage. Consequently, a set of Visual Basic objects can share BAS-module variables only when they're running in the same single-threaded apartment (STA). If two Visual Basic objects from the same project are running in different STAs, they see a separate instance of each BAS-module variable.

<P>With MTS, you should assume that every activity runs in a separate STA. This means that Visual Basic alone doesn't provide a reasonable way to share data across objects running in separate MTS activities. However, at times you might want all the objects in an MTS application to share a set of global variables. You can solve this problem using the SPM.



<P>Before I explain how to use the SPM, you should note that accessing global data from multiple threads introduces concurrency issues. As you saw in <a href="ch07a.htm">Chapter 7</a>, concurrent access to global data usually requires synchronization. Failure to properly synchronize access to global data can lead to data inconsistency and data corruption in a multithreaded environment.


<P>The SPM provides a simple yet effective form of synchronization. Instead of having stand-alone properties, the SPM requires you to define each property within the scope of a <I>property group</I>. A property group provides a namespace for a set of properties and also lets you indicate how to synchronize access to your data. Figure 12-2 shows how things look from a high-level perspective. The shared property group implements an internal lock manager to synchronize access to property objects inside a group.


<P><A HREF="javascript:fullSize('F12wg02x.htm')"> <img src="images/F12wg02.JPG" width=404 height=243 border=0 ALT = "Click to view at full size."> </A>

<P><!-- caption --><B>Figure 12-2.</b> <i>The shared property manager provides synchronized access to global data through shared properties inside a property group. When you create a property group, you should indicate how you want it to manage locking and its lifetime.</I><!-- /caption -->

<P>The SPM is a name/value dictionary that lets you create and retrieve properties and property groups by name. Let's look at an example. To use the SPM, you must reference the Shared Property Manager Type Library (Mtxspm.dll) in your MTS DLL project. Before you can create and retrieve properties and property groups, you must create an instance of the shared property group manager, like this:

<p><pre>
Dim ObjCtx As ObjectContext
Set ObjCtx = GetObjectContext()
&#39; Create shared property group manager instance.
Dim spgMgr As SharedPropertyGroupManager
Dim spgMgr_ProgID As String
spgMgr_ProgID = &quot;MTxSpm.SharedPropertyGroupManager.1&quot;
Set spgMgr = ObjCtx.CreateInstance(spgMgr_ProgID)
</PRE>

<P>You can then create a shared property group:

<p><pre>
Dim MyGroup As SharedPropertyGroup
Dim GroupAlreadyExists As Boolean
Set MyGroup = spgMgr.CreatePropertyGroup(&quot;MyGroup&quot;, _
                                         LockMethod, _
                                         Process, _
                                         GroupAlreadyExists)
</PRE>

<P>The <I>CreatePropertyGroup</I> method takes four parameters. The first parameter lets you pass the name of the property group. If a property group of the same name already exists, the SPM binds you to it. If the property group doesn't exist, the SPM creates it and then binds you to it. The last parameter of <I>CreatePropertyGroup</I> is a Boolean output parameter that tells the caller whether the property group existed before the call.

<P>The second and third parameters let you specify an <I>isolation mode</I> and a <I>release mode </I>for your property group. The isolation mode allows you to establish the locking behavior for the group, while the release mode tells the SPM how long you want the group to remain in memory. Note that both these parameters are passed <I>ByRef</I> and that the SPM ignores their input values if the property group already exists. Only the client that creates the group can set these values. If the property group already exists, the SPM returns the current isolation mode and release mode to the caller in these two parameters as output values.

<P>You can pass the isolation mode value <I>LockSetGet</I> or <I>LockMethod</I>. If you pass <I>LockSetGet</I>, the SPM locks individual properties when they're accessed by a client. This ensures that two clients never read and write to the same property at the same time. In other words, it prevents concurrent access to a shared property object's data, which can result in inconsistency and corruption. However, <I>LockGetSet</I> doesn't prevent other clients from concurrently accessing other properties in the group.

<P>You should pass <I>LockMethod</I> when you want each client to acquire a groupwide exclusive lock across a set of operations. There are a few reasons why you might need to do this. You might want to read a property and then update its value without the risk of another client updating its value between your two operations. Or you might have interdependencies among the properties in a group. In this case, each client might require a higher level of isolation when running a series of updates.

<P>When you create a property group using <I>LockMethod</I>, a client will acquire an exclusive lock that prevents other clients from reading or writing to any property in the group. This lock is held for the duration of the client's method call. When another client attempts to access a property inside a locked group, its call blocks until the lock is released. As with transactions, higher levels of isolation in the SPM result in more blocking and lower levels of concurrency.

<P>When you set the release mode for a group, you can pass a value of either <I>Process</I> or <I>Standard</I>. The value <I>Process</I> indicates that you want the property group to remain in memory for the lifetime of the MTS application. The value <I>Standard</I> indicates that you want the property group to manage its lifetime using standard reference counting. When you pass <I>Standard</I>, the property group releases itself from memory as soon as the last client drops its connection.

<P>Of course, the SPM isn't really useful until you start creating and using shared properties. Now that you know how to create a property group, you can create a property using the <I>CreateProperty</I> method or the <I>CreatePropertyByPosition</I> method. Here's an example of creating a property and setting its default value:

<p><pre>
Dim MyProperty As SharedProperty
Dim PropertyAlreadyExists As Boolean
&#39; Create and/or bind to property.
Set MyProperty = MyGroup.CreateProperty(&quot;MyProperty&quot;, _
                                        PropertyAlreadyExists)
&#39; Give property a default value when created.
If (PropertyAlreadyExists = False) Then
    MyProperty.Value = &quot;My favorite initial value&quot;
End If
</PRE>

<P>As in the case of <I>CreatePropertyGroup</I>, <I>CreateProperty</I> simply binds you to a property if it already exists. You can retrieve an existing property by name or by position. If the property doesn't already exist, the SPM creates it and assigns the default value 0 (as a long integer) to its <I>Value</I> property. If you want a different default value, you should explicitly set it when the property is created.

<P>The <I>Value </I>property of a shared property object is stored as a variant. This gives you quite a bit of flexibility. You can store any variant compliant data type inside a shared property such as <I>Integer</I>, <I>Long</I>, <I>Double</I>, or <I>String</I>. You can also store a variant-compliant array. Here is an example of storing an array of strings in a shared property:

<p><pre>
Dim data() As String
ReDim data(3)
data(0) = &quot;Bob&quot;
data(1) = &quot;Carol&quot;
data(2) = &quot;Ted&quot;
data(3) = &quot;Alice&quot;
MyProperty.Value = data
</PRE>

<P>After you create the property, it's pretty easy to read and write to it. You might even be tempted to assign a Visual Basic object reference to a shared property. However, this is a very bad idea. Shared COM objects don't fit into the MTS programming model very well. Because of their problems with thread affinity, shared Visual Basic objects don't fit in at all. In MTS, every object should be owned by one and only one client. However, you can store the state that defines a logical object inside the SPM using primitive data types and arrays. If you do this, you can simply rehydrate objects on an as-needed basis as long as each one lives entirely within the scope of a single activity.

<P>You should also keep in mind that read and write operations in the SPM aren't transacted. While the SPM can provide isolation, it doesn't provide any rollback facilities. If you modify a property from inside an MTS transaction, your changes are permanent, even when you call <I>SetAbort</I>. And don't be fooled into thinking that your property group locks are held to the end of your transactions. The locks in the SPM have nothing to do with the current transaction. The SPM releases its locks as soon as the current method finishes, which in most cases is before the end of your MTS transaction.

<P>COM+ will introduce a new service called the In-Memory Database (IMDB), which will let you share data among objects as the SPM does today. However, the IMDB will be exposed as an OLE DB provider. It will also be a resource manager that can enlist your connections inside an MTS transaction. Your read and write operations to the IMDB will thus be enlisted and reversible in addition to being isolated. A call to <I>SetAbort</I> will undo any change you've made.

</BODY>
</HTML>






