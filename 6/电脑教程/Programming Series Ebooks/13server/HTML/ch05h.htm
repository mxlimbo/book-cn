<HTML>
<HEAD>
<TITLE>Using the System Registry Efficiently</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch05g.htm">[Previous]</A> <A HREF="ch05i.htm">[Next]</A><P>

<A NAME="86"><h1>Using the System Registry Efficiently</h1></A>
<p>Now that you know about the features that enable you to manipulate data in the system registry, you can learn how to make these features work in your server application. The registry should serve as the repository for your server's configuration information, but in some respects, it will also serve as a mechanism that an administrator can use to communicate configuration needs to your server.</p>

<p>Most servers are implemented as <i>services</i>, and services do not have a visible user interface. In fact, regardless of the process used to develop a server, there are compelling reasons to exclude a user interface from your server. When you exclude the user interface, you typically create a second, simple administering application to configure your service. This application can store configuration information in the registry, which your service can read. Administering applications should be able to run remotely as well as locally, and can also run on Microsoft Windows 95 or Windows 98.</p>

<p>When you design your service and administering application, you should follow some important rules to make the most efficient use of the system registry.</p>

<ul>
<p><li><b>Your server should touch the registry as infrequently as possible.</b> The system registry is a shared resource and access to it must be serialized. This serialization is handled by the system. Each time you call a registry function, the calling thread risks waiting while another thread is accessing the registry. This can dramatically affect the performance of an application that makes frequent registry calls. Your server should read its configuration from the registry upon startup, and optionally reread configuration information upon request by the software that is administering the server. Most services require the service to be stopped and then restarted to operate using the new configuration parameters, but this not necessary.</li></p>

<p><li><b>Your server should not poll the registry for changes.</b> The system provides a means by which your service can be notified of changes made to the registry (discussed in the section &quot;<A HREF="ch05i.htm#87">Registry Change Notifications</A>&quot;). Your service should use this feature as a mechanism for detecting changes made to its configuration rather than conduct a periodic polling of the system registry.</li></p>

<p><li><b>Avoid the temptation to report events or performance data via the registry.</b> Your administering application and your service should avoid reporting events or performance data to nonvolatile registry keys. Instead the application and service should use the performance monitoring functionality implemented via the volatile HKEY_PERFORMANCE_DATA registry key. Please see <A HREF="ch07a.htm">Chapter 7</A> for more information about how to report performance data.</li></p>
</ul>

</BODY>
</HTML>




