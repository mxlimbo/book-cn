<HTML>
<HEAD>
<TITLE>Service Control Programs that Ship with Windows</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch03b.htm">[Previous]</A> <A HREF="ch03d.htm">[Next]</A><P>

<A NAME="42"><H1>Service Control Programs that Ship with Windows</H1></A>

<p>Before I delve into how to write a service, you must at least know how an 
SCP can control a service. So I'll start off by examining a few SCP applications 
that ship with Windows.</p>

<A NAME="43"><H2>Services Snap-In</H2></A>

<p>The SCP application with which you should become most familiar is the 
Services snap-in, shown in Figure 3-2. This snap-in shows the list of all 
services installed on the target machine. The Name and Description columns 
identify each service's name and offer an informative description of the service's 
function. The Status column indicates whether the service is Started, Paused, 
or Stopped (blank entries indicate &quot;stopped&quot;). The Startup Type column 
indicates when the SCM should invoke the service, and the Log On As column 
indicates the security context used by the service when it is running.</p>


<p>This information is kept in the SCM's database, which lives inside 
the registry under the following subkey:</p>


<p>
<table cellpadding=5 width="95%"><tr><td><pre>
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
</pre></td></tr></table>
</p>


<p>You should never access this subkey directly; instead, an SCP should 
call the Windows functions (discussed in the <a href="ch04a.htm">next chapter</a>) that manipulate 
the database in this subkey. Directly modifying the contents of this key will 
yield unpredictable results. When you install a product that includes a service, 
the setup program for that product is an SCP that adds the service's 
information to the SCM's database.</p>


<p>You can view a remote SCM's service database by selecting the 
Computer Management node in the left pane of the Computer Management console 
and then choosing Connect To Another Computer from the Action menu.</p>


<p>
<A HREF="javascript:fullSize('F03FJ02x.htm')"> <img src="images/F03FJ02.JPG" width=404 height=240 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-2.</b> <i>Services snap-in</i><!-- /caption -->
</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
All services that ship with Windows log on as the LocalSystem 
security context. This is a highly privileged account, and it is strongly 
recommended that any services you write also use the LocalSystem account.
</blockquote></div>
</p>


<p>So now that you're looking at the Services snap-in, you're probably 
wondering about all the tasks you can perform with it. Here are the most 
common operations:</p>

<UL>

<p><li><B>Start a service</B> The administrator starts a service by selecting 
the service from the list and clicking the Start toolbar button. Only 
services with a Startup Type of Automatic or Manual can be 
started; disabled services cannot. Disabling a service is useful for 
troubleshooting problems with a machine.</li></p>


<p><li><B>Stop a service</B> The administrator stops a service by selecting 
the service and clicking the Stop toolbar button. Note that some 
services do not allow themselves to be stopped after they are started. 
The Event Log service is an example; it stops only when the 
machine shuts down.</li></p>


<p><li><B>Pause and resume a service</B> The administrator pauses a 
service by selecting a running service and clicking the Pause toolbar 
button. Note that most services do not allow themselves to be paused. 
Also note that &quot;pause&quot; has no exact definition. For one service, 
pausing can mean that the service won't accept client requests until it 
finishes processing the outstanding requests. For another service, 
pausing can mean that the service can no longer process any of its 
operations. Paused services can be resumed by clicking the Start 
toolbar button.</li></p>


<p><li><B>Restart a service</B> The administrator restarts a service by selecting 
a running or paused service and clicking the Restart toolbar 
button. Restarting a service causes the snap-in to stop the service and 
then start the service. This is simply a convenience feature and is very 
useful when debugging your own service.</li></p>
</UL>

 
<p>The preceding list certainly accounts for 99 percent of what 
administrators do with the Services snap-in, but the snap-in can also be used to 
reconfigure a service. To change a service's settings, you select the service and then 
display its Properties dialog box. This dialog box contains four tabs; each tab allows 
the administrator to reconfigure parts of the selected service. The 
configurable settings are discussed in the following sections.</p>

<A NAME="44"><H3>General Properties</H3></A>

<p>The General tab (shown in Figure 3-3) allows the administrator to examine 
and reconfigure general information about the service. The first fact you need 
to know is that each service goes by two string names: an internal name (used 
for programmatic purposes) and a display name (a pretty string presented to 
administrators and users). After being added to the machine's service database, 
a service's internal name cannot be altered, but the administrator can modify 
the service's display name and description. The General tab also shows the 
service's pathname but does not allow the administrator to change it. (This is a 
limitation imposed by the tab, not by the system.) The administrator can change 
the service's Startup Type to one of the following:</p>

<UL>

<p><li>
<B>Automatic</B> One of the features of a service is that the SCM 
can automatically start it for you. If the service has a Startup Type 
of Automatic, the SCM spawns the service when the operating 
system boots. It is important to note that automatic services run before 
any user interactively logs on to the machine. In fact, many 
machines that run Windows are set up to run only services&#8212;no one ever 
logs on to the machine interactively. For example, machines 
running Windows and the Server service allow clients to 
access subdirectories, files, and printers on a networked machine.</li></p>


<p><li><B>Manual</B> A manual service tells the SCM not to start the 
service when the machine boots. An administrator can start this service 
manually using an SCP. A manual service (alternately known as a 
demand-start service) will also start when another service that depends on 
the manual service is started. I'll talk about service dependencies more 
in the <a href="ch04a.htm">next chapter</a>.</li></p>


<p><li><B>Disabled</B> A disabled service tells the SCM not to start it under 
any circumstance. You disable the DHCP Client service when you 
manually assign an IP address to your machine rather than have it 
dynamically obtain an IP address from a machine running the DHCP 
Server service. Disabling a service is also quite useful when troubleshooting 
a system by allowing you to take a specific service out of the equation.</li></p>
</UL>

 
<p>
<A HREF="javascript:fullSize('F03FJ03x.htm')"> <img src="images/F03FJ03.JPG" width=404 height=441 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-3.</b> <i>General tab for the Windows Installer service</i><!-- /caption -->
</p>

<A NAME="45"><H3>Log On Properties</H3></A>

<p>In addition to configuring the actual service, the administrator can 
reconfigure the security context under which the service will execute on the Log On 
tab, shown in Figure 3-4. The security context can be one of the following:</p>

<UL>

<p><li><B>LocalSystem Account</B> A service running under the 
LocalSystem account can do just about anything on the computer: open any 
file, shut down the machine, change the system time, and so on. A 
service running under the LocalSystem account can optionally be 
allowed to interact with the desktop. Most services don't require 
this option, and you are strongly discouraged from using it.</li></p>


<p><li><B>This Account</B> A service can also execute under a specific 
security context (identified by a user's name and password). This restricts 
the service to accessing the resources accessible to the specified account.</li></p>
</UL>

 
<p>I'll talk more about LocalSystem and user accounts in the &quot;<A HREF="ch03f.htm#56">Service Issues</A>&quot; section later in this chapter.</p>


<p>The Log On tab also allows the administrator to specify which 
hardware profiles the service is enabled in. Hardware profiles allow you to configure 
services according to your hardware configuration. For example, you might 
want the fax service to run when your laptop computer is docked and not run 
when it is undocked.</p>

<p>
<A HREF="javascript:fullSize('F03FJ04x.htm')"> <img src="images/F03FJ04.JPG" width=404 height=441 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-4.</b> <i>Log On tab for the Distributed Link Tracking service</i><!-- /caption -->
</p>

<A NAME="46"><H3>Recovery Properties</H3></A>
<p>The Recovery tab, shown in Figure 3-5, allows the administrator to tell the 
SCM what actions to perform should the service terminate abnormally. 
Abnormal termination means that the service stopped without reporting a status 
of SERVICE_STOPPED (discussed later in this chapter). For the first, second, 
and subsequent attempts, the SCM can do nothing, automatically restart the 
service, run an executable, or reboot the computer. Note that running an 
executable and rebooting the computer can fail if the account under which the service 
is running doesn't have the appropriate privileges or permissions.</p>

<p>
<A HREF="javascript:fullSize('F03FJ05x.htm')"> <img src="images/F03FJ05.JPG" width=404 height=441 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-5.</b> <i>Recovery tab for the Fax Service service</i><!-- /caption -->
</p>

<A NAME="47"><H3>Dependencies Properties</H3></A>
<p>The Dependencies tab, shown in Figure 3-6, shows the services on which 
the selected service depends and also what services depend on the selected 
service. In the figure, you'll see six services dependent on the Workstation service. If 
the administrator attempts to stop the Workstation service and any dependent 
services are running, the SCM fails the call. Many SCP programs are written 
to notify the user that dependent services are running, and to allow the user 
to choose whether to also stop the dependent services. The Dependencies tab 
does not allow an administrator to modify any of these dependencies. (I'll 
discuss service dependencies more in the <a href="ch04a.htm">next chapter</a>.)</p>

<p>
<A HREF="javascript:fullSize('F03FJ06x.htm')"> <img src="images/F03FJ06.JPG" width=404 height=441 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 3-6.</b> <i>Dependencies tab for the Workstation service</i><!-- /caption -->
</p>

<A NAME="48"><H2>Net.exe and SC.exe</H2></A>
<p>In addition to the Services snap-in, Windows ships with a command-line 
SCP tool named Net.exe. This tool is limited in that it allows you to control 
only those services residing on the local machine. Using Net.exe, you can start, 
stop, pause, and continue services using the following syntax:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
NET START    <I>servicename</I>
NET STOP     <I>servicename</I>
NET PAUSE    <I>servicename</I>
NET CONTINUE <I>servicename</I>
</pre></td></tr></table>
</p>

<p>You can also use Net.exe to display a list of services running on the 
local machine by simply typing the following, without specifying a 
<I>servicename</I>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
NET START
</pre></td></tr></table>
</p>


<p>For debugging, the Net.exe tool is quite handy because you can place calls 
to it in a batch file or other script file.</p>

<p>Another SCP application that Microsoft offers is a command-line tool 
named SC.exe. This tool ships as part of the Microsoft Windows 2000 Resource 
Kit. Running this tool without passing it any parameters displays its usage 
syntax, as shown here:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
DESCRIPTION:
   SC is a command line program used for communicating with the 
   NT Service Controller and services.
USAGE:
   sc &lt;server&gt; [command] [service name] &lt;option1&gt; &lt;option2&gt;...

   The option &lt;server&gt; has the form \\ServerName
   Further help on commands can be obtained by typing: &quot;sc [command]&quot;
   Commands:
     query-----------Queries the status for a service, or 
                     enumerates the status for types of services.
     queryex---------Queries the extended status for a service, or 
                     enumerates the status for types of services.
     start-----------Starts a service.
     pause-----------Sends a PAUSE control request to a service.
     interrogate-----Sends an INTERROGATE control request to a service.
     continue--------Sends a CONTINUE control request to a service.
     stop------------Sends a STOP request to a service.
     config----------Changes the configuration of a service (persistant)
     description-----Changes the description of a service.
     failure---------Changes the actions taken by a service upon failure
     qc--------------Queries the configuration information for a service
     qdescription----Queries the description for a service.
     qfailure--------Queries the actions taken by a service upon failure
     delete----------Deletes a service (from the registry).
     create----------Creates a service. (adds it to the registry).
     control---------Sends a control to a service.
     sdshow----------Displays a service's security descriptor.
     sdset-----------Sets a service's security descriptor.
     GetDisplayName--Gets the DisplayName for a service.
     GetKeyName------Gets the ServiceKeyName for a service.
     EnumDepend------Enumerates Service Dependencies.

   The following commands don't require a service name:
   sc &lt;server&gt; &lt;command&gt; &lt;option&gt; 
     boot------------(ok | bad) Indicates whether the last boot should
                     be saved as the last-known-good boot configuration
     Lock------------Locks the Service Database
     QueryLock-------Queries the LockStatus for the SCManager Database
EXAMPLE:
   sc start MyService

Would you like to see help for the QUERY and QUERYEX commands? 
[ y | n ]: y
QUERY and QUERYEX OPTIONS : 
   If the query command is followed by a service name, the status
   for that service is returned.  Further options do not apply in
   this case.  If the query command is followed by nothing or one of
   the options listed below, the services are enumerated.
   type=    Type of services to enumerate (driver, service, all)
            (default = service)
   state=   State of services to enumerate (inactive, all)
            (default = active)
   bufsize= The size (in bytes) of the enumeration buffer
            (default = 1024)
   ri=      The resume index number at which to begin the enumeration
            (default = 0)
   group=   Service group to enumerate
            (default = all groups)
SYNTAX EXAMPLES
sc query                - Enumerates status for active services &amp;
                          drivers
sc query messenger      - Displays status for the messenger service
sc queryex messenger    - Displays extended status for the messenger
                          service
sc query type= driver   - Enumerates only active drivers
sc query type= service  - Enumerates only Win32 services
sc query state= all     - Enumerates all services &amp; drivers
sc query bufsize= 50    - Enumerates with a 50 byte buffer.
sc query ri= 14         - Enumerates with resume index = 14
sc queryex group= &quot;&quot;    - Enumerates active services not in a group
sc query type= service type= interact - Enumerates all interactive
                                        services
sc query type= driver group= NDIS     - Enumerates all NDIS drivers
</pre></td></tr></table>
</p>

<p>While developing and debugging a service, this tool can help 
tremendously since it offers a rich command-line interface to all the service control 
options and can easily be used in a script file.</p>

</BODY>
</HTML>




