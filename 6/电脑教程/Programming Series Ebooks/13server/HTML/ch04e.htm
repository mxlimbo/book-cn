<HTML>
<HEAD>
<TITLE>Reconfiguring a Service</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<A HREF="ch04d.htm">[Previous]</A> <A HREF="ch04f.htm">[Next]</A><P>

<A NAME="68"><H1>Reconfiguring a Service</H1></A>
<p>The <I>CreateService </I>function adds the new service's entry to the SCM's 
database. It's unusual to do so, but occasionally you might want to change the 
information in the database. For instance, the user account associated with the 
entry might need its password changed, or you might want to change the service 
from manual start to automatic start. Well, Windows offers you four functions 
that help you reconfigure a service. The first function, 
<I>QueryServiceConfig</I>,<I> </I>retrieves the service's entry from the SCM's database:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
BOOL QueryServiceConfig(
   SC_HANDLE             hService,
   QUERY_SERVICE_CONFIG* pqsc,
   DWORD                 dwBufSize,
   PDWORD                pdwBytesNeeded);
</pre></td></tr></table>
</p>

<p>When you call this function, the <I>hService 
</I>parameter identifies the service you wish to query. The handle must be opened with 
SERVICE_QUERY_CONFIG access. You must also allocate a memory buffer large enough to 
hold a QUERY_SERVICE_CONFIG structure and all the service's string data. 
A QUERY_SERVICE_CONFIG structure looks like this:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
typedef struct _QUERY_SERVICE_CONFIG {
   DWORD  dwServiceType;
   DWORD  dwStartType;
   DWORD  dwErrorControl;
   PTSTR  lpBinaryPathName;
   PTSTR  lpLoadOrderGroup;
   DWORD  dwTagId;
   PTSTR  lpDependencies;
   PTSTR  lpServiceStartName;
   PTSTR  lpDisplayName;
} QUERY_SERVICE_CONFIG, *LPQUERY_SERVICE_CONFIG; 
</pre></td></tr></table>
</p>

<p>The <I>dwBufSize </I>parameter of 
<I>QueryServiceConfig</I> tells the function how 
big your buffer is, and the DWORD pointed to by the 
<I>pdwBytesNeeded </I>parameter is filled in by the function, telling you how big the buffer needs to be. The 
buffer that you pass to <I>QueryServiceConfig </I>will always have to be bigger than the 
size of a QUERY_SERVICE_CONFIG structure because the function copies all 
the service's string data into the buffer immediately after 
copying the fixed-size data structure. The PTSTR members will point to memory addresses inside this buffer.</p>

<p>Once you have the service's current configuration, you can change it 
by calling the following:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
BOOL ChangeServiceConfig(
   SC_HANDLE hService, 
   DWORD     dwServiceType,
   DWORD     dwStartType, 
   DWORD     dwErrorControl, 
   PCTSTR    pszPathName,
   PCTSTR    pszLoadOrderGroup,
   PDWORD    pdwTagId,
   PCTSTR    pszDependencies,
   PCTSTR    pszUserName,
   PCTSTR    pszUserPswd,
   PCTSTR    pszDisplayName);
</pre></td></tr></table>
</p>

<p>As you can see, these parameters are practically identical to those 
passed to <I>CreateService</I>. The differences are that you cannot change the 
service's internal name and that the display name is the last parameter. When you 
use <I>ChangeServiceConfig</I>, the changes do not take effect until the service stops.</p>

<p>In addition to providing <I>QueryServiceConfig 
</I>and <I>ChangeServiceConfig</I>, Windows offers the 
<I>QueryServiceConfig2 </I>and <I>ChangeServiceConfig2 
</I>functions, which allow you to get and set a service's description and failure actions. 
Customers have long desired both of these features, and it's nice to see 
Microsoft add them to Windows 2000.</p>

<p>A service's description is simply a string (limited to 1024 characters) 
that describes the service. This string appears in the Services snap-in and really 
helps administrators understand the purpose of each service installed and running 
on the system. You are strongly encouraged to add descriptions when you add 
a service to the SCM's database.</p>

<p>Using failure actions, an administrator can tell the system what action 
to take when a service fails. (A service fails if its process dies without the 
service setting its state to SERVICE_STOPPED.) An administrator can have the 
SCM automatically restart the service, run an application, or reboot the 
computer. For more information about <I>QueryServiceConfig2 
</I>and <I>ChangeServiceConfig2</I>, please see the Platform SDK documentation.</p>

</BODY>
</HTML>




