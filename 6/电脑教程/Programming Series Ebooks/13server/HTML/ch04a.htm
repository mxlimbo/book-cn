<HTML>
<HEAD>
<TITLE>Chapter 4 -- Service Control Programs</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch03i.htm">[Previous]</A> <A HREF="ch04b.htm">[Next]</A><P>


<font size="+3">Chapter 4</font>

<A NAME="64"><H1>Service Control Programs</H1></A>
<p>As you learned in <A HREF="ch03a.htm">Chapter 3</A>, a Service Control Program (SCP) is an 
application that communicates with a Service Control Manager (SCM) running on 
the local machine or on a remote machine. I usually think of an SCP as an 
application that controls services by starting, stopping, pausing, or continuing 
them. However, an SCP can do much more: it can manipulate a SCM's database 
by adding services, removing services, and enumerating the installed services. 
The SCP can also change a service's configuration. In this chapter, I'll examine 
the various ways an SCP can communicate with the SCM. Note that the SCM 
can also be used to start and stop device drivers. Many of the functions 
discussed in this chapter apply to both services and device drivers; however, I will 
concentrate on services and avoid any discussion applying to device drivers.</p>

<p>When you write a service, you typically also create an application 
that administrators use to control that service. This administrative application 
should control the service by using the various functions described throughout 
this chapter. This application should also help the administrator deal with 
other aspects of the service, such as configuring it (described in <A HREF="ch05a.htm">Chapter 5</A>) and 
publishing it in Active Directory. Ideally, this administration application is 
implemented as a snap-in for the Microsoft Management Console (MMC) or with 
a Web-based console.</p>

<p>The first step in communicating with the SCM of a machine is to 
call <I>OpenSCManager</I>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
SC_HANDLE OpenSCManager(
   PCTSTR pszMachineName,
   PCTSTR pszDatabaseName,
   DWORD  dwDesiredAccess);
</pre></td></tr></table>
</p>

<p>This function establishes a communication channel with the SCM on 
the machine identified by the <I>pszMachineName 
</I>parameter; pass NULL to open the SCM on the local machine. The 
<I>pszDatabaseName </I>parameter identifies which database to open; 
you should always pass either SERVICES_ACTIVE_DATABASE or 
NULL for this parameter. The <I>dwDesiredAccess </I>
parameter tells the function what you intend to do with the SCM database. Table 4-1 
indicates what access rights are available.</p>

<p><b>Table 4-1.</b> <i>Access right values for</i> OpenSCManager'<i>s</i> dwDesiredAccess <i>parameter that specify access to the SCM</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Access Rights  </th>
<th>Description  </th></tr>
<tr>
<td valign="top">SC_MANAGER_ALL_ACCESS  </td>
<td valign="top">Includes STANDARD_RIGHTS_REQUIRED in addition to all the access types listed in this table.  </td></tr>
<tr>
<td valign="top">SC_MANAGER_CONNECT  </td>
<td valign="top">Allows connecting to the SCM. This access is always implied, even if not explicitly specified.  </td></tr>
<tr>
<td valign="top">SC_MANAGER_CREATE_SERVICE   </td>
<td valign="top">Enables calling of <I>CreateService</I> to add a service to the SCM database.  </td></tr>
<tr>
<td valign="top">SC_MANAGER_ENUMERATE_SERVICE  </td>
<td valign="top">Enables calling of <I>EnumServicesStatus </I>to get the list of services in the SCM database and each service's status.  </td></tr>
<tr>
<td valign="top">SC_MANAGER_LOCK   </td>
<td valign="top">Enables calling of <I>LockServiceDatabase</I> to stop the SCM from starting any more services.  </td></tr>
<tr>
<td valign="top">SC_MANAGER_QUERY_LOCK_STATUS  </td>
<td valign="top">Enables calling of <I>QueryServiceLockStatus </I>to find out which user (if any) has locked the SCM database.  </td></tr>
</table></p>


<p>Windows secures the SCM by providing the following default access:</p>

<UL>
<p><li>Administrators have full access to the SCM.</li></p>

<p><li>LocalSystem and Everyone have SC_MANAGER_CONNECT, 
SC_MANAGER_ENUMERATE_SERVICE, and 
SC_MANAGER_QUERY_LOCK_STATUS access to the SCM.</li></p>
</UL>
 
<p><I>OpenSCManager </I>returns an SC_HANDLE that you pass to other 
functions so that you can manipulate the SCM's database. When you are 
finished accessing the SCM database, you must close the handle by passing it 
to <I>CloseServiceHandle</I>:</p>

<p>
<table cellpadding=5 width="95%"><tr><td><pre>
BOOL CloseServiceHandle(SC_HANDLE hSCManager);
</pre></td></tr></table>
</p>

</BODY>
</HTML>




