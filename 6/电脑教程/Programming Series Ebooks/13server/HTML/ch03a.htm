<HTML>
<HEAD>
<TITLE>Chapter 3 -- Service Applications</TITLE>
<link rel="STYLESHEET" type="text/css" href="prosrvwin.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch02f.htm">[Previous]</A> <A HREF="ch03b.htm">[Next]</A><P>


<font size="+3">Chapter 3</font>

<A NAME="40"><h1>Service Applications</H1></A>
<p>The Microsoft Windows operating system offers various facilities that 
make implementing the server-side portion of a client-server application easier. As 
you know, a server is a Windows application that performs server-side 
duties. Microsoft recommends that server applications be implemented as 
<I>services</I>. In fact, the Microsoft BackOffice Logo program 
<I>requires </I>that server applications be implemented as services.</p>

<p>A service is a normal Windows application containing additional 
infrastructure that enables it to receive special treatment by the operating 
system&#8212;for example, the ability to be remotely administered, allowing an administrator 
to start or stop the application from a remote machine. By turning your 
server application into a service, you'll get this and other features for free. This 
chapter describes what a service application is, how to design a service 
application, and what additional facilities the operating system offers to services.</p>

<p>Out of the box, Windows includes a number of services. Table 3-1 
lists some of the services installed on my machine running Microsoft Windows 
2000 and the name of the executable files containing the code for the services.</p>

<p><b>Table 3-1.</b> <i>Services and associated executable files</i></p>

<p>
<table cellpadding=5 width="95%">
<tr> 
<th>Service Name   </th>
<th>Description  </th>
<th>Executable Name  </th></tr>
<tr>
<td valign="top">Alerter  </td>
<td valign="top">Notifies users and computers of administrative alerts  </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">ClipBook   </td>
<td valign="top">Allows pages to be seen by remote ClipBook viewers  </td>
<td valign="top">ClipSrv.exe  </td></tr>
<tr>
<td valign="top">Computer Browser </td>
<td valign="top">Maintains a list of computers on your network  </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">DHCP Client  </td>
<td valign="top">Registers and updates IP addresses and DNS names    </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">Distributed Transaction Coordinator</td>
<td valign="top">Coordinates transactions distributed across two or more databases, message queues, file systems, or other transaction-protected resource managers    </td>
<td valign="top">MSDTC.exe  </td></tr>
<tr>
<td valign="top">Event Log  </td>
<td valign="top">Logs event messages issued by programs and Windows  </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">Messenger  </td>
<td valign="top">Sends and receives messages transmitted by administrators or the Alerter service  </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">Net Logon   </td>
<td valign="top">Supports pass-through authentication of account logon events for computers in a domain    </td>
<td valign="top">LSASS.exe  </td></tr>
<tr>
<td valign="top">Plug and Play  </td>
<td valign="top">Manages device installation and configuration, and notifies programs of device changes   </td>
<td valign="top"> Services.exe </td></tr>
<tr>
<td valign="top">Remote Procedure Call (RPC)</td>
<td valign="top">Provides the endpoint mapper and other miscellaneous RPC services  </td>
<td valign="top">SvcHost.exe  </td></tr>
<tr>
<td valign="top">Remote Procedure Call (RPC) Locator </td>
<td valign="top">Manages the RPC name service database  </td>
<td valign="top">Locator.exe  </td></tr>
<tr>
<td valign="top">Server    </td>
<td valign="top">Provides RPC support and file,  print, and named pipe sharing     </td>
<td valign="top">Services.exe  </td></tr>
<tr>
<td valign="top">Task Scheduler  </td>
<td valign="top">Enables a program to run at a designated time     </td>
<td valign="top">MSTask.exe  </td></tr>
<tr>
<td valign="top">Telephony  </td>
<td valign="top">Provides Telephony API (TAPI) support     </td>
<td valign="top">SvcHost.exe  </td></tr>
<tr>
<td valign="top">Uninterruptible Power Supply </td>
<td valign="top">Manages an uninterruptible power supply (UPS) connected to the computer   </td>
<td valign="top">UPS.exe  </td></tr>
<tr>
<td valign="top">Windows Installer  </td>
<td valign="top">Installs, repairs, and removes software according to instructions contained in .msi files  </td>
<td valign="top">MSIExec.exe  </td></tr>
<tr>
<td valign="top">Windows Management Instrumentation </td>
<td valign="top">Provides system management information  </td>
<td valign="top">WinMgmt.exe  </td></tr>
<tr>
<td valign="top">Workstation   </td>
<td valign="top">Provides network connections and communications   </td>
<td valign="top">Services.exe  </td></tr>
</table></p>


<p>Microsoft produces many more services than the ones I listed in Table 
3-1: Microsoft Exchange Server, Microsoft Merchant Server, and Microsoft 
SQL Server, to name a few. All these server applications are implemented as 
services and are part of Microsoft BackOffice Suite.</p>


<p>First and foremost, a service application is just a 32-bit or 64-bit 
executable, so everything you already know about DLLs, structured exception 
handling, memory-mapped files, virtual memory, device I/O, thread-local 
storage, thread synchronization, Unicode, and other Windows facilities is available to 
a service. And this means that converting an existing server application into a 
service should be relatively easy and straightforward for you.</p>


<p>
<div class="note"><blockquote><b>NOTE</b><hr>
The Microsoft Windows 2000 Resource Kit contains a utility 
named SrvAny.exe that allows an existing application to be started 
remotely, just like a true service. However, SrvAny does not allow an 
application to be remotely administered in any other way, and therefore should 
be used as a short-term solution only. You are strongly encouraged 
to modify your application's code to turn it into a full-fledged service 
and ignore the SrvAny utility altogether.
</blockquote></div>
</p>


<p>Second, you need to know that a service should have absolutely no 
user interface. Most services run on a server machine locked away in a closet 
somewhere. So if your service presented any user interface elements, such as 
message boxes, no user would be in front of the machine to see and then dismiss 
them. And, as you'll see later in this chapter, any windows created would 
probably appear on a window station or desktop different from the one the user was 
sitting in front of, and thus the message wouldn't be visible to the user 
anyway. Because a service won't have a user interface, it doesn't matter whether 
you choose to implement your service as a graphical user interface (GUI) 
application (with (<I>w)WinMain </I>as its entry point) or as a console user interface 
(CUI) application (with <I>(w)main </I>as its entry point).</p>


<p>If a service is not supposed to present any user interface, how do 
you configure the service? How can you start and stop a service? How can the 
service issue warnings or error messages? How can the service report statistical 
data about its performance? The answer to all these questions is that a service 
can be remotely administered. Windows offers a number of administrative tools 
that allow a service to be managed from other machines connected on the 
network so that it is not necessary for someone to physically check (or even have 
physical access to) the computer running the service. You are probably already 
familiar with many of these tools: the Microsoft Management Console 
(MMC), with its Services, Event Viewer, and System Monitor snap-ins; the registry 
editor; and the Net.exe command-line tool.</p>


<p>These facilities are provided by Windows to simplify the development 
effort of the service writer. They also give an administrator a consistent way to 
manage machines remotely and locally. Note that these facilities are not 
exclusive to services: any application (or device driver) can take advantage of them. 
These facilities are discussed throughout the chapters of this book.</p>

</BODY>
</HTML>




