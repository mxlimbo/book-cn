<HTML>
<HEAD>
<TITLE>GetExceptionCode</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch24e.htm">[Previous]</A> <A HREF="ch24g.htm">[Next]</A><P>

<A NAME="327"><h1><i>GetExceptionCode</i></h1></A>
<p>Often an exception filter must analyze the situation before it can
determine which value to return. For example, your handler might know
what to do if a divide by 0 exception occurs, but it might not know how
to handle a memory access exception. The exception filter has the
responsibility for examining the situation and returning the
appropriate value.</p> 

<p>This code demonstrates a method for identifying the kind of exception
that has occurred:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
_ _try {
   x = 0;
   y = 4 / x;
}

_ _except ((GetExceptionCode() == EXCEPTION_INT_DIVIDE_BY_ZERO) ?
   EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {
   // Handle divide by zero exception.
}
</pre></td></tr></table></p>

<p>The <i>GetExceptionCode</i> intrinsic function returns a value
identifying the kind of exception that has occurred:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
DWORD GetExceptionCode();
</pre></td></tr></table></p>

<p>The following list of all predefined exceptions and their meanings
is adapted from the Platform SDK documentation. The exception
identifiers can be found in the WinBase.h file. I have grouped the
exceptions together by category.</p>

<A NAME="328"><H2>Memory-Related Exceptions</H2></A>

<ul>
<p><li><b>EXCEPTION_ACCESS_VIOLATION</b> The thread tried to read from or
write to a virtual address for which it doesn't have the
appropriate access. This is the most common exception.</li></p>

<p><li><b>EXCEPTION_DATATYPE_MISALIGNMENT</b> The thread tried to read or
write data that is misaligned on hardware that doesn't provide
alignment. For example, 16-bit values must be aligned on 2-byte
boundaries, 32-bit values on 4-byte boundaries, and so on.</li></p>

<p><li><b>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</b> The thread tried to access
an array element that is out of bounds, and the underlying hardware
supports bounds checking.</li></p>

<p><li><b>EXCEPTION_IN_PAGE_ERROR</b> A page fault couldn't be
satisfied because the file system or a device driver returned a read
error.</li></p>

<p><li><b>EXCEPTION_GUARD_PAGE</b> A thread attempted to access a page of
memory that has the PAGE_GUARD protection attribute. The page is made
accessible, and an EXCEPTION_GUARD_PAGE exception is raised.</li></p>

<p><li><b>EXCEPTION_STACK_OVERFLOW</b> The thread has used all of its
allotted stack.</li></p>

<p><li><b>EXCEPTION_ILLEGAL_INSTRUCTION</b> A thread executed an invalid
instruction. This exception is defined by the specific CPU
architecture; executing an invalid instruction can cause a trap error
on different CPUs.</li></p>

<p><li><b>EXCEPTION_PRIV_INSTRUCTION</b> The thread tried to execute an
instruction whose operation is not allowed in the current machine
mode.</li></p>
</ul>

<A NAME="329"><H2>Exception-Related Exceptions</H2></A>

<ul>
<p><li><b>EXCEPTION_INVALID_DISPOSITION</b> An exception filter returned
a value other than EXCEPTION_EXECUTE_HANDLER,
EXCEPTION_CONTINUE_SEARCH, or EXCEPTION_CONTINUE_EXECUTION.</li></p>

<p><li><b>EXCEPTION_NONCONTINUABLE_EXCEPTION</b> An exception filter
returned EXCEPTION_CONTINUE_EXECUTION in response to a noncontinuable
exception.</li></p>
</ul>

<A NAME="330"><H2>Debugging-Related Exceptions</H2></A>

<ul>
<p><li><b>EXCEPTION_BREAKPOINT</b> A breakpoint was encountered.</li></p>

<p><li><b>EXCEPTION_SINGLE_STEP</b> A trace trap or other single-instruction mechanism signaled that one instruction has been
executed.</li></p>

<p><li><b>EXCEPTION_INVALID_HANDLE</b> A function was passed an invalid
handle.</li></p>
</ul>

<A NAME="331"><H2>Integer-Related Exceptions</H2></A>

<ul>
<p><li><b>EXCEPTION_INT_DIVIDE_BY_ZERO</b> The thread tried to divide an
integer value by an integer divisor of 0.</li></p>

<p><li><b>EXCEPTION_INT_OVERFLOW</b> The result of an integer operation
caused a carry out of the most significant bit of the result.</li></p>
</ul>

<A NAME="332"><H2>Floating Point_Related Exceptions</H2></A>

<ul>
<p><li><b>EXCEPTION_FLT_DENORMAL_OPERAND</b> One of the operands in a
floating-point operation is denormal. A denormal value is one that is
too small to represent a standard floating-point value.</li></p>

<p><li><b>EXCEPTION_FLT_DIVIDE_BY_ZERO</b> The thread tried to divide a
floating-point value by a floating-point divisor of 0.</li></p>

<p><li><b>EXCEPTION_FLT_INEXACT_RESULT</b> The result of a floating-point operation can't be represented exactly as a decimal fraction.</li></p>

<p><li><b>EXCEPTION_FLT_INVALID_OPERATION</b> Represents any
floating-point exception not included in this list.</li></p>

<p><li><b>EXCEPTION_FLT_OVERFLOW</b> The exponent of a floating-point
operation is greater than the magnitude allowed by the corresponding
type.</li></p>

<p><li><b>EXCEPTION_FLT_STACK_CHECK</b> The stack overflowed or
underflowed as the result of a floating-point operation.</li></p>

<p><li><b>EXCEPTION_FLT_UNDERFLOW</b> The exponent of a floating-point
operation is less than the magnitude allowed by the type.</li></p>
</ul>

<p>The <i>GetExceptionCode</i> intrinsic function can be called only in
an exception filter (between the parentheses following <i>_ _except</i>)
or inside an exception handler. The following code is legal:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
_ _try {
   y = 0;
   x = 4 / y;
}

_ _except (
   ((GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION) ||
    (GetExceptionCode() == EXCEPTION_INT_DIVIDE_BY_ZERO)) ?
   EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {

   switch (GetExceptionCode()) {
      case EXCEPTION_ACCESS_VIOLATION:
         // Handle the access violation.

         <img src="images/grayvellip.JPG" width=3 height=13 border="0">

         break;

      case EXCEPTION_INT_DIVIDE_BY_ZERO:
         // Handle the integer divide by 0.

         <img src="images/grayvellip.JPG" width=3 height=13 border="0">

         break;
   }
}
</pre></td></tr></table></p>

<p>However, you cannot call <i>GetExceptionCode</i> from inside an
exception filter function. To help you catch such errors, the compiler
will produce a compilation error if you try to compile the following
code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
_ _try {
   y = 0;
   x = 4 / y;
}

_ _except (CoffeeFilter()) {

   // Handle the exception.

   <img src="images/grayvellip.JPG" width=3 height=13 border="0">

}

LONG CoffeeFilter (void) {
   // Compilation error: illegal call to GetExceptionCode.
   return((GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION) ?
      EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH);
}
</pre></td></tr></table></p>

<p>You can get the desired effect by rewriting the code this way:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
_ _try {
   y = 0;
   x = 4 / y;
}

_ _except (CoffeeFilter(GetExceptionCode())) {

   // Handle the exception.

   <img src="images/grayvellip.JPG" width=3 height=13 border="0">

}

LONG CoffeeFilter (DWORD dwExceptionCode) {
   return((dwExceptionCode == EXCEPTION_ACCESS_VIOLATION) ?
      EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH);
}
</pre></td></tr></table></p>

<p>Exception codes follow the rules for error codes as defined inside
the WinError.h file. Each DWORD is divided as shown in Table 24-1.</p>

<p><!-- CAPTION --><b>Table 24-1.</b> <i>The composition of an error code</i><!-- /CAPTION --></P> 

<p><table cellpadding="5" width="95%">
<tr>
<th>Bits</th>
<th>31-30</th>
<th>29</th>
<th>28</th>
<th>27-16</th>
<th>15-0</th>
</tr> 
<tr>
<th>Contents</th>
<td valign="top">Severity</td>
<td valign="top">Microsoft/customer</td>
<td valign="top">Reserved</td>
<td valign="top">Facility code</td>
<td valign="top">Exception code</td>
</tr> 
   
<tr>
<th>Meaning</th>
<td valign="top">0=Success<br>
1=Informational<br>
2=Warning<br>
3=Error<br></td>
<td valign="top">0=Microsoft-defined code<br>
1=customer-defined code</td>
<td valign="top">Must be 0</td>
<td valign="top">Microsoft-defined (see table below)</td>
<td valign="top">Microsoft/customer-defined</td>
</tr>


</table></p>

 
<p>Currently, Microsoft defines the following facility codes. 
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th>Facility Code</th>
<th>Value</th>
<th>Facility Code</th>
<th>Value</th>
</tr>
<tr>
<td valign="top">FACILITY_NULL</td>
<td valign="top">0</td>
<td valign="top">FACILITY_CONTROL</td>
<td valign="top">10</td>
</tr>
<tr>
<td valign="top">FACILITY_RPC</td>
<td valign="top">1</td>
<td valign="top">FACILITY_CERT</td>
<td valign="top">11</td>
</tr>
<tr>
<td valign="top">FACILITY_DISPATCH</td>
<td valign="top">2</td>
<td valign="top">FACILITY_INTERNET</td>
<td valign="top">12</td>
</tr>
<tr>
<td valign="top">FACILITY_STORAGE</td>
<td valign="top">3</td>
<td valign="top">FACILITY_MEDIASERVER</td>
<td valign="top">13</td>
</tr>
<tr>
<td valign="top">FACILITY_ITF</td>
<td valign="top">4</td>
<td valign="top">FACILITY_MSMQ</td>
<td valign="top">14</td>
</tr>
<tr>
<td valign="top">FACILITY_WIN32</td>
<td valign="top">7</td>
<td valign="top">FACILITY_SETUPAPI</td>
<td valign="top">15</td>
</tr>
<tr>
<td valign="top">FACILITY_WINDOWS</td>
<td valign="top">8</td>
<td valign="top">FACILITY_SCARD</td>
<td valign="top">16</td>
</tr>
<tr>
<td valign="top">FACILITY_SECURITY</td>
<td valign="top">9</td>
<td valign="top">FACILITY_COMPLUS</td>
<td valign="top">17</td>
</tr>
</table>
</p>
<p>
So here's what we get if we pick apart the EXCEPTION_ACCESS_VIOLATION exception code. Looking up EXCEPTION_ACCESS_VIOLATION in WinBase.h, we see that it has a value of 0xc0000005:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
   C    0    0    0    0    0    0    5   (hexadecimal)
1100 0000 0000 0000 0000 0000 0000 0101   (binary)
</pre></td></tr></table></p>

<p>Bits 30 &amp; 31 are both set to 1, indicating that an access
violation is an error (the thread cannot continue running). Bit 29 is
0, meaning that Microsoft has defined this code. Bit 28 is 0 because it
is reserved for future use. Bits 16 through 27 are 0, indicating
FACILITY_NULL (an access violation can happen anywhere in the system;
it is not an exception that only occurs when using certain facilities).
Bits 0 through 15 contain the value 5, which just means that Microsoft
defined an access violation as code 5.</p>

</BODY>
</HTML>






