<HTML>
<HEAD>
<TITLE>Memory-Mapped Files and Coherence</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch17e.htm">[Previous]</A> <A HREF="ch17g.htm">[Next]</A><P>

<A NAME="226"><H1>Memory-Mapped Files and Coherence</H1></A>

<p>The system allows you to map multiple views of the same data of a
file. For example, you can map the first 10 KB of a file into a view
and then map the first 4 KB of that same file into a separate view. As
long as you are mapping the same file-mapping object, the system
ensures that the viewed data is <i>coherent</i>. For example, if your
application alters the contents of the file in one view, all other
views are updated to reflect the changes. This is because even though
the page is mapped into the process's virtual address space more
than once, the system really has the data in only a single page of RAM.
If multiple processes are mapping views of a single data file, the data
is still coherent because there is still only one instance of each page
of RAM within the data file&#8212;it's just that the pages of RAM
are mapped into multiple process address spaces.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Windows allows you to create several file-mapping objects that are backed by a
single data file. Windows does <i>not</i> guarantee that views of these
different file-mapping objects will be coherent. It guarantees only
that multiple views of a single file-mapping object will be
coherent.</blockquote></div></p>

<p>When we're working with files, however, there is no reason why
another application can't call <i>CreateFile</i> to open the same
file that another process has mapped. This new process can then read
from and write to the file using the <i>ReadFile</i> and <i>
WriteFile</i> functions. Of course, whenever a process makes these
calls, it must be either reading file data from or writing file data to
a memory buffer. This memory buffer must be one the process itself
created, <i>not</i> the memory that is being used by the mapped files.
Problems can arise when two applications have opened the same file: one
process can call <i>ReadFile</i> to read a portion of the file, modify
the data, and write it back out using <i>WriteFile</i> without the
file-mapping object of the second process being aware of the first
process's actions. For this reason, it is recommended that when you
call <i>CreateFile</i> for files that will be memory mapped, you
specify 0 as the value of the <i>dwShareMode</i> parameter. Doing so
tells the system that you want exclusive access to the file and that no
other process can open it.</p>

<p>Read-only files do not have coherence problems, making them good
candidates for memory-mapped files. Memory-mapped files should never be
used to share writable files over a network because the system cannot
guarantee coherent views of the data. If someone's computer updates
the contents of the file, someone else's computer with the original
data in memory will not know that the information has changed.</p>

</BODY>
</HTML>






