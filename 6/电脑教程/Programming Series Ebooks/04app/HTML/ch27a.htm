<html>
<head>
<title>Chapter 27 -- The Hardware Input Model and Local Input State</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<body bgcolor="#ffffff" text="#000000">
<A HREF="ch26g.htm">[Previous]</A> <A HREF="ch27b.htm">[Next]</A><P>
<font size="+3">Chapter 27</font>
<A NAME="359"><H1>The Hardware Input Model and Local Input State</H1></A>

<p>In this chapter, I'll discuss the system's hardware input
model. Specifically, we'll examine how keystrokes and mouse events enter the system and get dispatched to the appropriate window procedure. One of Microsoft's main goals for the input model was to ensure that one thread's action could not adversely affect another thread's actions. Here's an example from 16-bit Windows: If a task entered an infinite loop, all tasks were hung and could no longer respond to the user. The user had to reboot the computer. This gave too much control to a single task. Robust operating systems, such as Windows 2000 and Windows 98, do not allow a hung thread to prevent other threads in the system from receiving hardware input.</p>

</BODY>
</HTML>






