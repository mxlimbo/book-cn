<HTML>
<HEAD>
<TITLE>Injecting Code with CreateProcess</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch22h.htm">[Previous]</A> <A HREF="ch22j.htm">[Next]</A><P>

<A NAME="296"><H1>Injecting Code with <i> CreateProcess</i></H1></A>
<p>If your process is spawning the process into which you want to
inject code, things get a little easier. For one, your process (the
parent process) can create the new process suspended. This allows you
to alter the child process's state without affecting its execution
since it hasn't started executing anything yet. But the parent
process also gets a handle to the child process's primary thread.
Using this handle, you can alter what code the thread executes. You can
solve the problem mentioned in the previous section since you can set
the thread's instruction pointer to execute the code in the
memory-mapped file.</p>
 
<p>Here is one way for your process to control what code the child
process's primary thread executes:</p>

<ol>
<p><li> Have your process spawn the child process suspended.</li></p>

<p><li> Retrieve the primary thread's starting memory address from
the .exe module's file header.</li></p>

<p><li> Save the machine instructions at this memory address.</li></p>

<p><li> Force some hand-coded machine instructions at this address. The
instructions should call <i>LoadLibrary</i> to load a DLL.</li></p>

<p><li> Resume the child process's primary thread so that this code
executes.</li></p>

<p><li> Restore the original instructions back into the starting
address.</li></p>

<p><li> Let the process continue execution from the starting address as
if nothing had happened.</li></p>
</ol>

<p>Steps 6 and 7 above are tricky to get right because you have to
change the code that you are currently executing. It is possible,
however&#8212;I've seen it done.</p>
 
<p>This technique offers a lot of benefits. First, it gets the address
space before the application executes. Second, it works on both Windows
98 and Windows 2000. Third, since you're not a debugger, you can
easily debug the application with the injected DLL. And finally, this
technique works on both console and GUI applications.</p>
 
<p>Of course, this technique also has some disadvantages. You can inject
the DLL only if your code is the parent process. And, of course, this
technique is not CPU-independent; you must make modifications for
different CPU platforms.</p>

</BODY>
</HTML>






