<HTML>
<HEAD>
<TITLE>Placing a Process in a Job</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05b.htm">[Previous]</A> <A HREF="ch05d.htm">[Next]</A><P>

<A NAME="69"><H1>Placing a Process in a Job</H1></A>

<p>OK, that's it for setting and querying restrictions. Now
let's get back to my <i>StartRestrictedProcess</i> function. After
I place some restrictions on the job, I spawn the process that I intend
to place in the job by calling <i>CreateProcess</i>. However, notice
that I use the CREATE_SUSPENDED flag when calling <i>CreateProcess</i>.
This creates the new process but doesn't allow it to execute any
code. Since the <i>StartRestrictedProcess</i> function is being
executed from a process that is not part of a job, the child process
will also not be part of a job. If I were to allow the child process to
immediately start executing code, it would run out of my sandbox and
could successfully do things that I want to restrict it from doing. So
after I create the child process and before I allow it to start
running, I must explicitly place the process in my newly created job by
calling the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL AssignProcessToJobObject(
   HANDLE hJob, 
   HANDLE hProcess); 
</pre></td></tr></table></p>

<p>This function tells the system to treat the process (identified by
<i>hProcess</i>) as part of an existing job (identified by <i>
hJob</i>). Note that this function allows only a process that is not
assigned to any job to be assigned to a job. Once a process is part of
a job, it cannot be moved to another job and it cannot become jobless
(so to speak). Also note that when a process that is part of job spawns
another process, the new process is automatically made part of the
parent's job. However, you can alter this behavior in the following
ways:</p>

<ul>
<p><li>Turn on the JOB_OBJECT_BREAKAWAY_OK flag in JOBOBJECT_BASIC_LIMIT_INFORMATION's <i>LimitFlags</i> member to tell the
system that a newly spawned process can execute outside the job. To
make this happen, you must call <i>CreateProcess</i> with the new
CREATE_BREAKAWAY_FROM_JOB flag. If you call <i>CreateProcess</i> with the
CREATE_BREAKAWAY_FROM_JOB flag but the job does not have the
JOB_OBJECT_BREAKAWAY_OK limit flag turned on, <i>CreateProcess</i>
fails. This mechanism is useful if the newly spawned process also
controls jobs.</li></p>

<p><li>Turn on the JOB_OBJECT_SILENT_BREAKAWAY_OK flag in the
JOBOBJECT_BASIC_LIMIT_INFORMATION's <i>LimitFlags</i> member. This
flag also tells the system that newly spawned processes should not be
part of the job. However, there is no need to pass any additional flags
to <i>CreateProcess</i>. In fact, this flag forces new processes to not
be part of the job. This flag is useful for processes that were
originally designed knowing nothing about job objects.</li></p>
</ul>


<p>As for my <i>StartRestrictedProcess</i> function, after I call <i>
AssignProcessToJobObject</i>, my new process is part of my restricted
job. I then call <i>ResumeThread</i> so that the process's thread
can execute code under the job's restrictions. At this point, I
also close the handle to the thread since I no longer need it.</p>

</BODY>
</HTML>






