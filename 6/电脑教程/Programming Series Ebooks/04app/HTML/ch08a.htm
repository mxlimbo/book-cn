<html>
<head>
<title>Chapter 8 -- Thread Synchronization in User Mode</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch07k.htm">[Previous]</A> <A HREF="ch08b.htm">[Next]</A><P>

<FONT SIZE="+3">Chapter 8</FONT>

<A NAME="110"><H1>Thread Synchronization in User Mode</H1></A>

<p>Microsoft Windows runs best when all of the threads can go about
their business without having to communicate with each other. However,
a thread can rarely act independently all the time. Usually, threads
are spawned to handle some task. When the task is complete, another
thread will probably want to know about it.</p>

<p>All threads in the system must have access to system resources such
as heaps, serial ports, files, windows, and countless others. If one
thread requests exclusive access to a resource, other threads cannot
get their work done. On the flip side, you can't just let any
thread touch any resource at any time. Imagine a thread writing to a
memory block while another thread reads from the same memory block.
This would be analogous to reading a book while someone is changing the
text on the page. The thoughts on the page are all jumbled and nothing
useful comes of it.</p>

<p>Threads need to communicate with each other in two basic
situations:</p>


<ul>
<p><li>When you have multiple threads accessing a shared resource in such
a way that the resource does not become corrupt</li></p>

<p><li>When one thread needs to notify one or more other threads that a
specific task has been completed</li></p>
</ul>

<p>Thread synchronization has many aspects, which I'll discuss
over the next few chapters. The good news is that Windows offers many
facilities to make thread synchronization easy. The bad news is that
anticipating what a bunch of threads might attempt to do at any time is
extremely difficult. Our minds just don't work asynchronously; we
like to think things through in an orderly fashion, one step at a time.
But that's not how a multithreaded environment works.</p>

<p>I first started working with multiple threads around 1992. At
first, I made many programming mistakes and actually published book
chapters and magazine articles that had thread synchronization_related
bugs in them. Today, I'm much more skilled, but hardly perfect, and
I truly believe that everything in this book is bug free (even though I
should know better by now). The only way to get good at thread
synchronization is by doing it. In these chapters, I'll explain how
the system works and show you how to properly synchronize threads, but
you should face the music now: you'll make mistakes as you gain
experience.</p>


</BODY>
</HTML>






