<html>
<head>
<title>Chapter 22 -- DLL Injection and API Hooking</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch21c.htm">[Previous]</A> <A HREF="ch22b.htm">[Next]</A><P>


<font size="+3">Chapter 22</font>

<A NAME="285"><H1>DLL Injection and API Hooking</H1></A>

<p>In Microsoft Windows, each process gets its own private address
space. When you use pointers to reference memory, the value of the
pointer refers to a memory address in your own process's address
space. Your process cannot create a pointer that references memory
belonging to another process. So if your process has a bug that
overwrites memory at a random address, the bug can't affect the
memory used by another process.</p>


<p>
<div class="note"><blockquote><b>Windows 98</b><hr>
Processes running under Windows 98 share the 2-GB address space from
0x80000000 through 0xFFFFFFFF. Only memory-mapped files and system
components are mapped into this region. For more information, see
Chapters <a href="ch13a.htm">13</a>, <a href="ch14a.htm">14</a>, and <a href="ch17a.htm">17</a>.
</blockquote></div>
</p>

<p>Separate address spaces are a great advantage for both developers
and users. For developers, the system is more likely to catch wild
memory reads and writes. For users, the operating system is more robust
because one application cannot bring down another process or the
operating system. Of course, this robustness comes at a price: it is
much harder to write applications that can communicate with or
manipulate other processes.</p>

<p>Situations that require breaking through process boundary walls to
access another process's address space include the following:</p>

<ul>
<p><li>When you want to subclass a window created by another
process</li></p>

<p><li>When you need debugging aids (for example, when you need to
determine which DLLs another process is using)</li></p>

<p><li>When you want to hook other processes</li></p>
</ul>

<p>In this chapter, I'll show you several mechanisms you can use to
inject a DLL into another process's address space. Once your DLL
code is in another address space, you can wreak unlimited havoc on the
other process. This should scare you&#8212;always think twice about
whether this is something you really need to do.</p>

</BODY>
</HTML>






