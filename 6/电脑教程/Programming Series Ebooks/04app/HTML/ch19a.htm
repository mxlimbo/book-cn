<html>
<head>
<title>Chapter 19 -- Dynamic-Link Libraries</title>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch18e.htm">[Previous]</A> <A HREF="ch19b.htm">[Next]</A><P>


<font size="+3">Chapter 19</font>

<A NAME="250"><H1>DLL Basics</H1></A>

<p>Dynamic-link libraries (DLLs) have been the cornerstone of
Microsoft Windows since the first version of the operating system. All
the functions in the Windows API are contained in DLLs. The three most
important DLLs are Kernel32.dll, which contains functions for managing
memory, processes, and threads; User32.dll, which contains functions
for performing user-interface tasks such as window creation and message
sending; and GDI32.dll, which contains functions for drawing graphical
images and displaying text.</p>

<p>Windows also comes with several other DLLs that offer functions for
performing more specialized tasks. For example, AdvAPI32.dll contains
functions for object security, registry manipulation, and event
logging; ComDlg32.dll contains the common dialog boxes (such as File
Open and File Save); and ComCtl32.DLL supports all of the common window
controls.</p>

<p>In this chapter, you'll learn how to create DLLs for your own
applications. Here are some reasons for using DLLs:</p>

<ul>
<p><li><b>They extend the features of an application.</b> Since DLLs can
be dynamically loaded into a process's address space, an
application can determine at run time what actions to perform and then
load the code to execute those actions on demand. For example, a DLL is
useful when one company creates a product and wants to allow other
companies to extend or enhance the product.</li></p>

<p><li><b>They can be written in many programming languages.</b>  You can
choose the best language for the job at hand. Perhaps your
application's user interface is best programmed with Microsoft
Visual Basic, but the business logic is better handled by C++. The
system allows a Visual Basic program to load a C++ DLL, a Cobol DLL, a
Fortran DLL, and so on.</li></p>

<p><li><b>They simplify project management.</b> If different groups work
on different modules during the development process, the project is
easier to manage. However, an application should ship with as few files
as possible. I know of one company that shipped a product with one
hundred DLLs&#8212;up to five DLLs per programmer. The application's
initialization time was horribly slow because the system had to open
one hundred disk files before the program could do anything.</li></p>

<p><li><b>They help conserve memory.</b> If two or more applications use
the same DLL, the DLL has its pages in RAM once and the pages are
shared by all of the applications. The C/C++ run-time library is a
perfect example. Many applications use this library. If all these
applications link to the static library, the code for functions such as
<i>sprintf</i>, <i>strcpy</i>, <i>malloc</i>, and so on exist in memory
multiple times. However, if all these applications link to the DLL
C/C++ run-time library, the code for these functions is in memory only
once, which means that memory is used more efficiently.</li></p>

<p><li><b>They facilitate resource sharing.</b> DLLs can contain
resources such as dialog box templates, strings, icons, and bitmaps.
Multiple applications can use DLLs to share these resources.</li></p>

<p><li><b>They facilitate localization.</b> Applications frequently use
DLLs to localize themselves. For example, an application that contains
only code and no user interface components can load the DLL containing
localized user interface components.</li></p>

<p><li><b>They help resolve platform differences.</b> The various
versions of Windows offer different functions. Frequently, developers
want to call new functions if they exist on the host version. However,
if your source code contains a call to a new function and your
application is about to run on a version of Windows that doesn't
offer that function, the operating system loader will refuse to run
your process. This is true even if you never actually call the
function. If you keep these new functions in a DLL, however,
applications can load on an older version of Windows. Of course, you
still cannot successfully call the function.</li></p>

<p><li><b>They can serve special purposes.</b> Windows makes certain
features available only to DLLs. For example, you can install certain
hooks (set using <i>SetWindowsHookEx</i> and <i>SetWinEventHook</i>)
only if the hook notification function is contained in a DLL. You can
extend Windows Explorer's shell by creating COM objects that must
live inside a DLL. The same is true for ActiveX controls that can be
loaded by a Web browser to create rich Web pages.</li></p>
</ul>

</BODY>
</HTML>






