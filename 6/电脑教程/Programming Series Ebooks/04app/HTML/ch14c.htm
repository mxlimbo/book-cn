<HTML>
<HEAD>
<TITLE>Virtual Memory Status</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch14b.htm">[Previous]</A> <A HREF="ch14d.htm">[Next]</A><P>

<A NAME="186"><H1>Virtual Memory Status</H1></A>

<p>A Windows function called <i>GlobalMemoryStatus</i> retrieves
dynamic information about the current state of memory:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
VOID GlobalMemoryStatus(LPMEMORYSTATUS pmst);
</pre>
</td></tr></table></p>

<p>I think that this function is poorly named&#8212;<i>GlobalMemoryStatus</i> implies that the function is somehow related to the global heaps in 16-bit Windows. I think that <i>GlobalMemoryStatus</i> should have been called something like <i>VirtualMemoryStatus</i> instead.</p>

<p>When you call <i>GlobalMemoryStatus</i>, you must pass the address of a
MEMORYSTATUS structure. The MEMORYSTATUS data structure is shown below.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
typedef struct _MEMORYSTATUS {
   DWORD dwLength;
   DWORD dwMemoryLoad;
   SIZE_T dwTotalPhys;
   SIZE_T dwAvailPhys;
   SIZE_T dwTotalPageFile;
   SIZE_T dwAvailPageFile;
   SIZE_T dwTotalVirtual;
   SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
</pre>
</td></tr></table></p>

<p>Before calling <i>GlobalMemoryStatus</i>, you must initialize the <i>dwLength</i> member to the size of the structure in bytes&#8212;that is, the size of a MEMORYSTATUS structure. This initialization allows Microsoft to add members to this structure in future versions of Windows without breaking existing applications. When you call <i>GlobalMemoryStatus</i>, it will initialize the remainder of the structure's members and return. The VMStat sample application in the next section describes the various members and their meanings.</p>

<p>If you anticipate that your application will run on machines with more than 4 GB of RAM or if the total swap file size might be larger than 4 GB, you may want to use the new <i>GlobalMemoryStatusEx</i> function:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL GlobalMemoryStatusEx(LPMEMORYSTATUSEX pmst);
</pre>
</td></tr></table></p>

<p>You must pass to this function the address of the new MEMORYSTATUSEX structure:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
typedef struct _MEMORYSTATUSEX {
   DWORD dwLength;
   DWORD dwMemoryLoad;
   DWORDLONG ullTotalPhys;
   DWORDLONG ullAvailPhys;
   DWORDLONG ullTotalPageFile;
   DWORDLONG ullAvailPageFile;
   DWORDLONG ullTotalVirtual;
   DWORDLONG ullAvailVirtual;
   DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX; 
</pre>
</td></tr></table></p>

<p>This structure is identical to the original MEMORYSTATUS  structure except that all the size members are 64 bits wide, allowing for values greater than 4 GB. The member at the end, <i>ullAvailExtendedVirtual</i>, indicates the size of unreserved memory in the very large memory (VLM) portion of the virtual address space of the calling process. This VLM portion applies only to certain CPU architectures in certain configurations.</p>

<A NAME="187"><H2>The Virtual Memory Status Sample Application</H2></A>

<p>The VMStat application (&quot;14 VMStat.exe&quot;), listed in Figure 14-2, displays a simple dialog box that lists the results of a call to <i>GlobalMemoryStatus</i>. The information inside the dialog box is updated once every second, so you might want to keep the application running while you work with other processes on your system. The source code and resource files for the application can be found in the 14-VMStat directory on the companion CD-ROM. The figure below shows the result of running this program on Windows 2000 using a 128-MB Intel Pentium II machine.</p>

<p>
<img src="images/G14si02.JPG" width=204 height=132 border="0">
</p>

<p>The <i>dwMemoryLoad</i> member (shown as Memory Load) gives a rough estimate of how busy the memory management system is. This number can be anywhere from 0 to 100. The exact algorithm used to calculate this value varies between Windows 98 and Windows 2000. The algorithm is also subject to change in future versions of the operating system. In practice, the value reported by this member variable is useless. </p>

<p>The <i>dwTotalPhys</i> member (shown as TotalPhys) indicates the total number of bytes of physical memory (RAM) that exist. On this 128-MB Pentium II machine, this value is 133,677,056, which is just 540,672 bytes under 128 MB. The reason that <i>GlobalMemoryStatus</i> does not report the full 128 MB is that the system reserves some storage as a nonpaged pool during the boot process. This memory is not even considered available to the kernel. The <i>dwAvailPhys</i> member (shown as AvailPhys) indicates the total number of bytes of physical memory available for allocation.</p>

<p>The <i>dwTotalPageFile</i> member (shown as TotalPageFile) indicates the maximum number of bytes that can be contained in the paging file(s) on your hard disk(s). Although VMStat reported that the paging file is currently 318,574,592 bytes, the system can expand and shrink the paging file as it sees fit. The <i>dwAvailPageFile</i> member (shown as AvailPageFile) indicates that 233,046,016 bytes in the paging file(s) are not committed to any process and are currently available should a process decide to commit any private storage.</p>

<p>The <i>dwTotalVirtual</i> member (shown as TotalVirtual) indicates the total number of bytes that are private in each process's address space. The value 2,147,352,576 is 128 KB short of being exactly 2 GB. The two partitions from 0x00000000 through 0x0000FFFF and from 0x7FFF0000 through 0x7FFFFFFF of inaccessible address space account for the 128-KB difference. If you run VMStat under Windows 98, you'll see that <i>dwTotalVirtual</i> comes back with a value of 2,143,289,344, which is just 4 MB short of being exactly 2 GB. The 4-MB difference exists because the system never lets an application gain access to the 4-MB partition from 0x00000000 through 0x003FFFFF.</p>

<p>The last member, <i>dwAvailVirtual</i> (shown as AvailVirtual), is the only member of the structure specific to the process calling <i>GlobalMemoryStatus</i>&#8212;all the other members apply to the system and would be the same regardless of which process was calling <i>GlobalMemoryStatus</i>. To calculate this value, <i>GlobalMemoryStatus</i> adds up all of the free regions in the calling process's address space. The <i>dwAvailVirtual</i> value 2,136,846,336 indicates the amount of free address space that is available for VMStat to do with what it wants. If you subtract the <i>dwAvailVirtual</i> member from the <i>dwTotalVirtual</i> member, you'll see that VMStat has 10,506,240 bytes reserved in its virtual address space.</p>

<p>There is no member that indicates the amount of physical storage currently in use by the process.</p>

<p>
<b>Figure 14-2.</b> <i>The VMStat application</i>
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<p><b>VMStat.cpp</b></p>
<PRE>
/******************************************************************************
Module:  VMStat.cpp
Notices: Copyright (c) 2000 Jeffrey Richter
******************************************************************************/


#include &quot;..\CmnHdr.h&quot;     /* See Appendix A. */
#include &lt;windowsx.h&gt;
#include &lt;tchar.h&gt;
#include &lt;stdio.h&gt;
#include &quot;Resource.h&quot;

///////////////////////////////////////////////////////////////////////////////

// The update timer's ID
#define IDT_UPDATE   1

///////////////////////////////////////////////////////////////////////////////


BOOL Dlg_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) {

   chSETDLGICONS(hwnd, IDI_VMSTAT);

   // Set a timer so that the information updates periodically.
   SetTimer(hwnd, IDT_UPDATE, 1 * 1000, NULL);

   // Force a timer message for the initial update.
   FORWARD_WM_TIMER(hwnd, IDT_UPDATE, SendMessage);
   return(TRUE);
}

///////////////////////////////////////////////////////////////////////////////

void Dlg_OnTimer(HWND hwnd, UINT id) {

   // Initialize the structure length before calling GlobalMemoryStatus.
   MEMORYSTATUS ms = { sizeof(ms) };
   GlobalMemoryStatus(&amp;ms);

   TCHAR szData[512] = { 0 };
   _stprintf(szData, TEXT(&quot;%d\n%d\n%I64d\n%I64d\n%I64d\n%I64d\n%I64d&quot;),
      ms.dwMemoryLoad, ms.dwTotalPhys, 
      (_ _int64) ms.dwAvailPhys,     (_ _int64) ms.dwTotalPageFile, 
      (_ _int64) ms.dwAvailPageFile, (_ _int64) ms.dwTotalVirtual, 
      (_ _int64) ms.dwAvailVirtual);
   SetDlgItemText(hwnd, IDC_DATA, szData);
}

///////////////////////////////////////////////////////////////////////////////

void Dlg_OnCommand(HWND hwnd, int id, HWND hwndCtl, UINT codeNotify) {

   switch (id) {
      case IDCANCEL:
         KillTimer(hwnd, IDT_UPDATE);
         EndDialog(hwnd, id);
         break;
   }
}

///////////////////////////////////////////////////////////////////////////////

INT_PTR WINAPI Dlg_Proc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {

   switch (uMsg) {
      chHANDLE_DLGMSG(hwnd, WM_INITDIALOG, Dlg_OnInitDialog);
      chHANDLE_DLGMSG(hwnd, WM_COMMAND,    Dlg_OnCommand);
      chHANDLE_DLGMSG(hwnd, WM_TIMER,      Dlg_OnTimer);
   }
   return(FALSE);
}

///////////////////////////////////////////////////////////////////////////////

int WINAPI _tWinMain(HINSTANCE hinstExe, HINSTANCE, PTSTR pszCmdLine, int) {

   DialogBox(hinstExe, MAKEINTRESOURCE(IDD_VMSTAT), NULL, Dlg_Proc);
   return(0);
}

//////////////////////////////// End of File //////////////////////////////////
</PRE>
</TD></TR></TABLE></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<p><b>VMStat.rc</b></p>
<PRE>
//Microsoft Developer Studio generated resource script.
//
#include &quot;Resource.h&quot;

#define APSTUDIO_READONLY_SYMBOLS
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 2 resource.
//
#include &quot;afxres.h&quot;

/////////////////////////////////////////////////////////////////////////////
#undef APSTUDIO_READONLY_SYMBOLS

/////////////////////////////////////////////////////////////////////////////
// English (U.S.) resources

#if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
#ifdef _WIN32
LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
#pragma code_page(1252)
#endif //_WIN32

#ifdef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// TEXTINCLUDE
//

1 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;Resource.h\0&quot;
END

2 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;#include &quot;&quot;afxres.h&quot;&quot;\r\n&quot;
   &quot;\0&quot;
END

3 TEXTINCLUDE DISCARDABLE 
BEGIN
   &quot;\r\n&quot;
   &quot;\0&quot;
END

#endif    // APSTUDIO_INVOKED

/////////////////////////////////////////////////////////////////////////////
//
// Dialog
//

IDD_VMSTAT DIALOG DISCARDABLE  60, 60, 132, 66
STYLE WS_MINIMIZEBOX | WS_POPUP | WS_VISIBLE | WS_CAPTION | WS_SYSMENU
CAPTION &quot;VMStat&quot;
FONT 8, &quot;MS Sans Serif&quot;
BEGIN
   LTEXT           &quot;Memory load:\nTotalPhys:\nAvailPhys:\nTotalPageFile:\n\
                   AvailPageFile:\nTotalVirtual:\nAvailVirtual:&quot;,
                   IDC_STATIC,4,4,51,56
   RTEXT           &quot;Memory load:\nTotalPhys:\nAvailPhys:\nTotalPageFile:\n\
                   AvailPageFile:\nTotalVirtual:\nAvailVirtual:&quot;,
                   IDC_DATA,60,4,68,56
END


/////////////////////////////////////////////////////////////////////////////
//
// Icon
//

// Icon with lowest ID value placed first to ensure application icon
// remains consistent on all systems.
IDI_VMSTAT              ICON    DISCARDABLE     &quot;VMStat.Ico&quot;

/////////////////////////////////////////////////////////////////////////////
//
// DESIGNINFO
//

#ifdef APSTUDIO_INVOKED
GUIDELINES DESIGNINFO DISCARDABLE 
BEGIN
   IDD_VMSTAT, DIALOG
   BEGIN
      RIGHTMARGIN, 108
      BOTTOMMARGIN, 65
   END
END
#endif    // APSTUDIO_INVOKED

#endif    // English (U.S.) resources
/////////////////////////////////////////////////////////////////////////////


#ifndef APSTUDIO_INVOKED
/////////////////////////////////////////////////////////////////////////////
//
// Generated from the TEXTINCLUDE 3 resource.
//


/////////////////////////////////////////////////////////////////////////////
#endif    // not APSTUDIO_INVOKED
</pre>
</td></tr></table></p>

</BODY>
</HTML>






