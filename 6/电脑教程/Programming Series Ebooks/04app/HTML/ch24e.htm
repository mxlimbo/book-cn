<HTML>
<HEAD>
<TITLE>EXCEPTION_CONTINUE_SEARCH</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch24d.htm">[Previous]</A> <A HREF="ch24f.htm">[Next]</A><P>

<A NAME="326"><H1>EXCEPTION_CONTINUE_SEARCH</H1></A>

<p>The examples have been pretty tame so far. Let's shake things up
a bit by adding a function call:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
char g_szBuffer[100];

void FunclinRoosevelt2() {
   char *pchBuffer = NULL;

   _ _try {
      FuncAtude2(pchBuffer);
   }
   _ _except (OilFilter2(&amp;pchBuffer)) {
      MessageBox(&#8230;);
   }
}

void FuncAtude2(char *sz) {
   *sz = 0;
}

LONG OilFilter2 (char **ppchBuffer) {
   if (*ppchBuffer == NULL) {
      *ppchBuffer = g_szBuffer;
      return(EXCEPTION_CONTINUE_EXECUTION);
   }
   return(EXCEPTION_EXECUTE_HANDLER);
}
</pre></td></tr></table></p>

<p>When <i>FunclinRoosevelt2</i> executes, it calls <i>FuncAtude2</i>,
passing it NULL. When <i>FuncAtude2</i> executes, an exception is
raised. Just as before, the system evaluates the exception filter
associated with the most recently executing <i>try</i> block. In this
example, the <i>try</i> block inside <i>FunclinRoosevelt2</i> is the
most recently executing <i>try</i> block, so the system calls the <i>
OilFilter2</i> function to evaluate the exception filter&#8212;even
though the exception was generated inside the <i>FuncAtude2</i>
function.</p>

<p>Now let's stir things up a little more by adding another <i>
try-except</i> block.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
char g_szBuffer[100];

void FunclinRoosevelt3() {

   char *pchBuffer = NULL;

   _ _try {
      FuncAtude3(pchBuffer);
   }
   _ _except (OilFilter3(&amp;pchBuffer)) {
      MessageBox(&#8230;);
   }
}

void FuncAtude3(char *sz) {
   _ _try {
      *sz = 0;
   }
   _ _except (EXCEPTION_CONTINUE_SEARCH) {
      // This never executes.

      <img src="images/grayvellip.JPG" width=3 height=13 border="0">

   }
}

LONG OilFilter3(char **ppchBuffer) {
   if (*ppchBuffer == NULL) {
      *ppchBuffer = g_szBuffer;
      return(EXCEPTION_CONTINUE_EXECUTION);
   }
   return(EXCEPTION_EXECUTE_HANDLER);
}
</pre></td></tr></table></p>

<p>Now when <i>FuncAtude3</i> tries to fill address NULL with 0, an
exception is still raised but <i>FuncAtude3</i>'s exception filter
will get executed. <i>FuncAtude3</i>'s exception filter is very
simple and evaluates to EXCEPTION_CONTINUE_SEARCH. This identifier tells the system to walk up to the
previous <i>try</i> block that's matched with an <i>except</i>
block and call this previous <i>try</i> block's exception
filter.</p>
 
<p>Because <i>FuncAtude3</i>'s filter evaluates to
EXCEPTION_CONTINUE_SEARCH, the system will walk up to the previous <i>try</i> block (in
<i>FunclinRoosevelt3</i>) and evaluate its exception filter, <i>
OilFilter3.</i> <i>OilFilter3</i> will see that <i>pchBuffer</i> is
NULL, will set <i>pchBuffer</i> to point to the global buffer, and will
then tell the system to resume execution on the instruction that
generated the exception. This will allow the code inside <i>
FuncAtude3</i>'s <i>try</i> block to execute, but unfortunately,
<i>FuncAtude3</i>'s local <i>sz</i> variable will not have been
changed, and resuming execution on the failed instruction will simply
cause another exception to be generated. What we have here is another
infinite loop!</p>
 
<p>You'll notice I said that the system walks up to the most recently
executing <i>try</i> block that's matched with an <i>except</i>
block and evaluates its filters. This means that any <i>try</i> blocks
that are matched with <i>finally</i> blocks instead of <i>except</i>
blocks are skipped by the system while it walks up the chain. The
reason for this should be pretty obvious: <i>finally</i> blocks
don't have exception filters and therefore give the system nothing
to evaluate. If <i>FuncAtude3</i> in the last example contained a <i>
finally</i> block instead of its <i>except</i> block, the system would
have started evaluating exception filters beginning with <i>
FunclinRoosevelt3</i>'s <i>OilFilter3</i>.</p> 

<p><A HREF="ch25a.htm">Chapter 25</A> offers more information about EXCEPTION_CONTINUE_SEARCH.</p>

</BODY>
</HTML>






