<HTML>
<HEAD>
<TITLE>Injecting a DLL with a Trojan DLL</TITLE>
<link rel="STYLESHEET" type="text/css" href="advwin4.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch22e.htm">[Previous]</A> <A HREF="ch22g.htm">[Next]</A><P>

<A NAME="293"><H1>Injecting a DLL with a Trojan DLL</H1></A>

<p>Another way to inject a DLL is to replace a DLL that you know a
process will load. For example, if you know that a process will load
Xyz.dll, you can create your own DLL and give it the same filename. Of
course, you must rename the original Xyz.dll to something else.</p>
 
<p>Inside your Xyz.dll, you must export all the same symbols that the
original Xyz.dll exported. You can do this easily using function
forwarders (described in <A HREF="ch20a.htm">Chapter 20</A>), which make it trivially simple to
hook certain functions, but you should avoid using this technique
because it is not version-resilient. If you replace a system DLL, for
example, and Microsoft adds new functions in the future, your DLL will
not have function forwarders for them. Applications that reference
these new functions will be unable to load and execute.</p>
 
<p>If you have just a single application in which you want to use this
technique, you can give your DLL a unique name and change the import
section of the application's .exe module. More specifically, the
import section contains the names of the DLLs required by a module. You
can rummage through this import section in the file and alter it so
that the loader loads your own DLL. This technique is not too bad, but
you have to be pretty familiar with the .exe and DLL file formats.</p>

</BODY>
</HTML>






