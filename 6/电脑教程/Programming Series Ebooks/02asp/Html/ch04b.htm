<HTML>
<HEAD>
<TITLE>Dynamic HTML Fundamentals</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Dynamic HTML Fundamentals</H1>
<P>The inherent limitation of HTML, the closing of data streams, triggered 
the development of Dynamic HTML. Dynamic HTML allows the HTML in a 
Web page to be altered by VBScript code <I>after 
</I>the data stream is closed. This is accomplished by treating every tag in the document as an object with 
properties. These properties are available to VBScript code throughout the life of 
the Web page.<P>
Dynamic HTML builds on the foundation of VBScript by providing 
an expanded Internet Explorer object model along with new events. 
Dynamic HTML, like scripting in general, follows an event-driven programming 
paradigm. Code that you write is executed in response to user interaction with 
the Web page. The difference is that under Dynamic HTML, every element of 
the page is capable of supporting user interaction.<P>
Listing 4-2 produces a simple Dynamic HTML page that changes 
the text's font color from black to red when the mouse passes over the text. 
The program is a good example of dynamically changing the HTML content of 
a page even after the input stream is closed. Notice that the fade effect is 
produced by the SetTimeout method of the Window object.


<P>
<B>Listing 4-2.</b> <I>Fading text.</i>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Developer&#160;Studio&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Fading&#160;Text&lt;/TITLE&gt;

&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--

&#160;&#160;&#160;&#160;Public&#160;intTimeout
&#160;&#160;&#160;&#160;Public&#160;lngColor

&#160;&#160;&#160;&#160;Sub&#160;htmlFade_OnMouseOver()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;0
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;SetTimeout(&quot;FadeText(-1)&quot;,&#160;50)
&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;htmlFade_OnMouseOut()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;&amp;HFF0000
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;SetTimeout(&quot;FadeText(0)&quot;,&#160;50)
&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;FadeText(blnDirection)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'&#160;Call&#160;this&#160;routine&#160;periodically&#160;to&#160;fade&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'&#160;the&#160;text&#160;over&#160;time

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;If&#160;blnDirection&#160;=&#160;0&#160;Then
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;lngColor&#160;-&#160;&amp;H110000
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;If&#160;lngColor&#160;&lt;&#160;0&#160;Then
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;0
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Else
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;SetTimeout(&quot;FadeText(0)&quot;,&#160;50)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;End&#160;If
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Else
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;lngColor&#160;+&#160;&amp;H110000

If&#160;lngColor&#160;&gt;&#160;&amp;HFF0000&#160;Then
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lngColor&#160;=&#160;&amp;HFF0000
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Else
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;intTimeout&#160;=&#160;SetTimeout(&quot;FadeText(-1)&quot;,&#160;50)
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;End&#160;If
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;End&#160;If

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;htmlFade.Color&#160;=&#160;Hex(lngColor)
&#160;&#160;&#160;&#160;End&#160;Sub
--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;

&lt;BODY&gt;

&lt;B&gt;&lt;FONT&#160;FACE=&quot;ARIAL&quot;&#160;SIZE=6&#160;COLOR=&quot;000000&quot;&#160;ID=&quot;htmlFade&quot;&gt;
Fading&#160;Text
&lt;/FONT&gt;&lt;/B&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>The key to dynamically changing HTML content lies in treating each 
tag as a separate object. To that end, you need to give your tags names so that 
they can be addressed in code. In the fading text example, a name is given to 
the &lt;FONT&gt; tag to allow you to change attributes of the tag at run time. The 
name of the tag is designated by the ID attribute as follows:
<PRE WIDTH="0">&lt;FONT...ID=&quot;htmlFade&quot;&gt;
</PRE>
<P>Once the ID is defined, you can map events that occur on the tag to 
code that you write in VBScript. Dynamic HTML supports a wide variety of 
events, including familiar ones such as Click, DblClick, and KeyPress. In this 
example, you use the OnMouseOver and OnMouseOut events, which detect when 
the mouse is passing over or has left the text that is contained in the &lt;FONT&gt; 
tags. When the appropriate event is trapped, an animation loop is established 
using the SetTimeout method to fade the text to red or black.<P>
Dynamic HTML processes events at many levels, allowing 
containing elements to receive notification when tags within them fire events. This 
process of notifying containers about events occurring inside them is known 
as <I>event bubbling.</I> Event bubbling allows you to specify in a single location an 
event handler for the majority of tags in a Web page and also to specify 
particular behavior for any individual tag. Bubbling occurs automatically and can 
be trapped by each object in a hierarchy. When a tag receives an event, the 
Document object automatically receives that event when the tag is finished 
handling it. Listing 4-3 provides a simple example of event bubbling. The page 
consists of three pieces of text contained in &lt;FONT&gt; tags. The tags specify 
various attributes for the contained text.


<P>
<B>Listing 4-3.</B> <I>Event bubbling.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;Content=&quot;Microsoft&#160;Developer&#160;Studio&quot;&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;&#160;content=&quot;text/html;&#160;
&#160;&#160;&#160;&#160;charset=iso-8859-1&quot;&gt;
&lt;TITLE&gt;Event&#160;Bubbling&lt;/TITLE&gt;

&lt;SCRIPT&#160;LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--

&#160;&#160;&#160;&#160;Sub&#160;Document_OnClick()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'&#160;Color&#160;any&#160;font&#160;tag&#160;when&#160;the&#160;mouse&#160;clicks&#160;on&#160;it
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Dim&#160;objElement
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Set&#160;objElement&#160;=&#160;Window.Event.SrcElement

&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;If&#160;objElement.TagName&#160;=&#160;&quot;FONT&quot;&#160;Then
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objElement.Color&#160;=&#160;&quot;Red&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;End&#160;If
&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;fntCancel_OnClick()
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'&#160;Handle&#160;the&#160;Click&#160;event&#160;and&#160;cancel&#160;the&#160;bubble&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'&#160;to&#160;the&#160;Document&#160;object
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fntCancel.Size&#160;=&#160;&quot;6&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Window.Event.CancelBubble&#160;=&#160;True
&#160;&#160;&#160;&#160;End&#160;Sub

--&gt;
&lt;/SCRIPT&gt;

&lt;/HEAD&gt;
&lt;BODY&gt;


&lt;!--&#160;Bubble&#160;the&#160;Click&#160;event&#160;for&#160;these&#160;tags&#160;--&gt;
&lt;FONT&#160;FACE=&quot;ARIAL&quot;&#160;SIZE=5&gt;Bubble&#160;the&#160;Click&#160;event!&lt;/FONT&gt;&lt;P&gt;
&lt;FONT&#160;FACE=&quot;ARIAL&quot;&#160;SIZE=5&gt;Bubble&#160;this&#160;one&#160;too!&lt;/FONT&gt;&lt;P&gt;

&lt;!--&#160;Handle&#160;this&#160;event&#160;separately&#160;--&gt;
&lt;FONT&#160;FACE=&quot;TIMES&#160;NEW&#160;ROMAN&quot;&#160;SIZE=4&#160;COLOR=&quot;BLUE&quot;&#160;ID=&quot;fntCancel&quot;&gt;
Cancel&#160;this&#160;bubble.
&lt;/FONT&gt;&lt;P&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>When text is clicked, the event is normally received at the 
document level because most of the tags in the page do not have VBScript event 
handlers written for their respective OnClick events. Once inside the event 
handler, your program checks to make sure that the tag clicked is a &lt;FONT&gt; tag; 
the code then alters the attributes of the tag to reflect the click. In this case, 
the color changes.<P>
Identifying the actual tag that is clicked is the domain of the Event 
object. The Event object, accessed through the Window object, has properties 
that allow you to identify which element is involved in an event and to handle 
event bubbling. For each event that occurs in Dynamic HTML, you can access 
properties of the fired event through the Event object.<P>
To identify the element that is clicked, you use the SrcElement property 
of the Event object. SrcElement can be stored in a variable, thus giving you access 
to all the attributes of the tag. When you assign an object reference to a variable 
in VBScript, the language requires use of the Set keyword. Use the following code:
<PRE WIDTH="0">Dim&#160;objElement
Set&#160;objElement&#160;=&#160;Window.Event.SrcElement
</PRE>
<P>Once the element is identified, make sure it is a &lt;FONT&gt; tag by 
checking the TagName property of the Element object. If the TagName property 
has the value FONT, you can easily change the color of the clicked font. 
This happens for every &lt;FONT&gt; tag in the Document object, with one 
exception. The &lt;FONT&gt; tag identified as fntCancel has a separate event handler for 
the OnClick event. In this case, you change the size of the font, as opposed to 
the color, and then set the CancelBubble property of the Event object to True 
(-1) to prevent the Document_OnClick event handler from being executed.







</BODY>
</HTML>
