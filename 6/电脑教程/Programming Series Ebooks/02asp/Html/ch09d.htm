<HTML>
<HEAD>
<TITLE>Part II: Creating the E-Mail Component</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Part II: Creating the E-Mail Component</H1>
<H2>
<B>Step 1</B>
</H2>
<P>Using Windows Explorer, create a new directory where you can build 
the ActiveX E-Mail component for your e-mail information system. Name the 
directory \VBMAIL.
<P>Start a new Visual Basic 5.0 ActiveX DLL project. Access the 
properties for your new project by choosing Project1 Properties from the Project 
menu. On the General tab in the Project Properties dialog box, change the 
project name to VBMail and change the project description to Active Server 
Pages E-Mail Component. Click OK.
<P>When the project is first opened, a default class named CLASS1 is 
created. Change the name of this default class to Connector.
<P>Save the project in the directory \VBMAIL.
<H2>
<B>Step 2</B>
</H2>
<P>You can create the e-mail connector by using Winsock, an ActiveX control 
that ships with Visual Basic 5.0 and allows a Visual Basic component to access 
the Internet. With Winsock, you can automatically send e-mail.
<P>Because Winsock is an ActiveX control, you need to add a form to 
your project to host the control, even though the component will not have a 
user interface. To add this form, choose Add Form from the Project menu and 
name the form frmVBMail.
<P>Choose Components from the Project menu. In the Components 
dialog box, select Microsoft Winsock Control 5.0 and click OK.
<P>Add the Winsock control to your newly created form by 
double-clicking the control in the Visual Basic Toolbox. Change the name of the control 
to sockVBMail. Save your project.
<H2>
<B>Step 3</B>
</H2>
<P>In Active Server Pages code, the Connector class will be the primary 
interface for e-mail. This class must include properties that allow you to designate 
the sender and receiver of the mail, as well as the mail content. Add the 
following code to the Connector class to create the necessary properties for the 
E-Mail component:
<PRE WIDTH="0">` Variables
Private m_Sender As String
Private m_Recipient As String
Private m_SenderName As String
Private m_RecipientName As String
Private m_Subject As String
Private m_Body As String
Private m_Server As String

` Property procedures
Public Property Get Sender() As String
    Sender = m_Sender
End Property

Public Property Let Sender(strSender As String)
    m_Sender = strSender
End Property

Public Property Get Recipient() As String
    Recipient = m_Recipient
End Property

Public Property Let Recipient(strRecipient As String)
    m_Recipient = strRecipient
End Property

Public Property Get SenderName() As String
    SenderName = m_SenderName
End Property

Public Property Let SenderName(strSenderName As String)
    m_SenderName = strSenderName
End Property

Public Property Get RecipientName() As String
    RecipientName = m_RecipientName
End Property

Public Property Let RecipientName(strRecipientName As String)
    m_RecipientName = strRecipientName
End Property

Public Property Get Subject() As String
    Subject = m_Subject
End Property

Public Property Let Subject(strSubject As String)
    m_Subject = strSubject
End Property

Public Property Get Body() As String
    Body = m_Body
End Property

Public Property Let Body(strBody As String)
    m_Body = strBody
End Property

Public Property Get Server() As String
    Server = m_Server
End Property

Public Property Let Server(strServer As String)
    m_Server = strServer
End Property
</PRE>
<H2>
<B>Step 4</B>
</H2>
<P>After all the information is provided to the component through the 
properties, you can call the Send method of the Connector class to send e-mail. 
To create the Send method, choose Add Procedure from the Tools menu. In 
the Add Procedure dialog box, set the following attributes:
<PRE WIDTH="0">Name: Send
Type: Function
Scope: Public
</PRE>
<P>After the Send function is added, designate the return data type as 
Boolean. The complete function definition should appear as follows:
<PRE WIDTH="0">Public Function Send() As Boolean
End Function
</PRE>
<P>You will complete the Send method shortly, but first add some 
supporting functionality to the component.
<H2>
<B>Step 5</B>
</H2>
<P>Because many of the steps involved in sending e-mail require a response 
from the e-mail server, you need to create a routine that causes the E-Mail 
component to wait for the server's response. This can be accomplished with a 
private routine named GetResponse. Add the routine to the Connector class by 
choosing Insert Procedure from the Tools menu. In the Insert Procedure dialog 
box, set the following attributes:
<PRE WIDTH="0">Name: GetResponse
Type: Sub
Scope: Private
</PRE>
<P>After the GetResponse routine is created, add the following code to 
force a wait for the server's response:
<PRE WIDTH="0">Dim strTemp As String

strTemp = &quot;&quot;
Do While strTemp = &quot;&quot;
&#160;&#160;&#160;&#160;frmVBMail.sockVBMail.GetData strTemp
&#160;&#160;&#160;&#160;DoEvents
Loop
</PRE>
<H2>
<B>Step 6</B>
</H2>
<P>In this step, you will create the code necessary to use SMTP, the protocol 
that allows communication between the e-mail server and the client. 
Although this project was originally designed to use Microsoft Exchange Server 5.0, you 
can use any e-mail server that supports SMTP. 
<P>Return to the Send method, and add the following code to connect to 
the SMTP mail server:
<PRE WIDTH="0">With frmVBMail.sockVBMail
    Send = True

    ` Connect to SMTP server
    If .State &lt;&gt; sckConnected And .State &lt;&gt; sckOpen Then
        .Connect Server, 25
        Do While .State &lt;&gt; sckConnected
            DoEvents
        Loop
    End If
</PRE>
<H2>
<B>Step 7</B>
</H2>
<P>Once the E-Mail component is successfully connected to the e-mail server, 
you can construct and send a message using SMTP. The message is sent to the 
server in parts until each necessary piece&#151;sender, recipient, body&#151;is received. 
Then the server sends the message to the recipient. Add the following code to 
the Send method to build and send an e-mail message:
<PRE WIDTH="0">On Error GoTo SendErr

With frmVBMail.sockVBMail
    Send = True

    ` Connect to SMTP server
    If .State &lt;&gt; sckConnected And .State &lt;&gt; sckOpen Then
        .Connect Server, 25
        Do While .State &lt;&gt; sckConnected
            DoEvents
        Loop
    End If
    
    ` Create the message
    Dim strMessage As String
    
    ` The sender
    strMessage = &quot;MAIL FROM:&quot; &amp; Sender &amp; vbCrLf
    .SendData strMessage
    GetResponse
    
    ` The recipient
    strMessage = &quot;RCPT TO:&quot; &amp; Recipient &amp; vbCrLf
    .SendData strMessage
    GetResponse
    
    ` The body of the message
    strMessage = &quot;DATA&quot; &amp; vbCrLf
    .SendData strMessage
    GetResponse
    
    strMessage = &quot;DATE:&quot; &amp; Format$(Now, &quot;dd/mm/yy&quot;) &amp; vbCrLf
    strMessage = strMessage &amp; &quot;FROM:&quot; &amp; SenderName &amp; vbCrLf
    strMessage = strMessage &amp; &quot;TO:&quot; &amp; RecipientName &amp; vbCrLf
    strMessage = strMessage &amp; &quot;SUBJECT:&quot; &amp; Subject &amp; vbCrLf &amp; vbCrLf
    strMessage = strMessage &amp; Body &amp; vbCrLf
    strMessage = strMessage &amp; &quot;.&quot; &amp; vbCrLf
    .SendData strMessage
    GetResponse
</PRE>
<H2>
<B>Step 8</B>
</H2>
<P>After the message is sent, you must close the connection to the e-mail 
server. Use the Close method of the Winsock control to close the connection 
and complete the Send method code:
<PRE WIDTH="0">    ` Close connection
    .Close
    Do While .State &lt;&gt; sckClosed
        DoEvents
    Loop    
End With

SendExit:
    Exit Function
    
SendErr:
    Send = False
    Resume SendExit
</PRE>
<P>Save your project.
<H2>
<B>Step 9</B>
</H2>
<P>Before you can use the E-Mail component in an ASP page, you must 
compile the DLL by choosing Make VBMail.dll from the File menu. Then 
save your work, and exit Visual Basic.







</BODY>
</HTML>
