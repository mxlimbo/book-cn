<HTML>
<HEAD>
<TITLE>Active Server Pages Fundamentals</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Active Server Pages Fundamentals</B></H1>
<P>Listing 5-1 produces a simple ASP page that generates a greeting based on 
the time of day. In this example, the hour of the day is determined by using 
the code <I>Hour(Now)</I>, where Now is a VBScript function that returns the 
current date/time stamp. If the hour is less than 12, a variable is assigned the 
greeting &quot;Good Morning!&quot; From noon to 6 PM, the message is &quot;Good Afternoon!&quot; 
and after 6 PM, &quot;Good Evening!&quot;


<P>
<B>Listing 5-1.</B> <I>A simple ASP example.</I>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
&lt;!DOCTYPE&#160;HTML&#160;PUBLIC&#160;&quot;-//IETF//DTD&#160;HTML//EN&quot;&gt;
&lt;HTML&gt;

&lt;HEAD&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;
&#160;&#160;&#160;&#160;CONTENT=&quot;text/html;&#160;CHARSET=iso-8859-1&quot;&gt;

&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;
&#160;&#160;&#160;&#160;CONTENT=&quot;Microsoft&#160;FrontPage&#160;2.0&quot;&gt;
&lt;TITLE&gt;Simple&#160;ASP&#160;Example&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY&#160;BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;%
Dim&#160;strGreeting

If&#160;Hour(Now)&#160;&lt;&#160;12&#160;Then
&#160;&#160;&#160;&#160;strGreeting&#160;=&#160;&quot;Good&#160;Morning!&quot;
ElseIf&#160;Hour(Now)&#160;&gt;&#160;11&#160;And&#160;Hour(Now)&#160;&lt;&#160;18&#160;Then
&#160;&#160;&#160;&#160;strGreeting&#160;=&#160;&quot;Good&#160;Afternoon!&quot;
ElseIf&#160;Hour(Now)&#160;&gt;&#160;17&#160;Then
&#160;&#160;&#160;&#160;strGreeting&#160;=&#160;&quot;Good&#160;Evening!&quot;
End&#160;If
%&gt;
&lt;H1&gt;&lt;%=strGreeting%&gt;&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>



</blockquote><HR>
<P>Notice that the code structure in the listing is surrounded by special 
characters&#151;angle brackets and percent signs 
(&lt;%&#133;%&gt;). These symbols designate the code as server-side code, which means that the code will be evaluated 
before the page is actually sent to the browser. In fact, if you were to view the 
resulting HTML from Listing 5-1 in Internet Explorer, you would see the 
following (assuming it's afternoon, of course!):
<PRE WIDTH="0">&lt;!DOCTYPE&#160;HTML&#160;PUBLIC&#160;&quot;-//IETF//DTD&#160;HTML//EN&quot;&gt;
&lt;HTML&gt;

&lt;HEAD&gt;
&lt;META&#160;HTTP-EQUIV=&quot;Content-Type&quot;
&#160;&#160;&#160;&#160;CONTENT=&quot;text/html;&#160;CHARSET=iso-8859-1&quot;&gt;
&lt;META&#160;NAME=&quot;GENERATOR&quot;&#160;
&#160;&#160;&#160;&#160;CONTENT=&quot;Microsoft&#160;FrontPage&#160;2.0&quot;&gt;
&lt;TITLE&gt;Simple&#160;ASP&#160;Example&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&#160;BGCOLOR=&quot;#FFFFFF&quot;&gt;

&lt;H1&gt;Good&#160;Afternoon!&lt;/H1&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</PRE>
<P>This is the point of using ASP. The result of the code is simply 
HTML! This page is visible in any browser and will work in Netscape Navigator as 
well as in Internet Explorer. ASP provides true platform independence for 
the Internet developer.<P>
Listing 5-1 contains a few other features that are worth 
mentioning. Notice the line of code at the top of the page&#151;the code that specifies 
the language that will be used for the page:
<PRE WIDTH="0">&lt;%@&#160;LANGUAGE=&quot;VBSCRIPT&quot;%&gt;
</PRE>
<P>Normally, you would use VBScript as the language, but ASP also 
supports JavaScript. Unlike client-side scripting, the choice of language here has 
no impact on browser compatibility since the code is all executed on the 
server. You simply code using the language that makes you comfortable.<P>
Also notice the line of code where the HTML is actually generated. 
The code uses the variable to write the greeting, as follows:
<PRE WIDTH="0">&lt;H1&gt;&lt;%=strGreeting%&gt;&lt;/H1&gt;
</PRE>
<P>The variable strGreeting is enclosed by the angle brackets and 
percent signs used in the rest of the server-side code, but it is also preceded by an 
equal sign. The equal sign plays an important role in ASP, telling ASP to insert 
the actual value of the variable in the page as HTML. Therefore, the value of 
the greeting is inserted at this point and is seen in the browser as text content.


<P>
<H2>
<B>Objects and Components</B>
</H2>
<P>At the simplest level, creating an ASP page is nothing more than 
writing server-side code to produce the result you have in mind. VBScript, 
however, is not a fully functional language, and it falters when you try to create 
more complex pages. For example, VBScript has no intrinsic functions to allow 
data access, nor can it open text files. In fact, VBScript has no intrinsic 
functions that allow access to any external data sources. How, then, can you use ASP 
to perform advanced functions such as data access? The answer is that 
you supplement VBScript with ASP <I>objects </I>and <I>components</I>.
<P>ASP objects and components are nothing more than ActiveX 
components, like any ActiveX DLLs you might use in Microsoft Visual Basic. The 
difference between ASP objects and ASP components lies in the way they are 
packaged. ASP objects are ActiveX elements that are always available to VBScript. You 
do not have to explicitly create ASP objects for your use. ASP supports 
the Application, Session, Request, Response, and Server objects. ASP 
components, on the other hand, are DLLs that exist outside the ASP framework. 
These components can be created in any language, but Microsoft has 
packaged several useful ASP components with Visual InterDev. ASP components 
are not available unless they are specifically created in code. ASP supports 
the Database Access, File Access, Browser Capabilities, Ad Rotator, and 
Content Linking components.


<P>
<H2>
<B>The GLOBAL.ASA File</B>
</H2>
<P>One of the biggest concerns facing Internet developers, regardless of 
the technology they use, is the difficulty of creating a true 
<I>application</I> on the Internet. The interaction between a browser and a Web server is basically 
a stateless transaction in which the server hands a Web page to the client 
and then forgets that the client even exists. When the client subsequently asks 
for another Web page, the server has no memory of the first request. The 
essential problem for all Web applications is this: How do you define an application?
<P>Defining an application in the Microsoft Windows environment is 
simple. The application starts when the icon is double-clicked, and the application 
ends when Exit is chosen from the File menu. In between these two events, data 
can easily be remembered in variables. However, this is not true for 
Internet applications. How can you determine when an application begins and ends? 
If a user comes to a site and views a page, you might say that the application 
has started. But what if the user jumps to another site and returns five minutes 
later? Is the application still live? What if the user leaves for an hour? Two hours?
<P>This problem of defining the beginning and ending of an 
application affects the ability to correctly manage variables and work flow. 
Fortunately, Active Server Pages provides a solution. ASP uses a special file, 
named GLOBAL.ASA, to define the beginning and ending of an application as 
well as the beginning and ending of an individual user's session. GLOBAL.ASA 
is responsible for detecting four key events in your site: 
Application_OnStart, Application_OnEnd, Session_OnStart, and Session_OnEnd. Listing 5-2 
shows a typical GLOBAL.ASA file.
<P>
<B>Listing 5-2.</b> <I>GLOBAL.ASA.</i>
<HR><BLOCKQUOTE>
<PRE WIDTH="0">&lt;SCRIPT&#160;LANGUAGE=&quot;VBSCRIPT&quot;&#160;RUNAT=&quot;Server&quot;&gt;

'&#160;You&#160;can&#160;add&#160;special&#160;event&#160;handlers&#160;in&#160;this&#160;file,&#160;which&#160;
'&#160;will&#160;be&#160;run&#160;automatically&#160;when&#160;special&#160;Active&#160;Server&#160;
'&#160;Pages&#160;events&#160;occur.&#160;To&#160;create&#160;these&#160;handlers,&#160;add
'&#160;a&#160;subroutine&#160;with&#160;a&#160;name&#160;from&#160;the&#160;list&#160;below&#160;that&#160;

'&#160;corresponds&#160;to&#160;the&#160;event&#160;you&#160;want&#160;to&#160;use.&#160;For&#160;example,&#160;
'&#160;to&#160;create&#160;an&#160;event&#160;handler&#160;for&#160;Session_OnStart,&#160;you&#160;would&#160;
'&#160;put&#160;the&#160;following&#160;code&#160;into&#160;this&#160;file&#160;(without&#160;the&#160;
'&#160;comments):
'
'&#160;Sub&#160;Session_OnStart
'&#160;&#160;&#160;&#160;&#160;**Put&#160;your&#160;code&#160;here&#160;**
'&#160;End&#160;Sub

'&#160;EventName&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Description
'&#160;Session_OnStart&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;the&#160;first&#160;time&#160;a&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user&#160;runs&#160;any&#160;page&#160;in&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;your&#160;application
'&#160;Session_OnEnd&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;when&#160;a&#160;user's&#160;session&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;times&#160;out&#160;or&#160;quits&#160;your&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;application
'&#160;Application_OnStart&#160;&#160;&#160;&#160;&#160;Runs&#160;once&#160;when&#160;the&#160;first&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;page&#160;of&#160;your&#160;application&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;is&#160;run&#160;for&#160;the&#160;first&#160;time&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;by&#160;any&#160;user
'&#160;Application_OnEnd&#160;&#160;&#160;&#160;&#160;&#160;&#160;Runs&#160;once&#160;when&#160;the&#160;Web&#160;
'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server&#160;shuts&#160;down

&lt;/SCRIPT&gt;

&lt;SCRIPT&#160;LANGUAGE=VBScript&#160;RUNAT=Server&gt;
&#160;&#160;&#160;&#160;Sub&#160;Session_OnStart

&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;Session_OnEnd

&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;Application_OnStart

&#160;&#160;&#160;&#160;End&#160;Sub

&#160;&#160;&#160;&#160;Sub&#160;Application_OnEnd

&#160;&#160;&#160;&#160;End&#160;Sub

&lt;/SCRIPT&gt;
</PRE>



</blockquote><HR>
<P>GLOBAL.ASA contains &lt;SCRIPT&gt; tags to designate scripting 
sections. These tags contain a special attribute named RUNAT=Server, which 
specifies that the contained VBScript should run on the server, not on the 
client. RUNAT=Server is similar in functionality to the angle bracket/percent 
sign symbols used in the Web page to designate server-side scripting. The 
events in GLOBAL.ASA can be trapped on the server side using standard 
syntax. For example, trapping the start of an application is accomplished with 
the following code:
<PRE WIDTH="0">&lt;SCRIPT&#160;LANGUAGE=VBScript&#160;RUNAT=Server&gt;
&#160;&#160;&#160;&#160;Sub&#160;Application_OnStart
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;`&#160;Application-specific&#160;code
&#160;&#160;&#160;&#160;End&#160;Sub
&lt;/SCRIPT&gt;
</PRE>
<P>Although the GLOBAL.ASA file uses events to mark the beginning 
and ending of an application, it is still not clear what constitutes an application. 
One working definition, offered by Microsoft, defines an Internet application as 
a virtual directory and all of its pages. If a user requests a Web page from a 
virtual directory named Bookstore, the user has started the Bookstore application 
and the Application_OnStart and Session_OnStart events will fire in GLOBAL.ASA.<P>
By this definition, an application can be used by many browsers at 
the same time. The Application_OnStart event fires only once&#151;when the first 
user requests a Web page from the virtual directory. When other users then 
request pages from the same directory, only the Session_OnStart event fires.<P>
While <I>application </I>can refer to multiple browsers accessing the same set 
of Web pages, <I>session </I>refers to an individual browser accessing the same Web 
pages. A session for an individual browser lasts as long as the user continues to 
request Web pages from the virtual directory. If the user stops requesting 
additional Web pages for 20 minutes, the session ends and the Session_OnEnd event 
fires. When all user sessions in the virtual directory have ended, the 
Application_OnEnd event fires.<P>
As an example, consider the following scenario. Two users are about 
to access the Magazine application on a Web site. User1 accesses first and 
requests the Web page DEFAULT.ASP. At this moment, the Application_OnStart 
and Session_OnStart events fire.<P>
Just 5 minutes later, User2 accesses the same application. Because 
User1 has been active in the last 20 minutes, the Magazine application is still 
live. Therefore, only the Session_OnStart event fires, signaling the beginning of 
a second user session. Additionally, the site will now require that both the 
User1 and User2 sessions end before the application can be closed.<P>
During the next 15 minutes, User1 does not access any pages in 
the Magazine application. Because User1 has been inactive for 20 minutes, 
ASP concludes that the session for User1 has ended and the Session_OnEnd 
event fires. The application is still active, however, because User2 has requested 
a page in the last 20 minutes.<P>
User2 remains active for an hour, reading magazine articles by 
requesting Web pages. Finally, though, User2 shuts down the computer, and 20 
minutes after User2 leaves the site, the Session_OnEnd event fires. Because User2 
is the last user of the application, the application terminates and 
the Application_OnEnd event fires.









</BODY>
</HTML>
