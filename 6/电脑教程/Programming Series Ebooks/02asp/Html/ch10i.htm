<HTML>
<HEAD>
<TITLE>Part II: Creating the Business Objects</TITLE>
</HEAD>
<BODY BGCOLOR = "#ffffff">
<H1>Part II: Creating the Business Objects</H1>
<H2>
<B>Step 1</B>
</H2>
<P>Using the File Manager, create a new directory named  \MTS. Beneath this 
new directory, create a directory named SERVER.
<H2>
<B>Step 2</B>
</H2>
<P>To start your new Visual Basic ActiveX DLL project, choose References 
from the Project menu and set references to the Microsoft Remote Data Object 
2.0 component and the Microsoft Transaction Server 1.0 Type Library.
<P>Change the properties of Project1 by choosing Project1 Properties 
from the Project menu. In the Project Properties dialog box, change the name 
of the project to MTSObject and change the description to MTS Training 
Exercise Objects. Click OK.
<H2>
<B>Step 3</B>
</H2>
<P>In this part of the project, you will use a single class to query the 
NorthWind data source and return records and you will learn custom marshaling 
techniques to return data from a lookup table and records from a query.
<P>Change the name of the Class1 class to Query.
<P>Save the project in the \MTS\Server directory.
<H2>
<B>Step 4</B>
</H2>
<P>Create a new method in the Query class by choosing Add Procedure from 
the Tools menu. In the Add Procedure dialog box, set the following attributes:
<PRE WIDTH="0">Name:&#160;GetCategories
Type:&#160;Function
Scope:&#160;Public
</PRE>
<P>After inserting the new function, modify it to return a String data 
type. The complete function should now look like this:
<PRE WIDTH="0">Public&#160;Function&#160;GetCategories()&#160;As&#160;String
End&#160;Function
</PRE>
<P>The GetCategories method returns a delimited string with all the 
category names. This technique is a quick way to return lookup table information to 
a list.
<H2>
<B>Step 5</B>
</H2>
<P>Add the following code to the GetCategories method to read the 
category names from the data source and format the return string:
<PRE WIDTH="0">On&#160;Error&#160;GoTo&#160;GetCategoriesErr

&#160;&#160;&#160;&#160;`&#160;Get&#160;object&#160;context
&#160;&#160;&#160;&#160;Dim&#160;objContext&#160;As&#160;MTxAS.ObjectContext
&#160;&#160;&#160;&#160;Set&#160;objContext&#160;=&#160;GetObjectContext()
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;Dim&#160;objConnection&#160;As&#160;RDO.rdoConnection
&#160;&#160;&#160;&#160;Dim&#160;objResultset&#160;As&#160;RDO.rdoResultset
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;`&#160;Make&#160;connection.
&#160;&#160;&#160;&#160;`&#160;NOTE:&#160;Connections&#160;made&#160;to&#160;MTS&#160;must
&#160;&#160;&#160;&#160;`&#160;be&#160;made&#160;with&#160;the&#160;rdDriverNoPrompt&#160;option!
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;New&#160;RDO.rdoConnection
&#160;&#160;&#160;&#160;objConnection.Connect&#160;=&#160;&quot;DSN=NorthWind&quot;
&#160;&#160;&#160;&#160;objConnection.EstablishConnection&#160;rdDriverNoPrompt,&#160;True
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;`&#160;Run&#160;query
&#160;&#160;&#160;&#160;Set&#160;objResultset&#160;=&#160;objConnection.OpenResultset&#160;_
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&quot;SELECT&#160;CategoryName&#160;FROM&#160;Categories&quot;)
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;`&#160;Build&#160;return&#160;string
&#160;&#160;&#160;&#160;Dim&#160;strReturn&#160;As&#160;String
&#160;&#160;&#160;&#160;strReturn&#160;=&#160;&quot;&quot;
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;Do&#160;While&#160;Not&#160;objResultset.EOF
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;strReturn&#160;=&#160;strReturn&#160;&amp;&#160;objResultset(&quot;CategoryName&quot;)&#160;&amp;&#160;&quot;|&quot;
&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;objResultset.MoveNext
&#160;&#160;&#160;&#160;Loop
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;`&#160;Close&#160;connection&#160;to&#160;allow&#160;pooling
&#160;&#160;&#160;&#160;objResultset.Close
&#160;&#160;&#160;&#160;objConnection.Close
&#160;&#160;&#160;&#160;Set&#160;objResultset&#160;=&#160;Nothing
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Nothing

&#160;&#160;&#160;&#160;`&#160;Tell&#160;MTS&#160;we&#160;are&#160;done
&#160;&#160;&#160;&#160;objContext.SetComplete
GetCategoriesExit:
&#160;&#160;&#160;&#160;GetCategories&#160;=&#160;strReturn
&#160;&#160;&#160;&#160;Exit&#160;Function
&#160;&#160;&#160;&#160;
GetCategoriesErr:
&#160;&#160;&#160;&#160;strReturn&#160;=&#160;Err.Description

&#160;&#160;&#160;&#160;`&#160;Tell&#160;MTS&#160;we&#160;failed
&#160;&#160;&#160;&#160;objContext.SetAbort
&#160;&#160;&#160;&#160;Resume&#160;GetCategoriesExit
</PRE>
<H2>
<B>Step 6</B>
</H2>
<P>After the category names are returned to the front end, the user can select 
a category and see the associated products from the data source for that 
category. This is accomplished with a method named GetProducts, which returns all 
the products in an array to the client. The client then uses the array to fill a grid.<P>
Add the GetProduct method by choosing Add Procedure from the 
Tools menu. In the Add Procedure dialog box, set the following attributes:
<PRE WIDTH="0">Name:&#160;GetProducts
Type:&#160;Function
Scope:&#160;Public
</PRE>
<H2>
<B>Step 7</B>
</H2>
<P>Change the GetProducts function to accept two arguments and to return 
a Boolean value that indicates success or failure. The resulting function 
should look like this:
<PRE WIDTH="0">Public&#160;Function&#160;GetProducts(strCategory&#160;As&#160;String,&#160;_
&#160;&#160;&#160;&#160;ByRef&#160;arrProducts&#160;As&#160;Variant)&#160;As&#160;Boolean

End&#160;Function
</PRE>
<H2>
<B>Step 8</B>
</H2>
<P>GetProducts uses the category to search for products and fill an array 
with results. It also uses Just-In-Time activation to ensure that instances of the 
Query class are recycled as soon as possible. Add the following code to the 
GetProducts function to return an array of products to the client:
<PRE WIDTH="0">On&#160;Error&#160;GoTo&#160;GetProductsErr

&#160;&#160;&#160;&#160;'&#160;Get&#160;object&#160;context
&#160;&#160;&#160;&#160;Dim&#160;objContext&#160;As&#160;MTxAS.ObjectContext
&#160;&#160;&#160;&#160;Set&#160;objContext&#160;=&#160;GetObjectContext()

&#160;&#160;&#160;&#160;'&#160;Declare&#160;database&#160;objects
&#160;&#160;&#160;&#160;Dim&#160;objConnection&#160;As&#160;RDO.rdoConnection
&#160;&#160;&#160;&#160;Dim&#160;objResultset&#160;As&#160;RDO.rdoResultset
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;'&#160;Make&#160;connection
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;New&#160;RDO.rdoConnection
&#160;&#160;&#160;&#160;objConnection.Connect&#160;=&#160;&quot;DSN=NorthWind&quot;
&#160;&#160;&#160;&#160;objConnection.EstablishConnection&#160;rdDriverNoPrompt,&#160;True
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;'&#160;Run&#160;query
&#160;&#160;&#160;&#160;Dim&#160;strSQL&#160;As&#160;String
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;&quot;SELECT&#160;ProductName,CompanyName,UnitPrice&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;FROM&#160;Products,Suppliers,Categories&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;WHERE&#160;Products.SupplierID=Suppliers.SupplierID&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;AND&#160;Products.CategoryID=Categories.CategoryID&#160;&quot;
&#160;&#160;&#160;&#160;strSQL&#160;=&#160;strSQL&#160;&amp;&#160;&quot;AND&#160;Categories.CategoryName='&quot;&#160;&amp;&#160;strCategory&#160;&amp;&#160;&quot;'&quot;
&#160;&#160;&#160;&#160;Set&#160;objResultset&#160;=&#160;objConnection.OpenResultset(strSQL)
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;'&#160;Build&#160;return&#160;array
&#160;&#160;&#160;&#160;arrProducts&#160;=&#160;objResultset.GetRows(100)
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;'&#160;Close&#160;connection&#160;to&#160;allow&#160;pooling
&#160;&#160;&#160;&#160;objResultset.Close
&#160;&#160;&#160;&#160;objConnection.Close
&#160;&#160;&#160;&#160;Set&#160;objResultset&#160;=&#160;Nothing
&#160;&#160;&#160;&#160;Set&#160;objConnection&#160;=&#160;Nothing
&#160;&#160;&#160;&#160;
&#160;&#160;&#160;&#160;'&#160;Tell&#160;MTS&#160;we&#160;are&#160;done
&#160;&#160;&#160;&#160;GetProducts&#160;=&#160;True
&#160;&#160;&#160;&#160;objContext.SetComplete
&#160;&#160;&#160;&#160;
GetProductsExit:
&#160;&#160;&#160;&#160;Exit&#160;Function
&#160;&#160;&#160;&#160;
GetProductsErr:
&#160;&#160;&#160;&#160;'&#160;Tell&#160;MTS&#160;we&#160;failed
&#160;&#160;&#160;&#160;GetProducts&#160;=&#160;False
&#160;&#160;&#160;&#160;objContext.SetAbort
&#160;&#160;&#160;&#160;Resume&#160;GetProductsExit
</PRE>
<H2>
<B>Step 9</B>
</H2>
<P>Now that the business object is complete, you can compile it by choosing 
Make MTSObject.dll from the File menu. When the DLL is created, save your 
work and exit Visual Basic.






</BODY>
</HTML>
