<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>The Basics of Scripting</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch02b.htm">[Previous]</A> <A HREF="ch02d.htm">[Next]</A><P>

<A NAME="45"><H1>The Basics of Scripting</H1></A>

<P>This section is a short tutorial on scripting in which I present the basic concepts. 
To help you understand these concepts, I show how they apply to both JScript 
and VBScript. I also let you know where to go for more information along he way.</P>
<P>Scripting encompasses many different programming languages that can be 
used within the context of a Web page. Scripting languages are usually a subset or at 
least distantly related to some high-level programming language that can be used to 
develop full-fledged Windows applications. By subset, I mean that a scripting 
language includes some but not all the programming constructs associated with its parent 
language. For example, Internet Explorer natively supports two scripting 
languages: JScript and VBScript. (Other scripting languages can be created for use with 
Internet Explorer as well, but the discussion of how to create scripting engines for 
Internet Explorer is outside the scope of this book.)</P>
<P>JScript is Microsoft's implementation of the ECMA 262 language 
specification. (JScript is sometimes referred to as JavaScript or ECMAScript.) JScript is a full 
implementation of this specification, plus it has some enhancements that allow it to 
take advantage of Internet Explorer. JScript is similar to the Java programming 
language in its look and feel, but JScript is only distantly and indirectly related to the 
Java programming language. JScript contains some of the programming idioms of Java 
such as functions and objects, but it doesn't include them all. Unlike Java, in which 
you have to explicitly declare all variables, JScript is loosely typed&#8212;you don't have 
to explicitly declare the data types of all variables.</P>
<P>VBScript, however, <I>is </I>a subset of the Visual Basic programming language. 
You can use VBScript in many programming environments in addition to Internet 
Explorer, such as Microsoft Internet Information Server. VBScript is a direct subset of 
Visual Basic, so it contains some of the programming constructs available in Visual 
Basic but not all of them. If you're already familiar with Visual Basic, you'll have no 
trouble learning VBScript. If you don't happen to know Visual Basic, take the time to 
learn VBScript. Once you do, you'll be well on your way to understanding the entire 
family of Visual Basic programming languages. Although other browsers support 
the ECMA 262 specification (ECMAScript), only Internet Explorer natively 
supports VBScript.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
For more information about the Visual Basic family of programming 
languages, please consult MSDN Online Web Workshop: 
<I><A HREF="http://msdn.microsoft.com" TARGET="_window2">http://msdn.microsoft.com</A></I>.
</BLOCKQUOTE></DIV></P>

<P>The most important point to remember about scripting is that it's the 
backbone of DHTML, so you must have a basic understanding of scripting before you can 
go on to DHTML. By using script, you can manipulate a Web page to retrieve and 
change its contents. If you're already a fluent script programmer, feel free to skip the rest 
of this chapter. If you already know one of the scripting languages natively 
supported by Internet Explorer, you might want to read through the rest of this chapter 
anyway because it covers both JScript and VBScript.</P>

<A NAME="46"><H2>Adding Script to a Web Page </H2></A>

<P>The first skill you have to learn when writing script for Internet Explorer is how 
to add script to a Web page. To add script to a Web page, you use an HTML tag 
named &lt;SCRIPT&gt;. As with many other HTML tags, the &lt;SCRIPT&gt; tag is the one that 
opens a block of HTML code. Therefore, you must use the corresponding &lt;/SCRIPT&gt; 
tag to delineate the closing of the block of HTML code. Script contained within 
the &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags is typically referred to as a script block. You can 
place the script block anywhere in the head or body section of a document, although 
it's usually best to place it in the head section so that it's parsed before the document 
is actually displayed. Remember, though, that script blocks must be in either the 
head or the body section and cannot sit alone as independent sections in the 
document. Also, a Web page can contain any number of script blocks, but combining 
adjacent script blocks into one is more efficient.</P>
<P>As with most HTML tags, the &lt;SCRIPT&gt; tag has a set of attributes that 
describe the script block. The most important of these attributes is the LANGUAGE 
attribute, which tells Internet Explorer which script engine to load to parse the code 
contained within the script block. For example, the following script block uses the 
LANGUAGE attribute to tell Internet Explorer to load the JScript scripting engine to parse 
and interpret the script code within the script block.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
&lt;!--
--&gt;
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>In addition to specifying the &quot;JScript&quot; value for the LANGUAGE attribute, 
you can also specify &quot;JavaScript&quot; or &quot;ECMAScript&quot; to tell Internet Explorer that the 
script block contains JScript code. JScript, JavaScript, and ECMAScript can all be used 
interchangeably.</P>
<P>To tell Internet Explorer that a script block contains VBScript, you can 
specify &quot;VBScript&quot; or &quot;VBS&quot; for the value of the LANGUAGE attribute, as in the 
following example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
&lt;!--
--&gt;
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>You're probably wondering why I included HTML comment tags (&lt;!-- and 
--&gt;) within each of the script block examples. Not all browsers support scripting, and 
not all browsers that do support scripting support both JScript and VBScript. To 
maintain compatibility with other browsers, use HTML comment tags to tell the 
browsers that don't support scripting to ignore the script code contained within the 
HTML comment tags. If you don't surround your script code with HTML comment 
tags, browsers that don't support scripting will display the script code as normal HTML 
text. You don't have to worry about the &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags. Any HTML 
tags that aren't recognized by a browser are effectively ignored.</P>

<A NAME="47"><H2>Statements</H2></A>

<P>A statement is a grouping of one or more items and symbols that perform some 
action. In all scripting languages, a specific character terminates a statement. In JScript, 
a semicolon terminates a statement. (Although you can have more than one 
statement on a single line, doing so is considered bad programming practice and should 
be avoided.) In VBScript, the end-of-line character terminates a statement. Let's look 
at some examples of statements that you might use in JScript and VBScript. Assume 
that these script statements and all the following script examples are contained within 
the appropriate script blocks, as discussed earlier. These are JScript statements:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>c = a + b;
var wnd;
wnd = window.open();
</PRE>
</td></tr></table></p>
<P>These are VBScript statements:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>c = a + b
Dim wnd
wnd = window.open()
</PRE>
</td></tr></table></p>
<P>As you can see, each line contains one statement. (Don't worry if you 
don't understand what these statements accomplish. The rest of this chapter will 
explain it.) Notice that a semicolon terminates the JScript statements, and the 
end-of-line character terminates the VBScript statements.</P>
<P>Statements can be grouped together in what's referred to as a block. This 
block concept is similar to a script block in that a block always groups together a 
number of statements. As mentioned earlier, all the script contained within the &lt;SCRIPT&gt; 
and &lt;/SCRIPT&gt; tags is known as the script block. Within the script block, script code 
can be grouped further into code blocks. You can group code statements into blocks 
in several ways. Typically, statements are grouped together in blocks using 
functions, subroutines, or conditional statements.</P>

<A NAME="48"><H2>Comments</H2></A>

<P>As with HTML code, using comments to indicate what your script code is doing 
is extremely important. The comments you enter into your script code are ignored 
by the script interpreter, so the performance of your script code isn't affected by them.</P>
<P>Different script developers have different standards for comments. Some 
developers enter one comment for each line of script. Others enter a block of 
comments before a block of script. Some developers place comments at the end of a line of 
script code, while others enter a comment on a line of its own. I like to use a mixture 
of all these techniques. When appropriate, I use a block of comments to explain 
my intentions for a block of script code. This block of comments might be only one 
line or many lines. My preference is to start the block of comments on the line 
immediately preceding the line or block of script code that the comments are describing. 
If the purpose of a line of script code isn't evident, I enter a comment 
immediately following the line of script on the same line as that line of code. These are just 
my preferences. You'll decide on your own techniques for comments as you get 
more into scripting.</P>
<P>To enter a comment in JScript, you use the double slash (//) characters. All 
text following these characters and on the same line as these characters is 
considered commented out and is ignored by the JScript engine. As an example, I've added 
comments to the script that I introduced in the &quot;<A HREF="ch02c.htm#47">Statements</A>&quot; section to make the 
script more understandable:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>// Determine the total number of items
// in the inventory, and then open a new
// browser window to allow the customer
// to add items to his/her shopping cart.
c = a + b;
var wnd;   // wnd contains a handle to the open window.
wnd = window.open();
</PRE>
</td></tr></table></p>
<P>Comments in VBScript are entered by using the single-quote character ('). 
As in JScript, all text after the comment character and on the same line is 
considered commented out and will be ignored by the VBScript scripting engine. (If you 
must use the single quote as a character and not as a comment delimiter&#8212;perhaps in 
a string, for example&#8212;you must enclose the single quote in double quotes (&quot;'&quot;). 
Here's the previous example using VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>' Determine the total number of items
' in the inventory, and then open a new
' browser window to allow the customer
' to add items to his/her shopping cart.
c = a + b
Dim wnd    ' wnd contains a handle to the open window.
wnd = window.open()
</PRE>
</td></tr></table></p>

<A NAME="49"><H2>Variables</H2></A>

<P>A variable is a kind of placeholder for data that you can reuse within your script 
code. For example, you might want to create a variable named 
<I>TotalItems</I> that keeps track of the total number of items that a user has chosen to purchase. To perform 
some action on the variable, such as adding or subtracting from it, you just refer to it 
by name. Later in this chapter, the &quot;<A HREF="ch02c.htm#57">Operators</A>&quot; section explains different operations 
that you can perform on a variable.</P>
<P>You don't have to explicitly declare variables in JScript and VBScript. 
However, it is good programming practice to declare all variables before you use them. 
To declare a variable in JScript, you use the 
<I>var</I> keyword. You aren't required to declare all variables before using them except in one case. In a JScript function, you 
must declare all variables that are local to that function. (Functions are covered later in 
this chapter.) JScript variables can be of any length but must follow these rules:</P>

<UL>
<P><LI>The first character must be a letter (either uppercase or lowercase), an underscore (_), or a dollar sign ($).</LI></P>
<P><LI>Characters following the first character can be letters, numbers, 
underscores, or dollar signs.</LI></P>
<P><LI>Variable names can't contain spaces or periods (that is, a full stop).</LI></P>
<P><LI>Variables should not have names that conflict with intrinsic objects or functions.</LI></P>
<P><LI>A variable name can't be one of the following JScript reserved words:</LI></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TD VALIGN="TOP">
<UL>
<P><LI>break</LI></P>
<P><LI>continue</LI></P>
<P><LI>delete</LI></P>
<P><LI>else</LI></P>
<P><LI>false</LI></P>
<P><LI>for</LI></P>
<P><LI>function</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>if</LI></P>
<P><LI>in</LI></P>
<P><LI>new</LI></P>
<P><LI>null</LI></P>
<P><LI>return</LI></P>
<P><LI>this</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>     true</LI></P>
<P><LI>     typeof</LI></P>
<P><LI>     var</LI></P>
<P><LI>     void</LI></P>
<P><LI>     while</LI></P>
<P><LI>     with</LI></P>
</UL></TD></TR></TABLE></P>

<P><LI>A variable name can't be one of the future JScript reserved words 
shown here:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TD VALIGN="TOP">
<UL>
 <P><LI>     case</LI></P>
<P><LI>     class</LI></P>
<P><LI>     catch</LI></P>
<P><LI>     const</LI></P>
<P><LI>     debugger</LI></P>
<P><LI>     default</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>     do</LI></P>
<P><LI>     enum</LI></P>
<P><LI>     export</LI></P>
<P><LI>     extends</LI></P>
<P><LI>     finally</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>     import</LI></P>
<P><LI>     super</LI></P>
<P><LI>     switch</LI></P>
<P><LI>     throw</LI></P>
<P><LI>     try</LI></P>
</UL></TD></TR></TABLE></P>
</UL>

<P>Also, keep in mind that JScript variables are case sensitive. For example, 
a variable named <I>TotalItems</I> isn't<I> </I>the same as one named 
<I>totalItems</I>.</P>
<P>When declaring a variable in JScript, you can also initialize that variable to 
some value. The type of the value that you use to initialize the variable implicitly 
indicates the type of the variable itself. If you declare a variable without initializing it, it 
exists, but its value is undefined. If you want to initialize a variable but don't 
want to give it any particular value, you can initialize it to 
<I>null</I>. Also, before you can actually use a variable, you must declare it either explicitly, using the 
<I>var</I> keyword, or implicitly, by setting the variable equal to some value. The following are 
examples of ways to declare variables in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var TotalItems;
var totalCost = 0.0;
var selectedItem = null;

price_per_widget = 2.50;
var totalWidgets = 10;
var totalWidgetCost = totalWidgets * price_per_widget;
</PRE>
</td></tr></table></p>
<P>Most of the rules that apply to declaring JScript variables apply to VBScript 
as well, with a few exceptions:</P>
<UL>
<P><LI>Variables in VBScript aren't case sensitive. Therefore, a variable 
named <I>TotalItems</I> is exactly the same as one named 
<I>totalItems</I>.</LI></P>
<P><LI>VBScript variables must not exceed 255 characters.</LI></P>
<P><LI>The VBScript reserved words are different from the JScript reserved 
words, as shown in the following list:</LI></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TD VALIGN="TOP">
<UL>
 <P><LI>     Call</LI></P>
<P><LI>     Case</LI></P>
<P><LI>     Dim</LI></P>
<P><LI>     Do</LI></P>
<P><LI>     Each</LI></P>
<P><LI>     Exit</LI></P>
<P><LI>     Explicit</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>     For</LI></P>
<P><LI>     Function</LI></P>
<P><LI>     If</LI></P>
<P><LI>     Loop</LI></P>
<P><LI>     Next</LI></P>
<P><LI>     Option</LI></P>
<P><LI>     Private</LI></P>
</UL></TD>
<TD VALIGN="TOP">
<UL>
<P><LI>     Public</LI></P>
<P><LI>     ReDim</LI></P>
<P><LI>     Rem</LI></P>
<P><LI>     Select</LI></P>
<P><LI>     Set</LI></P>
<P><LI>     Sub</LI></P>
</UL></TD></TR></TABLE></P>
</UL>

<P>As in JScript, you can declare a VBScript variable in two ways: implicitly 
and explicitly. Implicitly declaring a variable in VBScript is the same as in JScript&#8212;just 
set the variable equal to some value. To explicitly declare a variable in VBScript, you 
use either the <I>Dim</I>, <I>Private</I>, or 
<I>Public</I> keyword. (VBScript keywords aren't case 
sensitive. When declaring a variable, you can use 
<I>Dim</I>, <I>dim</I>, or any combination of 
uppercase and lowercase.)</P>
<P>Determining whether to use <I>Dim</I>, 
<I>Private</I>, or <I>Public</I> depends on what 
scope or lifetime you want to impose on the variable. Scope is an advanced scripting 
topic and is therefore outside the scope (pun intended!) of this book. Typically, you'll 
use <I>Dim</I> and won't have to worry about 
<I>Private</I> or <I>Public</I>.</P>
<P>Here's the same example that I used for JScript, revised to work in 
VBScript. Also, note that I didn't initialize any variables when declaring them. This is a 
restriction of VBScript that does not exist in JScript.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim TotalItems
Dim totalCost
totalCost = 0.0
Dim selectedItem
selectedItem = null

price_per_widget = 2.50
Dim totalWidgets
totalWidgets = 10
Dim totalWidgetCost
totalWidgetCost = totalWidgets * price_per_widget
</PRE>
</td></tr></table></p>
<P>Remember that I mentioned that declaring your variables before you use 
them is good programming practice? To see why this is a good idea, consider a 
variable named <I>TotalItems </I>that's used to keep track of the total number of items selected 
by a user. Let's just say that you've been keeping track of the total number of 
items selected by adding 1 to <I>TotalItems</I> each time the user selects an item. When the 
user is finished selecting items, she clicks a button to display the total number of 
items selected. When coding the script that displays the total number of items, you 
accidentally typed <I>TotalItem</I> instead of 
<I>TotalItems</I> making the total number of items 
displayed 0. Bewildered, your user selects all the items again and clicks the button that 
displays the total number of items, only to find that 0 is displayed again. Had 
you been required to declare all variables before you used them, this problem wouldn't 
have occurred.</P>
<P>Fortunately, VBScript's Option<I> </I>Explicit statement provides a way to 
require that all variables be declared before they're used. This statement should be the 
first statement in your script. As an example, take a look at the following VBScript 
code. Can you find the error that would <I>not</I> exist if I did not include the Option 
Explicit statement?</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Option Explicit
Dim TotalItems
TotalItem = 10
</PRE>
</td></tr></table></p>
<P>That's right, I misspelled <I>TotalItems</I> as 
<I>TotalItem</I> when I was trying to set the variable equal to 10. If I hadn't specified the 
<I>Option Explicit</I> statement, using 
<I>TotalItem</I> would not have generated an error, and my total number of items as represented 
by <I>TotalItems</I> would have been 0.</P>

<A NAME="50"><H2>Data Types</H2></A>

<P>When defining variables in the previous section, we didn't have to worry about 
the type of data contained within a variable. The type of data contained in the 
variable is implicitly set the first time you initialize the variable, but you still need to 
understand the types of data supported by both JScript and VBScript.</P>
<P>JScript supports six types of data: numbers, strings, objects, Booleans, null, 
and undefined. I'll explain all of these except objects, which are covered in the 
<a href="ch03a.htm">next chapter</a>. VBScript supports only one type of data: variant.</P>

<A NAME="51"><H3>Numbers</H3></A>

<P>JScript variables can contain both integer and floating-point numbers. A variable 
that contains an integer can contain negative or positive whole numbers, including 0. 
A variable that contains a floating-point number can contain a positive or 
negative number that includes either a decimal point, an exponent that's represented by 
either a lowercase or an uppercase &quot;e&quot;, or both. This exponent represents 10 to 
the power of the number that follows the lowercase or uppercase &quot;e&quot; in scientific 
notation. For example, the number 1,250,000 can be represented in scientific notation 
in the following ways, although typically, 1,250,000 would be represented as 1.25e6:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>1.25e6
12.5e5
125e4
1250e3
</PRE>
</td></tr></table></p>
<P>The exponent can also be a negative number. For example, you can 
represent .0025 in scientific notation as 2.5e-3. As you can see, there's a pattern to 
scientific notation. Usually, one number is to the left of the decimal place followed by the 
rest of the digits on the right, plus the exponent.</P>
<P>Integer numbers can be represented using different bases. In your 
day-to-day life, you typically encounter only decimal numbers, which are base 10 and easy 
to deal with. However, integers can also be represented as octal (base 8) and 
hexadecimal (base 16) numbers.</P>
<P>You can specify that a number is octal by placing a 0 in front of it. Octal 
numbers can contain only the digits 0 through 7. If a number contains a leading 0 but 
is followed by the digit 8 or 9, the number is interpreted as a decimal number. 
Some examples of octal numbers follow. I listed the decimal equivalent next to each 
number so that you can more easily understand them.</P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Octal</I></TH>
<TH><I>Decimal</I></TH>
</TR><TR>
<TD VALIGN="TOP">01</TD>
<TD VALIGN="TOP">1</TD>
</TR><TR>
<TD VALIGN="TOP">010</TD>
<TD VALIGN="TOP">8</TD>
</TR><TR>
<TD VALIGN="TOP">021</TD>
<TD VALIGN="TOP">17</TD>
</TR></TABLE></P>

<P>You can specify that a number is hexadecimal (or hex, for short) by placing 
a 0x in front of it. Hex numbers can contain only the digits 0 through 9 and letters 
A through F. The letter A represents 10 in decimal, the letter B represents 11, and 
so forth. The letters A through F can be in either uppercase or lowercase. Following 
are some examples of hex numbers. Again, I listed decimal equivalents next to the 
numbers to make them easy to understand.</P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
The formulas for converting between bases are outside the scope 
of this book. If you need to convert between number bases, using the 
Calculator program that comes with Windows or a good scientific calculator is the 
easiest way. 
</BLOCKQUOTE></DIV></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Hex</I></TH>
<TH><I>Decimal</I></TH>
</TR><TR>
<TD VALIGN="TOP">0x1</TD>
<TD VALIGN="TOP">1</TD>
</TR><TR>
<TD VALIGN="TOP">0x10</TD>
<TD VALIGN="TOP">16</TD>
</TR><TR>
<TD VALIGN="TOP">0xA</TD>
<TD VALIGN="TOP">10</TD>
</TR><TR>
<TD VALIGN="TOP">0x21</TD>
<TD VALIGN="TOP">33</TD>
</TR><TR>
<TD VALIGN="TOP">0xFF</TD>
<TD VALIGN="TOP">255</TD>
</TR></TABLE></P>

<A NAME="52"><H3>Strings</H3></A>

<P>A string is a series of characters enclosed in single or double quotation marks. A 
string is special because it is also an object. Here are some examples of strings:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var str1 = &quot;Hello, World!&quot;;
var str2 = '&quot;Hello, Tom&quot;, said Mary.';
var str3 = &quot;&quot;;
</PRE>
</td></tr></table></p>
<P>The variable <I>str1</I> should be pretty obvious. It just contains a string of characters 
that say &quot;Hello, World!&quot;. However, 
<I>str2</I> deserves further consideration. If a string 
will contain double quotation marks, as in the case of quoting something said, the 
entire string must be enclosed in single quotes. Notice that 
<I>str3 </I>contains no characters&#8212;a string can contain zero or more characters. When it contains no characters, it's 
referred to as a zero-length string.</P>

<A NAME="53"><H3>Booleans</H3></A>

<P>Boolean variables can contain only one of two different 
values&#8212;<I>true</I> or <I>false</I>. Boolean values are most often used in conditional expressions, which we'll look at 
later in this chapter. One important point to remember about the values 
<I>true</I> and <I>false</I> is that, unlike in any other programming language, they can't be interchanged with 
the numbers 1 and 0, respectively.</P>

<A NAME="54"><H3>Null and undefined</H3></A>

<P>The null data type is used when a variable contains nothing and has no value. 
The undefined data type is merely a value that is given to a variable after it's declared 
and before it's set to any other value. You can't tell what type of data is contained in 
the variable; you know only that the data is undefined.</P>

<A NAME="55"><H3>Variants</H3></A>

<P>Unlike JScript variables, VBScript variables can contain only one type of data&#8212;a 
variant. A variant holds many other types of data depending on how the variant is 
being used. The setup of a variant isn't important here&#8212;what is important is the type of 
data that can be held in a variant. The easiest way to understand this data 
type is to ignore the fact that the actual data type is a variant. When you're dealing with the data, 
it will appear to you as if you're dealing directly with the data type stored in the 
variant. Table 2-3 lists all the data types that can be held in a variant and briefly describes 
them.</P>

<P><B>Table 2-3.</B> <i>Allowable Data Types in a Variant</i></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Data Type</I></TH>
<TH><I>Description</I></TH>
</TR><TR>
<TD VALIGN="TOP">Empty</TD>
<TD VALIGN="TOP">Empty or uninitialized. Value is 
<I>0</I> for numeric variables and a zero-length string for string variables.</TD>
</TR><TR>
<TD VALIGN="TOP">Null</TD>
<TD VALIGN="TOP">No valid data.</TD>
</TR><TR>
<TD VALIGN="TOP">Integer</TD>
<TD VALIGN="TOP">Integer value in the range -32,768 through 32,767.</TD>
</TR><TR>
<TD VALIGN="TOP">Long</TD>
<TD VALIGN="TOP">Long integer value in the range -2,147,483,648 
through 2,147,483,647.</TD>
</TR><TR>
<TD VALIGN="TOP">Single</TD>
<TD VALIGN="TOP">Single-precision floating-point number.</TD>
</TR><TR>
<TD VALIGN="TOP">Double</TD>
<TD VALIGN="TOP">Double-precision floating-point number.</TD>
</TR><TR>
<TD VALIGN="TOP">Currency</TD>
<TD VALIGN="TOP">Currency value representing money.</TD>
</TR><TR>
<TD VALIGN="TOP">Date</TD>
<TD VALIGN="TOP">Data from January 1, 100, through December 31, 9999.</TD>
</TR><TR>
<TD VALIGN="TOP">String</TD>
<TD VALIGN="TOP">Variable-length string of characters.</TD>
</TR><TR>
<TD VALIGN="TOP">Object</TD>
<TD VALIGN="TOP">Objects that can be assigned to refer to an actual object of an application.</TD>
</TR><TR>
<TD VALIGN="TOP">Error</TD>
<TD VALIGN="TOP">Error number.</TD>
</TR><TR>
<TD VALIGN="TOP">Boolean</TD>
<TD VALIGN="TOP">Boolean value containing either True or False.</TD>
</TR><TR>
<TD VALIGN="TOP">Byte</TD>
<TD VALIGN="TOP">Single-character value from 0 through 255.</TD>
</TR><TR>
<TD VALIGN="TOP">Array</TD>
<TD VALIGN="TOP">Array of data.</TD>
</TR></TABLE></P>

     
<P>To determine the type of data contained in a variant in VBScript, you can 
use the <I>VarType</I> function. This function returns a constant that represents the type of 
data contained in the variant. For example, if the variant contains a Boolean data 
value, the <I>VarType</I> function will return the 
<I>vbBoolean </I>constant. Also, it's possible to 
convert between data types stored in a variant using any of the VBScript 
conversion functions.</P>

<A NAME="56"><H2>Arrays</H2></A>

<P>Arrays are provided in both JScript and VBScript. Arrays provide you with a way 
to group together a number of different items of the same type in one data 
structure. For example, let's say you were writing script to keep track of the total cost of 
all items that a particular customer ordered. You can build an array that contains the 
cost of each item that was ordered by the customer. In JScript, you would define the 
array using the <I>new</I> operator, which allows you to create a new object, and the 
<I>Array()</I> constructor.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var charges = new Array(100);
</PRE>
</td></tr></table></p>
<P>In VBScript, you'd define the array like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim charges(100)
</PRE>
</td></tr></table></p>
<P>In both JScript and VBScript, even though these arrays are defined as having 
a size of 100, the first element in the array is 0 and the last is 99 because arrays 
in JScript and VBScript are zero-based. Remember this fact when you're 
accessing elements in an array. If you wanted to access the 54th element in the array, 
you'd reference element 53. In JScript, you reference an item in an array using the 
array name and an array index enclosed in square brackets. In VBScript, you reference 
items in an array using the array name and an array index enclosed in parentheses.</P>
<P>This example shows you how to set and get values in JScript arrays:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>charges[0] = 10.50;  // Set item number 0, the first item, to 10.50.
var itemPrice = charges[0];  // Get the value of the first item.
charges[3] = 1.25;  // Set the value of the fourth item to 1.25.
</PRE>
</td></tr></table></p>
<P>This example shows you how to set and get values in VBScript arrays:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>charges(0) = 10.50  ' Set item number 0, the first item, to 10.50.
Dim itemPrice
itemPrice = charges(0)  ' Get the value of the first item.
charges(3) = 1.25  ' Set the value of the fourth item to 1.25.
</PRE>
</td></tr></table></p>

<A NAME="57"><H2>Operators</H2></A>

<P>Operators do just what their name suggests&#8212;they perform some sort of 
operation on a variable or on literal data. Literal data consists of numbers (0 through 9), 
single characters (a through z and A through Z), and strings of characters. When an 
operation is performed on a variable or a literal data item, the variable or literal data 
item is referred to as an operand. You can perform operations such as assignment, 
addition, subtraction, multiplication, division, modulo, equality, inequality, and so forth. 
For example, to add two variables and assign the value of the addition to a third 
variable, you might write VBScript code like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim a, b, c
a = b + c
</PRE>
</td></tr></table></p>
<P>In this case, the operators are the assignment operator 
(=) and the addition operator (+). The operands are a, b, and c.</P>
<P>Table 2-4 lists the basic JScript operators, and Table 2-5 lists the basic 
VBScript operators. I purposely omitted the more advanced ones such as the bitwise 
operators. They're better left to a more advanced discussion of scripting.</P>

<P><B>Table 2-4.</B> <i>Basic JScript Operators</i></P>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Arithmetic</I></TH>
<TH><I></I></TH>
<TH><I>Logical/Comparison</I></TH>
<TH><I></I></TH>
</TR><TR>
<TD VALIGN="TOP"><i>Description</i></TD>
<TD VALIGN="TOP"><i>Symbol (Prec.)</i></TD>
<TD VALIGN="TOP"><i>Description</i></TD>
<TD VALIGN="TOP"><i>Symbol (Prec.)</i></TD>
</TR><TR>
<TD VALIGN="TOP">Unary Negation&#8212;returns a negative number if the value it is applied to is positive, and vice versa.</TD>
<TD VALIGN="TOP">-<BR>(1)</TD>
<TD VALIGN="TOP">Logical Not&#8212;logically negates a value. For instance, returns <I>false</I> if the value is <I>true</I>, and vice versa.</TD>
<TD VALIGN="TOP">!<BR>(1)</TD> 
</TR><TR>
<TD VALIGN="TOP">Increment&#8212;increases the value of a variable by 1.</TD>
<TD VALIGN="TOP">++<BR>(1)</TD>
<TD VALIGN="TOP">Less than&#8212;determines whether the value on the left-hand side (lhs) of this operator is less than the value 
on the right-hand side (rhs).</TD>
<TD VALIGN="TOP">&lt;<BR>(4)</TD> 
</TR><TR>
<TD VALIGN="TOP">Decrement&#8212;decreases the value of a variable by 1.</TD>
<TD VALIGN="TOP">--<BR>(1)</TD>
<TD VALIGN="TOP">Greater than&#8212;determines whether the lhs is greater than the rhs. </TD>
<TD VALIGN="TOP">&gt;<BR>(4)</TD>
</TR><TR>
<TD VALIGN="TOP">Multiplication&#8212;multiplies two numbers.</TD>
<TD VALIGN="TOP">*<BR>(2)</TD>
<TD VALIGN="TOP">Less than or equal to&#8212;determines whether the lhs is less than or equal to the rhs.</TD>
<TD VALIGN="TOP">&lt;=<BR>(4)</TD>
</TR><TR>
<TD VALIGN="TOP">Division&#8212;divides two numbers.</TD>
<TD VALIGN="TOP">/<BR>(2)</TD>
<TD VALIGN="TOP">Greater than or equal to&#8212;determines whether the lhs is greater than or equal to the rhs.</TD>
<TD VALIGN="TOP">&gt;=<BR>(4)</TD>
</TR><TR>     
<TD VALIGN="TOP">Modulo&#8212;returns the remainder of the division of two numbers.</TD>
<TD VALIGN="TOP">%<BR>(2)</TD>
<TD VALIGN="TOP">Equality&#8212;determines whether the lhs is equal to the rhs.</TD>
<TD VALIGN="TOP">==<BR>(5)</TD>
</TR><TR>    
<TD VALIGN="TOP">Addition&#8212;adds two numbers. Also used for string concatenation.</TD>
<TD VALIGN="TOP">+<BR>(3)</TD>
<TD VALIGN="TOP">Inequality&#8212;determines whether the lhs is not equal to the rhs.</TD>
<TD VALIGN="TOP">!=<BR>(5)</TD>
</TR><TR>     
<TD VALIGN="TOP">Subtraction&#8212;subtracts one number from another.</TD>
<TD VALIGN="TOP">-<BR>(3)</TD>
<TD VALIGN="TOP">Logical AND&#8212; returns <I>true</I> if the expressions on the lhs and the rhs are both true. Otherwise, returns <I>false</I>.</TD>
<TD VALIGN="TOP">&amp;&amp;<BR>(6)</TD>
</TR><TR>
<TD VALIGN="TOP"></TD>
<TD VALIGN="TOP"></TD>
<TD VALIGN="TOP">Logical OR&#8212; returns <I>true</I> if either of the expressions on the lhs and the rhs is true. Returns <I>false</I> only if 
they're both false.</TD>
<TD VALIGN="TOP">||<BR>(6)</TD>
</TR></TABLE></P>



<P><B>Table 2-5.</B> <i>Basic VBScript Operators</i></P>
<P><TABLE CELLPADDING="5" WIDTH="95%"><TR>
<TH><I>Arithmetic</I></TH>
<TH><I></I></TH>
<TH><I>Logical/Comparison</I></TH>
<TH><I></I></TH>
</TR><TR>
<TD VALIGN="TOP"><i>Description</i></TD>
<TD VALIGN="TOP"><i>Symbol (Prec.)</i></TD>
<TD VALIGN="TOP"><i>Description</i></TD>
<TD VALIGN="TOP"><i>Symbol</i></TD>
</TR><TR>
<TD VALIGN="TOP">Exponentiation&#8212;raises the left-hand side (lhs) value to the power of the right-hand side (rhs) value.</TD>
<TD VALIGN="TOP">^<BR>(1)</TD>
<TD VALIGN="TOP">Equality&#8212;determines whether the lhs is equal to the rhs.</TD>
<TD VALIGN="TOP">=</TD>
</TR><TR>
<TD VALIGN="TOP">Unary Negation&#8212;returns a negative number if the value it's applied to is positive, and vice versa.</TD>
<TD VALIGN="TOP">-<BR>(1)</TD>
<TD VALIGN="TOP">Inequality&#8212;determines whether the lhs is not equal to the rhs.</TD>
<TD VALIGN="TOP">&lt;&gt;</TD>
</TR><TR>
<TD VALIGN="TOP">Multiplication&#8212;multiplies two numbers.</TD>
<TD VALIGN="TOP">*<BR>(1)</TD>
<TD VALIGN="TOP">Less than&#8212;determines whether the value on the left-hand side (lhs) of this operator is less than the value on the right-hand side (rhs).</TD>
<TD VALIGN="TOP">&lt;</TD>
</TR><TR>
<TD VALIGN="TOP">Division&#8212;divides two numbers and returns a floating-point number.</TD>
<TD VALIGN="TOP">/<BR>(1)</TD>
<TD VALIGN="TOP">Greater than&#8212;determines whether the lhs is greater than the rhs.</TD>
<TD VALIGN="TOP">&gt;</TD>
</TR><TR>
<TD VALIGN="TOP">Integer division&#8212;divides two numbers and returns an integer.</TD>
<TD VALIGN="TOP">\<BR>(1)</TD>
<TD VALIGN="TOP">Less than or equal to&#8212;determines whether the lhs is less than or equal to the rhs.</TD>
<TD VALIGN="TOP">&lt;=</TD>
</TR><TR>     
<TD VALIGN="TOP">Modulo&#8212;returns the remainder of the division of two numbers.</TD>
<TD VALIGN="TOP">Mod<BR>(1)</TD>
<TD VALIGN="TOP">Greater than or equal to&#8212; determines whether the lhs is greater than or equal to the rhs.</TD>
<TD VALIGN="TOP">&gt;=</TD>
</TR><TR>
<TD VALIGN="TOP">Addition&#8212;adds two numbers. Also can be used for string concatenation.</TD>
<TD VALIGN="TOP">+<BR>(2)</TD>
<TD VALIGN="TOP">Object equivalence&#8212;determines whether the object on the lhs is equivalent to the object on the rhs.</TD>
<TD VALIGN="TOP">Is</TD>
</TR><TR>
<TD VALIGN="TOP">Subtraction&#8212;subtracts one number from another.</TD>
<TD VALIGN="TOP">-<BR>(2)</TD>
<TD VALIGN="TOP">Logical Not&#8212;logically negates a value. For instance, if the value is <I>true</I>, it returns <I>false</I>, and vice versa.</TD>
<TD VALIGN="TOP">Not</TD>
</TR><TR>
<TD VALIGN="TOP">String concatenation&#8212;concatenates two strings.</TD>
<TD VALIGN="TOP">&amp;<BR>(2)</TD>
<TD VALIGN="TOP">Logical AND&#8212;returns <I>true</I> if the expressions on the lhs and the rhs are both true. Otherwise, returns <I>false</I>.     </TD>
<TD VALIGN="TOP">And </TD>
</TR><TR>
<TD VALIGN="TOP"></TD>
<TD VALIGN="TOP"></TD>
<TD VALIGN="TOP">Logical OR&#8212;returns <I>true</I> if either of the expressions on the lhs and the rhs is true. Returns <I>false</I> only 
if they're both false. </TD>
<TD VALIGN="TOP">Or </TD>
</TR>     

</TABLE></P>
     

<P>Note that I've listed the operators in order of their precedence. The 
precedence of an operator determines the order in which it's evaluated in an expression. For example, consider the following equation:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>result = 2 + 10 * 5
</PRE>
</td></tr></table></p>
<P>If you read this equation left to right, the value of 
<I>result</I> would be <I>60</I>. However, according to the rules of precedence, the value of 
<I>result</I> is actually <I>52</I> because the multiplication operator has a higher precedence than the addition operator.</P>
<P>When two operators have the same precedence, they're evaluated left to 
right. For example, consider this equation:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>result = 2 + 10 - 4
</PRE>
</td></tr></table></p>
<P>After evaluating, the value of <I>result </I>is 8. The addition and subtraction operators 
have the same precedence, so the equation is evaluated left to right. If you look again 
at the operator table for JScript, you'll see that a number in parentheses appears 
below each operator. You can use this number to determine whether one operator has 
the same precedence as another. These numbers appear only in the first column of 
the VBScript table because precedence is straightforward in VBScript. The 
comparison operators all have the same precedence and are evaluated in left-to-right order. 
The arithmetic operators are ordered by their precedence, and the numbers below 
the operators indicate which operators have the same precedence.</P>
<P>You can override the precedence of an operator by using parentheses. 
However, inside the parentheses, normal precedence rules apply. For example, let's 
look again at the original expression (2 + 10 * 5) that resulted in the value 
<I>52</I>. This time, however, we'll use parentheses:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>result = (2 + 10) * 5
</PRE>
</td></tr></table></p>
<P>Because of the parentheses, the expression 2 + 10 is evaluated first. The 
result is 12, which is then multiplied by 5. That means the value of 
<I>result</I> is <I>60</I> in this case. (As you're referring to these tables, remember that I haven't included the more 
advanced operators.) For information about these operators and their precedence, see one 
of the references listed in the &quot;Where to Go for More Information&quot; section.</P>
<P>It should be pretty easy to understand how most of the operators in Tables 
2-4 and 2-5 work. String concatenation, however, deserves some explanation. String 
concatenation involves joining multiple strings together end to end. In both JScript 
and VBScript, you can use the addition operator to concatenate strings, as in the 
following examples. The first example is in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var str;
str = &quot;Hello &quot; + &quot;World!&quot;;
</PRE>
</td></tr></table></p>
<P>This example is in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim str
str = &quot;Hello &quot; + &quot;World!&quot;
</PRE>
</td></tr></table></p>
<P>Although using the addition operator for concatenation does work in 
VBScript, using the string concatenation operator (&amp;) is considered better coding style. 
Using the &amp; operator in VBScript makes your code easier to read. Say, for example, 
that you have two variables that contain strings, and you concatenate them using 
the addition operator. By looking only at the addition of the two variables, nobody 
can tell whether the variables hold numeric or string data. The individual maintaining 
your VBScript code would have to look for the initialization of the two variables to 
determine your intentions. On the other hand, if you used the string concatenation 
operator, it would be clearly evident that you're concatenating two strings and not 
adding numeric data.</P>
<P>Here's the same example using the string concatenation operator instead. 
Note, however, that the string concatenation operator is specific to VBScript. This 
operator has a totally different meaning in JScript.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim str
str = &quot;Hello &quot; &amp; &quot;World!&quot;
</PRE>
</td></tr></table></p>

<A NAME="58"><H2>Expressions</H2></A>

<P>An expression in scripting is any combination of variables, operators, constant 
values, and other expressions that form some result. In the discussion of variables 
and operators, you've already encountered expressions. A simple expression consists 
of one operator and two operands. Here's an example of a simple JScript expression:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var a = b + c;
</PRE>
</td></tr></table></p>
<P>In this expression, <I>a</I> is set to equal the value of 
<I>b</I> added to the value of <I>c</I>. More complex expressions can contain multiple operators and operands, as in 
this VBScript example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim a
a = b + c * 10
</PRE>
</td></tr></table></p>
<P>This example actually contains two expressions. Because of the rules of 
precedence, we can use parentheses to clarify the example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim a
a = b + (c * 10)
</PRE>
</td></tr></table></p>
<P>Now it's easy to see that <I>c * 10</I> is the first expression to be evaluated. The 
second expression that is evaluated is <I>b + the result of c * 
10</I>. Let's say that <I>c</I> is 5 and <I>b</I> is 4. The result of the first expression, 
<I>c * 10</I>, is 50. The second expression, then, 
is <I>4 + 50</I>. Therefore, after both expressions are evaluated, 
<I>a </I>is equal to 54.</P>
<P>Arithmetic operators aren't the only ones that you can use in expressions. 
You can also use any of the operators in Tables 2-4 and 2-5. For example, you can 
use the logical operators in expressions:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim c 
c = a &lt;&gt; b
</PRE>
</td></tr></table></p>
<P>In this VBScript example, <I>c</I> is set to the result of the expression 
<I>a &lt;&gt; b</I>. If you look at Table 2-5, you'll see that 
<I>&lt;&gt;</I> is the inequality operator. Therefore, the 
expression <I>a &lt;&gt; b</I> means &quot;is a not equal to b ?&quot; If <I>a</I> is not equal to 
<I>b</I>, then <I>c</I> will be set to <I>true</I>. If 
<I>a</I> is equal to <I>b</I>, then <I>c </I>will be set to 
<I>false.</I></P>
<P>Expressions don't always have to include the assignment operator as they 
have in all the examples so far. In some situations, expressions don't include 
assignments at all, as you'll see in the next section about program flow. Just remember that, 
at the very least, an expression contains one operator and at least one operand. Wait 
a minute! Didn't I say earlier that a simple expression consists of one operator and 
two operands? Yes, I did. However, in some cases, an operator requires only one 
operand. Take, for instance, the case of the JScript increment operator, 
<I>++</I>. This operator requires only one operand. Take a look at the following example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var count = 0;
count++;
</PRE>
</td></tr></table></p>
<P>Here I defined a variable named <I>count</I> and gave it an initial value of 0. 
Then I applied the increment operator to the 
<I>count</I> variable. The increment operator increases the value of 
<I>count</I> by 1. Therefore, the value of 
<I>count</I> after applying the increment operator is 1. So, as you can see, an expression requires at least one 
operator and one operand.</P>

<A NAME="59"><H2>Controlling Program Flow with Conditional Statements</H2></A>

<P>What good would any programming language be if it didn't provide a way to 
execute code based on the result of some condition? Both JScript and VBScript provide 
conditional statements that allow you to choose which block of script to execute 
based on some condition. The types of conditional statements in JScript and VBScript 
are basically the same. The way these concepts are implemented is different based 
on the language. I'll cover each of the types of conditional statements and how to 
use them in both JScript and VBScript.</P>

<A NAME="60"><H3><I>If </I>blocks</H3></A>
<P>An <I>If</I> block is a series of statements that tests whether the result of an 
expression is true or false and executes a block of code based on the result. In JScript, 
you use the <I>if</I> statement followed by an expression in parentheses, as in the 
following example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> if (a == 10)
    b = a;
</PRE>
</td></tr></table></p>
<P>In this block of code, the value of <I>a </I>is tested to see whether it's equal to 10. 
If the value of <I>a</I> is equal to 10, <I>b</I> is set to the value of 
<I>a</I>. This simple example contains only one line of code to be executed if the result of the expression is true. If you 
want to execute multiple lines of code, you surround the block of code with braces 
({}). Here's the same example with some additional code:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> if (a == 10)
 {
    b = a;
    str = &quot;a is equal to 10&quot;;
 }
</PRE>
</td></tr></table></p>
<P>As you can see, this is much easier to read. Therefore, it's often smart to 
use braces even if the code block contains only one line of code.</P>
<P>To use <I>If</I> blocks in VBScript, you use the 
<I>If</I> keyword, followed by an expression that evaluates to True or False, and the 
<I>Then</I> keyword. In addition, you must use the 
<I>End If</I> keyword clause to designate the end of the code block. Unlike 
JScript, the <I>End If </I>keyword clause must be used even if the code to be executed consists 
of only one line. Here's the previous example written in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>If a = 10 Then
   b = a
   str = &quot;a is equal to 10&quot;
End If
</PRE>
</td></tr></table></p>
<P>The only situation in which the <I>End If</I> clause isn't required occurs when 
the entire statement is on a single line, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>If a = 10 Then b = a
</PRE>
</td></tr></table></p>
<P>You can also specify alternative blocks of code that will be executed if 
the expression in the initial <I>If</I> block is evaluated to False. In JScript, you can use the 
<I>else if </I>and <I>else</I> clauses to execute alternative blocks of code. The best way to 
illustrate how to use these is with another example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>if (a == 10)
{
   str = &quot;a is equal to 10&quot;;
}
else if (a == 11 || a == 12)
{
   str = &quot;a is equal to 11 or 12&quot;;
}
else
{
   str = &quot;a is not equal to 10, 11, or 12&quot;;
}
</PRE>
</td></tr></table></p>
<P>In this example, <I>a</I> is first tested to see whether it's equal to 10. If so, 
<I>str</I> is set to the string &quot;a is equal to 10&quot; and none of the additional 
<I>else if</I> or <I>else</I> clauses are 
evaluated. If <I>a </I>isn't equal to 10, the <I>else 
if</I> clause is evaluated. In this case, 
<I>a</I> is evaluated to see whether it's equal to 11 or 12. If it is, 
<I>str</I> is set equal to the string &quot;a is equal to 11 or 12&quot; and the final <I>else</I> clause isn't evaluated. If 
<I>a </I>isn't equal to 10, 11, or 12, the code in the final 
<I>else</I> block is executed, in which case 
<I>str</I> is set equal to the string &quot;a is not equal to 10, 11, or 12&quot;.</P>
<P>You can also specify alternative blocks of code to be executed in VBScript 
using <I>ElseIf</I> and <I>Else</I> clauses. These clauses work exactly the same as 
<I>else if</I> and <I>else</I> in 
JScript. Here's the example that I just showed you but written in VBScript syntax:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>If a = 10 Then
   str = &quot;a is equal to 10&quot;
ElseIf a = 11 Or a = 12 Then
   str = &quot;a is equal to 11 or 12&quot;
Else
   str = &quot;a is not equal to 10, 11 or 12&quot;
End If
</PRE>
</td></tr></table></p>
<P>When creating <I>If</I> blocks in either JScript or VBScript, you can have as many 
<I>else if </I>(JScript) or <I>ElseIf</I> (VBScript) statements as you want. However, the 
<I>if/If</I> statement must always be first, and the 
<I>else/Else</I> statement must always be last in the series.</P>

<A NAME="61"><H3><I>Selection</I> blocks</H3></A>
<P>Another form of conditional statement is 
<I>selection</I>. In <I>selection</I>, an expression 
is evaluated once. The result of the expression is then compared against a number 
of cases in the <I>selection </I>block. If any of the values of the cases match the value of 
the expression, the code below the <I>case</I> statement is executed. In addition, it's 
possible to include a default case that's executed if none of the other cases matches the 
value of the expression. <I>selection </I>blocks differ from 
<I>if</I> blocks in that the expression in a <I>selection 
</I>block is evaluated only once. In an <I>if</I> block, many expressions can be 
evaluated depending on whether you have <I>else 
if</I> statements. <I>selection </I>blocks tend to 
be speedier than <I>if</I> blocks.</P>
<P>In JScript, <I>selection </I>blocks are often referred to as 
<I>switch</I> statements or <I>case</I> blocks because to implement a 
<I>selection </I>block in JScript, you use a 
<I>switch</I> statement in conjunction with a number of 
<I>case</I> statements. They work exactly as I just 
described. First the expression in the 
<I>switch</I> statement is evaluated. Then the value returned 
from the expression is tested against each 
<I>case</I> statement, in order. If the value of 
the expression matches a value in a <I>case</I><B> 
</B>statement, the code below the <I>case</I><B> 
</B>statement is executed. If the value of the expression doesn't match any of the values of the 
<I>case</I> statements, the code below the default label is executed if it's present. Here's 
the example that I used for JScript <I>if</I> blocks, using 
<I>selection </I>instead:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>switch(a)
{
   case 10:
      str = &quot;a is equal to 10&quot;;
      break;
   case 11:
      str = &quot;a is equal to 11&quot;;
      break;
   case 12:
      str = &quot;a is equal to 12&quot;;
      break;
   default:
      str = &quot;a is not equal to 10, 11, or 12&quot;;
      break;
}
</PRE>
</td></tr></table></p>
<P>You might be wondering what the deal is with the 
<I>break</I> statements that I included. In JScript 
<I>switch</I> statements, if you don't include the 
<I>break</I> statement, program execution continues through the rest of the case statements. In other words, 
if I didn't include the <I>break</I> statements and the value of 
<I>a </I>were 10, all lines of code below the case statement for 10 would be executed. This means that at the end 
of this <I>switch</I> statement, <I>str</I> would contain the string &quot;a is not equal to 10, 11, or 12&quot;&#8212;not at all what we intended. So be careful.</P>
<P>However, this fact makes it easy for you to execute the same block of code 
for multiple values of the expression. In the example for JScript 
<I>if</I> blocks, I used the same line of code to execute the following: if 
<I>a </I>is equal to 11 or equal to 12. The 
<I>switch</I> statement had two <I>case</I><B> 
</B>statements&#8212;one for 11 and one for 12. You can use 
the knowledge of program flow that I just mentioned to condense the code a bit.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> switch(a)
 {
    case 10:
       str = &quot;a is equal to 10&quot;;
       break;
    case 11:
    case 12:
       str = &quot;a is equal to 11 or 12&quot;;
       break;
    default:
       str = &quot;a is not equal to 10, 11, or 12&quot;;
       break;
    }
</PRE>
</td></tr></table></p>
<P>As you can see in the <I>selection</I> block, if the value of 
<I>a</I> is 11 or 12, <I>str</I> is set to the string &quot;a is equal to 11 or 12&quot;. This is much more efficient and much easier 
to read.</P>
<P>In VBScript, the concept of selection is almost exactly the same as in 
JScript. The only difference is the statements you use. To evaluate the expression, you 
use the <I>Select Case</I> clause. To test the value of the expression, you use 
<I>Case</I> statements. To specify a default case, you use the 
<I>Case Else</I> clause. Also, whereas JScript 
uses braces to denote the beginning and ending of the 
<I>selection</I> block, VBScript uses the <I>Select 
Case</I> and <I>End Select</I> clauses to denote the beginning and ending of the 
<I>selection</I> block, respectively. Let's take a look at the JScript selection example written 
in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE> Select Case a
    Case 10:
       str = &quot;a is equal to 10&quot;
    Case 11:
       str = &quot;a is equal to 11&quot;
    Case 12:
       str = &quot;a is equal to 12&quot;
    Case Else:
       str = &quot;a is not equal to 10, 11, or 12&quot;
 End Select
</PRE>
</td></tr></table></p>
<P>In this VBScript <I>selection</I> block, I didn't use the 
<I>break</I> statement as I did in JScript because program execution in VBScript is different from program 
execution in JScript. Execution in a VBScript 
<I>selection</I> block doesn't fall through if you 
don't specify a <I>break</I> statement. Only the code associated with the correct 
<I>Case</I> statement is executed. Although this means that problems won't occur if you forget a 
<I>break</I> statement, it also means that you can't group 
<I>Case</I> statements together as I did in the previous JScript example.</P>

<A NAME="62"><H2>Loops</H2></A>

<P>Looping gives you the ability to run the same block of code as many times as 
you want. This allows you to perform such tasks as adding up all the values in an 
array or requesting user input and displaying a message while the user is entering 
incorrect data. The various ways to execute loops are similar in JScript and VBScript; 
therefore, I'll cover each method in turn and explain how it applies to both JScript 
and VBScript.</P>

<A NAME="63"><H3><I>While</I> loops</H3></A>
<P>A <I>while</I> loop is used to specify that a block of code should be executed while 
some condition is true. In JScript, <I>while</I> loops are coded using the 
<I>while</I> keyword. In VBScript, you use a combination of the 
<I>While</I> and <I>Wend</I> keywords. For 
instance, remember the array earlier in this chapter that keeps track of the total cost of all 
the orders that a customer made? We can use a 
<I>while</I> loop in JScript to tally up the total charges for that customer, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var total = 0.0;
var chargeNum = 0;
var charges = new Array(100); 

while (chargeNum &lt; 100)
{
   total += charges[chargeNum];
   chargeNum++;
}
</PRE>
</td></tr></table></p>
<P>This example first defines a counter named 
<I>chargeNum</I> that keeps track of the current position in the 
<I>charges</I> array. This counter is initially set to 0. The 
<I>while</I> loop is executed while the expression &quot;chargeNum &lt; 100&quot; is true. In other words, the 
<I>while</I> loop executes while <I>chargeNum</I> is less than 100, which is the total number of 
items in the array. Each time through the 
<I>while</I> loop, the current charge in the array is 
added to the current total. Next, <I>chargeNum</I> is incremented by 1. This is an important 
step because if we didn't increment 
<I>chargeNum</I> by 1, we would create what's known 
as an infinite loop&#8212;a loop that never ends.</P>
<P>Two JScript keywords are worth mentioning at this 
point&#8212;<I>break</I> and <I>continue</I>. When you want to exit a JScript loop, you can specify the 
<I>break</I> statement. For example, you can stop the tallying of items in the array when you reach an item 
equal to 0.0. This way, if only three charges are in the array, you don't have to tally up 
all the items in the array. You can tally up just the first three:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>while (chargeNum &lt; 100)
{
   if (charges[chargeNum] == 0) 
      break;
   total += charges[chargeNum];
   chargeNum++;
}
</PRE>
</td></tr></table></p>
<P>The <I>continue</I> statement allows you to skip the rest of the code in the code 
block and continue executing the next iteration of the loop. For example, what if a 
charge in the array is negative? In reality, this would probably be a credit in our bills, but 
in our example we don't allow negative numbers. You can use the 
<I>continue</I> statement to skip negative values:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>while (chargeNum &lt; 100)
{
   if (charges[chargeNum] &lt; 0) 
      continue;
   total += charges[chargeNum];
   chargeNum++;
}
</PRE>
</td></tr></table></p>
<P>Coding this looping example in VBScript is easy. All you have to do is use 
the <I>While</I> and <I>Wend</I> keywords:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim total
Dim chargeNum
Dim charges(100)

total = 0.0
chargeNum = 0

While chargeNum &lt; 100
   total = total + charges(chargeNum)
   chargeNum = chargeNum + 1
Wend
</PRE>
</td></tr></table></p>

<A NAME="64"><H3><I>Do</I> loops</H3></A>
<P>The<I> do</I> loops are quite flexible. They allow you to execute a block of code at 
least once while a condition is true, until a condition is false, or until a condition is 
true (VBScript only). The way <I>do</I> loops function is somewhat different in JScript 
and VBScript. In JScript, a <I>do</I> loop has a specific syntax and works in a particular 
manner. <I>Do</I> loops in VBScript have many different variations. The basic concept is 
that a <I>do</I> loop executes a block of code at least once. This concept is different from 
<I>while</I> loops in that a <I>while</I> loop might never execute a block of code, depending on 
the expression being evaluated.</P>
<P>To implement <I>do</I> loops in JScript, you use the 
<I>do</I> and <I>while</I> keywords in conjunction. Let's take the example we've been working with in this section and 
convert it to a <I>do</I> loop:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>do
{
   total += charges[chargeNum];
   chargeNum++;
} while (chargeNum &lt; 100);
</PRE>
</td></tr></table></p>
<P>In this case, the block of code is first executed, and then the condition 
is checked. The outcome is basically the same. In this example, using a 
<I>do</I> loop didn't buy us anything. However, if you run into a situation in which you want to 
execute a block of code one or more times, a 
<I>do</I> loop is the answer.</P>
<P>In VBScript, the <I>Do</I> loop has many variations, but each variation uses the 
<I>Do</I> and <I>Loop</I> keywords in some fashion. For instance, you might want to execute a 
block of code one or more times while some condition is true, as we did in the earlier 
JScript example. In VBScript, you can accomplish this using the 
<I>Do</I> keyword in combination with the 
<I>Loop While </I>clause. Here's the VBScript code that executes a block 
of code one or more times while some condition is true:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Do
   total = total + charges(chargeNum)
   chargeNum = chargeNum + 1
Loop While chargeNum &lt; 100
</PRE>
</td></tr></table></p>
<P>You can also execute a block of code 0 or more times, in the same way 
you can with a <I>While</I> loop. Actually, many people prefer using a 
<I>Do</I> loop in this manner rather than using the 
<I>While</I> loop in VBScript. To do this in VBScript, you use the 
<I>Do While</I> clause in combination with the 
<I>Loop</I> keyword, as in this example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Do While chargeNum &lt; 100
   total = total + charges(chargeNum)
   chargeNum = chargeNum + 1
Loop
</PRE>
</td></tr></table></p>
<P>Sometimes you might want to execute a block of code one or more times 
until some condition is true. For instance, using the example we've been working with 
so far, you might want to loop until 
<I>chargeNum</I> is equal to 100 instead of while it's 
less than 100. To do this, you can use the 
<I>Do</I> keyword in combination with the <I>Loop 
Until</I> clause, as in this example:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Do
   total = total + charges(chargeNum)
   chargeNum = chargeNum + 1
Loop Until chargeNum = 100
</PRE>
</td></tr></table></p>
<P>You can also execute this block of code 0 or more times using the 
<I>Do Until</I> clause in combination with the 
<I>Loop</I> keyword, like so:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Do Until chargeNum = 100
   total = total + charges(chargeNum)
   chargeNum = chargeNum + 1
Loop
</PRE>
</td></tr></table></p>

<A NAME="65"><H3><I>For</I> loops</H3></A>
<P>In the <I>while</I> and <I>do</I> loops, I had to keep a counter variable to tell me the 
current position of the array. Then, in each case, I had to manually increment the 
counter variable. What a pain. &quot;Isn't there an easier way?&quot; you ask. Fortunately for you 
and me, there is. Both JScript and VBScript have what are known as 
<I>for</I> loops, which allow you to execute a block of code while some condition is true. &quot;Big deal,&quot; you say. 
&quot;Isn't that what while and do loops are for?&quot; The major advantage of 
<I>for</I> loops is that they automatically increment a counter variable for you. Let's convert our JScript 
example from a <I>while/do </I>loop to a 
<I>for</I> loop:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var total = 0.0;
var charges = new Array(100); 

for (var chargeNum = 0; chargeNum &lt; 100; chargeNum++)
{
   total += charges[chargeNum];
}
</PRE>
</td></tr></table></p>
<P>This code provides the same result as the code using the 
<I>while</I> and <I>do</I> loops, but it's easier to read. Let's analyze this a bit, shall we? The 
<I>for</I> loop consists of three parts, each separated by a semicolon. The first 
part&#8212;<I>var chargeNum = 0</I>&#8212;is the 
initialization section. This is where you define and initialize your counter 
variables. The next section is the conditional expression. This expression is evaluated each 
time through the loop. When this expression returns 
<I>false</I>, the loop is exited. The third section in the 
<I>for</I> loop is the increment section. This is where you specify how 
you want the counter variables to be incremented. In this case, I had the 
<I>for </I>loop increment <I>chargeNum</I> by 1 each time through the loop. The incrementing of the 
counter variable occurs after each time the code block is executed and before the 
conditional expression is tested.</P>
<P>Coding a <I>For</I> loop in VBScript is simple. You just use the 
<I>For</I>, <I>To</I>, <I>Step</I>, and 
<I>Next</I> keywords. Let's convert this example to VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim total
Dim chargeNum
Dim charges(100)
total = 0.0

For chargeNum = 0 To 99 Step 1
   total = total + charges(chargeNum)
Next
</PRE>
</td></tr></table></p>
<P>Using the <I>Step</I> keyword, you can specify how much to increment the 
counter variable. You can step by 1, 2, or the value of some variable.</P>

<A NAME="66"><H3><I>For each /For...in</I></H3></A>
<P>Another form of the <I>for</I> loop makes life even easier. If you're dealing with arrays, 
you can use a special form of the <I>for</I> loop to iterate through an entire array. This 
version of the <I>for</I> loop iterates only through the actual number of items in the array. In 
other words, if you define the array as having a size of 100, but it contains only three 
items, this version of the <I>for</I> loop will stop after three items. In JScript, you can use 
the <I>for...in </I>keywords to loop through an entire array. Let's convert our JScript 
sample once again to use this construct:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var total = 0.0;
var charges = new Array(100);
for (var chargeNum in charges)
{
   total += charges[chargeNum];
}
</PRE>
</td></tr></table></p>
<P>In VBScript, you use the <I>For Each</I><B> 
</B>and <I>Next</I> keywords in conjunction to perform the same function. Let's convert our JScript example to VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim total
Dim chargeNum
Dim charges(100)

total = 0.0

For Each chargeNum in charges
   total = total + charges(chargeNum)
Next
</PRE>
</td></tr></table></p>
<P>As you can see, loops give you tremendous control over the flow of your 
programs. And remember, you can combine conditional statements with loops to 
give you the ultimate control.</P>

<A NAME="67"><H2>Subroutines and Functions</H2></A>

<P>Often when writing script, you find yourself typing the same bit of code over 
and over again. Perhaps you're writing code to check the value of a variable and 
perform some action depending on the value of that variable. Wouldn't it be great if you 
could write the code just once and reuse it whenever you needed to? Guess what? You can.</P>
<P>By using subroutines and functions, you can group blocks of code together 
and execute them whenever you want just by calling the subroutine or the function 
by name. But what's the difference between subroutines and functions? Subroutines 
are blocks of code that perform some action when called but don't return anything 
to the caller. Functions are the same as subroutines, but they do return results to 
the caller. VBScript has both subroutines and functions; JScript has only functions, so 
you can choose whether or not to return results to the caller. The best aspect of 
subroutines and functions in JScript and VBScript is that tons of them are available 
for you to use from third-party developers as well as from the two scripting 
languages themselves. So you can reuse code that was written by somebody else, and you 
don't have to reinvent the wheel. For example, you'll use two functions provided in 
both JScript and VBScript most often: 
<I>alert</I> and <I>prompt</I>. (The 
<I>alert</I> and <I>prompt</I><B> 
</B>functions are actually members of the 
<I>window</I> object. More on that in the <a href="ch03a.htm">next chapter</a>.) 
The <I>alert</I> function displays a message box that contains some text that you want to 
display to the user. To call the <I>alert</I><B> 
</B>function (or any other function, for that matter) 
from JScript, simply specify the name of the function and its parameters in 
parentheses. The <I>alert</I> function takes one input parameter that's the string you want to display 
to the user. Here's how you can display the string &quot;Hello, World!&quot; to the user in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>alert(&quot;Hello, World!&quot;);
</PRE>
</td></tr></table></p>
<P>To call the <I>alert</I> function from VBScript, simply specify the name of the 
function and its parameters. When calling a subroutine or a function in VBScript, you 
don't have to include the parentheses unless you're going to use the return value from 
a function. (More on that later in this chapter.) Here's how you can display the 
string &quot;Hello, World!&quot; to the user in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>alert &quot;Hello, World!&quot;
</PRE>
</td></tr></table></p>
<P>Figure 2-14 shows the dialog box displayed by a call to the 
<I>alert</I> function in JScript or VBScript.</P>

<P>
<A HREF="javascript:fullSize('F02ii14x.htm')"> <img src="images/F02ii14.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 2-14.</B> <I>Dialog box displayed by a call to the alert function.</I><!-- /caption -->
</P>

<P>VBScript also includes another function that's similar to the 
<I>alert</I> function named 
<I>MsgBox</I>, and it can be used to display a message to the user. The difference 
between the <I>alert</I> and 
<I>MsgBox</I> functions is that the 
<I>MsgBox</I> function is much more 
versatile. You can specify a number of different arguments to tell it how the message box 
should be displayed. For example, you might want to ask the user a question and 
provide him or her with buttons to select Yes or No. Also, you'll want to know which 
button the user pressed. Fortunately, 
<I>MsgBox</I> returns the value of the button that was 
pressed. For example, to ask the user whether you should proceed, you would call the 
<I>MsgBox</I> function, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Option Explicit
   Dim Ans

   Ans = MsgBox(&quot;Should I proceed?&quot;, vbYesNo)

   If Ans = vbYes Then
      ' Do something cool   
   End If
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Note that I used parentheses when calling the 
<I>MsgBox</I> function in this case. That's because I needed to set the 
<I>ans </I>variable to the return value of the 
<I>MsgBox</I> function. The dialog box displayed by this call to the 
<I>MsgBox</I> function is shown in Figure 2-15.</P>

<P>
<A HREF="javascript:fullSize('F02ii15x.htm')"> <img src="images/F02ii15.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 2-15.</B> <I>Dialog box displayed by a call to the</I> MsgBox <I>function.</I><!-- /caption -->
</P>

<P>Another important function is the <I>prompt</I> function. It allows you to display a message box to ask the user to input some data. This message box contains an 
input field for the user to input data. You can also specify a default value for the 
input field when displaying the message box. If you don't specify a default value, the 
string &quot;undefined&quot; is displayed in the input field. The 
<I>prompt</I> function returns the value 
that the user typed in the input field. For example, if you want to ask the user to 
enter the price of an item, you can call the 
<I>prompt</I> function from JScript, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var price = 0.0;
price = prompt(&quot;Please enter the price of the item&quot;, price);
</PRE>
</td></tr></table></p>
<P>This example displays a message box containing the specified string and 
the default value <I>0</I> in the input field. You can perform the same action from 
VBScript, like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim price
price = 0.0
price = prompt(&quot;Please enter the cost of the item&quot;, price)
</PRE>
</td></tr></table></p>
<P>Figure 2-16 shows the dialog box displayed by a call to the 
<I>prompt</I> function in JScript or VBScript.</P>

<P>
<A HREF="javascript:fullSize('F02ii16x.htm')"> <img src="images/F02ii16.JPG" width=404 height=184 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 2-16.</B> <I>Dialog box displayed by a call to the</I> prompt <I>function.</I><!-- /caption -->
</P>

<P>Now that you have learned how to call functions and subroutines, you're 
probably wondering how you can create your own. In JScript, you use the 
<I>function</I> keyword to create a function. For instance, if you wanted to create a function that 
asks the user for the current price of an item, validates the entered price, and displays 
a message box to tell the user whether the price is valid, you could create the 
following function:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>function getPrice(defaultPrice)
{
   var price = defaultPrice;
   price = prompt(&quot;Please enter the price of the item&quot;, price);

   if (price != null)
   {
      if (price &lt; 0)
         alert(&quot;The price of an item cannot be negative.&quot;);
      else
         alert(&quot;The price you entered is correct.&quot;);
   }

   return price;
}
</PRE>
</td></tr></table></p>
<P>The <I>getPrice </I>function takes one argument that specifies the default price 
to be displayed in the message box when prompting the user. The 
<I>price </I>variable is set equal to 
<I>defaultPrice</I>,<I> </I>and then the 
<I>prompt</I> function is called. If the user clicks 
the Cancel button, the <I>prompt</I> function returns 
<I>null</I>. That's why I check <I>price</I> to 
see whether it's <I>null</I>. If <I>price </I>isn't equal to 
<I>null</I>, I then check to see whether it's negative. If it's negative, I display a message box to tell the user that the price of an 
item can't be negative. If the item is positive, I display a message box to tell the user 
that everything is okay. Finally, I return the price entered by the user using the 
JScript <I>return</I> operator. You can call the 
<I>getPrice</I> function in the same way you call the 
<I>alert</I> and <I>prompt</I> functions. Here's one way you might call the 
<I>getPrice</I> function:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var cost = 0;
cost = getPrice(10.50);
</PRE>
</td></tr></table></p>
<P>Coding this function in VBScript is pretty easy, so let's go ahead and do it. 
The following VBScript function performs the same actions as the JScript function I 
just described. However, it uses the 
<I>Function</I> keyword and the <I>End 
Function</I> clause to specify the beginning and ending of the function:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Function getPrice(defaultPrice)
   Dim price
   price = defaultPrice
   price = prompt(&quot;Please enter the price of the item&quot;, price)

   If VarType(Price) &lt;&gt; vbNull Then
      If price &lt; 0 Then
         MsgBox &quot;The price of an item cannot be negative.&quot;
      Else
         MsgBox &quot;The price you entered is correct.&quot;
      End If
   End If

   getPrice = price
End Function
</PRE>
</td></tr></table></p>
<P>As I mentioned, this VBScript code performs the same actions as the JScript 
code. The main difference is in the way the actions are executed. To return a value 
from a VBScript function, in the statement, the name of the function is set equal to the 
value you want to return, like the last statement in the function before the 
<I>End Function</I> clause in the previous example. The other major difference is how the code 
checks for a null return value from the 
<I>prompt</I> function. Remember that the only 
VBScript data type is variant. Most of the time, you shouldn't have to worry about this 
fact. But in this case, you do. To check for null values, you have to use the 
<I>VarType</I> function, which tells you the type of data that's being represented by the variant data 
type. In this case, if the user presses Cancel, the return value of the 
<I>prompt</I> function is a variant with the 
<I>vbNull</I> data type. The following is one way that you might want 
to call this function:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim cost
cost = getPrice(10.50)
</PRE>
</td></tr></table></p>
<P>As I mentioned at the beginning of this section, one other type of function 
exists in VBScript&#8212;a subroutine. Recall that a subroutine is a function that doesn't 
return a value; therefore, it's much easier to code. In the preceding example, a bit of 
code checks to see whether the price entered by the user is valid. This bit of code 
could be used in a lot of different places. Therefore, you'd better put it in a subroutine. 
To create a subroutine in VBScript, you use the 
<I>Sub</I> keyword with the <I>End Sub 
</I>clause. Here's a VBScript subroutine that validates the price of an item:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Sub checkPrice(price)
   If VarType(Price) &lt;&gt; vbNull Then
      If price &lt; 0 Then
         MsgBox &quot;The price of an item cannot be negative.&quot;
      Else
         MsgBox &quot;The price you entered is correct.&quot;
      End If
   End If
End Sub
</PRE>
</td></tr></table></p>
<P>You can then call the <I>checkPrice </I>subroutine from within the 
<I>getPrice</I> function.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Function getPrice(defaultPrice)
   Dim price
   price = defaultPrice
   price = prompt(&quot;Please enter the price of the item&quot;, price)

   checkPrice price

   getPrice = price
End Function
</PRE>
</td></tr></table></p>
<P>You can easily see how using functions and subroutines can condense your 
code and reduce the amount of typing that you have to do.</P>

</BODY>
</HTML>






