<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">

<TITLE>Chapter 6 -- Hosting the WebBrowser Control and Automating Internet Explorer</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05d.htm">[Previous]</A> <A HREF="ch06b.htm">[Next]</A><P>


<FONT SIZE="+3">Chapter 6</FONT>

<A NAME="152"><H1>Hosting the WebBrowser Control and Automating Internet Explorer</H1></A>

<P>I have no doubt that you'll agree the World Wide Web has revolutionized 
application development. Prior to the Web, developing applications that were rich in 
content and easy to use was sometimes a long and tedious process. Now, with just a 
little knowledge of DHTML and script, almost anybody can create Web applications 
that rival their Microsoft Windows counterparts.</P>

<P>Microsoft Internet Explorer 5 enables you to build almost any kind of 
application by using only DHTML and script (including Windows applications known as 
HTAs, which we talked about in <A HREF="ch04a.htm">Chapter 4</A>), but suppose you wanted to create just a 
typical Windows application in Microsoft Visual Basic or Microsoft Visual C++? 
For example, you might want to create a point-of-sale system that requires access to scanners, cash registers, and credit card terminals. For such a system, using only DHTML and script might be a bit too limiting. You could create it by using a combination of 
ActiveX controls, DHTML, and script, but the system might be somewhat slow.
</P>

<P>To create a point-of-sale system like the one I just described, lengthy and 
sometimes arduous design and development phases are required&#8212;not to mention 
the testing phase. During the design phase, you undoubtedly create many designs of 
the user interface. Then when it comes time for development, you have to 
implement the user interface from scratch even though somebody already used a design tool 
to create the interface designs. Why not combine the design and development 
phases so that you can easily reuse the original designs in your finished application?
</P>
<P>What if I told you that you could use Web pages to create the designs for a 
user interface and then just plug these pages into your application? Believe it or not, 
you can. Internet Explorer includes a component known as the WebBrowser control 
that allows you to easily integrate Web browsing into new or existing applications. 
With this control, you can design the user interface by using simple Web pages, which 
you can view and then use to navigate to new pages. To the user, this functionality 
appears to be part of your application. By using the WebBrowser control in combination 
with the DHTML Object Model, you can retrieve data that users entered into a Web 
page and dynamically manipulate that Web page just like you did using script in <A HREF="ch03a.htm">Chapter 3</A>.
</P>
<P>You can also use the WebBrowser control in a number of other 
scenarios&#8212;for example, when creating Windows help files. You probably know how much of a hassle creating Windows help files can be. You have to create Rich Text Format 
(RTF) files that contain special help codes. Then you have to compile your RTF files 
into a special format that can be read and displayed by the Microsoft Windows help 
system. Why should you have to compile these files just to provide help for your 
users? By using the WebBrowser control, you can display simple Web pages to provide 
help to your users. And because creating Web pages is so easy (I think my 
grandmother even has a home page), you'll be able to shave hours off your development cycle.
</P>
<P>Many Microsoft products such as Microsoft Money 99, the entire 
Microsoft Encarta suite, and Microsoft Office 2000 are already starting to use the 
WebBrowser control in the ways I've described. And America Online (AOL) and CompuServe 
use the WebBrowser control and other Internet Explorer components to create 
their browser applications&#8212;they simply host the WebBrowser control, which I'm sure 
saved them a lot of development time and money.
</P>
<P>In addition to creating applications that reuse the WebBrowser control, you 
can control the Internet Explorer browser (known as automating Internet 
Explorer). Perhaps you want to provide Internet functionality from your application by 
using the browser, or you want to enhance the browsing experience for users but still 
let them use their favorite browsers. The possibilities are endless.
</P>
<P>In this chapter, I'll start with an architectural overview of the WebBrowser 
control in the context of hosting the control. Then I'll discuss the different interfaces, 
including their methods and properties, that are available when hosting the 
WebBrowser control and automating Internet Explorer. (<A HREF="ch07a.htm">Chapter 7</A> covers the different 
Internet Explorer events.) As you'll see, the interfaces of the WebBrowser control and 
Internet Explorer have a lot in common.
</P>
<P>I'll also show you how to host the WebBrowser control in Visual Basic and 
Visual C++ applications and teach you how to automate Internet Explorer by using 
both of these development tools. Finally, I'll show you how to add some advanced 
functionality to your application, such as accessing the Internet Explorer 
<I>IWebBrowser2</I> interface from an ActiveX control, accessing frames on 
a Web page from the host application, and invoking some hard-to-reach browser functionality.</P>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Having a thorough understanding of COM is more important now than 
it was in previous chapters. If your knowledge of COM is only minimal, you won't 
have trouble with the sections involving Visual Basic, but you might struggle with the 
sections involving Visual C++. If you follow along closely, though, I think you'll do OK.
</blockquote></div></p>


</BODY>
</HTML>





