<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Events and Outgoing Interfaces</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch07a.htm">[Previous]</A> <A HREF="ch07c.htm">[Next]</A><P>

<A NAME="181"><H1>Events and Outgoing Interfaces</H1></A>

<p>As you learned in <A HREF="ch03a.htm">Chapter 3</A>, whenever a COM object needs to notify a client 
application that an action has occurred, the COM object sends out a message known 
as an event. The process of sending the message is referred to as firing an event. 
But what if an event is fired and nothing is listening? Did the event ever occur? 
Obviously, the client application that is controlling the COM object has to be listening for 
these events. When a client application wants to receive events from a COM object, it 
&quot;advises&quot; the COM object of this fact.</p>

<p>For a COM object to communicate with its client, the object must support 
one or more outgoing interfaces. A COM object that supports outgoing interfaces is 
referred to as a connectable object. To be qualified as a connectable object, the object 
must implement the <I>IConnectionPointContainer 
</I>interface. Through this interface, clients can learn which outgoing interfaces the server supports. Outgoing interfaces 
are actually implemented by the client and plugged into the COM object through 
connection points. The part of the client that implements the outgoing interfaces is 
known as an event sink.</p>

<p>A separate connection point represents each of the outgoing interfaces 
supported by the server. Each of these connection points can handle only one type of 
outgoing interface and must support at least the 
<I>IConnectionPoint</I> interface. The diagram in 
Figure 7-1 depicts the relationship between the connectable object and its client.</p>


<p>
<A HREF="javascript:fullSize('F07ii01x.htm')"> <img src="images/F07ii01.JPG" width=404 height=184 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure 7-1.</b> <i>Connectable object and its client.</i><!-- /caption -->
</p>


<p>The server must implement two interfaces for a client to be able to 
receive 
events&#8212;<I>IConnectionPointContainer</I> and 
<I>IConnectionPoint</I>. We'll take a look at 
these interfaces now and later examine the different ways to sink events.</p>

<A NAME="182"><h2><I>IConnectionPointContainer</I></h2></A>
<p>Every connectable object implements 
<I>IConnectionPointContainer</I>. Through this 
interface, a client that wants to receive events can find out about the various 
connection points supported by the connectable object. A client can get a pointer to 
this interface by calling <I>QueryInterface </I>using any other interface that the object 
supports. (You can call <I>QueryInterface </I>using any interface pointer, because all 
COM interfaces inherit from <I>IUnknown</I>.) Then the client can use one of the two 
methods of the <I>IConnectionPointContainer</I> interface, described in Table 7-1, to get a 
pointer to a connection point.</p>

<p><b>Table 7-1</b> <i>Methods of the</I> IConnectionPointContainer<I> Interface</i></p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Method</i></th>
<th><i>Description</i></th>
</tr>

<tr>
<td valign="top"><I>EnumConnectionPoints</I></td>
<td valign="top">Allows the client to get a list of pointers to all the 
connection points that are supported by the 
connectable object.</td>
</tr>

<tr>
<td valign="top"><I>FindConnectionPoint</I></td>
<td valign="top">Lets the client query the connectable object 
about whether it supports a particular interface. The 
client specifies the interface identifier (IID) of the 
connection point it desires. If the connectable object supports 
this interface, it returns a pointer to the 
<I>IConnectionPoint</I> interface for the appropriate connection point.</td>
</tr>
</table>
</p>

<A NAME="183"><h2><I>IConnectionPoint</I></h2></A>
<p>Once the client knows which connection points the connectable object 
supports, the client can establish a connection with the connectable object. The client 
advises the connectable object about which event sink the object should use for all 
events. When the client no longer wants to receive events from the connectable object, 
the client unadvises the object. Table 7-2 shows the methods of 
the <I>IConnectionPoint</I> interface through which the client can connect to the object. 
(Most of the time, you'll be concerned with only the first two in the table.)</p>

<p><b>Table 7-2</b> <i>Methods of the </I>IConnectionPoint<I> Interface</i></p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Method</i></th>
<th><i>Description</i></th>
</tr>

<tr>
<td valign="top"><I>Advise </I></td>
<td valign="top">Establishes a connection between the client 
and a certain connection point in the connectable object. The client must pass a pointer to 
the <I>IUnknown</I> interface of its event sink. The 
event sink must implement the <I>IDispatch</I> interface 
to receive events. Typically, the connectable 
object will call the <I>Invoke </I>method of the 
<I>IDispatch</I> interface of the client each time the object 
fires an event. The <I>Advise</I> method returns a 
cookie that the client must use when breaking the 
connection through a call to the <I>Unadvise</I> method.</td>
</tr>

<tr>
<td valign="top"><I>Unadvise </I></td>
<td valign="top">Breaks the connection between the client and 
the connectable object. When calling this method, the client passes the cookie that it received 
from the call to <I>Advise</I>.</td>
</tr>

<tr>
<td valign="top"><I>GetConnectionInterface</I></td>
<td valign="top">Returns the IID of the outgoing interface 
managed by the connection point. The <I>GetConnectionInterface 
</I>method lets the client translate from an 
<I>IConnectionPoint</I> interface pointer to an IID.</td>
</tr>

<tr>
<td valign="top"><I>GetConnectionPointContainer </I></td>
<td valign="top">Retrieves the 
<I>IConnectionPointContainer</I> 
interface pointer for the connectable object of the connection point.</td>
</tr>

<tr>
<td valign="top"><I>EnumConnections </I></td>
<td valign="top">Enumerates the current connections for a 
connectable object.</td>
</tr>
</table>
</p>

</BODY>
</HTML>





