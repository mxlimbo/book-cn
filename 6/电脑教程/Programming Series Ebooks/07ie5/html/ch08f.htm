<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Accessing the DHTML Object Model from a Visual Basic ActiveX Control</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch08e.htm">[Previous]</A> <A HREF="ch09a.htm">[Next]</A><P>

<A NAME="214"><H1>Accessing the DHTML Object Model from a Visual Basic ActiveX Control</H1></A>

<P>After discovering the power of the DHTML Object Model, you probably won't 
be surprised that you can also access this functionality from ActiveX controls on a 
Web page. In <A HREF="ch06a.htm">Chapter 6</A>, I showed you how to access the 
<I>IWebBrowser2 </I>interface of Internet Explorer from Visual C++ ActiveX controls. Through this interface, you can 
access the <I>document</I> object by using the WebBrowser's 
<I>Document</I> property. And once you have a pointer to the document, you can access any object in the object model, 
including the <I>window</I> object and all the HTML elements on the page. You can also 
sink events for the objects in the object model from your applications.</p>

<p>Because you already know how to obtain a pointer to the 
<I>IWebBrowser2 </I>interface (discussed in <A HREF="ch06a.htm">Chapter 6</A>), and you also know how to access the objects in 
the DHTML Object Model, I won't bother showing you how to access the DHTML 
Object Model from the Visual C++ ActiveX controls again. I'll leave that up to you. I 
will show you how to access the objects in the object model from a Visual Basic 
ActiveX control. As you've probably already guessed, you can accomplish this task easily. 
To see how, we're going to check out a really cool example. This example ActiveX 
control is named PageController, and it's shown in Figure 8-13.</p>
<p>To run PageController, first use Regsvr32.exe to register the 
SampleControl.ocx file, which is included on the companion CD in the following folder: \Samples\
Chap08\PageController. Next open the PageController.htm file (which is also in 
the \PageController folder) in Internet Explorer.</p>
<p>PageController provides a lot of functionality. First of all, it allows you to 
view all the HTML tags on the Web page. When you click the Walk The DOM! 
button, PageController builds a tree of all the HTML tags on the page and displays this 
tree in the left-hand tree-view window. When you click a branch in the tree, 
PageController highlights the section of the Web page that is associated with that HTML tag. 
For example, if you click the &lt;H1&gt; tag in the tree-view, the heading that reads 
&quot;ActiveX Control Sample&#8212;Page Controller&quot; is highlighted.</p>

<P>
<A HREF="javascript:fullSize('F08ii13x.htm')"> <img src="images/F08ii13.JPG" width=404 height=323 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 8-13.</B> <I>PageController.</I><!-- /caption -->
</p>

<p>Besides being able to walk the object model, after you've clicked the Walk 
The DOM! button you can change various elements on the Web page including the 
headline, paragraph text, and different page colors. But wait&#8212;there's more! 
PageController also sinks events for the 
<I>document</I> object. When you click on an area in the 
document after you click the Walk The DOM button, a message box is displayed that 
tells you the HTML tag and ID that are associated with the area that you clicked.</p>

<p>
<div class="note"><blockquote><b>NOTE</b><hr>
This message box won't be displayed if you click the 
PageController control. Remember event bubbling from <A HREF="ch03a.htm">Chapter 3</A>? Well, PageController 
catches events that bubble up to the document level. ActiveX controls written in 
Visual Basic don't bubble events to the document, so you won't see an event fired 
when you click the control.
</blockquote></div>
</p>

<P>The PageController control consists of a lot of Visual Basic code, much of 
which we've already covered. So I won't bore you by discussing it all again. Instead, I 
want to show you how to do something we haven't talked about yet&#8212;accessing the 
object model from an ActiveX control. You already know how to do this if you 
are hosting the WebBrowser control or automating Internet Explorer.</p>
<p>You start by obtaining a pointer to the 
<I>document</I> object. Retrieving this pointer from an ActiveX control is a little different, but still quite easy. Just create a 
variable of type <I>HTMLDocument</I>, and set it equal to the 
<I>Parent</I> property of the Visual Basic 
<I>UserControl</I> object. That's exactly what 
PageController  does. It  first defines an 
<I>HTMLDocument </I>variable. Then, when you click the Walk The DOM! button, 
PageController sets this variable equal to 
<I>UserControl.Parent</I>. Here's the code to do this, minus 
some additional code that actually walks the object model:</p>
<P><table cellpadding=5 WIDTH="95%"><TR><TD>
<PRE>Private WithEvents myDoc As HTMLDocument

Private Sub btnDomWalker_Click()
   ' Set a reference to the document object.
   Set myDoc = UserControl.Parent
End Sub
</PRE>
</td></tr></table></p>

<P>That's all there is to it. Now the <I>myDoc</I> variable refers to the 
<I>document</I> object of the Web page. You'll notice that this code uses the 
<I>WithEvents</I> keyword when defining the <I>myDoc 
</I>variable so that the application can sink events for the 
<I>document</I> object.</p>
<p>The previous code is the most important piece of this example. You must 
obtain a reference to the <I>document</I> object before you can access or change any 
other element in the object model. The example code is located on the companion CD 
in the folder \Samples\Chap08\PageController. Take a few moments to look over 
the code for PageController. Most of this code should be familiar to you because 
you've already read about it in this chapter.
</p>

<p><div class="sidebar"><blockquote>
<p><b>What's Next?</b></p>
At this point, you can host the WebBrowser control, automate Internet 
Explorer, sink events, and access the DHTML Object Model from your applications. 
In the <a href="ch09a.htm">next chapter</a>, you'll learn about the coolest functionality that the 
WebBrowser control provides&#8212;advanced hosting interfaces. You'll use this advanced 
functionality to customize user interface elements of the WebBrowser control 
and to customize users' navigation experience. Hold on, here we go!
</blockquote></div>
</p>
</BODY>
</HTML>





