<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Handling Internet Explorer Events in a BHO</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch12c.htm">[Previous]</A> <A HREF="ch12e.htm">[Next]</A><P>

<A NAME="281"><H1>Handling Internet Explorer Events in a BHO</H1></A>

<p>In IEHelper's implementation of the <I>SetSite 
</I>method, IEHelper advises Internet Explorer that it wants to receive all the events that Internet Explorer fires. To receive 
events from Internet Explorer, you must implement the 
<I>IDispatch </I>interface.</p>

<p>By default, simple ATL objects inherit from 
<I>IDispatchImpl</I>, so you can use 
<I>AtlAdvise</I> to have Internet Explorer alert you when it fires events. The 
only <I>IDispatchImpl </I>method that you must override to receive events is the 
<I>Invoke </I>method. Internet Explorer will call your 
<I>Invoke</I> method each time it fires an event.</p>

<p>To stop receiving events, you can call the <I>AtlUnadvise 
</I>method. When Internet Explorer informs you that it is quitting, you call 
<I>AtlUnadvise </I>by passing <I>DISPID_QUIT</I> to the 
<I>Invoke</I> method. The following code overrides the 
<I>Invoke </I>method. As you can see, a lot of this code is for handling the Internet Explorer events and writing 
their names to the IEHelper events window.</p>

<p><table cellpadding=5 width="95%"><TR><TD>
<PRE>STDMETHODIMP CIEHlprObj::Invoke(DISPID dispidMember, REFIID riid,
                                LCID lcid, WORD wFlags,
                                DISPPARAMS* pDispParams,
                                VARIANT* pvarResult,
                                EXCEPINFO*  pExcepInfo, UINT* puArgErr)
{
   USES_CONVERSION;
   strstream strEventInfo;

   if (!pDispParams)
      return E_INVALIDARG;

   //
   // Get the current URL.
   //  
   LPOLESTR lpURL = NULL;
   m_spWebBrowser2-&gt;get_LocationURL(&amp;lpURL);

   switch (dispidMember)
   {
      //
      // The parameters for this DISPID are as follows:
      // [0]: Cancel flag  - VT_BYREF|VT_BOOL
      // [1]: HTTP headers - VT_BYREF|VT_VARIANT
      // [2]: Address of HTTP POST data  - VT_BYREF|VT_VARIANT 
      // [3]: Target frame name - VT_BYREF|VT_VARIANT 
      // [4]: Option flags - VT_BYREF|VT_VARIANT
      // [5]: URL to navigate to - VT_BYREF|VT_VARIANT
      // [6]: An object that evaluates to the top-level or frame
      //      WebBrowser object corresponding to the event 
      //
      case DISPID_BEFORENAVIGATE2:
         strEventInfo &lt;&lt; &quot;BeforeNavigate2: &quot;;

         if (pDispParams-&gt;cArgs &gt;= 5 &amp;&amp;
             pDispParams-&gt;rgvarg[5].vt == (VT_BYREF|VT_VARIANT))
         {
            CComVariant varURL(*pDispParams-&gt;rgvarg[5].pvarVal);
            varURL.ChangeType(VT_BSTR);

            strEventInfo &lt;&lt; OLE2T(varURL.bstrVal);
         }
         else
            strEventInfo &lt;&lt; &quot;NULL&quot;;

         strEventInfo &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: URL navigated to - VT_BYREF|VT_VARIANT
      // [1]: An object that evaluates to the top-level or frame
      //      WebBrowser object corresponding to the event 
      //
      case DISPID_NAVIGATECOMPLETE2:
         if (pDispParams-&gt;rgvarg[0].vt == (VT_BYREF|VT_VARIANT))
         {
            CComVariant varURL(*pDispParams-&gt;rgvarg[0].pvarVal);
            varURL.ChangeType(VT_BSTR);
  
            strEventInfo &lt;&lt; &quot;NavigateComplete2: &quot;
                         &lt;&lt; OLE2T(varURL.bstrVal)
                         &lt;&lt; ends;
         }
         break;

      //
      // The parameters for this DISPID:
      // [0]: New status bar text - VT_BSTR
      //
      case DISPID_STATUSTEXTCHANGE:
         LPOLESTR lpStatusText;

         m_spWebBrowser2-&gt;get_StatusText(&amp;lpStatusText);
         strEventInfo &lt;&lt; &quot;StatusTextChange: &quot;;

         if (!strcmp(OLE2T(lpStatusText), &quot;&quot;))
            strEventInfo &lt;&lt; &quot;NULL&quot;;
         else
            strEventInfo &lt;&lt; OLE2T(lpStatusText);

         strEventInfo &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: Maximum progress - VT_I4
      // [1]: Amount of total progress - VT_I4
      //
      case DISPID_PROGRESSCHANGE:
         strEventInfo &lt;&lt; &quot;ProgressChange: &quot;;

         if (pDispParams-&gt;cArgs == 0)
            strEventInfo &lt;&lt; &quot;NULL&quot;;
         else
         {
            if (pDispParams-&gt;rgvarg[0].vt == VT_I4)
               strEventInfo &lt;&lt; pDispParams-&gt;rgvarg[0].lVal;

            if (pDispParams-&gt;cArgs &gt; 1 &amp;&amp;
                pDispParams-&gt;rgvarg[1].vt == VT_I4)
            {
               strEventInfo &lt;&lt; &quot;, &quot; &lt;&lt; pDispParams-&gt;rgvarg[1].lVal;
            }
         }

         strEventInfo &lt;&lt; ends;
         break;

      case DISPID_DOCUMENTCOMPLETE:
         strEventInfo &lt;&lt; &quot;DocumentComplete&quot; &lt;&lt; ends;
         break;

      case DISPID_DOWNLOADBEGIN:
         strEventInfo &lt;&lt; &quot;DownloadBegin&quot; &lt;&lt; ends;
         break;

      case DISPID_DOWNLOADCOMPLETE:
         strEventInfo &lt;&lt; &quot;DownloadComplete&quot; &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: Enabled state - VT_BOOL
      // [1]: Command identifier - VT_I4
      //
      case DISPID_COMMANDSTATECHANGE:
         strEventInfo &lt;&lt; &quot;CommandStateChange: &quot;;

         if (pDispParams-&gt;cArgs == 0)
            strEventInfo &lt;&lt; &quot;NULL&quot;;
         else
         {
            if (pDispParams-&gt;rgvarg[0].vt == VT_BOOL)
            {
               strEventInfo &lt;&lt; ((pDispParams-&gt;rgvarg[0].boolVal == 
                                 VARIANT_TRUE) ? &quot;True&quot; : &quot;False&quot;);
            }

            if (pDispParams-&gt;cArgs &gt; 1 &amp;&amp;
                pDispParams-&gt;rgvarg[1].vt == VT_I4)
            {
               strEventInfo &lt;&lt; &quot;, &quot; &lt;&lt; pDispParams-&gt;rgvarg[1].lVal;
            }
         }

         strEventInfo &lt;&lt; ends;
         break;

      case DISPID_NEWWINDOW2:
         strEventInfo &lt;&lt; &quot;NewWindow2&quot; &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: Document title - VT_BSTR
      //
      case DISPID_TITLECHANGE:
         strEventInfo &lt;&lt; &quot;TitleChange: &quot;;

         if (pDispParams-&gt;cArgs &gt; 0 &amp;&amp;
             pDispParams-&gt;rgvarg[0].vt == VT_BSTR)
         {
            strEventInfo &lt;&lt; OLE2T(pDispParams-&gt;rgvarg[0].bstrVal);
         }
         else
         {
            strEventInfo &lt;&lt; &quot;NULL&quot;;
         }

         strEventInfo &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: Name of property that changed - VT_BSTR
      //
      case DISPID_PROPERTYCHANGE:
         strEventInfo &lt;&lt; &quot;PropertyChange: &quot;;

         if (pDispParams-&gt;cArgs &gt; 0 &amp;&amp;
             pDispParams-&gt;rgvarg[0].vt == VT_BSTR)
         {
            strEventInfo &lt;&lt; OLE2T(pDispParams-&gt;rgvarg[0].bstrVal);
         }
         else
         {
            strEventInfo &lt;&lt; &quot;NULL&quot;;
         }

         strEventInfo &lt;&lt; ends;
         break;

      //
      // The parameters for this DISPID:
      // [0]: Address of cancel flag - VT_BYREF|VT_BOOL
      //
      case DISPID_QUIT:
         strEventInfo &lt;&lt; &quot;Quit&quot; &lt;&lt; ends;

         ManageConnection(Unadvise);
         m_dlgEvents.DestroyWindow();
         break;

      default:
         strEventInfo &lt;&lt; &quot;Unknown Event&quot; &lt;&lt; dispidMember &lt;&lt; ends;
         break;
   }

   m_dlgEvents.AddEventToList(strEventInfo.str());

   return S_OK;
}
</PRE>
</td></tr></table></p>

<p>The code here shouldn't be new to you. We examined most of it in Chapter 
7 when we discussed sinking events in ATL. You can refer to <A HREF="ch07a.htm">Chapter 7</A> if you have 
any questions about it.</p>

</BODY>
</HTML>





