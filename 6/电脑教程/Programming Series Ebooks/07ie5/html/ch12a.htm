<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">

<TITLE>Chapter 12 -- Browser Helper Objects</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch11e.htm">[Previous]</A> <A HREF="ch12b.htm">[Next]</A><P>


<font size="+3">Chapter 12</font>

<A NAME="276"><H1>Browser Helper Objects</H1></A>

<p>In <A HREF="ch06a.htm">Chapter 6</A>, you learned how to develop applications that automate Microsoft 
Internet Explorer. You created instances of Internet Explorer in those applications by 
using <I>CoCreateInstance </I>with 
<I>CLSID_InternetExplorer</I>.</p>

<p>What if you wanted to connect to instances of Internet Explorer that are 
already running to gain full control over Internet Explorer from your application? Then 
you could tell Internet Explorer where to go and what to do. Maybe you want to 
handle Internet Explorer events or access the DHTML Object Model. You might want 
to control just about any Internet Explorer action.</p>

<p>To control Internet Explorer in versions 3 and earlier, you had to use the 
somewhat cumbersome, difficult, and limited technique named Dynamic Data 
Exchange (DDE). One of DDE's limitations was that you couldn't receive events from 
Internet Explorer. Instead of receiving events, you could receive notifications, which 
aren't as robust. If you could connect to a running instance of Internet Explorer using 
COM, you could control it and receive events from it. But Internet Explorer isn't 
like normal automation servers such as Microsoft Word or Microsoft Excel&#8212;it 
doesn't register itself in the Running Object Table, so you can't find and bind to running 
instances of it.</p>

<p>To connect to running instances of Internet Explorer, you can use a 
Browser Helper Object (BHO), which is a DLL that Internet Explorer loads whenever a 
new instance of Internet Explorer is started. The BHO is effectively connected to 
Internet Explorer, so it can control Internet Explorer's actions and listen to the events 
that Internet Explorer is firing. In this chapter, you'll learn how to use and create 
BHOs to gain control over Internet Explorer and how to handle Internet Explorer 
events in your BHOs.</p>

</BODY>
</HTML>





