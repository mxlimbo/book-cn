<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>What Is an ActiveX Control?</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch05a.htm">[Previous]</A> <A HREF="ch05c.htm">[Next]</A><P>

<A NAME="121"><H1>What Is an ActiveX Control?</H1></A>

<P>ActiveX controls are programmable elements that provide some functionality 
that can be reused by other applications such as Internet Explorer and applications 
built with such development tools as Visual Basic and Visual C++. ActiveX controls 
are COM objects that are stored in dynamic-link library (DLL) files and have the 
extension .ocx or .dll.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>When the client application needs to use the ActiveX control, DLL 
files are loaded into the client application's address space. Because the DLL file 
is loaded into the same process as the client's, ActiveX controls are 
typically referred to as In Process (InProc for short) COM objects.</blockquote></div>
</P>

<P>ActiveX controls are similar to the intrinsic controls discussed in <A HREF="ch02a.htm">Chapter 2</A>: 
they typically provide a graphical interface, such as a button or a text box, through 
which the user can interact with the control. Also, like intrinsic controls, ActiveX 
controls can have methods, properties, and collections, and they can fire events. 
However, to be considered a control, an object isn't required to have a graphical user 
interface or to expose methods, properties, events, and collections. If an ActiveX control 
doesn't have any of these features&#8212;for example, no user interface or methods&#8212;the 
control is pretty boring and probably useless. Therefore, each ActiveX control example 
in this chapter includes a user interface and some methods, properties, and events.</P>

<P>Objects do exist that don't have a user interface but do expose at least 
one method, property, event, or collection (and sometimes all of these). This type of 
object is referred to as a COM object. Even without the user interface, COM objects are 
quite useful. COM objects are usually created to expose some functionality that 
doesn't require a user interface or for which a user interface just doesn't make 
sense&#8212;for example, you wouldn't need a user interface to have the system read data from 
a database and insert this data into a Web page. In the same way that ActiveX 
controls can be reused by client applications, COM objects can be reused by client 
applications. In this chapter, we'll concentrate on building ActiveX controls, but keep in 
mind that COM objects are just as simple (if not simpler) to create as ActiveX controls.</P>

<A NAME="122"><H2>Inserting an ActiveX Control into a Web Page</H2></A>

<P>Before you learn how to create an ActiveX control, you need to know how to 
insert the control into a Web page that will be loaded into Internet Explorer. We'll 
use Internet Explorer to test all the controls we create in this chapter. Inserting an 
ActiveX control into a Web page is fairly easy. You simply use the HTML &lt;OBJECT&gt; tag. 
This tag is an HTML element just like &lt;H1&gt;, &lt;P&gt;, or any of the other HTML tags 
covered in <A HREF="ch02a.htm">Chapter 2</A>. Because all HTML elements are represented as objects in the 
DHTML Object Model, you can write script for &lt;OBJECT&gt; tags in the same way you can 
for any other HTML element. You'll see how to write script for ActiveX controls later 
in this chapter in the sections titled &quot;<A HREF="ch05c.htm#139">Writing Script for Your Visual Basic Control</A>&quot; 
and &quot;<A HREF="ch05d.htm#150">Writing Script for Your ATL Control</A>.&quot;</P>

<P>The &lt;OBJECT&gt; tag has attributes like any other HTML tag. CLASSID is the 
most important of these attributes. It tells Internet Explorer which ActiveX control to 
load into the page. The CLASSID attribute points to the class ID (CLSID for short) of 
the ActiveX control. A CLSID is a 128-bit globally unique identifier (GUID) that 
identifies an ActiveX control or some other type of COM object.</P>

<P>GUIDs are guaranteed to be unique across time and space. For example, 
if somebody creates a CLSID in Antarctica (it could happen) at the same exact time 
that you create one in the United States, the CLSIDs will be different. (If somebody 
on the Klingon home world creates a GUID, the GUID will be unique there as well!) 
The algorithm used to create a GUID, or CLSID, is quite complex, so I won't go into it 
in this book. Trust me though&#8212;it does work.</P>

<P>You might be wondering why you can't just give an ActiveX control a name 
you can relate to, like &quot;Bob,&quot; instead of a GUID, which can be difficult to read. Just 
imagine if you named your ActiveX control &quot;Bob&quot; and somebody in Zimbabwe used the 
same name. If a user installs your control on her machine and then installs the control 
from Zimbabwe, client applications that want to use the &quot;Bob&quot; control will always use 
the control from Zimbabwe. Why? Installing the &quot;Bob&quot; control from Zimbabwe will 
make your control unavailable because both controls have the same name.</P>

<P>In most cases, this scenario would cause major problems because the 
client application probably would have been built to access methods and properties 
that existed in your control but not in the control named &quot;Bob&quot; from Zimbabwe. If 
you use GUIDs to identify your control, client applications that reference the control 
by its CLSID are guaranteed to access <I>your </I>ActiveX control and not the one from Zimbabwe.</P>

<P>CLSIDs are stored in the Registry under the following key:</p>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>HKEY_CLASSES_ROOT\CLSID
</PRE>
</td></tr></table></p>

<P>Under this key in the Registry are possibly hundreds of CLSIDs that identify 
ActiveX controls and other COM objects on your system. Figure 5-1 shows the following 
CLSID for the Calendar control in the Registry:</p>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>{8E27C92B-1264-101C-8A2F-040224009C02}
</PRE>
</td></tr></table></p>

<P>If you look in the right-hand pane of the Registry Editor, you'll see one 
value for this key&#8212;(<I>Default</I>). This value specifies the &quot;friendly&quot; name of this control 
as &quot; Calendar Control 8.0 &quot;. All CLSIDs have the same format in the Registry: they're 
represented by a 128-bit number enclosed in curly braces.</P>

<P>
<A HREF="javascript:fullSize('F05ii01x.htm')"> <img src="images/F05ii01.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-1. </B> <I>CLSID of the Calendar control in the Registry. This figure shows the Regedit utility application that you can use to view the contents of the Registry. </I><!-- /caption -->
</P>


<P>Now that you know a little more about the CLSID, let's look again at the 
CLASSID attribute in context. The CLASSID attribute tells Internet Explorer the CLSID of 
the ActiveX control that you want loaded into the Web page. When specifying the 
CLASSID attribute for the &lt;OBJECT&gt; tag, you must first prefix the CLSID value with the 
string &quot; clsid :&quot;. Don't include the curly braces that you see displayed when viewing the 
CLSID in the Registry. For example, consider the case of inserting the Calendar control 
into a Web page. To do so, you would add the following HTML code to the Web 
page. The results of this code are shown in Figure 5-2.</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT CLASSID=&quot;clsid:8E27C92B-1264-101C-8A2F-040224009C02&quot;&gt;
&lt;/OBJECT&gt;
</PRE>
</td></tr></table></p>

<P>Internet Explorer finds the &lt;OBJECT&gt; tag and immediately searches for 
the CLASSID attribute. Internet Explorer then reads the value of the CLASSID 
attribute, which is the CLSID of an ActiveX control that you want inserted into the Web 
page, and looks up this CLSID in the Registry. If Internet Explorer finds this CLSID in 
the Registry, it reads a subkey named 
<I>InprocServer32</I>, which specifies the path and 
name of the DLL (.ocx or .dll file) that Internet Explorer should load to enable it to 
display the desired control on the Web page. Figure 5-3 shows 
the <I>InprocServer32</I> key for the Calendar control.</P>

<P>
<A HREF="javascript:fullSize('F05ii02x.htm')"> <img src="images/F05ii02.JPG" width=404 height=313 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-2. </B> <I>The Calendar control inserted into a Web page. </I><!-- /caption -->
</P>

<P>When you look at the right pane of Figure 5-3, which shows the 
<I>InprocServer32</I> key in the Registry Editor, you see that two values exist. The first value is the 
(<I>Default</I>) value, which specifies the path and name of the DLL to load for the ActiveX 
control. For the Calendar control, the 
(<I>Default</I>) value specifies the file mscal.ocx in the 
path C:\WinNT\System32. The second value is 
<I>ThreadingModel</I>.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>I won't cover the advanced COM topic of threading models in this 
book. Just note that the threading model we're talking about is the Apartment 
model. Only controls that support at least the Apartment-threading model can safely 
be used on a Web page in Internet Explorer. I'll show you how to mark controls 
as Apartment threaded when we create ActiveX controls.</blockquote></div>
</P>

<P>
<A HREF="javascript:fullSize('F05ii03x.htm')"> <img src="images/F05ii03.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-3. </B> InprocServer32<I> key for the Calendar control. </I><!-- /caption -->
</P>

<P>Besides CLASSID, you might want to specify a couple of other important 
attributes for the &lt;OBJECT&gt; tag. To write script for an ActiveX control, you would include 
the ID attribute and specify any name you want for it, just as you would for any 
other HTML tag that you want to script. Sometimes, specifying the HEIGHT and 
WIDTH attributes for the &lt;OBJECT&gt; tag is also important. If you don't, the control might 
not show its user interface because Internet Explorer hasn't activated the control. 
We'll explore this issue further in the section &quot;<A HREF="ch05c.htm#130">Creating Visual Basic ActiveX Controls</A>.&quot;</P>

<A NAME="123"><H2>Downloading an ActiveX Control to a Client's Machine</H2></A>

<P>Now you know how to insert an ActiveX control into a Web page using the 
&lt;OBJECT&gt; tag in conjunction with the CLASSID attribute. This insertion technique works 
great as long as the ActiveX control has already been installed on the user's machine. 
What if the ActiveX control isn't installed on the user's machine? Do you have to send 
a copy of it to every user or, worse yet, go to the user's machine and install it 
yourself? Of course not! That's what the &lt;OBJECT&gt; tag is for.</P>

<P>The &lt;OBJECT&gt; tag exposes an attribute named CODEBASE. The value of 
this attribute specifies the URL of the ActiveX control. Hence, the ActiveX control can 
be located on your own machine, on your corporate intranet, or even on the other 
side of the world. By using the CODEBASE attribute, you can also specify the 
version of the control that you want installed on the user's machine. If the current 
version on the user's machine is the same as or later than the version you specify for 
the CODEBASE attribute, Internet Explorer won't download and install the version 
you specified&#8212;it will download and install only more recent versions of the control. 
The process of downloading ActiveX controls to the client machine is known as 
Internet Component Download.</P>

<P>You can specify several types of files for the CODEBASE attribute: DLL, 
OCX, INF, CAB, and so forth. In the simplest of cases, you can specify the name of the 
DLL or OCX file that contains the ActiveX control. For example, to specify that 
Internet Explorer should download version 8.0.0.5007 of the Calendar control from your 
local intranet server, you would insert an &lt;OBJECT&gt; tag that looks like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT ID=&quot;CalObj&quot;
        CLASSID=&quot;clsid:8E27C92B-1264-101C-8A2F-040224009C02&quot;
        CODEBASE=&quot;http://<I>someserver</I>.com/mscal.ocx#version=8,0,0,5007&quot;&gt;
&lt;/OBJECT&gt;
</PRE>
</td></tr></table></p>

<P>When Internet Explorer finds this &lt;OBJECT&gt; tag, it determines whether 
the Calendar control is already installed on the client machine. If not, Internet 
Explorer downloads and installs the mscal.ocx file from the server. (In our example, let's 
call the server <I>someserver</I>.com<I>.</I>) If the Calendar control is already registered on the 
client machine, Internet Explorer compares the version of mscal.ocx on the 
client machine to the version that you specify as part of the CODEBASE 
attribute&#8212;<I>8,0,0,5007.</I></p>

<P><div class="note"><blockquote><B>NOTE</B><HR>When listing the version number in the CODEBASE attribute, be 
sure to use commas instead of periods to separate the different parts of the version.</blockquote></div>
</P>

<P>If the version of mscal.ocx on the client machine and the version in 
the CODEBASE attribute are the same, Internet Explorer doesn't download 
mscal.ocx from <I>someserver</I>.com. If the version you specify in the CODEBASE attribute is 
later than the version on the client machine, Internet Explorer downloads and 
registers mscal.ocx from <I>someserver</I>.com. If you want to force the download of the DLL 
no matter what version is on the client machine, you can specify 
<I>-1,-1,-1,-1</I> for the version number. This version number is usually used only for testing purposes.</P>

<P><div class="tip"><blockquote><B>TIP</B><HR>Internet Explorer calls the 
<I>DllRegisterServer</I> function of a DLL to 
register it on the client machine. You can register a DLL yourself by using the 
Regsvr32 application that Microsoft Windows provides. This application will call 
the <I>DllRegisterServer</I> function of the DLL for you. If you want to unregister a 
DLL, you can specify the /<I>u</I> argument to Regsvr32. In this case, Regsvr32 will call 
the <I>DllUnregisterServer</I> function that is exported by the DLL.</blockquote></div>
</P>

<P>Specifying a DLL for the CODEBASE attribute is fine and dandy unless 
the ActiveX control needs other files to be able to work correctly. For instance, an 
ActiveX control built by using Visual Basic needs the Visual Basic run-time to work 
correctly. (The Visual Basic run-time for version 6 is in the msvbvm60.dll file.) An ActiveX 
control built by using MFC needs the C run-time (msvcrt40.dll) and the MFC libraries 
(mfc42.dll) to work correctly. (This is another reason you are better off building an ActiveX 
control by using ATL instead of MFC.)</P>

<P>In addition, the ActiveX control might depend on other files. How do you 
make sure that all these files are installed on the users' machines? Could you include 
several different &lt;OBJECT&gt; tags on the Web page&#8212;one for every DLL you need 
to download? Well, unfortunately, that won't work because of the asynchronous 
nature of Internet Explorer downloads. Even if it did work, having many different 
&lt;OBJECT&gt; tags on the Web page is inefficient and makes the page hard to read and 
understand. There's got to be a better way.</P>

<A NAME="124"><H3>CAB files</H3></A>

<P>Fortunately, there is a better way to ensure that the proper files are installed on 
the users' machines. You can package an ActiveX control and its dependent files into 
one compressed file known as a cabinet (CAB) file. A CAB file is similar to a zip file 
in that it compresses and combines files into a single file. Therefore you have to 
include only one &lt;OBJECT&gt; tag for your ActiveX control.</P>

<P>To create a CAB file, you can use either the Cabarc utility or the 
Makecab utility, both of which are included with the Cabinet SDK. (You can download the 
Cabinet SDK from MSDN Online Web Workshop at 
<I><a href="http://msdn.microsoft.com/workshop/management/cab/cabdl.asp" target="_window2">http://msdn.microsoft.com/workshop/management/cab/cabdl.asp</a>.)</I>
 But how do you know which files to include in the 
CAB file? You must include all files on which the ActiveX control depends plus 
another important file, which I'll talk about in the next section. The primary reason 
most ActiveX control downloads fail is that one or more files on which the control 
depends aren't installed on the client machine.</P>

<P>To determine which files the ActiveX control depends on, use the 
Microsoft Dependency Walker utility (also referred to as Depends) that ships with Visual 
C++ 6. To use the Microsoft Visual Studio version of 
Depends, from the Start/Programs menu, click Microsoft Visual Studio 6/Micosoft Visual Studio 6 Tools, and then 
Depends. Open any program file that you want to examine by using the File/Open menu 
or the Open button. Depends displays all the files that the ActiveX control depends 
on, as shown in Figure 5-4.</P>

<P>In the Depends view window, notice that all of the Calendar control's 
dependencies are system files. You won't have to include any other .dll or .ocx files in 
the CAB file. Then why create the CAB file? Because CAB files are compressed files, 
the time it takes users to download the ActiveX control will be much shorter. Also, 
CAB files allow you to distribute multiple files at once, and they can be signed, as we 
will talk about shortly. Get into the habit of creating CAB files any time you want 
to download an ActiveX control from the Web to a client machine.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>Although OCXs and DLLs can be signed, they allow you to 
distribute only one file.  You can also specify an INF file for the CODEBASE attribute 
which will allow you to distribute multiple files. However, INF files can't be signed.</blockquote></div>
</P>

<P>
<A HREF="javascript:fullSize('F05ii04x.htm')"> <img src="images/F05ii04.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-4. </B> <I>Microsoft Dependency Walker for the mscal.ocx file. </I><!-- /caption -->
</P>

<P><B>INF files</B> Even though you know which dependencies the Calendar control 
has, before you can create the CAB file, you need an INF file&#8212;perhaps the most 
important file in the CAB file. An INF file is an information file with the .inf extension 
that provides installation instructions that Internet Explorer uses to install and register 
the ActiveX control and its dependencies. If you're familiar with normal Windows 
INF files, INF files used for downloading ActiveX controls will be familiar to you. 
But they're not exactly the same.</P>

<P>An INF file is basically a Windows INI file for downloading code in 
Internet Explorer. An INF file consists of a series of named sections that describe the .dll 
files or .ocx files that are to be downloaded and registered on the client machine. 
Each section contains a number of <I>key=value</I> pairs that provide needed information.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>Internet Explorer uses the 
<I>GetPrivateProfileString </I> function to read 
the sections of an INF file just like Windows programs use it to read the sections 
of an INI file.</blockquote></div>
</P>

<P>Although the order of the sections doesn't matter, the [Version] section 
usually appears first in an INF file. It specifies the version of Internet Component 
Download to use to download the ActiveX control. This section is required for compatibility 
in Microsoft Windows 95 and later versions as well as in Microsoft Windows NT. 
Here's how the [Version] section typically looks:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Version]
signature=&quot;$CHICAGO$&quot;
AdvancedINF=2.0
</PRE>
</td></tr></table></p>

<P>The next&#8212;and probably most important&#8212;section is [Add.Code], which lists 
all the files to be installed on the client machine. The keys in this section take the 
form of <I>filename=section-name</I>, where 
<I>filename</I> is the name of the file you want 
downloaded to the client machine, and <I>section-name 
</I>is the name of another section in the same INF file. For example, let's say you created a Visual Basic ActiveX 
control. Obviously, because your control was created using Visual Basic, the Visual Basic 
run time must be installed on the client machine. You must include a reference to 
the Visual Basic run time in the INF file by using a conditional hook. The 
[Add.Code] section for the INF file would look like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Add.Code]
SimpleCtrl.dll=SimpleCtrl.dll
MSVBVM60.DLL=MSVBVM60.DLL
</PRE>
</td></tr></table></p>

<P>Note that in the preceding [Add.Code] section, the name of the file is 
SimpleCtrl.dll and the name of the section is also 
SimpleCtrl.dll<I>. </I>By convention, the name of 
the file you want to download and the name of the section are the same, but the 
section could be named anything that you choose. For example, we could specify the 
name of the section as FooSection<I>. </I>The [Add.Code] section would look like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Add.Code]
SimpleCtrl.dll=FooSection
MSVBVM60.DLL=MSVBVM60.DLL
</PRE>
</td></tr></table></p>

<P>Note that the files in the [Add.Code] section must be listed in order of 
their dependency. For example, consider this [Add.Code] section:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Add.Code]
Control1.dll=Section1
Control2.dll=Section2
Control3.dll=Section3
</PRE>
</td></tr></table></p>

<P>In this section, Control1.dll is the main DLL. Control2.dll is listed after 
Control1.dll because Control1.dll depends on Control2.dll. Control3.dll is listed last 
because Control1.dll, Control2.dll, or both depend on Control3.dll. With this 
[Add.Code] section, the downloads happen in this order: Control1.dll, Control2.dll, Control3.dll.</P>

<P>The installations of these files occur in reverse order from the 
download because of the dependencies of one file on the next. Control1.dll and/or 
Control2.dll depend on Control3.dll, so Control3.dll must be installed first so that when the 
installations of the other two occur, registration will succeed. (Installing a DLL 
involves registering the control.) The same is true for Control2.dll. Because Control1.dll 
depends on Control2.dll, Control2.dll must be installed first.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>Registration of a DLL will fail if a dependent file isn't available (in 
other words, not registered) on the system.</blockquote></div>
</P>

<P>Let's go back to our original [Add.Code] section. Somewhere in the INF 
file following the [Add.Code] section, you'll include two sections&#8212;[SimpleCtrl.dll] 
and [MSVBVM60.DLL]. Each of these sections describes their associated files in detail. 
Let's start with the [SimpleCtrl.dll] section. Here's the code that would appear in the 
INF file for [SimpleCtrl.dll]:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[SimpleCtrl.dll]
file-win32-x86=thiscab
RegisterServer=yes
clsid={AEBCD9D8-ADA2-11d2-B94F-00C04FA3471C}
DestDir= 
FileVersion=1,0,0,0
</PRE>
</td></tr></table></p>

<P>The first key in the [SimpleCtrl.dll] section is the 
<I>file</I> key. This key provides Internet Explorer with information about the client machine and instructions 
regarding where to retrieve the DLL from. To inform Internet Explorer about the client 
machine, use the key that indicates which type of platform you're targeting. The 
<I>file</I> key consists of three parts: file, which never changes; the operating system; and the CPU. 
For instance, the key specified in the previous example indicates that we're 
targeting Microsoft Windows running on a machine that uses the Intel x86 CPU chip. 
The possible values for the operating system are currently only 
<I>win32</I> for Microsoft Windows and 
<I>mac</I> for Apple Macintosh. The current values for the CPU are 
<I>x86</I>, <I>ppc</I> (Power PC), 
<I>mips</I>, and <I>alpha</I>.</P>

<P>The value of the <I>file</I> key tells Internet Explorer where to look for and 
then retrieve the DLL. You can specify one of three values: a URL, 
<I>ignore</I>, or <I>thiscab</I>. A URL can be any URL that you are already used to, such as <I>http://activex.microsoft.</I>. The value 
<I>ignore</I> specifies that this file isn't required for the platform you 
specified. The value <I>thiscab</I> tells Internet Explorer that the DLL is in the current CAB file. 
For SimpleCtrl.dll, we specified <I>thiscab</I> because we intend to include the DLL in this CAB file.</P>

<P>The next key listed is <I>RegisterServer</I>. This key simply tells Internet 
Explorer whether it should register the file after the file is downloaded. The allowable 
values are <I>yes</I> and <I>no</I>.</P>

<P>Next is a familiar key, <I>clsid</I>. The value of this key is the string 
representation of the CLSID for the ActiveX control. With the CLSID used here, you must 
include the curly braces, whereas you don't include them when specifying the CLSID for 
the CLASSID attribute of the &lt;OBJECT&gt; tag. (You already know how to use the 
CLASSID attribute of the &lt;OBJECT&gt; tag.)</P>

<P>Next is the <I>DestDir</I> key. The value of this key tells Internet Explorer to 
which directory to download the DLL. If you specify a value of 
<I>10</I>, the DLL is downloaded to the \Windows or \WinNT directory. If you specify a value of 
<I>11</I>, the DLL is downloaded to the \Windows\System or \WinNT\System32 directory. If no value is 
specified, the DLL is downloaded to the Downloaded Program Files directory in 
either \Windows or \WinNT. In the case of SimpleCtrl.dll, we didn't specify a value 
for <I>DestDir</I>, so the DLL will be downloaded to the Downloaded Program Files directory.</P>

<P>The last key included in the [SimpleCtrl.dll] section is 
<I>FileVersion</I>. The value of this key specifies the minimum required version of the file we specified for the 
<I>file</I> key. If no value is specified, any version is acceptable. For SimpleCtrl.dll, we 
specify that we want version 1.0.0.0 or later.</P>

<P>Now let's move on to the [MSVBVM60.DLL] section, which is a little 
different from the [SimpleCtrl.dll] section. Here's the code for [MSVBVM60.DLL]:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[MSVBVM60.DLL]
hook=MSVBVM60.cab_Installer
FileVersion=6,0,81,76
</PRE>
</td></tr></table></p>

<P>The [MSVBVM60.DLL] section contains a lot fewer keys than the 
[SimpleCtrl.dll] section. You'll recognize the <I>FileVersion 
</I>key, but what is this <I>hook </I>key? The value 
of the <I>hook </I>key specifies a section in the INF file that will be executed when 
installing the DLL. Basically, a hook is a way to override or customize the installation 
process for a DLL or other component that you're installing. Two types of hooks 
exist: unconditional and conditional. Unconditional hooks are always executed when 
downloading a component. Unconditional hooks are specified by using the [Setup 
Hooks] section, which looks like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Setup Hooks]
hookname=section-name
</PRE>
</td></tr></table></p>

<P>Unconditional hooks are generally used when creating an INF file to run a 
setup program. If you specify an unconditional hook by using the [Setup Hooks] 
section, you don't specify the [Add.Code] section. Here's an example of an INF file that 
runs a setup program:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[Setup Hooks]
hookname=section-name

[section-name]
run=%EXTRACT_DIR%\setup.exe

[Version]
Signature=&quot;$Chicago$&quot;
AdvancedInf=2.0
</PRE>
</td></tr></table></p>

<P>When Internet Explorer downloads a CAB file, it reads the INF file. When 
it doesn't find an [Add.Code] section, Internet Explorer processes the [Setup 
Hooks] section and executes the programs specified for the 
<I>run</I> key.</P>

<P>Conditional hooks are executed only when certain conditions are true. The 
type of hook used for MSVBVM60.DLL is a conditional hook. If the CLSID or version 
of the file specified in the [MSVBVM60.DLL] section isn't sufficient and no 
<I>file</I> key is specified, Internet Explorer executes the hook section that is specified as the 
value of the <I>hook </I>key. So a conditional hook is run only if MSVBVM60.DLL isn't 
registered on the system.</P>

<P>The hook section specified by the <I>hook </I>key for the [MSVBVM60.DLL] 
section is formatted in the INF file, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>[MSVBVM60.cab_Installer]
file-win32-x86=http://activex.microsoft.com/controls/vb6/VBRun60.cab
run=%EXTRACT_DIR%\VBRun60.exe
</PRE>
</td></tr></table></p>

<P><div class="tip"><blockquote><B>TIP</B><HR>Redistributable Microsoft DLLs can be downloaded from a Web page 
by setting the CODEBASE attribute to the name of the CAB file located at 
<I><A HREF="http://activex.microsoft.com/controls" TARGET="_window2">http://activex.microsoft.com/controls</A></I>. You don't have to include these files in your 
own CAB file. Remember, though, that only those files that are listed in an 
associated redist.txt file on your system can be legally redistributed.</blockquote></div>
</P>

<P> The hook section contains the <I>file</I> key again, which tells Internet 
Explorer where to retrieve the needed file. Here, the 
<I>file</I> key is pointing to another CAB file that contains all the needed files. Once again this section includes a new key 
named <I>run</I>. This key tells Internet Explorer to run a specific file in a specific place. In 
this case, Internet Explorer will&#8212;after extracting all the files from the VBRun60.cab 
file&#8212;execute the VBRun60.exe file in the 
<I>%EXTRACT_DIR%</I>. This <I>%EXTRACT_DIR%</I> 
might look foreign to you, but it is just simple variable substitution like you might use 
in an MS-DOS batch file. Wherever Internet Explorer sees 
<I>%EXTRACT_DIR%</I>, it substitutes the path of the directory that is used to extract the files in a CAB file. (The 
other variable you can specify is 
<I>%OBJECT_DIR%</I>. It expands to the default 
destination directory for ActiveX controls, which is usually the Downloaded Program Files 
directory under the \Windows or \WinNT<I> </I>directories.)</P>

<P>In the <I>hook</I> section for MSVBVM60.DLL, note that Internet Explorer first 
extracts all the files in the VBRun60.cab file. Then it executes the VBRun60.exe file, 
which installs the Visual Basic run time on the client machine.</P>

<P>You don't need to manually create INF and CAB files when packaging 
Visual Basic ActiveX controls for downloading over the Internet, but you do need to 
manually create them when packaging ActiveX controls built with other tools, so 
understanding the internals of INF files is useful. (You will manually create INF and CAB 
files in the section titled &quot;<A HREF="ch05c.htm#136">Compiling</A>&quot; later in this chapter.)</P>

<P>To tie everything together, let's create an INF file for the Calendar control 
and then package the INF file and mscal.ocx files into a CAB file. As you saw from 
analyzing mscal.ocx using the Depends tools, all of mscal.ocx's dependencies are 
system files. You don't need to include any other DLLs in the CAB file. So creating 
the INF file for the Calendar control is quite easy. Listing 5-1 shows 
the code for the Calendar control's INF file. To create this file, type the code by 
using Microsoft Windows Notepad, save it, and name it mscal.inf.</P>

<P><B>Listing 5-1.</B></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<A NAME="125"><H3>mscal.inf</H3></A>
<PRE>[Version]
signature=&quot;$CHICAGO$&quot;
AdvancedINF=2.0

[Add.Code]
mscal.ocx=mscal.ocx

[mscal.ocx]
file-win32-x86=thiscab
RegisterServer=yes
clsid={8E27C92B-1264-101C-8A2F-040224009C02}
DestDir=11 
FileVersion=8,0,0,5007
</PRE>
</td></tr></table></p>

<P>The code in Listing 5-1 specifies that one file be downloaded&#8212;mscal.ocx. 
This file resides in the current CAB file as specified by the 
<I>file</I> key. We want file version 8.0.0.5007, and we want Internet Explorer to register the file after placing it in 
the Windows system directory (<I>DestDir = 11</I>). Notice, however, that the preferred 
destination directory is Downloaded Program Files. This is because on Windows NT 
systems, if the user isn't the administrator of the machine, the user won't have write 
access to the System32<I> </I>directory. So the download will fail in this case.</P>

<A NAME="126"><H3>Creating a CAB file</H3></A>

<P>Now we need to create a CAB file that packages together the INF file and any 
files we want to download to the client machine. Use the 
Cabarc<I> </I>or<I> </I>Makecab utilities that are included with the Cabinet SDK to create CAB files. Both of them use a 
command-line interface, which means we have to run them from an MS-DOS prompt. The 
Cabarc utility is for viewing and extracting files in cabinet files, whereas Makecab is just 
for creating cabinet files. (You can also view CAB files as folders by using the 
Cabview shell-extension utility that is available on the Microsoft Windows Power Toys Web 
site: <I><a href="http://www.microsoft.com/windows95/downloads/contents/wutoys/w95pwrtoysset/" target="_window2">http://www.microsoft.com/windows95/downloads/contents/wutoys/w95pwrtoysset/</a>.)</I></P>

<P>Let's use the Cabarc utility to create the CAB file for the Calendar control. 
Using Cabarc to create CAB files is easy. When calling Cabarc, we just specify the 
<I>N</I> argument to indicate that we want to create a new CAB file. Then we specify the 
name of the CAB file we want to create followed by the names of the files we want to 
add to the CAB file. We can use wildcards when specifying filenames. For example, 
to create a new CAB file named mscal.cab and add the INF and OCX files for the 
Calendar control to the CAB file, we can type the following in the command line:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>cabarc N mscal.cab mscal.inf mscal.ocx
</PRE>
</td></tr></table></p>

<P>Alternatively, we could have used wildcards because both the files that we 
want to add to the CAB file begin with 
<I>mscal</I>. This code shows how to use wildcards 
to create a CAB file:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>cabarc N mscal.cab mscal.*
</PRE>
</td></tr></table></p>

<P>Next we need to copy the CAB file to some location on the server and add 
the name of the CAB file to the CODEBASE attribute of the &lt;OBJECT&gt; tag on a Web 
page, like this:</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT ID=&quot;CalObj&quot;
        CLASSID=&quot;clsid:8E27C92B-1264-101C-8A2F-040224009C02&quot;
        CODEBASE=&quot;http://<I>someserver.</I>com/mscal.cab#version=8,0,0,5007&quot;&gt;
&lt;/OBJECT&gt;
</PRE>
</td></tr></table></p>

<P>We left the version alone because the version used here represents the 
version of the Calendar control and not the version of the CAB file.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>In the previous sections, I described how to package ActiveX 
controls for download over the Internet. In these sections, I used the Calendar 
control as an example for simplicity. Whenever packaging Microsoft controls for 
download over the Internet, you should very carefully review the End-User 
License Agreement (EULA), REDISTRIBUTABLES directory, and/or 
README.TXT files accompanying the product with which a control is installed to determine 
the redistribution rights of the control. If you cannot find explicit permission to 
reuse the control in question, visit Microsoft's Permission Web site, which is 
located at <I><A HREF="http://www.microsoft.com/permission" TARGET="_window2">http://www.microsoft.com/permission</A>.</I></blockquote></div>
</P>

<A NAME="127"><H2>Gaining Security on the Web</H2></A>

<P>ActiveX controls provide reusable functionality on Web pages that fills the gaps 
left by DHTML and script. For example, you might write an ActiveX control that 
opens or saves files to your user's hard drive. This is fine if you're the only one using 
the control. But how can someone who doesn't know you be sure that an ActiveX 
control isn't going to wipe out all the files on her system? How can she protect 
herself? Internet Explorer provides security for Web pages so that you can prevent 
ActiveX controls from running or allow only trusted controls to run on your system. More 
on this topic in a moment.</P>

<P>Internet Explorer has security zones that allow you to set security levels 
for intranet and Internet sites and set security levels for trusted or restricted sites that 
you choose. To set security levels for different types of Web sites, select Internet 
Options from the Internet Explorer Tools menu, and click the Security tab to display the 
dialog box shown in Figure 5-5.</P>

<P>
<A HREF="javascript:fullSize('F05ii05x.htm')"> <img src="images/F05ii05.JPG" width=404 height=450 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-5. </B> <I>Internet Options Security tab. </I><!-- /caption -->
</P>

<P>Using this dialog box, you can set five different security levels:</P>

<UL>
<P><LI> <I>     High</I>. This level is the safest way to browse the Web, but it's also the 
least functional. Most of the less secure features of Internet Explorer are 
disabled, such as the downloading of ActiveX controls. Using this level, 
you're completely safe from harm. At this level, unsigned ActiveX controls 
aren't downloaded at all. Also, you will most likely get code signing errors. 
(How to sign ActiveX controls will be explained shortly.)</LI></P>

<P><LI><I>     Medium</I>. This level provides safe browsing but includes more 
functionality than High. It will prompt you with a dialog box before 
downloading potentially unsafe content. At that point, you can decide whether 
to allow the download. At this level, unsigned ActiveX controls aren't 
downloaded at all. You're not even prompted.</LI></P>

<P><LI><I>     Medium-low</I>. This level is the same as Medium except that most 
content will be downloaded without prompts. However, Internet Explorer 
will prompt you before downloading signed ActiveX controls, and 
unsigned controls won't be downloaded at all.</LI></P>

<P><LI><I>     Low</I>. This level is the most functional but also the most unsafe. At 
this level, most content will be downloaded without prompts. Signed 
ActiveX controls will be downloaded without prompts, and you'll be 
prompted before unsigned ActiveX controls are downloaded. This level is 
most appropriate for the local intranet zone, not the 
Internet zone.</LI></P>

<P><LI><I>     Custom</I>. Using this level, you can determine security restrictions for 
individual items that can be downloaded and run, such as ActiveX 
controls and script. To set the Custom level, click the 
Custom Level button (shown in Figure 5-5) to display the dialog box in Figure 5-6. Use this dialog 
box to set the security restrictions for specific items that Internet 
Explorer might download.</LI></P>
</UL>

<P>
<img src="images/F05ii06.GIF" width=353 height=405 border="0">
</P><P>
<!-- caption --><B>Figure 5-6. </B> <I>Custom Level Security Settings dialog box. </I><!-- /caption -->
</P>
 
<P>All levels except Low (and potentially Custom) disable the download of 
unsigned ActiveX controls. Signing an ActiveX control (also known as digital code 
signing) is a way of telling users that they can trust the control because it won't do 
anything malicious such as wiping out all their files. Digital code signing uses 
Microsoft Authenticode technology to verify the contents of the CAB file by adding a 
digital certificate that indicates the name of the control's creator and a digital ID. This 
certificate is obtained from a certificate authority such as VeriSign. Certificate 
authorities check on applicants, depending on the class of certificate requested, to make 
sure that they can be trusted. Certificate authorities usually have rigid restrictions so 
that not just anybody can obtain a certificate. This procedure protects users from hackers.</P>

<P>To digitally sign the CAB file, follow these steps.</P>

<OL>
<P><LI>     Obtain the code signing tools for Internet Explorer 5 from the 
MSDN Online Web Workshop at <I>(<a href="http://msdn.microsoft.com/workshop/" target="_window2">http://msdn.microsoft.com/workshop/gallery/tools/authenticode/authcode.asp</a></I>).</LI></P>

<P>Before getting your file signed, be sure to use the most current 
code-signing tools when signing code built for Internet Explorer 5. If you 
sign the CAB file with an earlier version of the tools, the ActiveX control 
won't be downloaded and installed correctly on the client machine.</P>

<P><LI>     Obtain a certificate from a certificate authority such as VeriSign or from 
a server on your intranet that is running Microsoft Certificate Server. A 
private key is created during the certificate enrollment process. If you 
have not yet obtained your own certificate from a certificate authority, you 
can create a test certificate by using the MakeCert.exe and Cert2Spc.exe 
code signing utilities. First, you use the MakeCert utility to create your test 
X.509 certificate (.cer file) and private key (.pvk file):</LI></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>MakeCert -sv MyKey.pvk n &quot;CN=My Software Company&quot; MyCert.cer</PRE>
</TD></TR></TABLE>
</P>

<P>Next, use Cert2Spc to convert the .cer file to a PKCS #7 
Software Publishing Certificate (.spc file)</P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Cert2Spc MyCert.cer MyCert.spc</PRE>
</TD></TR></TABLE>
</P>

<P><LI>     Using the SignCode utility you obtained from the MSDN Online Web 
Workshop, sign your CAB file with the certificate (.spc file) and private key 
(.pvk file) you either received from the certificate authority or created using 
the MakeCert and Cert2Spc utilities. (Note that the URL 
<I>timstamp.dll</I> isn't a typo. The <I>e</I> is supposed to be missing.)</LI></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>SignCode -spc MyCert.spc -v MyKey.pvk -t http:/
/timestamp.verisign.com/scripts/timstamp.dll mscal.cab</PRE>
</TD></TR></TABLE>
</P>
</OL>

<P>Other parameters are available for SignCode, such as a parameter for 
identifying the Web site of the publisher and the descriptive name for the signed 
file. These parameters are documented in the MSDN Online Web Workshop at 
<I><A HREF="http://msdn.microsoft.com/workshop/security/authcode/signing.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/security/authcode/signing.asp</A></I>
. You can also find relevant Knowledge Base articles at 
<I><A HREF="http://msdn.microsoft.com/workshop/delivery/support/KB.asp" TARGET="_window2">http://msdn.microsoft.com/workshop/delivery/support/KB.asp</A></I>.</P>

<A NAME="128"><H3>Safety</H3></A>

<P>After signing the CAB file, users of your ActiveX control will know that the 
control is trustworthy, which is different from knowing that it's 
<I>safe</I>. Most ActiveX controls are initialized with data and scripted by using VBScript or JScript. The data used 
to initialize a control could come from an untrustworthy source, so you might want to 
block this sort of activity. Also, script can be written to access the methods and properties 
of an ActiveX control. Regarding those controls that access a user's files, you wouldn't 
want a hacker to write script that uses these controls to delete all the files on a user's system.</P>

<P>You can use one of two strategies to tell users that the control is safe for 
initialization and safe for scripting: change the Registry or implement a COM 
interface&#8212;<I>IObjectSafety</I>. The first strategy is used for Visual Basic controls. The Registry is 
automatically changed for you by the Package And Deployment Wizard, or PDW, 
which is discussed in the section &quot;<A HREF="ch05c.htm#137">Using PDW to Package Your Visual Basic Control</A>&quot; 
The second strategy, implementing 
<I>IObjectSafety</I>, is the recommended technique, 
although it's not natively supported by Visual Basic. We'll discuss how to implement 
<I>IObjectSafety</I> in the section titled &quot;<A HREF="ch05d.htm#147">Marking ATL Controls as Safe</A>&quot; (To implement 
<I>IObjectSafety</I> in Visual Basic, consult Knowledge Base article Q182598 at 
<I><A HREF="http://support.microsoft.com/support/kb/articles/Q182/5/98.asp" TARGET="_window2">http://support.microsoft.com/support/kb/articles/Q182/5/98.asp</A></I>.)</P>

<A NAME="129"><H3>Licensing</H3></A>

<P>So far we've been discussing security for the users of the control. What about 
security for you, the creator of the control? You're probably thinking that security for 
you doesn't make sense. But suppose you create an ActiveX control that you want to 
sell. You need a way to ensure that only authorized developers who have proper 
permission can use the control. How do you ensure security like that? The answer is 
licensing. The subject of creating a license for a control is outside the scope of this book, 
but to illustrate how licensing works, we'll talk about how to use third-party 
licensed controls on a Web page. (For more information about creating licensed 
controls, see the Component Development<B> 
</B>section of the MSDN Online Web Workshop.)</P>

<P>To use licensed ActiveX controls, you must use the License Pack Manager, 
a COM object that reads a special license file known as an LPK (License PacKage) 
file for the control. The License Pack Manager can determine whether you're allowed 
to use the licensed control.</P>

<P><div class="note"><blockquote><B>NOTE</B><HR>The License Pack Manager reads a GUID that is stored in an LPK 
file and passes it to Internet Explorer. (This GUID is actually an interface ID, or 
IID.) Internet Explorer uses this IID when creating the control by passing it to 
the <I>IClassFactory2::CreateInstanceLic</I> method.</blockquote></div>
</P>

<P>Before adding the License Pack Manager to a Web page, you must first 
create an LPK file for the licensed control you want to use by running 
Lpk_Tool.exe, a special tool that is available for download from the MSDN Online Web Workshop. 
Follow these easy steps to use Lpk_Tool.exe:</P>

<OL>
<P><LI>     Start Lpk_Tool.exe. This tool displays the dialog box shown in Figure 5-7. This dialog box lists all the ActiveX controls 
currently installed on your system.</LI></P>

<P><LI>    Check the Show Only Controls That Support Licensing check box to 
display only those controls that implement 
<I>IClassFactory2</I>.</LI></P>

<P>
<A HREF="javascript:fullSize('F05ii07x.htm')"> <img src="images/F05ii07.JPG" width=404 height=193 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 5-7. </B> <I>Lpk_Tool.exe </I><!-- /caption -->
</P>

<P><LI>     To add controls to the license package, click the control you want in 
the left combo box, and then click the Add button to add it to the right 
combo box. Once you have included all the licensed controls that you want 
to use on the Web page, save the license package to a LPK file by 
clicking the Save &amp; Exit button. Clicking this button displays the standard 
Windows File Save dialog box, in which you can specify the path and filename.</LI></P>

<P><LI>     After creating the LPK file, add an &lt;OBJECT&gt; tag to the Web page that 
references the License Pack Manager and passes the path and name of 
the LPK file. Here's the code for an LPK file named SimpleCtrl.lpk:</LI></P>

<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;OBJECT CLASSID=&quot;clsid:5220CB21-C88D-11cf-B347
-00AA00A28331&quot;&gt;
        &lt;PARAM NAME=&quot;LPKPath&quot; VALUE=&quot;SimpleCtrl.lpk&quot;&gt;
&lt;/OBJECT&gt;</PRE>
</TD></TR></TABLE>
</P>
</OL>

<P>The CLASSID attribute specifies the CLSID of the License Pack Manager. 
This CLSID should always be the one listed in the preceding code. You can include 
only one LPK file in a Web page. If you include more than one LPK file, Internet 
Explorer will ignore all but the first one. In between the opening and closing &lt;OBJECT&gt; 
tags is a &lt;PARAM&gt; tag. It allows you to send initialization data to the ActiveX control 
or COM object indicated by the &lt;OBJECT&gt; tag. The &lt;PARAM&gt; tag requires two 
attributes: NAME and VALUE. The NAME attribute used in the &lt;PARAM&gt; tag for the LPK 
file should always have a value of <I>LPKPath</I>. The value of the VALUE attribute 
specifies the path and name of the LPK file we created earlier. The path and name that 
you specify must be relative to the current location of the Web page being viewed. 
The path has to be relative; otherwise, someone could copy an LPK file from a server 
and reuse it, even without permission.</P>

</BODY>
</HTML>






