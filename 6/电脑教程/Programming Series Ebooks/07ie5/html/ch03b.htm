<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>DHTML Object Model</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch03a.htm">[Previous]</A> <A HREF="ch03c.htm">[Next]</A><P>

<A NAME="72"><H1>DHTML Object Model</H1></A>

<P>As you learned in <A HREF="ch01a.htm">Chapter 1</A>, starting with version 3, Internet Explorer provided 
an object model: a hierarchy of interconnected and interrelated objects, such as the 
window, the document, and the different elements on a Web page that are 
represented by HTML tags. This hierarchy of objects enables you to traverse the Web page 
document to interrogate it. In other words, the object model enables you to 
determine which information on the Web page has been entered by the user.</P>
<P>In the Internet Explorer 3 object model, the data on a Web page was 
static&#8212;you could read what was on the page, but you couldn't actually change it after 
the Web page had loaded. Additions to the Internet Explorer 4 and 5 object 
models allowed you to change the information displayed on a Web page, so now your 
pages are dynamic! You can access and change almost every item on your page, 
thereby providing a much richer experience for your users. The capability to make 
pages dynamic resulted in a name change for the object model, from Internet 
Explorer Object Model to DHTML Object Model. Figure 3-1 shows a diagram of the 
DHTML Object Model.</P>

<P>
<A HREF="javascript:fullSize('F03ii01x.htm')"> <img src="images/F03ii01.JPG" width=404 height=529 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 3-1.</B> <I>DHTML Object Model, previously known as Internet Explorer Object Model.</I><!-- /caption -->
</P>

<A NAME="73"><H2>Objects</H2></A>

<P>Before learning about the objects in the DHTML Object Model, you need to 
understand what an object is and what it can do. In real life, an object is anything from 
a coffee cup to a car. In Internet Explorer terms, an object is anything from the 
window in which a Web page is displayed to an HTML element on that page. Every 
object is made up of methods, properties, events, and collections. An Internet Explorer 
Web page contains many objects. Each HTML element is itself an object that has 
methods, properties, and events, and might contain collections. And some objects on a 
Web page aren't necessarily represented by an HTML element, such as the window 
in which the Web page is displayed.</P>

<A NAME="74"><H3>Methods</H3></A>

<P>Methods are the actions performed by an object. For example, the methods of 
your car would be drive, stop, turn, and so on. Methods accept input parameters and 
return values, but not always. Calling a method of an object is just as easy as accessing 
a property of the object. (Properties, which define the object, are described in the 
next section.) Let's look at an example of an object by using a car analogy. Suppose 
we have the <I>MyCar</I><B> </B>object. We can call the 
<I>drive</I> method to force the car to move. The 
<I>drive</I> method takes one input parameter that equals the speed, in miles per hour, 
at which we want to move. After calling the 
<I>drive</I> method, we can call the <I>stop</I> 
method to stop the car. Obviously, this example is simple. In reality, we might have a 
distance property that tells us how far we've gone, and we might stop only after 
we've traveled a certain distance. Moving and stopping the car by using methods in 
Microsoft JScript is simple, as shown here:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>MyCar.drive(65);
MyCar.stop();
</PRE>
</td></tr></table></p>

<A NAME="75"><H3>Properties</H3></A>

<P>Properties are all the characteristics that define the object. For instance, your car 
has a specific color, such as white, red, or blue. Also, your car might be compact, 
medium-sized, or large. The color and size of your car are both properties of the car. 
Some properties of a Web page object might be its height, width, or color. Properties 
can be read-only, write-only, or read/write. A read-only property is a property whose 
value you can read but not change. A write-only property is one whose value you 
can change but never read. And a read/write property is one that you can read and change.</p>
<P>Scripting a property of an object is simple. Let's consider again our car 
object named <I>MyCar</I>. <I>MyCar</I> has the properties of color and size. The color property is 
read/write, and the size property is read-only. Using Microsoft VBScript, here's how 
we would script the properties of <I>MyCar</I> to change its color and read its size:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim sizeOfCar
MyCar.color = &quot;red&quot;
SizeOfCar = MyCar.size
</PRE>
</td></tr></table></p>

<A NAME="76"><H3>Events</H3></A>

<P>Events are notifications that are triggered by an object. Just like methods, events 
can have input parameters. Sometimes information about an event is stored in 
another object known as an event object. An <I>event 
</I>object provides a way for the object that is sending a notification to specify pertinent information about the notification. 
The object that triggers the notification sets the properties of the 
<I>event </I>object that pertain to the current event. 
<I>Event </I>objects are maintained by Internet Explorer.</P>
<P>The process of triggering a notification is called firing an event. Clients of 
an object handle the events they are interested in. To handle an event, you have to 
create an event handler function for it.</P>
<P>You can handle events for Internet Explorer in three ways. The first way is 
by creating an event handler that is named by combining the name of the object 
with the name of the event. Suppose the 
<I>MyCar</I> object causes two events named 
<I>OnCrash </I>and <I>OnStalled</I>. In our car example, an event handler in VBScript for the 
<I>OnCrash</I> event<I> </I>is created by combining the name of the object, 
<I>MyCar</I>, with the event to be handled, 
<I>OnCrash</I>, as shown in the code that follows. In VBScript, you join the name of 
the object and the name of the event with the underscore (_) character. You don't 
have to worry about capitalization because VBScript isn't case sensitive.</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub MyCar_OnCrash
   MsgBox &quot;Aaaahhhh!!!&quot;
End Sub
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>The way you create event handlers in JScript is similar to the way you 
create them in VBScript&#8212;you simply combine the name of the object with the name of 
the event. In JScript, however, you join the object and the name of the event with a 
period, or as my British friends like to call it, a full stop. Remember that JScript is case 
sensitive, so you must use the correct case for the object and event name when you 
create event handlers by joining the name and the object. Handling the 
<I>OnStalled</I> event in JScript is as easy as this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;JScript&quot;&gt;
MyCar.OnStalled()
{
   alert(&quot;Time to buy a new car.&quot;);
}
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Most Internet Explorer Web page developers that I know prefer the second 
way to handle events: using the FOR and EVENT attributes of the &lt;SCRIPT&gt; tag to 
bind a block of script to a particular event of a particular object. Here's how you can 
use this approach to handle the <I>OnStalled</I> event in VBScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot; FOR=MyCar EVENT=OnStalled&gt;
   MsgBox &quot;Can somebody give me a lift?&quot;
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>
<P>Although this approach is convenient if you have only one or two event 
handlers on your Web page, if you have many it can quickly become 
cumbersome. I prefer the first method for handling events. It's easier to have one script block 
on a Web page with as many event handlers inside the script block as you want.</P>
<P>The third way to handle events for objects applies only to HTML elements 
(or HTML tags). When inserting an HTML element on a Web page, you specify 
events that you want to handle as attributes of the HTML element. You can specify 
inline script for the event handler or specify a function that will be called when the 
event occurs. JScript is the default language used for this type of event handler, but 
you can change the language by using the LANGUAGE attribute. For example, the 
element &lt;BUTTON&gt;, which is also an object, fires an event named 
<I>onclick</I>. Here are a few examples of how you can use this approach to handle events for the 
<I>onclick</I> event of the <I>button</I> object:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;BUTTON onclick=&quot;alert('Clicked')&quot;&gt;Click Me&lt;/BUTTON&gt;
&lt;BUTTON LANGUAGE=&quot;VBScript&quot; onclick=&quot;MsgBox 'Clicked'&quot;&gt;Click Me&lt;/BUTTON&gt;
&lt;BUTTON onclick=&quot;btnClicked()&quot;&gt;Click Me&lt;/BUTTON&gt;
</PRE>
</td></tr></table></p>
<P>The first line of code calls a JScript function named 
<I>alert</I><B> </B>when the button is clicked. The second line calls a VBScript function named 
<I>MsgBox</I><B> </B>when the button is clicked; in this line, I had to specify the LANGUAGE attribute with a value 
of <I>VBScript</I> to change the default language for scripting events. The third line of 
code calls a JScript function named 
<I>btnClicked</I> when the button is clicked.</P>

<A NAME="77"><H3>Collections</H3></A>

<P>A collection is an object that is also a group of objects. Because a collection is 
an object, it has properties and methods just like any other object. Collections are 
usually contained within another object and are typically accessed through a 
property of another object. For example, your car has a collection of wheels, a collection 
of turn signals, and another collection of headlights. Likewise, the 
<I>MyCar</I> object has <I>wheels</I>, 
<I>signals</I>, and <I>headlights</I> collections, and it would most likely have 
<I>wheels</I>, <I>signals</I>, and <I>headlights 
</I>properties to provide us with access to its collections.</P>
<P>Collections usually have a <I>length </I>property that tells you how many objects 
are in the collection, and an <I>item</I> method that allows you to gain access to a specific 
object within the collection. Other collections might have other properties, methods, or 
both, as you'll see when I talk about collections in the DHTML Object Model. Writing 
script for collections is just as easy as writing script for methods and properties. For 
example, to determine how many wheels are on our car in VBScript, we'd write this code:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim numWheels
numWheels = MyCar.wheels.length
</PRE>
</td></tr></table></p>
<P>You might think this code looks a little strange. But remember that 
<I>wheels </I>is a property of the <I>MyCar</I><B> 
</B>object that returns a collection of wheels, and that a 
collection is just an object that has its own properties and methods. The 
<I>length </I>property is just a member of the <I>wheels 
</I>collection object. By using what's known as object 
chaining in VBScript and JScript, you can join together properties or methods that 
return objects. The preceding code is the same as the next bit of code, but object 
chaining makes the it much easier to read and to write:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim numWheels
Dim wheelsColl

Set wheelsColl = MyCar.wheels
numWheels = wheelsColl.length
</PRE>
</td></tr></table></p>
<P>Collection objects typically have a method named 
<I>item </I>that allows you to access a specific item within the collection. The 
<I>item</I> method usually takes two parameters. The first parameter can be either a number or a string that specifies the item 
you want. If you specify a number for this parameter, 
<I>item </I>returns the element in the collection at the position you specified. The first element in the collection has a 
value of <I>0</I>, the second element has a value of 
<I>1</I>, and so on. If you specify a number for the first parameter, you don't have to worry about specifying the second parameter.</P>
<P>If you specify a string for the first parameter, the 
<I>item</I> method returns a collection of elements. All HTML elements on a Web page can have a NAME attribute, 
an ID attribute, or both associated with them. The collection returned from the 
<I>item</I><B> </B>method when you specify a string for the first parameter is a group of all the 
elements on the Web page that have a name or an ID that matches the string you specify. 
In this case, you can specify a number for the second parameter that indicates 
the position of the element in the collection created by 
<I>item</I>.</P>
<P>To better understand this concept, let's look again at the 
<I>wheels </I>collection of the <I>MyCar </I>object. The front tire on the left side of the car is the first tire in the 
collection. Using VBScript, you can access the front tire like this:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim frontTire1
Set frontTire1 = MyCar.wheels.item(0)
</PRE>
</td></tr></table></p>
<P>The <I>item </I>method returns a tire object that is stored in a variable named 
<I>frontTire1</I>.</P>
<P>There's another way to access the <I>frontTire 
</I>object. You'll often see script like this for accessing an object in a collection:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>Dim frontTire1
Set frontTire1 = MyCar.wheels(0)
</PRE>
</td></tr></table></p>
<P>This looks kind of strange, doesn't it? The <I>item 
</I>method is the default method for a collection object. The default method is called when no method of an object is 
selected. In the case of the <I>wheels </I>collection, because we didn't specify a method 
to call, Internet Explorer passes the parameter in parentheses to the default 
method, which is the <I>item </I>method.</P>
<P>In addition to accessing an object in a collection using a numeric index, 
you can access an object by name. Let's say that the 
<I>frontTire </I>object has a NAME attribute or an ID attribute of 
<I>FrontTire</I>. Using this name, we can call the 
<I>item </I>method and pass it the name of the front tire. Remember, though, that when we pass a string 
to the <I>item</I> method, the method returns a collection of objects that match the name 
we supply, even if only one object has that name. Therefore, we must supply a 
numeric index for the second parameter.</P>
<P>For this example, let's assume that only one tire has the name 
<I>FrontTire</I>. With that in mind, we'll pass an index of 
<I>0 </I>for the second parameter, because the 
object we want will be the first object in the collection returned by the 
<I>item </I>method. Here's how we would access the 
<I>frontTire </I>object from JScript using the name of the tire:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var frontTire;
frontTire = MyCar.wheels.item(&quot;FrontTire&quot;, 0);
</PRE>
</td></tr></table></p>
<P>Also, because the <I>item </I>method is the default method of the collection, we 
can access the <I>frontTire </I>object without actually typing the name of the 
<I>item</I> method into our script. Here's how we can access the 
<I>frontTire </I>object by forcing Internet 
Explorer to call the default method in JScript:</P>
<P><table cellpadding=5 width="95%"><TR><TD>
<PRE>var frontTire;
frontTire = MyCar.wheels(&quot;FrontTire&quot;, 0);
</PRE>
</td></tr></table></p>

</BODY>
</HTML>





