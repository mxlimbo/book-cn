<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Hosting the WebBrowser Control</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06c.htm">[Previous]</A> <A HREF="ch06e.htm">[Next]</A><P>

<A NAME="162"><H1>Hosting the WebBrowser Control</H1></A>

<P>Now let's create some applications in Visual Basic and Visual C++ that host 
the WebBrowser control. After you complete the sample in this section, you should 
have a basic understanding of how to create an application that hosts the 
WebBrowser control. When you see how easy it is to add Web browsing to your applications, 
I'm sure you'll want to start right away!</P>

<A NAME="163"><H2>Using Visual Basic</H2></A>

<P>In Visual Basic, you can develop a fully functional Web browser of your own in 
five minutes or less. Follow these steps to create a basic Web browser application:</P>

<OL>
<P><LI>Start Visual Basic.
</LI></P>
<P><LI>Choose Standard EXE from the New Project dialog box. Visual Basic 
enters design mode so that you can begin designing the form.</LI></P>

<P><LI>The WebBrowser control is not automatically included in the 
Control Toolbox. To add the WebBrowser control to the Control Toolbox, 
choose Components from the Project<I> </I>menu. The dialog box in Figure 6-3 
will be displayed.</li></p>

<P>
<A HREF="javascript:fullSize('F06ii03x.htm')"> <img src="images/F06ii03.JPG" width=404 height=359 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-3.</B> <I>Components dialog box.</I><!-- /caption -->
</P>

<P><LI>Click the Controls tab if the tab isn't already visible. Then check 
Microsoft Internet Controls in the list box, and click OK to close the dialog 
box. Visual Basic adds the WebBrowser control icon to the bottom of the 
Control Toolbox, as shown in Figure 6-4.</LI></P>


<P>
<img src="images/F06ii04.GIF" width=220 height=387 border="0">
</P><P>
<!-- caption --><B>Figure 6-4.</B> <I>Visual Basic Control Toolbox after adding the WebBrowser control icon.</I><!-- /caption -->
</P>

<P><LI>To add the WebBrowser control to the form, click the WebBrowser 
control icon in the Control Toolbox and size the control on your form. 
Once you've added the control to the form, Visual Basic will assign it the 
name <I>WebBrowser1</I>.</li></p>

<P><LI>Increase the size of your form so that you can see more content on 
Web pages when you navigate to them. Leave some room for the Visual 
Basic intrinsic controls that you're going to add later. The form should 
look similar to the one shown in Figure 6-5.</li></p>

<P><LI>Double-click on an empty area of the form to start adding code to its <I>Load</I> event. To make the WebBrowser navigate to a Web page, you just need to call one of the navigation methods such as <I>GoHome</I>,<I> GoSearch</I>,<I> Navigate</I>,<I> </I>or <I>Navigate2</I>.</li></p>

<P><LI>Call the <I>GoHome</I> method to navigate to the user's home page. The 
code for the <I>Load </I>event handler should look like this:</LI></P>


<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
Private Sub Form_Load()
   WebBrowser1.GoHome
End Sub
</PRE>
</td></tr></table></p>

<P>
<A HREF="javascript:fullSize('F06ii05x.htm')"> <img src="images/F06ii05.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-5.</B> <I>Visual Basic form after adding the WebBrowser control.</I><!-- /caption -->
</p>

</OL>

<P>That's it! You're finished. You've created a fully functional Web browser 
application. By my clock, that took only five minutes. To make sure it works, run 
your application by clicking the Start button on the Visual Basic toolbar. Your 
application will load the WebBrowser control and navigate to your home page. Save the 
project before you proceed, and name it 
<I>VbWebHost</I>.</P>

<P>Although you now have a working Internet application, you'll probably want 
to add functionality so that the application acts more like a real Web browser 
application. Add some controls to the form to allow the user to control the navigation. 
Add a label, a text box for a URL, a Go button, a Back button, a Forward button, and a 
Stop button. The form should look similar to the one in Figure 6-6.
</P><P>Now assign the properties listed in Table 6-7 to your 
controls. When you assign the properties, specify the strings that are on the right side of 
the equal signs and do not include the quotation marks and equal signs.
</P>

<P>
<A HREF="javascript:fullSize('F06ii06x.htm')"> <img src="images/F06ii06.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-6.</B> <I>Visual Basic form after adding controls.</I><!-- /caption -->
</P>

<P><b>Table 6-7.</b> <i>Control Properties</i></P>
<p><table cellpadding=5 width="95%">

<tr><th><i>Control</i></th><th><i>Properties</i></th></tr>

<tr><td valign="top">Label</td><td valign="top">Caption = &quot;Address:&quot;</td></tr>

<tr><td valign="top">TextBox</td><td valign="top">Name = txtAddress; Text = &quot;&quot; (In other words, remove the default text.)</td></tr>

<tr><td valign="top">Go Button</td><td valign="top">Name = btnGo; Caption = &quot;Go&quot;</td></tr>
<tr><td valign="top">Back Button</td><td valign="top">Name = btnBack; Caption = &quot;&lt; Back&quot;</td></tr>
<tr><td valign="top">Forward Button</td><td valign="top">Name = btnFwd; Caption = &quot;Forward &gt;&quot;</td></tr>
<tr><td valign="top">Stop Button</td><td valign="top">Name = btnStop; Caption = &quot;Stop&quot;</td></tr>
</table></p>

<P>Now add some code. To make these controls work correctly, use the 
methods of the WebBrowser control. For example, when the user enters text into the text 
box and clicks the Go button, use the <I>Navigate</I> method to perform the navigation. 
Of course, you must ensure that the user has indeed entered some text into the text box.</P>

<P>Also, you can use the <I>GoBack</I>, <I>GoForward</I>,<I> </I>and <I>Stop</I> methods to implement the Back, Forward, and Stop buttons. Remember that the <I>GoBack</I> and <I>GoForward </I>methods have no effect in certain situations. (<A HREF="ch07a.htm">Chapter 7</A> demonstrates how to disable Back and Forward buttons when their associated WebBrowser methods have no effect.) After you implement the button controls, your Visual Basic code should look like this:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
Option Explicit

Private Sub btnBack_Click()
   On Error Resume Next
   WebBrowser1.GoBack
End Sub

Private Sub btnFwd_Click()
   On Error Resume Next
   WebBrowser1.GoForward
End Sub

Private Sub btnGo_Click()
   WebBrowser1.Navigate txtAddress.Text
End Sub

Private Sub btnStop_Click()
   WebBrowser1.Stop
End Sub

Private Sub Form_Load()
   WebBrowser1.GoHome
End Sub
</PRE>
</td></tr></table></p>

<P>Notice that <I>On Error Resume Next</I> is specified in the <I>Click</I> event handlers for the Back and Forward buttons. When no entries exist in the history list before or 
after the current URL, these methods return errors. The Visual Basic error handling 
mechanism is used to handle them.</P>

<p>Now test the code by running the application. After the WebBrowser 
finishes navigating to your home page, type a URL into the text box and click the Go 
button. You should have two URLs in the history list. Click the Back button to go back 
to your home page, and then click the Forward button to move ahead. Click the 
Stop button while a page is being loaded to ensure that the Stop button works as well.</p>

<A NAME="164"><H3>Printing a Web page</H3></A>

<P>Because users frequently want to print the Web page displayed in their 
application, you'll want to add printing functionality to your application. In the past, printing a Web page from Visual Basic was cumbersome and unreliable. You had to use 
the <I>SendKeys</I> function to send the accelerator keys that initiated the print operation to the WebBrowser. Now, using the <I>ExecWB</I> method, printing Web pages is much easier; plus <I>ExecWB </I>is a lot more reliable.</p>

<p>To add printing functionality, first add a Print button to the form. (Use the 
same procedures that you used to add the Stop, Back, and Forward buttons earlier.) 
Name this button <I>btnPrint</I>, and change the caption to <I>Print</I>. The form should look similar to the one displayed in Figure 6-7.</p>

<p><A HREF="javascript:fullSize('F06ii07x.htm')"> <img src="images/F06ii07.JPG" width=404 height=297 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-7.</B> <I>Visual Basic form after adding a Print button.</I><!-- /caption -->
</p>

<p>Next, double-click the Print button to add code to handle its 
<I>Click</I> event. In the event handler, call the 
<I>ExecWB</I> method, passing it the command ID necessary to 
print the page: <I>OLECMDID_PRINT</I>. As with other calls to 
<I>ExecWB</I>,<I> </I>you should specify whether to prompt the user by passing appropriate value for the second parameter. If you want to prompt the user before printing, specify <I>OLECMDEXECOPT_PROMPTUSER</I>; otherwise specify <I>OLECMDEXECOPT_DONTPROMPTUSER</I>. For this example, we want to prompt the user before printing. The print command takes no input and returns no output, so you can specify <I>Null </I>for the third and fourth parameters. The code for this event handler should look like this:</p>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
Private Sub btnPrint_Click()
   On Error Resume Next
   WebBrowser1.ExecWB OLECMDID_PRINT, OLECMDEXECOPT_PROMPTUSER, _
                      Null, Null
End Sub
</PRE>
</td></tr></table></p>

<P>Test the new code by running your application, navigating to a Web page, 
and clicking the Print button. Internet Explorer will display the Print dialog box and 
let you choose different print options. The sample created by following these steps 
can be found on the companion CD in the folder \Samples\Chap06\VbWebHost.</P>

<A NAME="165"><H2>Using Visual C++</H2></A>

<P>Creating WebBrowser host applications in Visual C++ is a bit more difficult than 
in Visual Basic. If you're creating your host application from scratch (without MFC 
or ATL), hosting the WebBrowser control involves implementing quite a few 
COM interfaces. You must also create an instance of the WebBrowser control by using 
the <I>CoCreateInstance </I>COM API, specifying <I>CLSID_WebBrowser </I>as the CLSID of the object you want to create. And you must &quot;site&quot; the control in your container.</P>

<P>Because creating ActiveX control containers is outside the scope of this 
book, I'll demonstrate the easy ways to host the WebBrowser control. In this section, 
I'll show you how to create a WebBrowser host application by using MFC and by 
using the ActiveX control containment classes that are new in ATL 3.</p>

<A NAME="166"><H3>Using MFC</H3></A>

<P>You can create three types of applications in MFC: single-document interface 
(SDI), multiple-document interface (MDI), and dialog-based applications. Because 
building a WebBrowser host in MFC by using the dialog-based approach is similar to 
creating one in Visual Basic, I'll show you how to create a WebBrowser host by using 
one of the other approaches&#8212;SDI. Once you know how to build a WebBrowser host 
by using the SDI approach, translating this information to MDI will be pretty easy.</P>

<p>When demonstrating the SDI example in this section, I'll use the WebBrowser (<I>CWebBrowser2</I>) wrapper class that the Components And Controls Wizard creates for you. Using this class instead of the built-in MFC <I>CHtmlView </I>class will help you better understand how to host the WebBrowser in MFC.</p>

<p>The <I>CHtmlView</I> class requires less explanation. To use it, all you have to do 
is choose <I>CHtmlView</I> as the base class of your application in step 6 of the MFC 
AppWizard when creating your MFC project, as shown in Figure 6-8. After you complete the 
wizard, the view class for your application will be derived from 
<I>CHtmlView</I>. Then you can call wrapper functions for the different methods of the 
<I>IWebBrowser2 </I>interface.</P>

<P>
<A HREF="javascript:fullSize('F06ii08x.htm')"> <img src="images/F06ii08.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-8.</B> <I>MFC AppWizard - Step 6 of 6 dialog box.</I><!-- /caption -->
</P>

<P>To create an MFC single-document interface application, start Visual C++ 
and choose New from the File menu. The New dialog box is displayed, as shown 
in Figure 6-9.</P>

<P>
<A HREF="javascript:fullSize('F06ii09x.htm')"> <img src="images/F06ii09.JPG" width=404 height=288 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-9.</B> <I>Visual C++ New dialog box.</I><!-- /caption -->
</P>

<P>In the Projects tab, select the MFC AppWizard (exe) entry, type a name into the Project Name edit box (such as <I>MfcWebHost</I>), and click OK. Step 1 of the MFC AppWizard<I> </I>is displayed. (See Figure 6-10.)</P>

<P>
<A HREF="javascript:fullSize('F06ii10x.htm')"> <img src="images/F06ii10.JPG" width=404 height=325 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-10.</B> <I>Step 1 of the MFC AppWizard.</I><!-- /caption -->
</P>

<P>Select the Single Document option from the dialog box. Then accept the defaults for the remainder of the project settings by clicking the Finish<I> </I>button. Click OK in the New<I> </I>Project Information dialog box that appears. To add the WebBrowser control to your project, select Project/Add To Project/Components And Controls from the Visual C++ menu, as shown in Figure 6-11.
</P>

<P>
<A HREF="javascript:fullSize('F06ii11x.htm')"> <img src="images/F06ii11.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-11.</B> <I>Selecting Components And Controls.</I><!-- /caption -->
</P>

<P>Visual C++ gathers information about all the components and controls on 
your system and displays the Components And Controls 
Gallery<I> </I>dialog box, as shown in Figure 6-12.</P>

<P>
<A HREF="javascript:fullSize('F06ii12x.htm')"> <img src="images/F06ii12.JPG" width=404 height=377 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 6-12.</B> <I>Components And Controls Gallery dialog box.</I><!-- /caption -->
</P>

<P>Now double-click Registered ActiveX Controls in the list box. Locate and select Microsoft Web Browser, and click the Insert<I> </I>button. When prompted whether you want to insert this component, click OK.The wizard displays the Confirm Classes dialog box that is shown in Figure 6-13.</P>

<P>
<img src="images/F06ii13.GIF" width=335 height=353 border="0">
</P><P>
<!-- caption --><B>Figure 6-13.</B> <I>Confirm Classes dialog box.</I><!-- /caption -->
</P>

<P>By default, <I>CWebBrowser2</I> is selected. The <I>CWebBrowser2</I> class is a wrapper class for the WebBrowser control that Visual C++ is going to create for you. Because this class's implementation is specific to MFC, you can use it only in MFC projects. Click the OK button to add <I>CWebBrowser2</I> to your project. Then close the 
Components And Controls Gallery dialog box.</P>

<P>Include the WebBrowser2.h file in the header file for your view 
class&#8212;MfcWebHostView.h:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
#include &quot;WebBrowser2.h&quot;
</PRE>
</td></tr></table></p>

<P>Create a private or protected data member in your view class, and name 
it <I>m_webBrowser</I>. The declaration of this data member should look similar to this:
</P>
<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
protected:
   CWebBrowser2 m_webBrowser;
</PRE>
</td></tr></table></p>

<P>Create a message handler for the 
<I>WM_CREATE</I> message. In the event handler, 
add code to create a new instance of the WebBrowser control by using 
<I>m_webBrowser</I>'s <I>Create</I> method. (The 
<I>Create </I>method is a member of the wrapper class that was 
created for you.) The code for the <I>OnCreate</I> message handler should look like this:
</P>
<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
int CMfcWebHostView::OnCreate(LPCREATESTRUCT lpCreateStruct) 
{
   if (CView::OnCreate(lpCreateStruct) == -1)
      return -1;
   
   // Create WebBrowser control
   //
   if (!m_webBrowser.Create(NULL, WS_CHILD|WS_VISIBLE,
                     CRect(), this, NULL))
   {
     return -1;
   }
   
   return 0;
}
</PRE>
</td></tr></table></p>

<P>Now create a Windows message handler for the <I>WM_SIZE </I>message. Add code to the message handler to change the size of the WebBrowser control when the size of your application changes. If you don't include this code, the WebBrowser control will never appear in the View window. Here's the code for the <I>OnSize</I> message handler:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnSize(UINT nType, int cx, int cy) 
{
   CView::OnSize(nType, cx, cy);
   
   
   // Resize WebBrowser control
   //
   m_webBrowser.MoveWindow( 0, 0, cx, cy );
   m_webBrowser.UpdateWindow();
}
</PRE>
</td></tr></table></p>

<P>Override the <I>OnInitialUpdate </I>method of the base class to navigate to the 
user's home page when your application is first created. Here's how the code for 
the <I>OnInitialUpdate</I> message handler should appear:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnInitialUpdate() 
{
   CView::OnInitialUpdate();
   
   // Navigate to the user's home page.
   //
   m_webBrowser.GoHome();
}   
</PRE>
</td></tr></table></p>

<P>Compile and run the application. It should load the WebBrowser control 
and navigate to your user's home page. The application should look similar to the 
one shown in Figure 6-14.</P>

<p>
<A HREF="javascript:fullSize('F06ii14x.htm')"> <img src="images/F06ii14.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-14.</B> <I>MfcWebHost application.</I><!-- /caption -->
</p>

<p>Now add some functionality to your application so that it can be used to 
browse the Internet. Add a Navigate<I> </I>menu that contains submenu items for Go Back, 
Go Forward, Go Home, Go Search, Go To A Web Page, and Stop. Your new menu 
should look similar to Figure 6-15.</p>

<p>
<A HREF="javascript:fullSize('F06ii15x.htm')"> <img src="images/F06ii15.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-15.</B> <I>Navigate menu.</I><!-- /caption -->
</p>

<p>You might want to add accelerator keys for your new menu items, such as 
the Alt-Left arrow key combination for Go Back. You can use the same accelerator 
keys that Internet Explorer uses if you like.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>You can find the accelerator keys that Internet Explorer uses by inspecting the menu items on the Internet Explorer View menu. Note that no menu item exists that is similar to our Go To A Web Page menu item. Internet Explorer uses an edit box on the toolbar. You might want to add an edit box for the URL instead of a menu item.
</blockquote></div></p>

<P>Create menu handlers to implement each menu item. Adding menu handlers 
to the view class is the easiest way to implement the menu functionality. Use the 
methods of the WebBrowser control to perform the necessary operations. For example, 
use the <I>GoBack </I>method to implement the Go Back menu item. The code for these 
event handlers should look like this:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnNavigateGoBack() 
{
   m_webBrowser.GoBack();
}

void CMfcWebHostView::OnNavigateGoForward() 
{
   m_webBrowser.GoForward();
}

void CMfcWebHostView::OnNavigateGoHome() 
{
   m_webBrowser.GoHome();
}

void CMfcWebHostView::OnNavigateGoSearch() 
{
   m_webBrowser.GoSearch();
}

void CMfcWebHostView::OnNavigateStop() 
{
   m_webBrowser.Stop();
}
</PRE>
</td></tr></table></p>

<P>As I mentioned earlier, if the user clicks Go Back or Go Forward and no 
pages exist before or after the current page in the navigation history, an error message 
will be displayed. In the <a href="ch07a.htm">next chapter</a>, I'll show you how to disable these menu items 
when they aren't needed to prevent the error message from being displayed.</p>
<p>The Go To A Web Page menu item is a special case. For this menu item, a 
dialog box should be displayed that asks for the URL that the user wants to navigate 
to. (See Figure 6-16.)</p>

<p>
<A HREF="javascript:fullSize('F06ii16x.htm')"> <img src="images/F06ii16.JPG" width=404 height=301 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-16.</B> <I>Enter A URL For Navigation dialog box.</I><!-- /caption -->
</p>

<p>Alternatively, you can create an edit box in the toolbar of your application 
that will be used for navigation. In this example, I decided to take the dialog 
approach. When creating this dialog, you can use ClassWizard to create a new dialog class 
for it. Name this class <I>CAddressDlg. </I>The dialog class should contain a 
<I>CString</I> data member named <I>m_strAddress 
</I>that will hold the address that the user entered. If you 
use ClassWizard to create this data member, the data member will be declared as a 
public member of the class. Change this data member to a protected data member of 
the class, and create an accessor method for this member, like so:</p>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
public:
   const CString&amp; GetAddress() const { return m_strAddress; }

protected:
   CString m_strAddress;
</PRE>
</td></tr></table></p>

<P>Now create a menu handler for the Go To A Web Page menu item. This 
menu handler should build and display the 
<I>CAddressDlg</I> dialog box. (Make sure you include the header file for the 
<I>CAddressDlg</I> class in the implementation file for the 
view class&#8212;MfcWebHostView.cpp.) After the user enters a URL and clicks OK, the 
application should navigate to the URL using the WebBrowser's 
<I>Navigate</I> method. The code for the menu handler should look like this:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnNavigateGoToAWebPage() 
{
   CAddressDlg dlgAddr;
   
   // Show the dialog box. If the user clicks OK,
   // make sure a URL was entered. If one was entered,
   // navigate to that URL by using the Navigate method.
   //
   if (dlgAddr.DoModal() == IDOK)
   {
     CString strAddress = dlgAddr.GetAddress();

     if (!strAddress.IsEmpty())
     {
       COleVariant vtEmpty;

       m_webBrowser.Navigate(strAddress, &amp;vtEmpty,
                        &amp;vtEmpty, &amp;vtEmpty, &amp;vtEmpty);
     }
   }
}
</PRE>
</td></tr></table></p>

<P>In this code, an instance of the <I>CAddressDlg</I> class is created. Then 
<I>DoModal</I> is called to create and show the dialog box. If the user clicks the OK button, the application checks to make sure that a URL was actually entered before navigating to the URL.</p>

<p>Now compile and test your application. Test all the menu items to make sure you can navigate to a Web page, to your home page, to your search page, and backward and forward in the history list. Make sure the Stop menu item works, too. (This example can be found on the companion CD in the folder \Samples\Chap06\MfcWebHost. The file on the CD includes the additional menu items that are implemented later in this chapter.)</p>

<A NAME="167"><H3>Using ATL</H3></A>

<P>In the past, hosting the WebBrowser control in an application written by using 
the Active Template Libraries (ATL) wasn't any easier than creating a control 
container manually by using standard C++. But now, the new ActiveX control 
containment classes that come with ATL 3 (which shipped with Visual C++ 6) allow you to 
easily host the WebBrowser control in an ATL application or control.</p>

<p>Because implementing in ATL user interface features such as menus and 
toolbars still involves using the Win32 APIs, the example that I'm going to show you is 
pretty basic. I just want to demonstrate how to use the new control containment classes 
to host the WebBrowser control. We won't implement any user interface features 
whatsoever. This example will be just a frame with a window that contains the 
WebBrowser control. In <A HREF="ch09a.htm">Chapter 9</A>, I'll show you a full-blown browser application that is 
written with ATL and the Win32 APIs.</p>

<p>To create a WebBrowser host application by using ATL, start Visual C++, 
and follow the steps below.</p>

<OL>
<P><LI>Choose New from the File menu.</LI></P>

<P><LI>In the New dialog box, choose ATL COM AppWizard, and 
enter <I>AtlWebHost</I> for the project name.</li></p>

<P><LI>Click OK, choose Executable (EXE) from the Step 1 Of 1 dialog box, and click the Finish button.</li></p>

<P><LI>Click the OK button in the New Project Information dialog box. 
The wizard will create the basic code for an ATL stand-alone 
executable application.</li></p>

<P><LI>Add the control to your project that hosts the WebBrowser control. To 
do this, right-click AtlWebHost Classes in the ClassView pane of your project.</li></p>

<P><LI>From the context menu, choose New ATL Object. The ATL Object 
Wizard dialog box is displayed.</li></p>

<P><LI>Click Controls in the left pane, and select HTML Control from the right pane, as shown in Figure 6-17.</li></p>

<P>
<A HREF="javascript:fullSize('F06ii17x.htm')"> <img src="images/F06ii17.JPG" width=404 height=251 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-17.</B> <I>ATL Object Wizard with HTML Control selected.</I><!-- /caption -->
</p>

<P><LI>Click the Next<I> </I>button in the ATL Object Wizard dialog box, and enter a short name for the control, such as <I>AtlWbHost</I>. The wizard automatically fills in the rest of the text boxes in the dialog box for you.</li></p>

<P><LI>Keep the defaults for the remainder of the items in the dialog box, 
and click OK.</LI></P>
</OL>
<P>The wizard creates the <I>CAtlWbHost </I>class for you, which contains boilerplate code to host the WebBrowser control. The key piece of code that instantiates the WebBrowser control is contained in the <I>OnCreate</I> method, which is called when the <I>WM_CREATE </I>message is sent to the window associated with this class. The code that the wizard inserts for <I>OnCreate</I> is shown here:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
LRESULT OnCreate(UINT /*uMsg*/, WPARAM /*wParam*/, LPARAM /*lParam*/, 
                 BOOL&amp; /*bHandled*/)
{
   CAxWindow wnd(m_hWnd);
   HRESULT hr = wnd.CreateControl(IDH_ATLWBHOST);
   if (SUCCEEDED(hr))
      hr = wnd.SetExternalDispatch(static_cast&lt;IAtlWbHostUI*&gt;(this));
   if (SUCCEEDED(hr))
      hr = wnd.QueryControl(IID_IWebBrowser2, (void**)&amp;m_spBrowser);
   return SUCCEEDED(hr) ? 0 : -1;
}
</PRE>
</td></tr></table></p>

<P>In this code, a window object of type <I>CAxWindow</I> is created first. This object provides ActiveX control containment support. Next, the WebBrowser control is created by using the <I>CreateControl </I>method of the <I>CAxWindow</I> class. Notice that the resource ID of an HTML page is passed to <I>CreateControl </I>so that this HTML page will be loaded when the WebBrowser control is created. Then the 
<I>SetExternalDispatch</I> method is invoked. This method pertains to implementing the 
<I>IDocHostUIHandler </I>interface, which I'll discuss in <A HREF="ch09a.htm">Chapter 9</A>.
</P>

<P>If none of the previous method calls have failed, the code uses the 
<I>QueryControl</I> method of <I>CAxWindow</I> to query for the 
<I>IWebBrowser2 </I>interface. If all goes well, 
<I>QueryControl</I> returns a pointer to the <I>IWebBrowser2 
</I>interface that is stored in the <I>m_spBrowser 
</I>data member. By default, the wizard makes this data member public.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>Being the good object-oriented programmer that I am, I like to 
change the access-specifier for the 
<I>m_spBrowser</I> data member to a protected data member. You can decide whether you want to do the same thing.
</blockquote></div></p>

<P>If you compile and run the code that the wizard entered, nothing will 
happen. You have to add code to create and display the window. To do this, you must 
first create a method named <I>Run</I> in the 
<I>CAtlWbHost</I> class. (The name of this method 
is irrelevant. You can choose anything that makes sense to you.) This method 
creates and displays the window for your application, as shown in this code:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
STDMETHODIMP Run()
{
   //
   // Create and show the window.
   //
   RECT rcClient = { CW_USEDEFAULT, 0, 0, 0 };

   if (Create(GetDesktopWindow(), rcClient, _T(&quot;ATL Browser&quot;),
              WS_VISIBLE | WS_OVERLAPPEDWINDOW, 0, (UINT)NULL) == NULL)
   {
     return E_FAIL;
   }

   ShowWindow(SW_SHOWNORMAL);
   return S_OK;
}
</PRE>
</td></tr></table></p>

<P>When the <I>Create</I> method is called, a <I>WM_CREATE </I>message is sent to the window; consequently, the <I>OnCreate</I> method is called. The code to host the WebBrowser control is included in the <I>OnCreate </I>method as I showed you earlier.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>The <I>Create 
</I>method belongs to the <I>CWindowImpl</I> class, which is a 
base class of <I>CComControl</I>. <I>CAtlWbHost 
</I>derives directly from <I>CComControl</I>, 
which means that you can call methods of 
<I>CWindowImpl</I> as well.
</blockquote></div></p>

<P>Next the <I>Run </I>method must be called to create and display the window. 
This call should be made in the AtlWebHost.cpp file directly above the message loop 
for your application. But before <I>Run </I>is called, an instance of the 
<I>CAtlWbHost</I> class must be created. You cannot simply create an instance of this class, like you would do 
for any other C++ object, by using the <I>new </I>operator. You must use the 
<I>CreateInstance </I>method of <I>CComObject </I>to create an instance of the class. Locate the message 
pump for your application in CAtlWebHost.cpp, insert this code to create an instance of 
the <I>CAtlWbHost </I>class, and call the 
<I>Run</I> method:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
CComObject&lt;CAtlWbHost&gt;* pWbHost;
HRESULT hr = CComObject&lt;CAtlWbHost&gt;::CreateInstance(&amp;pWbHost);

if (SUCCEEDED(hr))
   pWbHost-&gt;Run();

// Message pump
MSG msg;
while (GetMessage(&amp;msg, 0, 0, 0))
   DispatchMessage(&amp;msg);
</PRE>
</td></tr></table></p>

<P>If you compile and run the application now, it will work. It loads 
the WebBrowser control, which navigates to the Web page resource that the 
wizard automatically inserted into your application. You should navigate somewhere 
useful, so use the <I>GoHome </I>method to navigate to the user's home page. You can 
call <I>GoHome </I>in the <I>OnCreate</I> function. After you add the call to 
<I>GoHome</I>, the <I>OnCreate</I> function will look like this:
</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
LRESULT OnCreate(UINT /*uMsg*/, WPARAM /*wParam*/, 
          LPARAM /*lParam*/, BOOL&amp; /*bHandled*/)
{
   CAxWindow wnd(m_hWnd);
   HRESULT hr = wnd.CreateControl(IDH_ATLWBHOST);
   if (SUCCEEDED(hr))
      hr = wnd.SetExternalDispatch(static_cast&lt;IAtlWbHostUI*&gt;(this));
   if (SUCCEEDED(hr))
      hr = wnd.QueryControl(IID_IWebBrowser2, (void**)&amp;m_spBrowser);

   if (SUCCEEDED(hr))  
      m_spBrowser-&gt;GoHome();

   return SUCCEEDED(hr) ? 0 : -1;
}
</PRE>
</td></tr></table></p>

<P>When you compile and run your application, the application should look 
similar to the one shown in Figure 6-18. The sample created can be found on the 
companion CD in the folder \Samples\Chap06\AtlWebHost.</P>

<p>
<A HREF="javascript:fullSize('F06ii18x.htm')"> <img src="images/F06ii18.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><B>Figure 6-18.</B> <I>AtlWebHost application.</I><!-- /caption -->
</p>

<A NAME="168"><H3>Printing a Web page</H3></A>

<P>Printing a Web page from an MFC application that is hosting the WebBrowser 
control is just as easy as it is in a Visual Basic application that is hosting the control. 
All you have to do is call the <I>ExecWB</I> method and pass 
<I>OLECMDID_PRINT</I>.</P>

<P>To add printing support to the MfcWebHost example I introduced to you earlier, create a menu handler for the ID_FILE_PRINTmenu item. In the menu handler, call the <I>ExecWB</I> method of the WebBrowser control, and pass <I>OLECMDID_PRINT</I>. You can also specify whether you want the user to be prompted before printing, which we do in the next bit of code. Also, if you want to know whether the user clicked the OKbutton or the Cancelbutton, check the return value of <I>ExecWB</I>.For the print command, if the user clicked OKto initiate printing, <I>ExecWB </I>will return <I>S_OK</I>. If the user clicked Cancel, <I>ExecWB </I>will return something other than <I>S_OK. </I>(I say &quot;something other than <I>S_OK</I>&quot; because the value returned isn't representative of the fact that the user clicked the Cancel button.) Below is the code for this <I>OnFilePrint</I> method that will be called when the user chooses Print from the File menu.</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnFilePrint() 
{
   m_webBrowser.ExecWB(OLECMDID_PRINT, OLECMDEXECOPT_PROMPTUSER,
                       NULL, NULL);
}
</PRE>
</td></tr></table></p>

<P>In addition to printing, the WebBrowser control offers page setup 
functionality. By using page setup, the user can change different options that pertain to 
printing such as headers, footers, and page orientation. To implement the page 
setup functionality, the code calls <I>ExecWB </I>and passes 
<I>OLECMDID_PAGESETUP</I>. Create a menu item on the 
File menu named Page Setup. Then create a menu handler for 
this menu item, and enter the following code to implement this handler:</P>

<P><table cellpadding=5 width="95%">
<TR><TD>
<PRE>
void CMfcWebHostView::OnFilePageSetup() 
{
   m_webBrowser.ExecWB(OLECMDID_PAGESETUP, OLECMDEXECOPT_PROMPTUSER,
                       NULL, NULL);
}
</PRE>
</td></tr></table></p>

<P>Once again, compile and test your application. Try out the printing 
functionality by choosing Printand Page Setup.</P>

</BODY>
</HTML>





