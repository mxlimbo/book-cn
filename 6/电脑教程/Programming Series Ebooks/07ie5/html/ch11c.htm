<HTML>
<head>
<link rel="STYLESHEET" type="text/css" href="Progie5.css">
<TITLE>Using Behaviors Created with HTML Components</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch11b.htm">[Previous]</A> <A HREF="ch11d.htm">[Next]</A><P>

<A NAME="260"><H1>Using Behaviors Created with HTML Components</H1></A>
 
<P>HTML Components (HTCs) are components that encapsulate script and can be 
attached to HTML elements on a Web page. But they are more than that, as 
you'll see when you create your own DHTML Behaviors with HTCs. Using Behaviors 
created with HTCs is simple. Either you use the new scripting methods, or you use 
the new CSS behavior<I> </I>attribute. (Microsoft has proposed this attribute as an addition to the CSS standard.)</p>

<A NAME="261"><H2>Attaching Behaviors to HTML Elements</H2></A>

<P>You can use the new <I>addBehavior </I>method to add a Behavior to an HTML 
element and the new <I>removeBehavior</I> method to remove it. When you call 
<I>addBehavior</I>, the Behavior is appended to a list of Behaviors that are attached to the element. When you call <I>removeBehavior</I>, the Behavior is detached from the list. You can also attach a Behavior to an element by setting the <I>behavior</I> property of the <I>style </I>object, but doing so will effectively hide any Behaviors that you attach by using the CSS behavior<I> </I>attribute.
</P>

<P>Let's look at an example. To add an HTC Behavior to an anchor tag by 
using scripting, you can use the <I>addBehavior 
</I>method in JScript, as follows:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>var iID = anchor1.addBehavior(&quot;BehaveYourself.htc&quot;);
</PRE>
</td></tr></table></p>


<P>In this line of code, the ID of the anchor tag is 
<I>anchor1</I>. By using the <I>addBehavior</I> method, the Behavior implemented in the BehaveYourself.htc file 
is added to the list of Behaviors attached to the anchor tag. The 
<I>addBehavior </I>method returns an ID that you can use later to detach the Behavior, like so:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>anchor1.removeBehavior(iID);
</PRE>
</td></tr></table></p>


<P>Now let's see how to attach a Behavior by setting the 
<I>behavior </I>property of the <I>style </I>object. The JScript code below demonstrates this.
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
anchor1.style.behavior = &quot;url(BehaveYourself.htc)&quot;;
</PRE>
</td></tr></table></p>


<P>Notice that when setting the value of the <I>behavior </I>property, you use the <I>url</I> property to tell Internet Explorer that the value of the <I>behavior</I> property points to a URL.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
Although you can attach Behaviors by using script or the CSS 
behavior<I> </I>attribute, for simplicity we'll use the CSS technique for the remainder of 
this chapter.
</blockquote></div></p>


<P>The other technique for attaching Behaviors is to use the CSS 
behavior<I> </I>attribute. The value of the 
behavior<I> </I>attribute points to the .htc file that contains a 
Behavior implemented as an HTC (or to the ID of a Binary DHTML Behavior implemented 
by using C++ and COM, as you'll see in the section &quot;<A HREF="ch11d.htm#269">Using Binary DHTML Behaviors</A>&quot;). When attaching a Behavior in this way, you set the value of the 
behavior<I> </I>attribute to the URL of the Behavior.
</P>

<P>
Using the CSS behavior<I> </I>attribute, you can attach an HTC to an HTML 
element as a Behavior in three ways. First you can attach it directly to an HTML element: 
(If you want to apply multiple behaviors to an element, specify a space-delimited 
list of URLs for the behavior attribute. See MSDN for more information.)
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;A HREF=&quot;myfile.htm&quot; STYLE=&quot;behavior:url(myBehavior.htc)&quot;&gt;Text&lt;/A&gt;
</PRE>
</td></tr></table></p>


<P>The second way is to use a CSS <I>style</I> block, as shown here:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HEAD&gt;
   &lt;STYLE&gt;
      A { behavior:url(myBehavior.htc) }
   &lt;/STYLE&gt;   
&lt;/HEAD&gt;
</PRE>
</td></tr></table></p>


<P>Finally you can use the CSS <I>style </I>block in combination with the CLASS 
attribute of an HTML element, like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>&lt;HEAD&gt;
   &lt;STYLE&gt;
      .myClass {behavior:url(myBehavior.htc) }
   &lt;/STYLE&gt;
&lt;/HEAD&gt;

&lt;BODY&gt;
   &lt;DIV ID=&quot;oDiv1&quot; CLASS=&quot;myClass&quot;&gt;&lt;/DIV&gt;
&lt;/BODY&gt;
</PRE>
</td></tr></table></P>

<P>

<div class="note"><blockquote><b>NOTE</b><HR>
If you specify both the STYLE attribute and the CLASS attribute for 
an HTML element, the STYLE attribute takes priority.
</blockquote></div></p>


<P>That's it. Now you can use the HTC as an extension of the element to which 
it is attached. Hence, if the HTC exposes methods, properties, or events (or all 
three), you can access them as if they were methods, properties, and events of the 
element to which the Behavior is attached.</p>

<P>
For example, the DHTML Ledger Behavior (discussed in detail in the next 
section) exposes a method called <I>hide</I> that hides the ledger. By using the ID of the 
&lt;DIV&gt; tag to which the Behavior is attached, you can call 
<I>hide </I>as you would any other method of the &lt;DIV&gt; tag. (Note that 
<I>sheet1</I> is the ID of a &lt;DIV&gt; tag in the 
DHTML Ledger Behavior sample.)
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
sheet1.hide();   // JScript
sheet1.hide      ' VBScript
</PRE>
</td></tr></table></p>


<P>Handling events is just as easy. For example, the DHTML Ledger Behavior 
has an <I>onhide</I> event that is fired whenever the window is hidden. You handle this 
event as you would any other DHTML event. Here's the VBScript code for 
<I>onhide</I>'s event handler:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
   Sub sheet1_onhide
      MsgBox &quot;The ledger was hidden.&quot;
   End Sub
&lt;/SCRIPT&gt;
</PRE>
</td></tr></table></p>

<P>Remember that the object associated with <I>onhide </I>is the object to which the Behavior is attached. Because the DHTML Ledger Behavior is attached to the &lt;DIV&gt; tag (as in the preceding code), the <I>onhide </I>event is fired on behalf of the &lt;DIV&gt; tag.</p>

<A NAME="262"><H2>Creating Behaviors in Script by Using HTCs</H2></A>

<P>What fun would Behaviors be if you couldn't create your own? If you could use 
only the default Behaviors that Internet Explorer installs, you could do a lot, but 
your accomplishments would ultimately be limited. The easiest way to create 
Behaviors for Internet Explorer 5 is by using DHTML and script as HTCs.
</P>

<P>
To develop an HTC, you must first create a file that has the .htc extension. 
Next you must insert the basic skeleton HTML that indicates that the .htc file is an 
HTML Component. This HTML consists of the &lt;COMPONENT&gt; tag and the &lt;SCRIPT&gt; 
tag. (The &lt;COMPONENT&gt; tag is optional, but I recommend that you use it to specify 
that this file is an HTML Component.) The following is the base HTML that you need 
for your HTC:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;PUBLIC:COMPONENT&gt;
   &lt;SCRIPT&gt;
   &lt;/SCRIPT&gt;
&lt;/PUBLIC:COMPONENT&gt;
</PRE>
</td></tr></table></p>


<P>After defining the base HTML for your HTC, you can then define and 
implement your methods, properties, and events by using the correct HTML tags. You 
enter the script to implement these methods, properties, and events within the 
<I>script </I>block, as you'll see next.</p>

<A NAME="263"><H3>Exposing methods from an HTC</H3></A>

<P>To implement a method in an HTC, you use the &lt;METHOD&gt; tag. Let's look at 
the Ledger Behavior example. (Actually we have already seen parts of this 
example application.) The DHTML Ledger from <A HREF="ch03a.htm">Chapter 3</A> has been converted to a 
Behavior implemented as an HTC and included on the companion CD in the 
folder \Samples\Chap11\Ledger Behavior. (See Figure 11-3.)
</P>

<P>
<A HREF="javascript:fullSize('F11ii03x.htm')"> <img src="images/F11ii03.JPG" width=404 height=305 border=0 ALT = "Click to view at full size."> </A>
</P><P>
<!-- caption --><B>Figure 11-3.</B> <i>DHTML Ledger Behavior.</i><!-- /caption -->
</p>
<P>
This example includes an HTC named ledger.htc. One of the methods this 
HTC exposes is named <I>show</I>. As you might have guessed, the 
<I>show </I>method displays the ledger, and a method named 
<I>hide </I>hides the ledger. These methods are defined 
by using the &lt;METHOD&gt; tag, as shown in the following code:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;PUBLIC:METHOD  NAME = &quot;show&quot; /&gt;
&lt;PUBLIC:METHOD  NAME = &quot;hide&quot; /&gt;
</PRE>
</td></tr></table></p>


<P>The HTML defines the <I>show</I> and <I>hide</I> methods by using the NAME attribute of the &lt;METHOD&gt; tag. The NAME attribute specifies the name by which the method is referred to in the document that contains this HTC. The &lt;METHOD&gt; tag also has two optional attributes: INTERNALNAME and ID. The INTERNALNAME attribute specifies the name by which this method is referred to in the component, so you can specify different names for the method depending on how it is being called: externally by the containing document, or internally by the HTC.
</P>

<P>
If the INTERNALNAME attribute is omitted, the value of the NAME attribute 
is used to refer to the method internally as well as externally. The ID attribute 
identifies the &lt;METHOD&gt; tag within the component. By using this ID, you can access 
an HTC method from script as an object.
</P>

<P>
After using the &lt;METHOD&gt; tag to define the methods of the HTC, you 
must implement the methods to make them work. Implementing the methods in an 
HTC is the same as implementing them on a normal Web page. The following JScript 
code implements the<I> show </I>and <I>hide</I> methods in the DHTML Ledger Behavior example. 
(The <I>show</I> and <I>hide</I> methods call internal functions that show and hide the HTC. 
You'll see the implementation of these functions shortly.)
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>function show()
{
   window_open();
}

function hide()
{
   window_close();
}
</PRE>
</td></tr></table></p>


<P>After defining and implementing the methods, you can access them as if 
they were methods of the object to which this HTC is attached. For instance, to hide 
the ledger, you just call the <I>hide</I> method by using the name of the object to which 
the HTC is attached (<I>sheet1</I>), like this in JScript:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>sheet1.hide();
</PRE>
</td></tr></table></p>

<A NAME="264"><H3>Exposing properties from an HTC</H3></A>

<P>Adding properties to an HTC is just as easy as adding methods. To add a property 
to an HTC that can be accessed from the containing Web page, you use the 
&lt;PROPERTY&gt; tag. In addition to having the NAME, ID, and INTERNALNAME attributes 
that the &lt;METHOD&gt; tag has, the &lt;PROPERTY&gt; tag has the optional attributes shown 
in Table 11-4.</p>
 
<p><b>Table 11-4.</b> <i>Optional Attributes of the &lt;PROPERTY&gt; Tag</i></p>
 
<table cellpadding=5 width="95%">
<tr><th valign="top"><i>Attribute</i></th><th valign="top"><i>Description</i></th></tr>
<tr><td valign="top">GET</td>     
<td valign="top">The value of this attribute specifies the function to be called 
whenever the value of the defined property is retrieved. If you specify 
a GET attribute without specifying a PUT attribute, this property 
is read-only.</td></tr>
<tr><td valign="top">PERSIST</td><td valign="top">The value of this attribute specifies whether the defined property should be persisted as part of a particular page. This is a Boolean value.</td></tr>
<tr><td valign="top">PUT</td>     
<td valign="top">The value of this attribute specifies the function to be called 
whenever the value of the defined property is set. If you specify a 
PUT attribute without specifying a GET attribute, this property is 
write-only. Also, you should call the <I>fireChange 
</I>method associated with the &lt;PROPERTY&gt; tag so that you can notify the containing 
document that the property has changed.</td></tr>
<tr><td valign="top">VALUE</td>    
<td valign="top">The value of this attribute specifies the default value for the 
defined property.</td></tr>
</table>

<P>
The DHTML Ledger Behavior example defines several properties, one of which is <I>title</I>. The <I>title</I> property corresponds to the title that is listed in the ledger's title bar. Check out this definition for the <I>title </I>property in ledger.htc:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;PUBLIC:PROPERTY NAME = &quot;title&quot;      PUT = &quot;put_title&quot; 
                 GET  = &quot;get_title&quot;  ID  = &quot;Title1&quot; /&gt;
</PRE>
</td></tr></table>
</p>


<P>In the definition of the <I>title </I>property, the NAME attribute specifies the name 
that the containing document uses to access the property. This name is used whether 
you are setting or retrieving this property. For example, to set the value of the 
<I>title </I>property in the document containing the Ledger Behavior, you can use this JScript code:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
sheet1.title = &quot;This is a new title.&quot;;
</PRE>
</td></tr></table></p>

<P>To retrieve the value of the <I>title </I>property, you can use this JScript code:</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
var strTitle = sheet1.title;
</PRE>
</td></tr></table></p>


<P>The PUT and GET attributes specify the names of the methods that will be called when you set or retrieve the value of the <I>title </I>property from the containing document. These methods are automatically called for you. (Internet Explorer will display an error message if you try to call them yourself because these function names are internal to the HTC.)
</P>

<P>In addition to specifying the PUT and GET attributes, you can also specify the ID attribute. Specifying the ID attribute enables the HTC to access the &lt;PROPERTY&gt; tag directly and call this tag's <I>fireChange</I> method when the value of the 
defined property is changed.</P>

<P>
Next you have to implement the methods specified by the PUT and GET 
attributes. Otherwise, not much will happen, and you'll receive an error when 
trying to access the <I>title </I>property. Implementing these methods is as easy as 
implementing any other method in script, as you can see from this implementation of the 
<I>put_title </I>and <I>get_title</I> methods in the Ledger Behavior example:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
function put_title(strTitle)
{
   window.document.all(uniqueID + &quot;_title&quot;).innerHTML = strTitle;
   window.document.all(uniqueID + &quot;_min_title&quot;).innerHTML = strTitle;

   Title1.fireChange();
}

function get_title()
{
   return window.document.all(uniqueID + &quot;_title&quot;).innerHTML;
}
</PRE>
</td></tr></table></p>


<P>In the <I>put_title </I>method, the title of the ledger is changed, and the 
<I>title </I>property's <I>fireChange</I> method is called by using the property's 
ID&#8212;<I>Title1</I>. Calling <I>fireChange</I> alerts the containing document of the property change. When you call the 
<I>fireChange </I>method, the element to which this Behavior is attached fires the 
<I>onpropertychange</I> event. When the element fires 
<I>onpropertychange</I>, it sets the <I>propertyName 
</I>of the <I>event </I>object to the name of the property, which is 
<I>title</I> in this case.</p>

<A NAME="265"><H3>Firing events from an HTC</H3></A>

<P>An HTML Component can fire events as well as expose methods and properties. 
When an HTC fires an event, the event appears to the containing document as having 
been fired by the element to which the HTC is attached. Let's see how an HTC fires 
events in the DHTML Ledger Behavior example. This example contains the 
<I>onshow</I> and <I>onhide </I>events, which are fired when the 
<I>show </I>and <I>hide </I>methods are called. 
These events are defined by using the &lt;EVENT&gt; tag, like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;PUBLIC:EVENT  NAME=&quot;onshow&quot;  ID=&quot;evt_onshow&quot; /&gt;
&lt;PUBLIC:EVENT  NAME=&quot;onhide&quot;  ID=&quot;evt_onhide&quot; /&gt;
</PRE>
</td></tr></table></p>

<P>The &lt;EVENT&gt; tag has only two attributes: NAME and ID. The NAME 
attribute specifies the name of the event as it appears to the containing document. This 
name is used when handling the event. For example, to handle the events specified by 
the NAME attribute, which are <I>onshow</I> and 
<I>onhide</I> in this case, you can add two inline event handlers to the &lt;DIV&gt; tag to which the Ledger Behavior is attached.
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;DIV ID=sheet1 STYLE=&quot;behavior:url(ledger.htc)&quot; state=minimized
   onshow=&quot;alert('The ledger was shown.')&quot;
   onhide=&quot;alert('The ledger was hidden.')&quot;&gt;
&lt;/DIV&gt;
</PRE>
</td></tr></table></p>

<P>When handling HTC events, you must use either inline event handlers, as 
shown in the preceding code, or the &lt;SCRIPT FOR=&quot;...&quot; EVENT=&quot;...;&quot;&gt; syntax.
</P>

<P>
The events that the HTC fires appear to be fired by the element itself, but 
in an HTC, the <I>fire</I> method actually fires the events. The 
<I>fire</I> method is a member of the <I>event 
</I>object that is created when you specify the &lt;EVENT&gt; tag. You can 
reference this object by using the value that you specify for the ID attribute.
</P>

<P>
When the window is shown or hidden in the DHTML Ledger HTC, two 
private methods are called: <I>window_open</I> and 
<I>window_close</I>. When these methods are 
called, the window is either shown or hidden. In the 
<I>window_open</I> method, the <I>onshow </I>event is fired; in the 
<I>window_close </I>method, the <I>onhide </I>event is fired. Here's the code 
for these two methods that shows you how to fire the 
<I>onshow</I> and <I>onhide </I>events:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
function window_open()
{
   // Fire the onshow event.
   var myEvent = createEventObject();
   evt_onshow.fire(myEvent);
   
   style.display = &quot;&quot;;
}

function window_close()
{
   // Fire the onhide event.
   var myEvent = createEventObject();
   evt_onhide.fire(myEvent);
    
   style.display = &quot;none&quot;;
}
</PRE>
</td></tr></table></p>

<P>This code shows that the name of the <I>onshow 
</I>event object is <I>evt_onshow</I>,<I> </I>and the name of the 
<I>onhide </I>event object is <I>evt_onhide</I>. In either case, you use the 
<I>fire </I>method to fire the corresponding event.</p>

<P>When you call the <I>fire </I>method, you can optionally send an 
<I>event </I>object with the event to provide specific information about the event&#8212;for example, the 
<I>x</I>-coordinate and the <I>y</I>-coordinate of the mouse pointer. To create an 
<I>event </I>object, you use the 
<I>createEventObject</I> method, which simply returns a new 
<I>event </I>object. You can set the different properties of the 
<I>event </I>object, and then send the object along with 
the event you are firing. (If you're having trouble remembering the 
<I>event </I>object, reread the section in Chapter 3, &quot; <a href="ch03c.htm#94"><i>event</i> Object</a>&quot;.)</p>

<A NAME="266"><H2>Accessing the Containing Document's DHTML Object Model</H2></A>

<P>An HTC can access the DHTML Object Model of the document in which the HTC 
is being used. Through the wonders of DHTML, the HTC can access all the 
methods and properties of all the objects in the document. Consequently, the HTC can 
handle events that are fired by the objects in the document.</p>
<P>
Because the HTC appears to the document as though it were part of the 
element to which the HTC is attached, your HTC has access to the 
<I>window </I>object of the containing document. This means that you can obtain the 
<I>document </I>object and, from there, any other object on the page. For example, if you want to insert 
some HTML into the body of the containing document from an HTC, you can call 
the <I>insertAdjacentHTML </I>method like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
window.document.body.insertAdjacentHTML(&quot;BeforeEnd&quot;, &quot;SomeTextOrHTML&quot;);
</PRE>
</td></tr></table></p>


<P>Being able to access the <I>document </I>object means that you can apply what 
you learned about DHTML in <A HREF="ch03a.htm">Chapter 3</A> to Web pages that contain HTCs. Internet 
Explorer also gives you quick and easy access to the HTML element to which the HTC is 
attached through the new <I>element </I>object. By using this 
<I>element </I>object, you can call any of the methods and properties of the containing element.</p>

<P>For instance, the DHTML Ledger Behavior example employs a little 
chicanery. To pass the initial state of the ledger to the HTC (minimized or maximized), 
this example uses the STATE attribute of the &lt;DIV&gt; tag, as shown here:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
   &lt;DIV ID=sheet1 STYLE=&quot;behavior:url(ledger.htc)&quot; state=minimized&gt;
   &lt;/DIV&gt;
</PRE>
</td></tr></table></p>


<P>&quot;Wait a minute!&quot; you say. &quot;No STATE attribute exists for the &lt;DIV&gt; tag!&quot; 
That's right. Remember that any attribute that Internet Explorer doesn't recognize will 
be ignored. However, you can obtain the value of the STATE attribute from the 
HTC attached to the &lt;DIV&gt; tag by using the 
<I>element </I>object. In the DHTML Ledger HTC, the value of STATE is used to determine the initial state of the window, as the 
following code shows:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>// Show the window.
element.style.display = &quot;&quot;;
if (element.state == &quot;minimized&quot;)
{
   window_minimize();
}
</PRE>
</td></tr></table></p>


<P>In this code, the <I>element </I>object is used to obtain the 
<I>style </I>object and set its <I>display</I> property to the empty string, effectively hiding the window. Then the 
<I>element </I>object is used again to determine the initial state in which to show the window. 
If the STATE<I> </I>attribute is set to 
<I>minimized</I>, the internal <I>window_minimize 
</I>function is called. This function shows the ledger window in a minimized state.
</P>

<P>

The <I>element </I>object as used in the preceding code is optional. Remember 
that the HTC is attached to an HTML element. If you call a method or access a 
property without specifying the <I>element </I>object, Internet Explorer assumes that the method 
or the property is a member of the element to which the Behavior is attached. 
Therefore, you can also write the previous code like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>// Show the window.
style.display = &quot;&quot;;
if (state == &quot;minimized&quot;)
{
   window_minimize();
}
</PRE>
</td></tr></table></p>


<P>Accessing the methods and properties of the element to which the Behavior 
is attached without specifying the <I>element </I>object is actually slightly more 
efficient&#8212;when you specify the <I>element 
</I>object, Internet Explorer (actually, the MSHTML 
component) must make a trip out to the <I>document 
</I>object to locate the <I>element </I>object. If you 
don't specify the <I>element </I>object, this trip to the 
<I>document </I>object is unnecessary; but using the 
<I>element </I>object makes your code a little easier to read. As with most 
decisions, there's a trade-off. In this case, the trade-off is between readability and 
performance. I'll leave the decision up to you.</p>

<A NAME="267"><H3>Attaching to the containing document's events from an HTC</H3></A>

<P>As mentioned, an HTC can attach event handlers to events in the document in 
which the HTC is being used. You can attach event handlers to elements in the 
document in two ways. The first way is by using the &lt;ATTACH&gt; tag. The &lt;ATTACH&gt; tag allows you to attach event handlers for any event of the element to which the Behavior 
is attached, or to the parent document or parent window of the element.</p>
<P>
Using the &lt;ATTACH&gt; tag is quite simple. For example, the DHTML 
Ledger example attaches two event handlers by using the &lt;ATTACH&gt; tag: the 
<I>onmousemove</I> event of the document and the 
<I>onload</I> event of the window. The event handlers 
are attached to these events by using the following HTML:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
&lt;PUBLIC:ATTACH EVENT=&quot;onmousemove&quot; FOR=&quot;document&quot; ONEVENT=drag()   /&gt;
&lt;PUBLIC:ATTACH EVENT=&quot;onload&quot; FOR=&quot;window&quot; ONEVENT=create_window() /&gt;
</PRE>
</td></tr></table></p>

<P>The &lt;ATTACH&gt; tag has four attributes, three of which are used in the 
preceding code. The first attribute is EVENT, and it is required because it specifies the 
name of the event you want to handle.</p>

<P>The second attribute, FOR, specifies the object to which you want to attach 
the event handler. The value of FOR can be 
<I>document</I>, <I>element</I>, or <I>window</I>. FOR 
is optional, and if you don't specify it, the event handler will be attached to the 
element to which the Behavior is attached.</p>

<p>The third attribute is ONEVENT. It is used to specify the inline script or 
function to be executed when the specified event is fired. In the previous HTML 
code, the <I>drag </I>function is called when the 
<I>onmousemove</I> event is fired (allowing you to reposition the window), and the 
<I>create_window</I> method is called when the 
<I>onload </I>event is fired.</p>

<p>The final attribute is ID. It has the same meaning as the ID attribute in 
other tags you've seen.</p>

<p>When an event fires on the element, document, or window to which 
you've attached an event handler in the HTC, the event handler that is specified in the 
containing document is called first. If multiple Behaviors are attached to an element 
and multiple event handlers for the same event have been attached to the element, 
these event handlers will be called in random order after the event handler specified in 
the containing document is called.</p>

<p>The other way to attach an event handler to an element is by using 
the <I>attachEvent</I> method. One advantage of using 
<I>attachEvent</I> over the &lt;ATTACH&gt; tag is that you can attach event handlers to many more objects&#8212;in fact, to just about 
any object in the DHTML Object Model.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
For a full list of objects that support the 
<I>attachEvent </I>method, refer to the documentation for the 
<I>attachEvent </I>method in the MSDN Online Web 
Workshop.
</blockquote></div></p>


<P>The <I>attachEvent </I>method is easy to use. You simply call it off the object 
to which you want to attach an event handler. You pass the name of the event 
you want to handle as the first parameter and a reference to the event handler 
function as the second parameter. As an example, look at the following code from 
the DHTML Ledger example, which uses the <I>attachEvent 
</I>method to attach the event handlers 
<I>parse_click</I> and <I>release_mouse </I>to two events. Specifically, the code 
attaches the <I>parse_click </I>function to the 
<I>onmousedown </I>event for the element to which the 
Behavior is attached, and the <I>release_mouse</I> function is attached to the 
<I>onmouseup</I> event of the document.
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
attachEvent(&quot;onmousedown&quot;, parse_click);
window.document.attachEvent(&quot;onmouseup&quot;, release_mouse);
</PRE>
</td></tr></table></p>


<P>If you want to detach event handlers, you can use the 
<I>detachEvent</I> method. For example, to detach the 
<I>parse_click </I>and <I>release_mouse </I>event handlers that 
were attached by using the <I>attachEvent </I>method, you would call 
<I>detachEvent </I>like this:
</P>

<P>
<table cellpadding=5 width="95%"><TR><TD>
<PRE>
detachEvent(&quot;onmousedown&quot;, parse_click);
window.document.detachEvent(&quot;onmouseup&quot;, release_mouse);
</PRE>
</td></tr></table></p>

<A NAME="268"><H2>HTC Disadvantages</H2></A>

<P>Although Behaviors are easy to implement as HTCs, using HTCs to create 
Behaviors has a few disadvantages. First, because your HTC is written in DHTML and 
script, users can view and reuse your source code. If you're planning to market your 
HTC, and someone downloads and reuses your source code for free, the hours of hard 
work you spent creating your Behavior are basically given away for free. If you're 
creating Behaviors for use on your corporate intranet, however, you probably don't 
have to worry about this issue.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
To solve the problem of users copying your script, you could encode 
it. Encoding is a little complicated, and it's outside the scope of this book.  For 
more information about script encoding, visit the Microsoft Scripting Technologies 
Web site: <I><A HREF="http://msdn.microsoft.com/scripting" TARGET="_window2">http://msdn.microsoft.com/scripting</A></I>.
</blockquote></div></p>

<P>Another drawback to HTCs is that because they are integrated into a 
document, the security restrictions that normally apply to an HTML document also apply to 
HTCs. Hence, HTCs can't implement script that accesses resources on another domain 
or system, such as the file system of the local machine.</p>

</BODY>
</HTML>






