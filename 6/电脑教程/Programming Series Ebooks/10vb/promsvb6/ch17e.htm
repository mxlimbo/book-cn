<HTML>
<HEAD>
<TITLE>ActiveX Controls for the Internet</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch17d.htm", "ch18a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="872"><h1>ActiveX Controls for the Internet</h1></A>
<p>Many programmers believe that the Internet is the natural habitat for ActiveX 
controls, so you might have been surprised that I haven't described Internet-specific 
features until the end of the chapter. The plain truth is that, Microsoft's plans 
notwithstanding, Microsoft Internet Explorer still is, as I write these pages, the only popular 
browser that natively supports ActiveX controls, at least without any plug-in modules. So 
if you heavily use ActiveX controls in HTML pages, you automatically reduce the 
number of potential users of your Web site. You see, ActiveX controls probably aren't 
very useful for the Internet, even though they might find their way into intranets, 
where administrators can be sure about which browser is installed on all client 
machines. As far as the Internet is concerned, however, Dynamic HTML and Active Server 
Pages seem to offer a better solution for building dynamic and &quot;smart&quot; pages, as I 
explain in the section devoted to Internet programming.
</p>

<A NAME="873"><h2>Programming Issues</h2></A>
<p>In general, ActiveX controls in HTML pages can exploit the additional features 
provided by the browser in which they're running. In this section, I briefly describe 
the new methods and events that such controls can use. But first of all, you need 
to understand how an ActiveX control is actually placed in an HTML page.
</p>

<A NAME="874"><h3>ActiveX controls on HTML pages</h3></A>
<p>You can place a control in a page using a number of HTML Page editors. For 
example, following is the code that Microsoft FrontPage produces for an HTML page that 
includes my ClockOCX.ocx control, whose source code is available on the 
companion CD. Notice that the control is referenced through its CLSID, not its more 
readable ProgID name. (The HTML code that refers to the ActiveX control is in boldface.)
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Home page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FFFFFF&quot;&gt;
&lt;H1&gt;A web page with an ActiveX Control on it.&lt;/H1&gt;
<B>&lt;OBJECT CLASSID=&quot;clsid:27E428E0-9145-11D2-BAC5-0080C8F21830&quot;
    BORDER=&quot;0&quot; WIDTH=&quot;344&quot; HEIGHT=&quot;127&quot;&gt;
    &lt;PARAM NAME=&quot;FontName&quot; VALUE=&quot;Arial&quot;&gt;
    &lt;PARAM NAME=&quot;FontSize&quot; VALUE=&quot;24&quot;&gt;
&lt;/OBJECT&gt;</B>
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</td></tr>
</table>
</p>

<p>As you can see, all the information concerning the control is enclosed by 
the &lt;OBJECT&gt; and &lt;/OBJECT&gt; tags, and all initial properties values are provided 
in &lt;PARAM&gt; tags. These values are made available to the control in its 
<I>ReadProperties </I>event procedure. (If there are no &lt;PARAM&gt; tags, the control could receive 
an <I>InitProperties </I>event instead, but the exact behavior depends on the browser.) 
ActiveX controls intended to be used on Web pages should always expose 
<I>Font</I>xxxx properties instead of, or together with, the 
<I>Font </I>object property because assigning 
object properties in an HTML page isn't simple.
</p>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>When you're using an ActiveX control on a Web site, many things can 
go wrong&#8212;for example, references to Extender properties that aren't available 
under the browser. Visual Basic 6 offers a couple of ways to reduce the guesswork 
when it's time to fix these errors. The first option is to start the component from within 
the IDE and wait until the browser creates an instance of the control. The second 
option is to have Visual Basic create an empty HTML page with just the ActiveX 
control on it and automatically load it into the browser. You can select these options in 
the Debugging tab of the Project Properties dialog box, as shown in Figure 17-18.
</p>

<p>
<img src="images/F17ph18x.gif" width=418 height=377 border=0>
</p><p>
<!--caption--><B>Figure 17-18.</B> <i>The Debugging tab of the Project Properties dialog box.</i><!--/caption-->
</p>

<A NAME="875"><h3>Hyperlinking</h3></A>
<p>The UserControl object exposes the <I>Hyperlink 
</I>property, which returns a Hyperlink object that you can use to navigate to other HTML pages. The Hyperlink object 
exposes three methods, the most important of which is the 
<I>NavigateTo</I> method:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Hyperlink.NavigateTo Target, [Location], [FrameName]
</pre>
</td></tr>
</table>
</p>

<p><I>Target </I>is the URL to which you navigate, 
<I>Location </I>is an optional argument that points to a specific location in an HTML page, and 
<I>FrameName </I>is the optional name of a frame in a page. If the ActiveX control is running inside a browser, the new 
page is shown within the browser itself; if the control isn't running in a browser, the 
default browser is automatically launched.
</p>

<p>The Hyperlink object exposes two more methods, 
<I>GoBack </I>and <I>GoForward</I>, which let you navigate the browser's history list. Unless you're absolutely sure 
that the history list isn't empty, you should always protect these methods with an 
<I>On Error </I>statement:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdBack_Click()
    On Error Resume Next
    Hyperlink.GoBack
    If Err Then MsgBox &quot;History is empty!&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>You can navigate many kinds of documents, not just HTML pages. 
For example, Internet Explorer can display Microsoft Word and Microsoft Excel 
files, so you can use it as a document browser, as the following code demonstrates:

<p>
<table><tr><td>
<pre>Hyperlink.NavigateTo &quot;C:\Documents\Notes.Doc&quot;
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="876"><h3>Asynchronous download</h3></A>
<p>ActiveX controls authored in Visual Basic support asynchronous downloading 
of properties. Let's say that you have a PictureBox-like ActiveX control that can read 
its contents from a GIF or BMP file. Instead of waiting for the image to be 
completely downloaded, you'll do better to start an asynchronous download operation and 
immediately return the control to the user. The key to asynchronous downloading 
is the <I>AsyncRead </I>method of the UserControl object, whose syntax is this:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>AsyncRead Target, AsyncType, [PropertyName], [AsyncReadOptions]
</pre>
</td></tr>
</table>
</p>

<p><I>Target </I>is the URL of the property to be downloaded. 
<I>AsyncType </I>is the type of the property and can be one of the following values: 0-vbAsyncTypePicture (an 
image that can be assigned to a <I>Picture </I>property), 1-vbAsyncTypeFile (a file created by 
Visual Basic), or 2-vbAsyncTypeByteArray (a Byte array). 
<I>PropertyName </I>is the name of the property whose value is being downloaded and is useful when there are many 
properties that can be downloaded asynchronously. But keep in mind that there can 
be only one <I>AsyncRead </I>operation active at one time.
</p>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The <I>AsyncRead </I>method supports a new 
<I>AsyncReadOptions</I> argument, a bit-fielded integer that accepts the values listed in Table 17-1. Using this values you 
can fine-tune the performance of your asynchronous download operation and 
decide whether the control can use the data in the local 
cache.
</p>
<p>
<B>Table 17-1.</B> <i>The available values for the AsyncReadOptions 
argument of the AsyncRead method.</i>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>AsyncRead Behavior</i></th>
</tr>

<tr>
<td valign="top">vbAsyncReadSynchronousDownload</td>
<td valign="top">1</td>
<td valign="top">Returns only when the down load is complete (synchronous download).</td>
</tr>

<tr>
<td valign="top">vbAsyncReadOfflineOperation</td>
<td valign="top">8</td>
<td valign="top">Uses only the locally cached resource.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadForceUpdate</td>
<td valign="top">16</td>
<td valign="top">Forces the download from the  remote Web server, ignoring any copy in the local cache.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadResynchronize</td>
<td valign="top">512</td>
<td valign="top">Updates the copy in the local cache only if the version on the remote Web server is more recent.</td>
</tr>

<tr>
<td valign="top">vbAsyncReadGetFromCacheIfNetFail</td>
<td valign="top">&amp;H80000</td>
<td valign="top">Uses the copy in the local cache if the connection to the remote Web server fails.</td>
</tr>
</table>
</p>


<p>On the companion CD, you'll find the complete source code of 
a ScrollablePictureBox ActiveX control, which supports scrolling of large images as well as 
their asynchronous downloading from the Internet. (See Figure 17-19.) The 
asynchronous download feature is provided in the form of a 
<I>PicturePath </I>property that, when assigned, starts the downloading process:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let PicturePath(ByVal New_PicturePath As String)
    m_PicturePath = New_PicturePath
    PropertyChanged &quot;PicturePath&quot;
    If Len(m_PicturePath) Then
        AsyncRead m_PicturePath, vbAsyncTypePicture, &quot;Picture&quot;
    End If
End Property
</pre>
</td></tr>
</table>
</p>

<p>You can cancel an asynchronous download operation at any moment using 
the <I>CancelAsyncRead </I>method:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>CancelAsyncRead &quot;Picture&quot;
</pre>
</td></tr>
</table>
</p>

<p>
<A HREF="javascript:fullSize('F17ph19x.htm')"> <img src="images/F17ph19.JPG" width=404 height=289 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-19.</B> <i>The ScrollablePictureBox control running inside Internet Explorer.</i><!--/caption-->
</p>

<p>When the asynchronous download terminates, Visual Basic fires an 
<I>Async</I><I>ReadComplete </I>event in the UserControl module. This event receives an AsyncProperty 
object, whose most important properties are <I>PropertyName 
</I>and <I>Value</I>:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AsyncReadComplete(AsyncProp As AsyncProperty)
    If AsyncProp.PropertyName = &quot;Picture&quot; Then
        Set Image1.Picture = AsyncProp.Value
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The AsyncProperty object has been greatly enhanced in Visual Basic 6 and 
now includes properties such as <I>BytesMax</I>, 
<I>ByteRead</I>, <I>Status</I>, and 
<I>StatusCode</I>. For additional information, see the language documentation. Visual Basic 6 also exposes 
the <I>AsyncReadProgress </I>event, which fires when new data is available locally. You 
can use this event to display a progress bar that informs the user about the status of 
the operation:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_AsyncReadProgress(AsyncProp As AsyncProperty)
    If AsyncProp.PropertyName = &quot;Picture&quot; Then
        Dim percent As Integer
        If AsyncProp.BytesMax &gt; 0 Then
            percent = (AsyncProp.BytesRead * 100&amp;) \ AsyncProp.BytesMax
        End If
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>AsyncReadProgress </I>and <I>AsyncReadComplete 
</I>events fire immediately if the data is stored on a local disk (in this case, 
<I>PicturePath </I>is the path of a file) or if it 
is in the local cache. If you aren't downloading an image (therefore, 
<I>AsyncProp.AsyncType </I>is 1-vbAsyncTypeFile or 2-vbAsyncTypeByteArray), you can read and process the 
data while it's being downloaded. This arrangement slows the process slightly, but 
usually the overhead isn't noticeable. If you open a file, you must close it before 
exiting the event procedure, and you must avoid calling 
<I>DoEvents</I> to avoid reentrancy problems. The 
<I>AsyncReadProgress </I>and 
<I>AsyncReadComplete</I> events occur when the 
download is complete: You can learn when this happens in the 
<I>AsyncReadProgress </I>event by checking that the 
<I>AsyncProp.StatusCode </I>property returns the 
value 6vbAsyncStatusCodeEndDownloadData.
</p>

<A NAME="877"><h3>Accessing the browser</h3></A>

<p>A control on an HTML page can do more than simply modify its appearance 
and behavior: It can manipulate the attributes of the page itself and of the other 
controls on it. You can access the container page using the Parent object, as this code does:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Changing the HTML page's foreground and background colors
With Parent.Script.document
    .bgColor = &quot;Blue&quot;
    .fgColor = &quot;White&quot;
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also access and manipulate all the controls on the page using 
the ParentControls collection. But this method requires that you set 
the <I>ParentControlsType </I>property of ParentControls collection to the value vbNoExtender. This setting is 
necessary because Internet Explorer exposes an Extender object that can't be used 
from Visual Basic code.
</p>

<p>I don't have enough room to describe all the things that you can do once 
you have a reference to the page that contains the ActiveX control. If you're 
interested, you should look for additional information on the Internet Explorer Scripting 
Object Model on the Microsoft Web site.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>If you're writing a control that can be used on both regular forms and 
HTML pages, you need to know which container it's running in. You can do this by 
looking at the object returned by the Parent object:

<p>
<table><tr><td>
<pre>' Test if the control runs in an HTML page.
If TypeName(Parent) = &quot;HTMLDocument&quot; Then ...
</pre>
</td></tr>
</table>
</p>
</blockquote></div>
</p>

<A NAME="878"><h3><I>Show</I> and <I>Hide</I> events</h3></A>
<p>The <I>Show </I>event fires in the UserControl module when the page that contains it 
becomes visible, while the <I>Hide </I>event fires when the page becomes invisible but is 
still in the cache. Eventually, the page might become visible again, thus firing 
another <I>Show</I> event, or the browser might remove the page from the cache (for example, 
when the browser itself is closed), in which case the control receives a 
<I>Terminate </I>event.
</p>

<A NAME="879"><h3>Multithreaded ActiveX controls</h3></A>

<p>If you're going to use the ActiveX control with Microsoft Explorer or a 
multithreaded Visual Basic application, you should make the control apartment-threaded by 
selecting the corresponding Threading Model option in the General tab of the Project 
Properties dialog box. Beware, however, of a documented bug: Multithreaded controls don't 
fire the <I>Hide</I> event when they run under Internet Explorer 4.0. For an ActiveX control 
to behave correctly, you must mark it as single-threaded and enable the Active 
Desktop option. For more information, see article Q175907 of the Microsoft Knowledge Base.
</p>

<A NAME="880"><h2>Component Download</h2></A>
<p>When you're creating an HTML page that contains one or more ActiveX controls, 
you must provide a way for the browser to download and install the ActiveX control if 
it isn't already registered on the client machine.
</p>

<A NAME="881"><h3>Creating a package for deployment</h3></A>
<p>The mechanism used for deploying the ActiveX controls on client machines is 
based on Cabinet<I> </I>(CAB) files. CAB files are compressed files that can include 
multiple ActiveX controls (as well as other types of files, such as EXEs and DLLs) and that 
can be digitally signed if necessary. You create CAB files by running the Package and 
Deployment Wizard and selecting Internet Package in its second step. The wizard 
also creates a sample HTM file that you can use as a model for the page that will host 
the control. This file contains the correct value for the CODEBASE attribute, which 
informs the browser of the name of the CAB file and the version of the ActiveX 
control. The browser then downloads the CAB file if the control with that CLSID isn't 
registered on the client machine or if its version is older than the one specified in the 
HTML page. This is a portion of the sample HTML file created for the ClockOCX control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT ID=&quot;Clock&quot;
CLASSID=&quot;CLSID:27E428E0-9145-11D2-BAC5-0080C8F21830&quot;
CODEBASE=&quot;ClockOCX.CAB#version=1,0,0,0&quot;&gt;
&lt;/OBJECT&gt;
</pre>
</td></tr>
</table>
</p>

<p>CAB files can embed all the ancillary files that the ActiveX control needs to 
work properly, including data files and satellite DLLs. The list of dependencies of an 
ActiveX control is described in an INF file, which is produced by the Package and 
Deployment Wizard and also included in the CAB file itself.
</p>

<p>ActiveX controls authored in Visual Basic also require the Visual Basic 
runtime files. The default option in the Package and Deployment Wizard instructs the 
installing procedure to download the runtime files from the Microsoft Web site. This setting 
ensures that the user always receives the most recent version of those files and 
also reduces the burden on your Web site.
</p>

<A NAME="882"><h3>Safety</h3></A>
<p>When an ActiveX control is running in the browser, it could do all sort of evil 
things to the user's system, such as deleting system files, trashing the Registry, or 
stealing confidential data. You must, therefore, assure users that not only are your 
controls not so rude, but also that no other developer can use your controls to damage 
the machines they're running on.
</p>

<p>To broadcast the promise that your control doesn't (and can't) misbehave, 
you can mark it as &quot;Safe for initialization&quot; or &quot;Safe for scripting.&quot; If you declare that 
your control is safe for initialization, you're telling the browser that there's no way for 
an HTML page author to accidentally or intentionally do any harm by assigning 
values to the control's properties through the &lt;PARAM&gt; tags in the &lt;OBJECT&gt; section of 
the page. If you mark your control as safe for scripting, you're going a bit further 
because you're declaring that there's no way for a script on the page to set a property or call 
a method that can damage the system. By default, Microsoft Internet Explorer refuses 
to download components that aren't marked as safe for initialization and safe for 
scripting.
</p>

<p>Marking your control as safe for initialization or safe for scripting isn't a 
decision that you should take lightly. The fact that your control doesn't purposely do 
any damage isn't enough in most cases. Just to give you an idea of the subtleties that 
you must account for, imagine these scenarios:
</p>

<UL>

<p><li> You provide a method that lets developers save data to any path. 
The control isn't safe for scripting because a malicious developer might 
use this feature to overwrite important system files.
</li></p>
<p><li> You decide the location in which a temporary file is stored, but you 
leave developers free to write any amount of data to it. Again, the control 
isn't safe for scripting because a developer might deliberately consume all 
the free space on disk and bring Windows to an abrupt crash.
</li></p>
</UL>

<p>You mark your component as safe for initialization or safe for scripting in 
the Package and Deployment Wizard, as shown in Figure 17-20.
</p>

<p><div class="tip"><blockquote>
<b>TIP</b><hr>You can quickly learn which ActiveX controls on your machine are 
safe for initialization or for scripting by using the OleView utility that comes with 
Visual Studio. This is the portion of the Registry that marks a control as safe:

<p>
<table><tr><td>
<pre>HKEY_CLASSES_ROOT
  \CLS
    \&lt;your control's CLSID&gt;
      \Implemented Categories
        \{7DD95802-9882-11CF-9FA9-00AA006C42C4}
        \{7DD95801-9882-11CF-9FA9-00AA006C42C4}
</pre>
</td></tr>
</table>
</p>

<p>The last two lines of the listing indicate safe for initialization and safe for 
scripting, respectively. Once you know how this information is recorded in the 
Registry, you can use the Regedit utility to modify these setting by adding or 
removing these keys.
</p>
</blockquote></div>
</p>


<p>
<A HREF="javascript:fullSize('F17ph20x.htm')"> <img src="images/F17ph20.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-20.</B> <i>The Package and Deployment Wizard lets you mark your controls as Safe For Initialization and Safe For Scripting.</i><!--/caption-->
</p>

<p>A more sophisticated way to address the safety problem is through 
the IObjectSafety ActiveX interface, which allows your component to 
programmatically specify which methods and properties are safe. This approach offers greater 
flexibility than just marking the component as safe. This is an advanced topic, however, and 
I won't cover it in this book.
</p>

<A NAME="883"><h3>Digital signatures</h3></A>
<p>It's obvious that marking a control to be safe isn't enough for most users. After 
all, anyone can mark a control as safe. Even if they trust your good intentions and 
your ability as a programmer, they can't be absolutely sure that the control is 
actually coming from you or that it hasn't been tampered with after you compiled it.
</p>

<p>Microsoft has solved this problem by making it possible for you to add a 
digital signature to ActiveX controls by using a public key encryption algorithm. To 
digitally sign a control, you need a private encoding key, which you obtain from a 
company that issues digital certificates&#8212;for example, VeriSign Inc. You must pay a fee to 
obtain such certificates, but they are quite affordable even for individual developers. For 
more information, pay a visit to 
<I>http://www.verisign.com</I>. Once you have obtained a 
certificate, you can sign your control&#8212;or, most likely, its CAB file&#8212;using the 
SignCode utility which is included in the ActiveX SDK. You can add a digital signature to 
EXE, DLL, and OCX files, but you need to do so only if you plan to distribute them 
without packaging them in a CAB file.
</p>

<A NAME="884"><h2>Licensing</h2></A>
<p>ActiveX controls can be sold as part of a business application to users or as 
stand-alone components to other developers. In the latter case, your customers should 
be able to use the control at design time and also redistribute it with their own 
applications. If you don't want <I>their </I>customers to be able to redistribute your control, 
you need to add a license key to your control.
</p>

<A NAME="885"><h3>The Require License Key option</h3></A>
<p>If you tick the Require License Key option on the General tab of the Project 
Properties dialog box and then compile the ActiveX control, Visual Basic generates a 
VBL (Visual Basic License) file that contains the license for the control. For example, 
this is the VBL file generated for the ClockOCX control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>REGEDIT
HKEY_CLASSES_ROOT\Licenses = Licensing: Copying the keys may be a violation
of established copyrights.
HKEY_CLASSES_ROOT\Licenses\27E428DE-9145-11D2-BAC5-0080C8F21830 = 
geierljeeeslqlkerffefeiemfmfglelketf
</pre>
</td></tr>
</table>
</p>

<p>As you see, a VBL file is nothing but a script for the Registry. When you 
create a standard installation procedure, the Wizard includes this file in the package. 
When other developers buy your control and install it on their machines, the 
installation routine uses this file to patch their Registries but won't copy the file on their 
hard disks. For this reason, when they redistribute your control as part of their 
applications, the VBL isn't included in the deployment package and their customers won't be 
able to use the control at design time (unless, of course, they buy a license from you).
</p>

<p>A control that requires a license key always looks for this key when it's 
instantiated. If the control is used in a compiled program, the license key is included 
in the executable EXE file. But if the control is used in an interpreted environment, 
no executable file can provide the key and the control has to look for it in the 
Registry. This means that to use the control on a Visual Basic form or in a Microsoft 
Office application (or another VBA-powered environment), you need the license to be 
installed in the Registry.
</p>

<p>If your control includes other ActiveX controls as constituent controls, 
you should license them for distribution as well; otherwise, your control won't 
correctly work at design time. Of all the controls included in the Visual Basic package, the 
only one that you can't redistribute is the DBGrid control. Note, however, that the 
Microsoft License Agreement specifies that you can use Microsoft controls in your 
ActiveX control only if you significantly expand their functionality. I never found 
anywhere how that &quot;significantly&quot; can be measured, though.
</p>

<A NAME="886"><h3>License keys for controls on Web pages</h3></A>
<p>The mechanism that I've just described doesn't address the particular nature of 
ActiveX controls on a Web page. In fact, it doesn't make sense to require that the user 
machine have the control's license key installed in the Registry. Nor do you want to 
send the license key with the control in a readable form in the HTML page. The 
solution to this difficulty comes in the form of a License Package File (or LPK file for 
short). You create this file by using the Lpk_Tool.Exe utility that you can find in 
the \Common\Tools\Vb\Lpk_Tool subdirectory. (See Figure 17-21.) Once you 
have created an LPK file, you reference it with a parameter to the &lt;PARAM&gt; tag, as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>&lt;PARAM NAME=&quot;LPKPath&quot; VALUE=&quot;ClockOCX.lpk&quot;&gt;
</pre>
</td></tr>
</table>
</p>

<p>This parameter tells the browser where it can download the license key of 
the ActiveX control; the license key is transferred each time the page is 
downloaded because the license keys of ActiveX controls found on HTML pages are never 
added to the client machine's Registry. The value of the 
<I>LPKPath </I>parameter can be a relative or an absolute URL, but in the latter case you might have problems when 
moving the HTM file to another location of your site. The owner of the Web site 
must have purchased a license for your ActiveX control to be able to send it in HTML 
pages. In other words, as far as the license mechanism is concerned, Web site owners 
are regarded as developers.
</p>

<p>
<A HREF="javascript:fullSize('F17ph21x.htm')"> <img src="images/F17ph21.JPG" width=404 height=193 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-21.</B> <i>The Lpt_Tool utility can create an LPK file containing the license keys of one or more ActiveX controls.</i><!--/caption-->
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
It should be made clear that the license mechanism provided by 
Visual Basic isn't bulletproof. After all, a malicious developer has only to copy the 
VBL from the installation diskette or&#8212;if that file is no longer available&#8212;retrieve 
the relevant information from the Registry and re-create the VBL file. Actually, 
the only thing you can be sure of is that the license key won't be accidentally 
included in an installation procedure. If you need a more secure system, you should 
devise an alternative method based on alternate locations of the Registry or 
custom license files loaded in system directories.
</blockquote></div>
</p>

<p>If you have carefully read <a href="ch16a.htm">Chapter 16</a> and this chapter, you might be surprised to 
see how few features Visual Basic 6 has added to those already available in Visual 
Basic 5. But you see the real potential of components and controls when you add 
ADO to the equation and begin to build data-aware classes and components. These 
new capabilities are described in the <a href="ch18a.htm">next chapter</a>.
</p>
</BODY>
</HTML>





