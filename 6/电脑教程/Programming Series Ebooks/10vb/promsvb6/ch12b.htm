<HTML>
<HEAD>
<TITLE>The MaskEdBox Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm", "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="509"><h1>The MaskEdBox Control</h1></A>

<p>The MaskEdBox control is a TextBox-like control with many additional features 
that are helpful, or even necessary, in building robust and bulletproof data entry 
procedures. This control is embedded in the MSMask32.ocx, so you have to distribute 
this file with all the applications that include one or more instances of the 
MaskEdBox control.
</p>

<A NAME="510"><h2>Setting Design-Time Properties</h2></A>

<p>All the custom properties of the MaskEdBox control can be set in the General tab 
of the custom Property Pages dialog box, as shown in Figure 12-1. The 
<I>MaxLength </I>property is the maximum number of characters accepted in the control; if the 
<I>AutoTab </I>property is True, the focus automatically advances to the following field after the 
user has typed the allotted number of characters. The 
<I>PromptChar</I> property sets the prompt character, that is, the symbol used as a placeholder for an input character. (The 
default is the underscore character.) The <I>AllowPrompt 
</I>Boolean property determines whether the prompt character is also a valid input character. (The default is 
False.) The <I>PromptInclude </I>property determines whether the 
<I>Text </I>property returns prompt characters.
</p>

<p>
<A HREF="javascript:fullSize('F12PH01x.htm')"> <img src="images/F12PH01.JPG" width=404 height=271 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-1.</B> <i>The MaskEdBox control at design time.</i><!--/caption-->
</p>

<p>The key property of the MaskEdBox control is 
<I>Mask</I>, a string that tells you which characters are allowed in each position of the control's contents. This string can 
include special characters that specify whether the required character is a digit, a 
letter, a decimal or thousand separator, or another kind of character. (See Table 
12-1 for a complete list of special characters.) For example, the following statement 
prepares a MaskEdBox control for accepting a phone number:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MaskEdBox1.Mask = &quot;(###)###-####&quot;
</pre>
</td></tr>
</table>
</p>

<p>You can specify a date and time format using the appropriate separators, 
as shown here:
</p>

<p><table cellpadding=5 width="95%"><tr><td><pre>
MaskEdBox1.Mask = &quot;##/##/##&quot;       ' A date value in mm/dd/yy format
MaskEdBox1.Mask = &quot;##:##&quot;          ' A time value in hh:mm format
</pre>
</td></tr>
</table>
</p>

<p>In this case, however, the MaskEdBox control performs only a 
character-by-character validation, and it's up to you to check that the control contains a 
valid date in the <I>Validate </I>event procedure. For this reason, it's usually preferable to 
use a DateTimePicker control for date and time entry because this control performs 
all the validation chores automatically. If the 
<I>Mask </I>property is assigned an empty string, the control behaves like a regular TextBox control.
</p>

<p><B>Table 12-1.</B> <I>Special characters in the </I>Mask<I> property of a MaskEdBox control. The actual characters accepted for decimal, thousand, date, and time separators depend on the localization settings of your system.</I>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Character</i></th>
<th><i>Description</I></th>
</tr>

<tr>
<td valign="top">#</td>
<td valign="top">Required digit.</td>
</tr>

<tr>
<td valign="top">9</td>
<td valign="top">Optional digit.</td>
</tr>

<tr>
<td valign="top">.</td>
<td valign="top">Decimal separator.</td>
</tr>

<tr>
<td valign="top">,</td>
<td valign="top">Thousand separator.</td>
</tr>

<tr>
<td valign="top">:</td>
<td valign="top">Time separator.</td>
</tr>

<tr>
<td valign="top">/</td>
<td valign="top">Date separator.</td>
</tr>

<tr>
<td valign="top">&amp;  </td>   
<td valign="top">Character placeholder. (All ANSI codes, except 
nonprintable characters, such as the tab character.)</td>
</tr>

<tr>
<td valign="top">C</td>
<td valign="top">Same as &amp;. (Ensures compatibility with Microsoft Access.)</td>
</tr>

<tr>
<td valign="top">A</td>
<td valign="top">Alphanumerical required character (a_z, A_Z, 0_9).</td>
</tr>

<tr>
<td valign="top">a</td>
<td valign="top">Alphanumerical optional character (a_z, A_Z, 0_9).</td>
</tr>

<tr>
<td valign="top">?</td>
<td valign="top">Letter placeholder (a_z, A_Z).</td>
</tr>

<tr>
<td valign="top">&gt;</td>
<td valign="top">Convert all characters that follow to uppercase.</td>
</tr>

<tr>
<td valign="top">&lt;</td>
<td valign="top">Convert all characters that follow to lowercase.</td>
</tr>

<tr>
<td valign="top">\</td>
<td valign="top">Escape symbol: the character or symbol that follows 
is treated as a literal.</td>
</tr>

<tr>
<td valign="top">(Other)</td>
<td valign="top">Any other character in the mask is treated as a literal and 
is displayed in the control as is.</td>
</tr>
</table>
</p>


<p>The <I>Format </I>property determines the appearance of the control when the 
focus leaves it. For example, you might have a date field that should be formatted 
as a long date when the user leaves the control. You can arrange this by assigning 
the <I>Format </I>property a suitable string either at design time or at run time:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MaskEdBox1.Format = &quot;mmmm dd, yyyy&quot;
</pre>
</td></tr>
</table>
</p>

<p>You can pass the <I>Format </I>property any value that you would use with the 
VBA's <I>Format </I>function, except named formats such as 
<I>scientific</I> or <I>long date</I>. You can 
also pass up to four values to format positive, negative, zero, or Null values with 
different format substrings separated by a semicolon, as in this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show two decimal digits and the thousand separator, enclose
' negative numbers within parentheses, and show &quot;Zero&quot; when &quot;0&quot;
' has been entered.
MaskEdBox1.Format = &quot;#,##0.00;(#,##0.00);Zero&quot;
</pre>
</td></tr>
</table>
</p>

<p>The fourth format substring is used when the control is bound to a 
database field that contains the Null value.
</p>

<p>The only other custom property that you can set at design time is 
<I>ClipMode</I>, which determines what happens when the user copies or cuts the contents of 
the control to the Clipboard. If this property is 0-mskIncludeLiterals, the string being 
cut or copied includes all literal characters. If the property is 1-mskExcludeLiterals, 
all literal characters are filtered out before cutting or copying the string to the 
Clipboard. This property has no effect if <I>Mask 
</I>is an empty string.
</p>

<A NAME="511"><h2>Run-Time Operations</h2></A>

<p>The MaskEdBox control is basically a supercharged TextBox control, and as such 
it supports many of the latter control's properties, methods, and events. There are a 
few differences, however, that you should take into account.
</p>

<A NAME="512"><h3>Working with the <I>Text </I>property</h3></A>

<p>The MaskEdBox control supports the <I>Text </I>property, as well as related properties 
such as <I>SelStart</I>, <I>SelLength</I>,<I> </I>and 
<I>SelText</I>. The <I>Text </I>property returns the current contents 
of the control, including all literal characters, separators, and the underscores that 
are part of the mask. To filter out such extra characters, you can use the value 
returned by the <I>ClipText </I>read-only property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Work with a date control.
MaskEdBox1.Mask = &quot;##/##/####&quot;
' Assign a date using the Text property.
MaskEdBox1.Text = &quot;12/31/1998&quot;
' Read it back with the ClipText property.
Print MaskEdBox1.ClipText          ' Displays &quot;1231998&quot;
</pre>
</td></tr>
</table>
</p>

<p>Don't forget that when you assign a value to the 
<I>Text </I>property, you're subject to the same constraints enforced when a string is entered in the control and 
that assigning an invalid string raises an error.
</p>

<p>Fortunately, to retrieve the contents of a MaskEdBox control, you don't 
have to filter out separators yourself. When the 
<I>ClipMode </I>property is True, the value returned by the 
<I>SelText </I>property doesn't include literals and separators. Even 
more interesting, if you assign a value to this property, the control behaves as if the 
string had been pasted from the Clipboard or, if you prefer, as if each character had 
been manually typed in the control. This means that you don't have to include any 
literals or separators in your assignment statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Read the contents of the control without any separator.
MaskEdBox1.ClipMode = mskExcludeLiterals
MaskEdBox1.SelStart = 0: MaskEdBox1.SelLength = 9999
MsgBox &quot;The control's value is &quot; &amp; MaskEdBox1.SelText
' Assign a new date value. (Don't worry about date separators.)
MaskEdBox1.SelText = &quot;12311998&quot;
</pre>
</td></tr>
</table>
</p>

<p>Another way to access the contents of a MaskEdBox control is through 
the <I>FormattedText </I>property, which returns the string that's displayed in the control 
when it doesn't have the input focus. If the <I>Mask 
</I>property is an empty string, this property is similar to the 
<I>Text </I>property, except that it's read-only. Note that if the 
<I>HideSelection </I>property has been set to False, the control doesn't format its contents when it 
loses the input focus; in this case, however, you can still retrieve the formatted value 
through the <I>FormattedText </I>property.
</p>

<A NAME="513"><h3>Validating user input</h3></A>

<p>The MaskEdBox control raises a <I>ValidationError 
</I>event each time the user presses an invalid key or pastes an invalid string into the control. This event receives two 
parameters: InvalidText is the value that the <I>Text 
</I>property would assume if the invalid key had been accepted, and 
<I>StartPosition </I>is the index of the first invalid 
character in this string.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub MaskEdBox1_ValidationError(InvalidText As String, _
    StartPosition As Integer)
    ' StartPosition is zero-based.
    LblStatus.Caption = &quot;'&quot; &amp; Mid$(InvalidText, StartPosition + 1, 1) _
        &amp;  &quot;' is an invalid character&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The previous code snippet has a defect, though, in that it doesn't work 
correctly if the invalid character is typed at the end of the current contents of the control. 
In that case, the <I>Mid$ </I>function returns an empty string, and there's no way to 
retrieve the invalid character. For this reason, you might prefer to display a generic 
error message that doesn't contain the actual invalid character.
</p>

<p>A shortcoming of the <I>ValidationError </I>event is that it seems impossible to 
show a message box from within it. If you try to show a message box, you're caught in 
an endless loop and the event is repeatedly invoked, until you press the Ctrl+Break 
key combination. (If you're working with a compiled application, you have to force 
its termination using Ctrl+Alt+Del.)
</p>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>Starting with Visual Basic 6, the MaskEdBox control supports the standard 
<I>Validate </I>event, so it's now considerably simpler to enforce data entry validation.
</p>

</BODY>
</HTML>





