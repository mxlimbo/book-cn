<HTML>
<HEAD>
<TITLE>Label and Frame Controls</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03b.htm", "ch03d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="77"><h1>Label and Frame Controls</h1></A>

<p>Label and Frame controls have a few features in common, so it makes sense to 
explain them together. First they're mostly &quot;decorative&quot; controls that contribute to 
the user interface but are seldom used as programmable objects. In other words, you 
often place them on the form and arrange their properties as your user interface 
needs dictate, but you rarely write code to serve their events, generally, or manipulate 
their properties at run time.</p>

<A NAME="78"><h2>Label Controls</h2></A>

<p>Most people use Label controls to provide a descriptive caption and possibly 
an associated hot key for other controls, such as TextBox, ListBox, and ComboBox, 
that don't expose the <I>Caption</I> property. In most cases, you just place a Label control 
where you need it, set its <I>Caption</I> property to a suitable string (embedding an 
ampersand character in front of the hot key you want to assign), and you're done. 
<I>Caption</I> is the default property for Label controls. Be careful to set the Label's 
<I>TabIndex</I> property so that it's 1 minus the 
<I>TabIndex</I> property of the companion control. </p>
<p>Other useful properties are <I>BorderStyle</I>(if you want the Label control to appear inside a 3D border) and 
<I>Alignment </I>(if you want to align the caption to the right 
or center it on the control). In most cases, the alignment depends on how the 
Label control relates to its companion control: for example, if the Label control is 
placed to the left of its companion field, you might want to set its 
<I>Alignment</I> property to 1-Right Justify. The value 2-Center is especially useful for stand-alone Label 
controls. (See Figure 3-3.)</p>

<p>
<img src="images/F03ph03.GIF" width=364 height=224 border="0">
<p>
<!--caption--><B>Figure 3-3.</B> <i>Different settings for the Alignment property of Label controls.</i><!--/caption-->



<P><DIV CLASS="TIP"><BLOCKQUOTE><B>TIP</B><HR>You can insert a literal &amp; character in a Label control's 
<I>Caption</I> property by doubling it. For example, to see Research &amp; Development you have to 
type <I>&amp;Research &amp;&amp; Development</I>. Note that if you have multiple but isolated &amp;s, 
the one that selects the hot key is the last one and all others are ignored. This 
tip applies to all the controls that expose a 
<I>Caption</I> property. (The &amp; has no special meaning in forms' Caption properties, however.)
</blockquote></div></P>

<p>If the caption string is a long one, you might want to set the Label's 
<I>WordWrap</I> property to True so that it will extend for multiple lines instead of being 
truncated by the right border of the control. Alternatively, you might decide to set the 
<I>AutoSize</I> property to True and let the control automatically resize itself to accommodate 
longer caption strings.</P>

<p>You sometimes need to modify the default value of a Label's 
<I>BackStyle</I> property. Label controls usually cover what's already on the form's surface (other 
lightweight controls, output from graphic methods, and so on) because their 
background is considered to be opaque. If you want to show a character string somewhere 
on the form but at the same time you don't want to obscure underlying objects, set 
the <I>BackStyle</I> property to 0-Transparent.</P>

<p>If you're using the Label control to display data read from elsewhere&#8212;for 
example, a database field or a text file&#8212;you should set its 
<I>UseMnemonics</I> property to False. In this case, &amp; characters have no special meaning to the control, and so you 
indirectly turn off the control's hot key capability. I mention this property because in 
older versions of Visual Basic, you had to manually double each &amp; character to make 
the ampersand appear in text. I don't think all developers are aware that you can 
now treat ampersands like regular characters.</P>

<p>As I said before, you don't usually write code in Label control event 
procedures. This control exposes only a subset of the events supported by other controls. 
For example, because Label controls can never get the input focus, they don't 
support <I>GotFocus</I>, <I>LostFocus</I>, or any keyboard-related events. In practice, you can take 
advantage only of their mouse events: <I>Click</I>, 
<I>DblClick</I>, <I>MouseDown</I>, 
<I>MouseMove</I>, and <I>MouseUp</I>. If you're using a Label control to display data read from a database, 
you might sometimes find it useful to write code in its 
<I>Change</I> event. A Label control doesn't expose a specific event that tells programmers when users press its hot keys.</P>

<p>You can do some interesting tricks with Label controls. For example, you 
can use them to provide rectangular hot spots for images loaded onto the form. To see 
what I mean, have a look at Figure 3-4. To create that 
context-sensitive ToolTip, I loaded the image on the form using the form's 
<I>Picture</I> property and then I placed a Label control over the Microsoft BackOffice logo, setting 
its <I>Caption</I> property to an empty string and the 
<I>BackStyle</I> property to 0-Transparent. These properties make the Label invisible, but it correctly shows its ToolTip 
when necessary. And because it still receives all mouse events, you can use its 
<I>Click</I> event to react to users' actions.</P>

<p>
<A HREF="javascript:fullSize('F03ph04x.htm')"> <img src="images/F03ph04.JPG" width=404 height=278 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-4.</B> <i>Create hot spots the easy way with invisible Label controls.</i><!--/caption-->
</p>

<A NAME="79"><h2>Frame Controls</h2></A>

<p>Frame controls are similar to Label controls in that they can serve as captions for 
those controls that don't have their own. Moreover, Frame controls can also (and often 
do) behave as containers and host other controls. In most cases, you only need to 
drop a Frame control on a form and set its 
<I>Caption</I> property. If you want to create a borderless frame, you can set its 
<I>BorderStyle</I> property to 0-None.</P>

<p>Controls that are contained in the Frame control are said to be 
<I>child controls</I>. Moving a control at design time 
<I>over </I>a Frame control&#8212;or over any other 
container, for that matter&#8212;doesn't automatically make that control a child of the Frame 
control. After you create a Frame control, you can create a child control by selecting 
the child control's icon in the Toolbox and drawing a new instance 
<I>inside </I>the Frame's border. Alternatively, to make an existing control a child of a Frame control, you 
must select the control, press Ctrl+X to cut it to the Clipboard, select the Frame 
control, and press Ctrl+V to paste the control inside the Frame. If you don't follow this 
procedure and you simply move the control over the Frame, the two controls 
remain completely independent of each other, even if the other control appears in front 
of the Frame control.</P>

<p>Frame controls, like all container controls, have two interesting features. If 
you move a Frame control, all the child controls go with it. If you make a container 
control disabled or invisible, all its child controls also become disabled or invisible. 
You can exploit these features to quickly change the state of a group of related controls.</P>

</BODY>
</HTML>





