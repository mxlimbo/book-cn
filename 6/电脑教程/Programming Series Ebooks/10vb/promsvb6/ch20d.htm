<HTML>
<HEAD>
<TITLE>ASP Components</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch20c.htm", "ch20e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="1022"><h1>ASP Components</h1></A>
<p>As you know, ASP scripts can instantiate and use ActiveX components, which can add tremendous flexibility and power to ASP scripts.</p>

<A NAME="1023"><h2>Using Components in ASP Scripts</h2></A>
<p>There are two ways to instantiate ActiveX components in ASP scripts: by using the <I>Server.CreateObject</I> method and by using an &lt;OBJECT&gt; tag with the SCOPE attribute set to <I>server</I>. The former technique is more likely to appeal to Visual Basic programmers, whereas the latter will sound more natural to HTML programmers.</p>

<p>In at least one case, however, it makes sense even for Visual Basic programmers to use an &lt;OBJECT&gt; tag—namely, to create an object reference that has application scope or session scope. Let's say that you want to create an ADO Connection object that is shared by all the scripts in the session. You can achieve this by creating the object in the <I>Session_OnStart</I> event procedure and then storing the reference in a Session variable:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Create the ADO Connection object.
    Set conn = Server.CreateObject("ADODB.Connection")
    ' Open it.
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
    ' Make it available to all ASP scripts.
    Set Session("conn") = conn
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>An ASP script can use this session-scoped Connection object, but it has to extract it from the Session object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Inside an ASP script
    Set conn = Session("conn")
    conn.BeginTrans               %&gt;
</pre></td></tr></table></p>

<p>Let's see what happens when the object is declared in Global.asa using a &lt;SCRIPT&gt; tag with a proper SCOPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT RUNAT=server SCOPE=Session ID="Conn" PROGID="ADODB.Connection"&gt;
&lt;/OBJECT&gt;
&lt;SCRIPT LANGUAGE=vbscript RUNAT=Server&gt;
Sub Session_OnStart()
    ' Open the connection (no need to create it).
    connStr = "Provider=SQLOLEDB;Data Source=MyServer;Initial Catalog=Pubs"
    conn.Open connStr, "sa", "myPwd" 
End Sub
&lt;/SCRIPT&gt;
</pre></td></tr></table></p>

<p>When an object is declared in this way, you can reference it from any session in the application just by using its name, as in the following ASP script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  conn.BeginTrans %&gt;
</pre></td></tr></table></p>

<p>Objects can be defined this way with Application scope as well as with Session scope. In both cases, they appear in the StaticObjects collection of the corresponding object.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Most components designed for ASP pages are in-process components. From time to time, however, you might need to create out-of-process components. To do so, you must manually modify the AllowOutOfProcCmpts value in the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC\ASP \Parameters Registry key from 0 (the default value) to 1.
</blockquote></div>
<P></P>

<A NAME="1024"><h2>Using Custom ASP Components</h2></A>
<p>You can use any ActiveX component from an ASP page, including those written in Visual Basic. For example, you can write a component that augments VBScript in the areas in which this script language is weak, such as file management, fast math calculations, string routines, and so on. These components can't really be classified as ASP components, however, because they don't interact with the ASP object model. What we need is a component that can read data coming from an HTML form through the Request object and write data using the Response object.</p>

<A NAME="1025"><h3>Writing ASP components in Visual Basic</h3></A>
<p>Writing an ASP component in Visual Basic is surprisingly simple—except for one detail, it's exactly like writing a standard ActiveX component. The first thing you do is start an ActiveX DLL project, set the threading model to Apartment model, and check the Unattended Execution option in the General tab of the Project Properties dialog box.</p>

<p>
<IMG border=0 height=87 src="images/new.jpg" width=102>
</p>

<p>Visual Basic 6 offers a new option for components marked for unattended execution, the Retained In Memory flag. (See Figure 20-10.) When this option is enabled, the component is held in memory until the client process terminates. This capability is especially useful when you expect that your component will often be loaded in memory and then discarded because it saves Windows the overhead of continuously loading it from disk. When the component is running inside IIS or MTS, which typically serve hundreds or even thousands of clients, this option is going to speed up the overall performance noticeably.</p>

<p>
 <IMG border=0 height=364 src="images/F20ph10x.gif" width=404>
</p><p>
<!--caption--><B>Figure 20-10.</B> <i>The suggested Project settings for a typical ASP component.</i><!--/caption-->
</p>

<p>Now you have to add a reference to the ASP type library. Two such libraries are registered in a system on which IIS has been installed: the Microsoft Active Server Pages Object Library and the Microsoft Active Server Pages 2.0 ObjectContext Class Type Library. The former library includes the five main ASP objects, and the latter includes only the definition of the ObjectContext object, which you need only when developing ASP components that must run under MTS. Both type libraries are contained in the Asp.dll file.</p>

<p>As you see, up to this point there isn't really anything special about an ASP component. The only problem left to be resolved is this: How can the component get a reference to one of the five main ASP objects? Well, the script code might pass such an object to a property or a method of the component, soon after creating it, but this technique isn't recommended and isn't even necessary if you know the little secret about writing ASP components in Visual Basic.</p>

<p>As soon as the component is created by an ASP script, IIS invokes the component's <I>OnStartPage</I> method, if the component exposes such a method. Therefore the only thing to do is to add the code for this method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This is a class-level variable.
Dim sc As ASPTypeLibrary.ScriptingContext

Sub OnStartPage(AspSC As ASPTypeLibrary.ScriptingContext)
    ' Save the reference for later.
    Set sc = AspSC
End Sub
</pre></td></tr></table></p>

<p>The ScriptingContext object passed to the <I>OnStartPage</I> method is nothing but the root object of the ASP type library. A quick trip to the object browser reveals that this object exposes five properties—<I>Application</I>, <I>Request</I>, <I>Response</I>, <I>Server</I>, and <I>Session</I>—which are just the main elements of the ASP object model. It is therefore simple to set or retrieve a Session or Application variable or send HTML text by using the <I>Response.Write</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Inside the component
Sub IncrementCounter(CounterName As String)
    sc.Application.Lock
    sc.Application(CounterName) = Application(CounterName) + 1
    sc.Application.Unlock
End Sub
</pre></td></tr></table></p>

<p>When the page that instantiated the component is about 
to be unloaded, the component receives an <i>OnEndPage</i> event, in which you close the connection and release the resources that you allocated in the <i>OnStartPage</i> event. But you'd usually use the <i>Terminate</i> event instead.</p>

<A NAME="1026"><h3>A real, useful component</h3></A>
<p>Now that you're nearing the end of this huge book about Visual Basic programming, you're ready for something more complex than an unsophisticated Hello-World-like ASP component. On the companion CD, you'll find the complete source code for the ASPSample.QueryToTable component, which accepts a connection string and a query string and automatically builds an HTML table that contains the result of the query against the specified data source. It even supports alignment and formatting on a field-by-field basis.</p>

<p>Before describing the source code, let me show you how you can use this custom component from an ASP script:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%    
Set tbl = Server.CreateObject("ASPSample.QueryToTable")
' Enter the next two lines as a single VBScript statement.
conn = "Provider=SQLOLEDB;Data Source=MyServer;" &amp;
    "Initial Catalog= Pubs;UserID=sa;Password=MyPwd"
tbl.Execute conn, "SELECT * FROM Authors WHERE State = 'CA'"
tbl.GenerateHTML
%&gt;
</pre></td></tr></table></p>

<p>It couldn't be simpler! The <I>Execute</I> method expects the connection string and the text of the SQL query, and the <I>GenerateHTML</I> method sends the generated HTML text to the page being built. You can fine-tune the format of the output table by using the component's <I>ShowRecNumbers</I> property (set it to True to display record numbers in the leftmost column) and <I>AddField</I> method, which lets you decide which fields appear in the table, the horizontal and vertical alignment attributes of the corresponding cells in the table, and the formatting of their values. The syntax of <I>AddField</I> method follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>AddField FldName, Caption, HAlign, VAlign, PrefixTag, PostfixTag
</pre></td></tr></table></p>

<p>To display a field using default options, you just need to pass the field's name:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  tbl.AddField "au_lname"
    tbl.AddField "au_fname"    %&gt;
</pre></td></tr></table></p>

<p>You can specify the caption of the column header (if it's different from the field's name) and the horizontal and vertical alignment attributes of the table cells like this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  tbl.AddField "au_lname", "Last Name", "center", "middle"
    tbl.AddField "au_fname", "First Name", "center", "middle"    %&gt;
</pre></td></tr></table></p>

<p>Finally, you can format the cells by using the <I>PrefixTag</I> and <I>PostfixTag</I> arguments, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;%  ' Display the State field using boldface characters.
    tbl.AddField "State", , "center", , "&lt;B&gt;", "&lt;/B&gt;"
    ' Display the ZIP field using boldface and italic attributes.
    tbl.AddField "ZIP", , "center", , "&lt;B&gt;&lt;I&gt;", "&lt;/I&gt;&lt;/B&gt;"       %&gt;
</pre></td></tr></table></p>

<p>The component doesn't validate the last two arguments; you must ensure that the tags you're passing form a valid HTML sequence. The field layout that you set with a sequence of <I>AddField</I> methods is preserved across consecutive queries, but you can clear the current layout by using the <I>ResetFields</I> method.</p>

<A NAME="1027"><h3>Implementing the component</h3></A>
<p>Now that you know what the component does, understanding how its source code works shouldn't be too difficult. The component holds all the information about the columns to be displayed in the Fields array of UDTs. The <I>AddField</I> method does nothing but store its arguments in this array. If the script calls the <I>Execute</I> method without first calling the <I>AddField</I> method, the component builds a default field layout.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Public Properties ------------------------
' True if Record numbers must be displayed
Public ShowRecNumbers As Boolean

' Private Members ---------------------------
Private Type FieldsUDT
    FldName As String
    Caption As String
    HAlign As String
    VAlign As String
    PrefixTag As String
    PostfixTag As String
End Type

' A reference to the ASP library entry point
Dim sc As ASPTypeLibrary.ScriptingContext
' The Recordset being opened
Dim rs As ADODB.Recordset
' Array information about the fields
Dim Fields() As FieldsUDT
' Number of elements in the Fields array
Dim FieldCount As Integer
</pre></td></tr></table></p>

<p>When the component is instantiated by an ASP script, its <I>OnStartPage</I> method is called. In this method, the component stores a reference to the ASPTypeLibrary.ScriptingContext object and initializes the Fields array:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This event fires when the component is instantiated
' from within the ASP script.
Sub OnStartPage(AspSC As ASPTypeLibrary.ScriptingContext)
    ' Save the reference for later.
    Set sc = AspSC
    ResetFields
End Sub

' Reset the field information.
Sub ResetFields()
    Dim Fields(0) As FieldsUDT
    FieldCount = 0
End Sub
</pre></td></tr></table></p>

<p>The <I>Execute</I> method is just a wrapper around the ADO Recordset's <I>Open</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Execute an SQL query.
Function Execute(conn As String, sql As String)
    ' Execute the query.
    Set rs = New ADODB.Recordset
    rs.Open sql, conn, adOpenStatic, adLockReadOnly
End Function
</pre></td></tr></table></p>

<p>The <I>AddField</I> method does a minimal validation of its arguments and stores them in the first available element in the <i>Fields</i> array:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a field to the table layout.
Sub AddField(FldName As String, Optional Caption As String, _
    Optional HAlign As String, Optional VAlign As String, _
    Optional PrefixTag As String, Optional PostfixTag As String)
    ' Check the values.
    If FldName = "" Then Err.Raise 5

    ' Add to the internal array.
    FieldCount = FieldCount + 1
    ReDim Preserve Fields(0 To FieldCount) As FieldsUDT
    With Fields(FieldCount)
        .FldName = FldName
        .Caption = Caption
        .HAlign = HAlign
        .VAlign = VAlign
        .PrefixTag = PrefixTag
        .PostfixTag = PostfixTag
        
        ' The default caption is the field's name.
        If .Caption = "" Then .Caption = FldName
        
        ' The default horizontal alignment is "left."
        Select Case LCase$(.HAlign)
            Case "left", "center", "right"
            Case Else
                .HAlign = "left"
        End Select
        .HAlign = " ALIGN=" &amp; .HAlign
        
        ' The default vertical alignment is "top."
        Select Case LCase$(.VAlign)
            Case "top", "middle", "bottom"
            Case Else
                .VAlign = "top"
        End Select
        .VAlign = " VALIGN=" &amp; .VAlign
    End With
End Sub
</pre></td></tr></table></p>

<p>The heart of the QueryToTable component is the <I>GenerateHTML</I> method, which uses the contents of the Recordset and the layout information held in the <i>Fields</i> array to build the corresponding HTML table. Although this code might seem complex at first, it took me just a few minutes to build it. Notice that I obtained cleaner code by using a private <I>Send</I> procedure, which actually sends the HTML code to the Response object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Generate the HTML text for the table.
Sub GenerateHTML()
    Dim i As Integer, recNum As Long, f As FieldsUDT
    
    ' Initialize the Fields array if not done already.
    If FieldCount = 0 Then InitFields
    ' Restart from the first record.
    rs.MoveFirst
    
    ' Output the table header and the border.
    Send "&lt;TABLE BORDER=1&gt;"
    Send "  &lt;THEAD&gt;"
    Send "   &lt;TR&gt;"
    ' Insert a column for the record number, if requested.
    If ShowRecNumbers Then
        Send "    &lt;TH ALIGN=Center&gt;Rec #&lt;/TH&gt;"
    End If
    ' These are the fields' captions.
    For i = 1 To UBound(Fields)
        f = Fields(i)
        Send "    &lt;TH" &amp; f.HAlign &amp; "&gt;" &amp; f.Caption &amp; "&lt;/TH&gt;"
    Next
    Send "   &lt;/TR&gt;"
    Send "  &lt;/THEAD&gt;"
    Send " &lt;TBODY&gt;"
    
    ' Output the body of the table.
    Do Until rs.EOF
        ' Add a new row of cells.
        Send "  &lt;TR&gt;"
        ' Add the record number if requested.
        recNum = recNum + 1
        If ShowRecNumbers Then
            Send "   &lt;TD ALIGN=center&gt;" &amp; recNum &amp; "&lt;/TD&gt;"
        End If
        
        ' Send all the fields of the current record.
        For i = 1 To UBound(Fields)
            f = Fields(i)
            Send "   &lt;TD" &amp; f.HAlign &amp; f.VAlign &amp; "&gt;" &amp; f.PrefixTag &amp; _
                rs(f.FldName) &amp; f.PostfixTag &amp; "&lt;/TD&gt;"
        Next
        Send "  &lt;/TR&gt;"
        ' Advance to the next record.
        rs.MoveNext
    Loop
        
    ' Close the table.
    Send " &lt;/TBODY&gt;"
    Send "&lt;/TABLE&gt;"
End Sub

' Send a line of text to the output stream.
Sub Send(Text As String)
    sc.Response.Write Text
End Sub

' Initialize the Fields() array with suitable values.
Private Sub InitFields()
    Dim fld As ADODB.Field
    ResetFields
    For Each fld In rs.Fields
        AddField fld.Name
    Next
End Sub
</pre></td></tr></table></p>

<p>On the companion CD, you'll find the complete source code for this component and a Test.asp page that uses it. The great thing about writing ASP components in Visual Basic 6 is that you can debug them without having to compile them to a DLL. This is a little magic that the Visual Basic IDE does for us: IIS believes that the script is executing an in-process DLL while you're comfortably testing it in the environment, using the full range of debugging tools that Visual Basic provides. (See Figure 20-11.) An example of a table produced by the component is shown in Figure 20-12. I encourage you to augment the component's versatility by adding other properties and methods, for example, to control cell color, value formatting, and so on.</p>

<p>
<A href="javascript:fullSize('F20ph11x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=299 src="images/F20ph11.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-11.</B> <i>Add a breakpoint in the OnStartPage procedure, and then press F8 to single-step through the component's source code as the ASP script invokes its methods.</i><!--/caption-->
</p>

<p>
<A href="javascript:fullSize('F20ph12x.htm')"> <IMG alt="Click to view at full  size." border    =0 height=303 src="images/F20ph12.JPG" width=404 > </A>
</p><p>
<!--caption--><B>Figure 20-12.</B> <i>An HTML table built by the sample component. Notice that you can refine and reexecute the query by entering text in the controls in the upper portion of the page.</i><!--/caption-->
</p>

</BODY>
</HTML>





