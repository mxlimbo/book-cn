<HTML>
<HEAD>
<TITLE>The MSChart Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12f.htm", "ch13a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="545"><h1>The MSChart Control</h1></A>
<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The MSChart control is an external ActiveX control that lets you add charting 
capabilities to your applications. You can create two- and three-dimensional charts 
in different styles, including bars, lines, and pies. You have complete control over 
all the items in the chart, such as title, legends, footnotes, axes, data point series, 
and so on. You can even rotate the graph, add backdrop images to virtually any 
element of the chart, set up your own light sources, and place them where you want. At 
run time, users can select portions of the chart and move and resize them at will, if 
you want to provide them with this capability.
</p>

<p>The MSChart control is undoubtedly the most complicated ActiveX control 
ever provided with Visual Basic. Just to give you an idea of its complexity, consider 
that its type library includes 47 different objects, most of which have dozens of 
properties, methods, and events. A detailed description of this control would require 
100 pages of text, if not more. For this reason, I'll illustrate only a few of its major 
characteristics and provide just a few code samples. If you dare to dive into the 
intricacies of this hierarchy, you'll find Figure 12-12 some help in keeping you from 
getting lost in this maze.
</p>

<p>The topmost object of this hierarchy is MSChart, which lets you set the 
general characteristics of the chart and also exposes several custom events. All the other 
objects in the hierarchy are dependents of MSChart.
</p>

<p>The DataGrid object is where you store the data that you want to display 
graphically. The Plot object is a compound object (that is, an object with other child 
objects) that contains all the graphical information about the data series (color, 
markers, backdrop pattern, position and attributes of light sources, and so on). The 
Title, Legend, and Footnote objects are compound objects with similar structures and 
control over the features of the relevant elements of the chart (text, color, position, and so on).
</p>

<p>
<A HREF="javascript:fullSize('F12PH12x.htm')"> <img src="images/F12PH12.JPG" width=404 height=639 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-12.</B> <i>The top levels of the MSChart hierarchy.</i><!--/caption-->
</p>

<A NAME="546"><h2>Setting Design-Time Properties</h2></A>

<p>The MSChart control has the richest Property Pages dialog box among the 
controls provided in the Visual Basic package (see Figure 12-13), 
with eight tabs.
</p>

<p>The Chart tab is where you decide which type of graphic you want to 
display, whether you want to stack series, and whether you show legends that explain 
what each data series is. These settings correspond to the 
<I>ChartType</I>, <I>Chart3d</I>, <I>Stacking</I>, and 
<I>ShowLegend </I>properties of the MSChart object.
</p>

<p>The Axis tab is where you select the attributes of the axis of the chart: line 
width and color, whether the scale is displayed, and whether the scale is determined 
automatically by the control (the recommended setting) or manually by the 
programmer. In the latter case, you have to set minimum and maximum values and the 
frequency of divisions. Two-dimensional charts have three axes 
(<I>x</I>-axis, <I>y</I>-axis, and secondary 
<I>y</I>-axis), while three-dimensional charts have an additional fourth axis 
(<I>z</I>-axis). Your code can modify these properties using the Axis object, a child of the Plot object.
</p>

<p>
<A HREF="javascript:fullSize('F12PH13x.htm')"> <img src="images/F12PH13.JPG" width=404 height=282 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-13.</B> <i>The Chart tab of the Property Pages dialog box of the MSChart control.</i><!--/caption-->
</p>

<p>The AxisGrid tab lets you modify the style lines of axis grids; these settings 
correspond to the properties of the AxisGrid object, a child of the Axis object.
</p>

<p>In the Series tab, you define how each data series should be displayed. You 
can hide a series (but reserve the space for it on the chart), exclude it (this also 
reuses its space on the chart), show its markers, and draw it on the secondary 
<I>y</I>-axis. If you are drawing a two-dimensional Line chart, you can also display statistical data, 
such as minimum and maximum values, mean, standard deviation, and regression. 
You can modify these features through code by acting on the SeriesCollection and 
the Series objects.
</p>

<p>You refine the appearance of each data series in the SeriesColor tab, where 
you select the color and the style of the edge and the interior of each series. (The 
latter isn't available for Line and X-Y charts.) Your code can manipulate these 
properties through the DataPoint object.
</p>

<p>All the main objects in the control&#8212;MsChart, Plot, Title, Legend, and 
Footnote&#8212;can have a backdrop pattern. You define the color and style of each backdrop in 
the Backdrop tab of the Property Pages window. The title, the legends, and the axis in 
your graph expose a Title, and you can set its properties in the Text and the Font tabs.
</p>

<A NAME="547"><h2>Run-Time Operations</h2></A>

<p>Unless you want to give users the ability to modify some key properties of your 
charts, you can define all the key properties at design time using the Property Pages 
dialog box so that at run time you only have to feed the MSChart control the actual data 
to be displayed. You achieve this using the DataGrid object.
</p>

<p>You can think of the DataGrid object as a multidimensional array that holds 
both data and its associated labels. You define the size of the array by assigning a 
value to the DataGrid's <I>RowCount </I>and <I>ColumnCount 
</I>properties, and you define the number of labels with the 
<I>RowLabelCount </I>and <I>ColumnLabelCount </I>properties. For 
example, you might have 12 rows of data to which you add a label at every third data point:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' 12 rows of data, with a label every third row
MSChart1.DataGrid.RowCount = 12
MSChart1.DataGrid.RowLabelCount = 4
' 10 columns of data, with a label on the 1st and 6th column
MSChart1.DataGrid.ColumnCount = 10
MSChart1.DataGrid.ColumnLabelCount = 2
</pre>
</td></tr>
</table>
</p>

<p>Alternatively, you can set these four properties in one operation using the 
<I>SetSize </I>method:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Syntax is: SetSize RowLabelCount, ColLabelCount, RowCount, ColCount
MSChart1.DataGrid.SetSize 4, 2, 12, 10
</pre>
</td></tr>
</table>
</p>

<p>You define the label text using the <I>RowLabel 
</I>and <I>ColumnLabel </I>properties, which accept two arguments: the row or column number and the number of the label 
you want to assign.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Set a label every three years.
MSChart1.DataGrid.RowLabel(1, 1) = &quot;1988&quot;
MSChart1.DataGrid.RowLabel(4, 2) = &quot;1991&quot;
MSChart1.DataGrid.RowLabel(7, 3) = &quot;1994&quot;
' And so on.
</pre>
</td></tr>
</table>
</p>

<p>You can set the value of individual data points using the 
<I>SetData</I> method, which has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MSChart.DataGrid.SetData Row, Column, Value, NullFlag
</pre>
</td></tr>
</table>
</p>

<p>where <I>Value </I>is a Double value and <I>NullFlag 
</I>is True if the data is Null. You can easily (and quickly) insert or delete rows or columns using a number of 
methods exposed by the DataGrid object. Among these are 
<I>InsertRows</I>, <I>DeleteRows</I>, 
<I>InsertColumns</I>, <I>DeleteColumns</I>, 
<I>InsertRowLabels</I>, <I>DeleteRowLabels</I>, 
<I>InsertColumnLabels</I>, and 
<I>DeleteColumnLabels</I>. You can also fill the grid with random values (useful for 
providing the user with visual feedback even without actual data values) with the 
method <I>RandomDataFill</I>.
</p>

<p>You can learn a lot about the MSChart control by studying the 
Chrtsamp.vbp sample project that comes with Visual Basic 6 and is shown in Figure 12-14.
</p>

<p>
<A HREF="javascript:fullSize('F12ph14x.htm')"> <img src="images/F12ph14.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-14.</B> <i>The sample Microsoft Chart program.</i><!--/caption-->
</p>

<p>The Visual Basic package includes other controls that you might find useful 
in your applications. Unfortunately, I don't have room to explore all of them in 
depth. The controls that I have illustrated in this chapter and in Chapters <a href="ch10a.htm">10</a> and <a href="ch11a.htm">11</a>, 
however, should suffice to help you create sophisticated Windows applications with 
great user interfaces.
</p>


<p>This chapter concludes a series dedicated to building the user interface of 
your applications. Creating a good-looking and logical user interface is a requirement 
for a successful Windows application, but appearance isn't everything. In fact, the 
real value of an application is in its ability to process data, so the majority of the 
programs you'll write in Visual Basic have to read, write, and process the information 
stored in a database. In Part III of this book, I show you how to do all that in the 
most efficient way.
</p>
</BODY>
</HTML>





