<HTML>
<HEAD>
<TITLE>The DHTMLPage Designer</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19d.htm", "ch19f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="950"><h1>The DHTMLPage Designer</h1></A>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The big news about Visual Basic 6 is that you can write DHTML code using 
your favorite language, thanks to the DHTMLPage designer. Like all designers, 
the DHTMLPage designer exposes a visual part (the HTML page) and a code 
section. When you compile the program, you produce an ActiveX DLL that runs inside 
Internet Explorer 4.01 or later versions. Being able to access the DHTML object from a 
compiled DLL written in Visual Basic has a lot of advantages:
</p>

<UL>

<p><li> The appearance of the page is completely separated from the code 
that manages it, which permits a better subdivision of the work among 
the programmer and the page author.
</li></p>
<p><li> You enjoy source code protection: the code is embedded in a DLL 
and can't be peeked at by just reading the contents of the page.
</li></p>
<p><li> Visual Basic compiled code is typically faster than routines written 
in VBScript or other script languages. The speed advantage is even 
more noticeable if you compile to native code with some optimization 
turned on.
</li></p>
<p><li> You don't have to guess the names of the properties and methods of 
each object in the hierarchy because IntelliSense is there to help you. Ditto 
for the syntax of event procedures, which are created for you by 
the DHTMLPage designer code editor.
</li></p>
<p><li> The DHTMLPage designer is well integrated in the environment, so 
you can modify the initial properties of any element by using the 
Properties window rather than by writing cryptic HTML tags.
</li></p>
</ul>

<A NAME="951"><h2>A First Look at the DHTMLPage Designer</h2></A>

<p>The fastest way to show you the DHTMLPage designer in action is to select the 
DHTML Application template from the project gallery. This template adds one instance of 
the DHTMLPage designer and one standard BAS module, which contains some 
useful routines. In a typical DHTML application you'll create several DHTMLPage 
designers, one for each DHTML page your program consists of.
</p>

<p>Figure 19-6 shows the DHTMLPage designer, with a treeview pane on the 
left and a detail pane on the right. The two panes are actually different 
representations of the contents of the page: In the treeview pane you see the hierarchical 
relationships of the elements of the page, in the detail pane you see (and arrange) the 
elements as if they were controls on a form. The designer doesn't provide access to 
the HTML code behind the page, so you can't add script routines or HTML tags 
directly. Fortunately, you don't really need to use scripts any longer because you'll be 
using Visual Basic, and you can use an external editor to author an HTML page 
and then import it into the designer.
</p>

<p>
<A HREF="javascript:fullSize('F19ph06x.htm')"> <img src="images/F19ph06.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-6.</B> <i>The DHTMLPage designer.</i><!--/caption-->
</p>

<p>When the designer is active, a new tab appears in the Toolbox window, 
containing all the HTML controls that you can drop in the detail pane. All the 
controls we've seen so far are included in the toolbox, plus a few new ones: hidden 
TextBox controls, InputImage controls, FileUpload controls. To simplify the developer's 
job, you have distinct icons for the one-line Select control and for the multiline 
(and optionally multiselect) List control, even though they're rendered using the 
same HTML tags. The toolbox also contains a few items which aren't controls in the 
stricter sense of the word: the HorizontalRule element (for drawing horizontal lines) 
and Hyperlink element. You can also create a Hyperlink by selecting a portion of text 
and clicking on the Make Selection Into Link button on the toolbar. Moreover, if you 
write text that's formatted as a Web address (such as 
<I>www.microsoft.com</I>) the designer automatically turns it into a hyperlink.
</p>

<p>As you know, an HTML page can contain ActiveX controls, and the 
DHTMLPage designer supports this capability too. You can drop an external ActiveX control 
on the page, such as a TreeView or an ActiveX control you've authored in Visual 
Basic and compiled as a stand-alone OCX file. You can't use intrinsic Visual Basic 
controls, nor can you use UserControl objects that are private in the current project.
</p>

<p>The topmost portion of the DHTMLPage designer toolbar (visible in Figure 
19-7) gives you the ability to format the text or the element currently selected. The 
second combo box from the left is filled with all the styles defined for the current 
page, including those defined in an external Cascading Style Sheet that the page refers 
to. Because you can't define a style in the DHTMLPage designer, this combo box 
can contain elements only if you've imported an external HTML page written with a 
more powerful editor.
</p>
<p>
<A HREF="javascript:fullSize('F19ph07x.htm')"> <img src="images/F19ph07.JPG" width=404 height=269 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-7.</B> <I>The toolbar of the DHTMLPage designer.</I><!--/caption-->
</p>

<p>Using the DHTMLPage Designer Properties button, you can decide whether 
the HTML page being built should be saved together with the current project or as 
a separate HTM file. Each choice has its advantages, but because the designer 
can't compete with more powerful HTML editors, such as Microsoft FrontPage, I 
suggest that you use the latter option so that you can use an external HTML editor to 
embellish the page.
</p>

<p>The Launch Editor button lets you edit the current page using the external 
editor of your choice. By default, this editor is Notepad, which hardly qualifies as an 
HTML editor but is used by many HTML programmers nonetheless. You can define a 
better editor in the Advanced tab of the Options dialog of the Visual Basic IDE. You 
can edit the page in an external editor only if you saved it as an external HTM file. 
When you click on this button, Visual Basic automatically saves the project with the 
most recent edits, and then runs the external editor. Visual Basic continuously checks 
the file's date and time, and as soon as you save the page in the editor Visual Basic 
asks whether you want to reload it in the DHTMLPage designer.
</p>

<p>As with all designers, you can click on a control (in either of the two 
panes) and then press the F4 key to bring up the Properties window. In the 
DHTMLPage designer, you can modify the attributes of 
<I>any </I>element, including plain text. I suggest that you create an empty HTML page and drop an instance of each control 
in the toolbox and then press F4 to become familiar with the properties it exposes. 
In the Properties window, you can read the type of each element, according to the 
name classification used by the designer. For example, many of the controls dropped 
from the toolbox are of type 
<I>DispIHTMLInputElement</I> and are further classified by their 
<I>type </I>property (which can be <I>text</I>, 
<I>password</I>, <I>image</I>, and so on). The class of 
Hyperlink elements is <I>DispHTMLAnchorElement</I>.  Tables are of class 
<I>DispHTMLTable, </I>and they contain elements whose class is 
<I>DispHTMLTableCell</I>.
</p>

<p>Speaking of tables, you have a lot of options when creating and editing 
tables, for example using the drop-down menu from the designer's toolbar or by 
right-clicking on the table itself in the detail pane. The pop-up menu includes the 
Properties command, which brings up the Properties dialog box shown in Figure 19-8. In 
this dialog box, you can set a lot of attributes, and you can also span cells to take 
multiple rows and columns. Also notice that a button on the toolbar lets you show 
and hide table borders at design time, without affecting the actual 
<I>Border </I>attribute. Having a table with visible borders at design time usually simplifies your editing chores.
</p>
<p>
<img src="images/F19ph08.GIF" width=401 height=395 border="0">
<p>
<!--caption--><B>Figure 19-8.</B> <I>The Properties dialog box of a DispHTMLTable object.</I><!--/caption-->


<p>If you click on an external ActiveX control and press the F4 key, you get 
the list of supported HTML attributes, not the usual list of properties specific to 
that control. To edit the intrinsic properties of an external ActiveX control, you must 
right-click on it and bring up its Properties dialog box. The List and the Select 
DHTML controls support a custom Properties dialog box as well, so you can use it for 
specifying the list of items these controls contain.
</p>

<p>The designer can work in two position modes, relative or absolute. In 
<I>relative </I>mode, you let the browser position all the elements in the page when the page 
itself is resized, as it happens for all the (non-Dynamic) HTML pages. In 
<I>absolute </I>mode, the element stays where you drop it. On the toolbar, two buttons affect position 
mode: One button affects the current mode, and the other affects the absolute position 
attribute of the element that's currently selected. The latter button is disabled when 
you select text elements because you can modify the position of a text element only 
by pressing the Enter key to add empty lines, as you do in a word processor. 
Because hyperlinks are just text elements, they're subject to the same rules for 
positioning. All the other elements can be moved with the mouse, but you have to grab them 
from their border. You can control the z-order position of page elements by using the 
Order submenu on the designer's toolbar.
</p>

<p>Setting text properties in the internal designer isn't the most intuitive action. 
In fact, a &lt;P&gt; element doesn't initially expose any font or style property. To force it 
to expose such attributes, you must change its appearance using the topmost 
toolbar, for example, by modifying the font size. When you change the standard 
appearance of a paragraph, a &lt;FONT&gt; element appears in the treeview as a child of the &lt;P&gt; 
item. You can then select this new item and press the F4 to display the Properties 
window, and then change other attributes, such as 
<I>color</I> and <I>face</I>.
</p>

<A NAME="952"><h2>Programming DHTML Elements</h2></A>

<p>To exploit the dynamic capabilities of DHTML, you must write code that reacts 
to events raised by the page or its elements. In a Visual Basic 6's DHTML 
application, you write code that reacts to events raised by the page and its elements, exactly 
as you write code behind the controls on a form. When you then compile the 
application, Visual Basic creates one or moreHTM files and a DLL that contains 
the compiled code you've written inside event procedures. This DLL will be loaded 
in the address space of Internet Explorer, and can trap DHTML events exposed to 
the outside by that browser.
</p>

<p>All Visual Basic 6's DHTML applications are actually ActiveX DLL 
applications, whose threading model is apartment threading. You shouldn't use the 
DHTMLPage designer inside single-threaded ActiveX projects. All theHTM files produced when 
you compile the application contain an OBJECT tag with a reference to the 
corresponding DLL. The first time the user navigates to the page, the DLL is 
automatically downloaded from the server and installed in the client's system. This mechanism 
is identical to the one used for downloading an ActiveX control in an HTML page.
</p>

<A NAME="953"><h3>The DHTMLPage object</h3></A>

<p>The DHTMLPage object represents the component in the DLL that's bound to 
a particular HTM page. Like all objects, it exposes an 
<I>Initialize </I>and a <I>Terminate </I>events, which fire the first time the page is used and immediately before the DLL is unloaded, 
respectively. It also exposes two events, <I>Load 
</I>and <I>Unload</I>, which fire when the page is loaded and unloaded, respectively.
</p>

<p>The DHTMLPage object exposes four design-time properties. The 
<I>SourceFile </I>property is the path of theHTM file that contains the HTML source of the page 
being built or an empty string if you aren't editing the page using an external editor. 
The <I>BuildFile </I>property is the path of theHTM file that will be built during the 
compilation process and that should be distributed with the DLL. (It's initially the same 
value as the <I>SourceFile </I>property.) The <I>AsynchLoad 
</I>property specifies whether the page should be loaded asynchronously. (See more on this in the section &quot;<A HREF="ch19e.htm#961">Loading a Page Asynchronously</A>&quot; later in this chapter.) Specifying the 
<I>id </I>property makes the page programmable. In the Properties window, you'll also find a fifth property, 
<I>Public</I>, but you can't actually count it because it's set to True and can't be changed. (You 
can't have private DHTMLPage objects.)
</p>

<p>These properties are available only at design time. At run time, 
the DHTMLPage object exposes a different set of properties: 
<I>BaseWindow</I>, <I>Document</I>, and 
<I>DHTMLEvent</I> (as shown in Figure 19-9). They return a reference to the 
all-important DHTML Window, Document, and Event objects respectively, and so 
they're the links between the Visual Basic program and the Dynamic HTML object 
mode. Notice that while you can access DHTML objects from within the DHTMLPage 
designer module, you can't access the designer from a script inside the HTML page. 
The page is oblivious to the fact that it's being processed by a DLL.
</p>

<p>
<A HREF="javascript:fullSize('F19ph09x.htm')"> <img src="images/F19ph09.JPG" width=404 height=196 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-9.</B> <I>The runtime properties of the DHTMLPage object.</I><!--/caption-->
</p>

<p>When inside a DHTML module, you can directly reference the DHTMLPage object's properties in code, exactly as you do with a form's properties inside a form code module.  The following example demonstrates this concept:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' (This code must run inside a DHTMLPage code module.)
' Change the background color of the page.
Document.bgcolor = &quot;red&quot;
' Retrieve the state of the Alt key inside an event procedure.
If DHTMLEvent.altKey Then ...
</pre>
</td></tr>
</table></p>


<A NAME="954"><h3>The <I>id </I>property</h3></A>
<p>Not all the page elements can be associated with event procedures. In order to 
be programmable, a page element must have a nonempty 
<I>id </I>property. This <I>id</I> becomes the name by which you refer to that element in code. This requirement can 
mislead Visual Basic programmers because many HTML elements also support a 
<I>Name </I>property, which is usually meaningless in pure HTML programming. As I explained in 
the HTML tutorial at the beginning of this chapter, the 
<I>Name </I>property is mostly used for grouping mutually exclusive Option controls. In DHTML applications, you need 
different <I>id </I>values even for the items in a group of Option controls if you want to 
refer to them individually.
</p>

<p>Under standard DHTML, the <I>id </I>properties of multiple controls don't need to 
be different. Within a DHTML application written in Visual Basic, however, all the 
<I>id</I>'s in a page must be unique. When you import an existing .hml file into the 
designer, Visual Basic checks all the <I>id </I>values, and if necessary, it automatically appends 
a number to them to ensure that their values are unique in the page. So always 
double-check the <I>id </I>assigned to an element when you import an HTM page.
</p>

<p>Not all the elements in the page need to have an 
<I>id </I>property. In fact, in most cases they don't: Only the elements that you want to write code for have to be 
assigned an <I>id</I>. The treeview in the leftmost pane shows such programmable 
elements in boldface. The designer automatically creates an 
<I>id </I>for all the elements and controls that you drop from the Toolbox. To assign an 
<I>id </I>to an element, you select it in the treeview, switch to the Properties window, and then type a unique value for 
the <I>id </I>property. You can also select a page element in the combo box controls at the 
top of the Properties window. (Use this method to change the properties of 
the DHTMLPage object itself.)  Moreover, you can always access the properties and methods of a page element through the All property and other collections of the Document object.
</p>

<A NAME="955"><h3>The first example: A dynamic menu</h3></A>

<p>To show you how you can leverage what you learned about DHTML 
programming, let's build a practical example: a dynamic menu consisting of items that appear 
and disappear when you click on the menu header and that are rendered as bold 
text when the mouse passes over them.
</p>

<p>To begin with, create a new DHTML page, save it in an HTM file, and then 
add a few paragraphs as shown in Figure 19-10. Set these paragraphs' 
<I>id </I>properties to <I>MainMenu</I>, 
<I>MenuItem1</I>, <I>MenuItem2</I>, and <I>MenuItem3 
</I>respectively. You can change the color of each paragraph by changing its font size from the toolbar, and then 
editing the properties of the &lt;FONT&gt; item that the designer creates for you.
</p>

<p>
<A HREF="javascript:fullSize('F19ph10x.htm')"> <img src="images/F19ph10.JPG" width=404 height=309 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-10.</B> <I>The first DHTML application: a dynamic menu.</I><!--/caption-->
</p>


<p>Now you can finally write code for managing these items. You write code 
behind a page element the same way you write code for a control on a regular form: 
You double-click on the element (in the treeview pane) to access the code window, 
and then select the event procedure in the rightmost combo box. You can also access 
the code window by pressing the F7 function key or by selecting the View Code 
command from the menu that appears when you right-click on the designer window. 
This is the code you should enter in the code module. (Or you can load the sample 
application from the companion CD.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DHTMLPage_Load()
    ' Make the submenu choices invisible when the page loads.
    SetVisibility False
End Sub

' Change the display attribute of all the menu items.
Private Sub SetVisibility(newValue As Boolean)
    MenuItem1.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
    MenuItem2.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
    MenuItem3.Style.display = IIf(newValue, &quot;&quot;, &quot;none&quot;)
End Sub 

' When the MainMenu paragraph is clicked, 
' switch menu items from hidden to visible and back.
Private Function MainMenu_onclick() As Boolean
    If MenuItem1.Style.visibility = &quot;hidden&quot; Then
        SetVisibility True
    Else
        SetVisibility False
    End If
End Function

' Change the boldface attribute of the element under the mouse, but only
' if this element is one of the three MenuItem paragraphs.
Private Sub Document_onmouseover()
    Select Case DHTMLEvent.srcElement.innerText
        Case &quot;Click here&quot;, &quot;Acknowledgments&quot;, &quot;Table of contents&quot;, _
            &quot;Appendix&quot;
            DHTMLEvent.srcElement.Style.fontWeight = &quot;800&quot;
    End Select
End Sub

' Restore the original font attribute when the mouse leaves the element.
Private Sub Document_onmouseout()
    Select Case DHTMLEvent.srcElement.innerText
        Case &quot;Click here&quot;, &quot;Acknowledgments&quot;, &quot;Table of contents&quot;, _
            &quot;Appendix&quot;
            DHTMLEvent.srcElement.Style.fontWeight = &quot;&quot;
    End Select
End Sub
</pre>
</td></tr>
</table></p>


<p>In its simplicity, the preceding code is a good example of how you can 
put DHTML features to good use. Because all the menu items behave in a similar 
way, it doesn't make any sense to repeat the same code inside their 
<I>onmouseover </I>and <I>onmouseout </I>event procedures. In fact, it's much better to exploit the event 
bubbling features of Dynamic HTML and trap those events at the Document level. This 
is something that you couldn't do if this were a regular Visual Basic form.
</p>

<p>This approach has its drawbacks, however, because you need to be sure that 
the <I>onmouseover </I>and <I>onmouseout </I>events were raised by one of the four &lt;P&gt; 
elements you're interested in, and not by something else on the page. The Event object 
exposes a <I>srcElement </I>property that returns a reference to the object that first originated the 
event. The problem is this: How can you determine whether this object is one of the four 
&lt;P&gt; items that make up the menu? At first I believed that I could compare the 
<I>id </I>properties of those four items<I> </I>with the value returned by 
the <I>DHTMLEvent.srcElement.id</I> property, but&#8212;to my surprise&#8212;I discovered that the latter property always 
returns an empty string and so can't be used for this purpose. Fortunately, you can solve 
the problem with the <I>innerText </I>property. If multiple elements on the page have the 
same value for the <I>innerText </I>property, you should assign them a unique 
<I>Name </I>and use this property to find out which element is raising the event.
</p>

<A NAME="956"><h3>Using DIV and SPAN tags</h3></A>

<p>In most cases, you don't need to resort to the unusual technique based on 
<I>id</I>, <I>innerText,</I> or some other property to figure out whether you're interested in the 
event because under Dynamic HTML you can precisely delimit the range of event 
bubbling by creating an area of the document that exactly contains only the items you're 
interested in. If you don't have a container that holds all the elements you want 
receive events from (and only them), you can group the elements you're interested in 
using a &lt;DIV&gt; and &lt;/DIV&gt; pair of tags.
</p>

<p>For the dynamic menu example, you need to create a DIV section that 
comprises the four menu items. This is really simple: In the pane on the right side of 
the DHTMLPage designer, select the four paragraphs and then click on the third 
button from the left in the lower line of buttons in the designer's toolbar. This action 
creates a DIV section, but you need to assign it a nonempty 
<I>id </I>property to make it programmable. So type 
<I>DynMenu </I>in the Properties window, and then go to the 
code window to enter this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub DynMenu_onmouseover()
    DHTMLEvent.srcElement.Style.fontWeight = &quot;800&quot;
End Sub

Private Sub DynMenu_onmouseout()
    DHTMLEvent.srcElement.Style.fontWeight = &quot;&quot;
End Sub
</pre>
</td></tr>
</table></p>


<p>As you see, you don't need to test the <I>srcElement.innerText 
</I>property because you're sure that the event comes from one of those four &lt;P&gt; items.
</p>

<p>As an exercise, let's see how you use the &lt;SPAN&gt; tag, which is often useful 
for referencing smaller portions of the HTML page. Let's suppose that you want to 
change the text of the <I>MainMenu </I>element to 
<I>Click here to close the menu</I> when the menu 
is open, and you want to restore it to <I>Click 
here</I> when the menu is closed. One way to obtain this behavior is to extend the text of the 
<I>MainMenu </I>element to <I>Click here to close the 
menu</I>, select the last four words, and click the fourth button on the 
designer toolbar to turn this small portion of text into a &lt;SPAN&gt; section. To refer to this 
section from within code, you need to assign this &lt;SPAN&gt; object an 
<I>id </I>(<I>CloseMenu</I>, for example) and then update the code as follows. (Added statements are in boldface.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function MainMenu_onclick() As Boolean
    If MenuItem1.Style.visibility = &quot;hidden&quot; Then
        SetVisibility True
<B>        MenuClose.Style.visibility = &quot;visible&quot;</B>
    Else
        SetVisibility False
<B>        MenuClose.Style.visibility = &quot;hidden&quot;</B>
    End If
End Function
</pre>
</td></tr>
</table></p>


<p>As you see, Dynamic HTML lets you achieve eye-catching results with a small 
amount of code.
</p>

<A NAME="957"><h3>DHTML event procedures</h3></A>

<p>If you look carefully at the code in the sample application, you'll notice that 
many (but not all) event routines are functions, rather than procedures. As I explained 
in the &quot;<A HREF="ch19c.htm#929">Canceling the Default Effect</A>&quot; section earlier in this chapter, all DHTML 
events expect a return value that, if False, cancels the default action for the event. In 
order to return a value, the event procedure must be declared as a function.
</p>

<p>The way you return a value from an event inside a DHTMLPage designer 
is different from the technique used within script routines inside the HTM file. 
In VBScript, you must explicitly set the return value of a procedure to False to 
cancel the default action of a given event, or you must set the 
<I>event.returnValue </I>property to False to reach the same result. In Visual Basic, however, False is the default 
value for any Function, and DHTML event procedures are no exception to this rule. In 
other words, if you write an event procedure you must explicitly set its return value to 
True if you don't want to cancel the default action.
</p>

<p>To explain this concept with an example, let's say that you have a 
hyperlink and you want to ask for a confirmation before letting the user navigate to the 
specified URL. This is the code you have to write in the Hyperlink object's 
<I>onclick </I>event procedure:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Hyperlink1_onclick() As Boolean
    If MsgBox(&quot;Do you really want to jump there?&quot;, vbYesNo) = vbYes Then
        Hyperlink1_onclick = True
    End If
End Function
</pre>
</td></tr>
</table></p>


<p><div class="note"><blockquote>
<b>NOTE</b><hr>Setting the <I>DHTMLEvent.returnValue </I>property to True doesn't work.
</blockquote></div>
</p>

<A NAME="958"><h3>The MSHTML library</h3></A>

<p>All DHTML applications include a reference to the MSHTML type library, which 
contains all the objects that make up the Dynamic HTML object model. You'll 
probably need some time to get acquainted with this huge library&#8212;the version that comes 
with Internet Explorer 5 includes about 280 classes and interfaces! Its elements also 
have names that are different from what you might expect. For example, the Window 
object corresponds to the HTMLWindow2 class, the Document object derives from 
the HTMLDocument class, the Event object is of class CeventObj, and so on. I don't 
have enough room to describe all the classes and their properties, methods, and 
events here, so I can only suggest that you to spend some time with the Object Browser 
to see the most relevant features of each object.
</p>

<A NAME="959"><h2>DHTML Applications</h2></A>

<p>When programming Visual Basic 6's DHTML applications, you have to solve a 
new class of problems. In this section, I illustrates a few of them.
</p>

<A NAME="960"><h3>Navigating to other pages</h3></A>

<p>You can let the user navigate to other pages by simply placing one or more 
hyperlinks on the page and carefully preventing any of the hyperlinks from returning False 
in their <I>onclick </I>event procedures. If you're building the target URL in a dynamic 
way, however, you can't assign it to the &lt;HREF&gt; tag of a hyperlink at design time, and 
you need to follow one of the following methods:
</p>

<UL>

<p><li> You can use the Navigate method of the Window object you can get 
a reference to the latter object using the 
<I>BaseWindow</I> property of the DHTMLPage global object. This is the code that you need to execute:
</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' Note: This is an absolute URL.
BaseWindow.Navigate &quot;http://www.vb2themax.com&quot;
</pre>
</td></tr>
</table>
</p>

<p><li> If you're inside the <I>onclick </I>event procedure of a Hyperlink object, you 
can change this object's <I>href</I> property and then confirm that you want to 
follow the hyperlink by assigning True to the event procedure's return value:
</li></p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Hyperlink1_onclick() As Boolean
    ' This code assumes that the global InternetIsUnavailable variable has 
    ' been set to True if you're connected to the Internet and False if you're
    ' navigating on your private intranet.

    If InternetIsUnavailable Then

        Hyperlink1.href = &quot;localpage.htm&quot;

    End If

    ' In all cases, you need to return True to enable the jump.

    Hyperlink1_onclick = True

End Function
</pre>
</td></tr>
</table>
</p>

<p><li> Finally, when you can, navigate to another page in your DHTML 
application using this syntax:
</li></p>
<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>BaseWindow.Navigate &quot;DHTMLPage2.htm&quot;
</pre>
</td></tr> 
</table>
</p>

<p>where the argument is the name of the HTM file to which you saved the 
target DHTML page. (The previous code assumes that all HTM files that make up 
the application have been deployed in the same directory on the Web server.)
</p>
</ul>
<p>Whatever method you choose, you should pay attention to how you use 
relative and absolute paths. In general, all the references to other pages in your 
application&#8212;whether or not they're associated with a DHTMLPage designer&#8212;should be 
relative so that you can easily deploy all the pages of your application to a new Web site 
without having to recompile the source code. Conversely, all the references to pages 
outside your Web site should be absolute and be preceded by the 
<I>http:// </I>prefix.
</p>

<A NAME="961"><h3>Loading a page asynchronously </h3></A>

<p>The first time a DHTMLPage is referenced in code, it fires an 
<I>Initialize </I>event. You should use this element exclusively to initialize local variables. Because all the 
page elements haven't been created yet, an error occurs if you reference them.
</p>

<p>By default, a DHTLMPage object becomes active when the page has been 
completely downloaded from the Web server. At this point, this object fires the 
<I>Load </I>event. Because all the elements now exist, you can reference them without any 
problem. The problem with this simple approach, however, is that the download phase 
of complex pages with several objects in them&#8212;large images, for example&#8212;can 
take a long time to complete. Until the page has been completely downloaded, users 
are locked out because the controls on the page won't react to their actions.
</p>

<p>You can activate asynchronous download by setting the DHTMLPage 
object's <I>AsyncLoad </I>property to True. In this situation, the 
<I>Load </I>event fires when the download phase begins and not all the elements on the page have been downloaded 
yet. This means that you might reference a page element before it's available, which 
would result in an error. Here are a few techniques that you can use when you turn on 
the asynchronous loading feature:
</p>

<UL>

<p><li> In general, you shouldn't reference any object from within an event 
procedure, except the object that fired the event. You can't even reference 
other objects that appear earlier in the page than the one that's raising the 
event in the HTML page because the browser can load elements in 
random order.
 </li></p>
<p><li> If the logic of your application forces you to reference other objects, 
always add an <I>On Error </I>statement to protect your code from unanticipated errors.
</li></p>
<p><li> Don't access any object (except the one that's raising the event) until 
the Document's <I>readyState </I>property returns the value 
<I>complete</I>. You can poll this property before accessing any object, or you can wait for 
the Document's <I>onreadystatechange </I>event and check the property there.
</li></p>
</ul>
<p>Most of the time, you'll have to mix all three techniques. For example, 
when the page is loaded asynchronously, don't execute critical code in 
the <I>DHTMLPage_Load </I>event but move it to the 
<I>Document_onreadystatechange </I>event instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Document_onreadystatechange()
    If Document.readyState = &quot;complete&quot; Then
        ' Here you can safely access all the elements in the page.
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>If you can't wait for the <I>onreadystatechange 
</I>event, you must protect your code from unanticipated errors that would occur when a user tries to access a 
nonexistent object, or you can use the following routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' A reusable function that checks whether an element is available
Function IsAvailable(ByVal id As String) As Boolean
    On Error Resume Next
    id = Document.All(id).id
    IsAvailable = (Err = 0)
End Function
</pre>
</td></tr>
</table></p>


<p>For example, a click on the MainMenu element should be ignored until the 
menu items are ready:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function MainMenu_onclick() As Boolean
    If Not IsAvailable(&quot;MenuItem1&quot;) Then Exit Function
    ' Don't execute this code if the menu items aren't available yet.
    ...
End Function
</pre>
</td></tr>
</table></p>


<A NAME="962"><h3>Managing the state</h3></A>

<p>DHTML applications are different from regular Visual Basic applications for an 
important reason: Because the user is free to navigate from one page to another 
page&#8212;including pages for which you don't provide a hyperlink&#8212;you can't be certain 
about the order in which pages will be visited. This situation contrasts with the usual 
Visual Basic programming model, which let's you decide which forms can be 
visited at a given moment.
</p>

<p>Another key difference between DHTML and Visual Basic applications is 
that Internet applications are <I>stateless</I>, in the sense that the HTTP protocol doesn't 
store any information between requests; it's up to you to maintain the state, if 
necessary. You can do this using the <I>PutProperty 
</I>and <I>GetProperty </I>routines that you find in 
the modDHTML.Bas module included in the DHTML Application template project. 
This is the source code of the two routines, after stripping out some comment lines:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub PutProperty(objDocument As HTMLDocument, strName As String, _
    vntValue As Variant, Optional Expires As Date)
    objDocument.cookie = strName &amp; &quot;=&quot; &amp; CStr(vntValue) &amp; _
        IIf(CLng(Expires) = 0, &quot;&quot;, &quot;; expires=&quot; &amp; _
        Format(CStr(Expires), &quot;ddd, dd-mmm-yy hh:mm:ss&quot;) &amp; &quot; GMT&quot;) 
End Sub

Function GetProperty(objDocument As HTMLDocument, strName As String) _
    As Variant
    Dim aryCookies() As String
    Dim strCookie As Variant
    On Local Error GoTo NextCookie

    ' Split the document cookie object into an array of cookies.
    aryCookies = Split(objDocument.cookie, &quot;;&quot;)
    For Each strCookie In aryCookies
        If Trim(VBA.Left(strCookie, InStr(strCookie, &quot;=&quot;) - 1)) = _
            Trim(strName) Then
            GetProperty = Trim(Mid(strCookie, InStr(strCookie, &quot;=&quot;) + 1))
            Exit Function
        End If
NextCookie:
        Err = 0
    Next strCookie
End Function
</pre>
</td></tr>
</table></p>


<p>As you see, both routines are nothing more than an interface to the 
Document object's <I>cookie </I>property, so you can directly access this property from your code 
for some special tasks (for example, to enumerate all the defined cookies). To save a 
value in a persistent way, call the <I>PutProperty 
</I>routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Store the name of the user in the &quot;UserName&quot; cookie.
PutProperty Document, &quot;UserName&quot;, txtUserName.Value
</pre>
</td></tr>
</table></p>


<p>You can also set an expiration date for the cookie, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' The user password is valid for one week.
PutProperty Document, &quot;UserPwd&quot;, txtPassword.Value, Now() + 7
</pre>
</td></tr>
</table></p>


<p>If you don't set an expiration date, the cookie is automatically deleted at 
the end of the session, when the browser is closed. You can retrieve a cookie using 
the <I>GetProperty </I>function:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This returns an empty string if the cookie doesn't exist.
txtUserName.Value = GetProperty(Document, &quot;UserName&quot;)
</pre>
</td></tr>
</table></p>


<p>The sample application PropBag.vbp on the Visual Basic CD demonstrates 
how you can use these routines to pass data between two pages in your project.
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
The PropBag.vbp demo project raises an error when you run it on 
a system on which Internet Explorer 5 is installed. The error is caused by 
slight differences in the browser object model. You can fix it by 
substituting <I>WindowBase.Document </I>with just 
<I>Document </I>in the code that calls the 
<I>PutProperty </I>and <I>GetProperty </I>routines. I'm testing this with a late beta of Internet Explorer 
5, so it's possible that the error will disappear in the official release.
</blockquote></div>
</p>

<p>You typically save a page's state in the <I>Unload 
</I>event. Don't wait until the <I>Terminate </I>event because when this event fires the page has been already destroyed, 
and you can't reference its elements any longer. This is similar to the situation you 
have in the <I>Initialize </I>event.
</p>

<p>One last note: The PropBag.vbp demo application might make you believe 
that you need a cookie any time you're passing data between two pages of your 
DHTML application, but it isn't strictly necessary. In fact, when you're directly calling 
another page of your application&#8212;using one of the methods outlined in the &quot;<A HREF="ch19e.htm#960">Navigating to Other Pages</A>&quot; section, earlier in this chapter&#8212;you just need to store the value in 
a global variable of your ActiveX DLL project. You actually need to resort to a 
cookie (directly, or indirectly through the routines in the modDHTML.Bas module) only 
if you want to make some data available to another page that you aren't calling 
directly or if you want to preserve data among subsequent sessions. (In this latter case, 
you should specify a suitable value for the <I>Expires 
</I>argument of the <I>PutProperty </I>routine.)
</p>

<A NAME="963"><h3>Creating elements</h3></A>

<p>While you're programming in Visual Basic, you shouldn't forget that you can 
leverage all the power of Dynamic HTML. To give you an idea of what you can do 
with Visual Basic and DHTML together in the same application, I'll show you how 
you can use Visual Basic to query an ADO data source and then dynamically build a 
table of results right in the browser using the many HTML methods that modify the 
contents of a page already loaded in the browser. (See the &quot;<A HREF="ch19c.htm#926">Text Properties and Methods</A>&quot; section, earlier in this chapter.)
</p>

<p>When you plan to fill a portion of the page at run time, for example, with 
the results of a database query, you need to place a &lt;DIV&gt; section in the proper 
place. This section should be associated with a nonempty 
<I>id </I>property so that you can reference it from code. Figure 19-11 shows a typical search page, with two TextBox 
controls in which the user enters search criteria, and a Search button that starts the search.
</p>
<p>
<A HREF="javascript:fullSize('F19ph11x.htm')"> <img src="images/F19ph11.JPG" width=404 height=281 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-11.</B> <I>A simple search page.</I><!--/caption-->
</p>

<p>The button is followed in the HTML source by an empty (and therefore 
invisible) &lt;DIV&gt; section whose <I>id </I>is 
<I>divResults</I>. When the user clicks on the button, the 
Visual Basic code executes the query and builds an ADO Recordset:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Edit this constant to match your directory structure.
Const DB_PATH = &quot;C:\Program Files\Microsoft Visual Studio\Vb98\Biblio.mdb&quot;

Private Function cmdSearch_onclick() As Boolean
    Dim rs As New ADODB.Recordset
    Dim conn As String, sql As String
    Dim AuthorSearch As String, TitleSearch As String
    Dim resText As String, recIsOK As Boolean, recCount As Long

    On Error GoTo Error_Handler

    ' Prepare the query string.
    AuthorSearch = txtAuthor.Value
    TitleSearch = txtTitle.Value
    sql = &quot;SELECT Author, Title, [Year Published] AS Year FROM Titles &quot; _
        &amp; &quot;INNER JOIN ([Title Author] INNER JOIN Authors &quot; _
        &amp; &quot;ON [Title Author].Au_ID = Authors.Au_ID) &quot; _
        &amp; &quot;ON Titles.ISBN = [Title Author].ISBN&quot;
    ' You can filter author names right in the SQL query string.
    If Len(AuthorSearch) Then
        sql = sql &amp; &quot; WHERE Author LIKE '&quot; &amp; AuthorSearch &amp; &quot;%'&quot;
    End If
    ' Open the Recordset.
    conn = &quot;Provider=Microsoft.Jet.OLEDB.3.51;Data Source=&quot; &amp; DB_PATH
    rs.Open sql, conn, adOpenStatic, adLockReadOnly
</pre>
</td></tr>
</table></p>


<p>At this point, you start to build a table, with a header row that displays the 
names of the fields:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    ' Prepare the header of the table.
    resText = &quot;&lt;TABLE BORDER&gt;&quot; _
        &amp; &quot;&lt;TR ALIGN=left&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=150&gt;Author&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=300&gt;Title&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;TH WIDTH=80&gt;Year&lt;/TH&gt;&quot; _
        &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
</pre>
</td></tr>
</table></p>


<p>You can loop through the Recordset and filter out all the records that 
don't contain the specified string in the Title field (if the user actually entered some 
text in the <I>txtTitle </I>control). For each record that matches the criteria, this code adds a 
row to the table:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    Do Until rs.EOF
        recIsOK = True
        ' Filter out unwanted records.
        If Len(TitleSearch) Then
            If InStr(1, rs(&quot;Title&quot;), TitleSearch, vbTextCompare) = 0 Then 
                recIsOK = False
            End If
        End If
        ' If the record meets the search criteria, add it to the page.
        If recIsOK Then
            recCount = recCount + 1
            resText = resText &amp; &quot;&lt;TR&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Author&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Title&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Year&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
                &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
        End If
        rs.MoveNext
    Loop
    rs.Close
</pre>
</td></tr>
</table></p>


<p>When the Recordset has been completely processed, you need simply to 
append a &lt;/TABLE&gt; tag and prepare a simple message that informs about the 
number of records found. This is the remaining part of the routine:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If recCount = 0 Then
        ' If no record matched the search criteria, drop the table.
        resText = &quot;&lt;I&gt;No record matches the search criteria&lt;/I&gt;&quot;
    Else
        ' Otherwise add the number of found records and complete the table.
        resText = &quot;Found &quot; &amp; recCount &amp; IIf(recCount = 1, _
            &quot; record&quot;, &quot; records&quot;) &amp; &quot;.&lt;P&gt;&quot; &amp; vbCrLf &amp; resText _
            &amp; &quot;&lt;/TABLE&gt;&quot; &amp; vbCrLf
    End If
    ' Substitute the current contents of the divResults section.
    divResults.innerHTML = resText
    Exit Function
    
Error_Handler:
    MsgBox &quot;Error #&quot; &amp; Err.Number &amp; vbCr &amp; Err.Description, vbCritical
End Function
</pre>
</td></tr>
</table></p>


<p>Figure 19-12 shows the program in action, after a query has been 
successfully completed. You can refine this first version in countless ways, for example, by 
adding a maximum number of returned records or by creating Next and Previous 
buttons to let the user navigate through pages of results. (Here's some advice: Prepare 
Next and Previous buttons on the page and make them visible when needed.)
</p>

<p>
<A HREF="javascript:fullSize('F19ph12x.htm')"> <img src="images/F19ph12.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-12.</B> <I>The result of a successful database search.</I><!--/caption-->
</p>
<P>
A problem that you must solve when dynamically adding new controls 
(as opposed to just plain text elements) is how to reference them in code and trap 
their events. As an example, I'll show you how you can add two controls at the right 
of each element in the result table: a CheckBox control that lets the user add that 
particular title to the order, and a Button control that lets him or her ask for 
additional details, such as the image of the cover, the table of contents, and so on.
</p>

<p>Dynamically creating the controls while the code is building the table isn't 
difficult, and in fact you only have to ensure that each new control is assigned a 
unique value for its <I>id </I>property. You must assign this 
<I>id</I> in order to later get a reference to the control. Here's the code that adds one table row for each record that meets 
the search criteria (added lines are in boldface):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>recCount = recCount + 1
<B>bookmarks(recCount) = rs.Bookmark</B>
resText = resText &amp; &quot;&lt;TR&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Author&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Title&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&quot; &amp; rs(&quot;Year&quot;) &amp; &quot;&lt;/TD&gt;&quot; _
<B>    &amp; &quot;&lt;TD&gt;&lt;INPUT TYPE=BUTTON ID=cmdDetails&quot; &amp; Trim$(recCount) _
    &amp; &quot; VALUE=&quot;&quot;Details&quot;&quot;&gt;&lt;/TD&gt;&quot; _
    &amp; &quot;&lt;TD&gt;&lt;INPUT TYPE=Checkbox ID=Buy&quot; &amp; Trim$(recCount) _
    &amp; &quot; NAME=Buy?&gt;&lt;/TD&gt;&quot; _</B>
    &amp; &quot;&lt;/TR&gt;&quot; &amp; vbCrLf
</pre>
</td></tr>
</table></p>


<p>The <I>bookmarks </I>array holds the bookmarks for all the records that meet 
the search criteria; it's defined as a module-level variable, so it's accessible from 
any routine in the DHTMLPage module.</p>

<p>The next step is to trap the <I>onclick </I>event from the Detail buttons, which at 
first seems impossible because you've created the buttons dynamically and no code 
exists for them in the DHTMLPage designer. Fortunately, thanks to event bubbling 
you just need to trap the <I>onclick </I>event for the Document object and check whether 
the event comes from one of the controls you've added dynamically:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Function Document_onclick() As Boolean
    Dim index As Long, text As String
    ' Not all the elements support the Name or ID property.
    On Error GoTo Error_Handler
    ' Check the ID of the element that fired the event.
    If InStr(DHTMLEvent.srcElement.id, &quot;cmdDetails&quot;) = 1 Then
        ' Retrieve the index of the button.
        index = CLng(Mid$(DHTMLEvent.srcElement.id, 11))
        ' Move the Recordset's pointer to that element.
        rs.Bookmark = bookmarks(index)
        ' Show the title of the selected book. (This is just a demo!)
        MsgBox &quot;You requested details for title &quot; &amp; rs(&quot;Title&quot;)
    Else
        ' Return True to enable the default action of Checkbox controls.
        Document_onclick = True
    End If
End Function
</pre>
</td></tr>
</table></p>


<p>Notice how you can test whether the <I>onclick 
</I>event was raised by one of the Detail buttons and how you extract the index of the control.
</p>

<p>Your next task is to prepare a list of all the titles that have been flagged 
for ordering, which you accomplish using the following piece of code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim text As String
For index = 1 To UBound(bookmarks)
    If Document.All(&quot;Buy&quot; &amp; Trim$(index)).Checked Then
        rs.Bookmark = bookmarks(index)
        text = text &amp; rs(&quot;Title&quot;) &amp; vbCr
    End If
Next
If Len(text) Then
    text = &quot;Confirm the order for the following title(s)&quot; &amp; vbCr &amp; text
    If MsgBox(text, vbYesNo + vbExclamation) = vbYes Then
        ' In a real application, you would insert the code that processes
        ' the order right here.
        MsgBox &quot;Order filed!&quot;, vbInformation
    Else
        MsgBox &quot;Order canceled!&quot;, vbCritical
    End If
End If
</pre>
</td></tr>
</table></p>


<p>For more information, see the demonstration application provided on the 
companion CD. The project includes two distinct DHTMLPage modules: One does a 
simple search, and the other builds a more complex page with Button and CheckBox 
controls inside the grid. (See Figure 19-13.) Select the page to run in the Debugging 
tab of the Project Properties dialog box. I explain how to do this in the next section.
</p>

<p>
<A HREF="javascript:fullSize('F19ph13x.htm')"> <img src="images/F19ph13.JPG" width=404 height=303 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-13.</B> <I>A DHTML page that dynamically builds its own array of controls.</I><!--/caption-->
</p>

<A NAME="964"><h3>Testing DHTML applications</h3></A>
<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The beauty of DHTML applications is that you can test your code inside the IDE, 
using all the tools that make debugging Visual Basic applications a relatively easy job. 
You're so used to such debugging features that you've probably missed a rather 
important point: You're executing your DHTML application inside the environment but 
Internet Explorer is behaving as if you compiled your code to an ActiveX DLL that runs 
inside the Explorer's address space. This little magic is made possible by the 
VB6Debug DLL, a file that you find in the main Visual Basic installation directory. Be careful 
not to delete it, or you won't be able to do such cross-process debugging any longer.
</p>

<p>When you test a DHTML application, you can take advantage of all the 
options you find in the Debugging tab of the Project Properties dialog box, shown 
in Figure 19-14. This tab is new to Visual Basic 6 and is disabled in Standard 
EXE projects because it's useful only when you're developing ActiveX components 
intended for consumption by client programs such as Internet Explorer. The 
options this tab offers (which I'll describe shortly) greatly simplify the testing of such 
components because they let you automatically start the client application that uses 
them. You can choose one of four different actions when the current project starts its 
execution inside the environment:
</p>

<p><B>Wait For Components to be Created</B> This is the default action: The Visual Basic 
IDE silently waits until the client application asks the COM subsystem to create the 
component.
</p>

<p><B>Start Component</B> You start one of the components defined in the current 
project and let it decide what to do. The default behavior for DHTMLPage designers is 
to load theHTM source file into Internet Explorer so that the component is 
automatically activated immediately afterward. If you select a UserControl or a 
UserDocument, Visual Basic creates a temporaryHTM page that contains a reference to it and 
then loads the page into the browser; this option lets you test how the control behaves 
in an HTML page. The component you select in this combo box control doesn't 
interfere with the selection you make in the Startup Object combo box in the General 
tab of the same dialog box. For example, you can select a DHTMLPage designer as a 
Start Component and still have the Sub Main procedure automatically execute when 
the component is instantiated.
</p>

<p><B>Start Program</B> This option lets you specify the path of the executable to launch 
when you run the project. Select this option when you know that the selected program 
will in turn create an instance of the component being developed. For example, you 
can create another application in Visual Basic that creates an instance of the 
component under development.
</p>

<p><B>Start Browser with URL</B> You can start the default browser and load an HTML 
page in it. This option enables you to test an ActiveX Control or DLL referenced in 
an existingHTM page. as opposed to the blank temporary page that Visual Basic 
automatically creates when you select the Start Component option.
</p>

<p>The page also contains a check box that you can tick if you want to use 
the existing instance of the browser (if one is already running), or clear if you want 
to start a new instance each time you run the project.
</p>

<p>To have Internet Explorer automatically create an instance of the ActiveX 
DLL that's being developed in the IDE, Visual Basic adds an &lt;OBJECT&gt; tag at the 
beginning of the HTM page that contains all the elements defined in the 
DHTMLPage designer:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT 
ID=&quot;DHTMLPage1&quot; CLASSID=&quot;clsid:8F0A368F-C5BC-11D2-BAC5-0080C8F21830&quot; 
WIDTH=0 HEIGHT=0&gt;&lt;/OBJECT&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph14x.htm')"> <img src="images/F19ph14.JPG" width=404 height=364 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-14.</B> <I>The Debugging tab of the Project Properties dialog box.</I><!--/caption-->
</p>

<A NAME="965"><h3>Deploying a DHTML application</h3></A>

<p>Once you've thoroughly tested your DHTML application, you must prepare a 
distribution package for it. This package comprises the following elements:
</p>

<UL>
<p><li> The main DLL that contains all the compiled code of the application
</li></p>
<p><li> The Visual Basic 6 and OLE Automation runtime files
</li></p>
<p><li> The HTM files that make up the application&#8212;both those that host 
the ActiveX DLL and other regular HTML pages
</li></p>
<p><li> Other files referenced by the HTM files, such as images, data files, and so on
</li></p>
</ul>

<p>You create the distribution package using the Package and Deployment 
Wizard, which you can run as a Visual Basic add-in or as a stand-alone program. This is 
the sequence of actions you should perform:
</p>

<ol>
<p><li> In the topmost field in the Package and Deployment Wizard, select 
the DHTML project, and click on the Package button. The wizard asks 
whether you want to recompile the project if it finds that the DLL file is older 
than any of the source code files.
</li></p>
<p><li> In the Select Type page, select the Internet Package type and click Next.
</li></p>
<p><li> In the Package Folder page, enter the path of a directory in which 
you want the wizard to place the distribution package.
</li></p>
<p><li> In the Included Files page, you'll see a list of all the files that make 
up the application, including Visual Basic and OLE Automation libraries 
but excluding .hml files and data files needed by the application.
</li></p>
<p><li> In the File Source page (see Figure 19-15), specify the site from which 
each file should be downloaded. By default, all the Visual Basic, ADO, and 
other system files are downloaded from the Microsoft Web site, which is often 
the best choice.
</li></p>

<p>
<A HREF="javascript:fullSize('F19ph15x.htm')"> <img src="images/F19ph15.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-15.</B> <I>The File Source page of the Package and Deployment Wizard.</I><!--/caption-->
</p>

<p><li> In the Safety Setting tab, you decide whether the components 
included in the DLL are Safe For Scripting and Safe For Initialization. (For 
more information about these terms, see the section &quot;<A HREF="ch17e.htm#880">Component Download</A>&quot; in Chapter 17.)
</li></p>
<p><li> In the last page of the wizard, you can assign a name to the current 
script so that you can easily repeat these steps in the future.
</li></p>
</ol>

<p>The wizard creates a new directory and puts in it a CAB file (which 
contains the DLL) and all the HTM files belonging to your application. You now need to 
deploy these files to a Web server, and you can use the Package and Deployment Wizard 
to achieve this:
</p>

<ol>
<p><li> Click on the Deploy button and select the script name you entered in 
step 7 of the previous sequence.
</li></p>
<p><li> In the Deployment Method page, select the Web Publishing 
option.
</li></p>
<p><li> In the Items To Deploy page, select which files should be deployed. 
The first time you run the wizard, you normally deploy all the files except 
those that are on the Microsoft Web site, but in subsequent deployment 
operations you can omit the files that haven't changed in the meantime.
</li></p>
<p><li> In the Additional Items To Deploy page, you can select files and 
entire folders for deployment. Here you select all the ancillary files, such 
as images, data files, WAV files, and so on.
</li></p>
<p><li> In the Web Publishing Site page (see Figure 19-16), you must enter 
the complete URL of the site to which items should be deployed (for 
example <I>http://www.yoursite.com</I>).You also enter the Web publishing protocol 
to be used (FTP or HTTP Post). Tick the Unpack And Install Server-Side 
Cab option if you want the CAB file be unpacked after deployment. When 
you press the Next button, the wizard asks whether you want to save 
information about this site in the Registry.
</li></p>

<p>
<A HREF="javascript:fullSize('F19ph16x.htm')"> <img src="images/F19ph16.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-16.</B> <I>The Web Publishing Site page of the Package and Deployment Wizard.</I><!--/caption-->
</p>

<p><li> In the last page of the wizard, you can give a name to this 
deployment script and click the Finish button to initiate the deployment phase.
</li></p>
</ol>

<p>When the deployment is complete, uninstall the ActiveX DLL from your 
system, and then use your browser to navigate to the main HTM page of the application. 
If everything is OK, the browser should download the CAB file, install the DLL, and 
start your compiled DHTML application. The browser knows from what site the DLL 
can be downloaded because the Package and Deployment wizard has patched the 
&lt;OBJECT&gt; tags inside all theHTM pages with a CODEBASE attribute. (The text added 
by the wizard is in boldface.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OBJECT <B>CODEBASE=Search.CAB#Version1,0,0,0 </B>
ID=&quot;DHTMLPage2&quot; CLASSID=&quot;clsid:8F0A368F-C5BC-11D2-BAC5-0080C8F21830&quot; 
WIDTH=0 HEIGHT=0&gt;&lt;/OBJECT&gt;


</pre>
</td></tr>
</table></p>
<P>As you can see in the preceding HTML fragment, the Package and Deployment Wizard produces an incorrect CODEBASE attribute; the version number should be preceded by an equal sign. So you need to manually edit it, like this:
</P>
<P><TABLE><TR><TD><PRE>&lt;OBJECT CODEBASE=Search.CAB#Version=1,0,0,0
</PRE></TD></TR></TABLE>
</P>

<A NAME="966"><h3>Troubleshooting</h3></A>

<p>I conclude this section with a few tips for building better DHTML applications:
</p>

<UL>

<p><li> Ensure that your DHTML page works correctly even if the user has 
disabled image downloading.
</li></p>
 
<p><li> Always use relative URLs when referencing another page in the same 
Web site so that you can then deploy your project to another location 
without breaking the code in it.
</li></p>
<p><li> Use separate style sheets for keeping the appearance of all your 
pages uniform.
</li></p>
<p><li> Don't forget that page elements inherit most, but not all, the 
attributes of their containers. For example, paragraphs inherit the font of the 
Document, but they don't inherit its background color.
</li></p>
<p><li> When working with an external HTML editor, ensure that all the 
programmable elements have been assigned unique values for the 
<I>id </I>property. If there are any duplicates, the DHTMLPage designer adds a digit to 
make them unique, but script code in the page that references that item 
won't work any longer.
</li></p>
</ul>

</BODY>
</HTML>




