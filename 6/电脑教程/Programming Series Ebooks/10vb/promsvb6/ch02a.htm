<html>
<HEAD>
<TITLE>Chapter 2 -- Introduction to Forms</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01c.htm", "ch02b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>



<font size="+3">Chapter 2</font>

<A NAME="22"><H1>Introduction to Forms</H1></A>
<p>Forms are the first Microsoft Visual Basic objects you get acquainted with. 
Although you can write useful programs with only rudimentary user 
interfaces&#8212;command-line driven utilities, for example&#8212;most Visual Basic applications include one or 
more forms, and so you need to be familiar with their properties and features.</p>

<p>Despite their different natures, forms and controls have one important thing 
in common: All of them are Visual Basic 
<I>objects</I>, and as such they expose 
properties, react to methods, and raise events. In this sense, Visual Basic is said to be an 
<I>object-based </I>programming language because the developer's job consists of reading 
and modifying objects' properties, calling their methods, and responding to their 
events. Moreover, Visual Basic can be considered a 
<I>visual </I>programming environment in that the appearance of such objects can be defined by means of interactive tools at 
design time and without writing any code.</p>

<p>Forms and controls expose dozens of properties, and when you explore 
them in the Object Browser you might legitimately wonder how you can learn the 
meaning of all of them. It takes some time until you realize that there are a few 
recurring patterns and that most of the properties are shared among forms and among 
most types of controls. In the end, properties that are peculiar to form objects or to a 
given class of controls are relatively few.</p>

<p>This consideration led me to structure this and the <a href="ch03a.htm">following chapter</a> in a 
somewhat unusual way. Most language manuals introduce forms first, describe each 
intrinsic control class and illustrate its features, passing from one control to the next, and 
so on. In my opinion, this approach forces you to study each particular object as if 
it were a separate case. Such fragmentation of information makes it difficult to get the 
big picture, and in the end it makes for a steeper leaning curve. Worse, this 
mnemonic effort doesn't help much in understanding how things actually work behind the 
scenes. For example, why do some controls expose a 
<I>TabIndex</I> property but not a <I>TabStop</I> property? Why do some controls support the 
<I>hWnd </I>property, while others do not?</p>

<p>After some thinking, I decided to depart from the typical 
control-by-control description and focus instead on the many properties, methods, and events that 
forms and most intrinsic controls have in common. The features and peculiarities of 
forms are covered only later in this chapter, and <a href="ch03a.htm">Chapter 3</a> is entirely devoted to Visual 
Basic's intrinsic controls. This means that you won't see complete programming 
examples until the second half of this chapter, even though I use some shorter pieces of 
code that explain how a property can be used or how you usually react to the events 
that are shared by most types of controls. After all, when you're working in the 
Visual Basic environment, the complete list of all the properties, methods, and 
events supported by each object is always just one keystroke away: Just press F2 to 
display the Object Browser or F1 to get more complete and descriptive help. You don't 
want to read the same information here, do you?</p>

<p>I have another reason for explaining common properties in one section. In 
its six versions, Visual Basic has undergone many important changes: Each version 
has added new features and, consequently, forms and controls have acquired more 
and more new properties, methods, and events. Backward compatibility has always 
been a primary goal in Microsoft's plans, however, and old features are still supported. 
In fact, you can often load a Visual Basic 3 project in the Visual Basic 6 
environment and run it without changing a single line of code. (The most notable exceptions 
are code that refers to external libraries and controls that access databases.) 
Backward compatibility has its drawbacks, though, the first of which is the ever-growing list 
of properties, methods, and events. For example, there are duplicated sets of 
properties that have to do with drag-and-drop, and there are two distinct ways to set 
font attributes. The result is that most beginning programmers are confused, and 
more seasoned developers tend to continue to use the old (and often inefficient) 
features because they don't want to learn a new syntax. I hope that the following 
descriptions of common properties, methods, and events can contribute to making things 
clearer to both kinds of readers.</p>

</BODY>
</HTML>





