<HTML>
<HEAD>
<TITLE>Other Controls</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03h.htm", "ch03j.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="98"><h1>Other Controls</h1></A>

<p>We still have to briefly discuss a few other controls in the Toolbox.</P>

<A NAME="99"><h2>The Timer Control</h2></A>

<p>A Timer control is invisible at run time, and its purpose is to send a periodic 
pulse to the current application. You can trap this pulse by writing code in the Timer's 
<I>Timer</I> event procedure and take advantage of it to execute a task in the background 
or to monitor a user's actions. This control exposes only two meaningful 
properties: <I>Interval</I> and <I>Enabled</I>. 
<I>Interval </I>stands for the number of milliseconds between 
subsequent pulses (<I>Timer</I> events), while 
<I>Enabled</I> lets you activate or deactivate 
events. When you place the Timer control on a form, its 
<I>Interval</I> is 0, which means no events. Therefore, remember to set this property to a suitable value in the Properties 
window or in the <I>Form_Load</I> event procedure:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Form_Load()
    Timer1.Interval = 500    ' Fire two Timer events per second.
End Sub
</pre>
</td></tr>
</table>
</P>


<p>Timer controls let you write interesting programs with just a few lines of 
code. The typical (and abused) example is a digital clock. Just to make things a bit 
more compelling, I added flashing colons:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Timer1_Timer()
    Dim strTime As String
    strTime = Time$
    If Mid$(lblClock.Caption, 3, 1) = &quot;:&quot; Then
        Mid$(strTime, 3, 1)= &quot; &quot;
        Mid$(strTime, 6, 1) = &quot; &quot;
    End If
    lblClock.Caption = strTime
End Sub
</pre>
</td></tr>
</table>
</P>


<P><DIV CLASS="CAUTION"><BLOCKQUOTE><B>CAUTION</B><HR>
You must be careful not to write a lot of code in the 
<I>Timer</I> event procedure because this code will be executed at every pulse and therefore 
can easily degrade your application's performance. Just as important, never 
execute a <I>DoEvents</I> statement inside a 
<I>Timer</I> event procedure because you might 
cause the procedure to be reentered, especially if the 
<I>Interval</I> property is set to a small value and there's a lot of code inside the procedure.
</blockquote></div></P>

<p>Timer controls are often useful for updating status information on a regular 
basis. For example, you might want to display on a status bar a short description of the 
control that currently has the input focus. You can achieve that by writing some code 
in the <I>GotFocus</I> event for all the controls on the form, but when you have dozens 
of controls this will require a lot of code (and time). Instead, at design time load a 
short description for each control in its 
<I>Tag</I> property, and then place a Timer control 
on the form with an <I>Interval</I> setting of 500. This isn't a time-critical task, so you can 
use an even larger value. Finally add two lines of code to the control's 
<I>Timer</I> event:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Timer1_Timer()
    On Error Resume Next
    lblStatusBar.Caption = ActiveControl.Tag
End Sub
</pre>
</td></tr>
</table>
</P>


<A NAME="100"><h2>The Line Control</h2></A>

<p>The Line control is a decorative control whose only purpose is let you draw one 
or more straight lines at design time, instead of displaying them using a 
<I>Line</I> graphical method at run time. This control exposes a few properties whose meaning 
should sound familiar to you by now: 
<I>BorderColor</I> (the color of the line), 
<I>BorderStyle</I>  (the same as a form's 
<I>DrawStyle </I>property), <I>BorderWidth<B> 
</B></I>(the same as a form's <I>DrawWidth</I> 
property), and <I>DrawMode</I>. While the Line control is handy, remember that using 
a <I>Line</I> method at run time is usually better in terms of performance.</P>

<A NAME="101"><h2>The Shape Control</h2></A>

<p>In a sense, the Shape control is an extension of the Line control. It can display 
six basic shapes: Rectangle, Square, Oval, Circle, Rounded Rectangle, and 
Rounded Square. It supports all the Line control's properties and a few more: 
<I>BorderStyle</I> 
(0-Transparent, 1-Solid), <I>FillColor</I>,<B> 
</B>and <I>FillStyle </I>(the same as a form's properties 
with the same names). The same performance considerations I pointed out for the 
Line control apply to the Shape control.</P>

<A NAME="102"><h2>The OLE Control</h2></A>

<p>When OLE first made its appearance, the concept of Object Linking and 
Embedding seemed to most developers nothing short of magic. The ability to embed a 
Microsoft Word Document or a Microsoft Excel worksheet (see Figure 3-17) within 
another Windows application seemed an exciting one, and Microsoft promptly released 
the OLE control&#8212;then called the OLE Container control&#8212;to help Visual Basic 
support this capability.</P>
<P>In the long run, however, the <I>Embedding</I> term in OLE has lost much of its 
appeal and importance, and nowadays programmers are more concerned and thrilled 
about Automation, a subset of OLE that lets them control other Windows applications 
from the outside, manipulating their object hierarchies through OLE. For this reason, I 
won't describe the OLE control: It's a rather complex object, and a thorough 
description of its many properties, methods, and events (and quirks) would take too much space.</P>

<p>
<A HREF="javascript:fullSize('F03ph17x.htm')"> <img src="images/F03ph17.JPG" width=404 height=274 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 3-17.</B> <i>Your Visual Basic application can host an Excel worksheet&#8212;and its menus too.</i><!--/caption-->
</p>

</BODY>
</HTML>





