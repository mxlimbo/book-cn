<HTML>
<HEAD>
<TITLE>The MonthView Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11d.htm", "ch11f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="487"><h1>The MonthView Control</h1></A>
<p>
<img src="images/new.jpg" width=102 height=87 border=0>
</p>

<p>Visual Basic 6 comes with two new common controls for dealing with dates: 
The MonthView control and the DateTimePicker control. The former is a 
calendarlike control, and the latter is a text box control for entering dates and times. The two 
are closely related in that the DateTimePicker control uses a MonthView control 
when the user drops down a calendar for selecting a date.</p>

<A NAME="488"><h2>Setting Design-Time Properties</h2></A>
<p>After you place a MonthView control on a form, you can right-click on it to 
display its custom Property Pages dialog box, shown in Figure 11-4. The 
<I>Value </I>property is the date highlighted in the control. (By the way, click on the Down arrow to the 
right of the <I>Value</I> field to get a taste of what a DateTimePicker control is.) 
<I>MinDate</I> and <I>MaxDate </I>set the range of valid dates that can be selected in the MonthView 
control; the <I>StartOfWeek </I>property determines the weekday that appears in the leftmost 
column in the calendar.</p>

<p>
<A HREF="javascript:fullSize('F11ph04x.htm')"> <img src="images/F11ph04.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-4.</B> <i>Setting design-time properties of a MonthView control.</i><!--/caption-->
</p>

<p>A number of Boolean properties affect the appearance and the behavior of 
the control. If <I>ShowWeekNumbers </I>is True, the MonthView control displays the 
number of weeks elapsed since the beginning of the year. If 
<I>MultiSelect</I> is True, the user is allowed to select a range of dates: In this case, the maximum number of 
consecutive days that can be selected is equal to the value of the 
<I>MaxSelCount </I>property. (The default is one week.) The 
<I>ShowToday</I> property lets you decide whether the 
Today legend should be displayed.</p>

<p>The MonthView control can display up to 12 months, and the number of 
displayed months is the product of the properties 
<I>MonthRows </I>and <I>MonthColumns</I>. By default, when the user clicks on the arrow buttons the control scrolls a number 
of months equal to the months displayed in the control, but you can modify this 
behavior by assigning a nonzero value to the <I>ScrollRate 
</I>property.</p>

<p>The MonthView control exposes many properties that are related to 
foreground and background colors, and it's easy to confuse them. Refer to Figure 11-5 to understand how you can use the 
<I>ForeColor</I>, <I>TitleForeColor</I>, 
<I>TitleBackColor</I>, <I>MonthBackColor</I>, 
and<I> TrailingForeColor </I>properties. (<I>Trailing 
days</I> are those days that belong to previous or next months.) The 
<I>MonthBackColor</I> property also affects the color of weekday names and numbers. Oddly, the control also 
exposes the standard <I>BackColor </I>property, but it doesn't appear to have any other 
effect than coloring a line of pixels near the bottom and right borders.</p>

<p>
<img src="images/F11ph05x.gif" width=406 height=261 border=0>
</p><p>
<!--caption--><B>Figure 11-5.</B> <i>You can modify the colors used by individual areas in a MonthView control.</i><!--/caption-->
</p>

<p>Among the many design-time properties, you might notice in particular 
the <I>DataSource</I>, <I>DataField</I>, 
<I>DataMember</I>,<I> </I>and <I>DataFormat </I>properties. In fact, 
MonthView is a data-aware control that can be bound to any 
<I>Date</I> field exposed by a standard Data control, a RemoteData control, or any ADO data source.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
If you're going to localize your application to other languages, 
you'll be glad to know that the MonthView control automatically adapts itself to 
the user's locale and correctly translates all the month and day names. There's 
only a minor bug in this implementation: The Today legend isn't localized, so 
you should set the <I>ShowToday </I>property to False and provide a legend 
elsewhere on the form.
</blockquote></div></p>

<A NAME="489"><h2>Run-Time Operations</h2></A>
<p>Users can act on the MonthView control in several ways, a few of which aren't 
immediately apparent. Most people can easily figure out that users can move to the 
next or previous month by clicking on one of the two arrows near the control's title 
and that they can select a date simply by clicking on it. Some users will even figure 
out that they can select a range of dates (if <I>MultiSelect 
</I>is True) by clicking on a date while pressing the Shift key. 
I doubt, however, that many users guess that a click on 
the month's name in the control's title displays a pop-up menu that lets them move 
to any month in the current year. Even more counter-intuitive is that a click on 
the year number displays two spin buttons that can take a user to any year, future or 
past. (See Figure 11-6.) Don't forget to mention these hidden features in your 
program's documentation, or even better, show their usage in a Label control on the same 
form as the MonthView control.</p>

<p>
<A HREF="javascript:fullSize('F11ph06x.htm')"> <img src="images/F11ph06.JPG" width=404 height=292 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-6.</B> <i>The demonstration program lets you experiment with all the advanced features of the MonthView control. The spin buttons in the title area appear if you click on the year number.</i><!--/caption-->
</p>

<A NAME="490"><h3>Retrieving the current Date value</h3></A>
<p>Unless you need to perform special operations, using the MonthView control in 
code is straightforward. The control exposes the 
<I>Value </I>property, which you can assign to highlight a given date or read to retrieve the day selected by the user. You don't 
even need to extract the day, month, or year portions from the 
<I>Value </I>property because the control exposes also the 
<I>Day</I>, <I>Month</I>, and <I>Year</I> properties. Conveniently, 
these properties can be assigned too&#8212;for example, you can programmatically display 
the next month using this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
If MonthView1.Month &lt; 12 Then
    MonthView1.Month = MonthView1.Month + 1
Else
    MonthView1.Month = 1
    MonthView1.Year = MonthView1.Year + 1
End If
</pre>
</td></tr>
</table></p>

<p>The <I>DayOfWeek </I>property returns the weekday number of the selected date. 
Also, this property is writable, so, for example, you can highlight Monday in the 
current week using the following single statement:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
MonthView1.DayOfWeek = vbMonday
</pre>
</td></tr>
</table></p>

<p>Be aware, however, that <I>Day</I>, 
<I>Month</I>, <I>Year</I>, and <I>DayOfWeek </I>properties can't 
be assigned if <I>MultiSelect </I>is True.</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
While experimenting with the MonthView control, I've 
discovered an unexpected behavior: If the control has the focus and you click on 
another control on the same form, the other control gets the focus but not the 
<I>Click</I> event. This might puzzle your users, much as it confused me when I realized that if 
the focus is on a MonthView control, a click on push buttons doesn't yield the 
expected results. This bug will probably be fixed in a future service pack. In 
the meantime, the workaround to this problem is really cumbersome, to say the 
least, and relies on the <I>MouseDown </I>event instead of the 
<I>Click </I>event:
</blockquote></div></p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim MousePressed As Boolean       ' A form-level variable

Private Sub cmdTryMe_MouseDown(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    MousePressed = True
    Call DoSomething
End Sub
Private Sub cmdTryMe_MouseUp(Button As Integer, _
    Shift As Integer, X As Single, Y As Single)
    MousePressed = False
End Sub
Private Sub cmdTryMe_Click()
    ' This event might be called as a response to a hot key 
    ' or a click when the focus isn't on the MonthView control.
    If Not MousePressed Then Call DoSomething
End Sub
Private Sub DoSomething()
    ' The code that must execute when the button is clicked
    MsgBox &quot;Button has been clicked!&quot;
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="491"><h3>Reacting to range selections</h3></A>
<p>You can set the <I>MinDate </I>and <I>MaxDate 
</I>property to limit the range of date values 
that the user can select. If the <I>MultiSelect 
</I>property is True, you can select a number of consecutive dates. You retrieve the selected range using the 
<I>SelStart </I>and <I>SelEnd </I>properties. (These properties return Date values.) The maximum number of days in 
the selected range depends on the value of the <I>MaxSelCount 
</I>property.</p>

<p>Each time the user selects a new date, a custom 
<I>SelChange </I>event fires. This event receives the start date and end date of the selected range and enables the 
programmer to cancel the operation. For example, you can refuse a selection that includes 
a weekend day:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub MonthView1_SelChange(ByVal StartDate As Date, _
    ByVal EndDate As Date, Cancel As Boolean)
    Dim d As Date
    ' A Date variable can be used to control a For loop.
    For d = StartDate To EndDate
        If Weekday(d) = vbSunday Or Weekday(d) = vbSaturday Then
            ' Cancel the selection if the day is Sunday or Saturday.
            Cancel = True
            Exit For
        End If
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
The MonthView control suffers from a bug. Unless the user 
has selected three or more dates, setting the 
<I>Cancel</I> parameter to True doesn't actually cancel the operation. This bug will probably be fixed in future versions 
of the control, but currently there isn't any simple workaround for it. (I'm 
currently using version 6.00.8177 of the MsComCt2.ocx file.)
</blockquote></div></p>

<p>Two other custom events, <I>DateClick </I>and 
<I>DateDblClick</I>, fire when the user selects a new date. When a user clicks on a date, your Visual Basic application 
receives a <I>SelChange </I>event and then a <I>DateClick 
</I>event. If a date is double-clicked, your code receives 
<I>SelChange</I>, <I>DateClick</I>, 
<I>DateDblClick</I>,<I> </I>and <I>DateClick </I>events, in this order, 
so you should account for the fact that a double-click also fires two 
<I>DateClick </I>events. Both events receive one argument, the date being clicked or double-clicked:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub MonthView1_DateDblClick(ByVal DateDblClicked As Date)
    Dim descr As String
    descr = InputBox(&quot;Enter a description for day &quot; &amp; _
        FormatDateTime(DateDblClicked, vbLongDate))
    If Len(descr) Then
        ' Save the description (omitted) ...
        ' ...
    End If
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="492"><h3>Finding the optimal size</h3></A>
<p>The MonthView control gives you several ways, apart from its many color 
properties, to affect the control's appearance. For example, you can show up to 12 
months in the control by assigning suitable values to the 
<I>MonthRows</I> and <I>MonthColumns </I>properties. Changing these properties at run time, however, can cause a problem 
in that you have no control over a MonthView's size (which depends on the 
number of months displayed, the font used, the presence of a border, and other settings). 
To help you determine the best values for the 
<I>MonthRows</I> and <I>MonthColumns </I>properties, the MonthView control supports the 
<I>ComputeControlSize </I>method. This method takes as arguments the number of rows and columns and returns the computed 
width and height of the corresponding MonthView control in its third and fourth argument.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Evaluate the size of a MonthView control with 2 rows and 3 columns
Dim wi As Single, he As Single
MonthView1.ComputeControlSize 2, 3, wi, he
</pre>
</td></tr>
</table></p>

<p>The <I>ComputeControlSize </I>method comes in handy when you want to display 
the highest number of months in a form. The following routine has been extracted 
from the demonstration program provided on the companion CD:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdTile_Click()
    ' Find the best value for MonthRows and MonthColumns.
    Dim rows As Integer, cols As Integer
    Dim wi As Single, he As Single
    For rows = 6 To 1 Step -1
        ' Note how we avoid creating more than 12 months.
        For cols = 12 \ rows To 1 Step -1
            MonthView1.ComputeControlSize rows, cols, wi, he
            If wi &lt;= ScaleWidth _ MonthView1.Left And _
                he &lt; ScaleHeight _ MonthView1.Top Then
                MonthView1.MonthRows = rows
                MonthView1.MonthColumns = cols
                Exit Sub
            End If
        Next
    Next
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="493"><h3>Highlighting dates</h3></A>
<p>The MonthView control lets the programmer draw attention to dates in the 
calendar by displaying them with a bold attribute. You could use this feature whenever 
the contents of the control changes by writing code in the 
<I>GetDayBold </I>event procedure, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Display all Sundays and major holidays in boldface.
Sub MonthView1_GetDayBold(ByVal StartDate As Date, _
    ByVal Count As Integer, State() As Boolean)
    Dim i As Long, d As Date
    d = StartDate
    For i = 0 To Count - 1
        If Weekday(d) = vbSunday Then
            State(i) = True          ' Mark all Sundays.
        ElseIf Month(d) = 12 And Day(d) = 25 Then
            State(i) = True          ' Xmas time.
        Else
            ' Deal here with other holidays...
        End If
        d = d + 1
    Next
End Sub
</pre>
</td></tr>
</table></p>

<p>The <I>GetDayBold </I>event receives three parameters: 
<I>StartDate </I>is a Date value that corresponds to the first day displayed in the control (this includes trailing days, 
which are the days that belong to the previous month), 
<I>Count </I>is the number of visible days, and 
<I>State </I>is a zero-based Boolean array with 
<I>Count </I>elements. Thus, to enforce a bold attribute to a given date, you only have to assign True to the corresponding item 
in the <I>State </I>array.</p>

<p>Alternatively, you can modify the bold attribute for any date that's 
currently displayed in the control by writing code outside the 
<I>GetDayBold </I>event procedure. You do this using 
<I>VisibleDays </I>and <I>DayBold </I>properties. The 
<I>VisibleDays </I>property accepts an index in the range from 1 to the number of visible days and returns 
the Date value that corresponds to that day. The problem with this property is that 
there's no easy way to know in advance how many days are visible in the control and 
therefore what the highest value for the index is. The Visual Basic documentation 
incorrectly states that the index must be in the range from 1 through 42, but this 
doesn't take into account the MonthView control's ability to display multiple months. 
The simplest way to deal with this issue is to set up an error handler, as in the 
following code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
    Dim tmpDate As Date
    ' Exit the loop when the index isn't valid any longer.
    On Error GoTo EndTheLoop
    For i = 1 To 366
        ' Visit each day.
        tmpDate = MonthView1.VisibleDays(i)
    Next
EndTheLoop:
    ' Get here when the index becomes invalid.
</pre>
</td></tr>
</table></p>

<p>The <I>VisibleDays </I>property returns a Date value whose fractional portion is 
equal to the current time on your system. This undocumented behavior can get in the 
way when you compare the returned value to a Date constant or variable.</p>

<p>The <I>DayBold </I>property takes as an argument a Date value that corresponds 
to a visible day and sets or returns the bold attribute for that day. This property lets 
you mark a number of days at the same time even if you aren't processing a 
<I>GetDayBold </I>event. You typically use the <I>DayBold 
</I>property together with the <I>VisibleDays 
</I>property, as in the following piece of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub cmdMark_Click()
    Dim i As Integer
    On Error GoTo EndOfLoop
    For i = 1 To 999
        ' Mark all Fridays.
        If Weekday(MonthView1.VisibleDays(i)) = vbFriday Then
            MonthView1.DayBold(MonthView1.VisibleDays(i)) = True
        End If
    Next
EndOfLoop:
End Sub
</pre>
</td></tr>
</table></p>

<A NAME="494"><h3>Implementing drag-and-drop</h3></A>
<p>The MonthView control is an ideal source for drag-and-drop operations because 
it permits you to copy a date value to any other control that accepts a string 
through this mechanism. The key for a correct implementation of drag-and-drop is the 
<I>HitTest </I>method, the syntax of which is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Area = MonthView1.HitTest(X, Y, HitDate)
</pre>
</td></tr>
</table></p>

<p><I>Area </I>is an integer that indicates which area of the control the 
<I>x </I>and<I> y</I> coordinates correspond to. (See the Visual Basic documentation or the demonstration 
program's source code on the companion CD for a list of all possible return values.) When 
the function returns the value 4-mvwCalendarDay, the 
<I>HitDate </I>variable is assigned the Date value of the day in the calendar at 
<I>x</I> and<I> y</I> coordinates. With this method, 
you'll find it easy to implement an effective drag-and-drop routine. The following code 
is taken from the demonstration program shown in Figure 11-6:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Start a drag-and-drop operation.
Private Sub MonthView1_MouseDown(Button As Integer, Shift As Integer, _
    X As Single, Y As Single)
    ' Exit if the right button isn't clicked.
    If Button &lt;&gt; vbRightButton Then Exit Sub
    ' Exit if mouse isn't over a valid date.
    If MonthView1.HitTest(X, Y, DraggedDate) &lt;&gt; mvwCalendarDay Then 
        Exit Sub
    End If
    ' Now DraggedDate contains the date to be dragged,
    ' and we can start the drag operation.
    MonthView1.OLEDrag
End Sub

Private Sub MonthView1_OLEStartDrag(Data As MSComCtl2.DataObject, _
    AllowedEffects As Long)
    ' When this event fires, DraggedDate contains a valid date.
    Data.SetData Format(DraggedDate, &quot;long date&quot;)
    AllowedEffects = vbDropEffectCopy
End Sub
</pre>
</td></tr>
</table></p>

<p>The preceding code assumes that the <I>OLEDropMode 
</I>property of the control over which the mouse button is released is set to the value 2-Automatic.</p>

</BODY>
</HTML>





