<HTML>
<HEAD>
<TITLE>The DHTML Object Model</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19c.htm", "ch19e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="932"><h1>The DHTML Object Model</h1></A>

<p>To write effective Dynamic HTML applications, you must become familiar with 
the object model exposed by the browser that hosts the DHTML page. Figure 19-4 
shows the complete Window object hierarchy. I'm not going to dissect every 
property, method, and event in this hierarchy; instead, I'll focus on the objects that are the 
most interesting and useful to a Visual Basic programmer.
</p>

<p>
<A HREF="javascript:fullSize('F19ph04x.htm')"> <img src="images/F19ph04.JPG" width=404 height=581 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-4.</B> <i>The DHTML object model.</i><!--/caption-->
</p>

<A NAME="933"><h2>The Window Object</h2></A>

<p>The Window object is the root of the DHTML hierarchy. It represents the window 
inside which the HTML page (which is represented by the Document object) is displayed.
</p>

<A NAME="934"><h3>Properties </h3></A>

<p>If a window contains frames, you can access them by using the 
<I>Frames </I>collection, which contains other Window objects. Several other properties return a reference 
to Window objects. If the window is itself inside a frame, you can get a reference to 
its container window with the <I>parent </I>property. The 
<I>top </I>property returns a reference to the topmost window. In general, you can't anticipate which window is 
referenced by the latter two properties because the user might have loaded the page in a 
frame created by another HTML page external to your application. The 
<I>opener </I>property returns a reference to the window that opened the current one.
</p>

<p>You can query the open or closed state of the window using the 
<I>closed </I>property. The <I>status </I>property sets and returns the text displayed in the browser's 
status bar, and <I>defaultStatus </I>is the default string in the status bar.
</p>

<A NAME="935"><h3>Methods</h3></A>

<p>The Window object exposes several methods. The 
<I>open </I>method loads a new document in the window, and 
<I>showModalDialog </I>loads an HTML page in a modal 
window:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Jump to another page.
window.open &quot;http://www.vb2themax.com/tips&quot;
</pre>
</td></tr>
</table></p>


<p>You can close the window using the <I>close 
</I>method. A few other methods&#8212;<I>alert</I>, 
<I>confirm</I>, and <I>prompt</I>&#8212;display message box and input box dialog boxes, but 
you usually get a better result using Visual Basic's 
<I>MsgBox </I>and <I>InputBox </I>commands.
</p>

<p>The <I>focus </I>method is similar to Visual Basic's 
<I>SetFocus </I>method. The <I>blur </I>method moves the input focus to the next window, as if the user had pressed the Tab 
key. The <I>scroll </I>method accepts an <I>x-y 
</I>pair of coordinates and scrolls the window to 
ensure that the specified point is visible in the browser:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Scroll the window to the top.
window.scroll 0, 0
</pre>
</td></tr>
</table></p>


<p>The <I>execScript</I> method adds a lot of flexibility to your program because it 
lets you manufacture a piece of script code and execute it on the fly. The 
following example uses this method to implement a cheap calculator with just a bunch of 
lines of code (see Figure 19-5):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Insert your expression here:
&lt;INPUT TYPE=Text NAME=&quot;Expression&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
Then click to evaluate it:
&lt;INPUT TYPE=BUTTON NAME=&quot;Evaluate&quot; VALUE=&quot;Evaluate&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Result&quot; VALUE=&quot;&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Evaluate_onclick
    If Expression.Value = &quot;&quot; Then
        MsgBox &quot;Please enter an expression in the first field&quot;
        Exit Sub
    End If

    On Error Resume Next
    window.execScript &quot;Result.value = &quot; &amp; Expression.Value, &quot;VBScript&quot;
    If Err Then
         MsgBox &quot;An error occurred - please type a valid expression&quot;
    End If 
     End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph05x.htm')"> <img src="images/F19ph05.JPG" width=404 height=168 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-5.</B> <i>An expression evaluator built with DHTML code.</i><!--/caption-->
</p>

<p>Don't forget to pass the &quot;VBScript&quot; string as a second argument to the 
<I>execScript </I>function because the default language is JavaScript.
</p>

<p>This powerful method can even add script procedures to the page. The 
following example demonstrates this feature by creating a table of values using an 
expression the user entered in a TextBox control. (This is something that would be very 
difficult to do in Visual Basic!)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter an expression:   FN(x) = 
&lt;INPUT TYPE=Text NAME=&quot;Expression&quot; VALUE=&quot;x*x&quot;&gt;&lt;P&gt;
Click here to generate a table of values:
&lt;INPUT TYPE=BUTTON NAME=&quot;CreateTable&quot; VALUE=&quot;Create Table&quot;&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub CreateTable_onclick()
' Create the FUNC() function. 
' (Enter the following two lines as a single VBScript statement,)
window.execScript &quot;Function FUNC(x): FUNC = &quot; 
    &amp; Expression.Value &amp; &quot;: End Function&quot;, &quot;VBScript&quot;
' Create the HTML code for the table.
code = &quot;&lt;H1&gt;Table of values for FN(x) = &quot; &amp; Expression.Value &amp; &quot;&lt;/H1&gt;&quot;
code = code &amp; &quot;&lt;TABLE BORDER&gt;&quot;
code = code &amp; &quot;&lt;TR&gt;&lt;TH&gt;  x  &lt;/TH&gt;&lt;TH&gt;  FN(x)  &lt;/TH&gt;&lt;/TR&gt;&quot;
For n = 1 To 100
   code = code &amp; &quot;&lt;TR&gt;&lt;TD&gt; &quot; &amp; n &amp; &quot; &lt;/TD&gt;&quot;
   code = code &amp; &quot;&lt;TD&gt; &quot; &amp; FUNC(n) &amp; &quot; &lt;/TD&gt;&lt;/TR&gt;&quot;
Next
code = code &amp; &quot;&lt;/TABLE&gt;&quot;

' Write the code to a new HTML page.
window.document.clear
window.document.open
window.document.write code
window.document.close
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>I've already explained the remaining methods of the Window object: 
<I>setInterval</I>, <I>setTimeout</I>, 
<I>clearInterval</I>, and <I>clearTimeout. </I>(See the section &quot;<A HREF="ch19c.htm#930">Timer Events</A>&quot; 
earlier in this chapter.)
</p>

<A NAME="936"><h3>The History object</h3></A>

<p>The History object represents all the URLs that the user has visited in the 
current session. It exposes only one property and three methods.</p>

<p>The <I>length </I>property returns the number of URLs stored in the object. The 
<I>back </I>and <I>forward </I>methods load the page at the previous and next URL in the history 
list and therefore correspond to a click on the Back and Forward buttons on the 
browser's toolbar. They're useful for adding buttons on the page that perform the same 
function, as here:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub cmdPrevious_onclick()
    window.history.back
End Sub
</pre>
</td></tr>
</table></p>


<p>The only other method of this object is 
<I>go</I>, which loads the URL at the <I>n</I>th position in the history list:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the third page in the history list.
window.history.go 3
</pre>
</td></tr>
</table></p>


<A NAME="937"><h3>The Navigator object</h3></A>

<p>The Navigator object represents the browser program and provides information 
about it capabilities. The <I>appCodeName</I>, <I>appName, 
</I>and <I>appVersion </I>properties return the code name, the product name, and the version of the browser. The 
<I>cookieEnabled</I> property returns True if the browser supports cookies; 
<I>userAgent </I>is the browser name sent as a string to the server in the HTTP request. You can use the following 
VBScript code to display some information about your browser:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Dynamically create an HTML page with all the requested information.
Set doc = window.document
Set nav = window.navigator
doc.open
doc.write &quot;&lt;B&gt;appCodeName&lt;/B&gt; = &quot; &amp; nav.appCodeName &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;appName&lt;/B&gt; = &quot; &amp; nav.appName &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;appVersion&lt;/B&gt; = &quot; &amp; nav.appVersion &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;cookieEnabled&lt;/B&gt; = &quot; &amp; nav.cookieEnabled &amp; &quot;&lt;BR&gt;&quot;
doc.write &quot;&lt;B&gt;userAgent&lt;/B&gt; = &quot; &amp; nav.userAgent &amp; &quot;&lt;BR&gt;&quot;
doc.close
</pre>
</td></tr>
</table></p>


<p>A few other properties return information about the browser, including 
<I>cpuType</I>, <I>userLanguage</I>, 
<I>systemLanguage</I>, and <I>platform</I>. The only method worth noting 
is <I>javaEnabled</I>, which returns True if the browser supports the Java language.
</p>

<p>The Navigator object also exposes two collections: The 
<I>mimeTypes </I>collection includes all the document and file types that the browser supports, and the 
<I>plugins </I>collection contains all the objects in the page.
</p>

<A NAME="938"><h3>The Location object</h3></A>

<p>The Location object represents the URL of the page currently displayed in the 
browser. Its most important property is 
<I>href</I>, which returns the complete URL string. All 
the other properties contain a portion of the URL string: 
<I>hash </I>(the portion following the # symbol), 
<I>hostname </I>(the name of the host), <I>host 
</I>(the <I>hostname:port </I>portion of the URL), 
<I>port </I>(the port number), <I>protocol </I>(the first part of the URL that holds the 
protocol name), and <I>search </I>(the portion following the ? in the URL).
</p>

<p>This object also exposes three methods: <I>assign 
</I>(loads a different page), <I>replace </I>(loads a page and substitutes the current entry in the history list), and 
<I>replace </I>(reloads the current page).
</p>

<A NAME="939"><h3>The Screen object</h3></A>

<p>The Screen object exposes properties about the screen and doesn't support 
any methods. The <I>width </I>and <I>height </I>properties are the dimensions of the screen in 
pixels and can be useful when you're deciding where to place a new window. 
The <I>colorDepth </I>property is the number of color planes supported and is typically 
used when the server site contains several similar images and you want to download 
the one that best fits the number of colors supported by the user's video card. 
The <I>bufferDepth </I>is a writable property that corresponds to the color depth of the 
off-screen buffer that the browser uses to display images. This property lets you display an 
image with a color depth different from its original color depth. The 
<I>updateInterval </I>property can be assigned the interval at which the browser redraws the page. (This 
is especially useful to reduce flickering when you're doing animations.)
</p>

<p>Internet Explorer also supports the 
<I>availWidth</I> and <I>availHeight </I>properties, 
which return the size of the screen that isn't occupied by visible taskbars (such as the 
Microsoft Windows and the Microsoft Office taskbars), and the 
<I>fontSmoothingEnabled</I> Boolean property, which specifies whether the browser should 
use smoother fonts if necessary.
</p>

<A NAME="940"><h3>The Event object</h3></A>

<p>I explained many features of the Event object earlier in this chapter. This object 
is used within VBScript event procedures to read and possibly modify event 
arguments, to specify whether the default action should be canceled, and to cancel event 
bubbling. The Event object exposes only properties, no methods.
</p>

<p>Four pairs of properties return the coordinates of the mouse cursor.The 
<I>screenX </I>and <I>screenY </I>properties give you the position relative to the upper left corner of 
the screen, <I>clientX </I>and <I>clientY </I>give you the position relative to the upper left corner 
of the browser's client area; <I>x </I>and <I>y 
</I>give you the position relative to the container 
of the object that fired the event; and <I>offsetX 
</I>and <I>offsetY </I>give you the position 
relative to the object that fired the event. A ninth property, 
<I>button</I>, returns the state of the mouse button as a bit-fielded value (1=left button, 2=right button, 4=middle button).
</p>

<p>Four properties have to do with the state of the keyboard: The 
<I>keycode </I>property is the ASCII code of the key that was pressed (and you can assign it to 
modify the effect of a key press), whereas 
<I>altKey</I>, <I>ctrlKey </I>and <I>shiftKey </I>return the state of 
the corresponding shift key.</p>

<p>Three properties return a reference to an element of the page. The 
scrElement is the item that originally fired the event; it can be different from the 
Me object if you're trapping the event within the event procedure of an object that's higher in the 
hierarchy. The <I>fromElement </I>and the <I>toElement 
</I>properties return the element being left and entered, respectively, during 
<I>onmouseout </I>or <I>onmouseover </I>events.
</p>

<p>You can set the <I>cancelBubble </I>property to False to cancel event bubbling. 
You can set the <I>returnValue </I>property to False to cancel the default action associated 
with the event. The <I>type </I>property returns the name of the event without the leading 
<I>on </I>characters (such as <I>click</I>, 
<I>focus</I>, and so on).

<A NAME="941"><h2>The Document Object</h2></A>

<p>The Document object represents the contents of the page currently loaded in 
the browser. It's probably the richest DHTML object in terms of properties, 
methods, events, and functionality.
</p>

<A NAME="942"><h3>Properties</h3></A>

<p>Several properties return information about the state of the document and the 
page loaded in it. The <I>title </I>property contains the title of the document (the string 
defined by the &lt;TITLE&gt; tag); <I>URL</I> holds the Uniform Resource Locator of the page (such 
as <I>http://www.vb2themax.com</I>); <I>domain 
</I>returns the security domain of the document; and 
<I>lastModified </I>returns the date and time of the most recent edit operation for 
the document. The <I>referrer </I>property is the URL of the page that referred the current one.
</p>

<p>Some properties set or return color values. For example, 
<I>fgcolor </I>and <I>bgcolor </I>give you the text and background colors of the page; changing these properties has 
an immediate effect on the page (except in the areas where specific color settings 
have been defined). Three properties control the color of hyperlinks: 
<I>linkColor </I>returns the color for links that haven't been visited yet; 
<I>vLinkColor </I>tells you the color for visited links, and 
<I>alinkColor </I>returns the color for active links (that is, links under the 
cursor when the mouse button is pressed).
</p>

<p>A number of properties return references to other objects in the page. The 
<I>body </I>property gives you a reference to the Body object; 
<I>parentWindow</I> returns a reference to the Window object that this document belongs to; 
<I>location</I> is a reference to the Location object exposed by the parent Window; and 
<I>activeElement </I>is a reference to the page element that has the focus. (When you've just downloaded the page 
this property returns a reference to the Body element.)
</p>

<p>The <I>readyState </I>property returns a string that describes the current 
download state of the document. This is a valuable information because it lets you avoid 
the errors that would occur if you reference an object&#8212;such as an image&#8212;while the 
page is still downloading:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If document.readyState = &quot;complete&quot; Then
    ' Fill the text box control only if the page has been completely
    ' downloaded.
    MyTextBox.Value = &quot;Good morning dear user!&quot;
End If
</pre>
</td></tr>
</table></p>


<p>This property is so important that the Document object fires a special 
event, <I>onReadyStateChange</I>, when its value changes. Thanks to this event, you don't 
have to continuously poll this property to determine when it's safe to act on page elements.
</p>

<A NAME="943"><h3>Methods</h3></A>

<p>We have already seen several methods of the Document object, namely the 
<I>clear</I>, <I>open</I>, <I>write</I>, and <I>close 
</I>methods that we've used to dynamically create new 
HTML pages. The <I>writeln </I>method is a variant of the 
<I>write </I>method that adds newline characters and supports multiple arguments:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>document.writeln &quot;First Line&lt;BR&gt;&quot;, &quot;Second Line&quot;
</pre>
</td></tr>
</table></p>


<p>Remember that the added newline character usually has no effect if the 
output is pure HTML unless you're inserting text inside a pair of &lt;PRE&gt; and &lt;/PRE&gt; tags or &lt;TEXTAREA&gt; and &lt;/TEXTAREA&gt; tags.
</p>

<p>The <I>elementFromPoint </I>method returns the element that corresponds to a 
given pair of coordinates (It's therefore is similar to the 
<I>HitTest </I>method exposed by a few Visual Basic controls.) You can use this method inside a mouse event procedure 
to display a description of the object under the mouse cursor:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Document_onmousemove()
     On Error Resume Next     ' Not all elements have a Name property.
    ' Fill a text box with the description of the element under the mouse.
    Set element = document.elementFromPoint(window.event.x, window.event.y)
     Select Case element.Name
        Case &quot;txtUserName&quot;
            txtDescription.Value = &quot;Enter your username here&quot;
        Case &quot;txtEmail&quot;
            txtDescription.Value = &quot;Enter your e-mail address here&quot;
        ' And so on.
    End Select
End Sub 
</pre>
</td></tr>
</table></p>


<p>Earlier in this chapter, I showed you how to use the Document's 
<I>createElement</I> method to create new Option objects and dynamically fill a Select control at run 
time. You can also use this method to create new &lt;IMG&gt; tags and &lt;AREA&gt; tags. (The 
latter tags create image maps, which aren't covered in this book, however.)
</p>

<A NAME="944"><h3>Child collections</h3></A>

<p>The Document object exposes several child collections, which let you iterate on 
all the elements in the page. These collections aren't disjoint, so an element can 
belong to more than one collection. For example, the 
all collection gathers all the tags and the elements in the body of the document, but the Document object also 
exposes the anchors, images, and links 
collections, whose names are self-explanatory. 
The scripts collection contains all the &lt;SCRIPT&gt; tags, 
forms is the collection of existing forms, 
styleSheets gathers all the styles defined for the document. A few 
collections concern objects that I haven't covered in this chapter, such as the 
frames, embeds, and plugins collections.
</p>

<p>Working with these collections is similar to working with Visual Basic's 
collections. You can refer to an element in the collection using its index (collections 
are zero-based) or key (in most cases the key corresponds to the name of the 
element). The most relevant difference is that DHTML collections support the 
<I>length </I>property instead of the <I>Count</I> property. You can iterate on all the items of a collection 
using a <I>For Each...Next </I>loop, and you can determine the type of an element by 
peeking at its <I>tagName </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the tags of all the items in the page.
For Each x In document.all
    text = text &amp; x.tagName &amp; &quot;, &quot;
Next
text = Left(text, Len(text) _ 2)        ' Drop the last comma.
MsgBox text
</pre>
</td></tr>
</table></p>


<p>If you want to retrieve only elements with a given tag, you can filter the 
collection using its <I>tags </I>method, which accepts the name of the tag you're filtering on:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the names of all &lt;INPUT&gt; elements.
For Each x In document.all.tags(&quot;INPUT&quot;)
    text = text &amp; x.Name &amp; &quot;, &quot;
next
MsgBox Left(text, Len(text) _ 2)        ' Drop the last comma.
</pre>
</td></tr>
</table></p>


<p>The <I>tags</I> method returns a collection, so you can store its return value in 
a variable for later. Or you can query its <I>length 
</I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set imgCollection = document.all.tags(&quot;IMG&quot;)
MsgBox &quot;Found &quot; &amp; imgCollection.length &amp; &quot; images.&quot;
</pre>
</td></tr>
</table></p>


<p>The forms collection is special, in that it exposes the child 
elements collection, which in turn contains all the controls in the form. A page can contain multiple 
forms, even though all the examples in this chapter use only one form:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' List the names of all the controls on the first form in the page.
For Each x In document.forms(0).elements
    text = text &amp; x.name &amp; &quot;, &quot;
Next
MsgBox Left(text, Len(text) _ 2)

' Move the input focus on the control named &quot;txtUserName&quot;
' of the form named &quot;UserData.&quot;
document.forms(&quot;UserData&quot;).elements(&quot;txtUserName&quot;).focus
</pre>
</td></tr>
</table></p>


<A NAME="945"><h3>The Selection object</h3></A>

<p>The Selection object represents the portion of the document that's currently 
highlighted by the user. Its only property is 
<I>type</I>, which returns a string that tells 
which kind of elements are selected. (The choices are 
<I>none</I> or <I>text.</I>)
</p>

<p>The Selection object supports three methods. The 
<I>empty </I>method cancels the selection and reverts its 
<I>type </I>property to <I>none</I>. The <I>clear 
</I>method actually deletes the contents of the selection. If the selection includes text, controls, or an entire 
table, they are physically removed from the document and the page is automatically 
refreshed. (The <I>empty</I> method doesn't delete tables that are only partially 
selected, however):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Delete the selected portion of the document 
' when the user presses the &quot;C&quot; key.
Sub Document_onkeypress()
    If window.event.keycode = Asc(&quot;C&quot;) Then
        document.selection.clear
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The last method of the Selection object is 
<I>createRange</I>, which returns a reference to the TextRange object that describes the text currently selected. I'll 
explain what to do with such a TextRange object in the next section.
</p>

<A NAME="946"><h2>The TextRange Object</h2></A>

<p>The TextRange object represents a portion of the document. This can be the 
area currently selected by the user or an area defined programmatically. The 
TextRange object lets you access the contents of a portion of the page&#8212;either as HTML 
source code or as text visible to the user&#8212;and exposes several methods that let you 
define the size and position of the range itself.
</p>

<p>You can create a <I>TextRange</I> property from the Selection object, as we've 
just seen, or you can use the <I>createTextRange 
</I>methods of the Body object or a Button, TextArea or TextBox element:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set bodyTxtRange = document.body.createTextRange
Set inputTxtRange = document.all(&quot;txtUserName&quot;).createTextRange
</pre>
</td></tr>
</table></p>


<A NAME="947"><h3>Properties</h3></A>

<p>The TextRange object exposes only two properties, 
<I>text </I>and <I>htmlText</I>. The former can set or return the textual contents of the portion of the document defined by 
the object but doesn't let you specify its formatting. The latter property is read-only 
and returns the portion of the document in HTML format. For example, the following 
piece of VBScript code displays the HTML contents of the selected text when the 
user presses the <I>C</I> key and converts the text to uppercase when the user presses the 
<I>U </I>key:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Sub Document_onkeypress()
    If window.event.keycode = Asc(&quot;C&quot;) Then
        MsgBox document.selection.createRange.htmlText
    ElseIf window.event.keycode = Asc(&quot;U&quot;) Then
        ' Type the following two-line statement as one line.
        document.selection.createRange.text = 
            UCase(document.selection.createRange.text)    
    End If
End Sub
</pre>
</td></tr>
</table></p>


<p>The <I>htmlText </I>property always returns syntactically correct HTML code. 
For example, if the TextRange object comprises only the starting &lt;B&gt; tag of a portion 
of bold text, the value returned by this property correctly includes the closing &lt;/B&gt; 
tag, so you can safely reuse it in the same or another document without any 
problem. The value returned by this property also includes &lt;SCRIPT&gt; tags inside the area.
</p>

<p>The <I>text </I>property always returns the characters in a TextRange object, but 
an assignment to it works only if the area doesn't extend over portions of the 
document with different attributes.
</p>

<A NAME="948"><h3>Methods</h3></A>

<p>The TextArea object exposes 27 methods, but I'll explain just the most useful 
ones. The first method to get familiar with is 
<I>select</I>, which makes the TextRange object appear to be selected: It's useful for getting visual feedback about what you're 
doing to the object.
</p>

<p>The <I>moveStart</I>, <I>moveEnd, </I>and <I>move 
</I>methods change the position of the starting point, the ending point, or both ends of the area. You can move these points 
by the specified number of characters, words, and whole sentences:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Extend the selection 10 characters to the right.
Set selRange = document.selection.createRange
selRange.moveEnd &quot;character&quot;, 10
' Extend it one word to the left. 
' (Negative values move toward the beginning of the document.)
selRange.moveStart &quot;word&quot;, -2
selRange.select
' Extend it one sentence to the right. (The value &quot;1&quot; can be omitted.)
selRange.moveEnd &quot;sentence&quot;
selRange.select
' Restore it as it was.
selRange.move &quot;textedit&quot;
</pre>
</td></tr>
</table></p>


<p>The <I>collapse</I> method reduces the size of a TextRange method to either its 
start point (if the method's argument is True) or to its ending point (if the argument is False):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>selRange.collapse True     ' Reduce the range to its starting point.
</pre>
</td></tr>
</table></p>


<p>The <I>moveToElementText </I>method is useful when you want the TextRange 
object to move over a particular element in the page. This method works only if 
the TextRange already includes the element, so you often create a TextRange object 
from the body element and then shrink it to the desired element, as in the following code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Create a TextRange corresponding to the &quot;MyControl&quot; element.
Set range = document.body.createTextRange
range.moveToElementText document.all(&quot;MyControl&quot;)
</pre>
</td></tr>
</table></p>


<p>You can use the <I>moveToPoint </I>method to have the TextRange point to a 
given <I>x-y </I>pair of coordinates, typically the mouse coordinates:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Retrieve the word the user clicked on.
Sub Document_onclick()
    Set range = document.body.createTextRange
    range.moveToPoint window.event.x, window.event.y
    range.expand &quot;word&quot;
    MsgBox range.text
End Sub
</pre>
</td></tr>
</table></p>


<p>Use the <I>findText </I>method to have a TextRange move over a given text string 
in the page. In its simplest form, this method takes one argument, the string 
being searched, and returns True if the search succeeds (in which case the range has 
moved over the searched text). Otherwise, it returns False:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set range = document.body.createTextRange
If range.findText(&quot;ABC&quot;) Then
    range.select
Else
    Msgbox &quot;Text not found&quot;
End If
</pre>
</td></tr>
</table></p>


<p>Concerning the remaining methods of the TextRange object, it's worth 
mentioning <I>scrollIntoView </I>(which ensures that the text range is visible in the browser's 
window), <I>parentElement </I>(which returns a reference to the element that 
completely contains the text range), <I>pasteHTML 
</I>(which replaces the contents of the text range with HTML code), and 
<I>duplicate </I>(which creates a new TextRange object that 
points to the same range).
</p>

<A NAME="949"><h2>The Table Object</h2></A>

<p>In Dynamic HTML, tables are defined exactly as they are in pure HTML&#8212;that is, 
with the &lt;TABLE&gt; and &lt;/TABLE&gt; tag pair and a series of &lt;TR&gt; and &lt;TD&gt; tags. The 
real difference is that under DHTML a table exposes the 
rows and cells collections, which let you access individual cells without having to assign them a specific ID 
attribute. More precisely, the table object exposes a 
rows collection, and each row object exposes a 
cells collection. The following piece of code extracts the contents of the 
table as a tab-delimited string that's ready to be exported to a text file:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set table = document.all(&quot;Table1&quot;)
For each thisRow in table.rows
    For each thisCell In thisRow.cells
        text = text &amp; thisCell.innerText &amp; Chr(9)
    Next
    ' Replace the last tab char with a CR-LF pair.
    text = Left(text, Len(text) - 1) &amp; Chr(13) &amp; Chr(10)
Next
MsgBox text
</pre>
</td></tr>
</table></p>


<p>You can directly reference a cell using this syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Modify the first cell in the third row. (Row/column indices are
' zero-based.)
table.rows(2).cells(0).innerText = &quot;New Value&quot;
</pre>
</td></tr>
</table></p>


<p>Because individual cells don't support the <I>innerHTML 
</I>property, to modify the attributes of a given cell you must create a TextRange object and use its 
<I>pasteHTML </I>method instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Set thisCell = table.rows(2).cells(0)
Set range = document.body.createTextRange
range.moveToElementText thisCell
range.pasteHTML &quot;&lt;B&gt;New Value in Boldface&lt;/B&gt;&quot;
</pre>
</td></tr>
</table></p>


<p>Even more exciting is your ability to add new rows and columns, thanks to 
the <I>insertRow </I>method of the table object, and the 
<I>insertCell </I>method of the row object:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add a row as the fifth row of the table.
set newRow = table.insertRow(4)
' Insert a cell in the first column, and set its contents.
set newCell = newRow.insertCell(0)
newCell.innerText = &quot;New Cell in Column 1&quot;
' Add other cells, using a more concise syntax.
newRow.insertCell(1).innerText = &quot;New cell in Column 2&quot;
newRow.insertCell(2).innerText = &quot;New cell in Column 3&quot;
</pre>
</td></tr>
</table></p>


<p>You can also delete cells or entire rows using the row object's 
<I>deleteCell </I>method and the table object's 
<I>deleteRow </I>method, respectively. The table, row, and cell 
objects have a few properties in common&#8212;such as 
<I>align</I>, <I>vAlign</I>, and 
<I>borderColor</I>&#8212;that let you format data they contain.
</p>

</BODY>
</HTML>





