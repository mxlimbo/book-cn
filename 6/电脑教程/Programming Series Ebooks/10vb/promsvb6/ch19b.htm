<HTML>
<HEAD>
<TITLE>A Quick Course on HTML</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19a.htm", "ch19c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="908"><h1>A Quick Course on HTML</h1></A>

<p>Before you can start to create a DHTML application, you need to know at least 
some rudiments of HTML, such as how an HTML page is created and the most 
important and frequently used HTML tags. If you're already familiar with HTML syntax, you 
can safely skip this section.
</p>

<p>Even though the HTML language has its own logic, it isn't as structured as 
high-level programming languages such as Visual Basic. For this reason, many 
programmers find HTML syntax rules somewhat strange. As always, nothing beats 
hands-on practice, so I prepared a simple editor that lets you write an HTML fragment 
and immediately see how the browser renders it. I wrote this piece of software using 
the WebBrowser control, which is nothing less than Internet Explorer embedded in 
an ActiveX control.</p>

<p>Although this simple editor can't compete with Microsoft FrontPage or even 
the simplest freeware HTML editor, it does offer some useful features. First, it allows 
you to swap from the editor to the preview window with the touch of a button (F4 
for the editor, F5 for the preview window). Second, it provides several shortcut 
key combinations that you can use to add the most common HTML tags and even to 
enter more complex structures such as tables and controls. All these shortcuts are listed 
in the Insert menu, as shown in Figure 19-1. The source code for this editor is on 
the companion CD, and you're welcome to improve it to add support for additional 
HTML tags or other capacities.</p>

<p>
<A HREF="javascript:fullSize('F19ph01x.htm')"> <img src="images/F19ph01.JPG" width=404 height=304 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-1.</B> <i>Two instances of the Cheap DHTML Editor: one in editor mode and one in preview mode.</i><!--/caption-->
</p>

<A NAME="909"><h2>Headings and Paragraphs</h2></A>

<p>An HTML page is a file that consists of plain text plus tags that tell the browser 
how the page should be rendered on the client's screen. This is the skeleton of an
HTML page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;The title of this page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
Welcome to HTML
&lt;/BODY&gt;
&lt;/HTML&gt;
</pre>
</td></tr>
</table></p>


<p>This code displays the string &quot;Welcome to HTML&quot; near the top border of 
an otherwise blank page. Notice that all the elements in the page are enclosed within 
a pair of tags (and each tag is enclosed between angle brackets . For example, the 
title of the page&#8212;the string that Internet Explorer displays in the caption of its 
main window&#8212;is enclosed between the &lt;TITLE&gt; and the &lt;/TITLE&gt; tags. The &lt;BODY&gt; 
and &lt;/BODY&gt; tags enclose the text that appears inside the page.</p>

<p>Typically, the body of a page contains one or more headings. HTML 
supports six different levels of headings, where level 1 corresponds to the most 
important heading and level 6 to the least important one. Headings are useful for giving 
subtitles to sections of the page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY&gt;
&lt;H1&gt;This is a level 1 heading&lt;/H1&gt;
Some normal text here
&lt;H2&gt;This is a level 2 heading&lt;/H2&gt;
Text under level 2 heading
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>An important characteristic of the HTML language is that carriage return 
characters and line feed characters in the source text don't affect the appearance of 
the page. Apart from headings and a few other tags, which add a CR-LF pair 
automatically, if you want to start a new line, you have to insert a &lt;P&gt; tag manually, as here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is a paragraph.&lt;P&gt;As is this.&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>The &lt;P&gt; tag forces a new line and also inserts a blank line between the 
current paragraph and the next one. If you need to break the current line but you 
don't want an extra blank line, you can use the &lt;BR&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This paragraph is subdivided&lt;BR&gt;into two distinct lines.&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>To add a horizontal line of space between two paragraphs, you can also 
use the &lt;HR&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Two paragraphs separated&lt;HR&gt;by a horizontal line&lt;P&gt;
</pre>
</td></tr>
</table></p>


<p>The &lt;PRE&gt; and &lt;/PRE&gt; pair of tags is an exception to the rule that 
carriage returns in HTML source text are ignored: Everything between these tags is 
rendered as monospaced text (typically using the Courier font), and all embedded CR-LF 
character pairs are inserted in the resulting output. These tags are often used to insert 
text as is (for example, a source code listing):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;PRE&gt;First line
second line&lt;/PRE&gt;
</pre>
</td></tr>
</table></p>


<p>By default, all text is aligned at the left, but you can use the &lt;CENTER&gt; and 
&lt;/CENTER&gt; tags to center a portion of text:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;CENTER&gt;A centered paragraph&lt;P&gt;
Another centered paragraph&lt;/CENTER&gt;
</pre>
</td></tr>
</table></p>


<P><div class="note"><blockquote><B>NOTE</B><HR>If you're using the DHTMLed editor, you can center any portion of 
text by highlighting its source code, pressing Ctrl+T to enter a tag pair, and then 
typing <I>CENTER </I>in the input box. You can use the same method for any tag 
pair, such as &lt;PRE&gt; and &lt;/PRE&gt;. Other commands in the Insert menu&#8212;for 
example, the Bold, Italic, and Hyperlink commands&#8212;automatically add a pair of tags 
at the beginning and end of the selected text.</blockquote></div>
</P>

<p>Creating lists of bulleted or numbered items is easy in HTML. You create 
bulleted items by using the &lt;LI&gt; and &lt;/LI&gt; tags to mark the beginning and the end of 
individual items and then enclosing the entire list within &lt;UL&gt; and &lt;/UL&gt;:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;UL&gt;
&lt;LI&gt;First bulleted paragraph&lt;/LI&gt;
&lt;LI&gt;Second bulleted paragraph&lt;/LI&gt;
&lt;LI&gt;Third bulleted paragraph&lt;/LI&gt;
&lt;/UL&gt;
</pre>
</td></tr>
</table></p>


<p>You create a list of numbered items in much the same way. The only difference 
is that you must enclose the list within the &lt;OL&gt; and &lt;/OL&gt; pair of tags:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;OL&gt;
&lt;LI&gt;First you must do this.&lt;/LI&gt;
&lt;LI&gt;Then you must do that.&lt;/LI&gt;
&lt;/OL&gt;
</pre>
</td></tr>
</table></p>


<A NAME="910"><h2>Attributes</h2></A>

<p>Most HTML tags can embed special attributes that affect how the text between 
the tags is rendered. For example, by default, headings are left-aligned, but you 
can modify the alignment of a given heading by adding the ALIGN attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H1 ALIGN=center&gt;This is a centered level 1 heading&lt;/H1&gt;
&lt;H2 ALIGN=right&gt;This is a right-aligned level 2 heading&lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>The TEXT attribute defines the color of the text for a page element. If you 
use this attribute for the BODY tag, the color affects the entire page:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;BODY BGCOLOR=&quot;cyan&quot; TEXT=&quot;#FF0000&quot;&gt;
Text on this page is red over a cyan background.
&lt;/BODY&gt;
</pre>
</td></tr>
</table></p>


<p>You can specify a color attribute using the #RRGGBB format, which is similar to 
the Visual Basic <I>RGB </I>function, or you can use one of the following 16 color names 
accepted by Internet Explorer: Black, Maroon, Green, Olive, Navy, Purple, Teal, 
Gray, Silver, Red, Lime, Yellow, Blue, Fuchsia, Aqua, and White. The BODY tag also 
supports other color attributes, such as LINK (used for hyperlinks), ALINK (to 
render active hyperlink), and VLINK (to mark visited hyperlinks).</p>

<p>You can make text boldface by enclosing it within the &lt;B&gt; and &lt;/B&gt; pair 
of tags. Similarly, you can italicize a portion of text with the &lt;I&gt; and &lt;/I&gt; pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;B&gt;This text is boldface.&lt;/B&gt;&lt;P&gt;
&lt;I&gt;This text is italic.&lt;/I&gt;&lt;P&gt;
&lt;B&gt;This sentence in boldface has an &lt;I&gt;italicized&lt;/I&gt; word in it.&lt;/B&gt;
</pre>
</td></tr>
</table></p>


<p>You can use the &lt;U&gt; and &lt;/U&gt; tag pair to underline text. This isn't usually 
a good idea, however, because the underline attribute should be reserved for 
hyperlinks. You can apply attributes to an entire paragraph by enclosing them between the &lt;P&gt; 
and &lt;/P&gt; tags, as in the following example:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;P ALIGN=center&gt;Centered paragraph&lt;/P&gt; 
</pre>
</td></tr>
</table></p>


<p>To modify the attributes of the text, you can use the &lt;FONT&gt; tag, which 
takes three attributes: FACE, SIZE, and COLOR. The COLOR attribute is specified in the 
same way as before. The FACE attribute is the name of a font. This attribute even 
accepts a comma-delimited list of font names if you want to provide alternate choices in 
case the preferred font isn't available on the user's machine:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=14 COLOR=&quot;red&quot;&gt;Red text&lt;/FONT&gt;
</pre>
</td></tr>
</table></p>


<p>This statement attempts to use the Arial font, but it reverts to Helvetica if Arial 
isn't installed on the user's system. The SIZE attribute is the font size in points. This 
attribute also accepts a number preceded by a plus or a minus sign to indicate a 
size relative to the default font size:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Text in regular size&lt;P&gt;
&lt;FONT SIZE=+4&gt;Text 4 points taller&lt;/FONT&gt;&lt;P&gt;
&lt;FONT SIZE=-2&gt;Text 2 points smaller&lt;/FONT&gt; 
</pre>
</td></tr>
</table></p>


<A NAME="911"><h2>Images</h2></A>

<p>To insert an image in an HTML page, you need the &lt;IMG&gt; tag, whose SRC 
attribute specifies the path to the image to be displayed; such a path can be absolute or 
relative to the path of the page itself. For example, the following code loads a GIF 
image located in the same directory as the HTML source file:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>Images are typically in GIF or JPEG format. GIF images can be 
<I>interlaced</I>, in which case the browser first downloads every other line of pixels and then 
downloads the remaining lines.</p>

<p>As you can for text strings, you can center an image horizontally by 
enclosing the &lt;IMG&gt; tab within the &lt;CENTER&gt; and &lt;/CENTER&gt; tags or by using the 
ALIGN attribute. If you know the size of the image being downloaded, you can specify 
it using the WIDTH and HEIGHT attributes so that the browser can correctly 
position the text around the image before actually downloading it. The image's width 
and height are expressed in pixels:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>This is a right-aligned image 200 pixels wide and 100 pixels high.
&lt;IMG ALIGN=right WIDTH=200 HEIGHT=100 SRC=&quot;mylogo.gif&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>If necessary, the browser will stretch or shrink the original image to fit the size 
you've specified. This feature is often exploited to insert graphical elements that separate 
areas on the page. For example, you can create a horizontal separator by using an 
image with a gradient background and a HEIGHT attribute of just a few pixels.</p>

<p>You can control how much white space is left around the image by using 
the HSPACE and VSPACE attributes, for horizontal and vertical space, respectively. 
By default, a 2-pixel transparent border is drawn around all images, but you can 
suppress it (by setting the BORDER attribute to 
<I>none</I>) or specify a different width:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>A right-aligned image with 10 pixels of horizontal white space
and 20 pixels of vertical space
&lt;IMG VSPACE=20 ALIGN=right SRC=&quot;mylogo.gif&quot; HSPACE=10&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, the ALT attribute is used to provide a textual description of the 
image; this description is displayed in the browser while the image is being 
downloaded, and it completely replaces the image if the user has turned off images.</p>

<A NAME="912"><h2>Hyperlinks</h2></A>

<p>HTML supports three different types of hyperlinks: a hyperlink to another 
location on the same page, a hyperlink to another page on the same server, and a 
hyperlink to a page in another Internet domain. In all cases, you use the &lt;A&gt; and &lt;/A&gt; tags 
to define which portion of the text will appear to be underlined. These tags are 
always accompanied by the HREF attribute, which points to the hyperlink's target:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;PageTwo.htm&quot;&gt;here&lt;/A&gt; to proceed to the next page, or click
&lt;A HREF=&quot;toc.htm&quot;&gt;here&lt;/A&gt; to go to the table of contents.
</pre>
</td></tr>
</table></p>


<p>If the destination of the hyperlink is inside the same page, you need a way to 
label it. You do this with the &lt;A&gt; tag and the NAME attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A NAME=&quot;Intro&quot;&gt;Introduction&lt;/A&gt;
</pre>
</td></tr>
</table></p>


<p>(You don't need to insert a string between the opening and closing tags.) You 
can place this tag, also known as the 
<I>anchor</I>, before the first line of the target portion 
of HTML source code. To refer to an anchor inside the same page, you use the 
<I>#</I> symbol for the value of the HREF attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;#Intro&quot;&gt;here&lt;/A&gt; to go to the introduction.
</pre>
</td></tr>
</table></p>


<p>(Warning: intra-page hyperlinks aren't supported by the Cheap DHTML 
editor demo on the CD.) You can have a hyperlink point to an anchor inside another 
page by using the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Click &lt;A HREF=&quot;Chap1.htm#Intro&quot;&gt;here&lt;/A&gt; to go to the book's introduction.
</pre>
</td></tr>
</table></p>


<p>You can also have the hyperlink point to any page on another server by 
providing the fully qualified URL to it:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Jump to the &lt;A HREF=&quot;http://www.vb2themax.com/index.htm&quot;&gt;
VB-2-The-Max&lt;/A&gt; Web site.
</pre>
</td></tr>
</table></p>


<p>You can even use images as hyperlinks. The syntax is the same, and you 
only have to insert an &lt;IMG&gt; tag instead of plain text inside the &lt;A&gt; and &lt;/A&gt; tag pair:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;A HREF=&quot;http://www.vb2themax.com&quot;&gt;&lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/A&gt;
</pre>
</td></tr>
</table></p>


<p>You can create clickable images linked to an 
<I>image map.</I> In this case, the image includes multiple hot spots, each one pointing to a different target. This 
advanced technique is beyond the scope of this HTML tutorial, so I won't elaborate on 
image maps here.</p>

<A NAME="913"><h2>Tables</h2></A>

<p>The HTML language has a rich assortment of tags and keywords for creating 
and formatting tables. Tables are important in plain HTML because they offer a way 
to precisely position and align text and image elements. All the data pertaining to a 
table is enclosed between a pair of &lt;TABLE&gt; and &lt;/TABLE&gt; tags. Each new row is 
marked with a &lt;TR&gt; tag, and each column by a &lt;TD&gt; tag. You can also use the &lt;TH&gt; 
tag for cells in header rows. The &lt;/TR&gt;, &lt;/TD&gt;, and &lt;/TH&gt; closing tags are optional. 
The following example displays a table with two columns and three rows, the first of 
which is a header row:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1&gt;
&lt;TR&gt;
   &lt;TH&gt; HeadRow 1, Column 1&lt;/TH&gt;
   &lt;TH&gt; HeadRow 1, Column 2&lt;/TH&gt;
&lt;/TR&gt;&lt;TR&gt;
   &lt;TD&gt; Row 1, Column 1&lt;/TD&gt;
   &lt;TD&gt; Row 1, Column 2&lt;/TD&gt;
&lt;/TR&gt;&lt;TR&gt;
   &lt;TD&gt; Row 2, Column 1&lt;/TD&gt;
   &lt;TD&gt; Row 2, Column 2&lt;/TD&gt;
&lt;/TR&gt;&lt;/TABLE&gt; 
</pre>
</td></tr>
</table></p>


<p>The BORDER attribute specifies the border's width; if this attribute is omitted, the 
table doesn't display a border. You can change the border's color using the 
BORDERCOLOR attribute, and you can even create a 3-D effect with the BORDERCOLORLIGHT 
and BORDERCOLORDARK attributes. The table can have a background color 
(the BGCOLOR attribute), or it can use a background image specified by the 
BACKGROUND attribute.</p>

<p>Each cell can contain text, an image, or both. You can change the 
horizontal alignment of the contents of a cell by using the ALIGN attribute (which can take 
the values <I>left</I>, <I>center</I>, or 
<I>right</I>), and you can control the vertical alignment with 
the VALIGN attribute (which can be assigned the values 
<I>top</I>, <I>middle</I>, or <I>bottom</I>). By default, a cell is wide enough to display its contents, but you can set any size 
you want with the WIDTH and HEIGHT attributes, whose values are in pixels. For 
the WIDTH attribute, you can also specify a percentage of the table's width. You can 
apply most of these attributes to the &lt;TR&gt;, &lt;TD&gt;, and &lt;TH&gt; tags alike. The 
following example shows how to apply these tags; the result is shown in Figure 19-2:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1&gt;
&lt;TR &gt;
   &lt;TH HEIGHT=100&gt; A row 100 pixels tall&lt;/TH&gt;
   &lt;TH&gt; &lt;IMG SRC=&quot;mylogo.gif&quot;&gt;&lt;/TH&gt;
&lt;/TR&gt;
&lt;TR&gt;
   &lt;TD WIDTH=200 HEIGHT= 90 ALIGN=center VALIGN=bottom&gt; 
   Text aligned to center, bottom&lt;/TD&gt;
   &lt;TD WIDTH=50%&gt; This cell takes half of the table's width. &lt;/TD&gt;
&lt;/TR&gt;
&lt;TR VALIGN=bottom&gt;
   &lt;TD&gt; This row is bottom-aligned.&lt;/TD&gt;
   &lt;TD ALIGN=right&gt; This one is right-aligned.&lt;/TD&gt;
&lt;/TR&gt;&lt;/TABLE&gt;
</pre>
</td></tr>
</table></p>


<p>A cell can also contain a hyperlink or an image that works as a hyperlink. 
By default, a table is wide enough to show its contents, but you can use the 
WIDTH attribute of the &lt;TABLE&gt; tag to specify an absolute width in pixels or a 
percentage of the window's width:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TABLE BORDER=1 WIDTH=90%&gt;
</pre>
</td></tr>
</table></p>


<p>
<A HREF="javascript:fullSize('F19ph02x.htm')"> <img src="images/F19ph02.JPG" width=404 height=191 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-2.</B> <i>A table with an embedded image and different formatting and alignment options.</i><!--/caption-->
</p>

<A NAME="914"><h2>Styles</h2></A>

<p>Styles offer a way to define the appearance of an HTML tag in an HTML page. If 
you don't specify a style, a given heading is always displayed with its default 
attributes&#8212;for example, a &lt;H1&gt; heading always uses a black New Times Roman font 14 
points tall. You can modify this default setting by using a surrounding &lt;FONT&gt; tag, as 
in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FONT FACE=&quot;Arial&quot; SIZE=20 COLOR=&quot;red&quot;&gt;&lt;H1&gt;Level 1 Heading&lt;/H1&gt;&lt;/FONT&gt;
</pre>
</td></tr>
</table></p>


<p>The problem with the preceding approach is that if all your Level 1 
headings need to be rendered with nondefault attributes, you must update all the 
individual occurrences of the &lt;H1&gt; tag. And when you later want to change to another 
color or font size, you need to revise all the tags once again.</p>

<p>Conversely, if you define and then apply a style you need to redefine the 
&lt;H1&gt; tag just once, and your change will affect the entire document. You can even take 
a further step, and keep your style definitions in a separate file&#8212;a Cascading Style 
Sheet file, or CSS&#8212;that can be referenced by all the HTML pages that make up your 
application. This approach gives you an effective way to keep the contents of an 
HTML document separated from its appearance so that you can easily modify either one 
of them independently from the other. While it's common practice to keep styles in 
a separate file, for the sake of clarity in the following examples I'll embed the 
definition of the style in the HTML page that uses it.</p>

<p>You can define a new style using the &lt;STYLE&gt; and &lt;/STYLE&gt; pair of tags. 
For example, see how you can redefine the &lt;H1&gt; and &lt;H2&gt; tags:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
H1 {FONT-FAMILY=Arial; FONT-SIZE=20; COLOR=&quot;red&quot;}
H2 {FONT-FAMILY=Arial; FONT-SIZE=16; FONT-STYLE=italic; COLOR=&quot;green&quot;}
&lt;/STYLE&gt;
&lt;H1&gt;This is a Red heading&lt;/H1&gt;
&lt;H2&gt;This is a Green italic heading&lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>The name of the tag that you want to redefine is followed by a 
semicolon-delimited list of <I>ATTRIBUTE=value 
</I>pairs enclosed within braces. In most cases, 
you can also omit the double quotes that surround a string value, for example, when 
you're specifying a color attribute. You can redefine as many tags as you want within a 
single &lt;STYLE&gt; and &lt;/STYLE&gt; tag pair.</p>

<p>Style sheets even let you define contextual behaviors. Take, for instance, 
the definition of the &lt;H2&gt; tag above, which renders all the level 2 headings as 
green italicized text. Such a style actually nullifies the effect of an &lt;I&gt; tag inside the 
heading because the text is already italic. You can remedy this by specifying that &lt;I&gt; 
tags inside a &lt;H2&gt; and &lt;/H2&gt; pair should produce normal (nonitalic) characters in 
the color red. You enforce this behavior by adding this definition to the style (added 
line is in boldface):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
H1 {FONT-FAMILY=Arial; FONT-SIZE=20; COLOR=&quot;red&quot;}
H2 {FONT-FAMILY=Arial; FONT-SIZE=16; FONT-STYLE=italic; COLOR=&quot;green&quot;}
<B>H2 I {FONT-STYLE=normal; COLOR=&quot;blue&quot;}</B>
&lt;/STYLE&gt;
&lt;H2&gt;This is a heading with a &lt;I&gt;Normal Blue&lt;/I&gt; portion in it &lt;/H2&gt;
</pre>
</td></tr>
</table></p>


<p>Instead of redefining the appearance of all the tags with a given name, you 
can set the style for a specific tag using the STYLE attribute, as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;H3 STYLE=&quot;FONT-STYLE=bold;COLOR=blue&quot;&gt;A blue and bold Level 3 Heading&lt;/H3&gt;
</pre>
</td></tr>
</table></p>


<p>A great feature of style sheets is that they allow you to define new classes 
of style attributes. This way, you can label an item in the page according to its 
meaning and specify its appearance elsewhere in the page or (better) in a separate 
style sheet. This approach is similar to the one you follow when you define a new 
style in a word processor such as Microsoft Word. For example, suppose that some of 
your headings are book titles, and you want all book titles in your HTML pages 
formatted as bold green text. All you have to do is create the 
booktitle style class, and then apply it when you need it using the CLASS attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
.booktitle {FONT-FAMILY=Arial; FONT-STYLE=bold; COLOR=&quot;green&quot;}
&lt;/STYLE&gt;
&lt;H3 CLASS=booktitle&gt;Programming Microsoft Visual Basic 6&lt;/H3&gt;
</pre>
</td></tr>
</table></p>


<p>The CLASS attribute really shines when used with the &lt;DIV&gt; and &lt;/DIV&gt; 
tags to apply a particular style class to a portion of the page. (For additional 
information about the &lt;DIV&gt; tag, see the &quot;<A HREF="ch19c.htm#923">Tags</A>&quot; section later in this chapter.)</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
.listing {FONT-FAMILY=Courier New; FONT-SIZE=12}
&lt;/STYLE&gt;

&lt;DIV CLASS=listing&gt;
' A Visual Basic listing &lt;BR&gt;
Dim x As Variant
&lt;/DIV&gt;
</pre>
</td></tr>
</table></p>


<p>Finally, here's one way to store a style definition in a separate file, based 
on the <I>@import </I>directive:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;STYLE&gt;
@import URL(&quot;http://www.vb2themax.com/stylesheet.css&quot;);
&lt;/STYLE&gt; 
</pre>
</td></tr>
</table></p>


<A NAME="915"><h2>Forms</h2></A>

<p>HTML forms offer a way to let the user enter information in a page. A form can 
contain controls, including single-line and multiline text boxes, check boxes, radio 
buttons, push buttons, list boxes, and combo boxes. These controls can't compete with 
their Visual Basic counterparts, but they're sufficiently powerful for most purposes. All 
the controls in an HTML form must be enclosed between the &lt;FORM&gt; and &lt;/FORM&gt; 
tags. The &lt;FORM&gt; tag accepts several attributes, the most important of which is 
NAME, because you need to assign a name to the form if you want to access its controls 
from script routines. You can place controls outside a form, as, for example, when you 
plan to process them through scripts and don't plan to post their contents to the Web server.</p>

<p>Most of the controls in a form are inserted using the &lt;INPUT&gt; tag. The 
TYPE attribute determines the type of control, and the NAME attribute is the name of 
the control. For example, the following code builds a form with one CheckBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;formname&quot;&gt;
&lt;INPUT TYPE=Checkbox NAME=Shipped CHECKED&gt;The product has been shipped.&lt;BR&gt;
&lt;/FORM&gt;
</pre>
</td></tr>
</table></p>


<p>The NAME attribute vaguely corresponds to Visual Basic controls' 
<I>Name </I>property. The CHECKED attribute displays a mark in the control. The text that follows 
the <I>&gt;</I> character corresponds to the caption of the control, but as far as HTML is 
concerned, it's just text that happens to follow the control in the page.</p>

<p>The NAME attribute is more important for RadioButton controls because all 
the controls with the same name belong to the same group of mutually exclusive 
choices. You can select one of the controls in the group by adding the CHECKED attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Select the type of malfunction observed:&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot; CHECKED&gt;Wrong Results&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot;&gt;Fatal Error&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Problem&quot;&gt;General Protection Fault&lt;BR&gt;
</pre>
</td></tr>
</table></p>


<p>HTML supports three different types of push buttons: the Submit button, 
the Reset button, and the generic, programmable button. The first two buttons are 
similar, differing only for the value of the TYPE attribute:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;INPUT TYPE=Submit VALUE=&quot;Submit&quot;&gt;
&lt;INPUT TYPE=Reset VALUE=&quot;Reset values&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>In both cases, the VALUE attribute determines the caption of the button. 
The effect of the Submit button is to send the contents of all the controls on the form 
to the server. The effect of the Reset button is to clear the contents of all the 
controls on the form and restore their initial values. The third type of button is used in 
combination with a script, as I explain in the following section.</p>

<p>HTML forms can contain three types of TextBox controls: the standard 
single-line control, the control for entering passwords, and the multiline control. The 
single-line control has a TYPE attribute equal to 
<I>Text</I>, can contain a VALUE attribute to 
specify the initial contents of the control, and also supports the SIZE attribute (the width 
in characters) and the MAXLENGTH attribute (the maximum number of characters):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter book title: &lt;BR&gt;
&lt;INPUT TYPE=Text NAME=&quot;BookTitle&quot; SIZE=40 MAXLENGTH=60 
VALUE=&quot;Programming Microsoft Visual Basic 6&quot;&gt;
</pre>
</td></tr>
</table></p>


<p>The Password control is functionally identical to the regular TextBox 
control and supports the same attributes. It corresponds to a Visual Basic TextBox 
whose <I>PasswordChar </I>property has been set to an asterisk:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Enter your password:
&lt;INPUT TYPE=Password NAME=&quot;UserPwd&quot; SIZE=40 MAXLENGTH=60&gt;&lt;BR&gt;
</pre>
</td></tr>
</table></p>


<p>The TextArea control corresponds to a Visual Basic's multiline TextBox 
control. This control is an exception to the general rule, however, because it uses 
the &lt;TEXTAREA&gt; tag instead of the &lt;INPUT&gt; tag; you can determine the control's 
size using the ROWS and COLS attributes, and the initial contents of the control can 
be inserted before the closing &lt;/TEXTAREA&gt; tag:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;TEXTAREA NAME=&quot;Comments&quot; ROWS=5 COLS=30 MAXLENGTH=1000&gt;
Enter your comments here.
&lt;/TEXTAREA&gt;
</pre>
</td></tr>
</table></p>


<p>The text between the &lt;TEXTAREA&gt; and &lt;/TEXTAREA&gt; tags is inserted in 
the control as-is, including carriage returns. If a line is wider than the control's 
width, the user has to scroll the control to see its rightmost portion.</p>

<p>HTML forms support single-choice and multiple-choice list box controls, 
which are named <I>Select </I>controls in the HTML jargon. A Select control is defined by 
means of the &lt;SELECT&gt; and &lt;/SELECT&gt; tags, which accept the SIZE attribute for 
specifying the control's height (in number of rows), and the MULTIPLE attribute if the 
control accepts multiple choices. Each individual item of the list requires a 
&lt;OPTION&gt; and &lt;/OPTION&gt; tag pair. You can insert the SELECT attribute if the item is 
initially selected, and a VALUE attribute to specify the string that will be sent to the 
server when the form is submitted. The following code creates a multiple-choice 
Select control that's 4 rows tall and whose first item is initially highlighted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SELECT NAME=&quot;Products&quot; SIZE=4 MULTIPLE&gt;
    &lt;OPTION SELECTED VALUE=1&gt;Computers&lt;/OPTION&gt;
    &lt;OPTION VALUE=2&gt;Monitors&lt;/OPTION&gt;
    &lt;OPTION VALUE=3&gt;Hard disks&lt;/OPTION&gt;
    &lt;OPTION VALUE=4&gt;CD-ROM drives&lt;/OPTION&gt;
&lt;/SELECT&gt;
</pre>
</td></tr>
</table></p>


<p>If you omit the MULTIPLE attribute and specify SIZE=1 (or omit it), the Select 
control turns into a combo box control.</p>

<A NAME="916"><h2>Scripting</h2></A>

<p>Now that you know how to prepare an HTML page and an HTML form, 
understanding how scripting fits in is really straightforward. First, you need the &lt;SCRIPT&gt; 
and &lt;/SCRIPT&gt; tags to reserve a section of the HTML document for your script code, 
as in this code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
    ' Your VBScript code goes here.
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can also specify another script language in the LANGUAGE 
attribute&#8212;for example JavaScript&#8212;but given the typical reader of this book, all my 
examples use VBScript.</p>

<A NAME="917"><h3>VBScript vs. Visual Basic for Applications</h3></A>

<p>The VBScript language is an extensive subset of Visual Basic for Applications 
(VBA) and differs from its more powerful cousin in relatively few features:</p>

<UL>
<p><li> Specific data types aren't supported. Everything in VBScript is a 
variant, so the <I>As </I>clause in the <I>Dim 
</I>statements and argument lists isn't allowed. UDTs are missing in VBScript, so you can't use the 
<I>Type...End Type </I>keywords.</li></p>

 
<p><li>     For the same reason, specific object variables are missing in VBScript, 
as is the <I>New </I>operator. You create a new external object using the 
<I>CreateObject </I>function and access it using a Varient variable and late binding. <I>TypeOf </I>tests and 
<I>With...End With </I>blocks aren't supported either.</li></p>

<p><li>   VBScript doesn't support Property procedures, Optional arguments, 
Static variables, constants, labels, <I>Goto </I>and 
<I>Gosub </I>commands, and the <I>On Error Goto 
</I>statement (<I>On Error Resume Next </I>is supported, though).</li></p>

<p><li>    All the string functions are supported, except 
<I>StrConv</I>, the <I>Like </I>operator, and the 
<I>LSet</I>, <I>RSet</I>, and <I>Mid$ </I>commands.</li></p>

<p><li>     VBScript doesn't offer file I/O commands and functions. You can use 
the FileSystemObject library to manipulate directories and files and the Dictionary object to account for the fact that VBScript doesn't support collections.</li></p>
</ul>

<P><div class="note"><blockquote><B>NOTE</B><HR>All the examples in this book are written with VBScript version 3.0.  As this book is going to print, VBScript 5 is in public beta. This 
new version supports classes, property procedures, specific object variables, and 
the <I>New </I>operator. It also allows sophisticated search and replace 
capabilities. VBScript 5 will be distributed with Internet Explorer 5.</blockquote></div>
</P>

<A NAME="918"><h3>Executing code at page load</h3></A>

<p>Most of the time, the code between the &lt;SCRIPT&gt; and &lt;/SCRIPT&gt; tags consists 
of routines that are invoked from elsewhere in the page. Code can be placed 
outside any routine, however, in which case it's executed immediately after the page has 
been downloaded from the server but before it's rendered in the browser's window:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
    MsgBox &quot;About to display a page&quot;
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>You can also achieve the same result by writing code for the 
<I>onload </I>event of the Window object, as in this snippet:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
' A variable declared outside any routine is global to the page.
Dim loadtime
Sub Window_onload()
    ' Remember when the page has been loaded.
    loadtime = Now()
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="919"><h3>Accessing form controls</h3></A>

<p>VBScript code can access any control in the form, using the 
syntax <I>formname.controlname</I>, and can also read and modify attributes of controls 
using the dot syntax, exactly as in regular Visual Basic. The following code snippet 
shows you how to assign a string to the VALUE attribute of a TextBox control when 
the form loads:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;DataForm&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;
&lt;/FORM&gt;
&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
DataForm.UserName.Value = &quot;Francesco&quot;
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>If you want to access controls on the form when the page loads, the 
&lt;SCRIPT&gt; tag must follow the &lt;FORM&gt; tag; otherwise, the script attempts to reference a 
control that doesn't exist yet. You can retrieve the status of a CheckBox control 
through its <I>Checked </I>property, and the index of the selected item in a Select control 
using its <I>SelectedIndex </I>property. To check the state of a radio button, you use the 
following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>If DataForm.RadioButton.Item(0).Checked Then ...
</pre>
</td></tr>
</table></p>


<p>You frequently use VBScript code to react to events raised by controls. 
For example, buttons, CheckBox and RadioButton controls raise an 
<I>onclick </I>event when they're clicked. You can react to such events as you would in standard Visual 
Basic. The following example uses a TextBox, one Button, and two RadioButton 
controls; when the push button is clicked, the code converts the TextBox's contents to 
uppercase or lowercase, according to the RadioButton currently selected:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;DataForm&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; CHECKED&gt;Uppercase
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot;&gt;Lowercase&lt;BR&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;Convert&quot; VALUE=&quot;Convert&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Convert_Onclick()
    If DataForm.Case.Item(0).Checked Then
        DataForm.UserName.Value = UCase(DataForm.UserName.Value)
    Else
        DataForm.UserName.Value = LCase(DataForm.UserName.Value)
    End If
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Another way to specify which VBScript routine should execute when the 
user acts on a control is to add an <I>onclick 
</I>attribute in the definition of the control and 
set its value to reference the code that has to be executed when the control is 
clicked. For example, the following code defines two RadioButtons that, when clicked, 
modify the contents of a TextBox control:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserData&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;UserName&quot; VALUE=&quot;&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; onClick=&quot;Convert(0)&quot; CHECKED&gt;Uppercase&lt;BR&gt;
&lt;INPUT TYPE=Radio NAME=&quot;Case&quot; onClick=&quot;Convert(1)&quot;&gt;Lowercase&lt;BR&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Convert(index)
    If index = 0 Then
        UserData.Username.Value = UCase(UserData.Username.Value)
    Else
        UserData.Username.Value = LCase(UserData.Username.Value)
    End If
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>Usually, the value of the <I>onclick </I>attribute is the name of the procedure that 
must be called, together with its arguments 
(<I>index</I>, in this case), but in general it can 
be any valid piece of VBScript code. </P>

<P>TextBox, TextArea, and Select controls raise 
an <I>onchange </I>event when the user types something in them or selects a new item.</p>

<p>Scripts are often used to add items to a Select control at run time. The 
sequence of actions necessary for reaching this goal will probably seem contorted to a 
Visual Basic programmer: You must use the <I>CreateElement
</I>method of the Document object, set its 
<I>Text</I> and <I>Value </I>properties, and finally add it to the 
<I>Options </I>collection of the Select control. The following example creates a form with a Select control and a 
push button. Initially, the Select control contains only one item, but you can add two 
more items by clicking on the button:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserForm&quot;&gt;
&lt;SELECT NAME=&quot;Countries&quot; SIZE=1&gt;
    &lt;OPTION VALUE=1&gt;US&lt;/OPTION&gt;
&lt;/SELECT&gt;
&lt;INPUT TYPE=BUTTON NAME=&quot;AddCountries&quot; VALUE=&quot;Add Countries&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub AddCountries_onclick()
    Dim e 
    Set e = Document.createElement(&quot;OPTION&quot;)
    e.Text = &quot;Italy&quot;
    e.Value = 2
    Userform.Countries.Options.Add e
    Set e = Document.createElement(&quot;OPTION&quot;)
    e.Text = &quot;Germany&quot;
    e.Value = 3
    Userform.Countries.Options.Add e
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<A NAME="920"><h3>Generating HTML code</h3></A>

<p>VBScript lets you generate a new HTML page on the fly, using the 
<I>Write </I>method of the Document object. I explain the Document object (and all the other objects 
available to HTML programmers) later in this chapter, but a simple example can give 
you a taste of what you can do:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>&lt;FORM NAME=&quot;UserData&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Rows&quot; VALUE=&quot;10&quot;&gt;
&lt;INPUT TYPE=Text NAME=&quot;Cols&quot; VALUE=&quot;10&quot;&gt;&lt;BR&gt;
&lt;INPUT TYPE=Button NAME=&quot;Generate&quot; VALUE=&quot;Generate Table&quot;&gt;
&lt;/FORM&gt;

&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub Generate_onclick()
    Dim rows, cols
    ' We need to store these values in variables before the form is 
    ' destroyed when a new document is created.
    rows = UserData.Rows.Value
    cols = UserData.Cols.Value

    Document.Open
    Document.Write &quot;&lt;H1&gt;Multiplication Table&lt;/H1&gt;&quot;
    Document.Write &quot;&lt;TABLE BORDER=1&gt;&quot;
    For r = 1 to rows
        Document.Write &quot;&lt;TR&gt;&quot;
        For c = 1 to cols
            Document.Write &quot;&lt;TD&gt; &quot;  &amp; (r*c) &amp; &quot; &lt;/TD&gt;&quot;
        Next
        Document.Write &quot;&lt;/TR&gt;&quot;
    Next
    Document.Write &quot;&lt;/TABLE&gt;&quot;
End Sub
&lt;/SCRIPT&gt;
</pre>
</td></tr>
</table></p>


<p>This code programmatically creates a new HTML page, which contains a 
multiplication table whose size is specified by the user in two text box controls. 
(See Figure 19-3.) As soon you issue the <I>Open 
</I>method of the Document object, the <I>UserData 
</I>form doesn't exist any longer, so you need to cache the values of 
those text box controls in the <I>rows </I>and <I>cols 
</I>local variables before you create the new page.</p>

<p>
<A HREF="javascript:fullSize('F19ph03x.htm')"> <img src="images/F19ph03.JPG" width=404 height=339 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 19-3.</B> <i>An HTML page that dynamically creates a multiplication table with a given number of rows and columns.</i><!--/caption-->
</p>

<p>This concludes our quick course on HTML and VBScript. Now you're ready 
to move on to Dynamic HTML and appreciate its great flexibility and increased power.</p>

</BODY>
</HTML>




