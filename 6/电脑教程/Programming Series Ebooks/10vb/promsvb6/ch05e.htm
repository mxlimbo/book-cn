<HTML>
<HEAD>
<TITLE>Working with Dates and Times</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05d.htm", "ch05f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="179"><h1>Working with Dates and Times</h1></A>
<p>Not only does Visual Basic let you store date and time information in the specific 
Date data type, it also provides a lot of date- and time-related functions. These 
functions are very important in all business applications and deserve an in-depth look.</p>

<A NAME="180"><h2>Getting and Setting the Current Date and Time</h2></A>
<p>Strictly speaking, <I>Date</I> and 
<I>Time</I> aren't functions: They're properties. In fact, you 
can use them to either retrieve the current date and time (as Date values) or assign 
new values to them to modify the system settings:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Date &amp; &quot; &quot; &amp; Time         ' Displays &quot;8/14/98 8:35:48 P.M.&quot;.
' Set a new system date using any valid date format.
Date = &quot;10/14/98&quot;
Date = &quot;October 14, 1998&quot;
</pre>
</td></tr>
</table></p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
To help you compare the outcome of all date and time functions, all 
the examples in this section assume that they're executed at the date and time 
shown in the preceding code snippet: August 14, 1998, 8:35:48 
p.m.
</blockquote></div></p>

<p>The outdated <I>Date$</I> and 
<I>Time$</I> properties can also be used for the same 
task. They're String properties, however, and therefore recognize only the 
<I>mm/dd/yy</I> or <I>mm/dd/yyyy</I> formats and the 
<I>hh:mm:ss</I> and <I>hh:mm</I> formats, respectively. For 
this reason, it's usually better to use the new 
<I>$</I>-less functions.</p>

<p>The <I>Now</I> function returns a Date value that contains the current date and time:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Now                       ' Displays &quot;8/14/98 8:35:48 P.M.&quot;.
</pre>
</td></tr>
</table></p>

<p>But the time-honored <I>Timer</I> function returns the number of seconds elapsed 
from midnight and is more accurate than <I>Now</I> because the 
<I>Timer </I>function includes fractional parts of seconds. (The actual accuracy depends on the system.) This 
function is often used for benchmarking a portion of code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartTime = Timer
' Insert the code to be benchmarked here.
Print Timer - StartTime
</pre>
</td></tr>
</table></p>

<p>The preceding code suffers from some inaccuracy: The 
<I>StartTime</I> variable might be assigned when the system tick is about to expire, so your routine could 
appear to take longer than it actually does. Here's a slightly better approach:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartTime = NextTimerTick
' Insert the code to be benchmarked here.
Print Timer _ StartTime

' Wait for the current timer tick to elapse.
Function NextTimerTick() As Single
    Dim t As Single
    t = Timer
    Do: Loop While t = Timer
    NextTimerTick = Timer
End Function
</pre>
</td></tr>
</table></p>

<p>If you're using the <I>Timer</I> function in production code, you should be aware 
that it's reset at midnight, so you always run the risk of introducing unlikely but 
potentially serious errors. Try to spot the bug in this routine, which adds a CPU-independent 
pause in your code:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' WARNING: this procedure has a bug.
Sub BuggedPause(seconds As Integer)
    Dim start As Single
    start = Timer
    Do: Loop Until Timer _ start  &gt;= seconds
End Sub
</pre>
</td></tr>
</table></p>

<p>The bug manifests itself very rarely&#8212;for example, if the program asks for 
a 2-second pause at 11:59:59 p.m. Even if this probability is small, the effect of 
this minor bug is devastating and you'll have to press Ctrl+Alt+Del to kill your 
compiled application. Here's a way to work around this issue:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The correct version of the procedure
Sub Pause(seconds As Integer)
    Const SECS_INDAY = 24! * 60 * 60    ' Seconds per day
    Dim start As Single
    start = Timer
    Do: Loop Until (Timer + SECS_INDAY - start) Mod SECS_INDAY &gt;= seconds
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="181"><h2>Building and Extracting Date and Time Values</h2></A>
<p>There are many ways to assemble a Date value. For example, you can use a 
Date constant, such as the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
StartDate = #8/15/1998 9:20:57 PM#
</pre>
</td></tr>
</table></p>

<p>but more often you'll build a Date value using one of the many functions that 
VBA gives you. The <I>DateSerial</I> function builds a Date value from its 
year/month/day components; similarly, the 
<I>TimeSerial</I> function builds a Time value from its 
hour/minute/second components:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print DateSerial(1998, 8, 14)          ' Displays &quot;8/14/98&quot;
Print TimeSerial(12, 20, 30)           ' Displays &quot;12:20:30 P.M.&quot;
' Note that they don't raise errors with invalid arguments.
Print DateSerial(1998, 4, 31)          ' Displays &quot;5/1/98&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>DateSerial</I> function is also useful for determining indirectly whether a 
particular year is a leap year:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Function IsLeapYear(year As Integer) As Boolean
    ' Are February 29 and March 1 different dates?
    IsLeapYear = DateSerial(year, 2, 29) &lt;&gt; DateSerial(year, 3, 1)
End Function
</pre>
</td></tr>
</table></p>

<p>The <I>DateValue</I> and 
<I>TimeValue</I> functions return the date or time portions of 
their argument, which can be a string or a Date expression:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The date a week from now
Print DateValue(Now + 7)            ' Displays &quot;8/21/98&quot;
</pre>
</td></tr>
</table></p>

<p>A bunch of VBA functions let you extract date and time information from a 
Date expression or variable. The <I>Day</I>, 
<I>Month</I>, and <I>Year</I> functions return date 
values, whereas the <I>Hour</I>,<I> Minute</I>,<B> 
</B>and <I>Second</I> functions return time values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Get information about today's date.
y = Year(Now): m = Month(Now): d = Day(Now)
' These functions also support any valid date format.
Print Year(&quot;8/15/1998 9:10:26 PM&quot;)    ' Displays &quot;1998&quot;
</pre>
</td></tr>
</table></p>

<p>The <I>Weekday</I> function returns a number in the range 1 through 7, which 
corresponds to the day of the week of a given Date argument:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Weekday(&quot;8/14/98&quot;)           ' Displays &quot;6&quot; (= vbFriday)
</pre>
</td></tr>
</table></p>

<p>The <I>Weekday</I> function returns 1 when the date is the first day of the week. 
This function is locale aware, which means that under different localizations of 
Microsoft Windows it could consider the first day of the week to be different from 
<I>vbSunday</I>. In most cases, this condition doesn't affect the structure of your code. But if you 
want to be sure that 1 means Sunday, 2 means Monday, and so on, you can force 
the function to return a consistent value under all Windows systems, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print Weekday(Now, vbSunday)
</pre>
</td></tr>
</table></p>

<p>Although using the optional second argument forces the function to return 
the correct value, it doesn't change the system localization. If you next call the 
<I>Weekday</I> function without the second argument, it will still consider the first day of the 
week to be what it was before.</p>

<p>Finally you can extract any date and time information from a Date value 
or expression using the <I>DatePart</I> function, for which the syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Result = DatePart(Interval, Date, [FirstDayOfWeek], [FirstWeekOfYear])
</pre>
</td></tr>
</table></p>

<p>You'll rarely need to resort to this function because you can do most of 
your calculations using the other functions I've shown you so far. In two cases, 
however, this function is really useful:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The quarter we are in
Print DatePart(&quot;q&quot;, Now)           ' Displays &quot;3&quot;
' The week number we are in (# of weeks since Jan 1st)
Print DatePart(&quot;ww&quot;, Now)          ' Displays &quot;33&quot;
</pre>
</td></tr>
</table></p>

<p> The first argument can be one of the String constants listed in Table 5.1. 
For more information about the two optional arguments, see the description of 
the <I>DateAdd</I> function in the next section.</p>

<p><B>Table 5-1.</B> <i>Possible values for the</i> interval <i>argument in</i> DatePart, DateAdd, <i>and</i> DateDiff <i>functions.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Setting</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">&quot;<I>yyyy&quot;</I></td>
<td valign="top">Year</td>
</tr>
<tr>
<td valign="top">&quot;<I>q&quot;</I></td>
<td valign="top">Quarter</td>
</tr>
<tr>
<td valign="top">&quot;<I>m&quot;</I></td>
<td valign="top">Month</td>
</tr>
<tr>
<td valign="top">&quot;<I>y&quot;</I></td>
<td valign="top">Day of the year (same as <I>d</I>)</td>
</tr>
<tr>
<td valign="top">&quot;<I>d&quot;</I></td>
<td valign="top">Day</td>
</tr>
<tr>
<td valign="top">&quot;<I>w&quot;</I></td>
<td valign="top">Weekday</td>
</tr>
<tr>
<td valign="top">&quot;<I>ww&quot;</I></td>
<td valign="top">Week</td>
</tr>
<tr>
<td valign="top">&quot;<I>h&quot;</I></td>
<td valign="top">Hour</td>
</tr>
<tr>
<td valign="top">&quot;<I>n&quot;</I></td>
<td valign="top">Minute</td>
</tr>
<tr>
<td valign="top">&quot;s&quot;</td>
<td valign="top">Second</td>
</tr>
</table></p>

<A NAME="182"><h2>Date Arithmetic</h2></A>
<p>In most cases, you don't need any special functions to perform date arithmetic. 
All you need to know is that the integer part in a Date variable holds the date 
information, and the fractional part holds the time information:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' 2 days and 12 hours from now
Print Now + 2 + #12:00#        ' Displays &quot;8/17/98 8:35:48 A.M.&quot;
</pre>
</td></tr>
</table></p>

<p>For more sophisticated date math, you can use the 
<I>DateAdd</I> function, for which the syntax is the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
NewDate = DateAdd(interval, number, date)
</pre>
</td></tr>
</table></p>

<p>The <I>interval </I>is a string that indicates a date or time unit (see Table 5-1), <I>number </I>is the number of units you are adding, and 
<I>date </I>is the starting date. You can use this function to add and subtract date and time values:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' The date three months from now
Print DateAdd(&quot;m&quot;, 3, Now)            ' Displays &quot;11/14/98 8:35:48 P.M.&quot;
' One year ago (automatically accounts for leap years)
Print DateAdd(&quot;yyyy&quot;, -1, Now)        ' Displays &quot;8/14/97 8:35:48 P.M.&quot;
' The number of months since Jan 30, 1998
Print DateDiff(&quot;m&quot;, #1/30/1998#, Now)       ' Displays &quot;7&quot;
' The number of days since Jan 30, 1998 _ you can use &quot;d&quot; or &quot;y&quot;.
Print DateDiff(&quot;y&quot;, #1/30/1998#, Now)       ' Displays &quot;196&quot;
' The number of entire weeks since Jan 30, 1998
Print DateDiff(&quot;w&quot;, #1/30/1998#, Now)       ' Displays &quot;28&quot;
' The number of weekends before 21st century - value &lt;0 means
' future dates.
' Note: use &quot;ww&quot; to return the number of Sundays in the date interval.
Print DateDiff(&quot;ww&quot;, #1/1/2000#, Now)       ' Displays &quot;-72&quot;
</pre>
</td></tr>
</table></p>

<p>When you have two dates and you want to evaluate the difference 
between them&#8212;that is, the time elapsed between one date and the next&#8212;you should use 
the <I>DateDiff</I> function, for which the syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Result = DateDiff(interval, startdate, enddate _
    [, FirstDayOfWeek[, FirstWeekOfYear]])
</pre>
</td></tr>
</table></p>

<p>where<I> interval </I>has the meaning shown in Table 5-1, 
<I>FirstDayOfWeek </I>is an optional argument that you can use to specify which weekday should be considered as 
the first day of the week (you can use the constants 
<I>vbSunday</I>, <I>vbMonday</I>, and so on), and 
<I>FirstWeekOfYear </I>is another optional argument that lets you specify which 
week should be considered as the first week of the year. (See Table 5-2.)</p>

<p><B>Table 5-2.</B> <i>Possible values for the</i> FirstWeekOfYear <i>argument in the</i> DateDiff <i>function.</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th><i>Constant</i></th>
<th><i>Value</i></th>
<th><i>Description</i></th>
</tr>
<tr>
<td valign="top">vbUseSystem</td>
<td valign="top">0</td>
<td valign="top">Use the NLS API setting.</td>
</tr>
<tr>
<td valign="top">vbFirstJan1</td>
<td valign="top">1</td>
<td valign="top">The first week is the one that includes January 1. (This is the default value for this setting.)</td>
</tr>
<tr>
<td valign="top">vbFirstFourDays</td>
<td valign="top">2</td>
<td valign="top">The first week is the first one that has at least four days in the new year.</td>
</tr>
<tr>
<td valign="top">vbFirstFullWeek</td>
<td valign="top">3</td>
<td valign="top">This first week is the first one that's <I></I>completely contained in the new year.</td>
</tr>
</table></p>

<A NAME="183"><h2>Format Options for Date and Time Values</h2></A>
<p>The most important and flexible function for formatting date and time values is 
the <I>Format</I> function. This function gives you seven different, named formats for 
date and time:</p>

<UL>
<p><li> <I>General Date</I> (date and time in general format; only the date if the fractional part is 0; only the time if the integer part is 0)</li></p>

<p><li> <I>Long Date</I> (for example, <I>Friday, August 14, 1998,</I> but results vary depending on your locale)</li></p>

<p><li> <I>Medium Date</I> (for example, <I>14-Aug-98)</I></li></p>

<p><li> <I>Short Date</I> (for example, <I>8/14/98)</I></li></p>

<p><li> <I>Long Time</I> (for example, <I>8:35:48)</I></li></p>

<p><li> <I>Medium Time</I> (for example, <I>8:35 A.M.)</I></li></p>

<p><li> <I>Short Time</I> (for example, <I>8:35</I> in a 24 hour format)</li></p>
</UL>
 
<p>You also have a few special characters with which you can build your 
own custom date and time format strings, including one- and two-digit day and 
month numbers, complete or abbreviated month and weekday names, 
a.m/p.m. indicators, week and quarter numbers, and so on:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' mmm/ddd = abbreviated month/weekday,
' mmmm/dddd = complete month/weekday
Print Format(Now, &quot;mmm dd, yyyy (dddd)&quot;)  ' &quot;Aug 14, 1998 (Friday)&quot;
' hh/mm/ss always use two digits, h/m/s use one or two digits
Print Format(Now, &quot;hh:mm:ss&quot;)             ' &quot;20:35:48&quot;
Print Format(Now, &quot;h:mm AMPM&quot;)            ' &quot;8:35 P.M.&quot;
' y=day in the year, ww=week in the year, q=quarter in the year
' Note how a backslash can be used to specify literal characters.
Print Format(Now, &quot;mm/dd/yy (\d\a\y=y \w\e\e\k=ww \q\u\a\r\t\e\r=q)&quot;)
                      ' Displays &quot;08/14/98 (day=226 week=33 quarter=3)&quot;
</pre>
</td></tr>
</table></p>

<p><img src="images/new.jpg" width=102 height=87 border=0></p>

<p>Visual Basic 6 has introduced the new 
<I>FormatDateTime</I> function. It's far 
less flexible than the standard <I>Format</I> function and permits only a subset of the 
<I>Format</I> function's named formats. The only advantage of the 
<I>FormatDateTime</I> function is that it's also supported under VBScript and so can contribute to the ease of porting 
pieces of code from Visual Basic and VBA to VBScript and vice versa. Its syntax is</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
result = FormatDateTime(Expression, [NamedFormat])
</pre>
</td></tr>
</table></p>

<p>where <I>NamedFormat </I>can be one of the following intrinsic constants: 
0-vbGeneralDate (the default), 1-vbLongDate, 2-vbShortDate, 3-vbLongTime, or 4-vbShortTime. 
Here are a few examples:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print FormatDateTime(Now)                 ' &quot;8/14/98 8:35:48 P.M.&quot;
Print FormatDateTime(Now, vbLongDate)     ' &quot;Saturday, August 15, 1998&quot;
Print FormatDateTime(Now, vbShortTime)    ' &quot;20:35&quot;
</pre>
</td></tr>
</table></p>

<p>Visual Basic 6 also includes two new functions related to date formatting. 
The <I>MonthName</I> function returns the complete or abbreviated name of a month, 
whereas the <I>WeekdayName</I> function returns the complete or abbreviated name of a 
weekday. Both are locale aware, so you can use them to list month and weekday 
names in the language the operating system has been 
configured for:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Print MonthName(2)                           ' &quot;February&quot;
Print MonthName(2, True)                     ' &quot;Feb&quot;
Print WeekdayName(1, True)                   ' &quot;Sun&quot;
</pre>
</td></tr>
</table>
</p>

</BODY>
</HTML>





