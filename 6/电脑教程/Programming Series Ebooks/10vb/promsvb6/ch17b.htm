<HTML>
<HEAD>
<TITLE>ActiveX Control Fundamentals </TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch17a.htm", "ch17c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="806"><h1>ActiveX Control Fundamentals </h1></A>
<p>Visual Basic 5 and 6 give you all the tools you need to create powerful ActiveX 
controls, which you can then reuse in all your projects. More precisely, you can 
create two different types of ActiveX controls:
</p>

<UL>

<p><li> Private ActiveX controls that can be included in any type of Visual 
Basic project. They're saved in files with the 
<I>.</I>ctl extension, and you can reuse them in any other Visual Basic project merely by adding the file to 
the project. (This is reuse at the source-code level.)
</li></p>
<p><li> Public ActiveX controls that can be included only in ActiveX 
control projects; you have to compile them into OCX files, and then you can 
use them in any other Microsoft Windows application written in Visual 
Basic, Microsoft Visual C++, or any other development environment that 
supports ActiveX controls. (This is reuse at the binary level.)
</li></p>
</UL>

<p>Visual Basic 5 was the first language that permitted programmers to 
create ActiveX controls using a visual approach. As you'll see in a moment, you can 
create powerful controls by simply grouping simpler controls together: These controls 
are known as <I>constituent controls</I>. By putting together a PictureBox and two scroll 
bar controls, for example, you can create an ActiveX control that can scroll its 
contents. Visual Basic also allows you to create an ActiveX control without using any 
constituent controls. These are the so-called <I>owner-drawn 
</I>ActiveX controls.
</p>

<p>You should also keep this in mind when working with ActiveX controls: 
You're used to distinguishing between two distinct types of people interacting with 
your program&#8212;the developer and the user. To better understand how ActiveX 
controls behave, you need to take another role into account, the 
<I>author </I>of the control itself. The author's job is to prepare a control that will be used by the developer to 
deliver an application to the user. As you'll see, the author's and developer's 
perspectives are sometimes different, even though the two roles might be occupied by the 
same person. (That is, you might act as the author of the control and then as the 
developer who uses it.)
</p>

<A NAME="807"><h2>Creating the UserControl Module</h2></A>

<p>In this section, I'll show you how to create a sort of super-TextBox control that 
adds extra capabilities to the regular TextBox control, such as filtering out invalid 
characters. The steps that you have to take any time you create a new Public ActiveX 
control are the following ones:
</p>

<OL>
<p><li> Add a new ActiveX control project to the environment. This new 
project already includes a UserControl module. (Alternatively, manually add 
a UserControl module from the Project menu if you're creating a 
Private ActiveX control.)
</li></p>
<p><li> Give the project a meaningful name and a description. The former 
becomes the name of the control's library, and the latter is the string 
that appears in the Components dialog box for all the projects that use 
this control. In this example, we'll use the project's name 
<I>SuperTB</I> and the description <I>An enhanced TextBox 
control</I>.
</li></p>
<p><li> Click on the UserControl designer's window to give it the focus, and 
then enter a value for the <I>Name </I>property of the control in the Properties 
window. In this example, you can enter 
<I>SuperTextBox</I>.
</li></p>
<p><li> Place one or more constituent controls on the surface of the 
UserControl designer. In this example, you need to add a Label control and a 
TextBox control, as shown in Figure 17-1.
</li></p>
</OL>
<p>
<A HREF="javascript:fullSize('F17ph01x.htm')"> <img src="images/F17ph01.JPG" width=404 height=285 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-1.</B> <i>The SuperTextBox control at design time.</i><!--/caption-->
</p>

<p>You can use any intrinsic control as a constituent control of an ActiveX 
control except the OLE Container control (whose Toolbox icon is disabled when an 
ActiveX control designer has the focus). You can also use external ActiveX controls as 
constituent controls, but if you use one you should ascertain that you have the legal 
right to encapsulate it in your own control. All the ActiveX controls in the Visual 
Basic package except DBGrid can be freely reused in your own ActiveX control. 
Always carefully read the license agreements for third-party controls before encapsulating 
any in your own controls. You'll find more advice about these matters in the 
&quot;<A HREF="ch17e.htm#884">Licensing</A>&quot; section near the end of this chapter. Finally, you can create ActiveX controls that 
don't use constituent controls, such as the SuperLabel control that you can find on 
the companion CD in the same directory as the SuperText project.
</p>

<p>Now you can close the UserControl designer's window and switch to the 
Standard EXE project that you are using as a test client program. You'll notice that a 
new icon is now active in the Toolbox. Select it, and drop an instance of your brand 
new control on the form, as shown in Figure 17-2.
</p>

<p>Congratulations! You've just created your first ActiveX control.
</p>

<p>I want to draw your attention to one specific point in the previous 
description. You need to explicitly close the ActiveX control designer window before using 
the control on the test container form. If you omit this step, the icon in the Toolbox 
stays inactive. In fact, Visual Basic activates the ActiveX control and prepares it for 
<I>siting </I>only when you close the designer 
window<I>. </I>Siting refers to the instant an 
ActiveX control is placed on its container's surface.
</p>

<p>You need to keep in mind that you have to deal with two different 
instances of the control, the design-time instance and the run-time instance. Unlike other 
Visual Basic modules, a UserControl module must be active even when the test project 
is in design mode. This is necessary because the control must react to the 
programmer's actions, such as entering the value of a property in the Properties window or 
resizing the control on the parent form. When you're working with the ActiveX control 
designer open, however, the control itself is in design mode and therefore can't be 
used in a form. To run an ActiveX control, you need to close its designer window, as I explained earlier.
</p>

<p>
<A HREF="javascript:fullSize('F17ph02x.htm')"> <img src="images/F17ph02.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-2.</B> <i>An instance of the SuperTextBox control on a testform. The Properties window includes a number of properties that have been defined for you by Visual Basic.</i><!--/caption-->
</p>

<A NAME="808"><h2>Running the ActiveX Control Interface Wizard</h2></A>

<p>Our first version of the SuperTextBox control doesn't do anything useful yet, but 
you can run the client application and ensure that everything is working and that no 
error is raised. To turn this first prototype into a useful control, you need to add 
properties and methods and write the code that correctly implements the new features.
</p>

<p>To complete the SuperTextBox control, you need to add all the properties 
that the user of this control expects to find, such as 
<I>ForeColor</I>, <I>Text</I>, and <I>SelStart</I>. A 
few of these properties must appear in the Properties window; others are run 
time_only properties. You also need to add other properties and methods that expand the 
basic TextBox functionality&#8212;for example the 
<I>FormatMask </I>property (which affects how the control's contents is formatted) or the 
<I>Copy </I>method (which copies the control's contents to the Clipboard).
</p>

<p>In most cases, these properties and methods map directly to properties 
and methods of constituent controls: for example, the 
<I>ForeColor </I>and the <I>Text </I>properties map directly to the Text1 constituent control's properties with the same 
names, whereas the <I>Caption </I>property corresponds to the 
<I>Caption </I>property of the Label1 constituent control. This is similar to the concept of inheritance by delegation 
that you saw in <a href="ch07a.htm">Chapter 7</a>.
</p>

<p>To facilitate the task of creating the public interface of an ActiveX control 
and writing all the delegation code, Visual Basic includes the ActiveX Control 
Interface Wizard. This add-in is installed with the Visual Basic package, but you might 
need to explicitly load it from within the Add-In Manager dialog box.
</p>

<p>In the first step of the wizard, you select the interface members, as shown 
in Figure 17-3. The wizard lists the properties, methods, and events that are 
exposed by the constituent controls and lets you select which ones should be made 
available to the outside. In this case, accept all those that are already in the rightmost list 
except <I>BackStyle</I>, and then add the following items: 
<I>Alignment</I>, <I>Caption</I>, <I>Change</I>, 
<I>hWnd</I>, <I>Locked</I>, <I>MaxLength</I>, 
<I>MouseIcon</I>, <I>MousePointer</I>, 
<I>PasswordChar</I>, <I>SelLength</I>, 
<I>SelStart</I>, <I>SelText</I>, <I>Text</I>, plus all the 
<I>OLE</I>xxxx properties, methods, and events. These 
members ensure that the SuperTextBox control matches nearly all the capabilities of a 
regular TextBox control. A few properties have been left out&#8212;namely, 
<I>MultiLine </I>and <I>ScrollBars</I>. The reason for these exclusions will be clear later.
</p>

<p>
<A HREF="javascript:fullSize('F17ph03x.htm')"> <img src="images/F17ph03.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-3.</B> <i>The first step of the ActiveX Control Interface Wizard. You can also highlight multiple items and add all of them in one operation.</i><!--/caption-->
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>
Unfortunately, the ActiveX Control Interface Wizard lets you 
include many properties, methods, and events that you should never add to the 
public interface of your controls&#8212;for example, the 
<I>ToolTipText</I>,<I> CausesValidation</I>,<I> 
WhatsThisHelpID</I>,<I> </I>and <I>Validate </I>event. As a matter of fact, Visual Basic 
automatically adds these members to any ActiveX control that you create, so you 
don't need to specify them unless you plan to use the control in environments 
other than Visual Basic. More on this later.
</blockquote></div>
</p>


<p>In the next step, you define all the custom properties, methods, and 
events that your ActiveX control exposes. You should add the 
<I>FormatMask</I>, <I>FormattedText</I>, 
<I>CaptionFont</I>, <I>CaptionForeColor</I>,<I> 
</I>and <I>CaptionBackColor</I> properties; the 
<I>Copy</I>, <I>Clear</I>, <I>Cut</I>, and <I>Paste 
</I>methods; and the <I>SelChange </I>event.
</p>

<p>In the third step, you define how the public members of the ActiveX 
control are mapped to the members of its constituent controls. For example, the 
<I>Alignment </I>public property should be mapped to the 
Text1<I> </I>constituent control's <I>Alignment 
</I>property. The same holds true for the majority of the members in the list, and you 
can speed up mapping operations by selecting all of members and assigning them to 
the Text1<I> </I>control, as shown in Figure 17-4.
</p>

<p>
<A HREF="javascript:fullSize('F17ph04x.htm')"> <img src="images/F17ph04.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-4.</B> <i>In the third step in the ActiveX Control Interface Wizard, you canmap multiple members by highlighting them in the leftmost list and then selectinga constituent control in the Control combo box on the right.</i><!--/caption-->
</p>

<p>A few members&#8212;for example, the <I>Caption 
</I>property&#8212;map to the Label1 constituent control. You must specify the name of the original member in the constituent 
control when the two names differ, as in the case of the 
<I>CaptionForeColor</I>,<I> CaptionBackColor</I>, and 
<I>CaptionFont</I> properties that correspond to the Label1's 
<I>ForeColor</I>, <I>BackColor</I>,<I> </I>and 
<I>Font</I> properties, respectively. At other times, you have to map a public member 
to the UserControl itself&#8212;for example, the 
<I>Refresh </I>method.
</p>

<p>There might be members that can't be directly mapped to any constituent 
control, and in the fourth step of the wizard you define how such members behave. 
For example, you declare that the <I>Copy</I>,<I> 
Cut</I>, <I>Clear</I>, and <I>Paste </I>methods are 
<I>Sub</I>s by setting their return type to 
<I>Empty</I>. Similarly, you specify that <I>FormatMask 
</I>is a String property that can be read and modified either at design time or run time, 
whereas the <I>FormattedText </I>isn't available at design time and is read-only at run time. 
You should also specify an empty string as the default value for these three 
properties because even if you change the property type to String, the Wizard doesn't 
automatically change the value <I>0</I> that it initially set as the default. You must enter the 
argument list for all methods and events, as well as a brief description for each 
member, as shown in Figure 17-5.
</p>

<p>The otherwise excellent ActiveX Control Interface Wizard has some 
limitations, though. For example, you can neither define properties with arguments, nor 
can you enter a description for all the custom properties&#8212;the 
<I>CaptionFont </I>and <I>CaptionForeColor </I>properties in this case&#8212;that are mapped to constituent controls.
</p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>Beware, international programmers! Being written in Visual 
Basic, the ActiveX Control Interface Wizard inherits a curious bug from the language 
if the Regional Setting established in the Control Panel isn't English. When 
Boolean constants True and False are concatenated in a string, the value you 
obtain is the localized string corresponding to that value. (For example, in 
Italian you get the strings &quot;Vero&quot; and &quot;Falso&quot;, respectively.) Thus, in these 
circumstances the Wizard doesn't produce correct Visual Basic code, and you 
might have to edit it manually to run it. Or, if you prefer, you can set the Regional 
Setting to English if you plan to run the Wizard often in a programming session.
</blockquote></div>
</p>

<p>
<A HREF="javascript:fullSize('F17ph05x.htm')"> <img src="images/F17ph05.JPG" width=404 height=310 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 17-5.</B> <i>In the fourth step in the ActiveX Control Interface Wizard, you decide the syntax of methods and events and whether properties are read/write or read-only at run time.</i><!--/caption-->
</p>

<p>You're finally ready to click on the Finish button and generate all the code 
for the SuperTextBox control. If you go back to the instance of the control on the 
test form, you'll notice that the control has been grayed. This happens each time 
you change the public interface of the control. You can make the ActiveX control 
active again by right-clicking on its parent form and selecting the Update UserControls 
menu command.
</p>

<A NAME="809"><h2>Adding the Missing Pieces</h2></A>

<p>Looking at the code that the ActiveX Control User Interface wizard generates is a 
good starting point for learning how ActiveX controls are implemented. Most of the 
time, you'll see that a UserControl module isn't different from a regular class module. 
One important note: The wizard adds several commented lines that it uses to keep 
track of how members are implemented. You should follow the warnings that come 
along with these lines and avoid deleting them or modifying them in any way.
</p>

<A NAME="810"><h3>Delegated properties, methods, and events</h3></A>

<p>As I already explained, most of the code generated by the wizard does nothing 
but delegate the real action to the inner constituent controls. For example, see how 
the <I>Text </I>property is implemented:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get Text() As String
    Text = Text1.Text
End Property
Public Property Let Text(ByVal New_Text As String)
    Text1.Text() = New_Text
    PropertyChanged &quot;Text&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>The <I>PropertyChanged </I>method informs the container environment&#8212;Visual 
Basic, in this case&#8212;that the property has been updated. This serves two purposes. First, 
at design time Visual Basic should know that the control has been updated and has 
to be saved in the FRM file. Second, at run time, if the 
<I>Text </I>property is bound to a database field, Visual Basic has to update the record. Data-aware ActiveX 
controls are described in the &quot;<A HREF="ch17d.htm#857">Data Binding</A>&quot; section, later in this chapter.
</p>

<p>The delegation mechanism also works for methods and events. For 
example, see how the SuperTextBox module traps the Text1 control's 
<I>KeyPress </I>event and exposes it to the outside, and notice how it delegates the 
<I>Refresh </I>method to the UserControl object:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>' The declaration of the event
Event KeyPress(KeyAscii As Integer) 

Private Sub Text1_KeyPress(KeyAscii As Integer)
    RaiseEvent KeyPress(KeyAscii)
End Sub

Public Sub Refresh()
    UserControl.Refresh
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="811"><h3>Custom properties</h3></A>
<p>For all the public properties that aren't mapped to a property of a constituent 
control, the ActiveX Control Interface Wizard can't do anything but create a 
private member variable that stores the value assigned from the outside. For example, 
this is the code generated for the <I>FormatMask 
</I>custom property:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Dim m_FormatMask As String

Public Property Get FormatMask() As String
    FormatMask = m_FormatMask
End Property

Public Property Let FormatMask(ByVal New_FormatMask As String)
    m_FormatMask = New_FormatMask
    PropertyChanged &quot;FormatMask&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>Needless to say, you decide how such custom properties affect the 
behavior or the appearance of the SuperTextBox control. In this particular case, this 
property changes the behavior of another custom property, 
<I>FormattedText</I>, so you should modify the code generated by the wizard as follows:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Get FormattedText() As String
    FormattedText = Format$(Text, FormatMask)
End Property
</pre>
</td></tr>
</table>
</p>

<p>The <I>FormattedText </I>property had been defined as read-only at run time, so 
the wizard has generated its <I>Property Get </I>procedure but not its 
<I>Property Let </I>procedure.
</p>

<A NAME="812"><h3>Custom methods </h3></A>

<p>For each custom method you have added, the wizard generates the skeleton of a 
Sub or Function procedure. It's up to you to fill this template with code. For 
example, here's how you can implement the <I>Copy 
</I>and <I>Clear </I>methods:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Sub Copy()
    Clipboard.Clear
    Clipboard.SetText IIf(SelText &lt;&gt; &quot;&quot;, SelText, Text)
End Sub

Public Sub Clear()
    If SelText &lt;&gt; &quot;&quot; Then SelText = &quot;&quot; Else Text = &quot;&quot;
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You might be tempted to use <I>Text1.Text </I>and 
<I>Text1.SelText </I>instead of <I>Text </I>and 
<I>SelText </I>in the previous code, but I advise you not to do it. If you use the public 
name of the property, your code is slightly slower, but you'll save a lot of time if you 
later decide to change the implementation of the 
<I>Text </I>property.
</p>

<A NAME="813"><h3>Custom events</h3></A>

<p>You raise events from a UserControl module exactly as you would from within 
a regular class module. When you have a custom event that isn't mapped to any 
event of constituent controls, the wizard has generated only the event declaration for 
you because it can't understand when and where you want to raise it.
</p>

<p>The SuperTextBox control exposes the <I>SelChange 
</I>event, which is raised when either the <I>SelStart 
</I>property or the <I>SelLength </I>property (or both) change. This event 
is useful when you want to display the current column on the status bar or 
when you want to enable or disable toolbar buttons depending on whether there's any 
selected text. To correctly implement this event, you must add two private variables and 
a private procedure that's called from multiple event procedures in the 
UserControl module:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private saveSelStart As Long, saveSelLength As Long

' Raise the SelChange event if the cursor moved.
Private Sub CheckSelChange()
    If SelStart &lt;&gt; saveSelStart Or SelLength &lt;&gt; saveSelLength Then
        RaiseEvent SelChange
        saveSelStart = SelStart
        saveSelLength = SelLength
    End If
End Sub

Private Sub Text1_KeyUp(KeyCode As Integer, Shift As Integer)
    RaiseEvent KeyUp(KeyCode, Shift)
    CheckSelChange
End Sub

Private Sub Text1_Change()
    RaiseEvent Change
    CheckSelChange
End Sub
</pre>
</td></tr>
</table>
</p>

<p>In the complete demonstration project that you can find on the companion 
CD, the <I>CheckSelChange </I>procedure is called from within Text1's 
<I>MouseMove</I> and <I>MouseUp </I>event procedures and also from within the 
<I>Property Let SelStart </I>and <I>Property Let SelLength 
</I>procedures.
</p>

<A NAME="814"><h3>Properties that map to multiple controls</h3></A>

<p>Sometimes you might need to add custom code to correctly expose an event to 
the outside. Take, for example, the <I>Click </I>and 
<I>DblClick </I>events: You mapped them to the Text1 constituent control, but the UserControl module should raise an event also when 
the user clicks on the Label1 control. This means that you have to manually write the 
code that does the delegation:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub Label1_Click()
    RaiseEvent Click
End Sub

Private Sub Label1_DblClick()
    RaiseEvent DblClick
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You might also need to add delegation code when the same property 
applies to multiple constituent controls. Say that you want the 
<I>ForeColor </I>property to affect both the Text1 and Label1 controls. Since the wizard can map a property only to 
a single control, you must add some code (shown as boldface in the following 
listing) in the <I>Property Let</I> procedure that propagates the new value to the other 
constituent controls:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let ForeColor(ByVal New_ForeColor As OLE_COLOR)
    Text1.ForeColor = New_ForeColor
<B>    Label1.ForeColor = New_ForeColor</B>
    PropertyChanged &quot;ForeColor&quot;
End Property
</pre>
</td></tr>
</table>
</p>

<p>You don't need to modify the code in the corresponding 
<I>Property Get </I>procedure, however.
</p>

<A NAME="815"><h3>Persistent properties</h3></A>
<p>The ActiveX Control Interface Wizard automatically generates the code that 
makes all the control's properties persistent via FRM files. The persistence mechanism 
is identical to the one used for persistable ActiveX components (which I explained 
in <a href="ch16a.htm">Chapter 16</a>). In this case, however, you never have to explicitly ask an ActiveX 
control to save its own properties because the Visual Basic environment does it for 
you automatically if any of the control's properties have changed during the editing 
session in the environment
</p>

<p>When the control is placed on a form, Visual Basic fires 
its <I>UserControl_InitProperties </I>event. In this event procedure, the control should initialize its 
properties to their default values. For example, this is the code that the wizard generates for 
the SuperTextBox control:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Const m_def_FormatMask = &quot;&quot;
Const m_def_FormattedText = &quot;&quot;

Private Sub UserControl_InitProperties()
    m_FormatMask = m_def_FormatMask
    m_FormattedText = m_def_FormattedText
End Sub
</pre>
</td></tr>
</table>
</p>

<p>When Visual Basic saves the current form to an FRM file, it asks the 
ActiveX control to save itself by raising its <I>UserControl_WriteProperties 
</I>event:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_WriteProperties(PropBag As PropertyBag)
    Call PropBag.WriteProperty(&quot;FormatMask&quot;, m_FormatMask, m_def_FormatMask)
    Call PropBag.WriteProperty(&quot;FormattedText&quot;, m_FormattedText, _
        m_def_FormattedText)
    Call PropBag.WriteProperty(&quot;BackColor&quot;, Text1.BackColor, &amp;H80000005)
    Call PropBag.WriteProperty(&quot;ForeColor&quot;, Text1.ForeColor, &amp;H80000008)
    ' Other properties omitted....
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The third argument passed to the PropertyBag object's 
<I>WriteProperty </I>method is the default value for the property. When you're working with color properties, 
you usually pass hexadecimal constants that stand for system colors. For 
example, &amp;H80000005 is the vbWindowBackground constant (the default background 
color), and &amp;H80000008 is the vbWindowText constant (the default text color). 
Unfortunately, the wizard doesn't generate symbolic constants directly. For a complete list of 
supported system colors, use the Object Browser to enumerate the 
SystemColorConstants constants in the VBRUN library.
</p>

<p>When Visual Basic reloads an FRM file, it fires the 
<I>UserControl_ReadProperties </I>event to let the ActiveX control restore its own properties:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_ReadProperties(PropBag As PropertyBag)
    m_FormatMask = PropBag.ReadProperty(&quot;FormatMask&quot;, m_def_FormatMask)
    m_FormattedText = PropBag.ReadProperty(&quot;FormattedText&quot;, _
        m_def_FormattedText)
    Text1.BackColor = PropBag.ReadProperty(&quot;BackColor&quot;, &amp;H80000005)
    Text1.ForeColor = PropBag.ReadProperty(&quot;ForeColor&quot;, &amp;H80000008)
    Set Text1.MouseIcon = PropBag.ReadProperty(&quot;MouseIcon&quot;, Nothing)
    ' Other properties omitted....
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Again, the last argument passed to the PropertyBag object's 
<I>ReadProperty </I>method is the default value of the property being retrieved. If you manually edit the 
code created by the wizard, be sure that you use the same constant in the 
<I>InitProperties</I>, <I>WriteProperties</I>, and 
<I>ReadProperties </I>event procedures.
</p>

<p>The wizard does a good job of generating code for properties persistence, 
but in some cases you might need to fix it. For example, the preceding code directly 
assigns values to constituent controls' properties. While this approach is OK in 
most cases, it fails when the same property maps multiple controls, in which case 
you should assign the value to the Public property name. On the other hand, using 
the Public property name invokes its <I>Property Let 
</I>and <I>Set </I>procedures, which in turn call the 
<I>PropertyChanged </I>method and cause properties to be saved again even if 
they weren't modified during the current session. I'll show you how you can avoid 
this problem later in this chapter.
</p>

<p>Moreover, the wizard creates more code than strictly necessary. For 
example, it generates the code that saves and restores properties that aren't available at 
design time (<I>SelStart</I>, <I>SelText</I>, 
<I>SelLength</I>, and <I>FormattedText </I>in this particular case). 
Dropping the corresponding statements from the <I>ReadProperties 
</I>and <I>WriteProperties</I> procedures makes your FRM files shorter and speeds up save and load operations.
</p>

<A NAME="816"><h3>The UserControl's <I>Resize</I> event</h3></A>
<p>The UserControl object raises several events during the lifetime of an ActiveX 
control, and I'll describe all of them later in this chapter. One event, however, is 
especially important: the <I>Resize </I>event. This event fires at design time when the 
programmer drops the ActiveX control on the client form and also fires whenever the control 
itself is resized. As the author of the control, you must react to this event so that 
all the constituent controls move and resize accordingly. In this particular case, 
the position and size of constituent controls depend on whether the SuperTextBox 
control has a nonempty <I>Caption</I>:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub UserControl_Resize()
    On Error Resume Next
    If Caption &lt;&gt; &quot;&quot; Then
        Label1.Move 0, 0, ScaleWidth, Label1.Height
        Text1.Move 0, Label1.Height, ScaleWidth, _
            ScaleHeight - Label1.Height
    Else
        Text1.Move 0, 0, ScaleWidth, ScaleHeight
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The <I>On Error </I>statement serves to protect your application from errors that 
occur when the ActiveX control is shorter than the Label1 constituent control. The 
preceding code must execute also when the <I>Caption 
</I>property changes, so you need to add a statement to its 
<I>Property Let </I>procedure:
</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>Public Property Let Caption(ByVal New_Caption As String)
    Label1.Caption = New_Caption
    PropertyChanged &quot;Caption&quot;
<B>    Call UserControl_Resize</B>
End Property
</pre>
</td></tr>
</table>
</p>

</BODY>
</HTML>





