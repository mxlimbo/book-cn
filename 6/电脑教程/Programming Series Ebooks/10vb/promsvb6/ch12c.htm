<HTML>
<HEAD>
<TITLE>The CommonDialog Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12b.htm", "ch12d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="514"><h1>The CommonDialog Control</h1></A>

<p>The CommonDialog control provides an easy and convenient way to invoke the 
Color, Font, Printer, FileOpen, and FileSave Windows common dialog boxes, and it 
also allows you to display a page in a help file. This control exposes only properties 
and methods&#8212;no events. In most cases, you don't set any properties at design 
time because it's often preferable to assign all of them at run time, especially when 
you use the same control to display different dialog boxes. The control is invisible 
during the execution, so it doesn't support properties such as 
<I>Left</I>, <I>Visible</I>, or <I>TabIndex</I>. 
This control is embedded in the ComDlg32.ocx file, which has to be distributed with 
any Visual Basic application that uses it.
</p>

<p>The lack of a visible interface and the lack of events doesn't mean that this 
control is easy to use, though. As a matter of fact, using the CommonDialog control is 
a complex enterprise because it supports many options, some of which aren't 
always intuitive. Some properties have different meanings, depending on which 
common dialog box you're displaying. For example, the 
<I>Flags </I>property is a bit-field property, and the meaning of each bit is different for each of the various common dialog boxes.
</p>

<p>One of the few properties that can have the same meaning regardless of 
which common dialog box you're displaying is 
<I>CancelError</I>. If this property is True, an 
end user closing the dialog box using the Cancel key causes error 32755 (equal to 
the constant <I>cdlCancel</I>) to be raised in the calling program. The CommonDialog 
control includes intrinsic constants for all the errors that can be generated at run time.
</p>

<p>All common dialog boxes also share a few properties related to help 
support. You can display a Help button in the common dialog box and tell the 
CommonDialog control what page in what help file must be displayed when the user clicks the 
Help button. <I>HelpFile </I>is the complete name of the help file, 
<I>HelpContext </I>is the context ID of the requested page, and 
<I>HelpCommand </I>is the action that must be performed 
when the button is clicked. (It's usually assigned the value 1-cdlHelpContext.) Don't 
forget that to actually display the Help button, you must set a bit in the 
<I>Flags</I> property. The position of this bit varies with the particular common dialog box, for example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show a Help button. 
CommonDialog1.HelpFile = &quot;F:\vbprogs\DlgMaste\Tdm.hlp&quot;
CommonDialog1.HelpContext = 12
CommonDialog1.HelpCommand = cdlHelpContext
' The value for the Flags property depends on the dialog.
If ShowColorDialog Then
    CommonDialog1.Flags = cdlCCHelpButton
    CommonDialog1.ShowColor
ElseIf ShowFontDialog Then
    CommonDialog1.Flags = cdlCFHelpButton
    CommonDialog1.ShowFont
Else
    ' And so on
End If
</pre>
</td></tr>
</table>
</p>

<p>For more information about help properties, see the section &quot;<A HREF="ch12c.htm#523">Help Windows</A>,&quot; later in this chapter.
</p>

<p>The CommonDialog control exposes six methods: 
<I>ShowColor</I>, <I>ShowFont</I>, 
<I>ShowPrinter</I>, <I>ShowOpen</I>, 
<I>ShowSave</I>, and <I>ShowHelp</I>. Each method displays a 
different common dialog box, as explained in the following sections. On the 
companion CD, you'll find a complete demonstration program (part of which is visible in Figure 
122) that shows in action all the common dialog boxes described in this section.
</p>

<A NAME="515"><h2>The Color Dialog</h2></A>
<p>The Color common dialog box lets users select a color. It also permits them to 
define new custom colors, but you can keep this privilege from users by assigning 
the 4cdlCCPreventFullOpen value to the <I>Flags 
</I>property. Alternatively, you can display the custom color section of the dialog box when the dialog appears by setting 
the 2cdlCCFullOpen bit. (Custom color choices take up the right half of the dialog 
box shown in Figure 12-2.) You can initially highlight a color in the dialog box by 
assigning its RGB value to the <I>Color </I>property and setting the 1-cdlCCRGBInit bit in the 
<I>Flags </I>property, as in the following example:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Let the user change the ForeColor of the Text1 control.
With CommonDialog1
    ' Prevent display of the custom color section
    ' of the dialog.
    .Flags = cdlCCPreventFullOpen Or cdlCCRGBInit 
    .Color = Text1.ForeColor
        .CancelError = False
        .ShowColor
        Text1.ForeColor = .Color
End With
</pre>
</td></tr>
</table>
</p>

<p>When you provide an initial color, you don't need to set the 
<I>CancelError </I>property to True; if the user clicks on the Cancel 
key, the value of the <I>Color </I>property doesn't change.
</p>

<p>
<A HREF="javascript:fullSize('F12PH02x.htm')"> <img src="images/F12PH02.JPG" width=404 height=312 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-2.</B> <i>The Color common dialog box, with the section for creating custom colors already opened, as it appears in the demonstration program.</i><!--/caption-->
</p>

<A NAME="516"><h2>The Font Dialog</h2></A>
<p>The Font dialog box lets users select font names and attributes. You can initialize 
the value shown in the dialog box, and you can decide which attributes can be 
modified. Of course, it's also up to you to apply the new attributes to controls and 
objects in your application. An example of a Font dialog box, with all the 
options enabled, is shown in Figure 12-3.
</p>

<p>
<img src="images/F12ph03.GIF" width=401 height=344 border="0">
<p>
<!--caption--><B>Figure 12-3.</B> <i>The Font common dialog box.</i><!--/caption-->


<p>The font attributes can be initialized (and retrieved when the user closes 
the dialog box) through a number of properties whose names are 
self-explanatory: <I>FontName</I>, <I>FontSize</I>, 
<I>FontBold</I>, <I>FontItalic</I>, 
<I>FontUnderLine</I>, <I>FontStrikeThru</I>, and 
<I>Color</I>.
</p>

<p>When used with the Font common dialog box, the 
<I>Flags </I>property accepts all the options that are summarized in Table 12-2. You use these flags to affect what 
fonts are listed in the dialog box and to restrict user selection. One of the bits that 
you should always include is cdlCFForceFontExist. Besides, at least one of the first 
four values in Table 12-2 must be specified; otherwise, the CommonDialog control 
raises an error 24574 &quot;No fonts exist.&quot;
</p>
<p>
<B>Table 12-2.</B> <I>Values for the </I>Flags <I>property for a Font common dialog box.</i>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlCFScreenFonts</td>
<td valign="top">Show screen fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFPrinterFonts</td>
<td valign="top">Show printer fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFBoth</td>
<td valign="top">Show both screen fonts and printer fonts. (This 
is the sum of cdlCFScreenFonts and<I> </I>cdlCFPrinterFonts.)</td>
</tr>

<tr>
<td valign="top">cdlCFWYSIWYG</td>
<td valign="top">Show only fonts that are available both on 
the screen and on the printer.</td>
</tr>

<tr>
<td valign="top">cdlCFANSIOnly</td>
<td valign="top">Restrict selection to fonts that use ANSI 
character sets.</td>
</tr>

<tr>
<td valign="top">cdlCFFixedPitchOnly</td>
<td valign="top">Restrict selection to nonproportional (fixed 
pitch) fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFNoVectorFonts</td>
<td valign="top">Restrict selection to nonvector fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFScalableOnly</td>
<td valign="top">Restrict selection to scalable fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFTTOnly</td>
<td valign="top">Restrict selection to TrueType fonts.</td>
</tr>

<tr>
<td valign="top">cdlCFNoSimulations</td>
<td valign="top">Restrict selection to fonts that aren't GDI font 
simulations.</td>
</tr>

<tr>
<td valign="top">cdlCFLimitSize</td>
<td valign="top">Restrict selection to font size in the range 
indicated by the <I>Min </I>and <I>Max </I>properties.</td>
</tr>

<tr>
<td valign="top">cdlCFForceFontExist</td>
<td valign="top">Raise an error if user selects a font or a style 
that doesn't exist.</td>
</tr>

<tr>
<td valign="top">cdlCFEffects</td>
<td valign="top">Enable the strikethrough, underline, and color 
fields in the dialog box.</td>
</tr>

<tr>
<td valign="top">cdlCFNoFaceSel</td>
<td valign="top">Don't select font name.</td>
</tr>

<tr>
<td valign="top">cdlCFNoSizeSel</td>
<td valign="top">Don't select font size.</td>
</tr>

<tr>
<td valign="top">cdlCFNoStyleSel</td>
<td valign="top">Don't select font style. (Can be tested on exit to 
determine whether user selected a style.)</td>
</tr>

<tr>
<td valign="top">cdlCFHelpButton</td>
<td valign="top">Display the Help button.</td>
</tr>

</table>
</p>

<p>The following piece of code lets the user modify the font attributes of a 
TextBox control. It limits the user's selection to existing screen fonts and forces the font 
size in the range from 8 to 80 points:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With CommonDialog1
    .Flags = cdlCFScreenFonts Or cdlCFForceFontExist Or cdlCFEffects _
        Or cdlCFLimitSize
    .Min = 8
    .Max = 80
    .FontName = Text1.FontName
    .FontSize = Text1.FontSize
    .FontBold = Text1.FontBold
    .FontItalic = Text1.FontItalic
    .FontUnderline = Text1.FontUnderline
    .FontStrikethru = Text1.FontStrikethru
    .CancelError = False
    .ShowFont
    Text1.FontName = .FontName
    Text1.FontBold = .FontBold
    Text1.FontItalic = .FontItalic
    Text1.FontSize = .FontSize
    Text1.FontUnderline = .FontUnderline
    Text1.FontStrikethru = .FontStrikethru
End With
</pre>
</td></tr>
</table>
</p>

<p>In this particular case, you don't need to set the 
<I>CancelError </I>property to True because if the user clicks on the Cancel button the control doesn't modify 
any <I>Font</I>xxxx properties and all <I>Font</I>xxxx property values can be assigned back to 
the control without any undesirable effects.
</p>

<p>When you don't want to initialize a field with a well-defined value, you have 
a more complex problem. Consider this situation: You're writing a word processor 
application, and you display a Font common dialog box to let the user select the 
font name, size, and attributes of the selection portion of text. If the selection 
contains characters with homogeneous attributes, you can (and should) initialize the 
corresponding fields in the common dialog box. On the other hand, if the selection 
includes characters of different fonts or with different sizes or attributes, you should leave 
these fields blank. You can do this by specifying the cdlCFNoFaceSel, cdlCFNoStyleSel, 
and cdlCFNoStyleSel bits of the <I>Flags </I>property. The following code lets the user 
modify the attributes of a RichTextBox control. (I describe this control in depth later 
in this chapter.)
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
With CommonDialog1
    .Flags = cdlCFBoth Or cdlCFForceFontExist Or cdlCFEffects
    If IsNull(RichTextBox1.SelFontName) Then
        .Flags = .Flags Or cdlCFNoFaceSel
    Else
        .FontName = RichTextBox1.SelFontName
    End If
    If IsNull(RichTextBox1.SelFontSize) Then
        .Flags = .Flags Or cdlCFNoSizeSel
    Else
        .FontSize = RichTextBox1.SelFontSize
    End If
    If IsNull(RichTextBox1.SelBold) Or IsNull(RichTextBox1.SelItalic) Then
        .Flags = .Flags Or cdlCFNoStyleSel
    Else
        .FontBold = RichTextBox1.SelBold
        .FontItalic = RichTextBox1.SelItalic
    End If
    .CancelError = True
    .ShowFont
    If Err = 0 Then
        RichTextBox1.SelFontName = .FontName
        RichTextBox1.SelBold = .FontBold
        RichTextBox1.SelItalic = .FontItalic
        If (.Flags And cdlCFNoSizeSel) = 0 Then
            RichTextBox1.SelFontSize = .FontSize
        End If
        RichTextBox1.SelUnderline = .FontUnderline
        RichTextBox1.SelStrikeThru = .FontStrikethru
    End If
End With
</pre>
</td></tr>
</table>
</p>

<A NAME="517"><h2>The Printer Dialog</h2></A>
<p>The CommonDialog control can display two distinct dialogs: the Print Setup 
dialog box that allows users to select a printer's attributes and the standard Print dialog 
that lets users select many options of a print job, such as which portion of the 
document should be printed (all, a page range, or the current selection), the number of 
copies, and so on. See Figures 12-4 and 12-5 for examples of these common dialog boxes.
</p>

<p>
<A HREF="javascript:fullSize('F12PH04x.htm')"> <img src="images/F12PH04.JPG" width=404 height=302 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-4.</B> <i>The Print common dialog box.</i><!--/caption-->
</p>

<p>
<A HREF="javascript:fullSize('F12PH05x.htm')"> <img src="images/F12PH05.JPG" width=404 height=290 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-5.</B> <i>The Print Setup common dialog box.</i><!--/caption-->
</p>

<p>You decide which dialog box appears by setting the 
<I>cdlPDPrintSetup</I> bit in the <I>Flags </I>property. The complete list of bits that can be set in the 
<I>Flags </I>property is summarized in Table 12-3.
</p>
<p><B>Table 12-3.</B> <I>Values for the </I>Flags <I>property for a printer common dialog box. Most of these bits are meaningless if you're showing a Print Setup dialog box </I>(Flags = cdlPDPrintSetup).
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>
<tr>
<td valign="top">
cdlPDPrintSetup
</td>
<td valign="top">
Display the Print Setup dialog box instead 
of the Print dialog box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoWarning
</td>
<td valign="top">
Prevent an error message if there isn't 
any default printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDHidePrintToFile
</td>
<td valign="top">
Hide the Print To File check box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDDisablePrintToFile
</td>
<td valign="top">
Disable the Print To File check box.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoPageNums
</td>
<td valign="top">
Disable the Pages option button.
</td>
</tr>
<tr>
<td valign="top">
cdlPDNoSelection
</td>
<td valign="top">
Disable the Selection option button.
</td>
</tr>
<tr>
<td valign="top">
cdlPDPrintToFile
</td>
<td valign="top">
The state of the Print To File check box. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDAllPages
</td>
<td valign="top">
The state of the All Pages option button. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDPageNums
</td>
<td valign="top">
The state of the Pages option button. (Can 
be read upon exiting)
</td>
</tr>
<tr>
<td valign="top">
cdlPDSelection
</td>
<td valign="top">
The state of the Selection option button. 
(Can be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDCollate
</td>
<td valign="top">
The state of the Collate check box. (Can 
be read upon exiting.)
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnDC
</td>
<td valign="top">
The <I>hDC </I>property returns the device 
context of the selected printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnIC
</td>
<td valign="top">
The <I>hDC </I>property returns the 
information context of the selected printer.
</td>
</tr>
<tr>
<td valign="top">
cdlPDReturnDefault
</td>
<td valign="top">
Return default printer name.
</td>
</tr>
<tr>
<td valign="top">
cdlPDUseDevModeCopies
</td>
<td valign="top">
Set support for multiple copies.
</td>
</tr>
<tr>
<td valign="top">
cdlPDHelpButton
</td>
<td valign="top">
Display the Help button.
</td>
</tr>
</table>
</p>



<p>When you're displaying a printer dialog box, the 
<I>Min </I>and <I>Max </I>properties are the minimum and maximum valid values for page numbers whereas 
<I>FromPage </I>and <I>ToPage </I>are the actual values displayed in the dialog box. You typically set the 
latter two properties upon entering and read them back upon exiting if the 
bit cdlPDPageNums is set. The <I>Copies </I>property reflects the number of copies entered 
by the user.
</p>

<p>The <I>PrinterDefault </I>property determines whether the Visual Basic Printer 
object is automatically set to match the printer selected by the user. I recommend that 
you set this bit because it greatly simplifies subsequent print operations. If you don't 
set this bit, the only way you can retrieve information about the selected printer is 
through the Common Dialog's <I>hDC </I>property, which means that you need to perform 
your printing chores using API calls (not a simple thing to do).
</p>

<p>When you're displaying a Print Setup dialog box, the 
<I>Orientation </I>property sets and returns the orientation selected for the printer job. (The settings can 
be 1cdlPortrait or 2cdlLandscape.) Neither the 
<I>Orientation</I> nor <I>Copies</I> properties 
are correctly set under Windows NT, however.
</p>

<p>If you're showing a regular printer dialog box, you need to decide whether 
the Pages and the Selection option buttons should be enabled. For example, should 
a user want to print the contents of a TextBox control, you should enable the 
Selection option button only if the user actually selects a portion of text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>On Error Resume Next
With CommonDialog1
    ' Prepare to print using the Printer object.
    .PrinterDefault = True
    ' Disable printing to file and individual page printing.
    .Flags = cdlPDDisablePrintToFile Or cdlPDNoPageNums
    If Text1.SelLength = 0 Then
         ' Hide Selection button if there is no selected text.
        .Flags = .Flags Or cdlPDNoSelection
    Else 
        ' Else enable the Selection button and make it the default
        ' choice.
        .Flags = .Flags Or cdlPDSelection
    End If
    ' We need to know whether the user decided to print.
    .CancelError = True
    .ShowPrinter
    If Err = 0 Then
        If .Flags And cdlPDSelection Then
            Printer.Print Text1.SelText
        Else
            Printer.Print Text1.Text
        End If
    End If
End With
</pre>
</td></tr>
</table>
</p>



<A NAME="518"><h2>The FileOpen and FileSave Dialogs</h2></A>

<p>The FileOpen and FileSave common dialog boxes are very similar, and in fact the 
Visual Basic documentation explains them together. While this is a reasonable approach, I 
have found that dealing with them jointly tends to hide the many subtle differences 
between these two dialog box types. For this reason, I decided to describe their common 
properties first and then focus on each type of dialog box in a separate section.
</p>

<A NAME="519"><h3>Properties in common</h3></A>

<p>You can choose from an impressive number of ways to customize the 
appearance and behavior of the FileOpen and FileSave dialog boxes. For example, the 
<I>DialogTitle </I>property determines the caption of the common dialog box, and 
<I>InitDir </I>is the directory displayed when the dialog appears. When the dialog box is invoked, the 
<I>FileName </I>property contains the name of the prompted file. And when the dialog closes, 
it contains the name of the file selected by the user. The 
<I>DefaultExt </I>property can be assigned the default extension of a filename so that the control can 
automatically return a complete name in the <I>FileName 
</I>property even if the user doesn't type the extension. Alternatively, you can set and retrieve the base filename (that is, the 
name of the file without the extension) by using the 
<I>FileTitle </I>property.
</p>

<p>You can define the file filters available to the user when browsing the 
contents of a directory. You do this by assigning the 
<I>Filter </I>property a string that contains 
<I>(description, filter) </I>pairs, with items separated by a 
pipe<I> </I>(<I>|</I>)<I> </I>character. For example, 
when working with graphic files, you can define three filters in the following way:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' You can specify multiple filters by using the semicolon as a delimiter.
CommonDialog1.Filter = &quot;All Files|*.*|Bitmaps|*.bmp|Metafiles|*.wmf;*.emf&quot;
</pre>
</td></tr>
</table>
</p>

<p>You decide which filter is initially selected using the 
<I>FilterIndex </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Display the Bitmaps filter. (Filters are one-based.)
CommonDialog1.FilterIndex = 2
</pre>
</td></tr>
</table>
</p>

<p>The real difficulty in working with FileOpen and FileSave dialog boxes is 
that they support a lot of flags, and most flags aren't adequately documented in the 
Visual Basic manuals. In some cases, I had to resort to the Windows SDK 
documentation to understand what a given flag actually does. All the flags supported by 
FileOpen and FileSave common dialog boxes are summarized in Table 12-4.
</p>
<p><B>Table 12-4.</B> <I>Values of the </I>Flags<I> property for a FileOpen or FileSave common dialog box. Note that a few bits make sense only with one of the two dialog boxes.</I>
</p>

<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlOFNReadOnly</td>
<td valign="top">The state of the Open As Read-Only 
check box (FileOpen only).</td>
</tr>

<tr>
<td valign="top">cdlOFNOverwritePrompt</td>
<td valign="top">Show a message before overwriting 
existing files. (FileSave only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNHideReadOnly</td>
<td valign="top">Hide the Open As Read-Only check 
box. This bit should always be set in FileSave dialog boxes.</td>
</tr>

<tr>
<td valign="top">cdlOFNNoChangeDir</td>
<td valign="top">Don't modify the current directory. (By 
default, a File dialog box changes current drive and directory to match the path of the 
file selected by the user.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoValidate</td>
<td valign="top">Accept invalid characters in filenames. 
(Not recommended.)</td>
</tr>

<tr>
<td valign="top">cdlOFNAllowMultiselect</td>
<td valign="top">Enable multiple file selection. 
(FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNExtensionDifferent</td>
<td valign="top">The extension of the selected file is 
different from the value of the <I>DefaultExt 
</I>property. (To be tested upon exiting.)</td>
</tr>

<tr>
<td valign="top">cdlOFNPathMustExist</td>
<td valign="top">Refuse filenames with invalid or 
nonexistent paths. (Highly recommended.)</td>
</tr>

<tr>
<td valign="top">cdlOFNFileMustExist</td>
<td valign="top">Refuse to select files that don't 
exist. (FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNCreatePrompt</td>
<td valign="top">If the selected file doesn't exist, ask 
whether a new file should be created. 
Automatically set cdlOFNFileMustExist<I> </I>and cdlOFNPathMustExist. (FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNShareAware</td>
<td valign="top">Ignore network sharing errors. (Not 
recommended&#8212;use only if you're willing to 
solve sharing conflicts through code.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoReadOnlyReturn</td>
<td valign="top">Refuse to select read-only files or files 
that reside in a write-protected directory.</td>
</tr>

<tr>
<td valign="top">cdlOFNExplorer  </td> 
<td valign="top">  Use a Windows Explorer-like interface 
in multiple-selection dialog boxes. (Multiple-selection FileOpen only; ignored in all 
other cases.)</td>
</tr>

<tr>
<td valign="top">cdlOFNLongNames</td>
<td valign="top">This flag <I>should </I>enable long filenames 
in multiple-selection dialog boxes that use the Windows Explorer style. However, it 
turns out that these dialog boxes always support long filenames, so this feature appears to 
be useless. (Multiple-selection FileOpen only.)</td>
</tr>

<tr>
<td valign="top">cdlOFNNoDereferenceLinks</td>
<td valign="top">Return the name and the path of the file 
selected by the user, even if this is a shortcut LNK file that points to another file. If 
this flag is omitted, when the user selects a LNK file the dialog box returns the name 
and path of the referenced file.</td>
</tr>

<tr>
<td valign="top">cdlOFNHelpButton</td>
<td valign="top">Show the Help button.</td>
</tr>

<tr>
<td valign="top">cdlOFNNoLongNames</td>
<td valign="top">Disallow long filenames.</td>
</tr>
</table>
</p>

<p>When working with a FileOpen or a FileSave dialog box, you should 
always set the <I>CancelError </I>property to True because you need a way to find out 
whether the user canceled the file operation.
</p>

<A NAME="520"><h3>The FileSave dialog</h3></A>

<p>Because the FileSave dialog box is the simpler of the two, I'll describe it first. 
Now you know enough to display a FileSave dialog box like the one shown in Figure 
12-6. The next routine accepts a reference to a TextBox control and to a 
CommonDialog control: The routine uses the latter control to ask for a filename before it saves 
the contents of a TextBox control to the selected file. It returns the name of the file 
in the third argument:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the Save command has been canceled,
' True otherwise.
Function SaveTextControl(TB As Control, CD As CommonDialog, _
    Filename As String) As Boolean
    Dim filenum As Integer
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|Text files|*.txt&quot;
    CD.FilterIndex = 2
    CD.DefaultExt = &quot;txt&quot;
    CD.Flags = cdlOFNHideReadOnly Or cdlOFNPathMustExist Or _
        cdlOFNOverwritePrompt Or cdlOFNNoReadOnlyReturn
    CD.DialogTitle = &quot;Select the destination file &quot;
    CD.Filename = Filename
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowSave
    Filename = CD.Filename
    
    ' Write the control's contents.
    filenum = FreeFile()
    Open Filename For Output As #filenum
    Print #filenum, TB.Text;
    Close #filenum
    ' Signal success.
    SaveTextControl = True
ExitNow:

End Function
</pre>
</td></tr>
</table>
</p>

<p>You can use the <I>SaveTextControl </I>routine as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Filename As String
If SaveTextControl(RichTextBox1, CommonDialog1, Filename) Then
    MsgBox &quot;Text has been saved to file &quot; &amp; Filename
End If
</pre>
</td></tr>
</table>
</p>

<p>Upon exiting a FileSave (and also a FileOpen) dialog box, you can test 
the cdlOFNExtensionDifferent bit of the 
<I>Flags</I> property, in case you need to know 
whether the selected file has an extension different from the one assigned to the 
<I>DefaultExt </I>property:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If CD.Flags And cdlOFNExtensionDifferent Then
        ' Process nonstandard extensions here.
    End If
</pre>
</td></tr>
</table>
</p>

<p>
<img src="images/F12PH06x.gif" width=426 height=264 border=0>
</p><p>
<!--caption--><B>Figure 12-6.</B> <i>The FileSave common dialog box.</i><!--/caption-->
</p>

<p>Don't forget to specify the cdlOFNHideReadOnly bit for FileSave dialog 
boxes: If you do forget, the Open As Read-Only check box will appear in the dialog 
box, which can confuse the user, who is saving a file, not opening it. Another 
convenient flag is cdlOFNNoReadOnlyReturn, which ensures that the file doesn't have the 
read-only attribute and therefore can be overwritten without raising an error.
</p>

<A NAME="521"><h3>The single-selection FileOpen dialog</h3></A>

<p>The CommonDialog control supports both single- and multiple-selection 
FileOpen dialog boxes. The former type isn't substantially different from a FileSave dialog 
box, even though you usually specify different bits for the 
<I>Flags </I>property. Here's a reusable routine that loads the contents of a text file into a TextBox control:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the command has been canceled, True otherwise.
Function LoadTextControl(TB As Control, CD As CommonDialog, _
    Filename As String) As Boolean
    Dim filenum As Integer
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|Text files|*.txt&quot;
    CD.FilterIndex = 2
    CD.DefaultExt = &quot;txt&quot;
    CD.Flags = cdlOFNHideReadOnly Or cdlOFNFileMustExist Or _
        cdlOFNNoReadOnlyReturn
    CD.DialogTitle = &quot;Select the source file &quot;
    CD.Filename = Filename
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowOpen
    Filename = CD.Filename
    
    ' Read the file's contents into the control.
    filenum = FreeFile()
    Open Filename For Input As #filenum
    TB.Text = Input$(LOF(filenum), filenum)
    Close #filenum
    ' Signal success.
    LoadTextControl = True
ExitNow:
End Function
</pre>
</td></tr>
</table>
</p>

<p>If you don't specify the cdlOFNHideReadOnly bit in the 
<I>Flag </I>property, the common dialog box includes the Open As Read-Only check box. To discover 
whether the user has clicked that check box, you test the 
<I>Flags</I> property upon exiting as follows:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>    If CD.Flags And cdlOFNReadOnly Then
        ' The file has been opened in read-only mode.
        ' (For example, you should disable the File-Save command.)
    End If
</pre>
</td></tr>
</table>
</p>

<A NAME="522"><h3>The multiple-selection FileOpen dialog</h3></A>
<p>Multiple-selection FileOpen dialog boxes are a bit more complex than 
single-selection dialog boxes. You specify that you want to open a multiple-selection file dialog 
box by setting the cdlOFNAllowMultiselect bit of the 
<I>Flags </I>property: All the files selected by the user will be concatenated in an individual string and then returned in 
the <I>FileName </I>property.
</p>

<p>Because the user can select dozens or even hundreds of files, the returned 
string can be very long. By default, however, the FileOpen dialog box can deal only 
with returned strings of 256 characters or less: If the combined length of the file 
names selected by the user exceeds this limit, the control raises an error 20476 &quot;Buffer 
too small.&quot; To circumvent this error, you can assign a higher value to the 
<I>MaxFileSize </I>property. For example, a value of 10 KB should suffice for most practical purposes:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>CommonDialog1.MaxFileSize = 10240
</pre>
</td></tr>
</table>
</p>

<p>To preserve compatibility with 16-bit programs, multiple-selection FileOpen 
dialogs return the lists of selected files using the space as a separator. Unfortunately, 
because the space is a valid character inside long filenames and therefore 
potentially confusing, all filenames are rendered in the old 8.3 MS-DOS format, and the 
dialog itself uses the outdated look visible in Figure 12-7. To work around this problem, 
you must specify the cdlOFNExplorer bit in the 
<I>Flags </I>property, which displays a modern Windows Explorer-like user interface and returns the list of selected files as 
long filenames separated by null characters. Note that the documentation is incorrect, 
and the cdlOFNLongNames flag can be safely omitted because Windows 
Explorer-like dialog boxes automatically support long filenames.
</p>

<p>
<img src="images/F12PH07x.gif" width=408 height=243 border=0>
</p><p>
<!--caption--><B>Figure 12-7.</B> <i>A multiple-selection FileOpen common dialog box without the cdlOFNExplorer flag uses an outdated Windows 3.x look.</i><!--/caption-->
</p>

<p>Here's a reusable routine that asks the users for multiple files and then 
places all the filenames in a string array:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Returns False if the command has been canceled, True otherwise.
Function SelectMultipleFiles(CD As CommonDialog, Filter As String, _
    Filenames() As String) As Boolean
    On Error GoTo ExitNow
    
    CD.Filter = &quot;All files (*.*)|*.*|&quot; &amp; Filter
    CD.FilterIndex = 1
    CD.Flags = cdlOFNAllowMultiselect Or cdlOFNFileMustExist Or _
        cdlOFNExplorer
    CD.DialogTitle = &quot;Select one or more files&quot;
    CD.MaxFileSize = 10240
    CD.Filename = &quot;&quot;
    ' Exit if user presses Cancel.
    CD.CancelError = True
    CD.ShowOpen

    ' Parse the result to get filenames.
    Filenames() = Split(CD.Filename, vbNullChar)
    ' Signal success.
    SelectMultipleFiles = True
ExitNow:
End Function
</pre>
</td></tr>
</table>
</p>

<p>After the user closes the dialog box, the 
<I>Filename</I> property might contain data in different formats, according to the number of files selected, for a couple of 
reasons.
</p>

<UL>

<p><li> If the user selected only one file, the 
<I>Filename </I>property returns the file's complete name (including the path), exactly as if this were a 
single-selection dialog box. In this case, the string doesn't contain any 
null character separators.
</li></p>

<p><li> If the user selected multiple files, the 
<I>Filename </I>property contains a number of elements, which are separated by null characters (assuming that 
the cdlOFNExplorer bit has been set). The first element is the path, 
followed by the base names of selected files (but without the path portion).
</li></p>
</ul>
<p>The following code builds on the previously defined 
<I>SelectMultipleFiles</I> routine to find out which of these two cases occurred:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim Filenames() As String, i As Integer
If SelectMultipleFiles(CommonDialog1, &quot;&quot;, Filenames()) Then
    If UBound(Filenames) = 0 Then
        ' The Filename property contained only one element.
        Print &quot;Selected file: &quot; &amp; Filenames(0)
    Else
        ' The Filename property contained multiple elements.
        Print &quot;Directory name: &quot; &amp; Filenames(0)
        For i = 1 To UBound(Filenames)
            Print &quot;File #&quot; &amp; i &amp; &quot;: &quot; &amp; Filenames(i)
        Next
    End If
End If
</pre>
</td></tr>
</table>
</p>


<A NAME="523"><h2>Help Windows</h2></A>
<p>You can use the CommonDialog control to display information from HLP files. In 
this case, no dialog box appears and only a few properties are used. You should 
assign the <I>HelpFile </I>property the filename and path, and the 
<I>HelpCommand</I> property an enumerated value that tells what you want to do with that file. Depending on 
which operation you're performing, you might need to assign a value to either the 
<I>HelpKey </I>or <I>HelpContext </I>property. Table 12-5 summarizes all the supported commands.
</p>

<p><B>Table 12-5.</B> <I>All the possible values that can be assigned to the </I>HelpCommand <I>property when showing a help page.</I>
</p>
<p>
<table valign="top" cellpadding="5" width="95%">
<tr>
<th><I>Constant</I></th>
<th><I>Description</I></th>
</tr>

<tr>
<td valign="top">cdlHelpContents</td>
<td valign="top">Show help contents page.</td>
</tr>

<tr>
<td valign="top">cdlHelpContext</td>
<td valign="top">Show the page whose context ID matches 
the value passed in the <I>HelpContext</I> property.</td>
</tr>

<tr>
<td valign="top">cdlHelpContextPopup</td>
<td valign="top">Same as cdlHelpContext, but the help page 
appears in a pop-up window.</td>
</tr>

<tr>
<td valign="top">cdlHelpKey</td>
<td valign="top">Show the page associated with the 
keyword passed in the <I>HelpKey</I> property.</td>
</tr>

<tr>
<td valign="top">cdlHelpPartialKey</td>
<td valign="top">Same as <I>cdlHelpKey</I>, but also searches for 
partial matches.</td>
</tr>

<tr>
<td valign="top">cdlHelpCommandHelp</td>
<td valign="top">Execute the help macro whose name has 
been assigned to the <I>HelpKey </I>property.</td>
</tr>

<tr>
<td valign="top">cdlHelpSetContents</td>
<td valign="top">The help page pointed to by the 
<I>HelpContext</I> property becomes the content page for the 
specified help file.</td>
</tr>

<tr>
<td valign="top">cdlHelpForceFile</td>
<td valign="top">Ensure that the help window is visible.</td>
</tr>

<tr>
<td valign="top">cdlHelpHelpOnHelp</td>
<td valign="top">Show the Help on Help page.</td>
</tr>

<tr>
<td valign="top">cdlHelpQuit</td>
<td valign="top">Close the help window.</td>
</tr>

<tr>
<td valign="top">cdlHelpIndex</td>
<td valign="top">Show help contents page (same 
as cdlHelpContents).</td>
</tr>

<tr>
<td valign="top">cdlHelpSetIndex</td>
<td valign="top">Set the current index for multi-index Help 
(same as cdlHelpSetContents).</td>
</tr>
</table>
</p>

<p>The following code snippet shows how you can display the contents 
page associated with a help file:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show the contents page of DAO 3.5 help file.
With CommonDialog1
    ' Note: The path of this file may be different on your system.
    .HelpFile = &quot;C:\WINNT\Help\Dao35.hlp&quot;
    .HelpCommand = cdlHelpContents
    .ShowHelp
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also display a page associated with a keyword. If the keyword 
you provide in the <I>HelpKey </I>property doesn't match any particular page, the index of 
the help file is displayed instead:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>With CommonDialog1
    .HelpFile = &quot;C:\WINNT\Help\Dao35.hlp&quot;
    .HelpCommand = cdlHelpKey
    .HelpKey = &quot;BOF property&quot;
    .ShowHelp
End With
</pre>
</td></tr>
</table>
</p>

<p>You can also display a page associated with a given context ID, in which 
case you assign the cdlHelpContext constant to the 
<I>HelpCommand</I> property and the context ID to the 
<I>HelpContext </I>property. Of course, you must know which context 
ID corresponds to the particular page you're interested in, but this isn't a problem if 
you're the author of the help file. For more information about help context IDs, see 
the section &quot;<A HREF="ch05g.htm#208">Showing Help</A>&quot; in Chapter 5.
</p>

</BODY>
</HTML>





