<HTML>
<HEAD>
<TITLE>The CoolBar Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11f.htm", "ch12a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="499"><h1>The CoolBar Control</h1></A>
<p>
<img src="images/new.jpg" width=102 height=87 border=0>
</p>

<p>The CoolBar control has been made popular by Microsoft Internet Explorer 
and consists of a collection of bands that can host other controls, typically flat 
Toolbar, TextBox, and ComboBox controls. Users can resize and move bands at run time 
using the mouse and can even change their order. A double-click on a band's handle 
expands the band as much as possible on the row to which it belongs.</p>

<p>The CoolBar control includes a Bands collection, which in turn contains 
one or more Band objects. Each Band object can work as the container for only one 
control, and such a contained control is automatically moved and resized when the 
user moves or resizes the Band container. You can't have a windowless control as a 
child control for a Band object, but you can place a windowless control in another 
container control&#8212;for example, a PictureBox control&#8212;and make the latter a child 
control of the Band. Similarly, you can't have more than one child control per Band 
object, but you can place multiple controls inside the child PictureBox. (In this case, you 
must write the code that resizes the controls inside the PictureBox's 
<I>Resize </I>event.)</p>

<p>The CoolBar control is the only control contained in the ComCt332.ocx 
file. Visual Basic 6 is the first version that includes this control, even though the 
control has been available to Visual Basic 5 programmers for downloading from the Microsoft site.</p>

<A NAME="500"><h2>Setting Design-Time Properties</h2></A>
<p>The CoolBar control is complex and exposes so many design-time properties 
that you'll probably need some time to master all of them.</p>

<A NAME="501"><h3>General properties</h3></A>
<p>After you drop a CoolBar control on a form, first align it to the form's border. 
You do this in the regular Properties window by setting the 
<I>Align </I>property to the value 1-vbAlignTop. All the other design-time properties can be modified within the 
custom Properties dialog box.</p>

<p>The <I>Orientation </I>property lets you set the aspect of the control to 
either 0cc3OrientationHorizonal (the default value) or 1-cc3OrientationVertical. 
The <I>BandBorders</I> property can be set to False if you want to suppress the horizontal 
lines that mark the borders of each Band, but in most cases it's a better idea to leave it 
set to True.</p>

<p>Users can move and resize a Band object at run time by dragging its 
leftmost border, but you can ensure that users aren't allowed to alter the order of Band 
objects by setting the <I>FixedOrder </I>property to True. The 
<I>VariantHeight </I>Boolean<I> </I>property tells whether Band objects can have different heights: If True (the default 
value), the height of each row is determined by the largest 
<I>MinHeight </I>property of all the Band objects in that row; if False, all rows have the same height, which is determined 
by the largest <I>MinHeight </I>property of all the Band objects in the CoolBar control.</p>

<A NAME="502"><h3>Band objects</h3></A>
<p>By default, the CoolBar control has three Band 
objects, but you can add or remove Band objects in the Bands tab of the 
Property Pages dialog box, shown in Figure 11-8. Each Band can be resizable (if the 
<I>Style</I> property is 0cc3BandNormal) or not (if 
<I>Style</I> is 1cc3BandFixedSize). A band of a fixed 
width doesn't display the leftmost resize handle.</p>

<p>A Band object can display a string (the <I>Caption 
</I>property); and it has an initial width (the 
<I>Width</I> property), a minimal width (<I>MinWidth 
</I>property), and a minimal height (<I>MinHeight 
</I>property). It also exposes a <I>Key</I> property, which lets you 
retrieve the Band object from the Bands collection, and a 
<I>Tag</I> property, in which you can store any information related to the Band itself.</p>

<p>
<A HREF="javascript:fullSize('F11ph08x.htm')"> <img src="images/F11ph08.JPG" width=404 height=291 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-8.</B> <i>The Bands tab of the Properties dialog box of a CoolBar control. Note that the background picture doesn't work well with a child Toolbar.</i><!--/caption-->
</p>

<p>The most important property of a Band object is 
<I>Child</I>, which holds a reference to the child control that's contained in that particular Band. To move a control 
into a Band object, you must first make the control a child of the CoolBar. The 
simplest way to do that is by creating it from the Toolbox inside the CoolBar control. 
After doing that, you'll find the control's name in the list of controls that can be made 
a child of the Band.</p>

<p>By default, a row of Bands hosts as many Bands as possible, and the 
position of each Band object depends on the order of Bands and their minimum widths. 
To change the position of a Band, you can set the 
<I>NewRow </I>property to True to move a Band to the beginning of the next row. Finally you can set the 
<I>AllowVertical </I>property to False to make a Band invisible when the CoolBar control changes its 
orientation to cc3OrientationVertical.</p>

<A NAME="503"><h3>Image and color management</h3></A>
<p>The CoolBar control supports advanced management of colors and pictures. If 
the <I>Picture </I>property hasn't been assigned, the aspect of the control depends on the 
standard <I>ForeColor</I> and <I>BackColor</I> properties. If you assign a bitmap or a metafile to 
the CoolBar's <I>Picture</I> property, this image spreads over all the Bands in the control 
and the <I>BackColor </I>property is ignored.</p>

<p>To let programmers create a user interface identical to the one exposed 
by Microsoft Internet Explorer, the CoolBar control includes three additional 
properties. The <I>EmbossPicture </I>Boolean property determines whether the image should be 
dithered to two colors; if this property is True, the colors used for embossing 
depend on the <I>EmbossHighlight </I>and <I>EmbossShadow 
</I>properties. The CoolBar control uses a dithering algorithm to decide which colors in the original image should be 
rendered with the lighter or with the darker color.</p>

<p>By default, all Band objects inherit the picture set for the parent CoolBar 
control and the picture tiles across all the bands regardless of whether the bands 
are resized or moved. You can set the <I>FixedBackground 
</I>property of a Band object to False, in which case the image remains fixed when that particular band is 
moved or resized.</p>

<p>Alternatively, you can set a different image for all or some Band objects 
by setting their <I>UseCoolBarPicture</I> properties to False and assigning a valid value to 
their <I>Picture </I>properties. You can even dither the image by setting the affected 
Bands' <I>EmbossProperty </I>to True and assigning suitable values to the 
<I>EmbossHighlight </I>and <I>EmbossShadow </I>properties, much as you do with the main CoolBar control.</p>

<p>Band objects also inherit the parent CoolBar's color properties, unless you 
set the Band's <I>UseCoolBarColors </I>to False. If you do that, you can select the color 
used for a particular Band by setting its <I>ForeColor 
</I>and <I>BackColor </I>properties. (But the latter is actually used only if the band doesn't display an image.)</p>

<p>Oddly, neither the CoolBar control nor the Band control expose the 
<I>Font </I>property, so the appearance of a Band's caption depends entirely on system settings, 
with the exception of its text color (which is affected by the 
<I>ForeColor </I>property). For  greater control over text attributes, you can use a Label control and put it inside 
a PictureBox control used as a child control of the CoolBar. (Remember that 
Label controls and other lightweight controls can't be children of a Band object.)</p>

<A NAME="504"><h2>Run-Time Operations</h2></A>
<p>In most cases, you don't have to interact with a CoolBar control at run time: 
The CoolBar knows how to resize bands when the user moves them to another row 
and how to resize child controls inside each band. In a few particular 
circumstances, however, you might need to programmatically manipulate a CoolBar control.</p>

<A NAME="505"><h3>Reacting to <I>Resize </I>events</h3></A>
<p>When the user moves a Band object at run time and this action causes a row of 
bands to be created or destroyed, the CoolBar control raises a 
<I>Resize </I>event. You can take advantage of this event if you want to rearrange the position of other controls on 
the form or to programmatically hide or show Band objects.</p>

<p>But sometimes you shouldn't add code to the <I>Resize 
</I>event. For example, if the CoolBar control is itself contained in another control, the CoolBar's 
<I>Height </I>property might return incorrect values if queried from inside that event, or the 
<I>Resize </I>event might even be suppressed. For these reasons, it's preferable to write code inside 
the <I>HeightChanged </I>event procedure. This event fires when the 
<I>Height </I>property of a horizontal CoolBar or the 
<I>Width </I>property of a vertical CoolBar is modified.</p>

<p>Reacting to such events is important if the form contains other controls. 
Unless you take precautions, when the CoolBar grows in height other controls on the 
form might be covered by it. For this reason, you might want to gather all the other 
controls on the form inside a container control&#8212;for example, a PictureBox, so that 
you can move all of them by simply moving the container. If you follow this 
approach, you should also write code inside the form's 
<I>Resize </I>and PictureBox's <I>Resize </I>event procedures. This code snippet (taken from the demonstration program provided 
on the companion CD and shown in Figure 11-9) illustrates how this solution works:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Resize the PictureBox when the form resizes.
Private Sub Form_Resize()
    Picture1.Move 0, CoolBar1.Height, ScaleWidth, _
        ScaleHeight - CoolBar1.Height
End Sub

' Resize and move the PictureBox when the CoolBar's height changes.
Private Sub CoolBar1_HeightChanged(ByVal NewHeight As Single)
    ' Assumes this CoolBar is aligned to the form's top border
    Picture1.Move 0, NewHeight, ScaleWidth, ScaleHeight - NewHeight
End Sub

' Resize the controls inside the PictureBox when the latter is resized.
Private Sub Picture1_Resize()
    Label1.Move 0, 0, Picture1.ScaleWidth, Label1.Height
    Text1.Move 0, Label1.Height, Picture1.ScaleWidth, _
        Picture1.ScaleHeight - Label1.Height
End Sub
</pre>
</td></tr>
</table></p>

<p>
<A HREF="javascript:fullSize('F11ph09x.htm')"> <img src="images/F11ph09.JPG" width=404 height=202 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-9.</B> <i>The demonstration program shows how to deal with resizable CoolBar controls.</i><!--/caption-->
</p>

<A NAME="506"><h3>Adding Band objects</h3></A>
<p>From time to time, you might need to programmatically add Band objects at run 
time. You do this using the Bands collection's 
<I>Add</I> method, which has the following syntax:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Add([Index],[Key],[Caption],[Image],[NewRow],[Child],[Visible]) As Band
</pre>
</td></tr>
</table></p>

<p>where each argument affects the Band property of the same name. The 
<I>Child </I>argument is a reference to the control that should go inside that Band. When you're 
using this technique for creating a Band object, the child control is probably being 
created dynamically, in which case you should make it a child of the CoolBar control 
before assigning it to the <I>Child </I>property of a Band object:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Create a new ComboBox control.
Dim cb As ComboBox
Set cb = Controls.Add(&quot;VB.ComboBox&quot;, &quot;NewCombo&quot;)
' Make it a child of the CoolBar1 control.
Set cb.Container = CoolBar1
' Create a new Band object, assigning the ComboBox to its
' Child property.
CoolBar1.Bands.Add , &quot;NewBand&quot; , cb.Name, , , cb
</pre>
</td></tr>
</table></p>

<p>You can remove a Band object using the Bands collection's <I>Remove</I> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
' Remove the Band object created with the previous code snippet.
CoolBar1.Bands.Remove &quot;NewBand&quot;
</pre>
</td></tr>
</table></p>

<A NAME="507"><h3>Using a Toolbar control as a child control</h3></A>
<p>While a background image gives the CoolBar control an appealing appearance, 
you should be aware that it doesn't work well with some types of child controls, 
most notably Toolbar controls. In fact, the background image doesn't appear inside 
the Toolbar control, and the end result doesn't look very good. (See Figure 11-9.) 
Fortunately, there's a workaround, even though it isn't as simple as you might wish.</p>

<p>The solution I found is based on a file that, as I write this, is available on 
the Visual Studio Owner's Area of the Microsoft Web site, in the CoolBar Sample 
project. This sample project shows how to include a Toolbar control in the CoolBar 
control and uses an auxiliary TransTBWrapper module that magically creates a flat 
toolbar with a transparent background, which you can see in Figure 11-10. This 
technique was necessary because the version of the Toolbar available on the Web 
to Visual Basic 5 programmers didn't support the flat style.</p>

<p>As you know, the Visual Basic 6 Toolbar control does support the flat style, 
so you can embed it in a CoolBar control and still achieve a consistent look. The 
new Toolbar still doesn't support a transparent background, however, which prevents 
you from using a background picture in the CoolBar control. It took me some 
minutes to modify the TransTBWrapper module and have it work with the new Toolbar 
control, but the results are worth the additional effort. You can use this new version 
of the module in your own applications, but remember that this file isn't 
supported by Microsoft.</p>

<p>
<A HREF="javascript:fullSize('F11ph10x.htm')"> <img src="images/F11ph10.JPG" width=404 height=174 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 11-10.</B> <i>A better version of the demonstration program uses the TransTBWrapper module to host a child Toolbar control with a transparent background.</i><!--/caption-->
</p>

<p>To achieve the transparent background effect shown in Figure 11-10, 
prepare your program as you would normally do and then add the TransTB.Ctl file to 
your project. This file includes the TransTBWrapper ActiveX control, so you can add 
an instance of this control on the form that contains the CoolBar and Toolbar 
controls. At this point, you just need a few statements in the form's 
<I>Load </I>and <I>Unload </I>event procedures:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Private Sub Form_Load()
    ' Put the toolbar wrapper controls in the CoolBar band.
    Set TransTBWrapper1.Container = CoolBar1
    ' This must be the same Band that hosts the toolbar.
    Set CoolBar1.Bands(1).Child = TransTBWrapper1
    ' Put the toolbar into the toolbar wrapper.
    Set TransTBWrapper1.Toolbar = Toolbar1
End Sub

Private Sub Form_Unload(Cancel As Integer)
    ' It is VERY important to set the wrapper's Toolbar property
    ' to Nothing before the form is unloaded.
    CoolBar1.Visible = False
    Set TransTBWrapper1.Toolbar = Nothing
End Sub
</pre>
</td></tr>
</table></p>

<p><div class="caution"><blockquote>
<b>CAUTION</b><hr>
Ensure that the <I>Form_Unload 
</I>event is always executed; otherwise, you risk an application crash. For this reason, when testing the application 
inside the Visual Basic IDE <I>always </I>terminate it by unloading the main form, 
and never execute an <I>End </I>statement. (An 
<I>End</I> statement would prevent the 
<I>Unload</I> event from firing.)
</blockquote></div></p>

<p>This chapter concludes the description of all the common controls provided 
with Visual Basic. There are a few other controls that Visual Basic programmers can 
use in their programs, and these will be described in the <a href="ch12a.htm">next chapter</a>.</p>
</BODY>
</HTML>





