<HTML>
<HEAD>
<TITLE>The SysInfo Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12e.htm", "ch12g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="542"><h1>The SysInfo Control</h1></A>
<p>The SysInfo control helps Visual Basic programmers create applications that 
are compliant with the Windows logo program. One of the prerequisites for such 
applications is the ability to react to systemwide events, such as when the screen 
resolution changes or when a plug-and-play device is connected to or disconnected 
from the system.
</p>

<p>The SysInfo control is embedded in the SysInfo.ocx file, which must be 
distributed with any application that uses this control.
</p>

<A NAME="543"><h2>Properties</h2></A>

<p>The SysInfo control is pretty easy to use: It doesn't expose any design-time 
properties or support any methods. You use a SysInfo control by querying its run 
time-only properties and writing code for its events. The properties of a SysInfo control can 
be subdivided into three groups: Properties that return information on the 
operating system, those that return information on screen settings, and those that return 
information about battery status. All the properties exposed by this control are read-only.
</p>

<p>The first group includes the <I>OSPlatform</I>, 
<I>OSVersion</I>, and <I>OSBuild </I>properties. 
<I>OSPlatform </I>returns 1 if the application is being executed under Windows 95 
or Windows 98, or it returns 2 if it's being executed under Windows NT. 
<I>OSVersion </I>returns the Windows version (as a Single value). 
<I>OSBuild </I>lets you distinguish among different builds of the same version.
</p>

<p>The second group comprises these properties: 
<I>WorkAreaLeft</I>, <I>WorkAreaTop</I>, 
<I>WorkAreaWidth</I>, <I>WorkAreaHeight</I>, and 
<I>ScrollBarSize</I>. The first four properties 
return the position and the size (in twips) of the work area&#8212;that is, the portion of the 
desktop not occupied by the Windows taskbar. You can use this information to 
properly move and resize your forms. <I>ScrollBarSize 
</I>returns the system-defined width of vertical scrollbars: You can use this data to make your scroll bars look good at any 
screen resolution.
</p>

<p>The third group includes the following properties: 
<I>ACStatus</I> (0 for batteries, 1 for AC power), 
<I>BatteryFullTime </I>(the estimated battery life), 
<I>BatteryLifePercent </I>(the estimated remaining battery life as a percentage), 
<I>BatteryLifeTime </I>(the estimated remaining battery life in seconds), and 
<I>BatteryStatus </I>(1 for High, 2 for Low, 4 for Critical, 8 for Charging). All these properties return a special value 
(-1 for <I>ACStatus </I>and <I>BatteryStatus</I>, 255 for the other properties) when the requested information 
is unknown. For more information, see the source code of the demonstration 
program (shown in Figure 12-11) provided on the companion CD.
</p>

<p>
<img src="images/F12ph11.GIF" width=391 height=298 border="0">
<p>
<!--caption--><B>Figure 12-11.</B> <i>The demonstration program shows how to leverage all the properties and events of the SysInfo control.</i><!--/caption-->


<A NAME="544"><h2>Events</h2></A>
<p>The SysInfo control exposes 18 custom events. They can be subdivided into 
the following four groups:
</p>

<UL>
<p><li> Events that fire when a plug-and-play device is connected or 
disconnected: <I>DeviceArrival</I>, 
<I>DeviceOtherEvent</I>, <I>DeviceQueryRemove</I>, 
<I>DeviceQueryRemoveFailed</I>, 
<I>DeviceRemoveComplete</I>, and <I>DeviceRemovePending.</I>
</li></p>
<p><li> Events that fire when the hardware configuration changes: 
<I>QueryChangeConfig</I>, <I>ConfigChanged</I>, and 
<I>ConfigChangeCancelled. </I>You can cancel such changes by returning True in the 
<I>Cancel </I>parameter of a 
<I>QueryChangeConfig</I> event.
</li></p>
<p><li> Events that fire when the power state changes: 
<I>PowerQuerySuspend</I>, <I>PowerResume</I>, 
<I>PowerStatusChanged</I>, and <I>PowerSuspend</I>. For 
example, you can react to a <I>PowerSuspend </I>event by saving all critical data to disk.
</li></p>
<p><li> Events that fire when system settings change: 
<I>DisplayChanged</I>, <I>SysColorsChanged</I>, 
<I>TimeChanged</I>, <I>SettingChanged</I>, and 
<I>DevModeChanged</I>. The last event fires when the configuration of a device is modified by 
the user or another program.
</li></p>
</ul>

<p>The simplest and most useful events are 
<I>DisplayChanged</I>, <I>SysColorChanged</I>, and 
<I>TimeChanged</I>, whose names are self-explanatory. Another interesting event 
is <I>SettingChanged</I>, which receives an integer that states which particular system 
setting has been modified. For example, your application can detect when the user has 
moved or resized the Windows taskbar in the following way:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub SysInfo1_SettingChanged(ByVal Item As Integer)
    Const SPI_SETWORKAREA = 47
    If Item = SPI_SETWORKAREA Then Call Resize_Forms
End Sub
</pre>
</td></tr>
</table>
</p>

<p>Apart from the simplest cases, however, taking advantage of 
<I>SysInfo</I> events requires a thorough knowledge of the Windows operating system.
</p>

</BODY>
</HTML>





