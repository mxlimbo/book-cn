<HTML>
<HEAD>
<TITLE>The RichTextBox Control</TITLE>
<LINK REL=STYLESHEET HREF="Library.css" TYPE="text/css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12c.htm", "ch12e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<A NAME="524"><h1>The RichTextBox Control</h1></A>

<p>The RichTextBox control is one of the most powerful controls provided with 
Visual Basic. In a nutshell, it's a text box that's able to display text stored in 
<I>Rich Text Format</I> (RTF), a standard format recognized by virtually all word processors, 
including Microsoft WordPad (not surprisingly, since WordPad internally uses 
the RichTextBox control). This control supports multiple fonts and colors, left and 
right margins, bulleted lists, and more.
</p>

<p>You might need time to get used to the many features of the RichTextBox 
control. The good news is that the RichTextBox control is code-compatible with a 
regular multiline TextBox control, so you can often recycle code that you have 
written for a TextBox control. But unlike the standard TextBox control, the 
RichTextBox control has no practical limit to the number of lines of text it can contain.
</p>

<p>The RichTextBox control is embedded in the RichTx32.ocx file, which you 
must distribute with all the applications that use this control.
</p>

<A NAME="525"><h2>Setting Design-Time Properties</h2></A>

<p>You can set a few useful design-time properties in the General tab of the 
Property Pages dialog box as you can see in Figure 12-8. For example, you can type the 
name of a TXT or RTF file that must be loaded when the form is loaded and that 
corresponds to the <I>Filename </I>property.
</p>

<p>The <I>RightMargin</I> property represents the distance in twips of the right 
margin from the left border of the control. The 
<I>BulletIndent </I>is the number of twips a paragraph is indented when the 
<I>SetBullet </I>property is True. The <I>AutoVerbMenu 
</I>is an interesting property that lets you prevent the standard Edit pop-up menu from 
appearing when the user right-clicks on the control. If you want to display your own 
pop-up menu, leave this property as False. All the other properties in this General page 
are also supported by standard TextBox controls, so I won't describe them here.
</p>

<p>In the Appearance tab of the Properties dialog box, you find other 
properties, such as <I>BorderStyle </I>and 
<I>ScrollBars</I>, whose meaning should already be known to 
you. An exception is the <I>DisableNoScroll </I>property: When the 
<I>ScrollBars </I>property is assigned a value other than 0-rtfNone and you set the 
<I>DisableNoScroll </I>property to True, the RichTextBox control will always display the scroll bars, even if the current 
document is so short that it doesn't require scrolling. This is consistent with the behavior of 
most word processors.
</p>

<p>The RichTextBox control is data-aware and therefore exposes the 
usual <I>Data</I>xxxx properties that let you bind the control to a data source. In other 
words, you can write entire TXT or RTF documents in a single field of a database.
</p>

<p>
<A HREF="javascript:fullSize('F12PH08x.htm')"> <img src="images/F12PH08.JPG" width=404 height=295 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-8.</B> <i>The General tab of the Properties dialog box of a RichTextBox control.</i><!--/caption-->
</p>

<A NAME="526"><h2>Run-Time Operations</h2></A>
<p>The RichTextBox control exposes so many properties and methods that it makes 
sense to subdivide them in groups, according to the action you want to perform.
</p>

<A NAME="527"><h3>Loading and saving files</h3></A>
<p>You can load a text file into the control using the 
<I>LoadFile </I>method, which expects the filename and an optional argument that specifies whether the file is in RTF 
format (0-rtfRTF, the default) or plain text (1-rtfText):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Load an RTF file into the control.
RichTextBox1.LoadFile &quot;c:\Docs\TryMe.Rtf&quot;, rtfRTF
</pre>
</td></tr>
</table>
</p>

<p>The name of the file loaded by this method becomes available in the 
<I>FileName </I>property. You can also indirectly load a file into the control by assigning its name 
to the <I>FileName </I>property, but in this case you have no way of specifying the format.</p>
<p>You can save the current contents of the control using the 
<I>SaveFile</I> method, which has a similar syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Save the text back into the RTF file.
RichTextBox1.SaveFile RichTextBox1.FileName, rtfRTF
</pre>
</td></tr>
</table>
</p>

<p>The <I>LoadFile </I>and <I>SaveFile </I>methods are a good solution when you want to 
load or save the entire contents of a file. At times, however, you might want to 
append the contents of the control to an existing file or store multiple portions of text in 
the same file. In such cases, you can use the <I>TextRTF 
</I>property with regular Visual Basic file commands and functions:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Store the RTF text from two RichtextBox controls in the same file.
Dim tmp As Variant
Open &quot;c:\tryme.rtf&quot; For Binary As #1
' Use an intermediate Variant variable to ease the process.
' (Don't need to store the length of each piece of data.)
tmp = RichTextBox1.TextRTF: Put #1, , tmp
tmp = RichTextBox2.Text RTF: Put #1, , tmp
Close #1

' Read the data back in the two controls.
Open &quot;c:\tryme.rtf&quot; For Binary As #1
Get #1, , tmp: RichTextBox1.TextRTF = tmp
Get #1, , tmp: RichTextBox2.TextRTF = tmp
Close #1
</pre>
</td></tr>
</table>
</p>

<p>You can use this technique to save and reload the entire contents of the 
control in plain or RTF format (using the <I>Text 
</I>and <I>TextRTF </I>properties), and you can 
even save and reload just the text that's currently selected (using the 
<I>SelText </I>and <I>SelRTF </I>properties).
</p>

<A NAME="528"><h3>Changing character attributes</h3></A>

<p>The RichTextBox control exposes many properties that affect the attributes of the 
characters in the selected text: These are 
<I>SelFontName</I>, <I>SelFontSize</I>, 
<I>SelColor</I>, <I>SelBold</I>, <I>SelItalic</I>, 
<I>SelUnderline</I>, and <I>SelStrikeThru</I>. Their names are self-explanatory, so I 
won't describe what each one does. You might find it interesting to note that all of the 
properties work as they would within a regular word processor. If text is currently 
selected, the properties set or return the corresponding attributes; if no text is currently 
selected, they set or return the attributes that are active from the insertion point onward.
</p>

<p>The control also exposes a <I>Font </I>property and all the various 
<I>Font</I>xxxx properties, but these properties affect the attributes only when the control is loaded. If 
you want to change the attribute of the entire document, you must select the 
whole document first:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Change font name and size of entire contents.
RichTextBox1.SelStart = 0 
RichTextBox1.SelLength = Len(RichTextBox1.Text)
RichTextBox1.SelFontName = &quot;Times New Roman&quot;
RichTextBox1.SelFontSize = 12
' Cancel the selection.
RichTextBox1.SelLength = 0
</pre>
</td></tr>
</table>
</p>

<p>When you read the value of the <I>Sel</I>xxxx properties, you see that they 
return the attributes of the selected text but can also return Null if the selection includes 
characters with different attributes. This means that you must take precautions 
when toggling the attributes of the selected text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub cmdToggleBold_Click()
    If IsNull(RichTextBox1.SelBold) Then
        ' Test for Null values first to avoid errors later.
        RichTextBox1.SelBold = True
    Else
        ' If not Null, we can toggle the Boolean value using
        ' the Not operator.
        RichTextBox1.SelBold = Not RichTextBox1.SelBold
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>A similar problem occurs when your application includes a toolbar 
whose buttons reflect the <I>Bold</I>, 
<I>Italic</I>, <I>Underline</I>, and other attributes of the selection. In 
this case, you need to use the <I>MixedState </I>property of the toolbar's Button objects and 
also exploit the fact that when the user selects or deselects text, the RichTextBox 
control fires a <I>SelChange </I>event:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub RichTextBox1_SelChange()
    ' Keep the toolbar's button in sync with current selection.
    If IsNull(RichTextBox1.SelBold) Then
        ToolBar1.Buttons(&quot;Bold&quot;).MixedState = True
    Else
        ToolBar1.Buttons(&quot;Bold&quot;).MixedState = False
        ToolBar1.Buttons(&quot;Bold&quot;).Value = IIf(rtfText.SelBold, _
            tbrPressed, tbrUnpressed)
    End If
    ' Add similar code that deals with Italic, Underline, and so on.
    ' ...
End Sub
</pre>
</td></tr>
</table>
</p>

<p>The demonstration program shown in Figure 12-9 uses this technique. I 
built the skeleton of this program using the Application Wizard, but I had to manually 
edit the code generated by the wizard to account for the fact that many 
<I>Sel</I>xxxx properties can return Null values. I also included a CoolBar that hosts a transparent 
Toolbar control, using the technique described in <a href="ch11a.htm">Chapter 11</a>.
</p>

<p>
<A HREF="javascript:fullSize('F12ph09x.htm')"> <img src="images/F12ph09.JPG" width=404 height=319 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><B>Figure 12-9.</B> <i>The demonstration program is an MDI mini-word processor.</i><!--/caption-->
</p>

<p><I>SelProtect </I>is an interesting property that lets you protect the selected text 
from being edited. Use it when the document includes crucial data that you don't 
want the user to accidentally delete or modify. If you want nothing in the entire 
document to be modified, however, you'd better set the 
<I>Locked </I>property to True.
</p>

<A NAME="529"><h3>Changing paragraph attributes</h3></A>

<p>You can control the formatting of all the paragraphs that are included in the 
current selection. The <I>SelIndent </I>and <I>SelHangingIndent 
</I>properties work together to define the left indentation of the first line and all the following lines of a paragraph. 
The way these properties work differs from how word processors usually define 
these sorts of entities: The <I>SelIndent</I> property is the distance (in twips) of the first line 
of the paragraph from the left border, whereas the 
<I>SelHangingIndent </I>property is the indentation of all the following lines relative to the indentation of the first line. 
For example, this is the code that you must execute to have a paragraph that is 
indented by 400 twips and whose first line is indented by an additional 200 twips:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>RichTextBox1.SelIndent = 600   ' Left indentation + 1st line indentation
RichTextBox1.SelHangingIndent = -200   ' A negative value
</pre>
</td></tr>
</table>
</p>

<p>The <I>SelRightIndent </I>property is the distance of the paragraph from the right 
margin of the document (whose position depends on the 
<I>RightMargin </I>property). The following code moves the right margin about 300 twips from the right border of 
the control, and then sets a right indentation of 100 twips for the paragraphs that 
are currently selected:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' RightMargin is measured from the left border.
RichTextBox1.RightMargin = RichTextBox1.Width _ 300
RichTextBox1.SelRightIndent = 100
</pre>
</td></tr>
</table>
</p>

<p>You can control the alignment of a paragraph by means of the 
<I>SelAlignment </I>enumerated property, which can be assigned the values 0-rtfLeft, 1-rtfRight, 
or 2-rtfCenter. (The RichTextBox control doesn't support justified paragraphs.) You 
can read this property to retrieve the alignment state of all the paragraphs in the 
selection: In this case, the property returns Null if the paragraphs have different alignments.
</p>

<p>The <I>SelCharOffset </I>property lets you create superscript and subscript 
text&#8212;in other words, position characters slightly above or below the text baseline. A 
positive value for this property creates a superscript, a negative value creates a 
subscript, and a zero value restores the regular text position. You shouldn't assign this 
property large positive or negative values, though, because they would make the 
superscript or subscript text unreadable (or even invisible)&#8212;the RichTextBox 
control doesn't automatically adjust the distance between lines if they contain superscript 
or subscript text:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Make the selection superscript text.
RichTextBox1.SelCharOffset = 40
' Don't forget to reduce the characters' size.
RichTextBox1.SelFontSize = RichTextBox1.SelFontSize \ 2
</pre>
</td></tr>
</table>
</p>

<p>The <I>SelBullet </I>Boolean property can be set to True to morph a normal 
paragraph into a bulleted paragraph. It returns the attribute of the paragraphs currently 
selected or Null if the selection includes paragraphs with different attributes:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Toggle the bullet attribute of the selected paragraphs.
Private Sub cmdToggleBullet_Click()
    If IsNull(RichTextBox1.SelBullet) Then
        RichTextBox1.SelBullet = True
    Else
        RichTextBox1.SelBullet = Not RichTextBox1.SelBullet
    End If
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can control the distance between the bullet and the paragraph body 
by using the <I>BulletIndent </I>property, which affects the entire document.
</p>

<A NAME="530"><h3>Managing the Tab key</h3></A>

<p>Like a real word processor, the RichTextBox control is capable of managing tab 
positions on a paragraph-by-paragraph basis. This is achieved using the two 
properties <I>SelTabCount </I>and <I>SelTabs</I>: The former sets the number of tab positions in 
the paragraphs included in the selection, and the latter sets each tab position to a 
given value. Here's a simple example that shows how you can use these properties:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Add three tabs, at 300, 600, and 1200 twips from left margin.
RichTextBox1.SelTabCount = 3
' The SelTabs property is zero-based.
' Tabs must be specified in increasing order, otherwise they are ignored.
RichTextBox1.SelTabs(0) = 300
RichTextBox1.SelTabs(1) = 600
RichTextBox1.SelTabs(2) = 1200
</pre>
</td></tr>
</table>
</p>

<p>You can also read these properties to find the tab positions in selected 
paragraphs. Remember to account for Null values when the selection includes 
more paragraphs.
</p>

<p>Here's one more issue that you should consider when working with tabs: 
The Tab key inserts a tab character only if there aren't any controls on the form 
whose <I>TabStop </I>property is set to True. In all other cases, the only way to insert a tab 
character in the document is by using the Ctrl+Tab key combination.
</p>

<p>An easy way to work around this problem is to set the 
<I>TabStop</I> properties of all the controls to False when the focus enters the RichTextBox control and to 
reset them to True when the focus moves away from it. (Focus can move only when 
the user presses the hot key associated with another control or clicks on another 
control.) Here's a reusable routine that performs both jobs.
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' In a BAS module
Sub SetTabStops(frm As Form, value As Boolean)
    Dim ctrl As Control
    On Error Resume Next
    For Each ctrl In frm.Controls
        ctrl.TabStop = value
    Next
End Sub

' In the form module that contains the RichTextBox control
Private Sub RichTextBox1_GotFocus()
    SetTabStops Me, False
End Sub
Private Sub RichTextBox1_LostFocus()
    SetTabStops Me, True
End Sub
</pre>
</td></tr>
</table>
</p>

<A NAME="531"><h3>Searching and replacing text</h3></A>
<p>You can search text in a RichTextBox control by applying the 
<I>InStr </I>function to the value returned by the 
<I>Text </I>property. This control also supports the 
<I>Find </I>method, which makes the process even simpler and faster. The 
<I>Find </I>method has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>pos = Find(Search, [Start], [End], [Options])
</pre>
</td></tr>
</table>
</p>

<p><I>Search </I>is the string being searched. <I>Start 
</I>is the index of the character from which the search should start (the index of first character is zero). 
<I>End </I>is the index of the character where the search should end. 
<I>Options </I>is one or more of the following constants: 2-rtfWholeWord, 4-rtfMatchCase, and 8-rtfNoHighlight. If the search 
is successful, the <I>Find </I>method highlights the matching text and returns its 
position; if the search fails, it returns -1. The matching string is highlighted even if 
the <I>HideSelection </I>property is True, and the control doesn't have the focus unless 
you specify the rtfNoHighlight flag.
</p>

<p>If you omit the <I>Start </I>argument, the search starts from the current caret 
position and ends at the position indicated by the 
<I>End </I>argument. If you omit the <I>End</I> 
argument, the search starts from the position indicated by the 
<I>Start </I>argument and ends at the end of the document. If you omit both the 
<I>Start </I>and <I>End </I>arguments, the search is performed in the current selection (if there's selected text) or in the entire contents.
</p>

<p>Implementing a Search and Replace function is simple. Because the Find 
method highlights the found string, all you have to do to replace it is assign a new value 
to the <I>SelText </I>property. You can also easily write a routine that replaces all the 
occurrences of a substring and returns the number of replacements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Function RTFBoxReplace(rtb As RichTextBox, search As String, _
    replace As String, Optional options As FindConstants) As Long
    Dim count As Long, pos As Long
    Do
        ' Search the next occurrence.
        ' (Ensure that the rtfNoHighlight bit is off.)
        pos = rtb.Find(search, pos, , options And Not rtfNoHighlight)
        If pos = -1 Then Exit Do
        count = count + 1
        ' Replace the found substring.
        rtb.SelText = replace
        pos = pos + Len(replace)
    Loop
    ' Return the number of occurrences that have been replaced.
    RTFBoxReplace = count
End Function
</pre>
</td></tr>
</table>
</p>

<p>The <I>RTFBoxReplace </I>routine is considerably slower than a plain 
VBA <I>Replace </I>function, but it preserves the original attributes of the replaced string.
</p>

<A NAME="532"><h3>Moving the caret and selecting text</h3></A>

<p>The <I>Span </I>method extends the selection toward the start or the end of the 
document until a given character is found. Its syntax is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Span CharTable, [Forward], [Negate]
</pre>
</td></tr>
</table>
</p>

<p><I>CharTable </I>is a string that contains one or more characters. 
<I>Forward </I>is the direction of the movement (True to move forward, False to move backward). 
<I>Negate </I>indicates where the movement terminates: If False (the default setting), it ends 
with the first character that doesn't belong to 
<I>CharTable </I>(and therefore the selection contains only characters that appear in 
<I>CharTable</I>). If True, the movement ends when any character contained in 
<I>CharTable </I>is encountered. (In this case, the 
selection contains only characters that don't appear in 
<I>CharTable.</I>) The <I>Span </I>method is useful for programmatically selecting a word or an entire sentence:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Select from the caret to the end of the sentence.
' You need the CRLF to account for the paragraph's end.
RichTextBox1.Span &quot; .,;:!?&quot; &amp; vbCrLf, True, True
</pre>
</td></tr>
</table>
</p>

<p>To move the insertion point without selecting the text, you can use the 
<I>UpTo </I>method, which has the same syntax as 
<I>Span</I>:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Move the caret to the end of the current sentence.
RichTextBox1.UpTo &quot; .,;:!?&quot; &amp; vbCrLf, True, True
</pre>
</td></tr>
</table>
</p>

<p>Another method that you might find useful is 
<I>GetLineFromChar</I>, which returns the line number that corresponds to a given offset from the beginning of the 
text. For example, you can use this method to display the number of the line on 
which the caret is currently located:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Private Sub RichTextBox1_SelChange()
    ' The return value from GetLineFromChar is zero-based.
    lblStatus.Caption = &quot;Line &quot; &amp; (1 + RichTextBox1.GetLineFromChar _
        (RichTextBox1.SelStart))
End Sub
</pre>
</td></tr>
</table>
</p>

<p>You can find out how many lines are in the current document by executing 
the following statement:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>MsgBox (1 + RichTextBox1.GetLineFromChar(Len(RichTextBox1.Text))) _
    &amp; &quot; Lines&quot;
</pre>
</td></tr>
</table>
</p>

<A NAME="533"><h3>Printing the current document</h3></A>

<p>
<img src="images/new.jpg" width=102 height=87 border="0">
</p>

<p>The RichTextBox control directly supports printing through the 
<I>SelPrint </I>method, which prints the current selection or the entire document if no text is selected. 
Its syntax is the following:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>SelPrint hDC, [StartDoc]
</pre>
</td></tr>
</table>
</p>

<p><I>hDC </I>is the device context of the target printer, and 
<I>StartDoc </I>is a Boolean value that determines whether the method also sends StartDoc and EndDoc commands to 
the printer. The latter argument has been introduced with Visual Basic 6, and it's 
useful when you're working with printers that don't behave in the standard way. You 
can print the entire document on the current printer with just two statements:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>RichTextBox1.SelLength = 0           ' Clear selection, if any.
RichTextBox1.SelPrint Printer.hDC    ' Send to the current printer.
</pre>
</td></tr>
</table>
</p>

<p>A drawback of the <I>SelPrint </I>method is that you don't have any control over 
print margins. The demonstration program included on the companion CD shows how 
you can overcome this limit by using a technique based on Windows API calls.
</p>

<A NAME="534"><h3>Embedding objects</h3></A>

<p>An intriguing feature of the RichTextBox control is its ability to embed OLE 
objects, which is similar to what you can do with the intrinsic OLE control. (The OLE 
control is briefly described in <a href="ch03a.htm">Chapter 3</a>.) You exploit this capacity by means of the 
<I>OLEObjects </I>collection, which holds 0 or more OLEObject items. Each OLEObject item 
corresponds to an OLE object that has been embedded in the document. You can 
programmatically embed a new OLE object through the 
<I>OLEObject</I> collection's <I>Add </I>method, 
which has the following syntax:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Add ([Index], [Key], [SourceDoc], [ClassName]) As OLEObject
</pre>
</td></tr>
</table>
</p>

<p><I>Index </I>is the position in the collection where the object will be inserted. 
<I>Key </I>is an alphabetical key that will uniquely identify the object in the collection. 
<I>SourceDoc </I>is the filename of the embedded document that will be copied into the 
RichTextBox control. (It can be omitted to insert a blank document.) 
<I>ClassName </I>is the class name of the embedded object. 
(<I>ClassName</I> can be omitted if <I>SourceDoc 
</I>is specified.) For example, you can embed a blank Microsoft Excel worksheet at the current 
caret position by executing this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' This new object is associated to the &quot;Statistics&quot; key.
Dim statObj As RichTextLib.OLEObject
Set statObj = RichTextBox1.OLEObjects.Add(, &quot;Statistics&quot;, _
    , &quot;Excel.Sheet&quot;)
</pre>
</td></tr>
</table>
</p>

<p>As soon as you add an OLEObject, it becomes active and is ready for 
input. OLEObject items expose a few properties and methods that let you (partially) 
control them through code. For example, the <I>DisplayType 
</I>property determines whether the object should display its contents (0-rtfDisplayContent) or its icon (1-rtfDisplayIcon):
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Show the object just added as an icon.
statObj.DisplayType = rtfDisplayIcon
</pre>
</td></tr>
</table>
</p>

<p>Each embedded object supports a number of actions, called 
<I>verbs</I>. You can retrieve the verbs supported by the embedded object by using the 
<I>FetchVerbs</I> and then querying the <I>ObjectVerbs 
</I>and <I>ObjectVerbsCount </I>properties:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>' Print the list of supported verbs to the Debug window.
statObj.FetchVerbs
For i = 0 To statObj.ObjectVerbsCount _ 1
    ' These strings are printed as they might appear in a pop-up
    ' menu and can include an &amp; character.
    Debug.Print Replace(statObj.ObjectVerbs(i), &quot;&amp;&quot; , &quot;&quot;)
Next
</pre>
</td></tr>
</table>
</p>

<p>The list of supported verbs typically includes actions such as Edit or Open. 
You can execute one of these actions by using the 
<I>DoVerb</I> method, which accepts a verb name, an index in the 
<I>ObjectVerbs </I>property, or a negative value for common 
actions (-1vbOLEShow, -2vbOLEOpen, -3vbOLEHide, -4vbOLEUIActivate, 
-5vbOLEInPlaceActivate, -6vbOLEDiscardUndoState). You can determine whether a verb 
is available by testing the <I>ObjectVerbsFlags 
</I>property. For example, you can print the contents of an embedded object using this code:
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>Dim i As Integer
For i = 0 To statObj.ObjectVerbsCount _ 1
    ' Filter out &quot;&amp;&quot; characters.
    If Replace(statObj.ObjectVerbs(i), &quot;&amp;&quot; , &quot;&quot;) = &quot;Print&quot; Then
        ' A &quot;Print&quot; verb has been found, check its current state.
        If statObj.ObjectVerbFlags(i) = vbOLEFlagEnabled Then
            ' If the verb is enabled, start the print job.
            statObj.DoVerb i
        End If
        Exit For
    End If
Next
</pre>
</td></tr>
</table>
</p>

<p>For more information about this feature, see the Visual Basic documentation.
</p>

</BODY>
</HTML>





