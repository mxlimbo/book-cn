<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="petzoldi.css" TYPE="text/css">
<title>The Static Class</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">
<A NAME="253"><h1>The Static Class</h1></A>
<p>You create static child window controls by using &quot;static&quot; as the window class in the <I>CreateWindow</I> function. These are fairly benign child windows. They do not accept mouse or keyboard input, and they do not send WM_COMMAND messages back to the parent window.

<p>When you move or click the mouse over a static child window, the child window traps the WM_NCHITTEST message and returns a value of HTTRANSPARENT to Windows. This causes Windows to send the same WM_NCHITTEST message to the underlying window, which is usually the parent. The parent usually passes the message to <I>DefWindowProc</I>, where it is converted to a client-area mouse message.

<p>The first six static window styles simply draw a rectangle or a frame in the client area of the child window. The &quot;RECT&quot; static styles (left column below) are filled-in rectangles; the three &quot;FRAME&quot; styles (right column) are rectangular outlines that are not filled in.

<p>
<table CELLPADDING="5" WIDTH="95%">
<tr><td valign="top">SS_BLACKRECT</td>
<td valign="top">SS_BLACKFRAME</td></tr>
<tr><td valign="top">SS_GRAYRECT</td>
<td valign="top">SS_GRAYFRAME</td></tr>
<tr><td valign="top">SS_WHITERECT</td>
<td valign="top">SS_WHITEFRAME</td></tr>
</TABLE>

<p>&quot;BLACK,&quot; &quot;GRAY,&quot; and &quot;WHITE&quot; do not mean the colors are black, gray, and white. Rather, the colors are based on system colors, as shown here:

<P> 
<table CELLPADDING="5" WIDTH="95%">
<tr><td valign="top"><B><I>Static Control</I></B></td>
<td valign="top"><B><I>System Color</I></B></td></tr>
<tr><td valign="top">BLACK</TD>
<td valign="top">COLOR_3DDKSHADOW</TD></tr>
<tr><td valign="top">GRAY</TD>
<td valign="top">COLOR_BTNSHADOW</TD></tr>

<tr><td valign="top">WHITE</TD>
<td valign="top">COLOR_BTNHIGHLIGHT</TD></tr>
</TABLE> 

<p>The window text field of the <I>CreateWindow</I> call is ignored for these styles. The upper left corner of the rectangle begins at the <I>x</I> position and <I>y</I> position coordinates relative to the parent window. You can also use the SS_ETCHEDHORZ, SS_ETCHEDVERT, or SS_ETCHEDFRAME styles to create a shadowed-looking frame with the white and gray colors.

<p>The static class also includes three text styles: SS_LEFT, SS_RIGHT, and SS_CENTER. These create left-justified, right-justified, and centered text. The text is given in the window text parameter of the <I>CreateWindow</I> call, and it can be changed later using <I>SetWindowText</I>. When the window procedure for static controls displays this text, it uses the <I>DrawText</I> function with DT_WORDBREAK, DT_NOCLIP, and DT_EXPANDTABS parameters. The text is wordwrapped within the rectangle of the child window.

<p>The background of these three text-style child windows is normally COLOR_BTNFACE, and the text itself is COLOR_WINDOWTEXT. You can intercept WM_CTLCOLORSTATIC messages to change the text color by calling <I>SetTextColor</I> and the background color by calling <I>SetBkColor</I> and by returning the handle to the background brush. This will be demonstrated in the COLORS1 program shortly.

<p>Finally, the static class also includes the window styles SS_ICON and SS_USERITEM. However, these styles have no meaning when they are used as child window controls. We'll look at them again when we discuss dialog boxes.

</BODY>
</HTML>






