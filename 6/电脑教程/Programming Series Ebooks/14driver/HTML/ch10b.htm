<HTML>
<HEAD>
<TITLE>WMI Concepts</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch10a.htm">[Previous]</A> <A HREF="ch10c.htm">[Next]</a>
</p>

<A NAME="331"><H1>WMI Concepts</H1></A>

<p>Figure 10-2 diagrams the overall architecture of WMI. In the WMI model, the world is divided
into <i>consumers</i> and <i>providers</i> of data and events. Consumers consume, and providers
provide, blocks of data that are <i>instances</i> of abstract <i>classes.</i> The concept
involved here is no different from that of a class in the C++ language. Just like C++ classes,
WMI classes have data members and <i>methods</i> that implement <i>behaviors</i> for objects.
What goes inside a data block isn't specified by WMI&#8212;that depends on who's
producing and for what purpose. When it comes to device drivers, though, the content of a WMI
data block is most likely going to be statistical in nature. Consumers of driver data,
therefore, are often performance monitors of one kind or another.</p>

<p>
<A HREF="javascript:fullSize('F10wi02x.htm')"> <img src="images/F10wi02.JPG" width=404 height=175 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!--caption--><b>Figure 10-2.</b> <i>The world of WMI.</i><!--/caption-->
</p>


<p>WMI allows for multiple <i>namespaces,</i> each of which contains classes belonging to one
or more user-mode providers. Providers register with the Windows Management Service by using
COM interfaces that are documented in the Platform SDK. When Windows 2000 ships, the operating
system (including all device drivers) will support a namespace called <b>root\cimv2</b>, which
stands for Version 2 of the Common Information Model. At the time of this writing, the
structure of the CIMV2 namespace was rather fluid, with the consequence that Microsoft has
temporarily decided to use another namespace, <b>root\wmi</b>, for device driver classes.</p>

<p>A WDM driver can act as a provider of instances of a WMI class. The description of all the
classes a driver can provide data for is known as the driver's <i>schema.</i> You define a
schema by using a language named the <i>Managed Object Format,</i> or MOF. The system maintains
a data dictionary known as the <i>repository</i> that contains the definitions of all known
schemas. Assuming you do all the right things in your driver, the system will automatically put
your schema into the repository when it initializes your driver.</p>

<A NAME="332"><H2>A Sample Schema</H2></A>

<p>Later in this chapter, I'll show you a sample named WMI42.SYS, which is available on the
companion disc. This sample has the following MOF schema:</p>


<table width="95%" cellpadding="5" valign="TOP" border=0>
<tr><td valign=top>
<pre>
1 <img src="images/arorite2.jpg" width=17 height=10 alt="" border="0">





2 <img src="images/arorite2.jpg" width=17 height=10 alt="" border="0">
</pre>
</td>
<td valign=top>
<pre>
[Dynamic, Provider(&quot;WMIProv&quot;),
 WMI, 
 Description(&quot;Wmi42 Sample Schema&quot;),
 guid(&quot;A0F95FD4-A587-11d2-BB3A-00C04FA330A6&quot;),
 locale(&quot;MS\\0x409&quot;)]

class Wmi42
{
    [key, read] 
     string InstanceName;

    [read] boolean Active;

    [WmiDataId(1),
     Description(&quot;The Answer to the Ultimate Question&quot;)
     ]
    uint32 TheAnswer;
};</pre>
</td></tr>
</table>


<p>I don't propose to describe all the details of the MOF syntax; that information is
available as part of the Platform SDK and WMI SDK
(<i><a href="http://msdn.microsoft.com/developer/sdk/" target="_window2">http://msdn.microsoft.com/developer/sdk/</a></i>) documentation. You can either construct your
MOF by hand, as I did for this simple example, or use a tool named WBEM CIM Studio that comes
with the Platform SDK and WMI SDK. Here, however, is a brief explanation of the contents of
this MOF file:</p>

<ol>
<p><li> The provider named <b>WMIProv</b> is the system component that knows how to
instantiate this class. It understands, for example, how to call into kernel mode and send an
I/O request packet (IRP) to an appropriate driver. It can find the right driver by means of the
globally unique identifier (GUID) that appears near the beginning of the file.</li></p>

<p><li> This schema declares a class named <b>WMI42</b>, which coincidentally has the
same name as our driver. Instances of the class have <i>properties</i> named <b>
InstanceName</b>, <b>Active</b>, and <b>TheAnswer</b>.</li></p>
</ol>

<p>As developers, we would run the MOF compiler on this schema definition to produce a binary
file that eventually ends up as a resource in our driver executable file. (<i>Resource</i> in
this sense is the same concept that application developers have in mind when they build dialog
box templates, string tables, and other things that are part of their project's resource
script.) Part of the process of initializing our driver is telling the WMI provider where the
resource is so that it can read the schema and augment the repository.</p>

<p>We should also run a utility named WMIMOFCK.EXE, which is available in the DDK, after
compiling our schema. This utility performs additional checks to make sure that the schema is
compatible with WMI.</p>

<p><div class="sidebar"><blockquote>
<b>MOF Files and Beta Releases</b>

<p>WMI was under active development during much of the Windows 2000 beta-testing period, and
not all of the plumbing was complete. Depending on which release of Windows 2000 you're
using, you might need to run the MOF compiler an extra time before you'll be able to run
the sample programs described in this chapter. During the extra run, you'll manually update
the WMI repository so that various COM interfaces can access your driver's schema. Use the
following command-line syntax to place your schema into the WMI namespace:</p>

<p>
<table cellpadding=5 width="95%"><tr><td>
<pre>mofcomp -N:root\wmi <i>&lt;name&gt;</i></pre>
</td></tr>
</table>
</p>

<p>Thereafter, you'll be able to use development tools like WBEMTEST.EXE to test
your driver, and the console-mode test programs that accompany the samples will also work.
(MOFTEST.EXE and WBEMTEST.EXE are included in the %windir%\system32\wbem directory for Windows
2000 and the %windir%\ system\wbem directory for Microsoft Windows 98. In Windows 98, you will need to install WMI.
See &quot;<A HREF="ch10e.htm#358">Windows 98 Compatibility Notes</A>&quot; at the end of this chapter for some additional
information.)</p>
</blockquote></div></p>

</BODY>
</HTML>





