<HTML>
<HEAD>
<TITLE>Chapter 2 -- Windows 98 Compatibility Notes</TITLE>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch02d.htm">[Previous]</A> <A HREF="ch03a.htm">[Next]</a>
</p>

<A NAME="60"><H1>Windows 98 Compatibility Notes</H1></A>

<p>Windows 98 handles some of the details surrounding device object creation and driver loading
differently than Windows 98. This section explains the differences that might affect your
driver.</p>

<A NAME="61"><H2>Differences in DriverEntry Call</H2></A>

<p>As I indicated earlier, the DriverEntry routine receives a UNICODE_STRING argument naming
the service key for the driver. In Windows 2000, the string is a full registry path of the form
&quot;\Registry\Machine\System\CurrentControlSet\Services\<i>xxx</i>&quot; (where
&quot;<i>xxx</i>&quot; is the name of the service entry for your driver). In Windows 98,
however, the string is of the form &quot;System\CurrentControlSet\Services\<i>&lt;classname
&gt;</i>\<i>&lt;instance#&gt;</i>&quot; (where <i>&lt;classname&gt;</i> is the class name of
your device and <i>&lt;instance-#&gt;</i> is an instance number like 0000 indicating which
device of that class you happen to be). You can open the key in either environment by calling
<b>ZwOpenKey</b>, however.</p>

<A NAME="62"><H2>Differences in Registry Organization</H2></A>

<p>Windows 98 uses a slightly different scheme for organizing the registry entries for devices
than Windows 2000 does. The following short explanation will make better sense if you come back
to it after reading the material on driver installation in <A HREF="ch12a.htm">Chapter 12</A>.</p>

<ul>
<p><li> The hardware key is below HKLM\Enum and isn't protected in any way (because Windows
98 doesn't have a security system). There is no <b>Service</b> value; instead, there's
a <b>Driver</b> value that supplies the final two components of the name of the service key.
The <b>LowerFilters</b> and <b>UpperFilters</b> values are treated as binary because the
Windows 98 registry doesn't have a MULTI_SZ type, and the values use 8-bit characters to
name driver image files (with the .SYS extension) rather than services.</li></p>

<p><li> The class key is below HKLM\System\CurrentControlSet\Services\Class.</li></p>

<p><li> The service key is a child of the class key. The entries in the service key include a <b>
DevLoader</b> value pointing to NTKERN.VXD and an <b>NTMPDriver</b> value naming your driver
image (with the .SYS extension), which must reside in %SystemRoot%\System32\Drivers.</li></p>
</ul>


<A NAME="63"><H2>The \?? Directory</H2></A>

<p>Windows 98 doesn't understand the directory name <b>\??</b>. Consequently, you need to
put symbolic link names in the \DosDevices directory. You can use \DosDevices in Windows NT
also, because it is a symbolic link to the \?? directory.</p>

<A NAME="64"><H2>Unimplemented Device Types</H2></A>

<p>Original Windows 98 doesn't support creating device objects for mass storage devices.
These are devices with types FILE_DEVICE_DISK, FILE_DEVICE_TAPE, FILE_DEVICE_CD_ROM, and FILE_DEVICE_VIRTUAL_DISK. You can call IoCreateDevice, and it will even
return with a status code of STATUS_SUCCESS, but it won't have actually created a device
object or modified the PDEVICE_OBJECT variable whose address you gave as the last argument.</p>

<p>The reason this functionality isn't available is that Windows 98 disk drivers must use
the I/O Supervisor architecture invented for Windows 95. Why IoCreateDevice fails so silently
is a bit of a puzzle, though.</p>
</body>
</html>







