<html>
<head>
<title>Chapter 4 -- Synchronization</title>
<link rel="STYLESHEET" type="text/css" href="waltoney.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<p>
<A HREF="ch03g.htm">[Previous]</A> <A HREF="ch04b.htm">[Next]</a>
</p>

<p>
<font size="+3">Chapter 4</font>
</p>

<A NAME="108"><H1>Synchronization </H1></A>

<p>Microsoft Windows 2000 is a multitasking operating system that can run in a symmetric
multiprocessor environment. It's not my purpose here to provide a rigorous description of
the multitasking capabilities of Microsoft Windows NT; one good place to get more information
is David Solomon's <i>Inside Windows NT, Second Edition</i> (Microsoft Press, 1998). All we
need to understand as driver writers is that our code executes in the context of one <i>
thread</i> or another (and the thread context can change from one invocation of our code to
another) and that the exigencies of multitasking can yank control away from us at practically
any moment. Furthermore, true simultaneous execution of multiple threads is possible on a
multiprocessor machine. In general, we need to assume two worst-case scenarios:</p>

<ul>
<p><li> The operating system can preempt any subroutine at any moment for an arbitrarily long
period of time, so we cannot be sure of completing critical tasks without interference or
delay.</li></p>

<p><li> Even if we take steps to prevent preemption, code executing simultaneously on another CPU
in the same computer can interfere with our code&#8212;it's even possible that the exact
same set of instructions belonging to one of our programs could be executing in parallel in the
context of two different threads.</li></p>
</ul>


<p>Windows NT allows you to solve these general synchronization problems by using the <i>
interrupt request level</i> (IRQL) priority scheme and by claiming and releasing <i>spin
locks</i> around critical code sections. IRQL avoids destructive preemption on a single CPU,
while spin locks forestall interference among CPUs.</p>

</BODY>
</HTML>





