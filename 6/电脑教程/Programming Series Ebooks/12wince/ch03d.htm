<HTML>
 <HEAD>
	<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Menus</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff">
<A NAME="91"><H1>Menus</H1></A>

<P>Menus are a mainstay of Windows input. While each application might have a different keyboard and stylus interface, almost all have sets of menus that are organized in a structure familiar to the Windows user.

<P>Windows CE programs use menus a little differently from other Windows programs, the most obvious difference being that in Windows CE, menus aren't part of the standard window. Instead, menus are attached to the command bar control that has been created for the window. Other than this change, the functions of the menu and the way menu selections are processed by the application match the other versions of Windows, for the most part. Because of this general similarity, I give you only a basic introduction to Windows menu management in this section.

<P>Creating a menu is as simple as calling

<p><pre>
HMENU CreateMenu (void);
</pre>

<P>The function returns a handle to an empty menu. To add an item to a menu, two calls can be used. The first,

<p><pre>
BOOL AppendMenu (HMENU hMenu, UINT fuFlags, UINT idNewItem,
                 LPCTSTR lpszNewItem);
</pre>

<P>appends a single item to the end of a menu. The <I>fuFlags</I> parameter is set with a series of flags indicating the initial condition of the item. For example, the item might be initially disabled (thanks to the MF_GRAYED flag) or have a check mark next to it (courtesy of the MF_CHECKED flag). Almost all calls specify the MF_STRING flag, indicating that the <I>lpszNewItem</I> parameter contains a string that will be the text for the item. The <I>idNewItem</I> parameter contains an ID value that will be used to identify the item when it's selected by the user or that the state of the menu item needs to be changed.

<P>Another call that can be used to add a menu item is this one:

<p><pre>
BOOL InsertMenu (HMENU hMenu, UINT uPosition, UINT uFlags,
                 UINT uIDNewItem, LPCTSTR lpNewItem);
</pre>

<P>This call is similar to <I>AppendMenu</I> with the added flexibility that the item can be inserted anywhere within a menu structure. For this call, the <I>uFlags</I> parameter can be passed one of two additional flags: MF_BYCOMMAND or MF_BYPOSITION, which specify how to locate where the menu item is to be inserted into the menu.

<P>Under Windows CE 2.0, menus can be nested to provide a cascading effect. This feature brings Windows CE up to the level of other versions of Windows, which have always allowed cascading menus. To add a cascading menu, or submenu, create the menu you want to attach using <I>CreateMenu</I> and <I>InsertMenu</I>. Then insert or append the submenu to the main menu using either <I>InsertMenu</I> or <I>AppendMenu</I> with the MF_POPUP flag in the flags parameter. In this case, the <I>uIDNewItem</I> parameter contains the handle to the submenu while the <I>lpNewItem</I> contains the string that will be on the menu item.

<P>You can query and manipulate a menu item to add or remove check marks or to enable or disable it by means of a number of functions. This function,

<p><pre>
BOOL EnableMenuItem (HMENU hMenu, UINT uIDEnableItem, UINT uEnable);
</pre>

<P>can be used to enable or disable an item. The flags used in the <I>uEnable</I> parameter are similar to the flags used with other menu functions. Under Windows CE, the flag you use to disable a menu item is MF_GRAYED, not MF_DISABLED. The function

<p><pre>
DWORD CheckMenuItem (HMENU hmenu, UINT uIDCheckItem, UINT uCheck);
</pre>

<P>can be used to check and uncheck a menu item. Many other functions are available to query and manipulate menu items. Check the SDK documentation for more details.

<P>The following code fragment creates a simple menu structure:

<p><pre>
hMainMenu = CreatePopupMenu ();

hMenu = CreateMenu ();
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 100, TEXT (&quot;&amp;New&quot;));
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 101, TEXT (&quot;&amp;Open&quot;));
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 101, TEXT (&quot;&amp;Save&quot;));
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 101, TEXT (&quot;E&amp;xit&quot;));

AppendMenu (hMainMenu, MF_STRING | MF_ENABLED | MF_POPUP, (UINT)hMenu,
            TEXT (&quot;&amp;File&quot;));

hMenu = CreateMenu ();
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 100, TEXT (&quot;C&amp;ut&quot;));
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 101, TEXT (&quot;&amp;Copy&quot;));
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 101, TEXT (&quot;&amp;Paste&quot;));

AppendMenu (hMainMenu, MF_STRING | MF_ENABLED | MF_POPUP, hMenu,
            TEXT (&quot;&amp;Edit&quot;));

hMenu = CreateMenu ();
AppendMenu (hMenu, MF_STRING | MF_ENABLED, 100, TEXT (&quot;&amp;About&quot;));

AppendMenu (hMainMenu, MF_STRING | MF_ENABLED | MF_POPUP, hMenu,
            TEXT (&quot;&amp;Help&quot;));
</pre>

<P>Once a menu has been created, it can be attached to a command bar using this function:

<p><pre>
BOOL CommandBar_InsertMenubarEx (HWND hwndCB, HINSTANCE hInst,
                                 LPTSTR pszMenu, int iButton);
</pre>

<P>The menu handle is passed in the third parameter while the second parameter, <I>hInst</I>, must be 0. The final parameter, <I>iButton</I>, indicates the button that will be to the immediate right of the menu. The Windows CE user interface guidelines recommend that the menu be on the far left of the command bar, so this value is almost always 0.

<A NAME="92"><H2>Handling Menu Commands</H2></A>

<P>When a user selects a menu item, Windows sends a WM_COMMAND message to the window that owns the menu. The low word of the <I>wParam</I> parameter contains the ID of the menu item that was selected. The high word of <I>wParam</I> contains the notification code. For a menu selection, this value is always 0. The <I>lParam</I> parameter is 0 for WM_COMMAND messages sent due to a menu selection. Those familiar with Windows 3.<I>x</I> programming might notice that the layout of <I>wParam</I> and <I>lParam </I>match the standard Win32 assignments and are different from Win16 programs. So, to act on a menu selection, a window needs to field the WM_COMMAND message, decode the ID passed, and act according to the menu item that was selected.

<P>Now that I've covered the basics of menu creation, you might wonder where all this menu creation code sits in a Windows program. The answer is, it doesn't. Instead of dynamically creating menus on the fly, most Windows programs simply load a menu template from a <I>resource</I>. To learn more about this, let's take a detour from the description of input methods and look at resources.

</BODY>
</HTML>




