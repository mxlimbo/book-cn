<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Introduction</TITLE>
</HEAD>
<BODY>
<FONT SIZE="+3">Introduction</FONT>
<P>
I was introduced to Microsoft Windows CE right before it was released in the fall of 1996. A Windows programmer for many years, I was intrigued by an operating system that applied the well-known Windows API to a smaller, more power-conserving operating system. The distillation of the API for smaller machines enables tens of thousands of Windows programmers to write applications for an entirely new class of systems. The subtle differences, however, make writing Windows CE code somewhat different from writing for Windows 98 or Windows NT. It's those differences that I'll address in this book.
<H1>Just What Is Windows CE?</H1>
<P>
Windows CE is the newest, smallest, and arguably the most interesting of the Microsoft Windows operating systems. Windows CE was designed from the ground up to be a small, ROM-based operating system with a Win32 subset API. Windows CE extends the Windows API into the markets and machines that can't support the larger footprints of Windows 98 and Windows NT.
<P>
Windows 98 is a great operating system for users who need backward compatibility with DOS and Windows 2.x and 3.x programs. While it has shortcomings, Windows 98 succeeds amazingly well at this difficult task. Windows NT, on the other hand, is written for the enterprise. It sacrifices compatibility and size to achieve its high level of reliability and robustness.
<P>
Windows CE isn't backward compatible with MS-DOS or Windows. Nor is it an all-powerful operating system designed for enterprise computing. Instead, Windows CE is a lightweight, multithreaded operating system with an optional graphical user interface. Its strength lies in its small size, its Win32 subset API, and its multiplatform support.
<H1>Products Based on Windows CE</H1>
<P>
The first products designed for Windows CE were handheld "organizer" type devices with 480-by-240 or 640-240 screens and chiclets keyboards. These devices, dubbed Handheld PCs, were first introduced at Fall Comdex 96. Fall Comdex 97 saw the release of a dramatically upgraded version of the operating system, Windows CE 2.0,with newer hardware in a familiar form—this time the box came with a 640-by-240-landscape screen and a somewhat larger keyboard.
<P>In January 1998 at the Consumer Electronics Show, Microsoft announced two new platforms, the Palm-size PC and the Auto PC. The Palm-size PC was aimed directly at the pen-based organizer market currently dominated by the Palm Pilot. The Palm-size PC sports a portrait mode, 240-by-320 screen and uses stylus-based input. A number of Palm-size PCs are on the market today.
<P>Figure I-1 shows both a Handheld PC, in this case a Casio A-20 Handheld PC, and a Palm-size PC, in this case a Casio E-10.

<P><!-- caption --><B>Figure I-1. </B><I>The Casio E-10 Palm-size PC and the Casio A-20 Handheld PC.</I><!-- /caption -->
<P><IMG SRC="f0irg01.JPG" width=403 height=282 border="0">

<P>Just as this book is being released, Microsoft has introduced the Handheld PC Professional platform using the latest version of the operating system, Windows CE 2.11.<SUP>1</SUP> This device brings the compact nature of Windows CE to devices of laptop size. The advantages of applying Windows CE to a laptop device are many. First, the battery life of a Handheld PC Pro is at least 10 hours, far better than the 2 to 3 hour average of a PC-compatible laptop. Second, the size and weight of the Windows CE devices are far more user friendly, with systems as thin as 1 inch weighing less than 3 pounds. Even with the diminutive size, a Handheld PC Pro still sports a large VGA screen and a keyboard that a normal human can use. The Vadem Clio Handheld PC Pro, shown in Figure I-2, is an example of how Windows CE is being used in newer platforms. The system can be used as a standard laptop or "flipped" into a tablet-mode device. This device is just one example of how Windows CE is expanding into new system types.

<P><!-- caption --><B>Figure I-2.</B><I>The Vadem Clio Handheld PC Pro.</I><!-- /caption -->
<P><IMG SRC="f0irg02.JPG" width=404 height=293 border="0">

<P>
I refer to the Handheld PC Pro through out this book under its operating system version, Windows CE 2.1, because the platform name, Handheld PC Pro, was determined very late in the process. I knew of, and in fact, had a hand in the development of a Handheld PC Pro under its code name Jupiter. However, you can't use code names in a book, so its operating system version had to suffice.
<P>
Other platforms&#8212;Auto PC, web TV set top boxes, and embedded platforms designed for specific tasks&#8212;are also appearing or will appear in the coming months. What's amazing about Windows CE is that the flexibility of the operating system allows it to be used in all these diverse designs while all the time retaining the same basic, well-known Win32 API.
<P><div class="sidebar"><blockquote><ol>
<P><LI>Windows CE 2.11 is Windows CE 2.10 with a few minor changes.</ol></blockquote></div>

<H1>Why You Should Read this Book</H1>
<P>
Programming Windows CE is written for anyone who will be writing applications for Windows CE. Both the embedded systems programmer using Windows CE for a specific application and the Windows programmer interested in porting an existing Windows application or writing an entirely new one can use the information in this book to make their tasks easier.
The embedded systems programmer, who might not be as familiar with the Win32 API as the Windows programmer, can read the first section of the book to make their tasks easier.

<P>The embedded systems programmer, who might not be as familiar with 
the Win32 API as the Windows programmer, can read the first section of the book 
to become familiar with Windows programming. While this section isn't the 
comprehensive tutorial that can be found in books such as 
<I>Programming Windows</I> by Charles Petzold, it does provide a base that will carry the reader through the other 
chapters in the book. It also can help the embedded systems programmer develop fairly 
complex and quite useful Windows CE programs.
<P>The experienced Windows programmer can use the book to learn about 
the differences between the Win32 API used by Windows CE, Windows NT, and 
Windows 98. Programmers who are familiar with Win32 programming recognize 
subtle differences between the Windows 98 and Windows NT APIs. The differences 
between Windows CE and its two cousins are even greater. The small footprint of 
Windows&#160;CE means that many of the overlapping APIs in the Win32 model aren't supported. 
Some sections of the Win32 API aren't supported at all. On the other hand, because of 
its unique setting, Windows CE extends the Win32 API in a number of areas that 
are covered in this text.
<P>The method used by <I>Programming Windows 
CE</I> is to teach by example. I wrote numerous Windows CE example programs specifically for this book. The source 
for each of these examples is printed in the text. Both the source and the final 
compiled programs for a number of the processors supported by Windows CE are also 
provided on the accompanying CD.
<P>The examples in this book are all written directly to the API, the 
so-called &quot;Petzold&quot; method of programming. Since the goal of this book is to teach how 
write programs for Windows CE, the examples avoid using a class library such as MFC, 
which obfuscates the unique nature of writing applications for Windows CE. Some 
people would say that the availability of MFC on Windows CE eliminates the need for 
direct knowledge of the Windows CE API. I believe the opposite is true. Knowledge of 
the Windows CE API enables more efficient use of MFC. I also believe that truly 
knowing the operating system also dramatically simplifies the debugging of applications.
<H1>
What About MFC?
</H1>
<P>The simple fact is that Windows CE systems aren't the best platform for a 
general-purpose class library like MFC. The slower processors and the significantly 
lower memory capacity of Windows CE devices make using MFC problematic. Most 
Windows CE systems don't include the MFC library in their ROM. This means that 
the MFC and OLE32 DLLs required by MFC applications must be downloaded into 
the systems. The first versions of the Palm-size PCs don't even support MFC.
<P>That said, there's a place for MFC on Windows CE devices. One such place 
might be if you're designing a custom application for a system you know will have the 
MFC and OLE32 DLLs in ROM. For those specific applications, you might want to use 
MFC, but only if you know the target environment and have configured the system 
with the proper amount of RAM to do the job.
<P>
<H1>
Windows CE Development Tools
</H1>
<P>This book is written with the assumption that the reader knows C and is at least 
familiar with Microsoft Windows. All code development was done with Microsoft 
Visual C++ 5.0 and Windows CE Visual C++ for Windows CE under Windows NT 4.0.
<P>To compile the example programs in this book, you'll need 
Microsoft's Visual&#160;C++&#160;5.0, which is part of the integrated development environment 
(IDE), DevStudio, running on a standard IBM compatible PC. You'll need Microsoft 
Visual&#160;C++ for Windows CE. Visual C++ for Windows CE isn't a stand-alone product. It's an 
add-in to Visual C++ 5.0 that incorporates components to the compiler that produce 
code for the different CPUs supported by Windows CE. Visual C++ for Windows CE 
isn't currently available through standard retail channels, but information on ordering 
it directly from Microsoft can be found on the Microsoft Web site. Finally, you'll 
need one of the platform SDKs for Windows CE. These SDKs provide the custom 
include files for each of the Windows CE platforms. These platform SDKs are available 
for free on the Microsoft Web site. As a convenience, I've also included the platform 
SDKs available at the time of the writing of this book on the accompanying CD.
<P>While not absolutely required for developing applications for Windows 
CE, Windows NT 4.0 is strongly recommended for the development environment. 
It's possible to compile and download Windows CE programs under Windows 98, 
but many of the features of the integrated development environment (IDE), such as 
Windows CE emulation and remote debugging, aren't supported.
<P>Visual C++ for Windows CE won't change the outward appearance of 
Visual&#160;C++, with the exception of a few new tools listed under the tools menu. Nor will the 
installation of Visual C++ for Windows CE prevent you from developing 
applications for other Windows operating systems. The installation of Visual C++ for Windows 
CE will result in new Windows CE targets such as WCE MIPS and WCE SH and WCE 
x86Em being added to the platforms listing when you're creating a new Win32 
application. Also, a Windows CE MFC AppWizard will be added to the new projects listing to 
assist in creating MFC programs for Windows CE.
<H1>
Target Systems
</H1>
<P>You don't need to have a Windows CE target device to experience the sample 
programs provided by this book. The various platform SDKs come with a Windows 
CE emulator that lets you perform basic testing of a Windows CE program under 
Windows NT. This emulator comes in handy when you want to perform initial 
debugging to ensure that the program starts, creates the proper windows, reacts to menu 
selections, and so on. However, the emulator has some limitations and there simply is 
no replacement for having a target Windows CE system to perform final debug and 
testing for applications.
<P>
You should consider a number of factors when deciding what Windows 
CE hardware to use for testing. First, if the application is to be a commercial 
product, you should buy at least one system for each type of target CPU. You need to test 
against all of the target CPUs because, while the source code will probably be identical, 
the resulting executable will be different in size and so will the memory allocation 
footprint for each target CPU.
<P>Most applications will also be written specifically for the Handheld PC or 
Palm-size PC, not both. Although the base operating system for both the Handheld PC 
and Palm-size PC is Windows CE, the hardware underneath is vastly different. The 
strict memory constraints of the Palm-size PC, as well as its much smaller screen, its 
different orientation, and its lack of a keyboard, forces compromises that aren't 
acceptable on a Handheld PC or its larger relative, the Handheld PC Pro. Other constraints 
on Palm-size PC systems, such as the lack of printing and TrueType support, 
differentiate its environment from the Handheld PC's.
<P>In this book, I demonstrate programs that can run on the Handheld 
PC, Handheld&#160;PC Pro, or Palm-size PC. The goal is to allow the lessons to be applied 
to all platforms. For some examples, however, the different screen dimensions 
mean that the example will run better on one particular system. I point out the 
differences and the reasons they exist. For example, some controls might exist on only one 
platform or the other. The shells for the two platforms&#8212;Handheld or Palm-size&#8212;are 
also different and need separate coverage. Finally, a small set of features in Windows 
CE are simply not supported on the smaller Palm-size PC platform.
<H1>
What's on the CD
</H1>
<P>The accompanying CD contains the source code for all the examples in the 
book. I've also provided project files for Microsoft DevStudio so that you can 
open preconfigured projects. Unless otherwise noted, the examples are Windows CE 
2.0 compatible so that they can run on most Windows CE systems available today. 
Chapter 13, &quot;Shell Programming&#8212;Part 2&quot; contains examples that are compiled 
for Windows&#160;CE&#160;2.01, so they won't run on current Handheld PCs. There are some 
examples, such as the console applications in Chapter 12 that are specific to the 
Handheld PC Pro and other devices running Windows CE 2.10.
<P>When you build for a specific platform, remember that it might not be 
backward compatible with earlier versions of Windows CE. For example, Microsoft 
moved some of the C library support from statically linked libraries in Windows CE 2.0 
into the operating system for Windows CE 2.01, the Palm-size PC release. This 
reduces the size of an executable, but prevents code built for the Palm-size PC from 
running on an H/PC running Windows CE 2.0. You can however, compile code for an 
H/PC running Windows CE 2.0 and have it run on a Palm-size PC.
<P>
In addition to the examples, the CD contains a number of folders of interest 
to the Windows CE programmer. I've included the platform SDKs for the Handheld 
PC as well as for the Palm-size PC. Unfortunately, the Handheld PC Pro SDK wasn't 
available in time for this release. Like the other platform SDKs, that one is available 
for free on the Microsoft Web site. Check out the readme file on the CD for 
late-breaking information about what else is included on the CD.
<H1>
Other Sources
</H1>
<P>While I have attempted to make <I>Programming Windows 
CE</I> a one-stop shop for Windows CE programming, no one book can cover everything. A nice 
complement to this book is <I>Inside Windows 
CE</I> by John Murray. It documents the &quot;oral history&quot; 
of Windows CE. Knowing this kind of information is crucial to understanding just 
why Windows CE is designed the way it is. Once you know the why, it's easy to 
extrapolate on the what, when trying to solve problems. Murray's book is great, not 
just because of the information you'll learn about Windows CE but also because it's 
an entertaining read.
<P>For learning more about Windows programming in general, I suggest the 
classic text <I>Programming Windows</I> by Charles Petzold. This is, by far, the best book 
for learning Windows programming. Charles presents examples that show how to 
tackle difficult but common Windows problems. For learning more about the Win32 
kernel API, I suggest Jeff Richter's<I> Advanced 
Windows</I>. Jeff covers the techniques of process, thread, and memory management down to the most minute detail. For 
learning more about MFC programming there's no better text than Jeff Prosise's 
<I>Programming Windows 95</I> <I>with MFC</I>. This book is the &quot;Petzold&quot; of MFC programming and 
simply a required read for MFC programmers.
<H1>
Feedback
</H1>
<P>While I have striven to make the information in this book as accurate as 
possible, you'll undoubtedly find errors. If you find a problem with the text or just have 
ideas about how to make the next revision better, please drop me a note 
at <I>CEBook@DelValle.com</I>. I can't promise you that I'll answer all your notes, but I 
will read every one.
<P>
<P><I>Doug Boling<BR>
Tahoe City, California<BR>
August 1998</I>

</BODY>
</HTML>

