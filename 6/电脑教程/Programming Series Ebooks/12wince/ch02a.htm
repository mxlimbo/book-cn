<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="prowice.css" TYPE="text/css">
<TITLE>Chapter 2 -- Drawing on the Screen</TITLE>

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#FFFFFF">

<font size="+3">Chapter 2</font>

<A NAME="35"><H1>Drawing on the Screen</H1></A>

<P>In <A HREF="ch01a.htm">Chapter 1</a>, the example program HelloCE had one task: to display a line of text on the screen. Displaying that line took only one call to <I>DrawText</I> with Windows CE taking care of such details as the font and its color, the positioning of the line of text inside the window, and so forth. Given the power of a graphical user interface (GUI), however, an application can do much more than simply print a line of text on the screen. It can craft the look of the display down to the most minute of details.

<P>Over the life of the Microsoft Windows operating system, the number of functions available for crafting these displays has expanded dramatically. With each successive version of Windows, functions have been added that extend the tools available to the programmer. As functions were added, the old ones remained so that even if a function had been superseded by a new function old programs would continue to run on the newer versions of Windows. The approach in which function after function is piled on while the old functions are retained for backward compatibility was discontinued with the initial version of Windows CE. Because of the requirement to produce a smaller version of Windows, the CE team took a hard look at the Win32 API and replicated only the functions absolutely required by applications written for the Windows CE target market.

<P>One of the areas of the Win32 API hardest hit by this reduction was graphical functions. Not that you now lack the functions to do the job&#8212;it's just that the high degree of redundancy led to some major pruning of the Win32 graphical functions. An added challenge for the programmer is that different Windows CE platforms have subtly different sets of supported APIs. One of the ways in which Windows CE graphics support differs from that of its desktop cousins is that Windows CE doesn't support the different mapping modes available under other implementations of Windows. Instead, the Windows CE device contexts are always set to the MM_TEXT mapping mode. Coordinate transformations are also not supported under Windows CE. While these features can be quite useful for some types of applications, such as desktop publishing, their necessity in the Windows CE environment of small portable devices isn't as clear. Fortunately, as Windows CE matures we can expect more and more of the basic Win32 API to be supported.

<P>So when you're reading about the functions and techniques used in this chapter, remember that some might not be supported on all platforms. So that a program can determine what functions are supported, Windows has always had the <I>GetDeviceCaps</I> function, which returns the capabilities of the current graphic device. Throughout this chapter, I'll refer to <I>GetDeviceCaps</I> when determining what functions are supported on a given device.

<P>This chapter, like the other chapters in Part I of this book, reviews the drawing features supported by Windows CE. One of the most important facts to remember is that while Windows CE doesn't support the full Win32 graphics API, its rapid evolution has resulted in it supporting some of the newest functions in Win32&#8212;some so new that you might not be familiar with them. This chapter shows you the functions you can use and how to work around the areas where certain functions aren't supported under Windows CE.

</BODY>
</HTML>




