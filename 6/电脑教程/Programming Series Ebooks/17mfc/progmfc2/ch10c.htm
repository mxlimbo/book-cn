<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>HTML Views</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10b.htm", "ch10d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="303"><H1>HTML Views</H1></A>

<p>One of MFC's most powerful new classes is <I>CHtmlView</I>, which converts the WebBrowser control that's the heart and soul of Microsoft Internet Explorer into a full-fledged MFC view. <I>CHtmlView</I> displays HTML documents. You provide a URL, 
which can reference a document on the Internet, on an intranet, or even on a local hard disk, and <I>CHtmlView</I> displays the document the same way Internet Explorer displays it. From the underlying WebBrowser control, <I>CHtmlView</I> inherits a treasure trove of added functionality, from the ability to go backward or forward in a history list with a simple function call to the ability to host Dynamic HTML (DHTML) documents. <I>CHtmlView</I> is also an Active Document container, which means it can be used to display documents created by Microsoft Word, Microsoft Excel, and other Active Document servers. It can even display the contents of folders on a hard disk&#8212;just like Internet Explorer. 
</p>

<p>
<I>CHtmlView</I> is a complex class because it includes dozens of member functions that provide a C++ interface to the WebBrowser control. Despite its complexity, 
however, it is an exceedingly easy class to use. With just a handful of member functions, you can build applications that rival Internet Explorer itself for richness and functionality. In fact, you can use <I>CHtmlView</I> and other MFC classes such as <I>CToolBar</I> to build an Internet Explorer knock-off in less than a day. Visual C++ comes with an MFC sample named MFCIE that demonstrates how. If you're willing to forego a few bells and whistles, you can build a basic browser in minutes. Do note that because <I>CHtmlView</I> derives most of its functionality from the WebBrowser control, and because the WebBrowser control is part of Internet Explorer, an application that uses <I>CHtmlView</I> can be run only on systems equipped with Internet Explorer 4.0 or later. 
</p>

<A NAME="304"><H2><I>CHtmlView</I> Operations</H2></A>
<p>A good way to begin learning about 
<I>CHtmlView</I> is to get acquainted with its nonvirtual member functions, or operations. The following table lists the operations 
that the majority of programmers will find the most useful. For information on the 
others (and there are many), refer to the MFC documentation.
</p>

<B>Key <I>CHtmlView</I> Operations</B>
<p><table cellpadding="5" width="95%">
<TR><TH valign="top"><I>Function</i></TH>
<TH valign="top"><i>Description</I></TH></TR>

<TR><Td valign="top"><I>GetBusy</I></Td>    <Td valign="top"> Indicates whether a download is in progress</Td></TR>

<TR><TD valign="top"><I>GetLocationName</I></TD>     <TD valign="top">If an HTML page is displayed, retrieves the page's title; if a file or folder is currently displayed, retrieves the file or folder name</TD></TR>

<TR><TD valign="top"><I>GetLocationURL</I></TD>    <TD valign="top"> Retrieves the URL of the resource that is currently displayed&#8212;for example, 
<I>http://www.microsoft.com/</I> or 
<I>file://C:/HTML Files/Clock.htm</I></TD></TR>

<Tr><TD valign="top"><i>GoBack</I> </TD>   <TD valign="top"> Goes to the previous item in the history list</TD></Tr>

<TR><TD valign="top"><I>GoForward</I> </TD>    <TD valign="top">Goes to the next item in the history list</TD></TR>

<TR><TD valign="top"><I>Navigate</I></TD>  <TD valign="top">Displays the resource at the specified URL</TD></TR>

<TR><TD valign="top"><I>Refresh</I></TD>     <TD valign="top">Reloads the resource that is currently displayed</TD>
</TR>

<TR><TD valign="top"><I>Stop</I></TD>    <TD valign="top"> Stops loading a resource</TD></TR>
</table></p>

<p>
The actions performed by these functions should be obvious to anyone familiar with Internet Explorer. For example, if you were writing a browser, you could wire up the Back, Forward, Refresh, and Stop buttons with these one-line 
command handlers:
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td><pre>
// In CMyView's message map
ON_COMMAND (ID_BACK, OnBack)
ON_COMMAND (ID_FORWARD, OnForward)
ON_COMMAND (ID_REFRESH, OnRefresh)
ON_COMMAND (ID_STOP, OnStop)
    <img src="images/grayvellip.JPG" width=3 height=13 border="0">
void CMyView::OnBack ()
{
    GoBack ();
}

void CMyView::OnForward ()
{
    GoForward ();
}

void CMyView::OnRefresh ()
{
    Refresh ();
}

void CMyView::OnStop ()
{
    Stop ();
}
</pre>
</td>
</tr>
</table>
</p>

<p>The WebBrowser control exposes huge chunks of its functionality through a 
COM interface named <I>IWebBrowser2</I>. Most nonvirtual 
<I>CHtmlView</I> member functions, including the ones shown 
here, are little more than C++ wrappers around calls 
to <I>IWebBrowser2</I> methods.</p>

<p>When the user clicks a hyperlink in an HTML document, 
<I>CHtmlView</I> automatically jumps to the associated URL. You can go to other URLs programmatically 
with the <I>Navigate</I> function. The statement</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td><pre>
Navigate (_T (&quot;http://www.microsoft.com&quot;));</pre>
</td>
</tr>
</table>
</p>

<p>displays the main page of Microsoft's web site. 
<I>Navigate</I> also accepts file-based URLs. For example, the statement</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Navigate (_T (&quot;file://c:/my documents/budget.xls&quot;));</pre>
</td>
</tr>
</table>
</p>


<p>displays an Excel spreadsheet in an HTML view. It works because Excel is an 
Active Document server, but it does require that Excel be installed on the host PC. 
Passing a path name identifying a folder rather than a file works, too:

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>Navigate (_T (&quot;file://c:/my documents&quot;));</pre>
</td>
</tr>
</table>
</p>

<p>A related <I>CHtmlView</I> function named 
<I>Navigate2</I> does everything <I>Navigate</I> does 
and more. Because it will accept pointers to ITEMIDLIST structures in lieu of path 
names, <I>Navigate2</I> can be used to access objects anywhere in the shell's namespace. 
<I>Navigate</I>, by contrast, is limited to file system objects only.
</p>

<A NAME="305"><H2><I>CHtmlView</I> Overridables</H2></A>
<p><I>CHtmlView</I> includes several virtual functions that you can override in a derived 
class to obtain up-to-date information about the state of the WebBrowser control and 
the resources that it displays. A sampling of these functions appears in the following table.
</p>

<p>
<B>Key <I>CHtmlView</I> Overridables</B>
</p>

<p><table cellpadding="5" width="95%">
<TR><TH valign="top"><i>Function</i> </TH>
<TH valign="top"><i>Description</i></TH></TR>

<TR><TD valign="top"><I>OnNavigateComplete2</I></TD>     <TD valign="top">Called after navigating to a new URL</TD></TR>

<TR><TD valign="top"><I>OnBeforeNavigate2</I> </TD>   <TD valign="top"> Called before navigating to a new URL</TD></TR>

<TR><TD valign="top"><I>OnProgressChange</I></TD>    <TD valign="top"> Called to provide an update on the status of a download</TD></TR>

<TR><TD valign="top"><I>OnDownloadBegin</I></TD>     <TD valign="top">Called to indicate that a download is about to begin</TD></TR>

<TR><TD valign="top"><I>OnDownloadComplete</I></TD>     <TD valign="top">Called to indicate that a download is complete</TD></TR>

<TR><TD valign="top"><I>OnTitleChange</I> </TD>    <TD>Called when the document title changes</TD></TR>

<TR><TD valign="top"><I>OnDocumentComplete</I> </TD>    <TD valign="top">Called to indicate that a document was successfully downloaded</TD></TR>
</table>
</p>

<p>
Unfortunately, the Visual C++ documentation provides only sketchy information about why or when these functions are called. That's why a transcript can be so revealing. Here's a log of the calls that took place when <I>CHtmlView::Navigate</I> was called to go to <I>home.microsoft.com</I>:
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td><pre>
OnBeforeNavigate2 (&quot;http://home.microsoft.com/&quot;)
OnDownloadBegin ()
OnProgressChange (100/10000)
OnProgressChange (150/10000)
OnProgressChange (150/10000)
OnProgressChange (200/10000)
OnProgressChange (250/10000)
OnProgressChange (300/10000)
OnProgressChange (350/10000)
OnProgressChange (400/10000)
OnProgressChange (450/10000)
OnProgressChange (500/10000)
OnProgressChange (550/10000)
OnDownloadComplete ()
OnDownloadBegin ()
OnProgressChange (600/10000)
OnProgressChange (650/10000)
OnProgressChange (700/10000)
OnProgressChange (750/10000)
OnProgressChange (800/10000)
OnProgressChange (850/10000)
OnProgressChange (900/10000)
OnProgressChange (950/10000)
OnProgressChange (1000/10000)
OnProgressChange (1050/10000)
OnProgressChange (1100/10000)
OnProgressChange (1150/10000)
OnProgressChange (1200/10000)
OnProgressChange (1250/10000)
OnProgressChange (131400/1000000)
OnTitleChange (&quot;http://home.microsoft.com/&quot;)
OnNavigateComplete2 (&quot;http://home.microsoft.com/&quot;)
OnTitleChange (&quot;MSN.COM&quot;)
OnProgressChange (146500/1000000)
OnTitleChange (&quot;MSN.COM&quot;)
OnProgressChange (158200/1000000)
OnProgressChange (286500/1000000)
OnProgressChange (452300/1000000)
OnTitleChange (&quot;MSN.COM&quot;)
OnProgressChange (692800/1000000)
OnProgressChange (787000/1000000)
OnTitleChange (&quot;MSN.COM&quot;)
    <img src="images/grayvellip.JPG" width=3 height=13 border="0">  
OnDownloadComplete ()
OnTitleChange (&quot;MSN.COM&quot;)
OnDocumentComplete (&quot;http://home.microsoft.com/&quot;)
OnProgressChange (0/0)</pre>
</td>
</tr>
</table>
</p>


<p>You can clearly see the call to 
<I>OnBeforeNavigate2</I> advertising the WebBrowser 
control's intent to jump to a new URL, the call to 
<I>OnNavigateComplete2</I> after a connection was established, and the call to 
<I>OnDocumentComplete</I> once the page was fully 
downloaded. In between, you see calls to 
<I>OnDownloadBegin</I> and 
<I>OnDownloadComplete</I> marking the downloading of individual page elements and calls to 
<I>OnProgressChange</I> noting the progress of those downloads. 
<I>OnProgressChange</I> receives two parameters: a long specifying the number of bytes downloaded thus far and a long specifying 
the number of bytes to be downloaded. Dividing the first by the second and 
multiplying by 100 yields a percentage-done figure that can be displayed in a progress bar or 
other control. A call to <I>OnProgressChange</I> with a first parameter equal to 
-1 or a pair of 0 parameters is another indication that a download is complete.
</p>   <p>The MFCIE sample shipped with Visual C++ provides one example of how 
these functions can be used. It uses 
<I>OnTitleChange</I> to update the document title 
displayed in its title bar, 
<I>OnBeforeNavigate2</I> to begin playing an animation indicating a 
download is in progress, and 
<I>OnDocumentComplete</I> to stop the animation and 
update the URL displayed in its address bar. In essence, it uses 
<I>OnBeforeNavigate2</I> and 
<I>OnDocumentComplete</I> to mark the beginning and end of a document 
download and <I>OnTitleChange</I> to display the title parsed from the HTML.
</p>

<A NAME="306"><H2>Utilizing DHTML in <I>CHtmlView</I>-Based Applications</H2></A>
<p>Writing specialized browsers for in-house use is a fine way to put 
<I>CHtmlView</I> to work, but <I>CHtmlView</I> has plenty of other uses, too. Some MFC developers find 
<I>CHtmlView</I> interesting because it can be used to write thin clients. A 
<I>thin client</I> is an application that derives all or part of its functionality from HTML code, DHTML code, or 
other web programming media. A full discourse on DHTML is beyond the scope of 
this book, but a sample will help to demonstrate how 
<I>CHtmlView</I> and DHTML together can be a potent mix.
</p>
<p>Suppose you'd like to write a Windows application that simulates a digital 
clock. One way to do it is to fire up Visual C++ and write an MFC clock application. 
An alternate approach is to create a 
<I>CHtmlView</I>-based application that runs a 
DHTML script that in turn runs the clock. The chief advantage to the latter technique is that the application's look and feel is defined in an ordinary HTML file. Anyone with access to the HTML file can customize the application's user interface using tools as unsophisticated as Notepad. Modifying the user interface of a compiled executable, by contrast, requires more elaborate measures.
</p>

<p>Because DHTML is language-independent, DHTML scripts can be written in 
any scripting language for which a scripting engine is available. Most DHTML 
scripts are written in JavaScript, which is a dialect of the Java programming language, 
or Microsoft Visual Basic, Scripting Edition (VBScript), which comes from Visual 
Basic. The following HTML file is based on a sample provided on MSDN. It uses 
DHTML and embedded JavaScript to display a ticking digital clock:</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<pre>&lt;HTML&gt;
&lt;HEAD&gt;&lt;TITLE&gt;DHTML Clock Demo&lt;/TITLE&gt;&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#FF0000&quot;&gt;
&lt;H1 STYLE=&quot;font-family:comic sans ms&quot; ALIGN=center&gt;DHTML Clock&lt;/H1&gt;
&lt;DIV ID=Clock ALIGN=center
STYLE=&quot;font-family:arial; font-size:64; color:#FFFFFF&quot;&gt;
&amp;nbsp;&lt;/DIV&gt;

&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
&lt;!--
function tick() {
    var hours, minutes, seconds, ampm;
    var today = new Date();
    var h = today.getHours();
    var m = today.getMinutes();
    var s = today.getSeconds();

    if (h &lt; 12) { 
        hours = h + &quot;:&quot;;
        ampm = &quot;A.M.&quot;;
    }
    else if (h == 12) {
        hours = &quot;12:&quot;;
        ampm = &quot;P.M.&quot;;
    }
    else {
        h = h - 12;
        hours = h + &quot;:&quot;;
        ampm = &quot;P.M.&quot;;
    }

    if (m &lt; 10)
        minutes = &quot;0&quot; + m + &quot;:&quot;;
    else
        minutes = m + &quot;:&quot;;

    if (s &lt; 10)
        seconds = &quot;0&quot; + s + &quot; &quot;;
    else
        seconds = s + &quot; &quot;;

    Clock.innerHTML = hours + minutes + seconds + ampm;
    window.setTimeout(&quot;tick();&quot;, 100);
}
window.onload = tick;
--&gt;
&lt;/SCRIPT&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</pre>
</td>
</tr>
</table>
</p>



<p>Figure 10-4 below shows a 
<I>CHtmlView</I>-based application named HtmlClock that uses this 
HTML script as the basis for a clock program. The HTML 
is stored in a file named Clock.htm. When HtmlClock is started, the view's 
<I>OnInitialUpdate</I> function passes the path to 
Clock.htm to the <I>Navigate</I> function. (Because 
of the way the path name is formulated, Clock.htm must be located in the same 
directory as HtmlClock.exe.) Under the hood, 
<I>Navigate</I> passes the path name to the WebBrowser control, and the WebBrowser control loads the file, parses the 
HTML, and executes the script.
</p>
<p>
<A HREF="javascript:fullSize('F10mg04x.htm')"> <img src="images/F10mg04.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 10-4.</B> <I>The HtmlClock window.</I><!-- /CAPTION -->
</p>

The source code for HtmlClock's view class appears in Figure 10-5. To create 
HtmlClock, I used AppWizard to create an SDI document/view program with a 
<I>CHtmlView</I>-based view. I modified the AppWizard-supplied 
<I>OnInitialUpdate</I> function to load Clock.htm, added an 
<I>OnTitleChange</I> function that displays the page title 
(&quot;DHTML Clock Demo&quot;) in the frame window's title bar, and trimmed most of the 
AppWizard-generated entries from the application's menu.</p>

<p>HtmlClock merely scratches the surface of what you can do with HTML 
views. For example, you can run Java applets in HTML views, and you can write C++ 
code that interacts with DHTML objects. 
<I>CHtmlView</I> is also the perfect tool for 
building HTML-based help systems. If HTML remains the industry darling that it is 
today, <I>CHtmlView</I> can be the ticket that gets you into the ball.
</p>

<p>
<B>Figure 10-5.</B> <I>The HtmlClock application.</I>
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<A NAME="307"><H3>HtmlClockView.h</H3></A>
<pre>
// HtmlClockView.h : interface of the CHtmlClockView class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(
//     AFX_HTMLCLOCKVIEW_H__D39825ED_99C0_11D2_8E53_006008A82731__INCLUDED_)
#define AFX_HTMLCLOCKVIEW_H__D39825ED_99C0_11D2_8E53_006008A82731__INCLUDED_
#if _MSC_VER &gt; 1000

#pragma once
#endif // _MSC_VER &gt; 1000


class CHtmlClockView : public CHtmlView
{
protected: // create from serialization only
    CHtmlClockView();
    DECLARE_DYNCREATE(CHtmlClockView)

// Attributes
public:
    CHtmlClockDoc* GetDocument();

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CHtmlClockView)
    public:
    virtual void OnDraw(CDC* pDC);  // overridden to draw this view
    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    virtual void OnTitleChange(LPCTSTR lpszText);
    protected:
    virtual void OnInitialUpdate(); // called first time after construct
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CHtmlClockView();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif

protected:

// Generated message map functions
protected:
    //{{AFX_MSG(CHtmlClockView)
        // NOTE - the ClassWizard will add and remove member functions here.
        //    DO NOT EDIT what you see in these blocks of generated code !
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

#ifndef _DEBUG  // debug version in HtmlClockView.cpp
inline CHtmlClockDoc* CHtmlClockView::GetDocument()
   { return (CHtmlClockDoc*)m_pDocument; }
#endif

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately
// before the previous line.

#endif 
// !defined(
//     AFX_HTMLCLOCKVIEW_H__D39825ED_99C0_11D2_8E53_006008A82731__INCLUDED_)
</pre>
</td>
</tr>
</table>
</p>

<p>
<table cellpadding=5 width="95%">
<tr>
<td>
<A NAME="308"><H3>HtmlClockView.cpp</H3></A>
<pre>
// HtmlClockView.cpp : implementation of the CHtmlClockView class
//

#include &quot;stdafx.h&quot;
#include &quot;HtmlClock.h&quot;

#include &quot;HtmlClockDoc.h&quot;
#include &quot;HtmlClockView.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CHtmlClockView

IMPLEMENT_DYNCREATE(CHtmlClockView, CHtmlView)

BEGIN_MESSAGE_MAP(CHtmlClockView, CHtmlView)
    //{{AFX_MSG_MAP(CHtmlClockView)
        // NOTE - the ClassWizard will add and remove mapping macros here.
        //    DO NOT EDIT what you see in these blocks of generated code!
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CHtmlClockView construction/destruction

CHtmlClockView::CHtmlClockView()
{
}

CHtmlClockView::~CHtmlClockView()
{
}

BOOL CHtmlClockView::PreCreateWindow(CREATESTRUCT&amp; cs)
{
    return CHtmlView::PreCreateWindow(cs);
}

///////////////////////////////////////////////////////////////////////////
// CHtmlClockView drawing

void CHtmlClockView::OnDraw(CDC* pDC)
{
    CHtmlClockDoc* pDoc = GetDocument();
    ASSERT_VALID(pDoc);
}

void CHtmlClockView::OnInitialUpdate()
{
    CHtmlView::OnInitialUpdate();

    TCHAR szPath[MAX_PATH];
    ::GetModuleFileName (NULL, szPath, sizeof (szPath) / sizeof (TCHAR));

    CString string = szPath;
    int nIndex = string.ReverseFind (_T (`\\'));
    ASSERT (nIndex != -1);
    string = string.Left (nIndex + 1) + _T (&quot;Clock.htm&quot;);
    Navigate (string);
}

///////////////////////////////////////////////////////////////////////////
// CHtmlClockView diagnostics

#ifdef _DEBUG
void CHtmlClockView::AssertValid() const
{
    CHtmlView::AssertValid();
}

void CHtmlClockView::Dump(CDumpContext&amp; dc) const
{
    CHtmlView::Dump(dc);
}

CHtmlClockDoc* CHtmlClockView::GetDocument() // non-debug version is inline
{
    ASSERT(m_pDocument-&gt;IsKindOf(RUNTIME_CLASS(CHtmlClockDoc)));
    return (CHtmlClockDoc*)m_pDocument;
}
#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CHtmlClockView message handlers

void CHtmlClockView::OnTitleChange(LPCTSTR lpszText) 
{
    CHtmlView::OnTitleChange(lpszText);
    AfxGetMainWnd ()-&gt;SetWindowText (lpszText);
}
</pre>
</td>
</tr>
</table>
</p>

</BODY>
</HTML>




