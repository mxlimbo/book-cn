<HTML>
<HEAD>
<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Chapter 9 -- Documents, Views, and the Single Document Interface</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch08f.htm", "ch09b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<P><font SIZE="+3">Chapter 9</font></P>

<A NAME="267"><H1>Documents, Views, and the Single Document Interface</H1></A>

<P>In the early days of MFC, applications were architected in very much the same style 
as the sample programs in the first three chapters of this book. In MFC 1.0, an 
application had two principal components: an application object representing the application 
itself and a window object representing the application's window. The application 
object's primary duty was to create a window, and the window in turn processed 
messages. Other than the fact that it provided general-purpose classes such as 
<I>CString</I> and <I>CTime</I> to represent objects unrelated to Microsoft Windows, MFC was little more than a 
thin wrapper around the Windows API that grafted an object-oriented interface onto 
windows, dialog boxes, device contexts, and other objects already present in 
Windows in one form or another.</P>
<P>MFC 2.0 changed the way Windows applications are written by introducing 
the document/view architecture. In a document/view application, the application's 
data is represented by a document object and views of that data are represented by 
view objects. Documents and views work together to process the user's input and 
draw textual and graphical representations of the resulting data. MFC's 
<I>CDocument</I> class is the base class for document objects, and 
<I>CView</I> is the base class for view objects. The application's main window, whose behavior is modeled in MFC's 
<I>CFrameWnd</I> and <I>CMDIFrameWnd</I> classes, is no longer the focal point for message processing 
but serves primarily as a container for views, toolbars, status bars, and other user 
interface objects.</P>
<P>A programming model that separates documents from their views provides 
many benefits, not the least of which is that it more clearly defines the division of 
labor among software components and results in a higher degree of modularity. But 
the more compelling reason to take advantage of MFC's document/view architecture 
is that it simplifies the development process. Code to perform routine chores such 
as prompting the user to save unsaved data before a document is closed is provided 
for you by the framework. So is code to transform ordinary applications into 
Active Document servers, to save documents to disk and read them back, to simplify 
printing, and much more.</P>
<P>MFC supports two types of document/view applications. 
<I>Single document interface</I> (SDI) applications support just one open document at a time. 
<I>Multiple document interface</I> (MDI) applications permit two or more documents to be open 
concurrently and also support multiple views of a given document. The WordPad applet is an 
SDI application; Microsoft Word is an MDI application. The framework hides many of 
the differences between the two user interface models so that writing an MDI 
application is not much different than writing an SDI application, but today developers 
are discouraged from using the multiple document interface because the SDI model 
promotes a more document-centric user interface. If the user is to edit two 
documents simultaneously, Microsoft would prefer that each document be displayed in a 
separate instance of your application. This chapter therefore examines the 
document/view architecture with a decided emphasis on the single document interface. 
Everything that you learn here, however, applies to MDI applications as well, and for 
completeness we'll examine the multiple document interface as well as methods for 
supporting multiple views in SDI applications in <a href="ch11a.htm">Chapter 11</a>.</P>

</BODY>
</HTML>




