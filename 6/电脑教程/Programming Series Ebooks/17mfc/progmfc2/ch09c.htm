<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>Your First Document/View Application</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09b.htm", "ch09d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="282"><H1>Your First Document/View Application</H1></A>

<P>Now that you have an idea of what the document/view architecture is all about 
and a feel for some of the implementation details, let's write a document/view 
application. If some of the concepts covered in the first part of this chapter seem a little 
abstract, seeing the code for a working document/view application should help bring 
things into focus.</P>

<A NAME="283"><H2>The SdiSquares Application</H2></A>

<P>The program shown in Figure 9-3 is an SDI 
document/view application that displays a grid of squares four rows deep and four columns wide. Initially, each square 
is colored white. However, you can change a square's color by clicking it with the 
left mouse button. By default, clicking changes a square's color to red. You can 
select alternate colors from the Color menu and thereby create a multicolored grid 
containing squares of up to six different colors.</P>

<P>
<A HREF="javascript:fullSize('F09mg03x.htm')"> <img src="images/F09mg03.JPG" width=404 height=313 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 9-3.</B> <I>The SdiSquares window.</I><!-- /CAPTION -->
</p>

<P>Though SdiSquares is but a rudimentary document/view application, it 
demonstrates all the basic tenets of the document/view architecture. Four 
fundamental classes play critical roles in the application's operation:The SdiSquares window.</P>

<UL>
<P><LI>The application class <I>CSquaresApp</I>, which is derived from 
<I>CWinApp</I></LI></P>
<P><LI>The frame window class <I>CMainFrame</I>, which is derived from 
<I>CFrameWnd</I></LI></P>
<P><LI>The document class <I>CSquaresDoc</I>, which is derived from 
<I>CDocument</I></LI></P>
<P><LI>The view class <I>CSquaresView</I>, which is derived from 
<I>CView</I></LI></P>
</UL>

<P>The source code for these classes is reproduced in Figure 9-4.</P> 
<P>In SdiSquares, a &quot;document&quot; consists of a two-dimensional array of 
COLORREF values defining the color of each square, plus an additional COLORREF value 
that defines the &quot;current color&quot;&#8212;the color assigned to a square when the square is 
clicked. The colors of the squares are stored in a protected 
<I>CSquaresDoc</I> member variable named 
<I>m_clrGrid</I>, which is a 4 by 4 array of COLORREF values. The current color 
is stored in a separate <I>CSquaresDoc</I> member variable named 
<I>m_clrCurrentColor</I>. In the document's 
<I>OnNewDocument</I> function, all 16 elements of 
<I>m_clrGrid</I> are initialized to white and 
<I>m_clrCurrentColor</I> is initialized to red. These variables are initialized 
in <I>OnNewDocument</I> instead of 
<I>CSquaresDoc</I>'s constructor to ensure that they are 
reset whenever a new document is created. If they were initialized in the document's 
constructor instead, they would be initialized only once&#8212;when the application starts 
up&#8212;and would retain their current values when a new document is created since an 
SDI application constructs a document object just one time and reuses it as 
documents are created and destroyed.</P>
<P>To expose the document's data to the view, 
<I>CSquaresDoc</I> implements three public member functions. 
<I>GetCurrentColor</I> returns the current color (the value 
of <I>m_clrCurrentColor</I>). <I>GetSquare</I> returns the color of the square at a given row 
and column address (<I>m_clrGrid[i][j]</I>). 
<I>SetSquare</I> assigns a color to the square at a 
specified row and column address. After assigning a color to a square, 
<I>SetSquare</I> calls the document's 
<I>SetModifiedFlag</I> to mark the document as dirty and 
<I>UpdateAllViews</I> to force the view to repaint to show the updated grid:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
m_clrGrid[i][j] = color;
SetModifiedFlag (TRUE);
UpdateAllViews (NULL);
</PRE>
</TD></TR></TABLE>
</P>

<P><I>GetCurrentColor</I>, <I>GetSquare</I>, and 
<I>SetSquare</I> serve as a bridge between the 
document and the view. The view can't access the document's data members directly since 
they are protected, but it can call the document's accessor functions because they 
are declared public.</P>
<P>The view's <I>OnDraw</I> function draws the grid on the screen. The colored 
squares are drawn by a nested <I>for</I> loop that iterates through the grid one row and one 
column at a time. Each iteration through the loop, the view retrieves the color of 
the corresponding square by calling the document's 
<I>GetSquare</I> function through the <I>pDoc</I> pointer that holds the value returned by 
<I>GetDocument</I>:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
CSquaresDoc* pDoc = GetDocument();
ASSERT_VALID(pDoc);
    <img src="images/grayvellip.JPG" width=3 height=13 border="0">
for (int i=0; i&lt;4; i++) {
    for (int j=0; j&lt;4; j++) {
        COLORREF color = pDoc-&gt;GetSquare (i, j);
        CBrush brush (color);
        int x1 = (j * 100) + 50;
        int y1 = (i * -100) - 50;
        int x2 = x1 + 100;
        int y2 = y1 - 100;
        CRect rect (x1, y1, x2, y2);
        pDC-&gt;FillRect (rect, &amp;brush);
    }
}
</PRE>
</TD></TR></TABLE>
</P>

<P>AppWizard inserted the calls to 
<I>GetDocument</I> and ASSERT_VALID; I added all 
the other statements in <I>OnDraw</I>. 
<I>OnDraw</I> uses negative <I>y</I> values in its 
computations because it does its drawing in the MM_LOENGLISH mapping mode, where 
client-area <I>y</I> coordinates are negative.</P>
<P>The view includes a WM_LBUTTONDOWN handler that converts the click 
coordinates from device coordinates to MM_LOENGLISH coordinates and then tests 
to see which, if any, of the squares was clicked. If the click occurred in a 
square, <I>CSquaresView::OnLButtonDown</I> calls the document's 
<I>GetCurrentColor</I> function to retrieve the current color:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
CSquaresDoc* pDoc = GetDocument ();
COLORREF clrCurrentColor = pDoc-&gt;GetCurrentColor ();
</PRE>
</TD></TR></TABLE>
</P>

<P>It then calls the document's <I>SetSquare</I> function to assign that color to the square 
in which the click occurred:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
pDoc-&gt;SetSquare (i, j, clrCurrentColor);
</PRE>
</TD></TR></TABLE>
</P>

<P>You can clearly see here how the public member functions added to 
<I>CSquaresDoc</I> are used to bridge the gulf between the document and the view, and why 
<I>GetDocument</I> is such an important function. And because the view has no notion of how 
the document's data is physically stored, you could alter the document's internal 
storage mechanism without affecting the view class one bit.</P>
<P>I placed the command and update handlers for the commands in the Color 
menu in the document class because 
<I>m_clrCurrentColor</I> is a member of the document 
class. The command handlers simply assign an RGB color value to 
<I>m_clrCurrentColor</I>. The update handlers use 
<I>CCmdUI::SetRadio</I> to bullet the current color. Rather than 
write six separate command handlers and six separate update handlers, I could have 
used MFC's ON_COMMAND_RANGE and ON_UPDATE_COMMAND_UI_RANGE 
macros to service all six menu items with one command handler and one update 
handler. Because ClassWizard provides no means for outputting RANGE macros, however, 
these macros, if used, would have to be added by hand.</P>
<P>When the user saves an SdiSquares document to disk or reads it back, MFC 
calls the document's <I>Serialize</I> function. 
<I>CSquaresDoc::Serialize</I> responds by 
serializing <I>m_clrGrid</I> and 
<I>m_clrCurrentColor</I> to the archive if the document is being saved 
or by serializing them <I>from</I> the archive if the document is being loaded. Here's the 
code that does the work:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
void CSquaresDoc::Serialize(CArchive&amp; ar)
{
    if (ar.IsStoring())
    {
        for (int i=0; i&lt;4; i++)
            for (int j=0; j&lt;4; j++)
                ar &lt;&lt; m_clrGrid[i][j];
        ar &lt;&lt; m_clrCurrentColor;
    }
    else
    {
        for (int i=0; i&lt;4; i++)
            for (int j=0; j&lt;4; j++)
                ar &gt;&gt; m_clrGrid[i][j];
        ar &gt;&gt; m_clrCurrentColor;
    }
}
</PRE>
</TD></TR></TABLE>
</P>

<P>Because a COLORREF is a DWORD and MFC overloads the &lt;&lt; and &gt;&gt; operators 
for DWORDs, <I>m_clrGrid</I> and 
<I>m_clrCurrentColor</I> values can be serialized with 
syntactical ease. AppWizard generates a do-nothing 
<I>Serialize</I> function that includes the call to 
<I>IsStoring</I>. You supply the code that streams the document's persistent data in 
and out. Note that MFC handles the dirty work of displaying an Open or Save As 
dialog to the user, opening the file for reading or writing, and so on. That's why the 
process of saving and loading documents is typically much less work in document/view 
applications than it is in conventional applications.</P>

<P>As you can probably tell from Figure 9-4, I used AppWizard to generate 
SdiSquares' initial source code and ClassWizard to write message handlers, 
command handlers, and update handlers. I didn't touch the code that AppWizard generated 
for the application class and frame window class because I didn't need to. The bulk 
of my work involved the document and view classes, which is typical of the 
document/view application development process.</P>

<p><B>Figure 9-4.</B> <I>The SdiSquares application</I></p>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="284"><H3>SdiSquares.h</H3></A>
<PRE>// SdiSquares.h : main header file for the SDISQUARES application
//

#if !defined(
    AFX_SDISQUARES_H__00156CE5_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
#define AFX_SDISQUARES_H__00156CE5_BB17_11D2_A2FD_0000861BAE71__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000
#ifndef __AFXWIN_H__
    #error include `stdafx.h' before including this file for PCH
#endif

#include &quot;resource.h&quot;       // main symbols

///////////////////////////////////////////////////////////////////////////
// CSquaresApp:
// See SdiSquares.cpp for the implementation of this class
//

class CSquaresApp : public CWinApp
{
public:
    CSquaresApp();

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSquaresApp)
    public:
    virtual BOOL InitInstance();
    //}}AFX_VIRTUAL

// Implementation
    //{{AFX_MSG(CSquaresApp)
    afx_msg void OnAppAbout();
       // NOTE - the ClassWizard will add and remove member functions here.
       //    DO NOT EDIT what you see in these blocks of generated code !
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations 
// immediately before the previous line.

#endif 
// !defined(
//     AFX_SDISQUARES_H__00156CE5_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
</pre>
</TD></TR></TABLE>
</P>



<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="285"><H3>SdiSquares.cpp</H3></A>
<PRE>// SdiSquares.cpp : Defines the class behaviors for the application.
//

#include &quot;stdafx.h&quot;
#include &quot;SdiSquares.h&quot;

#include &quot;MainFrm.h&quot;
#include &quot;SquaresDoc.h&quot;
#include &quot;SquaresView.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CSquaresApp

BEGIN_MESSAGE_MAP(CSquaresApp, CWinApp)
    //{{AFX_MSG_MAP(CSquaresApp)
    ON_COMMAND(ID_APP_ABOUT, OnAppAbout)
        // NOTE - the ClassWizard will add and remove mapping macros here.
        //    DO NOT EDIT what you see in these blocks of generated code!
    //}}AFX_MSG_MAP
    // Standard file based document commands
    ON_COMMAND(ID_FILE_NEW, CWinApp::OnFileNew)
    ON_COMMAND(ID_FILE_OPEN, CWinApp::OnFileOpen)
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CSquaresApp construction

CSquaresApp::CSquaresApp()
{
    // TODO: add construction code here,
    // Place all significant initialization in InitInstance
}

///////////////////////////////////////////////////////////////////////////
// The one and only CSquaresApp object

CSquaresApp theApp;

///////////////////////////////////////////////////////////////////////////
// CSquaresApp initialization

BOOL CSquaresApp::InitInstance()
{
    // Standard initialization
    // If you are not using these features and wish to reduce the size
    //  of your final executable, you should remove from the following
    //  the specific initialization routines you do not need.

    // Change the registry key under which our settings are stored.
    // TODO: You should modify this string to be something appropriate
    // such as the name of your company or organization.
    SetRegistryKey(_T(&quot;Local AppWizard-Generated Applications&quot;));

    LoadStdProfileSettings();  // Load standard INI file 
                               // options (including MRU)

    // Register the application's document templates.  Document templates
    //  serve as the connection between documents, frame windows and views.

    CSingleDocTemplate* pDocTemplate;
    pDocTemplate = new CSingleDocTemplate(
        IDR_MAINFRAME,
        RUNTIME_CLASS(CSquaresDoc),
        RUNTIME_CLASS(CMainFrame),       // main SDI frame window
        RUNTIME_CLASS(CSquaresView));
    AddDocTemplate(pDocTemplate);

    // Enable DDE Execute open
    EnableShellOpen();
    RegisterShellFileTypes(TRUE);

    // Parse command line for standard shell commands, DDE, file open
    CCommandLineInfo cmdInfo;
    ParseCommandLine(cmdInfo);

    // Dispatch commands specified on the command line
    if (!ProcessShellCommand(cmdInfo))
        return FALSE;

    // The one and only window has been initialized, so show and update it.
    m_pMainWnd-&gt;ShowWindow(SW_SHOW);
    m_pMainWnd-&gt;UpdateWindow();

    // Enable drag/drop open
    m_pMainWnd-&gt;DragAcceptFiles();

    return TRUE;
}

///////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
    CAboutDlg();

// Dialog Data
    //{{AFX_DATA(CAboutDlg)
    enum { IDD = IDD_ABOUTBOX };
    //}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CAboutDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

// Implementation
protected:
    //{{AFX_MSG(CAboutDlg)
        // No message handlers
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
    //{{AFX_DATA_INIT(CAboutDlg)
    //}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CAboutDlg)
    //}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
    //{{AFX_MSG_MAP(CAboutDlg)
        // No message handlers
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

// App command to run the dialog
void CSquaresApp::OnAppAbout()
{
    CAboutDlg aboutDlg;
    aboutDlg.DoModal();
}

///////////////////////////////////////////////////////////////////////////
// CSquaresApp message handlers
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="286"><H3>MainFrm.h</H3></A>
<PRE>// MainFrm.h : interface of the CMainFrame class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(
    AFX_MAINFRM_H__00156CE9_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
#define AFX_MAINFRM_H__00156CE9_BB17_11D2_A2FD_0000861BAE71__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

class CMainFrame : public CFrameWnd
{
    
protected: // create from serialization only
    CMainFrame();
    DECLARE_DYNCREATE(CMainFrame)

// Attributes
public:

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CMainFrame)
    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CMainFrame();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif

// Generated message map functions
protected:
    //{{AFX_MSG(CMainFrame)
       // NOTE - the ClassWizard will add and remove member functions here.
       //    DO NOT EDIT what you see in these blocks of generated code!
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations 
// immediately before the previous line.

#endif 
// !defined(AFX_MAINFRM_H__00156CE9_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="287"><H3>MainFrm.cpp</H3></A>
<PRE>// MainFrm.cpp : implementation of the CMainFrame class
//

#include &quot;stdafx.h&quot;
#include &quot;SdiSquares.h&quot;

#include &quot;MainFrm.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CMainFrame


IMPLEMENT_DYNCREATE(CMainFrame, CFrameWnd)

BEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)
    //{{AFX_MSG_MAP(CMainFrame)
        // NOTE - the ClassWizard will add and remove mapping macros here.
        //    DO NOT EDIT what you see in these blocks of generated code !
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CMainFrame construction/destruction

CMainFrame::CMainFrame()
{
    // TODO: add member initialization code here
    
}

CMainFrame::~CMainFrame()
{
}

BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)
{
    if( !CFrameWnd::PreCreateWindow(cs) )
        return FALSE;
    // TODO: Modify the Window class or styles here by modifying
    //  the CREATESTRUCT cs

    return TRUE;
}

///////////////////////////////////////////////////////////////////////////
// CMainFrame diagnostics

#ifdef _DEBUG
void CMainFrame::AssertValid() const
{
    CFrameWnd::AssertValid();
}

void CMainFrame::Dump(CDumpContext&amp; dc) const
{
    CFrameWnd::Dump(dc);
}

#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CMainFrame message handlers
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="288"><H3>SquaresDoc.h</H3></A>
<PRE>// SquaresDoc.h : interface of the CSquaresDoc class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(
    AFX_SQUARESDOC_H__00156CEB_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
#define AFX_SQUARESDOC_H__00156CEB_BB17_11D2_A2FD_0000861BAE71__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000

class CSquaresDoc : public CDocument
{
protected: // create from serialization only
    CSquaresDoc();
    DECLARE_DYNCREATE(CSquaresDoc)

// Attributes
public:

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSquaresDoc)
    public:
    virtual BOOL OnNewDocument();
    virtual void Serialize(CArchive&amp; ar);
    //}}AFX_VIRTUAL

// Implementation
public:
    void SetSquare (int i, int j, COLORREF color);
    COLORREF GetSquare (int i, int j);
    COLORREF GetCurrentColor();
    virtual ~CSquaresDoc();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif

protected:

// Generated message map functions
protected:
    COLORREF m_clrCurrentColor;
    COLORREF m_clrGrid[4][4];
    //{{AFX_MSG(CSquaresDoc)
    afx_msg void OnColorRed();
    afx_msg void OnColorYellow();
    afx_msg void OnColorGreen();
    afx_msg void OnColorCyan();
    afx_msg void OnColorBlue();
    afx_msg void OnColorWhite();
    afx_msg void OnUpdateColorRed(CCmdUI* pCmdUI);
    afx_msg void OnUpdateColorYellow(CCmdUI* pCmdUI);
    afx_msg void OnUpdateColorGreen(CCmdUI* pCmdUI);
    afx_msg void OnUpdateColorCyan(CCmdUI* pCmdUI);
    afx_msg void OnUpdateColorBlue(CCmdUI* pCmdUI);
    afx_msg void OnUpdateColorWhite(CCmdUI* pCmdUI);
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations 
// immediately before the previous line.

#endif 
// !defined(
//     AFX_SQUARESDOC_H__00156CEB_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="289"><H3>SquaresDoc.cpp</H3></A>
<PRE>// SquaresDoc.cpp : implementation of the CSquaresDoc class
//

#include &quot;stdafx.h&quot;
#include &quot;SdiSquares.h&quot;

#include &quot;SquaresDoc.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CSquaresDoc

IMPLEMENT_DYNCREATE(CSquaresDoc, CDocument)

BEGIN_MESSAGE_MAP(CSquaresDoc, CDocument)
    //{{AFX_MSG_MAP(CSquaresDoc)
    ON_COMMAND(ID_COLOR_RED, OnColorRed)
    ON_COMMAND(ID_COLOR_YELLOW, OnColorYellow)
    ON_COMMAND(ID_COLOR_GREEN, OnColorGreen)
    ON_COMMAND(ID_COLOR_CYAN, OnColorCyan)
    ON_COMMAND(ID_COLOR_BLUE, OnColorBlue)
    ON_COMMAND(ID_COLOR_WHITE, OnColorWhite)
    ON_UPDATE_COMMAND_UI(ID_COLOR_RED, OnUpdateColorRed)
    ON_UPDATE_COMMAND_UI(ID_COLOR_YELLOW, OnUpdateColorYellow)
    ON_UPDATE_COMMAND_UI(ID_COLOR_GREEN, OnUpdateColorGreen)
    ON_UPDATE_COMMAND_UI(ID_COLOR_CYAN, OnUpdateColorCyan)
    ON_UPDATE_COMMAND_UI(ID_COLOR_BLUE, OnUpdateColorBlue)
    ON_UPDATE_COMMAND_UI(ID_COLOR_WHITE, OnUpdateColorWhite)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CSquaresDoc construction/destruction

CSquaresDoc::CSquaresDoc()
{
    // TODO: add one-time construction code here

}

CSquaresDoc::~CSquaresDoc()
{
}

BOOL CSquaresDoc::OnNewDocument()
{
    if (!CDocument::OnNewDocument())
        return FALSE;

    for (int i=0; i&lt;4; i++)
        for (int j=0; j&lt;4; j++)
            m_clrGrid[i][j] = RGB (255, 255, 255);

    m_clrCurrentColor = RGB (255, 0, 0);
    return TRUE;
}



///////////////////////////////////////////////////////////////////////////
// CSquaresDoc serialization

void CSquaresDoc::Serialize(CArchive&amp; ar)
{
    if (ar.IsStoring())
    {
        for (int i=0; i&lt;4; i++)
            for (int j=0; j&lt;4; j++)
                ar &lt;&lt; m_clrGrid[i][j];
        ar &lt;&lt; m_clrCurrentColor;
    }
    else
    {
        for (int i=0; i&lt;4; i++)
            for (int j=0; j&lt;4; j++)
                ar &gt;&gt; m_clrGrid[i][j];
        ar &gt;&gt; m_clrCurrentColor;
    }
}

///////////////////////////////////////////////////////////////////////////
// CSquaresDoc diagnostics

#ifdef _DEBUG
void CSquaresDoc::AssertValid() const
{
    CDocument::AssertValid();
}

void CSquaresDoc::Dump(CDumpContext&amp; dc) const
{
    CDocument::Dump(dc);
}
#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CSquaresDoc commands

COLORREF CSquaresDoc::GetCurrentColor()
{
    return m_clrCurrentColor;
}

COLORREF CSquaresDoc::GetSquare(int i, int j)
{
    ASSERT (i &gt;= 0 &amp;&amp; i &lt;= 3 &amp;&amp; j &gt;= 0 &amp;&amp; j &lt;= 3);
    return m_clrGrid[i][j];
}

void CSquaresDoc::SetSquare(int i, int j, COLORREF color)
{
    ASSERT (i &gt;= 0 &amp;&amp; i &lt;= 3 &amp;&amp; j &gt;= 0 &amp;&amp; j &lt;= 3);
    m_clrGrid[i][j] = color;
    SetModifiedFlag (TRUE);
    UpdateAllViews (NULL);
}

void CSquaresDoc::OnColorRed() 
{
    m_clrCurrentColor = RGB (255, 0, 0);    
}

void CSquaresDoc::OnColorYellow() 
{
    m_clrCurrentColor = RGB (255, 255, 0);    
}

void CSquaresDoc::OnColorGreen() 
{
    m_clrCurrentColor = RGB (0, 255, 0);    
}

void CSquaresDoc::OnColorCyan() 
{
    m_clrCurrentColor = RGB (0, 255, 255);    
}x

void CSquaresDoc::OnColorBlue() 
{
    m_clrCurrentColor = RGB (0, 0, 255);    
}

void CSquaresDoc::OnColorWhite() 
{
    m_clrCurrentColor = RGB (255, 255, 255);    
}

void CSquaresDoc::OnUpdateColorRed(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (255, 0, 0));    
}

void CSquaresDoc::OnUpdateColorYellow(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (255, 255, 0));    
}

void CSquaresDoc::OnUpdateColorGreen(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (0, 255, 0));    
}

void CSquaresDoc::OnUpdateColorCyan(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (0, 255, 255));    
}

void CSquaresDoc::OnUpdateColorBlue(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (0, 0, 255));    
}

void CSquaresDoc::OnUpdateColorWhite(CCmdUI* pCmdUI) 
{
    pCmdUI-&gt;SetRadio (m_clrCurrentColor == RGB (255, 255, 255));    
}
</pre>
</TD></TR></TABLE>
</P>


<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="290"><H3>SquaresView.h</H3></A>
<PRE>// SquaresView.h : interface of the CSquaresView class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(
    AFX_SQUARESVIEW_H__00156CED_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
#define AFX_SQUARESVIEW_H__00156CED_BB17_11D2_A2FD_0000861BAE71__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000


class CSquaresView : public CView
{
protected: // create from serialization only
    CSquaresView();
    DECLARE_DYNCREATE(CSquaresView)

// Attributes
public:
    CSquaresDoc* GetDocument();

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSquaresView)
    public:
    virtual void OnDraw(CDC* pDC);  // overridden to draw this view
    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    protected:
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CSquaresView();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif

protected:

// Generated message map functions
protected:
    //{{AFX_MSG(CSquaresView)
    afx_msg void OnLButtonDown(UINT nFlags, CPoint point);
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

#ifndef _DEBUG  // debug version in SquaresView.cpp
inline CSquaresDoc* CSquaresView::GetDocument()
   { return (CSquaresDoc*)m_pDocument; }
#endif

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations 
// immediately before the previous line.

#endif 
// !defined(
//     AFX_SQUARESVIEW_H__00156CED_BB17_11D2_A2FD_0000861BAE71__INCLUDED_)
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="291"><H3>SquaresView.cpp</H3></A>
<PRE>// SquaresView.cpp : implementation of the CSquaresView class
//

#include &quot;stdafx.h&quot;
#include &quot;SdiSquares.h&quot;

#include &quot;SquaresDoc.h&quot;
#include &quot;SquaresView.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CSquaresView

IMPLEMENT_DYNCREATE(CSquaresView, CView)

BEGIN_MESSAGE_MAP(CSquaresView, CView)
    //{{AFX_MSG_MAP(CSquaresView)
    ON_WM_LBUTTONDOWN()
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CSquaresView construction/destruction

CSquaresView::CSquaresView()
{
    // TODO: add construction code here

}

CSquaresView::~CSquaresView()
{
}

BOOL CSquaresView::PreCreateWindow(CREATESTRUCT&amp; cs)
{
    // TODO: Modify the Window class or styles here by modifying
    //  the CREATESTRUCT cs

    return CView::PreCreateWindow(cs);
}

///////////////////////////////////////////////////////////////////////////
// CSquaresView drawing

void CSquaresView::OnDraw(CDC* pDC)
{
    CSquaresDoc* pDoc = GetDocument();
    ASSERT_VALID(pDoc);

    //
    // Set the mapping mode to MM_LOENGLISH.
    //
    pDC-&gt;SetMapMode (MM_LOENGLISH);

    //
    // Draw the 16 squares.
    //x
    for (int i=0; i&lt;4; i++) {
        for (int j=0; j&lt;4; j++) {
            COLORREF color = pDoc-&gt;GetSquare (i, j);
            CBrush brush (color);
            int x1 = (j * 100) + 50;
            int y1 = (i * -100) - 50;
            int x2 = x1 + 100;
            int y2 = y1 - 100;
            CRect rect (x1, y1, x2, y2);
            pDC-&gt;FillRect (rect, &amp;brush);
        }
    }

    //
    // Then the draw the grid lines surrounding them.
    //
    for (int x=50; x&lt;=450; x+=100) {
        pDC-&gt;MoveTo (x, -50);
        pDC-&gt;LineTo (x, -450);
    }

    for (int y=-50; y&gt;=-450; y-=100) {
        pDC-&gt;MoveTo (50, y);
        pDC-&gt;LineTo (450, y);
    }
}

///////////////////////////////////////////////////////////////////////////
// CSquaresView diagnostics

#ifdef _DEBUG
void CSquaresView::AssertValid() const
{
    CView::AssertValid();
}

void CSquaresView::Dump(CDumpContext&amp; dc) const
{
    CView::Dump(dc);
}

CSquaresDoc* CSquaresView::GetDocument() // non-debug version is inline
{
    ASSERT(m_pDocument-&gt;IsKindOf(RUNTIME_CLASS(CSquaresDoc)));
    return (CSquaresDoc*)m_pDocument;
}
#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CSquaresView message handlers

void CSquaresView::OnLButtonDown(UINT nFlags, CPoint point) 
{
    CView::OnLButtonDown(nFlags, point);

    //
    // Convert to click coordinates to MM_LOENGLISH units.
    //
    CClientDC dc (this);
    dc.SetMapMode (MM_LOENGLISH);
    CPoint pos = point;
    dc.DPtoLP (&amp;pos);

    //
    // If a square was clicked, set its color to the current color.
    //
    if (pos.x &gt;= 50 &amp;&amp; pos.x &lt;= 450 &amp;&amp; pos.y &lt;= -50 &amp;&amp; pos.y &gt;= -450) {
        int i = (-pos.y - 50) / 100;
        int j = (pos.x - 50) / 100;
        CSquaresDoc* pDoc = GetDocument ();
        COLORREF clrCurrentColor = pDoc-&gt;GetCurrentColor ();
        pDoc-&gt;SetSquare (i, j, clrCurrentColor);
    }
}
</pre>
</TD></TR></TABLE>
</P>

<A NAME="292"><H2>SdiSquares Step by Step</H2></A>

<P>It's important to understand how SdiSquares works, but it's also important to 
understand how it was created. When you use AppWizard and ClassWizard to craft 
MFC applications, the wizards write part of the code and you write the rest. Moreover, 
there's a process involved. Although I don't intend to document every single button 
click required to create SdiSquares, I would be remiss if I didn't provide at least an 
overview of the process. Here, then, is a step-by-step account of how SdiSquares 
came together and how you can create the application yourself.</P>

<OL>
<P><LI>     Use AppWizard to create a new project named SdiSquares. In 
AppWizard's Step 1 dialog box, choose Single Document as the application type and 
check the Document/View Architecture Support box, as shown in Figure 9-5. 
In the Step 3 dialog box, uncheck the ActiveX Controls box. In Step 4, 
uncheck Docking Toolbar, Initial Status Bar, Printing And Print Preview, and 3D 
Controls. Also in the Step 4 dialog box, click the Advanced button and type the
letters <I>sqr</I> into the File Extension box (as shown in Figure 9-6) to define 
the default file name extension for SdiSquares documents. In the Step 6 
dialog box, manually edit the class names to match the ones in 
Figure 9-4. Everywhere else, accept the AppWizard defaults.</LI></P>

<P>
<A HREF="javascript:fullSize('F09mg05x.htm')"> <img src="images/F09mg05.JPG" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 9-5.</B> <I>Creating an SDI document/view application with AppWizard.</I><!-- /CAPTION -->
</p>

<P>
<img src="images/F09mg06.GIF" width=335 height=387 border=0>
</p><p>
<!-- CAPTION --><B>Figure 9-6.</B> <I>Specifying the default file name extension for SdiSquares documents.</I><!-- /CAPTION -->
</p>

<P><LI>    Add the member variables 
<I>m_clrGrid</I> and <I>m_clrCurrentColor</I> to the 
document class, and add code to initialize them to 
<I>OnNewDocument</I>. AppWizard overrides 
<I>OnNewDocument,</I> so all you have to do is add 
the statements that initialize the data members.</LI></P>
<P><LI>     Add the member functions 
<I>GetCurrentColor</I>, <I>GetSquare</I>, and 
<I>SetSquare</I> to the document class. Be sure to make them public member functions, 
since they must be accessible to the view.</LI></P>
<P><LI>     Modify the S<I>erialize</I> function that AppWizard included in the 
document class to serialize <I>m_clrGrid</I> and 
<I>m_clrCurrentColor</I>.</LI></P>
<P><LI>    Implement the view's 
<I>OnDraw</I> function. AppWizard generates a do-nothing 
<I>OnDraw</I> function; you write the code to perform 
application-specific duties.</LI></P>
<P><LI>     Add the WM_LBUTTONDOWN handler 
(<I>OnLButtonDown</I>) to the view. You can add the message handler by hand or use ClassWizard to add it. 
I used ClassWizard.</LI></P>

<P><LI>     Open the AppWizard-generated application menu for editing, delete 
the Edit menu, and add the Color menu. Then write command and 
update handlers for the new menu items. As with message handlers, you can 
add command and update handlers manually or you can add them 
with ClassWizard's help. Once again, I used ClassWizard.</LI></P>
</OL>
<P>You can add a nice finishing touch by editing the application's icons. 
AppWizard generated two icons when it created the project. IDR_MAINFRAME is the 
application icon&#8212;the one that appears in the frame window's title bar. IDR_SDISQUTYPE is 
the application's <I>document icon</I>, which is used to represent SdiSquares document 
files in the operating system shell. The document icon is registered with the system 
when <I>InitInstance</I> calls
 <I>RegisterShellFileTypes</I>.</P>

</BODY>
</HTML>




