<HTML>
<HEAD>
	<link rel="STYLESHEET" type="text/css" href="Library.css">
<TITLE>A Bare-Bones Printing Application</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch13b.htm", "ch13d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="409"><H1>A Bare-Bones Printing Application</H1></A>

<P>The EZPrint application shown in Figure 13-2 demonstrates the minimum amount of work a document/view application must do to support printing and print previewing.</P> 

<P>
<A HREF="javascript:fullSize('F13MG02x.htm')"> <img src="images/F13MG02.JPG" width=404 height=346 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 13-2.</B> <I>The EZPrint application displaying a print preview.</I><!-- /CAPTION -->
</p>

<P>An EZPrint &quot;document&quot; contains a blue circle 10 centimeters (1,000 units in the MM_LOMETRIC mapping mode) in diameter with a yellow interior. The application's File menu contains just four items: Print, Print Preview, Print Setup, and Exit. The Print and Print Preview commands are mapped to <I>CView::OnFilePrint</I> and <I>CView::OnFilePrintPreview</I> in <I>CEZPrintView</I>'s message map, and the Print Setup command is mapped to <I>CWinApp::OnFilePrintSetup</I> in <I>CEZPrintApp</I>'s message map. AppWizard performed all the message mapping. The Print command displays a Print dialog box in which the user can specify printing options such as the desired printer, the print range, and the number of copies. Print Preview puts the application in print preview mode. Print Setup displays a Print Setup dialog box. You can use the Print Setup dialog box to choose a printer, select a paper size, and specify the page orientation&#8212;portrait or landscape.</P>

<P>I used AppWizard to create the EZPrint project. In the Step 4 dialog box (shown in Figure 13-3), I checked the Printing And Print Preview box to add printing support. Checking this box prompts AppWizard to make three modifications to the code that it generates:</P>

<UL>
<P><LI>Add Print, Print Preview, and Print Setup commands to the File menu.</LI></P>

<P><LI>Modify the message map to connect the Print, Print Preview, and Print Setup commands to MFC-provided command handlers.</LI></P>

<P><LI>Override <I>OnPreparePrinting</I>, <I>OnBeginPrinting</I>, and <I>OnEndPrinting</I> in the view class.</LI></P>
</UL>

<P>AppWizard's <I>OnPreparePrinting</I> function includes a call to <I>DoPreparePrinting</I>. Its <I>OnBeginPrinting</I> and <I>OnEndPrinting</I> functions do nothing, so you can delete them if you don't use them. I left them in, but EZPrint would work just as well without them. All of EZPrint's printing code is found in the view class, whose source code is reproduced in Figure 13-4.</P> 

<P>
<A HREF="javascript:fullSize('F13mg03x.htm')"> <img src="images/F13mg03.JPG" width=404 height=325 border=0 ALT="Click to view at full size."> </A>
</p><p>
<!-- CAPTION --><B>Figure 13-3.</B> <I>Using AppWizard to add printing and print previewing support.</I><!-- /CAPTION -->
</p>

<P>There's not a lot to say about EZPrint's printing and print previewing capabilities other than that MFC does the bulk of the work. <I>CEZPrintView::OnDraw</I> renders all the output, regardless of whether that output is destined for the screen, a printer, or a print preview window. So that the circle will have the same proportions regardless of where it is drawn, <I>OnDraw</I> does all of its drawing using the MM_LOMETRIC mapping mode. That's important, because pixel-per-inch values for screens and printers are rarely the same. If you drew to the screen and the printer in the MM_TEXT mapping mode, the circle would be a lot smaller on a 600 dpi printer than it would be on the screen. To get WYSIWYG results, you'd have to scale the circle's height and width manually during printing and print previewing using ratios derived from pixel-per-inch counts for the screen and printer. Using a mapping mode in which logical units scale to physical distances rather than pixel counts allows the GDI to do the scaling and ensures that <I>OnDraw</I> can produce consistent results no matter where the output is rendered.</P>

<P><B>Figure 13-4.</B> <I>The EZPrint application.</I></P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="410"><H3>EZPrintView.h</H3></A>
<PRE>
// EZPrintView.h : interface of the CEZPrintView class
//
///////////////////////////////////////////////////////////////////////////

#if !defined(
    AFX_EZPRINTVIEW_H__3A83FDED_A3E6_11D2_8E53_006008A82731__INCLUDED_)
#define AFX_EZPRINTVIEW_H__3A83FDED_A3E6_11D2_8E53_006008A82731__INCLUDED_

#if _MSC_VER &gt; 1000
#pragma once
#endif // _MSC_VER &gt; 1000


class CEZPrintView : public CView
{
protected: // create from serialization only
    CEZPrintView();
    DECLARE_DYNCREATE(CEZPrintView)

// Attributes
public:
    CEZPrintDoc* GetDocument();

// Operations
public:

// Overrides
    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CEZPrintView)
    public:
    virtual void OnDraw(CDC* pDC);  // overridden to draw this view


    virtual BOOL PreCreateWindow(CREATESTRUCT&amp; cs);
    protected:
    virtual BOOL OnPreparePrinting(CPrintInfo* pInfo);
    virtual void OnBeginPrinting(CDC* pDC, CPrintInfo* pInfo);
    virtual void OnEndPrinting(CDC* pDC, CPrintInfo* pInfo);
    //}}AFX_VIRTUAL

// Implementation
public:
    virtual ~CEZPrintView();
#ifdef _DEBUG
    virtual void AssertValid() const;
    virtual void Dump(CDumpContext&amp; dc) const;
#endif

protected:

// Generated message map functions
protected:
    //{{AFX_MSG(CEZPrintView)
       // NOTE - the ClassWizard will add and remove member functions here.
       //    DO NOT EDIT what you see in these blocks of generated code !
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

#ifndef _DEBUG  // debug version in EZPrintView.cpp
inline CEZPrintDoc* CEZPrintView::GetDocument()
    { return (CEZPrintDoc*)m_pDocument; }
#endif

///////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations 
// immediately before the previous line.

#endif 
// !defined(
//     AFX_EZPRINTVIEW_H__3A83FDED_A3E6_11D2_8E53_006008A82731__INCLUDED_)
</pre>
</TD></TR></TABLE>
</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<A NAME="411"><H3>EZPrintView.cpp</H3></A>
<PRE>
// EZPrintView.cpp : implementation of the CEZPrintView class
//
#include &quot;stdafx.h&quot;
#include &quot;EZPrint.h&quot;

#include &quot;EZPrintDoc.h&quot;
#include &quot;EZPrintView.h&quot;

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////
// CEZPrintView

IMPLEMENT_DYNCREATE(CEZPrintView, CView)

BEGIN_MESSAGE_MAP(CEZPrintView, CView)
    //{{AFX_MSG_MAP(CEZPrintView)
        // NOTE - the ClassWizard will add and remove mapping macros here.
        //    DO NOT EDIT what you see in these blocks of generated code!
    //}}AFX_MSG_MAP
    // Standard printing commands
    ON_COMMAND(ID_FILE_PRINT, CView::OnFilePrint)
    ON_COMMAND(ID_FILE_PRINT_DIRECT, CView::OnFilePrint)
    ON_COMMAND(ID_FILE_PRINT_PREVIEW, CView::OnFilePrintPreview)
END_MESSAGE_MAP()

///////////////////////////////////////////////////////////////////////////
// CEZPrintView construction/destruction

CEZPrintView::CEZPrintView()
{
}

CEZPrintView::~CEZPrintView()
{
}

BOOL CEZPrintView::PreCreateWindow(CREATESTRUCT&amp; cs)
{
    return CView::PreCreateWindow(cs);
}

///////////////////////////////////////////////////////////////////////////
// CEZPrintView drawing
void CEZPrintView::OnDraw(CDC* pDC)
{
    CPen pen (PS_SOLID, 50, RGB (0, 0, 255));
    CBrush brush (RGB (255, 255, 0));

    pDC-&gt;SetMapMode (MM_LOMETRIC);
    CPen* pOldPen = pDC-&gt;SelectObject (&amp;pen);
    CBrush* pOldBrush = pDC-&gt;SelectObject (&amp;brush);

    pDC-&gt;Ellipse (100, -100, 1100, -1100);

    pDC-&gt;SelectObject (pOldBrush);
    pDC-&gt;SelectObject (pOldPen);
}

///////////////////////////////////////////////////////////////////////////
// CEZPrintView printing

BOOL CEZPrintView::OnPreparePrinting(CPrintInfo* pInfo)
{
    return DoPreparePrinting(pInfo);
}

void CEZPrintView::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
    // TODO: add extra initialization before printing
}

void CEZPrintView::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
    // TODO: add cleanup after printing
}

///////////////////////////////////////////////////////////////////////////
// CEZPrintView diagnostics

#ifdef _DEBUG
void CEZPrintView::AssertValid() const
{
    CView::AssertValid();
}

void CEZPrintView::Dump(CDumpContext&amp; dc) const
{
    CView::Dump(dc);
}


CEZPrintDoc* CEZPrintView::GetDocument() // non-debug version is inline
{
    ASSERT(m_pDocument-&gt;IsKindOf(RUNTIME_CLASS(CEZPrintDoc)));
    return (CEZPrintDoc*)m_pDocument;
}
#endif //_DEBUG

///////////////////////////////////////////////////////////////////////////
// CEZPrintView message handlers
</pre>
</TD></TR></TABLE>
</P>

<A NAME="412"><H2>Black-and-White Print Previews</H2></A>

<P>MFC's print preview support isn't perfect. EZPrint's preview page shows the circle 
in full-blown color even if the only printer attached to your PC is a black-and-white 
model. (Naturally, the circle <I>will</I> be printed in color if you print it on a color printer.) 
You can add a nice touch to your print preview code by doing your rendering in 
shades of gray if both the following conditions are true when 
<I>OnPrint</I> or <I>OnDraw</I> is called:</P>

<UL>
<P><LI><I>pInfo-&gt;m_bPreview </I>is nonzero <I>(OnPrint) </I>or <I>pDC-&gt;m_hDC </I>is not equal to <I>pDC-&gt;m_hAttribDC(OnDraw).</I></LI></P>
<P><LI><I>pDC-&gt;GetDeviceCaps (NUMCOLORS)</I> returns 2, indicating that the printer is a monochrome device.</LI></P>
</UL>

<P>You can convert RGB color values into shades of gray with this formula:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
r/g/b = (red * 0.30) + (green * 0.59) + (blue * 0.11)
</PRE>
</TD></TR></TABLE>
</P>

<P>The following statement creates a gray brush that simulates on the screen how 
yellow (RGB (255, 255, 0)) will look on a monochrome output device:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
CBrush brush (RGB (227, 227, 227));
</PRE>
</TD></TR></TABLE>
</P>

<P>I got the value 227 by plugging the color components 255, 255, and 0 into the color conversion formula.</P>

<P>To see a simple demonstration of black-and-white print previewing, replace the lines</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
CPen pen (PS_SOLID, 50, RGB (0, 0, 255));
CBrush brush (RGB (255, 255, 0));
</PRE>
</TD></TR></TABLE>
</P>

<P>in EZPrint's <I>CPrintView::OnDraw</I> function with these:</P>

<P>
<table valign="top" cellpadding=5 width="95%"><tr><td>
<PRE>
BOOL bMono = (pDC-&gt;GetDeviceCaps (NUMCOLORS) == 2) &amp;&amp;
    (pDC-&gt;m_hDC != pDC-&gt;m_hAttribDC); // True only for preview mode.
CPen pen (PS_SOLID, 50, bMono ? RGB (28, 28, 28) : RGB (0, 0, 255));
CBrush brush (bMono ? RGB (227, 227, 227) : RGB (255, 255, 0));
</PRE>
</TD></TR></TABLE>
</P>

<P>Print previews will now be rendered in shades of gray when the default printer is a black-and-white model. Comparing <I>m_hDC</I> to <I>m_hAttribDC</I> is a sneaky way to detect print preview mode when <I>CPrintInfo</I> information isn't available.</P>

</BODY>
</HTML>




