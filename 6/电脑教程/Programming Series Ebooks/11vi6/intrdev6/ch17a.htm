<HTML>
<HEAD>
	<LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Chapter 17 -- Using Server Components</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch16f.htm", "ch17b.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>


<P>
<FONT SIZE="+3">Chapter 17</FONT>

</P>
<A NAME="304"><H1>Using Server Components</H1></A>
<P>In this section of the book, we'll be covering how to develop n-tier 
architectures using Microsoft Visual InterDev 6.0 and other products in the 
Microsoft Visual Studio 6.0 and Microsoft BackOffice Server 4.0 product suite. Over 
the next six chapters, we'll take a look at:

</P>
<UL>
<P><LI>The prebuilt, server-side components available in the Visual InterDev Toolbox
</LI>
</P>
<P><LI>How to use Microsoft Visual Basic 6.0 to construct your own server-side components
</LI>
</P>
<P><LI>How to work with transactional Active Server Pages (ASP) Web pages
</LI>
</P>
<P><LI>How to use Visual Basic 6.0 to construct transactional server-side components
</LI>
</P>
<P><LI>How to use Microsoft Message Queue (MSMQ) within your Web applications
</LI></P>
</UL>

<P>Of course, we'll also be taking a look at how to use Microsoft 
Transaction Server (MTS) for managing the transactional components that we create 
with Visual Basic 6.0.

</P>
<P>We'll start off this section by covering some of the basics 
regarding Microsoft's framework for the development of n-tier applications. When we 
say &quot;building n-tier applications,&quot; we really mean creating distributed, 
component-based applications that extend the scalability, performance, security, 
reliability, manageability, and maintainability of personal computer_based client/server 
and Internet applications. As Microsoft Windows NT makes significant advances 
into enterprise computing and is used as a strategic platform for 
business-critical applications, these types of architecture become increasingly important. 
This distributed computing architecture also enables Microsoft technologies to 
compete effectively. Of course, in the rapidly moving business and technology 
landscape, the products that deliver the simplest approach, the fastest results, 
the best interoperability and integration, and the lowest total cost of ownership 
often win. It's far more productive for developers to be able to concentrate on 
the business specifics of their applications than to have to become systems 
integrators and learn the complexities of object models and the like. Microsoft 
development tools and products do an excellent job of shielding developers 
from these types of complexities so that they can concentrate on what's 
important&#8212;delivering timely and highly functional applications to support their 
organizations' business objectives.

</P>
<P>One advantage of an n-tier architecture is that the business logic is 
separated from the presentation layer. This simplifies application maintenance 
because business rules can be changed more easily without having to rework 
the presentation layer. It also means that business rules are encapsulated 
within server-side components instead of being scattered (often redundantly) 
throughout the presentation layer. By moving the business rules to a middle tier, 
they can also be reused across multiple applications and often across multiple 
delivery channels, including browser, personal computer, hand-held PC, 
WebTV, kiosk, and others.

</P>
<A NAME="305"><H2>Windows DNA</H2></A><P>Windows Distributed interNet Applications Architecture (Windows DNA) 
is Microsoft's framework for building a new generation of computing solutions 
that brings together personal computing and the Internet. This framework is the 
basis for Microsoft's Web architecture for the next three to five years. Microsoft 
is delivering on this framework in three phases over this time frame. The first 
phase is available now in products such as Visual Studio 6.0, Windows NT 4.0 
Server and Workstation, Microsoft Internet Information Server (IIS) 4.0, and 
Microsoft Internet Explorer 4.0. Windows NT 5.0 and then COM+ will take developers 
and end users into the next generation of Windows DNA by making it even 
easier to create and manage distributed applications.

</P>
<P>These guiding principles outline the goal of Windows DNA:

</P>
<UL>
<P><LI>Web computing without compromise
</LI>
</P>
<P><LI>Interoperability
</LI>
</P>
<P><LI>True integration
</LI>
</P>
<P><LI>Lower cost of ownership
</LI>
</P>
<P><LI>Faster time to market
</LI></P>
</UL>


<P>Once again, these principles make sound business sense. Developers 
are empowered to focus their efforts on delivering applications without 
worrying about the system integration aspects.

</P>
<P>Windows DNA is comprised of a standard set of Microsoft 
Windows-based services that support user interface and navigation, business processes, and 
data storage. These services are distributed application services, distributed 
infrastructure services, and common interfaces. Table 17-1 shows the services 
supported by Windows DNA and the product mappings.

</P>
<P><B>Table 17-1.</B> <I>Windows DNA services and product mappings.</I> 

<TABLE CELLPADDING=5 WIDTH="95%">
<TR>
<TH VALIGN="TOP"><B><I>Service</I></B></TH>
<TH VALIGN="TOP"><B><I>Interface</I></B></TH>
<TH VALIGN="TOP"><B><I>Product Mapping</I></B></TH>
</TR>

<TR>
<TD COLSPAN="3" VALIGN="TOP"><I>Application services</I></TD>
</TR>

<TR>
<TD VALIGN="TOP">Web server</TD>
<TD VALIGN="TOP">HTML</TD>
<TD VALIGN="TOP">Internet Information Server (IIS)</TD>
</TR>

<TR>
<TD VALIGN="TOP">Web browser</TD>
<TD VALIGN="TOP">HTML</TD>
<TD VALIGN="TOP">Internet Explorer</TD>
</TR>

<TR>
<TD VALIGN="TOP">Scripting</TD>
<TD VALIGN="TOP">VBScript, JScript&#8482;</TD>
<TD VALIGN="TOP">&quot;Denali,&quot; Dynamic HTML</TD>
</TR>

<TR>
<TD VALIGN="TOP">Transaction service</TD>
<TD VALIGN="TOP">OLE Transactions</TD>
<TD VALIGN="TOP">MTS</TD>
</TR>

<TR>
<TD VALIGN="TOP">Message queuing service</TD>
<TD VALIGN="TOP">&quot;Falcon&quot; API</TD>
<TD VALIGN="TOP">MMQS</TD>
</TR>

<TR>
<TD VALIGN="TOP">Database</TD>
<TD VALIGN="TOP">ODBC, OLE DB</TD>
<TD VALIGN="TOP">Microsoft SQL Server</TD>
</TR>
     
<TR>
<TD VALIGN="TOP">Mail and collaboration Server</TD>
<TD VALIGN="TOP">MAPI, POP3</TD>
<TD VALIGN="TOP">Microsoft Outlook, Microsoft Exchange</TD>
</TR>

<TR>
<TD VALIGN="TOP">Java virtual machine</TD>
<TD VALIGN="TOP">Java</TD>
<TD VALIGN="TOP">Microsoft Java virtual machine</TD>
</TR>

<TR>
<TD VALIGN="TOP">Universal data access</TD>
<TD VALIGN="TOP">ADO, OLE DB, ODBC</TD>
<TD VALIGN="TOP">Various</TD>
</TR>

<TR>
<TD COLSPAN="3" VALIGN="TOP"><I>Infrastructure services</I></TD>
</TR>

<TR>
<TD VALIGN="TOP">Directory</TD>
<TD VALIGN="TOP">ADSI</TD>
<TD VALIGN="TOP">Active Directory, Windows NT Server</TD>
</TR>
       
<TR>
<TD VALIGN="TOP">Security</TD>
<TD VALIGN="TOP">SSL</TD>
<TD VALIGN="TOP">Windows NT Server, Internet Explorer</TD>
</TR>
       
<TR>
<TD VALIGN="TOP">Network</TD>
<TD VALIGN="TOP">TCP/IP, pipes, WinSock, etc.</TD>
<TD VALIGN="TOP">Windows family</TD>
</TR>

<TR>
<TD VALIGN="TOP">Remote file and print</TD>
<TD VALIGN="TOP">CIFS, SMB</TD>
<TD VALIGN="TOP">Windows family</TD>
</TR>

<TR>
<TD VALIGN="TOP">Components</TD>
<TD VALIGN="TOP">COM, DCOM, Microsoft ActiveX</TD>
<TD VALIGN="TOP">Windows family</TD>
</TR>
</TABLE>

</P>
<P>Figure 17-1 shows the Windows DNA services and how they fit in with COM.

</P>
<P>
<A HREF="javascript:fullSize('f17lh01x.htm')"> <IMG SRC="images/f17lh01.jpg" width=404 height=239 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 17-1.</B> <I> Windows DNA services.</I><!-- /CAPTION -->

</P>
<P>Windows DNA's support for legacy integration allows organizations 
to leverage existing infrastructure investments. Microsoft's Cedar technology 
allows bidirectional access to transaction systems such as CICS, as well as legacy 
data sources, including DB2/MVS, IMS, and VSAM. Cedar also enables legacy 
applications to be Web-enabled via IIS. Visual InterDev developers can 
therefore create Web applications that can truly reach into the organization and pull 
out data wherever it may reside. 

</P>
<A NAME="306"><H2>COM+</H2></A><P>COM+ will arrive in the third phase of the Windows DNA evolution. 
COM+ makes it even easier for developers to build and reuse components. It 
preserves the investments in code and skill sets that organizations have made in 
COM, and places more of the infrastructure into the system. Thus developers 
can concentrate on higher-level business functionality rather than the 
low-level services to support that functionality.

</P>
<P>COM+ defines a simpler and more robust model for registering, 
installing, and versioning components than its predecessor. It also introduces a 
new extensibility mechanism called &quot;interception.&quot; Interceptors can receive 
and process events related to instance creation, calls and returns, errors, and 
instance deletion. 

</P>
<P>You can expect to hear a lot more about COM+ in the coming months 
as Windows DNA evolves.

</P>
</BODY>
</HTML>




