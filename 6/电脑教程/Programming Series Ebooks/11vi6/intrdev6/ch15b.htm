<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Stored Procedure Basics</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15a.htm", "ch15c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="275"><H1>Stored Procedure Basics</H1></A>
<P>A stored procedure is a precompiled collection of SQL statements that can 
take and/or return user-supplied parameters. You can place any number of 
SQL statements into a stored procedure. Also, stored procedures can be nested,
up to 16 levels deep, so that one procedure can call another. Stored 
procedures are also available to triggers within your database.

</P>
<A NAME="276"><H2>Benefits of Stored Procedures</H2></A><P>The main benefit of stored procedures is their performance. Stored 
procedures are simply the fastest way to execute your data-driven code. This is because 
the SQL statements are precompiled and stored in memory on the database 
server. It's much faster to encompass all your database processing logic into a 
stored procedure and have a single round-trip from the browser to the server and 
back than to have lots of database calls that place traffic on the network. In the 
client/server days, there was typically much traffic between the client machine 
and the database. In the Web world, this traffic is more often seen between the 
Web server (perhaps executing Web pages) and the database.

</P>
<P>Stored procedures can be used as a form of security. For example, 
users can be given access to the data via stored procedures only and not directly 
to the tables in the database. This helps ensure that users cannot perform 
restricted operations on the data. All their database access has to go through the 
stored procedures, which have predefined operations.

</P>
<P>Stored procedures are also objects. In this way, you can consider 
them components that you can use to package some of your business logic. 
Other applications can then reuse this business logic, which can help speed 
development and promote reuse across an organization.

</P>
<A NAME="277"><H2>Stored Procedure Syntax</H2></A><P>Stored procedures can be created using the <I>CREATE 
PROCEDURE</I> syntax in SQL Server. The full syntax is
</P>
<P><PRE>
CREATE PROCEDURE [<I>owner</I>.]<I>procedure_name</I>[;<I>number</I>]
    [(<I>parameter1</I> [, <I>parameter2</I>]&#8230;[<I>parameter255</I>])]
[{FOR REPLICATION} | {WITH RECOMPILE}
    [{[WITH] | [,]} ENCRYPTION]]
AS <I>sql_statements</I>
</PRE>

</P>
<P>where

</P>
<UL>
<P><LI><I>procedure_name</I> is the name of the new stored procedure
</LI>
</P>
<P><LI><I>;number</I> is an optional integer used to group procedures of the 
same name so that they can be dropped together with a single 
DROP PROCEDURE statement
</LI>
</P>
<LI><P><I>parameter</I> has the form 

</P>
<P><PRE>
         @<I>parameter_name datatype </I> [= <I>default</I>][OUTPUT]
</PRE>
</P>
<P>    where
</P>
<UL>


<P><LI><I>parameter</I> specifies a parameter in the procedure

</LI>
</P>
<P><LI><I>datatype</I> specifies the datatype of the parameter

</LI>
</P>
<P><LI><I>default</I> specifies a default value for the parameter

</LI>
</P>
<P><LI>OUTPUT indicates the parameter is a return parameter

</LI></P>
</UL>


</LI>

<P><LI><I>sql_statements</I> specifies the actions that the procedure is to 
take. Any number and type of SQL statements can be included in the procedure
</LI></P>
</UL>




<P>In addition to creating stored procedures, you might also want to 
rename them or drop them from the database. To rename a stored procedure 
within SQL Server, use the <I>sp_rename</I> system stored procedure as follows:
</P>
<P><PRE>
sp_rename <I>old_procedure_name, new_procedure_name</I>
</PRE>

</P>
<P>To drop a stored procedure within SQL Server, you use the DROP 
PROCEDURE statement as follows:
</P>
<P><PRE>
DROP PROCEDURE <I>procedure_name</I>
</PRE>

</P>
<P>Both of these commands can be executed either from the SQL 
Enterprise Manager (part of SQL Server) or from the SQL pane within Visual InterDev. 
If you are using the SQL Enterprise Manager, you can choose the SQL Query 
Tool by choosing SQL Query Tool from the Tools menu.

</P>
<P>Another system stored procedure within SQL Server that you might 
find useful is the <I>sp_help</I> stored procedure. This procedure will give you a 
report on a stored procedure, including the name and owner of the stored 
procedure along with the parameter names, data types, lengths, and precisions of 
any parameters that the stored procedure has defined. You call the 
<I>sp_help</I> stored procedure as follows:
</P>
<P><PRE>
sp_help <I>procedure_name</I>
</PRE>

</P>
<P><div class="note"><blockquote>
<B>Note</B><hr>Within Visual InterDev, you can find most of this information 
by simply expanding the plus sign (+) next to the stored procedure in the 
Data View window. This will open up a listing of all the parameters, 
including resultset columns, that are contained in the stored procedure. You can 
then view the properties of these parameters by right-clicking the relevant 
parameter and choosing Properties from the context menu.
</blockquote></div>

</P>
<P>Here's a few rules to bear in mind when creating stored procedures. 
These rules apply to SQL Server 6.5 databases only.

</P>
<UL>
<P><LI>The CREATE PROCEDURE definition can include any number 
and type of SQL statements, with the exception of the following: 
CREATE VIEW, CREATE DEFAULT, CREATE RULE, CREATE 
TRIGGER, and CREATE PROCEDURE.
</LI>
</P>
<P><LI>You can create other database objects within a stored procedure 
as long as they are created before they are referenced in the procedure.
</LI>
</P>
<P><LI>The maximum number of parameters in a stored procedure is 255.
</LI>
</P>
<P><LI>The maximum number of local and global variables in a 
procedure is limited only by available memory.
</LI>
</P>
<P><LI>You can reference temporary tables within a stored procedure.
</LI></P>
</UL>




</BODY>
</HTML>




