<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Developing Multitier Applications with ActiveX Server Components</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch01f.htm", "ch01h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="18"><H1>Developing Multitier Applications with ActiveX Server Components</H1></A>
<P>The Active Server framework allows Web applications to extend 
server-side functionality with custom or third-party components called ActiveX server 
components. ActiveX server components are OLE Automation Servers that 
support COM. Visual InterDev and ActiveX server components enable you to 
easily create multitier Web applications that include components that 
encapsulate specific processing logic. For example, a component that provides financial 
modeling and analysis functions can be used to build portions of a financial 
services Web application.

</P>
<P>Using Visual InterDev, you can create ASP Web pages that execute 
the ActiveX component on the Web server and use its functions to return 
financial modeling information to users in dynamically constructed HTML pages. 
Because the component executes on the server, the content can be viewed on any 
platform by any browser. ActiveX server components can be integrated into 
Web applications using either server-side VBScript or server-side JScript. 
ActiveX server components can be created in any programming language that 
supports COM, such as C, C++, COBOL, Pascal (Delphi), Java, and Visual Basic.

</P>
<A NAME="19"><H2>Extending Visual InterDev Applications</H2></A>
<P>ActiveX server components are an extremely important feature of Visual 
InterDev. ActiveX server components need not be constrained by the safety 
restrictions imposed by VBScript and JScript because they execute on a 
controlled server as opposed to on users' desktops. They can thus be used to extend 
Active Server scripting with capabilities such as direct access to the file system 
and access to machine and network resources. As COM components, they can 
be driven by VBScript and JScript and they can execute as either in-process 
dynamic-link libraries (DLLs) or out-of-process executables.

</P>
<P>For lightweight components designed as in-process DLLs, performance 
can be dramatically improved over CGI solutions. This is because no context 
switching between processes is incurred as Web users browse pages that use 
the component. In addition, ActiveX server components can be instantiated 
once and shared between all users connected to the Web site for more efficient 
use of server resources.

</P>
<A NAME="20"><H2>Integrating Legacy Systems into Web Applications</H2></A>
<P>ActiveX server components provide a convenient and effective way to 
tightly integrate a Web application with internal and legacy systems. Components 
can be used to wrap existing business functionality created in Visual Basic, C, 
C++, COBOL, Java, or other tools, exposing that functionality via COM. For 
example, a client-server insurance processing application written in Visual Basic can 
be exposed as a set of ActiveX components that can be called directly from 
Web pages via Active Server scripting. In this fashion, Visual InterDev and the 
Active Server framework help protect and extend an organization's investment 
in existing tools and systems, ranging from mainframe applications to more 
recently deployed client-server applications. Visual InterDev can be used to 
effectively integrate the functionality of these systems directly into the Web site via 
ActiveX server components.

</P>
<A NAME="21"><H2>Distributing ActiveX Server Components Using DCOM</H2></A>
<P>Because ActiveX Server Components are COM objects, out-of-process 
server components can be seamlessly distributed over a server network using 
DCOM. This means that components requiring a lot of processing can be 
distributed to application servers that work with the Web server to efficiently process 
requests from users browsing the site. For example, a price look-up 
component that performs complex pricing calculations can be built as an ActiveX 
Server Component and distributed via DCOM to execute on a specialized 
application server.

</P>
<P>Figure 1-4 demonstrates how DCOM can be used in large installations 
to add flexibility and power to your Web site.

</P>
<P><A HREF="javascript:fullSize('F01lh04x.htm')"> <IMG SRC="images/F01lh04.JPG" width=404 height=338 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 1-4.</B> <I>Visual InterDev lets corporations take advantage of 
distributed ActiveX components via DCOM.</I><!-- /CAPTION -->

</P>
<P>The advantage of DCOM is that distributed computing is achieved 
with transparency. Because DCOM provides complete network transparency, you 
can program DCOM components using the same scripting logic as if the 
components were running locally on the Web server. Thus, DCOM components 
can provide greater scalability and fault tolerance for mission-critical Web 
applications. Also, distributed solutions built with DCOM components and Visual 
InterDev offer more effective load balancing and the ability to create 
higher-performance applications for enterprise-class Web applications. You can also use 
Microsoft Transaction Server technology to provide online transaction processing 
(OLTP) and monitoring capabilities to Web applications built using distributed 
DCOM components. 

</P>
<P>You can also use Microsoft Message Queue Server (MSMQ) to build 
powerful features into your Web applications. MSMQ is a middleware 
application that provides asynchronous messaging services between application components.

</P>
</BODY>
</HTML>




