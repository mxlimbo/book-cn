<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Accessing Methods and Properties on Other Pages</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04e.htm", "ch05a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="88"><H1>Accessing Methods and Properties on Other Pages</H1></A>
<P>Now that we have created page methods and properties by using the 
PageObject DTC, we can access those methods and properties from another page, 
either in server script or client script. To use the properties or methods of another 
page, you must create a reference from the current page to the page that contains 
the PageObject DTC and the methods and properties that we want to use. 
This process is similar to creating a reference to a Microsoft ActiveX 
component&#8212;we are telling the application where the other component/page is located. 
The following steps show you how to create a reference to another page 
containing a PageObject DTC:

</P>
<OL>
<P><LI>Open the ASP file that will use properties or methods of another 
page in the code editor. The page must contain a PageObject DTC.

</LI>
</P>
<P><LI>Display the PageObject DTC's Properties dialog box by 
right-clicking the DTC and selecting Properties from the context menu.

</LI>
</P>
<P><LI>Click the References tab. This will display the property page 
shown in Figure 4-10.

</LI>
</P>
<P><LI>Enter the name of the PageObject DTC you want to reference in 
the Name column. You can click the &#8230; button beside the Name 
space to display the Create URL dialog box shown in Figure 4-11. 
Using this dialog box, you can point to the page you want to 
reference, and Visual InterDev will insert the PageObject DTC name.
</LI>
</P>
</OL>




<P>
<IMG SRC="images/F04lh10.GIF" width=401 height=313 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 4-10.</B> <I>The PageObject DTC must have a reference to other pages that your application will use as objects.</I><!-- /CAPTION -->

</P>
<P>The Client and Server columns in Figure 4-10 control whether the 
page properties and methods can be accessed from either client or server script. 
The default is to allow access by both. You can also set these properties per 
page, allowing you to have certain pages that can be used by client and server 
script and others that can be used by only one or the other.

</P>
<P>The Create URL dialog box shown in Figure 4-11 assists you in 
preparing the reference to the correct PageObject DTC.

</P>
<P>
<A HREF="javascript:fullSize('F04lh11x.htm')"> <IMG SRC="images/F04lh11.JPG" width=404 height=349 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 4-11.</B> <I>You can use the Create URL dialog box to search for the page and create the reference.</I><!-- /CAPTION -->

</P>
<P>You can set other properties on the Create URL dialog box to control 
what happens when a property or method on the page is fired or when the page 
is navigated to. These properties are useful for controlling the various actions 
you take in the referenced page. For instance, you can use the Parameters field 
to add parameters to the URL that is generated for the page. 

</P>
<P>Now that you have a reference to the page containing the methods 
and properties, you can use them in your application. For this example, the 
following code is contained in the file ASP Page7.asp. The 
<I>OrderNumber</I> property and the 
<I>TotalInventory</I> method are contained in the ASP Page4.asp file. You 
can access both the property and the method by using the following syntax:

</P>
<P><PRE>
&lt;%
    ASP_Page4.setOrderNumber = &quot;98-001&quot;
    ASP_Page4.navigate.TotalInventory(&quot;10&quot;)
%&gt;
</PRE>

</P>
<P>I used the <I>navigate</I> method in this example because the method I 
want to use (that is, <I>TotalInventory</I>) is exported as a Navigate method. Figure 
4-12 shows a portion of the editor with this code and the IntelliSense display for 
the remote page. To use either the <I>navigate</I> or 
<I>execute</I> method, you should use IntelliSense to display the object and methods for you. Then you can type 
either <I>navigate</I> or <I>execute</I> and then select the appropriate method from the 
IntelliSense list. This will ensure that you have both the correct method of execution 
and the correct syntax.

</P>
<P>
<IMG SRC="images/F04lh12.gif" width=358 height=110 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 4-12.</B> <I>The IntelliSense list for the ASP Page4.asp page.</I><!-- /CAPTION -->

</P>
<A NAME="89"><H2>PageObject Methods and Properties</H2></A><P>The PageObject run-time scripting object that underlies the PageObject DTC 
has several methods and properties that are useful in applications. These 
properties and methods can be used for various purposes in your application. 

</P>
<P>What's going on behind the scenes when you use the Scripting 
Object Model? When you insert a DTC on a page or enable the SOM for a page, 
Visual InterDev inserts the following code at the start of the file:

</P>
<P><PRE>
&lt;%@ Language=VBScript %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt; 
</PRE>

</P>
<P>This code calls the <I>StartPageProcessing</I> routine in the pm.asp file. 
<I>StartPageProcessing</I> performs the startup activities for the page, including the creation 
of the page object <I>thisPage</I>. You can access 
<I>thisPage</I>'s events, methods, and properties for your own purposes. For instance, later in the chapter when we 
cancel the server processing, we'll cancel the action with 
<I>thisPage.cancelEvent = True</I>.

</P>
<P>The <I>thisPage</I> page object also contains the 
<I>firstEntered</I> property, which can be used to determine whether a user is visiting a page with a browser 
or whether the page is being executed as the result of some type of posting 
action. This is handy when you are referencing a page repeatedly and want to 
determine when the user is coming to the page for the first time so that you can 
set the initial state of the page by setting its variables and properties. You do 
not need to do this with your own code by setting Session variables; instead, 
you can check the <I>firstEntered</I> property, and if it is True, the user has just 
entered that page via a browser.

</P>
<P>The startup code also creates an HTML form and names it 
<I>thisForm</I>. You can access this form directly in your code. When you want to access an 
HTML field on a page that is in another form, you can use this syntax: 
<I>document.thisForm.fieldname</I>. 

</P>
<P>Figure 4-13 shows the Script Outline window and the file ASP 
Page6.asp with an empty <I>thisPage_onenter</I> event handler. I created this event handler 
by opening the Server Objects &amp; Events folder in the Script Outline window, 
clicking the plus sign beside <I>thisPage</I> to open it, and then double-clicking 
onenter to insert an empty <I>thisPage_onenter</I> event in ASP Page6.asp.

</P>
<P>
<A HREF="javascript:fullSize('F04lh13x.htm')"> <IMG SRC="images/F04lh13.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 4-13.</B> <I>The Script Outline window is the easiest way to insert any type of script events into a file.</I><!-- /CAPTION -->

</P>
<P>Now that we have the <I>onenter</I> event handler, we can use the 
PageObject object to determine how the user entered the page. Figure 4-14 
demonstrates how <I>onenter</I> and the 
<I>firstEntered</I> property work. I added the code shown 
in Figure 4-14 to the <I>onenter</I> event from Figure 4-13. Then I started the page in 
debug mode to track the execution of the code. You can see how the cursor 
has stopped on the <I>Company = </I>&quot;&quot; line. This is the section of code that is 
executed when the user first enters the page.

</P>
<P>
<A HREF="javascript:fullSize('F04lh14x.htm')"> <IMG SRC="images/F04lh14.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 4-14.</B> <I>The debug features of Visual InterDev 6 make it easy to understand how the various parts of your application are executing. This figure demonstrates how the </I>firstEntered<I> property is used.</I><!-- /CAPTION -->

</P>
<P>You can also use the <I>location</I> property to obtain the URL of the current page:

</P>
<P><PRE>
&lt;%
    Response.Write &quot;URL: &quot; &amp; thisPage.location
%&gt;
</PRE>

</P>
<P>The <I>thisPage</I> object also provides the 
<I>onbeforeserverevent</I> event, which is fired before posting a page for server processing. You can use this event 
to check values and other tasks that must occur before the page is sent back 
to the server. The <I>onbeforeserverevent</I> event is fired in the client before the 
server event executes. You can take advantage of your client script to check 
values and such before allowing the server event to execute. 

</P>
<P><PRE>
&lt;SCRIPT ID=clientEventHandlersJS LANGUAGE=javascript&gt;
&lt;!--

function ASP_Page9_onbeforeserverevent() {
    alert(document.thisForm.txtNumber.value)
    if (document.thisForm.txtNumber.value == &quot;&quot;) 
        thisPage.cancelEvent = true;
}

//--&gt;
&lt;/SCRIPT&gt;
</PRE>

</P>
<P>This JScript code runs in the client browser and executes before any 
server events. The first line in the event code displays the value from the HTML 
text box <I>txtNumber</I>. Then the <I>if</I> statement checks the value&#8212;if it is zero, it 
cancels the server processing by setting the 
<I>cancelEvent</I> property of <I>thisPage</I>. The 
result is the cancellation of a needless round-trip to the server.

</P>
<A NAME="90"><H2>Working with the Scripting Object Model</H2></A><P>As you have seen in this chapter, the Scripting Object Model adds a 
powerful set of capabilities to the Web development environment. You can perform 
all types of tasks, work with objects, and use object syntax with pages.

</P>
<P>The Script Outline window is a key feature of this object environment: 
it shows a list of all the scriptable objects on the page along with the events 
that you can use to script against. The Script Outline window displays the 
objects in a page only when you have a page containing script open in the code editor.

</P>
<P>The Script Outline window contains both client and server objects. 
You can see some objects that show up in both categories. For instance, 
<I>thisPage</I> will show as both a server object and a client object. Although it shows up 
in both client and server, the events that are available for 
<I>thisPage</I> are specific to one or the other. You saw this earlier when we used the 
<I>onenter</I> event in server script and the 
<I>onbeforeserverevent</I> event for client script. You should use the 
Script Outline window and the IntelliSense command completion feature 
wherever possible to cut down on the introduction of possible bugs in your applications.

</P>
<P>You can now use command completion in script in HTML and ASP 
files as mentioned in the last paragraph. To use command completion, type the 
first part of the name for an object and press Ctrl+Space. This will drop the 
IntelliSense list. You can also display the IntelliSense list at any time by pressing 
Ctrl+J.
</P>
</BODY>
</HTML>




