<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>ASP Transaction Basics</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19d.htm", "ch19f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="355"><H1>ASP Transaction Basics</H1></A>
<P>As mentioned earlier, to have ASP take advantage of the reliability provided 
by MTS services, you need to include only the @TRANSACTION directive in 
your script. This directive tells MTS that any changes that occur in that 
page&#8212;such as database manipulation or Microsoft Message Queue Server (MSMQ) 
message transmission&#8212;should be considered transactions. A change that is being 
managed by transaction services can be either committed, making it more or 
less permanent, or aborted, which would result in rolling back to the state of 
the database or queue before the changes were made.

</P>
<P>The code in Figure 19-2 shows a simple example of how to add 
transactional behavior to your ASP Web pages. The code starts with the 
@TRANSACTION directive. This must be the first line of code within the ASP Web page or an 
error will be generated. The transaction attributes that are available are shown 
in Table 19-2.

</P>
<P><B>Figure 19-2.</B> <I>ASP code showing the @TRANSACTION directive 
to declare an ASP script as transactional.</I>

</P>
<P><PRE>&lt;% @TRANSACTION=Required LANGUAGE=&quot;VBScript&quot; %&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;
&lt;TITLE&gt;Simple Transactional ASP Page&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR=&quot;White&quot; topmargin=&quot;10&quot; leftmargin=&quot;10&quot;&gt;

&lt;h2&gt;&lt;font color=&quot;navy&quot;&gt;Simple Transactional ASP Page&lt;/font&gt;&lt;/h2&gt;
&lt;hr&gt;

This is a simple example demonstrating the basic
structure of a transactional ASP Page. 

&lt;/BODY&gt;
&lt;/HTML&gt;
&lt;%
' The Transacted Script Commit Handler. This sub-routine
' will be called if the transacted script commits.
' Note that in the example above, there is no way for the
' script not to commit.

Sub OnTransactionCommit()
    Response.Write &quot;&lt;p&gt;&lt;b&gt;The Transaction just committed&lt;/b&gt;.&quot; 
    Response.Write &quot;&lt;br&gt;This message came from the &quot;
    Response.Write &quot;OnTransactionCommit() event handler.&quot;
End Sub


' The Transacted Script Abort Handler. This sub-routine
' will be called if the transacted script aborts.
' Note that in the example above, there is no way for the
' script not to commit.

Sub OnTransactionAbort()
    Response.Write &quot;&lt;p&gt;&lt;b&gt;The Transaction just aborted&lt;/b&gt;.&quot; 
    Response.Write &quot;&lt;br&gt;This message came from the &quot;
    Response.Write &quot;OnTransactionAbort() event handler.&quot;
End Sub
%&gt;
</PRE>
<P>
<B>Table 19-2.</B> <I>Transaction attributes for the @TRANSACTION directive in ASP Web pages.</I>
</P>

<table width="95%" cellpadding="5" valign="top">
<tr> 
<th valign="top"><b><i>Value</i></b></th>     
<th valign="top"><b><i>Meaning</i></b></th>
</tr><tr>
<td valign="top"><b>Requires_New</b></td>
<td valign="top">Starts a new transaction</td>
</tr><tr>
<td valign="top"><B>Required</B></td>
<td valign="top">Starts a new transaction</td>
</tr><tr>
<td valign="top"><B>Supported</B></td>
<td valign="top">Does not start a transaction</td>
</tr><tr>
<td valign="top"><B>Not_Supported</B></td>
<td valign="top">Does not start a transaction</td>
</tr></table>

</P>
<P>
The code in Figure 19-2 specifies that a transaction is required, so a 
new transaction is started for the page. You'll also notice two subroutines within 
the page. These are the event handlers for the 
<I>OnTransactionCommit</I> and 
<I>OnTransactionAbort</I> events for the 
<I>ObjectContext</I> object. They provide a way to 
trap the event and take an appropriate action. In this example, the event 
handlers merely print a message to the browser (standard output) stating the success 
or failure of the transaction. Of course, in this example, there is no way for 
the script not to commit. The listing is included on the companion CD-ROM as 
the asp_trans.asp file within the VI-Bank/VIntDev98 folder of the VI-Bank 
sample Web project. Figure 19-3 shows the resulting output after the code has been 
run within the browser.
</P>
<P>
<A HREF="javascript:fullSize('f19lh03x.htm')"> <IMG SRC="images/F19LH03.JPG" width=404 height=277 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 19-3.</B> <I>The browser output resulting from running the code shown in Figure 19-2.</I><!-- /CAPTION -->

</P>
<P>Just to prove to yourself that the ASP Web page listed above was truly 
included as a transaction, try pulling up the Transaction Server Explorer 
application. Access this program group by choosing Start|Programs|Windows NT 
4.0 Option Pack|Microsoft Transaction Server|Transaction Server Explorer from 
the task bar. After you have started Transaction Server Explorer, choose 
Transaction Statistics from the left pane. Each time you run the ASP example, 
you'll see the Committed and Total counters in the Aggregate section increase 
by one. Figure 19-4 shows the Transaction Server Explorer window.

</P>
<P>You'll notice in Figure 19-4 that the Transaction Server Explorer also 
shows you the minimum, average, and maximum response times for the 
transactions. The response time is the duration of the transaction in milliseconds from 
the moment it begins to the moment when it is committed. It does not count 
transactions that are aborted. Looking at the transaction statistics is a good way 
to monitor how quickly your transactions are executing. It's worth allowing 
as many transactions to occur as possible before you start looking at the 
response times in order to determine performance data. This will give you better 
statistical results. After 50 to 100 transactions, you should start to get a clear 
picture of the average MTS performance for your particular applications.

</P>
<P>
<A HREF="javascript:fullSize('f19lh04x.htm')"> <IMG SRC="images/F19LH04.JPG" width=404 height=263 ALIGN="BOTTOM" ALT="Click to view at full size." BORDER=0></A>
</P>
<P>
<!-- CAPTION --><B>Figure 19-4.</B> <I>The Transaction Server Explorer showing the total number of committed and aborted transactions.</I><!-- /CAPTION -->

</P>
<P>To give an example of how you might use the event handlers in real 
life, suppose your transaction aborted for some reason. Now MTS is capable of 
only rolling back changes made to the database. It does not roll back changes to 
files on your hard disk, ASP session and application variables, and so on. The 
<I>OnTransactionAbort</I> event handler would be an ideal place to roll back these types 
of changes.

</P>
<P>You can also explicitly commit or roll back transactions using the 
<I>SetCommit</I> or <I>SetAbort</I> methods of the 
<I>ObjectContext</I> object. Therefore, a transaction is committed when either the script has successfully completed or 
the <I>ObjectContext.SetComplete</I> method has been called. Likewise, the 
transaction is aborted when the script either encounters some kind of processing error, 
the script times out, or the 
<I>ObjectContext.SetAbort</I> method has been called. The 
code in Figure 19-5 illustrates all of these scenarios.

</P>
<P><B>Figure 19-5.</B> <I>ASP code (asp_trans_demo.asp) illustrating four different 
processing scenarios for transactional ASP.</I>

</P>
<P><PRE>&lt;%@ TRANSACTION=Required LANGUAGE=&quot;VBScript&quot; %&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;!--#include file=&quot;_ScriptLibrary/pm.asp&quot;--&gt;
&lt;% if StartPageProcessing() Then Response.End() %&gt;
&lt;FORM name=thisForm METHOD=post&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Simple Transactional Web Page using ASP&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;white&quot; topmargin=&quot;10&quot; leftmargin=&quot;10&quot; &gt;

&lt;h2&gt;&lt;font color=&quot;navy&quot;&gt;
Simple Transactional Web Page Using ASP
&lt;/font&gt;&lt;/h2&gt;
&lt;hr&gt;

&lt;FORM METHOD=post ACTION=&quot;asp_transaction.asp&quot;&gt;
&lt;table cellpadding=&quot;5&quot;, cellspacing=&quot;5&quot;&gt;
&lt;tr&gt;
&lt;td&gt;

&lt;!-- Radiobutton Design-Time Control --&gt;
&lt;!--METADATA TYPE=&quot;DesignerControl&quot; startspan
&lt;OBJECT classid=&quot;clsid:B5F0E45D-DC5F-11D0-9846-0000F8027CA0&quot; 
    height=39 id=TransactionGroup 
    style=&quot;HEIGHT: 39px; LEFT: 0px; TOP: 0px; 
    WIDTH: 102px&quot; width=102&gt;
    &lt;PARAM NAME=&quot;_ExtentX&quot; VALUE=&quot;3254&quot;&gt;
    &lt;PARAM NAME=&quot;_ExtentY&quot; VALUE=&quot;1693&quot;&gt;
    &lt;PARAM NAME=&quot;id&quot; VALUE=&quot;TransactionGroup&quot;&gt;
    &lt;PARAM NAME=&quot;DataSource&quot; VALUE=&quot;&quot;&gt;
    &lt;PARAM NAME=&quot;DataField&quot; VALUE=&quot;&quot;&gt;
    &lt;PARAM NAME=&quot;ControlStyle&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;BType&quot; VALUE=&quot;0&quot;&gt;
    &lt;PARAM NAME=&quot;Enabled&quot; VALUE=&quot;-1&quot;&gt;
    &lt;PARAM NAME=&quot;Visible&quot; VALUE=&quot;-1&quot;&gt;
    &lt;PARAM NAME=&quot;Platform&quot; VALUE=&quot;256&quot;&gt;
    &lt;PARAM NAME=&quot;UsesStaticList&quot; VALUE=&quot;-1&quot;&gt;
    &lt;PARAM NAME=&quot;CLSize&quot; VALUE=&quot;4&quot;&gt;
    &lt;PARAM NAME=&quot;CLED1&quot; VALUE=&quot;Commit&quot;&gt;
    &lt;PARAM NAME=&quot;CLEV1&quot; VALUE=&quot;1&quot;&gt;
    &lt;PARAM NAME=&quot;CLED2&quot; VALUE=&quot;Forced Commit&quot;&gt;
    &lt;PARAM NAME=&quot;CLEV2&quot; VALUE=&quot;2&quot;&gt;
    &lt;PARAM NAME=&quot;CLED3&quot; VALUE=&quot;Forced Abort&quot;&gt;
    &lt;PARAM NAME=&quot;CLEV3&quot; VALUE=&quot;3&quot;&gt;
    &lt;PARAM NAME=&quot;CLED4&quot; VALUE=&quot;Syntax Error&quot;&gt;
    &lt;PARAM NAME=&quot;CLEV4&quot; VALUE=&quot;4&quot;&gt;
    &lt;PARAM NAME=&quot;LocalPath&quot; VALUE=&quot;&quot;&gt;&lt;/OBJECT&gt;
--&gt;
&lt;!--#INCLUDE FILE=&quot;_ScriptLibrary/OptionGrp.ASP&quot;--&gt;
&lt;SCRIPT LANGUAGE=JavaScript RUNAT=Server&gt;
function _initTransactionGroup()
{
    TransactionGroup.addItem('Commit', '1');
    TransactionGroup.addItem('Forced Commit', '2');
    TransactionGroup.addItem('Forced Abort', '3');
    TransactionGroup.addItem('Syntax Error', '4');
}
function _TransactionGroup_ctor()
{
    CreateOptionGroup('TransactionGroup', 
        _initTransactionGroup, null);
}
&lt;/script&gt;
&lt;% TransactionGroup.display %&gt;

&lt;!--METADATA TYPE=&quot;DesignerControl&quot; endspan--&gt;

&lt;/td&gt;
&lt;td&gt;
&lt;font size=&quot;2&quot;&gt;

This example shows four scenarios as follows: 
&lt;UL&gt;
    &lt;LI&gt;Commit - The page commits automatically
    &lt;LI&gt;Forced Commit - A commit is forced using 
    ObjectContext.SetComplete
    &lt;LI&gt;Forced Abort - An abort is forced using 
    ObjectContext.SetAbort
    &lt;LI&gt;Syntax Error - A syntax error is used to trigger an 
    abort&lt;/LI&gt;
&lt;/UL&gt;
&lt;/font&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;
&lt;INPUT type=&quot;submit&quot; value=&quot;Submit&quot; id=submit name=submit&gt; 
&lt;/FORM&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;%
RequestMethod = Request.ServerVariables(&quot;REQUEST_METHOD&quot;)
If RequestMethod = &quot;POST&quot; Then
    Select Case Request.Form(&quot;TransactionGroup&quot;)
        Case 1
            ' Do nothing
        Case 2
            ' Force a commit
            ObjectContext.SetComplete
        Case 3
            ' Force an abort
            ObjectContext.SetAbort
        Case 4
            ' Force an abort via a syntax error
            Microsoft.Rules
    End Select
End If
%&gt;

&lt;/BODY&gt;
&lt;% ' VI 6.0 Scripting Object Model Enabled %&gt;
&lt;% EndPageProcessing() %&gt;
&lt;/FORM&gt;
&lt;/HTML&gt;

&lt;%
    ' The Transacted Script Commit Handler. This subroutine
    ' will be called if the transacted script commits.

    Sub OnTransactionCommit()
        If RequestMethod = &quot;POST&quot; Then
            Response.Write _
                &quot;&lt;p&gt;&lt;b&gt;The Transaction just committed&lt;/b&gt;.&quot; 
            Response.Write &quot;&lt;br&gt;This message came from the &quot;
            Response.Write &quot;OnTransactionCommit() event handler.&quot;
        End If
    End Sub

    ' The Transacted Script Abort Handler. This subroutine
    ' will be called if the transacted script aborts.

    Sub OnTransactionAbort()
        If RequestMethod = &quot;POST&quot; Then
            Response.Write &quot;&lt;p&gt;&lt;b&gt;The Transaction just aborted&lt;/b&gt;.&quot; 
            Response.Write &quot;&lt;br&gt;This message came from the &quot;
            Response.Write &quot;OnTransactionAbort() event handler.&quot;
        End If
    End Sub
%&gt;
</PRE>

<div class="note"><blockquote>
<B>NOTE</B><hr>It's important to know that a transaction cannot span multiple 
ASP Web pages. If a transaction requires objects from several 
transactional components, you should group operations that use those objects into 
one ASP Web page.</blockquote></div>

</P>
<P>
In Figure 19-5, the code allows you to select a scenario using the 
radio buttons (created using an OptionGroup design-time control) and then to 
submit the page in order to have that scenario executed on the server. The 
event handlers report the resulting commit or abort back to the user. The four 
scenarios included are as follows:

</P>
<UL>
<P><LI><B>Commit</B> The page is allowed to commit automatically with 
no programmatic intervention.
</LI>
</P>
<P><LI><B>Forced Commit</B> A commit is forced using the 
<I>ObjectContext.SetComplete</I> syntax within the ASP Web page.
</LI>
</P>
<P><LI><B>Forced Abort</B> An abort is forced using the 
<I>ObjectContext.SetAbort</I> syntax within the ASP page.
</LI>
</P>
<P><LI><B>Syntax Error</B> A syntax error within the ASP page is used to 
trigger an abort.
</LI></P>
</UL>




<P>The code for Figure 19-5 is included on the CD-ROM as the 
asp_trans_demo.asp file in the VI-Bank/VIntDev98 folder. Figure 19-6 shows the 
output from the page when the Forced Abort radio button has been chosen.
</P>
<P>
<A HREF="javascript:fullSize('f19lh06x.htm')"> <IMG SRC="images/F19LH06.JPG" width=404 height=310 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 19-6.</B> <I>The browser output resulting from running the code shown in Figure 19-5 and choosing a &quot;Forced Abort&quot; via the </I>ObjectContext.SetAbort<I> syntax.</I><!-- /CAPTION -->

</P>
</BODY>
</HTML>




