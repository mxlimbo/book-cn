<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Creating Transactional Components</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch20a.htm", "ch20c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="359"><H1>Creating Transactional Components</H1></A>
<P>In this section, we'll create a server-side component using Visual Basic 6.0 
and then place it under MTS control. We'll then create an ASP Web page to call 
the component, and we'll see how the ASP Web page and the component can 
work together in a single transaction.

</P>
<A NAME="360"><H2>Creating a Transactional Component</H2></A><P>For our transactional component, we'll create an ActiveX dynamic-link 
library (DLL) project in Visual Basic 6.0 and define a class with one method&#8212;the 
<I>Transaction</I> class with the 
<I>CommitOrAbort</I> method&#8212;as shown in the following code.

</P>
<P><PRE>
' Filename: transaction.cls (mts_example.vbp)
'
' Description:  Transaction Class
'
' This file is provided as part of the &quot;Programming Visual 
' InterDev 6.0&quot; CD-ROM.
'
' THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT
' WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
' OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR
' PURPOSE.
'
' Copyright (C) 1998 Microsoft Corporation. All rights reserved

Option Explicit

Public Function CommitOrAbort(ByVal TransType As Integer)

    Dim strResult As String
    
    On Error GoTo ErrorHandler
    
    Dim ctxObject As ObjectContext
    Set ctxObject = GetObjectContext()
    
    ' Take the appropriate action based on the TransType code.
    If TransType = 1 Then
        ' Commit
        ctxObject.SetComplete
        CommitOrAbort = &quot;Committed&quot;
    Else
        ' Abort
        ctxObject.SetAbort
        CommitOrAbort = &quot;Aborted&quot;
    End If
    
Exit Function

ErrorHandler:
    
    ctxObject.SetAbort
    
    CommitOrAbort = &quot;Aborted&quot; ' Indicate that an error occurred.
    
    Err.Raise Err.Number, &quot;MtsExample.Transaction.CommitOrAbort&quot;, _
        Err.Description
    
End Function
</PRE>

</P>
<P>The <I>CommitOrAbort</I> method takes an integer as input and then 
explicitly commits or aborts the transaction based on the input. If the value of 
the <I>TransType</I> variable is 1, it will commit; otherwise, it will abort. The method 
also returns a text string to the calling program describing the action that took place.

</P>
<P>You'll notice that the method gets its current context by calling the 
<I>GetObjectContext</I> function. The context is stored in a 
<I>ContextObject</I> object variable named <I>ctxObject</I>. To commit the transaction, the method calls <I>ctxObject.SetComplete</I>, and to abort the transaction, it calls 
<I>ctxObject.SetAbort.</I>

</P>
<P>The code for this example is contained on the CD-ROM under the 
transactions/VB98 folder in a Visual Basic 6.0 project named 
mts_example.vbp. After opening this project file, you should see a screen similar to that 
shown in Figure 20-1.

</P>
<P>
<A HREF="javascript:fullSize('f20lh01x.htm')"> <IMG SRC="images/f20lh01.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-1.</B> <I>The Visual Basic 6.0 development environment showing the transaction.cls class module within the mts_example.vbp project.</I><!-- /CAPTION -->

</P>
<P>If you are creating your own Visual Basic 6.0 ActiveX DLL project, make sure that the References dialog box includes a reference to the Microsoft Transaction Server Type Library, as shown in Figure 20-2. You'll also want to go into 
the Project Properties dialog box (by choosing Properties from the Project menu) and mark the project for Unattended Execution. In the case of our example project, both of these settings are already stored in the project file on the 
CD-ROM. To compile an ActiveX DLL for your project, simply choose Make from the File menu.

</P>
<P>
<A HREF="javascript:fullSize('f20lh02x.htm')"> <IMG SRC="images/f20lh02.jpg" width=404 height=321 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-2.</B> <I>Visual Basic 6.0 References dialog box showing the reference to the Microsoft Transaction Server Type Library.</I><!-- /CAPTION -->

</P>
<P>After compiling the project to make an ActiveX DLL 
(mts_example.dll), you'll need to install it within MTS. You can install it using the Transaction Server Explorer to create a package and then using the Component Wizard to 
import the already registered component. Alternatively, you can take the DLL that is supplied on the CD-ROM and choose the Install New Component option from the Component Wizard. Figure 20-3 shows the MTS Example package within the Transaction Server Explorer. For more detailed information on how to create packages and install components into MTS, see the section 
&quot;<A HREF="ch20c.htm#364">Deploying Transactional Components</A>.&quot; 

</P>
<P>For an MTS component to be transactional, it needs to have its 
transaction attribute defined within the Transaction Server Explorer. You can do 
this by right-clicking the component and choosing Properties. Next choose 
the Transaction tab, and select the Requires A Transaction radio button in the 
Transaction Support group box. Finally, choose OK and you're done&#8212;your 
transactional component has been installed into MTS.

</P>
<P>
<A HREF="javascript:fullSize('f20lh03x.htm')"> <IMG SRC="images/f20lh03.jpg" width=404 height=303 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-3.</B> <I>The MTS Example package within the Transaction Server Explorer.</I><!-- /CAPTION -->

</P>
<A NAME="361"><H2>Calling the Transactional Component from ASP</H2></A><P>To call a transactional component from an ASP Web page, you simply use 
the <I>Server.CreateObject</I> syntax to instantiate the object and then you can 
reference its methods. Here is an example:

</P>
<P><PRE>
&lt;%
Dim myObject
Set myObject = Server.CreateObject(&quot;mtsexample.transaction&quot;)
rtnString = myObject.CommitOrAbort(TransVal)
Response.Write &quot;Return status is '&quot; +  rtnString + &quot;'.&lt;p&gt;&quot;
%&gt;
</PRE>

</P>
<P>To continue our transactional component example, we'll look at an 
HTML page and an ASP Web page. The HTML page allows you to specify the 
action the component should take: whether it should commit or abort. The ASP 
Web page captures this input (sent via an HTML form) and sends the 
appropriate code to the <I>CommitOrAbort</I> method of the mtsexample.transaction 
component. The ASP Web page displays both the resulting status returned from the 
component and the final status of the entire transaction.

</P>
<P>The code beginning below shows the cmp_trans.htm 
page, which is in the transactions/VIntDev98 folder on the CD-ROM.

</P>
<P><PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Simple Transactional Web Page Using ASP and Components&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR=&quot;White&quot; topmargin=&quot;10&quot; leftmargin=&quot;10&quot;&gt;

&lt;!-- Display Header --&gt;

&lt;font size=&quot;4&quot; face=&quot;Arial, Helvetica&quot;&gt;
&lt;b&gt;Simple Transactional Web Page Using ASP and Components&lt;/b&gt;
&lt;/font&gt;&lt;br&gt;
       
&lt;hr size=&quot;1&quot; color=&quot;#000000&quot;&gt;

&lt;!-- Brief Description Blurb --&gt;

This is a simple example demonstrating the basic
structure of a transacted Web page using ASP and components.
&lt;p&gt;
The ASP Web page calls the CommitOrAbort method in the
mtsexample.transaction component. You can make this 
component either commit or abort by specifying the action
to take on the cmp_trans.htm page.
&lt;p&gt;

&lt;!-- HTML Form so you can make the component either 
commit or abort --&gt;
Specify whether you would like the mtsexample.transaction 
component to either commit or abort, and then click 
the Submit button.
&lt;FORM METHOD=POST ACTION=&quot;cmp_trans.asp&quot;&gt;
&lt;TABLE&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;input type=&quot;radio&quot; checked name=&quot;TransFlg&quot; 
value=&quot;Commit&quot;&gt;Commit&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;input type=&quot;radio&quot; name=&quot;TransFlg&quot; value=&quot;Abort&quot;&gt;Abort&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;INPUT type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;Submit&quot;&gt;
&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/FORM&gt;

&lt;p&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;
The cmp_trans.htm page simply sends the value of the currently 
selected radio button (&quot;Commit&quot; or &quot;Abort&quot;) to the 
cmp_trans.asp page via an HTML form. The following code shows the
cmp_trans.asp page.
&lt;%@ TRANSACTION=Required LANGUAGE=&quot;VBScript&quot; %&gt;

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME=&quot;GENERATOR&quot; Content=&quot;Microsoft Visual Studio 6.0&quot;&gt;
&lt;TITLE&gt;Simple Transactional Web Page Using ASP and Components&lt;/TITLE&gt;
&lt;/HEAD&gt;

&lt;BODY BGCOLOR=&quot;White&quot; topmargin=&quot;10&quot; leftmargin=&quot;10&quot;&gt;

&lt;!-- Display Header --&gt;

&lt;font size=&quot;4&quot; face=&quot;Arial, Helvetica&quot;&gt;
&lt;b&gt;Simple Transactional Web Page Using ASP and Components&lt;/b&gt;
&lt;/font&gt;&lt;br&gt;

&lt;hr size=&quot;1&quot; color=&quot;#000000&quot;&gt;

&lt;!-- Brief Description Blurb --&gt;
This is a simple example demonstrating the basic
structure of a transacted Web page using ASP and components. 
&lt;p&gt;
The ASP Web page calls the CommitOrAbort method in the
mtsexample.transaction component. You can make this 
component either commit or abort by specifying the action
to take on the cmp_trans.htm page.
&lt;p&gt;

&lt;!-- Find out whether the users want to commit or abort. --&gt;
&lt;%
If Request.Form(&quot;TransFlg&quot;) = &quot;Commit&quot; Then
    TransVal = 1
Else
    TransVal = 0
End If
%&gt;

&lt;!-- Instantiate the transaction component, and 
    call the CommitOrAbort method. --&gt;
&lt;% 
Dim myObject
Set myObject = Server.CreateObject(&quot;mtsexample.transaction&quot;)
rtnString = myObject.CommitOrAbort(TransVal)
Response.Write &quot;The component transaction status is '&quot; +  _
    rtnString + &quot;'.&lt;p&gt;&quot;
%&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;

&lt;%
    ' The Transacted Script Commit Handler. This subroutine
    ' will be called if the transacted script commits.

    Sub OnTransactionCommit()
        Response.Write &quot;&lt;p&gt;&lt;b&gt;The transaction just committed&lt;/b&gt;.&quot; 
        Response.Write &quot;This message came from the &quot;
        Response.Write &quot;OnTransactionCommit() event handler.&quot;
    End sub

    ' The Transacted Script Abort Handler. This subroutine
    ' will be called if the transacted script aborts.

    Sub OnTransactionAbort()
        Response.Write &quot;&lt;p&gt;&lt;b&gt;The transaction just aborted&lt;/b&gt;.&quot; 
        Response.Write &quot;This message came from the &quot;
        Response.Write &quot;OnTransactionAbort() event handler.&quot;
    End sub
%&gt;
</PRE>

</P>
<P>Notice in the code above that the value from the HTML form is 
obtained using the <I>Form</I> method of the 
<I>Request</I> object, as follows:

</P>
<P><PRE>
Request.Form(&quot;TransFlg&quot;)
</PRE>

</P>
<P>The mtsexample.transaction component is instantiated using the 
<I>Server.CreateObject</I> syntax, and the <I>CommitOrAbort</I> method is called with the 
<I>TransFlg</I> variable passed along as a parameter. Finally the ASP Web page prints out 
the return status from the <I>CommitOrAbort</I> method. When you run this page 
within your browser, after first choosing &quot;Commit&quot; from the HTML page, you'll see 
the resulting output, as shown in Figure 20-4.

</P>
<P>
<A HREF="javascript:fullSize('f20lh04x.htm')"> <IMG SRC="images/f20lh04.jpg" width=404 height=281 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-4.</B> <I>Output from the cmp_trans.asp page after selecting to commit the transaction.</I><!-- /CAPTION -->

</P>
<P>You'll also notice from Figure 20-4 that the transaction as a whole 
completed successfully. Because the component's transaction was successful 
(that is, it fired the <I>SetComplete</I> method), the ASP Web page was able to capture 
the event in its <I>OnTransactionCommit</I> event handler. If you look at the 
Transaction Statistics within the Transaction Server Explorer, you'll see just one 
transaction for this entire process.

</P>
<P>If you choose the Abort radio button from the HTML page, you see 
that the entire transaction aborts. The ASP Web page captures the event using 
the <I>OnTransactionAbort</I> event.

</P>
<A NAME="362"><H2>Using the Built-In ASP Objects from the Context Object</H2></A><P>Within your Visual Basic server-side components, you can also use the 
context object to access the built-in ASP objects of Microsoft Internet Information 
Server (IIS). These are the <I>Request</I>,<I> Response</I>,<I> Server</I>,<I> Session</I>, and 
<I>Application</I> objects.

</P>
<P>You can do this by using the <I>Item</I> method of the context object. The following example retrieves the value of the server name from the <I>ServerVariables</I> collection of the <I>Request</I> object. In the example below, <I>oc</I> is the object variable for the context object.

</P>
<P><PRE>
Dim oc As ObjectContext
Set oc = GetObjectContext()
oc(&quot;Request&quot;).ServerVariables(&quot;SERVER_NAME&quot;)
</PRE>

</P>
<P>The ability to access the built-in ASP objects from within a 
server-side Visual Basic component yields some interesting possibilities. For example, 
you can actually write output to the browser from your component&#8212;you don't 
have to return the output to your ASP code for processing. The following code 
shows you an example. 

</P>
<P><PRE>
' Filename: asp.cls (mts_example.vbp)
'
' Description:  ASP Class
'
' This file is provided as part of the &quot;Programming Visual
' InterDev 6.0&quot; CD-ROM.
'
' THIS CODE AND INFORMATION IS PROVIDED &quot;AS IS&quot; WITHOUT
' WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
' INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES
' OF MERCHANTABILITY AND/OR FITNESS FOR A  PARTICULAR
' PURPOSE.
'
' Copyright (C) 1998 Microsoft Corporation. All rights reserved

Option Explicit

Public Function BuiltInAsp() As String

    Dim strResult As String
    
    On Error GoTo ErrorHandler
      
    ' Get the context object.
    Dim oc As ObjectContext
    Set oc = GetObjectContext()
    
    ' Print some text to the browser using the Response object.
    oc(&quot;Response&quot;).Write &quot;&lt;p&gt;Here's some text from &quot; &amp; _
        &quot;the Visual Basic component!&lt;/p&gt;&quot;
    
    ' Print the server name using the Request object.
    oc(&quot;Response&quot;).Write &quot;&lt;p&gt;Server Name: &quot; &amp; _
        oc(&quot;Request&quot;).ServerVariables(&quot;SERVER_NAME&quot;) &amp; &quot;&lt;/p&gt;&quot;
        
    ' Print the user's first name using the Request object.
    oc(&quot;Response&quot;).Write &quot;&lt;p&gt;First Name: &quot; &amp; _
        oc(&quot;Request&quot;).Form(&quot;FirstName&quot;) &amp; &quot;&lt;/p&gt;&quot;
    
    oc.SetComplete
    
    BuiltInAsp = &quot;Committed&quot;
    
    Exit Function

ErrorHandler:
    
    oc.SetAbort
    
    BuiltInAsp = &quot;Aborted&quot; ' Indicate that an error occurred.
    
    Err.Raise Err.Number, &quot;MTSExample.ASP.BuiltInAsp&quot;, _
        Err.Description
    
End Function
</PRE>

</P>
<P>The code for this example is contained on the CD-ROM under the 
transactions/VB98 folder in the Visual Basic 6.0 project named mts_example.vbp. 
This is the same project file that we looked at earlier in the chapter. The code is 
just stored in a class named <I>ASP</I> instead of in the previous class named 
<I>Transaction</I>.

</P>
<P>You'll see from the code that there's a lot you can do by accessing the 
ASP built-in objects. The code uses the <I>Write</I> method of the <I>Response</I> object to 
send output to the browser. It prints a simple line of text, the server name from 
the <I>Request</I> object, and finally the value of the <I>FirstName</I> variable from an HTML form.

</P>
<P>To run this example, you should choose the cmp_built-in.htm file 
from the transactions/VIntDev98 folder. This file captures the user's first name 
and then calls cmp_built-in.asp. The ASP file calls the <I>BuiltInAsp</I> method shown in the preceding code. You'll also want to install the mtsexample.asp component into MTS using the Transaction Server Explorer.

</P>
<P>Notice that there's nothing significant about the names of these files or 
the names of the methods. They are just examples meant to demonstrate how 
to access the ASP built-in objects from within a server-side component. Figure 
20-5 shows the output from this example as viewed within the browser. You'll notice that both the ASP Web page and the component are part of a transaction once again. 

</P>
<P>
<A HREF="javascript:fullSize('f20lh05x.htm')"> <IMG SRC="images/f20lh05.jpg" width=404 height=308 border=0 ALT="Click to view at full size."> </A>

</P>
<P>
<!-- CAPTION --><B>Figure 20-5.</B> <I>Output from the cmp_built-in.asp page after entering &quot;Baby David&quot; for the user's first name in the cmp_built-in.htm page.</I><!-- /CAPTION -->

</P>
<A NAME="363"><H2>An Overview of Transactional C/C++ Components</H2></A><P>Working with transactions and the context object from C/C++ components 
is similar to Visual Basic&#8212;the syntax is just slightly different.

</P>
<P>The <I>IObjectContext</I> interface provides access to the current object's 
context. You obtain a reference to the <I>IObjectContext</I> interface by calling the 
<I>GetObjectContext</I> function. As with any COM object, you must release an 
<I>ObjectContext</I> object when you're finished using it.

</P>
<P>The <I>IObjectContext</I> interface exposes the following methods:

</P>
<UL>
<P><LI><I>CreateInstance</I>
</LI>
</P>
<P><LI><I>DisableCommit</I>
</LI>
</P>
<P><LI><I>EnableCommit</I>
</LI>
</P>
<P><LI><I>IsCallerInRole</I>
</LI>
</P>
<P><LI><I>IsInTransaction</I>
</LI>
</P>
<P><LI><I>IsSecurityEnabled</I>
</LI>
</P>
<P><LI><I>SetAbort</I>
</LI>
</P>
<P><LI><I>SetComplete</I>
</LI></P>
</UL>




<P>These methods provide the same functionality as they do in Visual 
Basic. You'll notice that there is no <I>Item</I> method, as there is for Visual Basic. The 
<I>Item</I> method enabled us to access the ASP built-in objects and other context 
object properties. To do this within C/C++ components, you can use the 
<I>IGetContextProperties</I> interface. This interface has a method called 
<I>GetProperty</I>.

</P>
<P>The <I>IGetContextProperties</I> interface also has a method named 
<I>Count</I> that returns the number of context object properties and a method named 
<I>EnumNames</I> that returns a reference to an enumerator that you can use to 
iterate through all the context object properties. You use the 
<I>EnumNames</I> method to obtain a reference to an enumerator object. The returned 
<I>IEnumNames</I> interface exposes several methods you can use to iterate through a list of BSTRs 
representing context object properties. Once you have a name, you can use the 
<I>GetProperty</I> method to obtain a reference to the context object property it 
represents. 

</P>
</BODY>
</HTML>





