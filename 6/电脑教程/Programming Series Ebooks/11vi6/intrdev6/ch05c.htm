<HTML>
<HEAD>
	<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Working with Data Command Objects</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05b.htm", "ch05d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>




<A NAME="95"><H1>Working with Data Command Objects</H1></A>
<P>Once you add a data connection to a project, you are ready to start 
manipulating the database. To accomplish this, you will usually add a data 
command object to your connection. A data command object provides the link 
between the data connection and a recordset.

</P>
<P>A data command object is a named object living under a data 
connection. Where the data connection points to a database or some other source of 
data, a data command object contains some type of connection information that 
works against the target of the data connection. For example, suppose we create a 
data connection that points to the Pubs sample database that ships with SQL 
Server. We could create a data command object under this data connection that 
extracts all the authors from the Pubs database. Any type of command that can be 
executed by the database can be used with a data command object.

</P>
<P>A nice feature of data command objects is the way they work within 
a project. When you create a data command object, an ASP file in the project 
can use it. The properties of the data command object can be changed once 
and will be reflected in every ASP file that uses the object, making maintenance 
of your database objects much easier.

</P>
<P>You can create a data command object by following these steps:

</P>
<OL>
<P><LI>Right-click DataEnvironment in Project Explorer, and select Add 
Data Command from the context menu. This will display the data 
command Properties dialog box. 

</LI>
</P>
<P><LI>Enter a name for this data command object in the Command 
Name text box. 

</LI>
</P>
<P><LI>Select the data connection to use from the Connection drop-down list. 

</LI>
</P>
<P><LI>Select the database object to use from the Database Object 
and Object Name drop-down lists, or enter the SQL to use for the 
command. Figure 5-7 shows the data command Properties dialog 
box with a SQL statement to select all of the records in the Authors 
table from the database.

</LI>
</P>
<P><LI>Click OK to close the dialog box.
</LI>
</P>
</OL>




<P>
<IMG SRC="images/F05lh07.GIF" width=401 height=338 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-7.</B> <I>The data command Properties dialog box can be used to build a data command object's properties or modify them for an existing data command object.</I><!-- /CAPTION -->

</P>
<P>Once you have created a data command object, it will be added to 
Project Explorer under the corresponding data connection. Figure 5-8 shows the 
new getAuthors data command object in Project Explorer.

</P>
<P>
<IMG SRC="images/F05lh08.GIF" width=385 height=357 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-8.</B> <I>Project Explorer exposes the fields in a data command object.</I><!-- /CAPTION -->

</P>
<P>Figure 5-8 also shows how your multiple data command objects will 
look in Project Explorer. In this case we only have one data command object for 
each data connection, but we can easily create many data command objects for 
one data connection, as you will see in later examples. 

</P>
<P>If you want to create a data command object that contains the 
complete set of records in a table, query, view, stored procedure, or other type of 
database object, you can add the data command object by dragging the object 
from Data View and then dropping it on a data connection.

</P>
<P>You can also add a data command object by copying the object and 
pasting it onto a data connection:

</P>
<OL>
<P><LI>Right-click the object name in Data View.

</LI>
</P>
<P><LI>Select Copy from the context menu.

</LI>
</P>
<P><LI>Right-click the data connection you want to add the object to, 
and select Paste from the context menu.
</LI>
</P>
</OL>




<P>This creates a new data command object based upon the database object 
you selected.

</P>
<P>If you want to use an explicit SQL statement to select a set of records, 
select the SQL Statement option in the data command Properties dialog box and 
then click the SQL Builder button to start the Query Designer or enter the SQL 
statement in the SQL Statement text box. Later in this chapter, we will introduce 
the Query Designer. <A HREF="ch12a.htm">Chapter 12</A> also covers the Query Designer in more depth.

</P>
<A NAME="96"><H3>Working with Recordsets</H3></A><P>Now that you have created a data connection and added data command 
objects to it, you are ready to use them in your project. The easiest way to use a 
data command object in your project is to add a recordset to an ASP file. 
This recordset object will work with the database through the data command 
object and use DTCs to display or change the data.

</P>
<P>You can add a Recordset DTC to an ASP file by following these steps: 

</P>
<OL>
<P><LI>Open the ASP file you want to use in the editor.

</LI>
</P>
<P><LI>Drag the data command you want to use from Project Explorer, 
and drop it in the Body section of the page. 
</LI>
</P>
</OL>




<P>You can also drag a Recordset DTC from the Toolbox and manually 
set its properties to point to a data command object.

</P>
<P>Now that you have placed a Recordset DTC in the file, you can add 
DTCs for the fields you want to display. The easiest way to accomplish this with 
a data command object is by using drag and drop from Project Explorer: 

</P>
<OL>
<P><LI>Expand the data command you dropped on the page in 
Project Explorer. You should see the fields in the recordset, as shown 
in Figure 5-8.

</LI>
</P>
<P><LI>Drag the fields you want to display from the data command 
object, and drop them on the page just after the Recordset DTC. For 
each field you drag onto the page, Visual InterDev creates a 
data-bound Textbox DTC to display the field. The page should look similar 
to the one shown in Figure 5-9.

</LI>
</P>
<P><LI>Right-click each Textbox DTC, and change its properties to adjust 
the control's display. You can also add HTML formatting around the DTCs.
</LI>
</P>
</OL>




<P>
<A HREF="javascript:fullSize('F05lh09x.htm')"> <IMG SRC="images/F05lh09.JPG" width=404 height=291 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 5-9.</B> <I>You can display data command fields by dragging them from Project Explorer and dropping them onto an ASP Web page.</I><!-- /CAPTION -->

</P>
<P>Figure 5-9 shows a sample page after a data command object and its 
fields have been dropped onto it as described in the preceding steps. When you 
drag and drop multiple fields onto an ASP Web page, Visual InterDev creates 
an HTML table and inserts a Textbox DTC for each field into that table. Each 
of these Textbox DTCs is bound (linked) to the Recordset DTC. Figure 5-10 below shows the Textbox Properties dialog box for one of the DTCs.

</P>
<P>The <I>Recordset</I> property of the Textbox DTC in Figure 5-10 is set 
to Recordset1, the default name of our Recordset DTC. The 
<I>Field</I> property has been set to au_lname, the name of the database column linked to this DTC.

</P>
<P>
<IMG SRC="images/F05lh10.GIF" width=401 height=325 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-10.</B> <I>The Textbox Properties dialog box for a data-bound Textbox DTC.</I><!-- /CAPTION -->

</P>
<P>Figure 5-11 shows the Recordset Properties dialog box for the 
Recordset DTC. You can see that the <I>Name</I> property is set to Recordset1. The 
<I>Database Object</I> property is set to DE Commands, while the 
<I>Object Name</I> property is set to getAuthors.

</P>
<P>
<IMG SRC="images/F05lh11.GIF" width=404 height=356 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-11.</B> <I>The Recordset Properties dialog box allows you to change the configuration of the Recordset DTC.</I><!-- /CAPTION -->

</P>
<P>You can, of course, set the Recordset DTC to use a SQL query, stored 
procedure, or view. These items will be explored in much more detail in 
<A HREF="ch14a.htm">Chapter 14</A>, where you'll learn how to use the Recordset DTC's events and how to set 
other properties.

</P>
<P>Visual InterDev 6.0 provides the RecordsetNavbar DTC, which 
controls navigation between database records. This control provides the buttons 
with which a user navigates through the records in a recordset. You can insert 
the RecordsetNavbar DTC in a page by following these steps:

</P>
<OL>
<P><LI>Open the ASP file in the editor.

</LI>
</P>
<P><LI>Drag the RecordsetNavbar DTC from the Toolbox, and drop it 
onto the page.

</LI>
</P>
<P><LI>Right-click the control, and select Properties from the context 
menu. This will open the RecordsetNavbar Properties dialog box, as 
shown in Figure 5-12.

</LI>
</P>
<P><LI>Select the Recordset DTC to use from the Recordset drop-down 
list. In Figure 5-12, this is set to Recordset1.
</LI>
</P>
</OL>




<P>The RecordsetNavbar DTC provides First, Next, Previous, and Last 
buttons. You can use these buttons to move among the records displayed on the 
page. You can also customize the functionality of these buttons by modifying the 
script that they create or by changing certain properties in the RecordsetNavbar 
Properties dialog box. 

</P>
<P>
<IMG SRC="images/F05lh12.GIF" width=401 height=336 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-12.</B> <I>The RecordsetNavbar Properties dialog box is used to bind the RecordsetNavbar DTC to the Recordset DTC.</I><!-- /CAPTION -->

</P>
<P>If the recordset is updatable and you want users to be able to change 
the data, you might want to set the <I>Update On 
Move</I> property to True by checking the Update On Move check box. If 
<I>Update On Move</I> is True, the fields in the recordset will be updated with the new data in the data-bound DTCs 
whenever the user moves to another record. If <I>Update On 
Move</I> is False, the data in the data-bound DTCs will be discarded when the user moves to a new record.

</P>
<P>The RecordsetNavbar's <I>Scripting Platform</I> property defaults to Inherit 
From Page and should reflect the value set for the page's 
<I>Scripting Platform</I> property. Figure 5-12 shows this property set to Server (ASP), which is the 
page's setting. Once you have selected a Recordset DTC in the 
<I>Recordset</I> property, the <I>Scripting 
Platform</I> property becomes read-only. If you want to change the 
<I>Scripting Platform</I> property after you have selected a Recordset DTC, highlight 
and delete the Recordset DTC name and then change the 
<I>Scripting Platform</I> property. Once you have changed the 
<I>Scripting Platform</I> property, you can reselect 
the Recordset DTC.

</P>
<P>Figure 5-13 demonstrates how the RecordsetNavbar DTC works in 
the browser. I created a new page and placed four fields from the 
GetCustomers data command object on the page. Then I added the RecordsetNavbar DTC 
as we did in the previous steps. Next I saved the page and displayed it in 
the browser. You can see the results in Figure 5-13.

</P>
<P>
<A HREF="javascript:fullSize('F05lh13x.htm')"> <IMG SRC="images/F05lh13.JPG" width=404 height=322 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 5-13.</B> <I>The RecordsetNavbar DTC provides HTML buttons for navigation between records.</I><!-- /CAPTION -->

</P>
<P><A HREF="ch14a.htm">Chapter 14</A> covers the Recordset DTC in detail, including its 
methods, properties, and events, as well as building complete applications with it 
and other controls.

</P>
<A NAME="97"><H3>Working with the Data Command Object Controls</H3></A><P>You can adjust the way the data command objects work with the DTCs that 
are dropped onto a page. The Field Properties dialog box, shown in Figure 
5-14, can be used to configure the properties of the fields within a data 
command object. You can change the DTC used when you drop the field onto a page 
and change the caption used in the HTML for the field.

</P>
<P>
<IMG SRC="images/F05lh14.GIF" width=401 height=338 BORDER=0>
</P>
<P>
<!-- CAPTION --><B>Figure 5-14.</B> <I>The Field Properties dialog box is used to set the characteristics of a data command object's fields and how they behave when dropped onto a page.</I><!-- /CAPTION -->

</P>
<P>You change the default DTC for a field by following these steps:

</P>
<OL>
<P><LI>Right-click the field in Project Explorer.

</LI>
</P>
<P><LI>Select Properties from the context menu.

</LI>
</P>
<P><LI>Select the DTC to use from the Control drop-down list.
</LI>
</P>
</OL>




<P>You change the default caption for a field by following these steps:

</P>
<OL>
<P><LI>Right-click the field in Project Explorer.

</LI>
</P>
<P><LI>Select Properties from the context menu.

</LI>
</P>
<P><LI>Enter the new caption in the Caption text box.
</LI>
</P>
</OL>




<P>To see how these properties work, I changed the properties for 
the GetCustomers data command object and then created a new page with 
them. You can see the results in Figure 5-15.

</P>
<P>The captions for each field were changed. (Compare Figure 5-15 
with Figure 5-13.) For example, you can see that Customer ID contains a space, 
while the field name does not (CustomerID). The CustomerID field is also 
displayed in a Label DTC, while the default control would have been the Textbox 
DTC, which is used for the other fields.

</P>
<P>
<A HREF="javascript:fullSize('F05lh15x.htm')"> <IMG SRC="images/F05lh15.JPG" width=404 height=322 border=0 ALT="Click to view at full size."> </A>
</P>
<P>
<!-- CAPTION --><B>Figure 5-15.</B> <I>The properties for the fields of the data command object used in this page have been changed.</I><!-- /CAPTION -->

</P>

</BODY>
</HTML>




