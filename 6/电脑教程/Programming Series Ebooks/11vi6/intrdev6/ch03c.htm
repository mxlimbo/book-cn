<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Remote Debugging</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch03b.htm", "ch03d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="78"><H1>Remote Debugging</H1></A>
<P>The Visual InterDev debugger allows you to debug ASP scripts on remote 
IIS servers using a feature known as <I>remote 
debugging.</I> This feature is useful in several situations, for example when:

</P>
<UL>
<P><LI>Debugging applications running on development servers.

</LI>
</P>
<P><LI>Getting assistance from another developer to debug an 
application running on your system.

</LI>
</P>
<P><LI>Debugging an application on an ISP's system before it goes 
to production.

</LI>
</P>
<P><LI>Debugging a production application that has exposed an error.
</LI></P>
</UL>

<P>Normally, you will debug server script in an ASP page by installing 
Visual InterDev and the Web server on the same system and debugging scripts 
locally on that system. This is how we recommend you approach debugging, as 
we outlined earlier in this chapter.  

</P>
<P>However, with remote debugging, you can attach the debugger 
running on your computer to a script running on the Web server and issue 
debugging commands across the network. This is certainly useful in the situations 
we mentioned above. The material in this section is not meant to suggest that 
you do all of your debugging remotely, only that you know how to set up 
remote debugging and to use it when it's appropriate for the task.

</P>
<P>Remote debugging is similar to debugging locally, except for these 
two differences: 

</P>
<UL>
<P><LI>You must perform some extra setup steps before you can use 
remote debugging.

</LI>
</P>
<P><LI>Only one user can utilize remote debugging on a server at a time. 
</LI></P>
</UL>


<P>Before you can use remote debugging, you set up the server running 
IIS. The first step is to be sure that the proper debugging components have 
been installed on the server. A full server installation of Visual InterDev will 
normally load the proper components. If you did not perform a full server installation, 
or if you are not sure that you did, you can follow these steps to update the server:

</P>
<OL>
<P><LI>On the IIS system, start the Visual Studio 6.0 (Enterprise Edition 
or Pro Edition) setup program.

</LI>
</P>
<P><LI>Click Add/Remove, and select Server Applications And Tools.

</LI>
</P>
<P><LI>On the next page, select Launch BackOffice Installation Wizard 
and then choose Install.

</LI>
</P>
<P><LI>When the BackOffice Business Solutions wizard is displayed, 
choose Custom and then choose Next.

</LI>
</P>
<P><LI>Proceed until you see the page displaying a list of components 
to install. Uncheck all components except Remote Machine 
Debugging and Visual InterDev Server.

</LI>
</P>
<P><LI>Complete the installation.
</LI>
</P>
</OL>




<P>Remote debugging requires that anyone using this facility must have a 
valid Windows NT administration account. This account must be a member of 
the Administrators or Domain Admins groups. You can set this up with the NT 
User Manager utility. This step alone will give you pause about using Remote 
Debugging on a production server. If you either do not want to or cannot use this 
level of security, you can use a tool like PCAnyWhere32 on Windows NT to 
allow certain users to remotely access a copy of Visual InterDev running on the IIS 
server. This will not require the same security levels that remote debugging does.

</P>
<P>The remote debugging process uses Distributed COM (DCOM) to 
communicate between the client and server computers. You must configure DCOM 
on the IIS server to allow a remote user to attach the debugger process on that server:

</P>
<OL>
<P><LI>Log in as an administrator on the server running IIS.

</LI>
</P>
<P><LI>From the Start menu, select the Run command.

</LI>
</P>
<P><LI>In the Open box, type Dcomcnfg.exe, and click OK to start 
the DCOM Configuration Manager.

</LI>
</P>
<P><LI>In the Distributed COM Configuration Properties window, 
select Machine Debug Manager.

</LI>
</P>
<P><LI>Click Properties to display the Machine Debug Manager 
Properties dialog box.

</LI>
</P>
<P><LI>Click Security to display the Security tab.

</LI>
</P>
<P><LI>Click the Use Custom Access Permissions radio button.

</LI>
</P>
<P><LI>Click the Edit button to display the Registry Value Permissions 
dialog box.

</LI>
</P>
<P><LI>Verify that Allow Access is selected in the Type Of Access list.

</LI>
</P>
<P><LI>Click the Add button to display the Add Users And Groups 
dialog box.

</LI>
</P>
<P><LI>Select the server's name from the List Names From list. The 
server name typically is in the form \\server and appears at the top of 
the list.

</LI>
</P>
<P><LI>Under Names, choose Administrators, click Add, and then click OK.

</LI>
</P>
<P><LI>Click OK once more to return to the Security tab.

</LI>
</P>
<P><LI>Click the Use Custom Launch Permissions radio button.

</LI>
</P>
<P><LI>Click the Edit button. 

</LI>
</P>
<P><LI>Click the Add button to display the Add Users And Groups 
dialog box.

</LI>
</P>
<P><LI>Select the server's name from the List Names From list. Again, 
the server name typically is in the form \\server and appears at the 
top of the list.

</LI>
</P>
<P><LI>Under Names, choose Administrators, choose Add, and then choose OK.

</LI>
</P>
<P><LI>Click OK once more to return to the Security tab.

</LI>
</P>
<P><LI>Click OK to Return to the Distributed COM Configuration 
Properties window.

</LI>
</P>
<P><LI>Select MTS Client Export.

</LI>
</P>
<P><LI>Click the Properties button. Add the same custom access 
permissions that we did for the Machine Debug Manager.

</LI>
</P>
<P><LI>Return to the Distributed COM Configuration Properties window.

</LI>
</P>
<P><LI>Select the MTS Catalog 1.0 Object.

</LI>
</P>
<P><LI>Click the Properties button. Add the same custom access 
permissions that we did for the Machine Debug Manager.
</LI>
</P>
</OL>




<P>Now you can debug the application remotely using Visual InterDev just as 
you would if Visual InterDev and IIS were running on the same system.

</P>
<A NAME="79"><H2>Running the Debugger Remotely</H2></A><P>After the server has been configured for remote debugging, you can debug 
on the server in much the same way you do locally. You can launch a 
remote debugging session in the same way that you launch a normal debugging session:

</P>
<OL>
<P><LI>Launch a project using the debugger.

</LI>
</P>
<P><LI>Attach to a process that is already running on the server.
</LI>
</P>
</OL>




<P>The debug process runs on the server the ASP application runs on. 
For instance, if your ASP application is running locally, your debug session will 
also run locally. If the ASP application is running on another server, the debug 
session will run on that server. 

</P>
<P><div class="note"><blockquote>
<B>NOTE</B><HR>
Because remote debugging ties up process threads on the 
server, it is recommended that while a remote debugging session is in 
progress, other users avoid using the server.
</blockquote></div>

</P>
</BODY>
</HTML>




