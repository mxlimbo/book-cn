<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>The ObjectContext Object</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch19c.htm", "ch19e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="351"><H1>The <I>ObjectContext</I> Object</H1></A>
<P>An MTS object is an instance of an MTS component. Remember that an 
MTS component is a COM component that is installed into MTS. On disk it is 
a Microsoft ActiveX DLL. The component can contain any number of methods 
and usually provides a certain category of service. For example, a finance 
component might contain many different types of financial methods and is 
therefore a bundling of a particular category of business logic.

</P>
<P>MTS maintains context for each object. This context, which is 
implicitly associated with the object, contains information about the object's 
execution environment, such as the identity of the object's creator and, optionally, 
the transaction encompassing the work of the object. The object context is 
similar in concept to the process context that an operating system maintains for 
an executing program.

</P>
<P>An MTS object and its associated context object have corresponding 
lifetimes. MTS creates the context before it creates the MTS object. MTS 
destroys the context after it destroys the MTS object.

</P>
<A NAME="352"><H2>The <I>ObjectContext</I> Object and ASP</H2></A><P>In Internet Information Server 3.0, the ASP framework provided five 
built-in objects: <I>Application</I>, 
<I>Session</I>, <I>Request</I>, <I>Response</I>, and 
<I>Server</I>. The built-in objects are special because they are built into ASP Web pages and do not need to 
be created before you can use them in scripts. For example, to send output to 
the browser you use the <I>Write</I> method of the 
<I>Response</I> object. You simply call 
<I>Response.Write</I> and pass it a string. You don't have to create an instance of 
this object before using its methods.

</P>
<P>In IIS 4.0, there is now a sixth built-in object: the 
<I>ObjectContext</I> object. You can use the 
<I>ObjectContext</I><B> </B>object either to commit or to abort a 
transaction managed by MTS that has been initiated by a script contained in an 
ASP Web page. 

</P>
<P>When an ASP Web page contains the @TRANSACTION directive, the 
page runs in a transaction and does not finish processing until the transaction 
either succeeds completely or fails. We'll find out more about the 
@TRANSACTION directive later on in this chapter. 

</P>
<A NAME="353"><H2>Methods</H2></A><P>The <I>ObjectContext</I> object has 11 methods that can be called from your 
applications. These methods allow you to carry out a number of tasks, including:

</P>
<UL>
<P><LI>Declaring that the object's work is complete
</LI>
</P>
<P><LI>Preventing a transaction from being committed
</LI>
</P>
<P><LI>Instantiating other MTS objects
</LI>
</P>
<P><LI>Finding out if a caller is in a particular role
</LI>
</P>
<P><LI>Finding out if security is enabled
</LI>
</P>
<P><LI>Finding out if the object is executing within a transaction 
</LI>
</P>
<P><LI>Retrieving IIS built-in objects
</LI></P>
</UL>




<P>Table 19-1 lists the methods that can be found in the 
<I>ObjectContext</I> object.

</P>
<P><b>Table 19-1.</b> <i>Methods of the</i> ObjectContext <i>object.</i>
</P>
<P>
<table width="95%" cellpadding="5" valign="top">
<tr> 
<tH valign="top"><b><i>Method</i></b></tH>
<tH valign="top"><b><i>Description</i></b></tH>
</tr>
<tr>
<td valign="top"><I>Count</I></td>
<td valign="top">Returns the number of context object properties.</td>
</tr><tr> 
<td valign="top"><I>CreateInstance</I></td>
<td valign="top">Instantiates another MTS object.</td>
</tr><tr>
<td valign="top"><I>DisableCommit</I></td>
<td valign="top">Declares that the object hasn't finished its 
work and that its transactional updates are in an 
inconsistent state. The object retains its state 
across method calls, and any attempts to commit 
the transaction before the object calls 
<I>EnableCommit</I> or <I>SetComplete</I> will result in the transaction 
being aborted.</td>
</tr><tr>
<td valign="top"><I>EnableCommit</I></td>
<td valign="top">Declares that the object's work isn't 
necessarily finished, but its transactional updates are in 
a consistent state. This method allows the transaction to be committed, but the object retains 
its state across method calls until it calls 
<I>SetComplete</I> or <I>SetAbort</I>, or until the transaction is completed.</td>
</tr><tr>
<td valign="top"><I>IsCallerInRole</I></td>
<td valign="top">Indicates whether the object's direct caller 
is in a specified role (either directly or as part of 
a group).</td>
</tr><tr>
<td valign="top"><I>IsInTransaction</I></td>
<td valign="top">Indicates whether the object is executing within a transaction.</td>
</tr><tr>
<td valign="top"><I>IsSecurityEnabled</I></td>
<td valign="top">Indicates whether security is enabled. 
MTS security is enabled unless the object is running in the client's process.</td>
</tr><tr>
<td valign="top"><I>Item</I></td>
<td valign="top">Returns a context object property.</td>
</tr><tr>
<td valign="top"><I>Security</I></td>
<td valign="top">Returns a reference to an object's <I>SecurityProperty</I> object.</td>
</tr><tr>
<td valign="top"><I>SetAbort</I></td>
<td valign="top">Declares that the object has completed its 
work and can be deactivated on returning from the currently executing method, but that its 
transactional updates are in an inconsistent state 
or that an unrecoverable error occurred. This means that the transaction in which the 
object was executing must be aborted. If any 
object executing within a transaction returns to 
its client after calling <I>SetAbort</I>, the entire 
transaction is doomed to abort.</td>
</tr><tr>
<td valign="top"><I>SetComplete</I></td>
<td valign="top">Declares that the object has completed its work and can be deactivated on returning from the currently executing method. 
For objects that are executing within the scope of a transaction, it also indicates that the 
object's transactional updates can be committed. When an object that is the root of a 
transaction calls <I>SetComplete</I>, MTS attempts to commit 
the transaction on return from the current method.</td>
</tr></table>

</P>
<P>Not all of these methods are available to all Microsoft Visual Studio 
development tools. Table 19-1 actually lists the methods available to Visual 
Basic. Visual C++ and Visual J++ gain access to the current object's context 
through the <I>IObjectContext</I><B> </B>interface, as we shall see later on. Active Server Pages 
has access to only two of the methods above: 
<I>SetComplete</I> and <I>SetAbort</I>.

</P>
<A NAME="354"><H2>Events</H2></A><P>Two events can occur after an 
<I>ObjectContext</I> method has executed: 
<I>OnTransactionAbort</I> and 
<I>OnTransactionCommit</I>.

</P>
<P>The <I>OnTransactionAbort</I> event occurs if the transaction is aborted. 
When the <I>OnTransactionAbort</I> event occurs, IIS will process the script's 
<I>OnTransactionAbort</I> subroutine, if it exists.

</P>
<P>As you might expect, the 
<I>OnTransactionCommit</I> event occurs after a 
transacted script's transaction commits. When the 
<I>OnTransactionCommit</I> event occurs, IIS will process the script's 
<I>OnTransactionCommit</I> subroutine, if it exists. 

</P>
<P>We'll see some examples of how to use these events within your ASP 
script later on in this chapter.

</P>
</BODY>
</HTML>




