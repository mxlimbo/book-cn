<HTML>
<HEAD>
<LINK REL=StyleSheet HREF="Library.css" TYPE="text/css">
<TITLE>Server Objects</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch10h.htm", "ch10j.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="177"><H1>Server Objects</H1></A>
<P>The ASP framework provides objects (and associated methods, events, 
and properties) that give information about the Web server and its 
environment, make processing forms easy and manageable, and provide a flexible system 
of data storage. You can roll all these abilities into a well-rounded, robust Web 
application that is easy to develop and maintain and is more extensible than 
you might have thought possible.</P>
<P>
The five built-in objects in the ASP framework are as follows:

</P>
<UL>
<P><LI><I>Application</I>
</LI>
</P>
<P><LI><I>     Request</I>
</LI>
</P>
<P><LI><I>     Response</I>
</LI>
</P>
<P><LI><I>     Server</I>
</LI>
</P>
<P><LI><I>Session</I>
</LI></P>
</UL>

<P>These objects are an essential part of the ASP framework, and as such 
they occur frequently in Visual InterDev development and throughout this book. 
In the following sections we'll cover the basics of these objects with particular 
focus on the <I>Request</I> and <I>Response</I> objects.

</P>
<P>Throughout the discussion you'll find that these objects have typical 
object-oriented features of methods, events, and properties. When a group of 
related properties for an object can be classified as a single unit, they are termed 
a <I>collection.</I> The <I>Application</I>, 
<I>Response</I>, and <I>Request</I> objects have 
collections, whereas the other objects have properties.

</P>
<A NAME="178"><H2>The <I>Application </I>Object</H2></A><P>The <I>Application</I> object can be used to share information among all users of 
your application. The application is defined as all the .asp files within the 
virtual directory and its subdirectories.

</P>
<P>The <I>Application</I> object has two methods named 
<I>Lock</I> and <I>Unlock</I>. Since the data is shared among users, these methods allow you to effectively lock 
and unlock access to the application object while you apply changes to its variables.

</P>
<P>The events that relate to the 
<I>Application</I> object are 
<I>Application_OnStart </I>and 
<I>Application_OnEnd</I>. These events are declared in the global.asa file, 
which is part of a Visual InterDev Web project.

</P>
<P>The syntax for setting a variable within the 
<I>Application</I> object is as follows:

</P>
<P><PRE>Application(&quot;<I>variable_name</I>&quot;) = <I>value</I>
</PRE>

</P>
<P>You can then reference the value of the variable as follows:

</P>
<P><PRE>MyVariable = Application(&quot;<I>variable_name</I>&quot;)
</PRE>

</P>
<P>The <I>Application</I> object also has two collections named 
<I>Contents</I> and <I>StaticObjects</I>. The 
<I>Contents</I> collection contains all of the variables that 
you've set within the <I>Application</I> object. The 
<I>StaticObjects</I> collection contains all of 
the application-level objects that have been declared with the &lt;OBJECT&gt; tag.

</P>
<A NAME="179"><H2>The <I>Response </I>Object</H2></A><P>The <I>Response</I> object is used to send information to the browser. It has 
collections, properties, and methods. In fact, the only collection it has is the 
<I>Cookies</I> collection, which can be used to set cookie values. This is the opposite of 
the <I>Cookies</I> collection in the 
<I>Request</I> object, which is used to read cookie 
values. (We'll discuss cookies later in this chapter.) In this section, 
we'll just take at look at some of the more common properties and methods such 
as the <I>Buffer</I>, <I>Expires</I>, and 
<I>ExpiresAbsolute</I> properties and the 
<I>Clear</I>, <I>End</I>, <I>Flush</I>, 
<I>Redirect</I>, and <I>Write</I> methods.

</P>
<P>The most common application of the 
<I>Response</I> object is to send string output for display in the browser. This can be done by simply using an 
equal sign (=) in front of the information to be sent or by using the 
<I>Response.Write</I> syntax, as you'll see in the following examples.

</P>
<P>In the first example, variables and values have been inserted into the 
HTML stream by starting the VBScript line with an equal sign:

</P>
<P><PRE>MyName = &quot;Ken Spencer&quot;
= &quot;Hello, my name is &quot; &amp; MyName
</PRE>

</P>
<P>The preceding syntax sends the following string to the browser:

</P>
<P><PRE>Hello, my name is Ken Spencer
</PRE>

</P>
<P>If you are familiar with Visual Basic, you might find this syntax a 
bit strange. It is unusual to start a line with an equal sign&#8212;it's an exception to 
the otherwise simple rules about how to use equal signs in Visual Basic. 
However, it isn't quite as strange as it seems. In the above example, starting the line 
with an equal sign is shorthand for

</P>
<P><PRE>MyName = &quot;Ken Spencer&quot;
Response.Write(&quot;Hello, my name is&quot; &amp; MyName)
</PRE>

</P>
<P>The above code uses the <I>Response</I> object and a method named 
<I>Write</I>. The <I>Write</I> method takes a string as an argument and writes it to the HTML 
stream, effectively writing it to the browser. That is exactly what is happening, and 
it makes perfect sense in the context of Visual Basic syntax. Because you 
often type <I>Response.Write</I>, VBScript just made it a little easier for you.

</P>
<P>The <I>Response</I> object sends output to the client. You will most often use 
the <I>Write</I> method and its associated &quot;equal sign first&quot; shorthand, but it's important 
to remember that the <I>Response</I> object has additional methods and properties as well.

</P>
<A NAME="180"><H3>Controlling the <I>Response </I>object's properties</H3></A><P>The <I>Response</I> object has a set of properties that you can use to adjust how 
ASP sends output to browsers. When the 
<I>Buffer</I> property is set to True, IIS 
collects or buffers all output destined for the browser. It holds on to it until all the 
server script code on the page finishes processing, at which time all the HTML is 
sent at once. This is useful because you might have code in your ASP that 
cancels output to the browser or that redirects the browser to a different page. 
Having IIS buffer the output to the browser saves time in these situations. If HTML 
were sent to the browser while your script is executing and you come to a point 
where you want to jump to another page, all the time it took to send the HTML 
across the Internet to that point would be wasted.

</P>
<P>After you decide to set buffering on the 
<I>Response</I> object to True, you can use the 
<I>Redirect</I> and <I>End</I> methods. 
<I>Redirect</I> lets you send a command to the browser that causes it to connect to a different URL. A good use of this is 
to direct users to a certain page on your Web site based on their input on a 
form, as shown in the following syntax:

</P>
<P><PRE>&lt;%
If Request.Form(&quot;age&quot;) &gt; 21 Then
    Response.Redirect &quot;http://www.mysite.com/GrownUps.asp&quot;
Else
    Response.Redirect &quot;http://www.mysite.com/Children.asp&quot;
End If
%&gt;
</PRE>

</P>
<P>The <I>End</I> method does just what it says. When you reach a 
<I>Response.End</I> statement in your script, script processing stops and whatever is in the 
buffer is sent to the browser. If you want to end the script and not send the output 
to the browser, you must first use the 
<I>Clear</I> method of the <I>Response</I> object to 
clear the buffer and then use the <I>End</I> method to end the script:

</P>
<P><PRE>&lt;%
If Request.Form(&quot;Attitude&quot;) = &quot;bad&quot; Then
    ' If the user has a bad attitude, then 
    ' stop processing the script and clear 
    ' the output that has been buffered to this point
    Response.Clear
    Response.End
End If
%&gt;
</PRE>

</P>
<P>When a page is sent to the browser, the page is usually cached on 
that machine so that the browser doesn't have to download the page the next 
time it's visited. Using the <I>Expires</I> property of the 
<I>Response</I> object, you can control how long a page is valid in the cache. If the user revisits the page in less 
than the number of minutes you set in the 
<I>Expires</I> property, the cached version is used; otherwise, a new version is downloaded.

</P>
<P><PRE>&lt;%
' This page is good only for one hour. After that,
' be sure to reload this page
Response.Expires = 60
%&gt;
</PRE>

</P>
<P>Sometimes you want to let a page be cached until a certain date or 
time. The <I>ExpiresAbsolute</I> property takes a date or a time value, at which time 
the cached version of the page expires.

</P>
<P><PRE>&lt;%
' Cache this page until the fourth of July, 2:00pm
Response.ExpiresAbsolute = #July 4, 1999 14:00#
%&gt;
</PRE>

</P>
<P>The date that <I>ExpiresAbsolute</I> takes is a standard VBScript date and/or 
time (hence the pound signs). You must have the correct time zone information 
set on your server because the time is converted to Greenwich Mean Time 
(GMT) before it is sent to the browser, ensuring that the time is accurate regardless 
of the client's location.

</P>
<A NAME="181"><H3>Saving data with cookies</H3></A><P>A cookie is a variable that you store on the user's machine so that it's 
available the next time the user logs onto your application. This is often 
advantageous. Cookies are a great way to maintain application information and 
preferences that are specific to a particular user. An example of this is the customizable 
Web site. Some Web sites let you set preferences according to your tastes. 
The Microsoft Network (MSN) has a home page that lets you set your favorite 
sites, the types of information you're interested in, and so forth. The site saves a 
cookie on your machine and then retrieves this cookie each time you hit the MSN 
site. MSN then has a way of knowing who you are, that you've visited the site 
before, and what your preferences are.

</P>
<P>The user is usually unaware that cookies are in use, and cookies have 
no adverse effect on the user's machine. In fact, hundreds of Web sites already 
use cookies, and most people who spend time browsing the Web have 
cookies stored on their machines. However, some browsers can be set to notify 
users that a cookie is being sent so the user can cancel cookie reception.

</P>
<P>To get cookies from the user, you use the 
<I>Cookies</I> collection in the <I>Request</I> object. Conversely, the 
<I>Response</I> object's <I>Cookies </I>collection allows you to 
set the cookie's properties. If the cookie does not exist, it is created. If it 
already exists, it takes the new value that is assigned to it.</P>
<P>
Here is the syntax for setting a cookie using the 
<I>Response</I> object:

</P>
<P><PRE>Response.Cookies(<I>cookie</I>)[(<I>key</I>)|.<I>attribute</I>] = <I>value</I>
</PRE>

</P>
<P>The <I>attribute</I> parameter specifies information about the cookie, such 
as its expiration date and whether it is secure. A secure cookie is encrypted 
when it is stored on the user's machine. Table 10-5 lists the available cookie attributes:

</P>
<P><B>Table 10-5.</B> <I>Cookie attributes.</I>
</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>Cookie Attribute</I></B></TH>  <TH VALIGN="TOP">   <B><I>Description</I></B></TH></TR>
<TR><TD VALIGN="TOP"><I>Expires</I>  </TD>  <TD VALIGN="TOP"> Write-only. The date on which the cookie expires.</TD></TR>
<TR><TD VALIGN="TOP"><I>Domain</I>   </TD> <TD VALIGN="TOP"> Write-only. If specified, the cookie is sent only to requests to this domain.</TD></TR>
<TR><TD VALIGN="TOP"><I>Path</I>   </TD><TD VALIGN="TOP">  Write-only. If specified, the cookie is sent only to requests to this path.</TD></TR>
<TR><TD VALIGN="TOP"><I>Secure</I>    </TD> <TD VALIGN="TOP">Write-only. Specifies whether the cookie is secure.</TD></TR>
<TR><TD VALIGN="TOP"><I>HasKeys</I> </TD> <TD VALIGN="TOP">   Read-only. Specifies whether the cookie contains keys.</TD></TR>
</TABLE>


</P>
<P>You can create two types of cookie. The first is a single-value cookie: 
one cookie, one value. For example, you can write a single value to the 
cookie <I>Username</I> using the following code:

</P>
<P><PRE>&lt;%
' Simple cookie named Username, with 
' only one value, &quot;Smith&quot;
Response.Cookies(&quot;Username&quot;) = &quot;Smith&quot;
%&gt;
</PRE>

</P>
<P>You can also specify a key when assigning the value. This creates 
the second type of cookie&#8212;a dictionary. A dictionary is a cookie with an array 
of keys in which each key has a unique value. The following code writes 
multiple values to the dictionary 
<I>CarAttributes</I>:

</P>
<P><PRE>&lt;%
' Cookie Dictionary called CarAttributes, with keys
' named &quot;color&quot;, &quot;style&quot;, and &quot;brand&quot;
Response.Cookies(&quot;CarAttributes&quot;)(&quot;color&quot;) = &quot;Red&quot;
Response.Cookies(&quot;CarAttributes&quot;)(&quot;style&quot;) = &quot;Sports&quot;
Response.Cookies(&quot;CarAttributes&quot;)(&quot;brand&quot;) = &quot;ACME&quot;
%&gt;
</PRE>

</P>
<P>As mentioned earlier, if a cookie exists, the value is discarded when 
you assign a new value. If you assign a value to a cookie dictionary, you lose 
all the keys in that dictionary. If you assign a key value to a simple 
one-value cookie, you lose the cookie value. It is important to know what type of 
cookie you're using before you set its value. Often you'll know the type because 
you set the value of the cookie in the same application. But if you're not sure 
of the type, you can check the <I>HasKeys</I> attribute. The 
<I>HasKeys</I> attribute is True for a dictionary and False for a single-value cookie.

</P>
<A NAME="182"><H2>The <I>Request </I>Object</H2></A><P>One of the ways information can be passed from a browser to the server is 
via an HTTP request. The <I>Request</I> object retrieves information sent via an 
HTTP request from the browser. Five types of variables can be passed to your 
application through the <I>Request</I> object. Each type has its own collection in the 
<I>Request</I> object. They are:

</P>
<UL>
<P><LI><B><I>     </I>QueryString</B> The values of variables in the HTTP query string
</LI>
</P>
<P><LI><B><I>     </I>Form</B> The values of form elements in the HTTP request body
</LI>
</P>
<P><LI><B><I>     </I>Cookies</B> The values of cookies sent in the HTTP request
</LI>
</P>
<P><LI><B><I>     </I>ServerVariables</B> The values of predetermined environment 
variables
</LI>
</P>
<P><LI><B><I>     </I>ClientCertificate</B> The values of fields stored in the client 
certificate that is sent in the HTTP request
</LI></P>
</UL>

<P>You can access variables by referring to the 
<I>Request</I> object, then the collection, and then the particular variable you're trying to access. When retrieving 
a variable, naming the collection is optional. If you don't include the 
collection, all the collections are searched for the variable that you're looking for, in 
the above order. The syntax is:

</P>
<P><PRE>Request[.<I>Collection</I>](<I>variable</I>)
</PRE>

</P>
<P>It's good practice to use the name of the collection even when it's 
optional. There is less chance for confusion when someone else reads your code or 
when you return to the code after not visiting it for a long time.

</P>
<A NAME="183"><H3><I>QueryString </I>and <I>Form</I></H3></A><P>The<I> QueryString</I> and <I>Form</I> collections of the 
<I>Request</I> object allow you to access the values of variables in the HTTP query string and the values of form 
elements in the HTTP request body, respectively.

</P>
<A NAME="184"><H3>Reading data from cookies</H3></A><P>Cookies are written to the client machine using the 
<I>Response </I>object. The <I>Cookies</I> collection of the 
<I>Request</I> object lets you retrieve the cookies from the 
client machine. The syntax for using the 
<I>Cookies</I> collection is:

</P>
<P><PRE>Request.Cookies(<I>cookie</I>)[(<I>key</I>)|.<I>attribute</I>]
</PRE>

</P>
<P>As the syntax implies, each cookie can be an array, or more 
appropriately, a collection of values. Each value has a name called a key.

</P>
<A NAME="185"><H3><I>ServerVariables</I></H3></A><P>This collection consists of several predefined server environment variables 
that can prove handy in your ASP code. You generally use this collection to 
read information about the server or the user's browser. The variables shown 
in Table 10-6 are read-only. 
</P>
<P>
<B>Table 10-6.</B> <I>Server environment variables.</I>
</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR>
<TH VALIGN="TOP"><B><I>HTTP Variable </I></B></TH>
<TH VALIGN="TOP"><B><I>Description </I></B></TH>
</TR>
<TR>
<TD VALIGN="TOP"><I>ALL_HTTP</I></TD>
<TD VALIGN="TOP">All HTTP headers sent by the client.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>ALL_RAW</I></TD>
<TD VALIGN="TOP">Retrieves all headers in the raw form. The difference between <I>ALL_RAW</I> and <I>ALL_HTTP</I> is that <I>ALL_HTTP</I> places an HTTP_ prefix before the header name and the header name is always capitalized. In <I>ALL_RAW</I>, the header name and values appear as the client sets them.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>APPL_MD_PATH</I></TD>
<TD VALIGN="TOP">Retrieves the metabase path of the Web Application Manager (WAM) for the ISAPI DLL.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>APPL_PHYSICAL_ PATH</I></TD>
<TD VALIGN="TOP">Retrieves the physical path corresponding to the metabase path. IIS converts the <I>APPL_MD_PATH</I> to the physical (directory) path to return this value.</TD>
</TR>
<TR>
<TD VALIGN="TOP"><I>AUTH_ PASSWORD</I></TD>
<TD VALIGN="TOP">The value entered in the client's authentication dialog box. This variable is only available if Basic authentication is used.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>AUTH_TYPE </I></TD>
<TD VALIGN="TOP">The authentication method the server uses to validate users when they try to access a protected script. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>AUTH_USER</I></TD>
<TD VALIGN="TOP">Raw authenticated user name. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_COOKIE</I></TD>
<TD VALIGN="TOP">Unique ID for client certificate, returned as a string. Can be used as a signature for the whole client certificate. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_FLAGS</I></TD>
<TD VALIGN="TOP">bit0 is set to 1 if the client certificate is present.</TD>
</TR>

<TR>
<TD VALIGN="TOP">&nbsp;</TD>
<TD VALIGN="TOP">bit1 is set to 1 if the Certifying Authority of the client certificate is invalid (not in the list of recognized CA on the server).</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_ISSUER</I></TD>
<TD VALIGN="TOP">Issuer field of the client certificate (O=MS, OU=IAS, CN=user name, C=USA).</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_KEYSIZE</I></TD>
<TD VALIGN="TOP">Number of bits in Secure Sockets Layer connection key size. For example, 128.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_SECRETKEYSIZE</I></TD>
<TD VALIGN="TOP">Number of bits in server certificate private key. For example, 1024.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_SERIALNUMBER</I></TD>
<TD VALIGN="TOP">Serial number field of the client certificate. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_SERVER_ISSUER</I></TD>
<TD VALIGN="TOP">Issuer field of the server certificate.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_SERVER_SUBJECT</I></TD>
<TD VALIGN="TOP">Subject field of the server certificate.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CERT_SUBJECT</I></TD>
<TD VALIGN="TOP">Subject field of the client certificate.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CONTENT_LENGTH </I></TD>
<TD VALIGN="TOP">The length of the content as given by the client.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>CONTENT_TYPE </I></TD>
<TD VALIGN="TOP">The data type of the content. Used with queries that have attached information, such as HTTP POST and PUT.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>GATEWAY_INTERFACE </I></TD>
<TD VALIGN="TOP">The revision of the CGI specification used by the server. Format: CGI/revision.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTP_&lt;HeaderName&gt; </I></TD>
<TD VALIGN="TOP">The value stored in the header HeaderName. Any header other than those listed in this table must be prefixed by HTTP_ in order for Request.ServerVariables to retrieve its value.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTPS</I></TD>
<TD VALIGN="TOP">Returns ON if the request came in through secure channel (SSL) or it returns OFF if the request is for a nonsecure channel.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTPS_KEYSIZE</I></TD>
<TD VALIGN="TOP">Number of bits in Secure Sockets Layer connection key size. For example, 128.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTPS_SECRETKEYSIZE</I></TD>
<TD VALIGN="TOP">Number of bits in server certificate private key. For example, 1024.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTPS_SERVER_ISSUER</I></TD>
<TD VALIGN="TOP">Issuer field of the server certificate.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>HTTPS_SERVER_SUBJECT</I></TD>
<TD VALIGN="TOP">Subject field of the server certificate.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>INSTANCE_ID</I></TD>
<TD VALIGN="TOP">The ID for the IIS instance in textual format. If the instance ID is 1, it appears as a string. You can use this variable to retrieve the ID of the Web-server instance (in the metabase) to which the request belongs.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>INSTANCE_META_PATH</I></TD>
<TD VALIGN="TOP">The metabase path for the instance of IIS that responds to the request.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>LOCAL_ADDR</I></TD>
<TD VALIGN="TOP">Returns the Server Address on which the request came in. This is important on multihomed machines where there can be multiple IP addresses bound to a machine and you want to find out which address the request used.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>LOGON_USER </I></TD>
<TD VALIGN="TOP">The Windows NT account that the user is logged into.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>PATH_INFO </I></TD>
<TD VALIGN="TOP">Extra path information as given by the client. You can access scripts by using their virtual path and the <I>PATH_INFO</I> server variable. If this information comes from a URL, the server decodes it before passing it to the CGI script.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>PATH_TRANSLATED</I></TD>
<TD VALIGN="TOP">A translated version of <I>PATH_INFO</I> that takes the path and performs any necessary virtual-to-physical mapping. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>QUERY_STRING </I></TD>
<TD VALIGN="TOP">Query information stored in the string following the question mark in the HTTP request.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>REMOTE_ADDR </I></TD>
<TD VALIGN="TOP">The IP address of the remote host making the request. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>REMOTE_HOST </I></TD>
<TD VALIGN="TOP">The name of the host making the request. If the server does not have this information, it sets <I>REMOTE_ADDR</I> and leaves this empty.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>REMOTE_USER</I></TD>
<TD VALIGN="TOP">Unmapped user-name string sent in by the user. This is the name that is really sent by the user as opposed to the ones that are modified by any authentication filter installed on the server.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>REQUEST_METHOD </I></TD>
<TD VALIGN="TOP">The method used to make the request. For HTTP, this is GET, HEAD, POST, and so on.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SCRIPT_NAME </I></TD>
<TD VALIGN="TOP">A virtual path to the script being executed. This is used for self-referencing URLs.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SERVER_NAME </I></TD>
<TD VALIGN="TOP">The server's host name, DNS alias, or IP address as it would appear in a self- referencing URL.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SERVER_PORT </I></TD>
<TD VALIGN="TOP">The port number to which the request was sent.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SERVER_PORT_SECURE </I></TD>
<TD VALIGN="TOP">A string that contains either 0 or 1. If the request is being handled on the secure port, this is 1; otherwise, it is 0.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SERVER_PROTOCOL </I></TD>
<TD VALIGN="TOP">The name and revision of the request information protocol. Format: protocol/revision. </TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>SERVER_SOFTWARE </I></TD>
<TD VALIGN="TOP">The name and version of the server software answering the request (and running the gateway). Format: name/version.</TD>
</TR>

<TR>
<TD VALIGN="TOP"><I>URL</I></TD>
<TD VALIGN="TOP">Gives the base portion of the URL.</TD>
</TR>
</TABLE>

</P>
<P>The following code loops through the entire collection of variables 
and outputs them into an HTML table:

</P>
<P><PRE>&lt;TABLE&gt;
    &lt;TR&gt;
        &lt;TD&gt;&lt;B&gt;Server Variable&lt;/B&gt;&lt;/TD&gt;
        &lt;TD&gt;&lt;B&gt;Value&lt;/B&gt;&lt;/TD&gt;
    &lt;/TR&gt;
&lt;% For Each name In Request.ServerVariables %&gt; 
    &lt;TR&gt;
        &lt;TD&gt;&lt;%= name %&gt; &lt;/TD&gt;
        &lt;TD&gt;&lt;%= Request.ServerVariables(name) %&gt; &lt;/TD&gt;
    &lt;/TR&gt;
&lt;% Next %&gt;
&lt;/TABLE&gt;
</PRE>

</P>
<P>This code is similar to the code in the ASP documentation, except the 
&lt;/TABLE&gt; tag has been moved after the 
<I>Next</I> statement so the code works correctly. This code demonstrates how you can walk through a collection using 
<I>For Each</I> and provides a good example of how to retrieve all the server variables.

</P>
<A NAME="186"><H3><I>ClientCertificate</I></H3></A><P>If the Web browser is using Secure Sockets Layer (SSL) to connect to your 
Web server and the server requests certification, a series of client certificate 
objects in this collection will contain information about the client's certification. 
You can tell when an SSL connection is being used because the address in 
the browser begins with <I>https://</I> instead of 
<I>http://</I>.</P>
<P>
The syntax for retrieving these certificates is

</P>
<P><PRE>Request.ClientCertificate(<I>Key</I>[<I>Subfield</I>] )
</PRE>

</P>
<P>Table 10-7 lists the possible key values, along with their uses.
</P>
<P><B>Table 10-7.</B> <I>Client certificate key values.</I>
</P>
<P>
<TABLE WIDTH="95%" CELLPADDING="5">
<TR><TH VALIGN="TOP"><B><I>Key</I></B></TH> <TH VALIGN="TOP"><B><I>Use</I></B></TH></TR>
<TR><TD VALIGN="TOP"><I>Subject</I></TD>  <TD VALIGN="TOP">A list of values that contain information about the subject of the certificate. Subfields are used with this key to extract the individual values from the list.</TD></TR>
<TR><TD VALIGN="TOP"><I>Issuer</I></TD><TD VALIGN="TOP">A list of values that contain information about the issuer of the certificate. Subfields are used with this key to extract the individual values from the list.</TD></TR>
<TR><TD VALIGN="TOP"><I>ValidFrom</I></TD> <TD VALIGN="TOP">A valid date that indicates when the certificate becomes active.</TD></TR>
<TR><TD VALIGN="TOP"><I>ValidUntil</I></TD> <TD VALIGN="TOP">A valid date that indicates when the certificate expires.</TD></TR>
<TR><TD VALIGN="TOP"><I>SerialNumber</I></TD><TD VALIGN="TOP">A string that represents the serial number. This string is a series of hexadecimal bytes separated by hyphens.</TD></TR>
<TR><TD VALIGN="TOP"><I>Certificate</I></TD> <TD VALIGN="TOP">The entire certificate (all the previous keys). It is represented in a binary format, so it's best to use the other keys to attain the values.</TD></TR>
<TR><TD VALIGN="TOP"><I>Flags</I></TD> <TD VALIGN="TOP">A set of flags that provide additional client certificate information. The following flags can be set:
<BR>
 <I>ceCertPresent</I>&#8212;A client certificate is present.
 <BR>
  <I>ceUnrecognizedIssuer</I>&#8212;The last certification in this chain is from an unknown issuer.</TD></TR>
</TABLE>


</P>
<P>A variety of SubField values are available to extract specific 
information from the Subject and Issuer keys. A complete description of SubField values 
is available in the Object Reference in the ASP online documentation.

</P>
<A NAME="187"><H3>Retrieving data with cookies: the <I>Request </I>object</H3></A><P>The <I>Cookies</I> collection of the 
<I>Request</I> object lets you retrieve the cookies 
from the client machine. The <I>Cookies</I> collection is a collection of the cookie 
values stored on the user's machine.

</P>
<P>The syntax for using the <I>Cookies</I> collection of the 
<I>Request</I> object is

</P>
<P><PRE>Request.Cookies(<I>cookie</I>)[(<I>key</I>)|.<I>attribute</I>]
</PRE>

</P>
<P>As the syntax implies, each cookie can be an array, or more 
appropriately, a collection of values. Each value has a name, called a 
<I>key</I>. You can check a cookie to see if it has simply one value or if it has more than one key&#8212;each 
of which has a value&#8212;by checking the cookie's 
<I>HasKeys</I> property. <I>HasKeys</I> will be either True or False, so you can use it in an 
<I>If&#8230;Then...Else</I> statement:

</P>
<P><PRE>&lt;% If Request.Cookies(&quot;MyCookie&quot;).HasKeys Then %&gt;
MyCookie has the following values:
&lt;P&gt;
&lt;% For Each key in Request.Cookies(&quot;MyCookie&quot;) %&gt;
&lt;% = key %&gt; has the value 
&lt;% = Request.Cookies(&quot;MyCookie&quot;)(key) %&gt;
&lt;P&gt;
&lt;% Next %&gt;
&lt;% Else %&gt;
My Cookie's value is 
&lt;% = Request.Cookies(&quot;MyCookie&quot;) %&gt;
&lt;% End If %&gt;
</PRE>

</P>
<P>First you use the cookie's <I>HasKeys</I> property in the 
<I>If</I> statement. If there are keys in the cookie, you use the 
<I>For Each</I> statement to iterate through the collection of keys and print the value of each one. You can then use the 
<I>For Each</I> statement to loop through all the collections in the 
<I>Request</I> object, not just the cookies. This technique is useful if you don't know how many objects 
are in a collection.</P>
<P>
If you do know what you're looking for in a collection, you might be 
better off referring to the exact item that you need in the collection rather than 
looping though them all with the <I>For Each</I> statement.

</P>
<A NAME="188"><H2>The <I>Server </I>Object</H2></A><P>The <I>Server</I> object is exactly what its name implies. It provides methods 
and properties that let you interact with the actual machine that your application 
is running on&#8212;namely, the Web server.</P>
<P>
The <I>Server</I> object has a 
<I>ScriptTimeout</I> property and the following 
four methods: <I>CreateObject</I>, 
<I>HTMLEncode</I>, <I>MapPath</I>, and 
<I>URLEncode</I>.</P>
<P>
While only a few methods and properties are available in the 
<I>Server</I> object, they are extremely useful. The 
<I>Server</I> object opens the door to using server-side ActiveX components within your Web applications. It lets 
you instantiate components in your Web application that you've written in 
Visual Basic, Visual C++, or any other development environment that can create 
COM components.</P>
<P>
The <I>CreateObject</I> method of the 
<I>Server</I> object is probably the most important method of any built-in ASP object. By passing it the Programmatic 
ID (ProgID) of a server component, you create an instance of that component 
and assign an object variable to it.</P>
<P>
You can create objects for any COM component on your system, but 
you cannot create instances of the objects that are built into ASP. For 
instance, you can't create a <I>Session</I> object using this syntax. You can, however, take 
advantage of the five server-side ActiveX components that are supplied with ASP:

</P>
<UL>
<P><LI>Ad Rotator
</LI>
</P>
<P><LI>Browser Capabilities
</LI>
</P>
<P><LI>Database Access
</LI>
</P>
<P><LI>Content Linking
</LI>
</P>
<P><LI>TextStream
</LI></P>
</UL>

<A NAME="189"><H2>The <I>Session </I>Object</H2></A><P>The <I>Session</I> object is similar to the 
<I>Application</I> object in that it also contains events within the global.asa file. Unlike the 
<I>Application</I> object, however, the 
<I>Session</I> object stores information for a particular user session. The 
<I>Session</I> object persists for the entire session and thus provides a very elegant solution to 
the common persistence-of-state problem&#8212;when you need to keep track of a 
user from one web page to the next, as in a &quot;shopping cart&quot; type of application. 
This is difficult to do given the stateless nature of the HTTP protocol.

</P>
<P>The syntax for setting a variable within the <I>Session</I> object is as follows:

</P>
<P><PRE>Session(&quot;<I>variable_name</I>&quot;) = <I>value</I>
</PRE>

</P>
<P>You can then reference the value of the variable as follows:

</P>
<P><PRE>MyVariable = Session(&quot;<I>variable_name</I>&quot;)
</PRE>

</P>
</BODY>
</HTML>




