<html>
<head>
<TITLE>A Brief History of Persistence in ADO</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch13a.htm">[Previous]</A> <A HREF="ch13c.htm">[Next]</A><P>

<A NAME="358"><H1>A Brief History of Persistence in ADO</H1></A>

<p>In ADO 2.0, the ADO development team added a <i>Save</i> method to
the Recordset object so that you could write code that looks like
this:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strSQL = &quot;SELECT * FROM Orders&quot;
rsOrders.CursorLocation = adUseClient
rsOrders.Open strSQL, cnDatabase, adOpenStatic, _
              adLockBatchOptimistic, adCmdText
'Disconnect from the database.
Set rsOrders.ActiveConnection = Nothing

'Modify the data.
<img src="images/grayvellip.JPG" width=3 height=13 border="0">

'Save the modifications and close the Recordset.
rsOrders.Save strPathToFile, adPersistADTG
rsOrders.Close

'At this point the user closes and reopens the application.
<img src="images/grayvellip.JPG" width=3 height=13 border="0">

'Open the Recordset, reset the connection, and update the database.
rsOrders.Open strPathToFile, , adOpenStatic, _
              adLockBatchOptimistic, adCmdFile
Set rsOrders.ActiveConnection = cnDatabase
rsOrders.UpdateBatch
</pre>
</td></tr></table>
</p>

<p>This code performs the following actions:</p>

<ol>
<p><li> Retrieves data from the Orders table in the database</li></p>

<p><li> Disconnects the Recordset object from the Connection object</li></p>

<p><li> Modifies the data in the Recordset</li></p>

<p><li> Saves the data to a file, and closes the Recordset</li></p>

<p><li> Reopens the Recordset from the modified file</li></p>

<p><li> Reassociates the Recordset with the Connection object</li></p>

<p><li> Submits the pending changes to the database</li></p>
</ol>

<p>Of course, you'd want to create separate code modules to group
specific actions, but I think you get the idea: ADO saves you time by
simplifying this potentially complex scenario.</p>

<p>In ADO 2.1, they added a second format for the data: eXtensible
Markup Language (XML). Simply use the optional <i>PersistFormat</i>
parameter on the <i>Save</i> method to store your data in XML format,
as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
rsOrders.Save strPathToFile, adPersistXML
</pre>
</td></tr></table>
</p>

<p>Now how much would you pay? Don't answer yet. Just look what
else you get! ADO 2.5 brings even more functionality to the <i>Save</i>
method. No longer do you need to store your data in a file; you can now
save the data in a stream. You can use the <i>Save</i> method with the
new ADO Stream object or with the Response object, which is available
through the Active Server Pages (ASP) object model. Implementation
examples using the Stream and Response objects, respectively, are shown
here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Use the ADO Stream object with the Save method.
Set stmData = New ADODB.Stream
rsOrders.Save stmData, adPersistADTG

'Use the ASP Response object with the Save method.
rsOrders.Save Response, adPersistADTG
</pre>
</td></tr></table>
</p>

</BODY>
</HTML>






