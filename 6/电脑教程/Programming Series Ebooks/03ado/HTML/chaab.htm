<html>
<head>
<TITLE>ADOX</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="chaaa.htm">[Previous]</A> <A HREF="chaac.htm">[Next]</A><P>

<A NAME="441"><H1>ADOX</H1></A>

<p>ADOX adds data definition language features previously available
only in DAO. You can use ADOX objects to create, modify, or examine
tables, queries, and security settings for databases. Rather than
having to create tables with action queries such as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
CREATE TABLE Customers 
       (CustomerID varchar(5) NOT NULL CONSTRAINT PK_Customers PRIMARY KEY,
       CompanyName varchar(40), BalanceDue money)
</pre>
</td></tr></table>
</p>

<p>you can use code such as the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Create a new Table object.
Set tblCustomers = New ADOX.Table
With tblCustomers
    .Name = &quot;Customers&quot;
    'Specify column information.
    .Columns.Append &quot;CustomerID&quot;, adVarChar, 5
    .Columns.Append &quot;CompanyName&quot;, adVarChar, 40
    .Columns.Append &quot;BalanceDue&quot;, adCurrency
    'Add the primary key.
    .Keys.Append &quot;PK_Customers&quot;, adKeyPrimary, &quot;CustomerID&quot;
End With
'Add the new table to your database.
catDatabase.Tables.Append tblCustomers
</pre>
</td></tr></table>
</p>

<A NAME="442"><H2>What a Great Idea!</H2></A>

<p>I don't mind admitting it. I love the concept of ADOX. That
might not sound like the most glowing recommendation, but in a moment,
you'll see some of the benefits and limitations of the ADOX
implementation.</p>

<p>Some of the Microsoft Visual Studio 6 development tools allow you to
generate new tables, views, and stored procedures for Microsoft SQL
Server and Oracle databases. The database tools, including the DataView
window, allow you to fill out a grid with information about each column
and generate a CREATE TABLE query to your database that creates the
table. Users often ask why these features don't work with other
databases.</p>

<p>Each database has its own data definition language quirks. For
example, a text field in SQL Server is called a long field in Oracle
and a memo field in Access. These differences make it difficult to
build a generic tool to generate DDL queries that work on all
databases. The DataView window must include SQL Server-specific and
Oracle-specific code that accepts input and generates the appropriate
DDL query. But wouldn't it be easier if you could generate
database-independent code to build tables and queries?</p>

<p>ADOX is designed to let you do exactly that. You don't have to
know what SQL Server, Oracle, and Access call their large text fields.
You simply have to remember what ADO calls them: adLongVarChar. But
wait! When you use ADOX, who generates the database-specific DDL
queries? ADOX doesn't inherently know all the DDL idiosyncrasies of
each database, and ADOX isn't like the Visual Studio database tools
that are designed to create and modify objects in just two
databases&#8212;SQL Server and Oracle.</p>

<p>It's actually the OLE DB provider that generates the DDL
queries. Think of ADOX as a simple standard that asks the OLE DB
provider to generate DDL queries. ADOX is merely a middleman.
That's why I think ADOX is such a great idea. It provides the
structure but leaves it up to the OLE DB provider to offer the
functionality.</p>

<A NAME="443"><H2>Now for the Bad News</H2></A>

<p>Unfortunately, this means that in order to use ADOX to interact with
your database, you need to use an OLE DB provider that supports ADOX
interfaces. At the time of this writing, only two OLE DB providers
support a significant portion of the features available in ADOX: the
OLE DB Provider For SQL Server and the Jet 4.0 OLE DB Provider.</p>

<p>The Jet 4.0 OLE DB Provider supports almost all of ADOX. You can use
this provider with ADOX to create an Access 2000 database and populate
it with tables, queries, users, and groups. However, you cannot add
Access-specific objects such as reports, forms, and modules by using
ADOX. There's a sample titled Make Northwind on the companion CD
that creates an Access 2000 database using ADOX and the Jet 4.0 OLE DB
Provider. This sample is nearly identical to the Northwind database
included with Access and Microsoft Visual Basic, except that it
doesn't include the forms, reports, and modules. Discounting those
objects, I'd say that using the Jet 4.0 OLE DB Provider with ADOX
allows you to create about 95 percent of the functionality of an Access
2000 database. The only significant feature the Jet 4.0 OLE DB Provider
with ADOX lacks is the ability to create new security databases
(.mdw).</p>

<p>The SQL Server OLE DB provider supports a smaller subset of the ADOX
features. I've yet to find definitive documentation stating exactly
which ADOX features this provider does support or outlining any plans
to add more ADOX functionality to the provider. However, here's
what I have learned through my own experiences:</p>

<ul>
<p><li> You cannot access the Users, Groups, and Views collections, and
you cannot create Catalogs (databases).</li></p>

<p><li> Using ADOX with the SQL Server OLE DB provider lets you access
about two-thirds of the functionality of a SQL Server database.</li></p>
</ul>



<A NAME="444"><H2>ADOX Object Model</H2></A>

<p>Unless you plan to interact with only Access databases, I don't
recommend using ADOX. For that reason, I won't cover every property
and method of every object in the ADOX hierarchy. Instead, I'll
cover the highlights of each object and collection in the ADOX object
model, shown in Figure A-1. Version 2.5 of the ADOX objects can be
accessed in Visual Basic by selecting Microsoft ADO Ext. 2.5 For DDL
And Security in the References dialog box.</p>

<p>
<A HREF="javascript:fullSize('FAPno01x.htm')"> <img src="images/FAPno01.JPG" width=404 height=253 border=0 ALT = "Click to view at full size."> </A>
</p><p>
<!-- caption --><b>Figure A-1</b> <i>The ADOX object model.</i><!-- /caption -->
</p>


<A NAME="445"><H3>Catalog object</H3></A>

<p>The ADOX Catalog object corresponds to your database. To connect to
an existing database, use the Catalog's ActiveConnection property
just as you would for the Connection object. Set the property to a
valid connection string or a Connection object.</p>

<p>You can use the Catalog object to create new Access databases with
the Jet 4.0 OLE DB Provider. Call the <i>Create</i> method on the
Catalog object and supply a connection string that includes the path to
the Access database you want to create, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strPathToFile = &quot;C:\Windows\Desktop\New.mdb&quot;
strConn = &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
          &quot;Data Source=&quot; &amp; strPathToFile &amp; &quot;;&quot;
Set cat = New ADOX.Catalog
cat.Create strConn
</pre>
</td></tr></table>
</p>

<p>By default, the Jet 4.0 OLE DB Provider will create an Access 2000
database (Jet 4.0). You can specify that you want to create a Jet
3.<i>x</i> (Access 95 and Access 97) database by using the Jet
OLEDB:Engine Type property in the connection string, as follows:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strPathToFile = &quot;C:\Windows\Desktop\New97.mdb&quot;
strConn = &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
          &quot;Data Source=&quot; &amp; strPathToFile &amp; &quot;;&quot; &amp; _
          &quot;Jet OLEDB:Engine Type=4;&quot;
Set cat = New ADOX.Catalog
cat.Create strConn
</pre>
</td></tr></table>
</p>

<p>You can use the Catalog object to determine and specify which user
owns an object by calling the <i>GetObjectOwner</i> and <i>
SetObjectOwner</i> methods, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Display the current owner of the Customers table.
MsgBox cat.GetObjectOwner(&quot;Customers&quot;, adPermObjTable)

'Set JoeUser to the owner of the Customers table.
Call cat.SetObjectOwner(&quot;Customers&quot;, adPermObjTable, &quot;JoeUser&quot;)
</pre>
</td></tr></table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Keep in mind that when you're using ADOX security
features (the User and Group objects and the <i>GetObjectOwner</i> and
<i>SetObjectOwner</i> methods) you'll need to specify the location
of the system database file, which is usually named
system.mdw.</blockquote></div>
</p>

<p>The Catalog object also exposes the Tables, Views, Procedures,
Users, and Groups collections.</p>

<A NAME="446"><H3>Table object and Tables collection</H3></A>

<p>As its name indicates, the Table object refers to a table in your
database. The Table object exposes the Columns, Indexes, Keys, and
Properties collections. There are two properties of the Table object
that you should be aware of: Name and Type.</p>

<p>Before you try to append a Table object to a Catalog's Tables
collection, be sure you set the Name property on the Table object. You
might find more entries in a Catalog object's Tables collection
than expected. Items in the collection can include views and system
tables. To determine which type of object an item is, check the Table
object's Type property, which will return a string. Checking the
Access Northwind database, you'll see Table objects whose Type
property returns TABLE, VIEW, SYSTEM TABLE, and ACCESS TABLE.</p>

<p>To see some sample code that shows how to create a Table object,
check out the &quot;<A HREF="chaab.htm#450">Property object and Properties collection</A>&quot;
section.</p>

<A NAME="447"><H3>Column object and Columns collection</H3></A>

<p>The Column object corresponds to a column in your table. It exposes
many of the same properties that the ADO Field object exposes:
Attributes, DefinedSize, Name, NumericScale, Precision, and Type.</p>

<p>The Column object's RelatedColumn property is applicable only to
Column objects in the Columns collection of a Key object and is
designed for foreign keys. You'll see how to use the RelatedColumn
property shortly when we cover the Property object and the Properties
collection.</p>

<p>The SortOrder property applies only to Column objects in the Columns
collection of an Index object and controls whether entries in an Index
object are stored in ascending or descending order.</p>

<p>There are two ways to use a Table object's Columns collection to
append a Column object. First you can create a Column object, set its
properties, and then append it to the Columns collection, as shown
here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set colCustomerID = New ADOX.Column
colCustomerID.Name = &quot;CustomerID&quot;
colCustomerID.Type = adVarWChar
colCustomerID.Size = 5
tblCustomers.Columns.Append colCustomerID
</pre>
</td></tr></table>
</p>

<p>The <i>Append</i> method on the Columns collection accepts a Variant
as its first parameter. You can pass a Column object into this
parameter as just shown.</p>

<p>A second way to append a Column object is by passing to the <i>
Append</i> method a string that contains the name of the new Column
object you want to create, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
tblCustomers.Columns.Append &quot;CustomerID&quot;, adVarWChar, 5
</pre>
</td></tr></table>
</p>

<p>When you use the <i>Append</i> method in this fashion, use the
second parameter to specify the data type for the new Column object.
The third parameter is optional and is used to specify the size of the
new column if it's a variable-sized data type such as a character
or binary field.</p>

<A NAME="448"><H3>Key object and Keys collection</H3></A>

<p>The Key object corresponds to a primary, unique, or foreign key (or
constraint) on a table. The Type property controls what type of key the
object is. The Key object's Columns collection contains the Column
object that the key references.</p>

<p>For foreign keys, the RelatedTable property refers to the name of
the related table. Use the DeleteRule or UpdateRule property to control
what occurs when you delete or modify the primary key value of a row in
the parent table of a relationship. The DeleteRule and UpdateRule
properties are updatable only before you append the Key object to the
Keys collection.</p>

<p>The <i>Append</i> method on the Keys collection is similar to the
Columns collection's <i>Append</i> method. You can append a Key
object to the Keys collection with code such as</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set keyPrimary = New ADOX.Key
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
tblOrders.Keys.Append keyPrimary
</pre>
</td></tr></table>
</p>

<p>You can also use the <i>Append</i> method to create a new Key object
and add it to the Keys collection in one call, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
tblOrders.Keys.Append &quot;PK_Orders&quot;, adKeyPrimary, &quot;OrderID&quot;
</pre>
</td></tr></table>
</p>

<p>The first parameter specifies the name of the Key object. The second
parameter corresponds to the Key object's Type property, and the
third parameter corresponds to the name of the Column object referenced
by the Key object. This syntax comes in handy when you're creating
a primary key or a unique key.</p>

<p>But if you plan to create a foreign key, you'll need to specify
the related table and corresponding column. Use the fourth and fifth
parameters on the <i>Append</i> method to supply this information, as
shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
tblOrders.Keys.Append &quot;FK_Orders_Employee&quot;, adKeyForeign, &quot;EmployeeID&quot;, _
                      &quot;Employees&quot;, &quot;EmployeeID&quot;
</pre>
</td></tr></table>
</p>

<A NAME="449"><H3>Index object and Indexes collection</H3></A>

<p>To add an index to a table, create an Index object. You can control
whether Null values are allowed in the index by setting the IndexNulls
property to a value in AllowNullsEnum. The default value for IndexNulls
is adIndexNullsDisallow. The Clustered property accepts a Boolean value
that controls whether the index is clustered; this property is False by
default. To control whether the entries in the index are unique, set
the Unique property on the Index object. This property is set to False
by default. The Clustered and Unique properties are read-only once
you've appended the Index object to the Indexes collection.</p>

<p>The Index object exposes two collections, Columns and Properties.
The Columns collection contains references to the columns that make up
the index. The Properties collection contains database-specific
properties for the index.</p>

<p>Like the <i>Append</i> method on the Columns and Keys collections,
the <i>Append</i> method on the Indexes collection has the ability to
create a new Index object and add it to the Indexes collection. This
code passes an Index object to the Indexes collection's <i>
Append</i> method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Set idx = New ADOX.Index
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
tbl.Indexes.Append idx
</pre>
</td></tr></table>
</p>

<p>To create a new Index object and add it to the Indexes collection in
a single call, supply the name of the new Index object as the first
parameter and the name of the Column object that it references as the
second parameter:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
tbl.Indexes.Append &quot;IndexName&quot;, &quot;ColumnName&quot;
</pre>
</td></tr></table>
</p>

<p>If you want to create an Index object that references multiple
Column objects, pass a Variant array that contains the column names for
the second parameter, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
tbl.Indexes.Append &quot;IndexName&quot;, Array(&quot;Column1&quot;, &quot;Column2&quot;, ... &quot;ColumnN&quot;)
</pre>
</td></tr></table>
</p>

<A NAME="450"><H3>Property object and Properties collection</H3></A>

<p>Like the ADO object model, the ADOX object model exposes
database-specific properties through the Properties collection. The
Table, Column, and Index objects each have a Properties collection. For
example, you might want to specify that a column in a table is
auto-incrementing. This database-specific property is available in the
Column object's Properties collection, rather than as a direct
property of the Column object.</p>

<p>If you want to access a database-specific property of a Column
object through its Properties collection, make sure that you've set
the ParentCatalog property on the Column object or its parent Table
object.</p>

<p>The following code creates the Orders table in the Northwind
database. Note that the code sets the ParentCatalog property on the
Table object to access the dynamic AutoIncrement property on the
OrderID column.</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
'Create a new Table object.
Set tbl = New ADOX.Table
'Set the ParentCatalog property on the Table
' to expose the database-specific properties.
Set tbl.ParentCatalog = cat
tbl.Name = &quot;Orders&quot;
'Add the Columns to the table.
tbl.Columns.Append &quot;OrderID&quot;, adInteger
tbl.Columns(&quot;OrderID&quot;).Properties(&quot;AutoIncrement&quot;) = True
tbl.Columns.Append &quot;CustomerID&quot;, adWChar, 5
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
'Create the primary key.
tbl.Keys.Append &quot;PK_Orders&quot;, adKeyPrimary, &quot;OrderID&quot;
'Create the foreign key.
'You must explicitly create the key this way to set the 
' DeleteRule property.
Set fk = New ADOX.Key
fk.Name = &quot;FK_Orders_Customers&quot;
fk.Type = adKeyForeign
fk.RelatedTable = &quot;Customers&quot;
fk.Columns.Append &quot;CustomerID&quot;
fk.Columns(&quot;CustomerID&quot;).RelatedColumn = &quot;CustomerID&quot;
fk.UpdateRule = adRICascade
tbl.Keys.Append fk
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
'Create the indexes.
tbl.Indexes.Append &quot;IDX_Orders_Customers&quot;, &quot;CustomerID&quot;
<img src="images/grayvellip.JPG" width=3 height=13 border=0>
'Add the table to the database.
cat.Tables.Append tbl
</pre>
</td></tr></table>
</p>

<A NAME="451"><H3>View and Procedure objects and Views and Procedures collections</H3></A>

<p>The View object and the Procedure object have identical structures.
They each expose a Name property as well as the DateCreated and
DateModified properties. Both the View and Procedure objects make the
structure of their queries available through a property called Command,
which contains a Command object.</p>

<p>See the &quot;<A HREF="chaad.htm#459">Questions That Should Be Asked More Frequently</A>&quot;
section at the end of this appendix for some peculiarities that occur
when creating and interacting with Access QueryDefs, the Access term
for stored queries.</p>

<A NAME="452"><H3>User and Group objects and Users and Groups collections</H3></A>

<p>The User object represents a user's account in the database,
while the Group object corresponds to a group of users. Each object has
a Name property as well as methods for setting and checking permissions
on an object. The User object also has a method for changing the
user's password, aptly named <i>ChangePassword</i>.</p>

<p>The User and Group objects are linked together in the ADOX object
model. Because a user can be a member of many groups, the User object
has a Groups collection that lists the groups of which that user is a
member. Similarly, a group can contain multiple users, and the Group
object has a Users collection that lists its members.</p>

<p>You can add a user to or remove a user from a group by using the
User object's Groups collection. For example, the following code
might be helpful if an employee is promoted:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
cat.Users(&quot;Joe&quot;).Groups.Delete &quot;Engineers&quot;
cat.Users(&quot;Joe&quot;).Groups.Append &quot;Managers&quot;
</pre>
</td></tr></table>
</p>

<p>You could also accomplish the same task by using the Users
collection of the Group object, as shown here:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
cat.Groups(&quot;Engineers&quot;).Users.Delete &quot;Joe&quot;
cat.Groups(&quot;Managers&quot;).Users.Append &quot;Joe&quot;
</pre>
</td></tr></table>
</p>

<A NAME="453"><H2>ADOX Security Sample</H2></A>

<p>The following code sample helped me grasp the concept of using Jet
security through the ADOX object model. This code creates a new Access
database with an Orders table. The code then creates several new users
and groups. Some of the users are placed in the Sales group, while one
is placed in the Guests group. The Sales group is given read, insert,
and update (but not delete) permissions to the Orders table, while the
Guests group has no permissions on the table. The sample then uses ADO
code to simulate each user logging in and trying to perform an action
in order to demonstrate that the permissions were set up properly.</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Database security is not a minor topic. 
Jet programmers who want to learn about Jet security (if you're reading this portion of the
appendix, this probably applies to you) should read Chapter 10,
&quot;Managing Security,&quot; of the <i>Microsoft Jet Database Engine
Programmer's Guide, Second Edition,</i> by Dan Haught and Jim
Ferguson [Microsoft Press, 1997]<i>.</i></blockquote></div>
</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim strPathToMDB As String, strPathToMDW As String
Dim strConn As String, strSQL As String
Dim cat As ADOX.Catalog, tblOrders As ADOX.Table
Dim cn As ADODB.Connection, rs As ADODB.Recordset

'Initialize path to the new database.
strPathToMDB = &quot;C:\Windows\Desktop\Secure.mdb&quot;
'Initialize path to an existing Access 2000 security database.
strPathToMDW = &quot;D:\Office\Access2000\Office\System.MDW&quot;
strConn = &quot;Provider=Microsoft.Jet.OLEDB.4.0;&quot; &amp; _
          &quot;Data Source=&quot; &amp; strPathToMDB &amp; &quot;;&quot; &amp; _
          &quot;Jet OLEDB:System Database=&quot; &amp; strPathToMDW &amp; &quot;;&quot;

If Dir(strPathToMDB) &lt;&gt; &quot;&quot; Then Kill strPathToMDB
Set cat = New ADOX.Catalog
cat.Create strConn &amp; &quot;User ID=Admin;Password=;&quot;

Set tblOrders = New ADOX.Table
With tblOrders
    Set .ParentCatalog = cat
    .Name = &quot;Orders&quot;
    .Columns.Append &quot;OrderID&quot;, adInteger
    !OrderID.Properties(&quot;AutoIncrement&quot;) = True
    .Columns.Append &quot;OrderDate&quot;, adDate
    .Columns.Append &quot;OrderAmt&quot;, adCurrency
    .Keys.Append &quot;PK_Orders&quot;, adKeyPrimary, &quot;OrderID&quot;
End With
cat.Tables.Append tblOrders

'Create users.
cat.Users.Append &quot;Al&quot;, &quot;&quot;
cat.Users.Append &quot;Beth&quot;, &quot;&quot;
cat.Users.Append &quot;Charles&quot;, &quot;&quot;
cat.Users.Append &quot;Zed&quot;, &quot;&quot;

'Create groups.
cat.Groups.Append &quot;Sales&quot;
cat.Groups.Append &quot;Guests&quot;

'Add users to groups.
cat.Groups(&quot;Sales&quot;).Users.Append &quot;Al&quot;
cat.Groups(&quot;Sales&quot;).Users.Append &quot;Beth&quot;
cat.Groups(&quot;Sales&quot;).Users.Append &quot;Charles&quot;
cat.Groups(&quot;Guests&quot;).Users.Append &quot;Zed&quot;

'Set permissions on Orders table for groups.
'Allow the people in sales to modify the contents of the Orders table.
'Prevent guests from viewing the contents of the table.
cat.Groups(&quot;Sales&quot;).SetPermissions &quot;Orders&quot;, adPermObjTable, _
    adAccessGrant, adRightRead + adRightInsert + adRightUpdate
cat.Groups(&quot;Guests&quot;).SetPermissions &quot;Orders&quot;, adPermObjTable, _
    adAccessDeny, adRightNone

'Close this connection.
cat.ActiveConnection.Close
Set cat = Nothing

strSQL = &quot;SELECT * FROM Orders&quot;
'Log in as someone in sales and add an order.
Set cn = New ADODB.Connection
cn.Open strConn, &quot;Al&quot;, &quot;&quot;
Set rs = New ADODB.Recordset
rs.Open strSQL, cn, adOpenKeyset, adLockOptimistic, adCmdText
rs.AddNew Array(&quot;OrderDate&quot;, &quot;OrderAmt&quot;), _
          Array(Date, &quot;100.00&quot;)
rs.Close
cn.Close

'Log in as someone in sales, and modify an order.
cn.Open strConn, &quot;Beth&quot;, &quot;&quot;
rs.Open strSQL, cn, adOpenKeyset, adLockOptimistic, adCmdText
rs.Update Array(&quot;OrderAmt&quot;), _
          Array(&quot;200.00&quot;)
rs.Close
cn.Close

'Log in as someone in sales, and try to delete an order.
'According to the permissions we've set, this should fail.
cn.Open strConn, &quot;Charles&quot;, &quot;&quot;
rs.Open strSQL, cn, adOpenKeyset, adLockOptimistic, adCmdText
On Error Resume Next
rs.Delete
If Err.Number &lt;&gt; 0 Then
    Err.Clear
    cn.Errors.Clear
    rs.CancelUpdate
Else
    MsgBox &quot;Oops. This user should not have been able to delete a &quot; &amp; _
        &quot;row in the Orders table.&quot;
End If
On Error GoTo 0
rs.Close
cn.Close

'Log in as a general user, and query the Orders table.
'According to the permissions we've set, this should fail.
cn.Open strConn, &quot;Zed&quot;, &quot;&quot;
On Error Resume Next
rs.Open strSQL, cn, adOpenKeyset, adLockOptimistic, adCmdText
If Err.Number &lt;&gt; 0 Then
    Err.Clear
    cn.Errors.Clear
Else
    MsgBox &quot;Oops. This user should not have been able to view the &quot; &amp; _
        &quot;Orders table.&quot;
    rs.Close
End If
On Error GoTo 0
cn.Close 
</pre>
</td></tr></table>
</p>

<p><div class="note"><blockquote><b>NOTE</b><hr>Be sure to check out the &quot;<a href="chaad.htm#459">Questions That Should Be
Asked More Frequently</a>&quot; section at the end of this appendix if you
have trouble running this code a second time.</blockquote></div>
</p>

</BODY>
</HTML>






