<html>
<head>
<TITLE>ADO Connection Object Events</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch03c.htm">[Previous]</A> <A HREF="ch03e.htm">[Next]</A><P>

<A NAME="53"><H1>ADO Connection Object Events</H1></A>

<p>The connection object raises the events listed in the following
table.</p>

<p>
	<table valign="top" cellpadding="5" width="95%">
	
		<tr>
			<th colspan=2>Connection Object Events</th>
		</tr>

		<tr>
			<th><i>Event Name</i></th>
			<th><i>Description</i></th>
		</tr>

		<tr>
			<td valign="top"><i>BeginTransComplete</i></td>
			<td valign="top">Fires when the <i>BeginTrans</i> method completes</td>
		</tr>

		<tr>
			<td valign="top"><i>CommitTransComplete</i></td>
			<td valign="top">Fires when the <i>CommitTrans</i> method completes</td>
		</tr>

		<tr>
			<td valign="top"><i>ConnectComplete</i></td>
			<td valign="top">Fires when the attempt to connect to the database completes</td>
		</tr>

		<tr>
			<td valign="top"><i>Disconnect</i></td>
			<td valign="top">Fires when the <i>Close</i> method completes</td>
		</tr>

		<tr>
			<td valign="top"><i>ExecuteComplete</i></td>
			<td valign="top">Fires when the <i>Execute</i> method completes</td>
		</tr>
		
		<tr>
			<td valign="top"><i>InfoMessage</i></td>
			<td valign="top">Returns informational error messages</td>
		</tr>

		<tr>
			<td valign="top"><i>RollbackTransComplete</i></td>
			<td valign="top">Fires when the <i>RollbackTrans</i> method completes</td>
		</tr>

		<tr>
			<td valign="top"><i>WillConnect</i></td>
			<td valign="top">Fires when the <i>Open</i> method on the Connection object is called, prior to the attempt to connect to the database</td>
		</tr>

		<tr>
			<td valign="top"><i>WillExecute</i></td>
			<td valign="top">Fires prior to submitting a query to the Connection object with the Execute method or when the Open method is called on a Recordset associated with the Connection object</td>
		</tr>
		
	</table>
</p>

<p>In order to create an object variable in Microsoft Visual Basic that
exposes events, you'll need to use code such as the following:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Dim WithEvents cnDatabase As ADODB.Connection
</pre>
</td></tr></table>
</p>

<p>You cannot use the New keyword in the Dim statement in Visual Basic
and access the events for the object you've created.</p>

<A NAME="54"><h2><i>BeginTransComplete</i> Event</h2></A>
<p>The <i>BeginTransComplete</i> event fires when you call the <i>
BeginTrans</i> method on your Connection object. The event handler has
four parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
BeginTransComplete <i>TransactionLevel, pError, adStatus, pConnection</i>
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>TransactionLevel</i>, specifies the
transaction level of the initiated transaction. This is the nesting
level value that is returned by the <i>BeginTrans</i> method. The
second parameter, <i>pError</i>, is a pointer to an Error object that
contains error information. To determine whether an error has occurred,
you can test to see whether this parameter is set to a valid Error
object or you can check the value of the third parameter, <i>
adStatus</i>. The <i>adStatus</i> parameter will return a value from
the EventStatusEnum type. If <i>adStatus</i> is set to
adStatusErrorsOccurred, errors have occurred and <i>pError</i> should
be pointing to an object. The last parameter, <i>pConnection</i>, is a
pointer to the Connection object that raised the event. Using this
pointer can simplify the code in your event handlers.</p>

<p>If you want to prevent the event from firing again, set the <i>
adStatus</i> parameter to adStatusUnwantedEvent.</p>

<A NAME="55"><h2><i>CommitTransComplete</i> Event</h2></A>
<p>In the same way that the <i>BeginTransComplete</i> event fires when
you call the <i>BeginTrans</i> method, the <i>CommitTransComplete</i>
event fires when you call the <i>CommitTrans</i> method. The <i>
CommitTransComplete</i> event handler has the same parameters, for the
same information, as the <i>BeginTransComplete</i> event handler, with
the exception of <i>TransactionLevel</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
CommitTransComplete <i>pError, adStatus, pConnection</i>
</pre>
</td></tr></table>
</p>

<p>Setting the <i>adStatus</i> parameter to adStatusUnwantedEvent will
prevent this event from firing again.</p>

<A NAME="56"><h2><i>ConnectComplete</i> Event</h2></A>
<p>The <i>ConnectComplete</i> event fires when ADO has completed its
attempt to connect to your database. This event handler has three
parameters, which are the same as the last three parameters in the
event handlers for <i>BeginTransComplete</i> and <i>
CommitTransComplete</i>:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
ConnectComplete <i>pError, adStatus, pConnection</i>
</pre>
</td></tr></table>
</p>

<p>This event will fire immediately after you call the <i>Open</i>
method of the Connection object, unless you attempt to connect to your
database asynchronously. Setting the <i>adStatus</i> parameter to
adStatusUnwantedEvent won't prevent this event from firing in the
future.</p>

<A NAME="57"><h2><i>Disconnect</i> Event</h2></A>
<p>When you call the <i>Close</i> method on the Connection object, the
<i>Disconnect</i> event will fire. This event handler uses only two
parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
Disconnect <i>adStatus</i>, <i>pConnection</i>
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>adStatus</i>, returns a value contained in
the EventStatusEnum type and indicates whether the <i>Close</i> method
succeeded or failed. I've yet to receive any value other than
adStatusOK in this event. If the server has shut down while the
Connection object is open, the <i>Close</i> method still succeeds. If
you have a transaction pending on the Connection object when you call
the <i>Close</i> method, you'll generate an error that will prevent
the Connection object from closing and the <i>Disconnect</i> event from
firing. Setting the <i>adStatus</i> parameter to adStatusUnwantedEvent
won't prevent this event from firing in the future.</p>

<p>If you disconnect from your database by letting the Connection
object go out of scope or by setting the object pointer to Nothing, the
<i>Disconnect</i> event will not fire.</p>

<A NAME="58"><h2><i>ExecuteComplete</i> Event</h2></A>
<p>The <i>ExecuteComplete</i> event will fire when the query you
executed on your connection completes. This event fires only with
queries submitted by the <i>Connection.Execute</i>, <i>
Command.Execute</i>, or <i>Recordset.Open</i> methods. If you call the
<i>OpenSchema</i> method on the Connection object, the <i>
ExecuteComplete</i> event will not fire.</p>

<p>After you submit your query, and before the query actually executes,
the <i>WillExecute</i> event fires. The <i>ExecuteComplete</i> event
fires after the query has executed. Unless you have executed your query
asynchronously, the <i>ExecuteComplete</i> event will fire before your
code continues.</p>

<p>The <i>ExecuteComplete</i> event takes six parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
ExecuteComplete <i>RecordsAffected</i>, <i>pError</i>, <i>adStatus</i>, <i>pCommand</i>, _
                <i>pRecordset</i>, <i>pConnection</i>
</pre>
</td></tr></table>
</p>

<p>The first parameter, <i>RecordsAffected</i>, returns the number of
rows in the database affected by your query. This value is used if you
submit an action query to modify rows in your database. If your query
returns rows, this parameter is set to -1. The next two parameters, <i>
pError</i> and <i>adStatus</i>, are used the same as in the events
discussed previously.</p>

<p>The final three parameters are pointers to the Command, Recordset,
and Connection objects being used, respectively. Even if you do not
explicitly use a Command object, one is created for you. If you use the
adExecuteNoRecords option on the <i>Execute</i> method of the
Connection or Command object, the <i>pRecordset</i> parameter will be
set to Nothing.</p>

<p>If you want to prevent this event from firing again, set the <i>
adStatus</i> parameter to adStatusUnwantedEvent.</p>

<A NAME="59"><h2><i>InfoMessage</i> Event</h2></A>
<p>Some database applications, such as SQL Server, raise informational
messages that do not generate run-time errors but that might be helpful
to trap in your application. When you connect to SQL Server through the
SQL Server ODBC driver, you'll receive messages that state which
database you're using (if you're not using the default Master
database) and the programming language you're using. I'm not
sure why, but these messages are not returned when connecting through
the SQL Server OLE DB provider.</p>

<p>The <i>InfoMessage</i> event handler uses three parameters that
might appear familiar to you by now if you've been reading this
chapter straight through: <i>pError</i>, <i>adStatus</i>, and <i>
pConnection</i>. You're probably better off walking through the
Errors collection of the Connection object referenced by <i>
pConnection</i> rather than relying on the Error object referenced by
<i>pError</i>. If the database returns multiple informational messages
based on the operation you perform, the <i>InfoMessage</i> event will
fire only once. Only the first informational message will be available
in the <i>pError</i> object, but all the messages can be accessed by
means of the Errors collection on the <i>pConnection</i> object.</p>

<p>In my opinion, ADO doesn't do a great job of returning
informational messages from stored procedures that return at least one
recordset. Messages returned by your stored procedure after the first
recordset might not be available. Apparently, this is because of
limitations in the ODBC and OLE DB APIs. Hopefully this behavior will
improve in a future release of ADO.</p>

<p>Despite what the documentation might say, setting the <i>
adStatus</i> parameter to adStatusUnwantedEvent does not prevent the
event from firing in the future.</p>

<A NAME="60"><h2><i>RollbackTransComplete</i> Event</h2></A>
<p>The <i>RollbackTransComplete</i> event fires when you call the <i>
RollbackTrans</i> method. The <i>RollbackTransComplete</i> event
handler has three parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
RollbackTransComplete <i>pError, adStatus, pConnection</i>
</pre>
</td></tr></table>
</p>

<p>See the earlier sections &quot;<A HREF="ch03d.htm#54"><i>BeginTransComplete</i> Event</A>&quot;
and &quot;<A HREF="ch03d.htm#55"><i>CommitTransComplete</i> Event</A>&quot; for explanations of
these parameters.</p>

<A NAME="61"><h2><i>WillConnect</i> Event</h2></A>
<p>The <i>WillConnect</i> event fires once you've called the <i>
Open</i> method on the Connection object. This event handler takes six
parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillConnect <i>ConnectionString</i>, <i>UserID</i>, <i>Password</i>, <i>Options</i>, <i>adStatus</i>, _
<i>            pConnection</i>
</pre>
</td></tr></table>
</p>

<p>The first four parameters map to the four parameters on the <i>
Open</i> method of the Connection object. If you specify the user ID
and/or password information in your connection string rather than
through the <i>UserID</i> and <i>Password</i> parameters on the
Connection object's <i>Open</i> method, these parameters will be
blank in the <i>WillConnect</i> event. You can modify the <i>
ConnectionString, UserID, Password, and Options</i> parameters 
within this event to change how you're connecting to your database.</p>

<p>If you set the <i>adStatus</i> parameter to adStatusCancel, the <i>
Open</i> method on the Connection object will return with an error
stating &quot;Operation has been cancelled by the user.&quot;</p>

<p>Despite what the documentation might say, setting the <i>
adStatus</i> parameter to adStatusUnwantedEvent does not prevent the
event from firing in the future.</p>

<A NAME="62"><h2><i>WillExecute</i> Event</h2></A>
<p>Similar to how the <i>WillConnect</i> event fires as you attempt to
connect to your database, the <i>WillExecute</i> event fires as you
submit a query to the database. As with the <i>ExecuteComplete</i>
event, calling the <i>Execute</i> method of the Connection and Command
objects as well as the <i>Open</i> method of the Recordset object
generates this event. The <i>OpenSchema</i> method on the Connection
object will not cause this event to fire.</p>

<p>The <i>WillExecute</i> event uses eight parameters:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
WillExecute <i>Source</i>, <i>CursorType</i>, <i>LockType</i>, <i>Options</i>, <i>adStatus</i>, _
            <i>pCommand</i>, <i>pRecordset</i>, <i>pConnection</i>
</pre>
</td></tr></table>
</p>

<p>The <i>Source</i> parameter refers to the query string. The <i>
CursorType</i> and <i>LockType</i> parameters refer to the properties
with the same name on the Recordset object.</p>

<p>Keep in mind that these parameters simply store the requested cursor
type and lock type. What is actually returned might be different. If
you set the CursorType and LockType properties on your Recordset object
to invalid values (such as setting a client-side Recordset to a
CursorType of adOpenDynamic and a LockType of adLockPessimistic), the
invalid values will appear in the <i>WillExecute</i> event. Don't
worry, we'll discuss these properties in more detail when we cover
the Recordset object in <A HREF="ch04a.htm">Chapter 4</A> and cursors in <A HREF="ch07a.htm">Chapter 7</A>.</p>

<p>The <i>Options</i> parameter holds the same value as the <i>
Options</i> parameter used on the method call that submitted the query,
such as <i>Connection.Execute</i>.</p>

<p>You can use the <i>adStatus</i> parameter to keep from submitting
the query by setting it to adStatusCancel. If you want to prevent this
event from firing again, set the <i>adStatus</i> parameter to
adStatusUnwantedEvent.</p>

<p>The final three parameters on this event refer to the Command,
Recordset, and Connection objects, respectively, used in the query. As
described earlier in the <i>ExecuteComplete</i> event, if the
adExecuteNoRecords value is used on the <i>Execute</i> method of the
Connection or Command object, the <i>pRecordset</i> parameter in the
<i>WillExecute</i> event will be set to Nothing.</p>

</BODY>
</HTML>






