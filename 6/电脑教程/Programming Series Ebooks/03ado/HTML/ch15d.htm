<html>
<head>
<TITLE>How ADO Marshals Client-Side Recordsets</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch15c.htm">[Previous]</A> <A HREF="ch15e.htm">[Next]</A><P>

<A NAME="396"><H1>How ADO Marshals Client-Side Recordsets</H1></A>

<p>In <A HREF="ch13a.htm">Chapter 13</A>, we talked about ADO's ability to persist the
contents of a Recordset object to a file. ADO creates that file in such
a way that it can later reopen the file and turn the data inside back
into a Recordset object.</p>

<p>ADO's custom marshaling routine uses similar logic. The routine
examines the contents of the Recordset and packages that data in the
same format used to write to a file. But instead of writing this data
to a file on your hard drive, ADO passes it to the ADO libraries
running in another process. These ADO libraries turn that data into a
new Recordset object.</p>

<p>Chronologically speaking, this functionality was introduced before
ADO gained the ability to save a Recordset to a file. Shortly after ADO
was introduced, Microsoft's data access development team created an
add-on technology originally called Advanced Data Connector (ADC). The
ADC libraries could pass ADO Recordsets between local processes through
COM, between machines on a network using DCOM, and between machines
over the Internet through HTTP. This technology was later renamed
Remote Data Service (RDS); the ability to pass Recordsets between
processes using COM or DCOM is now built into ADO. We'll discuss
the RDS object model as well as its ability to pass Recordset objects
over the Internet in <A HREF="ch16a.htm">Chapter 16</A>.</p>

</BODY>
</HTML>






