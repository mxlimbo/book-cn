<html>
<head>
<title>Chapter 8 -- Updating Your Database</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor="#ffffff" text="#000000">
<A HREF="ch07g.htm">[Previous]</A> <A HREF="ch08b.htm">[Next]</A><P>

<font size="+3">Chapter 8</font>

<A NAME="264"><H1>Updating Your Database </H1></A>

<p>Life would be simple if the data accessed by your application was
strictly read-only. However, designing and implementing your
application becomes more complex once you add the ability to update
your database. Fortunately, incorporating the ability to add, delete,
and modify data in your database is relatively simple compared to
handling scenarios in which multiple users attempt to modify the same
data at the same time.</p>

<p>How do you want your application to behave if multiple users try to
modify a single record in your database? Should the first user to
submit changes succeed and the second user receive an error message?
What to do, what to do?</p>

<p>Before we dive into those questions, let's examine the four
techniques you can use with ADO to modify data in your database: action
queries, stored procedures, updatable server-side Recordsets, and
updatable client-side Recordsets. We'll talk about the pros and
cons of each of these methods. Each technique has trade-offs based on
execution time, development time, flexibility, and control. It's up
to you to decide which way is right for you. First we'll cover the
two &quot;do-it-yourself&quot; methods&#8212;action queries and stored
procedures&#8212;before moving on to the more RAD (rapid application
development) methods of using server-side or client-side updatable
Recordsets.</p>

</BODY>
</HTML>






