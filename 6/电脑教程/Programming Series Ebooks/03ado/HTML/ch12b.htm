<html>
<head>
<TITLE>Now What?</title>
<link rel="STYLESHEET" type="text/css" href="progado.css">

<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</head>
<BODY bgcolor = "#ffffff" text="#000000">
<A HREF="ch12a.htm">[Previous]</A> <A HREF="ch12c.htm">[Next]</A><P>

<A NAME="332"><H1>Now What?</H1></A>

<p>I hear this question a lot from programmers who call Microsoft
Developer Support wanting to know what to do when their optimistic
update attempts fail. Just as there's no simple answer to the
question, &quot;How do I handle errors in my application?&quot;
there's no simple answer here. And yet, it's not overly
complicated to handle failed optimistic update attempts. You simply
have to figure out what went wrong, why it happened, and what to do
about it. That's not so difficult, right?</p>

<p>A lot of programmers I speak with about handling failed optimistic
update attempts are surprised when I ask them, &quot;Well, once you
understand what went wrong, how do you want your code to
react?&quot;</p>

<p>When I explain error handling of optimistic updates to customers, I
tend to go back to the same example each time&#8212;the same snippet of
code we've used throughout most of the book:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<pre>
strSQL = &quot;SELECT CustomerID, CompanyName, BalanceDue &quot; &amp; _
         &quot;FROM Customers WHERE CustomerID = 7&quot;
rsCustomers.Open strSQL, cnDatabase, adOpenStatic, _
                 adLockBatchOptimistic, adCmdText
rsCustomers!BalanceDue = rsCustomers!BalanceDue + 50
rsCustomers.Update
rsCustomers.UpdateBatch
</pre>
</td></tr></table>
</p>

<p>You know from previous chapters that if your code retrieves the
customer's balance due and another user enters an update for that
same customer before you enter your update, your update attempt fails.
There are two common ways to handle this scenario.</p>

<p>The first is to let the user know that the update to the
customer's balance due failed and explain why it happened. Provide
some way for the user to decide what to do: cancel the order, add the
cost of the order to the customer's new balance due, or set the
balance due to another amount.</p>

<p>Another possible solution is to programmatically resolve the
conflict and inform the user about the conflict and how it was
resolved. In this case, you could write code to retrieve the
customer's new balance due from the database and simply add the
cost of the new order to that balance due. Then you could inform the
user that the order was added successfully and the customer's
balance due was modified appropriately, but that the new balance due
might not be what he or she expected because of a change made by
another user.</p>

<p>In either case, you'd have to determine the cause of the update
conflict. In this chapter, we'll talk about what features ADO
offers to help you determine the cause of the conflict. But first,
we'll discuss some general error-handling information.</p>

</BODY>
</HTML>






