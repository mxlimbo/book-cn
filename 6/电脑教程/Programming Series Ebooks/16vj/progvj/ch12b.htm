<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The SQL Language</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12a.htm", "ch12c.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="394"><H1>The SQL Language</H1></A>

<p>Most databases today use Structured Query Language, commonly referred to as 
SQL (pronounced &quot;see quell&quot;). This common language enables a Visual J++ 6 
program to access almost any database using the same source code. In fact, as you'll see, 
Visual J++ 6 programs can access different types of databases from the same .EXE file.

<p>What is SQL, and how did it come to be?

<A NAME="395"><H2>The Roots of SQL</H2></A>

<p>There are many different types of databases. In earlier times, each database 
company defined its own command set. This made accessing databases more costly than it 
is now, for several reasons. Companies had to train programmers in a unique 
database language when they hired them, and train them again if the company moved 
from one type of database to another. In addition, unique internal data storage 
formats made moving data from one database type to another almost impossible. 
Database companies didn't seem to mind this state of affairs, because the use of unique 
languages and formats meant the cost of changing from one type of database to 
another was prohibitive. Companies tended to get stuck with one database type whether 
or not it proved to be the best one over time.

<p>This situation might have continued, were it not for pressure from the 
user community to standardize. At the same time that different database suppliers 
were using their own unique languages, university database researchers invented an 
extremely powerful yet simple database command language called Structured 
Query Language (SQL). (The acronym SQL has become so common that the phrase 
&quot;SQL language&quot; is part of the programming vernacular, even though the word 
&quot;language&quot; is redundant.)

<p>SQL is so simple and powerful that once the first database provider adopted 
it, the user community forced other database companies to follow. Most database 
companies that refused to adopt SQL disappeared. Microsoft supports SQL in its 
database tools, including Microsoft Access and Microsoft SQL Server.

<p><div class="sidebar"><blockquote>
<p><b>Database Internal Formats</b><hr>
The use of the common SQL command set doesn't imply that different 
database providers have adopted a common internal format&#8212;far from it. I 
would wager that no two database companies use the same internal format 
to store data.

<p>This lack of common internal structure is actually a benefit to the 
user community. No one database structure can be best at everything. 
Different internal formats means that database companies can optimize their offerings 
to serve different requirements. A database format might be optimized to 
minimize the amount of disk space required to store data, the effort required to 
maintain the database, or the time required to access the data, to name just a 
few possibilities. This is why Microsoft offers both Access and SQL Server.

<p>Even with different internal formats, SQL enables companies to move 
both programmers and data from one database type to another with minimal 
effort. The programmer queries data from one database using SQL commands 
and stores it back into another database using the same type of SQL commands.
</blockquote></div>

<A NAME="396"><H2>SQL Databases</H2></A>

<p>There are many commands that make up the SQL command set. Entire databases 
can be created and destroyed using SQL commands. The average Visual J++ 6 
user, however, will use a tool such as Microsoft Access or SQL Server to create the 
database. A Visual J++ program that is able to read, write, insert, and delete a record 
from the database is sufficient for most purposes. First, you'll need to reach a 
fundamental understanding of the way a SQL database is organized&#8212;at least, when viewed 
from the outside world. The internal details are unimportant.

<p>Every database has a name. In most cases, the name of the database is the 
same as the name of the file that contains it. Thus, the Access file MyCompany.mdb 
contains the database MyCompany.

<p>A database can include any number of tables, and each table carries a 
name. For example, the table named Customers might contain the names and phone 
numbers of different customers of the company MyCompany.

<p>Each table is conceptually arranged like a grid. The columns&#8212;often 
referred to as <I>fields</I>&#8212;represent the various categories of information. The horizontal 
rows&#8212;often referred to as <I>records</I>&#8212;represent the entries in the table. For example, 
the following table shows a possible layout for the Access table named Customers.


<table cellpadding=5 width="95%">
<tr>
<th><b>Customer ID Number</b></th>
<th><b>Contact First Name</b></th>
<th><b>Contact Last Name</b></th>
<th><b>Phone</b></th>
</tr>

<tr>
<td valign=top>1</td>
<td valign=top>Stephen</td>
<td valign=top>Davis</td>
<td valign=top>(212) 555-1234</td>
</tr>

<tr>
<td valign=top>2</td>
<td valign=top>Kinsey</td>
<td valign=top>Davis</td>
<td valign=top>(212) 555-2345</td>
</tr>

<tr>
<td valign=top>3</td>
<td valign=top>Christa</td>
<td valign=top>Hvidsten</td>
<td valign=top>(512) 555-6789</td>
</tr>


<tr>
<td valign=top>4</td>
<td valign=top>Charlene</td>
<td valign=top>Eller</td>
<td valign=top>(713) 555-3456</td>
</tr>

<tr>
<td valign=top>5</td>
<td valign=top>Pip</td>
<td valign=top>Combs</td>
<td valign=top>(416) 555-4567</td>
</tr>

<tr>
<td valign=top>6</td>
<td valign=top>Zak</td>
<td valign=top>Gibson</td>
<td valign=top>(416) 555-5678</td>
</tr>

<tr>
<td valign=top>7</td>
<td valign=top>Chris</td>
<td valign=top>Gibson</td>
<td valign=top>(416) 555-6789</td>
</tr>

<tr>
<td valign=top>8</td>
<td valign=top>Boiky</td>
<td valign=top>Navias</td>
<td valign=top>(503) 555-7890</td>
</tr>

<tr>
<td valign=top>9</td>
<td valign=top>Bill</td>
<td valign=top>Wilcoxson</td>
<td valign=top>(202) 555-8901</td>
</tr>
</table>

<p>You can access the entire table, but it's more common to address a single 
row at a time. This format also enables you to pull out and analyze individual 
columns within a row, or individual columns within the entire table.

<A NAME="397"><H2>SQL Commands</H2></A>

<p>The simplest SQL command is the <I>DELETE</I> command. For example, using Access 
to delete the row in the Customers table containing the name Stephen Davis, you 
would enter the following SQL command:

<p><pre>
DELETE FROM CUSTOMERS 
WHERE CONTACTFIRSTNAME = 'Stephen' AND CONTACTLASTNAME = 'Davis';
</PRE>

<p>The command <I>DELETE</I> <I>FROM</I> 
<I>CUSTOMERS</I> says that we want to delete one 
or more rows from the Customers table. The 
<I>WHERE</I> clause specifies which row to delete. Notice that because SQL uses a space to delineate commands, Access 
converted the row named &quot;Contact First Name&quot; to 
<I>ContactFirstName</I>.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
SQL commands aren't case sensitive.
</blockquote></div>

<p>You can delete multiple rows with the following command:

<p><pre>
DELETE FROM CUSTOMERS WHERE CONTACTLASTNAME = 'Davis';
</PRE>

<p>In this case, every row in which the Contact Last Name value is 
<I>Davis</I> (in this example, the first two rows) is removed from the table.

<p>What if you want to retrieve the rows of the database? For this, you need 
the <I>SELECT </I>command. The following command selects the entire Customers table:

<p><pre>
SELECT * FROM CUSTOMERS;
</PRE>

<p>What this command returns is essentially the entire Customers table, 
although Visual J++ 6 contains commands that can access one row returned from the 
<I>SELECT </I>command at a time.

<p>Of course, you might not want to process every row in the table. Suppose, 
for example, that you wanted to single out the rows in which the last name value is 
<I>Davis</I> (undoubtedly for special recognition):

<p><pre>
SELECT * FROM CUSTOMERS WHERE CONTACTLASTNAME = 'Davis';
</PRE>

<p>Finally, suppose you don't want to select an entire row, but merely a few 
columns of the row. For example, suppose you wanted the customer id and the 
phone number for the Gibson twins and you want the results sorted in alphabetical 
order by the first names:

<p><pre>
SELECT CUSTOMERID, PHONENUMBER FROM CUSTOMERS
       WHERE CONTACTLASTNAME = 'Gibson'
       ORDER BY CONTACTFIRSTNAME;
</PRE>

<p>Although numerous other commands&#8212;including variations on the 
<I>SELECT</I> command&#8212;exist, this is all the SQL you'll need to know for the rest of this book. 

<p>These SQL commands are great for accessing a SQL database from a 
command tool like Access, but what about accessing these tables from a Visual J++ program?

</BODY>
</HTML>




