<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Drawing More Complex Structures</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch09c.htm", "ch09e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="285"><H1>Drawing More Complex Structures</H1></A>

<p>In addition to dots, lines, and text, the 
<I>Graphics</I> class supports the drawing of 
other types of structures, such as rectangles, circles, ovals, and arcs. There are far too 
many different structures for me to demonstrate each and every one. I thought that 
demonstrating one of the more difficult structures&#8212;the pie chart&#8212;might aid you in 
drawing pie charts and other structures from within your programs.

<A NAME="286"><H2>The PieChart Application</H2></A>

<p>When used properly, nothing gives users better insight into the relationship of 
data than the pie chart. Even with the support of the 
<I>Graphics</I> class, the pie chart seems daunting to create at first; however, with the proper use of a few simple 
trigonometric functions, the pie chart is easily 
mastered.

<p>The PieChart program presented here accepts any number of numeric 
arguments that determine the relative size of each pie slice and draws the pie chart on the 
screen. In other words, if the user enters <I>piechart 5 5 5 10, 
</I>the PieChart program will draw a pie with three equally sized slices and a fourth slice that is twice as large as the others.

<A NAME="287"><h3>The <I>drawPie()</I> method</h3></A>
<p>The key method in drawing a pie chart is the 
<I>Graphics</I> method <I>drawPie()</I>. In a way, this method is misnamed because it really draws only one pie slice. The first 
argument to this method is a bounding rectangle. For almost all pie charts, including 
the one in this example, this rectangle will be a square. (If this isn't a square, the 
&quot;pie&quot; will be an oval rather than a circle.) The resulting pie chart will be constructed 
such that it just barely fits within this square.

<p>The next two arguments are the starting and ending points of the pie slice. 
It's left up to the program to make sure that these points are on the circumference 
of the pie. As you'll see, this is where trigonometric functions come into play.

<A NAME="288"><H3>The Forms Designer work</H3></A>

<p>Start by creating the PieChart project as a Visual J++ Windows application in the 
usual way. Set the <I>text</I> property of the 
<I>Form</I> object to <I>Pie</I> <I>Chart</I>. You should also size 
the form so it is close to being square, although its exact dimensions aren't critical.

<p>While you have the Forms Designer open, use the Properties window 
active properties to create two event handlers, one for the paint event and one for the 
resize event. You can accept the default names for these two methods, 
<I>Form1_paint()</I> and <I>Form1_resize()</I>. The resize event will be used to set the size of the bounding 
square for the pie chart and the paint event will be used to draw the pie chart.

<A NAME="289"><H3>The code</H3></A>

<p>The code for PieChart appears as follows:

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * This class can take a variable number of parameters on the command
 * line. Program execution begins with the main() method. The class
 * constructor is not invoked unless an object of type 'Form1' is
 * created in the main() method.
 */
public class Form1 extends Form
{
    // global variables used in the program
    // if there is an error, errorString will be non-null
    String errorString = null;
    
    // pieBox - the bounding square for the pie chart
    Rectangle pieBox;
    
    // values - the values to plot; these are read from the
    //          command line at startup
    double[]  values = null;
    
    // points, brushes - the points and brushes to plot for
    Point[]   points;
    Brush[]   brushes;

    // constants used in the program
    static int[] brushstyle = new int[]{
                          BrushStyle.SOLID,
                          BrushStyle.HORIZONTAL,
                          BrushStyle.HOLLOW,
                          BrushStyle.FORWARDDIAGONAL,
                          BrushStyle.DIAGONALCROSS,
                          BrushStyle.CROSS,
                          BrushStyle.BACKWARDDIAGONAL
                          };
    static Color[] color = new Color[] {
                          Color.BLACK,
                          Color.CONTROLTEXT,
                          Color.CYAN
                        };
    
    public Form1(String[] args)
    {
        // Required for Visual J++ Form Designer support
        initForm();

        try
        {
            // read the values in from the arguments
            values = readValues(args);
            
            // calculate the size of the enclosing box
            pieBox = calculatePieBox();

            // now create the pie chart plot points
            calculatePieChart();
        }
        catch(Exception e)
        {
            // on error, save the error string
            errorString = e.toString();
        }

        // force the window to repaint
        invalidate();
    }

    /**
     * Read the string arguments into an array of doubles.
     */
    double[] readValues(String[] args)
        throws Exception
    {
        // there must be at least two arguments
        if (args.length &lt; 2)
        {
            throw new Exception(&quot;There must be at least 2 args&quot;);
        }
        
        // create an array of values to plot; the
        // first element should be a 0 and the rest
        // taken from the program argument list
        double[] values = new double[args.length + 1];
        values[0] = 0.0;
        for (int i = 1; i &lt; values.length; i++)
        {
            values[i] = (Double.valueOf(args[i - 1])).doubleValue();
            if (values[i] &lt;= 0)
            {
                throw new Exception(&quot;Values must be positive&quot;);
            }
        }
        return values;
    }

    /**
     * Calculate the bounding square for the pie chart
     * based on the minimum dimensions of the form.
     */
    Point size = new Point();
    Rectangle calculatePieBox()
    {
        // find the size of the display area of the form
        Rectangle r = this.getDisplayRect();
        size.x = r.width;
        size.y = r.height;
        
        // make the bounding square slightly smaller than
        // the form's display area (allow 10 pixels on all
        // sides)
        size.x -= 20;
        size.y -= 20;            
        int minSize = Math.min(size.x, size.y);
        return new Rectangle(10, 10, minSize, minSize);
    }

    /**
     * Convert the values that were read into pie chart coordinates.
     */
    void calculatePieChart()
        throws Exception
    {
        // calculate the sum of all the values to plot
        // (each value will be converted into a percentage
        // of this sum)
        double sum = 0;
        for (int i = 1; i &lt; values.length; i++)
        {
            sum += values[i];
        }
        
        // normalize each value to a number between 0
        // and 2PI
        double[] plotValues = new double[values.length];
        double factor = (2 * Math.PI) / sum;
        sum = 0;
        for (int i = 0; i &lt; values.length; i++)
        {
            plotValues[i] = values[i] * factor;
            sum += plotValues[i];
            plotValues[i] = sum;
        }
        
        // now convert these values into x,y values
        int radius = pieBox.height / 2;
        points = new Point[values.length];
        brushes = new Brush[values.length];
        for (int i = 0; i &lt; values.length; i++)
        {
            // calculate a point on the radius of a circle
            int xLength = (int)(radius * Math.sin(plotValues[i]));
            int yLength = (int)(radius * Math.cos(plotValues[i]));
            
            // now move these values relative to the middle of
            // the rectangle
            xLength += radius;
            yLength += radius;
            
            // now store each value as a point with its own brush
            points[i] = new Point(xLength, yLength);
 
            // create a brush for this slice
            int colorIndex = i / brushstyle.length;
            colorIndex %= color.length;
            int brushStyleIndex = i % brushstyle.length;
            brushes[i] = new Brush(color[colorIndex],
                                   brushstyle[brushStyleIndex]);
        }
    }

    /**
     * Paint the pie chart based on previously calculated values.
     */
    private void Form1_paint(Object source, PaintEvent e)
    {
        // if there was an error&#8230;
        Graphics g = e.graphics;
        if (errorString != null)
        {
            // display the message and quit
            g.drawString(&quot;Error: &quot; + errorString, 10, 10);
            return;
        }

        // connect the pie slices
        int length = points.length - 1;
        for (int i = 0; i &lt; length; i++)
        {
            // first draw the slice
            g.setBrush(brushes[i]);
            g.drawPie(pieBox, points[i], points[i + 1]);
            
            // now draw the value between the two slice points
            // (just take the average of two points)
            String s = Double.toString(values[i + 1]);
            int x = (int)((points[i].x + points[i + 1].x) / 2);
            int y = (int)((points[i].y + points[i + 1].y) / 2);
            g.drawString(s, x, y);
        }
    }

    /**
     * Enforce a minimum size of 100x100 pixels.
     */
    Point minSize = new Point(100, 100);
    protected Point getMinTrackSize()
    {
        return minSize;
    }

    /**
     * Recalculate the pie chart as the form resizes.
     */
    private void Form1_resize(Object source, Event e)
    {
        try
        {
            // recalculate the plot points based on the
            // new size, and repaint the window
            pieBox = calculatePieBox();
            calculatePieChart();
            invalidate();
        }
        catch (Exception ex)
        {
            errorString = ex.toString();
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();

    private void initForm()
    {
        // &#8230;created by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     */
    public static void main(String args[])
    {
        Application.run(new Form1(args));
    }
}
</PRE>

<p>The <I>PieChart()</I> constructor starts by invoking 
<I>Form1.readValues()</I> to convert the arguments the user passed to it into an
array of numbers named 
<I>values</I>. The constructor then calls 
<I>Form1.calculatePieBox()</I> to calculate the bounding square 
for the pie chart based on the current size of the form window. Finally, 
<I>PieChart()</I> calls 
<I>Form1.calculatePieChart()</I> to convert the values read into a pie chart within 
the bounding square. If an exception is thrown from any of these methods, the 
exception is converted to text and stored in the data member 
<I>errorString</I> for display by the 
<I>Form1_paint()</I> method.

<p>The method <I>readValues()</I> converts each argument into a 
<I>double</I> value and stores it into the <I>values 
</I>array starting with index 1. The array value 
<I>values[0]</I> is hard coded to have a value of zero (0). An exception is thrown if any of the values is 0, 
negative, or not a number.

<p>The method <I>calculatePieBox()</I> starts by retrieving the display area of the 
form. From this it calculates whether the width or the height of the form is smaller. 
The method creates a bounding square that fits within 10 pixels on both sides of 
the smaller of these two dimensions. By picking the shorter of the height or 
width, <I>calculatePieBox()</I> ensures that the pie chart won't be bigger than the display 
area on any side.

<p>The <I>calculatePieChart()</I> method is where all the real fun happens. The 
method begins by adding up all the values to plot and storing the result in a variable 
named <I>sum</I>. In the next step, each value in 
<I>values</I> is converted into a series of angles in 
the array <I>plotValues</I>, such that the first angle starts at 0 and the last angle is 2PI. (2PI 
is a complete circle in radian.)

<p>You might be wondering why we used a set of example numbers and 
degrees instead of radian. Suppose that the program has been passed the values 5, 5, and 
10. These values are converted into a 
<I>values</I> array of 0.0, 5.0, 5.0, and 10.0. The 
<I>for</I> loop converts these values into 
<I>plotValues</I> of 0, 90, 180, and 360 degree angles. As 
you can see, in this case we will want to draw the first pie slice from 0 to 90 degrees, 
the second slice from 90 to 180 degrees, and the last from 180 to 360 degrees.

<p>These angles are converted into a series of points by using this equation:

<p><pre>
x = radius * sin(angle)
y = radius * cosin(angle)
</PRE>

<p>Here, <I>radius</I> is the radius of the pie chart. (The radius of the pie chart is 
the distance to the middle of the bounding square.) This formula converts the angle 
into an <I>x</I> and <I>y</I> value on the circumference of a circle.

<p>Finally, these <I>x</I> and <I>y</I> values are translated to the middle of the bounding 
square. This is done by adding <I>radius</I> to both values before converting them into a 
<I>Point</I> object and storing the values in the 
<I>points</I> array. The <I>x</I> and <I>y</I> coordinates now 
vary from 0 to two times <I>radius</I>, the edges of the bounding square, rather than 
varying from <I>-radius</I> to <I>radius</I>.

<p>A unique <I>Brush</I> object is calculated for each pie slice by using the index 
<I>i</I> as a lookup into the array of possible styles called 
<I>brushStyle,</I> and the array of colors called 
<I>color</I>.

<p>The <I>Form1_paint()</I> method is fairly simple. This method iterates through 
each of the pie points. First it sets the drawing brush for the current pie slice by 
calling <I>Graphics.setBrush()</I>. It then calls 
<I>Graphics.drawPie()</I> to draw a pie slice within 
the bounding square from the first pie point, 
<I>points[i]</I>, to the next pie point, 
<I>points[i</I> <I>+</I> <I>1]</I>.

<p>The <I>Form1_paint()</I> method labels each slice with its value from the 
<I>values</I> array. It uses the crude algorithm of drawing the value midway between the two pie 
points. This algorithm works fairly well when there are four or more values, especially 
when these values are roughly equal.

<p>The resize event handler, <I>Form1_resize()</I>, is also simple to implement. First 
it recalculates the size of the bounding square by calling 
<I>calculatePieBox()</I>. Next the method calls 
<I>calculatePieChart()</I> to recalculate a new pie chart that fits within 
the new bounding square. The final call to 
<I>invalidate()</I> forces the new pie chart to be painted.

<p>One final method, <I>getMinTrackSize()</I>, overrides 
<I>Component.getMinTrackSize()</I> to return the minimum size allowed for the form window. In this case, the form 
can't be shrunk to a size smaller than 100 x 100 pixels.

<A NAME="290"><H3>The result</H3></A>

<p>To execute the program from Visual J++, you must provide the program with 
an argument list. To do so, from the Project menu select PieChart Properties. On 
the Launch tab, select Custom and add the desired values to the Arguments box.

<p>When executed with the values shown in Figure 9-10, the program 
generates the pie chart shown in Figure 9-11.

<p><A HREF="javascript:fullSize('F09gh10x.htm')"> <img src="images/F09gh10.JPG" width=404 height=376 border=0 ALT="Click to view at full size."> </A>
<P><!-- caption --><B>Figure 9-10.</b> <i>The Project Properties dialog box showing the
argument values.</I><!-- /caption -->

<p><img src="images/F09gh11.JPG" width=374 height=367 border="0">
<P><!-- caption --><B>Figure 9-11.</b> <i>The pie chart resulting from the values shown
in Figure 9-10.</I><!-- /caption -->

</BODY>
</HTML>




