<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Introduction</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ack.htm", "chp1.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="81"><H1>Introduction</H1></A>

<P>Microsoft Visual J++ 6 includes an amazing set of new and powerful features. While
retaining support for Web development, Visual J++ 6 turns Java into a first-class
language for Microsoft Windows applications development.

<P><I>Programming Microsoft Visual J++ 6.0</I> contains the complete and simple
explanations&#8212;together with numerous examples&#8212;that you'll need to master each
new feature of this powerful and exciting new tool.

<H2>Why Did I Write This Book?</H2>

<P>Before I first came into contact with Visual J++ 6, I thought I knew something about
Visual J++. After all, I had written the manual for Visual J++ 1.0, <I>Learn Java Now</I>.
It's true that Microsoft had skipped from version 1.1 to 6, but surely that was more
of a marketing decision than a technical one. How different could one version of
Visual J++ be from the other?

<P>One look at the new Visual J++, with its Microsoft Visual Studio 6 user interface,
taught me how wrong I was. At first glance, the new Visual J++ seemed to have
more in common with Microsoft Visual C++ and Microsoft Visual Basic than it did
with Visual J++. Once I got beyond the initial shock, however, I realized that this was
still Java; it just had a new, more powerful user interface and included the new
Microsoft Windows Foundation Classes for Java (WFC) class library.

<P>It was clear to me that Visual J++ 6, with its new focus on application development,
would become an important environment for developing Windows applications.
However, I felt that the typical Java programmer would have a lot to learn before
he or she would be in position to fully utilize all that the Visual J++ 6 package has
to offer.

<H2>Java and Applications: Isn't That a Misprint?</H2>

<P>As every Java programmer knows, Java supports two different types of programs:
applications and applets. Applications are programs like those generated by other
programming languages. Applications are meant to be invoked from the command
line or by being double-clicked within a windowing environment like Microsoft
Windows. Applets, by comparison, are designed to be run from within a Web page
by a browser such as Microsoft Internet Explorer.

<P>Historically, Java applets got all the press. After all, applets can generate those
cute features like the scrolling marquees and bouncing balls present in more and more
Web pages. Besides, the Web is considered sexy.

<P>Visual J++ 6 changes this &quot;applets-only&quot; way of thinking. Visual J++ 6 turns Java
into a first-rate language for developing applications. It adds the powerful new WFC
library. An efficient new Forms Designer provides drag-and-drop rapid application
development (RAD) access to this library. Additionally, Visual J++ 6 adds such features
as direct access to the Win32 API, easy creation of custom toolbox controls and
ActiveX controls, and Java access to Dynamic HTML (DHTML).

<H2>Aren't there already good languages for Windows applications?</H2>

<P>Prior to Visual J++ 6, Windows applications programmers had essentially two language
options: Visual Basic or C++ (which comes in various flavors, the most popular flavor
being Visual C++). Both of these languages have problems for general Windows
application development.

<P>Visual Basic has an extremely powerful user interface. Programmers can create
simple Windows-based programs quickly and easily. Grab a few icons off of the
toolbar and drop them in the Forms Designer, add some code to handle the input
or output, and you are just about done.

<P>The problem with Visual Basic lies in the underlying language. The Basic language
doesn't encourage the development of organized, structured programs. Some
of the very features that make Basic so adept at writing small programs make Basic
difficult to use on larger projects. This has led to the common opinion in public
programming circles that for large projects Visual Basic simply &quot;runs out of steam.&quot;

<P>Visual C++ lies at the opposite end of the development scale. As the saying goes,
&quot;if there's something that Visual C++ can't do, it's just not worth doing.&quot; Visual C++
is everything that Visual Basic isn't. It's powerful, it supports large programs, and it's
object-oriented.

<P>At the same time, Visual C++ is full of traps and pitfalls&#8212;so much so, that there
was once a popular book devoted entirely to the topic. Add to this that Visual C++
is difficult to learn. As a teacher of C++, I know firsthand how hard it is for even
experienced programmers to master the language. To gain rapid acceptance by the
marketplace, C++ leveraged the popularity of its non-object-oriented predecessor, C.
As C++ has tried to add new capabilities, its slavish support for C has forced the
language into a number of linguistic mazes. It is these traps that make C++ so difficult
for the uninitiated.

<P>Finally, until very recently Visual C++ has lacked many of the RAD features of
Visual Basic. While Microsoft Foundation Classes (MFC) eases the pain, developing
simple Windows applications in Visual C++ is still not nearly as simple as with
Visual Basic.

<H3>Why Java?</H3>

<P>Visual J++ 6 fits comfortably between these two proverbial powerhouses. Visual J++ 6
has all of the RAD features that make Visual Basic so popular. Developing simple
Windows applications under Visual J++ 6 is a breeze. Unlike Basic, however, Java is
well structured, so it supports the development of larger programs.

<P>At the same time, Java is a much simpler language to learn than Visual C++. Java
has not tried to remain compatible with some non-object-oriented predecessor. This
has left Java free to adopt a clean syntax without the ditches and potholes into which
even experienced C++ programmers can fall.

<H3>Why Windows-specific?</H3>

<P>The fact that Visual J++ 6 includes WFC to add support for Windows-specific development
is surely the most controversial aspect of the language. I like platform-independent
solutions as much as the next guy, but when Visual J++ 6 is viewed in
the light of its importance as an application development environment, the inclusion
of WFC is easier to understand. If Visual J++ 6 is to have a chance as an application
development tool, its output has to be able to compete with that of Visual C++ and
Visual Basic.

<P>Is it possible to write Windows applications in Java using the platform-independent
&quot;Java standard&quot; Abstract Windowing Toolkit (AWT) or using the closely
related Java Foundation Classes? Sure. Are they as attractive as other Windows
applications? No way. This is not meant as an endorsement of Windows applications
over those of Motif or Macintosh or any other windowing environment. Nor is this
meant as a slam of AWT. A generic solution like AWT can't compete with WFC when
generating Windows applications.

<H2>For Whom Was This Book Written?</H2>

<P>This book was written with at least three different types of readers in mind.

<H3>The Java programmer</H3>

<P>First there are the Java programmers. This group includes both users of earlier versions
of Visual J++ as well as users of other Java environments. Since this is probably
the largest single group of readers, I have dispensed with the usual introductory
chapters on Java syntax. From the beginning, <I>Programming Microsoft Visual J++ 6.0</I>
takes you through the features of Visual J++ until, by the time you reach the end of
the book, you'll be in a position to utilize just about every feature that Visual J++ 6
has to offer.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Visual J++ 6 does introduce a few new wrinkles to the Java language,
however. To address this fact, I have added a note&#8212;that looks like this note
does&#8212;to flag language features that are unique to Visual J++ 6 or which might
not otherwise be obvious to the reader.
</blockquote></div>

<H3>The Visual C++ programmer</H3>

<P>A second group of readers are Visual C++ programmers who are curious about this
Visual C++ cousin. Maybe Visual C++ has proved a little too complicated or perhaps
the lure of Visual Basic's powerful RAD features is too much to resist. This reader is
looking for a simpler language with powerful development tools but doesn't want
to abandon the C++-like syntax by making the jump to Visual Basic.

<P><I>Programming Microsoft Visual J++ 6.0</I> is ideal at helping this reader migrate to
Visual J++ 6. The similarity between the Java and C++ syntax means that the examples
presented here are understandable to the C++ developer.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
There are a few language features that the C++ reader might not
understand right away. In these cases I have included a special note&#8212;that looks
like this note does&#8212;to explain language differences where these differences
arise. Readers whose experience is based in C++ will find that these linguistic
cheat sheets will ease their conversion to Visual J++.
</blockquote></div>

<H3>The Visual Basic programmer</H3>

<P>Another large group of readers are Visual Basic programmers who are interested in
branching out into a more object-oriented language, but for whom Visual C++&#8212;with
all its turns and bends&#8212;is not the answer. For this group I have included a quick
overview of the Java language in the appendix. While it may seem like mastering
a programming language in a single section is a lot to ask, Java's straightforward
syntax makes it simple to learn. Once you've digested Java syntax and mastered
the examples in this book, you, too, will be in a position to utilize the Visual J++ 6
environment.

<H2>How Is This Book Organized?</H2>

<P><I>Programming Microsoft Visual J++ 6.0</I> is divided into three parts.

<H3>Part I: Visual J++ Applications</H3>

<P>This section describes how to write both platform-independent and Windows-specific
console applications in Visual J++ 6. Even in today's world of windowed, colorful
applications, there is no faster way to create a calculation-intensive program for
personal use than with the console application.

<H3>Part II: Windowed Applications</H3>

<P>Visual J++ 6 introduces Java to the ranks of easy-to-use but powerful Windows application
development languages. <I>Programming Microsoft Visual J++ 6.0</I> teaches
the reader how to use the new, powerful WFC library of Windows classes. This part
demonstrates how to use such built-in tools as the Forms Designer and the Toolbox
to develop fast and colorful windowed applications. The final chapter of this part
explains how J/Direct gives the Visual J++ 6 programmer access to any user-developed
dynamic-link library (DLL) in addition to the entire Win32 API.

<H3>Part III: Special Topics</H3>

<P>This part explains how to create database applications using the Visual J++ 6 support
for ActiveX Data Objects (ADO) 2.0. This makes it easy for Visual J++ programs
to access common Microsoft databases such as Visual FoxPro (included in Visual
Studio Enterprise Edition), Access, SQL Server, and non-Microsoft databases such as
Oracle. There is even support for text-based databases.

<P>This part also demonstrates how to create new Toolbox objects with their own
properties and events, and how to convert these toolbox tools into ActiveX components.
The remaining chapters in this part explain in detail Visual J++ 6's support for
the Web. This discussion includes applet development and WFC support for Dynamic
HTML on both the Internet browser and the Web server.

</BODY>
</HTML>

