<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Problem</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch04b.htm", "ch04d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="137"><H1>The Problem</H1></A>

<p>Our goal is to create an application that opens a window looking reasonably like that shown in Figure 4-1.

<p>In this application, the user enters any text in the text box. If the user then enters a file name in the File Name box and chooses Submit, the program saves the contents of the text box to an ANSI 8-bit character file and terminates. If the user chooses Cancel, no file is created and the contents of the text box are abandoned as the program closes. The user also can specify an existing filename as a parameter when starting the program, in which case the program will open with the contents of that file in the text box.

<p><img src="images/F04gh01x.JPG" width=429 height=326 border=0> 

<p><!-- caption --><b>Figure 4-1.</b> <i>The application window we are trying to create.</I><!-- /caption -->

<P>
<DIV CLASS="SIDEBAR">
<BLOCKQUOTE>
<P><B>AWT's User Interface Problem</B>

<p>Small deviations in the output between different graphical libraries are to be expected. You can't expect any two libraries to generate identical output. This has been something of a problem for AWT.

<p>Perhaps you remember the religious wars that used to rage over the Apple Macintosh interface. Apple had strictly defined the Macintosh interface in every detail. The size and placement of buttons was prescribed. The placement of menu items was hotly debated. Programs that committed the unforgivable sin of changing the size of a dialog box button or moving a menu item were resoundingly punished in the market place by disappointing sales. Similar, although less intense, wars raged over the user interfaces of other operating systems.

<p>This isn't to say that such standards are bad&#8212;quite to the contrary. I admit to some confusion and frustration when a Windows-based application's first two menus are not File and Edit and the last menu isn't Help. Standards enable users to quickly acclimate to different user interfaces.

<p>Roughly speaking, there are three windowed user interface standards in use today: Windows, Motif (for UNIX), and Apple Macintosh. All three are similar, but each has its own unique peculiarities. To name one trivial difference, Windows uses a two-button mouse, while Motif requires a three-button mouse and Macintosh advocates claim that there's no need for more than one. Proponents of each interface claim small interface differences to be enhancements, but for the most part they're just differences.

<p>User interface differences pose a problem for AWT. A platform-independent AWT application is exactly that: platform independent. The AWT application shares traits with all three of the standard interfaces. Due to differences in the Java Virtual Machine (VM) that executes the Java byte codes, an AWT application looks slightly different&#8212;slightly more Windows-like&#8212;on a Windows machine than on a Motif machine. At the same time, an AWT application doesn't conform completely to any one of the three common interfaces.

<p>An AWT application really presents a fourth interface style, different from each of the three major standards and not widely adopted by any of them. For applets that reside in the Internet browser world, this isn't much of a problem; the World Wide Web presents its own set of user interface standards. However, it is a problem for applications. Unless the AWT interface style becomes widely adopted, it's difficult to see how AWT-based applications can compete with existing user interface standards.
</BLOCKQUOTE>
</DIV>

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The ability to handle a single file name argument gives a program limited drag-and-drop capability. As we will see later in the book, when you drag a file to our application under Windows, Windows will automatically run the program and provide the file name as its first argument.
</blockquote></div>

<p>Figure 4-1 shows the interface drawn rather simply using a paint program so as not to demonstrate a preference between the AWT or WFC approach.

<p>The exact color of the buttons, text boxes, and window background isn't critical as long as the controls stand out from the background. Although not shown in Figure 4-1, the application should respond appropriately to the window minimize, maximize, and close buttons. For example, clicking the close button in the upper right corner of the window should have the same effect as choosing Cancel.

</BODY>
</HTML>




