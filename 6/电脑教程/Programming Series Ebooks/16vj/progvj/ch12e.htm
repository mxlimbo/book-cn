<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The Application Wizard</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12d.htm", "ch12f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="409"><H1>The Application Wizard</H1></A>

<p>Now that you've created an ADO application manually, it's time to give Visual J++ 
a chance to automatically build an application to your specifications. The 
following example application, AutoADO<I>, </I>reads the MyCompany.mdb file and generates 
a window where the user can delete or update entries in the Customers table. Of 
course, it's possible to include other button controls, database options, and table options, 
but let's keep it simple for now.

<A NAME="410"><H2>The Wizard Work</H2></A>

<p>Choose New Project from the File menu, as usual. This time, select Application 
Wizard instead of Windows Application. In the wizard, supply the project name 
AutoADO. When you choose the Open button, the wizard presents you with a window 
asking whether you want to load a previously stored profile. (I'll explain profiles soon.) 
Since you have no stored profiles yet, leave the profile name as the default (None) 
and choose the Next button.

<p>The second window is critical to creating this application. Make sure that 
you choose the Form Based Application With Data radio button, as shown in Figure 
12-2. The default is for the form not to be attached to data, which would lead you 
down a completely different path.

<p><A HREF="javascript:fullSize('f12gh02x.htm')"> <img src="images/f12gh02.jpg" width=404 height=309 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 12-2.</b> <i>The second window of the Application Wizard showing the Form Based Application With Data option selected.</i><!-- /caption -->

<p>The third wizard window asks whether you want to use ODBC to access 
your data file, or instead use a more direct access method unique to Access 
databases. Choose ODBC.

<p>The fourth window is intimidating at first glance. First (if you don't 
remember from the ManualADO example), as soon as you click the DSN drop-down menu 
it will quickly become clear that this field refers to the type of database you want 
to use. Select MS Access 97 Database. As soon as you make this selection, the 
bottom two options are deselected since they no longer apply. You already know from 
previous experience in this chapter that you'll normally want to leave the User ID 
and Password blank. Now fill in the Database entry. You can do this by clicking on 
the ellipses button at the far right of the edit box. From there, you can navigate to 
the MyCompany.mdb database. When you have made these changes to the fourth 
window, it should look like Figure 12-3. Choose Next.

<p>You can accept the defaults in the fifth window, so choose Next again.

<p>The sixth window presents you with a list of the columns in the Customers 
table. This table was chosen automatically, because it's the first (and only) table in 
the database. Double-click the ContactFirstName, ContactLastName, and 
PhoneNumber columns to move them from the list of available columns to the list of columns to 
be displayed. That done, choose Next.

<p><A HREF="javascript:fullSize('f12gh03x.htm')"> <img src="images/f12gh03.jpg" width=404 height=309 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 12-3.</b> <i>The completed fourth window in the Application Wizard.</i><!-- /caption -->

<p>The seventh window enables you to select the buttons you want in your 
application. The wizard will add a button and the associated event handler function 
for each option that you select. Select the Delete Button, Update Button, Close 
Button, and Data Navigator options. The resulting window looks as shown in Figure 12-4.

<p><A HREF="javascript:fullSize('f12gh04x.htm')"> <img src="images/f12gh04.jpg" width=404 height=309 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 12-4.</b> <i>Choosing the buttons in the seventh window of the Application Wizard.</i><!-- /caption -->

<p>Choosing the Next button takes you to the eighth wizard window. Here, 
you select the type of output you want. The default is an 
<I>.</I>EXE file, which is what we want. Choosing Next takes you to the ninth and final wizard window. Here, you are 
given the option of saving this profile for future use. (Remember that you were given 
the option of reading a profile back in the first window when the wizard started.) 
You can save it, if you want to, by supplying a profile file name; however, whether 
you save the profile isn't critical to this demonstration application.

<p>Just to make sure that the settings you made with the wizard are correct, 
select View Report in this last wizard window. Your results should 
look like that shown in Figure 12-5. If they don't, choose Back until you reach the window whose 
settings differ, and start over again. If all of the options match, choose Finish to allow the 
wizard to build a complete application to your specifications.

<p><A HREF="javascript:fullSize('f12gh05x.htm')"> <img src="images/f12gh05.jpg" width=404 height=320 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><b>Figure 12-5.</b> <i>The summary report for the AutoADO demonstration application.</i><!-- /caption -->

<A NAME="411"><H2>The Application Wizard Result</H2></A>

<p>To see the result of your wizardly work, compile and execute the program. The 
results are shown in Figure 12-6.
<p><div class="warning"><blockquote>
<b>WARNING</b><hr>
When you first try to compile the wizard-generated code 
in AutoADO, you'll get the following compile-time error:

<BLOCKQUOTE>
Undefined name m_bAddnew
</blockquote>
This error is the result of a bug in the Visual 
J++ 6 Application Wizard. In order to compile the program, you need to edit the 
<I>btnUpdate_Click()</I> method. Delete the following section of code from 
<I>btnUpdate_Click()</I>:

<p><pre>
if( m_bAddNew )
{
    this.setCursor( Cursor.DEFAULT );
    return;
}
    else
</PRE>
</blockquote></div>

<p><img src="images/f12gh06x.jpg" width=428 height=207 border=0> 

<p><!-- caption --><b>Figure 12-6.</b> <i>The output from the Application Wizard.</i><!-- /caption -->

<p>The wizard created a separate edit box for each field you selected in the 
sixth wizard window. The user can navigate through the records in the Customers 
table using the buttons at the bottom of the form.

<p>This application was easy to build, and it's functional for quickly accessing 
a database; however, I find the results rather ugly. You can make it look slightly 
better by using the Forms Designer to adjust the size and position of the controls.

<p>A worse problem is the unusual display of the phone number field. To be 
fair, I choose to store the phone number data as simple numbers, but other formats 
are available. Later in this chapter, I'll demonstrate how to customize this field to 
look like the phone number displayed in the 
ManualADO<I> </I>application.

<A NAME="412"><H2>The Code</H2></A>

<p>Let me start by displaying a portion of the code created by the Application 
Wizard. I will then explain it.

<p>The code generated by the Application Wizard is lengthy but interesting. 
A highly edited version of this code that shows only the interesting 
parts&#8212;including the code for one of the buttons&#8212;is shown here:

<p><pre>
//MyCompany.java

import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.data.*;
import com.ms.wfc.data.ui.*;

public class MyCompany extends Form
{

    public void btnDelete_Click(Object sender, Event evt)
    {
        try
        {
            dataSource1.getRecordset().delete(AdoEnums.Affect.CURRENT);
            if( !dataSource1.getRecordset().getEOF() )
                {
                    dataSource1.getRecordset().moveNext();
                    if( dataSource1.getRecordset().getEOF() )
                        dataSource1.getRecordset().movePrevious();
                }
        }
        catch (Exception e)
        {
            handleADOException(e);
            dataSource1.getRecordset().cancelBatch();
        }
    }

    .
    .
    .

    void handleADOException(Exception e)
    {
        e.printStackTrace();
        MessageBox.show( e.toString(), &quot;MyCompany&quot; );
    }

    .
    .
    .

    Container components = new Container();
    DataSource dataSource1 = new DataSource(components);
    DataBinder dataBinder1 = new DataBinder(components);
    .
    .
    .
    DataNavigator dataNavigator = new DataNavigator();

    private void initForm()
    {
        .
        .
        .
        // the following has been edited by dividing the
        // strings up and then concatenating them back
        // together using '+' signs to keep the strings
        // from wrapping on the page
        dataSource1.setConnectionString(
           &quot;PROVIDER=MSDASQL;dsn=MS Access 97 Database;&quot; + 
           &quot;uid=;pwd=;&quot; +
           &quot;DBQ=C:\\ProgramVJ\\&quot; +
           &quot;Windows Database Applications\\Databases\\MyCompany.mdb&quot;);
        dataSource1.setCommandText(
           &quot;select ContactFirstName, ContactLastName, &quot; +
           &quot;PhoneNumber from Customers&quot;);
        .
        .
        .
        dataBinder1.setDataSource(dataSource1);
        dataBinder1.setBindings(new DataBinding[] {
              new DataBinding(editContactFirstName, &quot;Text&quot;,
                             &quot;ContactFirstName&quot;), 
              new DataBinding(editContactLastName, &quot;Text&quot;,
                             &quot;ContactLastName&quot;), 
              new DataBinding(editPhoneNumber, &quot;Text&quot;,
                             &quot;PhoneNumber&quot;)});

        .
        .
        .
        btnDelete.setText(&quot;&amp;Delete&quot;);
        btnDelete.addOnClick(new EventHandler(this.btnDelete_Click));

        .
        .
        .
        dataNavigator.setDataSource(dataSource1);


        this.setNewControls(new Control[] {
                            dataNavigator, 
                            btnDelete,
                            btnUpdate,
                            btnClose,
                            panel1, 
                            labelContactFirstName, 
                            editContactFirstName, 
                            labelContactLastName, 
                            editContactLastName, 
                            labelPhoneNumber, 
                            editPhoneNumber});

        panel1.setNewControls(new Control[] {
                              btnDelete, 
                              btnUpdate, 
                              btnClose});

        dataSource1.begin();
        dataBinder1.begin();

        .
        .
        .
    }
</PRE>

<A NAME="413"><h3>The <I>initForm()</I> method</h3></A>
<p>The first thing you'll notice is the lack of a 
<I>Connection</I> or a <I>Recordset</I> object 
anywhere within the program. However, if you look at the declarations for the 
<I>initForm() </I>method, you'll see an object of class 
<I>DataSource</I>. The role of the 
<I>DataSource</I> class is similar to that of the 
<I>ManualADO</I> class defined earlier. This is made obvious 
by the arguments to the 
<I>setConnectionString()</I> and the 
<I>setCommandText()</I> methods. Apparently, the first method creates the 
<I>Connection</I> and <I>Recordset</I> objects, and 
the second method sets the SQL call within the 
<I>Recordset</I>. 

<p>If you look at the next block of code within 
<I>initForm(),</I> you'll see an object of class 
<I>DataBinder</I>. The 
<I>DataBinder.setDataSource()</I> method binds the 
<I>DataBinder</I> object to the <I>DataSource</I>. The next call is to the method 
<I>setBindings()</I>. This method receives an array of objects of class 
<I>DataBinding</I>. Each <I>DataBinding</I> object ties a 
field within the Customers table to an edit box in the form.

<p>Farther down in the code, the 
<I>DataNavigator.setDataSource()</I> method call 
ties an object of type <I>DataNavigator </I>back to the 
<I>DataSource</I> class. In the final method call shown&#8212;the call to 
<I>setNewControls()</I>&#8212;the 
<I>DataNavigator</I> object is listed as one of the controls.

<A NAME="414"><h3>Explanation of <I>initForm()</I></h3></A>
<p>As mentioned earlier, the <I>DataSource</I> class is a more sophisticated version of 
the <I>ManualADO</I> class that was defined in the ManualADO example. It creates the 
<I>Connection</I> and the <I>Recordset</I> with the associated SQL query.

<p>The <I>DataBinder</I> and <I>DataBinding</I> classes are completely new since our 
previous example. The <I>DataBinder</I> class, along with its 
<I>DataBinding</I> class members, allows the program to display an entry in the table by using a single call. This 
call would have to go through the following steps to display the current record from 
the table:
<OL>
<p><LI> Read the current record from the 
<I>DataSource</I> object.
<p><LI> Extract the field name contained in the 
<I>DataBinding</I> object.
<p><LI> Display the returned data in the edit box that is contained in the 
same <I>DataBinding</I> object.
<p><LI> Increment to the next 
<I>DataBinding</I> object within the 
<I>DataBinder</I> object and return to Step 2, until all of the 
<I>DataBinding</I> objects have been processed.
</OL>

<p>The process is similar when performing other operations on the table such 
as update and delete.

<A NAME="415"><H3>The delete operation</H3></A>

<p>Towards the bottom of the <I>initForm()</I> method, you can see that the Delete button 
is tied to the <I>btnDelete_Click()</I> event handler. This method starts by deleting the 
<I>CURRENT</I> record from the <I>Recordset</I> contained in the 
<I>DataSource</I> that contains the 
<I>Connection</I> object. The 
<I>btnDelete_Click()</I> method then moves the 
<I>CURRENT</I> record pointer to the next member of the recordset by calling 
<I>moveNext()</I>.

<p>The <I>moveNext()</I> method also updates the display using the 
<I>DataBinding</I> objects attached to the 
<I>DataBinder</I> object for this 
<I>DataSource</I>, as in the display steps described above. The remaining code in 
<I>btnDelete_Click() </I>ensures that we don't 
read beyond the end of the table.

<p>Any exception thrown during this process&#8212;which would probably be 
because of an error in the database&#8212;is handled by the 
<I>handleADOException()</I> internal method. This method first calls 
<I>printStackTrace()</I>, which displays a trace in 
the debugger of the methods called if the program was executed from within the 
Visual J++ Integrated Development Environment (IDE). (The 
<I>printStackTrace()</I> method 
does nothing if the program wasn't running in the IDE.) The 
<I>handleADOException()</I> method then displays a 
<I>MessageBox</I> to the user.

<A NAME="416"><h3>The <I>DataNavigator</I> object</h3></A>
<p>The <I>DataNavigator</I> object is the control that appears at the bottom of the form. 
This control uses the <I>moveNext()</I>, 
<I>movePrevious()</I>, <I>moveFirst()</I>, and 
<I>moveLast()</I> methods of the <I>DataSource</I>
 object to change the <I>CURRENT</I> record pointer within the 
<I>DataSource</I> object. Each of these move methods displays the results using the 
<I>DataBinder</I> as explained above. The 
<I>DataNavigator</I> is convenient, but not necessary to 
the workings of the <I>DataSource</I>, 
<I>DataBinder</I>, and <I>DataBinding</I> classes. A similar 
control, the <I>DataGrid</I> object, displays the table data in tabular form using the 
same data classes.

</BODY>
</HTML>




