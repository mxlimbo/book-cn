<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>The RichEdit Control</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06c.htm", "ch06e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="198"><H1>The RichEdit Control</H1></A>

<p>The final control I want to discuss under the topic of simple controls is the RichEdit control. This control is classified as a simple control because it's simple for the programmer to use&#8212;but there is nothing simple about the way the RichEdit control operates. The RichEdit control is an editor object that can read and write Rich Text Format (RTF) strings.

<p>RTF is a nonproprietary format supported by most word processors including Microsoft Word. RTF isn't limited to the Windows world; most UNIX editors can read and write RTF files as well. While you can't express every formatting feature in the world in RTF&#8212;for example, you can't save revision history in RTF format&#8212;as the name implies, RTF is rich in its expressiveness.

<A NAME="199"><H2>Building an RTF File Editor</H2></A>

<p>The following RTFEditor<I> </I>program builds a fairly powerful RTF editor using an edit box for a file filter, a list box in Single Select mode, a rich edit box, and two button controls. The arrangement of objects within the form is shown in Figure 6-9.

<p><img src="images/f06gh09.jpg" width=310 height=222 border="0">
<p><!-- caption --><B>Figure 6-9.</b> <i>The RichEdit control has no trouble reading an .RTF file generated in Microsoft Word, although it can't display text in different colors.</I><!-- /caption -->

<A NAME="200"><H3>The Forms Designer work</H3></A>

<p>To build RTFEditor, drag the RichEdit control from the Toolbox to the Forms Designer and resize it until it takes up most of the available space in the form. Then rename it to <I>richEdit</I> and anchor it against all four sides of the form. Anchoring the control in this way ensures that the rich edit box will change size proportionately as the user resizes the form. Next set the control's <I>wordWrap</I> property to <I>false</I> and its <I>scrollBars</I> property to <I>Both</I>. This will cause scroll bars to appear whenever the text is too large to fit within the visible window.

<p>Now add an Edit control below the RichEdit control. This Edit control's purpose is to enable the user to enter a file name to open or to save to. Finish the application's interface by adding an Open button and a Save button along the bottom of the form. Anchor these buttons and the file name Edit control to the bottom, left, and right borders of the form.

<A NAME="201"><H3>The code</H3></A>

<p>The code resulting from the form design work and the code I added are shown here.

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

/**
 * This class demonstrates the RichEdit control.
 */
public class Form1 extends Form
{
    public Form1()
    {
        // Required for Visual J++ Form Designer support
        initForm();
    }
	
    .
    .
    .

    private void openButton_click(Object source, Event e)
    {
        // get the file name from the edit box
        String fileName = fileNameEdit.getText();
        
        // now read the file into the RichEdit control
        loadRichEdit(fileName);
    }
    
    private void closeButton_click(Object source, Event e)
    {
        String fileName = fileNameEdit.getText();
        try
        {
            richEdit.saveFile(fileName);
        }
        catch(Exception ex)
        {
            fileNameEdit.setText(ex.getMessage());
        }
    }

    /**
     * Given a file name, open the file into the
     * RichEdit control.
     */
    private void loadRichEdit(String fileName)
    {
        // open the specified file
        try
        {
            richEdit.loadFile(fileName);
        }
        
        // first catch invalid file type
        catch(WFCInvalidArgumentException e)
        {
            richEdit.setText(&quot;Invalid (non-RTF) file&quot;);
        }
        
        // handle all others the same way
        catch(Exception e)
        {
            richEdit.setText(e.getMessage());
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit fileNameEdit = new Edit();
    Button openButton = new Button();
    Button saveButton = new Button();
    RichEdit richEdit = new RichEdit();

    private void initForm()
    {
        // &#8230;generated by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     * &#8230;
     */
    public static void main(String args[])
    {
        Application.run(new Form1());
    }
}
</PRE>

<p>The <I>openButton_click() </I>method, which is invoked when the user selects Open, begins by reading the file name from the <I>fileNameEdit</I> object. It then passes this name to <I>loadRichEdit()</I> for processing<I>.</I>

<p>The <I>loadRichEdit()</I> method uses the convenient <I>RichEdit.loadFile()</I> method to read the file into the RichEdit control. This method can throw one of two exceptions depending on the problem it detects. If <I>loadFile()</I> can find and open the file, but then determines that the file isn't in RTF format, it throws the exception <I>WFCInvalidArgumentException</I>. In this case, the <I>loadRichEdit()</I> method outputs a specific error message. If <I>loadFile()</I> can't open and read the file, it throws an I/O exception. In this case, <I>loadRichEdit()</I> relies on the error message in the exception.

<p>The <I>closeButton_click()</I> method uses the RichEdit control's 
<I>saveFile()</I> method to save the contents of the RichEdit control to disk.

<p>To test the RTFEditor program, I created a file in Microsoft Word containing several features. I then saved the file in RTF format and opened the file with RTFEditor. The result is shown in Figure 6-9. As you can see, RTFEditor has no trouble with the different fonts, font sizes, and font weights. However, in Word the second line is highlighted in green, but RTFEditor isn't capable of displaying lines in different colors (although it can display text in different colors).

<A NAME="202"><H2>Adding Drag-and-Drop Capability</H2></A>

<p>An important feature of any text editor is the ability to support drag-and-drop actions. By this I mean two capabilities that are quite distinct. One is the ability to drag a text file and drop it onto the text editor program's executable file (or its icon) to begin program execution and immediately load the file. Let's call this capability <I>initial drag-and-drop</I>. A second capability meant by drag-and-drop is to drag a file to the running text editor program and drop it there to load the file in that program. Let's call this <I>in-progress drag-and-drop</I>.

<A NAME="203"><H3>Implementing initial drag-and-drop</H3></A>

<p>Windows handles initial drag-and-drop just as if the user had executed the program from the DOS command prompt. For example, if the user drags file A.rtf and drops it on application B.EXE, Windows executes B and passes it the name A.rtf as a single argument just as if the user had entered the following DOS command:

<p><pre>
B A.rtf
</PRE>

<p>If you have been reading the chapters in order, you will remember that even our console applications in Part I had the ability to read arguments to the program using the <I>args</I> array. Thus, you already know how to implement initial drag-and-drop.

<A NAME="204"><H3>Implementing in-progress drag-and-drop</H3></A>

<p>Initial drag-and-drop was easy to handle because the program was not already running. A program is already underway during in-progress drag-and-drop. The only way to get the attention of a running program is through events.

<p>When the user begins dragging a file, Windows pastes the name of the file onto the Clipboard. This data stays on the Clipboard the entire time the mouse is dragging the file.

<p>When the mouse moves onto our RTFEditor, Windows generates messages that Visual J++ 6 converts to three different event types: <I>dragEnter</I>, <I>dragOver</I>, and <I>dragDrop</I>. Any control that implements drag-and-drop must handle these three events.

<p>The <I>dragEnter</I> event is generated as the mouse pointer enters the region occupied by the control. The <I>dragOver</I> event occurs repeatedly as the mouse moves within the control. Finally, the <I>dragDrop</I> event occurs when the user releases the object. (There is also a <I>dragExit</I> event, which occurs if the mouse leaves the control without dropping the object, but we won't be using that event.)

<A NAME="205"><H3>The problem</H3></A>

<p>Let's add the ability to process a file dropped on the RTFEditor form. This includes both initial drag-and-drop and in-progress drag-and-drop.

<p>Part of the problem is already solved for us. The RichEdit control appears only after the RTFEditor program has started; therefore, it has no need for initial drag-and-drop capability. However, we will have to add the initial drag-and-drop capability to the RTFEditor program itself. In addition, the RichEdit control handles in-progress drag-and-drop already, but the form that contains this control has no in-progress drag-and-drop capability of its own. We will need to add this capability to the form.

<A NAME="206"><H3>The Properties window</H3></A>

<p>Before we can begin adding drag-and-drop event handlers, we must inform WFC that we intend to allow drag-and-drop on the form. Select the form in the Forms Designer. In the Properties window, set the <I>allowDrop</I> property to <I>true</I>. The RichEdit control always allows drops.

<p>Switch to the active properties in the Properties window, and select the form again. Now double-click <I>dragEnter</I> to create the <I>Form1_dragEnter()</I> method; double-click <I>dragOver</I> to create the <I>Form1_dragOver()</I> method; and double-click <I>dragDrop</I> to create the <I>Form1</I>_<I>dragDrop()</I> method.

<A NAME="207"><H3>Code changes to support drag-and-drop</H3></A>

<p>The following example shows the code for the RTFEditor application.

<p><pre>
import com.ms.wfc.app.*;
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;
import com.ms.wfc.html.*;

import com.ms.wfc.io.*;

/**
 * This class demonstrates the RichEdit control with
 * drag-and-drop capability.
 */
public class Form1 extends Form
{
    public Form1(String[] args)
    {
        // Required for Visual J++ Form Designer support
        initForm();
        
        // if there is a file name present&#8230;
        if (args.length == 1)
        {
            // load it (This probably means that the user
            // has dropped the file name onto the program's
            // name in Windows Explorer or on top of the program's
            // icon in a window. I call this initial drag-and-
            // drop capability.)
            loadRichEdit(args[0]);
        }
    }

    .
    .
    .

    /**
     * Open the file contained in the fileNameEdit text field.
     */
    private void openButton_click(Object source, Event e)
    {
        // get the file name from the edit box
        String fileName = fileNameEdit.getText();
        
        // now read the file into the RichEdit control
        loadRichEdit(fileName);
    }

    /**
     * Close the file specified in the fileNameEdit text field.
     */
    private void closeButton_click(Object source, Event e)
    {
        String fileName = fileNameEdit.getText();
        try
        {
            richEdit.saveFile(fileName);
        }
        catch(Exception ex)
        {
            fileNameEdit.setText(ex.getMessage());
        }
    }

    /**
     * Given a file name, open the file into the
     * RichEdit control.
     */
    private void loadRichEdit(String fileName)
    {
        // make sure the Edit control displays
        // the file name
        fileNameEdit.setText(fileName);
        
        // open the specified file
        try
        {
            richEdit.loadFile(fileName);
        }
        
        // first catch invalid file type
        catch(WFCInvalidArgumentException e)
        {
            richEdit.setText(&quot;Invalid (non-RTF) file&quot;);
        }
        
        // handle all others the same way
        catch(Exception e)
        {
            richEdit.setText(e.getMessage());
        }
    }

    // --------handle the in-progress drag-and-drop--------------
    /**
     * Record the drag-and-drop state. If dragEffect is NONE,
     * a FileName was not found on the Clipboard, meaning that
     * there's nothing to copy.
     */
    private int dragEffect;

    /**
     * When the user drags the mouse into the form, check to
     * see whether there is a file name on the Clipboard. If not,
     * set the dragEffect to NONE. This precludes a drop
     * operation. If there is, set the effect to COPY (since
     * we want to copy the file name from the Clipboard).
     * If there is more than one file name, just take the
     * first one.
     */
    private void Form1_dragEnter(Object source, DragEvent e)
    {
        // for now, assume that there is no file name on
        // the Clipboard
        e.effect = DragDropEffect.NONE;

        // if there is a FileName data type in the Clipboard&#8230;
        IDataObject ido = e.data;
        if (ido.getDataPresent(&quot;FileName&quot;))
        {
            // get the file name
            // (there may be more than one)&#8230;
            Object o = ido.getData(DataFormats.CF_HDROP);
            
            // as an array of file names
            String[] fileNames = (String[])o;
            
            // just take the first file name
            // (if there's more than one, ignore the rest)
            String fileName = fileNames[0];

            // now store that name in the fileNameEdit object
            // (we will need that name when the drop occurs)
            fileNameEdit.setText(fileName);
            
            // tell the drag operation that this succeeded
            e.effect = DragDropEffect.COPY;
        }
        
        // save the dragEffect (whether it's successful
        // or not)
        dragEffect = e.effect;
    }

    /**
     * Keep setting the dragEffect as long as the mouse is
     * hovering over the form during a drag operation.
     */
    private void Form1_dragOver(Object source, DragEvent e)
    {
        e.effect = dragEffect;
    }


    /**
     * When the user drops an RTF file onto the Form,
     * act like the user clicked the Open button. (The
     * file name should have been put in the fileNameEdit
     * text edit field already by the dragEnter event.)
     */
    private void Form1_dragDrop(Object source, DragEvent e)
    {
        // if the dragEffect is COPY&#8230;
        if (dragEffect == DragDropEffect.COPY)
        {
            // proceed with drop operation
            openButton_click(null, null);
        }
    }

    /**
     * NOTE: The following code is required by the Visual J++ form
     * designer.  It can be modified using the form editor.  Do not
     * modify it using the code editor.
     */
    Container components = new Container();
    Edit fileNameEdit = new Edit();
    Button openButton = new Button();
    Button saveButton = new Button();
    RichEdit richEdit = new RichEdit();

    private void initForm()
    {
       //&#8230;generated by the Forms Designer&#8230;
    }

    /**
     * The main entry point for the application. 
     *
     * @param args - the name of the file to open (optional)
     */
    public static void main(String args[])
    {
        Application.run(new Form1(args));
    }
}
</PRE>

<p>The <I>loadRichEdit()</I>, <I>openButton_click()</I>, and <I>closeButton_click()</I> methods are unchanged from previous versions of RTFEditor. The <I>Form1()</I> constructor has been updated to handle the arguments passed to <I>main()</I>. If there is one argument present, the constructor assumes it is the name of a file and calls <I>loadRichEdit()</I> to load the file into the RichEdit control. This is all that is required to handle initial drag-and-drop.

<p>The methods below the <I>//---handle in-process drag-and-drop---</I> comment are new to this version of RTFEditor.

<p>The first addition is the data member <I>dragEffect</I>. Its meaning will become clear shortly.

<p>Next comes the <I>Form1_dragEnter()</I> method, which is invoked as the dragged mouse pointer enters <I>Form1</I>. This method has two arguments: the source object and a <I>DragEvent</I> object. The <I>Form1_dragEnter() </I>method begins by setting the <I>effect</I> member of <I>DragEvent</I> to <I>DragDropEffect.NONE</I>. (This happens to be the default value of <I>effect</I>, but it doesn't hurt to include this statement for demonstration purposes.) Setting <I>effect</I> to <I>NONE</I> tells Visual J++ 6 to not allow the drop event. In addition, this sets the mouse pointer to that funny-looking circle with a slash through the middle, like a European &quot;don't enter&quot; sign (assuming that Windows is using the default pointer set).

<p>The<I> Form1_dragEnter() </I>method continues by examining the <I>data</I> member of <I>DragEvent</I>. The <I>data</I> member implements the <I>IDataObject</I> interface, which means that it supports a number of methods all related to retrieving and storing data to and from the Clipboard.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The <I>IDataObject</I> interface is also used to represent objects being pasted from the Clipboard, as we'll see in <A HREF="ch07a.htm">Chapter 7</A>.
</blockquote></div>

<p>Since the Clipboard can contain almost any type of object, <I>Form1_dragEnter() </I>can't assume that something on the Clipboard is the name of a file. The call to <I>ido.getDataPresent(&quot;FileName&quot;)</I> returns <I>true</I> if an object of type <I>FileName</I> is present on the Clipboard. If <I>true </I>is returned, <I>Form1_dragEnter() </I>reads the object off the Clipboard by calling <I>ido.getData()</I>.

<p>There are two ways to invoke <I>getData()</I>. The call <I>getData(&quot;FileName&quot;)</I> is the older, now deprecated way to read a file name from the Clipboard. This method returns the name of the file in the older DOS-compatible 8.3 naming format. Calling <I>getData(DataFormats.CF_HDROP)</I> returns the file name in the newer Win32 format. (<I>DataFormats</I> is an enumerated class containing a number of different format indicators.)

<p>The object returned by <I>getData() </I>is an array of <I>String</I> objects. Each <I>String</I> in the array contains the name of a file. The <I>getData()</I> method returns an array because the user can select a number of files and drop them all at the same time. Since RTFEditor can only open a single file, <I>Form1_dragEnter()</I> selects the first file name and ignores the rest. This file name is then stored in the <I>fileNameEdit</I> object for two reasons. The first reason is to display the name of the file the user is about to drop. The second reason is that this is the file that RTFEditor will open in the event the drop is performed.

<p>The <I>Form1_dragEnter() </I>method then updates the <I>effect</I> field in <I>DragEvent</I> to <I>DragDropEffect.COPY</I>. This has two important effects. First, it changes the mouse pointer to a plus sign to indicate that a drop on this object is allowed (again, assuming the default mouse pointers). Second, updating the <I>effect</I> field to <I>COPY</I> allows the <I>Form1_dragDrop()</I> method to drop the file onto the form.

<p>Finally, the drag effect is saved in the local <I>dragEffect</I> data member. Thus, if <I>Form1_dragEnter() </I>found a <I>&quot;FileName&quot; </I>object on the Clipboard, <I>dragEffect</I> is set to <I>COPY</I>; if not, <I>dragEffect</I> is set to <I>NONE</I>.

<p>The <I>Form1_dragOver()</I> method simply updates the <I>effect</I> data member of the <I>DragEvent</I> to the value stored by <I>Form1_dragEnter()</I>. This ensures that the mouse pointer continues to appear as the copy symbol.

<p>Now that the <I>Form1_dragEnter()</I> method has done all the dirty work of retrieving the name of the file to open from the Clipboard, all <I>Form1_dragDrop()</I> has to do is invoke the <I>openButton_click()</I> method, exactly as if the user had clicked the Open button. (The test for <I>dragEffect</I> equal to <I>COPY</I> is not really necessary, since if <I>effect</I> were set to <I>NONE</I> the drop wouldn't be allowed anyway, but it doesn't hurt anything to be specific.) The <I>openButton_click()</I> method loads the file named in the <I>fileNameEdit</I> object into the RichEdit control.

<A NAME="208"><H3>The result</H3></A>

<p>Figure 6-10 shows the user dragging the file RichEditTest1<I>.</I>rtf<I> </I>onto the RTFEditor form. The small arrow with a plus sign in the lower-right corner of the form indicates that RTFEditor is prepared to accept a drop at that location. The edit box at the bottom of the RTFEditor form contains the name of the file about to be dropped. (Both the cursor and the edit box were set by the <I>Form1_dropEnter()</I> method.)
<p><A HREF="javascript:fullSize('f06gh10x.htm')"> <img src="images/f06gh10.jpg" width=404 height=200 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><B>Figure 6-10.</b> <i>Dragging an .RTF file onto the RTFEditor form changes the cursor to the copy-style plus sign and updates the edit box with the name of the file.</I><!-- /caption -->
<p>Figure 6-11 shows the result of dropping the RichEditTest1.rtf file onto the RTFEditor form. Notice that the file is now opened in the RichEdit window and the name and path are displayed in the edit box, ready to be used by the Save button once the user has completed editing the file.

<p><A HREF="javascript:fullSize('f06gh11x.htm')"> <img src="images/f06gh11.jpg" width=404 height=202 border=0 ALT="Click to view at full size."> </A>
<p><!-- caption --><B>Figure 6-11.</b> <i>Dropping the .RTF file onto the RTFEditor form opens the file in the RichEdit window.</I><!-- /caption -->

<A NAME="209"><H3>Extending drag-and-drop</H3></A>

<p>The drag-and-drop capability shown here involves the dragging of a file onto the RTFEditor form. The <I>Form1_dragEnter()</I> method reflected this fact in that what it checked for was an object of type <I>&quot;FileName&quot;.</I> As I have already mentioned, Windows supports drag-and-drop of different types of objects other than file names. For example, the user might cut a section of RTF text from one application and drop it onto our RTFEditor.

<p>Extending the file drag-and-drop code shown here to other types of objects is a matter of checking for a different type of object on the Clipboard and recognizing the format of the object returned. <A HREF="ch07a.htm">Chapter 7</A> demonstrates the passing of data other than straight text through the Clipboard in the context of the cut-and-paste operation.

</BODY>
</HTML>




