<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Java Expressions</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("appa.htm", "appc.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="2"><H1>Java Expressions</H1></A>

<p>A Java statement can be a comment, a block, a declaration, or an expression. 
Most statements in Java end in a semicolon&#8212;blocks and comments are about the 
only holdouts.

<p>Java considers spaces, tabs, and newline characters to be &quot;white space&quot; 
and ignores them except when they appear in the middle of an operator or an identifier.

<A NAME="3"><H2>Comments</H2></A>

<p>There are three types of comments defined in Java. The most common type of 
comment is one line long and begins with a double slash 
(//). This type of comment continues from the // until the end of the line.

<p>The second comment style is the block comment, which begins with a slash 
and an asterisk (/*) and ends with an asterisk and a slash 
(*/). Newline characters are ignored in this type of comment.

<p>The third type of comment, the Javadoc-type comment, begins with a slash 
and a double asterisk (/**) and ends with an asterisk and a slash 
(*/). This type of comment is the same as the block comment, except Visual J++ 6 assumes that the 
statement immediately following the comment is the name of a method (function):

<p><pre>
/**
 * The following function is an example.
 * @param input is an integer that is ignored
 */
void example(int input)
{
    .
    .
    .
}
</PRE>

<p>In this example, as soon as the program finishes the definition of the 
<I>example()</I> method, Visual J++ 6 extracts the documentation contained within the Javadoc 
comment and adds it to the statement completion feature. This feature helps the 
programmer complete expressions.

<A NAME="4"><H2>Declaring Variables</H2></A>

<p>You must declare a local variable before using it. A variable declaration consists 
of the type, followed by the name of the variable, optionally followed by the 
assignment operator (=) and an expression representing the initial value of the variable.

<p><pre>
int nAnInt;           // declare a variable
int nASecondInt = 10; // declare another variable and
                      // give it an initial value
</PRE>

<A NAME="5"><H2>Intrinsic Data Types</H2></A>

<p>Table A-1 shows the variable types that are intrinsic to Java. To enhance 
portability, Java sets the specific size of each type. In addition, a variable is initialized when 
you declare it. If you don't initialize a variable explicitly, Java gives it the 
corresponding value as shown in the table. All of the numeric types shown are signed. Java 
doesn't support unsigned data types.



<p><B>Table A-1.</b> <i>Size of each Visual J++ intrinsic type.</I>


<table cellpadding=5 width="95%">
<tr>
<th><b><i>Data Type</i></b></th>
<th><b><i>Size [bits]</i></b></th>
<th><b><i>Default value</i></b></th>
</tr>

<tr>
<td valign=top><i>boolean</i></td>
<td valign=top>8</td>
<td valign=top><i>false</i></td>
</tr>

<tr>
<td valign=top><i>byte</i></td>
<td valign=top>8</td>
<td valign=top><i>0</i></td>
</tr>

<tr>
<td valign=top><i>char</i></td>
<td valign=top>16</td>
<td valign=top><I>`x0'</i></td>
</tr>

<tr>
<td valign=top><i>short</i></td>
<td valign=top>16</td>
<td valign=top><i>0</i></td>
</tr>

<tr>
<td valign=top><i>int</i></td>
<td valign=top>32</td>
<td valign=top><i>0</i></td>
</tr>

<tr>
<td valign=top><i>long</i></td>
<td valign=top>64</td>
<td valign=top><i>0</i></td>
</tr>

<tr>
<td valign=top><i>float</i></td>
<td valign=top>32</td>
<td valign=top><i>0.0F</i></td>
</tr>

<tr>
<td valign=top><i>double</i></td>
<td valign=top>64</td>
<td valign=top><i>0.0D</i></td>
</tr>


</table>


<p>The <I>boolean</I> type isn't a numeric type&#8212;it can have only the value 
<I>true</I> or <I>false</I>. All other types are numeric and can be mixed within a single computation. The 
<I>char</I> type is a full 16 bits, and is assumed to be Unicode. (Unicode is a superset of 
ASCII. The first 128 characters are the same as ASCII. After that, Unicode associates 
other values with special characters like accented characters, umlauts, and 
ideographic characters.)

<A NAME="6"><H2>Identifiers</H2></A>

<p>A variable name can be any valid Java identifier. Identifiers must start with a 
letter of the alphabet, an underscore (_), or a dollar sign ($). Subsequent letters can 
also be the numeric digits 0 through 9.

<A NAME="7"><H2>Constants</H2></A>

<p>There are four types of constants: 
<I>boolean</I>, numeric, character, and string.

<A NAME="8"><h3><I>Boolean</I> constants</h3></A>
<p>There are two <I>boolean</I> literals, 
<I>true</I> and <I>false</I>.

<A NAME="9"><H3>Numeric constants</H3></A>

<p>Java assumes that any identifier beginning with a digit is a numeric constant. 
Constants that begin with 0 are octal, while those that begin with 0x or 0X are 
hexadecimal. All other constants are decimal.

<p>The digits A through F in a hexadecimal number can be in either uppercase 
or lowercase. Thus, the following numbers all have the same value:

<p><pre>
255, 0377, 0xff, 0xFF
</PRE>

<p>Java assumes that a numeric literal containing either an exponent or a 
decimal point is a floating-point number. By default, a floating-point number is assumed 
to be of type <I>double</I>. A floating-point number that ends with the character F is of 
type <I>float</I>. Thus, in the following line the first three constants are 
<I>double</I> while the fourth constant is a 
<I>float</I>:

<p><pre>
3.14159, 0.1, 1.602E-19, 3.14159F
</PRE>

<A NAME="10"><H3>Character constants</H3></A>

<p>Character constants are enclosed in single quotes; for example ' ' is a space. In 
addition, a character literal can be defined using `\xNN', where NN is the Unicode 
value of the character. Thus, `\x20' is also a space. Java defines special symbols for 
certain common nonprintable characters. For example `\n' is the newline character. The 
literal `\\' represents a single backslash character.

<A NAME="11"><H3>String constants</H3></A>

<p>String constants (also known as string literals) are any number of characters 
contained within double quotes. For example, &quot;Hello, world&quot; is a string constant.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
A Java string constant isn't implemented as a null-terminated 
array of characters (often called an ASCIIZ string), as it is in C and 
C++.</blockquote></div>


<A NAME="12"><H2>Smooth Operators</H2></A>

<p>Table A-2 shows the Java operators. The numbers in the left column indicate 
the precedence, with 1 being the highest precedence and 15 being the lowest precedence. 

<p><B>Table A-2.</b> <i>Operator precedence in Java.</I>

<table cellpadding=5 width="95%">
<tr>
<th><b>Precedence</b></th>
<th><b>Operators</b></th>
</tr>

<tr>
<td valign=top>1</td>
<td valign=top>.  []  ()</td>
</tr>

<tr>
<td valign=top>2</td>
<td valign=top>++  --  !  ~  instanceof</td>
</tr>

<tr>
<td valign=top>3</td>
<td valign=top>*  /  %</td>
</tr>

<tr>
<td valign=top>4</td>
<td valign=top>+  -</td>
</tr>

<tr>
<td valign=top>5</td>
<td valign=top>&lt;&lt;  &gt;&gt;  &gt;&gt;&gt;</td>
</tr>

<tr>
<td valign=top>6</td>
<td valign=top>&lt;  &gt;  &lt;=  &gt;=</td>
</tr>

<tr>
<td valign=top>7</td>
<td valign=top>==  !=</td>
</tr>

<tr>
<td valign=top>8</td>
<td valign=top>&amp;</td>
</tr>

<tr>
<td valign=top>9</td>
<td valign=top>^</td>
</tr>

<tr>
<td valign=top>10</td>
<td valign=top>|</td>
</tr>

<tr>
<td valign=top>11</td>
<td valign=top>&amp;&amp;</td>
</tr>

<tr>
<td valign=top>12</td>
<td valign=top>||</td>
</tr>

<tr>
<td valign=top>13</td>
<td valign=top>?:</td>
</tr>

<tr>
<td valign=top>14</td>
<td valign=top>=  op=</td>
</tr>

<tr>
<td valign=top>15</td>
<td valign=top>,</td>
</tr>

</table>   

<p>Precedence refers to the order in which operations are carried out. For 
example, multiplication (*) is performed before addition (+) when they appear in the 
same expression. Operators with the same precedence are executed from left to right.



<p><div class="note"><blockquote>
<b>NOTE</b><hr>The Java operators work the same as their C equivalents, 
except for the addition of two new operators (&gt;&gt;&gt; and 
^) and the way the logical operators work when applied to 
<I>booleans</I>. Even the precedence is the same.
</blockquote></div>


<p>The most important of all operators is the assignment operator (=). (The 
assignment operator is not to be confused with the equality operator ==.) The 
assignment operator takes the value on its right, and stores it in the object on its left.

<p>In order to make an assignment successfully, the return type of the 
expression on the right must be the same as the type of the object on the left. If they're not 
already of the same type Java will try to cast the expression for you, but only if it can 
perform that cast without losing information. The value and type of the 
assignment operator expression is the resulting value and type of the left object.

<A NAME="13"><H3>Unary operators</H3></A>

<p>Operations on integers fall into two categories: unary and binary. A unary 
operator involves a single argument. Java doesn't like to deal with arguments smaller than 
an <I>int</I>. Therefore, if the argument to a unary operator is a 
<I>byte</I>, <I>char</I>, or <I>short </I>type, 
the result is an <I>int</I>. Otherwise, the result is the same type as the argument. (That is, 
<I>int</I> begets <I>int</I>, <I>long</I> begets 
<I>long</I>.)

<p>The unary operators are - (negation), ~ (bitwise complement), ++ 
(increment), and -- (decrement).

<p>The increment operator increments its argument by one, and the 
decrement operator decrements its argument by one. The increment and decrement 
operators both come in two flavors: pre- and post-. The preincrement operator 
(++x) increments the argument and then evaluates it. The postincrement operator (x++) evaluates 
the argument and then increments it.

<A NAME="14"><H3>Binary operators</H3></A>

<p>The binary operators involve two arguments, one on either side of the operator. 
Binary operators include + (addition), - (subtraction), 
!= (inequality), and so on. If both arguments are 
<I>int</I>, then the operation is performed in 
<I>int</I> precision. If either argument is 
<I>long</I>, then the other argument is converted to 
<I>long</I> and the result is <I>long</I>. 
If the resulting value of an expression is greater than what can be contained in 
the current precision, then the upper bits are lopped off. No overflow 
indication is generated.

<A NAME="15"><H3>Operations on floats</H3></A>

<p>The same operators that work on integers can also be applied to floating point values.

<p>Java follows the rules of the Institute of Electrical and Electronic Engineers 
(IEEE) Standard 754 for floating point calculations.

<A NAME="16"><h3>Operations on <I>booleans</I></h3></A>
<p>There are two <I>boolean</I> operators: 
<I>&amp;&amp;</I> AND, plus <I>||</I> OR. Java performs 
short-circuit evaluation of <I>boolean</I> operators; for example, in the expression 
<I>a &amp;&amp; b</I>, <I>b</I> isn't evaluated if 
<I>a</I> is false. Likewise, in the expression <I>a 
|| b</I>,<I> b</I> isn't evaluated if <I>a</I> is true.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>The <I>boolean</I> operators work the same in Java as in 
C/C++.
</blockquote></div>


<A NAME="17"><H3>Operations on strings</H3></A>

<p>The only operator (other than the assignment operator) that Java defines for 
strings is addition. If either argument to the plus operator is of class 
<I>String</I>, Java converts the other argument into a 
<I>String</I> and concatenates the two strings.

<A NAME="18"><H3>Special operators</H3></A>

<p>Java supports several sets of unusual operators. The first is a set of operators 
that combine a binary operator and the assignment operator into one. If 
<I>op</I> were a conventional binary operator, then the following 
<I>op</I>= would exist:

<p><pre>
a op= b;       // is equivalent to a = a op b
</PRE>

<p>This works for all binary operators.

<A NAME="19"><H3>Casting about</H3></A>

<p>Java converts expressions implicitly from smaller types to larger types 
(so-called promoting) unless the cast might lose significant digits.

<p>You can explicitly cast a value to convert it from its current type to another 
type. The cast appears as the desired type enclosed in parentheses before the value to 
be converted, as in the following:

<p><pre>
// convert the float into an integer
int nIntValue = (int)fFloatValue;
</PRE>

</BODY>
</HTML>




