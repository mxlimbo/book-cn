<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Event Processing</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("appf.htm", "about.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="61"><H1>Event Processing</H1></A>

<p>There are several mechanisms for handling external events such as user input.

<A NAME="62"><H2>Event Listeners</H2></A>

<p>The most generic means of handling external events is through the event 
listener mechanism. To associate an event handler with a user interface object such as 
a button, you pass an object of a class that implements the proper listener inter-
face (such as <I>ActionListener</I>) to a method 
<I>addXListener()</I>, where <I>X</I> is the type of 
event (such as <I>Action</I>).

<p>For example, the following code handles a button click:

<p><pre>
import java.awt.*
import java.awt.event.*;
class TV
{
    Button button = new Button();

    TV()
    {
        // add a MyActionListener to the button defined above
        button.addActionListener(new MyActionListener());
    }

    /**
      * Handle the button press event.
      */
    class MyActionListener implements ActionListener
    {
        public void actionPerformed(ActionEvent ae)
        {
            // &#8230;handle the button pressed&#8230;
        }
    }
}
</PRE>

<p>The inner class <I>MyActionListener</I> implements the 
<I>ActionListener</I> interface with the method 
<I>actionPerformed()</I>. The method 
<I>addActionListener()</I> adds the newly created 
<I>MyActionListener</I> object to the list of objects to receive the action event. 
The meaning of &quot;action event&quot; is specific to the user interface object, but for a button 
an action event equates to a user click.

<A NAME="63"><H2>Delegates</H2></A>

<p>WFC objects use an approach to event processing that doesn't require the 
creation of separate classes.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
The delegate mechanism is based on the 
<I>delegate</I> keyword, which is a Microsoft Visual 
J++ 6 extension to the Java language.
</blockquote></div>

<p>The delegate approach to event processing is based on classes created by 
the <I>delegate</I> keyword. In the following example, the class 
<I>KeyPressEventHandler</I> is a delegate class designed to handle 
<I>keyPress</I> events.

<p><pre>
import com.ms.wfc.core.*;
import com.ms.wfc.ui.*;

class TV
{
    Text text = new Text();
    TV()
    {
        text.addOnKeyPress(
                           new KeyPressEventHandler(this.text_keyPress)
                           );
    }

    private void text_keyPress(Object source, KeyPressEvent e)
    {
        // &#8230;process the keypress event&#8230;
    }
}
</PRE>

<p>The <I>KeyPressEventHandler()</I> class is created with a reference to the 
 method <I>text_keyPress</I>() and to the current object.
</BODY>
</HTML>




