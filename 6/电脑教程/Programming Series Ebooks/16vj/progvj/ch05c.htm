<HTML>
<HEAD><LINK REL="STYLESHEET" TYPE="text/css" HREF="Library.css">
<TITLE>Adding Action to WindowedApp</TITLE>


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch05b.htm", "ch05d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>
<A NAME="165"><H1>Adding Action to WindowedApp</H1></A>

<p>An amazing number of things work in WindowedApp, considering that we have yet to write a single line of code. You can enter a file name into the file name Edit control. You can enter and edit text in the multiline Edit control in the middle of the form. You can minimize and maximize the window. You can even close the window by clicking the window's close button. The only things that don't work are the two buttons we added. Of course, the problem is that neither the Forms Designer nor WFC has any idea what these two buttons are for. We still have to define that.

<p>From the Forms Designer, double-click the Cancel button. This opens the Text editor on the newly added method 
<I>button2_click()</I>. (This method name assumes 
that <I>button2</I>, the second button we added, is the name of your Cancel button.) Visual J++ automatically designates the <I>button2_click() </I>method to handle the action event that results from clicking the Cancel button (more on that later in the next section of this chapter).

<p>Edit the <I>button2_click()</I> method so that it looks like the following code:

<p><pre>
/**
 * This method is invoked when the user clicks Cancel.
 */
 private void button2_click(Object source, Event e)
 {
     dispose();
     Application.exit();
 }
</PRE>

<p>The <I>dispose()</I> method closes all open windows in this application and 
returns their assets to the heap. The call to 
<I>Application.exit()</I> terminates the applica-
tion. Rebuild and test the application. Now clicking the Cancel button closes the 
application.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
If you're getting the idea that the Forms Designer has a very &quot;Microsoft Visual Basic feel&quot; about it, you're exactly right. Visual J++ 6 combines the ease-of-use features of Visual Basic with the C++-like object-oriented Java programming language.
</blockquote></div>

<A NAME="166"><H2>Adding the Submit Action</H2></A>

<p>Of course, the real key to this program's functionality is the Submit button's action handler. Double-click the Submit button to create the <I>button1_click()</I> method. The code for the <I>button1_click()</I> method is similar to the code for the Submit button of the AWT application in <A HREF="ch04a.htm">Chapter 4</A>, except for differences between the <I>java.io</I> classes and the WFC <I>TextWriter</I> class. Add code to your <I>button1_click()</I> method so that it looks like this:

<p><pre>
private void button1_click(Object source, Event e)
{
    // get the name of the output file
    String fileName = edit1.getText();

    // if there is one&#8230;
    if (!fileName.equals(&quot;&quot;))
    {
        // open the file with a TextWriter
        TextWriter tw = new TextWriter(fileName, false);

        // get the contents of the text edit field
        // and save to the disk (notice that getLines()
        // returns an array of lines, which must be saved
        // in the file individually)
        String[] array = edit2.getLines();
        for (int i = 0; i &lt; array.length; i++)
        {
            tw.writeLine(array[i]);
        }

        // closing the file automatically flushes the
        // file, plus it ensures that the user can save
        // the contents again in the future
        tw.close();
    }
}
</PRE>

<p>You'll also need to add an <I>import</I> statement at the top of the Form1.java file to import <I>com.ms.wfc.io.*</I>. Importing this package will allow the application to gain 
access to the <I>TextWriter</I> class.

<p>This <I>button1_click</I> method starts by fetching the output file name from the <I>edit1</I> object using the <I>getText()</I> method. If the file name isn't equal to the null string, the program attempts to create a <I>TextWriter</I> object out of it. The program then 
calls <I>edit2.getLines()</I>. This method returns an array of <I>String</I> objects, each one representing a different line of text in the edit area.

<p>To write the text lines out to disk, the program enters a 
<I>for</I> loop that writes out each line of text as long as 
<I>i</I> is less than the length of the <I>String</I> array. Once the loop is complete, the output to the file is flushed by closing the file before exiting.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Since WFC is written for the Windows environment, it isn't 
necessary to convert newline characters to newline/carriage return characters as was the case in <A HREF="ch04a.htm">Chapter 4</A>. This relieves some of the programming burden.
</blockquote></div>

<A NAME="167"><H2>Setting Default Actions</H2></A>

<p>Now that the buttons actually do something, we can assign them to be the 
default Accept and Cancel buttons. Visual J++ chooses the Accept button when the 
user presses the Enter key and the form has focus; it chooses the Cancel button when 
the user presses the escape key.

<p><div class="note"><blockquote>
<b>NOTE</b><hr>
Generally you want the Accept button to take some positive action and the Cancel button to bail out without changing anything. The Enter key will not activate the Accept button when focus is inside a multiline edit box.
</blockquote></div>

<p>To set the default Accept and Cancel buttons, select the form and then find the <I>acceptButton</I> property in the Properties window. Clicking the arrow in the property's value box exposes a drop-down menu containing the names of our two buttons <I>button1</I> and <I>button2</I> (unless you changed the names during the design process). Select <I>button1</I>&#8212;the Submit button. Repeat the process for the <I>cancelButton</I> property except select <I>button2</I>&#8212;the Cancel button.

</BODY>
</HTML>




