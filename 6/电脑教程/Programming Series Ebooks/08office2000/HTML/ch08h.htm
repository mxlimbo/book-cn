<HTML>
<HEAD>
<TITLE>Saving and Reloading Timesheets</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch08g.htm">[Previous]</A> <A HREF="ch08i.htm">[Next]</A><P>

<A NAME="178"><H1>Saving and Reloading Timesheets</H1></A>

<p>The Timesheet solution allows users to save the timesheets they are currently 
working on and reload them later to make changes. The way I implemented 
timesheet saving is similar to how I saved reports in <A HREF="ch07a.htm">Chapter 7</A>, so some of the discussion 
in this section should sound familiar.</p>

<p><div class="sidebar"><blockquote>
<b>How to Play a Sound in Reaction to an Event</b>
<p>When I first decided to play a sound when a user enters a new value into 
the timesheet, I was perplexed at how to accomplish this. There was no 
PlaySound method in Microsoft VBScript and nothing comparable in the Document 
Object Model (DOM). I asked around, and no one seemed to know how to do it. 
Then a helpful program manager from the Internet Explorer team gave me the clue.</p>

<p>I had seen the &lt;bgsound&gt; tag before, but Internet Explorer seemed to 
play the sound only when the page was loaded and not when I wanted it to. 
However, like any other HTML element, the &lt;bgsound&gt; tag can be modified 
using script. If you set the src property of the &lt;bgsound&gt; tag, Internet Explorer 
will download the sound file and play it immediately. Sometimes a slight 
delay occurs the first time you play it (while Internet Explorer downloads the 
file), but after that, the sound plays precisely when you want it to.</p>
</blockquote></div></p>

<p>Although it looks like the Timesheet solution has only two frames, a 
hidden frame is sandwiched between the navigation bar area and the main frame. This 
hidden frame's source is SaveSubmit.asp, which emits a form with a number of 
hidden fields. When saving a timesheet, the main frame sets the values of these fields 
in the hidden frame and then submits the form, posting the timesheet data and other 
information to the web server. The most important piece of information the main 
frame passes to the hidden frame is the value returned from the Spreadsheet 
control's HTMLData property. This property returns a string&#8212;an entire HTML document 
with a table in it&#8212;that represents the control's state, including the values contained 
within the cells of the spreadsheet. The SaveSubmit.asp script saves the timesheet data in 
a database on the server and then returns another form. Figure 8-2 depicts the 
save architecture of this solution.</p>

<p>
<A HREF="javascript:fullSize('F08Pi02x.htm')"> <img src="images/F08Pi02.JPG" width=404 height=297 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 8-2.</B> <I>The Timesheet solution's save architecture.</I><!-- /CAPTION -->
</p>

<p>Let's start by looking at the code in the Save button's onClick event handler:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Sub btnSave_onClick()
    ' Post the data as a save
    SubmitForm &quot;Save&quot;
    ssTimesheet.Dirty = False
End Sub 'btnSave_onClick()
</pre></td></tr></table></p>

<p>This fairly simple routine calls the SubmitForm method (which I will 
describe shortly) and then sets the Spreadsheet control's Dirty property to False. The 
Dirty property indicates whether any changes have been made to the control, either by 
the user or by code. You can set this property to False if you want to reset the dirty 
state, which you would commonly do after saving the timesheet. Later, I'll explain 
how I use this property in the Window object's onBeforeUnload event to prompt 
users to save their timesheets if they forget to do so before attempting to leave the page.</p>

<p>Let's look at the SubmitForm method:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Sub SubmitForm(Verb)
    ' Local variables
    Dim frm             ' Form in hidden frame
        
    ' Get a reference to the form in the hidden frame
    Set frm = window.parent.frames(1).frmTimesheet

    ' Fill out the form
    frm.TimesheetID.value = frmTimesheet.TimesheetID.value
    frm.Verb.value = Verb
    frm.Employee.value = lblEmployee.innerText
    frm.StartDate.value = lblStartDate.innerText 
    frm.Timesheet.value = ssTimesheet.HTMLData
    
    ' Submit the form
    frm.submit 

    If LCase(verb) = &quot;save&quot; Then
        window.parent.status = &quot;Timesheet Saved!&quot;
    End If 
End Sub 'SubmitForm()
</pre></td></tr></table></p>


<p>This code is similar to the code from the <a href="ch07a.htm">previous chapter</a>. It first finds the 
form in the hidden frame; then fills out the various fields on that form, setting the 
Timesheet field to the value of the HTMLData property; and finally calls the submit method 
of the form. This function is used for both saving and submitting timesheets, and 
the Verb parameter distinguishes the action. If the Verb parameter is equal to &quot;Save&quot;, 
the timesheet is simply saved. If it is equal to &quot;Submit&quot;, the timesheet is first saved 
and then processed, which I will describe in the next section.</p>

<p><div class="note"><blockquote><b>NOTE</b><HR>
In case you didn't know, you can set the Status property of the 
Window object to a string that you want to display in the status bar of Internet 
Explorer. This is a convenient way to provide modeless status information 
and feedback.
</blockquote></div></p>

<p>Now that the code in the main frame has submitted the form in the hidden 
frame, let's look at the form itself and the ASP code that processes its submission. 
First, the form:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
&lt;!-- FORM FOR FILE SAVE/SUBMIT --&gt;
&lt;form id=frmTimesheet action=SaveSubmit.asp method=Post&gt;
&lt;input type=hidden name=&quot;Verb&quot; id=&quot;Verb&quot;&gt;
&lt;input type=hidden name=&quot;TimesheetID&quot; id=&quot;TimesheetID&quot;&gt;
&lt;input type=hidden name=&quot;Employee&quot; id=&quot;Employee&quot;&gt;
&lt;input type=hidden name=&quot;StartDate&quot; id=&quot;StartDate&quot;&gt;
&lt;input type=hidden name=&quot;Timesheet&quot; id=&quot;Timesheet&quot;&gt;
&lt;/form&gt;
</pre></td></tr></table></p>


<p>As you will remember from the <a href="ch07a.htm">last chapter</a>, the use of 
<I>method=Post </I>causes Internet Explorer to send the field values in the body of the HTTP request instead 
of in the URL itself. This is the technique we want to use in this chapter as well 
because the HTMLData property can be quite long. Also note that the action for this form 
is to call the SaveSubmit.asp script. Since this happens to be the same file in which 
this form resides, it is self-referential.</p>

<p>Now let's examine the ASP script that processes this form's submission. It 
begins by opening a connection to the database and getting the action verb value 
(&quot;Save&quot; or &quot;Submit&quot;):</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
' Open a connection to the database
Set m_cn = GetConnection()

' Are we saving or submitting?
m_sAction = Request.Form(&quot;Verb&quot;)
m_sAction = LCase(m_sAction)
</pre></td></tr></table></p>

<p>The GetConnection method comes from an included file called 
GetConnection.inc. This file uses the page's current path to determine the location of the 
Timesheets.mdb file on the server. You can reimplement this function quite easily so that it 
uses Microsoft SQL Server, which I highly recommend doing if you use this solution in 
your company. I use Microsoft Jet databases in the samples only because of their 
easy deployment, but the Jet database engine was not designed for a multiuser, 
high-concurrency environment such as a web server. In your real solutions, I 
recommend using SQL Server or some other client/server, multiuser, truly transactional 
database engine.</p>

<p>The code continues by logging the visit to the page. (I will discuss this in 
more detail later.) After logging the visit, the code continues with the save operation:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
If Len(m_sAction) &gt; 0 Then
    ' Get the TimesheetID from the form
    m_idTimesheet = Request.Form(&quot;TimesheetID&quot;)

    ' Save the timesheet stream for both save and submit
    Set m_cmd = server.CreateObject(&quot;ADODB.Command&quot;)
    Set m_cmd.ActiveConnection = m_cn

    ' If the TimesheetId is valid, then update; otherwise, insert
    If Len(m_idTimesheet) &gt; 0 Then
        m_cmd.CommandText = &quot;UPDATE Timesheets set Timesheet = ? &quot; &amp; _
                            &quot;Where TimesheetID = &quot; &amp; m_idTimesheet
        m_cmd.Parameters.Append m_cmd.CreateParameter(&quot;p1&quot;, 203, _
                                       1,2000000000)
        m_cmd.Parameters(0).Value = Request.Form(&quot;Timesheet&quot;)
        m_cmd.Execute 
    Else
        m_cmd.CommandText = &quot;InsertTimesheet p1,p2,p3&quot;
        m_cmd.CommandType = 4

        m_cmd.Parameters.Append m_cmd.CreateParameter(&quot;p1&quot;, 202, 1,70)
        m_cmd.Parameters.Append m_cmd.CreateParameter(&quot;p2&quot;, 135, 1)
        m_cmd.Parameters.Append m_cmd.CreateParameter(&quot;p3&quot;, 203, _
                                       1,2000000000)

        m_cmd.Parameters(0).Value = Request.Form(&quot;Employee&quot;)
        m_cmd.Parameters(1).Value = Request.Form(&quot;StartDate&quot;)
        m_cmd.Parameters(2).Value = Request.Form(&quot;Timesheet&quot;)

        m_cmd.Execute

        Dim rs          ' Temporary Recordset
        Set rs = m_cn.Execute(&quot;select @@IDENTITY&quot;)
        m_idTimesheet = rs(0)
    End If
End If 'Len(m_sAction) &gt; 0
</pre></td></tr></table></p>

<p>I first check whether the form submitted a timesheet ID along with the 
timesheet data. If so, I know to perform an update to the database; if not, I know to 
perform an insert. The code for updating and inserting data into a database is 
straightforward ADO code, but in this case, I wanted to show you how to use a parameterized 
SQL query instead of a stored query. In the <a href="ch07a.htm">last chapter</a>, I showed you how to use 
stored queries or procedures, and I do use a stored query here to insert a new 
timesheet. However, the code for updating a timesheet shows you how to use parameter 
markers (&quot;?&quot;) in a SQL statement instead of using a stored query.</p>

<p>The last section of this code block illustrates how to get the new primary 
key for a newly inserted timesheet. Because the Timesheets table uses an 
AutoNumber field for the primary key, you don't know which number will be assigned to a 
new row until after you have inserted it. The way you retrieve this new number is 
by immediately selecting @@IDENTITY after executing the Insert command. 
Although I don't actually use this value in the ASP script, I wanted to show you how to get 
the new ID in case you need it for your own solution.</p>

<p>After the ASP script saves the timesheet data to the database, it emits that 
same form we saw earlier so that the main frame can again save or submit the 
timesheet. Since the main frame is still in place, you do not need to reload the page.</p>

<p>Let's now look at what happens when an existing timesheet is opened. This 
occurs when the user clicks the name of a saved timesheet on the Open Past Timesheet 
page or when the Default.asp page automatically reloads the current week's timesheet. 
The main timesheet page (Timesheet.asp) is actually an ASP script, so it begins by 
checking whether it was called to load an existing timesheet or to display a new one:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
If m_sAction = &quot;load&quot; Then
    ' Get the timesheet stream
    ' Expect Request.QueryString(&quot;TimesheetID&quot;) to contain the 
    ' timesheet ID
    m_idTimesheet = Request.QueryString(&quot;TimesheetID&quot;)
    
    If m_idTimesheet &gt;= 0 Then 
        Set m_rs = m_cn.Execute(&quot;select StartDate, Timesheet from &quot; &amp; _
                                &quot;Timesheets where TimesheetID = &quot; &amp; _
                                m_idTimesheet)

        ' Get the timesheet stream
        m_dtStart = m_rs(&quot;StartDate&quot;)
        m_sTimesheetStream = m_rs(&quot;Timesheet&quot;)

        m_rs.Close
        Set m_rs = Nothing
    Else
        ' Invalid timesheet ID
        Response.Write &quot;&lt;h3&gt;&quot; &amp; nTimesheet &amp; _
                       &quot; is not a valid timesheet ID!&lt;/h3&gt;&quot;
    End If
End If
</pre></td></tr></table></p>

<p>The m_sAction variable is set earlier in the script and is equal to 
Request.QueryString(&quot;Action&quot;). If it is equal to &quot;load&quot;, the code in this script executes a 
query against the database to retrieve the timesheet identified by the m_idTimesheet 
variable. This query should return only one row. The code continues by copying 
the StartDate and Timesheet column values into variables and then closes and 
releases the Recordset object.</p>

<p>The page continues by emitting the HTML user interface above the 
Spreadsheet control and eventually comes to this section:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
&lt;% 
' If we are creating a new timesheet, include the template object,
' which has all the formatting and initial settings in it
If m_sAction = &quot;new&quot; Then 
%&gt;
&lt;!-- SPREADSHEET COMPONENT WITH SAVED TIMESHEET TEMPLATE --&gt;
&lt;!--#INCLUDE FILE=&quot;Template.htm&quot; --&gt;
&lt;% 
' Otherwise, just include a blank spreadsheet with the same parameter
' settings. We do this because when we load an existing timesheet,
' all the data and formatting will come in with the loaded stream,
' and this keeps the spreadsheet from having to parse the HTML data
' twice (once from the template and once from the loaded stream).
Else 
%&gt;
&lt;object classid=&quot;clsid:0002E510-0000-0000-C000-000000000046&quot; 
id=ssTimesheet style=&quot;width=600px&quot;&gt;
    &lt;param name=&quot;HTMLData&quot; value=&quot; &lt;%= Server.HTMLEncode
    (m_sTimesheetStream) %&gt; &quot;&gt;
    &lt;param name=&quot;DataType&quot; value=&quot;HTMLDATA&quot;&gt;
</pre></td></tr></table></p>

<p>The script checks the m_sAction variable again, and if the variable is equal 
to &quot;new&quot;, the script includes an HTML file that contains the timesheet template. This 
file contains only an &lt;object&gt; tag and &lt;param&gt; tags for the Spreadsheet control. 
The HTMLData &lt;param&gt; tag in the template contains the persisted state of the 
template spreadsheet.</p>

<p>However, if the m_sAction variable is not equal to &quot;new&quot;, the page emits an 
&lt;object&gt; tag and a set of &lt;param&gt; tags for the Spreadsheet control, except that this 
time it emits the timesheet data as the value for the HTMLData &lt;param&gt; tag. I use 
the HTMLEncode method to encode the timesheet data so that double quotes are 
encoded as &amp;quot; and therefore do not confuse Internet Explorer's parser. If I did not 
use this method, the page would emit a double-quote character, which Internet 
Explorer would think signified the end of the parameter value.</p>

<p>When Internet Explorer loads the Spreadsheet control on the client, the 
Spreadsheet control reads this persisted timesheet data from the HTMLData parameter 
and reloads the spreadsheet exactly as you saved it. Because the Spreadsheet control 
loads its state from the &lt;param&gt; tags, no extra flashing occurs as a result of loading a 
default spreadsheet and then reloading the saved timesheet data.</p>

<p>I promised that I would explain how to use the Spreadsheet control's 
Dirty property to prompt the user before he or she navigates away and loses 
unsaved changes. Let's look at that technique now:</p>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Sub window_onBeforeUnload()
    If ssTimesheet.Dirty Then
        window.event.returnValue = &quot;You have changed your timesheet &quot; &amp; _
            &quot;but have not saved it!&quot;
    End If 'Spreadsheet is dirty
End Sub 'window_onBeforeUnload()
</pre></td></tr></table></p>

<p>The Window object raises an event called onBeforeUnload. From this 
event, you can request that Internet Explorer prompt the user, giving him or her the 
option to not leave the page. However, the way you do this is rather odd. You set the 
event's returnValue property to a string that appears in the middle of a message box 
displayed by Internet Explorer. The message box allows the user to click OK to leave the 
page or Cancel to stay. This method also works when the user attempts to close the 
browser window itself and will stop the window from closing if the user clicks the Cancel 
button.</p>


</BODY>
</HTML>





