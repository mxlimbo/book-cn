<HTML>
<HEAD>
<TITLE>Key Elements of the Programming Model, Chapter 2</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch02c.htm">[Previous]</A> <A HREF="ch02e.htm">[Next]</A><P>

<A NAME="31"><H1>Key Elements of the Programming Model</H1></A>

<P>To conclude our introduction to the Spreadsheet component, I'll cover the key 
elements of the control's programming model so that you'll know how to get the 
control working and where to go when you want to write script for different 
functionality. This section is not a full reference to the programming model&#8212;that would be a 
book unto itself. Instead, the properties and methods you'll commonly use are 
presented here, along with a brief description of each. For more information on any part of 
the programming model, refer to the online help in the Msowcvba.chm file, which 
you can find in the local folder under the Office folder (generally Program 
Files\Microsoft Office\Office\1033 for English-speaking people). </P>
<P>If you are at all familiar with the Excel programming model, you will notice 
that the Spreadsheet component's programming model is quite similar.</P>

<A NAME="32"><H2>Working with Enumerations in Script</H2></A>

<P>COM and OLE Automation enable components to define 
<I>enumerations,</I> each of which is a named set of constant values that acts like a type declaration in a 
programming language. A property or method argument can be typed as an enumeration, 
which causes environments such as Visual Basic and Microsoft Visual C++ to display the 
statement completion drop-down list containing the valid constants for that 
enumeration. The Office Web Components, like many other ActiveX controls, have a 
predefined set of enumerations. </P>
<P>However, in scripting environments such as a web page or an ASP page, 
no notion of types exists. Therefore, no ability to use enumeration member names 
in script languages exists since these languages have no way of knowing what a 
particular constant, such as ssHAlignLeft, evaluates to. This means your VBScript or 
ECMA Script code can get littered with magical numbers that are not self-describing. </P>
<P>To alleviate this problem, all the Office Web Components have a top-level 
property called Constants that can be used in scripting languages to access their 
various enumeration members. For example, if you want to use ssHAlignLeft in VBScript 
code to align a cell's contents to the left, you can write code like this:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
MyRange.HAlignment = Spreadsheet1.Constants.ssHAlignLeft
</pre></td></tr></table></p>


<P>To use an enumeration constant, you refer to it as though it were a property 
of the Constants object, and the object will return the correct enumeration member value. </P>
<P>Note that it's useful to set a variable equal to the Constants object if you 
plan on using it in more than one line of your function, both to avoid unnecessary 
typing and for better performance. For example, you can write something like this:</P>

<p><table cellpadding=5 width="95%"><tr><td>
<PRE>
Set c = Spreadsheet1.Constants
MyRange.HAlignment = c.ssHAlignRight
MyRange.VAlignment = c.ssVAlignBottom
</pre></td></tr></table></p>


<P>This Constants object is meant only for scripting languages that have no 
concept of enumerations. If you are writing code in Visual Basic, VBA, or C++, 
simply use the enumerations as you normally would and ignore the Constants object.</P>

<A NAME="33"><H2>Getting Data into the Component</H2></A>

<P>I discussed a number of techniques for getting data into the Spreadsheet 
component earlier. I'll describe those that involve the programming model in more detail 
here. Table 2-1 lists the relevant properties and methods for loading data, all of which 
are exposed from the Spreadsheet object's interface.</P>

<P><B>Table 2-1.</B> <I>Properties and methods for loading data.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property or Method</i></th>
<th><i>Description</i></th>
</tr><tr>
<td valign="top">Spreadsheet.DataType</td>
<td valign="top">A string-based property that tells the 
Spreadsheet component which of the properties to use for 
loading data if more than one is set. The value to 
which you set this property is the name of the other 
property you want it to use&#8212;for example, setting it 
to HTMLURL will cause the component to load the 
data returned from the URL in the HTMLURL property.</td>
</tr><tr>
<td valign="top">Spreadsheet.HTMLData</td>
<td valign="top">A string-based property that can be used to get 
or set the spreadsheet's contents in an HTML table 
format. The format also contains extra attributes 
and XML tags that are used to keep information that 
is necessary to reconstruct the spreadsheet model 
(such as a cell formula) but that is not part of the HTML 
3.2 table format. You can set this property to a 
string containing an HTML table, or you can get 
the value of this property to obtain the entire contents of 
the spreadsheet when necessary for persistence.</td>
</tr><tr>
<td valign="top">Spreadsheet.HTMLURL</td>
<td valign="top">A string-based property that contains a URL 
from which to load the spreadsheet. The URL must 
return an HTML document with a table in it. A 
spreadsheet saved in HTML format from Excel 2000 can be 
loaded using this property, or this property can refer to 
an ASP page or a CGI program that builds tables 
from a database on the fly.</td>
</tr><tr>
<td valign="top">Spreadsheet.CSVData</td>
<td valign="top">A string-based property similar to the 
HTMLData property, except that the format of the data it 
accepts or returns is CSV. This property is useful 
when trying to load data from older systems that aren't capable of emitting HTML.</td>
</tr><tr>
<td valign="top">Spreadsheet.CSVURL</td>
<td valign="top">A string-based property similar to the 
HTMLURL property, except that the format it expects from 
the URL is again CSV. Just as in the HTMLURL case, 
this URL can be an ASP page or a CGI program that gets data from a mainframe or minicomputer 
and returns it to the caller.</td>
</tr><tr>
<td valign="top">Spreadsheet.LoadText</td>
<td valign="top">A method used to load a delimited text file 
into the spreadsheet. Unlike the CSV format, the 
text file format can use any set of field 
delimiters. LoadText and its cousin ParseText are also 
available for the Range object for loading text into 
a specific range of the spreadsheet. LoadText can refer to a file in your file system or to a URL.</td>
</tr></table></p>

<A NAME="34"><H2>Working with Ranges</H2></A>

<P>The most commonly used programming interface in the Spreadsheet component 
is that of the Range object. Range objects are returned from many methods and are 
used whenever you want to modify the contents, formatting, sort order, or filter 
settings of a range of cells. Table 2-2 shows the properties and methods of the Range 
object that you should know about when building solutions with the Spreadsheet component.</P>

<P><B>Table 2-2.</B> <I>Principal Range object properties and methods.</I></P>  

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property or Method</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Spreadsheet.Range</td>
<td valign="top">This method returns a Range object given a 
range reference (such as A1:B2 or A:B). Because a 
range can be just one cell, you can also pass a single 
cell reference (such as A1). The Range method can also take two different cell references and return 
a bounding range.</td>
</TR><TR>
<td valign="top">Range.Address</td>
<td valign="top">This property returns the address of the range 
(for example, A1:B2).</td>
</TR><TR>
<td valign="top">Range.Cells</td>
<td valign="top">I was highly confused by this property when I 
first saw it because it's typed to return another 
Range object. However, you can use this property as 
a collection of cells, meaning that you can access 
the individual cells using a For Each loop. The 
property can also be accessed as a two-dimensional array. For example, MyRange.Cells(1,3).Value 
will return the value from row 1, column 3 in the 
range. There is also a Cells property for the 
Spreadsheet and Worksheet objects, so you can use it 
instead of the Range method (described earlier) to 
access specific cells.</td>
</TR><TR>
<td valign="top">Range.Column, Range.Row</td>
<td valign="top">These properties indicate the number of the first 
     column and first row in the range. They are useful 
     when you're iterating over a range of columns or 
     rows and want to know what column or row 
     you're at.</td>
</TR><TR>
<td valign="top">Range.Columns, Range.Rows</td>
<td valign="top">Although strikingly similar in name to the previous
     two properties, this duo returns a collection of
     columns or rows contained in the Range object. 
     Range.Columns.Count and Range.Rows.Count tell 
     you the number of columns and rows in the current range.</td>
</TR><TR>
<td valign="top">Range.HTMLData</td>
<td valign="top">This property is similar to 
Spreadsheet.HTMLData, except that it is read-only for the 
Range object. Use it to quickly get an HTML table representation 
of the data in a given range.</td>
</TR><TR>
<td valign="top">Range.Value</td>
<td valign="top">This property gets or sets a variant value for 
the range. Although the help file states that 
Range.Value returns a two-dimensional array of variants if 
the range constitutes more than one cell, it actually 
isn't implemented in this version. However, 
Range.Value can accept a two-dimensional array of variants 
for putting data into the range. Use this property 
when you want to set the cell or cells to a literal 
value or when you want to get a cell's current 
unformatted value.</td>
</TR><TR>
<td valign="top">Range.Formula</td>
<td valign="top">This property is used to read or write the 
formula string for a cell. Use it when you want to get 
or set the formula for a cell or cells in a range, 
and remember to use the equals sign (=) at the 
beginning of the formula. </td>
</TR><TR>
<td valign="top">Range.Text</td>
<td valign="top">The Range.Text property returns the formatted 
version of the Range.Value property. It is useful 
when you need to present the formatted value in a 
message box or another user interface element, and 
it's the value you pass when adding AutoFilter criteria.</td>
</TR></TABLE></P>
     
<A NAME="35"><H2>Formatting</H2></A>

<P>Once you have loaded data into the spreadsheet, you might want to apply 
formatting programmatically. Each cell can have its own font, alignment, border, 
color, and number formatting, and all these aspects are set using the properties 
shown in Table 2-3. </P>

<P><B>Table 2-3.</B> <I>Formatting properties.</I></P>
<p><table cellpadding=5 width="95%"><tr>
<th><i>Property</i></th>
<th><i>Description</i></th>
</tr><tr>
<td valign="top">Range.NumberFormat</td>
<td valign="top">A string-based property that controls the 
formatting used for a cell's numeric value. A number 
of built-in formats that you can use by name exist (such as Currency). You can also construct 
your own format definitions (for example, #,###, 
which makes 1000 appear as 1,000). </td>
</tr><tr>
<td valign="top">Range.Font</td>
<td valign="top">A property that returns the common Font 
object used by many of the components. Range.Font 
lets you set various properties of the Font object 
such as Name, Size, Bold, Italic, Color, and 
Underline. Note that you can use the Internet Explorer 
color names with the Font.Color property if you want.</td>
</tr><tr>
<td valign="top">Range.Halignment, Range.Valignment</td>
<td valign="top">Two properties that control the horizontal and 
     vertical text alignment within the range's cells.  
     Enumerations that contain the possible alignment  
     values are defined for each of these properties.</td>
</tr><tr>
<td valign="top">Range.Borders</td>
<td valign="top">A property returning the Borders object that 
lets you set the various aspects of each cell 
border, such as line weight, line style, and line color.</td>
</tr></table></p>

<A NAME="36"><H2>Component-Level Appearance and Behavior</H2></A>

<P>A number of properties and methods affect the entire Spreadsheet component. 
Table 2-4 shows the most interesting ones for custom solutions.</P>

<P><B>Table 2-4.</B> <I>Principal properties that affect the spreadsheet as a whole.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Spreadsheet.AllowPropertyToolbox</td>
<td valign="top">Controls whether the Property 
Toolbox can be shown. If AllowPropertyToolbox is set to False, the 
Property Toolbox toolbar icon and context menu command are 
disabled. You use this property any time you want to disable the default 
formatting user interface and supply your own.</td>
</TR><TR>
<td valign="top">Spreadsheet.AutoFit</td>
<td valign="top">Determines whether the control is 
in AutoFit mode. See the section earlier on AutoFit for more details on 
how this feature works.</td>
</TR><TR>
<td valign="top">Spreadsheet.Dirty</td>
<td valign="top">Tells you if anything has changed 
in the control. If any cell has been modified, this property returns True. 
You commonly use the Dirty property to determine whether you need to 
save the contents in some way. Note that this is a read/write property, so 
you can also reset it to make the spreadsheet &quot;clean&quot; again.</td>
</TR><TR>
<td valign="top">Spreadsheet.DisplayColHeaders, Spreadsheet.DisplayRowHeaders</td>
<td valign="top">Control whether the column and row headers are displayed. These two properties are True by default. Normally, you set them to False if you want to have total control over the spreadsheet surface from your code.</td>
</TR><TR>
<td valign="top">Spreadsheet.DisplayGridlines</td>
<td valign="top">Controls whether gridlines are 
displayed. By default they are, and it's common to turn them off for 
custom solutions that use borders in specific places where you want cell 
separator lines.</td>
</TR><TR>
<td valign="top">Spreadsheet.DisplayPropertyToolbox</td>
<td valign="top">Controls whether the Property 
Toolbox is displayed. Set this to True to display it or False to hide it.</td>
</TR><TR>
<td valign="top">Spreadsheet.DisplayTitleBar</td>
<td valign="top">Controls whether the title bar is 
displayed. The title bar is displayed by default. Use the TitleBar 
property described below to modify the contents and formatting of the title bar.</td>
</TR><TR>
<td valign="top">Spreadsheet.DisplayToolbar</td>
<td valign="top">Controls whether the toolbar is 
displayed. The toolbar is displayed by default.</td>
</TR><TR>
<td valign="top">Spreadsheet.EnableAutoCalculate</td>
<td valign="top">Controls how the spreadsheet 
model recalculates. If this property is set to False, the spreadsheet model will 
not automatically recalculate; you must call the Calculate method of 
the Worksheet object to see new results for changed inputs. This 
property can be useful if you plan to make many changes to a set of inputs 
and want to recalculate the model only when you're done with all 
the changes. By default, this property is True&#8212;models will automatically 
recalculate when changed.</td>
</TR><TR>
<td valign="top">Spreadsheet.ScreenUpdating</td>
<td valign="top">By default, the screen display of 
the spreadsheet always reflects the most current data, but you can set 
this property to False if you plan to perform a number of operations 
and don't want the spreadsheet to flicker after each one. Setting this 
property back to True causes a full repaint.</td>
</TR><TR>
<td valign="top">Spreadsheet.Selection</td>
<td valign="top">Returns the currently selected 
object. You can use the TypeName function in VBA or VBScript to determine 
what type of object it is. </td>
</TR><TR>
<td valign="top">Spreadsheet.TitleBar</td>
<td valign="top">Gives you access to the 
Spreadsheet control's title bar, which you can change the text and formatting of. </td>
</TR><TR>
<td valign="top">Spreadsheet.ViewableRange</td>
<td valign="top">Controls what part of the 
spreadsheet is actually visible. See the earlier 
discussions of ViewableRange and AutoFit for more details on how this works.</td>
</TR></TABLE></P>
     
     
<A NAME="37"><H2>Sorting and Filtering</H2></A>

<P>Table 2-5 lists the properties and methods you will use when sorting and filtering 
data in the Spreadsheet component. </P>

<P><B>Table 2-5.</B> <I>Properties and methods for sorting and filtering.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property or Method</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Range.Sort</td>
<td valign="top">This method sorts the range given a column 
and sort direction.</td>
</TR><TR>
<td valign="top">Worksheet.AutoFilter</td>
<td valign="top">This property returns the AutoFilter object that 
can be used to set up the details of a current filter.</td>
</TR><TR>
<td valign="top">AutoFilter.Filters</td>
<td valign="top">This property returns the Filters collection for 
the current AutoFilter range. One Filter object 
applies to each column in the AutoFilter range, and 
the index of the Filter object matches the column 
index in the range.</td>
</TR><TR>
<td valign="top">AutoFilter.Apply</td>
<td valign="top">This method applies a new AutoFilter. After 
you've set up the criteria, you must call this method 
to actually apply the filter.</td>
</TR><TR>
<td valign="top">Criteria.FilterFunction</td>
<td valign="top">This property controls whether the criteria is 
included in the filter or excluded from it. 
Include filters include exactly the items in the criteria 
set, while exclude filters exclude the items in the 
criteria set but include everything else.</td>
</TR><TR>
<td valign="top">Criteria.ShowAll</td>
<td valign="top">This property determines whether all data will 
be shown. When set to True, the property resets a filter to show all data. When set to False, 
assuming there are no filter criteria, it shows no data.</td>
</TR><TR>
<td valign="top">Criteria.Add</td>
<td valign="top">This method is used to add new criteria to a filter.</td>
</TR><TR>
<td valign="top">Range.AutoFilter</td>
<td valign="top">This method is used to turn AutoFilter on for 
a given range. Call this method first, and then use 
the Worksheet.AutoFilter property (described 
above) to access the filters and set up the criteria.</td>
</TR></TABLE></P>

<A NAME="38"><H2>Protection</H2></A>

<P>If you want to protect part of the spreadsheet so that your users cannot modify 
cell contents or change cell formatting, you need to work with the properties that 
control protection. Table 2-6 lists the common protection properties and gives a 
brief description of how each is used.</P>
<P>Note that the protection settings apply to user interactions through the 
user interface and to operations performed in code. If you want to delete rows while 
a protection option is enabled, you must set the Enabled property of the 
Protection object to False before performing the operation, and then set it back to True to 
return to the protected state.</P>

<P><B>Table 2-6.</B> <I>Common protection properties.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Worksheet.Protection</td>
<td valign="top">Returns the Protection object for 
which you set the various protection options that enable global actions such as inserting or deleting rows.</td>
</TR><TR>
<td valign="top">Protection.Enabled</td>
<td valign="top">Controls whether protection in 
general is enabled. To use the protection options or lock cells, first set the option or 
lock the cells and then set this property to True. You can set this property to 
False to temporarily disable protection while you perform operations in code.</td>
</TR><TR>
<td valign="top">Protection.AllowInsertingColumns, Protection.AllowInsertingRows, Protection.AllowDeletingColumns, Protection.AllowDeletingRows</td>
<td valign="top">Enable or disable the ability to insert or delete columns or rows in the spreadsheet. For example, if AllowInsertingRows is set to False, the spreadsheet will disable all commands that can be used to insert a row, including those in the programming model.</td>
</TR><TR>
<td valign="top">Protection.AllowSizingAllColumns, Protection.AllowSizingAllRows</td>
<td valign="top">Enable or disable the ability to resize columns or rows. For example, if AllowSizingAllRows is set to False, the spreadsheet won't allow the user to resize the rows, nor will it let you do so through code.</td>
</TR><TR>
<td valign="top">Protection.AllowSorting</td>
<td valign="top">Allows or prohibits the sorting of 
data in the spreadsheet. Set AllowSorting to False to prohibit users from sorting the contents of any range.</td>
</TR><TR>
<td valign="top">Protection.AllowFiltering</td>
<td valign="top">Allows or prohibits the use of 
the AutoFilter feature. Set this property to False to prohibit users from enabling the AutoFilter feature. </td>
</TR></TABLE></P>

<A NAME="39"><H2>Undo</H2></A>

<P>Table 2-7 lists the relevant properties and methods you will use when controlling 
the Undo mechanism of the Spreadsheet component. </P>

<P><B>Table 2-7.</B> <I>Properties and methods for controlling undo.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property or Method</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Spreadsheet.BeginUndo</td>
<td valign="top">A method that enables you to treat a number 
of operations as one undo operation. For example, if you call BeginUndo and then perform 
three different sorts or change many cells, you 
can undo all these operations at once. </td>
</TR><TR>
<td valign="top">Spreadsheet.EndUndo</td>
<td valign="top">A method that marks the end of your 
logical undo unit. All operations performed 
between the BeginUndo call and the EndUndo call 
will be undone as a single unit.</td>
</TR><TR>

<td valign="top">Spreadsheet.EnableUndo</td>
<td valign="top">A property that controls whether the undo 
feature is available. By default, it is. You might want 
to temporarily disable this feature to save memory or perform a number of operations in code. </td>
</TR><TR>
<td valign="top"></td>
<td valign="top"></td>
</TR></TABLE></P>

<A NAME="40"><H2>Useful Events</H2></A>

<P>A number of events are exposed from the top-level Spreadsheet object, more 
than from any other control in the OWC library. Table 2-8 lists several of the key 
events you likely will want to use when developing custom solutions around the 
Spreadsheet component. </P>

<P>Nearly all the events in the Spreadsheet control pass a single parameter of 
type SpreadsheetEventInfo to the event handler. SpreadsheetEventInfo is a COM 
object that you can use to retrieve all kinds of information about the state of the 
application when the event was fired, including what was selected, what range was 
affected, where the mouse was, what keys were pressed, and so on. This mirrors the 
treatment of event information in the DOM. </P>
<P>The biggest reason to use an object as the parameter is to support 
cancelable events in JavaScript. Parameters passed to an event in JavaScript are always 
passed by value unless they are object pointers. In other words, if the OWC team had 
designed the events with a ReturnValue 
<I>parameter</I> that the script set to True to 
cancel the event, it wouldn't work in JavaScript because of the parameter being passed 
by value. However, if the script sets an object's ReturnValue 
<I>property</I> to True, the control raising the event will see it. So if you want to cancel an event (most of the 
events whose names begin with &quot;Before&quot; can be canceled), set the ReturnValue property 
of the SpreadsheetEventInfo object to False.</P>

<P><B>Table 2-8.</B> <I>Useful events.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Event</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">Spreadsheet.Change</td>
<td valign="top">Fires any time a change is made to a cell or cells 
in the spreadsheet. Use the Range property of the SpreadsheetEventInfo object to determine the 
range affected.</td>
</TR><TR>
<td valign="top">StartEdit, EndEdit, CancelEdit</td>
<td valign="top">Raised whenever a cell is about to be edited, was just edited, or just had its edit canceled. You can perform data validation in the EndEdit event and set the ReturnValue property of the SpreadsheetEventInfo 
object to True to deny the new value. Use the EditData property of the SpreadsheetEventInfo object to get the new value for the cell. Use the StartEdit event to replace a displayed value with another element for editing purposes, such as using a TrueType font for displaying a special symbol instead of a text description.</td>
</TR><TR>
<td valign="top">BeforeCommand, Command</td>
<td valign="top">Raised just before and after a command&#8212;an action such as sorting; filtering; inserting or deleting rows or columns; showing help; and cutting, copying, or pasting&#8212;is processed. See the list of SheetCommandEnum constants in the Msowcvba.chm file or in your object browser for all the possible commands you can catch using these events.      Again, set the ReturnValue property to False in the BeforeCommand event if you want to cancel the default behavior for an event. For example, you might want to show your own help page when the user clicks the Help button on the spreadsheet toolbar.</td>
</TR></TABLE></P>
     

<A NAME="41"><H2>Retrieving Version Information</H2></A>

<P>Sometimes you need to find out the version of the control you're working with 
so that you can either take advantage of new features or use workaround code to 
solve problems in an older version. Most software programs have service releases 
between their major version releases, so you often need to verify that the version your 
code is talking to is indeed the version you expect. </P>
<P>To help you do so, we added the properties listed in Table 2-9 to every 
control in the Office Web Components library. You can use them to determine the 
version of the control you're coding against and take the appropriate action. </P>

<P><B>Table 2-9.</B> <I>Version information properties for all Office Web Components.</I></P>

<p><table cellpadding=5 width="95%"><tr>
<th><i>Property</i></th>
<th><i>Description</i></th>
</TR><TR>
<td valign="top">MajorVersion</td>
<td valign="top">A long integer value that indicates the major 
version number of the component. For the Office 2000 
release, this number is 9. </td>
</TR><TR>
<td valign="top">MinorVersion</td>
<td valign="top">A string-based value that indicates the minor 
version number of the component. For the Office 2000 
release, this number is 0 and will be incremented if any 
minor releases occur before the next major version 
release. Note that MinorVersion is a string value in case an 
&quot;a&quot; release occurs. It's best to perform an equality 
comparison on this value rather than a greater-than or 
less-than comparison. </td>
</TR><TR>
<td valign="top">BuildNumber</td>
<td valign="top">A string-based value that indicates the build 
number of the component. The build number is 
incremented with every build of the component DLL, and the 
value for the Office 2000 release wasn't yet available at 
the time of this writing. Again, this is a string value, so 
it can handle cases in which a letter is added to a 
version number in the event of a minor release.</td>
</TR><TR>
<td valign="top">Version</td>
<td valign="top">A string-based value that returns the entire 
version number. Use the Version property when displaying 
the version, but use the other properties for 
determining whether the version is the one you want.</td>
</TR></TABLE></P>
     
 
      

</BODY>
</HTML>





