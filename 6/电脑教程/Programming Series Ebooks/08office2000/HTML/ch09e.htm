<HTML>
<HEAD>
<TITLE>The Mortgage Spreadsheet</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch09d.htm">[Previous]</A> <A HREF="ch09f.htm">[Next]</A><P>

<A NAME="187"><H1>The Mortgage Spreadsheet</H1></A>

<P>I want to begin by familiarizing you with the mortgage spreadsheet model itself. 
This model drives most of the Loan Calculation solution, so you need to understand 
how it works before we talk about how the rest of the solution uses it. You can load 
the Mortgage.htm file into Excel 2000, or you can load the original Mortgage.xls file. 
I created the Mortgage.htm file by simply saving the Mortgage.xls file as a web 
page. Figure 9-1 depicts the spreadsheet loaded into Excel 2000.</P>

<P>
<A HREF="javascript:fullSize('f09pi01x.htm')"> <img src="images/f09pi01.JPG" width=404 height=316 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 9-1.</B> <I>The mortgage spreadsheet in Excel 2000.</I><!-- /CAPTION -->
</P>

<P>The spreadsheet is divided into four sections:</P>

<UL>
<P><LI> <b>The loan variables</b> Include purchase price, percent down, interest 
rate, years, and additional principal per payment.</LI></P>

<P><LI> <b>The calculated variables</b> Include down payment, loan amount, 
minimum monthly payment, and actual payment.</LI></P>

<P><LI> <b>The loan results</b> Include total interest paid, total payments, total 
number of payments, and date the loan will be paid off.</LI></P>

<P><LI> <b>A full payment table</b> Lists each monthly payment, noting the 
interest paid, payment, and principal amount remaining. </LI></P>
</UL>

<P>You can change the values of any of the loan variables and see the entire 
spreadsheet recalculate to reflect the new values.</P>

<P>Most of the formulas used are fairly simple, with a few exceptions. The 
minimum monthly payment uses the PMT function, and the number of payments and 
the date the loan is paid off are complex formulas referencing the payment table. 
Although this is not an overly complex spreadsheet, the techniques I describe in this 
chapter work equally well with a wide variety of more complex models. There are 
certain limits, however, which I will discuss momentarily.</P>

<P>As you will no doubt notice, I have formatted the spreadsheet to make the 
organization clear and to highlight the portions you enter vs. the portions 
calculated by Excel or the Spreadsheet component. You might also notice that the 
spreadsheet is protected and that only the loan variable cells are unlocked. This helps 
preserve the integrity of the model, by prohibiting users from randomly changing the 
calculations. Additionally, I have created a frozen pane in the spreadsheet so that the 
three upper sections are always visible while you scroll the payment table below them. 
I mention this now so that when I discuss returning this model to an interactive 
Spreadsheet control later, you will note that these features are preserved.</P>

<P>The ability to open and modify the Mortgage.htm file in Excel is what 
makes this scenario so interesting. In many cases, one person in your organization 
knows how to create the spreadsheet model and maintain it, but another person is 
responsible for building the business solution that might employ the model. For 
example, a mortgage broker would know how to construct this spreadsheet model (and 
probably could point out all its inaccuracies), but a software developer writing a web 
site might not be knowledgeable enough to construct the model, since he or she 
would know how to write ASP scripts but not how to put together a mortgage. The 
broker can build and maintain the model in the easy and familiar tool Excel, and the 
web site developer can simply use that model without needing to know how it was 
built. This is much like using the Microsoft Scripting Runtime library or the 
BrowserType object described in the next section.</P>

<P>Note, however, that since the Spreadsheet component has only one sheet, 
any model you want to use with it must exist on one sheet in Excel. The 
Spreadsheet component cannot load a multisheet model saved from Excel. If you try to use 
one sheet from a multisheet model, the Spreadsheet component will just use the last 
result value from any calculation involving cells on the other sheets.</P>

</BODY>
</HTML>





