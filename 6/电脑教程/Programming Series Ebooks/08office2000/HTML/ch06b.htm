<HTML>
<HEAD>
<TITLE>About the Solution, Chapter 6</TITLE>
<link rel="STYLESHEET" type="text/css" href="webcomp.css">
<SCRIPT LANGUAGE="JavaScript"><!-- 
function fullSize(sURL){window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}
--></SCRIPT>
</HEAD>
<BODY BGCOLOR="#ffffff" TEXT="#000000">
<A HREF="ch06a.htm">[Previous]</A> <A HREF="ch06c.htm">[Next]</A><P>

<A NAME="142"><H1>About the Solution</H1></A>

<P>At Microsoft, our most important project metrics center around bugs: the number 
of bugs opened today; the number of bugs resolved today; the number of bugs 
assigned to different subgroups; and the number of bugs per area, per severity, and per 
priority. We use these metrics to measure the overall health of the project, to 
determine whether it is still on schedule, and to project when we think the product will be 
ready for a beta or final release.</P>

<P>These metrics come from our bug tracking system&#8212;an internal tool that 
stores information in a Microsoft SQL Server database. Every week, our test leads 
prepare detailed reports with charts showing the bug count activity during the previous 
week. These reports are extremely useful; however, when we approached critical points 
in the Microsoft Office 2000 cycle, the program managers wanted to see some of 
these metrics daily. We decided to put the Office Web Components to the test and 
develop a solution that produced charts of these important metrics on a daily basis. We 
offered several on-demand charts that displayed the metrics' values the moment a 
client requested them. This solution was so successful that we began getting requests 
from many other product groups within Microsoft for early builds of the components 
as well as for instructions on how we generated the charts.</P>

<P>In this chapter, I will describe exactly how we built this solution, and I 
will describe some more advanced techniques. However, I will present this solution in 
a slightly different context. Because bug tracking is relevant primarily to software 
companies, I decided to develop a solution around a similar process that most 
large companies have: tracking helpdesk logs. A 
<I>helpdesk</I> is a group of employees or contractors who help others in the company solve their technical problems, 
which are often related to software or hardware. Any time a new problem is reported, a 
new log is generated (some companies refer to this as a 
<I>ticket</I>) and the log progresses through a series of states until it is closed. The manager of a helpdesk needs to 
monitor a number of metrics on a daily basis to measure how successful the helpdesk is. 
For example, the manager often wants to see the number of new logs opened that 
day and the number of logs currently active, broken down by technician or type of 
technology. The manager might also want to watch the current call volume to 
determine whether there are enough technicians to handle the incoming calls. This 
chapter's solution, the Helpdesk Reporting solution, shows how to implement the 
presentation of a set of metrics in a variety of ways: as a server-generated chart, as a 
client-side interactive chart, and as a real-time updating chart.</P>

</BODY>
</HTML>





