<HTML>
<HEAD>
<TITLE>ADSI Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch14g.htm", "ch14i.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="500"><H1>ADSI Application</H1></A>

<P>The best way to learn about using ADSI to program with the Exchange 
Server directory is to examine a sample application. I developed one that 
demonstrates how to create mailboxes, custom recipients, distribution lists, and 
recipient containers, and how to query for recipient directory information such as a 
user's name, address, and phone number. There is one caveat with this 
application&#8212;since it uses DHTML to mimic the Exchange Administrator program, the 
portion of the application that queries the attributes of a specific user will not 
work with Netscape browsers and will work only in Microsoft Internet Explorer 4.0.</p>

<A NAME="501"><H2>Setting Up the ADSI Application</H2></A>

<P>Before you can install the application, you must have a Windows NT 4.0 
Server and a client with certain software installed. Table 14-1 describes the 
required software for setting up the application.</p>

<P><B>Table 14-1</b> <i>Installation Requirements for the ADSI Application</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Required Software</th>
<th>Installation Notes</th>
</tr>     
<tr>
<td valign="top">Exchange Server 5.5 SP1 with Outlook Web Access</td>
<td valign="top"></td>
</tr>
<tr>
<td valign="top">IIS 3.0 or higher with Active Server Pages</td>
<td valign="top">IIS 4.0 is recommended.</td>
</tr>
<tr>
<td valign="top">CDO library (cdo.dll)<br>CDO Rendering library (cdohtml.dll)</td>
<td valign="top">Exchange Server 5.5 SP1 installs CDO library 1.21 and CDO Rendering library 1.21. Outlook 98 installs CDO library 1.21.</td>
</tr>
<tr>
<td valign="top">ADSI 2.0</td>
<td valign="top">ADSI 2.0 is available as a free download from <I><A HREF="http://www.microsoft.com/backoffice/downloads.htm" TARGET="_window2">http://www.microsoft.com/backoffice/downloads.htm</A>.</I></td>
</tr>
<tr>
<td valign="top">ActiveX Data Objects</td>
<td valign="top">IIS 4.0 installs ADO 1.5. Visual Basic 6.0 installs ADO 2.0. For more information on ADO, consult <I><A HREF="http://www.microsoft.com/data/" TARGET="_window2">http://www.microsoft.com/data/</A>.</i></td>
</tr>
<tr>
<td valign="top"><i><B>For the client:</B></I><br>Internet Explorer 4.0<br>Outlook 98</td>
<td valign="top">You can run the client software on the same machine or on a separate machine.</td>
</tr>
</table></p>

<P>To install the ADSI application, first copy the ADSI folder from the 
companion CD to your web server where you want to run the application. 
Start the IIS administration program. Create a virtual directory that points to 
the location where you copied the ADSI files, and name the virtual directory 
<I>adsi</I>. Make sure you enable the Execute permissions option for the virtual 
directory. You will be able to use the following URL to access your ADSI 
application: <I>http://</I>yourservername<I>/adsi.</I></p>

<P>Included with the ADSI files is a DLL named AcctCrt.dll. Use the 
Regsvr32 utility to register it:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
regsvr32 acctcrt.dll
</PRE></TD></TR></TABLE></P>

<P>The first page displayed in the ADSI application is the logon page, as 
shown in Figure 14-3. Once a user enters logon information and verifies the 
dynamically generated Exchange Server information, the application presents a 
menu of available administrative options for the user, as shown in Figure 14-4.</p>

<P>
<A HREF="javascript:fullSize('f14oh03x.htm')"> <img src="images/f14oh03.JPG" width=404 height=307 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-3</B> <I>The Logon page for the ADSI application. The Exchange Server name, organization, and site information are pulled dynamically using the CDO Rendering library.</i><!-- /CAPTION -->
</p>

<P>
<A HREF="javascript:fullSize('f14oh04x.htm')"> <img src="images/f14oh04.JPG" width=404 height=283 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-4</B> <I>The main menu of the ADSI application. Users can create or modify objects in the Exchange Server directory as long as they have the proper permissions on the object.</I><!-- /CAPTION -->
</p>

<P>Now let's step through the actual code that makes up these different 
menu items and show you how to use the ADSI object library with an Exchange 
Server directory.</p>

<A NAME="502"><H2>Logging On to ADSI</H2></A>

<P>The most common operation in the code for the menu items is the object 
binding code for ADSI. This binding code is dispersed throughout all the 
code modules in the application, rather than being centralized and performed 
only once, to make it easier for you to browse the code and understand exactly 
what is happening.</p>

<P>To bind successfully to an object in the Exchange Server directory 
using ADSI, you must use the <I>OpenDSObject </I>method after using the 
<I>GetObject </I>method to set an object variable to the ADSI library. The 
<I>OpenDSObject </I>method takes four parameters:</p>

<UL>
<P><LI><I>AdsPath</I>. The path of the object you want to bind to. We saw 
how to create this path earlier in the chapter.</li></p>

<P><LI><I>The Windows NT user name.</I> Used to attempt authentication against the directory service.</li></p>

<P><LI><I>The password for the Windows NT user name you specify.</I></li></p>

<P><LI><I>A flag that specifies the binding option to 
use.</I> You can use two possible flags: &amp;H00000001 specifies to use secure authentication, 
and &amp;H00000010 specifies to use encryption.</li></p>
</UL>

 <P>Depending on the provider used, these flags specifying the binding 
option might or might not be supported. On the LDAP provider, if you set both 
flags and pass in a user name and a password, ADSI will perform a simple bind 
over Secure Sockets Layer (SSL) sessions, which is a secure authentication over 
a secure channel. The sample application does not use either flag, so a 
<I>0</I> is passed in as the value for the final parameter to indicate that no encryption and no 
secure authentication should be used.</p>

<P>The following code example shows how to set an object variable to 
the LDAP provider and logon using the 
<I>OpenDSObject</I> method:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oIADs = GetObject(&quot;LDAP:&quot;)
oIADs.OpenDSObject(<I>AdsPath</I>, <I>UserName</I>, <I>Password</I>, 0)
</PRE></TD></TR></TABLE></P>

<A NAME="503"><H2>Creating a Mailbox</H2></A>

<P>Using ADSI, you can <I>create</I> mailboxes easily in the Exchange Server 
directory, but they are not fully functional. ADSI does not provide a way for you to 
specify a Windows NT account as the primary owner of the mailbox, nor does it 
allow you to change the permissions on the mailbox so that the primary owner 
has permission to open it. You must perform these operations by using a 
separate program or the Exchange Administrator program. To specify a Windows 
NT account and to change user permissions on the mailbox in the sample 
application, I used a DLL named AcctCrt.DLL. This COM component is 
discussed in detail in <A HREF="ch15a.htm">Chapter 15</A>.</p>

<P>Figure 14-5 shows the interface in the ADSI application that prompts 
the user for information about the mailbox she wants to create. This 
information is needed by the ADSI code to set specific properties in the Exchange 
Server directory. The application also asks for Windows NT account information so 
that a corresponding Windows NT user account can be created and identified as 
the primary account for the Exchange Server mailbox. Be sure to enter 
information in all text boxes; otherwise, an error will be displayed.</p>

<P>
<A HREF="javascript:fullSize('f14oh05x.htm')"> <img src="images/f14oh05.JPG" width=404 height=360 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-5</B> <I>The page where the user can enter information about the mailbox the user wants to create using ADSI.</I><!-- /CAPTION -->
</p>

<P>After the mailbox information is submitted, the ASP page called by the 
application sets a reference to the ADSI library. The ASP page also retrieves 
the Recipients container, where it will create the mailbox and the private 
mailbox store so that it can parse out the correct domain name for the user's 
SMTP address. The application creates proxy addresses for the user just in case 
the Exchange Server has a Lotus cc:Mail or Microsoft Mail connector 
installed. The application also sets other properties as shown in this code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
bstrAT = Request.ServerVariables(&quot;AUTH_TYPE&quot;)
If InStr(1, &quot;_BasicNTLM&quot;, bstrAT, vbTextCompare) &lt; 2 Then
    Response.Buffer = TRUE
    Response.Status = (&quot;401 Unauthorized&quot;)
    Response.AddHeader &quot;WWW.Authenticate&quot;, &quot;Basic&quot;
    Response.End
end if

dim arrOtherAddresses(1)
'Make sure to set error-checking
on error resume next
err.clear
'Retrieve the items from the previous form
fn = Session(&quot;FN&quot;)
ln = Session(&quot;LN&quot;)
dn = Session(&quot;DN&quot;)
al = Session(&quot;AL&quot;)
dir = Session(&quot;DIR&quot;)
NTDomain = Session(&quot;NTDomain&quot;)
NTDescrip = Session(&quot;NTDescrip&quot;)
NTPassword = Session(&quot;NTPassword&quot;)

'Create the Windows NT Account.
'Use the new AcctCrt component.
set oNTContainer = CreateObject(&quot;MSExchange.AcctMgmt&quot;)
oNTContainer.NtAccountCreate NTDomain, al, NTPassword, &quot;&quot;, &quot;&quot;

'Get the SID and descriptor
call oNTContainer.GetSidFromName(NTDomain, al, SecurityID)
call oNTContainer.GenerateSecDescriptor(NTDomain, al, _ 
    SecurityDescriptor)

'Create the Exchange Server mailbox
'Get a reference to the ADSI library
Set oIADS = GetObject(&quot;LDAP:&quot;)
'Query to the Exchange Server
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/cn=&quot; + Session(&quot;CN&quot;) + _
    &quot;,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)
'Query to the Priv MDB on the Exchange Server
bstrMDB = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + _
    &quot;/cn=Microsoft Private MDB,cn=&quot; + Session(&quot;Server&quot;) + _
    &quot;,cn=Servers ,cn=Configuration,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + _
    Session(&quot;O&quot;)

Set oContainer = oIADS.OpenDSObject(bstr1, bstr2, bstr3, 0)
Set oMDB = oIADS.OpenDSObject(bstrMDB, bstr2, bstr3, 0)

'Create a new mailbox - class = organizationalPerson - with the 
'correct directory name
Set oIADS = oContainer.Create(&quot;organizationalPerson&quot;, &quot;cn=&quot; + _
    CStr(dir))
oIADS.Put &quot;NT-Security-Descriptor&quot;, (SecurityDescriptor)
oIADS.Put &quot;Assoc-NT-Account&quot;, (SecurityID)

'Retrieve the information from the Private MDB
oMDB.GetInfo
'Retrieve the SMTP address for the PRIV MDB so that it can be parsed
'for the domain name
strSMTPAddr = oMDB.Get(&quot;mail&quot;)
'Get up to the @ sign
Pos = InStr(strSMTPAddr, &quot;@&quot;)
'Parse out the domain name
SMTPExt = Mid(strSMTPAddr, Pos, Len(strSMTPAddr))
strUserSMTPAddr = replace(al, &quot; &quot;, &quot;&quot;) + SMTPExt
'Create the DN for the MTA of the user
strDNMTA = &quot;cn=Microsoft MTA,cn=&quot; + Session(&quot;Server&quot;) + _
    &quot;,cn=Servers,cn=Configuration,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + _
    Session(&quot;O&quot;)

'Set the array of other addresses such as CCMAIL, MSMAIL, 
'Profs, etc.
arrOtherAddresses(0) = &quot;MS$&quot; + Session(&quot;O&quot;) + &quot;/&quot; + _
    Session(&quot;OU&quot;) + &quot;/&quot; + al
arrOtherAddresses(1) = &quot;CCMAIL$&quot; + al + &quot; at &quot; + Session(&quot;OU&quot;)
'arrOtherAddresses(2) = &quot;Your other addresses&quot;

'Use the Put command to have ADSI write all of these values to 
'the new mailbox.
'mailPreferenceOption must always be 0.
oIADS.Put &quot;mailPreferenceOption&quot;, 0
oIADS.Put &quot;givenName&quot;, CStr(fn)
oIADS.Put &quot;sn&quot;, CStr(ln)
oIADS.Put &quot;cn&quot;, CStr(dn)
oIADS.Put &quot;uid&quot;, CStr(al)
oIADS.Put &quot;Home-MTA&quot;, CStr(strDNMTA)
oIADS.Put &quot;Home-MDB&quot;, &quot;cn=Microsoft Private MDB,cn=&quot; + _
    Session(&quot;Server&quot;) + &quot;,cn=Servers,cn=Configuration,ou=&quot; + 
oIADS.Put &quot;mail&quot;, CStr(strUserSMTPAddr)
oIADS.Put &quot;MAPI-Recipient&quot;, True
oIADS.Put &quot;MDB-Use-Defaults&quot;, True
oIADS.PutEx 2, &quot;otherMailbox&quot;, (arrOtherAddresses)
oIADS.Put &quot;rfc822Mailbox&quot;, CStr(strUserSMTPAddr)
oIADS.Put &quot;textEncodedORaddress&quot;, CStr(&quot;c=US;a= ;p=&quot; + _
    Session(&quot;O&quot;) + &quot;;o=&quot; + Session(&quot;OU&quot;) + &quot;;s=&quot; + ln + &quot;;g=&quot; + _
    fn + &quot;;&quot;)
oIADS.SetInfo

if err.number = 0 then
    'Success!
%&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
    alert(&quot;Successfully created mailbox and account! 
        Please click OK to continue.&quot;);
    window.location=&quot;menu.asp&quot;;
&lt;/SCRIPT&gt;
&lt;%
else
    'Failure!
%&gt;
&lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
    alert(&quot;Error! Error Number: &lt;%=err.number %&gt; Description: 
        &lt;%=err.Description%&gt;&quot;);
    window.location=&quot;menu.asp&quot;;
&lt;/SCRIPT&gt;
&lt;%
end if
%&gt;
</PRE></TD></TR></TABLE></P>

<P>As you can see in the code, the main properties set on the mailbox 
include givenName (First name), sn (Last Name), cn (Display Name), uid (Alias 
Name), Home-MTA, Home-MDB, mail (SMTP address), MAPI-Recipient, 
MDB-Use-Defaults, otherMailbox (other addresses for the mailbox such as 
CCMAIL and MSMAIL), rfc822Mailbox (SMTP address), and 
textEncodedORaddress (X.400 Address).</p>

<p>The example shows how to use the ADSI method <I>PutEx 
</I>to enter a multivalue property into the Exchange Server directory. To create the value for 
a multivalue property, you must use an array in VBScript. When passing this 
array as an argument to the <I>PutEx </I>call, you must place parentheses around 
the array to de-reference it. Recall that the <I>Put 
</I>and <I>PutEx </I>methods will modify the copy of the attributes in the property cache but not in the actual directory 
service. For this reason, the last statement in the code calls 
<I>SetInfo </I>to take all the changes in the cache and commit them to the directory service.</p>

<A NAME="504"><H2>Querying for Information from an Existing Mailbox</H2></A>

<P>The ADSI application also shows you how to query for information from 
an existing Exchange Server mailbox. The user interface, shown in Figure 
14-6, allows you to type in the first name of the user to find the mailbox.</p>

<p>
<A HREF="javascript:fullSize('f14oh06x.htm')"> <img src="images/f14oh06.JPG" width=404 height=278 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-6</B> <I>The page allows you to type the first name of the user in the directory to locate the mailbox.</I><!-- /CAPTION -->
</p>

<p>After the user types in a name, the application uses ADO to query 
the directory service using LDAP. You might be wondering why ADO is used 
rather than the <I>OpenDSObject </I>method we saw in the code for creating a mailbox. 
The reason is that to use the <I>OpenDSObject</I> method, the user must know the 
exact name of the desired object in the directory. ADO is more forgiving. When 
the user is looking for an existing mailbox, the user is not typing in the exact 
name of the user he is looking for but rather some portion of the first name. Also, 
since many times users do not know the alias name of users they are querying, 
forcing users to type in aliases does not make sense. The code to create the 
ADO object and perform the query is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
bstrSearchCriteria = Request.Form(&quot;UserName&quot;)
bstrServer = Session(&quot;Server&quot;)

' Create an ADO object
Set ADOconn = CreateObject(&quot;ADODB.Connection&quot;)
If Err.Number = 0 Then
    ADOconn.Provider = &quot;ADSDSOObject&quot;
    ADOconn.Open &quot;ADs Provider&quot;
    'Create a query using ADO to find all users across all containers
    bstrADOQueryString = &quot;&lt;LDAP://&quot; + bstrServer + _
        &quot;&gt;;(&amp;(objectClass=organizationalPerson)(cn=&quot; + _
        bstrSearchCriteria + &quot;*));cn,adspath;subtree&quot;
    Set objRS = ADOconn.Execute(bstrADOQueryString)
    If Err.Number = 0 Then
        If objRS.RecordCount &gt; 0 Then %&gt;
            &lt;p&gt;Please select one of the following names from the 
            list of names.&lt;/p&gt;
            &lt;p&gt;&lt;em&gt;&lt;strong&gt;Returned Names:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
            &lt;SELECT NAME='MailboxPath'&gt;
            &lt;%
            ' Builds the select control of the queried records
            While Not objRS.EOF
                bstrSelectStatement = bstrSelectStatement &amp; _
                    &quot;&lt;OPTION VALUE='&quot; &amp; objRS.Fields(iCN).Value &amp; _
                    &quot;'&gt;&quot; &amp; objRS.Fields(iADSPATH)
                objRS.MoveNext
            Wend
            Response.Write bstrSelectStatement &amp; &quot;&lt;/SELECT&gt;&quot;
        Else %&gt;
            &lt;B&gt;&lt;I&gt;No entries match your search criteria.  
            Try again using a different value.&lt;/I&gt;&lt;/B&gt;
        &lt;%
        End If
    Else
        If Hex(Err.Number) = 80070044 Then
            Response.Write &quot;&lt;FONT FACE='Arial, Helvetica' &quot; + _
                &quot;SIZE=2&gt;Error &quot; + Hex(Err.Number) + _
                &quot;:  Too many entries match your search &quot; + _
                &quot;criteria!&lt;/FONT&gt;&quot;
            Err.Clear
        Else
        %&gt;
            &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
            alert(&quot;Error Number: &lt;%=Hex(Err.Number)%&gt; \n
                Error Description: &lt;%=Err.Description%&gt;&quot;)
            history.back()
            &lt;/SCRIPT&gt;
            &lt;%
            Err.Clear
        End If
    End If
Else
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
    alert(&quot;Error Number: &lt;%=Hex(Err.Number)%&gt; \nError Description: 
        &lt;%=Err.Description%&gt;&quot;)
    history.back()
    &lt;/SCRIPT&gt;
&lt;%
    Err.Clear
End If
%&gt;
</PRE></TD></TR></TABLE></P>

<P>This code creates an ADO Connection object and sets the Provider 
property to ADSDSOObject, which specifies the LDAP provider for ADSI. You 
can specify any string for the connection string argument to the 
<I>Open </I>method of the ADO Connection object. In this case, the application specifies ADs 
Provider as the argument. The code then creates an LDAP query, which consists of 
four elements separated by semicolons. This is the format:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;LDAP://<I>server</I>/<I>adsidn</I>&gt;;<I>ldapfilter</I>;<I>attributescsv</I>;<I>scope</I>.
</PRE></TD></TR></TABLE></P>

<P>The server argument specifies the name or the IP address of the 
server where the directory is hosted. The adsidn argument specifies the 
distinguished name in the directory where we want to start our query. (The distinguished 
path is discussed in <A HREF="ch11a.htm">Chapter 11</A>.) You should pass in a correctly formed path, 
which we saw how to create earlier in the chapter. The filter parameter specifies 
the LDAP filter string to use. In this case, the LDAP filter states that the object 
class must be organizationalPerson and the name of the object must match the 
letters typed in by the user. The next argument, attributescsv, is a list of attribute 
names, separated by commas, that you want returned for each row in the recordset. 
In our example application, we want the name of the person and the AdsPath 
to the object that corresponds to that person returned so that we can place 
this information in the HTML form, as shown in Figure 14-7. The final argument, scope, informs the directory service how deeply in the 
hierarchy to search for the information being queried. The scope argument can 
be one of three values: base, onelevel, or subtree. Since we want to query for 
all mailboxes that match our specified criteria across all recipient containers in 
the directory, subtree is specified for this argument. The subtree argument 
causes the directory service to search for the information in every subtree under 
the starting object. Base searches only the 
currently specified object, and onelevel searches one level below the current object in the hierarchy.</p>

<p>If the query successfully returns records that match the filter, the code 
uses the standard ADO methods to scroll through the recordset and place the 
records in the HTML form.</p>

<p>
<A HREF="javascript:fullSize('f14oh07x.htm')"> <img src="images/f14oh07.JPG" width=404 height=231 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-7</B> <I>After performing the query, the HTML form is populated with the corresponding recordsets so that a user can pick the person she is interested in finding more information about.</I><!-- /CAPTION -->
</p>

<p>After the user selects the name of the person she wants to find more 
information about in the HTML form, the application opens the directory 
object for this person and retrieves information such as the address, phone 
number, manager, and direct reports. This information is then represented using a 
DHTML tabbed box in the browser, as shown in Figure 14-8.</p>

<p>
<A HREF="javascript:fullSize('f14oh08x.htm')"> <img src="images/f14oh08.JPG" width=404 height=317 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-8</B> <I>The tabbed dialog box that shows the directory information for a specific user.</I><!-- /CAPTION -->
</p>

<P>The next section of code retrieves the user information from the 
directory. I intentionally left out some of the DHTML code from the listing to 
highlight how ADSI is used in the code. Also, only a portion of the ADSI code is 
listed below because the structure of the code throughout this part of the 
application is very similar. Only the specific properties retrieved from the directory 
using ADSI are different. The full code is included on the companion CD.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
On Error Resume Next

if Request.QueryString(&quot;Path&quot;) = &quot;&quot; then
    bstrMailboxPath = Request.Form(&quot;MailboxPath&quot;)
else
    bstrMailboxPath = Request.Querystring(&quot;Path&quot;)
end if
bstrServer = Session(&quot;Server&quot;)
Set objIADs = GetObject(bstrMailboxPath)
strCustomAttributes = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; _
    &quot;/cn=Attribnum&quot; &amp; &quot;,cn=&quot; &amp; &quot;Microsoft DMD&quot; &amp; &quot;,ou=&quot; &amp; _
    Session(&quot;ou&quot;) &amp; &quot;,o=&quot; &amp; Session(&quot;o&quot;)

Function GetAttribName(AttribName)
    strADsPath = Replace(strCustomAttributes,&quot;Attribnum&quot;, _
        AttribName,1,1)
    set objAttributeName = GetObject(strADsPath)
    strAttributeName = objAttributeName.Get(&quot;Admin-Display-Name&quot;)
    GetAttribName = strAttributeName &amp; &quot;:&quot;
end Function

...

&lt;TR&gt;
&lt;TD VALIGN=MIDDLE ALIGN=RIGHT&gt;
&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;First Name:&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;givenName&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD VALIGN=MIDDLE ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Initials:&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;initials&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD VALIGN=MIDDLE ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Last Name:&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;sn&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD VALIGN=MIDDLE ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Display Name:&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;cn&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD VALIGN=MIDDLE ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Alias:&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;uid&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;td width=&quot;100%&quot; colspan=&quot;10&quot;&gt;&amp;nbsp;&lt;hr&gt;
&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD VALIGN=TOP ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Address:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;postalAddress&quot;))%&gt;&lt;/B&gt;
&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Title:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD ALIGN=LEFT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;title&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Company:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Company&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
City:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD VALIGN=TOP&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;l&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Department:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;department&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;/TR&gt;
&lt;TR&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
State:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;st&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Office:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;physicalDeliveryOfficeName&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;
&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Zip Code:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;postalCode&quot;))%&gt;&lt;/B&gt;
&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Assistant:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;secretary&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Country:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;co&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;

&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;

&lt;TD ALIGN=RIGHT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Phone:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;%=Server.HTMLEncode(objIADs.Get(&quot;telephoneNumber&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/DIV&gt;

&lt;DIV CLASS=conts ID=t2Contents&gt;

&lt;!--  Draw out the tab for Organization --&gt;
&lt;Table width=600&gt;
&lt;TR&gt;
&lt;TD width=100% colspan=&quot;5&quot;&gt;&lt;img src=&quot;mailbox.jpg&quot; align=&quot;middle&quot;&gt;
&amp;nbsp;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=5&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;cn&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&amp;nbsp;&lt;/TR&gt;&lt;/TABLE&gt;
&lt;Table border=0&gt;
&lt;TR&gt;
&lt;TD ALIGN=LEFT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Manager Name:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TR&gt;&amp;nbsp;&lt;/TR&gt;
&lt;%
    strManager = objIADs.Get(&quot;manager&quot;)
    strManagerPath = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; &quot;/&quot; &amp; strManager
    set oIADsManager = GetObject(strManagerPath)
    strManagercn = Server.HTMLEncode(oIADsManager.Get(&quot;cn&quot;))
%&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;A Href='MBINFOTABS.ASP?Path=&lt;%=strManagerPath%&gt;'&gt;
&lt;%=strManagercn%&gt;&lt;/a&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=LEFT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Direct Reports:&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;

&lt;% err.clear
    strReports = objIADs.GetEx(&quot;Reports&quot;)
        for i = LBound(strReports) to UBound(strReports)
            'Get each DS object to return the friendly name
            strDirectPath = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; _
                &quot;/&quot; &amp; strReports(i)
            set oIADsReports = GetObject(strDirectPath)
            strReportscn = _
                Server.HTMLEncode(oIADsReports.Get(&quot;cn&quot;))
%&gt;
            &lt;TR&gt;&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
            &lt;B&gt;&lt;img src=&quot;mailboxs.jpg&quot; ALIGN=&quot;Middle&quot;&gt;&amp;nbsp;
            &lt;A Href='MBINFOTABS.ASP?Path=&lt;%=strDirectPath%&gt;'&gt;
            &lt;%=strReportscn%&gt;&lt;/a&gt;
            &lt;/B&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;%
        next
%&gt;
&lt;/TR&gt;&lt;/TABLE&gt;
&lt;/DIV&gt;
&lt;DIV CLASS=conts ID=t4Contents&gt;
&lt;!--  Draw out the tab for Custom Attributes --&gt;
&lt;Table width=600&gt;
&lt;TR&gt;
&lt;TD width=100% colspan=&quot;5&quot;&gt;&lt;img src=&quot;mailbox.jpg&quot; align=&quot;middle&quot;&gt;
&amp;nbsp;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=5&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;cn&quot;))%&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&amp;nbsp;&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;Table&gt;
&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-1&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-1&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-2&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-2&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-3&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-3&quot;))%&gt;&lt;/B&gt;
&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-4&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-4&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-5&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-5&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-6&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-6&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-7&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-7&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-8&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-8&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-9&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-9&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/FORM&gt;
&lt;/DIV&gt;
</PRE></TD></TR></TABLE></P>

<P>The mailbox that the user wants to query is passed to the ASP page. 
Using the <I>GetObject </I>method, the code opens that mailbox in the Exchange 
Server directory and sets an object variable,<I> 
objIADs</I>, to that mailbox. Throughout much of the remaining code, the 
<I>Get </I>method of the objIADs object is used to retrieve specific attributes on the mailbox.</p>

<p>The most interesting pieces of code besides the code for retrieving 
attributes include those that retrieve the user's manager and direct reports 
from the directory. In the application, the manager's name is displayed as a 
hyperlink on the Organization tab so that users can quickly look up the manager's 
directory information. The direct reports of the current user are also displayed 
as hyperlinks on the Organization tab so that users can look at the direct 
report's directory information as well. Figure 14-9 shows a sample of these hyperlinks.</p>

<p>
<A HREF="javascript:fullSize('f14oh09x.htm')"> <img src="images/f14oh09.JPG" width=404 height=279 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-9</B> <I>The Organization tab for a queried mailbox displays the manger and direct reports as hyperlinks.</I><!-- /CAPTION -->
</p>

<p>The following code implements the hyperlink functionality:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;Table border=0&gt;
&lt;TR&gt;
&lt;TD ALIGN=LEFT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Manager Name:&lt;/FONT&gt;&lt;/TD&gt;
&lt;TR&gt;&amp;nbsp;&lt;/TR&gt;
&lt;%
    strManager = objIADs.Get(&quot;manager&quot;)
    strManagerPath = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; &quot;/&quot; &amp; strManager
    set oIADsManager = GetObject(strManagerPath)
    strManagercn = Server.HTMLEncode(oIADsManager.Get(&quot;cn&quot;))
%&gt;    
&lt;TR&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;&lt;B&gt;
&lt;A Href='MBINFOTABS.ASP?Path=&lt;%=strManagerPath%&gt;'&gt;
&lt;%=strManagercn%&gt;&lt;/a&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD&gt;&amp;nbsp;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=LEFT&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
Direct Reports:&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;%
err.clear
strReports = objIADs.GetEx(&quot;Reports&quot;)
for i = LBound(strReports) to UBound(strReports)
    'Get each DS object to return the friendly name
    strDirectPath = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; &quot;/&quot; &amp; _
        strReports(i)
    set oIADsReports = GetObject(strDirectPath)
    strReportscn = Server.HTMLEncode(oIADsReports.Get(&quot;cn&quot;))
%&gt;
    &lt;TR&gt;&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
    &lt;B&gt;&lt;img src=&quot;mailboxs.jpg&quot; ALIGN=&quot;Middle&quot;&gt;&amp;nbsp;
    &lt;A Href='MBINFOTABS.ASP?Path=&lt;%=strDirectPath%&gt;'&gt;
    &lt;%=strReportscn%&gt;&lt;/a&gt;
    &lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;%
    next
%&gt;
&lt;/TR&gt;&lt;/TABLE&gt;
</PRE></TD></TR></TABLE></P>

<P>When you retrieve the manager property from the Exchange Server 
directory, the directory returns the distinguished name of the manager. To 
retrieve the display name of the manager, the code uses the distinguished name to 
create a full AdsPath to the directory object that corresponds to the manager. 
Then the code opens that object and retrieves the display name of the manager.</p>

<P>To retrieve the direct reports, the code uses the 
<I>GetEx </I>method in ADSI. (Recall that the reports attribute is a multivalued property. You must use 
<I>GetEx </I>when retrieving multivalued properties from the Exchange Server 
directory.) The <I>GetEx </I>code returns an array of distinguished names for all direct 
reports of the current user. The code scrolls through each direct report in the array, 
and it displays as a hyperlink an image and the full name of each direct report.</p>

<P>The next code snippet includes some interesting code that retrieves 
the custom attribute names and the values for these custom attributes. The 
Exchange Server directory contains 15 customizable attributes that developers or 
administrators can use to specify custom properties for each entry in the 
directory. Because you can customize the attribute names so that they correspond to 
the value types you store in the attribute, such as cost center or social security 
number, the application queries the Exchange Server directory for the names of 
the custom attributes. The application also queries the directory for the actual 
values in the attributes. All of this functionality is implemented in the 
following section of code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
strCustomAttributes = &quot;LDAP://&quot; &amp; Session(&quot;Server&quot;) &amp; _
    &quot;/cn=Attribnum&quot; &amp; &quot;,cn=&quot; &amp; &quot;Microsoft DMD&quot; &amp; &quot;,ou=&quot; &amp; _
    Session(&quot;ou&quot;) &amp; &quot;,o=&quot; &amp; Session(&quot;o&quot;)

Function GetAttribName(AttribName)
    strADsPath = Replace(strCustomAttributes,&quot;Attribnum&quot;, _
        AttribName,1,1)
    set objAttributeName = GetObject(strADsPath)
    strAttributeName = objAttributeName.Get(&quot;Admin-Display-Name&quot;)
    GetAttribName = strAttributeName &amp; &quot;:&quot;
end Function

...

&lt;Table&gt;
&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-1&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-1&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-2&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-2&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-3&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-3&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-4&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-4&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-5&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-5&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-6&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-6&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-7&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-7&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-8&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-8&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;

&lt;TR&gt;&lt;TD ALIGN=RIGHT NoWrap&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;%=GetAttribName(&quot;Extension-Attribute-9&quot;)%&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;FONT FACE=&quot;Arial, Helvetica&quot; SIZE=2&gt;
&lt;B&gt;&lt;%=Server.HTMLEncode(objIADs.Get(&quot;Extension-Attribute-9&quot;))%&gt;
&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
</PRE></TD></TR></TABLE></P>

<P>Notice that in the strCustomAttributes string, the container 
<I>Microsoft DMD</I> is specified. This container corresponds to the actual schema 
definitions for the Exchange Server directory. To retrieve the names of any custom 
attributes, we must query the schema. To make the querying easier, I created 
a function that takes a string that specifies the name of the custom attribute 
you want to query. The function in turn grabs that attribute in the schema and 
figures out the corresponding custom name of the attribute&#8212;for example, 
cost center. The code then uses the standard <I>Get 
</I>method on the user's mailbox to retrieve the attribute value for that particular user and attribute, as shown 
in Figure 14-10.</p>

<p>
<A HREF="javascript:fullSize('f14oh10x.htm')"> <img src="images/f14oh10.JPG" width=404 height=295 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-10</B> <I>The Custom Attributes tab that shows the custom attributes for the queried mailbox and the custom names of those attributes from the Exchange Server schema.</I><!-- /CAPTION -->
</p>

<A NAME="505"><H2>Creating a Custom Recipient</H2></A>

<P>The code for creating a custom recipient in the Exchange Server directory 
is similar to the code for creating a mailbox, as you would expect. The main 
differences are these:</p>

<UL>
<P><LI>You must specify remote-address as the object class for a 
custom recipient rather than organizationalPerson, which is the object 
class for a mailbox.</li></p>
<P><LI>You need to set different properties when creating a custom 
recipient. For example, you must set the target-address property of 
the custom recipient, which specifies the actual address of the recipient.</li></p>
</UL>

 <P>The following code creates a custom recipient using ADSI:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim arrOtherAddresses(1)

on error resume next
err.clear
smtp = Request.Form(&quot;SMTP&quot;)
fn = Request.Form(&quot;FN&quot;)
ln = Request.Form(&quot;LN&quot;)
dn = Request.Form(&quot;DN&quot;)
al = Request.Form(&quot;AL&quot;)
dir = Request.Form(&quot;DIR&quot;)

Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/cn=&quot; + Session(&quot;CN&quot;) + _
    &quot;,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)

Set oContainer = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
Set oIADs = oContainer.Create(&quot;remote-address&quot;, &quot;cn=&quot; + CStr(dir))

arrOtherAddresses(0) = &quot;MS$&quot; + Session(&quot;O&quot;) + &quot;/&quot; + _
    Session(&quot;OU&quot;) + &quot;/&quot; + al
arrOtherAddresses(1) = &quot;CCMAIL$&quot; + al + &quot; at &quot; + Session(&quot;OU&quot;)

oIADs.Put &quot;target-address&quot;, &quot;SMTP:&quot; + CStr(smtp)
oIADs.Put &quot;givenName&quot;, CStr(fn)
oIADs.Put &quot;sn&quot;, CStr(ln)
oIADs.Put &quot;cn&quot;, CStr(dn)
oIADs.Put &quot;uid&quot;, CStr(al)
oIADs.Put &quot;MAPI-Recipient&quot;, False
oIADs.Put &quot;mail&quot;, CStr(smtp)
oIADs.PutEx 2, &quot;otherMailbox&quot;, (arrOtherAddresses)
oIADs.Put &quot;rfc822Mailbox&quot;, CStr(smtp)
oIADs.Put &quot;textEncodedORaddress&quot;, CStr(&quot;c=US;a= ;p=&quot; + _
    Session(&quot;O&quot;) + &quot;;o=&quot; + Session(&quot;OU&quot;) + &quot;;s=&quot; + ln + _
    &quot;;g=&quot; + fn + &quot;;&quot;)
oIADs.SetInfo
</PRE></TD></TR></TABLE></P>

<A NAME="506"><H2>Creating a Distribution List</H2></A>

<P>Creating a distribution list, like creating a custom recipient, is again very 
similar to creating a mailbox. The object class for a distribution list is 
groupOfNames, and the properties you need to set for the distribution list are a little 
different from the properties you set for a mailbox. For example, for a distribution 
list, you can set the report-to-owner and the report-to-originator properties, 
which specify whether reports should be sent to the distribution list owner or to 
the message originator, respectively. You can also set the distribution list 
owner property, as shown in the next snippet of code, by placing the distinguished 
name of a user into the owner property. This code creates a distribution list:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
dim arrOtherAddress(1)
on error resume next
err.clear
cn = Request.Form(&quot;cn&quot;)
uid = Request.Form(&quot;uid&quot;)

owner = Request.Form(&quot;owner&quot;)
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/cn=&quot; + Session(&quot;CN&quot;) + _
    &quot;,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = &quot;cn=&quot; + Session(&quot;UserName&quot;) + &quot;, cn=&quot; + Session(&quot;Domain&quot;)
bstr3 = Session(&quot;Password&quot;)
bstrMDB = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + _
    &quot;/cn=Microsoft Private MDB,cn=&quot; + Session(&quot;Server&quot;) + _
    &quot;,cn=Servers ,cn=Configuration,ou=&quot; + Session(&quot;OU&quot;) + _
    &quot;,o=&quot; + Session(&quot;O&quot;)
bstrOwner = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/cn=&quot; + owner + _
    &quot;,cn=&quot; + Session(&quot;CN&quot;) + &quot;,ou=&quot; + Session(&quot;OU&quot;) + _
    &quot;,o=&quot; + Session(&quot;O&quot;)
Set oContainer = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
Set oObject = oIADs.OpenDSObject(bstrMDB, bstr2, bstr3, 0)
set oOwner = oIADs.OpenDSObject(bstrOwner,bstr2,bstr3,0)
Set oIADs = oContainer.Create(&quot;groupOfNames&quot;, &quot;cn=&quot; + uid)
oIADs.Put &quot;cn&quot;, Cstr(cn)
oIADs.Put &quot;uid&quot;, CStr(uid)
oIADs.Put &quot;owner&quot;, oOwner.distinguishedName
oObject.GetInfo
Mail = oObject.Get(&quot;mail&quot;)
Pos = InStr(Mail, &quot;@&quot;)
SMTPExt = Mid(Mail, Pos, Len(Mail))
iaddr = replace(uid, &quot; &quot;, &quot;&quot;) + SMTPExt
arrOtherAddress(0) = CStr(&quot;MS$&quot; + Session(&quot;O&quot;) + &quot;/&quot; + _
    Session(&quot;OU&quot;) + &quot;/&quot; + uid)
arrOtherAddress(1) = Cstr(&quot;CCMAIL$&quot; + uid + &quot; at &quot; + _
    Session(&quot;OU&quot;))
oIADs.Put &quot;distinguishedName&quot;, CStr(&quot;cn=&quot; + uid + &quot;,cn=&quot; + _
    Session(&quot;CN&quot;) + &quot;,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + Session(&quot;O&quot;))
oIADs.Put &quot;mail&quot;, CStr(iaddr)
oIADs.PutEx 2, &quot;otherMailbox&quot;, (arrOtherAddress)
oIADs.Put &quot;Report-To-Originator&quot;, True
oIADs.Put &quot;Report-to-Owner&quot;, False
oIADs.Put &quot;Replication-Sensitivity&quot;, CInt(20)
oIADs.Put &quot;rfc822Mailbox&quot;, CStr(iaddr)
oIADs.Put &quot;textEncodedORaddress&quot;, CStr(&quot;c=US;a= ;p=&quot; + _
    Session(&quot;O&quot;) + &quot;;o=&quot; + Session(&quot;OU&quot;) + &quot;;s=&quot; + uid + &quot;;&quot;)
oIADs.SetInfo
if err.number = 0 then
    'Success!
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
        alert(&quot;Distribution List successfully created. 
        Please click OK to continue.&quot;);
        window.location=&quot;menu.asp&quot;;
    &lt;/SCRIPT&gt;
&lt;%
else
    'Failure!
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
        alert(&quot;Error! Error Number: &lt;%=err.number %&gt; 
        Description: &lt;%=err.Description%&gt;&quot;);
        window.location=&quot;menu.asp&quot;;
    &lt;/SCRIPT&gt;
&lt;%
end if
%&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="507"><H2>Adding and Removing Users from a Distribution List</H2></A>

<P>ADSI provides another interface that you can take advantage of when 
working with directory objects that manage group memberships such as a 
distribution list: the IADsGroup interface. It provides methods, such as 
<I>Add</I> and <I>Remove</I>, that make it easy to add and remove members from the group. All you need 
to specify to these methods is the AdsPath that corresponds to the object you 
will either add or remove. To remove a user from a distribution list, you would 
just replace the <I>Add</I> method call with the 
<I>Remove</I> method.</p>

<p>This interface also provides a <I>Members </I>method that returns a collection 
of the current members of the group. The following code checks to see 
whether a user is already a member of a distribution list and, if the user is not, the 
code adds the user to the list:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = Session(&quot;strDLName&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)

'Open the Exchange Server DS object
Set objDL = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
strAlias = Request.Form(&quot;USERSELECT&quot;)
bstr1 = strAlias
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)

'Open the object in the Exchange Server DS that corresponds to 
'the user
set objUser = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
booluserdoesnotexist=true
for each item in objDL.Members
    if item.ADSPath = strAlias then
        booluserdoesnotexist = false
    end if
next
if booluserdoesnotexist then
    'User does not exist in the DL already, so add the user
    objDL.Add objUser.ADSPath
    if err.number = 0 then
%&gt;
        &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
            alert(&quot;Successfully added user to DL. 
                Please click OK to continue.&quot;);
            window.location=&quot;menu.asp&quot;;
        &lt;/SCRIPT&gt;
&lt;%
    else
        'Failure!
%&gt;
        &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
            alert(&quot;Error! Error Number: &lt;%=err.number %&gt; 
                Description: &lt;%=err.Description%&gt;&quot;);
            window.location=&quot;menu.asp&quot;;
        &lt;/SCRIPT&gt;
&lt;%
    end if
else
    'User does exist!
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
        alert(&quot;User already is a member of this DL.  
            Please click OK to continue.&quot;);
        window.location=&quot;menu.asp&quot;;
    &lt;/SCRIPT&gt;
&lt;%
end if
%&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="508"><H2>Displaying the Users in a Distribution List</H2></A>

<P>The sample application allows you to display the users contained in a 
distribution list in an HTML table, as shown in Figure 14-11. This table is 
generated by using a For&#8230;Each construct to scroll through the collection returned by 
the IADsGroup <I>Members </I>method. After retrieving the object that corresponds 
to each member, the code checks the object class and displays the correct 
identifier for each member, such as mailbox, distribution list, or custom 
recipient. Remember that distribution lists can hold different types of objects. The 
code that displays users in a distribution list is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Display users in DL&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;h1&gt;The members of this DL are:&lt;/font&gt;&lt;/h1&gt;
&lt;hr&gt;
&lt;form METHOD=&quot;POST&quot; NAME=&quot;INFO&quot; ACTION=&quot;&quot;&gt;
&lt;input TYPE=&quot;button&quot; VALUE=&quot;Back to Main Menu&quot;
    OnClick='window.location=&quot;menu.asp&quot;;'&gt;
    &lt;input TYPE=&quot;button&quot; VALUE=&quot;Select different container&quot; 
    OnClick='window.location=&quot;logon.asp?diffcont=1&quot;;'&gt;
&lt;/FORM&gt;
&lt;P&gt;
&lt;TABLE BORDER=1 bgcolor=&quot;#79AA86&quot;&gt;
&lt;%
dim oIADs
dim MyContainer
dim objRecipients
dim item

on error resume next
err.clear
strDLName = Request.Form (&quot;DLSELECT&quot;)
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = strDLName
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)
Set objDL = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
Response.Write &quot;&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Class&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Display Name&lt;/TD&gt;
&lt;TD&gt;&lt;B&gt;Alias&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Directory Name&lt;/TD&gt;&lt;/TR&gt;&quot;
for each item in objDL.Members
    set objitem =  oIADs.OpenDSObject(item.ADSPath, bstr2, bstr3, 0)
    select case item.class
        case &quot;organizationalPerson&quot;
            Response.Write &quot;&lt;TD&gt;MailBox&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            objitem.get(&quot;cn&quot;) &amp; &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp;objitem.get(&quot;uid&quot;) &amp; _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; item.name &amp; &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case &quot;Remote-Address&quot;
            Response.Write &quot;&lt;TD&gt;Custom Recipient&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            objitem.get(&quot;cn&quot;) &amp; &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; objitem.get(&quot;uid&quot;) &amp; _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; item.name &amp; &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case &quot;groupOfNames&quot;
            Response.Write &quot;&lt;TD&gt;Distribution List&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            objitem.get(&quot;cn&quot;) &amp; &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; objitem.get(&quot;uid&quot;) &amp; _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; item.name &amp; &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case else
            Response.Write &quot;&lt;TD&gt;&quot; &amp; item.class &amp; &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; _
            objitem.get(&quot;cn&quot;) &amp; &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; objitem.get(&quot;uid&quot;) &amp; _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; &amp; item.name &amp; &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    end select
next
%&gt;
&lt;/TABLE&gt;
&lt;/FONT&gt;
</PRE></TD></TR></TABLE></P>

<P>
<A HREF="javascript:fullSize('f14oh11x.htm')"> <img src="images/f14oh11.JPG" width=404 height=276 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-11</B> <I>An HTML table of the users in a specific distribution list. The table is generated by parsing the return value of the </I>Members<I> method of the IADsGroup interface.</I><!-- /CAPTION -->
</p>

<A NAME="509"><H2>Creating a Recipients Container</H2></A>

<P>The code that creates a Recipients container is probably the easiest to write 
in ADSI because you don't need to set many properties on it. Just remember 
to specify Container as the object class when creating the new Recipients 
container. The only gotcha when creating a Recipients container is that if you 
want the container to appear in the address book, you must set the 
Container-Info attribute to _2147483647 or &amp;H80000001. The following code creates a 
Recipients container based on the values specified by the user:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
on error resume next
err.clear
strDisplayName = Request.Form(&quot;display&quot;)
strDirectoryName = Request.Form(&quot;dir&quot;)
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/ou=&quot; + Session(&quot;OU&quot;) + _
    &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)
Set oContainer = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
Set oIADs = oContainer.Create(&quot;Container&quot;, &quot;cn=&quot; + strDirectoryName)
oIADs.Put &quot;Container-Info&quot;, -2147483647
oIADs.Put &quot;Admin-Display-Name&quot;, Cstr(strDisplayName)
oIADs.Put &quot;rdn&quot;, CStr(strDirectoryName)
oIADs.SetInfo
if err.number = 0 then
    'Success!
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
        alert(&quot;Recipients Container successfully created. 
            Please click OK to continue.&quot;);
        window.location=&quot;menu.asp&quot;;
    &lt;/SCRIPT&gt;
&lt;%
else
    'Failure!
%&gt;
    &lt;SCRIPT LANGUAGE=&quot;JavaScript&quot;&gt;
        alert(&quot;Error! Error Number: &lt;%=err.number %&gt; Description: 
            &lt;%=err.Description%&gt;&quot;);
        window.location=&quot;menu.asp&quot;;
    &lt;/SCRIPT&gt;
&lt;%
end if
%&gt;
</PRE></TD></TR></TABLE></P>

<A NAME="510"><H2>Displaying the Objects in a Recipients Container</H2></A>

<P>The final code we'll look at in this chapter is similar to the code that 
displays the members of a distribution list. This code, however, displays the 
objects contained in a specific Recipients container in the directory. The first part of 
the code displays the list of available Recipients containers in the directory by 
scrolling through the available objects below the OU, or Exchange Server site, 
and then parses out only the objects whose class name is Container. Since the 
Configuration portion of Exchange Server, which contains settings for 
connectors, protocol settings, and monitor settings, also has an object class of 
Container, and you do not want users trying to display all the objects in the 
Configuration container, the code skips this Configuration container. The code then 
displays all the remaining Recipients containers so that the user can select the 
container whose contents they want to display.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
on error resume next
err.clear
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/ou=&quot; + Session(&quot;OU&quot;) + _
    &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)
Set oRecips = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
for each child in oRecips
    select case child.class
        case &quot;Container&quot;
            'Block out the Configuration container
            if instr(child.name,&quot;Configuration&quot;) = 0 then
                Response.Write &quot;&lt;OPTION VALUE='&quot; &amp; child.Name &amp; _
                    &quot;'&gt;&quot; &amp; Replace(child.name,&quot;cn=&quot;, &quot;&quot;)
            end if
    end select
next
</PRE></TD></TR></TABLE></P>

<P>Next the code scrolls through all the objects in the selected container 
and displays the class, display name, alias, and directory name of the object by 
using a For...Each construct. The result of this code is shown in Figure 14-12.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
&lt;%
on error resume next
err.clear
Set oIADs = GetObject(&quot;LDAP:&quot;)
bstr1 = &quot;LDAP://&quot; + Session(&quot;Server&quot;) + &quot;/&quot; + Request.Form(&quot;cn&quot;) + _
    &quot;,ou=&quot; + Session(&quot;OU&quot;) + &quot;,o=&quot; + Session(&quot;O&quot;)
bstr2 = Session(&quot;bstr2&quot;)
bstr3 = Session(&quot;bstr3&quot;)
Set oRecipObjects = oIADs.OpenDSObject(bstr1, bstr2, bstr3, 0)
Response.Write &quot;&lt;TR&gt;&lt;TD&gt;&lt;B&gt;Type&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Display Name&lt;/TD&gt;
&lt;TD&gt;&lt;B&gt;Alias&lt;/TD&gt;&lt;TD&gt;&lt;B&gt;Directory Name&lt;/TD&gt;&lt;/TR&gt;&quot;
for each item in oRecipObjects
    set objitem =  oIADs.OpenDSObject(item.ADSPath, bstr2, bstr3, 0)
    select case item.class
        case &quot;organizationalPerson&quot;
            Response.Write &quot;&lt;TD&gt;MailBox&lt;/TD&gt;&lt;TD&gt;&quot; + _
            objitem.get(&quot;cn&quot;) + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + objitem.get(&quot;uid&quot;) + _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + item.name + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case &quot;Remote-Address&quot;
            Response.Write &quot;&lt;TD&gt;Custom Recipient&lt;/TD&gt;&lt;TD&gt;&quot; + _
            objitem.get(&quot;cn&quot;) + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + objitem.get(&quot;uid&quot;) + _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + item.name + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case &quot;groupOfNames&quot;
            Response.Write &quot;&lt;TD&gt;Distribution List&lt;/TD&gt;&lt;TD&gt;&quot; + _
            objitem.get(&quot;cn&quot;) + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + objitem.get(&quot;uid&quot;) + _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + item.name + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case &quot;Container&quot;
            Response.Write &quot;&lt;TD&gt;Container&lt;/TD&gt;&lt;TD&gt;&quot; + _
            objitem.get(&quot;rdn&quot;) + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + _
            item.name + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
        case else
            Response.Write &quot;&lt;TD&gt;&quot; + item.class + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + _
            objitem.get(&quot;cn&quot;) + &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + objitem.get(&quot;uid&quot;) + _
            &quot;&lt;/TD&gt;&lt;TD&gt;&quot; + item.name + &quot;&lt;/TD&gt;&lt;/TR&gt;&quot;
    end select
next
%&gt;
</PRE></TD></TR></TABLE></P>

<P><div class="sidebar">
<BLOCKQUOTE>
<B>Raising the Number of Results Returned for LDAP Queries</B>
<p>By default, Exchange Server will return only 100 results, so you 
might want to raise the number of results the Exchange Server returns 
for LDAP queries. To do this, launch the Exchange Administrator 
program, and under the Configuration object for your site, select the 
Protocols icon. Double-click the LDAP (Directory) Site Defaults icon in the 
right pane. In the displayed Properties dialog box, click on the Search 
tab. Increase the number in the text box named Maximum Number 
Of Search Results Returned to the number of results you want to 
return from an LDAP query. If you do not raise this number and your 
LDAP query has more than the default 100 results, Exchange Server will 
not return any results.</p>
</BLOCKQUOTE></DIV></P>

<P>
<A HREF="javascript:fullSize('f14oh12x.htm')"> <img src="images/f14oh12.JPG" width=404 height=374 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 14-12</B> <I>The HTML table, which is dynamically generated from the object in a Recipients Container.</I><!-- /CAPTION -->
</p>

</BODY>
</HTML>





