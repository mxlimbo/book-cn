<HTML>
<HEAD>
<TITLE>CDO Tips and Pitfalls</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11h.htm", "ch12a.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="398"><H1>CDO Tips and Pitfalls</H1></A>

<P>The CDO library is powerful and approachable, but you can run into 
problems if you aren't careful when writing your code. This section introduces some 
tips and tricks you should use, and some pitfalls you should avoid. Many of the 
pitfalls I outline are from personal experience&#8212;they are quite frustrating, so I 
recommend you read this section before attempting to write any CDO code.</p>

<A NAME="399"><H2>Avoid the GetNext Trap</H2></A>

<P>Let's jump right in! Look at the following code and try to figure out what is wrong:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
MsgBox oSession.Inbox.Messages.GetFirst.Subject
For Counter = 2 To oSession.Inbox.Messages.Count
    MsgBox oSession.Inbox.Messages.GetNext.Subject
Next
</PRE></TD></TR></TABLE></P>

<P>The same subject will appear in your message box as many times as the 
number of messages in your Inbox. Despite what the code looks like, it won't 
recurse through your Inbox, because if you don't explicitly assign an object to a 
variable, CDO will create needed temporary objects for each statement and 
then discard the object after the statement. This means that you will instantiate a 
new object every time you loop in the For loop. Each new object does not 
maintain the old state of the previous temporary object, so the object will always 
point to the first message in the collection. So you should set explicit variables 
to refer to a collection to get the desired functionality. The following listing 
shows the rewritten code, which behaves as expected:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set oMessages = oSession.Inbox.Messages
Set oMessage = oMessages.GetFirst
MsgBox oMessage.Subject
For Counter = 2 To oMessages.Count
    Set oMessage = oMessages.GetNext
    MsgBox oMessage.Subject
Next
</PRE></TD></TR></TABLE></P>

<A NAME="400"><H2>Avoid Temporary Objects, If Possible</H2></A>

<P>Whenever possible, avoid the use of temporary objects, as demonstrated in 
the previous pitfall. Don't spend a lot of time scouring your code to get rid of 
temporary objects unless you are a major offender of this rule. Sometimes 
you'll want to use temporary objects to represent the different CDO objects 
rather than declare variables. However, using temporary objects should be an 
exception and not a rule in your coding practices.</p>

<A NAME="401"><H2>Use Early Binding with Visual Basic</H2></A>

<P>To improve the performance of your Visual Basic CDO applications, always 
try to use early binding by declaring your CDO variables as specific CDO 
objects. Not only will you find that writing your code is easier because Visual Basic 
can perform type-checking as well as help you finish statements in your code, 
but you'll also find that your users will thank you for the application's 
improved performance.</p>

<A NAME="402"><H2>Use With Statements</H2></A>

<P>You use the dot operator to set a property, call a method, or access 
another object. Essentially, each dot represents additional code that must be 
executed. If you can reduce the number of dot operators in your code, you can 
improve performance of your application. One way to do this is to use With 
statements. For example, consider the following code snippet, which has no With 
statements and is inefficient both from a performance perspective and an 
ease-of-reading perspective:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
MsgBox &quot;Text: &quot; &amp; oSession.Inbox.Messages.GetFirst.Text 
MsgBox &quot;Subj: &quot; &amp; oSession.Inbox.Messages.GetFirst.Subject
</PRE></TD></TR></TABLE></P>

<P>Now consider the next bit of code, which does use the With statement. 
This code will execute faster:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
With oSession.Inbox.Messages.GetFirst  
    MsgBox &quot;Text: &quot; &amp; .Text 
    MsgBox &quot;Subj: &quot; &amp; .Subject 
End With
</PRE></TD></TR></TABLE></P>

<P>The rule of thumb is to think of dots in your code as expensive.</p>

<A NAME="403"><H2>Avoid the Dreaded ASP 0115 Error</H2></A>

<P>When writing CDO applications using ASP, the very best tip I can give you 
is to use the code from this book to handle your logons and logoffs from CDO 
and ASP sessions. The most common pitfall that new and even experienced 
CDO developers run into when writing ASP applications is forgetting to insert 
the correct impersonation code into the Global.asa, which properly destroys the 
CDO and ASP sessions. When a user attempts to access your web application after 
IIS attempts to use the wrong context to destroy these objects, the 
application returns the ASP 0115 error, which means that a trappable error has 
occurred in an external object.</p>

<A NAME="404"><H2>Avoid the MAPIE_FailOneProvider or CDOE_FailOneProvider Error</H2></A>

<P>The final pitfall that I can help you avoid in your ASP applications is the CDOE_
FailOneProvider error, which occurs when you try to access the root folder 
of the Public Folder InfoStore object or a folder in the mailbox of a specific 
user. Many developers have run into this error, especially those who are new to 
ASP programming. The common cause of this error is not changing the security 
context that IIS is using to access the Exchange Server by authenticating the web user 
using either NT Challenge/Response or Basic Authentication. Therefore, the web 
user is trying to access the root of the Public Folder store or a user's mailbox 
using the Windows NT credentials of the anonymous IIS user account. Frequently 
this anonymous account doesn't have security permissions to access the 
Exchange Server. When this is the case, CDO returns 
CDOE_FailOneProvider to indicate an error in accessing the information.</p>

<p>The easiest way to solve this problem is to use the logon and logoff 
code from the examples in this book. These examples, 
especially the Helpdesk application, authenticate users by prompting them for their Windows NT 
credentials before attempting to access any Exchange Server information.</p>

<A NAME="405"><H2>Learn Your Properties and Their IDs Well</H2></A>

<P>As you have seen throughout the chapter, many of the objects in the CDO 
library support the Fields property. The Fields property returns a Fields 
collection, which allows you to find custom and built-in properties using identifiers 
supplied by either Exchange Server or MAPI. One of the most powerful yet 
elusive features is this set of Exchange Server and MAPI properties. These 
properties allow you to perform operations on Exchange Server and Outlook items 
in situations where CDO does not provide objects. For example, in the 
Helpdesk application, user information is pulled out of the AddressEntry property by 
using the unique identifiers for department name, office location, and other 
properties. If you did not know these properties existed, you would think that 
their information was inaccessible from CDO because CDO does not provide 
explicit objects for them.</p>

<P>Another scenario illustrating why these unique properties are valuable 
is that of setting up folders to work offline. The documentation on this 
process is hard to find, but MAPI provides a property called 
PR_OFFLINE_FLAGS (&amp;H663D0003), which contains a zero (0) if the folder is not currently set 
to sychronize offline and a 1 if it is. By using this property, you can 
programmatically set any folder in the mailbox of a user to synchronize offline&#8212;the user 
does not have to set synchronization manually through Outlook. If this field does 
not exist in the Fields collection already, you will need to add it to the 
collection by using the <I>Add</I> method.</p>

<P>The best place to find the information about the properties you can 
use with the Fields collection is in the CDO help file under &quot;MAPI Property 
Tags,&quot; or in the Platform SDK section of the MSDN Library under &quot;Database 
and Messaging Services,&quot; &quot;Messaging API (MAPI),&quot; &quot;Reference,&quot; and then 
&quot;MAPI Properties.&quot; For Exchange Server properties, look in the MSDN Library 
and perform a keyword find on the Index tab for &quot;Microsoft Exchange Server 
Message Properties&quot;. All of these properties combined can provide new 
functionality to your applications, even though CDO may not provide explicit 
objects for this functionality.</p>

</BODY>
</HTML>






