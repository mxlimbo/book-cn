<HTML>
<HEAD>
<TITLE>Techniques Employed by the Account Tracking Application</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch07c.htm", "ch07e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="223"><H1>Techniques Employed by the Account Tracking Application</H1></A>

<P>The Account Tracking application demonstrates many techniques that you 
can emulate in your Outlook applications. For example, it shows you how to 
connect databases to Outlook, automate applications from your Outlook 
application, and use the Outlook object library to modify the controls on your 
form at run time. Let's review some of the interesting techniques used in the 
Account Tracking application.</p>

<A NAME="224"><H2>Setting Global Variables</H2></A>

<P>The first technique used by the Account Tracking application is employing 
global variables in VBScript to keep objects and variables in memory throughout 
the lifetime of the application. This technique also uses global variables to set 
the preferences for the application, such as whether to use a database for the 
product sales information. The following code shows the global variables and 
global initializations:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'**********************************************
' Global Declarations
'**********************************************
Dim oRestrictedContactItems
Dim oRestrictedTaskItems
Dim oExcel
Dim oSheet
Dim ComposeMode
Dim bWebExists
Dim oDefaultPage
Dim oWebBrowser
Dim oCurrentFolder
Dim olstAssignTaskName
Dim oNameSpace
Dim oDatabase
Dim oDatabaseEngine
Dim bUseDatabase    'Used to tell the application to use an
                    'external DB
Dim txtAccountName
Dim txtOriginalStreet, txtOriginalCity, txtOriginalState
Dim txtOriginalPostalCode, txtOriginalCountry
Dim oExcelChart
bUseDatabase = 0    'Tells the application to use an Access database.
                    'Set this to 1 to use a database.
ComposeMode = True  'Used to determine whether the application is in 
                    'compose or read mode.
bWebExists = False  'Used to determine whether the WebBrowser control 
                    'was successfully created.
</PRE></TD></TR></TABLE></P>

<A NAME="225"><H2>Determining Compose or Read Mode: The Item_Read Event</H2></A>

<P>The Item_Read event is used to determine whether the user is creating a 
new account or reading an existing account from the folder. Determining the 
mode is important because during compose mode, the code for reading the 
database and updating the contact address should not be run. After the mode is 
determined, the code sets a global variable, <I>ComposeMode</I>, which is used throughout the application. Because the VBScript in an Outlook form runs whether 
an item is being composed or read, you can use the Read event and global 
variable approach to identify the application mode and have your application 
behave appropriately. The following code shows the 
<I>Item_Read</I> subroutine, which runs only when an item is being read:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub Item_Read
'
'This is the standard Read event for an Outlook form.
'It checks to see whether the user is in read or compose mode
'on the form.
'************************************************
Sub Item_Read
    'Check to see if the application is in compose mode
    ComposeMode = False
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="226"><H2>Initializing the Application: The Item_Open Event</H2></A>

<P>The Item_Open event in the Account Tracking form is used to perform 
some application initialization, in this order:</p>

<OL>
<P><LI>It initializes the global variables used most commonly 
throughout the application, including the Page object for the default page of 
the form and the NameSpace object in Outlook.</li></p>

<P><LI>It checks whether the WebBrowser control on the Company 
Website tab is successfully created. If it is, Item_Open enables a number 
of controls on the form by using the Controls collection.</li></p>

<P><LI>It checks whether the user has filled in the internal account 
team. If so, it adds these users to the list box on the Account Tasks tab 
to make it easy for users to assign tasks to the account team members.</li></p>

<P><LI>It stores the original information for the address of the 
company. This information is used later in the Item_Close event.</li></p>

<P><LI>It initializes and opens the database using helper functions in 
the script.</li></p>
</OL>

<P>The entire <I>Item_Open</I> subroutine is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub Item_Open
'
'This is the standard Outlook Open event. This subroutine
'sets some objects for use later in the app. Checks whether 
'the WebBrowser control was successfully created and also checks 
'to see whether there are names for the account team in the form.  
'If the form is in compose mode, the subroutine selects the name of 
'the account at the top of the form to draw user's 
'attention to that field.
'************************************************
Sub Item_Open
    'Get the default page of the application to use later
    Set oDefaultPage = GetInspector.ModifiedFormPages( _
        &quot;Account Tracking&quot;)
    Set oNameSpace = Application.GetNameSpace(&quot;MAPI&quot;)
    'Initialize the WebBrowser control
    set oWebBrowser = GetInspector.ModifiedFormPages( _
        &quot;Company Website&quot;).Controls(&quot;oWebBrowser&quot;)
    'Check to see if the browser was successfully created; if so, 
    'enable the Go button for the company web site and the 
    'NetMeeting option
    if err.number = 0 then
        bWebExists = True
        oDefaultPage.Controls(&quot;cmdGo&quot;).enabled = True
        oDefaultPage.Controls(&quot;cmdNetMeetingContact&quot;).Visible = True
        oDefaultPage.Controls(&quot;lblNetMeetingContact&quot;).Visible = True
        oDefaultPage.Controls(&quot;cmdNetMeetingContact&quot;).Enabled = True
        oDefaultPage.Controls(&quot;lblNetMeetingContact&quot;).Enabled = True
    end if
    'Get Current Folder
    set oCurrentFolder = Application.ActiveExplorer.CurrentFolder
    call cmdRefreshContactsList_Click
    call cmdRefreshTasks_Click
    'Check to see if any users are assigned to the account team and 
    'add them to assign task list
    set olstAssignTaskName = oDefaultPage.Controls( _
        &quot;lstAssignTaskName&quot;)
    CheckFor &quot;txtAccountSalesRep&quot;
    CheckFor &quot;txtAccountSE&quot;
    CheckFor &quot;txtAccountConsultant&quot;
    CheckFor &quot;txtAccountSupportEngineer&quot;
    CheckFor &quot;txtAccountExecutive&quot;

    If not(ComposeMode) then
        txtOriginalStreet = _
            Item.UserProperties.Find(&quot;Account Street&quot;)
        txtOriginalCity = _
            Item.UserProperties.Find(&quot;Account City&quot;)
        txtOriginalState = _
            Item.UserProperties.Find(&quot;Account State&quot;)
        txtOriginalPostalCode = _
            Item.UserProperties.Find(&quot;Account Postal Code&quot;)
        txtOriginalCountry =  _
            Item.UserProperties.Find(&quot;Account Country&quot;)
        oDefaultPage.Controls(&quot;lblDistrict&quot;).visible = True
        set oDistrict = oDefaultPage.Controls(&quot;lstDistrict&quot;)
        oDistrict.visible = True
    end if

    If not(ComposeMode) and bUseDatabase then
        txtAccountName = item.Subject
        'Initialize DB
        InitializeDatabase &quot;c:\sales.mdb&quot;
        GetDatabaseInfo &quot;[1998 Actual]&quot;, &quot;cur1998ActualProd1&quot;, _
            &quot;cur1998ActualProd2&quot;,&quot;cur1998ActualProd3&quot;
        GetDatabaseInfo &quot;[1999 Actual]&quot;, &quot;cur1999ActualProd1&quot;, _
            &quot;cur1999ActualProd2&quot;,&quot;cur1999ActualProd3&quot;
        GetDatabaseInfo &quot;[1998 Quota]&quot;, &quot;cur1998QuotaProd1&quot;, _
            &quot;cur1998QuotaProd2&quot;,&quot;cur1998QuotaProd3&quot;
    end if

    If ComposeMode Then
        oDefaultPage.txtName.SetFocus
        oDefaultPage.txtName.SelStart = 0
        oDefaultPage.txtName.SelLength = 11
    End If
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="227"><H2>Connecting to the Sales Database: The <I>GetDatabaseInfo </I>Subroutine</H2></A>
<P>If you have enabled a database for the sales information, the 
<I>GetDatabaseInfo</I> subroutine is called to retrieve the sales information from the database and place this information into Outlook fields. This subroutine uses DAO 3.5 to 
query the database and retrieve the sales information associated with accounts 
previously entered in the database. Once this information is placed in the form, 
Outlook formula fields determine whether the current sales of the product are 
exceeding the quota for the product. Outlook then displays how much the 
account team needs to sell to reach its quota or how much over quota the account 
team is. The following code shows the <I>GetDatabaseInfo</I> subroutine:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub GetDatabaseInfo
'
'This subroutine retrieves the product revenue information
'from the database using the passed-in table name as well as
'field names and the current account name from the open item.
'You can customize this subroutine to meet your specific needs.
'************************************************
Sub GetDatabaseInfo(TableName, FieldName1, FieldName2, FieldName3)
    strSQL = &quot;Select Product1, Product2, Product3 FROM &quot; &amp; _
        TableName &amp; &quot; WHERE AccountName = '&quot; &amp; txtAccountName &amp; &quot;';&quot;
    Set oRS = oDatabase.OpenRecordset(strSQL)
    If Err.Number &lt;&gt; 0 Then
        MsgBox Err.Description &amp;  Err.Number &amp; Chr(13) &amp; _
            &quot;OpenRecordset failed&quot; 
        Exit Sub
    End If
    oRS.MoveFirst
  
    Item.UserProperties.Find(FieldName1).Value = oRS.Fields(0)
    Item.UserProperties.Find(FieldName2).Value = oRS.Fields(1)
    Item.UserProperties.Find(FieldName3).Value = oRS.Fields(2)
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="228"><H2>Displaying an Address Book Using CDO: The <I>FindAddress </I>Subroutine</H2></A>
<P>Because Outlook does not natively support displaying an address book in 
its object library, the application needs to be extended with the CDO library, 
which will display address books and return the values selected by the user. To use 
CDO in the Account Tracking application, the VBScript code in the form has to 
create a CDO object by using the <I>CreateObject</I> method of the Outlook Application object. When the object is created, a subroutine starts a session using 
the CDO methods and displays an address book using the caption and button 
text, which are passed in as parameters. Then the subroutine stores the results 
selected by the user in a specific Outlook field, which is also passed in as a 
parameter. Finally, the subroutine logs out of the CDO session and destroys the 
CDO object. Figure 7-8 shows how the address book looks when you click one of 
the address book buttons on the Account Team tab.</p>

<P>
<A HREF="javascript:fullSize('f07oh08x.htm')"> <img src="images/f07oh08.JPG" width=404 height=336 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 7-8</B> <I>Displaying the address book in an Outlook form by using CDO.</I><!-- /CAPTION -->
</p>

<P>The following code shows how the address book is displayed using CDO:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub FindAddress
'
'This subroutine takes the Outlook field that stores
'the returned value and the caption for the dialog box as
'well as the button text for the dialog box, and then it
'displays the AddressBook dialog box by using
'CDO
'************************************************
Sub FindAddress(FieldName, Caption, ButtonText)
    
    On Error Resume Next
    Set oCDOSession = application.CreateObject(&quot;MAPI.Session&quot;)
    oCDOSession.Logon &quot;&quot;, &quot;&quot;, False, False, 0
    txtCaption = Caption
    if not err then 
        set orecip = oCDOSession.addressbook (Nothing, txtCaption, _
            True, True, 1, ButtonText, &quot;&quot;, &quot;&quot;, 0)
    end if
    if not err then
        item.userproperties.find(FieldName).value = orecip(1).Name
    end if
    oCDOSession.logoff
    oCDOSession = Nothing
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="229"><H2>Creating Account Contacts: The <I>cmdAddAccountContact </I>Subroutine</H2></A>
<P>After assigning internal people to the account team, the user can add new 
account contacts for the company. The application has a custom action that creates a 
reply in the folder by using the custom Account Contact form. Because you are 
using an action, the command for the action, Create New Account Contact, will 
appear on context menus. For example, if you right-click on an account item in 
Outlook, Create New Account Contact will be one of the choices. Using an 
action also makes it easy for Outlook to automatically create a conversation thread 
for the account contact. Finally, using an action allows the application to 
attach the original item to the contact, in this case the account item, as a shortcut 
without any coding. The <I>cmdAddAccountContact</I> subroutine, shown in the 
following code snippet, executes the custom action by using the Actions collection on 
the account form. This code is similar to the 
<I>cmdAddTasks</I> subroutine, but instead of displaying an Account Contact form it displays an Account Task form for 
the user to fill in.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'**********************************************
'Sub cmdAddAccountContact_Click
'
'This subroutine creates a new contact and displays
'the form for the new contact as a modal dialog box
'**********************************************
sub cmdAddAccountContact_Click
    Item.Save
    Set AccountContactForm = item.Actions( _
        &quot;Create New Account Contact&quot;).Execute
    AccountContactForm.Display(True)
    call cmdRefreshContactsList_Click
end sub
</PRE></TD></TR></TABLE></P>

<A NAME="230"><H2>Refreshing the Contact List Box: The <I>cmdRefreshContactsList </I>Subroutine</H2></A>
<P>When the form initially opens, or when users add or delete contacts or tasks 
in the folder, the ListBox control that contains these items must be refreshed 
and filled with the most recent information from the folder. To do this, the 
application calls subroutines that restrict the folder based on the item type and 
on the account the item belongs to. The application then programmatically fills 
the list box with the correct information for the account. The list box is shown 
in Figure 7-9.</p>

<P>
<A HREF="javascript:fullSize('f07oh09x.htm')"> <img src="images/f07oh09.JPG" width=404 height=267 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 7-9</B> <I>The Account Contacts list box for the Account Tracking application. It is dynamically filled in using the contact items contained in the folder.</I><!-- /CAPTION -->
</p>

<P>The following code shows the <I>cmdRefreshContactsList</I> subroutine at work:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub cmdRefreshContactsList_Click
'
'This subroutine refreshes the list box of contacts by
'applying a restriction on the folder
' 
'************************************************
Sub cmdRefreshContactsList_Click
    'Initialize ListBox
    set oListBox = oDefaultPage.Controls(&quot;lstContacts&quot;)
    oListBox.Clear
    oListBox.ColumnWidths = &quot;0;172;140;80;120&quot;

    'Create search criteria
    RestrictString = &quot;&quot;
    RestrictString = &quot;[Message Class] = &quot; &amp; _
        &quot;&quot;&quot;IPM.Contact.Account contact&quot;&quot; and [Conversation] = &quot;&quot;&quot; &amp; _
        item.ConversationTopic &amp; &quot;&quot;&quot;&quot;
    Set oRestrictedContactItems = _
        oCurrentFolder.Items.Restrict(RestrictString)
    for i = 0 to oRestrictedContactItems.Count - 1
        oListBox.AddItem
        oListBox.Column(1,i) = oRestrictedContactItems(i+1).FullName
        oListBox.Column(2,i) = oRestrictedContactItems(i+1).JobTitle
        oListBox.Column(3,i) = _
            oRestrictedContactItems(i+1).BusinessTelephoneNumber
        oListBox.Column(4,i) = _
            oRestrictedContactItems(i+1).Email1Address
    next
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="231"><H2>Performing Default Contact Actions: E-mail, Letters, and NetMeeting</H2></A>

<P>Because users of this application will want to perform many actions for 
the account contacts they create, the Account Tracking application provides the 
most common actions as default controls on the Account Contacts tab. The user 
can click the Email Contact link to e-mail a contact. This action uses the 
<I>CreateItem </I>method on the Application object to create an e-mail message, and then 
uses the name of the selected contact to fill in the address information for the e-mail.</p>

<p>If Word 97 is installed, the user can also send a letter to the contact 
by clicking the Send Letter To Contact link. This action takes advantage of 
Outlook by using the CommandBars collection on Outlook forms to trigger 
toolbar actions. Then, by using the 
<I>FindControl</I> method and the <I>Execute</I> method of 
the CommandBar object, the application launches the New Letter To 
Contact option from the Actions menu for a contact. This, in turn, launches the 
Microsoft Word Letter Wizard, which uses the contact information to automatically 
populate the address information for the letter.</p>

<P>Finally, the user can start a NetMeeting with the contact by clicking 
the NetMeeting This Contact link. This action uses the WebBrowser control. 
If the WebBrowser control is available and the user launches the action, the 
application uses VBScript in Outlook to automate the WebBrowser control, 
which starts NetMeeting and connects the user to the Account contact using 
the NetMeeting client.</p>

<p>The following code shows the subroutines that enable the user to send 
an e-mail or a letter and to set up a NetMeeting:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Sub cmdEmailContact_Click
'
'This subroutine e-mails the selected account contact.
'If there is no selected contact, it displays an error.
'************************************************
Sub cmdEmailContact_Click
    set oListBox = oDefaultPage.Controls(&quot;lstContacts&quot;)
    if oListBox.ListIndex = -1 then
        MsgBox &quot;No selected account contact.  Please select one.&quot;, _
            48, &quot;Email Account Contact&quot;
    else
        set oItem = oRestrictedContactItems(oListBox.ListIndex + 1)
        'Create an e-mail message
        set oNewMessage = Application.CreateItem(0)  
        oNewMessage.Recipients.Add oItem.Email1Address
        oNewMessage.Recipients.ResolveAll
        oNewMessage.Display
    end if
end Sub

'************************************************
'Sub cmdSendLettertoContact_Click
'
'The following subroutine uses the commandbars
'property to automate the Contact form in Outlook
'to select the Send Letter To A Contact menu
'command.  This in turn launches the Word Letter 
'Wizard.
'************************************************
Sub cmdSendLettertoContact_Click
    set oListBox = oDefaultPage.Controls(&quot;lstContacts&quot;)
    if oListBox.ListIndex = -1 then
        MsgBox &quot;No selected account contact.  Please select one.&quot;, _
            48, &quot;Send letter to Account Contact&quot;
    else
        set oItem = oRestrictedContactItems(oListBox.ListIndex + 1)
        oItem.Display
        oItem.GetInspector.CommandBars.FindControl(,2498).Execute
    end if
end Sub

'************************************************
'Sub cmdNetMeetingContact_Click
'
'This subroutine checks the contact to see if the
'NetMeeting information is filled in and, if so, it
'automates the WebBrowser control to use the NetMeeting
'callto: syntax to start a NetMeeting
'************************************************
Sub cmdNetMeetingContact_Click
    set oListBox = oDefaultPage.Controls(&quot;lstContacts&quot;)
    if oListBox.ListIndex = -1 then
        MsgBox &quot;No selected account contact.  Please select one.&quot;, _
            48, &quot;NetMeeting Account Contact&quot;
    else
        set oItem = oRestrictedContactItems(oListBox.ListIndex + 1)
        if oItem.NetMeetingAlias = &quot;&quot; then
            MsgBox &quot;The NetMeeting information is not filled&quot; &amp; _
                &quot; in for this contact.&quot;, 48, _
                &quot;NetMeeting Account Contact&quot;
            exit sub
        end if
        if oItem.NetMeetingServer = &quot;&quot; then
            MsgBox &quot;The NetMeeting information is not filled&quot; &amp; _
                &quot; in for this contact.&quot;, 48, _
                &quot;NetMeeting Account Contact&quot;
            exit sub
        end if
        on error resume next
        txtNetMeetingAddress = &quot;callto:&quot; &amp; oItem.NetMeetingServer _
            &amp; &quot;/&quot; &amp; oItem.NetMeetingAlias
        oWebBrowser.Navigate txtNetMeetingAddress
        if err.number &lt;&gt; 0 then
            msgbox &quot;NetMeeting is either not installed or not&quot; &amp; _
                &quot; configured correctly.&quot;, 48, _
                &quot;NetMeeting Account Contact&quot;
            exit sub
        end if
    end if
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="232"><H2>Automating Excel: The <I>cmdCreateSalesChart </I>and <I>cmdPrintAccountSummary </I>Subroutines</H2></A>
<P>If the user has Excel 97 installed, the Account Tracking application can 
automate Excel to create charts, as was shown earlier in Figure 7-7. One way to start 
the chart creation process is to click the Create Sales Chart control on the 
Revenue tab of the application. An even easier way to start this process is to use the 
context menu in the Outlook window. Depending on the item type, you can 
right-click on an item and select Create Account Sales Charts without opening the 
item. The application does this through a custom action. The application captures 
the Item_CustomAction event when the user selects the Create Account Sales 
Charts action, and it calls its own subroutine to handle the action rather than 
displaying a response form. The subroutine then creates sales charts by using 
VBScript to automate Excel. (Notice in the 
<I>Item_CustomAction</I> event procedure that I also tried to create an action for printing an Excel account summary. 
Unfortunately, this action did not work from the context menu.)</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'*************************************************
' Function Item_CustomAction
'
'This is the standard CustomAction event for an Outlook form.
'This event is captured so that the Create Account Sales Chart
'as well as the Print Account Summary actions can appear on the menu.
'However, these actions actually call VBScript functions. This
'is why these actions are canceled after the VBScript functions
'automate Excel to create the reports.  Otherwise, a reply form 
'would appear to the user. 
'*************************************************
Function Item_CustomAction(ByVal Action, ByVal ResponseItem)
    select case Action 
        case &quot;Create Account Sales Charts&quot;
            cmdCreateSalesChart_Click()
            'Disable the action so that a response form does not appear
            Item_CustomAction = False
        case &quot;Print Account Summary&quot;
            cmdPrintAccountSummary_Click()
            Item_CustomAction = False
    end select
end Function

'************************************************
'Sub cmdCreateSalesChart_Click
'
'This subroutine responds to the Click event of the
'Create Sales Charts control. It automates Excel
'to create both a worksheet and embedded charts on that worksheet.
'You can modify this subroutine to meet your specific needs.
'************************************************
Sub cmdCreateSalesChart_Click
    Set oExcel = Item.Application.CreateObject(&quot;Excel.Application&quot;)
    oExcel.Visible = True
    oExcel.Workbooks.Add
    Set oSheet = oExcel.Workbooks(1).Worksheets(&quot;Sheet1&quot;)
    'Set the title for the worksheet
    oSheet.Activate
    set oSheetTitle = oSheet.Range(&quot;A1&quot;)

    oSheetTitle.Value = item.Subject &amp; &quot; Sales Summary&quot;
    oSheetTitle.Font.Bold = -1
    oSheetTitle.Font.Size = 18
    oSheetTitle.Font.Name = &quot;Arial&quot;

    oExcel.Application.ActiveCell.Offset(2,0).Select
    oExcel.Application.ActiveCell.Value = &quot;Revenue Information&quot;
    oExcel.Application.ActiveCell.Font.Bold = -1
    oExcel.Application.ActiveCell.Font.Name= &quot;Arial&quot;
    oExcel.Application.ActiveCell.Font.Size = 11
    oExcel.Application.ActiveCell.Font.Underline = 2
    oExcel.Application.ActiveCell.Offset(1,0).Select

    oSheet.Range(&quot;A6&quot;).Value = &quot;Product 1&quot;
    oSheet.Range(&quot;A7&quot;).Value = &quot;Product 2&quot;
    oSheet.Range(&quot;A8&quot;).Value = &quot;Product 3&quot;

    oSheet.Range(&quot;B5&quot;).Value = &quot;1998 Actual&quot;
    oSheet.Range(&quot;B6&quot;).Value = item.userproperties( _
        &quot;cur1998ActualProd1&quot;)
    oSheet.Range(&quot;B7&quot;).Value = item.userproperties( _
        &quot;cur1998ActualProd2&quot;)
    oSheet.Range(&quot;B8&quot;).Value = item.userproperties( _
        &quot;cur1998ActualProd3&quot;)

    oSheet.Range(&quot;C5&quot;).Value = &quot;1998 Quota&quot;
    oSheet.Range(&quot;C6&quot;).Value = item.userproperties( _
        &quot;cur1998QuotaProd1&quot;)
    oSheet.Range(&quot;C7&quot;).Value = item.userproperties( _
        &quot;cur1998QuotaProd2&quot;)
    oSheet.Range(&quot;C8&quot;).Value = item.userproperties( _
        &quot;cur1998QuotaProd3&quot;)

    oSheet.Range(&quot;D5&quot;).Value = &quot;1999 Actual&quot;
    oSheet.Range(&quot;D6&quot;).Value = item.userproperties( _
        &quot;cur1999ActualProd1&quot;)
    oSheet.Range(&quot;D7&quot;).Value = item.userproperties( _
        &quot;cur1999ActualProd2&quot;)
    oSheet.Range(&quot;D8&quot;).Value = item.userproperties( _
        &quot;cur1999ActualProd3&quot;)

    'Create charts
    set oChart = oSheet.ChartObjects.Add(250, 20, 200, 200)
    oChart.Chart.ChartWizard oSheet.Range( _
        &quot;a6:B8&quot;),5,,2,1,,,&quot;Actual Product 1998&quot;
    set oChart = oSheet.ChartObjects.Add(0, 150, 200, 200)
    oChart.Chart.ChartWizard oSheet.Range( _
        &quot;a6:A8, D6:D8&quot;),5,,2,1,,,&quot;Actual Product 1999&quot;
    set oChart = oSheet.ChartObjects.Add(250, 250, 200, 200)
    oChart.Chart.ChartWizard oSheet.Range( _
        &quot;a6:A8, C6:C8&quot;),5,,2,1,,,&quot;Quota Product 1998&quot;
    set oChart = oSheet.ChartObjects.Add(500, 20, 200, 200)
    oChart.Chart.ChartWizard oSheet.Range( _
        &quot;a6:c8&quot;),3,,2,1,,,&quot;Quota vs Actual 1998&quot;
    oSheet.ChartObjects(4).Chart.ChartType = 54
end Sub
</PRE></TD></TR></TABLE></P>

<P>When the user clicks the Print Account Summary control on the 
Account Tracking tab, an account summary is created in Excel. The Excel Account 
Summary sheet is shown in Figure 7-10.</p>

<p>
<A HREF="javascript:fullSize('f07oh10x.htm')"> <img src="images/f07oh10.JPG" width=404 height=283 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 7-10</B> <I>The Excel Account Summary sheet, which is programmatically created by the Account Tracking application.</I><!-- /CAPTION -->
</p>

<p>The code to create the Account Summary is shown here:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'**********************************************
'Sub cmdPrintAccountSummary_Click
'
'This subroutine calls the helper subroutine to
'print the Account Summary. You can replace the
'helper subroutine without having to replace the controls
'on the form.
'**********************************************
Sub cmdPrintAccountSummary_Click()
    CreateExcelSheet
End Sub

'************************************************
'Sub ExcelPrintProductRevenue
'
'This subroutine is a helper subroutine that prints
'the passed-in product name as well as the current
'sales numbers. You can replace this subroutine
'with your own.
'************************************************
Sub ExcelPrintProductRevenue(ByVal txtType, txtProd1, txtProd2, _
txtProd3,curProd1,curProd2,curProd3)
    oExcel.Application.ActiveCell.Value = txtType
    oExcel.Application.ActiveCell.Font.Italic = -1
    oExcel.Application.ActiveCell.Offset(1,1).Value = txtProd1
    oExcel.Application.ActiveCell.Offset(1,1).Font.Bold = -1
    oExcel.Application.ActiveCell(2,3).Value = curProd1
    oExcel.Application.ActiveCell.Offset(2,1).Value = txtProd2
    oExcel.Application.ActiveCell.Offset(2,1).Font.Bold = -1
    oExcel.Application.ActiveCell(3,3).Value = curProd2
    oExcel.Application.ActiveCell.Offset(3,1).Value = txtProd3
    oExcel.Application.ActiveCell.Offset(3,1).Font.Bold = -1
    oExcel.Application.ActiveCell(4,3).Value = curProd3
end Sub

'************************************************
'Sub CreateExcelSheet
'
'This subroutine automates Excel to create an Account
'Summary report. You can replace this subroutine
'with your own.
'************************************************
Sub CreateExcelSheet
    Set oExcel = Item.Application.CreateObject(&quot;Excel.Application&quot;)
    oExcel.Visible = True
    oExcel.Workbooks.Add
    Set oSheet = oExcel.Workbooks(1).Worksheets(&quot;Sheet1&quot;)
    'Set the title for the worksheet
    oSheet.Activate
    set oSheetTitle = oSheet.Range(&quot;A1&quot;)

    oSheetTitle.Value = item.Subject &amp; &quot; Account Summary&quot;
    oSheetTitle.Font.Bold = -1
    oSheetTitle.Font.Size = 18
    oSheetTitle.Font.Name = &quot;Arial&quot;

    'Put in the printout date
    oSheet.Range(&quot;A3&quot;).Value = &quot;Printed on: &quot; &amp; Date 
    oSheet.Range(&quot;A3&quot;).Font.Bold = -1
    oSheet.Range(&quot;A3&quot;).Font.Name = &quot;Arial&quot;
    oSheet.Range(&quot;A3&quot;).Font.Size = 12
    oSheet.Range(&quot;A3&quot;).Font.Color = RGB(0,0,255)

    'Put in the date the item was created
    oSheet.Range(&quot;A4&quot;).Value = &quot;Account created on: &quot; &amp; _
        item.CreationTime
    oSheet.Range(&quot;A4&quot;).Font.Bold = -1
    oSheet.Range(&quot;A4&quot;).Font.Name = &quot;Arial&quot;
    oSheet.Range(&quot;A4&quot;).Font.Size = 12
    oSheet.Range(&quot;A4&quot;).Font.Color = RGB(0,0,255)

    'Put in the date the item was last modified
    oSheet.Range(&quot;A5&quot;).Value = &quot;Account modified on: &quot; &amp; _
        item.LastModificationTime
    oSheet.Range(&quot;A5&quot;).Font.Bold = -1
    oSheet.Range(&quot;A5&quot;).Font.Name = &quot;Arial&quot;
    oSheet.Range(&quot;A5&quot;).Font.Size = 12
    oSheet.Range(&quot;A5&quot;).Font.Color = RGB(0,0,255)
    oSheet.Range(&quot;A7&quot;).Activate
    
    'Retrieve contact information
    oExcel.Application.ActiveCell.Offset(1,0).Select
    oExcel.Application.ActiveCell.Value = &quot;Account Contacts&quot;
    oExcel.Application.ActiveCell.Font.Bold = -1
    oExcel.Application.ActiveCell.Font.Name= &quot;Arial&quot;
    oExcel.Application.ActiveCell.Font.Size = 11
    oExcel.Application.ActiveCell.Font.Underline = 2
    oExcel.Application.ActiveCell.Offset(1,0).Select

    'Refresh the contact listbox
    cmdRefreshContactsList_Click
    'Retrieve the data from the listbox
    set oPage = GetInspector.ModifiedFormPages(&quot;Account Tracking&quot;)
    set oListBox = oPage.lstContacts
    If oListBox.ListCount &gt; 0 Then
        oExcel.Application.ActiveCell.Value = &quot;Contact Name&quot;
        oExcel.Application.ActiveCell.Font.Bold = -1
        oExcel.Application.ActiveCell.Offset(0,1).Value = _
            &quot;Job Title&quot;
        oExcel.Application.ActiveCell.Offset(0,1).Font.Bold = -1
        oExcel.Application.ActiveCell.Offset(0,2).Value = _
            &quot;Business Phone&quot;
        oExcel.Application.ActiveCell.Offset(0,2).Font.Bold = -1
        oExcel.Application.ActiveCell.Offset(0,3).Value = _
            &quot;Email Address&quot;
        oExcel.Application.ActiveCell.Offset(0,3).Font.Bold = -1
        oExcel.Application.ActiveCell.Offset(1,0).Activate
        For intLB = 0 to oListBox.ListCount -1
            oExcel.Application.ActiveCell.Value = _
                oListBox.Column(1,intLB)
            oExcel.Application.ActiveCell.Offset(0,1).Value = _
                oListBox.Column(2,intLB)
            oExcel.Application.ActiveCell.Offset(0,2).Value = _
                oListBox.Column(3,intLB)
            oExcel.Application.ActiveCell.Offset(0,3).Value = _
                oListBox.Column(4,intLB)
            oExcel.Application.ActiveCell.Offset(1,0).Activate
        Next
    Else
        oExcel.Application.ActiveCell.Value = _
            &quot;No contacts for this account&quot;
    End If

    'Retrieve revenue information
    oExcel.Application.ActiveCell.Offset(2,0).Select
    oExcel.Application.ActiveCell.Value = &quot;Revenue Information&quot;
    oExcel.Application.ActiveCell.Font.Bold = -1
    oExcel.Application.ActiveCell.Font.Name= &quot;Arial&quot;
    oExcel.Application.ActiveCell.Font.Size = 11
    oExcel.Application.ActiveCell.Font.Underline = 2
    oExcel.Application.ActiveCell.Offset(1,0).Select
    'Retrieve the user properties for the revenue information
    set ouserprop = item.userproperties

    ExcelPrintProductRevenue &quot;1998 Actual&quot;,&quot;Product1&quot;,&quot;Product2&quot;, _
        &quot;Product3&quot;,ouserprop(&quot;cur1998ActualProd1&quot;), _
        ouserprop(&quot;cur1998ActualProd2&quot;), _
        ouserprop(&quot;cur1998ActualProd3&quot;)
    oExcel.Application.ActiveCell.Offset(5,0).Select
    ExcelPrintProductRevenue &quot;1999 Actual&quot;,&quot;Product1&quot;,&quot;Product2&quot;, _
        &quot;Product3&quot;,ouserprop(&quot;cur1999ActualProd1&quot;), _
        ouserprop(&quot;cur1999ActualProd2&quot;), _
        ouserprop(&quot;cur1999ActualProd3&quot;)
    oExcel.Application.ActiveCell.Offset(5,0).Select
    ExcelPrintProductRevenue &quot;1998 Quota&quot;,&quot;Product1&quot;,&quot;Product2&quot;, _
        &quot;Product3&quot;,ouserprop(&quot;cur1998QuotaProd1&quot;), _
        ouserprop(&quot;cur1998QuotaProd2&quot;), _
        ouserprop(&quot;cur1998QuotaProd3&quot;)

    'Format the output
    oSheet.Columns(&quot;A:B&quot;).EntireColumn.AutoFit
    oSheet.Columns(&quot;B:B&quot;).HorizontalAlignment = -4152
    oSheet.Range(&quot;A1:F1&quot;).Select
    oSheet.Range(&quot;A1:F1&quot;).HorizontalAlignment=7
End Sub
</PRE></TD></TR></TABLE></P>

<A NAME="233"><H2>Unloading the Application: The Item_Close Event</H2></A>

<P>When the user is finished using the application, the Item_Close event for 
the application is invoked. In the event handler, the application checks to see 
whether the user has updated any account address information. If the user has 
updated information, the application prompts the user about whether she wants to 
update all the contacts for that specific account in the folder. If the user answers 
yes, all the accounts are updated by using the properties of the standard 
Outlook contact. Figure 7-11 shows the message box that is displayed when the 
user changes the address in the Account Tracking form.</p>

<p>
<A HREF="javascript:fullSize('f07oh11x.htm')"> <img src="images/f07oh11.JPG" width=404 height=123 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 7-11</B> <I>If the user wants to change the default address for each contact, this message box prompts the user about whether to change the addresses of all associated contacts for the account.</I><!-- /CAPTION -->
</p>

<p>In the code that follows, notice how the 
<I>Save</I> method of the account contact is called only once after all the properties are changed. Outlook 
automatically parses the individual address properties such as 
BusinessAddressStreet, BusinessAddressCity, and BusinessAddressPostalCode to create the 
overall BusinessAddress property. If the code saved the item after making a change 
in each property, Outlook would automatically overwrite the previous 
changes when it parsed the individual properties to create the BusinessAddress 
property. Instead a temporary variable, 
<I>boolSaveItem</I>, is used to notify the code at the 
end of the If statements about whether the contact items that are being 
modified need to be saved or not. The 
<I>Item_Close</I> event handler also contains the 
code to destroy any database objects used in the application so that they are not 
left in memory after the application closes. The following code shows the 
<I>Item_Close</I> event procedure:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
'************************************************
'Function Item_Close
'
'This function fires on the standard Outlook close
'event and prompts the user about whether to update 
'all contacts for the company if the user changed the 
'master address for the company. This routine will 
'update only the contacts that have the same text in 
'the address fields as the original since users can 
'change the address fields to reflect different 
'locations or addresses for customers. This function 
'also cleans up any open database objects that are left.
'************************************************
Function Item_Close()
    boolSomethingDirty = 0        'False
    If not(ComposeMode) then
        'Divided into multiple ifs to pinpoint changed property on 
        'exit for faster performance when updating
        If oDefaultPage.Controls(&quot;txtStreet&quot;).Value &lt;&gt; _
        txtOriginalStreet then
            boolStreetIsDirty = 1
            boolSomethingDirty = 1
        End if
        if oDefaultPage.Controls(&quot;txtCity&quot;).Value &lt;&gt; _
        txtOriginalCity then
            boolCityIsDirty = 1
            boolSomethingDirty = 1
        End if
        if oDefaultPage.Controls(&quot;txtState&quot;).Value &lt;&gt; _
        txtOriginalState then
            boolStateIsDirty = 1
            boolSomethingDirty = 1
        End if
        if oDefaultPage.Controls(&quot;txtPostalCode&quot;).Value &lt;&gt; _
        txtOriginalPostalCode then
            boolPostalCodeIsDirty = 1
            boolSomethingDirty = 1
        End if
        if oDefaultPage.Controls(&quot;lstCountry&quot;).Value &lt;&gt; _
        txtOriginalCountry then
            boolCountryIsDirty=1
            boolSomethingDirty = 1
        End if
        If boolSomethingDirty then
            'Make sure the user wants to update all the 
            'contact addresses
            intResponse = msgbox(&quot;The account address &quot; &amp; _
                &quot;information has changed. Outlook can update &quot; &amp; _
                &quot;all the contacts for this account with &quot; &amp; _
                &quot;the new address information automatically.&quot; &amp; _
                &quot; However, if there are any changes to the &quot; &amp; _
                &quot;address information in the contact that do &quot; &amp; _
                &quot;not match the original address for the &quot; &amp; _
                &quot;account, Outlook will skip these messages. Do &quot; &amp; _
                &quot;you want Outlook to update your accounts now?&quot;, _
                292, &quot;Update Account Contacts&quot;)
            if intResponse = 6 then     'Yes
                for counter = 1 to oRestrictedContactItems.Count
                    boolSaveItem = 0
                    set oItem = _
                        oRestrictedContactItems.Item(counter)
                    if boolStreetIsDirty then
                        if oItem.BusinessAddressStreet = _
                        txtOriginalStreet then
                            oItem.BusinessAddressStreet = _
                            oDefaultPage.Controls(&quot;txtStreet&quot;).Value
                            boolSaveItem = 1
                        end if
                    end if
                    if boolCityIsDirty then
                        if oItem.BusinessAddressCity = _
                        txtOriginalCity then
                            oItem.BusinessAddressCity = _
                            oDefaultPage.Controls(&quot;txtCity&quot;).Value
                            boolSaveItem = 1
                        end if
                    end if
                    if boolStateIsDirty then
                        if oItem.BusinessAddressState = _
                        txtOriginalState then
                            oItem.BusinessAddressState = _
                            oDefaultPage.Controls(&quot;txtState&quot;).Value
                            boolSaveItem = 1
                        end if
                    end if
                    if boolPostalCodeIsDirty then
                        if oItem.BusinessAddressPostalCode = _
                        txtOriginalPostalCode then
                            oItem.BusinessAddressPostalCode = _
                            oDefaultPage.Controls( _
                                &quot;txtPostalCode&quot;).Value
                            boolSaveItem = 1
                        end if
                    end if
                    if boolCountryIsDirty then
                        if oItem.BusinessAddressCountry = _
                        txtOriginalCountry then
                            oItem.BusinessAddressCountry = _
                            oDefaultPage.Controls(&quot;lstCountry&quot;).Value
                            boolSaveItem = 1
                        end if
                    end if
                If boolSaveItem then
                    'Make sure address information is only 
                    'parsed once by Outlook
                    oItem.Save
                end if
                next
            end if
        end if
    end if
    'Close the database if enabled
    if ComposeMode=False and bUseDatabase then
        oDatabase.Close
        set oDatabaseEngine = Nothing
    end if
End Function
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





