<HTML>
<HEAD>
<TITLE>Rules Component</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch15b.htm", "ch15d.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="518"><H1>Rules Component</H1></A>

<P>Exchange Server includes excellent facilities to run rules on the server, 
which fire depending on the conditions you set. If you've looked at the Rules 
Wizard in Outlook, you have a sense of the complex rules you can create on your 
Exchange Server. In the past, rules could only be created programmatically with 
C/C++, but with the Rules COM component, Microsoft Visual Basic developers can 
create complex rules for their application folders in Exchange Server. The 
Rules COM component provides an extensive object library, which we'll look at later.</p>

<A NAME="519"><H2>Storing Rules</H2></A>

<P>Before discussing the Rules component, we first must take a look at how 
rules are stored in the Exchange Server system. The Exchange Server system 
stores rules as hidden messages inside of folders. To find rules in the CDO 
HiddenMessages collection for a folder, search for the message class 
IPM.Rule.Message. This message class specifies that the item is a rule item and the properties 
on the item contain the various conditions for the rule. The easiest way to see 
the different rules is to use the MDB Viewer Test Application (MDBVUE) 
tool included on the companion CD. This tool allows you to see hidden messages 
in folders as well as retrieve the properties of all items in the Exchange Server 
store. Figure 15-1 shows a screen from the MDB Viewer Test Application.</p>

<P>
<A HREF="javascript:fullSize('f15oh01x.htm')"> <img src="images/f15oh01.JPG" width=404 height=401 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 15-1</B> <I>The MDB Viewer Test Application provides functionality to investigate the objects stored in your Exchange Server system. This tool can even be used to investigate the properties on rule items stored as hidden messages in your folders.</I><!-- /CAPTION -->
</P>

<A NAME="520"><H2>Creating an Instance of the Rules Component</H2></A>

<P>To create an instance of this component, all you need to do is pass the 
ProgID for the component, MSExchange.Rules, to the 
<I>CreateObject </I>method, as shown in the following line of code. The Rules component contains other 
instantiable objects, which you will see later in this chapter, that correspond to 
conditions you can set for the component.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Set myRules = CreateObject(&quot;MSExchange.Rules&quot;)
</PRE></TD></TR></TABLE></P>

<A NAME="521"><H2>Using the Rules Component</H2></A>

<P>The easiest way to show you how to use the Rules component is to step 
through some snippets of code. These snippets show you many of the objects and 
methods that constitute the component. The first sample we'll review, written 
in Visual Basic, illustrates the major issues you'll confront when using the 
Rules component to create rules that compare a single property to a specified 
value. The sample creates a new rule, named <I>Imp 
Rule</I>, that looks for low-importance messages sent to the Inbox. When the rule finds a low-importance message 
in the Inbox, it moves it to a subfolder of the Inbox named 
<I>To Me</I>.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oSession As MAPI.Session
Set oSession = CreateObject(&quot;MAPI.Session&quot;)
oSession.Logon
Set oRules = CreateObject(&quot;MSExchange.Rules&quot;)

'This can also be Public Folders.
'You need owner permissions on the folder to create
'and enable a rule.
oRules.Folder = oSession.Inbox 

'Set the property value for a condition in the rule
'to the importance of the message
Set ImpProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ImpProp.Tag = CdoPR_IMPORTANCE
ImpProp.Value = 0

'Set a condition so that this rule
'looks for all nonimportant messages
Set ImpCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
ImpCond.Value = ImpProp
ImpCond.PropertyTag = CdoPR_IMPORTANCE
ImpCond.Operator = 7

Set oFolder = oSession.Inbox.Folders(&quot;To Me&quot;)

'Set the action for the rule
Set oAction = CreateObject(&quot;MSExchange.Action&quot;)
oAction.ActionType = 1
oAction.Arg = oFolder

'Create the actual rule
Set oRule = CreateObject(&quot;MSExchange.Rule&quot;)
oRule.Name = &quot;Imp Rule&quot;
oRule.Actions.Add 1, oAction
oRule.Condition = ImpCond

'Add it to the Rules collection
oRules.Add , oRule
oRules.Update

oSession.Logoff
</PRE></TD></TR></TABLE></P>

<P>When using the Rules component, you need to make sure you have a 
valid CDO session with the server so that you can pass in a CDO Folder object 
to the Folder property on the Rules component, which tells the Rules 
component which folder to create your rules in.</p>

<p>Your next step is to set up conditions that must be met by the 
incoming message to make the rule fire. The Rules component supports many 
similar types of conditions. We'll cover the major ones you'll use: 
Bitmask, Comment, CompareProps, Content, Exists, Logical, Property, Size, and Sub. We'll 
look in detail at Bitmask, Content, Logical, and Property.</p>

<p>In the preceding code example, you saw a property condition in 
action. To create a PropertyCondition object, the code calls the 
<I>CreateObject </I>method with the ProgID for a property condition. After you create the condition 
object, you have to set its properties. For the PropertyCondition object, you need 
to set the Value, PropertyTag, and Operator properties.</p>

<p>For the Value property, you must pass a PropertyValue object that 
contains the value you want to compare to the desired property. For this reason, 
before a PropertyCondition object is created, a PropertyValue object is created, 
with its Tag property set to the CDO property identifier that we're interested 
in, CdoPR_IMPORTANCE. The Value property for the object is set to the 
value we want satisfied by the condition. In this case, the Value property is set to 
0, which specifies a low-importance message in CDO.</p>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
When I tested the code for the Rules component on 
different machines, I sometimes had trouble getting the importance and 
sensitivity properties to be identified. If you have trouble getting 
your rule to fire, try testing your rule with different message properties.
</BLOCKQUOTE></DIV></P>

<P>Now that we have a valid PropertyValue object, we can pass it to the 
Value property for the PropertyCondition object. Then we need to set the 
PropertyTag property on our condition. This property should contain the same 
property identifier as the PropertyValue object.</p>

<p>Next, the Operator property must be set. The Operator property can 
have seven possible values, described in Table 15-1.</p>

<p>We want the importance level for the Operator property to equal the 
value specified earlier for the PropertyValue object. The code sets the Operator 
value to 7, which is the EQUALTO operator.</p>

<P>The code's next step is to create the Action object, which contains 
the action that Exchange Server should take if the property condition equals 
the property value we specified. The Action object has two properties we need 
to set: ActionType and Arg. ActionType specifies the type of action to take 
on the item. For example, you can automatically delete the item, move the 
item to a different folder, or bounce the item back to the person who 
submitted it. Table 15-2 shows you the possible values for the ActionType property.</p>

<P><B>Table 15-1</B> <i>Values for the Operator Property</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">REL_GE</td>
<td valign="top">1</td>
<td valign="top">Greater than or equal to</td>
</tr>
<tr>
<td valign="top">REL_GT</td>
<td valign="top">2</td>
<td valign="top">Greater than</td>
</tr>
<tr>
<td valign="top">REL_LE</td>
<td valign="top">3</td>
<td valign="top">Less than or equal to</td>
</tr>
<tr>
<td valign="top">REL_LT</td>
<td valign="top">4</td>
<td valign="top">Less than</td>
</tr>
<tr>
<td valign="top">REL_NE</td>
<td valign="top">5</td>
<td valign="top">Not equal to</td>
</tr>
<tr>
<td valign="top">REL_RE</td>
<td valign="top">6</td>
<td valign="top">Like</td>
</tr>
<tr>
<td valign="top">REL_EQ</td>
<td valign="top">7</td>
<td valign="top">Equal to</td>
</tr>
</table></p>


<P><B>Table 15-2</b> <i>Values for the ActionType Property</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Name</th>
<th>Value</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">ACTION_MOVE</td>
<td valign="top">1</td>
<td valign="top">Move the message to the folder object specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_COPY</td>
<td valign="top">2</td>
<td valign="top">Copy the message to the folder object specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_DELETE</td>
<td valign="top">3</td>
<td valign="top">Delete the message</td>
</tr>
<tr>
<td valign="top">ACTION_REPLY</td>
<td valign="top">4</td>
<td valign="top">Respond to the message with the message specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_OOFREPLY</td>
<td valign="top">5</td>
<td valign="top">Respond to the message with Out-of-office message specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_FORWARD</td>
<td valign="top">6</td>
<td valign="top">Forward the message to the recipient list specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_DELEGATE</td>
<td valign="top">7</td>
<td valign="top">Delegate the message to the recipient list specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_BOUNCE</td>
<td valign="top">8</td>
<td valign="top">Return the message back to the sender for the reason specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_TAG</td>
<td valign="top">9</td>
<td valign="top">Tag the message to set the property specified in Arg</td>
</tr>
<tr>
<td valign="top">ACTION_MARKREAD</td>
<td valign="top">10</td>
<td valign="top">Mark as read</td>
</tr>
<tr>
<td valign="top">ACTION_DEFER</td>
<td valign="top">11</td>
<td valign="top">Defer action</td>
</tr>
</table></p>


<P>In the code, the ActionType property was set to 1, which moves the 
item to the folder we specify in the Arg property. Depending on the value 
specified for ActionType, you might need to set the Arg property to a value. If 
you pick the delete action, you do not have to specify the Arg property on 
your Action object.</p>

<P>As you can see, the Arg property and the Action property work 
together to create the action for your rule. In our example, the code finds the 
specific folder we're moving items to by using CDO, and then it sets the Action 
object's Arg property to the CDO Folder object. If we do not specify this folder, 
the rule will not work.</p>

<P>After we have a condition and an action for the rule, we need to create 
the actual rule by creating a Rule object. The Rule object has a large number 
of properties that you can use, but we'll look at only a subset of 
them&#8212;Actions, Name, and Condition.</p>

<P>The Name property contains the friendly name for the rule. The 
Action property returns the Actions collection, which contains all the Action 
objects for the rule. We add a new rule to the collection by using the 
<I>Add </I>method on the collection. The <I>Add 
</I>method takes two parameters, the first being 
the position in the collection where the Action object should be placed. You 
can have multiple actions for a rule such as a forward action and a reply 
action. The second parameter for the <I>Add</I> method is the Action object you want 
to add to the collection.</p>

<P>The final property we need to set on the Rule object to successfully 
create the object is the Condition property. The Condition property should be set 
to the condition object we created for the rule. As you will see later, you can 
have multiple conditions for a rule, but there is a catch&#8212;you need to link all 
the conditions together using another type of object, the LogicalCondition object.</p>

<P>Now that the properties for the new Rule object are set, all we need to 
do is add the object to the Rules collection. To do this, we pass our Rule object 
to the <I>Add </I>method on the Rules collection. The first parameter of this 
method, which is blank in the code, is an optional integer that specifies the position 
before the insertion point for the new rule. Since this parameter is not specified, 
the new rule is inserted at the end of the collection. If you do specify a position 
for this property, you must update the indices for the Rules object by calling 
the <I>UpdateIndices </I>method and then the 
<I>Update</I> method on the object.</p>

<P>The second parameter of the <I>Add </I>method is the object that contains 
the new Rule object you want to add. We already created and set the properties 
of this object in the code, so that's it! We just created a new rule. Now we're 
going to look at some of the other condition objects we can use to set more 
complex conditions for our rules. Because a lot of the steps are similar for these 
other types of conditions, I'm going to highlight only the steps that differ and 
are required for each condition type.</p>

<A NAME="522"><H2>Specifying a Logical Condition</H2></A>

<P>Most of the time, when you create rules, you will not use only one property 
as your condition. You'll have multiple conditions, such as specifying only 
those messages that are of low importance and sent directly to you. To create 
multiple conditions, you need to use the LogicalCondition object in conjunction 
with the other condition objects. The next example shows how a 
LogicalCondition object is used in conjunction with two PropertyCondition objects to create 
a rule that checks to see whether messages are of low importance and sent 
directly to you. If the rule finds a message that meets these conditions, the message 
is moved to the To Me subfolder of the Inbox.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oSession As MAPI.Session
Set oSession = CreateObject(&quot;MAPI.Session&quot;)
oSession.Logon
Set oRules = CreateObject(&quot;MSExchange.Rules&quot;)

'This can also be Public Folders.
'You need owner permissions on the folder to create
'and enable a rule.
oRules.Folder = oSession.Inbox 

'Set the property value for a condition in the rule
'to the importance of the message
Set ImpProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ImpProp.Tag = CdoPR_IMPORTANCE
ImpProp.Value = 0

'Set a condition so that this rule
'looks for all nonimportant messages
Set ImpCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
ImpCond.Value = ImpProp
ImpCond.PropertyTag = CdoPR_IMPORTANCE
ImpCond.Operator = 7

'Set a prop value for messages sent to me
Set MeProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
MeProp.Tag = CdoPR_MESSAGE_TO_ME
MeProp.Value = True

'Set a condition so that this rule
'looks for all messages sent to me
Set MeCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
MeCond.Value = MeProp
MeCond.PropertyTag = CdoPR_MESSAGE_TO_ME
MeCond.Operator = 7

Set LogCond = CreateObject(&quot;MSExchange.LogicalCondition&quot;)
LogCond.Operator = 1
LogCond.Add ImpCond
LogCond.Add MeCond

Set oFolder = oSession.Inbox.Folders(&quot;To Me&quot;)

'Set the action for the Rule object
Set oAction = CreateObject(&quot;MSExchange.Action&quot;)
oAction.ActionType = 1
oAction.Arg = oFolder

'Create the actual rule
Set oRule = CreateObject(&quot;MSExchange.Rule&quot;)
oRule.Name = &quot;Imp Rule&quot;
oRule.Actions.Add 1, oAction
oRule.Condition = LogCond

'Add it to the Rules collection
oRules.Add , oRule
oRules.Update

oSession.Logoff
</PRE></TD></TR></TABLE></P>

<P>In the code, two PropertyCondition objects and two PropertyValue 
objects are created to specify the conditions for the rule. To link the two 
conditions, the code creates a LogicalCondition object. The LogicalCondition 
object is actually a collection of other condition objects from which you can add or 
delete objects.</p>

<p>To add the two conditions to the LogicalCondition object, the code 
uses the <I>Add </I>method of the LogicalCondition object. The 
<I>Add</I> method takes a Condition object as its parameter, and will add the object to the collection. 
Once all the condition objects are added to the collection, the logic that links the 
two or more conditions must be set. To do this, we use the Operator property 
on the LogicalCondition object. This property has three possible values: 
L_AND (1), L_OR (2), and L_NOT (3). Since we want all messages sent directly 
to the person and messages of low importance to be the only messages moved 
to the folder, we set the Operator property on the LogicalCondition object 
to be <I>1, </I>or L_AND, which causes Exchange Server to fire the rule only if 
both conditions are met on the item.</p>

<A NAME="523"><H2>Searching for Specific Content</H2></A>

<P>So that you can search for specific content, the Rules component provides 
the ContentCondition object. This object allows you to search for specific text 
in either the message body or the message subject. You can use this 
searching capability to fire off rules that perform specific actions. For example, you can 
use the ContentCondition object to create a simple profanity filter for a 
discussion application. If any offensive words are placed into the message body or 
message subject, you can automatically delete the message or move it to a folder for 
an administrator to look at.</p>

<p>To show you how to use the ContentCondition object, the code 
example we have been working with has been updated to search the message body 
of incoming items for the phrase <I>New Policy</I>. Now our rule fires only when an 
item is of low importance, sent directly to the person, and contains the phrase 
<I>New Policy</I> in the message body. If the rule finds a message that meets these 
conditions, the message is moved to the To Me subfolder of the Inbox. Here is 
the code that creates this rule:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oSession As MAPI.Session
Set oSession = CreateObject(&quot;MAPI.Session&quot;)
oSession.Logon
Set oRules = CreateObject(&quot;MSExchange.Rules&quot;)

'This can also be Public Folders.
'You need owner permissions on the folder to create
'and enable a rule.
oRules.Folder = oSession.Inbox 

'Set the property value for a condition in the rule
'to the importance of the message
Set ImpProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ImpProp.Tag = CdoPR_IMPORTANCE
ImpProp.Value = 0

'Set a condition so that this rule
'looks for all nonimportant messages
Set ImpCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
ImpCond.Value = ImpProp
ImpCond.PropertyTag = CdoPR_IMPORTANCE
ImpCond.Operator = 7
'Set a property value for messages sent to me
Set MeProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
MeProp.Tag = CdoPR_MESSAGE_TO_ME
MeProp.Value = True

'Set a condition so that this rule
'looks for all messages sent to me
Set MeCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
MeCond.Value = MeProp
MeCond.PropertyTag = CdoPR_MESSAGE_TO_ME
MeCond.Operator = 7

'Set a property value for messages with New Policy
Set ContProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ContProp.Tag = CdoPR_BODY
ContProp.Value = &quot;New Policy&quot;

'Set a condition so that this rule
'looks for all with the New Policy keywords
Set ContCond = CreateObject(&quot;MSExchange.ContentCondition&quot;)
ContCond.Value = ContProp
ContCond.PropertyType = CdoPR_BODY
ContCond.Operator = 1   'Substring

Set LogCond = CreateObject(&quot;MSExchange.LogicalCondition&quot;)
LogCond.Operator = 1
LogCond.Add ImpCond
LogCond.Add MeCond
LogCond.Add ContCond

Set oFolder = oSession.Inbox.Folders(&quot;To Me&quot;)

'Set the action for the Rule object
Set oAction = CreateObject(&quot;MSExchange.Action&quot;)
oAction.ActionType = 1
oAction.Arg = oFolder

'Create the actual rule
Set oRule = CreateObject(&quot;MSExchange.Rule&quot;)
oRule.Name = &quot;Imp Rule&quot;
oRule.Actions.Add 1, oAction
oRule.Condition = LogCond

'Add it to the Rules collection
oRules.Add , oRule
oRules.Update

oSession.Logoff
</PRE></TD></TR></TABLE></P>

<P>As you can see from the code, to successfully create a 
ContentCondition object, you must perform two steps. First you must create a PropertyValue 
object and fill in its properties with the CDO property you're interested in 
searching, and then you must fill in three properties on the ContentCondition 
object&#8212;Value, PropertyType, and Operator.<I> 
</I>Set the Value property to contain the 
PropertyValue object that you create. The Value property tells the ContentCondition 
object the value for which the rule should search in incoming 
messages<I>. </I>Set the PropertyType property to the same CDO property set for the Value property 
on the PropertyValue object. PropertyType tells the ContentCondition object 
which CDO property to search in for the value<I>. 
</I>The Operator property contains a hex value that specifies the type of search to perform for the specified value. 
This search can be an exact match, a substring, or a prefix. You can have only 
one type of search from these three types. Table 15-3 shows the settings for 
the Operator property. However, you can combine the last three settings in 
the table&#8212;IGNORECASE, IGNORENONSPACE, and 
LOOSE&#8212;with the search type. For example, to 
specify a search that looks for a substring and ignores 
cases and nonspaces, you would set the Operator property to &amp;H30001.</p>

<p><B>Table 15-3</B> <i>Values for the Operator Property</i></p>

<p><table cellpadding=5 width="95%">
<tr>
<th>Name</th>
<th>Hex Value</th>
<th>Description</th>
</tr>
<tr>
<td valign="top">FULLSTRING</td>
<td valign="top">0</td>
<td valign="top">Full string</td>
</tr>
<tr>
<td valign="top">SUBSTRING</td>
<td valign="top">1</td>
<td valign="top">Substring</td>
</tr>
<tr>
<td valign="top">PREFIX</td>
<td valign="top">2</td>
<td valign="top">Prefix</td>
</tr>
<tr>
<td valign="top">IGNORECASE</td>
<td valign="top">10000</td>
<td valign="top">Ignore case</td>
</tr>
<tr>
<td valign="top">IGNORENONSPACE</td>
<td valign="top">20000</td>
<td valign="top">Ignore nonspace</td>
</tr>
<tr>
<td valign="top">LOOSE</td>
<td valign="top">40000</td>
<td valign="top">Ignore high bits (maps Unicode to corresponding ANSI values)</td>
</tr>
</table></p>

<A NAME="524"><H2>Searching for a Particular Bitmask</H2></A>

<P>Sometimes you'll want to retrieve a particular property on a message&#8212;most 
commonly, the CdoPR_MESSAGE_FLAGS property&#8212;to see if the property 
meets a certain criterion. The CdoPR_MESSAGE_FLAGS property contains a 
bitmask that describes whether the message has attachments or was sent from 
the Internet. The example below adds to the rule we've been creating 
a condition that searches incoming messages to determine whether they 
have attachments.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Dim oSession As MAPI.Session
Set oSession = CreateObject(&quot;MAPI.Session&quot;)
oSession.Logon
Set oRules = CreateObject(&quot;MSExchange.Rules&quot;)

'This can also be Public Folders.
'You need owner permissions on the folder to create
'and enable a rule.
oRules.Folder = oSession.Inbox 

'Set the property value for a condition in the rule
'to the importance of the message
Set ImpProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ImpProp.Tag = CdoPR_IMPORTANCE
ImpProp.Value = 0

'Set a condition so that this rule
'looks for all nonimportant messages
Set ImpCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
ImpCond.Value = ImpProp
ImpCond.PropertyTag = CdoPR_IMPORTANCE
ImpCond.Operator = 7

'Set a property value for messages sent to me
Set MeProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
MeProp.Tag = CdoPR_MESSAGE_TO_ME
MeProp.Value = True

'Set a condition so that this rule
'looks for all messages sent to me
Set MeCond = CreateObject(&quot;MSExchange.PropertyCondition&quot;)
MeCond.Value = MeProp
MeCond.PropertyTag = CdoPR_MESSAGE_TO_ME
MeCond.Operator = 7

'Set a property value for messages with New Policy
Set ContProp = CreateObject(&quot;MSExchange.PropertyValue&quot;)
ContProp.Tag = CdoPR_BODY
ContProp.Value = &quot;New Policy&quot;

'Set a condition so that this rule
'looks for all with the New Policy keywords
Set ContCond = CreateObject(&quot;MSExchange.ContentCondition&quot;)
ContCond.Value = ContProp
ContCond.PropertyType = CdoPR_BODY
ContCond.Operator = 1   'Substring

'Create a condition for messages with attachments
Set BitCond = CreateObject(&quot;MSExchange.BitmaskCondition&quot;)
BitCond.Value = 16
BitCond.PropertyTag = CdoPR_MESSAGE_FLAGS
BitCond.Operator = 2   

Set LogCond = CreateObject(&quot;MSExchange.LogicalCondition&quot;)
LogCond.Operator = 1
LogCond.Add ImpCond
LogCond.Add MeCond
LogCond.Add ContCond
LogCond.Add BitCond 

Set oFolder = oSession.Inbox.Folders(&quot;To Me&quot;)

'Set the action for the Rule object
Set oAction = CreateObject(&quot;MSExchange.Action&quot;)
oAction.ActionType = 1
oAction.Arg = oFolder

'Create the actual rule
Set oRule = CreateObject(&quot;MSExchange.Rule&quot;)
oRule.Name = &quot;Imp Rule&quot;
oRule.Actions.Add 1, oAction
oRule.Condition = LogCond

'Add it to the Rules collection
oRules.Add , oRule
oRules.Update

oSession.Logoff
</PRE></TD></TR></TABLE></P>

<P>As you can see in the code, when creating a bitmask condition, you 
need to set three properties on the object: Value, PropertyTag, and Operator. 
The Value property takes the value with which the PropertyTag value is masked. 
In this example, we placed the value 16<I> </I>in the Value property to create a rule 
that looks for attachments. The PropertyTag value specifies the CDO property 
that you want to mask with the Value property. In this 
example, we used the CdoPR
_MESSAGE_FLAGS property. The Operator property specifies the 
bitmask operator for the property and can take one of two values: B_EQZ (1) or 
B_NEZ (2). B_EQZ creates a bitmask and checks to see whether the returned value 
is zero. B_NEZ creates a bitmask and checks to see whether the returned 
value is nonzero. In this example, we created the bitmask and checked to see 
whether the value was nonzero.</p>

<p>In this section, we've seen some of what the Rules component can do. 
In the section titled &quot;<A HREF="ch15e.htm#526">Project Application</A>&quot; later in this chapter, we'll see how 
to create rules that fire on all incoming messages. The Rules component has 
other conditions that you can set and other capabilities&#8212;it doesn't just create 
rules but also reads and modifies existing rules. To learn more about these 
other capabilities, refer to the Exchserv.chm file on the companion CD.</p>

</BODY>
</HTML>






