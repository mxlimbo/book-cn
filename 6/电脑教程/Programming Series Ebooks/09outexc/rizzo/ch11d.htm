<HTML>
<HEAD>
<TITLE>Background for Four Sample Applications That Use CDO</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch11c.htm", "ch11e.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="359"><H1>Background for Four Sample Applications That Use CDO</H1></A>

<P>The easiest way to learn any new object library is to look at the objects in 
action. For this reason, the rest of this chapter shows you four sample 
applications that demonstrate different technologies in the CDO library: a Helpdesk 
application, a Calendar of Events application, an Intranet News application, and 
a CDO Visual Basic application. From these four samples, you will learn how 
to use the CDO library in your applications and become aware of the 
technical considerations when building CDO applications. Before we dive into the 
details of these four sample applications, we'll first look at the necessary 
Exchange Server logon step.</p>

<A NAME="360"><H2>Using the CDO Session Object</H2></A>

<P>Whether you build CDO applications by using ASP or by using some 
other development tool, the most important point to remember is that you 
cannot create any other objects in the CDO library if you do not successfully create 
a Session object. Further, you cannot access any data in Exchange Server 
unless you successfully log on to the server using the Session object. Before we can 
look at the code in the CDO applications, you need to understand how to log on 
to an Exchange Server by using the Session object.</p>

<P>The Session object is the top-level object in the CDO hierarchy. It 
contains session-wide settings and properties that return top-level objects. 
When using the <I>CreateObject</I> method in your applications, you use the ProgID of 
the Session object&#8212;MAPI.Session&#8212;to create a CDO object. CDO does not 
allow you to access any other objects in the library until you have successfully 
logged on using the <I>Logon</I> method of the Session object. The only exception to this 
is the <I>SetLocaleIDs</I> method, which sets the Locale and CodePage IDs for the user.</p>

<A NAME="361"><H2>Using the <I>Logon</I> Method</H2></A>
<P>The <I>Logon</I><B> </B>method takes a number of different parameters, as shown in the 
following code; the parameter you use depends on the needs of your application:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
<I>objSession</I>.Logon( [<I>ProfileName</I>] [, <I>ProfilePassword</I>] [, <I>ShowDialog</I>] 
[, <I>NewSession</I>] [, <I>ParentWindow</I>] [, <I>NoMail</I>] [, <I>ProfileInfo</I>] )
</PRE></TD></TR></TABLE></P>

<P>The two common ways to log on to a CDO session are by passing in 
a MAPI profile name and by passing in the specific information CDO needs 
to dynamically generate a profile. Dynamically generated profiles are the 
preferred method when building ASP applications with CDO. Since ASPs cannot 
access client profiles, CDO has no way to pull information from a profile located 
on the machine of the user.</p>

<A NAME="362"><H3>Authenticated Logon Using a Profile</H3></A>

<P>To log on using a profile, pass the profile name as the first parameter, 
<I>ProfileName</I>, to the <I>Logon</I> method. If you don't know which profile name to use, set 
the <I>ShowDialog</I> parameter to True, and CDO will prompt the user to pick a 
profile. The second parameter, <I>ProfilePassword</I>, specifies the profile password. You 
could leave this parameter blank and set the 
<I>ShowDialog</I> parameter to True, and CDO will prompt the user for a password. By setting the 
<I>NewSession</I> parameter to False, you can have CDO take advantage of an existing MAPI session, eliminating the unnecessary overhead from creating a new MAPI session on the user's 
machine. The following code snippet shows you how to use the 
<I>Logon</I> method with a profile named <I>MS Outlook 
Settings</I>:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
oSession.Logon ProfileName:=&quot;MS Outlook Settings&quot;, _
    showDialog:=True, NewSession:=True
</PRE></TD></TR></TABLE></P>

<A NAME="363"><H3>Authenticated Logon Using a Dynamically Generated Profile</H3></A>

<P>When your application is running in an environment where profiles or the 
ability to prompt a user for a profile might not be available, CDO allows you to 
dynamically generate a profile for the user by passing in the user's server name 
and mailbox name to the <I>Logon</I> method. To get this information, you can have 
your application prompt the user for his server name and mailbox name. 
Alternatively, CDO can pull the default Exchange Server name from the Registry by 
using the ConfigParameter properties in the CDO Rendering library, which you 
will learn about later in this chapter. For now, the code sample assumes that you 
know at least one Exchange Server name in your organization. The following 
code shows you how to log on to CDO using a dynamically generated profile:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
strServer = &quot;<I>Exchange Server Name</I>&quot;
strMailbox = &quot;<I>User Alias Name (Not Display Name)</I>&quot;
strProfileInfo = strServer + vbLf + strMailbox
oSession.Logon &quot;&quot;, &quot;&quot;, False, True, 0, True, strProfileInfo
'Check for a valid logon
set oInbox = oSession.GetInbox

if err.number &lt;&gt; 0 then  'Not Successful
    oSession.Logoff
    Response.write &quot;Unsuccessful Logon!&quot;
end if
</PRE></TD></TR></TABLE></P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>
For the user's mailbox name, don't use the display 
name, such as <I>Thomas Rizzo. </I>Instead use the alias name of the user, such 
as <I>thomriz</I>. Also, when using the 
<I>ProfileInfo</I> parameter, attempt to access an item in a CDO message store, such as the first message in the Inbox, since the <I>Logon</I> method will return success even if the 
parameters in <I>ProfileInfo</I> are<I> </I>incorrect. If attempting to access items 
returns an error, the user was not successfully logged on.
</BLOCKQUOTE></DIV></P>

<A NAME="364"><H3>Anonymous Access</H3></A>

<P>CDO also allows users to anonymously access the Exchange Server public 
folder store as well as the Exchange Server directory. Anonymous access must be 
enabled by the administrator of the Exchange Server system. Also, the administrator 
or developer can control which folders and which directory entries the 
anonymous user can see by setting some options in the Exchange Administrator 
program. These options are discussed in more detail throughout this chapter.</p>

<P>To use anonymous access, you must pass in to the 
<I>ProfileInfo</I> parameter the distinguished name of the Exchange Server and the 
<I>anon</I> account. You do this by using the following format:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
<I>server distinguished name</I> &amp; vbLf &amp; vbLf &amp; &quot;anon&quot;
</PRE></TD></TR></TABLE></P>

<P>The server's distinguished name takes the form of:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
/o=<I>enterprise</I>/ou=<I>site</I>/cn=Configuration/cn=Servers/cn=<I>server</I>
</PRE></TD></TR></TABLE></P>

<P>The <I>enterprise</I> parameter corresponds to the Exchange Server organization, 
and the <I>site</I> parameter corresponds to the Exchange Server site you want to 
access. The following code shows you how to log on using anonymous access:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
strProfileInfo = &quot;/o=&quot; &amp; &quot;<I>Your Exchange Org</I>&quot; &amp; &quot;/ou=&quot; &amp; _
    &quot;<I>Your Site</I>&quot; &amp; &quot;/cn=Configuration/cn=Servers/cn=&quot; &amp; _
    &quot;<I>Your Server</I>&quot; &amp; vbLF &amp; vbLF &amp; &quot;anon&quot;
oSession.Logon &quot;&quot;, &quot;&quot;, False, True, 0, True, strProfileInfo
if err.number &lt;&gt; 0 then
    oSession.Logoff
    response.write &quot;Unsuccessful Logon!&quot;
end if
</PRE></TD></TR></TABLE></P>

</BODY>
</HTML>





