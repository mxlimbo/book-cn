<HTML>
<HEAD>
<TITLE>Working with Outlook Objects</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch06d.htm", "ch06f.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="201"><H1>Working with Outlook Objects</H1></A>

<P>There are two distinct object libraries you should know about when 
creating Outlook applications: the Microsoft Forms 2.0 object library and the 
Microsoft Outlook object library. The Microsoft Forms 2.0 object library contains all 
the built-in visual interface controls for Outlook forms (discussed in <A HREF="ch05a.htm">Chapter 5</A>) including text boxes, list boxes, and multipage controls. This object library 
is contained in the file called Fm20.dll. If you've developed Office 
applications, you'll be familiar with these controls&#8212;they are the same controls that you 
use to create forms in the other Office applications.</p>

<P>The second object library you should know about is the Microsoft 
Outlook object library. The object library for Outlook 98 is contained in the 
file Msoutl85.olb. This file contains the objects that you can use to develop 
custom Outlook solutions. It is not necessary to have a reference to either of 
these two libraries in your Outlook forms. Outlook automatically references the 
libraries for you, so you can start taking advantage of their powerful features.</p>


<A NAME="202"><H2>Getting Help with Outlook Objects</H2></A>

<P>You should take a look at some of the documentation provided by Outlook 
to help you. For Outlook 98, two help files are useful when creating 
applications: Vbaoutl.hlp and Olform.hlp. These help files are normally stored in 
Program Files\Microsoft Office\Office. (You can also find these files on the companion 
CD.) Vbaoutl.hlp includes information about the Outlook object library. 
Olform.hlp, shown in Figure 6-3, includes information about the Forms object library 
and also the Outlook object library.</p>

<P>
<A HREF="javascript:fullSize('f06oh03x.htm')"> <img src="images/f06oh03.JPG" width=404 height=398 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 6-3</B> <I>The Forms object library help file (Olform.hlp).</I><!-- /CAPTION -->
</P>

<P>These help files include not only detailed information about the 
Outlook objects and controls in the libraries but also sample code that will help you 
get started with the objects. This documentation is a great reference tool to use 
in conjunction with this book: the documentation outlines the objects and 
their properties, methods, and events, and this book shows you how to 
implement those objects to create complete solutions.</p>

<P>To access the Outlook object help file (Vbaoutl.hlp) in Outlook, open 
a form in design mode. From the Form menu, select View Code. From the 
Help menu, select Microsoft Outlook Object Library Help.</p>

<P>The Outlook object library contains many objects. Due to the sheer 
volume and functionality of these objects, this chapter will not cover them in 
detail. Instead, I have included a supplement on the companion CD, named 
&quot;Programming Outlook and Exchange Supplement,&quot; that discusses many of the 
Outlook objects and collections and includes some sample code. The following is a 
list of the Outlook objects and collections discussed in this supplement:</p>

<UL>

<P><LI>Application object</li></p>

<P><LI>Explorer object</li></p>

<P><LI>Inspector object</li></p>

<P><LI>Pages collection</li></p>

<P><LI>Page object</li></p>

<P><LI>Controls collection</li></p>

<P><LI>Control object</li></p>

<P><LI>NameSpace object</li></p>

<P><LI>AddressLists collection</li></p>

<P><LI>AddressList object</li></p>

<P><LI>AddressEntries collection</li></p>

<P><LI>AddressEntry object</li></p>

<P><LI>Folders collection</li></p>

<P><LI>MAPIFolder object</li></p>

<P><LI>Items collection</li></p>

<P><LI>PostItem object</li></p>

<P><LI>MailItem object</li></p>

<P><LI>ContactItem object</li></p>

<P><LI>AppointmentItem object</li></p>

<P><LI>MeetingItem object</li></p>

<P><LI>TaskItem object</li></p>

<P><LI>Recipients collection</li></p>

<P><LI>Recipient object</li></p>

<P><LI>UserProperties collection</li></p>

<P><LI>UserProperty object</li></p>

<P><LI>FormDescription object</li></p>

</UL>


<A NAME="203"><H2>The Outlook Object Browser</H2></A>

<P>To make it easy for you to find objects in the Outlook object model, 
Outlook provides an object browser, which is shown in Figure 6-4. The Outlook 
Object Browser lists the available Outlook objects with their methods and 
properties. You can quickly add these objects to your code by clicking the Insert 
button. Clicking Object Help opens the Outlook object library help file (Vbaoutl.hlp).</p>

<P>
<img src="images/f06oh04.GIF" width=402 height=348 border="0">
</P><P>
<!-- CAPTION --><B>Figure 6-4</B> <I>The Outlook Object Browser is accessible from the Script Editor. 
The object browser allows you to insert objects into your code as well as 
get help on all the objects.</I><!-- /CAPTION -->
</P>


<P>While Outlook does provide an object browser for the Outlook 
object library, it does not provide an object browser for the Microsoft Forms 2.0 
object library. To browse the objects contained in this library, you need to use 
an object browser from another product. Since VBA is integrated into the 
Office products, you can use the VBA Object Browser. And because the 
Microsoft Forms 2.0 object library is shared across the Office products, you do not 
need to add a reference to this library in the object browser: the library is added 
by default to the VBA Object Browser. The following steps explain how to 
view the Microsoft Forms 2.0 object library from Microsoft Excel 97. The same 
steps could be used in Microsoft Word 97 or Microsoft PowerPoint 97.</p>

<OL>

<P><LI>From the Tools menu in Excel 97, select Macro and then 
Visual Basic Editor.</li></p>

<P><LI>From the View menu, select Object Browser. The VBA 
Object Browser is displayed.</li></p>

<P><LI>To view the Microsoft Forms 2.0 object library, select 
MSForms from the Project/Library drop-down list, as shown in Figure 6-5.</li></p>

<P>
<A HREF="javascript:fullSize('f06oh05x.htm')"> <img src="images/f06oh05.JPG" width=404 height=312 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 6-5</B> <I>The VBA Object Browser being used from Excel 97 to view 
the Microsoft Forms 2.0 object library.</I><!-- /CAPTION -->
</P>

<P><LI>To view other object libraries, such as the Outlook object library, 
you need to add a reference to the library: from the Visual Basic 
Editor Tools menu, select References. Check the library that you want 
to add as a reference. For Outlook, check Microsoft Outlook 98 
Object Model and click OK.</li></p>

<P><LI>From the Project/Library drop-down list, select Outlook to 
view only the Outlook object library.</li></p>

</OL>


<A NAME="204"><H2>The Outlook Object Hierarchy</H2></A>

<P>Let's look briefly at the Outlook object hierarchy so that you gain a basic 
understanding of how these objects can be used. In <A HREF="ch07a.htm">Chapter 7</A>, we will bring a lot 
of the concepts we have learned together by looking at an Account 
Tracking application.</p>

<P>The Outlook object library is a hierarchy of unique objects, as shown 
in Figure 6-6. This hierarchy makes it easier to understand the object library. 
To create or edit certain instances of the objects, you need to traverse the 
hierarchy.</p>

<P>In the Outlook object library, user interface objects are separated from 
data objects. This allows you to change the controls on your forms without 
having to modify the underlying data and gives you great flexibility in controlling 
the user interface presented to your users.</p>

<P>
<A HREF="javascript:fullSize('f06oh06x.htm')"> <img src="images/f06oh06.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 6-6</B> <I>The Outlook object hierarchy. Notice how the objects are arranged in 
the hierarchy.</I><!-- /CAPTION -->
</P>

<P>The Outlook object library is also built on the notion of items and 
collections. An item is a distinct object, such as the ContactItem object, the 
TaskItem object, and the PostItem object. A collection is a group of related objects. 
For example, the Items collection is a container for Outlook items.</p>

<P>In Outlook, you can access the specific items in a collection in two 
ways. The first way is to use the Items collection with an index that contains the 
specific item you want to access. The following code snippet illustrates this 
approach. It shows how you can use the Items collection to retrieve the items in your 
Inbox and display the message text:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub CommandButton1_Click
   'Open the Inbox using the GetDefaultFolder method
   Set oInbox = Application.GetNameSpace(&quot;MAPI&quot;).GetDefaultFolder(6)
   Set oItems = oInbox.Items
   'Notice how you can get the count
   Msgbox &quot;Number of items in your Inbox: &quot; &amp; oItems.Count
   For counter = 1 to 3
      Msgbox oItems(counter).Subject
   Next
End Sub
</PRE></TD></TR></TABLE></P>

<P>The second way you can access specific items in a collection is by using 
a named argument. For example, instead of calling the Items collection with 
an index, you can just pass in a name that corresponds to the default property 
for the item and uniquely identifies the item. For example, the Subject property 
is the default property for the MailItem object. Therefore, you can pass in a 
unique subject name to identify a specific message. The following code illustrates this:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub CommandButton1_Click
    'Open the Inbox using the GetDefaultFolder method
    Set oInbox = Application.GetNameSpace(&quot;MAPI&quot;).GetDefaultFolder(6)
    'Point to the Inbox Items collection
    Set oItems = oInbox.Items
    'Display the body of the message that has the Subject
    '<I>My Unique Subject</I>
    Msgbox oItems(&quot;<I>My Unique Subject</I>&quot;).Body
End Sub
</PRE></TD></TR></TABLE></P>

<P>The topmost object in the Outlook object library is the Application 
object. All other Outlook objects are created either directly from the Application 
object or from a child object of the Application object. The Application 
object provides four key functions that you can take advantage of in your 
applications. First, the Application object provides one-step creation of any of the 
built-in Outlook types, such as the Contact, Task, or Message item. Second, the 
Application object allows you to obtain the currently active user interface 
elements, such as the current Outlook window the user is displaying and the 
current Outlook window that contains the folder the user is viewing. Third, the 
Application object provides an entry point for you to access the data that is 
stored inside of Exchange Server by using the Outlook objects. Fourth, the 
Application object, since it is the topmost object, enables you to create or reference 
the other Outlook objects in your application. When you write code, you'll find 
that you will use the Outlook Application object extensively.</p>

<p>The code you write in Outlook is automatically passed both a 
precreated Application object and an Item object. The Application object 
corresponds to the currently active instance of Outlook, and the Item object corresponds 
to the currently active instance of the form. This frees you from having to 
write code that creates both of these objects in your application. In fact, it is 
strongly recommended that you do not attempt to use the 
<I>CreateObject</I> function in Outlook to create another instance of Outlook. Instead, you should use 
the Application object that is available in your VBScript code.</p>

<p>Since the Application and Item objects are already created for your 
application, you can use their methods and properties immediately. For example, 
you can change the subject or body of the currently displayed item without 
having to search the current folder for the item, as shown in the following code:</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub CommandButton1_Click
    Item.Subject = &quot;This is using the built-in Item object&quot;
    Item.Body = &quot;This can make writing code easier&quot;
    Importance = 2     'High
    'Notice how you do not have to include the Item keyword.
    'However, it's a good practice to include the explicit Item 
    'keyword to make your code more readable.
End Sub
</PRE></TD></TR></TABLE></P>

<P><DIV CLASS="NOTE"><BLOCKQUOTE><B>NOTE</B><HR>This implicit Item object and its methods and 
properties correspond to the type of Outlook item the form is based on. 
For example, the properties and methods for an implicit Item in a 
Contact form are different from those for a Message form. You need 
to be aware of this when developing your applications.
</BLOCKQUOTE></DIV></P>

<P>As you saw with the Item object, the Application object is also 
available to you automatically in your VBScript code. The following code shows you 
how to use some of the properties of the built-in Application object. Note that 
unlike the Item object, the built-in Application object requires you to explicitly 
place the word <I>Application</I> before any of its methods or properties.</p>

<P><TABLE CELLPADDING="5" WIDTH="95%"><TR><TD>
<PRE>
Sub CommandButton1_Click
    Msgbox Application.Version
    Application.Quit    'Quits Outlook
End Sub
</PRE></TD></TR></TABLE></P>


</BODY>
</HTML>





