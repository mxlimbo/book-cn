<HTML>
<HEAD>
<TITLE>Error Trapping and Logging</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12f.htm", "ch12h.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="418"><H1>Error Trapping and Logging</H1></A>

<P>If you program like me, your applications probably don't work correctly 
the first time you run them. To help us be more successful, Microsoft has 
created some error-trapping tools, logging features, and applications that work with 
the Exchange Event Service.</P>

<A NAME="419"><H2>Microsoft Script Debugger</H2></A>

<P>Your first line of defense against the bugs that always somehow find their way 
into programs is the Microsoft Script Debugger. We looked at the Script 
Debugger in the context of debugging Outlook scripts in <A HREF="ch06a.htm">Chapter 6</A>. The same 
Script Debugger can be used to debug Exchange Event scripts as well. To force 
your script to hit a breakpoint, use the Stop statement in VBScript and the 
debugger statement in JavaScript.</P>
<P>Because the Script Debugger does not support remote debugging (at 
the time of this writing), you must run the debugger on the machine where the 
script is executing. For the Event Scripting Agent, this machine is the Exchange 
Server computer where the script is currently executing. Figure 12-9 shows the 
Microsoft Script Debugger debugging a script.</P>

<P>
<A HREF="javascript:fullSize('f12oh09x.htm')"> <img src="images/f12oh09.JPG" width=404 height=303 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-9</B> <I>The Microsoft Script Debugger allows you to step through your scripts running on the Exchange Server.</I><!-- /CAPTION -->
</P>

<A NAME="420"><H2><I>Script.Response</I> and Logging</H2></A>
<P>The Script Debugger is an invaluable tool when developing your Event 
Scripting applications. However, once you deploy your solutions in your 
company, you probably do not want to run instances of the Script Debugger on your 
production servers. This is where your second line of defense comes in: you can 
call the <I>Script.Response</I> method in your scripts to write strings of text to the log 
files associated with your agents. Figure 12-10 shows an example of an agent log file.</P>
<P>You can access the log file for your agent via remote in Outlook by 
accessing the Agents tab for the folder, selecting the agent, clicking the 
Edit button, and then clicking the Logs button. By default, your agents will 
log only errors that occur in your scripts, but you can extend their 
functionality by using the <I>Script.Response</I> method to help you debug problems or track 
the status of your scripts.</P>

<P>
<A HREF="javascript:fullSize('f12oh10x.htm')"> <img src="images/f12oh10.JPG" width=404 height=282 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-10</B> <I>An agent log file in Notepad. Each agent has an associated log file in which you can write your own status or error-logging information.</I><!-- /CAPTION -->
</P>

<P>The <I>Script.Response</I> method takes a string argument, which allows you 
to write information into the agent logs. As mentioned earlier, these log files, 
by default, are 32 KB in size, and older events are written over as necessary 
when this size limit is exceeded. If you make multiple calls to the 
<I>Script.Response</I> method, the code will write only the most recent string passed to the method into 
the log. To avoid losing strings when making multiple calls to 
<I>Script.Response</I>, prefix the previous response string with new response string. The Expense 
Report sample application shown later in this chapter demonstrates how to use 
this technique in your applications.</P>

<A NAME="421"><H2>The Windows NT Event Log</H2></A>

<P>One other line of defense that you have in debugging your applications is 
the Windows NT Event Log. When you set Logging Level in the Registry to 
the maximum value (5) for the Event Scripting Agent, the Windows NT Event 
Log provides not only error information gleaned from your scripts but also 
general information about the status of the Event Service and what 
notifications it has received from the Exchange Server. When you use the 
<I>Script.Response</I> method described earlier to track errors and status information for your scripts, the 
information will be added to the description field in the Event Detail dialog 
box for an Event Service entry in the Application Event Log, as shown in 
Figure 12-11. (To view these entries in Event Viewer, be sure to select 
Application from the Log menu.) This type of information can make it easier for 
you to track down bugs or failures in your released application.</P>

<P>
<A HREF="javascript:fullSize('f12oh11x.htm')"> <img src="images/f12oh11.JPG" width=404 height=401 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-11</B> <I>The event details for the Expense Report application. Since the </I>Script.Response<I> method was used, the Description field has detailed information.</I><!-- /CAPTION -->
</P>

</BODY>
</HTML>





