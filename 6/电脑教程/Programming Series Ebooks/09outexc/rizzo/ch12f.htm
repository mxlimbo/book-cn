<HTML>
<HEAD>
<TITLE>Writing Agents by Using Scripts</TITLE>
<link rel="STYLESHEET" type="text/css" href="Library.css">


</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<SCRIPT LANGUAGE="JavaScript">
<!--

function fullSize(sURL){
	window.open(sURL,'scrshot','width=500,height=375,top=20,left=20,directories=no , Toolbar = no, resizable = yes, menubar = no, ScrollBars = yes ');
}

function LibraryHeaderNav(sBackward, sForward, sImgLeftOff, sImgLeftOn, sImgRightOff, sImgRightOn, iH, iW, sImgLeftStyle, sImgRightStyle, sImgRuleStyle, sRuleColor, sRuleSize){
	var tableStr;
	//validate questionable args for defs
	tableStr = "<TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 border=0 width=100%>";
	tableStr += "<TR VALIGN=top ALIGN=right>";

	tableStr += "<TD align=right class=" + sImgRuleStyle + ">&nbsp;</TD>";	
	
	tableStr += "<TD width=34 align=right class=" + sImgLeftStyle + ">";
	tableStr += "<A href='" + sBackward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgLeftOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgLeftOff + '\'\"';
	tableStr += " SRC='" + sImgLeftOff + "' vspace=0 hspace=0></a></TD>";
	
	tableStr += "<TD width=34 align=left class=" + sImgRightStyle + ">";
	tableStr += "<A href='" + sForward + "'>";
	tableStr += "<IMG HEIGHT=" + iH + " WIDTH=" + iW + " BORDER=0";
	tableStr += ' OnMouseOver=\"this.src=\'' + sImgRightOn + '\'\"';
	tableStr += ' OnMouseOut=\"this.src=\'' + sImgRightOff + '\'\"';
	tableStr += " SRC='" + sImgRightOff + "' vspace=0 hspace=0></a></TD></TR>";

	tableStr += "<TR VALIGN=top>";
	tableStr += "<TD height=3 align=center colspan=3 class=" + sImgRuleStyle + ">";
	tableStr += "<HR color=" + sRuleColor + " size=" + sRuleSize + "></TD></TR></TABLE>";
	//alert(tableStr);
	document.write(tableStr);
}

 																						     //purple is: #aa22aa   orange is: #ff9900
LibraryHeaderNav("ch12e.htm", "ch12g.htm", "images/unit_o_a1.gif", "images/unit_o_a2.gif", "images/unit_o_b1.gif", "images/unit_o_b2.gif", 18, 34, "unit01", "unit02", "headerrule", "#ff9900", "2");
//--></SCRIPT>

<A NAME="411"><H1>Writing Agents by Using Scripts</H1></A>

<P>The first step in writing scripts that run as part of the Exchange Event Service 
is to create an agent that acts as the event handler for certain folder events. To 
reach this interface, however, you are required to run certain versions of Outlook. 
To be a script writer for the Event Service, you must be running Outlook 
97 version 8.03 or higher. The interface for creating new agents in Outlook is the 
Agents tab in the Properties dialog box, which was shown in Figure 12-5. To create 
a new agent, follow these steps:</P>

<OL>
<P><LI>Start Outlook 8.03 or a later version.</LI></P>
<P><LI>Right-click on a folder you own where you want to create an 
agent, and select Properties.</LI></P>
<P><LI>Click on the Agents tab, which should be visible if 
you have the correct permissions for the folder and 
the Server Scripting add-in is installed. At the bottom 
of the Agents tab is a drop-down menu from which you 
select the Exchange Server where you want to run your 
agents. Make sure that the correct server is selected in 
the drop-down list. Only servers with the Event Service 
installed will appear in this list. Note that all 
agents in the folder will run on that Event Service 
computer. You cannot run agents that are in the same folder 
on different Event Service computers. Your agents do 
not have to run on the same server as the folders they 
monitor.</LI></P>
<P><LI>To create a new agent, click the New button. The 
New Agent dialog box appears, as shown in Figure 12-6.</LI></P>

<P>
<img src="images/f12oh06.GIF" width=401 height=357 border="0">
</P><P>
<!-- CAPTION --><B>Figure 12-6</B> <I>The New Agent dialog box. This dialog box allows you to pick the events that your agent will fire on.</I><!-- /CAPTION -->
</P>

<P><LI>Type in a name for your agent.</LI></P>
<P><LI>Select the events that your agent will handle. To create a 
timer-based agent, select the first option, named A Scheduled Event Occurs, 
and click the Schedule button. The Scheduled Event dialog box 
appears, as shown in Figure 12-7.</LI></P>

<P>
<A HREF="javascript:fullSize('f12oh07x.htm')"> <img src="images/f12oh07.JPG" width=404 height=275 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-7</B> <I>The Scheduled Event dialog box allows you to configure scheduled events for your agents.</I><!-- /CAPTION -->
</P>

<P><LI>In the Scheduled Event dialog box, you can specify that the 
event should fire hourly, daily, or weekly, as well as 
limit the hours when the event fires. Limiting the hours 
when your agent runs is useful if you want to make the 
agent run when the server is least taxed, usually late 
at night or early in the morning.</LI></P>
<P><LI>After specifying which events the agent should 
handle, select which action will occur for those events. To 
do this, select either the Script option or the Other 
option in the bottom half of the New Agent dialog box. The 
Other option enables the drop-down list of custom 
event handlers installed on the server. For example, if you have 
the custom event handler Exchange Routing Objects 
installed, the Microsoft Routing Engine Agent will 
appear in the list.</LI></P>
<P><LI>To create a new script, select the Script option, 
and click the Edit Script button. Notepad will 
automatically display an .asp file that contains the event 
procedures to handle the four events supported in the Event 
Service, as shown in Figure 12-8.</LI></P>
</OL>

<P>
<A HREF="javascript:fullSize('f12oh08x.htm')"> <img src="images/f12oh08.JPG" width=404 height=334 border=0 ALT="Click to view at full size."> </A>
</P><P>
<!-- CAPTION --><B>Figure 12-8</B> <I>A new script shown in Notepad. Notice how the new agent automatically contains four event procedures to handle the four events supported by the Event Service.</I><!-- /CAPTION -->
</P>

<A NAME="412"><H2>Supported Event Types</H2></A>

<P>As mentioned earlier, the Event Service supports four different event 
types: message create, change, delete, and timer-based. To write a script that 
implements your functionality for these events, you must modify these four 
default stub subroutines:</P>

<UL>
<P><LI><I>Folder_OnMessageCreated</I></LI></P>
<P><LI><I>Message_OnChanged</I></LI></P>
<P><LI><I>Folder_OnMessageDeleted</I></LI></P>
<P><LI><I>Folder_OnTimer</I></LI></P>
</UL>

<P>When you write an Event Scripting Agent, you can also 
use JavaScript. In JavaScript, these would be the four functions:</P>
<UL>
<P><LI><I>Folder::OnMessageCreated</I></LI></P>
<P><LI><I>Message::OnChanged</I></LI></P>
<P><LI><I>Folder::OnMessageDeleted</I></LI></P>
<P><LI><I>Folder::OnTimer</I></LI></P>
</UL>

<A NAME="413"><H2>Intrinsic Objects for Scripts</H2></A>

<P>Collaboration Data Objects (CDO), which you learned about in 
<A HREF="ch11a.htm">Chapter 11</A>, represent the intrinsic object model for your scripts. When 
you are writing agents, the Event Service passes you some objects 
and variables that you can use to quickly figure out what item 
triggered the event and in what folder the item is located. To 
help you access these items quickly as well as access other 
Exchange Server items, the Event Service also passes you a 
pre-logged-on CDO session so that you do not have to log on to the Exchange 
Server yourself. The intrinsic objects passed to your script by the 
Event Service are discussed in the following sections.</P>

<A NAME="414"><H3>EventDetails.Session</H3></A>

<P>The EventDetails.Session object represents the pre-logged-on CDO session 
for your script. The Event Service decides which identity to use for logging on 
to your script by using the identity of the author who most recently saved the 
script. This is important to consider for two reasons. First, the functionality of 
your application might depend on access to specific items in the Exchange 
Server Information Store. If the identity of the most recent author does not have 
access to this information, your script will not work.</P>
<P>Second, any mail you send from your script will use the name of the 
pre-logged-on CDO session because the Event Service is logging in as this 
user. The sent messages will also be saved in the Sent Items folder of that user. 
For these reasons, consider creating unique identities for your agents, and log 
on as these users to save your script. For example, if you are creating an 
expense report application, you might want to create a user named Expense 
Report Administrator and log on to your Exchange Server as that user. Then 
create and save your script using that identity. Any of the e-mail sent by the 
agent will appear to be from the Expense Report Administrator rather than from 
your personal account.</P>

<P>Since the CDO Session object is pre-logged-on, you can 
start accessing CDO objects directly from the EventDetails.Session 
object. It is a good idea in your script to assign 
the EventDetails.Session object to another variable for use 
throughout your script.</P>

<A NAME="415"><H3>EventDetails.FolderID</H3></A>

<P>The EventDetails.FolderID variable contains the entry identifier of the 
folder that the event took place in. By using this variable with the CDO 
<I>GetFolder</I> method, you can quickly retrieve the correct folder for the event. Again, it is 
a good idea to assign this variable to another variable in your script.</P>

<A NAME="416"><H3>EventDetails.MessageID</H3></A>

<P>The EventDetails.MessageID variable contains the entry identifier of the 
message that triggered the event. By using this variable with the CDO 
<I>GetMessage</I> method, you can quickly retrieve the exact message that the event 
corresponds to. Be aware, however, that timer events do not pass an 
EventDetails.MessageID variable because no message triggers the event; rather, an elapsed amount of 
time triggers the event. Keep this in mind when creating scripts, because an 
error related to EventDetails.MessageID for a timer event can be hard to track 
down when debugging.</P>

<A NAME="417"><H2>Instantiating Other COM Objects from Your Scripts</H2></A>

<P>In addition to using the CDO object library in your scripts, you can call 
other COM components by using the 
<I>CreateObject</I> method in VBScript. These components can include server-based object libraries such as ADO for database 
access and ADSI for directory access. You can even instantiate your own COM 
components developed using Visual Basic or Visual 
C++. There are two primary requirements for custom COM components to be used with the Event Service:</P>

<UL>
<P><LI>The components must not have any user interface elements. 
Because the Event Service is running on the Exchange Server without an 
interactive user at the keyboard, the component can't, for 
example, display dialog boxes or error messages.</LI></P>
<P><LI>The component must be programmed as an 
apartment-threaded component.</LI></P>
</UL>
<P>By remembering these two requirements, you can offload much of 
the work in your scripts to your COM components and include only the 
necessary script to instantiate your components.</P>
<P>To send errors from your component to the event script, 
use the <I>Error.Raise</I> method in your component. For debugging 
purposes, use the arguments of the <I>Raise</I> method to pass back the correct 
error number as well as the source and description of the error.</P>
<P>If your components instantiate other remote COM 
components, make sure to configure Distributed Component Object Model 
(DCOM) correctly so that the Windows NT account the Event Service is 
running under can correctly instantiate them. You can modify the 
permissions for DCOM using the DCOM Configuration program (dcomcnfg.exe).</P>
<P>In your objects, you can also create custom COM components that 
use the features of Microsoft Transaction Server (MTS) to make the 
components more scalable and robust. For example, components created with MTS 
can handle process isolation, security identity, resource pooling, and distributed 
transaction coordination. Your script can instantiate MTS objects using 
<I>CreateObject</I> in the same way it instantiates other types of objects.</P>

</BODY>
</HTML>





